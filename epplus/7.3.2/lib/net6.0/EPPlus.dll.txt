internal class EPPlusTest.Table.PivotTable.PivotTableCacheRecords : object {
    private static CultureInfo _ic;
    private static PivotNull _pivotNull;
    [CompilerGeneratedAttribute]
private PivotTableCacheInternal <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<List`1<object>> <CacheItems>k__BackingField;
    internal PivotTableCacheInternal Cache { get; }
    public List`1<List`1<object>> CacheItems { get; }
    public int RecordCount { get; }
    internal PivotTableCacheRecords(PivotTableCacheInternal cache);
    private static PivotTableCacheRecords();
    private void LoadRecords(ZipPackagePart part);
    private void AddRecord(XmlReader reader);
    internal void CreateRecords();
    [CompilerGeneratedAttribute]
internal PivotTableCacheInternal get_Cache();
    [CompilerGeneratedAttribute]
public List`1<List`1<object>> get_CacheItems();
    public int get_RecordCount();
}
internal class EPPlusTest.Utils.RollingBuffer : object {
    private bool _isRolling;
    private Byte[] _buffer;
    private int _index;
    internal RollingBuffer(int size);
    internal void Write(Byte[] bytes, int size);
    internal Byte[] GetBuffer();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("448")]
internal class OfficeOpenXml.Attributes.EPPlusDictionaryColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ColumnHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    public int Order { get; public set; }
    public String[] ColumnHeaders { get; public set; }
    public string KeyId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public String[] get_ColumnHeaders();
    [CompilerGeneratedAttribute]
public void set_ColumnHeaders(String[] value);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
public void set_KeyId(string value);
}
[AttributeUsageAttribute("1028")]
public class OfficeOpenXml.Attributes.EpplusFormulaTableColumnAttribute : EpplusTableColumnAttributeBase {
    private string _formula;
    private string _formulaR1C1;
    public string Formula { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public string get_Formula();
    public void set_Formula(string value);
    public string get_FormulaR1C1();
    public void set_FormulaR1C1(string value);
}
[AttributeUsageAttribute("32767")]
public class OfficeOpenXml.Attributes.EpplusIgnore : Attribute {
}
[AttributeUsageAttribute("448")]
public class OfficeOpenXml.Attributes.EpplusNestedTableColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderPrefix>k__BackingField;
    public int Order { get; public set; }
    public string HeaderPrefix { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public string get_HeaderPrefix();
    [CompilerGeneratedAttribute]
public void set_HeaderPrefix(string value);
}
[AttributeUsageAttribute("1028")]
public class OfficeOpenXml.Attributes.EpplusTableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TableStyles <TableStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFirstColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLastColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutofitColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCalculate>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NumberFormatProviderType>k__BackingField;
    public TableStyles TableStyle { get; public set; }
    public bool PrintHeaders { get; public set; }
    public bool ShowFirstColumn { get; public set; }
    public bool ShowLastColumn { get; public set; }
    public bool ShowTotal { get; public set; }
    public bool AutofitColumns { get; public set; }
    public bool AutoCalculate { get; public set; }
    public Type NumberFormatProviderType { get; public set; }
    [CompilerGeneratedAttribute]
public TableStyles get_TableStyle();
    [CompilerGeneratedAttribute]
public void set_TableStyle(TableStyles value);
    [CompilerGeneratedAttribute]
public bool get_PrintHeaders();
    [CompilerGeneratedAttribute]
public void set_PrintHeaders(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowFirstColumn();
    [CompilerGeneratedAttribute]
public void set_ShowFirstColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLastColumn();
    [CompilerGeneratedAttribute]
public void set_ShowLastColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTotal();
    [CompilerGeneratedAttribute]
public void set_ShowTotal(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutofitColumns();
    [CompilerGeneratedAttribute]
public void set_AutofitColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoCalculate();
    [CompilerGeneratedAttribute]
public void set_AutoCalculate(bool value);
    [CompilerGeneratedAttribute]
public Type get_NumberFormatProviderType();
    [CompilerGeneratedAttribute]
public void set_NumberFormatProviderType(Type value);
}
[AttributeUsageAttribute("448")]
public class OfficeOpenXml.Attributes.EpplusTableColumnAttribute : EpplusTableColumnAttributeBase {
}
public abstract class OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase : Attribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberFormatId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBuiltInHyperlinkStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private RowFunctions <TotalsRowFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalsRowFormula>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalsRowNumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalsRowLabel>k__BackingField;
    public int Order { get; public set; }
    public string Header { get; public set; }
    public string NumberFormat { get; public set; }
    public int NumberFormatId { get; public set; }
    public bool Hidden { get; public set; }
    public bool UseBuiltInHyperlinkStyle { get; public set; }
    public RowFunctions TotalsRowFunction { get; public set; }
    public string TotalsRowFormula { get; public set; }
    public string TotalsRowNumberFormat { get; public set; }
    public string TotalsRowLabel { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
    [CompilerGeneratedAttribute]
public int get_NumberFormatId();
    [CompilerGeneratedAttribute]
public void set_NumberFormatId(int value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseBuiltInHyperlinkStyle();
    [CompilerGeneratedAttribute]
public void set_UseBuiltInHyperlinkStyle(bool value);
    [CompilerGeneratedAttribute]
public RowFunctions get_TotalsRowFunction();
    [CompilerGeneratedAttribute]
public void set_TotalsRowFunction(RowFunctions value);
    [CompilerGeneratedAttribute]
public string get_TotalsRowFormula();
    [CompilerGeneratedAttribute]
public void set_TotalsRowFormula(string value);
    [CompilerGeneratedAttribute]
public string get_TotalsRowNumberFormat();
    [CompilerGeneratedAttribute]
public void set_TotalsRowNumberFormat(string value);
    [CompilerGeneratedAttribute]
public string get_TotalsRowLabel();
    [CompilerGeneratedAttribute]
public void set_TotalsRowLabel(string value);
}
[AttributeUsageAttribute("1028")]
public class OfficeOpenXml.Attributes.EPPlusTableColumnSortOrderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Properties>k__BackingField;
    public String[] Properties { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(String[] value);
}
[ExtensionAttribute]
public static class OfficeOpenXml.CalculationExtension : object {
    [ExtensionAttribute]
public static void Calculate(ExcelWorkbook workbook);
    [ExtensionAttribute]
public static void Calculate(ExcelWorkbook workbook, Action`1<ExcelCalculationOption> configHandler);
    [ExtensionAttribute]
public static void Calculate(ExcelWorkbook workbook, ExcelCalculationOption options);
    [ExtensionAttribute]
public static void Calculate(ExcelWorksheet worksheet);
    [ExtensionAttribute]
public static void Calculate(ExcelWorksheet worksheet, Action`1<ExcelCalculationOption> configHandler);
    [ExtensionAttribute]
public static void Calculate(ExcelWorksheet worksheet, ExcelCalculationOption options);
    [ExtensionAttribute]
public static void Calculate(ExcelRangeBase range);
    [ExtensionAttribute]
public static void Calculate(ExcelRangeBase range, Action`1<ExcelCalculationOption> configHandler);
    [ExtensionAttribute]
public static void Calculate(ExcelRangeBase range, ExcelCalculationOption options);
    [ExtensionAttribute]
public static object Calculate(ExcelWorksheet worksheet, string Formula);
    [ExtensionAttribute]
public static object Calculate(ExcelWorksheet worksheet, string Formula, ExcelCalculationOption options);
    internal static void Init(ExcelWorkbook workbook);
    private static void SetValue(ExcelWorkbook workbook, FormulaCell item, object v);
}
[FlagsAttribute]
internal enum OfficeOpenXml.CellFlags : Enum {
    public int value__;
    public static CellFlags RichText;
    public static CellFlags SharedFormula;
    public static CellFlags ArrayFormula;
    public static CellFlags DataTableFormula;
    public static CellFlags CanBeDynamicArray;
    public static CellFlags CellFlagCalculateCell;
    public static CellFlags CellFlagAlwaysCalculateArray;
}
public class OfficeOpenXml.Compatibility.CompatibilitySettings : object {
    private ExcelPackage excelPackage;
    public bool IsWorksheets1Based { get; public set; }
    internal CompatibilitySettings(ExcelPackage excelPackage);
    public bool get_IsWorksheets1Based();
    public void set_IsWorksheets1Based(bool value);
}
internal static class OfficeOpenXml.Compatibility.EncodingProviderCompatUtil : object {
    public static Encoding GetEncoding(int codePage);
    public static Encoding GetEncoding(string name);
}
internal static class OfficeOpenXml.Compatibility.EnumCompatUtil : object {
    public static bool TryParse(string s, T& result);
}
internal class OfficeOpenXml.Compatibility.System.Drawing.ColorTranslator : object {
    public static Color FromHtml(string htmlColor);
}
internal class OfficeOpenXml.Compatibility.TypeCompat : object {
    public static bool IsPrimitive(object v);
    public static bool IsSubclassOf(Type t, Type c);
    internal static bool IsGenericType(Type t);
    public static object GetPropertyValue(object v, string name);
}
public enum OfficeOpenXml.CompressionLevel : Enum {
    public int value__;
    public static CompressionLevel Level0;
    public static CompressionLevel None;
    public static CompressionLevel Level1;
    public static CompressionLevel BestSpeed;
    public static CompressionLevel Level2;
    public static CompressionLevel Level3;
    public static CompressionLevel Level4;
    public static CompressionLevel Level5;
    public static CompressionLevel Level6;
    public static CompressionLevel Default;
    public static CompressionLevel Level7;
    public static CompressionLevel Level8;
    public static CompressionLevel BestCompression;
    public static CompressionLevel Level9;
}
internal static class OfficeOpenXml.ConditionalFormatting.ColorScaleReadHandler : object {
    internal static ExcelConditionalFormattingRule CreateScales(ExcelAddress address, XmlReader xr, ExcelWorksheet ws);
    private static string ReadExtFormulaOrValue(XmlReader xr, string valueNode, Nullable`1<eExcelConditionalFormattingValueObjectType> type);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingAverageGroup {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingBeginsWith {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingBetween {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingColorScaleGroup {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsBlanks {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsErrors {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsText {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup {
    public bool ShowValue { get; public set; }
    public bool Gradient { get; public set; }
    public bool Border { get; public set; }
    public bool NegativeBarColorSameAsPositive { get; public set; }
    public bool NegativeBarBorderColorSameAsPositive { get; public set; }
    public eExcelDatabarAxisPosition AxisPosition { get; public set; }
    public ExcelConditionalFormattingIconDataBarValue LowValue { get; }
    public ExcelConditionalFormattingIconDataBarValue HighValue { get; }
    public Color Color { get; public set; }
    public ExcelDxfColor FillColor { get; }
    public ExcelDxfColor BorderColor { get; }
    public ExcelDxfColor NegativeFillColor { get; }
    public ExcelDxfColor NegativeBorderColor { get; }
    public ExcelDxfColor AxisColor { get; }
    public eDatabarDirection Direction { get; public set; }
    public abstract virtual bool get_ShowValue();
    public abstract virtual void set_ShowValue(bool value);
    public abstract virtual bool get_Gradient();
    public abstract virtual void set_Gradient(bool value);
    public abstract virtual bool get_Border();
    public abstract virtual void set_Border(bool value);
    public abstract virtual bool get_NegativeBarColorSameAsPositive();
    public abstract virtual void set_NegativeBarColorSameAsPositive(bool value);
    public abstract virtual bool get_NegativeBarBorderColorSameAsPositive();
    public abstract virtual void set_NegativeBarBorderColorSameAsPositive(bool value);
    public abstract virtual eExcelDatabarAxisPosition get_AxisPosition();
    public abstract virtual void set_AxisPosition(eExcelDatabarAxisPosition value);
    public abstract virtual ExcelConditionalFormattingIconDataBarValue get_LowValue();
    public abstract virtual ExcelConditionalFormattingIconDataBarValue get_HighValue();
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual ExcelDxfColor get_FillColor();
    public abstract virtual ExcelDxfColor get_BorderColor();
    public abstract virtual ExcelDxfColor get_NegativeFillColor();
    public abstract virtual ExcelDxfColor get_NegativeBorderColor();
    public abstract virtual ExcelDxfColor get_AxisColor();
    public abstract virtual eDatabarDirection get_Direction();
    public abstract virtual void set_Direction(eDatabarDirection value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDuplicateValues {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingEndsWith {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingEqual {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingExpression {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFiveIconSet {
    public ExcelConditionalFormattingIconDataBarValue Icon5 { get; }
    public abstract virtual ExcelConditionalFormattingIconDataBarValue get_Icon5();
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFourIconSet`1 {
    public ExcelConditionalFormattingIconDataBarValue Icon4 { get; }
    public abstract virtual ExcelConditionalFormattingIconDataBarValue get_Icon4();
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingGreaterThan {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingGreaterThanOrEqual {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1 {
    public bool Reverse { get; public set; }
    public bool ShowValue { get; public set; }
    public bool IconSetPercent { get; public set; }
    public bool Custom { get; }
    public T IconSet { get; public set; }
    public abstract virtual bool get_Reverse();
    public abstract virtual void set_Reverse(bool value);
    public abstract virtual bool get_ShowValue();
    public abstract virtual void set_ShowValue(bool value);
    public abstract virtual bool get_IconSetPercent();
    public abstract virtual void set_IconSetPercent(bool value);
    public abstract virtual bool get_Custom();
    public abstract virtual T get_IconSet();
    public abstract virtual void set_IconSet(T value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingLessThan {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingLessThanOrEqual {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotBetween {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsBlanks {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsErrors {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsText {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotEqual {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule {
    public eExcelConditionalFormattingRuleType Type { get; }
    public ExcelAddress Address { get; public set; }
    public int Priority { get; public set; }
    public bool StopIfTrue { get; public set; }
    public ExcelDxfStyleConditionalFormatting Style { get; }
    public bool PivotTable { get; public set; }
    public ExcelConditionalFormattingAsType As { get; }
    public abstract virtual eExcelConditionalFormattingRuleType get_Type();
    public abstract virtual ExcelAddress get_Address();
    public abstract virtual void set_Address(ExcelAddress value);
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual bool get_StopIfTrue();
    public abstract virtual void set_StopIfTrue(bool value);
    public abstract virtual ExcelDxfStyleConditionalFormatting get_Style();
    public abstract virtual bool get_PivotTable();
    public abstract virtual void set_PivotTable(bool value);
    public abstract virtual ExcelConditionalFormattingAsType get_As();
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingStdDevGroup {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeColorScale {
    public ExcelConditionalFormattingColorScaleValue MiddleValue { get; public set; }
    public abstract virtual ExcelConditionalFormattingColorScaleValue get_MiddleValue();
    public abstract virtual void set_MiddleValue(ExcelConditionalFormattingColorScaleValue value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1 {
    public ExcelConditionalFormattingIconDataBarValue Icon1 { get; }
    public ExcelConditionalFormattingIconDataBarValue Icon2 { get; }
    public ExcelConditionalFormattingIconDataBarValue Icon3 { get; }
    public abstract virtual ExcelConditionalFormattingIconDataBarValue get_Icon1();
    public abstract virtual ExcelConditionalFormattingIconDataBarValue get_Icon2();
    public abstract virtual ExcelConditionalFormattingIconDataBarValue get_Icon3();
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTimePeriodGroup {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTopBottomGroup {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTwoColorScale {
    public ExcelConditionalFormattingColorScaleValue LowValue { get; public set; }
    public ExcelConditionalFormattingColorScaleValue HighValue { get; public set; }
    public abstract virtual ExcelConditionalFormattingColorScaleValue get_LowValue();
    public abstract virtual void set_LowValue(ExcelConditionalFormattingColorScaleValue value);
    public abstract virtual ExcelConditionalFormattingColorScaleValue get_HighValue();
    public abstract virtual void set_HighValue(ExcelConditionalFormattingColorScaleValue value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingUniqueValues {
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula {
    public string Formula { get; public set; }
    public abstract virtual string get_Formula();
    public abstract virtual void set_Formula(string value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula2 {
    public string Formula2 { get; public set; }
    public abstract virtual string get_Formula2();
    public abstract virtual void set_Formula2(string value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithRank {
    public ushort Rank { get; public set; }
    public abstract virtual ushort get_Rank();
    public abstract virtual void set_Rank(ushort value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithReverse {
    public bool Reverse { get; public set; }
    public abstract virtual bool get_Reverse();
    public abstract virtual void set_Reverse(bool value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithShowValue {
    public bool ShowValue { get; public set; }
    public abstract virtual bool get_ShowValue();
    public abstract virtual void set_ShowValue(bool value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithStdDev {
    public ushort StdDev { get; public set; }
    public abstract virtual ushort get_StdDev();
    public abstract virtual void set_StdDev(ushort value);
}
public interface OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithText {
    public string Text { get; public set; }
    public string Formula { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_Formula();
    public abstract virtual void set_Formula(string value);
}
public enum OfficeOpenXml.ConditionalFormatting.eDatabarDirection : Enum {
    public int value__;
    public static eDatabarDirection Context;
    public static eDatabarDirection LeftToRight;
    public static eDatabarDirection RightToLeft;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType : Enum {
    public int value__;
    public static eExcelconditionalFormatting3IconsSetType Arrows;
    public static eExcelconditionalFormatting3IconsSetType ArrowsGray;
    public static eExcelconditionalFormatting3IconsSetType Flags;
    public static eExcelconditionalFormatting3IconsSetType Signs;
    public static eExcelconditionalFormatting3IconsSetType Symbols;
    public static eExcelconditionalFormatting3IconsSetType Symbols2;
    public static eExcelconditionalFormatting3IconsSetType TrafficLights1;
    public static eExcelconditionalFormatting3IconsSetType TrafficLights2;
    public static eExcelconditionalFormatting3IconsSetType Stars;
    public static eExcelconditionalFormatting3IconsSetType Triangles;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType : Enum {
    public int value__;
    public static eExcelconditionalFormatting4IconsSetType Arrows;
    public static eExcelconditionalFormatting4IconsSetType ArrowsGray;
    public static eExcelconditionalFormatting4IconsSetType Rating;
    public static eExcelconditionalFormatting4IconsSetType RedToBlack;
    public static eExcelconditionalFormatting4IconsSetType TrafficLights;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType : Enum {
    public int value__;
    public static eExcelconditionalFormatting5IconsSetType Arrows;
    public static eExcelconditionalFormatting5IconsSetType ArrowsGray;
    public static eExcelconditionalFormatting5IconsSetType Quarters;
    public static eExcelconditionalFormatting5IconsSetType Rating;
    public static eExcelconditionalFormatting5IconsSetType Boxes;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingCustomIcon : Enum {
    public int value__;
    public static eExcelconditionalFormattingCustomIcon RedDownArrow;
    public static eExcelconditionalFormattingCustomIcon YellowSideArrow;
    public static eExcelconditionalFormattingCustomIcon GreenUpArrow;
    public static eExcelconditionalFormattingCustomIcon GrayDownArrow;
    public static eExcelconditionalFormattingCustomIcon GraySideArrow;
    public static eExcelconditionalFormattingCustomIcon GrayUpArrow;
    public static eExcelconditionalFormattingCustomIcon RedFlag;
    public static eExcelconditionalFormattingCustomIcon YellowFlag;
    public static eExcelconditionalFormattingCustomIcon GreenFlag;
    public static eExcelconditionalFormattingCustomIcon RedCircleWithBorder;
    public static eExcelconditionalFormattingCustomIcon YellowCircle;
    public static eExcelconditionalFormattingCustomIcon GreenCircle;
    public static eExcelconditionalFormattingCustomIcon RedTrafficLight;
    public static eExcelconditionalFormattingCustomIcon YellowTrafficLight;
    public static eExcelconditionalFormattingCustomIcon GreenTrafficLight;
    public static eExcelconditionalFormattingCustomIcon RedDiamond;
    public static eExcelconditionalFormattingCustomIcon YellowTriangle;
    public static eExcelconditionalFormattingCustomIcon RedCrossSymbol;
    public static eExcelconditionalFormattingCustomIcon YellowExclamationSymbol;
    public static eExcelconditionalFormattingCustomIcon GreenCheckSymbol;
    public static eExcelconditionalFormattingCustomIcon RedCross;
    public static eExcelconditionalFormattingCustomIcon YellowExclamation;
    public static eExcelconditionalFormattingCustomIcon GreenCheck;
    public static eExcelconditionalFormattingCustomIcon SilverStar;
    public static eExcelconditionalFormattingCustomIcon HalfGoldStar;
    public static eExcelconditionalFormattingCustomIcon GoldStar;
    public static eExcelconditionalFormattingCustomIcon RedDownTriangle;
    public static eExcelconditionalFormattingCustomIcon YellowDash;
    public static eExcelconditionalFormattingCustomIcon GreenUpTriangle;
    public static eExcelconditionalFormattingCustomIcon YellowDownInclineArrow;
    public static eExcelconditionalFormattingCustomIcon YellowUpInclineArrow;
    public static eExcelconditionalFormattingCustomIcon GrayDownInclineArrow;
    public static eExcelconditionalFormattingCustomIcon GrayUpInclineArrow;
    public static eExcelconditionalFormattingCustomIcon BlackCircle;
    public static eExcelconditionalFormattingCustomIcon GrayCircle;
    public static eExcelconditionalFormattingCustomIcon PinkCircle;
    public static eExcelconditionalFormattingCustomIcon RedCircle;
    public static eExcelconditionalFormattingCustomIcon SignalMeterWithOneFilledBar;
    public static eExcelconditionalFormattingCustomIcon SignalMeterWithTwoFilledBars;
    public static eExcelconditionalFormattingCustomIcon SignalMeterWithThreeFilledBars;
    public static eExcelconditionalFormattingCustomIcon SignalMeterWithFourFilledBars;
    public static eExcelconditionalFormattingCustomIcon BlackCircleWithBorder;
    public static eExcelconditionalFormattingCustomIcon SignalMeterWithNoFilledBars;
    public static eExcelconditionalFormattingCustomIcon WhiteCircle;
    public static eExcelconditionalFormattingCustomIcon CircleWithThreeWhiteQuarters;
    public static eExcelconditionalFormattingCustomIcon CircleWithTwoWhiteQuarters;
    public static eExcelconditionalFormattingCustomIcon CircleWithOneWhiteQuarter;
    public static eExcelconditionalFormattingCustomIcon ZeroFilledBoxes;
    public static eExcelconditionalFormattingCustomIcon OneFilledBox;
    public static eExcelconditionalFormattingCustomIcon TwoFilledBoxes;
    public static eExcelconditionalFormattingCustomIcon ThreeFilledBoxes;
    public static eExcelconditionalFormattingCustomIcon FourFilledBoxes;
    public static eExcelconditionalFormattingCustomIcon NoIcon;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType : Enum {
    public int value__;
    public static eExcelconditionalFormattingIconsSetType ThreeArrows;
    public static eExcelconditionalFormattingIconsSetType ThreeArrowsGray;
    public static eExcelconditionalFormattingIconsSetType ThreeFlags;
    public static eExcelconditionalFormattingIconsSetType ThreeSigns;
    public static eExcelconditionalFormattingIconsSetType ThreeSymbols;
    public static eExcelconditionalFormattingIconsSetType ThreeSymbols2;
    public static eExcelconditionalFormattingIconsSetType ThreeTrafficLights1;
    public static eExcelconditionalFormattingIconsSetType ThreeTrafficLights2;
    public static eExcelconditionalFormattingIconsSetType FourArrows;
    public static eExcelconditionalFormattingIconsSetType FourArrowsGray;
    public static eExcelconditionalFormattingIconsSetType FourRating;
    public static eExcelconditionalFormattingIconsSetType FourRedToBlack;
    public static eExcelconditionalFormattingIconsSetType FourTrafficLights;
    public static eExcelconditionalFormattingIconsSetType FiveArrows;
    public static eExcelconditionalFormattingIconsSetType FiveArrowsGray;
    public static eExcelconditionalFormattingIconsSetType FiveQuarters;
    public static eExcelconditionalFormattingIconsSetType FiveRating;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType : Enum {
    public int value__;
    public static eExcelConditionalFormattingOperatorType BeginsWith;
    public static eExcelConditionalFormattingOperatorType Between;
    public static eExcelConditionalFormattingOperatorType ContainsText;
    public static eExcelConditionalFormattingOperatorType EndsWith;
    public static eExcelConditionalFormattingOperatorType Equal;
    public static eExcelConditionalFormattingOperatorType GreaterThan;
    public static eExcelConditionalFormattingOperatorType GreaterThanOrEqual;
    public static eExcelConditionalFormattingOperatorType LessThan;
    public static eExcelConditionalFormattingOperatorType LessThanOrEqual;
    public static eExcelConditionalFormattingOperatorType NotBetween;
    public static eExcelConditionalFormattingOperatorType NotContains;
    public static eExcelConditionalFormattingOperatorType NotEqual;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType : Enum {
    public int value__;
    public static eExcelConditionalFormattingRuleType AboveAverage;
    public static eExcelConditionalFormattingRuleType AboveOrEqualAverage;
    public static eExcelConditionalFormattingRuleType BelowAverage;
    public static eExcelConditionalFormattingRuleType BelowOrEqualAverage;
    public static eExcelConditionalFormattingRuleType AboveStdDev;
    public static eExcelConditionalFormattingRuleType BelowStdDev;
    public static eExcelConditionalFormattingRuleType Bottom;
    public static eExcelConditionalFormattingRuleType BottomPercent;
    public static eExcelConditionalFormattingRuleType Top;
    public static eExcelConditionalFormattingRuleType TopPercent;
    public static eExcelConditionalFormattingRuleType Last7Days;
    public static eExcelConditionalFormattingRuleType LastMonth;
    public static eExcelConditionalFormattingRuleType LastWeek;
    public static eExcelConditionalFormattingRuleType NextMonth;
    public static eExcelConditionalFormattingRuleType NextWeek;
    public static eExcelConditionalFormattingRuleType ThisMonth;
    public static eExcelConditionalFormattingRuleType ThisWeek;
    public static eExcelConditionalFormattingRuleType Today;
    public static eExcelConditionalFormattingRuleType Tomorrow;
    public static eExcelConditionalFormattingRuleType Yesterday;
    public static eExcelConditionalFormattingRuleType BeginsWith;
    public static eExcelConditionalFormattingRuleType Between;
    public static eExcelConditionalFormattingRuleType ContainsBlanks;
    public static eExcelConditionalFormattingRuleType ContainsErrors;
    public static eExcelConditionalFormattingRuleType ContainsText;
    public static eExcelConditionalFormattingRuleType DuplicateValues;
    public static eExcelConditionalFormattingRuleType EndsWith;
    public static eExcelConditionalFormattingRuleType Equal;
    public static eExcelConditionalFormattingRuleType Expression;
    public static eExcelConditionalFormattingRuleType GreaterThan;
    public static eExcelConditionalFormattingRuleType GreaterThanOrEqual;
    public static eExcelConditionalFormattingRuleType LessThan;
    public static eExcelConditionalFormattingRuleType LessThanOrEqual;
    public static eExcelConditionalFormattingRuleType NotBetween;
    public static eExcelConditionalFormattingRuleType NotContains;
    public static eExcelConditionalFormattingRuleType NotContainsBlanks;
    public static eExcelConditionalFormattingRuleType NotContainsErrors;
    public static eExcelConditionalFormattingRuleType NotContainsText;
    public static eExcelConditionalFormattingRuleType NotEqual;
    public static eExcelConditionalFormattingRuleType UniqueValues;
    public static eExcelConditionalFormattingRuleType ThreeColorScale;
    public static eExcelConditionalFormattingRuleType TwoColorScale;
    public static eExcelConditionalFormattingRuleType ThreeIconSet;
    public static eExcelConditionalFormattingRuleType FourIconSet;
    public static eExcelConditionalFormattingRuleType FiveIconSet;
    public static eExcelConditionalFormattingRuleType DataBar;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType : Enum {
    public int value__;
    public static eExcelConditionalFormattingTimePeriodType Last7Days;
    public static eExcelConditionalFormattingTimePeriodType LastMonth;
    public static eExcelConditionalFormattingTimePeriodType LastWeek;
    public static eExcelConditionalFormattingTimePeriodType NextMonth;
    public static eExcelConditionalFormattingTimePeriodType NextWeek;
    public static eExcelConditionalFormattingTimePeriodType ThisMonth;
    public static eExcelConditionalFormattingTimePeriodType ThisWeek;
    public static eExcelConditionalFormattingTimePeriodType Today;
    public static eExcelConditionalFormattingTimePeriodType Tomorrow;
    public static eExcelConditionalFormattingTimePeriodType Yesterday;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType : Enum {
    public int value__;
    public static eExcelConditionalFormattingValueObjectNodeType Cfvo;
    public static eExcelConditionalFormattingValueObjectNodeType Color;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition : Enum {
    public int value__;
    public static eExcelConditionalFormattingValueObjectPosition Low;
    public static eExcelConditionalFormattingValueObjectPosition Middle;
    public static eExcelConditionalFormattingValueObjectPosition High;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType : Enum {
    public int value__;
    public static eExcelConditionalFormattingValueObjectType Formula;
    public static eExcelConditionalFormattingValueObjectType Max;
    public static eExcelConditionalFormattingValueObjectType Min;
    public static eExcelConditionalFormattingValueObjectType Num;
    public static eExcelConditionalFormattingValueObjectType Percent;
    public static eExcelConditionalFormattingValueObjectType Percentile;
    public static eExcelConditionalFormattingValueObjectType AutoMin;
    public static eExcelConditionalFormattingValueObjectType AutoMax;
}
public enum OfficeOpenXml.ConditionalFormatting.eExcelDatabarAxisPosition : Enum {
    public int value__;
    public static eExcelDatabarAxisPosition Automatic;
    public static eExcelDatabarAxisPosition Middle;
    public static eExcelDatabarAxisPosition None;
}
public class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType : object {
    private IExcelConditionalFormattingRule _rule;
    public IExcelConditionalFormattingAverageGroup Average { get; }
    public IExcelConditionalFormattingStdDevGroup StdDev { get; }
    public IExcelConditionalFormattingTopBottomGroup TopBottom { get; }
    public IExcelConditionalFormattingTimePeriodGroup DateTimePeriod { get; }
    public IExcelConditionalFormattingBetween Between { get; }
    public IExcelConditionalFormattingContainsBlanks ContainsBlanks { get; }
    public IExcelConditionalFormattingContainsErrors ContainsErrors { get; }
    public IExcelConditionalFormattingContainsText ContainsText { get; }
    public IExcelConditionalFormattingNotContainsBlanks NotContainsBlanks { get; }
    public IExcelConditionalFormattingNotContainsText NotContainsText { get; }
    public IExcelConditionalFormattingNotContainsErrors NotContainsErrors { get; }
    public IExcelConditionalFormattingNotBetween NotBetween { get; }
    public IExcelConditionalFormattingEqual Equal { get; }
    public IExcelConditionalFormattingNotEqual NotEqual { get; }
    public IExcelConditionalFormattingDuplicateValues DuplicateValues { get; }
    public IExcelConditionalFormattingBeginsWith BeginsWith { get; }
    public IExcelConditionalFormattingEndsWith EndsWith { get; }
    public IExcelConditionalFormattingExpression Expression { get; }
    public IExcelConditionalFormattingGreaterThan GreaterThan { get; }
    public IExcelConditionalFormattingGreaterThanOrEqual GreaterThanOrEqual { get; }
    public IExcelConditionalFormattingLessThan LessThan { get; }
    public IExcelConditionalFormattingLessThanOrEqual LessThanOrEqual { get; }
    public IExcelConditionalFormattingUniqueValues UniqueValues { get; }
    public IExcelConditionalFormattingTwoColorScale TwoColorScale { get; }
    public IExcelConditionalFormattingThreeColorScale ThreeColorScale { get; }
    public IExcelConditionalFormattingThreeIconSet`1<eExcelconditionalFormatting3IconsSetType> ThreeIconSet { get; }
    public IExcelConditionalFormattingFourIconSet`1<eExcelconditionalFormatting4IconsSetType> FourIconSet { get; }
    public IExcelConditionalFormattingFiveIconSet FiveIconSet { get; }
    public IExcelConditionalFormattingDataBarGroup DataBar { get; }
    internal ExcelConditionalFormattingAsType(IExcelConditionalFormattingRule rule);
    public T Type();
    public IExcelConditionalFormattingAverageGroup get_Average();
    public IExcelConditionalFormattingStdDevGroup get_StdDev();
    public IExcelConditionalFormattingTopBottomGroup get_TopBottom();
    public IExcelConditionalFormattingTimePeriodGroup get_DateTimePeriod();
    public IExcelConditionalFormattingBetween get_Between();
    public IExcelConditionalFormattingContainsBlanks get_ContainsBlanks();
    public IExcelConditionalFormattingContainsErrors get_ContainsErrors();
    public IExcelConditionalFormattingContainsText get_ContainsText();
    public IExcelConditionalFormattingNotContainsBlanks get_NotContainsBlanks();
    public IExcelConditionalFormattingNotContainsText get_NotContainsText();
    public IExcelConditionalFormattingNotContainsErrors get_NotContainsErrors();
    public IExcelConditionalFormattingNotBetween get_NotBetween();
    public IExcelConditionalFormattingEqual get_Equal();
    public IExcelConditionalFormattingNotEqual get_NotEqual();
    public IExcelConditionalFormattingDuplicateValues get_DuplicateValues();
    public IExcelConditionalFormattingBeginsWith get_BeginsWith();
    public IExcelConditionalFormattingEndsWith get_EndsWith();
    public IExcelConditionalFormattingExpression get_Expression();
    public IExcelConditionalFormattingGreaterThan get_GreaterThan();
    public IExcelConditionalFormattingGreaterThanOrEqual get_GreaterThanOrEqual();
    public IExcelConditionalFormattingLessThan get_LessThan();
    public IExcelConditionalFormattingLessThanOrEqual get_LessThanOrEqual();
    public IExcelConditionalFormattingUniqueValues get_UniqueValues();
    public IExcelConditionalFormattingTwoColorScale get_TwoColorScale();
    public IExcelConditionalFormattingThreeColorScale get_ThreeColorScale();
    public IExcelConditionalFormattingThreeIconSet`1<eExcelconditionalFormatting3IconsSetType> get_ThreeIconSet();
    public IExcelConditionalFormattingFourIconSet`1<eExcelconditionalFormatting4IconsSetType> get_FourIconSet();
    public IExcelConditionalFormattingFiveIconSet get_FiveIconSet();
    public IExcelConditionalFormattingDataBarGroup get_DataBar();
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup : ExcelConditionalFormattingRule {
    private Nullable`1<double> average;
    internal ExcelConditionalFormattingAverageGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingAverageGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingAverageGroup(ExcelConditionalFormattingAverageGroup copy, ExcelWorksheet ws);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet ws);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith : ExcelConditionalFormattingRule {
    internal bool IsExtLst { get; }
    public string Formula { get; public set; }
    public string Text { get; public set; }
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingBeginsWith(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingBeginsWith(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingBeginsWith(ExcelConditionalFormattingBeginsWith copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool get_IsExtLst();
    public virtual string get_Formula();
    public virtual void set_Formula(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    private void UpdateFormula();
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween : ExcelConditionalFormattingRule {
    private Nullable`1<double> largestNumFormula;
    private Nullable`1<double> smallestNumFormula;
    internal ExcelConditionalFormattingBetween(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingBetween(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingBetween(ExcelConditionalFormattingBetween copy, ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection : object {
    private List`1<ExcelConditionalFormattingRule> _rules;
    private ExcelWorksheet _ws;
    private int LastPriority;
    internal Dictionary`2<string, ExcelConditionalFormattingRule> localAndExtDict;
    public ExcelConditionalFormattingRule Item { get; public set; }
    public int Count { get; }
    internal ExcelConditionalFormattingCollection(ExcelWorksheet ws);
    internal void ReadRegularConditionalFormattings(XmlReader xr);
    internal void ReadExtConditionalFormattings(XmlReader xr);
    private void ApplyIconSetAttributes(bool showValue, bool percent, bool reverse, IExcelConditionalFormattingIconSetGroup`1<T> group);
    private void ApplyIconSetExtValues(ExcelConditionalFormattingIconDataBarValue[] iconArr, List`1<string> types, List`1<string> values, List`1<bool> gteValues, List`1<string> customIconTypes, List`1<int> customIconIds);
    private Color GetColorFromExcelRgb(string rgb);
    private string RemoveAuto(string typeString);
    internal void CopyRule(ExcelConditionalFormattingRule rule, ExcelAddress address);
    [IteratorStateMachineAttribute("OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection/<System-Collections-Generic-IEnumerable<OfficeOpenXml-ConditionalFormatting-Contracts-IExcelConditionalFormattingRule>-GetEnumerator>d__12")]
private sealed virtual override IEnumerator`1<IExcelConditionalFormattingRule> System.Collections.Generic.IEnumerable<OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelConditionalFormattingRule get_Item(int index);
    public void set_Item(int index, ExcelConditionalFormattingRule value);
    public int get_Count();
    public void RemoveAll();
    public void Remove(IExcelConditionalFormattingRule item);
    public void RemoveAt(int index);
    public void RemoveByPriority(int priority);
    public IExcelConditionalFormattingRule RulesByPriority(int priority);
    internal void ChangePriority(ExcelConditionalFormattingRule rule, int priorityNew);
    internal IExcelConditionalFormattingRule AddRule(eExcelConditionalFormattingRuleType type, ExcelAddress address, bool allowNullAddress);
    internal void ClearTempExportCacheForAllCFs();
    public IExcelConditionalFormattingGreaterThan AddGreaterThan(ExcelAddress address);
    public IExcelConditionalFormattingGreaterThan AddGreaterThan(string address);
    public IExcelConditionalFormattingLessThan AddLessThan(ExcelAddress address);
    public IExcelConditionalFormattingLessThan AddLessThan(string address);
    public IExcelConditionalFormattingBetween AddBetween(ExcelAddress address);
    public IExcelConditionalFormattingBetween AddBetween(string address);
    public IExcelConditionalFormattingEqual AddEqual(ExcelAddress address);
    public IExcelConditionalFormattingEqual AddEqual(string address);
    public IExcelConditionalFormattingContainsText AddTextContains(ExcelAddress address);
    public IExcelConditionalFormattingContainsText AddTextContains(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddYesterday(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddYesterday(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddToday(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddToday(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddTomorrow(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddTomorrow(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddLast7Days(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddLast7Days(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddLastWeek(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddLastWeek(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddThisWeek(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddThisWeek(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddNextWeek(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddNextWeek(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddLastMonth(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddLastMonth(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddThisMonth(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddThisMonth(string address);
    public IExcelConditionalFormattingTimePeriodGroup AddNextMonth(ExcelAddress address);
    public IExcelConditionalFormattingTimePeriodGroup AddNextMonth(string address);
    public IExcelConditionalFormattingDuplicateValues AddDuplicateValues(ExcelAddress address);
    public IExcelConditionalFormattingDuplicateValues AddDuplicateValues(string address);
    public IExcelConditionalFormattingTopBottomGroup AddBottom(ExcelAddress address);
    public IExcelConditionalFormattingTopBottomGroup AddBottom(string address);
    public IExcelConditionalFormattingTopBottomGroup AddBottomPercent(ExcelAddress address);
    public IExcelConditionalFormattingTopBottomGroup AddBottomPercent(string address);
    public IExcelConditionalFormattingTopBottomGroup AddTop(ExcelAddress address);
    public IExcelConditionalFormattingTopBottomGroup AddTop(string address);
    public IExcelConditionalFormattingTopBottomGroup AddTopPercent(ExcelAddress address);
    public IExcelConditionalFormattingTopBottomGroup AddTopPercent(string address);
    public IExcelConditionalFormattingAverageGroup AddAboveAverage(ExcelAddress address);
    public IExcelConditionalFormattingAverageGroup AddAboveAverage(string address);
    public IExcelConditionalFormattingAverageGroup AddAboveOrEqualAverage(ExcelAddress address);
    public IExcelConditionalFormattingAverageGroup AddAboveOrEqualAverage(string address);
    public IExcelConditionalFormattingAverageGroup AddBelowAverage(ExcelAddress address);
    public IExcelConditionalFormattingAverageGroup AddBelowAverage(string address);
    public IExcelConditionalFormattingAverageGroup AddBelowOrEqualAverage(ExcelAddress address);
    public IExcelConditionalFormattingAverageGroup AddBelowOrEqualAverage(string address);
    public IExcelConditionalFormattingStdDevGroup AddAboveStdDev(ExcelAddress address);
    public IExcelConditionalFormattingStdDevGroup AddAboveStdDev(string address);
    public IExcelConditionalFormattingStdDevGroup AddBelowStdDev(ExcelAddress address);
    public IExcelConditionalFormattingStdDevGroup AddBelowStdDev(string address);
    public IExcelConditionalFormattingBeginsWith AddBeginsWith(ExcelAddress address);
    public IExcelConditionalFormattingBeginsWith AddBeginsWith(string address);
    public IExcelConditionalFormattingContainsBlanks AddContainsBlanks(ExcelAddress address);
    public IExcelConditionalFormattingContainsBlanks AddContainsBlanks(string address);
    public IExcelConditionalFormattingContainsErrors AddContainsErrors(ExcelAddress address);
    public IExcelConditionalFormattingContainsErrors AddContainsErrors(string address);
    public IExcelConditionalFormattingContainsText AddContainsText(ExcelAddress address);
    public IExcelConditionalFormattingContainsText AddContainsText(string address);
    public IExcelConditionalFormattingEndsWith AddEndsWith(ExcelAddress address);
    public IExcelConditionalFormattingEndsWith AddEndsWith(string address);
    public IExcelConditionalFormattingExpression AddExpression(ExcelAddress address);
    public IExcelConditionalFormattingExpression AddExpression(string address);
    public IExcelConditionalFormattingGreaterThanOrEqual AddGreaterThanOrEqual(ExcelAddress address);
    public IExcelConditionalFormattingGreaterThanOrEqual AddGreaterThanOrEqual(string address);
    public IExcelConditionalFormattingLessThanOrEqual AddLessThanOrEqual(ExcelAddress address);
    public IExcelConditionalFormattingLessThanOrEqual AddLessThanOrEqual(string address);
    public IExcelConditionalFormattingNotBetween AddNotBetween(ExcelAddress address);
    public IExcelConditionalFormattingNotBetween AddNotBetween(string address);
    public IExcelConditionalFormattingNotContainsBlanks AddNotContainsBlanks(ExcelAddress address);
    public IExcelConditionalFormattingNotContainsBlanks AddNotContainsBlanks(string address);
    public IExcelConditionalFormattingNotContainsErrors AddNotContainsErrors(ExcelAddress address);
    public IExcelConditionalFormattingNotContainsErrors AddNotContainsErrors(string address);
    public IExcelConditionalFormattingNotContainsText AddNotContainsText(ExcelAddress address);
    public IExcelConditionalFormattingNotContainsText AddNotContainsText(string address);
    public IExcelConditionalFormattingNotEqual AddNotEqual(ExcelAddress address);
    public IExcelConditionalFormattingNotEqual AddNotEqual(string address);
    public IExcelConditionalFormattingUniqueValues AddUniqueValues(ExcelAddress address);
    public IExcelConditionalFormattingUniqueValues AddUniqueValues(string address);
    public IExcelConditionalFormattingThreeColorScale AddThreeColorScale(ExcelAddress address);
    public IExcelConditionalFormattingThreeColorScale AddThreeColorScale(string address);
    public IExcelConditionalFormattingTwoColorScale AddTwoColorScale(ExcelAddress address);
    public IExcelConditionalFormattingTwoColorScale AddTwoColorScale(string address);
    public IExcelConditionalFormattingThreeIconSet`1<eExcelconditionalFormatting3IconsSetType> AddThreeIconSet(ExcelAddress Address, eExcelconditionalFormatting3IconsSetType IconSet);
    public IExcelConditionalFormattingThreeIconSet`1<eExcelconditionalFormatting3IconsSetType> AddThreeIconSet(string Address, eExcelconditionalFormatting3IconsSetType IconSet);
    public IExcelConditionalFormattingFourIconSet`1<eExcelconditionalFormatting4IconsSetType> AddFourIconSet(ExcelAddress Address, eExcelconditionalFormatting4IconsSetType IconSet);
    public IExcelConditionalFormattingFourIconSet`1<eExcelconditionalFormatting4IconsSetType> AddFourIconSet(string Address, eExcelconditionalFormatting4IconsSetType IconSet);
    public IExcelConditionalFormattingFiveIconSet AddFiveIconSet(ExcelAddress Address, eExcelconditionalFormatting5IconsSetType IconSet);
    public IExcelConditionalFormattingFiveIconSet AddFiveIconSet(string Address, eExcelconditionalFormatting5IconsSetType IconSet);
    public IExcelConditionalFormattingDataBarGroup AddDatabar(ExcelAddress Address, Color color);
    public IExcelConditionalFormattingDataBarGroup AddDatabar(string Address, Color color);
}
public class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue : object {
    private int _priority;
    [CompilerGeneratedAttribute]
private eExcelConditionalFormattingValueObjectType <Type>k__BackingField;
    private ExcelDxfColor _colorSettings;
    private Color _color;
    private double _value;
    private string _formula;
    public eExcelConditionalFormattingValueObjectType Type { get; public set; }
    public ExcelDxfColor ColorSettings { get; internal set; }
    public Color Color { get; public set; }
    public double Value { get; public set; }
    public string Formula { get; public set; }
    private ExcelConditionalFormattingColorScaleValue(Nullable`1<eExcelConditionalFormattingValueObjectType> type, Color color, double value, string formula, int priority, ExcelStyles styles);
    internal ExcelConditionalFormattingColorScaleValue(Nullable`1<eExcelConditionalFormattingValueObjectType> type, Color color, int priority, ExcelStyles styles);
    [CompilerGeneratedAttribute]
public eExcelConditionalFormattingValueObjectType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(eExcelConditionalFormattingValueObjectType value);
    public ExcelDxfColor get_ColorSettings();
    internal void set_ColorSettings(ExcelDxfColor value);
    internal void SetColor(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    public Color get_Color();
    public void set_Color(Color value);
    public double get_Value();
    public void set_Value(double value);
    public string get_Formula();
    public void set_Formula(string value);
}
internal static class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingConstants : object {
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks : ExcelConditionalFormattingRule {
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingContainsBlanks(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingContainsBlanks(ExcelConditionalFormattingContainsBlanks copy, ExcelWorksheet newWs);
    internal ExcelConditionalFormattingContainsBlanks(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    private void UpdateFormula();
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors : ExcelConditionalFormattingRule {
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingContainsErrors(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingContainsErrors(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingContainsErrors(ExcelConditionalFormattingContainsErrors copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
    private void UpdateFormula();
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText : ExcelConditionalFormattingRule {
    internal bool IsExtLst { get; }
    public string Text { get; public set; }
    public string Formula { get; public set; }
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingContainsText(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingContainsText(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    private ExcelConditionalFormattingContainsText(ExcelConditionalFormattingContainsText copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool get_IsExtLst();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public virtual string get_Formula();
    public virtual void set_Formula(string value);
    private void UpdateFormula();
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar : CachingCFAdvanced {
    [CompilerGeneratedAttribute]
private bool <ShowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gradient>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NegativeBarColorSameAsPositive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NegativeBarBorderColorSameAsPositive>k__BackingField;
    [CompilerGeneratedAttribute]
private eExcelDatabarAxisPosition <AxisPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <LowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <HighValue>k__BackingField;
    private ExcelDxfColor _negativeFillColor;
    private ExcelDxfColor _negativeBorderColor;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <AxisColor>k__BackingField;
    [CompilerGeneratedAttribute]
private eDatabarDirection <Direction>k__BackingField;
    public bool ShowValue { get; public set; }
    public bool Gradient { get; public set; }
    public bool Border { get; public set; }
    public bool NegativeBarColorSameAsPositive { get; public set; }
    public bool NegativeBarBorderColorSameAsPositive { get; public set; }
    public eExcelDatabarAxisPosition AxisPosition { get; public set; }
    public ExcelConditionalFormattingIconDataBarValue LowValue { get; internal set; }
    public ExcelConditionalFormattingIconDataBarValue HighValue { get; internal set; }
    public Color Color { get; public set; }
    internal double highest { get; internal set; }
    internal double lowest { get; internal set; }
    public ExcelDxfColor FillColor { get; private set; }
    public ExcelDxfColor BorderColor { get; private set; }
    public ExcelDxfColor NegativeFillColor { get; private set; }
    public ExcelDxfColor NegativeBorderColor { get; private set; }
    public ExcelDxfColor AxisColor { get; private set; }
    public eDatabarDirection Direction { get; public set; }
    internal ExcelConditionalFormattingDataBar(ExcelAddress address, int priority, ExcelWorksheet ws);
    internal ExcelConditionalFormattingDataBar(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    private ExcelConditionalFormattingDataBar(ExcelConditionalFormattingDataBar copy, ExcelWorksheet newWs);
    private void InitalizeDxfColours();
    internal void BaseColorCallback(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    internal void ValueWasSet(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    internal void ReadInCTColor(XmlReader xr, string altName);
    internal static string NewId();
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowValue(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Gradient();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Gradient(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Border();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Border(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NegativeBarColorSameAsPositive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NegativeBarColorSameAsPositive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NegativeBarBorderColorSameAsPositive();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NegativeBarBorderColorSameAsPositive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual eExcelDatabarAxisPosition get_AxisPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AxisPosition(eExcelDatabarAxisPosition value);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_LowValue();
    [CompilerGeneratedAttribute]
internal void set_LowValue(ExcelConditionalFormattingIconDataBarValue value);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_HighValue();
    [CompilerGeneratedAttribute]
internal void set_HighValue(ExcelConditionalFormattingIconDataBarValue value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal double GetPercentageAtCell(ExcelAddressBase address);
    internal double get_highest();
    internal void set_highest(double value);
    internal double get_lowest();
    internal void set_lowest(double value);
    protected virtual void UpdateCellValueCache(bool asStrings, bool cacheOnlyNumeric);
    internal virtual void RemoveTempExportData();
    [CompilerGeneratedAttribute]
public sealed virtual ExcelDxfColor get_FillColor();
    [CompilerGeneratedAttribute]
private void set_FillColor(ExcelDxfColor value);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelDxfColor get_BorderColor();
    [CompilerGeneratedAttribute]
private void set_BorderColor(ExcelDxfColor value);
    public sealed virtual ExcelDxfColor get_NegativeFillColor();
    private void set_NegativeFillColor(ExcelDxfColor value);
    public sealed virtual ExcelDxfColor get_NegativeBorderColor();
    private void set_NegativeBorderColor(ExcelDxfColor value);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelDxfColor get_AxisColor();
    [CompilerGeneratedAttribute]
private void set_AxisColor(ExcelDxfColor value);
    [CompilerGeneratedAttribute]
public sealed virtual eDatabarDirection get_Direction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Direction(eDatabarDirection value);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues : CachingCF {
    private IEnumerable`1<string> duplicates;
    internal ExcelConditionalFormattingDuplicateValues(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingDuplicateValues(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingDuplicateValues(ExcelConditionalFormattingDuplicateValues copy, ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual void RemoveTempExportData();
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith : ExcelConditionalFormattingRule {
    internal bool IsExtLst { get; }
    public string Formula { get; public set; }
    public string Text { get; public set; }
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingEndsWith(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingEndsWith(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingEndsWith(ExcelConditionalFormattingEndsWith copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool get_IsExtLst();
    public virtual string get_Formula();
    public virtual void set_Formula(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
    private void UpdateFormula();
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingEqual(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingEqual(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingEqual(ExcelConditionalFormattingEqual copy, ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingGreaterThan(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingGreaterThan(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingGreaterThan(ExcelConditionalFormattingGreaterThan copy, ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingGreaterThanOrEqual(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingGreaterThanOrEqual(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingGreaterThanOrEqual(ExcelConditionalFormattingGreaterThanOrEqual copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper : object {
    public static string CheckAndFixRangeAddress(string address);
    public static Color ConvertFromColorCode(string colorCode);
    public static string GetAttributeString(XmlNode node, string attribute);
    public static int GetAttributeInt(XmlNode node, string attribute);
    public static Nullable`1<int> GetAttributeIntNullable(XmlNode node, string attribute);
    public static bool GetAttributeBool(XmlNode node, string attribute);
    public static Nullable`1<bool> GetAttributeBoolNullable(XmlNode node, string attribute);
    public static double GetAttributeDouble(XmlNode node, string attribute);
    public static decimal GetAttributeDecimal(XmlNode node, string attribute);
    [ExtensionAttribute]
public static string EncodeXML(string s);
    [ExtensionAttribute]
public static string DecodeXML(string s);
}
public class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue : object {
    private eExcelConditionalFormattingRuleType _ruleType;
    internal int minLength;
    internal int maxLength;
    [CompilerGeneratedAttribute]
private Nullable`1<eExcelconditionalFormattingCustomIcon> <CustomIcon>k__BackingField;
    private Dictionary`2<int, string> _iconStringSetDictionary;
    private eExcelConditionalFormattingValueObjectType _type;
    [CompilerGeneratedAttribute]
private bool <GreaterThanOrEqualTo>k__BackingField;
    private Nullable`1<double> _value;
    internal double _formulaCalculatedValue;
    private string _formula;
    internal bool HasValueOrFormula { get; }
    public Nullable`1<eExcelconditionalFormattingCustomIcon> CustomIcon { get; public set; }
    internal eExcelConditionalFormattingRuleType RuleType { get; internal set; }
    public eExcelConditionalFormattingValueObjectType Type { get; public set; }
    public bool GreaterThanOrEqualTo { get; public set; }
    public double Value { get; public set; }
    public string Formula { get; public set; }
    internal ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingValueObjectType valueType, eExcelConditionalFormattingRuleType ruleType);
    internal bool get_HasValueOrFormula();
    [CompilerGeneratedAttribute]
public Nullable`1<eExcelconditionalFormattingCustomIcon> get_CustomIcon();
    [CompilerGeneratedAttribute]
public void set_CustomIcon(Nullable`1<eExcelconditionalFormattingCustomIcon> value);
    internal void SetCustomIconStringAndId(string set, int id);
    internal virtual string GetCustomIconStringValue();
    internal int GetCustomIconIndex();
    internal eExcelConditionalFormattingRuleType get_RuleType();
    internal void set_RuleType(eExcelConditionalFormattingRuleType value);
    public eExcelConditionalFormattingValueObjectType get_Type();
    public void set_Type(eExcelConditionalFormattingValueObjectType value);
    [CompilerGeneratedAttribute]
public bool get_GreaterThanOrEqualTo();
    [CompilerGeneratedAttribute]
public void set_GreaterThanOrEqualTo(bool value);
    public double get_Value();
    public void set_Value(double value);
    public string get_Formula();
    public void set_Formula(string value);
    internal bool ShouldApplyIcon(double aValue);
    internal double GetCalculatedValue(double maxValue, double minValue, ExcelWorkbook wb, ExcelAddressBase address, ExcelAddress rangeAddress, List`1<object> values);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1 : CachingCFAdvanced {
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <Icon1>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <Icon2>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <Icon3>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IconSetPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <IconSet>k__BackingField;
    public ExcelConditionalFormattingIconDataBarValue Icon1 { get; internal set; }
    public ExcelConditionalFormattingIconDataBarValue Icon2 { get; internal set; }
    public ExcelConditionalFormattingIconDataBarValue Icon3 { get; internal set; }
    public bool Reverse { get; public set; }
    public bool IconSetPercent { get; public set; }
    public bool Custom { get; }
    public bool ShowValue { get; public set; }
    internal bool IsExtLst { get; }
    public T IconSet { get; public set; }
    internal ExcelConditionalFormattingIconSetBase`1(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingIconSetBase`1(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet, bool stopIfTrue, XmlReader xr);
    internal ExcelConditionalFormattingIconSetBase`1(ExcelConditionalFormattingIconSetBase`1<T> copy, ExcelWorksheet newWs);
    protected ExcelConditionalFormattingIconDataBarValue CreateIcon(double value, eExcelConditionalFormattingRuleType type);
    internal ExcelConditionalFormattingIconSetBase`1<T> GetIconSetType();
    internal void ReadIcon(ExcelConditionalFormattingIconDataBarValue icon, XmlReader xr);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_Icon1();
    [CompilerGeneratedAttribute]
internal void set_Icon1(ExcelConditionalFormattingIconDataBarValue value);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_Icon2();
    [CompilerGeneratedAttribute]
internal void set_Icon2(ExcelConditionalFormattingIconDataBarValue value);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_Icon3();
    [CompilerGeneratedAttribute]
internal void set_Icon3(ExcelConditionalFormattingIconDataBarValue value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Reverse();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reverse(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IconSetPercent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IconSetPercent(bool value);
    public virtual bool get_Custom();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowValue(bool value);
    internal virtual bool get_IsExtLst();
    [CompilerGeneratedAttribute]
public sealed virtual T get_IconSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IconSet(T value);
    internal int GetIconNum(ExcelAddress address);
    internal string GetIconName(ExcelAddress address);
    internal virtual ExcelConditionalFormattingIconDataBarValue[] GetIconArray(bool reversed);
    internal List`1<ExcelConditionalFormattingIconDataBarValue> GetCustomIconList(bool reversed);
    protected int CalculateCorrectIcon(ExcelAddress address, ExcelConditionalFormattingIconDataBarValue[] icons);
    internal string GetIconSetString();
    internal string GetIconSetString(T value);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingLast7Days(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingLast7Days(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingLast7Days(ExcelConditionalFormattingLast7Days copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingLastMonth(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingLastMonth(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingLastMonth(ExcelConditionalFormattingLastMonth copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingLastWeek(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingLastWeek(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingLessThan(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingLessThan(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingLessThan(ExcelConditionalFormattingLessThan copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingLessThanOrEqual(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingLessThanOrEqual(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingLessThanOrEqual(ExcelConditionalFormattingLessThanOrEqual copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingNextMonth(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingNextMonth(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingNextWeek(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingNextWeek(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween : ExcelConditionalFormattingRule {
    private Nullable`1<double> largestNumFormula;
    private Nullable`1<double> smallestNumFormula;
    internal ExcelConditionalFormattingNotBetween(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingNotBetween(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingNotBetween(ExcelConditionalFormattingNotBetween copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks : ExcelConditionalFormattingRule {
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingNotContainsBlanks(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingNotContainsBlanks(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingNotContainsBlanks(ExcelConditionalFormattingNotContainsBlanks copy, ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
    private void UpdateFormula();
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors : ExcelConditionalFormattingRule {
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingNotContainsErrors(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingNotContainsErrors(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingNotContainsErrors(ExcelConditionalFormattingNotContainsErrors copy, ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
    private void UpdateFormula();
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText : ExcelConditionalFormattingRule {
    public string Text { get; public set; }
    public string Formula { get; public set; }
    internal bool IsExtLst { get; }
    public ExcelAddress Address { get; public set; }
    internal ExcelConditionalFormattingNotContainsText(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingNotContainsText(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    private ExcelConditionalFormattingNotContainsText(ExcelConditionalFormattingNotContainsText copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public virtual string get_Formula();
    public virtual void set_Formula(string value);
    private void UpdateFormula();
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual bool get_IsExtLst();
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingNotEqual(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingNotEqual(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingNotEqual(ExcelConditionalFormattingNotEqual copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
public abstract class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule : object {
    [CompilerGeneratedAttribute]
private eExcelConditionalFormattingRuleType <Type>k__BackingField;
    internal ExcelAddress _address;
    internal int _priority;
    [CompilerGeneratedAttribute]
private bool <StopIfTrue>k__BackingField;
    private bool _pivotTable;
    internal ExcelDxfStyleConditionalFormatting _style;
    internal ushort _stdDev;
    internal ushort _rank;
    internal string _text;
    internal ExcelWorksheet _ws;
    private int _dxfId;
    internal string _uid;
    private bool _isExtLst;
    internal string Prefix;
    [CompilerGeneratedAttribute]
private Nullable`1<eExcelConditionalFormattingTimePeriodType> <TimePeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<eExcelConditionalFormattingOperatorType> <Operator>k__BackingField;
    internal string _formula;
    internal string _formula2;
    internal string calculatedFormula1;
    internal string calculatedFormula2;
    private ExcelConditionalFormattingAsType _as;
    internal static ISourceCodeTokenizer _tokenizer;
    internal IList`1<Token> Tokens;
    public eExcelConditionalFormattingRuleType Type { get; public set; }
    public ExcelAddress Address { get; public set; }
    public int Priority { get; public set; }
    public bool StopIfTrue { get; public set; }
    public bool PivotTable { get; public set; }
    public ExcelDxfStyleConditionalFormatting Style { get; }
    public ushort StdDev { get; public set; }
    public ushort Rank { get; public set; }
    internal int DxfId { get; internal set; }
    internal bool IsIconSet { get; }
    internal string Uid { get; internal set; }
    internal bool IsExtLst { get; }
    protected internal Nullable`1<bool> AboveAverage { get; }
    protected internal Nullable`1<bool> EqualAverage { get; }
    protected internal Nullable`1<bool> Bottom { get; }
    protected internal Nullable`1<bool> Percent { get; }
    protected internal Nullable`1<eExcelConditionalFormattingTimePeriodType> TimePeriod { get; protected internal set; }
    protected internal Nullable`1<eExcelConditionalFormattingOperatorType> Operator { get; protected internal set; }
    public string Formula { get; public set; }
    public string Formula2 { get; public set; }
    public ExcelConditionalFormattingAsType As { get; }
    internal ExcelConditionalFormattingRule(eExcelConditionalFormattingRuleType type, ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    protected ExcelConditionalFormattingRule(ExcelConditionalFormattingRule original, ExcelWorksheet newWorksheet);
    internal ExcelConditionalFormattingRule(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    private static ExcelConditionalFormattingRule();
    [CompilerGeneratedAttribute]
public sealed virtual eExcelConditionalFormattingRuleType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(eExcelConditionalFormattingRuleType value);
    public virtual ExcelAddress get_Address();
    public virtual void set_Address(ExcelAddress value);
    public sealed virtual int get_Priority();
    public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopIfTrue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StopIfTrue(bool value);
    public sealed virtual bool get_PivotTable();
    public sealed virtual void set_PivotTable(bool value);
    public sealed virtual ExcelDxfStyleConditionalFormatting get_Style();
    public sealed virtual ushort get_StdDev();
    public sealed virtual void set_StdDev(ushort value);
    public sealed virtual ushort get_Rank();
    public sealed virtual void set_Rank(ushort value);
    internal int get_DxfId();
    internal void set_DxfId(int value);
    internal bool get_IsIconSet();
    internal virtual string get_Uid();
    internal virtual void set_Uid(string value);
    internal virtual bool get_IsExtLst();
    private void ReadExtDxf(XmlReader xr);
    private void ParseColor(ExcelDxfColor col, XmlReader xr);
    private bool ParseXMlBoolValue(XmlReader xr);
    internal virtual void ReadClassSpecificXmlNodes(XmlReader xr);
    protected internal Nullable`1<bool> get_AboveAverage();
    protected internal Nullable`1<bool> get_EqualAverage();
    protected internal Nullable`1<bool> get_Bottom();
    protected internal Nullable`1<bool> get_Percent();
    [CompilerGeneratedAttribute]
protected internal Nullable`1<eExcelConditionalFormattingTimePeriodType> get_TimePeriod();
    [CompilerGeneratedAttribute]
protected internal void set_TimePeriod(Nullable`1<eExcelConditionalFormattingTimePeriodType> value);
    [CompilerGeneratedAttribute]
protected internal Nullable`1<eExcelConditionalFormattingOperatorType> get_Operator();
    [CompilerGeneratedAttribute]
protected internal void set_Operator(Nullable`1<eExcelConditionalFormattingOperatorType> value);
    public virtual string get_Formula();
    public virtual void set_Formula(string value);
    public virtual string get_Formula2();
    public virtual void set_Formula2(string value);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    public sealed virtual ExcelConditionalFormattingAsType get_As();
    internal void SetStyle(ExcelDxfStyleConditionalFormatting style);
    internal string GetAttributeType();
    internal abstract virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet sheet);
    internal virtual void RemoveTempExportData();
    internal void SetTokens(string worksheet, string aFormula);
    internal string GetCellFormula(ExcelAddress address, bool getFormula2);
    internal string GetFormula(int row, int column, bool isFormula2);
}
internal static class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleFactory : object {
    public static ExcelConditionalFormattingRule Create(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    public static ExcelConditionalFormattingRule Create(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal static class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType : object {
    public static string GetAttributeByType(eExcelConditionalFormattingRuleType type);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingStdDevGroup : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingStdDevGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingStdDevGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingStdDevGroup(ExcelConditionalFormattingStdDevGroup copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual void ReadClassSpecificXmlNodes(XmlReader xr);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingThisMonth(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingThisMonth(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingThisWeek(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingThisWeek(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale : ExcelConditionalFormattingTwoColorScale {
    private ExcelConditionalFormattingColorScaleValue _middleValue;
    internal bool IsExtLst { get; }
    public ExcelConditionalFormattingColorScaleValue MiddleValue { get; public set; }
    internal ExcelConditionalFormattingThreeColorScale(ExcelAddress address, int priority, ExcelWorksheet ws);
    internal ExcelConditionalFormattingThreeColorScale(ExcelAddress address, int priority, ExcelWorksheet worksheet, bool stopIfTrue, Nullable`1<eExcelConditionalFormattingValueObjectType> low, Nullable`1<eExcelConditionalFormattingValueObjectType> middle, Nullable`1<eExcelConditionalFormattingValueObjectType> high, string lowVal, string middleVal, string highVal, XmlReader xr);
    internal ExcelConditionalFormattingThreeColorScale(ExcelConditionalFormattingThreeColorScale copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool get_IsExtLst();
    internal virtual void ReadColors(XmlReader xr);
    public sealed virtual ExcelConditionalFormattingColorScaleValue get_MiddleValue();
    public sealed virtual void set_MiddleValue(ExcelConditionalFormattingColorScaleValue value);
    internal virtual string ApplyStyleOverride(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup : ExcelConditionalFormattingRule {
    protected string _baseFormula;
    internal ExcelConditionalFormattingTimePeriodGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingTimePeriodGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingTimePeriodGroup(ExcelConditionalFormattingTimePeriodGroup copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingToday(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingToday(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingTomorrow(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingTomorrow(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopBottomGroup : CachingCF {
    internal ExcelConditionalFormattingTopBottomGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingTopBottomGroup(eExcelConditionalFormattingRuleType type, ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingTopBottomGroup(ExcelConditionalFormattingTopBottomGroup copy, ExcelWorksheet newWs);
    internal virtual void ReadClassSpecificXmlNodes(XmlReader xr);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingColorScaleValue _lowValue;
    internal ExcelConditionalFormattingColorScaleValue _highValue;
    internal bool IsExtLst { get; }
    public ExcelConditionalFormattingColorScaleValue LowValue { get; public set; }
    public ExcelConditionalFormattingColorScaleValue HighValue { get; public set; }
    internal ExcelConditionalFormattingTwoColorScale(ExcelAddress address, int priority, ExcelWorksheet ws);
    internal ExcelConditionalFormattingTwoColorScale(ExcelAddress address, int priority, ExcelWorksheet worksheet, bool stopIfTrue, Nullable`1<eExcelConditionalFormattingValueObjectType> low, Nullable`1<eExcelConditionalFormattingValueObjectType> high, string lowVal, string highVal, XmlReader xr);
    internal ExcelConditionalFormattingTwoColorScale(ExcelConditionalFormattingTwoColorScale copy, ExcelWorksheet newWs);
    internal void SetValues(Nullable`1<eExcelConditionalFormattingValueObjectType> low, Nullable`1<eExcelConditionalFormattingValueObjectType> high, string lowVal, string highVal, string middleVal, Nullable`1<eExcelConditionalFormattingValueObjectType> middle);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool get_IsExtLst();
    internal virtual void ReadColors(XmlReader xr);
    internal void ReadColorAndColorSettings(XmlReader xr, ExcelConditionalFormattingColorScaleValue& colSettings);
    public sealed virtual ExcelConditionalFormattingColorScaleValue get_LowValue();
    public sealed virtual void set_LowValue(ExcelConditionalFormattingColorScaleValue value);
    public sealed virtual ExcelConditionalFormattingColorScaleValue get_HighValue();
    public sealed virtual void set_HighValue(ExcelConditionalFormattingColorScaleValue value);
    internal virtual string ApplyStyleOverride(ExcelAddress address);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    private double TruncateTo3Decimals(double value);
    protected Color LinearInterpolationTwoColors(Color color1, Color color2, double startPointWeight, double endPointWeight);
    protected Color CalculateNumberedGradient(double currentStep, double numStepsBetween, Color color1, Color color2);
    protected string GetColor(ExcelDxfColor c, ExcelTheme theme);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues : CachingCF {
    private IEnumerable`1<object> uniques;
    internal ExcelConditionalFormattingUniqueValues(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingUniqueValues(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal ExcelConditionalFormattingUniqueValues(ExcelConditionalFormattingUniqueValues copy, ExcelWorksheet newWs);
    internal virtual void RemoveTempExportData();
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
}
internal class OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday : ExcelConditionalFormattingTimePeriodGroup {
    internal ExcelConditionalFormattingYesterday(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingYesterday(ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
}
internal static class OfficeOpenXml.ConditionalFormatting.IconDict : object {
    private static List`1<eExcelconditionalFormattingCustomIcon> ThreeArrows;
    private static List`1<eExcelconditionalFormattingCustomIcon> ThreeArrowsGray;
    private static List`1<eExcelconditionalFormattingCustomIcon> ThreeFlags;
    private static List`1<eExcelconditionalFormattingCustomIcon> ThreeSigns;
    private static List`1<eExcelconditionalFormattingCustomIcon> ThreeSymbols;
    private static List`1<eExcelconditionalFormattingCustomIcon> ThreeSymbols2;
    private static List`1<eExcelconditionalFormattingCustomIcon> TrafficLights1;
    private static List`1<eExcelconditionalFormattingCustomIcon> TrafficLights2;
    private static List`1<eExcelconditionalFormattingCustomIcon> Stars;
    private static List`1<eExcelconditionalFormattingCustomIcon> ThreeTriangles;
    private static List`1<eExcelconditionalFormattingCustomIcon> FourArrows;
    private static List`1<eExcelconditionalFormattingCustomIcon> FourArrowsGray;
    private static List`1<eExcelconditionalFormattingCustomIcon> FourRating;
    private static List`1<eExcelconditionalFormattingCustomIcon> FourRedToBlack;
    private static List`1<eExcelconditionalFormattingCustomIcon> FourTrafficLights;
    private static List`1<eExcelconditionalFormattingCustomIcon> FiveArrows;
    private static List`1<eExcelconditionalFormattingCustomIcon> FiveArrowsGray;
    private static List`1<eExcelconditionalFormattingCustomIcon> FiveQuarters;
    private static List`1<eExcelconditionalFormattingCustomIcon> FiveRating;
    private static List`1<eExcelconditionalFormattingCustomIcon> FiveBoxes;
    private static List`1<eExcelconditionalFormattingCustomIcon> NoIcon;
    internal static Dictionary`2<string, List`1<eExcelconditionalFormattingCustomIcon>> IconSets;
    private static Dictionary`2<string, int> IconSetIndexedNames;
    private static IconDict();
    internal static eExcelconditionalFormattingCustomIcon[] GetIconSet(string set);
    internal static eExcelconditionalFormattingCustomIcon GetIconAtIndex(string set, int index);
    internal static eExcelconditionalFormattingCustomIcon[] GetIconsAsCustomIcons(string iconsetStr, ExcelConditionalFormattingIconDataBarValue[] icons);
}
internal static class OfficeOpenXml.ConditionalFormatting.IconReadHandler : object {
    internal static ExcelConditionalFormattingRule ReadIcons(ExcelAddress address, XmlReader xr, ExcelWorksheet ws);
}
public interface OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting {
    public abstract virtual IExcelConditionalFormattingAverageGroup AddAboveAverage();
    public abstract virtual IExcelConditionalFormattingAverageGroup AddAboveOrEqualAverage();
    public abstract virtual IExcelConditionalFormattingAverageGroup AddBelowAverage();
    public abstract virtual IExcelConditionalFormattingAverageGroup AddBelowOrEqualAverage();
    public abstract virtual IExcelConditionalFormattingStdDevGroup AddAboveStdDev();
    public abstract virtual IExcelConditionalFormattingStdDevGroup AddBelowStdDev();
    public abstract virtual IExcelConditionalFormattingTopBottomGroup AddBottom();
    public abstract virtual IExcelConditionalFormattingTopBottomGroup AddBottomPercent();
    public abstract virtual IExcelConditionalFormattingTopBottomGroup AddTop();
    public abstract virtual IExcelConditionalFormattingTopBottomGroup AddTopPercent();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddLast7Days();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddLastMonth();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddLastWeek();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddNextMonth();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddNextWeek();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddThisMonth();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddThisWeek();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddToday();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddTomorrow();
    public abstract virtual IExcelConditionalFormattingTimePeriodGroup AddYesterday();
    public abstract virtual IExcelConditionalFormattingBeginsWith AddBeginsWith();
    public abstract virtual IExcelConditionalFormattingBetween AddBetween();
    public abstract virtual IExcelConditionalFormattingContainsBlanks AddContainsBlanks();
    public abstract virtual IExcelConditionalFormattingContainsErrors AddContainsErrors();
    public abstract virtual IExcelConditionalFormattingContainsText AddContainsText();
    public abstract virtual IExcelConditionalFormattingDuplicateValues AddDuplicateValues();
    public abstract virtual IExcelConditionalFormattingEndsWith AddEndsWith();
    public abstract virtual IExcelConditionalFormattingEqual AddEqual();
    public abstract virtual IExcelConditionalFormattingExpression AddExpression();
    public abstract virtual IExcelConditionalFormattingGreaterThan AddGreaterThan();
    public abstract virtual IExcelConditionalFormattingGreaterThanOrEqual AddGreaterThanOrEqual();
    public abstract virtual IExcelConditionalFormattingLessThan AddLessThan();
    public abstract virtual IExcelConditionalFormattingLessThanOrEqual AddLessThanOrEqual();
    public abstract virtual IExcelConditionalFormattingNotBetween AddNotBetween();
    public abstract virtual IExcelConditionalFormattingNotContainsBlanks AddNotContainsBlanks();
    public abstract virtual IExcelConditionalFormattingNotContainsErrors AddNotContainsErrors();
    public abstract virtual IExcelConditionalFormattingNotContainsText AddNotContainsText();
    public abstract virtual IExcelConditionalFormattingNotEqual AddNotEqual();
    public abstract virtual IExcelConditionalFormattingUniqueValues AddUniqueValues();
    public abstract virtual IExcelConditionalFormattingThreeColorScale AddThreeColorScale();
    public abstract virtual IExcelConditionalFormattingTwoColorScale AddTwoColorScale();
    public abstract virtual IExcelConditionalFormattingThreeIconSet`1<eExcelconditionalFormatting3IconsSetType> AddThreeIconSet(eExcelconditionalFormatting3IconsSetType IconSet);
    public abstract virtual IExcelConditionalFormattingFourIconSet`1<eExcelconditionalFormatting4IconsSetType> AddFourIconSet(eExcelconditionalFormatting4IconsSetType IconSet);
    public abstract virtual IExcelConditionalFormattingFiveIconSet AddFiveIconSet(eExcelconditionalFormatting5IconsSetType IconSet);
    public abstract virtual IExcelConditionalFormattingDataBarGroup AddDatabar(Color color);
    public abstract virtual List`1<ExcelConditionalFormattingRule> GetConditionalFormattings();
}
internal class OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting : object {
    public ExcelWorksheet _worksheet;
    public ExcelAddress _address;
    public RangeConditionalFormatting(ExcelWorksheet worksheet, ExcelAddress address);
    public sealed virtual IExcelConditionalFormattingAverageGroup AddAboveAverage();
    public sealed virtual IExcelConditionalFormattingAverageGroup AddAboveOrEqualAverage();
    public sealed virtual IExcelConditionalFormattingAverageGroup AddBelowAverage();
    public sealed virtual IExcelConditionalFormattingAverageGroup AddBelowOrEqualAverage();
    public sealed virtual IExcelConditionalFormattingStdDevGroup AddAboveStdDev();
    public sealed virtual IExcelConditionalFormattingStdDevGroup AddBelowStdDev();
    public sealed virtual IExcelConditionalFormattingTopBottomGroup AddBottom();
    public sealed virtual IExcelConditionalFormattingTopBottomGroup AddBottomPercent();
    public sealed virtual IExcelConditionalFormattingTopBottomGroup AddTop();
    public sealed virtual IExcelConditionalFormattingTopBottomGroup AddTopPercent();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddLast7Days();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddLastMonth();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddLastWeek();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddNextMonth();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddNextWeek();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddThisMonth();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddThisWeek();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddToday();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddTomorrow();
    public sealed virtual IExcelConditionalFormattingTimePeriodGroup AddYesterday();
    public sealed virtual IExcelConditionalFormattingBeginsWith AddBeginsWith();
    public sealed virtual IExcelConditionalFormattingBetween AddBetween();
    public sealed virtual IExcelConditionalFormattingContainsBlanks AddContainsBlanks();
    public sealed virtual IExcelConditionalFormattingContainsErrors AddContainsErrors();
    public sealed virtual IExcelConditionalFormattingContainsText AddContainsText();
    public sealed virtual IExcelConditionalFormattingDuplicateValues AddDuplicateValues();
    public sealed virtual IExcelConditionalFormattingEndsWith AddEndsWith();
    public sealed virtual IExcelConditionalFormattingEqual AddEqual();
    public sealed virtual IExcelConditionalFormattingExpression AddExpression();
    public sealed virtual IExcelConditionalFormattingGreaterThan AddGreaterThan();
    public sealed virtual IExcelConditionalFormattingGreaterThanOrEqual AddGreaterThanOrEqual();
    public sealed virtual IExcelConditionalFormattingLessThan AddLessThan();
    public sealed virtual IExcelConditionalFormattingLessThanOrEqual AddLessThanOrEqual();
    public sealed virtual IExcelConditionalFormattingNotBetween AddNotBetween();
    public sealed virtual IExcelConditionalFormattingNotContainsBlanks AddNotContainsBlanks();
    public sealed virtual IExcelConditionalFormattingNotContainsErrors AddNotContainsErrors();
    public sealed virtual IExcelConditionalFormattingNotContainsText AddNotContainsText();
    public sealed virtual IExcelConditionalFormattingNotEqual AddNotEqual();
    public sealed virtual IExcelConditionalFormattingUniqueValues AddUniqueValues();
    public sealed virtual IExcelConditionalFormattingThreeColorScale AddThreeColorScale();
    public sealed virtual IExcelConditionalFormattingTwoColorScale AddTwoColorScale();
    public sealed virtual IExcelConditionalFormattingThreeIconSet`1<eExcelconditionalFormatting3IconsSetType> AddThreeIconSet(eExcelconditionalFormatting3IconsSetType IconSet);
    public sealed virtual IExcelConditionalFormattingFourIconSet`1<eExcelconditionalFormatting4IconsSetType> AddFourIconSet(eExcelconditionalFormatting4IconsSetType IconSet);
    public sealed virtual IExcelConditionalFormattingFiveIconSet AddFiveIconSet(eExcelconditionalFormatting5IconsSetType IconSet);
    public sealed virtual IExcelConditionalFormattingDataBarGroup AddDatabar(Color Color);
    public sealed virtual List`1<ExcelConditionalFormattingRule> GetConditionalFormattings();
}
internal class OfficeOpenXml.ConditionalFormatting.Rules.CachingCF : ExcelConditionalFormattingRule {
    protected List`1<object> cellValueCache;
    internal CachingCF(eExcelConditionalFormattingRuleType cfType, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal CachingCF(eExcelConditionalFormattingRuleType cfType, ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    internal CachingCF(CachingCF copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    protected virtual void UpdateCellValueCache(bool asStrings, bool cacheOnlyNumeric);
    internal virtual void RemoveTempExportData();
}
internal class OfficeOpenXml.ConditionalFormatting.Rules.CachingCFAdvanced : CachingCF {
    protected double _highest;
    protected double _lowest;
    internal CachingCFAdvanced(CachingCF copy, ExcelWorksheet newWs);
    internal CachingCFAdvanced(eExcelConditionalFormattingRuleType cfType, ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal CachingCFAdvanced(eExcelConditionalFormattingRuleType cfType, ExcelAddress address, ExcelWorksheet ws, XmlReader xr);
    protected virtual void UpdateCellValueCache(bool asStrings, bool cacheOnlyNumeric);
}
internal class OfficeOpenXml.ConditionalFormatting.Rules.ExcelConditionalFormattingExpression : ExcelConditionalFormattingRule {
    internal ExcelConditionalFormattingExpression(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingExpression(ExcelAddress address, ExcelWorksheet worksheet, XmlReader xr);
    internal ExcelConditionalFormattingExpression(ExcelConditionalFormattingExpression copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool ShouldApplyToCell(ExcelAddress address);
}
internal class OfficeOpenXml.ConditionalFormatting.Rules.ExcelConditionalFormattingFiveIconSet : ExcelConditionalFormattingIconSetBase`1<eExcelconditionalFormatting5IconsSetType> {
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <Icon4>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <Icon5>k__BackingField;
    public ExcelConditionalFormattingIconDataBarValue Icon4 { get; internal set; }
    public ExcelConditionalFormattingIconDataBarValue Icon5 { get; internal set; }
    public bool Custom { get; }
    internal bool IsExtLst { get; }
    internal ExcelConditionalFormattingFiveIconSet(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingFiveIconSet(ExcelAddress address, int priority, ExcelWorksheet worksheet, bool stopIfTrue, XmlReader xr);
    internal ExcelConditionalFormattingFiveIconSet(ExcelConditionalFormattingFiveIconSet copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingIconDataBarValue[] GetIconArray(bool reversed);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_Icon4();
    [CompilerGeneratedAttribute]
internal void set_Icon4(ExcelConditionalFormattingIconDataBarValue value);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_Icon5();
    [CompilerGeneratedAttribute]
internal void set_Icon5(ExcelConditionalFormattingIconDataBarValue value);
    public virtual bool get_Custom();
    internal virtual bool get_IsExtLst();
}
internal class OfficeOpenXml.ConditionalFormatting.Rules.ExcelConditionalFormattingFourIconSet : ExcelConditionalFormattingIconSetBase`1<eExcelconditionalFormatting4IconsSetType> {
    [CompilerGeneratedAttribute]
private ExcelConditionalFormattingIconDataBarValue <Icon4>k__BackingField;
    public ExcelConditionalFormattingIconDataBarValue Icon4 { get; internal set; }
    public bool Custom { get; }
    internal bool IsExtLst { get; }
    internal ExcelConditionalFormattingFourIconSet(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingFourIconSet(ExcelAddress address, int priority, ExcelWorksheet worksheet, bool stopIfTrue, XmlReader xr);
    internal ExcelConditionalFormattingFourIconSet(ExcelConditionalFormattingFourIconSet copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingIconDataBarValue[] GetIconArray(bool reversed);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelConditionalFormattingIconDataBarValue get_Icon4();
    [CompilerGeneratedAttribute]
internal void set_Icon4(ExcelConditionalFormattingIconDataBarValue value);
    public virtual bool get_Custom();
    internal virtual bool get_IsExtLst();
}
internal class OfficeOpenXml.ConditionalFormatting.Rules.ExcelConditionalFormattingThreeIconSet : ExcelConditionalFormattingIconSetBase`1<eExcelconditionalFormatting3IconsSetType> {
    internal bool IsExtLst { get; }
    internal ExcelConditionalFormattingThreeIconSet(ExcelAddress address, int priority, ExcelWorksheet worksheet);
    internal ExcelConditionalFormattingThreeIconSet(ExcelAddress address, int priority, ExcelWorksheet worksheet, bool stopIfTrue, XmlReader xr);
    internal ExcelConditionalFormattingThreeIconSet(ExcelConditionalFormattingThreeIconSet copy, ExcelWorksheet newWs);
    internal virtual ExcelConditionalFormattingRule Clone(ExcelWorksheet newWs);
    internal virtual bool get_IsExtLst();
}
public class OfficeOpenXml.Configuration.ExcelPackageConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <SuppressInitializationExceptions>k__BackingField;
    private string _jsonConfigBasePath;
    private string _jsonConfigFileName;
    public bool SuppressInitializationExceptions { get; public set; }
    public string JsonConfigBasePath { get; public set; }
    public string JsonConfigFileName { get; public set; }
    internal static ExcelPackageConfiguration Default { get; }
    [CompilerGeneratedAttribute]
public bool get_SuppressInitializationExceptions();
    [CompilerGeneratedAttribute]
public void set_SuppressInitializationExceptions(bool value);
    public string get_JsonConfigBasePath();
    public void set_JsonConfigBasePath(string value);
    public string get_JsonConfigFileName();
    public void set_JsonConfigFileName(string value);
    internal static ExcelPackageConfiguration get_Default();
    internal void CopyFrom(ExcelPackageConfiguration other);
    public void Reset();
}
internal class OfficeOpenXml.Constants.ContentTypes : object {
    internal static string contentTypeWorkbookDefault;
    internal static string contentTypeWorkbookMacroEnabled;
    internal static string contentTypeSharedString;
    internal static string contentTypeMetaData;
    internal static string contentTypeThemeOverride;
    internal static string contentTypeTheme;
    internal static string contentTypeChartStyle;
    internal static string contentTypeChartColorStyle;
    internal static string contentTypePivotTable;
    internal static string contentTypePivotCacheDefinition;
    internal static string contentTypePivotCacheRecords;
    internal static string contentTypeVBA;
    internal static string contentTypeVBASignature;
    internal static string contentTypeVBASignatureAgile;
    internal static string contentTypeVBASignatureV3;
    internal static string contentTypeExternalLink;
    internal static string contentTypeVml;
    internal static string contentTypeControlProperties;
    internal static string contentTypeChart;
    internal static string contentTypeChartEx;
    internal static string contentTypeRichDataValue;
    internal static string contentTypeRichDataValueStructure;
    internal static string contentTypeRichDataValueType;
}
internal class OfficeOpenXml.Constants.ExtLstUris : object {
    internal static string LegacyObjectWrapperUri;
    internal static string PivotTableDefinitionUri;
    internal static string PivotTableDataUri;
    internal static string PivotTableServerFormatsUri;
    internal static string PivotTableUISettingsUri;
    internal static string PivotTableDefinition16Uri;
    internal static string PivotCacheDefinitionUri;
    internal static string TimelinePivotCacheDefinitionUri;
    internal static string PivotCacheIdVersionUri;
    internal static string SlicerCachePivotTablesUri;
    internal static string TableSlicerCacheUri;
    internal static string SlicerCacheHideItemsWithNoDataUri;
    internal static string WorkbookSlicerPivotTableUri;
    internal static string WorkbookSlicerTableUri;
    internal static string WorksheetSlicerPivotTableUri;
    internal static string WorksheetSlicerTableUri;
    internal static string SlicerStylesDxfCollectionUri;
    internal static string SlicerStylesUri;
    internal static string DataValidationsUri;
    internal static string DynamicArrayPropertiesUri;
    internal static string RichValueDataUri;
    internal static string ConditionalFormattingUri;
    internal static string ExtChildUri;
}
internal static class OfficeOpenXml.Constants.Relationsships : object {
    internal static string schemaMetadata;
    internal static string schemaRichDataValueStructureRelationship;
    internal static string schemaRichDataValueTypeRelationship;
    internal static string schemaRichDataValueRelationship;
}
internal class OfficeOpenXml.Constants.Schemas : object {
    internal static string schemaMain;
    internal static string schemaMarkupCompatibility;
    internal static string schemaDynamicArray;
    internal static string schemaRichData;
    internal static string schemaRichData2;
}
internal class OfficeOpenXml.ControlsCollectionInternal : XmlHelper {
    private List`1<ControlInternal> _list;
    internal ControlsCollectionInternal(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public sealed virtual IEnumerator`1<ControlInternal> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal ControlInternal GetControlByShapeId(int shapeId);
}
internal class OfficeOpenXml.Core.AutofitHelper : object {
    private ExcelRangeBase _range;
    private ITextMeasurer _genericMeasurer;
    private MeasurementFont _nonExistingFont;
    private Dictionary`2<float, short> _fontWidthDefault;
    private Dictionary`2<int, MeasurementFont> _fontCache;
    public AutofitHelper(ExcelRangeBase range);
    internal void AutofitColumn(double MinimumWidth, double MaximumWidth);
    private TextMeasurement MeasureString(string t, int fntID, ExcelTextSettings ts);
    private TextMeasurement MeasureGeneric(string t, ExcelTextSettings ts, MeasurementFont font);
    private void SetMinWidth(ExcelWorksheet ws, double minimumWidth, int fromCol, int toCol);
}
internal static class OfficeOpenXml.Core.CellStore.ArrayUtil : object {
    internal static int OptimizedBinarySearch(IndexItem[] store, int pos, int length);
    internal static int OptimizedBinarySearch(IndexBase[] store, int pos, int length);
}
internal class OfficeOpenXml.Core.CellStore.CellStore`1 : object {
    private static object _syncRoot;
    internal ColumnIndex`1[] _columnIndex;
    internal int ColumnCount;
    [CompilerGeneratedAttribute]
private bool <IsReadonly>k__BackingField;
    public bool IsReadonly { get; public set; }
    internal bool HasValues { get; }
    internal int Count { get; }
    private static CellStore`1();
    [CompilerGeneratedAttribute]
public bool get_IsReadonly();
    [CompilerGeneratedAttribute]
public void set_IsReadonly(bool value);
    protected virtual override void Finalize();
    internal bool get_HasValues();
    internal bool HasValue(int fromRow, int fromCol, int toRow, int toCol);
    internal int GetClosestColumnPosition(int column);
    internal int GetColumnPosition(int column);
    internal ColumnIndex`1<T> GetColumnIndex(int column);
    internal CellStore`1<T> Clone();
    internal int get_Count();
    internal bool GetDimension(Int32& fromRow, Int32& fromCol, Int32& toRow, Int32& toCol);
    internal int FindNext(int Column);
    internal T GetValue(int Row, int Column);
    internal bool Exists(int Row, int Column);
    internal bool Exists(int Row, int Column, T& value);
    internal void SetValue(int row, int column, T value);
    private int SetValueColumn(int row, int column, T value, int colPos);
    internal void Insert(int fromRow, int fromCol, int rows, int columns);
    private void GetColumnPositionFromColumn(int fromCol, int columns, Int32& fromColPos, Int32& toColPos);
    private static bool IsWithinPage(int row, ColumnIndex`1<T> column, int pagePos);
    internal void Clear(int fromRow, int fromCol, int rows, int columns);
    internal void Delete(int fromRow, int fromCol, int rows, int columns);
    internal void Delete(int fromRow, int fromCol, int rows, int columns, bool shift);
    private void DeleteColumn(ColumnIndex`1<T> column, int fromRow, int rows, bool shift);
    internal void DeleteShiftLeft(ExcelAddressBase fromAddress);
    internal void InsertShiftRight(ExcelAddressBase fromAddress);
    private void MoveRangeColumnWise(int sourceCol, int sourceStartRow, int sourceEndRow, int destCol, int destStartRow);
    private int DeleteRows(ColumnIndex`1<T> column, int pagePos, int fromRow, int rows, bool shift);
    private void UpdatePageOffset(ColumnIndex`1<T> column, int pagePos, int rows);
    private int UpdatePageOffsetSinglePage(ColumnIndex`1<T> column, int pagePos, int rows);
    private int DeletePages(int fromRow, int rows, ColumnIndex`1<T> column, int pagePos, bool shift);
    private int DeleteRowsInsidePage(ColumnIndex`1<T> column, int pagePos, int fromRow, int toRow, bool shift);
    private static void UpdateRowIndex(PageIndex page, int toPos, int rows);
    private void DeleteColumns(int fromCol, int columns, bool shift);
    private void InsertRowIntoPage(ColumnIndex`1<T> column, int pagePos, int rowPos, int row, int rows);
    private int ValidateAndSplitPageIfNeeded(ColumnIndex`1<T> column, PageIndex page, int pagePos);
    private void AddRowIndex(int rowPos, short rows, PageIndex page);
    private void MergePage(ColumnIndex`1<T> column, int pagePos);
    internal static int GetSize(int size);
    private void AddCell(ColumnIndex`1<T> columnIndex, int pagePos, int pos, short ix, T value);
    private void AddCellPointer(ColumnIndex`1<T> columnIndex, Int32& pagePos, Int32& pos, short ix, int pointer);
    private PageIndex MakeRoomInPage(ColumnIndex`1<T> columnIndex, Int32& pagePos, Int32& pos);
    private int SplitPage(ColumnIndex`1<T> columnIndex, int pagePos);
    private void SplitPageAtPosition(ColumnIndex`1<T> columnIndex, int pagePos, PageIndex page, int splitPos);
    private static void ResizePageCollectionIfNecessery(ColumnIndex`1<T> columnIndex);
    private static void ResetPageOffset(PageIndex page);
    private void AddPage(ColumnIndex`1<T> column, int pos, short index);
    private void AddPage(ColumnIndex`1<T> column, PageIndex page, int pos);
    private void AddPage(ColumnIndex`1<T> column, int pos);
    private void AddColumn(int pos, int Column);
    public sealed virtual void Dispose();
    internal bool NextCell(Int32& row, Int32& col);
    internal bool NextCell(Int32& row, Int32& col, int minRow, int minColPos, int maxRow, int maxColPos);
    internal bool NextCellByColumn(Int32& row, Int32& col, int minRow, int maxRow, int maxColPos);
    internal bool PrevCellByColumn(Int32& row, Int32& col, int minRow, int maxRow, int maxColPos);
    internal bool GetNextCell(Int32& row, Int32& colPos, int startColPos, int endRow, int endColPos);
    internal bool GetNextCell(Int32& row, Int32& colPos, int startColPos, int endRow, int endColPos, Int32[]& pagePos, Int32[]& cellPos);
    internal bool PrevCell(Int32& row, Int32& col);
    internal bool PrevCell(Int32& row, Int32& col, int minRow, int minColPos, int maxRow, int maxColPos);
    internal bool GetPrevCell(Int32& row, Int32& colPos, int startRow, int startColPos, int endColPos);
    internal void EnsureColumnsExists(int fromCol, int toCol);
}
internal class OfficeOpenXml.Core.CellStore.CellStoreEnumerator`1 : object {
    private CellStore`1<T> _cellStore;
    private int row;
    private int colPos;
    internal int _startRow;
    internal int _startCol;
    internal int _endRow;
    internal int _endCol;
    private int minRow;
    private int minColPos;
    private int maxRow;
    private int maxColPos;
    private int lastColCount;
    internal int Row { get; }
    internal int Column { get; }
    internal T Value { get; internal set; }
    public string CellAddress { get; }
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public CellStoreEnumerator`1(CellStore`1<T> cellStore);
    public CellStoreEnumerator`1(CellStore`1<T> cellStore, int StartRow, int StartCol, int EndRow, int EndCol);
    internal void Init();
    private void UpdateMinMaxColPos();
    internal int get_Row();
    internal int get_Column();
    internal T get_Value();
    internal void set_Value(T value);
    internal bool Next();
    internal bool Previous();
    public string get_CellAddress();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal static class OfficeOpenXml.Core.CellStore.CellStoreSettings : object {
    internal static int _pageBits;
    internal static int _pageSize;
    internal static int _pageSizeMax;
    internal static int _pageSizeMin;
    internal static int ColSizeMin;
    internal static int PagesPerColumnMin;
}
internal class OfficeOpenXml.Core.CellStore.CellStoreValue : CellStore`1<ExcelValue> {
    internal void SetValueRange_Value(int row, int col, Object[0...,0...] array);
    internal void SetValue_Value(int Row, int Column, object value);
    internal void SetValue_Style(int Row, int Column, int styleId);
    internal void SetValue(int Row, int Column, object value, int styleId);
    internal int GetLastRow(int columnIndex);
    internal int GetLastColumn();
}
internal class OfficeOpenXml.Core.CellStore.ColumnIndex`1 : IndexBase {
    private static object _syncRoot;
    internal List`1<T> _values;
    internal PageIndex[] _pages;
    internal int PageCount;
    private static ColumnIndex`1();
    protected virtual override void Finalize();
    internal int GetPagePosition(int Row);
    private bool GetPage(int Row, Int32& pagePos);
    internal int GetNextRow(int row);
    internal int GetPrevRow(int row);
    internal int GetPointer(int Row);
    public sealed virtual void Dispose();
}
internal class OfficeOpenXml.Core.CellStore.ExcelValue : ValueType {
    internal object _value;
    internal int _styleId;
    public virtual string ToString();
}
internal class OfficeOpenXml.Core.CellStore.FlagCellStore : CellStore`1<byte> {
    internal void SetFlagValue(int Row, int Col, bool value, CellFlags cellFlags);
    internal bool GetFlagValue(int Row, int Col, CellFlags cellFlags);
}
internal interface OfficeOpenXml.Core.CellStore.IIndex {
    public short Index { get; public set; }
    public abstract virtual short get_Index();
    public abstract virtual void set_Index(short value);
}
internal class OfficeOpenXml.Core.CellStore.IndexBase : object {
    [CompilerGeneratedAttribute]
private short <Index>k__BackingField;
    public short Index { get; public set; }
    [CompilerGeneratedAttribute]
public short get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(short value);
}
internal class OfficeOpenXml.Core.CellStore.IndexItem : ValueType {
    [CompilerGeneratedAttribute]
private int <IndexPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Index>k__BackingField;
    internal int IndexPointer { get; internal set; }
    internal short Index { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal int get_IndexPointer();
    [CompilerGeneratedAttribute]
internal void set_IndexPointer(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal short get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(short value);
}
internal class OfficeOpenXml.Core.CellStore.PageIndex : IndexBase {
    internal int Offset;
    internal int RowCount;
    [CompilerGeneratedAttribute]
private IndexItem[] <Rows>k__BackingField;
    internal int IndexOffset { get; }
    internal int IndexExpanded { get; }
    internal IndexItem[] Rows { get; internal set; }
    internal int RowSpan { get; }
    public int MinIndex { get; }
    public int MaxIndex { get; }
    public PageIndex(int pageSizeMin);
    public PageIndex(IndexItem[] rows, int count);
    public PageIndex(PageIndex pageItem, int start, int size);
    public PageIndex(PageIndex pageItem, int start, int size, short index, int offset, int arraySize);
    protected virtual override void Finalize();
    internal int get_IndexOffset();
    internal int get_IndexExpanded();
    [CompilerGeneratedAttribute]
internal IndexItem[] get_Rows();
    [CompilerGeneratedAttribute]
internal void set_Rows(IndexItem[] value);
    internal int get_RowSpan();
    internal int GetPosition(int offset);
    internal int GetRowPosition(int row);
    internal int GetNextRow(int row);
    public int get_MinIndex();
    public int get_MaxIndex();
    public int GetIndex(int pos);
    public sealed virtual void Dispose();
    internal bool IsWithin(int fromRow, int toRow);
    internal bool StartsWithin(int fromRow, int toRow);
    internal bool StartsAfter(int row);
    internal int GetRow(int rowIx);
}
[DefaultMemberAttribute("Item")]
internal class OfficeOpenXml.Core.CellStore.RangeDictionary`1 : object {
    internal Dictionary`2<int, List`1<RangeItem<T>>> _addresses;
    private bool _extendValuesToInsertedColumn;
    internal T Item { get; }
    internal bool Exists(int fromRow, int fromCol, int toRow, int toCol);
    internal bool Exists(int row, int col);
    internal T get_Item(int row, int column);
    internal List`1<T> GetValuesFromRange(int fromRow, int fromCol, int toRow, int toCol);
    internal void Merge(int fromRow, int fromCol, int toRow, int toCol, T value);
    internal void Add(int fromRow, int fromCol, int toRow, int toCol, T value);
    internal void Add(int row, int col, T value);
    internal void InsertRow(int fromRow, int noRows, int fromCol, int toCol);
    internal RangeItem[] SplitRangeItem(RangeItem<T> item, int fromRow, int toRow);
    internal void ClearRows(int fromRow, int noRows, int fromCol, int toCol);
    internal void DeleteRow(int fromRow, int noRows, int fromCol, int toCol);
    internal void InsertColumn(int fromCol, int noCols, int fromRow, int toRow);
    private void ExtendValues(int fromCol, int toCol, int fromRow, int toRow);
    private void GetIntersect(RangeItem<T> itemFirst, RangeItem<T> itemLast, Int32& fr, Int32& tr);
    internal void DeleteColumn(int fromCol, int noCols, int fromRow, int toRow);
    private void DeletePartialColumn(int fromCol, int noCols, int fromRow, int toRow);
    private void MoveDataToColumn(int colNo, int noCols, int fromRow, int toRow);
    private void DeleteRowsInColumn(int colNo, int fromRow, int toRow);
    private void InsertPartialColumn(int fromCol, int noCols, int fromRow, int toRow);
    private void DeleteFullColumn(int fromCol, int noCols);
    private void AddFullColumn(int fromCol, int noCols);
    private List`1<int> GetColumnKeys();
    private static bool ExistsInSpan(int fromRow, int toRow, long r);
    private void AddRowSpan(int col, int fromRow, int toRow, T value);
    private void MergeRowSpan(int col, int fromRow, int toRow, T value);
}
internal class OfficeOpenXml.Core.CellStore.RangeHashset : object {
    internal Dictionary`2<int, List`1<long>> _addresses;
    internal bool Exists(FormulaRangeAddress newAddress);
    internal bool ExistsGetSpill(FormulaRangeAddress& newAddress);
    internal bool Exists(int row, int col);
    internal bool Merge(FormulaRangeAddress& newAddress);
    internal bool Merge(long row, int col);
    private void GetSpillRanges(List`1<long> spillRanges, FormulaRangeAddress& address);
    private static void MergeWithNext(List`1<long> rows, int ix);
    private static byte VerifyAndAdd(FormulaRangeAddress newAddress, long rowSpan, List`1<long> rows, int ix, List`1<long> spillRanges);
    private static byte VerifyAndAddNoChange(FormulaRangeAddress newAddress, long rowSpan, List`1<long> rows, int ix, List`1<long> spillRanges);
}
[DefaultMemberAttribute("Item")]
internal class OfficeOpenXml.Core.ChangeableDictionary`1 : object {
    internal Int32[][] _index;
    internal List`1<T> _items;
    internal int _count;
    private int _defaultSize;
    internal T Item { get; }
    internal int Count { get; }
    internal ChangeableDictionary`1(int size);
    internal T get_Item(int key);
    internal void InsertAndShift(int fromPosition, int add);
    internal int get_Count();
    public void Add(int key, T value);
    internal void Move(int fromPosition, int toPosition, bool before);
    public void Clear();
    public bool ContainsKey(int key);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public bool RemoveAndShift(int key);
    private bool RemoveAndShift(int key, bool dispose);
    public bool TryGetValue(int key, T& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class OfficeOpenXml.Core.ChangeableDictionaryEnumerator`1 : object {
    private int _index;
    private ChangeableDictionary`1<T> _ts;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ChangeableDictionaryEnumerator`1(ChangeableDictionary`1<T> ts);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Core.EPPlusReadOnlyList`1 : object {
    internal List`1<T> _list;
    public T Item { get; }
    public int Count { get; }
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T get_Item(int index);
    public int GetIndexByValue(T value);
    public int get_Count();
    internal virtual void Clear();
    internal virtual void Add(T item);
}
internal static class OfficeOpenXml.Core.NodeOrders : object {
    internal static Dictionary`2<string, int> WorksheetTopElementOrder;
    private static NodeOrders();
}
public static class OfficeOpenXml.Core.R1C1Translator : object {
    public static string FromR1C1Formula(string formula, int row, int col, bool rollIfOverflow);
    private static bool IsFullRowOrColumn(string address);
    public static string ToR1C1Formula(string formula, int row, int col);
    internal static string ToR1C1FromTokens(IList`1<Token> tokens, int row, int col);
    public static string FromR1C1(string r1C1Address, int row, int col, bool rollIfOverflow);
    private static string FromR1C1SingleAddress(string r1C1Address, int row, int col, bool rollIfOverflow);
    public static string ToR1C1(ExcelAddressBase address, int row, int col);
    private static string GetCellAddress(string RC, int fromRow, int row, bool isFixed);
    private static string GetCell(R1C1 currentCell, int refRow, int refCol, bool rollIfOverflow);
}
internal class OfficeOpenXml.Core.RangeCopyHelper : object {
    private ExcelRangeBase _sourceRange;
    private ExcelRangeBase _destination;
    private ExcelRangeCopyOptionFlags _copyOptions;
    private bool _sameWorkbook;
    private ExcelMetadata _sourceMd;
    private ExcelMetadata _destMd;
    private Dictionary`2<ulong, CopiedCell> _copiedCells;
    private int _sourceDaIx;
    private int _destDaIx;
    internal RangeCopyHelper(ExcelRangeBase sourceRange, ExcelRangeBase destination, ExcelRangeCopyOptionFlags copyOptions);
    internal void Copy();
    private void CopyDrawings();
    private void CopyDataValidations();
    private void CopyConditionalFormatting();
    private string HandelAddress(ExcelAddressBase cfAddress);
    private void GetCopiedValues();
    private void AddValuesFormulasAndStyles(ExcelWorksheet worksheet, bool includeStyles, Dictionary`2<int, int> styleCashe);
    private void AddComments(ExcelWorksheet worksheet);
    private void AddThreadedComments(ExcelWorksheet worksheet);
    private void CopyValuesToDestination();
    private void CopyMetaDataToNewPackage(CopiedCell cell);
    private static void CopyComment(ExcelRangeBase destination, CopiedCell cell);
    private void ClearDestination();
    private Dictionary`2<int, ExcelAddress> GetCopiedMergedCells();
    private void CopyMergedCells(Dictionary`2<int, ExcelAddress> copiedMergedCells);
    private void CopyFullRow();
    private void CopyFullColumn();
}
internal class OfficeOpenXml.Core.RangeCopyStylesHelper : object {
    private ExcelRangeBase _sourceRange;
    private ExcelRangeBase _destinationRange;
    internal RangeCopyStylesHelper(ExcelRangeBase sourceRange, ExcelRangeBase destinationRange);
    internal void CopyStyles();
    private static int GetStyleId(ExcelWorksheet wsSource, int sc, int sr);
}
internal enum OfficeOpenXml.Core.RangeQuadTree.IntersectType : Enum {
    public int value__;
    public static IntersectType OutSide;
    public static IntersectType Inside;
    public static IntersectType Partial;
}
internal class OfficeOpenXml.Core.RangeQuadTree.QuadItem`1 : object {
    [CompilerGeneratedAttribute]
private QuadRange <Dimension>k__BackingField;
    [CompilerGeneratedAttribute]
private QuadItem`1<T> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<QuadRangeItem`1<T>> <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<QuadItem`1<T>> <Quads>k__BackingField;
    public QuadRange Dimension { get; public set; }
    public QuadItem`1<T> Parent { get; }
    public List`1<QuadRangeItem`1<T>> Ranges { get; }
    public List`1<QuadItem`1<T>> Quads { get; private set; }
    public QuadItem`1(QuadItem`1<T> parent, QuadRange dimension);
    public void Add(QuadRange range, T value);
    public IntersectType Intersect(QuadRange range);
    private void AddQuads();
    [CompilerGeneratedAttribute]
public QuadRange get_Dimension();
    [CompilerGeneratedAttribute]
public void set_Dimension(QuadRange value);
    [CompilerGeneratedAttribute]
public QuadItem`1<T> get_Parent();
    [CompilerGeneratedAttribute]
public List`1<QuadRangeItem`1<T>> get_Ranges();
    [CompilerGeneratedAttribute]
public List`1<QuadItem`1<T>> get_Quads();
    [CompilerGeneratedAttribute]
private void set_Quads(List`1<QuadItem`1<T>> value);
    public virtual string ToString();
    internal void GetIntersectingRangeItems(QuadRange range, List`1& ranges);
    internal void GetIntersectingRanges(QuadRange range, List`1& ranges);
}
internal class OfficeOpenXml.Core.RangeQuadTree.QuadRange : ValueType {
    public static int MinSize;
    [CompilerGeneratedAttribute]
private int <FromRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromCol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToCol>k__BackingField;
    public int FromRow { get; }
    public int FromCol { get; }
    public int ToRow { get; }
    public int ToCol { get; }
    public bool IsMinimumSize { get; }
    public QuadRange(FormulaRangeAddress range);
    public QuadRange(ExcelAddressBase address);
    public QuadRange(int fromRow, int fromCol, int toRow, int toCol);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_FromRow();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_FromCol();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ToRow();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ToCol();
    public bool get_IsMinimumSize();
    public virtual string ToString();
    internal IntersectType Intersect(QuadRange range);
}
internal class OfficeOpenXml.Core.RangeQuadTree.QuadRangeItem`1 : ValueType {
    [CompilerGeneratedAttribute]
private QuadRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public QuadRange Range { get; }
    public T Value { get; }
    public QuadRangeItem`1(QuadRange range, T value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public QuadRange get_Range();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T get_Value();
}
internal class OfficeOpenXml.Core.RangeQuadTree.QuadTree`1 : object {
    [CompilerGeneratedAttribute]
private QuadItem`1<T> <Root>k__BackingField;
    public QuadItem`1<T> Root { get; private set; }
    public QuadTree`1(FormulaRangeAddress range);
    public QuadTree`1(ExcelAddressBase address);
    public QuadTree`1(int fromRow, int fromCol, int toRow, int toCol);
    [CompilerGeneratedAttribute]
public QuadItem`1<T> get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(QuadItem`1<T> value);
    public void Add(QuadRange quadRange, T item);
    internal List`1<QuadRangeItem`1<T>> GetIntersectingRangeItems(QuadRange range);
    internal List`1<QuadRange> GetIntersectingRanges(QuadRange range);
}
internal enum OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.FontMetricsFamilies : Enum {
    public ushort value__;
    public static FontMetricsFamilies Arial;
    public static FontMetricsFamilies ArialBlack;
    public static FontMetricsFamilies ArialNarrow;
    public static FontMetricsFamilies BookmanOldStyle;
    public static FontMetricsFamilies Calibri;
    public static FontMetricsFamilies CalibriLight;
    public static FontMetricsFamilies CalistoMT;
    public static FontMetricsFamilies Cambria;
    public static FontMetricsFamilies CenturyGothic;
    public static FontMetricsFamilies CenturySchoolbook;
    public static FontMetricsFamilies Corbel;
    public static FontMetricsFamilies CourierNew;
    public static FontMetricsFamilies Garamond;
    public static FontMetricsFamilies Georgia;
    public static FontMetricsFamilies GillSansMT;
    public static FontMetricsFamilies Impact;
    public static FontMetricsFamilies LiberationSerif;
    public static FontMetricsFamilies Rockwell;
    public static FontMetricsFamilies RockwellCondensed;
    public static FontMetricsFamilies TimesNewRoman;
    public static FontMetricsFamilies TrebuchetMS;
    public static FontMetricsFamilies TwCenMT;
    public static FontMetricsFamilies TwCenMTCondensed;
    public static FontMetricsFamilies Verdana;
}
internal enum OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.FontSubFamilies : Enum {
    public ushort value__;
    public static FontSubFamilies Regular;
    public static FontSubFamilies Bold;
    public static FontSubFamilies Italic;
    public static FontSubFamilies BoldItalic;
}
internal enum OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.FontMetricsClass : Enum {
    public byte value__;
    public static FontMetricsClass Class1;
    public static FontMetricsClass Class2;
    public static FontMetricsClass Class3;
    public static FontMetricsClass Class4;
    public static FontMetricsClass Class5;
    public static FontMetricsClass Class6;
    public static FontMetricsClass Class7;
    public static FontMetricsClass Class8;
    public static FontMetricsClass Class9;
    public static FontMetricsClass Class10;
    public static FontMetricsClass Class11;
    public static FontMetricsClass Class12;
    public static FontMetricsClass Class13;
    public static FontMetricsClass Class14;
    public static FontMetricsClass Class15;
    public static FontMetricsClass Class16;
}
internal static class OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsLoader : object {
    internal static Dictionary`2<UInt32, SerializedFontMetrics> LoadFontMetrics();
}
internal static class OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsSerializer : object {
    public static Encoding FileEncoding;
    private static GenericFontMetricsSerializer();
    public static SerializedFontMetrics Deserialize(Stream stream);
}
internal class OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsTextMeasurer : GenericFontMetricsTextMeasurerBase {
    public sealed virtual TextMeasurement MeasureText(string text, MeasurementFont font);
    public sealed virtual bool ValidForEnvironment();
}
internal class OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.SerializedFontMetrics : object {
    [CompilerGeneratedAttribute]
private FontMetricsFamilies <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private FontSubFamilies <SubFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FontKey>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LineHeight1em>k__BackingField;
    [CompilerGeneratedAttribute]
private FontMetricsClass <DefaultWidthClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<FontMetricsClass, float> <ClassWidths>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<char, FontMetricsClass> <CharMetrics>k__BackingField;
    public FontMetricsFamilies Family { get; public set; }
    public FontSubFamilies SubFamily { get; public set; }
    public ushort Version { get; public set; }
    public UInt32 FontKey { get; public set; }
    public float LineHeight1em { get; public set; }
    public FontMetricsClass DefaultWidthClass { get; public set; }
    public Dictionary`2<FontMetricsClass, float> ClassWidths { get; private set; }
    public Dictionary`2<char, FontMetricsClass> CharMetrics { get; private set; }
    [CompilerGeneratedAttribute]
public FontMetricsFamilies get_Family();
    [CompilerGeneratedAttribute]
public void set_Family(FontMetricsFamilies value);
    [CompilerGeneratedAttribute]
public FontSubFamilies get_SubFamily();
    [CompilerGeneratedAttribute]
public void set_SubFamily(FontSubFamilies value);
    [CompilerGeneratedAttribute]
public ushort get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(ushort value);
    [CompilerGeneratedAttribute]
public UInt32 get_FontKey();
    [CompilerGeneratedAttribute]
public void set_FontKey(UInt32 value);
    [CompilerGeneratedAttribute]
public float get_LineHeight1em();
    [CompilerGeneratedAttribute]
public void set_LineHeight1em(float value);
    [CompilerGeneratedAttribute]
public FontMetricsClass get_DefaultWidthClass();
    [CompilerGeneratedAttribute]
public void set_DefaultWidthClass(FontMetricsClass value);
    [CompilerGeneratedAttribute]
public Dictionary`2<FontMetricsClass, float> get_ClassWidths();
    [CompilerGeneratedAttribute]
private void set_ClassWidths(Dictionary`2<FontMetricsClass, float> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<char, FontMetricsClass> get_CharMetrics();
    [CompilerGeneratedAttribute]
private void set_CharMetrics(Dictionary`2<char, FontMetricsClass> value);
    public UInt32 GetKey();
    public static UInt32 GetKey(FontMetricsFamilies family, FontSubFamilies subFamily);
}
public class OfficeOpenXml.Core.Worksheet.Fill.FillDateParams : FillParams {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StepValue>k__BackingField;
    [CompilerGeneratedAttribute]
private eDateTimeUnit <DateTimeUnit>k__BackingField;
    internal HashSet`1<DayOfWeek> _excludedWeekdays;
    [CompilerGeneratedAttribute]
private HashSet`1<DateTime> <_holidayCalendar>k__BackingField;
    public Nullable`1<DateTime> StartValue { get; public set; }
    public Nullable`1<DateTime> EndValue { get; public set; }
    public int StepValue { get; public set; }
    public eDateTimeUnit DateTimeUnit { get; public set; }
    internal HashSet`1<DateTime> _holidayCalendar { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartValue();
    [CompilerGeneratedAttribute]
public void set_StartValue(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndValue();
    [CompilerGeneratedAttribute]
public void set_EndValue(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public int get_StepValue();
    [CompilerGeneratedAttribute]
public void set_StepValue(int value);
    [CompilerGeneratedAttribute]
public eDateTimeUnit get_DateTimeUnit();
    [CompilerGeneratedAttribute]
public void set_DateTimeUnit(eDateTimeUnit value);
    public void SetExcludedWeekdays(DayOfWeek[] weekdays);
    [CompilerGeneratedAttribute]
internal HashSet`1<DateTime> get__holidayCalendar();
    public void SetExcludedDates(DateTime[] holidayDates);
    public void SetExcludedDates(IEnumerable`1<DateTime> holidayDates);
}
public class OfficeOpenXml.Core.Worksheet.Fill.FillListParams : FillParams {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    public int StartIndex { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(int value);
}
internal class OfficeOpenXml.Core.Worksheet.Fill.FillMethods : object {
    internal static void FillNumber(ExcelWorksheet worksheet, int fromRow, int toRow, int fromCol, int toCol, FillNumberParams options);
    private static void FillCellNumber(ExcelWorksheet worksheet, FillNumberParams options, Double& value, int r, int c);
    internal static void FillDateTime(ExcelWorksheet worksheet, int fromRow, int toRow, int fromCol, int toCol, FillDateParams options);
    private static void FillCellDate(ExcelWorksheet worksheet, FillDateParams options, Nullable`1& value, bool isLastDayOfMonth, int c, int r);
    internal static void FillList(ExcelWorksheet worksheet, int fromRow, int toRow, int fromCol, int toCol, IEnumerable`1<T> enumList, FillListParams options);
    private static bool GetNextCell(FillParams options, int fromRow, int toRow, int fromCol, int toCol, Int32& r, Int32& c);
    private static void GetStartCell(FillParams options, int fromRow, int toRow, int fromCol, int toCol, Int32& startRow, Int32& startCol);
    private static void SkipFirstCell(Int32& fromRow, Int32& fromCol, Int32& toRow, Int32& toCol, FillParams options);
    private static DateTime GetWeekday(DateTime value, FillDateParams o);
}
public class OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams : FillParams {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StartValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <EndValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StepValue>k__BackingField;
    [CompilerGeneratedAttribute]
private eCalculationMethod <CalculationMethod>k__BackingField;
    public Nullable`1<double> StartValue { get; public set; }
    public Nullable`1<double> EndValue { get; public set; }
    public double StepValue { get; public set; }
    public eCalculationMethod CalculationMethod { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StartValue();
    [CompilerGeneratedAttribute]
public void set_StartValue(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_EndValue();
    [CompilerGeneratedAttribute]
public void set_EndValue(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public double get_StepValue();
    [CompilerGeneratedAttribute]
public void set_StepValue(double value);
    [CompilerGeneratedAttribute]
public eCalculationMethod get_CalculationMethod();
    [CompilerGeneratedAttribute]
public void set_CalculationMethod(eCalculationMethod value);
}
public class OfficeOpenXml.Core.Worksheet.Fill.FillParams : object {
    [CompilerGeneratedAttribute]
private eFillStartPosition <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private eFillDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberFormat>k__BackingField;
    public eFillStartPosition StartPosition { get; public set; }
    public eFillDirection Direction { get; public set; }
    public string NumberFormat { get; public set; }
    [CompilerGeneratedAttribute]
public eFillStartPosition get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(eFillStartPosition value);
    [CompilerGeneratedAttribute]
public eFillDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(eFillDirection value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
}
internal class OfficeOpenXml.Core.Worksheet.Fonts.BoundingRectangle : object {
    [CompilerGeneratedAttribute]
private short <Xmin>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Ymin>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Xmax>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Ymax>k__BackingField;
    public short Xmin { get; public set; }
    public short Ymin { get; public set; }
    public short Xmax { get; public set; }
    public short Ymax { get; public set; }
    public BoundingRectangle(short xMin, short yMin, short xMax, short yMax);
    [CompilerGeneratedAttribute]
public short get_Xmin();
    [CompilerGeneratedAttribute]
public void set_Xmin(short value);
    [CompilerGeneratedAttribute]
public short get_Ymin();
    [CompilerGeneratedAttribute]
public void set_Ymin(short value);
    [CompilerGeneratedAttribute]
public short get_Xmax();
    [CompilerGeneratedAttribute]
public void set_Xmax(short value);
    [CompilerGeneratedAttribute]
public short get_Ymax();
    [CompilerGeneratedAttribute]
public void set_Ymax(short value);
}
internal class OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.DefaultTextMeasurer : GenericFontMetricsTextMeasurerBase {
    internal TextMeasurement Measure(string text, float size);
}
internal class OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.FontScaleFactor : object {
    private float _small;
    private float _medium;
    private float _large;
    private float _sizeFactor;
    public FontScaleFactor(float small, float medium, float large);
    public FontScaleFactor(float small, float medium, float large, float sizeFactor);
    internal float Calculate(float width);
    private float Adjustment(float v, float lowerWidth, float upperWidth, float originalFactorLower, float originalFactorUpper);
}
internal class OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.FontScaleFactors : object {
    private Dictionary`2<UInt32, FontScaleFactor> _fonts;
    public static float JapaneseKanjiDefaultScalingFactor;
    public static float DigitsScalingFactor;
    private static FontScaleFactors();
    private static UInt32 GetKey(FontMetricsFamilies family, FontSubFamilies subFamily);
    private static FontScaleFactor CSF(float s, float m, float l);
    private static FontScaleFactor CSF(float s, float m, float l, float sf);
    private void Initialize();
    public float GetScaleFactor(UInt32 key, float width);
}
internal abstract class OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.GenericFontMetricsTextMeasurerBase : object {
    private FontScaleFactors _fontScaleFactors;
    private static Dictionary`2<UInt32, SerializedFontMetrics> _fonts;
    private static object _syncRoot;
    private static GenericFontMetricsTextMeasurerBase();
    private static void Initialize();
    protected internal bool IsValidFont(UInt32 fontKey);
    protected internal TextMeasurement MeasureTextInternal(string text, UInt32 fontKey, MeasurementFontStyles style, float size);
    internal static UInt32 GetKey(FontMetricsFamilies family, FontSubFamilies subFamily);
    internal static UInt32 GetKey(string fontFamily, MeasurementFontStyles fontStyle);
    private static float GetEastAsianCharWidth(int cc, MeasurementFontStyles style);
    private static bool IsEastAsianChar(char c);
}
internal class OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.UniCodeRange : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    private static IEnumerable`1<UniCodeRange> _jk;
    public int Start { get; public set; }
    public int End { get; public set; }
    public static IEnumerable`1<UniCodeRange> JapaneseKanji { get; }
    public UniCodeRange(int start, int end);
    private static UniCodeRange();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
    public bool IsInRange(int c);
    public IEnumerable`1<char> ToCharList();
    public static IEnumerable`1<UniCodeRange> get_JapaneseKanji();
}
internal class OfficeOpenXml.Core.Worksheet.FormulaDataTableValidation : object {
    internal static void HasPartlyFormulaDataTable(ExcelWorksheet ws, ExcelAddressBase deleteRange, bool isDelete, string errorMsg);
}
internal static class OfficeOpenXml.Core.Worksheet.MoveSheetXmlNode : object {
    internal static void RearrangeWorksheets(ExcelWorksheets worksheets, string sourceWorksheetName, string targetWorksheetName, bool before);
    internal static void RearrangeWorksheets(ExcelWorksheets worksheets, int sourcePositionId, int targetPositionId, bool before);
    private static void MoveTargetXml(ExcelWorksheets worksheets, ExcelWorksheet sourceWs, ExcelWorksheet targetWs, bool before);
}
internal static class OfficeOpenXml.Core.Worksheet.WorksheetCopyHelper : object {
    internal static ExcelWorksheet Copy(ExcelWorksheets targetWorksheets, string name, ExcelWorksheet sourceWorksheet);
    private static void SetTableFunction(ExcelWorksheet added);
    private static void CloneCellsAndStyles(ExcelWorksheet Copy, ExcelWorksheet added);
    internal static void CopyDrawing(ExcelWorksheet source, ExcelWorksheet target);
    private static XmlNode GetMatchingNode(XmlDocument drawXml, XmlNode node, XmlNamespaceManager nsm);
    private static void CopyDrawingRels(ExcelDrawing sourceDraw, ExcelPackage pck, ExcelWorksheet target, ZipPackagePart partDraw, XmlDocument& drawXml);
    internal static void CopyControl(ExcelPackage pck, ExcelWorksheet target, ExcelControl ctrl);
    internal static void CopyChartRelations(ExcelChart chart, ExcelWorksheet target, ZipPackagePart partDraw, XmlDocument drawXml, ExcelWorksheet source);
    internal static void CopyPicture(ExcelWorksheet added, ZipPackagePart partDraw, XmlDocument drawXml, ExcelWorksheet copy, ExcelPicture pic);
    internal static void CopyChartRelations(ExcelWorksheet copy, ExcelWorksheet added, ExcelChart chart, ZipPackagePart chartPart);
    internal static void CopyBlipFillDrawing(ExcelWorksheet target, ZipPackagePart targetPart, XmlDocument drawXml, ExcelDrawing draw, ExcelDrawingFill fill, Uri uriDraw);
    internal static void CopyVmlDrawing(ExcelWorksheet origSheet, ExcelWorksheet newSheet);
    private static void CopyComment(ExcelWorksheet Copy, ExcelWorksheet added);
    internal static void CopyVmlRelations(ExcelWorksheet Copy, ExcelWorksheet added);
    private static void CopySheetNames(ExcelWorksheet Copy, ExcelWorksheet added);
    private static bool HasExternalReference(string formula);
    private static void CopyTable(ExcelWorksheet Copy, ExcelWorksheet added);
    private static void CopyPivotTable(ExcelWorksheet Copy, ExcelWorksheet added);
    private static void CreateCacheInNewPackage(ExcelWorksheet added, ExcelPivotTable tbl, ZipPackagePart partTbl);
    private static void ChangeToWsLocalPivotTable(ExcelWorksheet added, Dictionary`2<string, string> nameMap);
    private static void CopyDxfStyles(ExcelWorksheet copy, ExcelWorksheet added);
    private static void CopyDxfStylesTables(ExcelWorksheet copy, ExcelWorksheet added);
    private static void CopyDxfStylesPivotTables(ExcelWorksheet copy, ExcelWorksheet added, Dictionary`2<int, int> dxfStyleCache);
    private static void CopyDxfStylesConditionalFormatting(ExcelWorksheet copy, ExcelWorksheet added, Dictionary`2<int, int> dxfStyleCache);
    private static void AppendDxf(ExcelStyles stylesFrom, ExcelStyles stylesTo, Dictionary`2<int, int> dxfStyleCache, int dxfId);
    private static int CopyValues(ExcelWorksheet Copy, ExcelWorksheet added, int row, int col, bool hasMetadata);
    private static void CopyThreadedComments(ExcelWorksheet copy, ExcelWorksheet added);
    private static void CopyHeaderFooterPictures(ExcelWorksheet Copy, ExcelWorksheet added);
    private static void CopyText(ExcelHeaderFooterText from, ExcelHeaderFooterText to);
    private static void CopySlicers(ExcelWorksheet source, ExcelWorksheet target);
}
internal class OfficeOpenXml.Core.Worksheet.WorksheetOutlineHelper : object {
    private ExcelWorksheet _worksheet;
    internal WorksheetOutlineHelper(ExcelWorksheet worksheet);
    internal int CollapseRow(int rowNo, int level, bool collapsed, bool collapseChildren, int addValue, bool parentIsHidden);
    private RowInternal GetRow(int row);
    internal int CollapseColumn(int colNo, int level, bool collapsed, bool collapseChildren, int addValue);
    private ExcelColumn GetColumn(int col, bool ignoreFromCol);
}
internal static class OfficeOpenXml.Core.Worksheet.WorksheetRangeCommonHelper : object {
    internal static void AdjustDvAndCfFormulasRow(ExcelWorksheet ws, int rowFrom, int rows);
    internal static void AdjustDvAndCfFormulasColumn(ExcelWorksheet ws, int columnFrom, int columns);
}
internal static class OfficeOpenXml.Core.Worksheet.WorksheetRangeDeleteHelper : object {
    internal static void DeleteRow(ExcelWorksheet ws, int rowFrom, int rows);
    private static void DeleteRowPivotTable(ExcelWorksheet ws, int rowFrom, int rows);
    private static void DeleteRowTable(ExcelWorksheet ws, int rowFrom, int rows);
    internal static void DeleteColumn(ExcelWorksheet ws, int columnFrom, int columns);
    private static void DeleteColumnTable(ExcelWorksheet ws, int columnFrom, int columns);
    private static void AdjustColumnMinMaxDelete(ExcelWorksheet ws, int columnFrom, int columns);
    private static void ValidateRow(ExcelWorksheet ws, int rowFrom, int rows, int columnFrom, int columns);
    private static void ValidateColumn(ExcelWorksheet ws, int columnFrom, int columns, int rowFrom, int rows);
    private static void DeleteCellStores(ExcelWorksheet ws, int rowFrom, int columnFrom, int rows, int columns, int columnTo);
    private static void DeleteCellStoresShiftLeft(ExcelWorksheet ws, ExcelRangeBase fromAddress);
    private static void AdjustColumnMinMax(ExcelWorksheet ws, int columnFrom, int columns);
    private static void FixFormulasDeleteRow(ExcelWorksheet ws, int rowFrom, int rows, string workSheetName);
    internal static void FixFormulasDeleteColumn(ExcelWorksheet ws, int columnFrom, int columns, string workSheetName);
    internal static void Delete(ExcelRangeBase range, eShiftTypeDelete shift);
    private static void DeleteSparkLinesAddress(ExcelRangeBase range, eShiftTypeDelete shift, ExcelAddressBase effectedAddress);
    private static void DeleteFilterAddress(ExcelRangeBase range, ExcelAddressBase effectedAddress, eShiftTypeDelete shift);
    private static void ValidateDelete(ExcelWorksheet ws, ExcelRangeBase range, eShiftTypeDelete shift);
    private static void AdjustDrawings(ExcelRangeBase range, eShiftTypeDelete shift);
    private static void DeleteConditionalFormatting(ExcelRangeBase range, eShiftTypeDelete shift, ExcelWorksheet ws, ExcelAddressBase effectedAddress);
    private static void DeleteDataValidations(ExcelRangeBase range, eShiftTypeDelete shift, ExcelWorksheet ws, ExcelAddressBase effectedAddress);
    private static ExcelAddressBase DeleteSplitAddress(ExcelAddressBase address, ExcelAddressBase range, ExcelAddressBase effectedAddress, eShiftTypeDelete shift);
    private static ExcelAddressBase DeleteSplitIndividualAddress(ExcelAddressBase address, ExcelAddressBase range, ExcelAddressBase effectedAddress, eShiftTypeDelete shift);
    private static ExcelAddressBase ShiftAddress(ExcelAddressBase address, ExcelAddressBase range, eShiftTypeDelete shift);
    private static void DeletePivottableAddresses(ExcelWorksheet ws, ExcelRangeBase range, eShiftTypeDelete shift, ExcelAddressBase effectedAddress);
    private static void DeleteTableAddresses(ExcelWorksheet ws, ExcelRangeBase range, eShiftTypeDelete shift, ExcelAddressBase effectedAddress);
    private static void FixFormulasDelete(ExcelRangeBase range, ExcelAddressBase effectedRange, eShiftTypeDelete shift);
    private static ExcelAddressBase GetAffectedRange(ExcelRangeBase range, eShiftTypeDelete shift, Nullable`1<int> start);
}
internal static class OfficeOpenXml.Core.Worksheet.WorksheetRangeHelper : object {
    internal static void FixMergedCells(ExcelWorksheet ws, ExcelRangeBase range, eShiftTypeInsert shift);
    internal static void FixMergedCells(ExcelWorksheet ws, ExcelRangeBase range, eShiftTypeDelete shift);
    internal static void FixMergedCellsRow(ExcelWorksheet ws, int row, int rows, bool delete, int fromCol, int toCol);
    internal static void FixMergedCellsColumn(ExcelWorksheet ws, int column, int columns, bool delete, int fromRow, int toRow);
    internal static void AdjustDrawingsRow(ExcelWorksheet ws, int rowFrom, int rows, int colFrom, int colTo);
    internal static void AdjustDrawingsColumn(ExcelWorksheet ws, int columnFrom, int columns, int rowFrom, int rowTo);
    internal static void ConvertEffectedSharedFormulasToCellFormulas(ExcelWorksheet wsUpdate, ExcelAddressBase range);
    private static bool ConvertEffectedSharedFormulaIfReferenceWithinRange(ExcelWorksheet ws, ExcelAddressBase delRange, SharedFormula sf, string wsName);
    private static void ConvertSharedFormulaToCellFormula(ExcelWorksheet ws, SharedFormula sf, ExcelAddressBase sfAddress);
    internal static void ValidateIfInsertDeleteIsPossible(ExcelRangeBase range, ExcelAddressBase effectedAddress, ExcelAddressBase effectedAddressTable, bool insert);
    internal static string AdjustStartCellForFormula(string formula, ExcelAddress address, ExcelAddressBase newAddress);
}
internal static class OfficeOpenXml.Core.Worksheet.WorksheetRangeInsertHelper : object {
    private static SourceCodeTokenizer _sct;
    private static WorksheetRangeInsertHelper();
    internal static void InsertRow(ExcelWorksheet ws, int rowFrom, int rows, int copyStylesFromRow);
    private static void InsertRowTable(ExcelWorksheet ws, int rowFrom, int rows);
    private static void InsertRowPivotTable(ExcelWorksheet ws, int rowFrom, int rows);
    internal static void InsertColumn(ExcelWorksheet ws, int columnFrom, int columns, int copyStylesFromColumn);
    private static void InsertColumnPivotTable(ExcelWorksheet ws, int columnFrom, int columns);
    private static void InsertColumnTable(ExcelWorksheet ws, int columnFrom, int columns);
    internal static void Insert(ExcelRangeBase range, eShiftTypeInsert shift, bool styleCopy, bool isTable);
    private static void InsertConditionalFormatting(ExcelRangeBase range, eShiftTypeInsert shift, ExcelAddressBase effectedAddress, ExcelWorksheet ws, bool isTable);
    private static void InsertDataValidation(ExcelRangeBase range, eShiftTypeInsert shift, ExcelAddressBase effectedAddress, ExcelWorksheet ws, bool isTable);
    private static void InsertFilterAddress(ExcelRangeBase range, ExcelAddressBase effectedAddress, eShiftTypeInsert shift);
    private static void InsertSparkLinesAddress(ExcelRangeBase range, eShiftTypeInsert shift, ExcelAddressBase effectedAddress);
    private static void ValidateInsert(ExcelRangeBase range, eShiftTypeInsert shift);
    private static ExcelAddressBase InsertSplitAddress(ExcelAddressBase address, ExcelAddressBase range, ExcelAddressBase effectedAddress, eShiftTypeInsert shift, bool isTable);
    private static ExcelAddressBase InsertSplitIndividualAddress(ExcelAddressBase address, ExcelAddressBase range, ExcelAddressBase effectedAddress, eShiftTypeInsert shift, bool isTable);
    private static ExcelAddressBase ShiftAddress(ExcelAddressBase address, ExcelAddressBase range, eShiftTypeInsert shift);
    private static void InsertPivottableAddress(ExcelWorksheet ws, ExcelRangeBase range, eShiftTypeInsert shift, ExcelAddressBase effectedAddress);
    private static void InsertTableAddress(ExcelWorksheet ws, ExcelRangeBase range, eShiftTypeInsert shift, ExcelAddressBase effectedAddress);
    private static List`1<int> GetStylesForRange(ExcelRangeBase range, eShiftTypeInsert shift);
    private static void SetStylesForRange(ExcelRangeBase range, eShiftTypeInsert shift, List`1<int> list);
    private static ExcelAddressBase GetAffectedRange(ExcelRangeBase range, eShiftTypeInsert shift, Nullable`1<int> start);
    private static void CopyStylesFromColumn(ExcelWorksheet ws, int columnFrom, int columns, int copyStylesFromColumn);
    private static void AdjustColumns(ExcelWorksheet ws, int columnFrom, int columns);
    private static void AdjustFormulasInsert(ExcelRangeBase range, ExcelAddressBase effectedAddress, eShiftTypeInsert shift);
    private static void FixFormulasInsertRow(ExcelWorksheet ws, int rowFrom, int rows, int columnFrom, int columnTo);
    private static IList`1<Token> GetTokens(ExcelWorksheet ws, int row, int column, string formula);
    private static void FixFormulasInsertColumn(ExcelWorksheet ws, int columnFrom, int columns);
    private static void ValidateInsertColumn(ExcelWorksheet ws, int columnFrom, int columns, int rowFrom, int rows);
    private static void ValidateInsertRow(ExcelWorksheet ws, int rowFrom, int rows, int columnFrom, int columns);
    internal static void InsertCellStores(ExcelWorksheet ws, int rowFrom, int columnFrom, int rows, int columns, int columnTo);
    internal static void InsertCellStoreShiftRight(ExcelWorksheet ws, ExcelAddressBase fromAddress);
    private static void CopyFromStyleRow(ExcelWorksheet ws, int rowFrom, int rows, int copyStylesFromRow);
    private static void InsertTableColumns(int columnFrom, int columns, ExcelTable tbl);
}
internal static class OfficeOpenXml.Core.Worksheet.XmlWriter.GetBlock : object {
    internal static void Pos(string xml, string tag, Int32& start, Int32& end);
}
internal class OfficeOpenXml.Core.Worksheet.XmlWriter.WorksheetXmlWriter : object {
    private ExcelWorksheet _ws;
    private ExcelPackage _package;
    private Dictionary`2<int, int> columnStyles;
    public WorksheetXmlWriter(ExcelWorksheet worksheet, ExcelPackage package);
    internal void WriteNodes(StreamWriter sw, string xml, Int32& startOfNode, Int32& endOfNode);
    internal void FindNodePositionAndClearItInit(StreamWriter sw, string xml, string nodeName, Int32& start, Int32& end);
    internal void FindNodePositionAndClearIt(StreamWriter sw, string xml, string nodeName, Int32& start, Int32& end);
    private void UpdateColumnData(StreamWriter sw, string prefix);
    private void FixSharedFormulas();
    internal int GetStyleIdDefaultWithMemo(int row, int col);
    private object GetFormulaValue(object v, string prefix);
    private void WriteRow(StringBuilder cache, ExcelStyleCollection`1<ExcelXfs> cellXfs, int prevRow, int row, string prefix);
    private string GetDataTableAttributes(SharedFormula f);
    private void UpdateRowCellData(StreamWriter sw, string prefix);
    private void SetMetaDataForError(CellStoreEnumerator`1<ExcelValue> cse, ExcelErrorValue error);
    private bool IsMdSameError(ExcelMetadata metadata, MetaDataReference md, ExcelErrorValue error, int row, int column);
    private void UpdateMergedCells(StreamWriter sw, string prefix);
    private void WriteDataValidationAttributes(StringBuilder& cache, int i);
    private void WriteDataValidation(StringBuilder& cache, string prefix, int i, string extNode);
    private void WriteDataValidationFormulaSingle(IExcelDataValidationFormula formula, StringBuilder& cache, string prefix, string extNode, string endExtNode);
    private void WriteDataValidationFormulas(IExcelDataValidationFormula formula1, IExcelDataValidationFormula formula2, StringBuilder& cache, string prefix, string extNode, string endExtNode, ExcelDataValidationOperator dvOperator);
    private StringBuilder UpdateDataValidation(string prefix, string extraAttribute);
    private void UpdateHyperLinks(StreamWriter sw, string prefix);
    private void ClearHyperlinks();
    private void UpdateRowBreaks(StreamWriter sw, string prefix);
    private void UpdateColBreaks(StreamWriter sw, string prefix);
    private string UpdateExtLstDataValidations(string mainPrefix);
    private string UpdateConditionalFormattingAttributes(ExcelConditionalFormattingRule conditionalFormat);
    private string GetXMLCFExt(string prefix, ExcelConditionalFormattingRule format, int i, int count);
    private string UpdateExtLstConditionalFormatting(string mainPrefix);
    private string WriteColorOption(string nodeName, ExcelDxfColor color);
    private string WriteCfIcon(ExcelConditionalFormattingIconDataBarValue icon, bool gteCheck);
    private string GetCFXML(string prefix, ExcelConditionalFormattingRule conditionalFormat, int i);
    private string UpdateConditionalFormattings(string prefix);
    private void WriteDxfColor(string prefix, StringBuilder cache, ExcelDxfColor col, string nodeName);
    private void WriteStyle(StringBuilder cache, string prefix, ExcelConditionalFormattingRule format);
    [CompilerGeneratedAttribute]
private void <FixSharedFormulas>b__8_0(int i);
}
internal static class OfficeOpenXml.Core.ZipHelper : object {
    internal static string UncompressEntry(ZipInputStream zipStream, ZipEntry entry);
    internal static ZipInputStream OpenZipResource();
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation {
    public string Uid { get; }
    public ExcelAddress Address { get; }
    public ExcelDataValidationType ValidationType { get; }
    public ExcelDataValidationWarningStyle ErrorStyle { get; public set; }
    public Nullable`1<bool> AllowBlank { get; public set; }
    public Nullable`1<bool> ShowInputMessage { get; public set; }
    public Nullable`1<bool> ShowErrorMessage { get; public set; }
    public string ErrorTitle { get; public set; }
    public string Error { get; public set; }
    public string PromptTitle { get; public set; }
    public string Prompt { get; public set; }
    public bool AllowsOperator { get; }
    public ExcelDataValidationAsType As { get; }
    public ExcelDataValidationImeMode ImeMode { get; public set; }
    public bool IsStale { get; }
    public abstract virtual string get_Uid();
    public abstract virtual ExcelAddress get_Address();
    public abstract virtual ExcelDataValidationType get_ValidationType();
    public abstract virtual ExcelDataValidationWarningStyle get_ErrorStyle();
    public abstract virtual void set_ErrorStyle(ExcelDataValidationWarningStyle value);
    public abstract virtual Nullable`1<bool> get_AllowBlank();
    public abstract virtual void set_AllowBlank(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_ShowInputMessage();
    public abstract virtual void set_ShowInputMessage(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_ShowErrorMessage();
    public abstract virtual void set_ShowErrorMessage(Nullable`1<bool> value);
    public abstract virtual string get_ErrorTitle();
    public abstract virtual void set_ErrorTitle(string value);
    public abstract virtual string get_Error();
    public abstract virtual void set_Error(string value);
    public abstract virtual string get_PromptTitle();
    public abstract virtual void set_PromptTitle(string value);
    public abstract virtual string get_Prompt();
    public abstract virtual void set_Prompt(string value);
    public abstract virtual bool get_AllowsOperator();
    public abstract virtual void Validate();
    public abstract virtual ExcelDataValidationAsType get_As();
    public abstract virtual ExcelDataValidationImeMode get_ImeMode();
    public abstract virtual void set_ImeMode(ExcelDataValidationImeMode value);
    public abstract virtual bool get_IsStale();
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny {
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom {
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime {
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal {
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt {
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList {
    public Nullable`1<bool> HideDropDown { get; public set; }
    public abstract virtual Nullable`1<bool> get_HideDropDown();
    public abstract virtual void set_HideDropDown(Nullable`1<bool> value);
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime {
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula`1 {
    public T Formula { get; }
    public abstract virtual T get_Formula();
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula2`1 {
    public T Formula2 { get; }
    public abstract virtual T get_Formula2();
}
public interface OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithOperator {
    public ExcelDataValidationOperator Operator { get; public set; }
    public abstract virtual ExcelDataValidationOperator get_Operator();
    public abstract virtual void set_Operator(ExcelDataValidationOperator value);
}
internal static class OfficeOpenXml.DataValidation.DataValidationSchemaNames : object {
    public static string Any;
    public static string None;
    public static string Whole;
    public static string Decimal;
    public static string List;
    public static string TextLength;
    public static string Date;
    public static string Time;
    public static string Custom;
}
public enum OfficeOpenXml.DataValidation.eDataValidationType : Enum {
    public int value__;
    public static eDataValidationType Any;
    public static eDataValidationType Whole;
    public static eDataValidationType Decimal;
    public static eDataValidationType List;
    public static eDataValidationType TextLength;
    public static eDataValidationType DateTime;
    public static eDataValidationType Time;
    public static eDataValidationType Custom;
}
internal interface OfficeOpenXml.DataValidation.Events.IFormulaListener {
    public abstract virtual void Notify(ValidationFormulaChangedArgs e);
}
public class OfficeOpenXml.DataValidation.Events.OnFormulaChangedEventArgs : EventArgs {
    internal bool isExt;
}
internal class OfficeOpenXml.DataValidation.Events.ValidationFormulaChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ValidationUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewValue>k__BackingField;
    public string ValidationUid { get; public set; }
    public string OldValue { get; public set; }
    public string NewValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ValidationUid();
    [CompilerGeneratedAttribute]
public void set_ValidationUid(string value);
    [CompilerGeneratedAttribute]
public string get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(string value);
    [CompilerGeneratedAttribute]
public string get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(string value);
}
public abstract class OfficeOpenXml.DataValidation.ExcelDataValidation : object {
    internal ExcelWorksheet _ws;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    private ExcelDatavalidationAddress _address;
    [CompilerGeneratedAttribute]
private ExcelDataValidationType <ValidationType>k__BackingField;
    private string errorStyleString;
    private string imeModeString;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowBlank>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowInputMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PromptTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prompt>k__BackingField;
    private ExcelDataValidationAsType _as;
    [CompilerGeneratedAttribute]
private bool <IsStale>k__BackingField;
    private string operatorString;
    [CompilerGeneratedAttribute]
private InternalValidationType <InternalValidationType>k__BackingField;
    public string Uid { get; internal set; }
    public ExcelAddress Address { get; internal set; }
    public ExcelDataValidationType ValidationType { get; }
    public ExcelDataValidationWarningStyle ErrorStyle { get; public set; }
    public ExcelDataValidationImeMode ImeMode { get; public set; }
    public Nullable`1<bool> AllowBlank { get; public set; }
    public Nullable`1<bool> ShowInputMessage { get; public set; }
    public Nullable`1<bool> ShowErrorMessage { get; public set; }
    public string ErrorTitle { get; public set; }
    public string Error { get; public set; }
    public string PromptTitle { get; public set; }
    public string Prompt { get; public set; }
    public bool AllowsOperator { get; }
    public ExcelDataValidationAsType As { get; }
    [ObsoleteAttribute]
public bool IsStale { get; }
    public ExcelDataValidationOperator Operator { get; public set; }
    internal InternalValidationType InternalValidationType { get; internal set; }
    protected Action`1<OnFormulaChangedEventArgs> OnFormulaChanged { get; }
    protected ExcelDataValidation(string uid, string address, ExcelWorksheet ws);
    protected ExcelDataValidation(XmlReader xr, ExcelWorksheet ws);
    protected ExcelDataValidation(ExcelDataValidation validation, ExcelWorksheet ws);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uid();
    [CompilerGeneratedAttribute]
internal void set_Uid(string value);
    public sealed virtual ExcelAddress get_Address();
    internal void set_Address(ExcelAddress value);
    [CompilerGeneratedAttribute]
public virtual ExcelDataValidationType get_ValidationType();
    public sealed virtual ExcelDataValidationWarningStyle get_ErrorStyle();
    public sealed virtual void set_ErrorStyle(ExcelDataValidationWarningStyle value);
    public sealed virtual ExcelDataValidationImeMode get_ImeMode();
    public sealed virtual void set_ImeMode(ExcelDataValidationImeMode value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_AllowBlank();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowBlank(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_ShowInputMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowInputMessage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_ShowErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowErrorMessage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorTitle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorTitle(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PromptTitle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PromptTitle(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Prompt();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Prompt(string value);
    public virtual bool get_AllowsOperator();
    public virtual void Validate();
    public sealed virtual ExcelDataValidationAsType get_As();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsStale();
    public sealed virtual ExcelDataValidationOperator get_Operator();
    public sealed virtual void set_Operator(ExcelDataValidationOperator value);
    private string CheckAndFixRangeAddress(string address);
    private bool IsEntireColumn(string address);
    [CompilerGeneratedAttribute]
internal InternalValidationType get_InternalValidationType();
    [CompilerGeneratedAttribute]
internal void set_InternalValidationType(InternalValidationType value);
    protected Action`1<OnFormulaChangedEventArgs> get_OnFormulaChanged();
    internal virtual void LoadXML(XmlReader xr);
    internal virtual void ReadClassSpecificXmlNodes(XmlReader xr);
    internal static string NewId();
    internal void SetAddress(string address);
    internal abstract virtual ExcelDataValidation GetClone();
    internal abstract virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    [CompilerGeneratedAttribute]
private void <get_OnFormulaChanged>b__71_0(OnFormulaChangedEventArgs e);
}
public class OfficeOpenXml.DataValidation.ExcelDatavalidationAddress : ExcelAddress {
    private ExcelDataValidation _val;
    internal ExcelDatavalidationAddress(string address, ExcelDataValidation val);
    protected internal virtual void BeforeChangeAddress();
    protected internal virtual void ChangeAddress();
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationAny : ExcelDataValidation {
    public bool AllowsOperator { get; }
    public ExcelDataValidationType ValidationType { get; }
    internal ExcelDataValidationAny(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationAny(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationAny(ExcelDataValidationAny copy, ExcelWorksheet ws);
    public virtual bool get_AllowsOperator();
    public virtual ExcelDataValidationType get_ValidationType();
    internal virtual ExcelDataValidation GetClone();
    internal virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    internal ExcelDataValidationAny Clone();
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationAsType : object {
    private IExcelDataValidation _validation;
    public IExcelDataValidationList ListValidation { get; }
    public IExcelDataValidationInt IntegerValidation { get; }
    public IExcelDataValidationDateTime DateTimeValidation { get; }
    public IExcelDataValidationTime TimeValidation { get; }
    public IExcelDataValidationDecimal DecimalValidation { get; }
    public IExcelDataValidationAny AnyValidation { get; }
    public IExcelDataValidationCustom CustomValidation { get; }
    internal ExcelDataValidationAsType(IExcelDataValidation validation);
    public T Type();
    public IExcelDataValidationList get_ListValidation();
    public IExcelDataValidationInt get_IntegerValidation();
    public IExcelDataValidationDateTime get_DateTimeValidation();
    public IExcelDataValidationTime get_TimeValidation();
    public IExcelDataValidationDecimal get_DecimalValidation();
    public IExcelDataValidationAny get_AnyValidation();
    public IExcelDataValidationCustom get_CustomValidation();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.DataValidation.ExcelDataValidationCollection : object {
    private List`1<ExcelDataValidation> _validations;
    private ExcelWorksheet _worksheet;
    internal RangeDictionary`1<ExcelDataValidation> _validationsRD;
    [CompilerGeneratedAttribute]
private bool <InternalValidationEnabled>k__BackingField;
    public int Count { get; }
    public bool InternalValidationEnabled { get; public set; }
    public ExcelDataValidation Item { get; public set; }
    public IExcelDataValidation Item { get; }
    internal ExcelDataValidationCollection(ExcelWorksheet worksheet);
    internal ExcelDataValidationCollection(XmlReader xr, ExcelWorksheet worksheet);
    public void ReadDataValidations(XmlReader xr);
    internal void AddToRangeDictionary(ExcelDataValidation validation);
    internal void UpdateRangeDictionary(ExcelDataValidation validation);
    internal bool HasValidationType(InternalValidationType type);
    private int GetCount(InternalValidationType type);
    internal int GetNonExtLstCount();
    internal int GetExtLstCount();
    private void OnValidationCountChanged();
    private void ValidateAddress(string address, IExcelDataValidation validatingValidation);
    internal void ValidateAll();
    internal void AddCopyOfDataValidation(ExcelDataValidation dv, ExcelWorksheet added, string address);
    public IExcelDataValidationAny AddAnyValidation(string address);
    public IExcelDataValidationInt AddIntegerValidation(string address);
    public IExcelDataValidationInt AddTextLengthValidation(string address);
    public IExcelDataValidationDecimal AddDecimalValidation(string address);
    public IExcelDataValidationList AddListValidation(string address);
    public IExcelDataValidationDateTime AddDateTimeValidation(string address);
    public IExcelDataValidationTime AddTimeValidation(string address);
    public IExcelDataValidationCustom AddCustomValidation(string address);
    private ExcelDataValidation AddValidation(string address, ExcelDataValidation validation);
    private void AddItemToRangeDictionaryMultipleAddresses(string address, ExcelDataValidation validation);
    public int get_Count();
    [CompilerGeneratedAttribute]
public bool get_InternalValidationEnabled();
    [CompilerGeneratedAttribute]
public void set_InternalValidationEnabled(bool value);
    public ExcelDataValidation get_Item(int index);
    public void set_Item(int index, ExcelDataValidation value);
    public IExcelDataValidation get_Item(string address);
    public IEnumerable`1<ExcelDataValidation> FindAll(Predicate`1<ExcelDataValidation> match);
    public bool Remove(IExcelDataValidation item);
    public ExcelDataValidation Find(Predicate`1<ExcelDataValidation> match);
    public void Clear();
    internal IExcelDataValidation GetFormulas(ExcelDataValidation dv, IExcelDataValidationFormula& Formula, IExcelDataValidationFormula& Formula2);
    private void AddInternal(ExcelDataValidation validation);
    public void RemoveAll(Predicate`1<ExcelDataValidation> match);
    [IteratorStateMachineAttribute("OfficeOpenXml.DataValidation.ExcelDataValidationCollection/<System-Collections-Generic-IEnumerable<OfficeOpenXml-DataValidation-Contracts-IExcelDataValidation>-GetEnumerator>d__44")]
private sealed virtual override IEnumerator`1<IExcelDataValidation> System.Collections.Generic.IEnumerable<OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void InsertRangeDictionary(ExcelAddressBase address, bool shiftRight);
    private void InsertRangeIntoRangeDictionary(ExcelAddressBase address, bool shiftRight);
    internal void ClearRangeDictionary(ExcelAddressBase address);
    internal void DeleteRangeDictionary(ExcelAddressBase address, bool shiftLeft);
    private void DeleteRangeInRangeDictionary(ExcelAddressBase address, bool shiftLeft);
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationCustom : ExcelDataValidationWithFormula`1<IExcelDataValidationFormula> {
    public ExcelDataValidationType ValidationType { get; }
    internal ExcelDataValidationCustom(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationCustom(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationCustom(ExcelDataValidationCustom copy, ExcelWorksheet ws);
    public virtual ExcelDataValidationType get_ValidationType();
    internal virtual IExcelDataValidationFormula DefineFormulaClassType(string formulaValue, string sheetName);
    internal virtual ExcelDataValidation GetClone();
    internal virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    private ExcelDataValidationAny Clone();
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationDateTime : ExcelDataValidationWithFormula2`1<IExcelDataValidationFormulaDateTime> {
    public ExcelDataValidationType ValidationType { get; }
    internal ExcelDataValidationDateTime(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationDateTime(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationDateTime(ExcelDataValidationDateTime copy, ExcelWorksheet ws);
    public virtual ExcelDataValidationType get_ValidationType();
    internal virtual IExcelDataValidationFormulaDateTime DefineFormulaClassType(string formulaValue, string sheetName);
    internal virtual ExcelDataValidation GetClone();
    internal virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    private ExcelDataValidationDateTime Clone();
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationDecimal : ExcelDataValidationWithFormula2`1<IExcelDataValidationFormulaDecimal> {
    public ExcelDataValidationType ValidationType { get; }
    internal ExcelDataValidationDecimal(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationDecimal(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationDecimal(ExcelDataValidationDecimal copy, ExcelWorksheet ws);
    public virtual ExcelDataValidationType get_ValidationType();
    internal virtual IExcelDataValidationFormulaDecimal DefineFormulaClassType(string formulaValue, string sheetName);
    internal virtual ExcelDataValidation GetClone();
    internal virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    private ExcelDataValidationDecimal Clone();
}
internal static class OfficeOpenXml.DataValidation.ExcelDataValidationFactory : object {
    internal static ExcelDataValidation Create(XmlReader xr, ExcelWorksheet ws);
    internal static ExcelDataValidation CloneWithNewAdress(string address, ExcelDataValidation oldValidation, ExcelWorksheet added);
}
public enum OfficeOpenXml.DataValidation.ExcelDataValidationImeMode : Enum {
    public int value__;
    public static ExcelDataValidationImeMode NoControl;
    public static ExcelDataValidationImeMode Off;
    public static ExcelDataValidationImeMode On;
    public static ExcelDataValidationImeMode Disabled;
    public static ExcelDataValidationImeMode Hiragana;
    public static ExcelDataValidationImeMode FullKatakana;
    public static ExcelDataValidationImeMode HalfKatakana;
    public static ExcelDataValidationImeMode FullAlpha;
    public static ExcelDataValidationImeMode HalfAlpha;
    public static ExcelDataValidationImeMode FullHangul;
    public static ExcelDataValidationImeMode HalfHangul;
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationInt : ExcelDataValidationWithFormula2`1<IExcelDataValidationFormulaInt> {
    private bool _isTextLength;
    public ExcelDataValidationType ValidationType { get; }
    internal ExcelDataValidationInt(XmlReader xr, ExcelWorksheet ws, bool isTextLength);
    internal ExcelDataValidationInt(string uid, string address, ExcelWorksheet ws, bool isTextLength);
    internal ExcelDataValidationInt(ExcelDataValidationInt copy, ExcelWorksheet ws);
    public virtual ExcelDataValidationType get_ValidationType();
    internal virtual IExcelDataValidationFormulaInt DefineFormulaClassType(string formulaValue, string worksheetName);
    internal virtual ExcelDataValidation GetClone();
    internal virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    public ExcelDataValidationInt Clone();
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationList : ExcelDataValidationWithFormula`1<IExcelDataValidationFormulaList> {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HideDropDown>k__BackingField;
    public bool AllowsOperator { get; }
    public ExcelDataValidationType ValidationType { get; }
    public Nullable`1<bool> HideDropDown { get; public set; }
    internal ExcelDataValidationList(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationList(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationList(ExcelDataValidationList copy, ExcelWorksheet ws);
    public virtual bool get_AllowsOperator();
    public virtual ExcelDataValidationType get_ValidationType();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_HideDropDown();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideDropDown(Nullable`1<bool> value);
    public virtual void Validate();
    internal virtual IExcelDataValidationFormulaList DefineFormulaClassType(string formulaValue, string sheetName);
    internal virtual void LoadXML(XmlReader xr);
    internal virtual ExcelDataValidation GetClone();
    internal virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    private ExcelDataValidationDecimal Clone();
}
public enum OfficeOpenXml.DataValidation.ExcelDataValidationOperator : Enum {
    public int value__;
    public static ExcelDataValidationOperator between;
    public static ExcelDataValidationOperator equal;
    public static ExcelDataValidationOperator greaterThan;
    public static ExcelDataValidationOperator greaterThanOrEqual;
    public static ExcelDataValidationOperator lessThan;
    public static ExcelDataValidationOperator lessThanOrEqual;
    public static ExcelDataValidationOperator notBetween;
    public static ExcelDataValidationOperator notEqual;
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationTime : ExcelDataValidationWithFormula2`1<IExcelDataValidationFormulaTime> {
    public ExcelDataValidationType ValidationType { get; }
    internal ExcelDataValidationTime(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationTime(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationTime(ExcelDataValidationTime copy, ExcelWorksheet ws);
    public virtual ExcelDataValidationType get_ValidationType();
    internal virtual IExcelDataValidationFormulaTime DefineFormulaClassType(string formulaValue, string sheetName);
    internal virtual ExcelDataValidation GetClone();
    internal virtual ExcelDataValidation GetClone(ExcelWorksheet copy);
    private ExcelDataValidationTime Clone();
}
public class OfficeOpenXml.DataValidation.ExcelDataValidationType : object {
    [CompilerGeneratedAttribute]
private eDataValidationType <Type>k__BackingField;
    public eDataValidationType Type { get; private set; }
    internal ExcelDataValidationType(eDataValidationType validationType);
    [CompilerGeneratedAttribute]
public eDataValidationType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(eDataValidationType value);
    internal string TypeToXmlString();
}
public enum OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle : Enum {
    public int value__;
    public static ExcelDataValidationWarningStyle undefined;
    public static ExcelDataValidationWarningStyle stop;
    public static ExcelDataValidationWarningStyle warning;
    public static ExcelDataValidationWarningStyle information;
}
public abstract class OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1 : ExcelDataValidation {
    protected internal string _workSheetName;
    [CompilerGeneratedAttribute]
private T <Formula>k__BackingField;
    public T Formula { get; protected set; }
    internal ExcelDataValidationWithFormula`1(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationWithFormula`1(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationWithFormula`1(ExcelDataValidation copy, ExcelWorksheet ws);
    internal virtual void ReadClassSpecificXmlNodes(XmlReader xr);
    internal T ReadFormula(XmlReader xr, string formulaIdentifier);
    internal abstract virtual T DefineFormulaClassType(string formulaValue, string worksheetName);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Formula();
    [CompilerGeneratedAttribute]
protected void set_Formula(T value);
    public virtual void Validate();
}
public abstract class OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1 : ExcelDataValidationWithFormula`1<T> {
    [CompilerGeneratedAttribute]
private T <Formula2>k__BackingField;
    public T Formula2 { get; protected set; }
    internal ExcelDataValidationWithFormula2`1(string uid, string address, ExcelWorksheet ws);
    internal ExcelDataValidationWithFormula2`1(XmlReader xr, ExcelWorksheet ws);
    internal ExcelDataValidationWithFormula2`1(ExcelDataValidation copy, ExcelWorksheet ws);
    internal virtual void ReadClassSpecificXmlNodes(XmlReader xr);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Formula2();
    [CompilerGeneratedAttribute]
protected void set_Formula2(T value);
    public virtual void Validate();
}
public class OfficeOpenXml.DataValidation.ExcelTime : object {
    [CompilerGeneratedAttribute]
private EventHandler _timeChanged;
    private decimal SecondsPerDay;
    private decimal SecondsPerHour;
    private decimal SecondsPerMinute;
    public static int NumberOfDecimals;
    private int _hour;
    private int _minute;
    private Nullable`1<int> _second;
    public int Hour { get; public set; }
    public int Minute { get; public set; }
    public Nullable`1<int> Second { get; public set; }
    public ExcelTime(decimal value);
    [CompilerGeneratedAttribute]
private void add__timeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__timeChanged(EventHandler value);
    private void Init(decimal value);
    private void SetSecond(int value);
    private void SetMinute(int value);
    private void SetHour(int value);
    internal void add_TimeChanged(EventHandler value);
    internal void remove_TimeChanged(EventHandler value);
    private void OnTimeChanged();
    public int get_Hour();
    public void set_Hour(int value);
    public int get_Minute();
    public void set_Minute(int value);
    public Nullable`1<int> get_Second();
    public void set_Second(Nullable`1<int> value);
    private decimal Round(decimal value);
    private decimal ToSeconds();
    public decimal ToExcelTime();
    public string ToExcelString();
    public virtual string ToString();
}
public class OfficeOpenXml.DataValidation.Exceptions.DataValidationFormulaTooLongException : InvalidOperationException {
    public DataValidationFormulaTooLongException(string message);
}
public interface OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula {
    public string ExcelFormula { get; public set; }
    public abstract virtual string get_ExcelFormula();
    public abstract virtual void set_ExcelFormula(string value);
}
public interface OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaDateTime {
}
public interface OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaDecimal {
}
public interface OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaInt {
}
public interface OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaList {
    public IList`1<string> Values { get; }
    public abstract virtual IList`1<string> get_Values();
}
public interface OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaTime {
}
public interface OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaWithValue`1 {
    public T Value { get; public set; }
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
}
internal abstract class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula : object {
    private Action`1<OnFormulaChangedEventArgs> _handler;
    private string _validationUid;
    protected string _formula;
    private string _workSheetName;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private FormulaState <State>k__BackingField;
    internal bool HasValue { get; internal set; }
    protected FormulaState State { get; protected set; }
    public string ExcelFormula { get; public set; }
    public ExcelDataValidationFormula(string validationUid, string workSheetName, Action`1<OnFormulaChangedEventArgs> extListHandler);
    [CompilerGeneratedAttribute]
internal virtual bool get_HasValue();
    [CompilerGeneratedAttribute]
internal virtual void set_HasValue(bool value);
    [CompilerGeneratedAttribute]
protected FormulaState get_State();
    [CompilerGeneratedAttribute]
protected void set_State(FormulaState value);
    private int MeasureFormulaLength(string formula);
    public sealed virtual string get_ExcelFormula();
    public sealed virtual void set_ExcelFormula(string value);
    private bool RefersToOtherWorksheet(string address);
    internal abstract virtual void ResetValue();
    internal virtual string GetXmlValue();
    protected abstract virtual string GetValueAsString();
}
internal class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaCustom : ExcelDataValidationFormula {
    public ExcelDataValidationFormulaCustom(string formula, string validationUid, string sheetName, Action`1<OnFormulaChangedEventArgs> extHandler);
    internal virtual string GetXmlValue();
    protected virtual string GetValueAsString();
    internal virtual void ResetValue();
}
internal class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaDateTime : ExcelDataValidationFormulaValue`1<Nullable`1<DateTime>> {
    public ExcelDataValidationFormulaDateTime(string formula, string validationUid, string sheetName, Action`1<OnFormulaChangedEventArgs> evtHandler);
    protected virtual string GetValueAsString();
}
internal class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaDecimal : ExcelDataValidationFormulaValue`1<Nullable`1<double>> {
    public ExcelDataValidationFormulaDecimal(string formula, string validationUid, string sheetName, Action`1<OnFormulaChangedEventArgs> extHandler);
    protected virtual string GetValueAsString();
}
internal class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaInt : ExcelDataValidationFormulaValue`1<Nullable`1<int>> {
    public ExcelDataValidationFormulaInt(string formula, string validationUid, string worksheetName, Action`1<OnFormulaChangedEventArgs> extListHandler);
    protected virtual string GetValueAsString();
}
internal class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaList : ExcelDataValidationFormula {
    private string _inputFormula;
    [CompilerGeneratedAttribute]
private IList`1<string> <Values>k__BackingField;
    public IList`1<string> Values { get; private set; }
    public ExcelDataValidationFormulaList(string formula, string uid, string sheetName, Action`1<OnFormulaChangedEventArgs> extListHandler);
    private void SetInitialValues();
    private void values_ListChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IList`1<string> value);
    protected virtual string GetValueAsString();
    internal virtual void ResetValue();
}
internal class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaTime : ExcelDataValidationFormulaValue`1<ExcelTime> {
    public ExcelDataValidationFormulaTime(string formula, string validationUid, string sheetName, Action`1<OnFormulaChangedEventArgs> extHandler);
    private void Value_TimeChanged(object sender, EventArgs e);
    protected virtual string GetValueAsString();
    internal virtual void ResetValue();
}
internal abstract class OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1 : ExcelDataValidationFormula {
    private T _value;
    internal bool HasValue { get; }
    public T Value { get; public set; }
    public ExcelDataValidationFormulaValue`1(string validationUid, string worksheetName, Action`1<OnFormulaChangedEventArgs> extListHandler);
    internal virtual bool get_HasValue();
    public sealed virtual T get_Value();
    public sealed virtual void set_Value(T value);
    internal virtual void ResetValue();
}
internal enum OfficeOpenXml.DataValidation.Formulas.FormulaState : Enum {
    public int value__;
    public static FormulaState Value;
    public static FormulaState Formula;
}
internal enum OfficeOpenXml.DataValidation.InternalValidationType : Enum {
    public int value__;
    public static InternalValidationType DataValidation;
    public static InternalValidationType ExtLst;
}
public interface OfficeOpenXml.DataValidation.IRangeDataValidation {
    public abstract virtual IExcelDataValidationAny AddAnyDataValidation();
    public abstract virtual IExcelDataValidationInt AddIntegerDataValidation();
    public abstract virtual IExcelDataValidationDecimal AddDecimalDataValidation();
    public abstract virtual IExcelDataValidationDateTime AddDateTimeDataValidation();
    public abstract virtual IExcelDataValidationList AddListDataValidation();
    public abstract virtual IExcelDataValidationInt AddTextLengthDataValidation();
    public abstract virtual IExcelDataValidationTime AddTimeDataValidation();
    public abstract virtual IExcelDataValidationCustom AddCustomDataValidation();
    public abstract virtual void ClearDataValidation(bool deleteIfEmpty);
}
internal class OfficeOpenXml.DataValidation.RangeDataValidation : object {
    private ExcelWorksheet _worksheet;
    private string _address;
    public RangeDataValidation(ExcelWorksheet worksheet, string address);
    public sealed virtual void ClearDataValidation(bool deleteIfEmpty);
    public sealed virtual IExcelDataValidationAny AddAnyDataValidation();
    public sealed virtual IExcelDataValidationInt AddIntegerDataValidation();
    public sealed virtual IExcelDataValidationDecimal AddDecimalDataValidation();
    public sealed virtual IExcelDataValidationDateTime AddDateTimeDataValidation();
    public sealed virtual IExcelDataValidationList AddListDataValidation();
    public sealed virtual IExcelDataValidationInt AddTextLengthDataValidation();
    public sealed virtual IExcelDataValidationTime AddTimeDataValidation();
    public sealed virtual IExcelDataValidationCustom AddCustomDataValidation();
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eColorBy : Enum {
    public int value__;
    public static eColorBy Value;
    public static eColorBy CategoryNames;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType : Enum {
    public int value__;
    public static eColorValuePositionType Number;
    public static eColorValuePositionType Percent;
    public static eColorValuePositionType Extreme;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eFormulaDirection : Enum {
    public int value__;
    public static eFormulaDirection Column;
    public static eFormulaDirection Row;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel : Enum {
    public int value__;
    public static eGeoMappingLevel Automatic;
    public static eGeoMappingLevel DataOnly;
    public static eGeoMappingLevel PostalCode;
    public static eGeoMappingLevel County;
    public static eGeoMappingLevel State;
    public static eGeoMappingLevel CountryRegion;
    public static eGeoMappingLevel CountryRegionList;
    public static eGeoMappingLevel World;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed : Enum {
    public int value__;
    public static eIntervalClosed None;
    public static eIntervalClosed Left;
    public static eIntervalClosed Right;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eNumberOfColors : Enum {
    public int value__;
    public static eNumberOfColors TwoColor;
    public static eNumberOfColors ThreeColor;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType : Enum {
    public int value__;
    public static eNumericDataType Value;
    public static eNumericDataType X;
    public static eNumericDataType Y;
    public static eNumericDataType Size;
    public static eNumericDataType ColorValue;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout : Enum {
    public int value__;
    public static eParentLabelLayout None;
    public static eParentLabelLayout Banner;
    public static eParentLabelLayout Overlapping;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign : Enum {
    public int value__;
    public static ePositionAlign Min;
    public static ePositionAlign Center;
    public static ePositionAlign Max;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType : Enum {
    public int value__;
    public static eProjectionType Automatic;
    public static eProjectionType Mercator;
    public static eProjectionType Miller;
    public static eProjectionType Robinson;
    public static eProjectionType Albers;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eQuartileMethod : Enum {
    public int value__;
    public static eQuartileMethod Inclusive;
    public static eQuartileMethod Exclusive;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout : Enum {
    public int value__;
    public static eRegionLabelLayout None;
    public static eRegionLabelLayout BestFitOnly;
    public static eRegionLabelLayout All;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions : Enum {
    public int value__;
    public static eSidePositions Left;
    public static eSidePositions Top;
    public static eSidePositions Right;
    public static eSidePositions Bottom;
}
public enum OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType : Enum {
    public int value__;
    public static eStringDataType Category;
    public static eStringDataType ColorString;
    public static eStringDataType EntityId;
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChart : ExcelChartEx {
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelBoxWhiskerChartSerie> <Series>k__BackingField;
    public ExcelChartSeries`1<ExcelBoxWhiskerChartSerie> Series { get; }
    internal ExcelBoxWhiskerChart(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelBoxWhiskerChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelBoxWhiskerChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie : ExcelChartExSerie {
    private static string _path;
    public eParentLabelLayout ParentLabelLayout { get; public set; }
    public Nullable`1<eQuartileMethod> QuartileMethod { get; public set; }
    public bool ShowMeanLine { get; public set; }
    public bool ShowMeanMarker { get; public set; }
    public bool ShowNonOutliers { get; public set; }
    public bool ShowOutliers { get; public set; }
    internal ExcelBoxWhiskerChartSerie(ExcelChartEx chart, XmlNamespaceManager ns, XmlNode node);
    public eParentLabelLayout get_ParentLabelLayout();
    public void set_ParentLabelLayout(eParentLabelLayout value);
    public Nullable`1<eQuartileMethod> get_QuartileMethod();
    public void set_QuartileMethod(Nullable`1<eQuartileMethod> value);
    public bool get_ShowMeanLine();
    public void set_ShowMeanLine(bool value);
    public bool get_ShowMeanMarker();
    public void set_ShowMeanMarker(bool value);
    public bool get_ShowNonOutliers();
    public void set_ShowNonOutliers(bool value);
    public bool get_ShowOutliers();
    public void set_ShowOutliers(bool value);
}
public abstract class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx : ExcelChart {
    internal ExcelChartExAxis[] _exAxis;
    private ExcelDrawingBorder _border;
    private ExcelDrawingFill _fill;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelTextFont _font;
    private ExcelTextBody _textBody;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelChartExSerie> <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private eChartStyle <Style>k__BackingField;
    public ExcelChartPlotArea PlotArea { get; }
    public ExcelChartExAxis[] Axis { get; }
    public ExcelChartExTitle Title { get; }
    public ExcelChartExLegend Legend { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelChartSeries`1<ExcelChartExSerie> Series { get; }
    public bool VaryColors { get; public set; }
    public eChartStyle Style { get; public set; }
    public bool HasTitle { get; }
    public bool HasLegend { get; }
    public ExcelView3D View3D { get; }
    public eDisplayBlanksAs DisplayBlanksAs { get; public set; }
    public bool RoundedCorners { get; public set; }
    public bool ShowDataLabelsOverMaximum { get; public set; }
    public bool ShowHiddenData { get; public set; }
    public ExcelChartExAxis XAxis { get; internal set; }
    public ExcelChartExAxis YAxis { get; internal set; }
    internal ExcelChartEx(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    internal ExcelChartEx(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelChartEx(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal void LoadAxis();
    private void Init();
    private void CreateNewChart(ExcelDrawings drawings, XmlDocument chartXml, Nullable`1<eChartType> type);
    private string GetChartExNameSpace(eChartType type);
    private string ChartStartXml(eChartType type);
    private static void AddData(StringBuilder xml);
    internal virtual void AddAxis();
    private static eChartType GetChartType(XmlNode node, XmlNamespaceManager nsm);
    public virtual void DeleteTitle();
    public virtual ExcelChartPlotArea get_PlotArea();
    public ExcelChartExAxis[] get_Axis();
    public ExcelChartExTitle get_Title();
    internal virtual ExcelChartTitle GetTitle();
    public ExcelChartExLegend get_Legend();
    public virtual ExcelDrawingBorder get_Border();
    public virtual ExcelDrawingFill get_Fill();
    public virtual ExcelDrawingEffectStyle get_Effect();
    public virtual ExcelDrawing3D get_ThreeD();
    public virtual ExcelTextFont get_Font();
    public virtual ExcelTextBody get_TextBody();
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelChartExSerie> get_Series();
    public virtual bool get_VaryColors();
    public virtual void set_VaryColors(bool value);
    [CompilerGeneratedAttribute]
public virtual eChartStyle get_Style();
    [CompilerGeneratedAttribute]
public virtual void set_Style(eChartStyle value);
    public virtual bool get_HasTitle();
    public virtual bool get_HasLegend();
    public virtual ExcelView3D get_View3D();
    public virtual eDisplayBlanksAs get_DisplayBlanksAs();
    public virtual void set_DisplayBlanksAs(eDisplayBlanksAs value);
    public virtual bool get_RoundedCorners();
    public virtual void set_RoundedCorners(bool value);
    public virtual bool get_ShowDataLabelsOverMaximum();
    public virtual void set_ShowDataLabelsOverMaximum(bool value);
    public virtual bool get_ShowHiddenData();
    public virtual void set_ShowHiddenData(bool value);
    public ExcelChartExAxis get_XAxis();
    internal void set_XAxis(ExcelChartExAxis value);
    public ExcelChartExAxis get_YAxis();
    internal void set_YAxis(ExcelChartExAxis value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis : ExcelChartAxis {
    private string _majorTickMarkPath;
    private string _minorTickMarkPath;
    private string _displayUnitPath;
    public eAxisTickMark MajorTickMark { get; public set; }
    public eAxisTickMark MinorTickMark { get; public set; }
    public eAxisPosition AxisPosition { get; internal set; }
    public eCrosses Crosses { get; public set; }
    public eCrossBetween CrossBetween { get; public set; }
    public Nullable`1<double> CrossesAt { get; public set; }
    public eTickLabelPosition LabelPosition { get; public set; }
    public bool Deleted { get; public set; }
    public eTickLabelPosition TickLabelPosition { get; public set; }
    public double DisplayUnit { get; public set; }
    public ExcelChartExTitle Title { get; }
    public Nullable`1<double> MinValue { get; public set; }
    public Nullable`1<double> MaxValue { get; public set; }
    public Nullable`1<double> MajorUnit { get; public set; }
    public Nullable`1<eTimeUnit> MajorTimeUnit { get; public set; }
    public Nullable`1<double> MinorUnit { get; public set; }
    public Nullable`1<eTimeUnit> MinorTimeUnit { get; public set; }
    public Nullable`1<double> LogBase { get; public set; }
    public eAxisOrientation Orientation { get; public set; }
    internal string Id { get; }
    internal eAxisType AxisType { get; }
    internal ExcelChartExAxis(ExcelChart chart, XmlNamespaceManager nsm, XmlNode topNode);
    public virtual eAxisTickMark get_MajorTickMark();
    public virtual void set_MajorTickMark(eAxisTickMark value);
    public virtual eAxisTickMark get_MinorTickMark();
    public virtual void set_MinorTickMark(eAxisTickMark value);
    public virtual eAxisPosition get_AxisPosition();
    internal virtual void set_AxisPosition(eAxisPosition value);
    public virtual eCrosses get_Crosses();
    public virtual void set_Crosses(eCrosses value);
    public virtual eCrossBetween get_CrossBetween();
    public virtual void set_CrossBetween(eCrossBetween value);
    public virtual Nullable`1<double> get_CrossesAt();
    public virtual void set_CrossesAt(Nullable`1<double> value);
    public virtual eTickLabelPosition get_LabelPosition();
    public virtual void set_LabelPosition(eTickLabelPosition value);
    public virtual bool get_Deleted();
    public virtual void set_Deleted(bool value);
    public virtual eTickLabelPosition get_TickLabelPosition();
    public virtual void set_TickLabelPosition(eTickLabelPosition value);
    public virtual double get_DisplayUnit();
    public virtual void set_DisplayUnit(double value);
    public ExcelChartExTitle get_Title();
    internal virtual ExcelChartTitle GetTitle();
    public virtual Nullable`1<double> get_MinValue();
    public virtual void set_MinValue(Nullable`1<double> value);
    public virtual Nullable`1<double> get_MaxValue();
    public virtual void set_MaxValue(Nullable`1<double> value);
    public virtual Nullable`1<double> get_MajorUnit();
    public virtual void set_MajorUnit(Nullable`1<double> value);
    public virtual Nullable`1<eTimeUnit> get_MajorTimeUnit();
    public virtual void set_MajorTimeUnit(Nullable`1<eTimeUnit> value);
    public virtual Nullable`1<double> get_MinorUnit();
    public virtual void set_MinorUnit(Nullable`1<double> value);
    public virtual Nullable`1<eTimeUnit> get_MinorTimeUnit();
    public virtual void set_MinorTimeUnit(Nullable`1<eTimeUnit> value);
    public virtual Nullable`1<double> get_LogBase();
    public virtual void set_LogBase(Nullable`1<double> value);
    public virtual eAxisOrientation get_Orientation();
    public virtual void set_Orientation(eAxisOrientation value);
    internal virtual string get_Id();
    internal virtual eAxisType get_AxisType();
}
public abstract class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData : XmlHelper {
    private string _worksheetName;
    public string Formula { get; public set; }
    public eFormulaDirection FormulaDirection { get; public set; }
    public string NameFormula { get; public set; }
    public Nullable`1<eFormulaDirection> NameFormulaDirection { get; public set; }
    internal ExcelChartExData(string worksheetName, XmlNamespaceManager nsm, XmlNode topNode);
    public string get_Formula();
    public void set_Formula(string value);
    public eFormulaDirection get_FormulaDirection();
    public void set_FormulaDirection(eFormulaDirection value);
    public string get_NameFormula();
    public void set_NameFormula(string value);
    public Nullable`1<eFormulaDirection> get_NameFormulaDirection();
    public void set_NameFormulaDirection(Nullable`1<eFormulaDirection> value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection : XmlHelper {
    private List`1<ExcelChartExData> _list;
    private ExcelChartExSerie _serie;
    public int Id { get; }
    public ExcelChartExData Item { get; }
    public int Count { get; }
    internal ExcelChartExDataCollection(ExcelChartExSerie serie, XmlNamespaceManager nsm, XmlNode topNode);
    public int get_Id();
    public ExcelChartExNumericData AddNumericDimension(string formula);
    public ExcelChartExStringData AddStringDimension(string formula);
    internal void SetTypeNumeric(int index, eNumericDataType type);
    internal void SetTypeString(int index, eStringDataType type);
    public ExcelChartExData get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<ExcelChartExData> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal ExcelChartExData GetValueDimension();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel : ExcelChartDataLabel {
    internal ExcelChartExSerie _serie;
    internal static string _dataLabelPath;
    private static string _showValuePath;
    private static string _showCategoryPath;
    private static string _seriesNamePath;
    public eLabelPosition Position { get; public set; }
    public bool ShowValue { get; public set; }
    public bool ShowCategory { get; public set; }
    public bool ShowSeriesName { get; public set; }
    public bool ShowPercent { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public bool ShowBubbleSize { get; public set; }
    public bool ShowLegendKey { get; public set; }
    public string Separator { get; public set; }
    internal ExcelChartExDataLabel(ExcelChartExSerie serie, XmlNamespaceManager nsm, XmlNode node);
    public virtual eLabelPosition get_Position();
    public virtual void set_Position(eLabelPosition value);
    internal virtual void SetDataLabelNode();
    public virtual bool get_ShowValue();
    public virtual void set_ShowValue(bool value);
    public virtual bool get_ShowCategory();
    public virtual void set_ShowCategory(bool value);
    public virtual bool get_ShowSeriesName();
    public virtual void set_ShowSeriesName(bool value);
    public virtual bool get_ShowPercent();
    public virtual void set_ShowPercent(bool value);
    public virtual bool get_ShowLeaderLines();
    public virtual void set_ShowLeaderLines(bool value);
    public virtual bool get_ShowBubbleSize();
    public virtual void set_ShowBubbleSize(bool value);
    public virtual bool get_ShowLegendKey();
    public virtual void set_ShowLegendKey(bool value);
    public virtual string get_Separator();
    public virtual void set_Separator(string value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection : ExcelChartExDataLabel {
    private SortedDictionary`2<int, ExcelChartExDataLabelItem> _dic;
    public ExcelChartExDataLabel Item { get; }
    internal ExcelChartExDataLabelCollection(ExcelChartExSerie serie, XmlNamespaceManager ns, XmlNode node, String[] schemaNodeOrder);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public ExcelChartExDataLabelItem Add(int index);
    public ExcelChartExDataLabel get_Item(int index);
    public sealed virtual IEnumerator`1<ExcelChartExDataLabelItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelItem : ExcelChartExDataLabel {
    public int Index { get; private set; }
    internal ExcelChartExDataLabelItem(ExcelChartExSerie serie, XmlNamespaceManager nsm, XmlNode node);
    internal ExcelChartExDataLabelItem(ExcelChartExSerie serie, XmlNamespaceManager nsm, XmlNode node, int index);
    public int get_Index();
    private void set_Index(int value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint : XmlHelper {
    private ExcelChartExSerie _serie;
    internal static string dataPtPath;
    internal static string SubTotalPath;
    private static string indexPath;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _line;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public int Index { get; private set; }
    public bool SubTotal { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartExDataPoint(ExcelChartExSerie serie, XmlNamespaceManager ns, XmlNode topNode, String[] schemaNodeOrder);
    internal ExcelChartExDataPoint(ExcelChartExSerie serie, XmlNamespaceManager ns, XmlNode topNode, int index, String[] schemaNodeOrder);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    public bool get_SubTotal();
    public void set_SubTotal(bool value);
    private string GetSubTotalPath();
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private void CreateDp();
    private XmlElement GetPrependItem();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection : XmlHelper {
    private ExcelChartExSerie _serie;
    internal SortedDictionary`2<int, ExcelChartExDataPoint> _dic;
    public ExcelChartExDataPoint Item { get; }
    public int Count { get; }
    internal ExcelChartExDataPointCollection(ExcelChartExSerie serie, XmlNamespaceManager ns, XmlNode topNode, String[] schemaNodeOrder);
    public ExcelChartExDataPoint Add(int index);
    internal ExcelChartExDataPoint AddDp(int idx);
    public bool ContainsKey(int index);
    public ExcelChartExDataPoint get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<ExcelChartExDataPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend : ExcelChartLegend {
    public ePositionAlign PositionAlignment { get; public set; }
    public eLegendPosition Position { get; public set; }
    internal ExcelChartExLegend(ExcelChart chart, XmlNamespaceManager nsm, XmlNode node);
    public ePositionAlign get_PositionAlignment();
    public void set_PositionAlignment(ePositionAlign value);
    public virtual eLegendPosition get_Position();
    public virtual void set_Position(eLegendPosition value);
    public virtual void Add();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExNumericData : ExcelChartExData {
    public eNumericDataType Type { get; public set; }
    internal ExcelChartExNumericData(string worksheetName, XmlNamespaceManager nsm, XmlNode topNode);
    public eNumericDataType get_Type();
    public void set_Type(eNumericDataType value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExParetoLine : ExcelDrawingBorder {
    private ExcelChart _chart;
    private ExcelDrawingEffectStyle _effect;
    public ExcelDrawingEffectStyle Effect { get; }
    internal ExcelChartExParetoLine(ExcelChart chart, XmlNamespaceManager nsm, XmlNode node);
    public ExcelDrawingEffectStyle get_Effect();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExPlotarea : ExcelChartPlotArea {
    internal ExcelChartExPlotarea(XmlNamespaceManager ns, XmlNode node, ExcelChart chart);
    public virtual ExcelChartDataTable CreateDataTable();
    public virtual void RemoveDataTable();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie : ExcelChartSerie {
    private XmlNode _dataNode;
    private ExcelChartExDataCollection _dataDimensions;
    private static string headerAddressPath;
    private XmlHelper _catSerieHelper;
    private XmlHelper _valSerieHelper;
    private ExcelChartExSerieDataLabel _dataLabels;
    private ExcelChartExDataPointCollection _dataPoints;
    internal int DataId { get; }
    public ExcelChartExDataCollection DataDimensions { get; }
    public ExcelAddressBase HeaderAddress { get; public set; }
    public string Header { get; public set; }
    public string Series { get; public set; }
    public string XSeries { get; public set; }
    public ExcelChartExSerieDataLabel DataLabel { get; }
    public ExcelChartExDataPointCollection DataPoints { get; }
    public bool Hidden { get; public set; }
    public bool HasDataLabel { get; }
    public int NumberOfItems { get; }
    public ExcelChartTrendlineCollection TrendLines { get; }
    internal ExcelChartExSerie(ExcelChartEx chart, XmlNamespaceManager ns, XmlNode node);
    private void AddAxis();
    internal int get_DataId();
    public ExcelChartExDataCollection get_DataDimensions();
    public virtual ExcelAddressBase get_HeaderAddress();
    public virtual void set_HeaderAddress(ExcelAddressBase value);
    public virtual string get_Header();
    public virtual void set_Header(string value);
    public virtual string get_Series();
    public virtual void set_Series(string value);
    public virtual string get_XSeries();
    public virtual void set_XSeries(string value);
    private XmlHelper GetSerieHelper();
    private XmlHelper GetXSerieHelper(bool create);
    public ExcelChartExSerieDataLabel get_DataLabel();
    public ExcelChartExDataPointCollection get_DataPoints();
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_HasDataLabel();
    public virtual int get_NumberOfItems();
    public virtual ExcelChartTrendlineCollection get_TrendLines();
    internal virtual void SetID(string id);
    internal static XmlElement CreateSeriesAndDataElement(ExcelChartEx chart, bool hasCatSerie);
    internal static XmlElement CreateSeriesElement(ExcelChartEx chart, eChartType type, int index, XmlNode referenceNode, bool isPareto);
    private static object AddAxisReferense(ExcelChartEx chart);
    private static string GetLayoutId(eChartType chartType, bool isPareto);
    private static void SetLayoutProperties(ExcelChartEx chart, XmlElement ser);
    private static string GetNumType(eChartType chartType);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning : XmlHelper {
    private static string _binSizePath;
    private static string _binCountPath;
    private static string _intervalClosedPath;
    private static string _underflowPath;
    private static string _overflowPath;
    public Nullable`1<double> Size { get; public set; }
    public Nullable`1<int> Count { get; public set; }
    public eIntervalClosed IntervalClosed { get; public set; }
    public bool UnderflowAutomatic { get; public set; }
    public Nullable`1<double> Underflow { get; public set; }
    public bool OverflowAutomatic { get; public set; }
    public Nullable`1<double> Overflow { get; public set; }
    internal ExcelChartExSerieBinning(XmlNamespaceManager ns, XmlNode node);
    public Nullable`1<double> get_Size();
    public void set_Size(Nullable`1<double> value);
    public Nullable`1<int> get_Count();
    public void set_Count(Nullable`1<int> value);
    public eIntervalClosed get_IntervalClosed();
    public void set_IntervalClosed(eIntervalClosed value);
    public bool get_UnderflowAutomatic();
    public void set_UnderflowAutomatic(bool value);
    public Nullable`1<double> get_Underflow();
    public void set_Underflow(Nullable`1<double> value);
    public bool get_OverflowAutomatic();
    public void set_OverflowAutomatic(bool value);
    public Nullable`1<double> get_Overflow();
    public void set_Overflow(Nullable`1<double> value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel : ExcelChartExDataLabel {
    private ExcelChartExDataLabelCollection _dataLabels;
    public ExcelChartExDataLabelCollection DataLabels { get; }
    internal ExcelChartExSerieDataLabel(ExcelChartExSerie serie, XmlNamespaceManager ns, XmlNode node, String[] schemaNodeOrder);
    public ExcelChartExDataLabelCollection get_DataLabels();
    public void Add(bool showCategory, bool showValue, bool showSeriesName);
    public void Remove();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExStringData : ExcelChartExData {
    public eStringDataType Type { get; public set; }
    internal ExcelChartExStringData(string worksheetName, XmlNamespaceManager nsm, XmlNode topNode);
    public eStringDataType get_Type();
    public void set_Type(eStringDataType value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExTitle : ExcelChartTitle {
    public string Text { get; public set; }
    public ePositionAlign PositionAlignment { get; public set; }
    public eSidePositions Position { get; public set; }
    internal bool HasLinkedCell { get; }
    internal ExcelChartExTitle(ExcelChart chart, XmlNamespaceManager nsm, XmlNode node);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public ePositionAlign get_PositionAlignment();
    public void set_PositionAlignment(ePositionAlign value);
    public eSidePositions get_Position();
    public void set_Position(eSidePositions value);
    internal virtual bool get_HasLinkedCell();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor : XmlHelper {
    private string _prefix;
    private string _positionPath;
    private ExcelDrawingColorManager _color;
    public ExcelDrawingColorManager Color { get; }
    public eColorValuePositionType ValueType { get; public set; }
    public double PositionValue { get; public set; }
    internal ExcelChartExValueColor(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string prefix);
    public ExcelDrawingColorManager get_Color();
    public eColorValuePositionType get_ValueType();
    public void set_ValueType(eColorValuePositionType value);
    public double get_PositionValue();
    public void set_PositionValue(double value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors : XmlHelper {
    private ExcelRegionMapChartSerie _series;
    private ExcelChartExValueColor _minColor;
    private ExcelChartExValueColor _midColor;
    private ExcelChartExValueColor _maxColor;
    public eNumberOfColors NumberOfColors { get; public set; }
    public ExcelChartExValueColor MinColor { get; }
    public ExcelChartExValueColor MidColor { get; }
    public ExcelChartExValueColor MaxColor { get; }
    internal ExcelChartExValueColors(ExcelRegionMapChartSerie series, XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder);
    public eNumberOfColors get_NumberOfColors();
    public void set_NumberOfColors(eNumberOfColors value);
    public ExcelChartExValueColor get_MinColor();
    public ExcelChartExValueColor get_MidColor();
    public ExcelChartExValueColor get_MaxColor();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelFunnelChart : ExcelChartEx {
    internal ExcelFunnelChart(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelFunnelChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChart : ExcelChartEx {
    [CompilerGeneratedAttribute]
private ExcelHistogramChartSeries <Series>k__BackingField;
    public ExcelHistogramChartSeries Series { get; }
    internal ExcelHistogramChart(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelHistogramChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    [CompilerGeneratedAttribute]
public ExcelHistogramChartSeries get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie : ExcelChartExSerie {
    internal int _index;
    private ExcelChartExSerieBinning _binning;
    internal static string _aggregationPath;
    internal static string _binningPath;
    [CompilerGeneratedAttribute]
private ExcelChartExParetoLine <ParetoLine>k__BackingField;
    public ExcelChartExSerieBinning Binning { get; }
    public bool Aggregation { get; public set; }
    public ExcelChartExParetoLine ParetoLine { get; private set; }
    internal ExcelHistogramChartSerie(ExcelChartEx chart, XmlNamespaceManager ns, XmlNode node, int index);
    internal void AddParetoLine();
    public ExcelChartExSerieBinning get_Binning();
    public bool get_Aggregation();
    public void set_Aggregation(bool value);
    internal void AddParetoLineFromSerie(XmlElement serElement);
    internal void RemoveParetoLine();
    [CompilerGeneratedAttribute]
public ExcelChartExParetoLine get_ParetoLine();
    [CompilerGeneratedAttribute]
private void set_ParetoLine(ExcelChartExParetoLine value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChart : ExcelChartEx {
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelRegionMapChartSerie> <Series>k__BackingField;
    public ExcelChartSeries`1<ExcelRegionMapChartSerie> Series { get; }
    internal ExcelRegionMapChart(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelRegionMapChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelRegionMapChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie : ExcelChartExSerie {
    private static string _attributionPath;
    private static string _regionPath;
    private static string _languagePath;
    private static string _projectionTypePath;
    private static string _geoMappingLevelPath;
    private ExcelChartExValueColors _colors;
    public string Attribution { get; public set; }
    public CultureInfo Region { get; public set; }
    public CultureInfo Language { get; public set; }
    public eProjectionType ProjectionType { get; public set; }
    public eGeoMappingLevel ViewedRegionType { get; public set; }
    public ExcelChartExValueColors Colors { get; }
    public eRegionLabelLayout RegionLableLayout { get; public set; }
    public eColorBy ColorBy { get; public set; }
    internal ExcelRegionMapChartSerie(ExcelChartEx chart, XmlNamespaceManager ns, XmlNode node);
    public string get_Attribution();
    public void set_Attribution(string value);
    public CultureInfo get_Region();
    public void set_Region(CultureInfo value);
    public CultureInfo get_Language();
    public void set_Language(CultureInfo value);
    public eProjectionType get_ProjectionType();
    public void set_ProjectionType(eProjectionType value);
    public eGeoMappingLevel get_ViewedRegionType();
    public void set_ViewedRegionType(eGeoMappingLevel value);
    public ExcelChartExValueColors get_Colors();
    public eRegionLabelLayout get_RegionLableLayout();
    public void set_RegionLableLayout(eRegionLabelLayout value);
    public eColorBy get_ColorBy();
    public void set_ColorBy(eColorBy value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelSunburstChart : ExcelChartEx {
    internal ExcelSunburstChart(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelSunburstChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChart : ExcelChartEx {
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelTreemapChartSerie> <Series>k__BackingField;
    public ExcelChartSeries`1<ExcelTreemapChartSerie> Series { get; }
    internal ExcelTreemapChart(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelTreemapChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelTreemapChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChartSerie : ExcelChartExSerie {
    public eParentLabelLayout ParentLabelLayout { get; public set; }
    internal ExcelTreemapChartSerie(ExcelChartEx chart, XmlNamespaceManager ns, XmlNode node);
    public eParentLabelLayout get_ParentLabelLayout();
    public void set_ParentLabelLayout(eParentLabelLayout value);
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChart : ExcelChartEx {
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelWaterfallChartSerie> <Series>k__BackingField;
    public ExcelChartSeries`1<ExcelWaterfallChartSerie> Series { get; }
    internal ExcelWaterfallChart(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    internal ExcelWaterfallChart(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelWaterfallChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelWaterfallChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChartSerie : ExcelChartExSerie {
    private static string _connectorLinesPath;
    public bool ShowConnectorLines { get; public set; }
    internal ExcelWaterfallChartSerie(ExcelChartEx chart, XmlNamespaceManager ns, XmlNode node);
    public bool get_ShowConnectorLines();
    public void set_ShowConnectorLines(bool value);
}
internal class OfficeOpenXml.Drawing.Chart.DataLabling.CTDataLabel : GroupDataLabel {
    private String[] nodeOrder;
    [CompilerGeneratedAttribute]
private String[] <NodeOrder>k__BackingField;
    internal String[] NodeOrder { get; private set; }
    [CompilerGeneratedAttribute]
internal String[] get_NodeOrder();
    [CompilerGeneratedAttribute]
private void set_NodeOrder(String[] value);
}
internal class OfficeOpenXml.Drawing.Chart.DataLabling.CTDataLabels : GroupDataLabels {
    private String[] _nodeOrder;
    [CompilerGeneratedAttribute]
private String[] <NodeOrder>k__BackingField;
    internal String[] NodeOrder { get; private set; }
    [CompilerGeneratedAttribute]
internal String[] get_NodeOrder();
    [CompilerGeneratedAttribute]
private void set_NodeOrder(String[] value);
}
internal class OfficeOpenXml.Drawing.Chart.DataLabling.DataLabelConstNodeOrderBase : object {
    internal static String[] EG_DlblShared;
    private static DataLabelConstNodeOrderBase();
}
internal class OfficeOpenXml.Drawing.Chart.DataLabling.GroupDataLabel : DataLabelConstNodeOrderBase {
    private String[] _grpLbl;
    [CompilerGeneratedAttribute]
private static String[] <GroupDLbl>k__BackingField;
    internal static String[] GroupDLbl { get; private set; }
    [CompilerGeneratedAttribute]
internal static String[] get_GroupDLbl();
    [CompilerGeneratedAttribute]
private static void set_GroupDLbl(String[] value);
}
internal class OfficeOpenXml.Drawing.Chart.DataLabling.GroupDataLabels : DataLabelConstNodeOrderBase {
    private String[] _grpLbls;
    [CompilerGeneratedAttribute]
private static String[] <GroupDLbls>k__BackingField;
    internal static String[] GroupDLbls { get; private set; }
    [CompilerGeneratedAttribute]
internal static String[] get_GroupDLbls();
    [CompilerGeneratedAttribute]
private static void set_GroupDLbls(String[] value);
}
internal static class OfficeOpenXml.Drawing.Chart.DataLabling.LabelNodeHolder : object {
    internal static CTDataLabel DataLabel;
    internal static CTDataLabels DataLabels;
    private static LabelNodeHolder();
}
public enum OfficeOpenXml.Drawing.Chart.eAreaChartType : Enum {
    public int value__;
    public static eAreaChartType Area;
    public static eAreaChartType AreaStacked;
    public static eAreaChartType AreaStacked100;
    public static eAreaChartType Area3D;
    public static eAreaChartType AreaStacked3D;
    public static eAreaChartType AreaStacked1003D;
}
public enum OfficeOpenXml.Drawing.Chart.eAxisOrientation : Enum {
    public int value__;
    public static eAxisOrientation MaxMin;
    public static eAxisOrientation MinMax;
}
public enum OfficeOpenXml.Drawing.Chart.eAxisPosition : Enum {
    public int value__;
    public static eAxisPosition Left;
    public static eAxisPosition Bottom;
    public static eAxisPosition Right;
    public static eAxisPosition Top;
}
public enum OfficeOpenXml.Drawing.Chart.eAxisTickMark : Enum {
    public int value__;
    public static eAxisTickMark Cross;
    public static eAxisTickMark In;
    public static eAxisTickMark None;
    public static eAxisTickMark Out;
}
internal enum OfficeOpenXml.Drawing.Chart.eAxisType : Enum {
    public int value__;
    public static eAxisType Val;
    public static eAxisType Cat;
    public static eAxisType Date;
    public static eAxisType Serie;
}
public enum OfficeOpenXml.Drawing.Chart.eBarChartType : Enum {
    public int value__;
    public static eBarChartType BarClustered3D;
    public static eBarChartType BarStacked3D;
    public static eBarChartType BarStacked1003D;
    public static eBarChartType Column3D;
    public static eBarChartType ColumnClustered3D;
    public static eBarChartType ColumnStacked3D;
    public static eBarChartType ColumnStacked1003D;
    public static eBarChartType BarClustered;
    public static eBarChartType BarStacked;
    public static eBarChartType BarStacked100;
    public static eBarChartType ColumnClustered;
    public static eBarChartType ColumnStacked;
    public static eBarChartType ColumnStacked100;
    public static eBarChartType ConeBarClustered;
    public static eBarChartType ConeBarStacked;
    public static eBarChartType ConeBarStacked100;
    public static eBarChartType ConeCol;
    public static eBarChartType ConeColClustered;
    public static eBarChartType ConeColStacked;
    public static eBarChartType ConeColStacked100;
    public static eBarChartType CylinderBarClustered;
    public static eBarChartType CylinderBarStacked;
    public static eBarChartType CylinderBarStacked100;
    public static eBarChartType CylinderCol;
    public static eBarChartType CylinderColClustered;
    public static eBarChartType CylinderColStacked;
    public static eBarChartType CylinderColStacked100;
    public static eBarChartType PyramidBarClustered;
    public static eBarChartType PyramidBarStacked;
    public static eBarChartType PyramidBarStacked100;
    public static eBarChartType PyramidCol;
    public static eBarChartType PyramidColClustered;
    public static eBarChartType PyramidColStacked;
    public static eBarChartType PyramidColStacked100;
}
public enum OfficeOpenXml.Drawing.Chart.eBubbleChartType : Enum {
    public int value__;
    public static eBubbleChartType Bubble;
    public static eBubbleChartType Bubble3DEffect;
}
public enum OfficeOpenXml.Drawing.Chart.eBuildInUnits : Enum {
    public long value__;
    public static eBuildInUnits hundreds;
    public static eBuildInUnits thousands;
    public static eBuildInUnits tenThousands;
    public static eBuildInUnits hundredThousands;
    public static eBuildInUnits millions;
    public static eBuildInUnits tenMillions;
    public static eBuildInUnits hundredMillions;
    public static eBuildInUnits billions;
    public static eBuildInUnits trillions;
}
public enum OfficeOpenXml.Drawing.Chart.eChartExType : Enum {
    public int value__;
    public static eChartExType Treemap;
    public static eChartExType Histogram;
    public static eChartExType Waterfall;
    public static eChartExType Sunburst;
    public static eChartExType BoxWhisker;
    public static eChartExType Pareto;
    public static eChartExType Funnel;
    public static eChartExType RegionMap;
}
public enum OfficeOpenXml.Drawing.Chart.eChartStyle : Enum {
    public int value__;
    public static eChartStyle None;
    public static eChartStyle Style1;
    public static eChartStyle Style2;
    public static eChartStyle Style3;
    public static eChartStyle Style4;
    public static eChartStyle Style5;
    public static eChartStyle Style6;
    public static eChartStyle Style7;
    public static eChartStyle Style8;
    public static eChartStyle Style9;
    public static eChartStyle Style10;
    public static eChartStyle Style11;
    public static eChartStyle Style12;
    public static eChartStyle Style13;
    public static eChartStyle Style14;
    public static eChartStyle Style15;
    public static eChartStyle Style16;
    public static eChartStyle Style17;
    public static eChartStyle Style18;
    public static eChartStyle Style19;
    public static eChartStyle Style20;
    public static eChartStyle Style21;
    public static eChartStyle Style22;
    public static eChartStyle Style23;
    public static eChartStyle Style24;
    public static eChartStyle Style25;
    public static eChartStyle Style26;
    public static eChartStyle Style27;
    public static eChartStyle Style28;
    public static eChartStyle Style29;
    public static eChartStyle Style30;
    public static eChartStyle Style31;
    public static eChartStyle Style32;
    public static eChartStyle Style33;
    public static eChartStyle Style34;
    public static eChartStyle Style35;
    public static eChartStyle Style36;
    public static eChartStyle Style37;
    public static eChartStyle Style38;
    public static eChartStyle Style39;
    public static eChartStyle Style40;
    public static eChartStyle Style41;
    public static eChartStyle Style42;
    public static eChartStyle Style43;
    public static eChartStyle Style44;
    public static eChartStyle Style45;
    public static eChartStyle Style46;
    public static eChartStyle Style47;
    public static eChartStyle Style48;
    public static eChartStyle Style102;
}
public enum OfficeOpenXml.Drawing.Chart.eChartType : Enum {
    public int value__;
    public static eChartType Area3D;
    public static eChartType AreaStacked3D;
    public static eChartType AreaStacked1003D;
    public static eChartType BarClustered3D;
    public static eChartType BarStacked3D;
    public static eChartType BarStacked1003D;
    public static eChartType Column3D;
    public static eChartType ColumnClustered3D;
    public static eChartType ColumnStacked3D;
    public static eChartType ColumnStacked1003D;
    public static eChartType Line3D;
    public static eChartType Pie3D;
    public static eChartType PieExploded3D;
    public static eChartType Area;
    public static eChartType AreaStacked;
    public static eChartType AreaStacked100;
    public static eChartType BarClustered;
    public static eChartType BarOfPie;
    public static eChartType BarStacked;
    public static eChartType BarStacked100;
    public static eChartType Bubble;
    public static eChartType Bubble3DEffect;
    public static eChartType ColumnClustered;
    public static eChartType ColumnStacked;
    public static eChartType ColumnStacked100;
    public static eChartType ConeBarClustered;
    public static eChartType ConeBarStacked;
    public static eChartType ConeBarStacked100;
    public static eChartType ConeCol;
    public static eChartType ConeColClustered;
    public static eChartType ConeColStacked;
    public static eChartType ConeColStacked100;
    public static eChartType CylinderBarClustered;
    public static eChartType CylinderBarStacked;
    public static eChartType CylinderBarStacked100;
    public static eChartType CylinderCol;
    public static eChartType CylinderColClustered;
    public static eChartType CylinderColStacked;
    public static eChartType CylinderColStacked100;
    public static eChartType Doughnut;
    public static eChartType DoughnutExploded;
    public static eChartType Line;
    public static eChartType LineMarkers;
    public static eChartType LineMarkersStacked;
    public static eChartType LineMarkersStacked100;
    public static eChartType LineStacked;
    public static eChartType LineStacked100;
    public static eChartType Pie;
    public static eChartType PieExploded;
    public static eChartType PieOfPie;
    public static eChartType PyramidBarClustered;
    public static eChartType PyramidBarStacked;
    public static eChartType PyramidBarStacked100;
    public static eChartType PyramidCol;
    public static eChartType PyramidColClustered;
    public static eChartType PyramidColStacked;
    public static eChartType PyramidColStacked100;
    public static eChartType Radar;
    public static eChartType RadarFilled;
    public static eChartType RadarMarkers;
    public static eChartType StockHLC;
    public static eChartType StockOHLC;
    public static eChartType StockVHLC;
    public static eChartType StockVOHLC;
    public static eChartType Surface;
    public static eChartType SurfaceTopView;
    public static eChartType SurfaceTopViewWireframe;
    public static eChartType SurfaceWireframe;
    public static eChartType XYScatter;
    public static eChartType XYScatterLines;
    public static eChartType XYScatterLinesNoMarkers;
    public static eChartType XYScatterSmooth;
    public static eChartType XYScatterSmoothNoMarkers;
    public static eChartType Treemap;
    public static eChartType Histogram;
    public static eChartType Waterfall;
    public static eChartType Sunburst;
    public static eChartType BoxWhisker;
    public static eChartType Pareto;
    public static eChartType Funnel;
    public static eChartType RegionMap;
}
public enum OfficeOpenXml.Drawing.Chart.eCrossBetween : Enum {
    public int value__;
    public static eCrossBetween Between;
    public static eCrossBetween MidCat;
}
public enum OfficeOpenXml.Drawing.Chart.eCrosses : Enum {
    public int value__;
    public static eCrosses AutoZero;
    public static eCrosses Max;
    public static eCrosses Min;
}
public enum OfficeOpenXml.Drawing.Chart.eDirection : Enum {
    public int value__;
    public static eDirection Column;
    public static eDirection Bar;
}
public enum OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs : Enum {
    public int value__;
    public static eDisplayBlanksAs Gap;
    public static eDisplayBlanksAs Span;
    public static eDisplayBlanksAs Zero;
}
public enum OfficeOpenXml.Drawing.Chart.eDoughnutChartType : Enum {
    public int value__;
    public static eDoughnutChartType Doughnut;
    public static eDoughnutChartType DoughnutExploded;
}
public enum OfficeOpenXml.Drawing.Chart.eGrouping : Enum {
    public int value__;
    public static eGrouping Standard;
    public static eGrouping Clustered;
    public static eGrouping Stacked;
    public static eGrouping PercentStacked;
}
public enum OfficeOpenXml.Drawing.Chart.eLabelPosition : Enum {
    public int value__;
    public static eLabelPosition BestFit;
    public static eLabelPosition Left;
    public static eLabelPosition Right;
    public static eLabelPosition Center;
    public static eLabelPosition Top;
    public static eLabelPosition Bottom;
    public static eLabelPosition InBase;
    public static eLabelPosition InEnd;
    public static eLabelPosition OutEnd;
}
public enum OfficeOpenXml.Drawing.Chart.eLayoutMode : Enum {
    public int value__;
    public static eLayoutMode Factor;
    public static eLayoutMode Edge;
}
public enum OfficeOpenXml.Drawing.Chart.eLayoutTarget : Enum {
    public int value__;
    public static eLayoutTarget Inner;
    public static eLayoutTarget Outer;
}
public enum OfficeOpenXml.Drawing.Chart.eLegendPosition : Enum {
    public int value__;
    public static eLegendPosition Top;
    public static eLegendPosition Left;
    public static eLegendPosition Right;
    public static eLegendPosition Bottom;
    public static eLegendPosition TopRight;
}
public enum OfficeOpenXml.Drawing.Chart.eLineChartType : Enum {
    public int value__;
    public static eLineChartType Line3D;
    public static eLineChartType Line;
    public static eLineChartType LineMarkers;
    public static eLineChartType LineMarkersStacked;
    public static eLineChartType LineMarkersStacked100;
    public static eLineChartType LineStacked;
    public static eLineChartType LineStacked100;
}
public enum OfficeOpenXml.Drawing.Chart.eMarkerStyle : Enum {
    public int value__;
    public static eMarkerStyle Circle;
    public static eMarkerStyle Dash;
    public static eMarkerStyle Diamond;
    public static eMarkerStyle Dot;
    public static eMarkerStyle None;
    public static eMarkerStyle Picture;
    public static eMarkerStyle Plus;
    public static eMarkerStyle Square;
    public static eMarkerStyle Star;
    public static eMarkerStyle Triangle;
    public static eMarkerStyle X;
}
public enum OfficeOpenXml.Drawing.Chart.eOfPieChartType : Enum {
    public int value__;
    public static eOfPieChartType PieOfPie;
    public static eOfPieChartType BarOfPie;
}
public enum OfficeOpenXml.Drawing.Chart.ePieChartType : Enum {
    public int value__;
    public static ePieChartType Pie;
    public static ePieChartType PieExploded;
    public static ePieChartType Pie3D;
    public static ePieChartType PieExploded3D;
}
public enum OfficeOpenXml.Drawing.Chart.ePieType : Enum {
    public int value__;
    public static ePieType Bar;
    public static ePieType Pie;
}
public enum OfficeOpenXml.Drawing.Chart.eRadarChartType : Enum {
    public int value__;
    public static eRadarChartType Radar;
    public static eRadarChartType RadarFilled;
    public static eRadarChartType RadarMarkers;
}
public enum OfficeOpenXml.Drawing.Chart.eRadarStyle : Enum {
    public int value__;
    public static eRadarStyle Filled;
    public static eRadarStyle Marker;
    public static eRadarStyle Standard;
}
public enum OfficeOpenXml.Drawing.Chart.eScatterChartType : Enum {
    public int value__;
    public static eScatterChartType XYScatter;
    public static eScatterChartType XYScatterLines;
    public static eScatterChartType XYScatterLinesNoMarkers;
    public static eScatterChartType XYScatterSmooth;
    public static eScatterChartType XYScatterSmoothNoMarkers;
}
public enum OfficeOpenXml.Drawing.Chart.eScatterStyle : Enum {
    public int value__;
    public static eScatterStyle LineMarker;
    public static eScatterStyle SmoothMarker;
}
public enum OfficeOpenXml.Drawing.Chart.eShape : Enum {
    public int value__;
    public static eShape Box;
    public static eShape Cone;
    public static eShape ConeToMax;
    public static eShape Cylinder;
    public static eShape Pyramid;
    public static eShape PyramidToMax;
}
public enum OfficeOpenXml.Drawing.Chart.eSizeRepresents : Enum {
    public int value__;
    public static eSizeRepresents Area;
    public static eSizeRepresents Width;
}
public enum OfficeOpenXml.Drawing.Chart.eStockChartType : Enum {
    public int value__;
    public static eStockChartType StockHLC;
    public static eStockChartType StockOHLC;
    public static eStockChartType StockVHLC;
    public static eStockChartType StockVOHLC;
}
public enum OfficeOpenXml.Drawing.Chart.eSurfaceChartType : Enum {
    public int value__;
    public static eSurfaceChartType Surface;
    public static eSurfaceChartType SurfaceTopView;
    public static eSurfaceChartType SurfaceTopViewWireframe;
    public static eSurfaceChartType SurfaceWireframe;
}
public enum OfficeOpenXml.Drawing.Chart.eTickLabelPosition : Enum {
    public int value__;
    public static eTickLabelPosition High;
    public static eTickLabelPosition Low;
    public static eTickLabelPosition NextTo;
    public static eTickLabelPosition None;
}
public enum OfficeOpenXml.Drawing.Chart.eTimeUnit : Enum {
    public int value__;
    public static eTimeUnit Years;
    public static eTimeUnit Months;
    public static eTimeUnit Days;
}
public enum OfficeOpenXml.Drawing.Chart.eTrendLine : Enum {
    public int value__;
    public static eTrendLine Exponential;
    public static eTrendLine Linear;
    public static eTrendLine Logarithmic;
    public static eTrendLine MovingAverage;
    public static eTrendLine Polynomial;
    public static eTrendLine Power;
}
public enum OfficeOpenXml.Drawing.Chart.eXAxisPosition : Enum {
    public int value__;
    public static eXAxisPosition Bottom;
    public static eXAxisPosition Top;
}
public class OfficeOpenXml.Drawing.Chart.ExcelAreaChart : ExcelChartStandard {
    private ExcelChartDataLabel _DataLabel;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelAreaChartSerie> <Series>k__BackingField;
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelChartSeries`1<ExcelAreaChartSerie> Series { get; }
    internal ExcelAreaChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelAreaChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelAreaChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    public sealed virtual ExcelChartDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelAreaChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie : ExcelChartSerieWithHorizontalErrorBars {
    private ExcelChartSerieDataLabel _DataLabel;
    private static string INVERTIFNEGATIVE_PATH;
    private ExcelChartDataPointCollection _dataPoints;
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    internal bool InvertIfNegative { get; internal set; }
    public ExcelChartDataPointCollection DataPoints { get; }
    internal ExcelAreaChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    internal bool get_InvertIfNegative();
    internal void set_InvertIfNegative(bool value);
    public sealed virtual ExcelChartDataPointCollection get_DataPoints();
}
public class OfficeOpenXml.Drawing.Chart.ExcelBarChart : ExcelChartStandard {
    private string _directionPath;
    private string _shapePath;
    private ExcelChartDataLabel _DataLabel;
    private string _gapWidthPath;
    private string _overlapPath;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelBarChartSerie> <Series>k__BackingField;
    public eDirection Direction { get; internal set; }
    public eShape Shape { get; internal set; }
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public int GapWidth { get; public set; }
    public int Overlap { get; public set; }
    public ExcelChartSeries`1<ExcelBarChartSerie> Series { get; }
    internal ExcelBarChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelBarChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelBarChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    private void SetChartNodeText(string chartNodeText);
    private void SetTypeProperties(ExcelDrawings drawings, eChartType type);
    public eDirection get_Direction();
    internal void set_Direction(eDirection value);
    public eShape get_Shape();
    internal void set_Shape(eShape value);
    public sealed virtual ExcelChartDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    public int get_GapWidth();
    public void set_GapWidth(int value);
    public int get_Overlap();
    public void set_Overlap(int value);
    private string GetDirectionText(eDirection direction);
    private eDirection GetDirectionEnum(string direction);
    private string GetShapeText(eShape Shape);
    private eShape GetShapeEnum(string text);
    internal virtual eChartType GetChartType(string name);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelBarChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie : ExcelChartSerieWithErrorBars {
    private ExcelChartSerieDataLabel _dataLabel;
    private static string INVERTIFNEGATIVE_PATH;
    private ExcelChartDataPointCollection _dataPoints;
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    internal bool InvertIfNegative { get; internal set; }
    public ExcelChartDataPointCollection DataPoints { get; }
    internal ExcelBarChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    internal bool get_InvertIfNegative();
    internal void set_InvertIfNegative(bool value);
    public sealed virtual ExcelChartDataPointCollection get_DataPoints();
}
public class OfficeOpenXml.Drawing.Chart.ExcelBubbleChart : ExcelChartStandard {
    private string BUBBLESCALE_PATH;
    private string SHOWNEGBUBBLES_PATH;
    private string BUBBLE3D_PATH;
    private string SIZEREPRESENTS_PATH;
    private ExcelChartDataLabel _dataLabel;
    [CompilerGeneratedAttribute]
private ExcelBubbleChartSeries <Series>k__BackingField;
    public int BubbleScale { get; public set; }
    public bool ShowNegativeBubbles { get; public set; }
    public bool Bubble3D { get; public set; }
    public eSizeRepresents SizeRepresents { get; public set; }
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelBubbleChartSeries Series { get; private set; }
    internal ExcelBubbleChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelBubbleChart(ExcelDrawings drawings, XmlNode node, eChartType type, bool isPivot, ExcelGroupShape parent);
    internal ExcelBubbleChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelBubbleChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    public int get_BubbleScale();
    public void set_BubbleScale(int value);
    public bool get_ShowNegativeBubbles();
    public void set_ShowNegativeBubbles(bool value);
    public bool get_Bubble3D();
    public void set_Bubble3D(bool value);
    public eSizeRepresents get_SizeRepresents();
    public void set_SizeRepresents(eSizeRepresents value);
    public sealed virtual ExcelChartDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    [CompilerGeneratedAttribute]
public ExcelBubbleChartSeries get_Series();
    [CompilerGeneratedAttribute]
private void set_Series(ExcelBubbleChartSeries value);
    internal virtual eChartType GetChartType(string name);
}
public class OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie : ExcelChartSerieWithHorizontalErrorBars {
    private ExcelChartSerieDataLabel _dataLabel;
    private static string BUBBLE3D_PATH;
    private static string INVERTIFNEGATIVE_PATH;
    private static string BUBBLESIZE_TOPPATH;
    private static string BUBBLESIZE_PATH;
    private ExcelChartDataPointCollection _dataPoints;
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    internal bool Bubble3D { get; internal set; }
    internal bool InvertIfNegative { get; internal set; }
    public string Series { get; public set; }
    public string BubbleSize { get; public set; }
    public ExcelChartDataPointCollection DataPoints { get; }
    internal ExcelBubbleChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    internal bool get_Bubble3D();
    internal void set_Bubble3D(bool value);
    internal bool get_InvertIfNegative();
    internal void set_InvertIfNegative(bool value);
    public virtual string get_Series();
    public virtual void set_Series(string value);
    public string get_BubbleSize();
    public void set_BubbleSize(string value);
    internal void GenerateLit();
    public sealed virtual ExcelChartDataPointCollection get_DataPoints();
}
public class OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSeries : ExcelChartSeries`1<ExcelBubbleChartSerie> {
    internal ExcelBubbleChartSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    public ExcelChartSerie Add(ExcelRangeBase Serie, ExcelRangeBase XSerie, ExcelRangeBase BubbleSize);
    public ExcelChartSerie Add(string SerieAddress, string XSerieAddress, string BubbleSizeAddress);
}
public abstract class OfficeOpenXml.Drawing.Chart.ExcelChart : ExcelDrawing {
    internal bool _isChartEx;
    internal static string topPath;
    internal static string plotAreaPath;
    internal ExcelChartAxis[] _axis;
    private Dictionary`2<string, HashInfo> _hashes;
    protected internal XmlHelper _chartXmlHelper;
    internal ExcelChart _topChart;
    internal ExcelChartStyleManager _styleManager;
    private bool _secondaryAxis;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <WorkSheet>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <ChartXml>k__BackingField;
    [CompilerGeneratedAttribute]
private eChartType <ChartType>k__BackingField;
    protected internal XmlNode _chartNode;
    internal ExcelChartTitle _title;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelChartSerie> <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelChartAxis <XAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelChartAxis <YAxis>k__BackingField;
    internal ExcelChartPlotArea _plotArea;
    internal ExcelChartLegend _legend;
    [CompilerGeneratedAttribute]
private ExcelPivotTable <PivotTableSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <UriChart>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelChartSurface <Floor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelChartSurface <SideWall>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelChartSurface <BackWall>k__BackingField;
    public ExcelChartStyleManager StyleManager { get; }
    public bool UseSecondaryAxis { get; public set; }
    public ExcelWorksheet WorkSheet { get; internal set; }
    public XmlDocument ChartXml { get; internal set; }
    public eDrawingType DrawingType { get; }
    public eChartType ChartType { get; internal set; }
    internal XmlNode ChartNode { get; }
    public ExcelChartTitle Title { get; }
    public bool HasTitle { get; }
    public bool HasLegend { get; }
    public ExcelChartSeries`1<ExcelChartSerie> Series { get; }
    public ExcelChartAxis[] Axis { get; }
    public ExcelChartAxis XAxis { get; protected internal set; }
    public ExcelChartAxis YAxis { get; protected internal set; }
    public eChartStyle Style { get; public set; }
    public ExcelChartPlotArea PlotArea { get; }
    public ExcelChartLegend Legend { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelPivotTable PivotTableSource { get; protected set; }
    internal ZipPackagePart Part { get; internal set; }
    internal Uri UriChart { get; internal set; }
    internal string Id { get; }
    public bool VaryColors { get; public set; }
    public ExcelChartSurface Floor { get; protected set; }
    public ExcelChartSurface SideWall { get; protected set; }
    public ExcelChartSurface BackWall { get; protected set; }
    public bool RoundedCorners { get; public set; }
    public bool ShowHiddenData { get; public set; }
    public eDisplayBlanksAs DisplayBlanksAs { get; public set; }
    public bool ShowDataLabelsOverMaximum { get; public set; }
    public ExcelView3D View3D { get; }
    private ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Package { get; }
    private Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Hashes { get; }
    private ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedPart { get; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedUri { get; }
    internal ExcelChart(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent, string drawingPath, string nvPrPath);
    internal ExcelChart(ExcelDrawings drawings, XmlNode drawingsNode, XmlDocument chartXml, ExcelGroupShape parent, string drawingPath, string nvPrPath);
    internal ExcelChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent, string drawingPath, string nvPrPath);
    private void Init(ExcelDrawings drawings, XmlDocument chartXml);
    public ExcelChartStyleManager get_StyleManager();
    private bool HasPrimaryAxis();
    internal abstract virtual void AddAxis();
    public bool get_UseSecondaryAxis();
    public void set_UseSecondaryAxis(bool value);
    [CompilerGeneratedAttribute]
public ExcelWorksheet get_WorkSheet();
    [CompilerGeneratedAttribute]
internal void set_WorkSheet(ExcelWorksheet value);
    [CompilerGeneratedAttribute]
public XmlDocument get_ChartXml();
    [CompilerGeneratedAttribute]
internal void set_ChartXml(XmlDocument value);
    public virtual eDrawingType get_DrawingType();
    [CompilerGeneratedAttribute]
public eChartType get_ChartType();
    [CompilerGeneratedAttribute]
internal void set_ChartType(eChartType value);
    internal XmlNode get_ChartNode();
    public virtual ExcelChartTitle get_Title();
    internal abstract virtual ExcelChartTitle GetTitle();
    public abstract virtual bool get_HasTitle();
    public abstract virtual bool get_HasLegend();
    public abstract virtual void DeleteTitle();
    [CompilerGeneratedAttribute]
public virtual ExcelChartSeries`1<ExcelChartSerie> get_Series();
    public virtual ExcelChartAxis[] get_Axis();
    [CompilerGeneratedAttribute]
public virtual ExcelChartAxis get_XAxis();
    [CompilerGeneratedAttribute]
protected internal virtual void set_XAxis(ExcelChartAxis value);
    [CompilerGeneratedAttribute]
public virtual ExcelChartAxis get_YAxis();
    [CompilerGeneratedAttribute]
protected internal virtual void set_YAxis(ExcelChartAxis value);
    public abstract virtual eChartStyle get_Style();
    public abstract virtual void set_Style(eChartStyle value);
    public abstract virtual ExcelChartPlotArea get_PlotArea();
    public virtual ExcelChartLegend get_Legend();
    public abstract virtual ExcelDrawingBorder get_Border();
    public abstract virtual ExcelDrawingFill get_Fill();
    public abstract virtual ExcelDrawingEffectStyle get_Effect();
    public abstract virtual ExcelDrawing3D get_ThreeD();
    public abstract virtual ExcelTextFont get_Font();
    public abstract virtual ExcelTextBody get_TextBody();
    [CompilerGeneratedAttribute]
public ExcelPivotTable get_PivotTableSource();
    [CompilerGeneratedAttribute]
protected void set_PivotTableSource(ExcelPivotTable value);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal Uri get_UriChart();
    [CompilerGeneratedAttribute]
internal void set_UriChart(Uri value);
    internal string get_Id();
    internal static bool IsType3D(eChartType chartType);
    internal void ApplyStyleOnPart(IDrawingStyleBase chartPart, ExcelChartStyleEntry section, bool applyChartEx);
    protected internal bool IsType3D();
    protected internal bool IsTypeLine();
    protected internal bool IsTypeRadar();
    protected internal bool IsTypeScatter();
    protected internal bool IsTypeBubble();
    protected internal bool IsTypeArea();
    protected bool IsTypeSurface();
    protected internal bool HasThirdAxis();
    protected internal bool IsTypeShape();
    protected internal bool IsTypePercentStacked();
    protected internal bool IsTypeStacked();
    protected bool IsTypeClustered();
    protected internal bool IsTypePieDoughnut();
    protected internal bool IsTypeDoughnut();
    protected internal bool IsTypePie();
    protected internal bool IsTypeStock();
    internal static bool IsTypeStock(eChartType chartType);
    internal void InitChartTheme(int fallBackStyleId);
    public abstract virtual bool get_VaryColors();
    public abstract virtual void set_VaryColors(bool value);
    [CompilerGeneratedAttribute]
public ExcelChartSurface get_Floor();
    [CompilerGeneratedAttribute]
protected void set_Floor(ExcelChartSurface value);
    [CompilerGeneratedAttribute]
public ExcelChartSurface get_SideWall();
    [CompilerGeneratedAttribute]
protected void set_SideWall(ExcelChartSurface value);
    [CompilerGeneratedAttribute]
public ExcelChartSurface get_BackWall();
    [CompilerGeneratedAttribute]
protected void set_BackWall(ExcelChartSurface value);
    internal virtual void DeleteMe();
    public abstract virtual bool get_RoundedCorners();
    public abstract virtual void set_RoundedCorners(bool value);
    public abstract virtual bool get_ShowHiddenData();
    public abstract virtual void set_ShowHiddenData(bool value);
    public abstract virtual eDisplayBlanksAs get_DisplayBlanksAs();
    public abstract virtual void set_DisplayBlanksAs(eDisplayBlanksAs value);
    public abstract virtual bool get_ShowDataLabelsOverMaximum();
    public abstract virtual void set_ShowDataLabelsOverMaximum(bool value);
    public abstract virtual ExcelView3D get_View3D();
    internal static ExcelChart GetChart(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    internal static ExcelChartEx GetChartEx(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    internal static ExcelChart CreateChartFromXml(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, ExcelGroupShape parent);
    internal static Nullable`1<eChartType> GetChartTypeFromNodeName(string nodeName);
    internal static ExcelChart GetNewChart(ExcelDrawings drawings, XmlNode drawNode, Nullable`1<eChartType> chartType, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml);
    internal static ExcelChart GetChart(XmlElement chartNode, ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, ExcelChart topChart, ExcelGroupShape parent);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IStyleMandatoryProperties.SetMandatoryProperties();
    private sealed virtual override ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Package();
    private sealed virtual override Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Hashes();
    private sealed virtual override ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedPart();
    private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedUri();
}
public abstract class OfficeOpenXml.Drawing.Chart.ExcelChartAxis : XmlHelper {
    internal ExcelChart _chart;
    internal string _nsPrefix;
    private string _minorGridlinesPath;
    private string _majorGridlinesPath;
    private string _formatPath;
    private string _sourceLinkedPath;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelTextFont _font;
    private ExcelTextBody _textBody;
    private ExcelDrawingTextSettings _textSettings;
    protected internal ExcelChartTitle _title;
    private ExcelDrawingBorder _majorGridlines;
    private ExcelDrawingEffectStyle _majorGridlineEffects;
    private ExcelDrawingBorder _minorGridlines;
    private ExcelDrawingEffectStyle _minorGridlineEffects;
    internal string Id { get; }
    public eAxisTickMark MajorTickMark { get; public set; }
    public eAxisTickMark MinorTickMark { get; public set; }
    internal eAxisType AxisType { get; }
    public eAxisPosition AxisPosition { get; internal set; }
    public eCrosses Crosses { get; public set; }
    public eCrossBetween CrossBetween { get; public set; }
    public Nullable`1<double> CrossesAt { get; public set; }
    public string Format { get; public set; }
    public bool SourceLinked { get; public set; }
    public eTickLabelPosition LabelPosition { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelDrawingTextSettings TextSettings { get; }
    public bool Deleted { get; public set; }
    public eTickLabelPosition TickLabelPosition { get; public set; }
    public double DisplayUnit { get; public set; }
    public ExcelChartTitle Title { get; }
    public Nullable`1<double> MinValue { get; public set; }
    public Nullable`1<double> MaxValue { get; public set; }
    public Nullable`1<double> MajorUnit { get; public set; }
    public Nullable`1<eTimeUnit> MajorTimeUnit { get; public set; }
    public Nullable`1<double> MinorUnit { get; public set; }
    public Nullable`1<eTimeUnit> MinorTimeUnit { get; public set; }
    public Nullable`1<double> LogBase { get; public set; }
    public eAxisOrientation Orientation { get; public set; }
    public ExcelDrawingBorder MajorGridlines { get; }
    public ExcelDrawingEffectStyle MajorGridlineEffects { get; }
    public ExcelDrawingBorder MinorGridlines { get; }
    public ExcelDrawingEffectStyle MinorGridlineEffects { get; }
    public bool HasMajorGridlines { get; }
    public bool HasMinorGridlines { get; }
    internal ExcelChartAxis(ExcelChart chart, XmlNamespaceManager nameSpaceManager, XmlNode topNode, string nsPrefix);
    internal abstract virtual string get_Id();
    public abstract virtual eAxisTickMark get_MajorTickMark();
    public abstract virtual void set_MajorTickMark(eAxisTickMark value);
    public abstract virtual eAxisTickMark get_MinorTickMark();
    public abstract virtual void set_MinorTickMark(eAxisTickMark value);
    internal abstract virtual eAxisType get_AxisType();
    public abstract virtual eAxisPosition get_AxisPosition();
    internal abstract virtual void set_AxisPosition(eAxisPosition value);
    public abstract virtual eCrosses get_Crosses();
    public abstract virtual void set_Crosses(eCrosses value);
    public abstract virtual eCrossBetween get_CrossBetween();
    public abstract virtual void set_CrossBetween(eCrossBetween value);
    public abstract virtual Nullable`1<double> get_CrossesAt();
    public abstract virtual void set_CrossesAt(Nullable`1<double> value);
    public string get_Format();
    public void set_Format(string value);
    public bool get_SourceLinked();
    public void set_SourceLinked(bool value);
    public abstract virtual eTickLabelPosition get_LabelPosition();
    public abstract virtual void set_LabelPosition(eTickLabelPosition value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    public sealed virtual ExcelTextFont get_Font();
    public sealed virtual ExcelTextBody get_TextBody();
    public ExcelDrawingTextSettings get_TextSettings();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public abstract virtual bool get_Deleted();
    public abstract virtual void set_Deleted(bool value);
    public abstract virtual eTickLabelPosition get_TickLabelPosition();
    public abstract virtual void set_TickLabelPosition(eTickLabelPosition value);
    public abstract virtual double get_DisplayUnit();
    public abstract virtual void set_DisplayUnit(double value);
    public virtual ExcelChartTitle get_Title();
    internal abstract virtual ExcelChartTitle GetTitle();
    public abstract virtual Nullable`1<double> get_MinValue();
    public abstract virtual void set_MinValue(Nullable`1<double> value);
    public abstract virtual Nullable`1<double> get_MaxValue();
    public abstract virtual void set_MaxValue(Nullable`1<double> value);
    public abstract virtual Nullable`1<double> get_MajorUnit();
    public abstract virtual void set_MajorUnit(Nullable`1<double> value);
    public abstract virtual Nullable`1<eTimeUnit> get_MajorTimeUnit();
    public abstract virtual void set_MajorTimeUnit(Nullable`1<eTimeUnit> value);
    public abstract virtual Nullable`1<double> get_MinorUnit();
    public abstract virtual void set_MinorUnit(Nullable`1<double> value);
    public abstract virtual Nullable`1<eTimeUnit> get_MinorTimeUnit();
    public abstract virtual void set_MinorTimeUnit(Nullable`1<eTimeUnit> value);
    public abstract virtual Nullable`1<double> get_LogBase();
    public abstract virtual void set_LogBase(Nullable`1<double> value);
    public abstract virtual eAxisOrientation get_Orientation();
    public abstract virtual void set_Orientation(eAxisOrientation value);
    public ExcelDrawingBorder get_MajorGridlines();
    public ExcelDrawingEffectStyle get_MajorGridlineEffects();
    public ExcelDrawingBorder get_MinorGridlines();
    public ExcelDrawingEffectStyle get_MinorGridlineEffects();
    public bool get_HasMajorGridlines();
    public bool get_HasMinorGridlines();
    public void RemoveGridlines();
    public void RemoveGridlines(bool removeMajor, bool removeMinor);
    public void AddGridlines(bool addMajor, bool addMinor);
    public void AddTitle(string title);
    public void RemoveTitle();
    internal void ChangeAxisType(eAxisType type);
    internal XmlNode AddTitleNode();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IStyleMandatoryProperties.SetMandatoryProperties();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard : ExcelChartAxis {
    internal static String[] _schemaNodeOrderDateShared;
    internal static String[] _schemaNodeOrderCat;
    internal static String[] _schemaNodeOrderDate;
    internal static String[] _schemaNodeOrderSer;
    internal static String[] _schemaNodeOrderVal;
    private static string _majorTickMark;
    private static string _minorTickMark;
    private string AXIS_POSITION_PATH;
    private static string _minValuePath;
    private static string _maxValuePath;
    private static string _lblPos;
    private static string _crossesPath;
    private static string _crossBetweenPath;
    private static string _crossesAtPath;
    private static string _ticLblPos_Path;
    private static string _displayUnitPath;
    private static string _custUnitPath;
    private static string _majorUnitPath;
    private static string _majorUnitCatPath;
    private static string _majorTimeUnitPath;
    private static string _minorUnitPath;
    private static string _minorUnitCatPath;
    private static string _minorTimeUnitPath;
    private static string _logbasePath;
    private static string _orientationPath;
    internal string Id { get; }
    public eAxisTickMark MajorTickMark { get; public set; }
    public eAxisTickMark MinorTickMark { get; public set; }
    public eAxisPosition AxisPosition { get; internal set; }
    public ExcelChartTitleStandard Title { get; }
    public Nullable`1<double> MinValue { get; public set; }
    public Nullable`1<double> MaxValue { get; public set; }
    public eTickLabelPosition LabelPosition { get; public set; }
    public eCrosses Crosses { get; public set; }
    public eCrossBetween CrossBetween { get; public set; }
    public Nullable`1<double> CrossesAt { get; public set; }
    public bool Deleted { get; public set; }
    public eTickLabelPosition TickLabelPosition { get; public set; }
    public double DisplayUnit { get; public set; }
    public Nullable`1<double> MajorUnit { get; public set; }
    public Nullable`1<eTimeUnit> MajorTimeUnit { get; public set; }
    public Nullable`1<double> MinorUnit { get; public set; }
    public Nullable`1<eTimeUnit> MinorTimeUnit { get; public set; }
    public Nullable`1<double> LogBase { get; public set; }
    public eAxisOrientation Orientation { get; public set; }
    internal eAxisType AxisType { get; }
    internal ExcelChartAxisStandard(ExcelChart chart, XmlNamespaceManager nameSpaceManager, XmlNode topNode, string nsPrefix);
    private static ExcelChartAxisStandard();
    internal virtual string get_Id();
    public virtual eAxisTickMark get_MajorTickMark();
    public virtual void set_MajorTickMark(eAxisTickMark value);
    public virtual eAxisTickMark get_MinorTickMark();
    public virtual void set_MinorTickMark(eAxisTickMark value);
    public virtual eAxisPosition get_AxisPosition();
    internal virtual void set_AxisPosition(eAxisPosition value);
    public ExcelChartTitleStandard get_Title();
    internal virtual ExcelChartTitle GetTitle();
    public virtual Nullable`1<double> get_MinValue();
    public virtual void set_MinValue(Nullable`1<double> value);
    public virtual Nullable`1<double> get_MaxValue();
    public virtual void set_MaxValue(Nullable`1<double> value);
    public virtual eTickLabelPosition get_LabelPosition();
    public virtual void set_LabelPosition(eTickLabelPosition value);
    public virtual eCrosses get_Crosses();
    public virtual void set_Crosses(eCrosses value);
    public virtual eCrossBetween get_CrossBetween();
    public virtual void set_CrossBetween(eCrossBetween value);
    public virtual Nullable`1<double> get_CrossesAt();
    public virtual void set_CrossesAt(Nullable`1<double> value);
    public virtual bool get_Deleted();
    public virtual void set_Deleted(bool value);
    public virtual eTickLabelPosition get_TickLabelPosition();
    public virtual void set_TickLabelPosition(eTickLabelPosition value);
    public virtual double get_DisplayUnit();
    public virtual void set_DisplayUnit(double value);
    public virtual Nullable`1<double> get_MajorUnit();
    public virtual void set_MajorUnit(Nullable`1<double> value);
    public virtual Nullable`1<eTimeUnit> get_MajorTimeUnit();
    public virtual void set_MajorTimeUnit(Nullable`1<eTimeUnit> value);
    public virtual Nullable`1<double> get_MinorUnit();
    public virtual void set_MinorUnit(Nullable`1<double> value);
    public virtual Nullable`1<eTimeUnit> get_MinorTimeUnit();
    public virtual void set_MinorTimeUnit(Nullable`1<eTimeUnit> value);
    public virtual Nullable`1<double> get_LogBase();
    public virtual void set_LogBase(Nullable`1<double> value);
    public virtual eAxisOrientation get_Orientation();
    public virtual void set_Orientation(eAxisOrientation value);
    internal virtual eAxisType get_AxisType();
    public void AddTitle(ExcelRangeBase linkedCell);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ExcelChartCollection : object {
    private List`1<ExcelChart> _list;
    private ExcelChart _topChart;
    public int Count { get; }
    public ExcelChart Item { get; }
    internal ExcelChartCollection(ExcelChart chart);
    internal void Add(ExcelChart chart);
    public ExcelChart Add(eChartType chartType);
    public ExcelLineChart AddLineChart(eLineChartType chartType);
    public ExcelBarChart AddBarChart(eBarChartType chartType);
    public ExcelAreaChart AddAreaChart(eAreaChartType chartType);
    public ExcelPieChart AddPieChart(ePieChartType chartType);
    public ExcelOfPieChart AddOfPieChart(eOfPieChartType chartType);
    public ExcelDoughnutChart AddDoughnutChart(eDoughnutChartType chartType);
    public ExcelRadarChart AddRadarChart(eRadarChartType chartType);
    public ExcelScatterChart AddScatterChart(eScatterChartType chartType);
    public int get_Count();
    private sealed virtual override IEnumerator`1<ExcelChart> System.Collections.Generic.IEnumerable<OfficeOpenXml.Drawing.Chart.ExcelChart>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelChart get_Item(int PositionID);
}
public abstract class OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel : XmlHelper {
    internal ExcelChart _chart;
    internal string _nodeName;
    private string _nsPrefix;
    private string _formatPath;
    private string _sourceLinkedPath;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelTextFont _font;
    private ExcelDrawingTextSettings _textSettings;
    private ExcelTextBody _textBody;
    public eLabelPosition Position { get; public set; }
    public bool ShowValue { get; public set; }
    public bool ShowCategory { get; public set; }
    public bool ShowSeriesName { get; public set; }
    public bool ShowPercent { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public bool ShowBubbleSize { get; public set; }
    public bool ShowLegendKey { get; public set; }
    public string Separator { get; public set; }
    public string Format { get; public set; }
    public bool SourceLinked { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelTextFont Font { get; }
    public ExcelDrawingTextSettings TextSettings { get; }
    public ExcelTextBody TextBody { get; }
    internal ExcelChartDataLabel(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, string nodeName, string nsPrefix);
    public abstract virtual eLabelPosition get_Position();
    public abstract virtual void set_Position(eLabelPosition value);
    public abstract virtual bool get_ShowValue();
    public abstract virtual void set_ShowValue(bool value);
    public abstract virtual bool get_ShowCategory();
    public abstract virtual void set_ShowCategory(bool value);
    public abstract virtual bool get_ShowSeriesName();
    public abstract virtual void set_ShowSeriesName(bool value);
    public abstract virtual bool get_ShowPercent();
    public abstract virtual void set_ShowPercent(bool value);
    public abstract virtual bool get_ShowLeaderLines();
    public abstract virtual void set_ShowLeaderLines(bool value);
    public abstract virtual bool get_ShowBubbleSize();
    public abstract virtual void set_ShowBubbleSize(bool value);
    public abstract virtual bool get_ShowLegendKey();
    public abstract virtual void set_ShowLegendKey(bool value);
    public abstract virtual string get_Separator();
    public abstract virtual void set_Separator(string value);
    public string get_Format();
    public void set_Format(string value);
    public bool get_SourceLinked();
    public void set_SourceLinked(bool value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    public sealed virtual ExcelTextFont get_Font();
    public ExcelDrawingTextSettings get_TextSettings();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    private void CreateDefaultText();
    public sealed virtual ExcelTextBody get_TextBody();
    protected internal string GetPosText(eLabelPosition pos);
    protected internal eLabelPosition GetPosEnum(string pos);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection : XmlHelper {
    private ExcelChart _chart;
    private List`1<ExcelChartDataLabelItem> _list;
    public ExcelChartDataLabelItem Item { get; }
    public int Count { get; }
    internal ExcelChartDataLabelCollection(ExcelChart chart, XmlNamespaceManager ns, XmlNode topNode, String[] schemaNodeOrder);
    public ExcelChartDataLabelItem Add(int index);
    private ExcelChartDataLabelItem CreateDataLabel(int idx);
    private XmlElement CreateElement(int idx);
    private int GetItemAfter(int index);
    public ExcelChartDataLabelItem get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<ExcelChartDataLabelItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelItem : ExcelChartDataLabelStandard {
    [CompilerGeneratedAttribute]
private ExcelLayout <Layout>k__BackingField;
    public ExcelLayout Layout { get; private set; }
    public int Index { get; public set; }
    internal ExcelChartDataLabelItem(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, string nodeName, String[] schemaNodeOrder);
    [CompilerGeneratedAttribute]
public ExcelLayout get_Layout();
    [CompilerGeneratedAttribute]
private void set_Layout(ExcelLayout value);
    public int get_Index();
    public void set_Index(int value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard : ExcelChartDataLabel {
    private Guid _guidId;
    private static string positionPath;
    private static string showValPath;
    private static string showCatPath;
    private static string showSerPath;
    private static string showPerentPath;
    private static string showLeaderLinesPath;
    private static string showBubbleSizePath;
    private static string showLegendKeyPath;
    private static string separatorPath;
    public eLabelPosition Position { get; public set; }
    public bool ShowValue { get; public set; }
    public bool ShowCategory { get; public set; }
    public bool ShowSeriesName { get; public set; }
    public bool ShowPercent { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public bool ShowBubbleSize { get; public set; }
    public bool ShowLegendKey { get; public set; }
    public string Separator { get; public set; }
    internal ExcelChartDataLabelStandard(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, string nodeName, String[] schemaNodeOrder);
    public virtual eLabelPosition get_Position();
    public virtual void set_Position(eLabelPosition value);
    internal static bool ForbiddDataLabelPosition(ExcelChart _chart);
    public virtual bool get_ShowValue();
    public virtual void set_ShowValue(bool value);
    public virtual bool get_ShowCategory();
    public virtual void set_ShowCategory(bool value);
    public virtual bool get_ShowSeriesName();
    public virtual void set_ShowSeriesName(bool value);
    public virtual bool get_ShowPercent();
    public virtual void set_ShowPercent(bool value);
    public virtual bool get_ShowLeaderLines();
    public virtual void set_ShowLeaderLines(bool value);
    public virtual bool get_ShowBubbleSize();
    public virtual void set_ShowBubbleSize(bool value);
    public virtual bool get_ShowLegendKey();
    public virtual void set_ShowLegendKey(bool value);
    public virtual string get_Separator();
    public virtual void set_Separator(string value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint : XmlHelper {
    internal static string topNodePath;
    private ExcelChart _chart;
    private static string indexPath;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    private ExcelChartMarker _chartMarker;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _line;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public int Index { get; private set; }
    public bool Bubble3D { get; public set; }
    public bool InvertIfNegative { get; public set; }
    public ExcelChartMarker Marker { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartDataPoint(ExcelChart chart, XmlNamespaceManager ns, XmlNode topNode);
    internal ExcelChartDataPoint(ExcelChart chart, XmlNamespaceManager ns, XmlNode topNode, int index);
    private void Init(ExcelChart chart);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    public bool get_Bubble3D();
    public void set_Bubble3D(bool value);
    public bool get_InvertIfNegative();
    public void set_InvertIfNegative(bool value);
    public ExcelChartMarker get_Marker();
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public bool HasMarker();
    public sealed virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection : XmlHelper {
    private ExcelChart _chart;
    private SortedDictionary`2<int, ExcelChartDataPoint> _dic;
    public ExcelChartDataPoint Item { get; }
    public int Count { get; }
    internal ExcelChartDataPointCollection(ExcelChart chart, XmlNamespaceManager ns, XmlNode topNode, String[] schemaNodeOrder);
    public bool ContainsKey(int index);
    public ExcelChartDataPoint Add(int index);
    internal ExcelChartDataPoint AddDp(int idx, string uniqueId);
    private XmlElement CreateElement(int idx, string uniqueId);
    private int GetItemBefore(int index);
    public ExcelChartDataPoint get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<ExcelChartDataPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartDataTable : XmlHelper {
    private ExcelChart _chart;
    private static string showHorzBorderPath;
    private static string showVertBorderPath;
    private static string showOutlinePath;
    private static string showKeysPath;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelTextFont _font;
    private ExcelTextBody _textBody;
    private ExcelDrawingTextSettings _textSettings;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public bool ShowHorizontalBorder { get; public set; }
    public bool ShowVerticalBorder { get; public set; }
    public bool ShowOutline { get; public set; }
    public bool ShowKeys { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelDrawingTextSettings TextSettings { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartDataTable(ExcelChart chart, XmlNamespaceManager ns, XmlNode node);
    public bool get_ShowHorizontalBorder();
    public void set_ShowHorizontalBorder(bool value);
    public bool get_ShowVerticalBorder();
    public void set_ShowVerticalBorder(bool value);
    public bool get_ShowOutline();
    public void set_ShowOutline(bool value);
    public bool get_ShowKeys();
    public void set_ShowKeys(bool value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelTextFont get_Font();
    public sealed virtual ExcelTextBody get_TextBody();
    public ExcelDrawingTextSettings get_TextSettings();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars : XmlHelper {
    private ExcelChartSerieWithErrorBars _chartSerie;
    private string _directionPath;
    private string _barTypePath;
    private string _valueTypePath;
    private string _noEndCapPath;
    private string _valuePath;
    private string _plusNodePath;
    private ExcelChartNumericSource _plus;
    private string _minusNodePath;
    private ExcelChartNumericSource _minus;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public eErrorBarDirection Direction { get; public set; }
    public eErrorBarType BarType { get; public set; }
    public eErrorValueType ValueType { get; public set; }
    public bool NoEndCap { get; public set; }
    public Nullable`1<double> Value { get; public set; }
    public ExcelChartNumericSource Plus { get; }
    public ExcelChartNumericSource Minus { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartErrorBars(ExcelChartSerieWithErrorBars chartSerie);
    internal ExcelChartErrorBars(ExcelChartSerieWithErrorBars chartSerie, XmlNode topNode);
    public eErrorBarDirection get_Direction();
    public void set_Direction(eErrorBarDirection value);
    internal void SetDirection(eErrorBarDirection value);
    public eErrorBarType get_BarType();
    public void set_BarType(eErrorBarType value);
    public eErrorValueType get_ValueType();
    public void set_ValueType(eErrorValueType value);
    public bool get_NoEndCap();
    public void set_NoEndCap(bool value);
    public Nullable`1<double> get_Value();
    public void set_Value(Nullable`1<double> value);
    public ExcelChartNumericSource get_Plus();
    public ExcelChartNumericSource get_Minus();
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private void ValidateNotDeleted();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public void Remove();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartLegend : XmlHelper {
    internal ExcelChart _chart;
    internal string _nsPrefix;
    private string OVERLAY_PATH;
    internal EPPlusReadOnlyList`1<ExcelChartLegendEntry> _entries;
    private static string POSITION_PATH;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelTextFont _font;
    private ExcelTextBody _textBody;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawingTextSettings _textSettings;
    private ExcelDrawing3D _threeD;
    public EPPlusReadOnlyList`1<ExcelChartLegendEntry> Entries { get; }
    public eLegendPosition Position { get; public set; }
    public bool Overlay { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawingTextSettings TextSettings { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartLegend(XmlNamespaceManager ns, XmlNode node, ExcelChart chart, string nsPrefix);
    internal void LoadEntries();
    internal void AddNewEntry(ExcelChartSerie serie);
    internal int GetPreEntryIndex(int serieIndex);
    public EPPlusReadOnlyList`1<ExcelChartLegendEntry> get_Entries();
    internal XmlElement GetOrCreateEntry();
    internal List`1<ExcelChartLegendEntry> LoadLegendEntries();
    public virtual eLegendPosition get_Position();
    public virtual void set_Position(eLegendPosition value);
    public virtual bool get_Overlay();
    public virtual void set_Overlay(bool value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelTextFont get_Font();
    public sealed virtual ExcelTextBody get_TextBody();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public ExcelDrawingTextSettings get_TextSettings();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public void Remove();
    public virtual void Add();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IStyleMandatoryProperties.SetMandatoryProperties();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry : XmlHelper {
    internal ExcelChartStandard _chart;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    private ExcelTextFont _font;
    private ExcelTextBody _textBody;
    public int Index { get; internal set; }
    public bool Deleted { get; public set; }
    internal bool HasValue { get; internal set; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartLegendEntry(XmlNamespaceManager nsm, XmlNode topNode, ExcelChartStandard chart);
    internal ExcelChartLegendEntry(XmlNamespaceManager nsm, XmlNode legendNode, ExcelChartStandard chart, int serieIndex);
    private void Init(ExcelChartStandard chart);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    public bool get_Deleted();
    public void set_Deleted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_HasValue();
    [CompilerGeneratedAttribute]
internal void set_HasValue(bool value);
    private void CreateTopNode();
    public sealed virtual ExcelTextFont get_Font();
    internal void InitChartXml();
    public sealed virtual ExcelTextBody get_TextBody();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    internal void Save();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartMarker : XmlHelper {
    private ExcelChart _chart;
    private bool _allowMarkers;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public eMarkerStyle Style { get; public set; }
    public int Size { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartMarker(ExcelChart chart, XmlNamespaceManager ns, XmlNode topNode, String[] schemaNodeOrder);
    public eMarkerStyle get_Style();
    public void set_Style(eMarkerStyle value);
    public int get_Size();
    public void set_Size(int value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartNumericSource : XmlHelper {
    private string _path;
    private XmlElement _sourceElement;
    private string _formatCodePath;
    private string _formatCode;
    public string ValuesSource { get; public set; }
    public string FormatCode { get; public set; }
    internal ExcelChartNumericSource(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, String[] schemaNodeOrder);
    public string get_ValuesSource();
    public void set_ValuesSource(string value);
    private string GetNumLit();
    private void SetSourceElement();
    private void CreateNumLit(string value);
    private XmlElement CreateLit(string num, int idx);
    public string get_FormatCode();
    public void set_FormatCode(string value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea : XmlHelper {
    private ExcelChart _firstChart;
    private ExcelChart _topChart;
    private string _nsPrefix;
    private ExcelChartCollection _chartTypes;
    [CompilerGeneratedAttribute]
private ExcelChartDataTable <DataTable>k__BackingField;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public ExcelChartCollection ChartTypes { get; }
    public ExcelChartDataTable DataTable { get; private set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartPlotArea(XmlNamespaceManager ns, XmlNode node, ExcelChart firstChart, string nsPrefix, ExcelChart topChart);
    public ExcelChartCollection get_ChartTypes();
    public virtual ExcelChartDataTable CreateDataTable();
    public virtual void RemoveDataTable();
    [CompilerGeneratedAttribute]
public ExcelChartDataTable get_DataTable();
    [CompilerGeneratedAttribute]
private void set_DataTable(ExcelChartDataTable value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
}
public abstract class OfficeOpenXml.Drawing.Chart.ExcelChartSerie : XmlHelper {
    internal ExcelChart _chart;
    private string _prefix;
    [CompilerGeneratedAttribute]
private Double[] <NumberLiteralsY>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <NumberLiteralsX>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StringLiteralsX>k__BackingField;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public string Header { get; public set; }
    public Double[] NumberLiteralsY { get; protected set; }
    public Double[] NumberLiteralsX { get; protected set; }
    public String[] StringLiteralsX { get; protected set; }
    public ExcelAddressBase HeaderAddress { get; public set; }
    public string Series { get; public set; }
    public string XSeries { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public int NumberOfItems { get; }
    public ExcelChartTrendlineCollection TrendLines { get; }
    internal ExcelChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, string prefix);
    public abstract virtual string get_Header();
    public abstract virtual void set_Header(string value);
    [CompilerGeneratedAttribute]
public Double[] get_NumberLiteralsY();
    [CompilerGeneratedAttribute]
protected void set_NumberLiteralsY(Double[] value);
    [CompilerGeneratedAttribute]
public Double[] get_NumberLiteralsX();
    [CompilerGeneratedAttribute]
protected void set_NumberLiteralsX(Double[] value);
    [CompilerGeneratedAttribute]
public String[] get_StringLiteralsX();
    [CompilerGeneratedAttribute]
protected void set_StringLiteralsX(String[] value);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public abstract virtual ExcelAddressBase get_HeaderAddress();
    public abstract virtual void set_HeaderAddress(ExcelAddressBase value);
    public abstract virtual string get_Series();
    public abstract virtual void set_Series(string value);
    public abstract virtual string get_XSeries();
    public abstract virtual void set_XSeries(string value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    public abstract virtual int get_NumberOfItems();
    public abstract virtual ExcelChartTrendlineCollection get_TrendLines();
    internal abstract virtual void SetID(string id);
    internal string ToFullAddress(string value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartSerieDataLabel : ExcelChartDataLabelStandard {
    private ExcelChartDataLabelCollection _dataLabels;
    public ExcelChartDataLabelCollection DataLabels { get; }
    internal ExcelChartSerieDataLabel(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, String[] schemaNodeOrder);
    public ExcelChartDataLabelCollection get_DataLabels();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1 : object {
    internal List`1<ExcelChartSerie> _list;
    internal ExcelChart _chart;
    private XmlNode _node;
    private XmlNamespaceManager _ns;
    private bool _isPivot;
    public T Item { get; }
    public int Count { get; }
    public ExcelChart Chart { get; }
    internal void Init(ExcelChart chart, XmlNamespaceManager ns, XmlNode chartNode, bool isPivot, List`1<ExcelChartSerie> list);
    private void AddSeriesChartEx(ExcelChartEx chart, XmlNamespaceManager ns, XmlNode chartNode);
    private void AddSeriesStandard(ExcelChart chart, XmlNamespaceManager ns, XmlNode chartNode, bool isPivot);
    public T get_Item(int PositionID);
    public int get_Count();
    public void Delete(int PositionID);
    public ExcelChart get_Chart();
    public virtual T Add(ExcelRangeBase Serie);
    public virtual T Add(string Serie);
    public virtual T Add(ExcelRangeBase Serie, ExcelRangeBase XSerie);
    public virtual T Add(string SerieAddress, string XSerieAddress);
    protected internal T AddSeries(string SerieAddress, string XSerieAddress, string bubbleSizeAddress);
    internal void AddPivotSerie(ExcelPivotTable pivotTableSource);
    public IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars : ExcelChartStandardSerie {
    [CompilerGeneratedAttribute]
private ExcelChartErrorBars <ErrorBars>k__BackingField;
    public ExcelChartErrorBars ErrorBars { get; internal set; }
    internal ExcelChartSerieWithErrorBars(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    [CompilerGeneratedAttribute]
public sealed virtual ExcelChartErrorBars get_ErrorBars();
    [CompilerGeneratedAttribute]
internal void set_ErrorBars(ExcelChartErrorBars value);
    public virtual void AddErrorBars(eErrorBarType barType, eErrorValueType valueType);
    internal ExcelChartErrorBars GetNewErrorBar(eErrorBarType barType, eErrorValueType valueType, ExcelChartErrorBars errorBars);
    public sealed virtual bool HasErrorBars();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars : ExcelChartSerieWithErrorBars {
    [CompilerGeneratedAttribute]
private ExcelChartErrorBars <ErrorBarsX>k__BackingField;
    public ExcelChartErrorBars ErrorBarsX { get; internal set; }
    internal ExcelChartSerieWithHorizontalErrorBars(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    [CompilerGeneratedAttribute]
public ExcelChartErrorBars get_ErrorBarsX();
    [CompilerGeneratedAttribute]
internal void set_ErrorBarsX(ExcelChartErrorBars value);
    public virtual void AddErrorBars(eErrorBarType barType, eErrorValueType valueType);
    public void AddErrorBars(eErrorBarType barType, eErrorValueType valueType, Nullable`1<eErrorBarDirection> direction);
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartStandard : ExcelChart {
    private static string _roundedCornersPath;
    private static string _plotVisibleOnlyPath;
    private static string _displayBlanksAsPath;
    private static string _showDLblsOverMax;
    private ExcelDrawingBorder _border;
    private ExcelDrawingFill _fill;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelTextFont _font;
    private ExcelTextBody _textBody;
    private string _groupingPath;
    private string _varyColorsPath;
    private ExcelChartAxisStandard[] _axisStandard;
    public ExcelChartTitleStandard Title { get; }
    public bool HasTitle { get; }
    public bool HasLegend { get; }
    public eChartStyle Style { get; public set; }
    public bool RoundedCorners { get; public set; }
    public bool ShowHiddenData { get; public set; }
    public eDisplayBlanksAs DisplayBlanksAs { get; public set; }
    public bool ShowDataLabelsOverMaximum { get; public set; }
    public ExcelChartPlotArea PlotArea { get; }
    public ExcelChartLegend Legend { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelView3D View3D { get; }
    public eGrouping Grouping { get; internal set; }
    public bool VaryColors { get; public set; }
    internal int Items { get; }
    public ExcelChartAxisStandard[] Axis { get; }
    public ExcelChartAxisStandard XAxis { get; internal set; }
    public ExcelChartAxisStandard YAxis { get; internal set; }
    internal ExcelChartStandard(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, bool isPivot, ExcelGroupShape parent, string drawingPath, string nvPrPath);
    internal ExcelChartStandard(ExcelDrawings drawings, XmlNode drawingsNode, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent, string drawingPath, string nvPrPath);
    internal ExcelChartStandard(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent, string drawingPath, string nvPrPath);
    internal ExcelChartStandard(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent, string drawingPath, string nvPrPath);
    private void InitChartLoad(ExcelDrawings drawings, XmlNode chartNode);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    private void Init(ExcelDrawings drawings, XmlNode chartNode);
    private void SetTypeProperties();
    private void Init3DProperties();
    private void CreateNewChart(ExcelDrawings drawings, ExcelChart topChart, XmlDocument chartXml, Nullable`1<eChartType> type);
    private void LoadAxis();
    internal virtual eChartType GetChartType(string name);
    private string ChartStartXml(eChartType type);
    private void AppendStockChartXml(eChartType type, StringBuilder xml, string chartNodeText);
    private object GetAxisShapeProperties();
    private string AddLegend();
    private string GetChartSerieStartXml(eChartType type, int axID, int xAxID, int serAxID);
    private string AddAxisId(int axID, int xAxID, int serAxID);
    private string AddAxType();
    private string AddScatterType(eChartType type);
    private string AddRadarType(eChartType type);
    private string AddGrouping();
    private string AddHoleSize(eChartType type);
    private string AddFirstSliceAng(eChartType type);
    private string AddVaryColors();
    private string AddHasMarker(eChartType type);
    private string AddShape(eChartType type);
    private string AddBarDir(eChartType type);
    private string AddPerspectiveXml(eChartType type);
    private string Add3DXml(eChartType type);
    private string Add3DPart(string name);
    protected string GetChartNodeText();
    internal virtual void AddAxis();
    internal void RemoveSecondaryAxis();
    public ExcelChartTitleStandard get_Title();
    internal virtual ExcelChartTitle GetTitle();
    public virtual bool get_HasTitle();
    public virtual bool get_HasLegend();
    public virtual void DeleteTitle();
    public virtual eChartStyle get_Style();
    public virtual void set_Style(eChartStyle value);
    public virtual bool get_RoundedCorners();
    public virtual void set_RoundedCorners(bool value);
    public virtual bool get_ShowHiddenData();
    public virtual void set_ShowHiddenData(bool value);
    public virtual eDisplayBlanksAs get_DisplayBlanksAs();
    public virtual void set_DisplayBlanksAs(eDisplayBlanksAs value);
    public virtual bool get_ShowDataLabelsOverMaximum();
    public virtual void set_ShowDataLabelsOverMaximum(bool value);
    private void CheckRemoveAxis(ExcelChartAxis excelChartAxis);
    private bool ExistsAxis(ExcelChartAxis excelChartAxis);
    public virtual ExcelChartPlotArea get_PlotArea();
    public ExcelChartLegend get_Legend();
    public virtual ExcelDrawingBorder get_Border();
    public virtual ExcelDrawingFill get_Fill();
    public virtual ExcelDrawingEffectStyle get_Effect();
    public virtual ExcelDrawing3D get_ThreeD();
    public virtual ExcelTextFont get_Font();
    public virtual ExcelTextBody get_TextBody();
    public virtual ExcelView3D get_View3D();
    public eGrouping get_Grouping();
    internal void set_Grouping(eGrouping value);
    public virtual bool get_VaryColors();
    public virtual void set_VaryColors(bool value);
    private string GetGroupingText(eGrouping grouping);
    private eGrouping GetGroupingEnum(string grouping);
    internal int get_Items();
    internal void SetPivotSource(ExcelPivotTable pivotTableSource);
    public ExcelChartAxisStandard[] get_Axis();
    public ExcelChartAxisStandard get_XAxis();
    internal void set_XAxis(ExcelChartAxisStandard value);
    public ExcelChartAxisStandard get_YAxis();
    internal void set_YAxis(ExcelChartAxisStandard value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie : ExcelChartSerie {
    private bool _isPivot;
    private static string headerPath;
    private static string headerAddressPath;
    private string _seriesTopPath;
    private string _seriesPath;
    private string _numCachePath;
    private string _seriesStrLitPath;
    private string _seriesNumLitPath;
    private string _xSeries;
    private string _xSeriesTopPath;
    private string _xSeriesParentPath;
    private string _xSeriesPath;
    private string _xSeriesStrLitPath;
    private string _xSeriesNumLitPath;
    private ExcelChartTrendlineCollection _trendLines;
    public string Header { get; public set; }
    public ExcelAddressBase HeaderAddress { get; public set; }
    public string Series { get; public set; }
    public string XSeries { get; public set; }
    public ExcelChartTrendlineCollection TrendLines { get; }
    public int NumberOfItems { get; }
    internal ExcelChartStandardSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    internal virtual void SetID(string id);
    public virtual string get_Header();
    public virtual void set_Header(string value);
    private void Cleartx();
    public virtual ExcelAddressBase get_HeaderAddress();
    public virtual void set_HeaderAddress(ExcelAddressBase value);
    public virtual string get_Series();
    public virtual void set_Series(string value);
    public virtual string get_XSeries();
    public virtual void set_XSeries(string value);
    private void GetLitValues(string value, Double[]& numberLiterals, String[]& stringLiterals);
    private String[] SplitStringValue(string value, char textQualifier);
    private void SetSerieFunction(string value);
    private void SetXSerieFunction();
    private void SetLits(Double[] numLit, String[] strLit, string numLitPath, string strLitPath);
    private void SetLitArray(XmlNode lit, Double[] numLit);
    private void SetLitArray(XmlNode lit, String[] strLit);
    private static void AddCount(XmlNode lit, int count);
    public virtual ExcelChartTrendlineCollection get_TrendLines();
    public virtual int get_NumberOfItems();
    public void CreateCache();
    private void CreateCache(string address, XmlNode node);
    private void CreateCacheFromRange(XmlNode node, ExcelRangeBase range);
    private void CreateCacheFromExternalCache(XmlNode node, ExcelExternalWorkbook er, ExcelAddressBase addr);
    private XmlNode GetTopNode(string address, string seriesTopPath);
    internal static XmlElement CreateSerieElement(ExcelChart chart);
    private static int FindIndex(ExcelChart chart);
    private static string AddMarker(eChartType chartType);
    private static string AddSpPrAndScatterPoint(eChartType chartType);
    private static string AddAxisNodes(eChartType chartType);
    private static string AddExplosion(eChartType chartType);
    private static string AddSmooth(eChartType chartType);
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem : XmlHelper {
    private ExcelChart _chart;
    private string _path;
    private Action _removeMe;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartStyleItem(XmlNamespaceManager nsm, XmlNode topNode, ExcelChart chart, string path, Action removeMe);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public void Remove();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartSurface : XmlHelper {
    private ExcelChart _chart;
    private static string THICKNESS_PATH;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    public int Thickness { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelChartSurface(ExcelChart chart, XmlNamespaceManager ns, XmlNode node);
    public int get_Thickness();
    public void set_Thickness(int value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
}
public abstract class OfficeOpenXml.Drawing.Chart.ExcelChartTitle : XmlHelper {
    internal ExcelChart _chart;
    internal string _nsPrefix;
    internal string _fontPropertiesPath;
    private ExcelDrawingBorder _border;
    private ExcelDrawingFill _fill;
    internal ExcelTextFont _font;
    private ExcelTextBody _textBody;
    private ExcelDrawingTextSettings _textSettings;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelParagraphCollection _richText;
    private static string TextVerticalPath;
    public string Text { get; public set; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelTextFont Font { get; }
    internal bool HasLinkedCell { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelDrawingTextSettings TextSettings { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelParagraphCollection RichText { get; }
    public bool Overlay { get; public set; }
    public bool AnchorCtr { get; public set; }
    public eTextAnchoringType Anchor { get; public set; }
    public eTextVerticalType TextVertical { get; public set; }
    public double Rotation { get; public set; }
    internal ExcelChartTitle(ExcelChart chart, XmlNamespaceManager nameSpaceManager, XmlNode node, string nsPrefix);
    private void CreateTopNode();
    internal static string GetInitXml(string prefix);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelTextFont get_Font();
    internal abstract virtual bool get_HasLinkedCell();
    public sealed virtual ExcelTextBody get_TextBody();
    public ExcelDrawingTextSettings get_TextSettings();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public ExcelParagraphCollection get_RichText();
    internal void CreateRichText();
    private ExcelChartStyleEntry GetStylePart();
    public bool get_Overlay();
    public void set_Overlay(bool value);
    public bool get_AnchorCtr();
    public void set_AnchorCtr(bool value);
    public eTextAnchoringType get_Anchor();
    public void set_Anchor(eTextAnchoringType value);
    public eTextVerticalType get_TextVertical();
    public void set_TextVertical(eTextVerticalType value);
    public double get_Rotation();
    public void set_Rotation(double value);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IStyleMandatoryProperties.SetMandatoryProperties();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartTitleStandard : ExcelChartTitle {
    public string Text { get; public set; }
    public ExcelRangeBase LinkedCell { get; public set; }
    internal bool HasLinkedCell { get; }
    internal ExcelChartTitleStandard(ExcelChart chart, XmlNamespaceManager nameSpaceManager, XmlNode node, string nsPrefix);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public ExcelRangeBase get_LinkedCell();
    public void set_LinkedCell(ExcelRangeBase value);
    internal virtual bool get_HasLinkedCell();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartTrendline : XmlHelper {
    private ExcelChartStandardSerie _serie;
    private static string TRENDLINEPATH;
    private static string NAMEPATH;
    private static string ORDERPATH;
    private static string PERIODPATH;
    private static string FORWARDPATH;
    private static string BACKWARDPATH;
    private static string INTERCEPTPATH;
    private static string DISPLAYRSQUAREDVALUEPATH;
    private static string DISPLAYEQUATIONPATH;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelChartTrendlineLabel _label;
    public eTrendLine Type { get; public set; }
    public string Name { get; public set; }
    public decimal Order { get; public set; }
    public decimal Period { get; public set; }
    public decimal Forward { get; public set; }
    public decimal Backward { get; public set; }
    public decimal Intercept { get; public set; }
    public bool DisplayRSquaredValue { get; public set; }
    public bool DisplayEquation { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelChartTrendlineLabel Label { get; }
    public bool HasLbl { get; }
    internal ExcelChartTrendline(XmlNamespaceManager namespaceManager, XmlNode topNode, ExcelChartStandardSerie serie);
    public eTrendLine get_Type();
    public void set_Type(eTrendLine value);
    public string get_Name();
    public void set_Name(string value);
    public decimal get_Order();
    public void set_Order(decimal value);
    public decimal get_Period();
    public void set_Period(decimal value);
    public decimal get_Forward();
    public void set_Forward(decimal value);
    public decimal get_Backward();
    public void set_Backward(decimal value);
    public decimal get_Intercept();
    public void set_Intercept(decimal value);
    public bool get_DisplayRSquaredValue();
    public void set_DisplayRSquaredValue(bool value);
    public bool get_DisplayEquation();
    public void set_DisplayEquation(bool value);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public ExcelChartTrendlineLabel get_Label();
    public bool get_HasLbl();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection : object {
    private List`1<ExcelChartTrendline> _list;
    private ExcelChartStandardSerie _serie;
    public int Count { get; }
    public ExcelChartTrendline Item { get; }
    internal ExcelChartTrendlineCollection(ExcelChartStandardSerie serie);
    public ExcelChartTrendline Add(eTrendLine Type);
    public int get_Count();
    public ExcelChartTrendline get_Item(int index);
    private sealed virtual override IEnumerator`1<ExcelChartTrendline> System.Collections.Generic.IEnumerable<OfficeOpenXml.Drawing.Chart.ExcelChartTrendline>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel : XmlHelper {
    private ExcelChartStandardSerie _serie;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelTextFont _font;
    private ExcelTextBody _textBody;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelParagraphCollection _richText;
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelParagraphCollection RichText { get; }
    public string NumberFormat { get; public set; }
    public bool SourceLinked { get; public set; }
    internal ExcelChartTrendlineLabel(XmlNamespaceManager namespaceManager, XmlNode topNode, ExcelChartStandardSerie serie);
    public sealed virtual ExcelDrawingFill get_Fill();
    public sealed virtual ExcelDrawingBorder get_Border();
    public sealed virtual ExcelTextFont get_Font();
    public sealed virtual ExcelTextBody get_TextBody();
    public sealed virtual ExcelDrawingEffectStyle get_Effect();
    public sealed virtual ExcelDrawing3D get_ThreeD();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr();
    public ExcelParagraphCollection get_RichText();
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    public bool get_SourceLinked();
    public void set_SourceLinked(bool value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelDoughnutChart : ExcelPieChart {
    private string _firstSliceAngPath;
    private string _holeSizePath;
    public decimal FirstSliceAngle { get; internal set; }
    public decimal HoleSize { get; internal set; }
    internal ExcelDoughnutChart(ExcelDrawings drawings, XmlNode node, eChartType type, bool isPivot, ExcelGroupShape parent);
    internal ExcelDoughnutChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelDoughnutChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelDoughnutChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    public decimal get_FirstSliceAngle();
    internal void set_FirstSliceAngle(decimal value);
    public decimal get_HoleSize();
    internal void set_HoleSize(decimal value);
    internal virtual eChartType GetChartType(string name);
}
public class OfficeOpenXml.Drawing.Chart.ExcelDrawingTextSettings : XmlHelper {
    private ExcelChart _chart;
    private string _topPath;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Outline { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    internal ExcelDrawingTextSettings(ExcelChart chart, XmlNamespaceManager ns, XmlNode topNode, string topPath, String[] schemaNodeOrder);
    private void InitXml();
    public ExcelDrawingFill get_Fill();
    public ExcelDrawingBorder get_Outline();
    public ExcelDrawingEffectStyle get_Effect();
}
public class OfficeOpenXml.Drawing.Chart.ExcelHistogramChartSeries : ExcelChartSeries`1<ExcelHistogramChartSerie> {
    public void AddParetoLine();
    public void RemoveParetoLine();
}
public class OfficeOpenXml.Drawing.Chart.ExcelLayout : XmlHelper {
    [CompilerGeneratedAttribute]
private ExcelManualLayout <ManualLayout>k__BackingField;
    public ExcelManualLayout ManualLayout { get; }
    internal ExcelLayout(XmlNamespaceManager ns, XmlNode topNode, string path, string extLstPath, String[] schemaNodeOrder);
    [CompilerGeneratedAttribute]
public ExcelManualLayout get_ManualLayout();
}
public class OfficeOpenXml.Drawing.Chart.ExcelLineChart : ExcelStandardChartWithLines {
    internal ExcelLineChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelLineChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelLineChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
}
public class OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie : ExcelChartSerieWithErrorBars {
    private ExcelChartSerieDataLabel _DataLabel;
    private ExcelChartMarker _chartMarker;
    private static string smoothPath;
    private ExcelChartDataPointCollection _dataPoints;
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelChartMarker Marker { get; }
    public bool Smooth { get; public set; }
    public ExcelChartDataPointCollection DataPoints { get; }
    [ObsoleteAttribute("Please use Border.Fill.Color")]
public Color LineColor { get; public set; }
    [ObsoleteAttribute("Please use Marker.Size")]
public int MarkerSize { get; public set; }
    [ObsoleteAttribute("Please use Border.Width")]
public double LineWidth { get; public set; }
    [ObsoleteAttribute("Please use Marker.Border.Fill.Color")]
public Color MarkerLineColor { get; public set; }
    internal ExcelLineChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    public sealed virtual ExcelChartMarker get_Marker();
    public sealed virtual bool HasMarker();
    public bool get_Smooth();
    public void set_Smooth(bool value);
    public sealed virtual ExcelChartDataPointCollection get_DataPoints();
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public double get_LineWidth();
    public void set_LineWidth(double value);
    public Color get_MarkerLineColor();
    public void set_MarkerLineColor(Color value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelManualLayout : XmlHelper {
    private eLayoutTarget layoutTarget;
    private string _path;
    private string _extLstPath;
    public eLayoutMode LeftMode { get; public set; }
    public eLayoutMode TopMode { get; public set; }
    public eLayoutMode WidthMode { get; public set; }
    public eLayoutMode HeightMode { get; public set; }
    public eLayoutMode LegacyWidthMode { get; public set; }
    public eLayoutMode LegacyHeightMode { get; public set; }
    public Nullable`1<double> Left { get; public set; }
    public Nullable`1<double> Top { get; public set; }
    public Nullable`1<double> Width { get; public set; }
    public Nullable`1<double> Height { get; public set; }
    public Nullable`1<double> LegacyWidth { get; public set; }
    public Nullable`1<double> LegacyHeight { get; public set; }
    internal ExcelManualLayout(XmlNamespaceManager ns, XmlNode topNode, string path, string extLstPath, String[] schemaNodeOrder);
    public eLayoutMode get_LeftMode();
    public void set_LeftMode(eLayoutMode value);
    public eLayoutMode get_TopMode();
    public void set_TopMode(eLayoutMode value);
    public eLayoutMode get_WidthMode();
    public void set_WidthMode(eLayoutMode value);
    public eLayoutMode get_HeightMode();
    public void set_HeightMode(eLayoutMode value);
    public eLayoutMode get_LegacyWidthMode();
    public void set_LegacyWidthMode(eLayoutMode value);
    public eLayoutMode get_LegacyHeightMode();
    public void set_LegacyHeightMode(eLayoutMode value);
    public Nullable`1<double> get_Left();
    public void set_Left(Nullable`1<double> value);
    public Nullable`1<double> get_Top();
    public void set_Top(Nullable`1<double> value);
    public Nullable`1<double> get_Width();
    public void set_Width(Nullable`1<double> value);
    public Nullable`1<double> get_Height();
    public void set_Height(Nullable`1<double> value);
    public Nullable`1<double> get_LegacyWidth();
    public void set_LegacyWidth(Nullable`1<double> value);
    public Nullable`1<double> get_LegacyHeight();
    public void set_LegacyHeight(Nullable`1<double> value);
    private Nullable`1<double> GetXmlValue(string path, string name);
    private void SetXmlValue(string path, string name, Nullable`1<double> value);
    private eLayoutMode GetXmlMode(string path, string name);
    private void SetXmlMode(string path, string name, eLayoutMode value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelOfPieChart : ExcelPieChart {
    private static string pieTypePath;
    private string _gapWidthPath;
    public ePieType OfPieType { get; internal set; }
    public int GapWidth { get; public set; }
    internal ExcelOfPieChart(ExcelDrawings drawings, XmlNode node, eChartType type, bool isPivot, ExcelGroupShape parent);
    internal ExcelOfPieChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelOfPieChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelOfPieChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    private void SetTypeProperties();
    public ePieType get_OfPieType();
    internal void set_OfPieType(ePieType value);
    public int get_GapWidth();
    public void set_GapWidth(int value);
    internal virtual eChartType GetChartType(string name);
}
public class OfficeOpenXml.Drawing.Chart.ExcelPieChart : ExcelChartStandard {
    private ExcelChartDataLabel _dataLabel;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelPieChartSerie> <Series>k__BackingField;
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelChartSeries`1<ExcelPieChartSerie> Series { get; }
    internal ExcelPieChart(ExcelDrawings drawings, XmlNode node, eChartType type, bool isPivot, ExcelGroupShape parent);
    internal ExcelPieChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelPieChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelPieChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    public sealed virtual ExcelChartDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    internal virtual eChartType GetChartType(string name);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelPieChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie : ExcelChartStandardSerie {
    private static string explosionPath;
    private ExcelChartSerieDataLabel _DataLabel;
    private ExcelChartDataPointCollection _dataPoints;
    public int Explosion { get; public set; }
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelChartDataPointCollection DataPoints { get; }
    internal ExcelPieChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public int get_Explosion();
    public void set_Explosion(int value);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    public sealed virtual ExcelChartDataPointCollection get_DataPoints();
}
public class OfficeOpenXml.Drawing.Chart.ExcelRadarChart : ExcelChartStandard {
    private string STYLE_PATH;
    private ExcelChartDataLabel _DataLabel;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelRadarChartSerie> <Series>k__BackingField;
    public eRadarStyle RadarStyle { get; public set; }
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelChartSeries`1<ExcelRadarChartSerie> Series { get; }
    internal ExcelRadarChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelRadarChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelRadarChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    private void SetTypeProperties();
    public eRadarStyle get_RadarStyle();
    public void set_RadarStyle(eRadarStyle value);
    public sealed virtual ExcelChartDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    internal virtual eChartType GetChartType(string name);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelRadarChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie : ExcelChartStandardSerie {
    private ExcelChartSerieDataLabel _DataLabel;
    private static string markerPath;
    private ExcelChartMarker _chartMarker;
    private ExcelChartDataPointCollection _dataPoints;
    private static string MARKERSIZE_PATH;
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelChartMarker Marker { get; }
    public ExcelChartDataPointCollection DataPoints { get; }
    [ObsoleteAttribute("Please use Marker.Size")]
public int MarkerSize { get; public set; }
    internal ExcelRadarChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    public sealed virtual ExcelChartMarker get_Marker();
    public sealed virtual bool HasMarker();
    private bool IsMarkersAllowed();
    public sealed virtual ExcelChartDataPointCollection get_DataPoints();
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelScatterChart : ExcelChartStandard {
    private string _scatterTypePath;
    private string MARKER_PATH;
    private ExcelChartDataLabel _dataLabel;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelScatterChartSerie> <Series>k__BackingField;
    public eScatterStyle ScatterStyle { get; internal set; }
    public bool Marker { get; public set; }
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public ExcelChartSeries`1<ExcelScatterChartSerie> Series { get; }
    internal ExcelScatterChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelScatterChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelScatterChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    private void SetTypeProperties();
    private eScatterStyle GetScatterEnum(string text);
    private string GetScatterText(eScatterStyle shatterStyle);
    public eScatterStyle get_ScatterStyle();
    internal void set_ScatterStyle(eScatterStyle value);
    public bool get_Marker();
    public void set_Marker(bool value);
    public sealed virtual ExcelChartDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    internal virtual eChartType GetChartType(string name);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelScatterChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie : ExcelChartSerieWithHorizontalErrorBars {
    private ExcelChartSerieDataLabel _dataLabel;
    private static string smoothPath;
    private static string markerPath;
    private ExcelChartMarker _chartMarker;
    private ExcelChartDataPointCollection _dataPoints;
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public int Smooth { get; internal set; }
    public ExcelChartMarker Marker { get; }
    public ExcelChartDataPointCollection DataPoints { get; }
    [ObsoleteAttribute("Please use Border.Fill.Color property")]
public Color LineColor { get; public set; }
    [ObsoleteAttribute("Please use Marker.Size")]
public int MarkerSize { get; public set; }
    [ObsoleteAttribute("Please use Marker.Fill")]
public Color MarkerColor { get; public set; }
    [ObsoleteAttribute("Please use Border.Width")]
public double LineWidth { get; public set; }
    [ObsoleteAttribute("Please use Marker.Border.Fill.Color")]
public Color MarkerLineColor { get; public set; }
    internal ExcelScatterChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    public int get_Smooth();
    internal void set_Smooth(int value);
    public sealed virtual ExcelChartMarker get_Marker();
    public sealed virtual bool HasMarker();
    private bool IsMarkersAllowed();
    public ExcelChartDataPointCollection get_DataPoints();
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public double get_LineWidth();
    public void set_LineWidth(double value);
    public Color get_MarkerLineColor();
    public void set_MarkerLineColor(Color value);
}
public abstract class OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines : ExcelChartStandard {
    private string MARKER_PATH;
    private string SMOOTH_PATH;
    private ExcelChartDataLabel _dataLabel;
    private static string _gapWidthPath;
    private ExcelChartStyleItem _upBar;
    private static string _upBarPath;
    private ExcelChartStyleItem _downBar;
    private static string _downBarPath;
    private ExcelChartStyleItem _hiLowLines;
    private static string _hiLowLinesPath;
    private ExcelChartStyleItem _dropLines;
    private static string _dropLinesPath;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelLineChartSerie> <Series>k__BackingField;
    public bool Marker { get; public set; }
    public bool Smooth { get; public set; }
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public Nullable`1<double> UpDownBarGapWidth { get; public set; }
    public ExcelChartStyleItem UpBar { get; }
    public ExcelChartStyleItem DownBar { get; }
    public ExcelChartStyleItem HighLowLine { get; }
    public ExcelChartStyleItem DropLine { get; }
    public ExcelChartSeries`1<ExcelLineChartSerie> Series { get; }
    internal ExcelStandardChartWithLines(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelStandardChartWithLines(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelStandardChartWithLines(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    public bool get_Marker();
    public void set_Marker(bool value);
    public bool get_Smooth();
    public void set_Smooth(bool value);
    public sealed virtual ExcelChartDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    public Nullable`1<double> get_UpDownBarGapWidth();
    public void set_UpDownBarGapWidth(Nullable`1<double> value);
    public ExcelChartStyleItem get_UpBar();
    public ExcelChartStyleItem get_DownBar();
    public ExcelChartStyleItem get_HighLowLine();
    public ExcelChartStyleItem get_DropLine();
    public void AddUpDownBars(bool upBars, bool downBars);
    public ExcelChartStyleItem AddDropLines();
    public ExcelChartStyleItem AddHighLowLines();
    internal virtual eChartType GetChartType(string name);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelLineChartSerie> get_Series();
    private void RemoveUpBar();
    private void RemoveDownBar();
    private void RemoveDropLines();
    private void RemoveHiLowLines();
}
public class OfficeOpenXml.Drawing.Chart.ExcelStockChart : ExcelStandardChartWithLines {
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelStockChartSerie> <Series>k__BackingField;
    public ExcelChartSeries`1<ExcelStockChartSerie> Series { get; }
    internal ExcelStockChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelStockChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelStockChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelStockChartSerie> get_Series();
    internal static eChartType GetChartType(object OpenSerie, object VolumeSerie);
    internal static void SetStockChartSeries(ExcelStockChart chart, eChartType chartType, string CategorySerie, string HighSerie, string LowSerie, string CloseSerie, string OpenSerie, string VolumeSerie);
}
public class OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie : ExcelChartSerieWithErrorBars {
    private ExcelChartSerieDataLabel _dataLabel;
    private static string smoothPath;
    private static string markerPath;
    private ExcelChartMarker _chartMarker;
    private ExcelChartDataPointCollection _dataPoints;
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public int Smooth { get; internal set; }
    public ExcelChartMarker Marker { get; }
    public ExcelChartDataPointCollection DataPoints { get; }
    [ObsoleteAttribute("Please use Border.Fill.Color property")]
public Color LineColor { get; public set; }
    [ObsoleteAttribute("Please use Marker.Size")]
public int MarkerSize { get; public set; }
    [ObsoleteAttribute("Please use Marker.Fill")]
public Color MarkerColor { get; public set; }
    [ObsoleteAttribute("Please use Border.Width")]
public double LineWidth { get; public set; }
    [ObsoleteAttribute("Please use Marker.Border.Fill.Color")]
public Color MarkerLineColor { get; public set; }
    internal ExcelStockChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
    public sealed virtual ExcelChartSerieDataLabel get_DataLabel();
    public sealed virtual bool get_HasDataLabel();
    public int get_Smooth();
    internal void set_Smooth(int value);
    public sealed virtual ExcelChartMarker get_Marker();
    public sealed virtual bool HasMarker();
    private bool IsMarkersAllowed();
    public ExcelChartDataPointCollection get_DataPoints();
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public double get_LineWidth();
    public void set_LineWidth(double value);
    public Color get_MarkerLineColor();
    public void set_MarkerLineColor(Color value);
}
public class OfficeOpenXml.Drawing.Chart.ExcelSurfaceChart : ExcelChartStandard {
    private static string WIREFRAME_PATH;
    [CompilerGeneratedAttribute]
private ExcelChartSeries`1<ExcelSurfaceChartSerie> <Series>k__BackingField;
    public bool Wireframe { get; public set; }
    public ExcelChartSeries`1<ExcelSurfaceChartSerie> Series { get; }
    internal ExcelSurfaceChart(ExcelDrawings drawings, XmlNode node, Nullable`1<eChartType> type, ExcelChart topChart, ExcelPivotTable PivotTableSource, XmlDocument chartXml, ExcelGroupShape parent);
    internal ExcelSurfaceChart(ExcelDrawings drawings, XmlNode node, Uri uriChart, ZipPackagePart part, XmlDocument chartXml, XmlNode chartNode, ExcelGroupShape parent);
    internal ExcelSurfaceChart(ExcelChart topChart, XmlNode chartNode, ExcelGroupShape parent);
    private void Init();
    internal virtual void InitSeries(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot, List`1<ExcelChartSerie> list);
    public bool get_Wireframe();
    public void set_Wireframe(bool value);
    internal void SetTypeProperties();
    internal virtual eChartType GetChartType(string name);
    [CompilerGeneratedAttribute]
public ExcelChartSeries`1<ExcelSurfaceChartSerie> get_Series();
}
public class OfficeOpenXml.Drawing.Chart.ExcelSurfaceChartSerie : ExcelChartStandardSerie {
    internal ExcelSurfaceChartSerie(ExcelChart chart, XmlNamespaceManager ns, XmlNode node, bool isPivot);
}
public enum OfficeOpenXml.Drawing.Chart.eYAxisPosition : Enum {
    public int value__;
    public static eYAxisPosition Left;
    public static eYAxisPosition Right;
}
internal class OfficeOpenXml.Drawing.Chart.Style.CrtxTemplateHelper : object {
    internal static void LoadCrtx(Stream stream, XmlDocument& chartXml, XmlDocument& styleXml, XmlDocument& colorsXml, ZipPackagePart& themePart, string fileName);
}
public enum OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod : Enum {
    public int value__;
    public static eChartColorStyleMethod Cycle;
    public static eChartColorStyleMethod WithinLinear;
    public static eChartColorStyleMethod AcrossLinear;
    public static eChartColorStyleMethod WithinLinearReversed;
    public static eChartColorStyleMethod AcrossLinearReversed;
}
public enum OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors : Enum {
    public int value__;
    public static ePresetChartColors ColorfulPalette1;
    public static ePresetChartColors ColorfulPalette2;
    public static ePresetChartColors ColorfulPalette3;
    public static ePresetChartColors ColorfulPalette4;
    public static ePresetChartColors MonochromaticPalette1;
    public static ePresetChartColors MonochromaticPalette2;
    public static ePresetChartColors MonochromaticPalette3;
    public static ePresetChartColors MonochromaticPalette4;
    public static ePresetChartColors MonochromaticPalette5;
    public static ePresetChartColors MonochromaticPalette6;
    public static ePresetChartColors MonochromaticPalette7;
    public static ePresetChartColors MonochromaticPalette8;
    public static ePresetChartColors MonochromaticPalette9;
    public static ePresetChartColors MonochromaticPalette10;
    public static ePresetChartColors MonochromaticPalette11;
    public static ePresetChartColors MonochromaticPalette12;
    public static ePresetChartColors MonochromaticPalette13;
}
public enum OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle : Enum {
    public int value__;
    public static ePresetChartStyle Area3dChartStyle1;
    public static ePresetChartStyle Area3dChartStyle2;
    public static ePresetChartStyle Area3dChartStyle3;
    public static ePresetChartStyle Area3dChartStyle4;
    public static ePresetChartStyle Area3dChartStyle5;
    public static ePresetChartStyle Area3dChartStyle6;
    public static ePresetChartStyle Area3dChartStyle7;
    public static ePresetChartStyle Area3dChartStyle8;
    public static ePresetChartStyle Area3dChartStyle9;
    public static ePresetChartStyle Area3dChartStyle10;
    public static ePresetChartStyle AreaChartStyle1;
    public static ePresetChartStyle AreaChartStyle2;
    public static ePresetChartStyle AreaChartStyle3;
    public static ePresetChartStyle AreaChartStyle4;
    public static ePresetChartStyle AreaChartStyle5;
    public static ePresetChartStyle AreaChartStyle6;
    public static ePresetChartStyle AreaChartStyle7;
    public static ePresetChartStyle AreaChartStyle8;
    public static ePresetChartStyle AreaChartStyle9;
    public static ePresetChartStyle AreaChartStyle10;
    public static ePresetChartStyle AreaChartStyle11;
    public static ePresetChartStyle Bar3dChartStyle1;
    public static ePresetChartStyle Bar3dChartStyle2;
    public static ePresetChartStyle Bar3dChartStyle3;
    public static ePresetChartStyle Bar3dChartStyle4;
    public static ePresetChartStyle Bar3dChartStyle5;
    public static ePresetChartStyle Bar3dChartStyle6;
    public static ePresetChartStyle Bar3dChartStyle7;
    public static ePresetChartStyle Bar3dChartStyle8;
    public static ePresetChartStyle Bar3dChartStyle9;
    public static ePresetChartStyle Bar3dChartStyle10;
    public static ePresetChartStyle Bar3dChartStyle11;
    public static ePresetChartStyle Bar3dChartStyle12;
    public static ePresetChartStyle BarChartStyle1;
    public static ePresetChartStyle BarChartStyle2;
    public static ePresetChartStyle BarChartStyle3;
    public static ePresetChartStyle BarChartStyle4;
    public static ePresetChartStyle BarChartStyle5;
    public static ePresetChartStyle BarChartStyle6;
    public static ePresetChartStyle BarChartStyle7;
    public static ePresetChartStyle BarChartStyle8;
    public static ePresetChartStyle BarChartStyle9;
    public static ePresetChartStyle BarChartStyle10;
    public static ePresetChartStyle BarChartStyle11;
    public static ePresetChartStyle BarChartStyle12;
    public static ePresetChartStyle BarChartStyle13;
    public static ePresetChartStyle BubbleChartStyle1;
    public static ePresetChartStyle BubbleChartStyle2;
    public static ePresetChartStyle Bubble3dChartStyle1;
    public static ePresetChartStyle Bubble3dChartStyle2;
    public static ePresetChartStyle Bubble3dChartStyle3;
    public static ePresetChartStyle Bubble3dChartStyle4;
    public static ePresetChartStyle Bubble3dChartStyle5;
    public static ePresetChartStyle Bubble3dChartStyle6;
    public static ePresetChartStyle Bubble3dChartStyle7;
    public static ePresetChartStyle Bubble3dChartStyle8;
    public static ePresetChartStyle Bubble3dChartStyle9;
    public static ePresetChartStyle BubbleChartStyle3;
    public static ePresetChartStyle BubbleChartStyle4;
    public static ePresetChartStyle BubbleChartStyle5;
    public static ePresetChartStyle BubbleChartStyle6;
    public static ePresetChartStyle BubbleChartStyle7;
    public static ePresetChartStyle BubbleChartStyle8;
    public static ePresetChartStyle BubbleChartStyle9;
    public static ePresetChartStyle BubbleChartStyle10;
    public static ePresetChartStyle BubbleChartStyle11;
    public static ePresetChartStyle Column3dChartStyle1;
    public static ePresetChartStyle Column3dChartStyle2;
    public static ePresetChartStyle Column3dChartStyle3;
    public static ePresetChartStyle Column3dChartStyle4;
    public static ePresetChartStyle Column3dChartStyle5;
    public static ePresetChartStyle Column3dChartStyle6;
    public static ePresetChartStyle Column3dChartStyle7;
    public static ePresetChartStyle Column3dChartStyle8;
    public static ePresetChartStyle Column3dChartStyle9;
    public static ePresetChartStyle Column3dChartStyle10;
    public static ePresetChartStyle Column3dChartStyle11;
    public static ePresetChartStyle Column3dChartStyle12;
    public static ePresetChartStyle ColumnChartStyle1;
    public static ePresetChartStyle ColumnChartStyle2;
    public static ePresetChartStyle ColumnChartStyle3;
    public static ePresetChartStyle ColumnChartStyle4;
    public static ePresetChartStyle ColumnChartStyle5;
    public static ePresetChartStyle ColumnChartStyle6;
    public static ePresetChartStyle ColumnChartStyle7;
    public static ePresetChartStyle ColumnChartStyle8;
    public static ePresetChartStyle ColumnChartStyle9;
    public static ePresetChartStyle ColumnChartStyle10;
    public static ePresetChartStyle ColumnChartStyle11;
    public static ePresetChartStyle ColumnChartStyle12;
    public static ePresetChartStyle ColumnChartStyle13;
    public static ePresetChartStyle ColumnChartStyle14;
    public static ePresetChartStyle ColumnChartStyle15;
    public static ePresetChartStyle ColumnChartStyle16;
    public static ePresetChartStyle ComboChartStyle1;
    public static ePresetChartStyle ComboChartStyle2;
    public static ePresetChartStyle ComboChartStyle3;
    public static ePresetChartStyle ComboChartStyle4;
    public static ePresetChartStyle ComboChartStyle5;
    public static ePresetChartStyle ComboChartStyle6;
    public static ePresetChartStyle ComboChartStyle7;
    public static ePresetChartStyle ComboChartStyle8;
    public static ePresetChartStyle DoughnutChartStyle1;
    public static ePresetChartStyle DoughnutChartStyle2;
    public static ePresetChartStyle DoughnutChartStyle3;
    public static ePresetChartStyle DoughnutChartStyle4;
    public static ePresetChartStyle DoughnutChartStyle5;
    public static ePresetChartStyle DoughnutChartStyle6;
    public static ePresetChartStyle DoughnutChartStyle7;
    public static ePresetChartStyle DoughnutChartStyle8;
    public static ePresetChartStyle DoughnutChartStyle9;
    public static ePresetChartStyle DoughnutChartStyle10;
    public static ePresetChartStyle Line3dChartStyle1;
    public static ePresetChartStyle Line3dChartStyle2;
    public static ePresetChartStyle Line3dChartStyle3;
    public static ePresetChartStyle Line3dChartStyle4;
    public static ePresetChartStyle LineChartStyle1;
    public static ePresetChartStyle LineChartStyle2;
    public static ePresetChartStyle LineChartStyle3;
    public static ePresetChartStyle LineChartStyle4;
    public static ePresetChartStyle LineChartStyle5;
    public static ePresetChartStyle LineChartStyle6;
    public static ePresetChartStyle LineChartStyle7;
    public static ePresetChartStyle LineChartStyle8;
    public static ePresetChartStyle LineChartStyle9;
    public static ePresetChartStyle LineChartStyle10;
    public static ePresetChartStyle LineChartStyle11;
    public static ePresetChartStyle LineChartStyle12;
    public static ePresetChartStyle LineChartStyle13;
    public static ePresetChartStyle LineChartStyle14;
    public static ePresetChartStyle LineChartStyle15;
    public static ePresetChartStyle OfPieChartStyle1;
    public static ePresetChartStyle OfPieChartStyle2;
    public static ePresetChartStyle OfPieChartStyle3;
    public static ePresetChartStyle OfPieChartStyle4;
    public static ePresetChartStyle OfPieChartStyle5;
    public static ePresetChartStyle OfPieChartStyle6;
    public static ePresetChartStyle OfPieChartStyle7;
    public static ePresetChartStyle OfPieChartStyle8;
    public static ePresetChartStyle OfPieChartStyle9;
    public static ePresetChartStyle OfPieChartStyle10;
    public static ePresetChartStyle OfPieChartStyle11;
    public static ePresetChartStyle OfPieChartStyle12;
    public static ePresetChartStyle Pie3dChartStyle1;
    public static ePresetChartStyle Pie3dChartStyle2;
    public static ePresetChartStyle Pie3dChartStyle3;
    public static ePresetChartStyle Pie3dChartStyle4;
    public static ePresetChartStyle Pie3dChartStyle5;
    public static ePresetChartStyle Pie3dChartStyle6;
    public static ePresetChartStyle Pie3dChartStyle7;
    public static ePresetChartStyle Pie3dChartStyle8;
    public static ePresetChartStyle Pie3dChartStyle9;
    public static ePresetChartStyle Pie3dChartStyle10;
    public static ePresetChartStyle PieChartStyle1;
    public static ePresetChartStyle PieChartStyle2;
    public static ePresetChartStyle PieChartStyle3;
    public static ePresetChartStyle PieChartStyle4;
    public static ePresetChartStyle PieChartStyle5;
    public static ePresetChartStyle PieChartStyle6;
    public static ePresetChartStyle PieChartStyle7;
    public static ePresetChartStyle PieChartStyle8;
    public static ePresetChartStyle PieChartStyle9;
    public static ePresetChartStyle PieChartStyle10;
    public static ePresetChartStyle PieChartStyle11;
    public static ePresetChartStyle PieChartStyle12;
    public static ePresetChartStyle RadarChartStyle1;
    public static ePresetChartStyle RadarChartStyle2;
    public static ePresetChartStyle RadarChartStyle3;
    public static ePresetChartStyle RadarChartStyle4;
    public static ePresetChartStyle RadarChartStyle5;
    public static ePresetChartStyle RadarChartStyle6;
    public static ePresetChartStyle RadarChartStyle7;
    public static ePresetChartStyle RadarChartStyle8;
    public static ePresetChartStyle ScatterChartStyle1;
    public static ePresetChartStyle ScatterChartStyle2;
    public static ePresetChartStyle ScatterChartStyle3;
    public static ePresetChartStyle ScatterChartStyle4;
    public static ePresetChartStyle ScatterChartStyle5;
    public static ePresetChartStyle ScatterChartStyle6;
    public static ePresetChartStyle ScatterChartStyle7;
    public static ePresetChartStyle ScatterChartStyle8;
    public static ePresetChartStyle ScatterChartStyle9;
    public static ePresetChartStyle ScatterChartStyle10;
    public static ePresetChartStyle ScatterChartStyle11;
    public static ePresetChartStyle ScatterChartStyle12;
    public static ePresetChartStyle StackedArea3dChartStyle1;
    public static ePresetChartStyle StackedArea3dChartStyle2;
    public static ePresetChartStyle StackedArea3dChartStyle3;
    public static ePresetChartStyle StackedArea3dChartStyle4;
    public static ePresetChartStyle StackedArea3dChartStyle5;
    public static ePresetChartStyle StackedArea3dChartStyle6;
    public static ePresetChartStyle StackedArea3dChartStyle7;
    public static ePresetChartStyle StackedArea3dChartStyle8;
    public static ePresetChartStyle StackedArea3dChartStyle9;
    public static ePresetChartStyle StackedArea3dChartStyle10;
    public static ePresetChartStyle StackedAreaChartStyle1;
    public static ePresetChartStyle StackedAreaChartStyle2;
    public static ePresetChartStyle StackedAreaChartStyle3;
    public static ePresetChartStyle StackedAreaChartStyle4;
    public static ePresetChartStyle StackedAreaChartStyle5;
    public static ePresetChartStyle StackedAreaChartStyle6;
    public static ePresetChartStyle StackedAreaChartStyle7;
    public static ePresetChartStyle StackedAreaChartStyle8;
    public static ePresetChartStyle StackedAreaChartStyle9;
    public static ePresetChartStyle StackedAreaChartStyle10;
    public static ePresetChartStyle StackedAreaChartStyle11;
    public static ePresetChartStyle StackedBar3dChartStyle1;
    public static ePresetChartStyle StackedBar3dChartStyle2;
    public static ePresetChartStyle StackedBar3dChartStyle3;
    public static ePresetChartStyle StackedBar3dChartStyle4;
    public static ePresetChartStyle StackedBar3dChartStyle5;
    public static ePresetChartStyle StackedBar3dChartStyle6;
    public static ePresetChartStyle StackedBar3dChartStyle7;
    public static ePresetChartStyle StackedBar3dChartStyle8;
    public static ePresetChartStyle StackedBarChartStyle1;
    public static ePresetChartStyle StackedBarChartStyle2;
    public static ePresetChartStyle StackedBarChartStyle3;
    public static ePresetChartStyle StackedBarChartStyle4;
    public static ePresetChartStyle StackedBarChartStyle5;
    public static ePresetChartStyle StackedBarChartStyle6;
    public static ePresetChartStyle StackedBarChartStyle7;
    public static ePresetChartStyle StackedBarChartStyle8;
    public static ePresetChartStyle StackedBarChartStyle9;
    public static ePresetChartStyle StackedBarChartStyle10;
    public static ePresetChartStyle StackedBarChartStyle11;
    public static ePresetChartStyle StackedColumn3dChartStyle1;
    public static ePresetChartStyle StackedColumn3dChartStyle2;
    public static ePresetChartStyle StackedColumn3dChartStyle3;
    public static ePresetChartStyle StackedColumn3dChartStyle4;
    public static ePresetChartStyle StackedColumn3dChartStyle5;
    public static ePresetChartStyle StackedColumn3dChartStyle6;
    public static ePresetChartStyle StackedColumn3dChartStyle7;
    public static ePresetChartStyle StackedColumn3dChartStyle8;
    public static ePresetChartStyle StackedColumnChartStyle1;
    public static ePresetChartStyle StackedColumnChartStyle2;
    public static ePresetChartStyle StackedColumnChartStyle3;
    public static ePresetChartStyle StackedColumnChartStyle4;
    public static ePresetChartStyle StackedColumnChartStyle5;
    public static ePresetChartStyle StackedColumnChartStyle6;
    public static ePresetChartStyle StackedColumnChartStyle7;
    public static ePresetChartStyle StackedColumnChartStyle8;
    public static ePresetChartStyle StackedColumnChartStyle9;
    public static ePresetChartStyle StackedColumnChartStyle10;
    public static ePresetChartStyle StackedColumnChartStyle11;
    public static ePresetChartStyle StockChartStyle1;
    public static ePresetChartStyle StockChartStyle2;
    public static ePresetChartStyle StockChartStyle3;
    public static ePresetChartStyle StockChartStyle4;
    public static ePresetChartStyle StockChartStyle5;
    public static ePresetChartStyle StockChartStyle6;
    public static ePresetChartStyle StockChartStyle7;
    public static ePresetChartStyle StockChartStyle8;
    public static ePresetChartStyle StockChartStyle9;
    public static ePresetChartStyle StockChartStyle10;
    public static ePresetChartStyle StockChartStyle11;
    public static ePresetChartStyle SunburstChartStyle1;
    public static ePresetChartStyle SunburstChartStyle2;
    public static ePresetChartStyle SunburstChartStyle3;
    public static ePresetChartStyle SunburstChartStyle4;
    public static ePresetChartStyle SunburstChartStyle5;
    public static ePresetChartStyle SunburstChartStyle6;
    public static ePresetChartStyle SunburstChartStyle7;
    public static ePresetChartStyle SunburstChartStyle8;
    public static ePresetChartStyle TreemapChartStyle1;
    public static ePresetChartStyle TreemapChartStyle2;
    public static ePresetChartStyle TreemapChartStyle3;
    public static ePresetChartStyle TreemapChartStyle4;
    public static ePresetChartStyle TreemapChartStyle5;
    public static ePresetChartStyle TreemapChartStyle6;
    public static ePresetChartStyle TreemapChartStyle7;
    public static ePresetChartStyle TreemapChartStyle8;
    public static ePresetChartStyle TreemapChartStyle9;
    public static ePresetChartStyle BoxWhiskerChartStyle1;
    public static ePresetChartStyle BoxWhiskerChartStyle2;
    public static ePresetChartStyle BoxWhiskerChartStyle3;
    public static ePresetChartStyle BoxWhiskerChartStyle4;
    public static ePresetChartStyle BoxWhiskerChartStyle5;
    public static ePresetChartStyle BoxWhiskerChartStyle6;
    public static ePresetChartStyle HistogramChartStyle1;
    public static ePresetChartStyle HistogramChartStyle2;
    public static ePresetChartStyle HistogramChartStyle3;
    public static ePresetChartStyle HistogramChartStyle4;
    public static ePresetChartStyle HistogramChartStyle5;
    public static ePresetChartStyle HistogramChartStyle6;
    public static ePresetChartStyle WaterfallChartStyle1;
    public static ePresetChartStyle WaterfallChartStyle2;
    public static ePresetChartStyle WaterfallChartStyle3;
    public static ePresetChartStyle WaterfallChartStyle4;
    public static ePresetChartStyle WaterfallChartStyle5;
    public static ePresetChartStyle WaterfallChartStyle6;
    public static ePresetChartStyle WaterfallChartStyle7;
    public static ePresetChartStyle WaterfallChartStyle8;
    public static ePresetChartStyle FunnelChartStyle1;
    public static ePresetChartStyle FunnelChartStyle2;
    public static ePresetChartStyle FunnelChartStyle3;
    public static ePresetChartStyle FunnelChartStyle4;
    public static ePresetChartStyle FunnelChartStyle5;
    public static ePresetChartStyle FunnelChartStyle6;
    public static ePresetChartStyle FunnelChartStyle7;
    public static ePresetChartStyle FunnelChartStyle8;
    public static ePresetChartStyle FunnelChartStyle9;
    public static ePresetChartStyle RegionMapChartStyle1;
    public static ePresetChartStyle RegionMapChartStyle2;
    public static ePresetChartStyle RegionMapChartStyle3;
    public static ePresetChartStyle RegionMapChartStyle4;
}
public enum OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries : Enum {
    public int value__;
    public static ePresetChartStyleMultiSeries Area3dChartStyle1;
    public static ePresetChartStyleMultiSeries Area3dChartStyle2;
    public static ePresetChartStyleMultiSeries Area3dChartStyle3;
    public static ePresetChartStyleMultiSeries Area3dChartStyle4;
    public static ePresetChartStyleMultiSeries Area3dChartStyle5;
    public static ePresetChartStyleMultiSeries Area3dChartStyle6;
    public static ePresetChartStyleMultiSeries Area3dChartStyle7;
    public static ePresetChartStyleMultiSeries Area3dChartStyle8;
    public static ePresetChartStyleMultiSeries Area3dChartStyle9;
    public static ePresetChartStyleMultiSeries AreaChartStyle1;
    public static ePresetChartStyleMultiSeries AreaChartStyle2;
    public static ePresetChartStyleMultiSeries AreaChartStyle3;
    public static ePresetChartStyleMultiSeries AreaChartStyle4;
    public static ePresetChartStyleMultiSeries AreaChartStyle5;
    public static ePresetChartStyleMultiSeries AreaChartStyle6;
    public static ePresetChartStyleMultiSeries AreaChartStyle7;
    public static ePresetChartStyleMultiSeries AreaChartStyle8;
    public static ePresetChartStyleMultiSeries AreaChartStyle9;
    public static ePresetChartStyleMultiSeries AreaChartStyle10;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle1;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle2;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle3;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle4;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle5;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle6;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle7;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle8;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle9;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle10;
    public static ePresetChartStyleMultiSeries Bar3dChartStyle11;
    public static ePresetChartStyleMultiSeries BarChartStyle1;
    public static ePresetChartStyleMultiSeries BarChartStyle2;
    public static ePresetChartStyleMultiSeries BarChartStyle3;
    public static ePresetChartStyleMultiSeries BarChartStyle4;
    public static ePresetChartStyleMultiSeries BarChartStyle5;
    public static ePresetChartStyleMultiSeries BarChartStyle6;
    public static ePresetChartStyleMultiSeries BarChartStyle7;
    public static ePresetChartStyleMultiSeries BarChartStyle8;
    public static ePresetChartStyleMultiSeries BarChartStyle9;
    public static ePresetChartStyleMultiSeries BarChartStyle10;
    public static ePresetChartStyleMultiSeries BarChartStyle11;
    public static ePresetChartStyleMultiSeries BarChartStyle12;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle1;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle2;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle3;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle4;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle5;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle6;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle7;
    public static ePresetChartStyleMultiSeries Bubble3dChartStyle8;
    public static ePresetChartStyleMultiSeries BubbleChartStyle1;
    public static ePresetChartStyleMultiSeries BubbleChartStyle2;
    public static ePresetChartStyleMultiSeries BubbleChartStyle3;
    public static ePresetChartStyleMultiSeries BubbleChartStyle4;
    public static ePresetChartStyleMultiSeries BubbleChartStyle5;
    public static ePresetChartStyleMultiSeries BubbleChartStyle6;
    public static ePresetChartStyleMultiSeries BubbleChartStyle7;
    public static ePresetChartStyleMultiSeries BubbleChartStyle8;
    public static ePresetChartStyleMultiSeries BubbleChartStyle9;
    public static ePresetChartStyleMultiSeries BubbleChartStyle10;
    public static ePresetChartStyleMultiSeries ColumnChartStyle1;
    public static ePresetChartStyleMultiSeries ColumnChartStyle2;
    public static ePresetChartStyleMultiSeries ColumnChartStyle3;
    public static ePresetChartStyleMultiSeries ColumnChartStyle4;
    public static ePresetChartStyleMultiSeries ColumnChartStyle5;
    public static ePresetChartStyleMultiSeries ColumnChartStyle6;
    public static ePresetChartStyleMultiSeries ColumnChartStyle7;
    public static ePresetChartStyleMultiSeries ColumnChartStyle8;
    public static ePresetChartStyleMultiSeries ColumnChartStyle9;
    public static ePresetChartStyleMultiSeries ColumnChartStyle10;
    public static ePresetChartStyleMultiSeries ColumnChartStyle11;
    public static ePresetChartStyleMultiSeries ColumnChartStyle12;
    public static ePresetChartStyleMultiSeries ColumnChartStyle13;
    public static ePresetChartStyleMultiSeries ColumnChartStyle14;
    public static ePresetChartStyleMultiSeries Column3dChartStyle1;
    public static ePresetChartStyleMultiSeries Column3dChartStyle2;
    public static ePresetChartStyleMultiSeries Column3dChartStyle3;
    public static ePresetChartStyleMultiSeries Column3dChartStyle4;
    public static ePresetChartStyleMultiSeries Column3dChartStyle5;
    public static ePresetChartStyleMultiSeries Column3dChartStyle6;
    public static ePresetChartStyleMultiSeries Column3dChartStyle7;
    public static ePresetChartStyleMultiSeries Column3dChartStyle8;
    public static ePresetChartStyleMultiSeries Column3dChartStyle9;
    public static ePresetChartStyleMultiSeries Column3dChartStyle10;
    public static ePresetChartStyleMultiSeries Column3dChartStyle11;
    public static ePresetChartStyleMultiSeries ComboChartStyle1;
    public static ePresetChartStyleMultiSeries ComboChartStyle2;
    public static ePresetChartStyleMultiSeries ComboChartStyle3;
    public static ePresetChartStyleMultiSeries ComboChartStyle4;
    public static ePresetChartStyleMultiSeries ComboChartStyle5;
    public static ePresetChartStyleMultiSeries ComboChartStyle6;
    public static ePresetChartStyleMultiSeries ComboChartStyle7;
    public static ePresetChartStyleMultiSeries ComboChartStyle8;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle1;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle2;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle3;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle4;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle5;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle6;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle7;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle8;
    public static ePresetChartStyleMultiSeries DoughnutChartStyle9;
    public static ePresetChartStyleMultiSeries Line3dChartStyle1;
    public static ePresetChartStyleMultiSeries Line3dChartStyle2;
    public static ePresetChartStyleMultiSeries Line3dChartStyle3;
    public static ePresetChartStyleMultiSeries Line3dChartStyle4;
    public static ePresetChartStyleMultiSeries LineChartStyle1;
    public static ePresetChartStyleMultiSeries LineChartStyle2;
    public static ePresetChartStyleMultiSeries LineChartStyle3;
    public static ePresetChartStyleMultiSeries LineChartStyle4;
    public static ePresetChartStyleMultiSeries LineChartStyle5;
    public static ePresetChartStyleMultiSeries LineChartStyle6;
    public static ePresetChartStyleMultiSeries LineChartStyle7;
    public static ePresetChartStyleMultiSeries LineChartStyle8;
    public static ePresetChartStyleMultiSeries LineChartStyle9;
    public static ePresetChartStyleMultiSeries LineChartStyle10;
    public static ePresetChartStyleMultiSeries LineChartStyle11;
    public static ePresetChartStyleMultiSeries LineChartStyle12;
    public static ePresetChartStyleMultiSeries LineChartStyle13;
    public static ePresetChartStyleMultiSeries OfPieChartStyle1;
    public static ePresetChartStyleMultiSeries OfPieChartStyle2;
    public static ePresetChartStyleMultiSeries OfPieChartStyle3;
    public static ePresetChartStyleMultiSeries OfPieChartStyle4;
    public static ePresetChartStyleMultiSeries OfPieChartStyle5;
    public static ePresetChartStyleMultiSeries OfPieChartStyle6;
    public static ePresetChartStyleMultiSeries OfPieChartStyle7;
    public static ePresetChartStyleMultiSeries OfPieChartStyle8;
    public static ePresetChartStyleMultiSeries OfPieChartStyle9;
    public static ePresetChartStyleMultiSeries OfPieChartStyle10;
    public static ePresetChartStyleMultiSeries OfPieChartStyle11;
    public static ePresetChartStyleMultiSeries OfPieChartStyle12;
    public static ePresetChartStyleMultiSeries PieChartStyle1;
    public static ePresetChartStyleMultiSeries PieChartStyle2;
    public static ePresetChartStyleMultiSeries PieChartStyle3;
    public static ePresetChartStyleMultiSeries PieChartStyle4;
    public static ePresetChartStyleMultiSeries PieChartStyle5;
    public static ePresetChartStyleMultiSeries PieChartStyle6;
    public static ePresetChartStyleMultiSeries PieChartStyle7;
    public static ePresetChartStyleMultiSeries PieChartStyle8;
    public static ePresetChartStyleMultiSeries PieChartStyle9;
    public static ePresetChartStyleMultiSeries PieChartStyle10;
    public static ePresetChartStyleMultiSeries PieChartStyle11;
    public static ePresetChartStyleMultiSeries PieChartStyle12;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle1;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle2;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle3;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle4;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle5;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle6;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle7;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle8;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle9;
    public static ePresetChartStyleMultiSeries Pie3dChartStyle10;
    public static ePresetChartStyleMultiSeries RadarChartStyle1;
    public static ePresetChartStyleMultiSeries RadarChartStyle2;
    public static ePresetChartStyleMultiSeries RadarChartStyle3;
    public static ePresetChartStyleMultiSeries RadarChartStyle4;
    public static ePresetChartStyleMultiSeries RadarChartStyle5;
    public static ePresetChartStyleMultiSeries RadarChartStyle6;
    public static ePresetChartStyleMultiSeries RadarChartStyle7;
    public static ePresetChartStyleMultiSeries RadarChartStyle8;
    public static ePresetChartStyleMultiSeries ScatterChartStyle1;
    public static ePresetChartStyleMultiSeries ScatterChartStyle2;
    public static ePresetChartStyleMultiSeries ScatterChartStyle3;
    public static ePresetChartStyleMultiSeries ScatterChartStyle4;
    public static ePresetChartStyleMultiSeries ScatterChartStyle5;
    public static ePresetChartStyleMultiSeries ScatterChartStyle6;
    public static ePresetChartStyleMultiSeries ScatterChartStyle7;
    public static ePresetChartStyleMultiSeries ScatterChartStyle8;
    public static ePresetChartStyleMultiSeries ScatterChartStyle9;
    public static ePresetChartStyleMultiSeries ScatterChartStyle10;
    public static ePresetChartStyleMultiSeries ScatterChartStyle11;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle1;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle2;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle3;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle4;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle5;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle6;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle7;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle8;
    public static ePresetChartStyleMultiSeries StackedArea3dChartStyle9;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle1;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle2;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle3;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle4;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle5;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle6;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle7;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle8;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle9;
    public static ePresetChartStyleMultiSeries StackedAreaChartStyle10;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle1;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle2;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle3;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle4;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle5;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle6;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle7;
    public static ePresetChartStyleMultiSeries StackedBar3dChartStyle8;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle1;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle2;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle3;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle4;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle5;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle6;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle7;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle8;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle9;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle10;
    public static ePresetChartStyleMultiSeries StackedBarChartStyle11;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle1;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle2;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle3;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle4;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle5;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle6;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle7;
    public static ePresetChartStyleMultiSeries StackedColumn3dChartStyle8;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle1;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle2;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle3;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle4;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle5;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle6;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle7;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle8;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle9;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle10;
    public static ePresetChartStyleMultiSeries StackedColumnChartStyle11;
    public static ePresetChartStyleMultiSeries SunburstChartStyle1;
    public static ePresetChartStyleMultiSeries SunburstChartStyle2;
    public static ePresetChartStyleMultiSeries SunburstChartStyle3;
    public static ePresetChartStyleMultiSeries SunburstChartStyle4;
    public static ePresetChartStyleMultiSeries SunburstChartStyle5;
    public static ePresetChartStyleMultiSeries SunburstChartStyle6;
    public static ePresetChartStyleMultiSeries SunburstChartStyle7;
    public static ePresetChartStyleMultiSeries SunburstChartStyle8;
    public static ePresetChartStyleMultiSeries TreemapChartStyle1;
    public static ePresetChartStyleMultiSeries TreemapChartStyle2;
    public static ePresetChartStyleMultiSeries TreemapChartStyle3;
    public static ePresetChartStyleMultiSeries TreemapChartStyle4;
    public static ePresetChartStyleMultiSeries TreemapChartStyle5;
    public static ePresetChartStyleMultiSeries TreemapChartStyle6;
    public static ePresetChartStyleMultiSeries TreemapChartStyle7;
    public static ePresetChartStyleMultiSeries TreemapChartStyle8;
    public static ePresetChartStyleMultiSeries TreemapChartStyle9;
    public static ePresetChartStyleMultiSeries BoxWhiskerChartStyle1;
    public static ePresetChartStyleMultiSeries BoxWhiskerChartStyle2;
    public static ePresetChartStyleMultiSeries BoxWhiskerChartStyle3;
    public static ePresetChartStyleMultiSeries BoxWhiskerChartStyle4;
    public static ePresetChartStyleMultiSeries BoxWhiskerChartStyle5;
    public static ePresetChartStyleMultiSeries BoxWhiskerChartStyle6;
    public static ePresetChartStyleMultiSeries HistogramChartStyle1;
    public static ePresetChartStyleMultiSeries HistogramChartStyle2;
    public static ePresetChartStyleMultiSeries HistogramChartStyle3;
    public static ePresetChartStyleMultiSeries HistogramChartStyle4;
    public static ePresetChartStyleMultiSeries HistogramChartStyle5;
    public static ePresetChartStyleMultiSeries HistogramChartStyle6;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle1;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle2;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle3;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle4;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle5;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle6;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle7;
    public static ePresetChartStyleMultiSeries WaterfallChartStyle8;
    public static ePresetChartStyleMultiSeries FunnelChartStyle1;
    public static ePresetChartStyleMultiSeries FunnelChartStyle2;
    public static ePresetChartStyleMultiSeries FunnelChartStyle3;
    public static ePresetChartStyleMultiSeries FunnelChartStyle4;
    public static ePresetChartStyleMultiSeries FunnelChartStyle5;
    public static ePresetChartStyleMultiSeries FunnelChartStyle6;
    public static ePresetChartStyleMultiSeries FunnelChartStyle7;
    public static ePresetChartStyleMultiSeries FunnelChartStyle8;
    public static ePresetChartStyleMultiSeries FunnelChartStyle9;
    public static ePresetChartStyleMultiSeries RegionMapChartStyle1;
    public static ePresetChartStyleMultiSeries RegionMapChartStyle2;
    public static ePresetChartStyleMultiSeries RegionMapChartStyle3;
    public static ePresetChartStyleMultiSeries RegionMapChartStyle4;
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager : XmlHelper {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<ExcelDrawingColorManager> <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<ExcelColorTransformCollection> <Variations>k__BackingField;
    public eChartColorStyleMethod Method { get; public set; }
    public ReadOnlyCollection`1<ExcelDrawingColorManager> Colors { get; }
    public ReadOnlyCollection`1<ExcelColorTransformCollection> Variations { get; }
    internal ExcelChartColorsManager(XmlNamespaceManager nameSpaceManager, XmlElement topNode);
    public eChartColorStyleMethod get_Method();
    public void set_Method(eChartColorStyleMethod value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ExcelDrawingColorManager> get_Colors();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ExcelColorTransformCollection> get_Variations();
    internal void Transform(ExcelDrawingColorManager color, int colorIndex, int numberOfItems);
    private ExcelDrawingColorManager GetColor(int colorIndex, int numberOfItems);
    private ExcelColorTransformCollection GetVariation(int colorIndex, int numberOfItems);
    private ExcelColorTransformCollection GetLinearVariation(int colorIndex, int numberOfItems, bool isReversed);
    private int GetVariationStart(double split);
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle : XmlHelper {
    private ExcelChartStyleManager _manager;
    private Dictionary`2<string, HashInfo> _hashes;
    private ExcelChartStyleEntry _axisTitle;
    private ExcelChartStyleEntry _categoryAxis;
    private ExcelChartStyleEntry _chartArea;
    private ExcelChartStyleEntry _dataLabel;
    private ExcelChartStyleEntry _dataLabelCallout;
    private ExcelChartStyleEntry _dataPoint;
    private ExcelChartStyleEntry _dataPoint3D;
    private ExcelChartStyleEntry _dataPointLine;
    private ExcelChartStyleEntry _dataPointMarker;
    private ExcelChartStyleMarkerLayout _dataPointMarkerLayout;
    private ExcelChartStyleEntry _dataPointWireframe;
    private ExcelChartStyleEntry _dataTable;
    private ExcelChartStyleEntry _downBar;
    private ExcelChartStyleEntry _dropLine;
    private ExcelChartStyleEntry _errorBar;
    private ExcelChartStyleEntry _floor;
    private ExcelChartStyleEntry _gridlineMajor;
    private ExcelChartStyleEntry _gridlineMinor;
    private ExcelChartStyleEntry _hiLoLine;
    private ExcelChartStyleEntry _leaderLine;
    private ExcelChartStyleEntry _legend;
    private ExcelChartStyleEntry _plotArea;
    private ExcelChartStyleEntry _plotArea3D;
    private ExcelChartStyleEntry _seriesAxis;
    private ExcelChartStyleEntry _seriesLine;
    private ExcelChartStyleEntry _title;
    private ExcelChartStyleEntry _trendline;
    private ExcelChartStyleEntry _trendlineLabel;
    private ExcelChartStyleEntry _upBar;
    private ExcelChartStyleEntry _valueAxis;
    private ExcelChartStyleEntry _wall;
    public ExcelChartStyleEntry AxisTitle { get; }
    public ExcelChartStyleEntry CategoryAxis { get; }
    public ExcelChartStyleEntry ChartArea { get; }
    public ExcelChartStyleEntry DataLabel { get; }
    public ExcelChartStyleEntry DataLabelCallout { get; }
    public ExcelChartStyleEntry DataPoint { get; }
    public ExcelChartStyleEntry DataPoint3D { get; }
    public ExcelChartStyleEntry DataPointLine { get; }
    public ExcelChartStyleEntry DataPointMarker { get; }
    public ExcelChartStyleMarkerLayout DataPointMarkerLayout { get; }
    public ExcelChartStyleEntry DataPointWireframe { get; }
    public ExcelChartStyleEntry DataTable { get; }
    public ExcelChartStyleEntry DownBar { get; }
    public ExcelChartStyleEntry DropLine { get; }
    public ExcelChartStyleEntry ErrorBar { get; }
    public ExcelChartStyleEntry Floor { get; }
    public ExcelChartStyleEntry GridlineMajor { get; }
    public ExcelChartStyleEntry GridlineMinor { get; }
    public ExcelChartStyleEntry HighLowLine { get; }
    public ExcelChartStyleEntry LeaderLine { get; }
    public ExcelChartStyleEntry Legend { get; }
    public ExcelChartStyleEntry PlotArea { get; }
    public ExcelChartStyleEntry PlotArea3D { get; }
    public ExcelChartStyleEntry SeriesAxis { get; }
    public ExcelChartStyleEntry SeriesLine { get; }
    public ExcelChartStyleEntry Title { get; }
    public ExcelChartStyleEntry Trendline { get; }
    public ExcelChartStyleEntry TrendlineLabel { get; }
    public ExcelChartStyleEntry UpBar { get; }
    public ExcelChartStyleEntry ValueAxis { get; }
    public ExcelChartStyleEntry Wall { get; }
    public int Id { get; internal set; }
    private ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Package { get; }
    private Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Hashes { get; }
    private ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedPart { get; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedUri { get; }
    internal ExcelChartStyle(XmlNamespaceManager nsm, XmlNode topNode, ExcelChartStyleManager manager);
    public ExcelChartStyleEntry get_AxisTitle();
    public ExcelChartStyleEntry get_CategoryAxis();
    public ExcelChartStyleEntry get_ChartArea();
    public ExcelChartStyleEntry get_DataLabel();
    public ExcelChartStyleEntry get_DataLabelCallout();
    public ExcelChartStyleEntry get_DataPoint();
    public ExcelChartStyleEntry get_DataPoint3D();
    public ExcelChartStyleEntry get_DataPointLine();
    public ExcelChartStyleEntry get_DataPointMarker();
    public ExcelChartStyleMarkerLayout get_DataPointMarkerLayout();
    public ExcelChartStyleEntry get_DataPointWireframe();
    public ExcelChartStyleEntry get_DataTable();
    public ExcelChartStyleEntry get_DownBar();
    public ExcelChartStyleEntry get_DropLine();
    public ExcelChartStyleEntry get_ErrorBar();
    public ExcelChartStyleEntry get_Floor();
    public ExcelChartStyleEntry get_GridlineMajor();
    public ExcelChartStyleEntry get_GridlineMinor();
    public ExcelChartStyleEntry get_HighLowLine();
    public ExcelChartStyleEntry get_LeaderLine();
    public ExcelChartStyleEntry get_Legend();
    public ExcelChartStyleEntry get_PlotArea();
    public ExcelChartStyleEntry get_PlotArea3D();
    public ExcelChartStyleEntry get_SeriesAxis();
    public ExcelChartStyleEntry get_SeriesLine();
    public ExcelChartStyleEntry get_Title();
    public ExcelChartStyleEntry get_Trendline();
    public ExcelChartStyleEntry get_TrendlineLabel();
    public ExcelChartStyleEntry get_UpBar();
    public ExcelChartStyleEntry get_ValueAxis();
    public ExcelChartStyleEntry get_Wall();
    public int get_Id();
    internal void set_Id(int value);
    private sealed virtual override ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Package();
    private sealed virtual override Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Hashes();
    private sealed virtual override ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedPart();
    private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedUri();
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColor : XmlHelper {
    public bool Auto { get; }
    public Nullable`1<int> Index { get; }
    internal ExcelChartStyleColor(XmlNamespaceManager nsm, XmlNode topNode);
    public bool get_Auto();
    public Nullable`1<int> get_Index();
    internal void SetValue(bool isAuto, int index);
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager : ExcelDrawingColorManager {
    internal static string NodeName;
    [CompilerGeneratedAttribute]
private ExcelChartStyleColor <StyleColor>k__BackingField;
    public ExcelChartStyleColor StyleColor { get; private set; }
    internal ExcelChartStyleColorManager(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, String[] schemaNodeOrder, Action initMethod);
    public void SetStyleColor(int index);
    public void SetStyleColor(bool isAuto, int index);
    [CompilerGeneratedAttribute]
public ExcelChartStyleColor get_StyleColor();
    [CompilerGeneratedAttribute]
private void set_StyleColor(ExcelChartStyleColor value);
    protected internal void ResetColors(string newNodeName);
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry : XmlHelper {
    private string _fillReferencePath;
    private string _borderReferencePath;
    private string _effectReferencePath;
    private string _fontReferencePath;
    private string _richTextPath;
    private string _fillPath;
    private string _borderPath;
    private string _effectPath;
    private string _scene3DPath;
    private string _sp3DPath;
    private string _defaultTextRunPath;
    private string _defaultTextBodyPath;
    private string _prefix;
    private IPictureRelationDocument _pictureRelationDocument;
    private ExcelChartStyleReference _borderReference;
    private ExcelChartStyleReference _fillReference;
    private ExcelChartStyleReference _effectReference;
    private ExcelChartStyleFontReference _fontReference;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelTextRun _defaultTextRun;
    private ExcelTextBody _defaultTextBody;
    public ExcelChartStyleReference BorderReference { get; }
    public ExcelChartStyleReference FillReference { get; }
    public ExcelChartStyleReference EffectReference { get; }
    public ExcelChartStyleFontReference FontReference { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelTextRun DefaultTextRun { get; }
    public ExcelTextBody DefaultTextBody { get; }
    public eStyleEntryModifier Modifier { get; public set; }
    public bool HasFill { get; }
    public bool HasBorder { get; }
    public bool HasEffect { get; }
    public bool HasThreeD { get; }
    public bool HasTextBody { get; }
    public bool HasRichText { get; }
    public bool HasTextRun { get; }
    internal ExcelChartStyleEntry(XmlNamespaceManager nsm, XmlNode topNode, string path, IPictureRelationDocument pictureRelationDocument);
    public ExcelChartStyleReference get_BorderReference();
    public ExcelChartStyleReference get_FillReference();
    public ExcelChartStyleReference get_EffectReference();
    public ExcelChartStyleFontReference get_FontReference();
    public ExcelDrawingFill get_Fill();
    public ExcelDrawingBorder get_Border();
    public ExcelDrawingEffectStyle get_Effect();
    public ExcelDrawing3D get_ThreeD();
    public ExcelTextRun get_DefaultTextRun();
    public ExcelTextBody get_DefaultTextBody();
    public eStyleEntryModifier get_Modifier();
    public void set_Modifier(eStyleEntryModifier value);
    public bool get_HasFill();
    public bool get_HasBorder();
    public bool get_HasEffect();
    public bool get_HasThreeD();
    public bool get_HasTextBody();
    public bool get_HasRichText();
    public bool get_HasTextRun();
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference : XmlHelper {
    private string _path;
    private ExcelChartStyleColorManager _color;
    public eThemeFontCollectionType Index { get; public set; }
    public ExcelChartStyleColorManager Color { get; }
    public bool HasColor { get; }
    internal ExcelChartStyleFontReference(XmlNamespaceManager nsm, XmlNode topNode, string path);
    public eThemeFontCollectionType get_Index();
    public void set_Index(eThemeFontCollectionType value);
    public ExcelChartStyleColorManager get_Color();
    public bool get_HasColor();
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlString>k__BackingField;
    private XmlDocument _xmlDoc;
    public int Id { get; internal set; }
    public string XmlString { get; public set; }
    public XmlDocument XmlDocument { get; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_XmlString();
    [CompilerGeneratedAttribute]
public void set_XmlString(string value);
    public XmlDocument get_XmlDocument();
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager : XmlHelper {
    internal ExcelChart _chart;
    private ExcelThemeManager _theme;
    private static bool _hasLoadedLibraryFiles;
    public static Dictionary`2<int, ExcelChartStyleLibraryItem> StyleLibrary;
    public static Dictionary`2<int, ExcelChartStyleLibraryItem> ColorsLibrary;
    [CompilerGeneratedAttribute]
private ExcelChartStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelChartColorsManager <ColorsManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelThemeOverride <ThemeOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <StyleXml>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <ColorsXml>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <ThemeOverrideXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <StyleUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <StylePart>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ColorsUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <ColorsPart>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ThemeOverrideUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <ThemeOverridePart>k__BackingField;
    public ExcelChartStyle Style { get; private set; }
    public ExcelChartColorsManager ColorsManager { get; private set; }
    public ExcelThemeOverride ThemeOverride { get; private set; }
    public XmlDocument StyleXml { get; private set; }
    public XmlDocument ColorsXml { get; private set; }
    public XmlDocument ThemeOverrideXml { get; private set; }
    internal Uri StyleUri { get; internal set; }
    internal ZipPackagePart StylePart { get; internal set; }
    internal Uri ColorsUri { get; internal set; }
    internal ZipPackagePart ColorsPart { get; internal set; }
    internal Uri ThemeOverrideUri { get; internal set; }
    internal ZipPackagePart ThemeOverridePart { get; internal set; }
    internal ExcelChartStyleManager(XmlNamespaceManager nameSpaceManager, ExcelChart chart);
    private static ExcelChartStyleManager();
    public void CreateEmptyStyle(eChartStyle fallBackStyle);
    private void CreateColorXml(ZipPackage p);
    public static void LoadStyles();
    public static void LoadStyles(DirectoryInfo directory, bool clearLibrary);
    public static void LoadStyles(FileInfo ecsFile, bool clearLibrary);
    public static void LoadStyles(Stream stream, bool clearLibrary);
    private static void LoadStyles(Stream stream, bool clearLibrary, string filename);
    private static string UncompressEntry(ZipInputStream zipStream, ZipEntry entry);
    public int LoadStyleXml(XmlDocument styleXml, XmlDocument colorXml);
    public void LoadTemplateStyles(FileInfo crtxFile);
    public void LoadTemplateStyles(Stream crtxStream);
    private void LoadTemplateStyles(Stream crtxStream, string name);
    public int LoadStyleXml(XmlDocument styleXml, eChartStyle fallBackStyle, XmlDocument colorsXml);
    internal void LoadStyleAndColorsXml(XmlDocument styleXml, eChartStyle fallBackStyle, XmlDocument colorsXml);
    internal void LoadThemeOverrideXml(ZipPackagePart themePart);
    public void SetChartStyle(ePresetChartStyle style);
    public void SetChartStyle(ePresetChartStyleMultiSeries style);
    public void SetChartStyle(ePresetChartStyle style, ePresetChartColors colors);
    public void SetChartStyle(ePresetChartStyleMultiSeries style, ePresetChartColors colors);
    public void SetChartStyle(int style, Nullable`1<int> colors);
    public void LoadColorXml(XmlDocument colorXml);
    public void ApplyStyles();
    public void ApplyStylesEx();
    private void GenerateDataPoints();
    private void GenerateDataPointsSerie(ExcelChartSerie serie);
    private void ApplyDataLabels();
    private void ApplyDataLabelSerie(ExcelChartSerieDataLabel dataLabel);
    private void ApplyAxis();
    internal void ApplySeries();
    internal ExcelChartStyleEntry GetDataPointStyle(ExcelChart chart);
    internal void ApplyStyle(IDrawingStyleBase chartPart, ExcelChartStyleEntry section, int indexForColor, int numberOfItems, bool applyFill, bool applyBorder);
    private void ApplyStyleFill(IDrawingStyleBase chartPart, ExcelChartStyleEntry section, int indexForColor, int numberOfItems);
    private void ApplyStyleBorder(ExcelDrawingBorder chartBorder, ExcelChartStyleEntry section, int indexForColor, int numberOfItems);
    private void ApplyStyleEffect(ExcelDrawingEffectStyle chartEffect, ExcelChartStyleEntry section, int indexForColor, int numberOfItems);
    private void ApplyStyle3D(IDrawingStyleBase chartThreeD, ExcelChartStyleEntry section, int indexForColor, int numberOfItems);
    private void ApplyStyleFont(ExcelChartStyleEntry section, int indexForColor, IDrawingStyle chartPartWithFont, int numberOfItems);
    private void TransformColorBorder(ExcelDrawingBorder border, ExcelChartStyleColorManager color, int colorIndex, int numberOfItems);
    private void TransformColorFill(ExcelDrawingFill fill, ExcelChartStyleColorManager color, int colorIndex, int numberOfItems);
    private void TransformColorFillBasic(ExcelDrawingFillBasic fill, ExcelChartStyleColorManager color, int colorIndex, int numberOfItems);
    private void TransformColorEffect(ExcelDrawingEffectStyle effect, ExcelChartStyleColorManager color, int colorIndex, int numberOfItems);
    private void TransformColorThreeD(ExcelDrawing3D threeD, ExcelChartStyleColorManager color, int colorIndex, int numberOfItems);
    private void TransformColor(ExcelDrawingColorManager color, ExcelChartStyleColorManager templateColor, int colorIndex, int numberOfItems);
    private int CreateStylePart(ZipPackage p);
    private int CreateColorPart(ZipPackage p);
    private ZipPackageRelationship CreateThemeOverridePart(ZipPackage p, ZipPackagePart partToCopy);
    private void SetRelIdInThemeDoc(XmlDocument themeOverrideXml, string fromRelId, string toRelId);
    private string GetStartStyleXml(int id);
    private void AppendDefaultStyleSection(StringBuilder sb, string section);
    private string GetStartColorXml();
    private int GetIxFromChartUri(string name);
    private void LoadStyleAndColors(ExcelChart chart);
    private ExcelThemeBase GetTheme();
    [CompilerGeneratedAttribute]
public ExcelChartStyle get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(ExcelChartStyle value);
    [CompilerGeneratedAttribute]
public ExcelChartColorsManager get_ColorsManager();
    [CompilerGeneratedAttribute]
private void set_ColorsManager(ExcelChartColorsManager value);
    [CompilerGeneratedAttribute]
public ExcelThemeOverride get_ThemeOverride();
    [CompilerGeneratedAttribute]
private void set_ThemeOverride(ExcelThemeOverride value);
    [CompilerGeneratedAttribute]
public XmlDocument get_StyleXml();
    [CompilerGeneratedAttribute]
private void set_StyleXml(XmlDocument value);
    [CompilerGeneratedAttribute]
public XmlDocument get_ColorsXml();
    [CompilerGeneratedAttribute]
private void set_ColorsXml(XmlDocument value);
    [CompilerGeneratedAttribute]
public XmlDocument get_ThemeOverrideXml();
    [CompilerGeneratedAttribute]
private void set_ThemeOverrideXml(XmlDocument value);
    [CompilerGeneratedAttribute]
internal Uri get_StyleUri();
    [CompilerGeneratedAttribute]
internal void set_StyleUri(Uri value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_StylePart();
    [CompilerGeneratedAttribute]
internal void set_StylePart(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal Uri get_ColorsUri();
    [CompilerGeneratedAttribute]
internal void set_ColorsUri(Uri value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_ColorsPart();
    [CompilerGeneratedAttribute]
internal void set_ColorsPart(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal Uri get_ThemeOverrideUri();
    [CompilerGeneratedAttribute]
internal void set_ThemeOverrideUri(Uri value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_ThemeOverridePart();
    [CompilerGeneratedAttribute]
internal void set_ThemeOverridePart(ZipPackagePart value);
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleMarkerLayout : XmlHelper {
    public eMarkerStyle Style { get; public set; }
    public int Size { get; public set; }
    internal ExcelChartStyleMarkerLayout(XmlNamespaceManager ns, XmlNode topNode);
    public eMarkerStyle get_Style();
    public void set_Style(eMarkerStyle value);
    public int get_Size();
    public void set_Size(int value);
}
public class OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference : XmlHelper {
    private string _path;
    private ExcelChartStyleColorManager _color;
    public int Index { get; public set; }
    public ExcelChartStyleColorManager Color { get; }
    public bool HasColor { get; }
    internal ExcelChartStyleReference(XmlNamespaceManager nsm, XmlNode topNode, string path);
    public int get_Index();
    public void set_Index(int value);
    public ExcelChartStyleColorManager get_Color();
    public bool get_HasColor();
}
internal static class OfficeOpenXml.Drawing.Controls.ControlFactory : object {
    private static Dictionary`2<string, eControlType> _controlTypeMapping;
    private static ControlFactory();
    private static eControlType GetControlType(string input);
    internal static ExcelDrawing GetControl(ExcelDrawings drawings, XmlElement drawNode, ControlInternal control, ExcelGroupShape parent);
    internal static ExcelControl CreateControl(eControlType controlType, ExcelDrawings drawings, XmlElement drawNode, string name);
}
internal class OfficeOpenXml.Drawing.Controls.ControlInternal : XmlHelper {
    private ExcelPosition _from;
    private ExcelPosition _to;
    public string RelationshipId { get; public set; }
    public string Macro { get; internal set; }
    public bool Print { get; public set; }
    public bool Locked { get; public set; }
    public bool AutoPict { get; public set; }
    public bool AutoFill { get; public set; }
    public bool DefaultSize { get; public set; }
    public bool Disabled { get; public set; }
    internal string Name { get; internal set; }
    internal int ShapeId { get; internal set; }
    internal string AlternativeText { get; internal set; }
    public string FormulaRange { get; public set; }
    public string LinkedCell { get; public set; }
    public ExcelPosition From { get; }
    public ExcelPosition To { get; }
    public bool MoveWithCells { get; public set; }
    public bool SizeWithCells { get; public set; }
    internal ControlInternal(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public string get_RelationshipId();
    public void set_RelationshipId(string value);
    public string get_Macro();
    internal void set_Macro(string value);
    public bool get_Print();
    public void set_Print(bool value);
    public bool get_Locked();
    public void set_Locked(bool value);
    public bool get_AutoPict();
    public void set_AutoPict(bool value);
    public bool get_AutoFill();
    public void set_AutoFill(bool value);
    public bool get_DefaultSize();
    public void set_DefaultSize(bool value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_ShapeId();
    internal void set_ShapeId(int value);
    internal string get_AlternativeText();
    internal void set_AlternativeText(string value);
    public string get_FormulaRange();
    public void set_FormulaRange(string value);
    public string get_LinkedCell();
    public void set_LinkedCell(string value);
    public ExcelPosition get_From();
    public ExcelPosition get_To();
    public bool get_MoveWithCells();
    public void set_MoveWithCells(bool value);
    public bool get_SizeWithCells();
    public void set_SizeWithCells(bool value);
    internal void DeleteMe();
}
public enum OfficeOpenXml.Drawing.Controls.eCheckState : Enum {
    public int value__;
    public static eCheckState Unchecked;
    public static eCheckState Checked;
    public static eCheckState Mixed;
}
public enum OfficeOpenXml.Drawing.Controls.eControlType : Enum {
    public int value__;
    public static eControlType Button;
    public static eControlType CheckBox;
    public static eControlType DropDown;
    public static eControlType GroupBox;
    public static eControlType Label;
    public static eControlType ListBox;
    public static eControlType RadioButton;
    public static eControlType ScrollBar;
    public static eControlType SpinButton;
    public static eControlType EditBox;
    public static eControlType Dialog;
}
public enum OfficeOpenXml.Drawing.Controls.eDropStyle : Enum {
    public int value__;
    public static eDropStyle Combo;
    public static eDropStyle ComboEdit;
    public static eDropStyle Simple;
}
internal enum OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl : Enum {
    public int value__;
    public static eHorizontalAlignmentControl Left;
    public static eHorizontalAlignmentControl Center;
    public static eHorizontalAlignmentControl Right;
    public static eHorizontalAlignmentControl Justify;
    public static eHorizontalAlignmentControl Distributed;
}
public enum OfficeOpenXml.Drawing.Controls.eLayoutFlow : Enum {
    public int value__;
    public static eLayoutFlow Horizontal;
    public static eLayoutFlow Vertical;
    public static eLayoutFlow HorizontalIdeographic;
    public static eLayoutFlow VerticalIdeographic;
}
public enum OfficeOpenXml.Drawing.Controls.eMeasurementUnits : Enum {
    public int value__;
    public static eMeasurementUnits Inches;
    public static eMeasurementUnits Centimeters;
    public static eMeasurementUnits Millimeters;
    public static eMeasurementUnits Points;
    public static eMeasurementUnits Picas;
    public static eMeasurementUnits Pixels;
    public static eMeasurementUnits EMUs;
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Drawing.Controls.EnumTranslateExtensions : object {
    [ExtensionAttribute]
internal static eMeasurementUnits TranslateMeasurementUnits(string v);
    [ExtensionAttribute]
internal static string TranslateString(eMeasurementUnits v);
    [ExtensionAttribute]
internal static eLayoutFlow TranslateLayoutFlow(string v);
    [ExtensionAttribute]
internal static string TranslateString(eLayoutFlow v);
    [ExtensionAttribute]
internal static eShapeOrientation TranslateShapeOrientation(string v);
    [ExtensionAttribute]
internal static string TranslateString(eShapeOrientation v);
}
public enum OfficeOpenXml.Drawing.Controls.eReadingOrder : Enum {
    public int value__;
    public static eReadingOrder ContextDependent;
    public static eReadingOrder LeftToRight;
    public static eReadingOrder RightToLeft;
}
public enum OfficeOpenXml.Drawing.Controls.eSelectionType : Enum {
    public int value__;
    public static eSelectionType Single;
    public static eSelectionType Multi;
    public static eSelectionType Extended;
}
public enum OfficeOpenXml.Drawing.Controls.eShapeOrientation : Enum {
    public int value__;
    public static eShapeOrientation Auto;
    public static eShapeOrientation TopToBottom;
    public static eShapeOrientation BottomToTop;
}
public enum OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl : Enum {
    public int value__;
    public static eVerticalAlignmentControl Top;
    public static eVerticalAlignmentControl Center;
    public static eVerticalAlignmentControl Bottom;
    public static eVerticalAlignmentControl Justify;
    public static eVerticalAlignmentControl Distributed;
}
public abstract class OfficeOpenXml.Drawing.Controls.ExcelControl : ExcelDrawing {
    internal ExcelVmlDrawingControl _vml;
    internal XmlHelper _ctrlProp;
    internal XmlHelper _vmlProp;
    internal ControlInternal _control;
    [CompilerGeneratedAttribute]
private XmlDocument <ControlPropertiesXml>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <ControlPropertiesPart>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ControlPropertiesUri>k__BackingField;
    public XmlDocument ControlPropertiesXml { get; private set; }
    internal ZipPackagePart ControlPropertiesPart { get; private set; }
    internal Uri ControlPropertiesUri { get; private set; }
    public eControlType ControlType { get; }
    internal string ControlTypeString { get; }
    internal string LegacySpId { get; internal set; }
    public string Name { get; public set; }
    public string AlternativeText { get; public set; }
    public string Macro { get; public set; }
    public bool Print { get; public set; }
    public bool Locked { get; public set; }
    public bool AutoFill { get; public set; }
    public bool AutoPict { get; public set; }
    public bool DefaultSize { get; public set; }
    public bool Disabled { get; public set; }
    public bool ThreeDEffects { get; public set; }
    public ExcelAddressBase LinkedCell { get; public set; }
    internal ExcelAddressBase FmlaLink { get; internal set; }
    internal ExcelAddressBase FmlaTxbx { get; internal set; }
    internal ExcelAddressBase LinkedGroup { get; internal set; }
    public eDrawingType DrawingType { get; }
    internal ExcelControl(ExcelDrawings drawings, XmlNode drawingNode, ControlInternal control, ZipPackagePart ctrlPropPart, XmlDocument ctrlPropXml, ExcelGroupShape parent);
    internal ExcelControl(ExcelDrawings drawings, XmlNode drawingNode, string name, ExcelGroupShape parent);
    internal string GetControlStartWorksheetXml(string relId);
    private string ControlStartControlPrXml();
    private string ControlStartDrawingXml();
    private string GetFontName();
    private string GetFontSize();
    private string GetDrawingAnchor();
    private static string GetrPr(eControlType controlType);
    private XmlNode GetVmlNode(ExcelVmlDrawingCollection vmlDrawings);
    [CompilerGeneratedAttribute]
public XmlDocument get_ControlPropertiesXml();
    [CompilerGeneratedAttribute]
private void set_ControlPropertiesXml(XmlDocument value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_ControlPropertiesPart();
    [CompilerGeneratedAttribute]
private void set_ControlPropertiesPart(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal Uri get_ControlPropertiesUri();
    [CompilerGeneratedAttribute]
private void set_ControlPropertiesUri(Uri value);
    public abstract virtual eControlType get_ControlType();
    internal string get_ControlTypeString();
    internal string get_LegacySpId();
    internal void set_LegacySpId(string value);
    internal string GetlegacySpIdPath();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal eEditAs GetCellAnchorFromWorksheetXml();
    internal void SetCellAnchor(eEditAs value);
    public string get_AlternativeText();
    public void set_AlternativeText(string value);
    public string get_Macro();
    public void set_Macro(string value);
    internal string GetVmlAnchorValue();
    public virtual bool get_Print();
    public virtual void set_Print(bool value);
    public virtual bool get_Locked();
    public virtual void set_Locked(bool value);
    public bool get_AutoFill();
    public void set_AutoFill(bool value);
    public bool get_AutoPict();
    public void set_AutoPict(bool value);
    public bool get_DefaultSize();
    public void set_DefaultSize(bool value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    public bool get_ThreeDEffects();
    public void set_ThreeDEffects(bool value);
    public ExcelAddressBase get_LinkedCell();
    public void set_LinkedCell(ExcelAddressBase value);
    internal void SetLinkedCellValue(int value);
    internal ExcelAddressBase get_FmlaLink();
    internal void set_FmlaLink(ExcelAddressBase value);
    internal ExcelAddressBase get_FmlaTxbx();
    internal void set_FmlaTxbx(ExcelAddressBase value);
    internal ExcelAddressBase get_LinkedGroup();
    internal void set_LinkedGroup(ExcelAddressBase value);
    public virtual eDrawingType get_DrawingType();
    internal virtual void UpdateXml();
    private void SetPositionAndSizeForControl();
    internal static eEditAs GetControlEditAs(eControlType controlType);
    internal virtual void DeleteMe();
    [CompilerGeneratedAttribute]
private bool <GetVmlNode>b__13_0(ExcelVmlDrawingBase x);
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlButton : ExcelControlWithText {
    private ExcelControlMargin _margin;
    [CompilerGeneratedAttribute]
private eLayoutFlow <LayoutFlow>k__BackingField;
    [CompilerGeneratedAttribute]
private eShapeOrientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private eReadingOrder <ReadingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutomaticSize>k__BackingField;
    private string _textAlignPath;
    public eControlType ControlType { get; }
    public ExcelControlMargin Margin { get; }
    public eLayoutFlow LayoutFlow { get; public set; }
    public eShapeOrientation Orientation { get; public set; }
    public eReadingOrder ReadingOrder { get; public set; }
    public bool AutomaticSize { get; public set; }
    internal eTextAnchoringType TextAnchor { get; internal set; }
    public eTextAlignment TextAlignment { get; public set; }
    internal ExcelControlButton(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlButton(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
    public ExcelControlMargin get_Margin();
    [CompilerGeneratedAttribute]
public eLayoutFlow get_LayoutFlow();
    [CompilerGeneratedAttribute]
public void set_LayoutFlow(eLayoutFlow value);
    [CompilerGeneratedAttribute]
public eShapeOrientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(eShapeOrientation value);
    [CompilerGeneratedAttribute]
public eReadingOrder get_ReadingOrder();
    [CompilerGeneratedAttribute]
public void set_ReadingOrder(eReadingOrder value);
    [CompilerGeneratedAttribute]
public bool get_AutomaticSize();
    [CompilerGeneratedAttribute]
public void set_AutomaticSize(bool value);
    internal eTextAnchoringType get_TextAnchor();
    internal void set_TextAnchor(eTextAnchoringType value);
    public eTextAlignment get_TextAlignment();
    public void set_TextAlignment(eTextAlignment value);
    internal virtual void UpdateXml();
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlCheckBox : ExcelControlWithColorsAndLines {
    public eControlType ControlType { get; }
    public eCheckState Checked { get; public set; }
    internal ExcelControlCheckBox(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlCheckBox(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
    public eCheckState get_Checked();
    public void set_Checked(eCheckState value);
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlDialog : ExcelControl {
    public eControlType ControlType { get; }
    internal ExcelControlDialog(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlDialog(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlDropDown : ExcelControlList {
    public eControlType ControlType { get; }
    public bool Colored { get; public set; }
    public int DropLines { get; public set; }
    public eDropStyle DropStyle { get; public set; }
    public Nullable`1<int> MinimumWidth { get; public set; }
    internal ExcelControlDropDown(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlDropDown(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
    public bool get_Colored();
    public void set_Colored(bool value);
    public int get_DropLines();
    public void set_DropLines(int value);
    public eDropStyle get_DropStyle();
    public void set_DropStyle(eDropStyle value);
    public Nullable`1<int> get_MinimumWidth();
    public void set_MinimumWidth(Nullable`1<int> value);
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlEditBox : ExcelControlWithText {
    public eControlType ControlType { get; }
    internal ExcelControlEditBox(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlEditBox(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlGroupBox : ExcelControlWithText {
    public eControlType ControlType { get; }
    internal ExcelControlGroupBox(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlGroupBox(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlLabel : ExcelControlWithText {
    public eControlType ControlType { get; }
    internal ExcelControlLabel(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlLabel(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
}
public abstract class OfficeOpenXml.Drawing.Controls.ExcelControlList : ExcelControl {
    public ExcelAddressBase InputRange { get; public set; }
    public int SelectedIndex { get; public set; }
    internal int Page { get; internal set; }
    internal ExcelControlList(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlList(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public ExcelAddressBase get_InputRange();
    public void set_InputRange(ExcelAddressBase value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    internal int get_Page();
    internal void set_Page(int value);
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlListBox : ExcelControlList {
    public eControlType ControlType { get; }
    public eSelectionType SelectionType { get; public set; }
    public Int32[] MultiSelection { get; public set; }
    internal ExcelControlListBox(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlListBox(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
    public eSelectionType get_SelectionType();
    public void set_SelectionType(eSelectionType value);
    public Int32[] get_MultiSelection();
    public void set_MultiSelection(Int32[] value);
    internal virtual void UpdateXml();
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlMargin : object {
    private ExcelControlWithText _control;
    private XmlHelper _vmlHelper;
    [CompilerGeneratedAttribute]
private bool <Automatic>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelVmlMeasurementUnit <LeftMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelVmlMeasurementUnit <RightMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelVmlMeasurementUnit <TopMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelVmlMeasurementUnit <BottomMargin>k__BackingField;
    public bool Automatic { get; public set; }
    public ExcelVmlMeasurementUnit LeftMargin { get; }
    public ExcelVmlMeasurementUnit RightMargin { get; }
    public ExcelVmlMeasurementUnit TopMargin { get; }
    public ExcelVmlMeasurementUnit BottomMargin { get; }
    internal ExcelControlMargin(ExcelControlWithText control);
    public void SetValue(double marginValue, eMeasurementUnits unit);
    public void SetUnit(eMeasurementUnits unit);
    internal void UpdateXml();
    [CompilerGeneratedAttribute]
public bool get_Automatic();
    [CompilerGeneratedAttribute]
public void set_Automatic(bool value);
    [CompilerGeneratedAttribute]
public ExcelVmlMeasurementUnit get_LeftMargin();
    [CompilerGeneratedAttribute]
public ExcelVmlMeasurementUnit get_RightMargin();
    [CompilerGeneratedAttribute]
public ExcelVmlMeasurementUnit get_TopMargin();
    [CompilerGeneratedAttribute]
public ExcelVmlMeasurementUnit get_BottomMargin();
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton : ExcelControlWithColorsAndLines {
    public eControlType ControlType { get; }
    public bool Checked { get; public set; }
    public ExcelAddressBase LinkedCell { get; public set; }
    public bool FirstButton { get; public set; }
    internal ExcelControlRadioButton(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    internal ExcelControlRadioButton(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
    public bool get_Checked();
    public void set_Checked(bool value);
    public ExcelAddressBase get_LinkedCell();
    public void set_LinkedCell(ExcelAddressBase value);
    public bool get_FirstButton();
    public void set_FirstButton(bool value);
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar : ExcelControl {
    public eControlType ControlType { get; }
    public bool Horizontal { get; public set; }
    public int Increment { get; public set; }
    public Nullable`1<int> Page { get; public set; }
    public int MinValue { get; public set; }
    public int MaxValue { get; public set; }
    public int Value { get; public set; }
    internal ExcelControlScrollBar(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlScrollBar(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
    public bool get_Horizontal();
    public void set_Horizontal(bool value);
    public int get_Increment();
    public void set_Increment(int value);
    public Nullable`1<int> get_Page();
    public void set_Page(Nullable`1<int> value);
    public int get_MinValue();
    public void set_MinValue(int value);
    public int get_MaxValue();
    public void set_MaxValue(int value);
    public int get_Value();
    public void set_Value(int value);
}
public class OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton : ExcelControl {
    public eControlType ControlType { get; }
    public int Increment { get; public set; }
    public int MinValue { get; public set; }
    public int MaxValue { get; public set; }
    public int Value { get; public set; }
    internal ExcelControlSpinButton(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlSpinButton(ExcelDrawings drawings, XmlNode drawNode, ControlInternal control, ZipPackagePart part, XmlDocument controlPropertiesXml, ExcelGroupShape parent);
    public virtual eControlType get_ControlType();
    public int get_Increment();
    public void set_Increment(int value);
    public int get_MinValue();
    public void set_MinValue(int value);
    public int get_MaxValue();
    public void set_MaxValue(int value);
    public int get_Value();
    public void set_Value(int value);
}
public abstract class OfficeOpenXml.Drawing.Controls.ExcelControlWithColorsAndLines : ExcelControlWithText {
    private ExcelVmlDrawingBorder _border;
    public ExcelVmlDrawingFill Fill { get; }
    public ExcelVmlDrawingBorder Border { get; }
    internal ExcelControlWithColorsAndLines(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    internal ExcelControlWithColorsAndLines(ExcelDrawings drawings, XmlNode drawingNode, ControlInternal control, ZipPackagePart part, XmlDocument ctrlPropXml, ExcelGroupShape parent);
    public ExcelVmlDrawingFill get_Fill();
    public ExcelVmlDrawingBorder get_Border();
    internal virtual void UpdateXml();
}
public abstract class OfficeOpenXml.Drawing.Controls.ExcelControlWithText : ExcelControl {
    private string _paragraphPath;
    private string _lockTextPath;
    private string _textBodyPath;
    private ExcelParagraphCollection _richText;
    private ExcelTextBody _textBody;
    public string Text { get; public set; }
    public ExcelParagraphCollection RichText { get; }
    public bool LockedText { get; public set; }
    public ExcelTextBody TextBody { get; }
    internal ExcelControlWithText(ExcelDrawings drawings, XmlNode drawingNode, ControlInternal control, ZipPackagePart part, XmlDocument ctrlPropXml, ExcelGroupShape parent);
    internal ExcelControlWithText(ExcelDrawings drawings, XmlElement drawNode, string name, ExcelGroupShape parent);
    private void InitPaths();
    public string get_Text();
    public void set_Text(string value);
    public ExcelParagraphCollection get_RichText();
    public bool get_LockedText();
    public void set_LockedText(bool value);
    public ExcelTextBody get_TextBody();
}
public enum OfficeOpenXml.Drawing.eBevelPresetType : Enum {
    public int value__;
    public static eBevelPresetType None;
    public static eBevelPresetType Angle;
    public static eBevelPresetType ArtDeco;
    public static eBevelPresetType Circle;
    public static eBevelPresetType Convex;
    public static eBevelPresetType CoolSlant;
    public static eBevelPresetType Cross;
    public static eBevelPresetType Divot;
    public static eBevelPresetType HardEdge;
    public static eBevelPresetType RelaxedInset;
    public static eBevelPresetType Riblet;
    public static eBevelPresetType Slope;
    public static eBevelPresetType SoftRound;
}
public enum OfficeOpenXml.Drawing.eBlendMode : Enum {
    public int value__;
    public static eBlendMode Over;
    public static eBlendMode Mult;
    public static eBlendMode Screen;
    public static eBlendMode Darken;
    public static eBlendMode Lighten;
}
public enum OfficeOpenXml.Drawing.eCompundLineStyle : Enum {
    public int value__;
    public static eCompundLineStyle Double;
    public static eCompundLineStyle Single;
    public static eCompundLineStyle DoubleThickThin;
    public static eCompundLineStyle DoubleThinThick;
    public static eCompundLineStyle TripleThinThickThin;
}
public enum OfficeOpenXml.Drawing.eDrawingColorType : Enum {
    public int value__;
    public static eDrawingColorType None;
    public static eDrawingColorType RgbPercentage;
    public static eDrawingColorType Rgb;
    public static eDrawingColorType Hsl;
    public static eDrawingColorType System;
    public static eDrawingColorType Scheme;
    public static eDrawingColorType Preset;
    public static eDrawingColorType ChartStyleColor;
}
public enum OfficeOpenXml.Drawing.eDrawingType : Enum {
    public int value__;
    public static eDrawingType Drawing;
    public static eDrawingType Shape;
    public static eDrawingType Picture;
    public static eDrawingType Chart;
    public static eDrawingType Slicer;
    public static eDrawingType Control;
    public static eDrawingType GroupShape;
}
public enum OfficeOpenXml.Drawing.eEditAs : Enum {
    public int value__;
    public static eEditAs Absolute;
    public static eEditAs OneCell;
    public static eEditAs TwoCell;
}
public enum OfficeOpenXml.Drawing.eEndSize : Enum {
    public int value__;
    public static eEndSize Small;
    public static eEndSize Medium;
    public static eEndSize Large;
}
public enum OfficeOpenXml.Drawing.eEndStyle : Enum {
    public int value__;
    public static eEndStyle None;
    public static eEndStyle Triangle;
    public static eEndStyle Stealth;
    public static eEndStyle Diamond;
    public static eEndStyle Oval;
    public static eEndStyle Arrow;
}
public enum OfficeOpenXml.Drawing.eErrorBarDirection : Enum {
    public int value__;
    public static eErrorBarDirection X;
    public static eErrorBarDirection Y;
}
public enum OfficeOpenXml.Drawing.eErrorBarType : Enum {
    public int value__;
    public static eErrorBarType Both;
    public static eErrorBarType Minus;
    public static eErrorBarType Plus;
}
public enum OfficeOpenXml.Drawing.eErrorValueType : Enum {
    public int value__;
    public static eErrorValueType Custom;
    public static eErrorValueType FixedValue;
    public static eErrorValueType Percentage;
    public static eErrorValueType StandardDeviation;
    public static eErrorValueType StandardError;
}
public enum OfficeOpenXml.Drawing.eFillPatternStyle : Enum {
    public int value__;
    public static eFillPatternStyle Pct5;
    public static eFillPatternStyle Pct10;
    public static eFillPatternStyle Pct20;
    public static eFillPatternStyle Pct25;
    public static eFillPatternStyle Pct30;
    public static eFillPatternStyle Pct40;
    public static eFillPatternStyle Pct50;
    public static eFillPatternStyle Pct60;
    public static eFillPatternStyle Pct70;
    public static eFillPatternStyle Pct75;
    public static eFillPatternStyle Pct80;
    public static eFillPatternStyle Pct90;
    public static eFillPatternStyle Horz;
    public static eFillPatternStyle Vert;
    public static eFillPatternStyle LtHorz;
    public static eFillPatternStyle LtVert;
    public static eFillPatternStyle DkHorz;
    public static eFillPatternStyle DkVert;
    public static eFillPatternStyle NarHorz;
    public static eFillPatternStyle NarVert;
    public static eFillPatternStyle DashHorz;
    public static eFillPatternStyle DashVert;
    public static eFillPatternStyle Cross;
    public static eFillPatternStyle DnDiag;
    public static eFillPatternStyle UpDiag;
    public static eFillPatternStyle LtDnDiag;
    public static eFillPatternStyle LtUpDiag;
    public static eFillPatternStyle DkDnDiag;
    public static eFillPatternStyle DkUpDiag;
    public static eFillPatternStyle WdDnDiag;
    public static eFillPatternStyle WdUpDiag;
    public static eFillPatternStyle DashDnDiag;
    public static eFillPatternStyle DashUpDiag;
    public static eFillPatternStyle DiagCross;
    public static eFillPatternStyle SmCheck;
    public static eFillPatternStyle LgCheck;
    public static eFillPatternStyle SmGrid;
    public static eFillPatternStyle LgGrid;
    public static eFillPatternStyle DotGrid;
    public static eFillPatternStyle SmConfetti;
    public static eFillPatternStyle LgConfetti;
    public static eFillPatternStyle HorzBrick;
    public static eFillPatternStyle DiagBrick;
    public static eFillPatternStyle SolidDmnd;
    public static eFillPatternStyle OpenDmnd;
    public static eFillPatternStyle DotDmnd;
    public static eFillPatternStyle Plaid;
    public static eFillPatternStyle Sphere;
    public static eFillPatternStyle Weave;
    public static eFillPatternStyle Divot;
    public static eFillPatternStyle Shingle;
    public static eFillPatternStyle Wave;
    public static eFillPatternStyle Trellis;
    public static eFillPatternStyle ZigZag;
}
public enum OfficeOpenXml.Drawing.eFillStyle : Enum {
    public int value__;
    public static eFillStyle NoFill;
    public static eFillStyle SolidFill;
    public static eFillStyle GradientFill;
    public static eFillStyle PatternFill;
    public static eFillStyle BlipFill;
    public static eFillStyle GroupFill;
}
public enum OfficeOpenXml.Drawing.eFontType : Enum {
    public int value__;
    public static eFontType Latin;
    public static eFontType EastAsian;
    public static eFontType Complex;
    public static eFontType Symbol;
}
public enum OfficeOpenXml.Drawing.eLightRigDirection : Enum {
    public int value__;
    public static eLightRigDirection Bottom;
    public static eLightRigDirection BottomLeft;
    public static eLightRigDirection BottomRight;
    public static eLightRigDirection Left;
    public static eLightRigDirection Right;
    public static eLightRigDirection Top;
    public static eLightRigDirection TopLeft;
    public static eLightRigDirection TopRight;
}
public enum OfficeOpenXml.Drawing.eLineCap : Enum {
    public int value__;
    public static eLineCap Flat;
    public static eLineCap Round;
    public static eLineCap Square;
}
public enum OfficeOpenXml.Drawing.eLineJoin : Enum {
    public int value__;
    public static eLineJoin Bevel;
    public static eLineJoin Round;
    public static eLineJoin Miter;
}
public enum OfficeOpenXml.Drawing.eLineStyle : Enum {
    public int value__;
    public static eLineStyle Dash;
    public static eLineStyle DashDot;
    public static eLineStyle Dot;
    public static eLineStyle LongDash;
    public static eLineStyle LongDashDot;
    public static eLineStyle LongDashDotDot;
    public static eLineStyle Solid;
    public static eLineStyle SystemDash;
    public static eLineStyle SystemDashDot;
    public static eLineStyle SystemDashDotDot;
    public static eLineStyle SystemDot;
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Drawing.EnumTransl : object {
    internal static string FromLineStyle(eLineStyle value);
    internal static eLineStyle ToLineStyle(string text);
    internal static string FromLineCap(eLineCap value);
    internal static eLineCap ToLineCap(string text);
    internal static eCompundLineStyle ToLineCompound(string s);
    internal static string FromLineCompound(eCompundLineStyle v);
    internal static ePenAlignment ToPenAlignment(string s);
    internal static string FromPenAlignment(ePenAlignment v);
    [ExtensionAttribute]
internal static eUnderLineType TranslateUnderline(string text);
    [ExtensionAttribute]
internal static string TranslateUnderlineText(eUnderLineType value);
    [ExtensionAttribute]
internal static eTextAnchoringType TranslateTextAchoring(string text);
    [ExtensionAttribute]
internal static string TranslateTextAchoringText(eTextAnchoringType value);
    [ExtensionAttribute]
internal static eTextVerticalType TranslateTextVertical(string text);
    [ExtensionAttribute]
internal static string TranslateTextVerticalText(eTextVerticalType value);
    [ExtensionAttribute]
internal static eStrikeType TranslateStrikeType(string text);
    [ExtensionAttribute]
internal static string TranslateStrikeTypeText(eStrikeType value);
    [ExtensionAttribute]
internal static eErrorValueType TranslateErrorValueType(string text);
    [ExtensionAttribute]
internal static string ToEnumString(eErrorValueType value);
    [ExtensionAttribute]
internal static eSlicerStyle TranslateSlicerStyle(string value);
}
public enum OfficeOpenXml.Drawing.ePenAlignment : Enum {
    public int value__;
    public static ePenAlignment Center;
    public static ePenAlignment Inset;
}
public enum OfficeOpenXml.Drawing.ePitchFamily : Enum {
    public int value__;
    public static ePitchFamily Default;
    public static ePitchFamily Fixed;
    public static ePitchFamily Variable;
    public static ePitchFamily DefaultRoman;
    public static ePitchFamily FixedRoman;
    public static ePitchFamily VariableRoman;
    public static ePitchFamily DefaultSwiss;
    public static ePitchFamily FixedSwiss;
    public static ePitchFamily VariableSwiss;
}
public enum OfficeOpenXml.Drawing.ePresetCameraType : Enum {
    public int value__;
    public static ePresetCameraType None;
    public static ePresetCameraType IsometricBottomDown;
    public static ePresetCameraType IsometricBottomUp;
    public static ePresetCameraType IsometricLeftDown;
    public static ePresetCameraType IsometricLeftUp;
    public static ePresetCameraType IsometricOffAxis1Left;
    public static ePresetCameraType IsometricOffAxis1Right;
    public static ePresetCameraType IsometricOffAxis1Top;
    public static ePresetCameraType IsometricOffAxis2Left;
    public static ePresetCameraType IsometricOffAxis2Right;
    public static ePresetCameraType IsometricOffAxis2Top;
    public static ePresetCameraType IsometricOffAxis3Bottom;
    public static ePresetCameraType IsometricOffAxis3Left;
    public static ePresetCameraType IsometricOffAxis3Right;
    public static ePresetCameraType IsometricOffAxis4Bottom;
    public static ePresetCameraType IsometricOffAxis4Left;
    public static ePresetCameraType IsometricOffAxis4Right;
    public static ePresetCameraType IsometricRightDown;
    public static ePresetCameraType IsometricRightUp;
    public static ePresetCameraType IsometricTopDown;
    public static ePresetCameraType IsometricTopUp;
    public static ePresetCameraType LegacyObliqueBottom;
    public static ePresetCameraType LegacyObliqueBottomLeft;
    public static ePresetCameraType LegacyObliqueBottomRight;
    public static ePresetCameraType LegacyObliqueFront;
    public static ePresetCameraType LegacyObliqueLeft;
    public static ePresetCameraType LegacyObliqueRight;
    public static ePresetCameraType LegacyObliqueTop;
    public static ePresetCameraType LegacyObliqueTopLeft;
    public static ePresetCameraType LegacyObliqueTopRight;
    public static ePresetCameraType LegacyPerspectiveBottom;
    public static ePresetCameraType LegacyPerspectiveBottomLeft;
    public static ePresetCameraType LegacyPerspectiveBottomRight;
    public static ePresetCameraType LegacyPerspectiveFront;
    public static ePresetCameraType LegacyPerspectiveLeft;
    public static ePresetCameraType LegacyPerspectiveRight;
    public static ePresetCameraType LegacyPerspectiveTop;
    public static ePresetCameraType LegacyPerspectiveTopLeft;
    public static ePresetCameraType LegacyPerspectiveTopRight;
    public static ePresetCameraType ObliqueBottom;
    public static ePresetCameraType ObliqueBottomLeft;
    public static ePresetCameraType ObliqueBottomRight;
    public static ePresetCameraType ObliqueLeft;
    public static ePresetCameraType ObliqueRight;
    public static ePresetCameraType ObliqueTop;
    public static ePresetCameraType ObliqueTopLeft;
    public static ePresetCameraType ObliqueTopRight;
    public static ePresetCameraType OrthographicFront;
    public static ePresetCameraType PerspectiveAbove;
    public static ePresetCameraType PerspectiveAboveLeftFacing;
    public static ePresetCameraType PerspectiveAboveRightFacing;
    public static ePresetCameraType PerspectiveBelow;
    public static ePresetCameraType PerspectiveContrastingLeftFacing;
    public static ePresetCameraType PerspectiveContrastingRightFacing;
    public static ePresetCameraType PerspectiveFront;
    public static ePresetCameraType PerspectiveHeroicExtremeLeftFacing;
    public static ePresetCameraType PerspectiveHeroicExtremeRightFacing;
    public static ePresetCameraType PerspectiveHeroicLeftFacing;
    public static ePresetCameraType PerspectiveHeroicRightFacing;
    public static ePresetCameraType PerspectiveLeft;
    public static ePresetCameraType PerspectiveRelaxed;
    public static ePresetCameraType PerspectiveRelaxedModerately;
    public static ePresetCameraType PerspectiveRight;
}
public enum OfficeOpenXml.Drawing.ePresetColor : Enum {
    public int value__;
    public static ePresetColor AliceBlue;
    public static ePresetColor AntiqueWhite;
    public static ePresetColor Aqua;
    public static ePresetColor Aquamarine;
    public static ePresetColor Azure;
    public static ePresetColor Beige;
    public static ePresetColor Bisque;
    public static ePresetColor Black;
    public static ePresetColor BlanchedAlmond;
    public static ePresetColor Blue;
    public static ePresetColor BlueViolet;
    public static ePresetColor Brown;
    public static ePresetColor BurlyWood;
    public static ePresetColor CadetBlue;
    public static ePresetColor Chartreuse;
    public static ePresetColor Chocolate;
    public static ePresetColor Coral;
    public static ePresetColor CornflowerBlue;
    public static ePresetColor Cornsilk;
    public static ePresetColor Crimson;
    public static ePresetColor Cyan;
    public static ePresetColor DarkBlue;
    public static ePresetColor DarkCyan;
    public static ePresetColor DarkGoldenrod;
    public static ePresetColor DarkGray;
    public static ePresetColor DarkGreen;
    public static ePresetColor DarkKhaki;
    public static ePresetColor DarkMagenta;
    public static ePresetColor DarkOliveGreen;
    public static ePresetColor DarkOrange;
    public static ePresetColor DarkOrchid;
    public static ePresetColor DarkRed;
    public static ePresetColor DarkSalmon;
    public static ePresetColor DarkSeaGreen;
    public static ePresetColor DarkSlateBlue;
    public static ePresetColor DarkSlateGray;
    public static ePresetColor DarkTurquoise;
    public static ePresetColor DarkViolet;
    public static ePresetColor DeepPink;
    public static ePresetColor DeepSkyBlue;
    public static ePresetColor DimGray;
    public static ePresetColor DodgerBlue;
    public static ePresetColor Firebrick;
    public static ePresetColor FloralWhite;
    public static ePresetColor ForestGreen;
    public static ePresetColor Fuchsia;
    public static ePresetColor Gainsboro;
    public static ePresetColor GhostWhite;
    public static ePresetColor Gold;
    public static ePresetColor Goldenrod;
    public static ePresetColor Gray;
    public static ePresetColor Green;
    public static ePresetColor GreenYellow;
    public static ePresetColor Honeydew;
    public static ePresetColor HotPink;
    public static ePresetColor IndianRed;
    public static ePresetColor Indigo;
    public static ePresetColor Ivory;
    public static ePresetColor Khaki;
    public static ePresetColor Lavender;
    public static ePresetColor LavenderBlush;
    public static ePresetColor LawnGreen;
    public static ePresetColor LemonChiffon;
    public static ePresetColor LightBlue;
    public static ePresetColor LightCoral;
    public static ePresetColor LightCyan;
    public static ePresetColor LightGoldenrodYellow;
    public static ePresetColor LightGray;
    public static ePresetColor LightGreen;
    public static ePresetColor LightPink;
    public static ePresetColor LightSalmon;
    public static ePresetColor LightSeaGreen;
    public static ePresetColor LightSkyBlue;
    public static ePresetColor LightSlateGray;
    public static ePresetColor LightSteelBlue;
    public static ePresetColor LightYellow;
    public static ePresetColor Lime;
    public static ePresetColor LimeGreen;
    public static ePresetColor Linen;
    public static ePresetColor Magenta;
    public static ePresetColor Maroon;
    public static ePresetColor MediumAquamarine;
    public static ePresetColor MediumBlue;
    public static ePresetColor MediumOrchid;
    public static ePresetColor MediumPurple;
    public static ePresetColor MediumSeaGreen;
    public static ePresetColor MediumSlateBlue;
    public static ePresetColor MediumSpringGreen;
    public static ePresetColor MediumTurquoise;
    public static ePresetColor MediumVioletRed;
    public static ePresetColor MidnightBlue;
    public static ePresetColor MintCream;
    public static ePresetColor MistyRose;
    public static ePresetColor Moccasin;
    public static ePresetColor NavajoWhite;
    public static ePresetColor Navy;
    public static ePresetColor OldLace;
    public static ePresetColor Olive;
    public static ePresetColor OliveDrab;
    public static ePresetColor Orange;
    public static ePresetColor OrangeRed;
    public static ePresetColor Orchid;
    public static ePresetColor PaleGoldenrod;
    public static ePresetColor PaleGreen;
    public static ePresetColor PaleTurquoise;
    public static ePresetColor PaleVioletRed;
    public static ePresetColor PapayaWhip;
    public static ePresetColor PeachPuff;
    public static ePresetColor Peru;
    public static ePresetColor Pink;
    public static ePresetColor Plum;
    public static ePresetColor PowderBlue;
    public static ePresetColor Purple;
    public static ePresetColor Red;
    public static ePresetColor RosyBrown;
    public static ePresetColor RoyalBlue;
    public static ePresetColor SaddleBrown;
    public static ePresetColor Salmon;
    public static ePresetColor SandyBrown;
    public static ePresetColor SeaGreen;
    public static ePresetColor SeaShell;
    public static ePresetColor Sienna;
    public static ePresetColor Silver;
    public static ePresetColor SkyBlue;
    public static ePresetColor SlateBlue;
    public static ePresetColor SlateGray;
    public static ePresetColor Snow;
    public static ePresetColor SpringGreen;
    public static ePresetColor SteelBlue;
    public static ePresetColor Tan;
    public static ePresetColor Teal;
    public static ePresetColor Thistle;
    public static ePresetColor Tomato;
    public static ePresetColor Turquoise;
    public static ePresetColor Violet;
    public static ePresetColor Wheat;
    public static ePresetColor White;
    public static ePresetColor WhiteSmoke;
    public static ePresetColor Yellow;
    public static ePresetColor YellowGreen;
}
public enum OfficeOpenXml.Drawing.ePresetExcelGlowType : Enum {
    public int value__;
    public static ePresetExcelGlowType None;
    public static ePresetExcelGlowType Accent1_5Pt;
    public static ePresetExcelGlowType Accent1_8Pt;
    public static ePresetExcelGlowType Accent1_11Pt;
    public static ePresetExcelGlowType Accent1_18Pt;
    public static ePresetExcelGlowType Accent2_5Pt;
    public static ePresetExcelGlowType Accent2_8Pt;
    public static ePresetExcelGlowType Accent2_11Pt;
    public static ePresetExcelGlowType Accent2_18Pt;
    public static ePresetExcelGlowType Accent3_5Pt;
    public static ePresetExcelGlowType Accent3_8Pt;
    public static ePresetExcelGlowType Accent3_11Pt;
    public static ePresetExcelGlowType Accent3_18Pt;
    public static ePresetExcelGlowType Accent4_5Pt;
    public static ePresetExcelGlowType Accent4_8Pt;
    public static ePresetExcelGlowType Accent4_11Pt;
    public static ePresetExcelGlowType Accent4_18Pt;
    public static ePresetExcelGlowType Accent5_5Pt;
    public static ePresetExcelGlowType Accent5_8Pt;
    public static ePresetExcelGlowType Accent5_11Pt;
    public static ePresetExcelGlowType Accent5_18Pt;
    public static ePresetExcelGlowType Accent6_5Pt;
    public static ePresetExcelGlowType Accent6_8Pt;
    public static ePresetExcelGlowType Accent6_11Pt;
    public static ePresetExcelGlowType Accent6_18Pt;
}
public enum OfficeOpenXml.Drawing.ePresetExcelReflectionType : Enum {
    public int value__;
    public static ePresetExcelReflectionType None;
    public static ePresetExcelReflectionType TightTouching;
    public static ePresetExcelReflectionType HalfTouching;
    public static ePresetExcelReflectionType FullTouching;
    public static ePresetExcelReflectionType Tight4Pt;
    public static ePresetExcelReflectionType Half4Pt;
    public static ePresetExcelReflectionType Full4Pt;
    public static ePresetExcelReflectionType Tight8Pt;
    public static ePresetExcelReflectionType Half8Pt;
    public static ePresetExcelReflectionType Full8Pt;
}
public enum OfficeOpenXml.Drawing.ePresetExcelShadowType : Enum {
    public int value__;
    public static ePresetExcelShadowType None;
    public static ePresetExcelShadowType InnerTopLeft;
    public static ePresetExcelShadowType InnerTop;
    public static ePresetExcelShadowType InnerTopRight;
    public static ePresetExcelShadowType InnerLeft;
    public static ePresetExcelShadowType InnerCenter;
    public static ePresetExcelShadowType InnerRight;
    public static ePresetExcelShadowType InnerBottomLeft;
    public static ePresetExcelShadowType InnerBottom;
    public static ePresetExcelShadowType InnerBottomRight;
    public static ePresetExcelShadowType OuterTopLeft;
    public static ePresetExcelShadowType OuterTop;
    public static ePresetExcelShadowType OuterTopRight;
    public static ePresetExcelShadowType OuterLeft;
    public static ePresetExcelShadowType OuterCenter;
    public static ePresetExcelShadowType OuterRight;
    public static ePresetExcelShadowType OuterBottomLeft;
    public static ePresetExcelShadowType OuterBottom;
    public static ePresetExcelShadowType OuterBottomRight;
    public static ePresetExcelShadowType PerspectiveUpperLeft;
    public static ePresetExcelShadowType PerspectiveUpperRight;
    public static ePresetExcelShadowType PerspectiveBelow;
    public static ePresetExcelShadowType PerspectiveLowerLeft;
    public static ePresetExcelShadowType PerspectiveLowerRight;
}
public enum OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType : Enum {
    public int value__;
    public static ePresetExcelSoftEdgesType None;
    public static ePresetExcelSoftEdgesType SoftEdge1Pt;
    public static ePresetExcelSoftEdgesType SoftEdge2_5Pt;
    public static ePresetExcelSoftEdgesType SoftEdge5Pt;
    public static ePresetExcelSoftEdgesType SoftEdge10Pt;
    public static ePresetExcelSoftEdgesType SoftEdge25Pt;
    public static ePresetExcelSoftEdgesType SoftEdge50Pt;
}
public enum OfficeOpenXml.Drawing.ePresetMaterialType : Enum {
    public int value__;
    public static ePresetMaterialType Clear;
    public static ePresetMaterialType DkEdge;
    public static ePresetMaterialType Flat;
    public static ePresetMaterialType LegacyMatte;
    public static ePresetMaterialType LegacyMetal;
    public static ePresetMaterialType LegacyPlastic;
    public static ePresetMaterialType LegacyWireframe;
    public static ePresetMaterialType Matte;
    public static ePresetMaterialType Metal;
    public static ePresetMaterialType Plastic;
    public static ePresetMaterialType Powder;
    public static ePresetMaterialType SoftEdge;
    public static ePresetMaterialType Softmetal;
    public static ePresetMaterialType TranslucentPowder;
    public static ePresetMaterialType WarmMatte;
}
public enum OfficeOpenXml.Drawing.ePresetShadowType : Enum {
    public int value__;
    public static ePresetShadowType TopLeftDropShadow;
    public static ePresetShadowType TopRightDropShadow;
    public static ePresetShadowType BackLeftPerspectiveShadow;
    public static ePresetShadowType BackRightPerspectiveShadow;
    public static ePresetShadowType BottomLeftDropShadow;
    public static ePresetShadowType BottomRightDropShadow;
    public static ePresetShadowType FrontLeftPerspectiveShadow;
    public static ePresetShadowType FrontRightPerspectiveShadow;
    public static ePresetShadowType TopLeftSmallDropShadow;
    public static ePresetShadowType TopLeftLargeDropShadow;
    public static ePresetShadowType BackLeftLongPerspectiveShadow;
    public static ePresetShadowType BackRightLongPerspectiveShadow;
    public static ePresetShadowType TopLeftDoubleDropShadow;
    public static ePresetShadowType BottomRightSmallDropShadow;
    public static ePresetShadowType FrontLeftLongPerspectiveShadow;
    public static ePresetShadowType FrontRightLongPerspectiveShadow;
    public static ePresetShadowType OuterBoxShadow3D;
    public static ePresetShadowType InnerBoxShadow3D;
    public static ePresetShadowType BackCenterPerspectiveShadow;
    public static ePresetShadowType FrontBottomShadow;
}
public enum OfficeOpenXml.Drawing.eRectangleAlignment : Enum {
    public int value__;
    public static eRectangleAlignment Bottom;
    public static eRectangleAlignment BottomLeft;
    public static eRectangleAlignment BottomRight;
    public static eRectangleAlignment Center;
    public static eRectangleAlignment Left;
    public static eRectangleAlignment Right;
    public static eRectangleAlignment Top;
    public static eRectangleAlignment TopLeft;
    public static eRectangleAlignment TopRight;
}
public enum OfficeOpenXml.Drawing.eRigPresetType : Enum {
    public int value__;
    public static eRigPresetType None;
    public static eRigPresetType Balanced;
    public static eRigPresetType BrightRoom;
    public static eRigPresetType Chilly;
    public static eRigPresetType Contrasting;
    public static eRigPresetType Flat;
    public static eRigPresetType Flood;
    public static eRigPresetType Freezing;
    public static eRigPresetType Glow;
    public static eRigPresetType Harsh;
    public static eRigPresetType LegacyFlat1;
    public static eRigPresetType LegacyFlat2;
    public static eRigPresetType LegacyFlat3;
    public static eRigPresetType LegacyFlat4;
    public static eRigPresetType LegacyHarsh1;
    public static eRigPresetType LegacyHarsh2;
    public static eRigPresetType LegacyHarsh3;
    public static eRigPresetType LegacyHarsh4;
    public static eRigPresetType LegacyNormal1;
    public static eRigPresetType LegacyNormal2;
    public static eRigPresetType LegacyNormal3;
    public static eRigPresetType LegacyNormal4;
    public static eRigPresetType Morning;
    public static eRigPresetType Soft;
    public static eRigPresetType Sunrise;
    public static eRigPresetType Sunset;
    public static eRigPresetType ThreePt;
    public static eRigPresetType TwoPt;
}
public enum OfficeOpenXml.Drawing.eSchemeColor : Enum {
    public int value__;
    public static eSchemeColor Background1;
    public static eSchemeColor Text1;
    public static eSchemeColor Background2;
    public static eSchemeColor Text2;
    public static eSchemeColor Accent1;
    public static eSchemeColor Accent2;
    public static eSchemeColor Accent3;
    public static eSchemeColor Accent4;
    public static eSchemeColor Accent5;
    public static eSchemeColor Accent6;
    public static eSchemeColor Hyperlink;
    public static eSchemeColor FollowedHyperlink;
    public static eSchemeColor Style;
    public static eSchemeColor Dark1;
    public static eSchemeColor Light1;
    public static eSchemeColor Dark2;
    public static eSchemeColor Light2;
}
public enum OfficeOpenXml.Drawing.eShadePath : Enum {
    public int value__;
    public static eShadePath Linear;
    public static eShadePath Circle;
    public static eShadePath Rectangle;
    public static eShadePath Shape;
}
public enum OfficeOpenXml.Drawing.eShapeConnectorStyle : Enum {
    public int value__;
    public static eShapeConnectorStyle BentConnector2;
    public static eShapeConnectorStyle BentConnector3;
    public static eShapeConnectorStyle BentConnector4;
    public static eShapeConnectorStyle BentConnector5;
    public static eShapeConnectorStyle CurvedConnector2;
    public static eShapeConnectorStyle CurvedConnector3;
    public static eShapeConnectorStyle CurvedConnector4;
    public static eShapeConnectorStyle CurvedConnector5;
    public static eShapeConnectorStyle FlowChartConnector;
    public static eShapeConnectorStyle FlowChartOffpageConnector;
    public static eShapeConnectorStyle StraightConnector1;
}
public enum OfficeOpenXml.Drawing.eShapeStyle : Enum {
    public int value__;
    public static eShapeStyle AccentBorderCallout1;
    public static eShapeStyle AccentBorderCallout2;
    public static eShapeStyle AccentBorderCallout3;
    public static eShapeStyle AccentCallout1;
    public static eShapeStyle AccentCallout2;
    public static eShapeStyle AccentCallout3;
    public static eShapeStyle ActionButtonBackPrevious;
    public static eShapeStyle ActionButtonBeginning;
    public static eShapeStyle ActionButtonBlank;
    public static eShapeStyle ActionButtonDocument;
    public static eShapeStyle ActionButtonEnd;
    public static eShapeStyle ActionButtonForwardNext;
    public static eShapeStyle ActionButtonHelp;
    public static eShapeStyle ActionButtonHome;
    public static eShapeStyle ActionButtonInformation;
    public static eShapeStyle ActionButtonMovie;
    public static eShapeStyle ActionButtonReturn;
    public static eShapeStyle ActionButtonSound;
    public static eShapeStyle Arc;
    public static eShapeStyle BentArrow;
    public static eShapeStyle BentConnector2;
    public static eShapeStyle BentConnector3;
    public static eShapeStyle BentConnector4;
    public static eShapeStyle BentConnector5;
    public static eShapeStyle BentUpArrow;
    public static eShapeStyle Bevel;
    public static eShapeStyle BlockArc;
    public static eShapeStyle BorderCallout1;
    public static eShapeStyle BorderCallout2;
    public static eShapeStyle BorderCallout3;
    public static eShapeStyle BracePair;
    public static eShapeStyle BracketPair;
    public static eShapeStyle Callout1;
    public static eShapeStyle Callout2;
    public static eShapeStyle Callout3;
    public static eShapeStyle Can;
    public static eShapeStyle ChartPlus;
    public static eShapeStyle ChartStar;
    public static eShapeStyle ChartX;
    public static eShapeStyle Chevron;
    public static eShapeStyle Chord;
    public static eShapeStyle CircularArrow;
    public static eShapeStyle Cloud;
    public static eShapeStyle CloudCallout;
    public static eShapeStyle Corner;
    public static eShapeStyle CornerTabs;
    public static eShapeStyle Cube;
    public static eShapeStyle CurvedConnector2;
    public static eShapeStyle CurvedConnector3;
    public static eShapeStyle CurvedConnector4;
    public static eShapeStyle CurvedConnector5;
    public static eShapeStyle CurvedDownArrow;
    public static eShapeStyle CurvedLeftArrow;
    public static eShapeStyle CurvedRightArrow;
    public static eShapeStyle CurvedUpArrow;
    public static eShapeStyle Decagon;
    public static eShapeStyle DiagStripe;
    public static eShapeStyle Diamond;
    public static eShapeStyle Dodecagon;
    public static eShapeStyle Donut;
    public static eShapeStyle DoubleWave;
    public static eShapeStyle DownArrow;
    public static eShapeStyle DownArrowCallout;
    public static eShapeStyle Ellipse;
    public static eShapeStyle EllipseRibbon;
    public static eShapeStyle EllipseRibbon2;
    public static eShapeStyle FlowChartAlternateProcess;
    public static eShapeStyle FlowChartCollate;
    public static eShapeStyle FlowChartConnector;
    public static eShapeStyle FlowChartDecision;
    public static eShapeStyle FlowChartDelay;
    public static eShapeStyle FlowChartDisplay;
    public static eShapeStyle FlowChartDocument;
    public static eShapeStyle FlowChartExtract;
    public static eShapeStyle FlowChartInputOutput;
    public static eShapeStyle FlowChartInternalStorage;
    public static eShapeStyle FlowChartMagneticDisk;
    public static eShapeStyle FlowChartMagneticDrum;
    public static eShapeStyle FlowChartMagneticTape;
    public static eShapeStyle FlowChartManualInput;
    public static eShapeStyle FlowChartManualOperation;
    public static eShapeStyle FlowChartMerge;
    public static eShapeStyle FlowChartMultidocument;
    public static eShapeStyle FlowChartOfflineStorage;
    public static eShapeStyle FlowChartOffpageConnector;
    public static eShapeStyle FlowChartOnlineStorage;
    public static eShapeStyle FlowChartOr;
    public static eShapeStyle FlowChartPredefinedProcess;
    public static eShapeStyle FlowChartPreparation;
    public static eShapeStyle FlowChartProcess;
    public static eShapeStyle FlowChartPunchedCard;
    public static eShapeStyle FlowChartPunchedTape;
    public static eShapeStyle FlowChartSort;
    public static eShapeStyle FlowChartSummingJunction;
    public static eShapeStyle FlowChartTerminator;
    public static eShapeStyle FoldedCorner;
    public static eShapeStyle Frame;
    public static eShapeStyle Funnel;
    public static eShapeStyle Gear6;
    public static eShapeStyle Gear9;
    public static eShapeStyle HalfFrame;
    public static eShapeStyle Heart;
    public static eShapeStyle Heptagon;
    public static eShapeStyle Hexagon;
    public static eShapeStyle HomePlate;
    public static eShapeStyle HorizontalScroll;
    public static eShapeStyle IrregularSeal1;
    public static eShapeStyle IrregularSeal2;
    public static eShapeStyle LeftArrow;
    public static eShapeStyle LeftArrowCallout;
    public static eShapeStyle LeftBrace;
    public static eShapeStyle LeftBracket;
    public static eShapeStyle LeftCircularArrow;
    public static eShapeStyle LeftRightArrow;
    public static eShapeStyle LeftRightArrowCallout;
    public static eShapeStyle LeftRightCircularArrow;
    public static eShapeStyle LeftRightRibbon;
    public static eShapeStyle LeftRightUpArrow;
    public static eShapeStyle LeftUpArrow;
    public static eShapeStyle LightningBolt;
    public static eShapeStyle Line;
    public static eShapeStyle LineInv;
    public static eShapeStyle MathDivide;
    public static eShapeStyle MathEqual;
    public static eShapeStyle MathMinus;
    public static eShapeStyle MathMultiply;
    public static eShapeStyle MathNotEqual;
    public static eShapeStyle MathPlus;
    public static eShapeStyle Moon;
    public static eShapeStyle NonIsoscelesTrapezoid;
    public static eShapeStyle NoSmoking;
    public static eShapeStyle NotchedRightArrow;
    public static eShapeStyle Octagon;
    public static eShapeStyle Parallelogram;
    public static eShapeStyle Pentagon;
    public static eShapeStyle Pie;
    public static eShapeStyle PieWedge;
    public static eShapeStyle Plaque;
    public static eShapeStyle PlaqueTabs;
    public static eShapeStyle Plus;
    public static eShapeStyle QuadArrow;
    public static eShapeStyle QuadArrowCallout;
    public static eShapeStyle Rect;
    public static eShapeStyle Ribbon;
    public static eShapeStyle Ribbon2;
    public static eShapeStyle RightArrow;
    public static eShapeStyle RightArrowCallout;
    public static eShapeStyle RightBrace;
    public static eShapeStyle RightBracket;
    public static eShapeStyle Round1Rect;
    public static eShapeStyle Round2DiagRect;
    public static eShapeStyle Round2SameRect;
    public static eShapeStyle RoundRect;
    public static eShapeStyle RtTriangle;
    public static eShapeStyle SmileyFace;
    public static eShapeStyle Snip1Rect;
    public static eShapeStyle Snip2DiagRect;
    public static eShapeStyle Snip2SameRect;
    public static eShapeStyle SnipRoundRect;
    public static eShapeStyle SquareTabs;
    public static eShapeStyle Star10;
    public static eShapeStyle Star12;
    public static eShapeStyle Star16;
    public static eShapeStyle Star24;
    public static eShapeStyle Star32;
    public static eShapeStyle Star4;
    public static eShapeStyle Star5;
    public static eShapeStyle Star6;
    public static eShapeStyle Star7;
    public static eShapeStyle Star8;
    public static eShapeStyle StraightConnector1;
    public static eShapeStyle StripedRightArrow;
    public static eShapeStyle Sun;
    public static eShapeStyle SwooshArrow;
    public static eShapeStyle Teardrop;
    public static eShapeStyle Trapezoid;
    public static eShapeStyle Triangle;
    public static eShapeStyle UpArrow;
    public static eShapeStyle UpArrowCallout;
    public static eShapeStyle UpDownArrow;
    public static eShapeStyle UpDownArrowCallout;
    public static eShapeStyle UturnArrow;
    public static eShapeStyle Wave;
    public static eShapeStyle WedgeEllipseCallout;
    public static eShapeStyle WedgeRectCallout;
    public static eShapeStyle WedgeRoundRectCallout;
    public static eShapeStyle VerticalScroll;
}
[FlagsAttribute]
public enum OfficeOpenXml.Drawing.eStyleEntryModifier : Enum {
    public int value__;
    public static eStyleEntryModifier AllowNoFillOverride;
    public static eStyleEntryModifier AllowNoLineOverride;
}
public enum OfficeOpenXml.Drawing.eSystemColor : Enum {
    public int value__;
    public static eSystemColor ScrollBar;
    public static eSystemColor Background;
    public static eSystemColor ActiveCaption;
    public static eSystemColor InactiveCaption;
    public static eSystemColor Menu;
    public static eSystemColor Window;
    public static eSystemColor WindowFrame;
    public static eSystemColor MenuText;
    public static eSystemColor WindowText;
    public static eSystemColor CaptionText;
    public static eSystemColor ActiveBorder;
    public static eSystemColor InactiveBorder;
    public static eSystemColor AppWorkspace;
    public static eSystemColor Highlight;
    public static eSystemColor HighlightText;
    public static eSystemColor ButtonFace;
    public static eSystemColor ButtonShadow;
    public static eSystemColor GrayText;
    public static eSystemColor ButtonText;
    public static eSystemColor InactiveCaptionText;
    public static eSystemColor ButtonHighlight;
    public static eSystemColor DarkShadow3d;
    public static eSystemColor Light3d;
    public static eSystemColor InfoText;
    public static eSystemColor InfoBackground;
    public static eSystemColor HotLight;
    public static eSystemColor GradientActiveCaption;
    public static eSystemColor GradientInactiveCaption;
    public static eSystemColor MenuHighlight;
    public static eSystemColor MenuBar;
}
public enum OfficeOpenXml.Drawing.eTextAlignment : Enum {
    public int value__;
    public static eTextAlignment Left;
    public static eTextAlignment Center;
    public static eTextAlignment Right;
    public static eTextAlignment Distributed;
    public static eTextAlignment Justified;
    public static eTextAlignment JustifiedLow;
    public static eTextAlignment ThaiDistributed;
}
public enum OfficeOpenXml.Drawing.eTextAnchoringType : Enum {
    public int value__;
    public static eTextAnchoringType Bottom;
    public static eTextAnchoringType Center;
    public static eTextAnchoringType Distributed;
    public static eTextAnchoringType Justify;
    public static eTextAnchoringType Top;
}
public enum OfficeOpenXml.Drawing.eTextAutofit : Enum {
    public int value__;
    public static eTextAutofit NoAutofit;
    public static eTextAutofit NormalAutofit;
    public static eTextAutofit ShapeAutofit;
}
public enum OfficeOpenXml.Drawing.eTextCapsType : Enum {
    public int value__;
    public static eTextCapsType All;
    public static eTextCapsType None;
    public static eTextCapsType Small;
}
public enum OfficeOpenXml.Drawing.eTextHorizontalOverflow : Enum {
    public int value__;
    public static eTextHorizontalOverflow Clip;
    public static eTextHorizontalOverflow Overflow;
}
public enum OfficeOpenXml.Drawing.eTextVerticalOverflow : Enum {
    public int value__;
    public static eTextVerticalOverflow Clip;
    public static eTextVerticalOverflow Ellipsis;
    public static eTextVerticalOverflow Overflow;
}
public enum OfficeOpenXml.Drawing.eTextVerticalType : Enum {
    public int value__;
    public static eTextVerticalType EastAsianVertical;
    public static eTextVerticalType Horizontal;
    public static eTextVerticalType MongolianVertical;
    public static eTextVerticalType Vertical;
    public static eTextVerticalType Vertical270;
    public static eTextVerticalType WordArtVertical;
    public static eTextVerticalType WordArtVerticalRightToLeft;
}
public enum OfficeOpenXml.Drawing.eTextWrappingType : Enum {
    public int value__;
    public static eTextWrappingType None;
    public static eTextWrappingType Square;
}
public enum OfficeOpenXml.Drawing.eThemeSchemeColor : Enum {
    public int value__;
    public static eThemeSchemeColor Background1;
    public static eThemeSchemeColor Text1;
    public static eThemeSchemeColor Background2;
    public static eThemeSchemeColor Text2;
    public static eThemeSchemeColor Accent1;
    public static eThemeSchemeColor Accent2;
    public static eThemeSchemeColor Accent3;
    public static eThemeSchemeColor Accent4;
    public static eThemeSchemeColor Accent5;
    public static eThemeSchemeColor Accent6;
    public static eThemeSchemeColor Hyperlink;
    public static eThemeSchemeColor FollowedHyperlink;
}
public enum OfficeOpenXml.Drawing.eTileFlipMode : Enum {
    public int value__;
    public static eTileFlipMode None;
    public static eTileFlipMode X;
    public static eTileFlipMode XY;
    public static eTileFlipMode Y;
}
public class OfficeOpenXml.Drawing.ExcelChartAsType : object {
    private ExcelDrawing _drawing;
    public ExcelChart Chart { get; }
    public ExcelAreaChart AreaChart { get; }
    public ExcelBarChart BarChart { get; }
    public ExcelBubbleChart BubbleChart { get; }
    public ExcelDoughnutChart DoughnutChart { get; }
    public ExcelOfPieChart OfPieChart { get; }
    public ExcelPieChart PieChart { get; }
    public ExcelLineChart LineChart { get; }
    public ExcelRadarChart RadarChart { get; }
    public ExcelScatterChart ScatterChart { get; }
    public ExcelStockChart StockChart { get; }
    public ExcelSurfaceChart SurfaceChart { get; }
    public ExcelSunburstChart SunburstChart { get; }
    public ExcelTreemapChart TreemapChart { get; }
    public ExcelBoxWhiskerChart BoxWhiskerChart { get; }
    public ExcelHistogramChart HistogramChart { get; }
    public ExcelFunnelChart FunnelChart { get; }
    public ExcelWaterfallChart WaterfallChart { get; }
    public ExcelRegionMapChart RegionMapChart { get; }
    internal ExcelChartAsType(ExcelDrawing drawing);
    public T Type();
    public ExcelChart get_Chart();
    public ExcelAreaChart get_AreaChart();
    public ExcelBarChart get_BarChart();
    public ExcelBubbleChart get_BubbleChart();
    public ExcelDoughnutChart get_DoughnutChart();
    public ExcelOfPieChart get_OfPieChart();
    public ExcelPieChart get_PieChart();
    public ExcelLineChart get_LineChart();
    public ExcelRadarChart get_RadarChart();
    public ExcelScatterChart get_ScatterChart();
    public ExcelStockChart get_StockChart();
    public ExcelSurfaceChart get_SurfaceChart();
    public ExcelSunburstChart get_SunburstChart();
    public ExcelTreemapChart get_TreemapChart();
    public ExcelBoxWhiskerChart get_BoxWhiskerChart();
    public ExcelHistogramChart get_HistogramChart();
    public ExcelFunnelChart get_FunnelChart();
    public ExcelWaterfallChart get_WaterfallChart();
    public ExcelRegionMapChart get_RegionMapChart();
}
public class OfficeOpenXml.Drawing.ExcelConnectionShape : ExcelShapeBase {
    [CompilerGeneratedAttribute]
private ExcelDrawingConnectionPoint <ConnectionStart>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingConnectionPoint <ConnectionEnd>k__BackingField;
    internal string Id { get; }
    public ExcelDrawingConnectionPoint ConnectionStart { get; private set; }
    public ExcelDrawingConnectionPoint ConnectionEnd { get; private set; }
    public eShapeConnectorStyle Style { get; public set; }
    internal ExcelConnectionShape(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    internal ExcelConnectionShape(ExcelDrawings drawings, XmlNode node, eShapeConnectorStyle style, ExcelShape startShape, ExcelShape endShape);
    private void Init(ExcelDrawings drawings, XmlNode node);
    private string ShapeStartXml();
    internal virtual void DeleteMe();
    internal string get_Id();
    [CompilerGeneratedAttribute]
public ExcelDrawingConnectionPoint get_ConnectionStart();
    [CompilerGeneratedAttribute]
private void set_ConnectionStart(ExcelDrawingConnectionPoint value);
    [CompilerGeneratedAttribute]
public ExcelDrawingConnectionPoint get_ConnectionEnd();
    [CompilerGeneratedAttribute]
private void set_ConnectionEnd(ExcelDrawingConnectionPoint value);
    public eShapeConnectorStyle get_Style();
    public void set_Style(eShapeConnectorStyle value);
}
public class OfficeOpenXml.Drawing.ExcelControlAsType : object {
    private ExcelDrawing _drawing;
    public ExcelControlButton Button { get; }
    public ExcelControlDropDown DropDown { get; }
    public ExcelControlGroupBox GroupBox { get; }
    public ExcelControlLabel Label { get; }
    public ExcelControlListBox ListBox { get; }
    public ExcelControlCheckBox CheckBox { get; }
    public ExcelControlRadioButton RadioButton { get; }
    public ExcelControlScrollBar ScrollBar { get; }
    public ExcelControlSpinButton SpinButton { get; }
    internal ExcelControlAsType(ExcelDrawing drawing);
    public T Type();
    public ExcelControlButton get_Button();
    public ExcelControlDropDown get_DropDown();
    public ExcelControlGroupBox get_GroupBox();
    public ExcelControlLabel get_Label();
    public ExcelControlListBox get_ListBox();
    public ExcelControlCheckBox get_CheckBox();
    public ExcelControlRadioButton get_RadioButton();
    public ExcelControlScrollBar get_ScrollBar();
    public ExcelControlSpinButton get_SpinButton();
}
public class OfficeOpenXml.Drawing.ExcelDrawing : XmlHelper {
    internal ExcelDrawings _drawings;
    internal ExcelGroupShape _parent;
    internal string _topPath;
    internal string _nvPrPath;
    internal string _hyperLinkPath;
    internal string _topPathUngrouped;
    internal string _nvPrPathUngrouped;
    internal int _id;
    internal static float STANDARD_DPI;
    public static int EMU_PER_PIXEL;
    public static int EMU_PER_POINT;
    public static int EMU_PER_CM;
    public static int EMU_PER_MM;
    public static int EMU_PER_US_INCH;
    public static int EMU_PER_PICA;
    internal double _width;
    internal double _height;
    internal double _top;
    internal double _left;
    internal static String[] _schemaNodeOrderSpPr;
    internal bool _doNotAdjust;
    private static string lockedPath;
    private static string printPath;
    [CompilerGeneratedAttribute]
private ExcelPosition <From>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingCoordinate <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPosition <To>k__BackingField;
    private Uri _hyperLink;
    private ExcelDrawingAsType _as;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <HypRel>k__BackingField;
    [CompilerGeneratedAttribute]
private eEditAs <CellAnchor>k__BackingField;
    public eDrawingType DrawingType { get; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public eEditAs EditAs { get; public set; }
    public bool Locked { get; public set; }
    public bool Print { get; public set; }
    public ExcelPosition From { get; private set; }
    public ExcelDrawingCoordinate Position { get; private set; }
    public ExcelDrawingSize Size { get; private set; }
    public ExcelPosition To { get; private set; }
    public Uri Hyperlink { get; public set; }
    public ExcelDrawingAsType As { get; }
    internal ZipPackageRelationship HypRel { get; internal set; }
    internal int Id { get; }
    public eEditAs CellAnchor { get; protected set; }
    public ExcelGroupShape ParentGroup { get; }
    internal ExcelDrawing(ExcelDrawings drawings, XmlNode node, string topPath, string nvPrPath, ExcelGroupShape parent);
    private static ExcelDrawing();
    internal virtual void AdjustXPathsForGrouping(bool group);
    internal void SetGroupChild(XmlNode offNode, XmlNode extNode);
    private void SetPositionProperties(ExcelDrawings drawings, XmlNode node);
    private void SetPositionPropertiesTopDrawing(ExcelDrawings drawings, XmlNode node);
    private XmlNode GetXFrameNode(XmlNode node, string child);
    internal bool IsWithinColumnRange(int colFrom, int colTo);
    internal bool IsWithinRowRange(int rowFrom, int rowTo);
    internal static eEditAs GetAnchorFromName(string topElementName);
    public virtual eDrawingType get_DrawingType();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public eEditAs get_EditAs();
    public void set_EditAs(eEditAs value);
    public virtual bool get_Locked();
    public virtual void set_Locked(bool value);
    public virtual bool get_Print();
    public virtual void set_Print(bool value);
    [CompilerGeneratedAttribute]
public ExcelPosition get_From();
    [CompilerGeneratedAttribute]
private void set_From(ExcelPosition value);
    [CompilerGeneratedAttribute]
public ExcelDrawingCoordinate get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(ExcelDrawingCoordinate value);
    [CompilerGeneratedAttribute]
public ExcelDrawingSize get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(ExcelDrawingSize value);
    [CompilerGeneratedAttribute]
public ExcelPosition get_To();
    [CompilerGeneratedAttribute]
private void set_To(ExcelPosition value);
    public Uri get_Hyperlink();
    public void set_Hyperlink(Uri value);
    public ExcelDrawingAsType get_As();
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_HypRel();
    [CompilerGeneratedAttribute]
internal void set_HypRel(ZipPackageRelationship value);
    internal static ExcelDrawing GetDrawing(ExcelDrawings drawings, XmlNode node);
    internal static ExcelDrawing GetDrawingFromNode(ExcelDrawings drawings, XmlNode node, XmlElement drawNode, ExcelGroupShape parent);
    private static ExcelDrawing GetShapeOrControl(ExcelDrawings drawings, XmlNode node, XmlElement drawNode, ExcelGroupShape parent);
    private static int GetControlShapeId(XmlElement drawNode, XmlNamespaceManager nameSpaceManager);
    internal int get_Id();
    internal void GetFromBounds(Int32& fromRow, Int32& fromRowOff, Int32& fromCol, Int32& fromColOff);
    internal void GetToBounds(Int32& toRow, Int32& toRowOff, Int32& toCol, Int32& toColOff);
    internal int GetPixelLeft();
    internal int GetPixelTop();
    internal double GetPixelWidth();
    internal double GetPixelHeight();
    internal void SetPixelTop(double pixels);
    internal void CalcRowFromPixelTop(double pixels, Int32& row, Int32& rowOff);
    internal void SetPixelLeft(double pixels);
    internal void CalcColFromPixelLeft(double pixels, Int32& column, Int32& columnOff);
    internal void SetPixelHeight(double pixels);
    internal void GetToRowFromPixels(double pixels, Int32& toRow, Int32& rowOff, int fromRow, int fromRowOff);
    internal void SetPixelWidth(double pixels);
    internal void GetToColumnFromPixels(double pixels, Int32& col, Int32& colOff, int fromColumn, int fromColumnOff);
    public void SetPosition(int PixelTop, int PixelLeft);
    internal void SetPosition(int PixelTop, int PixelLeft, bool adjustChildren);
    [CompilerGeneratedAttribute]
public eEditAs get_CellAnchor();
    [CompilerGeneratedAttribute]
protected void set_CellAnchor(eEditAs value);
    public void ChangeCellAnchor(eEditAs type, int PixelTop, int PixelLeft, int width, int height);
    public void ChangeCellAnchor(eEditAs type);
    private void ChangeCellAnchorTypeInternal(eEditAs type);
    internal void SetCellAnchorFromNode();
    internal virtual void CellAnchorChanged();
    private void CleanupPositionXml();
    public void SetPosition(int Row, int RowOffsetPixels, int Column, int ColumnOffsetPixels);
    public virtual void SetSize(int Percent);
    public void SetSize(int PixelWidth, int PixelHeight);
    public void SendToBack();
    public void BringToFront();
    public ExcelGroupShape Group(ExcelDrawing[] drawing);
    internal XmlElement GetFrmxNode(XmlNode node);
    public void UnGroup(bool ungroupThisItemOnly);
    public ExcelGroupShape get_ParentGroup();
    internal virtual void DeleteMe();
    public virtual void Dispose();
    internal void GetPositionSize();
    public void AdjustPositionAndSize();
    internal void UpdatePositionAndSizeXml();
    internal XmlElement CreateShapeNode();
    internal XmlElement CreateClientData();
    public void Copy(ExcelWorksheet worksheet, int row, int col, int rowOffset, int colOffset);
    private XmlNode CopyGroupShape(ExcelWorksheet worksheet);
    private void CopyGroupShape(ExcelWorksheet targetWorksheet, ExcelDrawing sourceDrawing, XmlNode targetDrawNode);
    private XmlNode CopySlicer(ExcelWorksheet worksheet, bool isGroupShape, XmlNode groupDrawNode);
    private XmlNode CopyControl(ExcelWorksheet worksheet, int row, int col, int rowOffset, int colOffset, bool isGroupShape, XmlNode groupDrawNode);
    private XmlNode CopyChart(ExcelWorksheet worksheet, bool isGroupShape, XmlNode groupDrawNode);
    private XmlNode CopyPicture(ExcelWorksheet worksheet, bool isGroupShape, XmlNode groupDrawNode);
    private XmlNode CopyShape(ExcelWorksheet worksheet, bool isGroupShape, XmlNode groupDrawNode);
}
public class OfficeOpenXml.Drawing.ExcelDrawingAsType : object {
    private ExcelDrawing _drawing;
    private ExcelChartAsType _chartAsType;
    private ExcelSlicerAsType _slicerAsType;
    private ExcelControlAsType _controlAsType;
    public ExcelShape Shape { get; }
    public ExcelPicture Picture { get; }
    public ExcelChartAsType Chart { get; }
    public ExcelSlicerAsType Slicer { get; }
    public ExcelControlAsType Control { get; }
    internal ExcelDrawingAsType(ExcelDrawing drawing);
    public T Type();
    public ExcelShape get_Shape();
    public ExcelPicture get_Picture();
    public ExcelChartAsType get_Chart();
    public ExcelSlicerAsType get_Slicer();
    public ExcelControlAsType get_Control();
}
public class OfficeOpenXml.Drawing.ExcelDrawingBorder : XmlHelper {
    private string _linePath;
    private IPictureRelationDocument _pictureRelationDocument;
    private bool isSpInit;
    private ExcelDrawingFillBasic _fill;
    private string _lineStylePath;
    private string _compoundLineTypePath;
    private string _alignmentPath;
    private string _lineCapPath;
    private string _lineWidth;
    private string _bevelPath;
    private string _roundPath;
    private string _miterPath;
    private string _miterJoinLimitPath;
    private string _headEndPath;
    private ExcelDrawingLineEnd _headEnd;
    private string _tailEndPath;
    private ExcelDrawingLineEnd _tailEnd;
    public ExcelDrawingFillBasic Fill { get; }
    public Nullable`1<eLineStyle> LineStyle { get; public set; }
    public eCompundLineStyle CompoundLineStyle { get; public set; }
    public ePenAlignment Alignment { get; public set; }
    public eLineCap LineCap { get; public set; }
    public double Width { get; public set; }
    public Nullable`1<eLineJoin> Join { get; public set; }
    public Nullable`1<double> MiterJoinLimit { get; public set; }
    public ExcelDrawingLineEnd HeadEnd { get; }
    public ExcelDrawingLineEnd TailEnd { get; }
    internal XmlElement LineElement { get; }
    internal ExcelDrawingBorder(IPictureRelationDocument pictureRelationDocument, XmlNamespaceManager nameSpaceManager, XmlNode topNode, string linePath, String[] schemaNodeOrder);
    public ExcelDrawingFillBasic get_Fill();
    public Nullable`1<eLineStyle> get_LineStyle();
    public void set_LineStyle(Nullable`1<eLineStyle> value);
    private void InitSpPr();
    public eCompundLineStyle get_CompoundLineStyle();
    public void set_CompoundLineStyle(eCompundLineStyle value);
    public ePenAlignment get_Alignment();
    public void set_Alignment(ePenAlignment value);
    public eLineCap get_LineCap();
    public void set_LineCap(eLineCap value);
    public double get_Width();
    public void set_Width(double value);
    public Nullable`1<eLineJoin> get_Join();
    public void set_Join(Nullable`1<eLineJoin> value);
    public Nullable`1<double> get_MiterJoinLimit();
    public void set_MiterJoinLimit(Nullable`1<double> value);
    public ExcelDrawingLineEnd get_HeadEnd();
    public ExcelDrawingLineEnd get_TailEnd();
    internal XmlElement get_LineElement();
    internal void SetFromXml(XmlElement copyFromLineElement);
}
public class OfficeOpenXml.Drawing.ExcelDrawingConnectionPoint : XmlHelper {
    private ExcelDrawings _drawings;
    private string _path;
    private ExcelShape _shape;
    public int Index { get; public set; }
    public ExcelShape Shape { get; public set; }
    internal ExcelDrawingConnectionPoint(ExcelDrawings drawings, XmlNode topNode, string elementName, String[] schemaNodeOrder);
    public int get_Index();
    public void set_Index(int value);
    public ExcelShape get_Shape();
    public void set_Shape(ExcelShape value);
    private void SetIndex(int value);
}
public class OfficeOpenXml.Drawing.ExcelDrawingCoordinate : XmlHelper {
    private SetWidthCallback _setWidthCallback;
    private int _x;
    private int _y;
    private static string xPath;
    private static string yPath;
    public int X { get; public set; }
    public int Y { get; public set; }
    internal ExcelDrawingCoordinate(XmlNamespaceManager ns, XmlNode node, SetWidthCallback setWidthCallback);
    private void Load();
    public void UpdateXml();
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
}
public class OfficeOpenXml.Drawing.ExcelDrawingFill : ExcelDrawingFillBasic {
    private IPictureRelationDocument _pictureRelationDocument;
    private ExcelDrawingPatternFill _patternFill;
    private ExcelDrawingBlipFill _blipFill;
    public ExcelDrawingPatternFill PatternFill { get; }
    public ExcelDrawingBlipFill BlipFill { get; }
    internal ExcelDrawingFill(IPictureRelationDocument pictureRelationDocument, XmlNamespaceManager nameSpaceManager, XmlNode topNode, string fillPath, String[] schemaNodeOrder, Action initXml);
    protected internal virtual void LoadFill();
    internal virtual void SetFillProperty();
    internal virtual void BeforeSave();
    public ExcelDrawingPatternFill get_PatternFill();
    public ExcelDrawingBlipFill get_BlipFill();
    public void Dispose();
}
public class OfficeOpenXml.Drawing.ExcelDrawingFillBasic : XmlHelper {
    protected internal string _fillPath;
    protected internal XmlNode _fillNode;
    protected internal ExcelDrawing _drawing;
    protected internal XmlNode _fillTypeNode;
    internal Action _initXml;
    private bool isSpInit;
    internal Nullable`1<eFillStyle> _style;
    private static string ColorPath;
    private ExcelDrawingSolidFill _solidFill;
    private ExcelDrawingGradientFill _gradientFill;
    public eFillStyle Style { get; public set; }
    public Color Color { get; public set; }
    public ExcelDrawingSolidFill SolidFill { get; }
    public ExcelDrawingGradientFill GradientFill { get; }
    public int Transparancy { get; public set; }
    internal ExcelDrawingFillBasic(ExcelPackage pck, XmlNamespaceManager nameSpaceManager, XmlNode topNode, string fillPath, String[] schemaNodeOrderBefore, bool doLoad, Action initXml);
    internal void SetTopNode(XmlNode topNode);
    private void SetFillNodes(XmlNode topNode);
    internal virtual void BeforeSave();
    protected internal virtual void LoadFill();
    internal void SetFromXml(ExcelDrawingFill fill);
    private void CreateImageRelation(ExcelDrawingFill fill, XmlElement copyFromFillElement);
    internal string GetFromXml();
    internal virtual void SetFillProperty();
    private void InitSpPr(eFillStyle style);
    public eFillStyle get_Style();
    public void set_Style(eFillStyle value);
    public Color get_Color();
    public void set_Color(Color value);
    public ExcelDrawingSolidFill get_SolidFill();
    public ExcelDrawingGradientFill get_GradientFill();
    public int get_Transparancy();
    public void set_Transparancy(int value);
    private void CreateFillTopNode(eFillStyle value);
    internal static eFillStyle GetStyleEnum(string name);
    internal static string GetStyleText(eFillStyle style);
    public sealed virtual void Dispose();
    internal void UpdateFillTypeNode();
}
public class OfficeOpenXml.Drawing.ExcelDrawingLineEnd : XmlHelper {
    private string _linePath;
    private Action _init;
    private string _stylePath;
    private string _widthPath;
    private string _heightPath;
    public Nullable`1<eEndStyle> Style { get; public set; }
    public Nullable`1<eEndSize> Width { get; public set; }
    public Nullable`1<eEndSize> Height { get; public set; }
    internal ExcelDrawingLineEnd(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string linePath, Action init);
    public Nullable`1<eEndStyle> get_Style();
    public void set_Style(Nullable`1<eEndStyle> value);
    public Nullable`1<eEndSize> get_Width();
    public void set_Width(Nullable`1<eEndSize> value);
    public Nullable`1<eEndSize> get_Height();
    public void set_Height(Nullable`1<eEndSize> value);
    private string TranslateEndStyleText(eEndStyle value);
    private Nullable`1<eEndStyle> TranslateEndStyle(string text);
    private string GetCreateLinePath(bool doCreate);
    private string TranslateEndSizeText(eEndSize value);
    private Nullable`1<eEndSize> TranslateEndSize(string text);
}
public class OfficeOpenXml.Drawing.ExcelDrawingPoint3D : XmlHelper {
    private string _xPath;
    private string _yPath;
    private string _zPath;
    private Action`1<bool> _initParent;
    private bool isInit;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Z { get; public set; }
    internal ExcelDrawingPoint3D(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path, string prefix, Action`1<bool> initParent);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Z();
    public void set_Z(double value);
    internal void InitXml();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.ExcelDrawings : object {
    private XmlDocument _drawingsXml;
    internal Dictionary`2<string, int> _drawingNames;
    internal List`1<ExcelDrawing> _drawingsList;
    private Dictionary`2<string, HashInfo> _hashes;
    internal ExcelPackage _package;
    internal ZipPackageRelationship _drawingRelation;
    internal List`1<string> _seriesTemplateXml;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <NameSpaceManager>k__BackingField;
    private ZipPackagePart _part;
    private Uri _uriDrawing;
    internal int _nextChartStyleId;
    internal ExcelWorksheet Worksheet { get; internal set; }
    public XmlDocument DrawingXml { get; }
    internal XmlNamespaceManager NameSpaceManager { get; private set; }
    public ExcelDrawing Item { get; }
    public ExcelDrawing Item { get; }
    public int Count { get; }
    internal ZipPackagePart Part { get; }
    internal Uri UriDrawing { get; }
    private ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Package { get; }
    private Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Hashes { get; }
    private ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedPart { get; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedUri { get; }
    internal ExcelDrawings(ExcelPackage xlPackage, ExcelWorksheet sheet);
    [CompilerGeneratedAttribute]
internal ExcelWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
internal void set_Worksheet(ExcelWorksheet value);
    public XmlDocument get_DrawingXml();
    private void AddDrawings();
    internal void AddDrawingInternal(ExcelDrawing dr);
    internal string GetUniqueDrawingName(string name);
    private void CreateNSM();
    [CompilerGeneratedAttribute]
internal XmlNamespaceManager get_NameSpaceManager();
    [CompilerGeneratedAttribute]
private void set_NameSpaceManager(XmlNamespaceManager value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<ExcelDrawing> System.Collections.Generic.IEnumerable<OfficeOpenXml.Drawing.ExcelDrawing>.GetEnumerator();
    public ExcelDrawing get_Item(int PositionID);
    public ExcelDrawing get_Item(string Name);
    public int get_Count();
    internal ZipPackagePart get_Part();
    internal Uri get_UriDrawing();
    private sealed virtual override ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Package();
    private sealed virtual override Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Hashes();
    private sealed virtual override ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedPart();
    private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedUri();
    public ExcelChart AddChart(string Name, eChartType ChartType, ExcelPivotTable PivotTableSource, eEditAs DrawingType);
    internal ExcelChart AddAllChartTypes(string Name, eChartType ChartType, ExcelPivotTable PivotTableSource, eEditAs DrawingType);
    public ExcelChart AddChart(string Name, eChartType ChartType);
    public ExcelChartEx AddExtendedChart(string Name, eChartExType ChartType);
    public ExcelSunburstChart AddSunburstChart(string Name);
    public ExcelTreemapChart AddTreemapChart(string Name);
    public ExcelBoxWhiskerChart AddBoxWhiskerChart(string Name);
    public ExcelHistogramChart AddHistogramChart(string Name, bool AddParetoLine);
    public ExcelWaterfallChart AddWaterfallChart(string Name);
    public ExcelFunnelChart AddFunnelChart(string Name);
    public ExcelRegionMapChart AddRegionMapChart(string Name);
    public ExcelChartEx AddExtendedChart(string Name, eChartExType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelStockChart AddStockChart(string Name, eStockChartType ChartType, ExcelRangeBase Range, bool readSeriesByColumn);
    public ExcelStockChart AddStockChart(string Name, ExcelRangeBase CategorySerie, ExcelRangeBase HighSerie, ExcelRangeBase LowSerie, ExcelRangeBase CloseSerie, ExcelRangeBase OpenSerie, ExcelRangeBase VolumeSerie);
    public ExcelStockChart AddStockChart(string Name, string CategorySerie, string HighSerie, string LowSerie, string CloseSerie, string OpenSerie, string VolumeSerie);
    private void ValidateSeries(ExcelRangeBase CategorySerie, ExcelRangeBase HighSerie, ExcelRangeBase LowSerie, ExcelRangeBase CloseSerie);
    public ExcelLineChart AddLineChart(string Name, eLineChartType ChartType);
    public ExcelLineChart AddLineChart(string Name, eLineChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelAreaChart AddAreaChart(string Name, eAreaChartType ChartType);
    public ExcelAreaChart AddAreaChart(string Name, eAreaChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelBarChart AddBarChart(string Name, eBarChartType ChartType);
    public ExcelBarChart AddBarChart(string Name, eBarChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelPieChart AddPieChart(string Name, ePieChartType ChartType);
    public ExcelPieChart AddPieChart(string Name, ePieChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelDoughnutChart AddDoughnutChart(string Name, eDoughnutChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelDoughnutChart AddDoughnutChart(string Name, eDoughnutChartType ChartType);
    public ExcelOfPieChart AddOfPieChart(string Name, eOfPieChartType ChartType);
    public ExcelOfPieChart AddOfPieChart(string Name, eOfPieChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelBubbleChart AddBubbleChart(string Name, eBubbleChartType ChartType);
    public ExcelBubbleChart AddBubbleChart(string Name, eBubbleChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelScatterChart AddScatterChart(string Name, eScatterChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelScatterChart AddScatterChart(string Name, eScatterChartType ChartType);
    public ExcelRadarChart AddRadarChart(string Name, eRadarChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelRadarChart AddRadarChart(string Name, eRadarChartType ChartType);
    public ExcelSurfaceChart AddSurfaceChart(string Name, eSurfaceChartType ChartType, ExcelPivotTable PivotTableSource);
    public ExcelSurfaceChart AddSurfaceChart(string Name, eSurfaceChartType ChartType);
    public ExcelPicture AddPicture(string Name, FileInfo ImageFile);
    public ExcelPicture AddPicture(string Name, FileInfo ImageFile, Uri Hyperlink);
    public ExcelPicture AddPicture(string Name, Stream PictureStream);
    public ExcelPicture AddPicture(string Name, Stream PictureStream, Uri Hyperlink);
    [ObsoleteAttribute("This overload is deprecated, please use AddPicture(string, Stream) instead.")]
public ExcelPicture AddPicture(string Name, Stream PictureStream, Nullable`1<ePictureType> PictureType);
    [ObsoleteAttribute("This overload is deprecated, please use AddPicture(string, Stream, Uri) instead.")]
public ExcelPicture AddPicture(string Name, Stream pictureStream, Nullable`1<ePictureType> pictureType, Uri Hyperlink);
    private ExcelPicture AddImageInternal(string Name, Stream pictureStream, Nullable`1<ePictureType> pictureType, Uri Hyperlink);
    internal ExcelGroupShape AddGroupDrawing();
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__90")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, FileInfo ImageFile);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__91")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, FileInfo ImageFile, Uri Hyperlink);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__92")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, string ImagePath);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__93")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, string ImagePath, Uri Hyperlink);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__94")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, Stream PictureStream);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__95")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, Stream PictureStream, Uri Hyperlink);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__96")]
[ObsoleteAttribute("This overload is deprecated, please use AddPictureAsync(string, Stream) instead.")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, Stream PictureStream, Nullable`1<ePictureType> PictureType);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureAsync>d__97")]
[ObsoleteAttribute("This overload is deprecated, please use AddPictureAsync(string, Stream, Uri) instead.")]
public Task`1<ExcelPicture> AddPictureAsync(string Name, Stream pictureStream, Nullable`1<ePictureType> pictureType, Uri Hyperlink);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelDrawings/<AddPictureInternalAsync>d__98")]
private Task`1<ExcelPicture> AddPictureInternalAsync(string Name, Stream pictureStream, Nullable`1<ePictureType> pictureType, Uri Hyperlink);
    private void AddPicture(string Name, ExcelPicture pic);
    public ExcelPicture AddPicture(string Name, string ImagePath);
    public ExcelPicture AddPicture(string Name, string ImagePath, ExcelHyperLink Hyperlink);
    private void ValidatePictureFile(string Name, FileInfo ImageFile);
    public ExcelChart AddChartFromTemplate(FileInfo crtxFile, string name);
    public ExcelChart AddChartFromTemplate(FileInfo crtxFile, string name, ExcelPivotTable pivotTableSource);
    public ExcelChart AddChartFromTemplate(Stream crtxStream, string name);
    public ExcelChart AddChartFromTemplate(Stream crtxStream, string name, ExcelPivotTable pivotTableSource);
    private string GetChartNodeName(XmlHelper xmlHelper);
    public ExcelShape AddShape(string Name, eShapeStyle Style);
    public ExcelTableSlicer AddTableSlicer(ExcelTableColumn TableColumn);
    internal ExcelPivotTableSlicer AddPivotTableSlicer(ExcelPivotTableField Field);
    public ExcelShape AddShape(string Name, ExcelShape Source);
    public ExcelControl AddControl(string Name, eControlType ControlType);
    public ExcelControlButton AddButtonControl(string Name);
    public ExcelControlCheckBox AddCheckBoxControl(string Name);
    public ExcelControlRadioButton AddRadioButtonControl(string Name);
    public ExcelControlListBox AddListBoxControl(string Name);
    public ExcelControlDropDown AddDropDownControl(string Name);
    public ExcelControlGroupBox AddGroupBoxControl(string Name);
    public ExcelControlLabel AddLabelControl(string Name);
    public ExcelControlSpinButton AddSpinButtonControl(string Name);
    public ExcelControlScrollBar AddScrollBarControl(string Name);
    private XmlElement CreateDrawingXml(eEditAs topNodeType, bool asAlterniveContent);
    internal XmlElement CreateDocumentAndTopNode(eEditAs topNodeType, bool asAlterniveContent);
    public void Remove(int Index);
    internal void RemoveDrawing(int Index, bool DeleteXmlNode);
    internal void ReIndexNames(int Index, int increase);
    public void Remove(ExcelDrawing Drawing);
    public void Remove(string Name);
    public void Clear();
    internal void ClearDrawings();
    internal void BringToFront(ExcelDrawing drawing);
    internal void SendToBack(ExcelDrawing drawing);
    internal void AdjustWidth(Double[0...,0...] pos);
    internal void AdjustHeight(Double[0...,0...] pos);
    internal Double[0...,0...] GetDrawingWidths();
    internal Double[0...,0...] GetDrawingHeight();
    public sealed virtual void Dispose();
    internal ExcelDrawing GetById(int id);
    internal void ReadPositionsAndSize();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.ExcelDrawingsGroup : object {
    private ExcelGroupShape _parent;
    internal Dictionary`2<string, int> _drawingNames;
    private List`1<ExcelDrawing> _groupDrawings;
    private XmlNamespaceManager _nsm;
    private XmlNode _topNode;
    public int Count { get; }
    public ExcelDrawing Item { get; }
    public ExcelDrawing Item { get; }
    internal ExcelDrawingsGroup(ExcelGroupShape parent, XmlNamespaceManager nsm, XmlNode topNode);
    private void AddDrawings();
    public void Add(ExcelDrawing drawing);
    private void CheckNotDisposed();
    internal void AddDrawing(ExcelDrawing drawing);
    private void AdjustXmlAndMoveToGroup(ExcelDrawing d);
    private void AdjustXmlAndMoveFromGroup(ExcelDrawing d);
    private XmlNode CreateAnchorNode(XmlNode drawingNode);
    private void AppendDrawingNode(XmlNode drawingNode);
    public sealed virtual void Dispose();
    public int get_Count();
    public ExcelDrawing get_Item(int PositionID);
    public ExcelDrawing get_Item(string Name);
    public sealed virtual IEnumerator`1<ExcelDrawing> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Remove(ExcelDrawing drawing);
    public void Clear();
}
public class OfficeOpenXml.Drawing.ExcelDrawingSize : XmlHelper {
    private SetWidthCallback _setWidthCallback;
    private static string colOffPath;
    private long _height;
    private static string rowOffPath;
    private long _width;
    public long Height { get; public set; }
    public long Width { get; public set; }
    internal ExcelDrawingSize(XmlNamespaceManager ns, XmlNode node, SetWidthCallback setWidthCallback);
    private void Load();
    public void UpdateXml();
    public long get_Height();
    public void set_Height(long value);
    public long get_Width();
    public void set_Width(long value);
}
public class OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate : XmlHelper {
    protected internal string _path;
    private string _latPath;
    private string _lonPath;
    private string _revPath;
    private Action`1<bool> _initParent;
    private bool isInit;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public double Revolution { get; public set; }
    internal ExcelDrawingSphereCoordinate(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, Action`1<bool> initParent);
    public double get_Latitude();
    public void set_Latitude(double value);
    public double get_Longitude();
    public void set_Longitude(double value);
    public double get_Revolution();
    public void set_Revolution(double value);
    private void InitXml();
}
public class OfficeOpenXml.Drawing.ExcelGroupShape : ExcelDrawing {
    private ExcelDrawingsGroup _groupDrawings;
    private ExcelDrawingCoordinate _xFrmPosition;
    private ExcelDrawingSize _xFrmSize;
    private ExcelDrawingCoordinate _xFrmChildPosition;
    private ExcelDrawingSize _xFrmChildSize;
    public ExcelDrawingsGroup Drawings { get; }
    internal ExcelDrawingCoordinate xFrmPosition { get; }
    internal ExcelDrawingSize xFrmSize { get; }
    internal ExcelDrawingCoordinate xFrmChildPosition { get; }
    internal ExcelDrawingSize xFrmChildSize { get; }
    public eDrawingType DrawingType { get; }
    internal ExcelGroupShape(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    public ExcelDrawingsGroup get_Drawings();
    internal static void Validate(ExcelDrawing d, ExcelDrawings drawings, ExcelGroupShape grp);
    internal void SetPositionAndSizeFromChildren();
    internal void AdjustChildrenForResizeRow(double prevTop);
    internal void AdjustChildrenForResizeColumn(double prevLeft);
    private void SetxFrmPosition();
    internal ExcelDrawingCoordinate get_xFrmPosition();
    internal ExcelDrawingSize get_xFrmSize();
    internal ExcelDrawingCoordinate get_xFrmChildPosition();
    internal ExcelDrawingSize get_xFrmChildSize();
    public virtual eDrawingType get_DrawingType();
}
public class OfficeOpenXml.Drawing.ExcelImage : object {
    private IPictureContainer _container;
    private ePictureType[] _restrictedTypes;
    [CompilerGeneratedAttribute]
private Nullable`1<ePictureType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ImageBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelImageInfo <Bounds>k__BackingField;
    public bool HasImage { get; }
    public Nullable`1<ePictureType> Type { get; internal set; }
    public Byte[] ImageBytes { get; internal set; }
    public ExcelImageInfo Bounds { get; internal set; }
    internal ExcelImage(IPictureContainer container, ePictureType[] restrictedTypes);
    public ExcelImage(string imagePath);
    public ExcelImage(FileInfo imageFile);
    public ExcelImage(Stream imageStream, ePictureType pictureType);
    public ExcelImage(Byte[] imageBytes, ePictureType pictureType);
    public bool get_HasImage();
    [CompilerGeneratedAttribute]
public Nullable`1<ePictureType> get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(Nullable`1<ePictureType> value);
    [CompilerGeneratedAttribute]
public Byte[] get_ImageBytes();
    [CompilerGeneratedAttribute]
internal void set_ImageBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public ExcelImageInfo get_Bounds();
    [CompilerGeneratedAttribute]
internal void set_Bounds(ExcelImageInfo value);
    public void SetImage(string imagePath);
    public void SetImage(FileInfo imageFile);
    public ExcelImage SetImage(Byte[] imageBytes, ePictureType pictureType);
    public ExcelImage SetImage(ExcelImage image);
    public ExcelImage SetImage(Stream imageStream, ePictureType pictureType);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelImage/<SetImageAsync>d__27")]
public Task`1<ExcelImage> SetImageAsync(Stream imageStream, ePictureType pictureType);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelImage/<SetImageAsync>d__28")]
public Task`1<ExcelImage> SetImageAsync(string imagePath);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelImage/<SetImageAsync>d__29")]
public Task`1<ExcelImage> SetImageAsync(FileInfo imageFile);
    internal ExcelImage SetImageNoContainer(Byte[] image, ePictureType pictureType);
    internal ExcelImage SetImage(Byte[] image, ePictureType pictureType, bool removePrevImage);
    private ExcelImage SetImageContainer(Byte[] image, ePictureType pictureType, bool removePrevImage);
    private void ValidatePictureType(ePictureType pictureType);
    internal void RemoveImage();
    private void RemoveImageContainer();
}
public class OfficeOpenXml.Drawing.ExcelImageInfo : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalResolution>k__BackingField;
    public double Width { get; internal set; }
    public double Height { get; internal set; }
    public double HorizontalResolution { get; internal set; }
    public double VerticalResolution { get; internal set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
internal void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
internal void set_Height(double value);
    [CompilerGeneratedAttribute]
public double get_HorizontalResolution();
    [CompilerGeneratedAttribute]
internal void set_HorizontalResolution(double value);
    [CompilerGeneratedAttribute]
public double get_VerticalResolution();
    [CompilerGeneratedAttribute]
internal void set_VerticalResolution(double value);
}
public class OfficeOpenXml.Drawing.ExcelPicture : ExcelDrawing {
    [CompilerGeneratedAttribute]
private ExcelImage <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    internal ZipPackagePart Part;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private string _preferRelativeResizePath;
    private string _lockAspectRatioPath;
    [CompilerGeneratedAttribute]
private string <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic>k__BackingField;
    private string _rotationPath;
    private string _horizontalFlipPath;
    private string _verticalFlipPath;
    public eDrawingType DrawingType { get; }
    public ExcelImage Image { get; }
    internal string ContentType { get; internal set; }
    internal string Id { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public bool PreferRelativeResize { get; public set; }
    public bool LockAspectRatio { get; public set; }
    private string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash { get; private set; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic { get; private set; }
    private ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic { get; private set; }
    private IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelationDocument { get; }
    public double Rotation { get; public set; }
    public bool HorizontalFlip { get; public set; }
    public bool VerticalFlip { get; public set; }
    internal ExcelPicture(ExcelDrawings drawings, XmlNode node, Uri hyperlink, ePictureType type);
    internal ExcelPicture(ExcelDrawings drawings, XmlNode node, ExcelGroupShape shape);
    private void Init();
    private void SetRelId(XmlNode node, ePictureType type, string relID);
    public virtual eDrawingType get_DrawingType();
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ExcelPicture/<LoadImageAsync>d__6")]
internal Task LoadImageAsync(Stream stream, ePictureType type);
    internal void LoadImage(Stream stream, ePictureType type);
    private void SaveImageToPackage(ePictureType type, Byte[] img);
    private void CreatePicNode(XmlNode node, ePictureType type);
    private void AddNewPicture(Byte[] img, string relID);
    private void SetPosDefaults(float width, float height);
    internal void SetNewId(int newId);
    private string PicStartXml(ePictureType type);
    [CompilerGeneratedAttribute]
public ExcelImage get_Image();
    [CompilerGeneratedAttribute]
internal string get_ContentType();
    [CompilerGeneratedAttribute]
internal void set_ContentType(string value);
    public virtual void SetSize(int Percent);
    internal string get_Id();
    public ExcelDrawingFill get_Fill();
    public ExcelDrawingBorder get_Border();
    public ExcelDrawingEffectStyle get_Effect();
    public bool get_PreferRelativeResize();
    public void set_PreferRelativeResize(bool value);
    public bool get_LockAspectRatio();
    public void set_LockAspectRatio(bool value);
    internal virtual void CellAnchorChanged();
    internal virtual void DeleteMe();
    public virtual void Dispose();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RemoveImage();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.SetNewImage();
    [CompilerGeneratedAttribute]
private sealed virtual override string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_ImageHash();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_ImageHash(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_UriPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_UriPic(Uri value);
    [CompilerGeneratedAttribute]
private sealed virtual override ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_RelPic(ZipPackageRelationship value);
    private sealed virtual override IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelationDocument();
    public double get_Rotation();
    public void set_Rotation(double value);
    public bool get_HorizontalFlip();
    public void set_HorizontalFlip(bool value);
    public bool get_VerticalFlip();
    public void set_VerticalFlip(bool value);
}
public class OfficeOpenXml.Drawing.ExcelPosition : XmlHelper {
    private XmlNode _node;
    private XmlNamespaceManager _ns;
    private SetWidthCallback _setWidthCallback;
    private static string colPath;
    private int _column;
    private int _row;
    private int _columnOff;
    private int _rowOff;
    private static string rowPath;
    private static string colOffPath;
    private static string rowOffPath;
    public int Column { get; public set; }
    public int Row { get; public set; }
    public int ColumnOff { get; public set; }
    public int RowOff { get; public set; }
    internal ExcelPosition(XmlNamespaceManager ns, XmlNode node, SetWidthCallback setWidthCallback);
    public int get_Column();
    public void set_Column(int value);
    public int get_Row();
    public void set_Row(int value);
    public int get_ColumnOff();
    public void set_ColumnOff(int value);
    public int get_RowOff();
    public void set_RowOff(int value);
    public void Load();
    public void UpdateXml();
}
public class OfficeOpenXml.Drawing.ExcelShape : ExcelShapeBase {
    internal ExcelShape(ExcelDrawings drawings, XmlNode node, ExcelGroupShape shape);
    internal ExcelShape(ExcelDrawings drawings, XmlNode node, eShapeStyle style);
    private string ShapeStartXml();
    internal virtual void DeleteMe();
}
public class OfficeOpenXml.Drawing.ExcelShapeBase : ExcelDrawing {
    internal string _shapeStylePath;
    private string _fillPath;
    private string _borderPath;
    private string _effectPath;
    private string _rotationPath;
    private string _horizontalFlipPath;
    private string _verticalFlipPath;
    private string _headEndPath;
    private string _tailEndPath;
    private string _textPath;
    private string _lockTextPath;
    private string _textAnchoringPath;
    private string _textAnchoringCtlPath;
    private string _paragraphPath;
    private string _textAlignPath;
    private string _indentAlignPath;
    private string _textVerticalPath;
    private string _fontPath;
    private string _textBodyPath;
    private ExcelDrawingFill _fill;
    private ExcelDrawingBorder _border;
    private ExcelDrawingEffectStyle _effect;
    private ExcelDrawing3D _threeD;
    private ExcelDrawingLineEnd _headEnd;
    private ExcelDrawingLineEnd _tailEnd;
    private ExcelTextFont _font;
    private bool isSpInit;
    private ExcelParagraphCollection _richText;
    internal static String[] _shapeNodeOrder;
    private ExcelTextBody _textBody;
    public eDrawingType DrawingType { get; }
    public eShapeStyle Style { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    public ExcelDrawingLineEnd HeadEnd { get; }
    public ExcelDrawingLineEnd TailEnd { get; }
    public ExcelTextFont Font { get; }
    public string Text { get; public set; }
    public bool LockText { get; public set; }
    public ExcelParagraphCollection RichText { get; }
    public eTextAnchoringType TextAnchoring { get; public set; }
    public bool TextAnchoringControl { get; public set; }
    public eTextAlignment TextAlignment { get; public set; }
    public int Indent { get; public set; }
    public double Rotation { get; public set; }
    public bool HorizontalFlip { get; public set; }
    public bool VerticalFlip { get; public set; }
    public eTextVerticalType TextVertical { get; public set; }
    public ExcelTextBody TextBody { get; }
    internal ExcelShapeBase(ExcelDrawings drawings, XmlNode node, string topPath, string nvPrPath, ExcelGroupShape parent);
    private static ExcelShapeBase();
    private void Init(string topPath);
    public virtual eDrawingType get_DrawingType();
    public virtual eShapeStyle get_Style();
    public virtual void set_Style(eShapeStyle value);
    public ExcelDrawingFill get_Fill();
    public ExcelDrawingBorder get_Border();
    public ExcelDrawingEffectStyle get_Effect();
    public ExcelDrawing3D get_ThreeD();
    public ExcelDrawingLineEnd get_HeadEnd();
    public ExcelDrawingLineEnd get_TailEnd();
    public ExcelTextFont get_Font();
    private void InitSpPr();
    public string get_Text();
    public void set_Text(string value);
    public bool get_LockText();
    public void set_LockText(bool value);
    public ExcelParagraphCollection get_RichText();
    public eTextAnchoringType get_TextAnchoring();
    public void set_TextAnchoring(eTextAnchoringType value);
    public bool get_TextAnchoringControl();
    public void set_TextAnchoringControl(bool value);
    public eTextAlignment get_TextAlignment();
    public void set_TextAlignment(eTextAlignment value);
    public int get_Indent();
    public void set_Indent(int value);
    public double get_Rotation();
    public void set_Rotation(double value);
    public bool get_HorizontalFlip();
    public void set_HorizontalFlip(bool value);
    public bool get_VerticalFlip();
    public void set_VerticalFlip(bool value);
    public eTextVerticalType get_TextVertical();
    public void set_TextVertical(eTextVerticalType value);
    public ExcelTextBody get_TextBody();
    internal virtual void CellAnchorChanged();
}
public class OfficeOpenXml.Drawing.ExcelSlicerAsType : object {
    private ExcelDrawing _drawing;
    public ExcelTableSlicer TableSlicer { get; }
    public ExcelPivotTableSlicer PivotTableSlicer { get; }
    internal ExcelSlicerAsType(ExcelDrawing drawing);
    public ExcelTableSlicer get_TableSlicer();
    public ExcelPivotTableSlicer get_PivotTableSlicer();
}
public class OfficeOpenXml.Drawing.ExcelTextBody : XmlHelper {
    private string _path;
    private Action _initXml;
    public eTextAnchoringType Anchor { get; public set; }
    public bool AnchorCenter { get; public set; }
    public eUnderLineType UnderLine { get; public set; }
    public Nullable`1<double> BottomInsert { get; public set; }
    public Nullable`1<double> TopInsert { get; public set; }
    public Nullable`1<double> RightInsert { get; public set; }
    public Nullable`1<double> LeftInsert { get; public set; }
    public Nullable`1<double> Rotation { get; public set; }
    public double SpaceBetweenColumns { get; public set; }
    public bool ParagraphSpacing { get; public set; }
    public bool TextUpright { get; public set; }
    public bool CompatibleLineSpacing { get; public set; }
    public bool ForceAntiAlias { get; public set; }
    public bool FromWordArt { get; public set; }
    public eTextVerticalType VerticalText { get; public set; }
    public eTextHorizontalOverflow HorizontalTextOverflow { get; public set; }
    public eTextVerticalOverflow VerticalTextOverflow { get; public set; }
    public eTextWrappingType WrapText { get; public set; }
    public eTextAutofit TextAutofit { get; public set; }
    public Nullable`1<double> AutofitNormalFontScale { get; public set; }
    public Nullable`1<double> LineSpaceReduction { get; public set; }
    internal XmlElement PathElement { get; }
    internal ExcelTextBody(XmlNamespaceManager ns, XmlNode topNode, string path, String[] schemaNodeOrder, Action initXml);
    public eTextAnchoringType get_Anchor();
    public void set_Anchor(eTextAnchoringType value);
    public bool get_AnchorCenter();
    public void set_AnchorCenter(bool value);
    public eUnderLineType get_UnderLine();
    public void set_UnderLine(eUnderLineType value);
    public Nullable`1<double> get_BottomInsert();
    public void set_BottomInsert(Nullable`1<double> value);
    public Nullable`1<double> get_TopInsert();
    public void set_TopInsert(Nullable`1<double> value);
    public Nullable`1<double> get_RightInsert();
    public void set_RightInsert(Nullable`1<double> value);
    public Nullable`1<double> get_LeftInsert();
    public void set_LeftInsert(Nullable`1<double> value);
    public Nullable`1<double> get_Rotation();
    public void set_Rotation(Nullable`1<double> value);
    public double get_SpaceBetweenColumns();
    public void set_SpaceBetweenColumns(double value);
    public bool get_ParagraphSpacing();
    public void set_ParagraphSpacing(bool value);
    public bool get_TextUpright();
    public void set_TextUpright(bool value);
    public bool get_CompatibleLineSpacing();
    public void set_CompatibleLineSpacing(bool value);
    public bool get_ForceAntiAlias();
    public void set_ForceAntiAlias(bool value);
    public bool get_FromWordArt();
    public void set_FromWordArt(bool value);
    public eTextVerticalType get_VerticalText();
    public void set_VerticalText(eTextVerticalType value);
    public eTextHorizontalOverflow get_HorizontalTextOverflow();
    public void set_HorizontalTextOverflow(eTextHorizontalOverflow value);
    public eTextVerticalOverflow get_VerticalTextOverflow();
    public void set_VerticalTextOverflow(eTextVerticalOverflow value);
    public eTextWrappingType get_WrapText();
    public void set_WrapText(eTextWrappingType value);
    public eTextAutofit get_TextAutofit();
    public void set_TextAutofit(eTextAutofit value);
    public Nullable`1<double> get_AutofitNormalFontScale();
    public void set_AutofitNormalFontScale(Nullable`1<double> value);
    public Nullable`1<double> get_LineSpaceReduction();
    public void set_LineSpaceReduction(Nullable`1<double> value);
    internal XmlElement get_PathElement();
    internal void SetFromXml(XmlElement copyFromElement);
}
public class OfficeOpenXml.Drawing.ExcelTextRun : XmlHelper {
    private string _path;
    public eTextCapsType Capitalization { get; public set; }
    public double Kerning { get; public set; }
    public double FontSize { get; public set; }
    public double Spacing { get; public set; }
    public double Baseline { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public eStrikeType Strike { get; public set; }
    public eUnderLineType UnderLine { get; public set; }
    internal XmlElement PathElement { get; }
    internal ExcelTextRun(XmlNamespaceManager ns, XmlNode topNode, string path);
    public eTextCapsType get_Capitalization();
    public void set_Capitalization(eTextCapsType value);
    public double get_Kerning();
    public void set_Kerning(double value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public double get_Spacing();
    public void set_Spacing(double value);
    public double get_Baseline();
    public void set_Baseline(double value);
    public bool get_Bold();
    public void set_Bold(bool value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public eStrikeType get_Strike();
    public void set_Strike(eStrikeType value);
    public eUnderLineType get_UnderLine();
    public void set_UnderLine(eUnderLineType value);
    internal XmlElement get_PathElement();
}
public class OfficeOpenXml.Drawing.ExcelView3D : XmlHelper {
    private static string perspectivePath;
    private static string rotXPath;
    private static string rotYPath;
    private static string rAngAxPath;
    private static string depthPercentPath;
    private static string heightPercentPath;
    public decimal Perspective { get; public set; }
    public decimal RotX { get; public set; }
    public decimal RotY { get; public set; }
    public bool RightAngleAxes { get; public set; }
    public int DepthPercent { get; public set; }
    public int HeightPercent { get; public set; }
    internal ExcelView3D(XmlNamespaceManager ns, XmlNode node);
    public decimal get_Perspective();
    public void set_Perspective(decimal value);
    public decimal get_RotX();
    public void set_RotX(decimal value);
    public decimal get_RotY();
    public void set_RotY(decimal value);
    public bool get_RightAngleAxes();
    public void set_RightAngleAxes(bool value);
    public int get_DepthPercent();
    public void set_DepthPercent(int value);
    public int get_HeightPercent();
    public void set_HeightPercent(int value);
}
public class OfficeOpenXml.Drawing.GenericImageHandler : object {
    [CompilerGeneratedAttribute]
private HashSet`1<ePictureType> <SupportedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    public HashSet`1<ePictureType> SupportedTypes { get; }
    public Exception LastException { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<ePictureType> get_SupportedTypes();
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_LastException();
    [CompilerGeneratedAttribute]
private void set_LastException(Exception value);
    public sealed virtual bool GetImageBounds(MemoryStream image, ePictureType type, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    public sealed virtual bool ValidForEnvironment();
}
internal class OfficeOpenXml.Drawing.ImageInfo : object {
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelImageInfo <Bounds>k__BackingField;
    internal string Hash { get; internal set; }
    internal Uri Uri { get; internal set; }
    internal int RefCount { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    internal ExcelImageInfo Bounds { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Hash();
    [CompilerGeneratedAttribute]
internal void set_Hash(string value);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
internal int get_RefCount();
    [CompilerGeneratedAttribute]
internal void set_RefCount(int value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal ExcelImageInfo get_Bounds();
    [CompilerGeneratedAttribute]
internal void set_Bounds(ExcelImageInfo value);
}
internal class OfficeOpenXml.Drawing.ImageReader : object {
    private static float M_TO_INCH;
    private static float CM_TO_INCH;
    private static float MM_TO_INCH;
    private static float HUNDREDTH_TH_MM_TO_INCH;
    private static double PIXELS_PER_TWIPS;
    private static double DEFAULT_TWIPS;
    internal static Nullable`1<ePictureType> GetPictureType(Stream stream, bool throwException);
    [AsyncStateMachineAttribute("OfficeOpenXml.Drawing.ImageReader/<GetPictureTypeAsync>d__6")]
internal static Task`1<Nullable`1<ePictureType>> GetPictureTypeAsync(Stream stream);
    private static Nullable`1<ePictureType> GetPictureTypeFromMs(MemoryStream ms);
    private static bool IsGZip(BinaryReader br);
    private static bool IsGZip(Byte[] sign);
    internal static bool TryGetImageBounds(ePictureType pictureType, MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    internal static Byte[] ExtractImage(Byte[] img, Nullable`1& type);
    private static bool IsJpg(MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    private static bool IsJpg(BinaryReader br);
    private static bool IsGif(MemoryStream ms, Double& width, Double& height);
    private static bool IsGif(BinaryReader br);
    private static bool IsBmp(MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    internal static bool IsBmp(BinaryReader br, String& sign);
    private static bool IsIcon(MemoryStream ms, Double& width, Double& height);
    internal static bool IsIco(BinaryReader br);
    private static bool IsWebP(MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    internal static bool IsWebP(BinaryReader br);
    private static bool IsTif(MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    private static bool ReadTiffHeader(BinaryReader br, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    private static bool IsTif(BinaryReader br, Boolean& isBigEndian, bool resetPos);
    private static short GetTifInt16(BinaryReader br, bool isBigEndian);
    private static int GetTifInt32(BinaryReader br, bool isBigEndian);
    private static bool IsEmf(MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    private static bool IsEmf(BinaryReader br);
    private static bool IsWmf(MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    private static bool IsWmf(BinaryReader br);
    private static bool IsPng(MemoryStream ms, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
    private static bool IsPng(BinaryReader br, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution, long fileEndPosition);
    private static bool IsPng(BinaryReader br);
    private static string ReadPngChunkHeader(BinaryReader br, Int32& length);
    private static bool IsSvg(MemoryStream ms, Double& width, Double& height);
    private static bool IsSvg(MemoryStream ms);
    private static double GetSvgUnit(string v);
    private static ushort GetUInt16BigEndian(BinaryReader br);
    private static short GetInt16BigEndian(BinaryReader br);
    private static int GetInt32BigEndian(BinaryReader br);
}
internal class OfficeOpenXml.Drawing.Interfaces.HashInfo : object {
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefCount>k__BackingField;
    public string RelId { get; public set; }
    public int RefCount { get; public set; }
    public HashInfo(string relId);
    [CompilerGeneratedAttribute]
public string get_RelId();
    [CompilerGeneratedAttribute]
public void set_RelId(string value);
    [CompilerGeneratedAttribute]
public int get_RefCount();
    [CompilerGeneratedAttribute]
public void set_RefCount(int value);
}
internal interface OfficeOpenXml.Drawing.Interfaces.IDrawingChartDataPoints {
    public ExcelChartDataPointCollection DataPoints { get; }
    public abstract virtual ExcelChartDataPointCollection get_DataPoints();
}
internal interface OfficeOpenXml.Drawing.Interfaces.IDrawingChartErrorBars {
    public ExcelChartErrorBars ErrorBars { get; }
    public abstract virtual void AddErrorBars(eErrorBarType barType, eErrorValueType valueType);
    public abstract virtual bool HasErrorBars();
    public abstract virtual ExcelChartErrorBars get_ErrorBars();
}
internal interface OfficeOpenXml.Drawing.Interfaces.IDrawingChartMarker {
    public ExcelChartMarker Marker { get; }
    public abstract virtual bool HasMarker();
    public abstract virtual ExcelChartMarker get_Marker();
}
public interface OfficeOpenXml.Drawing.Interfaces.IDrawingDataLabel {
    public ExcelChartDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public abstract virtual ExcelChartDataLabel get_DataLabel();
    public abstract virtual bool get_HasDataLabel();
}
public interface OfficeOpenXml.Drawing.Interfaces.IDrawingSerieDataLabel {
    public ExcelChartSerieDataLabel DataLabel { get; }
    public bool HasDataLabel { get; }
    public abstract virtual ExcelChartSerieDataLabel get_DataLabel();
    public abstract virtual bool get_HasDataLabel();
}
internal interface OfficeOpenXml.Drawing.Interfaces.IDrawingStyle {
    public ExcelTextFont Font { get; }
    public ExcelTextBody TextBody { get; }
    public abstract virtual ExcelTextFont get_Font();
    public abstract virtual ExcelTextBody get_TextBody();
}
internal interface OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase {
    public ExcelDrawingBorder Border { get; }
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawingFill Fill { get; }
    public ExcelDrawing3D ThreeD { get; }
    public abstract virtual void CreatespPr();
    public abstract virtual ExcelDrawingBorder get_Border();
    public abstract virtual ExcelDrawingEffectStyle get_Effect();
    public abstract virtual ExcelDrawingFill get_Fill();
    public abstract virtual ExcelDrawing3D get_ThreeD();
}
internal interface OfficeOpenXml.Drawing.Interfaces.IPictureContainer {
    public IPictureRelationDocument RelationDocument { get; }
    public string ImageHash { get; public set; }
    public Uri UriPic { get; public set; }
    public ZipPackageRelationship RelPic { get; public set; }
    public abstract virtual IPictureRelationDocument get_RelationDocument();
    public abstract virtual string get_ImageHash();
    public abstract virtual void set_ImageHash(string value);
    public abstract virtual Uri get_UriPic();
    public abstract virtual void set_UriPic(Uri value);
    public abstract virtual ZipPackageRelationship get_RelPic();
    public abstract virtual void set_RelPic(ZipPackageRelationship value);
    public abstract virtual void RemoveImage();
    public abstract virtual void SetNewImage();
}
internal interface OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument {
    public ExcelPackage Package { get; }
    public Dictionary`2<string, HashInfo> Hashes { get; }
    public ZipPackagePart RelatedPart { get; }
    public Uri RelatedUri { get; }
    public abstract virtual ExcelPackage get_Package();
    public abstract virtual Dictionary`2<string, HashInfo> get_Hashes();
    public abstract virtual ZipPackagePart get_RelatedPart();
    public abstract virtual Uri get_RelatedUri();
}
internal interface OfficeOpenXml.Drawing.Interfaces.IStyleMandatoryProperties {
    public abstract virtual void SetMandatoryProperties();
}
internal class OfficeOpenXml.Drawing.PictureStore : object {
    private ExcelPackage _pck;
    internal static int _id;
    internal Dictionary`2<string, ImageInfo> _images;
    public PictureStore(ExcelPackage pck);
    private static PictureStore();
    internal ImageInfo AddImage(Byte[] image);
    internal ImageInfo AddImage(Byte[] image, Uri uri, Nullable`1<ePictureType> pictureType);
    private static void SaveImageToPart(Byte[] image, ZipPackagePart imagePart);
    internal static ExcelImageInfo GetImageBounds(Byte[] image, ePictureType type, ExcelPackage pck);
    internal static string GetExtension(Uri uri);
    internal ImageInfo LoadImage(Byte[] image, Uri uri, ZipPackagePart imagePart);
    internal void RemoveImage(string hash, IPictureContainer container);
    internal ImageInfo GetImageInfo(Byte[] image);
    internal bool ImageExists(Byte[] image);
    internal static string GetHash(Byte[] image);
    private Uri GetNewUri(ZipPackage package, string sUri);
    internal static Byte[] GetPicture(string relId, IPictureContainer container, String& contentType, ePictureType& pictureType);
    internal static ePictureType GetPictureType(Uri uri);
    internal static ePictureType GetPictureType(string extension);
    internal static Nullable`1<ePictureType> GetPictureTypeByContentType(string contentType);
    internal static string GetExtension(ePictureType type);
    internal static string GetContentType(string extension);
    internal static string SavePicture(Byte[] image, IPictureContainer container, ePictureType type);
    public sealed virtual void Dispose();
}
public class OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicer : ExcelSlicer`1<ExcelPivotTableSlicerCache> {
    internal ExcelPivotTableSlicer(ExcelDrawings drawings, XmlNode node, ExcelPivotTableField field, ExcelGroupShape parent);
    internal ExcelPivotTableSlicer(ExcelDrawings drawings, XmlNode node, ExcelPivotTableSlicerCache cache, ExcelGroupShape parent);
    internal ExcelPivotTableSlicer(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    private void CreateDrawing(string name);
    internal virtual bool CheckSlicerNameIsUnique(string name);
    internal virtual void DeleteMe();
    internal void CreateNewCache(ExcelPivotTableField field);
}
public class OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache : ExcelSlicerCache {
    internal ExcelPivotTableField _field;
    [CompilerGeneratedAttribute]
private ExcelSlicerPivotTableCollection <PivotTables>k__BackingField;
    private ExcelPivotTableSlicerCacheTabularData _data;
    public eSlicerSourceType SourceType { get; }
    public ExcelSlicerPivotTableCollection PivotTables { get; }
    public ExcelPivotTableSlicerCacheTabularData Data { get; }
    internal ExcelPivotTableSlicerCache(XmlNamespaceManager nameSpaceManager);
    internal void Init(ExcelWorkbook wb, string name, ExcelPivotTableField field);
    internal virtual void Init(ExcelWorkbook wb);
    internal void Init(ExcelWorkbook wb, ExcelPivotTableSlicer slicer);
    public virtual eSlicerSourceType get_SourceType();
    [CompilerGeneratedAttribute]
public ExcelSlicerPivotTableCollection get_PivotTables();
    public ExcelPivotTableSlicerCacheTabularData get_Data();
    internal void UpdateItemsXml();
    [CompilerGeneratedAttribute]
private bool <Init>b__3_0(ExcelPivotTableField x);
    [CompilerGeneratedAttribute]
private bool <Init>b__4_0(ExcelPivotTableField x);
}
public class OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData : XmlHelper {
    private static string _topPath;
    internal ExcelPivotTableSlicerCache _cache;
    private static string _crossFilterPath;
    private static string _sortOrderPath;
    private static string _customListSortPath;
    private static string _showMissingPath;
    private ExcelPivotTableSlicerItemCollection _items;
    public eCrossFilter CrossFilter { get; public set; }
    public eSortOrder SortOrder { get; public set; }
    public bool CustomListSort { get; public set; }
    internal bool ShowMissing { get; internal set; }
    public ExcelPivotTableSlicerItemCollection Items { get; }
    public int PivotCacheId { get; private set; }
    internal ExcelPivotTableSlicerCacheTabularData(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTableSlicerCache cache);
    public eCrossFilter get_CrossFilter();
    public void set_CrossFilter(eCrossFilter value);
    public eSortOrder get_SortOrder();
    public void set_SortOrder(eSortOrder value);
    public bool get_CustomListSort();
    public void set_CustomListSort(bool value);
    internal bool get_ShowMissing();
    internal void set_ShowMissing(bool value);
    public ExcelPivotTableSlicerItemCollection get_Items();
    public int get_PivotCacheId();
    private void set_PivotCacheId(int value);
    internal void UpdateItemsXml();
    private bool IsHidden(ExcelPivotTableFieldItem item);
}
public class OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItem : object {
    private ExcelPivotTableSlicerCache _cache;
    private int _index;
    public object Value { get; }
    public bool Hidden { get; public set; }
    internal ExcelPivotTableSlicerItem(ExcelPivotTableSlicerCache cache, int index);
    public object get_Value();
    public bool get_Hidden();
    public void set_Hidden(bool value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection : object {
    private ExcelPivotTableSlicerCache _cache;
    private List`1<ExcelPivotTableSlicerItem> _items;
    public int Count { get; }
    public ExcelPivotTableSlicerItem Item { get; }
    internal ExcelPivotTableSlicerItemCollection(ExcelPivotTableSlicerCache cache);
    public void Refresh();
    internal void RefreshMe();
    public sealed virtual IEnumerator`1<ExcelPivotTableSlicerItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    public ExcelPivotTableSlicerItem get_Item(int index);
    public ExcelPivotTableSlicerItem GetByValue(object value);
    public int GetIndexByValue(object value);
    public bool Contains(object value);
}
public abstract class OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1 : ExcelDrawing {
    internal ExcelSlicerXmlSource _xmlSource;
    internal ExcelWorksheet _ws;
    internal XmlHelper _slicerXmlHelper;
    internal ExcelSlicerCache _cache;
    public eDrawingType DrawingType { get; }
    public string Caption { get; public set; }
    public bool ShowCaption { get; public set; }
    public string SlicerName { get; public set; }
    public double RowHeight { get; public set; }
    public int StartItem { get; public set; }
    public int ColumnCount { get; public set; }
    public bool LockedPosition { get; public set; }
    public eSlicerStyle Style { get; public set; }
    public string StyleName { get; public set; }
    internal string CacheName { get; internal set; }
    public T Cache { get; }
    internal ExcelSlicer`1(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    internal ExcelSlicer`1(ExcelDrawings drawings, XmlNode node, XmlDocument slicerXml, ExcelGroupShape parent);
    public virtual eDrawingType get_DrawingType();
    public string get_Caption();
    public void set_Caption(string value);
    public bool get_ShowCaption();
    public void set_ShowCaption(bool value);
    public string get_SlicerName();
    public void set_SlicerName(string value);
    internal abstract virtual bool CheckSlicerNameIsUnique(string name);
    public double get_RowHeight();
    public void set_RowHeight(double value);
    public int get_StartItem();
    public void set_StartItem(int value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public bool get_LockedPosition();
    public void set_LockedPosition(bool value);
    public eSlicerStyle get_Style();
    public void set_Style(eSlicerStyle value);
    public string get_StyleName();
    public void set_StyleName(string value);
    internal string get_CacheName();
    internal void set_CacheName(string value);
    public T get_Cache();
    internal virtual void DeleteMe();
}
public abstract class OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache : XmlHelper {
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <CacheRel>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <SlicerCacheXml>k__BackingField;
    internal ZipPackageRelationship CacheRel { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    internal Uri Uri { get; internal set; }
    public XmlDocument SlicerCacheXml { get; protected internal set; }
    public string Name { get; protected internal set; }
    public string SourceName { get; protected internal set; }
    public eSlicerSourceType SourceType { get; }
    internal ExcelSlicerCache(XmlNamespaceManager nameSpaceManager);
    internal void CreatePart(ExcelWorkbook wb);
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_CacheRel();
    [CompilerGeneratedAttribute]
internal void set_CacheRel(ZipPackageRelationship value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public XmlDocument get_SlicerCacheXml();
    [CompilerGeneratedAttribute]
protected internal void set_SlicerCacheXml(XmlDocument value);
    public string get_Name();
    protected internal void set_Name(string value);
    public string get_SourceName();
    protected internal void set_SourceName(string value);
    public abstract virtual eSlicerSourceType get_SourceType();
    internal abstract virtual void Init(ExcelWorkbook wb);
    internal string GetStartXml();
    internal void CreateWorkbookReference(ExcelWorkbook wb, string uriGuid);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection : object {
    private ExcelPivotTableSlicerCache _slicerCache;
    internal List`1<ExcelPivotTable> _list;
    public ExcelPivotTable Item { get; }
    public int Count { get; }
    internal ExcelSlicerPivotTableCollection(ExcelPivotTableSlicerCache slicerCache);
    public sealed virtual IEnumerator`1<ExcelPivotTable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelPivotTable get_Item(int index);
    public void Add(ExcelPivotTable pivotTable);
    public int get_Count();
}
public class OfficeOpenXml.Drawing.Slicer.ExcelTableSlicer : ExcelSlicer`1<ExcelTableSlicerCache> {
    [CompilerGeneratedAttribute]
private ExcelTableColumn <TableColumn>k__BackingField;
    public ExcelTableColumn TableColumn { get; internal set; }
    public ExcelValueFilterCollection FilterValues { get; }
    internal ExcelTableSlicer(ExcelDrawings drawings, XmlNode node, ExcelGroupShape parent);
    internal ExcelTableSlicer(ExcelDrawings drawings, XmlNode node, ExcelTableColumn column);
    private ExcelTableColumn GetTableColumn();
    internal virtual void DeleteMe();
    private void CreateDrawing(string name);
    [CompilerGeneratedAttribute]
public ExcelTableColumn get_TableColumn();
    [CompilerGeneratedAttribute]
internal void set_TableColumn(ExcelTableColumn value);
    public ExcelValueFilterCollection get_FilterValues();
    internal virtual bool CheckSlicerNameIsUnique(string name);
    internal void CreateNewCache();
    [CompilerGeneratedAttribute]
private bool <GetTableColumn>b__2_0(ExcelTableColumn x);
}
public class OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache : ExcelSlicerCache {
    private static string _extPath;
    private static string _topPath;
    [CompilerGeneratedAttribute]
private ExcelTableColumn <TableColumn>k__BackingField;
    private static string _sortOrderPath;
    private static string _crossFilterPath;
    private static string _customListSortPath;
    private static string _hideItemsWithNoDataPath;
    private static string _columnIndexPath;
    private static string _tableIdPath;
    public eSlicerSourceType SourceType { get; }
    public ExcelTableColumn TableColumn { get; private set; }
    public eSortOrder SortOrder { get; public set; }
    public eCrossFilter CrossFilter { get; public set; }
    public bool CustomListSort { get; public set; }
    public bool HideItemsWithNoData { get; public set; }
    internal int ColumnId { get; internal set; }
    internal int TableId { get; internal set; }
    internal ExcelTableSlicerCache(XmlNamespaceManager nameSpaceManager);
    internal virtual void Init(ExcelWorkbook wb);
    internal void Init(ExcelTableColumn column, string cacheName);
    public virtual eSlicerSourceType get_SourceType();
    [CompilerGeneratedAttribute]
public ExcelTableColumn get_TableColumn();
    [CompilerGeneratedAttribute]
private void set_TableColumn(ExcelTableColumn value);
    public eSortOrder get_SortOrder();
    public void set_SortOrder(eSortOrder value);
    public eCrossFilter get_CrossFilter();
    public void set_CrossFilter(eCrossFilter value);
    public bool get_CustomListSort();
    public void set_CustomListSort(bool value);
    public bool get_HideItemsWithNoData();
    public void set_HideItemsWithNoData(bool value);
    internal int get_ColumnId();
    internal void set_ColumnId(int value);
    internal int get_TableId();
    internal void set_TableId(int value);
    [CompilerGeneratedAttribute]
private bool <Init>b__3_0(ExcelTableColumn x);
}
public enum OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement : Enum {
    public int value__;
    public static eSlicerStyleElement UnselectedItemWithData;
    public static eSlicerStyleElement SelectedItemWithData;
    public static eSlicerStyleElement UnselectedItemWithNoData;
    public static eSlicerStyleElement SelectedItemWithNoData;
    public static eSlicerStyleElement HoveredUnselectedItemWithData;
    public static eSlicerStyleElement HoveredSelectedItemWithData;
    public static eSlicerStyleElement HoveredUnselectedItemWithNoData;
    public static eSlicerStyleElement HoveredSelectedItemWithNoData;
}
public class OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle : XmlHelper {
    private ExcelStyles _styles;
    internal Dictionary`2<eSlicerStyleElement, ExcelSlicerStyleElement> _dicSlicer;
    internal Dictionary`2<eTableStyleElement, ExcelSlicerTableStyleElement> _dicTable;
    private XmlNode _tableStyleNode;
    public string Name { get; public set; }
    public ExcelSlicerTableStyleElement WholeTable { get; }
    public ExcelSlicerTableStyleElement HeaderRow { get; }
    public ExcelSlicerStyleElement SelectedItemWithData { get; }
    public ExcelSlicerStyleElement SelectedItemWithNoData { get; }
    public ExcelSlicerStyleElement UnselectedItemWithData { get; }
    public ExcelSlicerStyleElement UnselectedItemWithNoData { get; }
    public ExcelSlicerStyleElement HoveredSelectedItemWithData { get; }
    public ExcelSlicerStyleElement HoveredSelectedItemWithNoData { get; }
    public ExcelSlicerStyleElement HoveredUnselectedItemWithData { get; }
    public ExcelSlicerStyleElement HoveredUnselectedItemWithNoData { get; }
    internal ExcelSlicerNamedStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, XmlNode tableStyleNode, ExcelStyles styles);
    private ExcelSlicerTableStyleElement GetTableStyleElement(eTableStyleElement element);
    private ExcelSlicerStyleElement GetSlicerStyleElement(eSlicerStyleElement element);
    public string get_Name();
    public void set_Name(string value);
    public ExcelSlicerTableStyleElement get_WholeTable();
    public ExcelSlicerTableStyleElement get_HeaderRow();
    public ExcelSlicerStyleElement get_SelectedItemWithData();
    public ExcelSlicerStyleElement get_SelectedItemWithNoData();
    public ExcelSlicerStyleElement get_UnselectedItemWithData();
    public ExcelSlicerStyleElement get_UnselectedItemWithNoData();
    public ExcelSlicerStyleElement get_HoveredSelectedItemWithData();
    public ExcelSlicerStyleElement get_HoveredSelectedItemWithNoData();
    public ExcelSlicerStyleElement get_HoveredUnselectedItemWithData();
    public ExcelSlicerStyleElement get_HoveredUnselectedItemWithNoData();
    internal void SetFromTemplate(ExcelSlicerNamedStyle templateStyle);
    internal void SetFromTemplate(eSlicerStyle templateStyle);
    private void LoadTableTemplate(string folder, string styleName);
}
public class OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerStyleElement : XmlHelper {
    private ExcelStyles _styles;
    private ExcelDxfSlicerStyle _style;
    [CompilerGeneratedAttribute]
private eSlicerStyleElement <Type>k__BackingField;
    public ExcelDxfSlicerStyle Style { get; internal set; }
    public eSlicerStyleElement Type { get; }
    internal ExcelSlicerStyleElement(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, eSlicerStyleElement type);
    public ExcelDxfSlicerStyle get_Style();
    internal void set_Style(ExcelDxfSlicerStyle value);
    [CompilerGeneratedAttribute]
public eSlicerStyleElement get_Type();
    internal virtual void CreateNode();
}
public enum OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType : Enum {
    public int value__;
    public static eColorTransformDataType Percentage;
    public static eColorTransformDataType PositivePercentage;
    public static eColorTransformDataType FixedPercentage;
    public static eColorTransformDataType FixedPositivePercentage;
    public static eColorTransformDataType Angle;
    public static eColorTransformDataType FixedAngle90;
    public static eColorTransformDataType Boolean;
}
public enum OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType : Enum {
    public int value__;
    public static eColorTransformType Tint;
    public static eColorTransformType Shade;
    public static eColorTransformType Comp;
    public static eColorTransformType Inv;
    public static eColorTransformType Gray;
    public static eColorTransformType Alpha;
    public static eColorTransformType AlphaOff;
    public static eColorTransformType AlphaMod;
    public static eColorTransformType Hue;
    public static eColorTransformType HueOff;
    public static eColorTransformType HueMod;
    public static eColorTransformType Sat;
    public static eColorTransformType SatOff;
    public static eColorTransformType SatMod;
    public static eColorTransformType Lum;
    public static eColorTransformType LumOff;
    public static eColorTransformType LumMod;
    public static eColorTransformType Red;
    public static eColorTransformType RedOff;
    public static eColorTransformType RedMod;
    public static eColorTransformType Green;
    public static eColorTransformType GreenOff;
    public static eColorTransformType GreenMod;
    public static eColorTransformType Blue;
    public static eColorTransformType BlueOff;
    public static eColorTransformType BlueMod;
    public static eColorTransformType Gamma;
    public static eColorTransformType InvGamma;
}
internal static class OfficeOpenXml.Drawing.Style.Coloring.EPPlusSystemColors : object {
    internal static Color ActiveBorder { get; }
    internal static Color ActiveCaption { get; }
    internal static Color ActiveCaptionText { get; }
    internal static Color AppWorkspace { get; }
    internal static Color ButtonFace { get; }
    internal static Color ButtonHighlight { get; }
    internal static Color ButtonShadow { get; }
    internal static Color Control { get; }
    internal static Color ControlDark { get; }
    internal static Color ControlDarkDark { get; }
    internal static Color ControlLight { get; }
    internal static Color ControlLightLight { get; }
    internal static Color ControlText { get; }
    internal static Color Desktop { get; }
    internal static Color GradientActiveCaption { get; }
    internal static Color GradientInactiveCaption { get; }
    internal static Color GrayText { get; }
    internal static Color Highlight { get; }
    internal static Color HighlightText { get; }
    internal static Color HotTrack { get; }
    internal static Color InactiveBorder { get; }
    internal static Color InactiveCaption { get; }
    internal static Color InactiveCaptionText { get; }
    internal static Color Info { get; }
    internal static Color InfoText { get; }
    internal static Color Menu { get; }
    internal static Color MenuBar { get; }
    internal static Color MenuHighlight { get; }
    internal static Color MenuText { get; }
    internal static Color ScrollBar { get; }
    internal static Color Window { get; }
    internal static Color WindowFrame { get; }
    internal static Color WindowText { get; }
    internal static Color get_ActiveBorder();
    internal static Color get_ActiveCaption();
    internal static Color get_ActiveCaptionText();
    internal static Color get_AppWorkspace();
    internal static Color get_ButtonFace();
    internal static Color get_ButtonHighlight();
    internal static Color get_ButtonShadow();
    internal static Color get_Control();
    internal static Color get_ControlDark();
    internal static Color get_ControlDarkDark();
    internal static Color get_ControlLight();
    internal static Color get_ControlLightLight();
    internal static Color get_ControlText();
    internal static Color get_Desktop();
    internal static Color get_GradientActiveCaption();
    internal static Color get_GradientInactiveCaption();
    internal static Color get_GrayText();
    internal static Color get_Highlight();
    internal static Color get_HighlightText();
    internal static Color get_HotTrack();
    internal static Color get_InactiveBorder();
    internal static Color get_InactiveCaption();
    internal static Color get_InactiveCaptionText();
    internal static Color get_Info();
    internal static Color get_InfoText();
    internal static Color get_Menu();
    internal static Color get_MenuBar();
    internal static Color get_MenuHighlight();
    internal static Color get_MenuText();
    internal static Color get_ScrollBar();
    internal static Color get_Window();
    internal static Color get_WindowFrame();
    internal static Color get_WindowText();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection : object {
    private List`1<IColorTransformItem> _list;
    private XmlNamespaceManager _namespaceManager;
    private XmlNode _topNode;
    public IColorTransformItem Item { get; }
    public int Count { get; }
    internal ExcelColorTransformCollection(XmlNamespaceManager nsm, XmlNode topNode);
    public IColorTransformItem get_Item(int index);
    public void Clear();
    public void RemoveAt(int index);
    public void Remove(IColorTransformItem item);
    public void RemoveOfType(eColorTransformType type);
    public void AddAlpha(double value);
    public void AddAlphaModulation(double value);
    public void AddAlphaOffset(double value);
    public void AddHue(double value);
    public void AddHueModulation(double value);
    public void AddHueOffset(double value);
    public void AddSaturation(double value);
    public void AddSaturationModulation(double value);
    public void AddSaturationOffset(double value);
    public void AddLuminance(double value);
    public void AddLuminanceModulation(double value);
    public void AddLuminanceOffset(double value);
    public void AddRed(double value);
    public void AddRedModulation(double value);
    public void AddRedOffset(double value);
    public void AddGreen(double value);
    public void AddGreenModulation(double value);
    public void AddGreenOffset(double value);
    public void AddBlue(double value);
    internal double FindValue(eColorTransformType alpha);
    internal IColorTransformItem Find(eColorTransformType alpha);
    public void AddBlueModulation(double value);
    public void AddBlueOffset(double value);
    public void AddTint(double value);
    public void AddShade(double value);
    public void AddComplement();
    public void AddGamma();
    public void AddGray();
    public void AddInverse();
    public void AddInverseGamma();
    private void AddValue(string name, eColorTransformType type);
    private void AddValue(string name, eColorTransformType type, double value);
    private XmlElement AddNode(string name);
    public sealed virtual IEnumerator`1<IColorTransformItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem : XmlHelper {
    [CompilerGeneratedAttribute]
private eColorTransformType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private eColorTransformDataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OfficeOpenXml.Drawing.Style.Coloring.ISource._fromStyleTemplate>k__BackingField;
    public eColorTransformType Type { get; private set; }
    public eColorTransformDataType DataType { get; private set; }
    public double Value { get; public set; }
    private bool OfficeOpenXml.Drawing.Style.Coloring.ISource._fromStyleTemplate { get; private set; }
    internal ExcelColorTransformItem(XmlNamespaceManager nsm, XmlNode topNode, eColorTransformType type);
    private static eColorTransformDataType GetDataType(eColorTransformType type);
    [CompilerGeneratedAttribute]
public sealed virtual eColorTransformType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(eColorTransformType value);
    [CompilerGeneratedAttribute]
public sealed virtual eColorTransformDataType get_DataType();
    [CompilerGeneratedAttribute]
private void set_DataType(eColorTransformDataType value);
    public sealed virtual double get_Value();
    public sealed virtual void set_Value(double value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool OfficeOpenXml.Drawing.Style.Coloring.ISource.get__fromStyleTemplate();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Style.Coloring.ISource.set__fromStyleTemplate(bool value);
    public virtual string ToString();
}
internal class OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem : object {
    [CompilerGeneratedAttribute]
private eColorTransformType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private eColorTransformDataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OfficeOpenXml.Drawing.Style.Coloring.ISource._fromStyleTemplate>k__BackingField;
    public eColorTransformType Type { get; public set; }
    public eColorTransformDataType DataType { get; public set; }
    public double Value { get; public set; }
    private bool OfficeOpenXml.Drawing.Style.Coloring.ISource._fromStyleTemplate { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual eColorTransformType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(eColorTransformType value);
    [CompilerGeneratedAttribute]
public sealed virtual eColorTransformDataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(eColorTransformDataType value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(double value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool OfficeOpenXml.Drawing.Style.Coloring.ISource.get__fromStyleTemplate();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Style.Coloring.ISource.set__fromStyleTemplate(bool value);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager : ExcelDrawingThemeColorManager {
    [CompilerGeneratedAttribute]
private ExcelDrawingSchemeColor <SchemeColor>k__BackingField;
    public ExcelDrawingSchemeColor SchemeColor { get; private set; }
    internal ExcelDrawingColorManager(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, String[] schemaNodeOrder, Action initMethod);
    [CompilerGeneratedAttribute]
public ExcelDrawingSchemeColor get_SchemeColor();
    [CompilerGeneratedAttribute]
private void set_SchemeColor(ExcelDrawingSchemeColor value);
    public void SetSchemeColor(eSchemeColor schemeColor);
    protected internal void ResetColors(string newNodeName);
    internal void ApplyNewColor(ExcelDrawingColorManager newColor, ExcelColorTransformCollection variation);
    private void ApplyNewTransform(IEnumerable`1<IColorTransformItem> transforms, bool isSourceStyleTemplate);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor : XmlHelper {
    internal static string NodeName;
    public double Hue { get; public set; }
    public double Saturation { get; public set; }
    public double Luminance { get; public set; }
    internal ExcelDrawingHslColor(XmlNamespaceManager nsm, XmlNode topNode);
    public double get_Hue();
    public void set_Hue(double value);
    public double get_Saturation();
    public void set_Saturation(double value);
    public double get_Luminance();
    public void set_Luminance(double value);
    internal Color GetRgbColor();
    internal static Color GetRgb(double h, double s, double l);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingPresetColor : XmlHelper {
    internal static string NodeName;
    public ePresetColor Color { get; public set; }
    internal ExcelDrawingPresetColor(XmlNamespaceManager nsm, XmlNode topNode);
    internal static ePresetColor GetPresetColor(Color presetColor);
    public ePresetColor get_Color();
    public void set_Color(ePresetColor value);
    private static string TranslateFromColor(Color c);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbColor : XmlHelper {
    internal static string NodeName;
    public Color Color { get; public set; }
    internal ExcelDrawingRgbColor(XmlNamespaceManager nsm, XmlNode topNode);
    public Color get_Color();
    public void set_Color(Color value);
    internal static Color GetColorFromString(string s);
    internal void SetXml(XmlNamespaceManager nsm, XmlNode node, bool doInit);
    internal void GetXml();
    internal void GetHsl(Double& hue, Double& saturation, Double& luminance);
    internal static void GetHslColor(Color c, Double& hue, Double& saturation, Double& luminance);
    internal static void GetHslColor(byte red, byte green, byte blue, Double& hue, Double& saturation, Double& luminance);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor : XmlHelper {
    internal static string NodeName;
    public double RedPercentage { get; public set; }
    public double GreenPercentage { get; public set; }
    public double BluePercentage { get; public set; }
    internal ExcelDrawingRgbPercentageColor(XmlNamespaceManager nsm, XmlNode topNode);
    public double get_RedPercentage();
    public void set_RedPercentage(double value);
    public double get_GreenPercentage();
    public void set_GreenPercentage(double value);
    public double get_BluePercentage();
    public void set_BluePercentage(double value);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSchemeColor : XmlHelper {
    internal static string NodeName;
    public eSchemeColor Color { get; public set; }
    internal ExcelDrawingSchemeColor(XmlNamespaceManager nsm, XmlNode topNode);
    public eSchemeColor get_Color();
    public void set_Color(eSchemeColor value);
    private eSchemeColor TranslateFromString(string v);
    private string TranslateFromEnum(eSchemeColor e);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSystemColor : XmlHelper {
    internal static string NodeName;
    public eSystemColor Color { get; public set; }
    public Color LastColor { get; }
    internal ExcelDrawingSystemColor(XmlNamespaceManager nsm, XmlNode topNode);
    public eSystemColor get_Color();
    public void set_Color(eSystemColor value);
    public Color get_LastColor();
    private eSystemColor TranslateFromString(string v);
    internal Color GetColor();
    private string TranslateFromEnum(eSystemColor e);
}
public class OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager : object {
    protected internal XmlNamespaceManager _nameSpaceManager;
    protected internal XmlNode _topNode;
    protected internal XmlNode _pathNode;
    protected internal XmlNode _colorNode;
    protected internal Action _initMethod;
    protected internal string _path;
    protected internal String[] _schemaNodeOrder;
    [CompilerGeneratedAttribute]
private eDrawingColorType <ColorType>k__BackingField;
    private ExcelColorTransformCollection _transforms;
    [CompilerGeneratedAttribute]
private ExcelDrawingRgbColor <RgbColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingRgbPercentageColor <RgbPercentageColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingHslColor <HslColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingPresetColor <PresetColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingSystemColor <SystemColor>k__BackingField;
    public eDrawingColorType ColorType { get; protected internal set; }
    public ExcelColorTransformCollection Transforms { get; }
    public ExcelDrawingRgbColor RgbColor { get; private set; }
    public ExcelDrawingRgbPercentageColor RgbPercentageColor { get; private set; }
    public ExcelDrawingHslColor HslColor { get; private set; }
    public ExcelDrawingPresetColor PresetColor { get; private set; }
    public ExcelDrawingSystemColor SystemColor { get; private set; }
    internal ExcelDrawingThemeColorManager(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, String[] schemaNodeOrder, Action initMethod);
    private bool IsTopNodeColorNode(XmlNode topNode);
    [CompilerGeneratedAttribute]
public eDrawingColorType get_ColorType();
    [CompilerGeneratedAttribute]
protected internal void set_ColorType(eDrawingColorType value);
    internal void SetXml(XmlNamespaceManager nameSpaceManager, XmlNode node);
    public ExcelColorTransformCollection get_Transforms();
    [CompilerGeneratedAttribute]
public ExcelDrawingRgbColor get_RgbColor();
    [CompilerGeneratedAttribute]
private void set_RgbColor(ExcelDrawingRgbColor value);
    [CompilerGeneratedAttribute]
public ExcelDrawingRgbPercentageColor get_RgbPercentageColor();
    [CompilerGeneratedAttribute]
private void set_RgbPercentageColor(ExcelDrawingRgbPercentageColor value);
    [CompilerGeneratedAttribute]
public ExcelDrawingHslColor get_HslColor();
    [CompilerGeneratedAttribute]
private void set_HslColor(ExcelDrawingHslColor value);
    [CompilerGeneratedAttribute]
public ExcelDrawingPresetColor get_PresetColor();
    [CompilerGeneratedAttribute]
private void set_PresetColor(ExcelDrawingPresetColor value);
    [CompilerGeneratedAttribute]
public ExcelDrawingSystemColor get_SystemColor();
    [CompilerGeneratedAttribute]
private void set_SystemColor(ExcelDrawingSystemColor value);
    public void SetRgbColor(Color color, bool setAlpha);
    public void SetRgbPercentageColor(double redPercentage, double greenPercentage, double bluePercentage);
    public void SetHslColor(double hue, double saturation, double luminance);
    public void SetPresetColor(Color color);
    public void SetPresetColor(ePresetColor presetColor);
    public void SetSystemColor(eSystemColor systemColor);
    protected internal virtual void ResetColors(string newNodeName);
    private void ChangeType(string type);
    private XmlNode GetPathNode();
}
public interface OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem {
    public eColorTransformType Type { get; }
    public eColorTransformDataType DataType { get; }
    public double Value { get; public set; }
    public abstract virtual eColorTransformType get_Type();
    public abstract virtual eColorTransformDataType get_DataType();
    public abstract virtual double get_Value();
    public abstract virtual void set_Value(double value);
}
internal interface OfficeOpenXml.Drawing.Style.Coloring.ISource {
    public bool _fromStyleTemplate { get; public set; }
    public abstract virtual bool get__fromStyleTemplate();
    public abstract virtual void set__fromStyleTemplate(bool value);
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingBlurEffect : ExcelDrawingEffectBase {
    private string _radiusPath;
    private string _glowBoundsPath;
    public Nullable`1<double> Radius { get; public set; }
    public bool GrowBounds { get; public set; }
    internal ExcelDrawingBlurEffect(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public Nullable`1<double> get_Radius();
    public void set_Radius(Nullable`1<double> value);
    public bool get_GrowBounds();
    public void set_GrowBounds(bool value);
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorChangeEffect : XmlHelper {
    private ExcelDrawingColorManager _colorFrom;
    private ExcelDrawingColorManager _colorTo;
    public ExcelDrawingColorManager ColorFrom { get; }
    public ExcelDrawingColorManager ColorTo { get; }
    internal ExcelDrawingColorChangeEffect(XmlNamespaceManager nsm, XmlNode topNode);
    public ExcelDrawingColorManager get_ColorFrom();
    public ExcelDrawingColorManager get_ColorTo();
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorReplaceEffect : XmlHelper {
    private ExcelDrawingColorManager _color;
    public ExcelDrawingColorManager Color { get; }
    internal ExcelDrawingColorReplaceEffect(XmlNamespaceManager nsm, XmlNode topNode);
    public ExcelDrawingColorManager get_Color();
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingDuotoneEffect : XmlHelper {
    private ExcelDrawingColorManager _color1;
    private ExcelDrawingColorManager _color2;
    public ExcelDrawingColorManager Color1 { get; }
    public ExcelDrawingColorManager Color2 { get; }
    internal ExcelDrawingDuotoneEffect(XmlNamespaceManager nsm, XmlNode topNode);
    public ExcelDrawingColorManager get_Color1();
    public ExcelDrawingColorManager get_Color2();
}
public abstract class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectBase : XmlHelper {
    internal string _path;
    internal ExcelDrawingEffectBase(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public void Delete();
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle : XmlHelper {
    private string _path;
    private string _softEdgeRadiusPath;
    private string _blurPath;
    private string _fillOverlayPath;
    private string _glowPath;
    private string _innerShadowPath;
    private string _outerShadowPath;
    private string _presetShadowPath;
    private string _reflectionPath;
    private IPictureRelationDocument _pictureRelationDocument;
    private ExcelDrawingBlurEffect _blur;
    private ExcelDrawingFillOverlayEffect _fillOverlay;
    private ExcelDrawingGlowEffect _glow;
    private ExcelDrawingInnerShadowEffect _innerShadowEffect;
    private ExcelDrawingOuterShadowEffect _outerShadow;
    private ExcelDrawingPresetShadowEffect _presetShadow;
    private ExcelDrawingReflectionEffect _reflection;
    public ExcelDrawingBlurEffect Blur { get; }
    public ExcelDrawingFillOverlayEffect FillOverlay { get; }
    public ExcelDrawingGlowEffect Glow { get; }
    public ExcelDrawingInnerShadowEffect InnerShadow { get; }
    public ExcelDrawingOuterShadowEffect OuterShadow { get; }
    public ExcelDrawingPresetShadowEffect PresetShadow { get; }
    public ExcelDrawingReflectionEffect Reflection { get; }
    public Nullable`1<double> SoftEdgeRadius { get; public set; }
    internal XmlElement EffectElement { get; }
    public bool HasInnerShadow { get; }
    public bool HasOuterShadow { get; }
    public bool HasPresetShadow { get; }
    public bool HasBlur { get; }
    public bool HasGlow { get; }
    public bool HasFillOverlay { get; }
    internal ExcelDrawingEffectStyle(IPictureRelationDocument pictureRelationDocument, XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, String[] schemaNodeOrder);
    public ExcelDrawingBlurEffect get_Blur();
    public ExcelDrawingFillOverlayEffect get_FillOverlay();
    public ExcelDrawingGlowEffect get_Glow();
    public ExcelDrawingInnerShadowEffect get_InnerShadow();
    public ExcelDrawingOuterShadowEffect get_OuterShadow();
    public ExcelDrawingPresetShadowEffect get_PresetShadow();
    public ExcelDrawingReflectionEffect get_Reflection();
    public Nullable`1<double> get_SoftEdgeRadius();
    public void set_SoftEdgeRadius(Nullable`1<double> value);
    internal XmlElement get_EffectElement();
    public bool get_HasInnerShadow();
    public bool get_HasOuterShadow();
    public bool get_HasPresetShadow();
    public bool get_HasBlur();
    public bool get_HasGlow();
    public bool get_HasFillOverlay();
    internal void SetFromXml(XmlElement copyFromEffectElement);
    private void SetPredefinedOuterShadow(ePresetExcelShadowType shadowType);
    private void SetPredefinedInnerShadow(ePresetExcelShadowType shadowType);
    public void SetPresetSoftEdges(ePresetExcelSoftEdgesType softEdgesType);
    public void SetPresetGlow(ePresetExcelGlowType glowType);
    public void SetPresetShadow(ePresetExcelShadowType shadowType);
    public void SetPresetReflection(ePresetExcelReflectionType reflectionType);
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect : ExcelDrawingEffectBase {
    private IPictureRelationDocument _pictureRelationDocument;
    [CompilerGeneratedAttribute]
private ExcelDrawingFill <Fill>k__BackingField;
    public ExcelDrawingFill Fill { get; private set; }
    public eBlendMode Blend { get; public set; }
    internal ExcelDrawingFillOverlayEffect(IPictureRelationDocument pictureRelationDocument, XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    [CompilerGeneratedAttribute]
public ExcelDrawingFill get_Fill();
    [CompilerGeneratedAttribute]
private void set_Fill(ExcelDrawingFill value);
    public eBlendMode get_Blend();
    public void set_Blend(eBlendMode value);
    public void Create();
    public void Remove();
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingGlowEffect : ExcelDrawingEffectBase {
    private string _radiusPath;
    private ExcelDrawingColorManager _color;
    public ExcelDrawingColorManager Color { get; }
    public Nullable`1<double> Radius { get; public set; }
    internal ExcelDrawingGlowEffect(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public ExcelDrawingColorManager get_Color();
    public Nullable`1<double> get_Radius();
    public void set_Radius(Nullable`1<double> value);
    private void InitXml();
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingInnerShadowEffect : ExcelDrawingShadowEffect {
    private string _blurRadPath;
    public Nullable`1<double> BlurRadius { get; public set; }
    internal ExcelDrawingInnerShadowEffect(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public Nullable`1<double> get_BlurRadius();
    public void set_BlurRadius(Nullable`1<double> value);
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect : ExcelDrawingInnerShadowEffect {
    private string _shadowAlignmentPath;
    private string _rotateWithShapePath;
    private string _verticalSkewAnglePath;
    private string _horizontalSkewAnglePath;
    private string _verticalScalingFactorPath;
    private string _horizontalScalingFactorPath;
    public eRectangleAlignment Alignment { get; public set; }
    public bool RotateWithShape { get; public set; }
    public double HorizontalSkewAngle { get; public set; }
    public double VerticalSkewAngle { get; public set; }
    public double HorizontalScalingFactor { get; public set; }
    public double VerticalScalingFactor { get; public set; }
    internal ExcelDrawingOuterShadowEffect(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public eRectangleAlignment get_Alignment();
    public void set_Alignment(eRectangleAlignment value);
    public bool get_RotateWithShape();
    public void set_RotateWithShape(bool value);
    public double get_HorizontalSkewAngle();
    public void set_HorizontalSkewAngle(double value);
    public double get_VerticalSkewAngle();
    public void set_VerticalSkewAngle(double value);
    public double get_HorizontalScalingFactor();
    public void set_HorizontalScalingFactor(double value);
    public double get_VerticalScalingFactor();
    public void set_VerticalScalingFactor(double value);
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingPresetShadowEffect : ExcelDrawingShadowEffect {
    private string _typePath;
    public ePresetShadowType Type { get; public set; }
    internal ExcelDrawingPresetShadowEffect(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public ePresetShadowType get_Type();
    public void set_Type(ePresetShadowType value);
}
public class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect : ExcelDrawingShadowEffectBase {
    private string _directionPath;
    private string _startPositionPath;
    private string _startOpacityPath;
    private string _endPositionPath;
    private string _endOpacityPath;
    private string _fadeDirectionPath;
    private string _shadowAlignmentPath;
    private string _rotateWithShapePath;
    private string _verticalSkewAnglePath;
    private string _horizontalSkewAnglePath;
    private string _verticalScalingFactorPath;
    private string _horizontalScalingFactorPath;
    private string _blurRadPath;
    public Nullable`1<double> StartPosition { get; public set; }
    public Nullable`1<double> StartOpacity { get; public set; }
    public Nullable`1<double> EndPosition { get; public set; }
    public Nullable`1<double> EndOpacity { get; public set; }
    public Nullable`1<double> FadeDirection { get; public set; }
    public eRectangleAlignment Alignment { get; public set; }
    public bool RotateWithShape { get; public set; }
    public Nullable`1<double> HorizontalSkewAngle { get; public set; }
    public Nullable`1<double> VerticalSkewAngle { get; public set; }
    public Nullable`1<double> HorizontalScalingFactor { get; public set; }
    public Nullable`1<double> VerticalScalingFactor { get; public set; }
    public Nullable`1<double> Direction { get; public set; }
    public Nullable`1<double> BlurRadius { get; public set; }
    internal ExcelDrawingReflectionEffect(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public Nullable`1<double> get_StartPosition();
    public void set_StartPosition(Nullable`1<double> value);
    public Nullable`1<double> get_StartOpacity();
    public void set_StartOpacity(Nullable`1<double> value);
    public Nullable`1<double> get_EndPosition();
    public void set_EndPosition(Nullable`1<double> value);
    public Nullable`1<double> get_EndOpacity();
    public void set_EndOpacity(Nullable`1<double> value);
    public Nullable`1<double> get_FadeDirection();
    public void set_FadeDirection(Nullable`1<double> value);
    public eRectangleAlignment get_Alignment();
    public void set_Alignment(eRectangleAlignment value);
    public bool get_RotateWithShape();
    public void set_RotateWithShape(bool value);
    public Nullable`1<double> get_HorizontalSkewAngle();
    public void set_HorizontalSkewAngle(Nullable`1<double> value);
    public Nullable`1<double> get_VerticalSkewAngle();
    public void set_VerticalSkewAngle(Nullable`1<double> value);
    public Nullable`1<double> get_HorizontalScalingFactor();
    public void set_HorizontalScalingFactor(Nullable`1<double> value);
    public Nullable`1<double> get_VerticalScalingFactor();
    public void set_VerticalScalingFactor(Nullable`1<double> value);
    public Nullable`1<double> get_Direction();
    public void set_Direction(Nullable`1<double> value);
    public Nullable`1<double> get_BlurRadius();
    public void set_BlurRadius(Nullable`1<double> value);
}
public abstract class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect : ExcelDrawingShadowEffectBase {
    private string _directionPath;
    private ExcelDrawingColorManager _color;
    public ExcelDrawingColorManager Color { get; }
    public Nullable`1<double> Direction { get; public set; }
    internal ExcelDrawingShadowEffect(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public ExcelDrawingColorManager get_Color();
    public Nullable`1<double> get_Direction();
    public void set_Direction(Nullable`1<double> value);
    protected internal void InitXml();
}
public abstract class OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffectBase : ExcelDrawingEffectBase {
    private string _distancePath;
    public double Distance { get; public set; }
    internal ExcelDrawingShadowEffectBase(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public double get_Distance();
    public void set_Distance(double value);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Drawing.Style.EnumTranslateExtentions : object {
    [ExtensionAttribute]
internal static string TranslateString(eRectangleAlignment alignment);
    [ExtensionAttribute]
internal static eRectangleAlignment TranslateRectangleAlignment(string v);
    [ExtensionAttribute]
internal static string TranslateString(ePresetShadowType v);
    [ExtensionAttribute]
internal static ePresetShadowType TranslatePresetShadowType(string s);
    [ExtensionAttribute]
internal static eLightRigDirection TranslateLightRigDirection(string s);
    [ExtensionAttribute]
internal static string TranslateString(eLightRigDirection v);
    [ExtensionAttribute]
internal static ePresetColor TranslatePresetColor(string v);
    [ExtensionAttribute]
internal static string TranslateString(ePresetColor v);
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects : XmlHelper {
    private static string _duoTonePath;
    private static string _clrChangePath;
    private static string _clrReplPath;
    [CompilerGeneratedAttribute]
private ExcelDrawingDuotoneEffect <Duotone>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingColorChangeEffect <ColorChange>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingColorReplaceEffect <ColorReplace>k__BackingField;
    public ExcelDrawingDuotoneEffect Duotone { get; private set; }
    public ExcelDrawingColorChangeEffect ColorChange { get; private set; }
    public ExcelDrawingColorReplaceEffect ColorReplace { get; private set; }
    internal ExcelDrawingBlipEffects(XmlNamespaceManager nsm, XmlNode topNode);
    public void AddDuotone();
    public void RemoveDuotone();
    [CompilerGeneratedAttribute]
public ExcelDrawingDuotoneEffect get_Duotone();
    [CompilerGeneratedAttribute]
private void set_Duotone(ExcelDrawingDuotoneEffect value);
    public void AddColorChange();
    public void RemoveColorChange();
    [CompilerGeneratedAttribute]
public ExcelDrawingColorChangeEffect get_ColorChange();
    [CompilerGeneratedAttribute]
private void set_ColorChange(ExcelDrawingColorChangeEffect value);
    public void AddColorReplace();
    public void RemoveColorReplace();
    [CompilerGeneratedAttribute]
public ExcelDrawingColorReplaceEffect get_ColorReplace();
    [CompilerGeneratedAttribute]
private void set_ColorReplace(ExcelDrawingColorReplaceEffect value);
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill : ExcelDrawingFillBase {
    private String[] _schemaNodeOrder;
    private IPictureRelationDocument _pictureRelationDocument;
    [CompilerGeneratedAttribute]
private ExcelImage <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stretch>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingRectangle <StretchOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingRectangle <SourceRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingBlipFillTile <Tile>k__BackingField;
    private ExcelDrawingBlipEffects _effects;
    [CompilerGeneratedAttribute]
private string <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public ExcelImage Image { get; }
    public bool Stretch { get; public set; }
    public ExcelDrawingRectangle StretchOffset { get; private set; }
    public ExcelDrawingRectangle SourceRectangle { get; private set; }
    public ExcelDrawingBlipFillTile Tile { get; private set; }
    public eFillStyle Style { get; }
    public ExcelDrawingBlipEffects Effects { get; }
    internal string NodeName { get; }
    private string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash { get; private set; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic { get; private set; }
    private ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic { get; private set; }
    internal string ContentType { get; internal set; }
    private IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelationDocument { get; }
    internal ExcelDrawingBlipFill(IPictureRelationDocument pictureRelationDocument, XmlNamespaceManager nsm, XmlNode topNode, string fillPath, String[] schemaNodeOrder, Action initXml);
    [CompilerGeneratedAttribute]
public ExcelImage get_Image();
    [CompilerGeneratedAttribute]
public bool get_Stretch();
    [CompilerGeneratedAttribute]
public void set_Stretch(bool value);
    [CompilerGeneratedAttribute]
public ExcelDrawingRectangle get_StretchOffset();
    [CompilerGeneratedAttribute]
private void set_StretchOffset(ExcelDrawingRectangle value);
    [CompilerGeneratedAttribute]
public ExcelDrawingRectangle get_SourceRectangle();
    [CompilerGeneratedAttribute]
private void set_SourceRectangle(ExcelDrawingRectangle value);
    [CompilerGeneratedAttribute]
public ExcelDrawingBlipFillTile get_Tile();
    [CompilerGeneratedAttribute]
private void set_Tile(ExcelDrawingBlipFillTile value);
    public virtual eFillStyle get_Style();
    public ExcelDrawingBlipEffects get_Effects();
    internal virtual string get_NodeName();
    internal virtual void GetXml();
    internal virtual void SetXml(XmlNamespaceManager nsm, XmlNode node);
    internal virtual void UpdateXml();
    internal void AddImage(FileInfo file);
    [CompilerGeneratedAttribute]
private sealed virtual override string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_ImageHash();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_ImageHash(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_UriPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_UriPic(Uri value);
    [CompilerGeneratedAttribute]
private sealed virtual override ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_RelPic(ZipPackageRelationship value);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.SetNewImage();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RemoveImage();
    [CompilerGeneratedAttribute]
internal string get_ContentType();
    [CompilerGeneratedAttribute]
internal void set_ContentType(string value);
    private sealed virtual override IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelationDocument();
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile : object {
    [CompilerGeneratedAttribute]
private Nullable`1<eTileFlipMode> <FlipMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<eRectangleAlignment> <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalOffset>k__BackingField;
    public Nullable`1<eTileFlipMode> FlipMode { get; public set; }
    public Nullable`1<eRectangleAlignment> Alignment { get; public set; }
    public double HorizontalRatio { get; public set; }
    public double VerticalRatio { get; public set; }
    public double HorizontalOffset { get; public set; }
    public double VerticalOffset { get; public set; }
    internal ExcelDrawingBlipFillTile(XmlHelper xml);
    [CompilerGeneratedAttribute]
public Nullable`1<eTileFlipMode> get_FlipMode();
    [CompilerGeneratedAttribute]
public void set_FlipMode(Nullable`1<eTileFlipMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<eRectangleAlignment> get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(Nullable`1<eRectangleAlignment> value);
    [CompilerGeneratedAttribute]
public double get_HorizontalRatio();
    [CompilerGeneratedAttribute]
public void set_HorizontalRatio(double value);
    [CompilerGeneratedAttribute]
public double get_VerticalRatio();
    [CompilerGeneratedAttribute]
public void set_VerticalRatio(double value);
    [CompilerGeneratedAttribute]
public double get_HorizontalOffset();
    [CompilerGeneratedAttribute]
public void set_HorizontalOffset(double value);
    [CompilerGeneratedAttribute]
public double get_VerticalOffset();
    [CompilerGeneratedAttribute]
public void set_VerticalOffset(double value);
}
public abstract class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase : object {
    internal Action _initXml;
    protected internal XmlHelper _xml;
    protected internal XmlNode _topNode;
    protected internal XmlNamespaceManager _nsm;
    protected internal string _fillPath;
    public eFillStyle Style { get; }
    internal string NodeName { get; }
    protected internal ExcelDrawingFillBase(XmlNamespaceManager nsm, XmlNode topNode, string fillPath, Action initXml);
    public abstract virtual eFillStyle get_Style();
    protected internal void CheckTypeChange(string type);
    protected internal void InitXml(XmlNamespaceManager nsm, XmlNode node, string fillPath);
    protected internal void CreateXmlHelper();
    internal abstract virtual string get_NodeName();
    internal abstract virtual void GetXml();
    internal abstract virtual void SetXml(XmlNamespaceManager nsm, XmlNode node);
    internal abstract virtual void UpdateXml();
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill : ExcelDrawingFillBase {
    private String[] _schemaNodeOrder;
    [CompilerGeneratedAttribute]
private eTileFlipMode <TileFlip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RotateWithShape>k__BackingField;
    private ExcelDrawingGradientFillColorList _colors;
    private static string ColorsPath;
    private eShadePath _shadePath;
    [CompilerGeneratedAttribute]
private ExcelDrawingRectangle <FocusPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingGradientFillLinearSettings <LinearSettings>k__BackingField;
    public eTileFlipMode TileFlip { get; public set; }
    public bool RotateWithShape { get; public set; }
    public ExcelDrawingGradientFillColorList Colors { get; }
    public eFillStyle Style { get; }
    internal string NodeName { get; }
    public eShadePath ShadePath { get; public set; }
    public ExcelDrawingRectangle FocusPoint { get; private set; }
    public ExcelDrawingGradientFillLinearSettings LinearSettings { get; private set; }
    internal ExcelDrawingGradientFill(XmlNamespaceManager nsm, XmlNode topNode, String[] schemaNodeOrder, Action initXml);
    [CompilerGeneratedAttribute]
public eTileFlipMode get_TileFlip();
    [CompilerGeneratedAttribute]
public void set_TileFlip(eTileFlipMode value);
    [CompilerGeneratedAttribute]
public bool get_RotateWithShape();
    [CompilerGeneratedAttribute]
public void set_RotateWithShape(bool value);
    public ExcelDrawingGradientFillColorList get_Colors();
    public virtual eFillStyle get_Style();
    internal virtual string get_NodeName();
    internal virtual void SetXml(XmlNamespaceManager nsm, XmlNode node);
    private string GetPathString(eShadePath shadePath);
    internal virtual void GetXml();
    public eShadePath get_ShadePath();
    public void set_ShadePath(eShadePath value);
    [CompilerGeneratedAttribute]
public ExcelDrawingRectangle get_FocusPoint();
    [CompilerGeneratedAttribute]
private void set_FocusPoint(ExcelDrawingRectangle value);
    [CompilerGeneratedAttribute]
public ExcelDrawingGradientFillLinearSettings get_LinearSettings();
    [CompilerGeneratedAttribute]
private void set_LinearSettings(ExcelDrawingGradientFillLinearSettings value);
    internal virtual void UpdateXml();
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColor : object {
    [CompilerGeneratedAttribute]
private double <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDrawingColorManager <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNode <TopNode>k__BackingField;
    public double Position { get; internal set; }
    public ExcelDrawingColorManager Color { get; public set; }
    internal XmlNode TopNode { get; internal set; }
    [CompilerGeneratedAttribute]
public double get_Position();
    [CompilerGeneratedAttribute]
internal void set_Position(double value);
    [CompilerGeneratedAttribute]
public ExcelDrawingColorManager get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ExcelDrawingColorManager value);
    [CompilerGeneratedAttribute]
internal XmlNode get_TopNode();
    [CompilerGeneratedAttribute]
internal void set_TopNode(XmlNode value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList : object {
    private List`1<ExcelDrawingGradientFillColor> _lst;
    private XmlNamespaceManager _nsm;
    private XmlNode _topNode;
    private XmlNode _gsLst;
    private string _path;
    private String[] _schemaNodeOrder;
    public ExcelDrawingGradientFillColor Item { get; }
    public int Count { get; }
    public ExcelDrawingGradientFillColor Item { get; }
    internal ExcelDrawingGradientFillColorList(XmlNamespaceManager nsm, XmlNode topNode, string path, String[] schemaNodeOrder);
    public ExcelDrawingGradientFillColor get_Item(int index);
    public int get_Count();
    public ExcelDrawingGradientFillColor get_Item(double position);
    public void AddRgb(double position, Color color);
    public void AddRgbPercentage(double position, double redPercentage, double greenPercentage, double bluePercentage);
    public void AddScheme(double position, eSchemeColor color);
    public void AddSystem(double position, eSystemColor color);
    public void AddHsl(double position, double hue, double saturation, double luminance);
    public void AddPreset(double position, ePresetColor color);
    private ExcelDrawingGradientFillColor GetGradientFillColor(double position);
    private XmlElement AddGs(double position, XmlNode node);
    public sealed virtual IEnumerator`1<ExcelDrawingGradientFillColor> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(double position, XmlNode node);
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillLinearSettings : object {
    [CompilerGeneratedAttribute]
private double <Angel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Scaled>k__BackingField;
    public double Angel { get; public set; }
    public bool Scaled { get; public set; }
    internal ExcelDrawingGradientFillLinearSettings(XmlHelper xml);
    [CompilerGeneratedAttribute]
public double get_Angel();
    [CompilerGeneratedAttribute]
public void set_Angel(double value);
    [CompilerGeneratedAttribute]
public bool get_Scaled();
    [CompilerGeneratedAttribute]
public void set_Scaled(bool value);
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingNoFill : ExcelDrawingFillBase {
    public eFillStyle Style { get; }
    internal string NodeName { get; }
    internal ExcelDrawingNoFill(ExcelDrawing drawing);
    public virtual eFillStyle get_Style();
    internal virtual string get_NodeName();
    internal virtual void GetXml();
    internal virtual void SetXml(XmlNamespaceManager nsm, XmlNode node);
    internal virtual void UpdateXml();
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill : ExcelDrawingFillBase {
    private String[] _schemaNodeOrder;
    private eFillPatternStyle _pattern;
    private ExcelDrawingColorManager _fgColor;
    private ExcelDrawingColorManager _bgColor;
    public eFillStyle Style { get; }
    public eFillPatternStyle PatternType { get; public set; }
    public ExcelDrawingColorManager ForegroundColor { get; }
    public ExcelDrawingColorManager BackgroundColor { get; }
    internal string NodeName { get; }
    internal ExcelDrawingPatternFill(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string fillPath, String[] schemaNodeOrder, Action initXml);
    public virtual eFillStyle get_Style();
    public eFillPatternStyle get_PatternType();
    public void set_PatternType(eFillPatternStyle value);
    public ExcelDrawingColorManager get_ForegroundColor();
    public ExcelDrawingColorManager get_BackgroundColor();
    internal virtual string get_NodeName();
    internal virtual void SetXml(XmlNamespaceManager nsm, XmlNode node);
    internal virtual void GetXml();
    internal virtual void UpdateXml();
}
public class OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingSolidFill : ExcelDrawingFillBase {
    private String[] _schemaNodeOrder;
    private ExcelDrawingColorManager _color;
    public eFillStyle Style { get; }
    public ExcelDrawingColorManager Color { get; }
    internal string NodeName { get; }
    internal ExcelDrawingSolidFill(XmlNamespaceManager nsm, XmlNode topNode, string fillPath, String[] schemaNodeOrder, Action initXml);
    public virtual eFillStyle get_Style();
    public ExcelDrawingColorManager get_Color();
    internal virtual string get_NodeName();
    internal virtual void SetXml(XmlNamespaceManager nsm, XmlNode node);
    internal virtual void GetXml();
    internal virtual void UpdateXml();
}
public class OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFont : ExcelDrawingFontBase {
    public string Script { get; internal set; }
    internal ExcelDrawingFont(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public string get_Script();
    internal void set_Script(string value);
}
public class OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontBase : XmlHelper {
    public string Typeface { get; internal set; }
    internal ExcelDrawingFontBase(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public string get_Typeface();
    internal void set_Typeface(string value);
}
public class OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial : ExcelDrawingFontBase {
    public eFontType Type { get; }
    public string Panose { get; public set; }
    public ePitchFamily PitchFamily { get; public set; }
    internal ExcelDrawingFontSpecial(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public eFontType get_Type();
    public string get_Panose();
    public void set_Panose(string value);
    public ePitchFamily get_PitchFamily();
    public void set_PitchFamily(ePitchFamily value);
}
public class OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D : XmlHelper {
    private string _sp3dPath;
    private string _scene3dPath;
    private string _bevelTPath;
    private string _bevelBPath;
    private string _extrusionColorPath;
    private string _contourColorPath;
    private string _contourWidthPath;
    private string _extrusionHeightPath;
    private string _shapeDepthPath;
    private string _materialTypePath;
    private string _path;
    private ExcelDrawingScene3D _scene3D;
    private ExcelDrawing3DBevel _topBevel;
    private ExcelDrawing3DBevel _bottomBevel;
    private ExcelDrawingColorManager _extrusionColor;
    private ExcelDrawingColorManager _contourColor;
    private bool isInit;
    public ExcelDrawingScene3D Scene { get; }
    public double ExtrusionHeight { get; public set; }
    public double ContourWidth { get; public set; }
    public ExcelDrawing3DBevel TopBevel { get; }
    public ExcelDrawing3DBevel BottomBevel { get; }
    public ExcelDrawingColorManager ExtrusionColor { get; }
    public ExcelDrawingColorManager ContourColor { get; }
    public ePresetMaterialType MaterialType { get; public set; }
    public Nullable`1<double> ShapeDepthZCoordinate { get; public set; }
    internal XmlElement Scene3DElement { get; }
    internal XmlElement Sp3DElement { get; }
    internal ExcelDrawing3D(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, String[] schemaNodeOrder);
    public ExcelDrawingScene3D get_Scene();
    public double get_ExtrusionHeight();
    public void set_ExtrusionHeight(double value);
    public double get_ContourWidth();
    public void set_ContourWidth(double value);
    public ExcelDrawing3DBevel get_TopBevel();
    public ExcelDrawing3DBevel get_BottomBevel();
    public ExcelDrawingColorManager get_ExtrusionColor();
    public ExcelDrawingColorManager get_ContourColor();
    public ePresetMaterialType get_MaterialType();
    public void set_MaterialType(ePresetMaterialType value);
    public Nullable`1<double> get_ShapeDepthZCoordinate();
    public void set_ShapeDepthZCoordinate(Nullable`1<double> value);
    internal XmlElement get_Scene3DElement();
    internal XmlElement get_Sp3DElement();
    internal void InitXml(bool delete);
    public void Delete();
    private void InitContourColor();
    private void InitExtrusionColor();
    internal void SetFromXml(XmlElement copyFromScene3DElement, XmlElement copyFromSp3DElement);
    private void CopyXml(XmlElement copyFrom, XmlElement to);
}
public class OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel : XmlHelper {
    private bool _isInit;
    private string _path;
    private string _widthPath;
    private string _heightPath;
    private string _typePath;
    private Action`1<bool> _initParent;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public eBevelPresetType BevelType { get; public set; }
    internal ExcelDrawing3DBevel(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path, Action`1<bool> initParent);
    public double get_Width();
    public void set_Width(double value);
    private void InitXml();
    public double get_Height();
    public void set_Height(double value);
    public eBevelPresetType get_BevelType();
    public void set_BevelType(eBevelPresetType value);
}
public class OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DText : ExcelDrawing3D {
    private string _flatTextZCoordinatePath;
    public double FlatTextZCoordinate { get; public set; }
    internal ExcelDrawing3DText(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public double get_FlatTextZCoordinate();
    public void set_FlatTextZCoordinate(double value);
}
public class OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D : XmlHelper {
    protected internal string _path;
    private string _cameraPath;
    private string _lightRigPath;
    private string _backDropPath;
    private ExcelDrawingScene3DCamera _camera;
    private ExcelDrawingScene3DLightRig _lightRig;
    private ExcelDrawingScene3DBackDrop _backDropPlane;
    private bool hasInit;
    public ExcelDrawingScene3DCamera Camera { get; }
    public ExcelDrawingScene3DLightRig LightRig { get; }
    public ExcelDrawingScene3DBackDrop BackDropPlane { get; }
    internal ExcelDrawingScene3D(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path);
    public ExcelDrawingScene3DCamera get_Camera();
    public ExcelDrawingScene3DLightRig get_LightRig();
    public ExcelDrawingScene3DBackDrop get_BackDropPlane();
    internal void InitXml(bool delete);
}
public class OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop : XmlHelper {
    private string _anchorPath;
    private string _normPath;
    private string _upPath;
    private Action`1<bool> _initParent;
    private ExcelDrawingPoint3D _anchorPoint;
    private ExcelDrawingPoint3D _upVector;
    private ExcelDrawingPoint3D _normalVector;
    public ExcelDrawingPoint3D AnchorPoint { get; }
    public ExcelDrawingPoint3D UpVector { get; }
    public ExcelDrawingPoint3D NormalVector { get; }
    internal ExcelDrawingScene3DBackDrop(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path, Action`1<bool> initParent);
    public ExcelDrawingPoint3D get_AnchorPoint();
    public ExcelDrawingPoint3D get_UpVector();
    public ExcelDrawingPoint3D get_NormalVector();
    private void InitXml(bool delete);
}
public class OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera : XmlHelper {
    protected internal string _path;
    private string _fieldOfViewAnglePath;
    private string _typePath;
    private string _zoomPath;
    private string _rotationPath;
    private Action`1<bool> _initParent;
    private ExcelDrawingSphereCoordinate _rotation;
    public ExcelDrawingSphereCoordinate Rotation { get; }
    public double FieldOfViewAngle { get; public set; }
    public ePresetCameraType CameraType { get; public set; }
    public double Zoom { get; public set; }
    internal ExcelDrawingScene3DCamera(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path, Action`1<bool> initParent);
    public ExcelDrawingSphereCoordinate get_Rotation();
    public double get_FieldOfViewAngle();
    public void set_FieldOfViewAngle(double value);
    public ePresetCameraType get_CameraType();
    public void set_CameraType(ePresetCameraType value);
    public double get_Zoom();
    public void set_Zoom(double value);
}
public class OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig : XmlHelper {
    protected internal string _path;
    private string _directionPath;
    private string _typePath;
    private string _rotationPath;
    private Action`1<bool> _initParent;
    private ExcelDrawingSphereCoordinate _rotation;
    public ExcelDrawingSphereCoordinate Rotation { get; }
    public eLightRigDirection Direction { get; public set; }
    public eRigPresetType RigType { get; public set; }
    internal ExcelDrawingScene3DLightRig(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder, string path, Action`1<bool> initParent);
    public ExcelDrawingSphereCoordinate get_Rotation();
    public eLightRigDirection get_Direction();
    public void set_Direction(eLightRigDirection value);
    public eRigPresetType get_RigType();
    public void set_RigType(eRigPresetType value);
}
public enum OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType : Enum {
    public int value__;
    public static eThemeFontCollectionType None;
    public static eThemeFontCollectionType Minor;
    public static eThemeFontCollectionType Major;
}
public class OfficeOpenXml.Drawing.Theme.ExcelColorScheme : XmlHelper {
    private static string Dk1Path;
    private ExcelDrawingThemeColorManager _dk1;
    private static string Dk2Path;
    private ExcelDrawingThemeColorManager _dk2;
    private static string lt1Path;
    private ExcelDrawingThemeColorManager _lt1;
    private static string lt2Path;
    private ExcelDrawingThemeColorManager _lt2;
    private static string Accent1Path;
    private ExcelDrawingThemeColorManager _accent1;
    private static string Accent2Path;
    private ExcelDrawingThemeColorManager _accent2;
    private static string Accent3Path;
    private ExcelDrawingThemeColorManager _accent3;
    private static string Accent4Path;
    private ExcelDrawingThemeColorManager _accent4;
    private static string Accent5Path;
    private ExcelDrawingThemeColorManager _accent5;
    private static string Accent6Path;
    private ExcelDrawingThemeColorManager _accent6;
    private static string HlinkPath;
    private ExcelDrawingThemeColorManager _hlink;
    private static string FolHlinkPath;
    private ExcelDrawingThemeColorManager _folHlink;
    public ExcelDrawingThemeColorManager Dark1 { get; }
    public ExcelDrawingThemeColorManager Dark2 { get; }
    public ExcelDrawingThemeColorManager Light1 { get; }
    public ExcelDrawingThemeColorManager Light2 { get; }
    public ExcelDrawingThemeColorManager Accent1 { get; }
    public ExcelDrawingThemeColorManager Accent2 { get; }
    public ExcelDrawingThemeColorManager Accent3 { get; }
    public ExcelDrawingThemeColorManager Accent4 { get; }
    public ExcelDrawingThemeColorManager Accent5 { get; }
    public ExcelDrawingThemeColorManager Accent6 { get; }
    public ExcelDrawingThemeColorManager Hyperlink { get; }
    public ExcelDrawingThemeColorManager FollowedHyperlink { get; }
    internal ExcelColorScheme(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public ExcelDrawingThemeColorManager get_Dark1();
    internal ExcelDrawingThemeColorManager GetColorByEnum(eThemeSchemeColor color);
    public ExcelDrawingThemeColorManager get_Dark2();
    public ExcelDrawingThemeColorManager get_Light1();
    public ExcelDrawingThemeColorManager get_Light2();
    public ExcelDrawingThemeColorManager get_Accent1();
    public ExcelDrawingThemeColorManager get_Accent2();
    public ExcelDrawingThemeColorManager get_Accent3();
    public ExcelDrawingThemeColorManager get_Accent4();
    public ExcelDrawingThemeColorManager get_Accent5();
    public ExcelDrawingThemeColorManager get_Accent6();
    public ExcelDrawingThemeColorManager get_Hyperlink();
    public ExcelDrawingThemeColorManager get_FollowedHyperlink();
}
public class OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle : object {
    [CompilerGeneratedAttribute]
private double <TopOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BottomOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LeftOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RightOffset>k__BackingField;
    public double TopOffset { get; public set; }
    public double BottomOffset { get; public set; }
    public double LeftOffset { get; public set; }
    public double RightOffset { get; public set; }
    internal ExcelDrawingRectangle(XmlHelper xml, string path, double defaultValue);
    internal ExcelDrawingRectangle(double defaultValue);
    [CompilerGeneratedAttribute]
public double get_TopOffset();
    [CompilerGeneratedAttribute]
public void set_TopOffset(double value);
    [CompilerGeneratedAttribute]
public double get_BottomOffset();
    [CompilerGeneratedAttribute]
public void set_BottomOffset(double value);
    [CompilerGeneratedAttribute]
public double get_LeftOffset();
    [CompilerGeneratedAttribute]
public void set_LeftOffset(double value);
    [CompilerGeneratedAttribute]
public double get_RightOffset();
    [CompilerGeneratedAttribute]
public void set_RightOffset(double value);
}
public class OfficeOpenXml.Drawing.Theme.ExcelFontScheme : XmlHelper {
    private ExcelPackage _pck;
    private ExcelThemeFontCollection _majorFont;
    private ExcelThemeFontCollection _minorFont;
    public string Name { get; public set; }
    public ExcelThemeFontCollection MajorFont { get; }
    public ExcelThemeFontCollection MinorFont { get; }
    internal ExcelFontScheme(ExcelPackage pck, XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public string get_Name();
    public void set_Name(string value);
    public ExcelThemeFontCollection get_MajorFont();
    public ExcelThemeFontCollection get_MinorFont();
}
public class OfficeOpenXml.Drawing.Theme.ExcelFormatScheme : XmlHelper {
    private ExcelThemeBase _theme;
    private static string fillStylePath;
    private ExcelThemeFillStyles _fillStyle;
    private static string lineStylePath;
    private ExcelThemeLineStyles _lineStyle;
    private static string effectStylePath;
    private ExcelThemeEffectStyles _effectStyle;
    private static string backgroundFillStylePath;
    private ExcelThemeFillStyles _backgroundFillStyle;
    public string Name { get; public set; }
    public ExcelThemeFillStyles FillStyle { get; }
    public ExcelThemeLineStyles BorderStyle { get; }
    public ExcelThemeEffectStyles EffectStyle { get; }
    public ExcelThemeFillStyles BackgroundFillStyle { get; }
    internal ExcelFormatScheme(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelThemeBase theme);
    public string get_Name();
    public void set_Name(string value);
    public ExcelThemeFillStyles get_FillStyle();
    public ExcelThemeLineStyles get_BorderStyle();
    public ExcelThemeEffectStyles get_EffectStyle();
    public ExcelThemeFillStyles get_BackgroundFillStyle();
}
public class OfficeOpenXml.Drawing.Theme.ExcelTheme : ExcelThemeBase {
    internal ExcelWorkbook _wb;
    public string Name { get; public set; }
    internal ExcelTheme(ExcelWorkbook workbook, ZipPackageRelationship rel);
    public string get_Name();
    public void set_Name(string value);
}
public class OfficeOpenXml.Drawing.Theme.ExcelThemeBase : XmlHelper {
    private string _colorSchemePath;
    private string _fontSchemePath;
    private string _fmtSchemePath;
    private ExcelPackage _pck;
    private Dictionary`2<string, HashInfo> _hashes;
    [CompilerGeneratedAttribute]
private Uri <ThemeUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <ThemeXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationshipId>k__BackingField;
    internal ExcelColorScheme _colorScheme;
    internal ExcelFontScheme _fontScheme;
    private ExcelFormatScheme _formatScheme;
    internal Uri ThemeUri { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    public XmlDocument ThemeXml { get; internal set; }
    internal string RelationshipId { get; internal set; }
    public ExcelColorScheme ColorScheme { get; }
    public ExcelFontScheme FontScheme { get; }
    public ExcelFormatScheme FormatScheme { get; }
    private ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Package { get; }
    private Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Hashes { get; }
    private ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedPart { get; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedUri { get; }
    internal ExcelThemeBase(ExcelPackage package, XmlNamespaceManager nsm, ZipPackageRelationship rel, string path);
    [CompilerGeneratedAttribute]
internal Uri get_ThemeUri();
    [CompilerGeneratedAttribute]
internal void set_ThemeUri(Uri value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
public XmlDocument get_ThemeXml();
    [CompilerGeneratedAttribute]
internal void set_ThemeXml(XmlDocument value);
    [CompilerGeneratedAttribute]
internal string get_RelationshipId();
    [CompilerGeneratedAttribute]
internal void set_RelationshipId(string value);
    public ExcelColorScheme get_ColorScheme();
    public ExcelFontScheme get_FontScheme();
    public ExcelFormatScheme get_FormatScheme();
    private sealed virtual override ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Package();
    private sealed virtual override Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Hashes();
    private sealed virtual override ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedPart();
    private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedUri();
}
public class OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle : XmlHelper {
    private string _path;
    private String[] _schemaNodeOrder;
    private ExcelThemeBase _theme;
    private ExcelDrawingEffectStyle _effects;
    private ExcelDrawing3D _threeD;
    public ExcelDrawingEffectStyle Effect { get; }
    public ExcelDrawing3D ThreeD { get; }
    internal ExcelThemeEffectStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, string path, String[] schemaNodeOrder, ExcelThemeBase theme);
    public ExcelDrawingEffectStyle get_Effect();
    public ExcelDrawing3D get_ThreeD();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles : XmlHelper {
    private List`1<ExcelThemeEffectStyle> _list;
    private ExcelThemeBase _theme;
    public ExcelThemeEffectStyle Item { get; }
    public int Count { get; }
    internal ExcelThemeEffectStyles(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelThemeBase theme);
    public sealed virtual IEnumerator`1<ExcelThemeEffectStyle> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelThemeEffectStyle get_Item(int index);
    public ExcelThemeEffectStyle Add();
    public void Remove(ExcelThemeEffectStyle item);
    public void Remove(int Index);
    public int get_Count();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles : XmlHelper {
    private List`1<ExcelDrawingFill> _list;
    public ExcelDrawingFill Item { get; }
    public int Count { get; }
    internal ExcelThemeFillStyles(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelThemeBase theme);
    public sealed virtual IEnumerator`1<ExcelDrawingFill> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelDrawingFill get_Item(int index);
    public ExcelDrawingFill Add(eFillStyle style);
    public void Remove(ExcelDrawingFill item);
    public void Remove(int Index);
    public int get_Count();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection : XmlHelper {
    private List`1<ExcelDrawingFontBase> _lst;
    private ExcelPackage _pck;
    public ExcelDrawingFontBase Item { get; }
    public int Count { get; }
    internal ExcelThemeFontCollection(ExcelPackage pck, XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public ExcelDrawingFontBase get_Item(int index);
    public ExcelDrawingFont Add(string typeface, string script);
    public void RemoveAt(int index);
    public void Remove(ExcelDrawingFontBase item);
    public void SetLatinFont(string typeface);
    public void SetComplexFont(string typeface);
    public void SetEastAsianFont(string typeface);
    private void SetSpecialFont(string typeface, eFontType fontType);
    public ExcelDrawingFontSpecial AddSpecialFont(eFontType type, string typeface);
    public int get_Count();
    public sealed virtual IEnumerator`1<ExcelDrawingFontBase> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Drawing.Theme.ExcelThemeLine : XmlHelper {
    private static string widthPath;
    private static string CapPath;
    private static string CompoundPath;
    private static string PenAlignmentPath;
    private ExcelDrawingFill _fill;
    private static string StylePath;
    private static string BevelPath;
    private static string RoundPath;
    private static string MiterPath;
    private static string MiterJoinLimitPath;
    private ExcelDrawingLineEnd _headEnd;
    private ExcelDrawingLineEnd _tailEnd;
    public int Width { get; public set; }
    public eLineCap Cap { get; public set; }
    public eCompundLineStyle CompoundLineStyle { get; public set; }
    public ePenAlignment Alignment { get; public set; }
    public ExcelDrawingFill Fill { get; }
    public eLineStyle Style { get; public set; }
    public Nullable`1<eLineJoin> Join { get; public set; }
    public Nullable`1<double> MiterJoinLimit { get; public set; }
    public ExcelDrawingLineEnd HeadEnd { get; }
    public ExcelDrawingLineEnd TailEnd { get; }
    internal XmlElement LineElement { get; }
    internal ExcelThemeLine(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public int get_Width();
    public void set_Width(int value);
    public eLineCap get_Cap();
    public void set_Cap(eLineCap value);
    public eCompundLineStyle get_CompoundLineStyle();
    public void set_CompoundLineStyle(eCompundLineStyle value);
    public ePenAlignment get_Alignment();
    public void set_Alignment(ePenAlignment value);
    public ExcelDrawingFill get_Fill();
    public eLineStyle get_Style();
    public void set_Style(eLineStyle value);
    public Nullable`1<eLineJoin> get_Join();
    public void set_Join(Nullable`1<eLineJoin> value);
    public Nullable`1<double> get_MiterJoinLimit();
    public void set_MiterJoinLimit(Nullable`1<double> value);
    public ExcelDrawingLineEnd get_HeadEnd();
    public ExcelDrawingLineEnd get_TailEnd();
    internal XmlElement get_LineElement();
    private void Init();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles : XmlHelper {
    private List`1<ExcelThemeLine> _list;
    public ExcelThemeLine Item { get; }
    public int Count { get; }
    internal ExcelThemeLineStyles(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public sealed virtual IEnumerator`1<ExcelThemeLine> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelThemeLine get_Item(int index);
    public ExcelThemeLine Add();
    public void Remove(ExcelThemeLine item);
    public void Remove(int Index);
    public int get_Count();
}
public class OfficeOpenXml.Drawing.Theme.ExcelThemeManager : object {
    private ExcelWorkbook _wb;
    internal static string _defaultTheme;
    private ExcelTheme _theme;
    public ExcelTheme CurrentTheme { get; }
    internal ExcelThemeManager(ExcelWorkbook wb);
    private static ExcelThemeManager();
    public ExcelTheme get_CurrentTheme();
    public void CreateDefaultTheme();
    internal ExcelTheme GetOrCreateTheme();
    public void DeleteCurrentTheme();
    public void Load(FileInfo thmxFile);
    public void Load(XmlDocument themeXml);
    public void Load(Stream thmxStream);
    private void SetNormalStyle();
    private ExcelNamedStyleXml GetNormalStyle();
    internal void Save();
}
public class OfficeOpenXml.Drawing.Theme.ExcelThemeOverride : ExcelThemeBase {
    private ExcelChart _chart;
    internal ExcelThemeOverride(ExcelChart chart, ZipPackageRelationship rel);
}
public enum OfficeOpenXml.Drawing.Vml.eLineStyleVml : Enum {
    public int value__;
    public static eLineStyleVml Solid;
    public static eLineStyleVml Round;
    public static eLineStyleVml Square;
    public static eLineStyleVml Dash;
    public static eLineStyleVml DashDot;
    public static eLineStyleVml LongDash;
    public static eLineStyleVml LongDashDot;
    public static eLineStyleVml LongDashDotDot;
}
public enum OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml : Enum {
    public int value__;
    public static eTextAlignHorizontalVml Left;
    public static eTextAlignHorizontalVml Center;
    public static eTextAlignHorizontalVml Right;
}
public enum OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml : Enum {
    public int value__;
    public static eTextAlignVerticalVml Top;
    public static eTextAlignVerticalVml Center;
    public static eTextAlignVerticalVml Bottom;
}
public enum OfficeOpenXml.Drawing.Vml.eVmlAspectRatio : Enum {
    public int value__;
    public static eVmlAspectRatio Ignore;
    public static eVmlAspectRatio AtLeast;
    public static eVmlAspectRatio AtMost;
}
public enum OfficeOpenXml.Drawing.Vml.eVmlFillType : Enum {
    public int value__;
    public static eVmlFillType NoFill;
    public static eVmlFillType Solid;
    public static eVmlFillType Gradient;
    public static eVmlFillType GradientRadial;
    public static eVmlFillType Tile;
    public static eVmlFillType Pattern;
    public static eVmlFillType Frame;
}
public enum OfficeOpenXml.Drawing.Vml.eVmlGradientMethod : Enum {
    public int value__;
    public static eVmlGradientMethod None;
    public static eVmlGradientMethod Linear;
    public static eVmlGradientMethod LinearSigma;
    public static eVmlGradientMethod Sigma;
    public static eVmlGradientMethod Any;
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase : XmlHelper {
    public string Id { get; public set; }
    internal string SpId { get; internal set; }
    public string AlternativeText { get; public set; }
    internal string Anchor { get; internal set; }
    internal ExcelVmlDrawingBase(XmlNode topNode, XmlNamespaceManager ns);
    public string get_Id();
    public void set_Id(string value);
    internal string get_SpId();
    internal void set_SpId(string value);
    public string get_AlternativeText();
    public void set_AlternativeText(string value);
    internal string get_Anchor();
    internal void set_Anchor(string value);
    protected bool GetStyle(string style, string key, String& value);
    protected internal string SetStyle(string style, string key, string value);
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBaseCollection : object {
    internal ExcelPackage _package;
    internal ExcelWorksheet _ws;
    [CompilerGeneratedAttribute]
private XmlDocument <VmlDrawingXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <NameSpaceManager>k__BackingField;
    internal XmlDocument VmlDrawingXml { get; internal set; }
    internal Uri Uri { get; internal set; }
    internal string RelId { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    internal XmlNamespaceManager NameSpaceManager { get; internal set; }
    internal ExcelVmlDrawingBaseCollection(ExcelWorksheet ws, Uri uri, string worksheetRelIdPath);
    private string RemoveUnclosedBrTags(string xml);
    [CompilerGeneratedAttribute]
internal XmlDocument get_VmlDrawingXml();
    [CompilerGeneratedAttribute]
internal void set_VmlDrawingXml(XmlDocument value);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
internal string get_RelId();
    [CompilerGeneratedAttribute]
internal void set_RelId(string value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal XmlNamespaceManager get_NameSpaceManager();
    [CompilerGeneratedAttribute]
internal void set_NameSpaceManager(XmlNamespaceManager value);
    internal void CreateVmlPart(bool save);
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder : XmlHelper {
    private ExcelVmlMeasurementUnit _width;
    public eVmlLineStyle LineStyle { get; public set; }
    public eVmlDashStyle DashStyle { get; public set; }
    public string CustomDashStyle { get; public set; }
    public ExcelVmlMeasurementUnit Width { get; }
    internal ExcelVmlDrawingBorder(ExcelDrawings drawings, XmlNamespaceManager ns, XmlNode topNode, String[] schemaNodeOrder);
    public eVmlLineStyle get_LineStyle();
    public void set_LineStyle(eVmlLineStyle value);
    public eVmlDashStyle get_DashStyle();
    public void set_DashStyle(eVmlDashStyle value);
    public string get_CustomDashStyle();
    public void set_CustomDashStyle(string value);
    public ExcelVmlMeasurementUnit get_Width();
    internal void UpdateXml();
}
[DefaultMemberAttribute("Item")]
internal class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingCollection : ExcelVmlDrawingBaseCollection {
    internal CellStore`1<int> _drawingsCellStore;
    internal Dictionary`2<string, int> _drawingsDict;
    internal List`1<ExcelVmlDrawingBase> _drawings;
    private Dictionary`2<string, HashInfo> _hashes;
    private int _nextID;
    internal ExcelVmlDrawingBase Item { get; }
    internal ExcelVmlDrawingBase Item { get; }
    internal int Count { get; }
    public ExcelPackage Package { get; }
    public Dictionary`2<string, HashInfo> Hashes { get; }
    public ZipPackagePart RelatedPart { get; }
    public Uri RelatedUri { get; }
    internal ExcelVmlDrawingCollection(ExcelWorksheet ws, Uri uri);
    protected virtual override void Finalize();
    protected internal void AddDrawingsFromXml(ExcelWorksheet ws);
    private string CreateVmlDrawings();
    internal ExcelVmlDrawingComment AddComment(ExcelRangeBase cell);
    private XmlNode AddCommentDrawing(ExcelRangeBase cell);
    internal ExcelVmlDrawingControl AddControl(ExcelControl ctrl, string name);
    private XmlNode AddControlDrawing(ExcelControl ctrl, string name);
    private string GetFontName(ExcelControl ctrl);
    private string GetFontSize(ExcelControl ctrl);
    private string GetVmlClientData(ExcelControl ctrl, XmlElement shapeElement);
    private string GetVml(ExcelControl ctrl, XmlElement shapeElement);
    private void SetShapeAttributes(ExcelControl ctrl, XmlElement shapeElement);
    internal string GetNewId();
    internal ExcelVmlDrawingBase get_Item(string id);
    internal ExcelVmlDrawingBase get_Item(int row, int column);
    internal bool ContainsKey(int row, int column);
    internal int get_Count();
    public sealed virtual ExcelPackage get_Package();
    public sealed virtual Dictionary`2<string, HashInfo> get_Hashes();
    public sealed virtual ZipPackagePart get_RelatedPart();
    public sealed virtual Uri get_RelatedUri();
    public sealed virtual IEnumerator`1<ExcelVmlDrawingBase> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor : XmlHelper {
    private string _path;
    public string ColorString { get; public set; }
    internal ExcelVmlDrawingColor(XmlNamespaceManager ns, XmlNode topNode, string path);
    public string get_ColorString();
    public void set_ColorString(string value);
    public void SetColor(Color color);
    public Color GetColor();
    internal static Color GetColor(string c);
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment : ExcelVmlDrawingBase {
    [CompilerGeneratedAttribute]
private ExcelRangeBase <Range>k__BackingField;
    private static string VERTICAL_ALIGNMENT_PATH;
    private static string HORIZONTAL_ALIGNMENT_PATH;
    private static string VISIBLE_PATH;
    private static string BACKGROUNDCOLOR_PATH;
    private static string BACKGROUNDCOLOR2_PATH;
    private static string LINESTYLE_PATH;
    private static string ENDCAP_PATH;
    private static string LINECOLOR_PATH;
    private static string LINEWIDTH_PATH;
    private static string TEXTBOX_STYLE_PATH;
    private static string LOCKED_PATH;
    private static string LOCK_TEXT_PATH;
    private ExcelVmlDrawingPosition _from;
    private ExcelVmlDrawingPosition _to;
    private static string ROW_PATH;
    private static string COLUMN_PATH;
    private static string STYLE_PATH;
    internal ExcelVmlDrawingFill _fill;
    internal ExcelRangeBase Range { get; internal set; }
    public string Address { get; }
    public eTextAlignVerticalVml VerticalAlignment { get; public set; }
    public eTextAlignHorizontalVml HorizontalAlignment { get; public set; }
    public bool Visible { get; public set; }
    public Color BackgroundColor { get; public set; }
    public eLineStyleVml LineStyle { get; public set; }
    public Color LineColor { get; public set; }
    public float LineWidth { get; public set; }
    public bool AutoFit { get; public set; }
    public bool Locked { get; public set; }
    public bool LockText { get; public set; }
    public ExcelVmlDrawingPosition From { get; }
    public ExcelVmlDrawingPosition To { get; }
    internal int Row { get; internal set; }
    internal int Column { get; internal set; }
    internal string Style { get; internal set; }
    public ExcelVmlDrawingFill Fill { get; }
    private ulong OfficeOpenXml.IRangeID.RangeID { get; private set; }
    internal ExcelVmlDrawingComment(XmlNode topNode, ExcelRangeBase range, XmlNamespaceManager ns);
    [CompilerGeneratedAttribute]
internal ExcelRangeBase get_Range();
    [CompilerGeneratedAttribute]
internal void set_Range(ExcelRangeBase value);
    public string get_Address();
    public eTextAlignVerticalVml get_VerticalAlignment();
    public void set_VerticalAlignment(eTextAlignVerticalVml value);
    public eTextAlignHorizontalVml get_HorizontalAlignment();
    public void set_HorizontalAlignment(eTextAlignHorizontalVml value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public eLineStyleVml get_LineStyle();
    public void set_LineStyle(eLineStyleVml value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public float get_LineWidth();
    public void set_LineWidth(float value);
    public bool get_AutoFit();
    public void set_AutoFit(bool value);
    public bool get_Locked();
    public void set_Locked(bool value);
    public bool get_LockText();
    public void set_LockText(bool value);
    public ExcelVmlDrawingPosition get_From();
    public ExcelVmlDrawingPosition get_To();
    internal int get_Row();
    internal void set_Row(int value);
    internal int get_Column();
    internal void set_Column(int value);
    internal string get_Style();
    internal void set_Style(string value);
    public ExcelVmlDrawingFill get_Fill();
    private sealed virtual override ulong OfficeOpenXml.IRangeID.get_RangeID();
    private sealed virtual override void OfficeOpenXml.IRangeID.set_RangeID(ulong value);
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl : ExcelVmlDrawingBase {
    private ExcelWorksheet _ws;
    internal ExcelVmlDrawingFill _fill;
    public string Text { get; public set; }
    internal Nullable`1<int> Dx { get; internal set; }
    internal Nullable`1<int> Page { get; internal set; }
    internal ExcelVmlDrawingControl(ExcelWorksheet ws, XmlNode topNode, XmlNamespaceManager ns);
    public string get_Text();
    public void set_Text(string value);
    internal Nullable`1<int> get_Dx();
    internal void set_Dx(Nullable`1<int> value);
    internal Nullable`1<int> get_Page();
    internal void set_Page(Nullable`1<int> value);
    internal ExcelVmlDrawingFill GetFill();
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill : XmlHelper {
    internal ExcelDrawings _drawings;
    private ExcelVmlDrawingColor _fillColor;
    private ExcelVmlDrawingColor _secondColor;
    private ExcelVmlDrawingGradientFill _gradientSettings;
    internal ExcelVmlDrawingPictureFill _patternPictureSettings;
    public eVmlFillType Style { get; public set; }
    public ExcelVmlDrawingColor Color { get; }
    public double Opacity { get; public set; }
    public ExcelVmlDrawingColor SecondColor { get; }
    public double SecondColorOpacity { get; public set; }
    public ExcelVmlDrawingGradientFill GradientSettings { get; }
    public ExcelVmlDrawingPictureFill PatternPictureSettings { get; }
    public bool Recolor { get; public set; }
    public bool Rotate { get; public set; }
    internal ExcelVmlDrawingFill(ExcelDrawings drawings, XmlNamespaceManager ns, XmlNode topNode, String[] schemaNodeOrder);
    public eVmlFillType get_Style();
    public void set_Style(eVmlFillType value);
    public ExcelVmlDrawingColor get_Color();
    public double get_Opacity();
    public void set_Opacity(double value);
    public ExcelVmlDrawingColor get_SecondColor();
    public double get_SecondColorOpacity();
    public void set_SecondColorOpacity(double value);
    public ExcelVmlDrawingGradientFill get_GradientSettings();
    public ExcelVmlDrawingPictureFill get_PatternPictureSettings();
    public bool get_Recolor();
    public void set_Recolor(bool value);
    public bool get_Rotate();
    public void set_Rotate(bool value);
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill : XmlHelper {
    private ExcelVmlDrawingFill _fill;
    public string ColorsString { get; public set; }
    public Nullable`1<double> Angle { get; public set; }
    public Nullable`1<double> Focus { get; public set; }
    public eVmlGradientMethod Method { get; public set; }
    internal ExcelVmlDrawingGradientFill(ExcelVmlDrawingFill fill, XmlNamespaceManager nsm, XmlNode topNode);
    public string get_ColorsString();
    public void set_ColorsString(string value);
    public void SetGradientColors(VmlGradiantColor[] colors);
    public Nullable`1<double> get_Angle();
    public void set_Angle(Nullable`1<double> value);
    public Nullable`1<double> get_Focus();
    public void set_Focus(Nullable`1<double> value);
    public eVmlGradientMethod get_Method();
    public void set_Method(eVmlGradientMethod value);
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture : ExcelVmlDrawingBase {
    private ExcelWorksheet _worksheet;
    private ExcelImage _image;
    [CompilerGeneratedAttribute]
private Uri <ImageUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <UriPic>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <RelPic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic>k__BackingField;
    public string Position { get; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Left { get; public set; }
    public double Top { get; public set; }
    public string Title { get; public set; }
    public ExcelImage Image { get; }
    internal Uri ImageUri { get; internal set; }
    internal string RelId { get; internal set; }
    public bool BiLevel { get; public set; }
    public bool GrayScale { get; public set; }
    public double Gain { get; public set; }
    public double Gamma { get; public set; }
    public double BlackLevel { get; public set; }
    private IPictureRelationDocument RelationDocument { get; }
    private string ImageHash { get; private set; }
    private Uri UriPic { get; private set; }
    private ZipPackageRelationship RelPic { get; private set; }
    private IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelationDocument { get; }
    private string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash { get; private set; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic { get; private set; }
    private ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic { get; private set; }
    internal ExcelVmlDrawingPicture(XmlNode topNode, XmlNamespaceManager ns, ExcelWorksheet ws);
    public string get_Position();
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Top();
    public void set_Top(double value);
    public string get_Title();
    public void set_Title(string value);
    public ExcelImage get_Image();
    [CompilerGeneratedAttribute]
internal Uri get_ImageUri();
    [CompilerGeneratedAttribute]
internal void set_ImageUri(Uri value);
    internal string get_RelId();
    internal void set_RelId(string value);
    public bool get_BiLevel();
    public void set_BiLevel(bool value);
    public bool get_GrayScale();
    public void set_GrayScale(bool value);
    public double get_Gain();
    public void set_Gain(double value);
    public double get_Gamma();
    public void set_Gamma(double value);
    public double get_BlackLevel();
    public void set_BlackLevel(double value);
    private double GetFracDT(string v, double def);
    private void SetStyleProp(string propertyName, string value);
    private double GetStyleProp(string propertyName);
    private IPictureRelationDocument get_RelationDocument();
    [CompilerGeneratedAttribute]
private string get_ImageHash();
    [CompilerGeneratedAttribute]
private void set_ImageHash(string value);
    [CompilerGeneratedAttribute]
private Uri get_UriPic();
    [CompilerGeneratedAttribute]
private void set_UriPic(Uri value);
    [CompilerGeneratedAttribute]
private ZipPackageRelationship get_RelPic();
    [CompilerGeneratedAttribute]
private void set_RelPic(ZipPackageRelationship value);
    private sealed virtual override IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelationDocument();
    [CompilerGeneratedAttribute]
private sealed virtual override string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_ImageHash();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_ImageHash(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_UriPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_UriPic(Uri value);
    [CompilerGeneratedAttribute]
private sealed virtual override ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_RelPic(ZipPackageRelationship value);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RemoveImage();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.SetNewImage();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection : ExcelVmlDrawingBaseCollection {
    internal List`1<ExcelVmlDrawingPicture> _images;
    private Dictionary`2<string, HashInfo> _hashes;
    private int _nextID;
    public ExcelVmlDrawingPicture Item { get; }
    public int Count { get; }
    private ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Package { get; }
    private Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Hashes { get; }
    private ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedPart { get; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedUri { get; }
    internal ExcelVmlDrawingPictureCollection(ExcelWorksheet ws, Uri uri);
    private void AddDrawingsFromXml();
    private string CreateVmlDrawings();
    internal ExcelVmlDrawingPicture Add(string id, Uri uri, string name, double width, double height);
    private XmlNode AddImage(string id, Uri targeUri, string Name, double width, double height);
    public ExcelVmlDrawingPicture get_Item(int Index);
    public int get_Count();
    internal string GetNewId();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Package();
    private sealed virtual override Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Hashes();
    private sealed virtual override ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedPart();
    private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedUri();
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill : XmlHelper {
    private ExcelVmlDrawingFill _fill;
    private ExcelVmlDrawingColor _secondColor;
    private ExcelImage _image;
    [CompilerGeneratedAttribute]
private string <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic>k__BackingField;
    public ExcelVmlDrawingColor SecondColor { get; }
    public double SecondColorOpacity { get; public set; }
    public eVmlAspectRatio AspectRatio { get; public set; }
    public string Size { get; public set; }
    public string Origin { get; public set; }
    public string Position { get; public set; }
    public string Title { get; public set; }
    public ExcelImage Image { get; }
    private IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelationDocument { get; }
    private string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash { get; private set; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic { get; private set; }
    private ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic { get; private set; }
    internal string RelId { get; }
    internal ExcelVmlDrawingPictureFill(ExcelVmlDrawingFill fill, XmlNamespaceManager nsm, XmlNode topNode);
    public ExcelVmlDrawingColor get_SecondColor();
    public double get_SecondColorOpacity();
    public void set_SecondColorOpacity(double value);
    public eVmlAspectRatio get_AspectRatio();
    public void set_AspectRatio(eVmlAspectRatio value);
    public string get_Size();
    public void set_Size(string value);
    public string get_Origin();
    public void set_Origin(string value);
    public string get_Position();
    public void set_Position(string value);
    public string get_Title();
    public void set_Title(string value);
    public ExcelImage get_Image();
    private sealed virtual override IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelationDocument();
    [CompilerGeneratedAttribute]
private sealed virtual override string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_ImageHash();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_ImageHash(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_UriPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_UriPic(Uri value);
    [CompilerGeneratedAttribute]
private sealed virtual override ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_RelPic(ZipPackageRelationship value);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.SetNewImage();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RemoveImage();
    internal string get_RelId();
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition : XmlHelper {
    private int _startPos;
    public int Row { get; public set; }
    public int RowOffset { get; public set; }
    public int Column { get; public set; }
    public int ColumnOffset { get; public set; }
    internal ExcelVmlDrawingPosition(XmlNamespaceManager ns, XmlNode topNode, int startPos);
    public int get_Row();
    public void set_Row(int value);
    public int get_RowOffset();
    public void set_RowOffset(int value);
    public int get_Column();
    public void set_Column(int value);
    public int get_ColumnOffset();
    public void set_ColumnOffset(int value);
    private void SetNumber(int pos, int value);
    private int GetNumber(int pos);
}
public class OfficeOpenXml.Drawing.Vml.ExcelVmlMeasurementUnit : object {
    private static String[] _suffixes;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private eMeasurementUnits <Unit>k__BackingField;
    public double Value { get; public set; }
    public eMeasurementUnits Unit { get; public set; }
    internal ExcelVmlMeasurementUnit(string value);
    private static ExcelVmlMeasurementUnit();
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public eMeasurementUnits get_Unit();
    [CompilerGeneratedAttribute]
public void set_Unit(eMeasurementUnits value);
    internal void SetValue(string value);
    internal string GetValueString();
    private double GetValue(string v);
    private eMeasurementUnits GetUnit(string v);
    internal Nullable`1<double> ToEmu();
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Drawing.Vml.TranslateEnumExtensions : object {
    [ExtensionAttribute]
internal static eVmlGradientMethod ToGradientMethodEnum(string s, eVmlGradientMethod defaultValue);
    [ExtensionAttribute]
internal static string ToEnumString(eVmlGradientMethod enumValue);
}
internal static class OfficeOpenXml.Drawing.Vml.VmlConvertUtil : object {
    internal static double GetOpacityFromStringVml(string v);
    internal static double ConvertToEMU(double v, eMeasurementUnits measure);
}
public class OfficeOpenXml.Drawing.Vml.VmlGradiantColor : object {
    [CompilerGeneratedAttribute]
private double <Percent>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    public double Percent { get; public set; }
    public Color Color { get; public set; }
    public VmlGradiantColor(double percent, Color color);
    [CompilerGeneratedAttribute]
public double get_Percent();
    [CompilerGeneratedAttribute]
public void set_Percent(double value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
}
public enum OfficeOpenXml.eCalculationMethod : Enum {
    public int value__;
    public static eCalculationMethod Add;
    public static eCalculationMethod Multiply;
}
public enum OfficeOpenXml.eCrossFilter : Enum {
    public int value__;
    public static eCrossFilter None;
    public static eCrossFilter ShowItemsWithDataAtTop;
    public static eCrossFilter ShowItemsWithNoData;
}
public enum OfficeOpenXml.eDataTypeOn : Enum {
    public int value__;
    public static eDataTypeOn NoDataTypes;
    public static eDataTypeOn OnColumn;
    public static eDataTypeOn OnCell;
}
public enum OfficeOpenXml.eDataTypes : Enum {
    public int value__;
    public static eDataTypes Unknown;
    public static eDataTypes String;
    public static eDataTypes Number;
    public static eDataTypes DateTime;
    public static eDataTypes Percent;
}
public enum OfficeOpenXml.eDateTimeUnit : Enum {
    public int value__;
    public static eDateTimeUnit Year;
    public static eDateTimeUnit Month;
    public static eDateTimeUnit Week;
    public static eDateTimeUnit Day;
    public static eDateTimeUnit Hour;
    public static eDateTimeUnit Minute;
    public static eDateTimeUnit Second;
    public static eDateTimeUnit Ticks;
}
public enum OfficeOpenXml.eErrorType : Enum {
    public int value__;
    public static eErrorType Div0;
    public static eErrorType NA;
    public static eErrorType Name;
    public static eErrorType Null;
    public static eErrorType Num;
    public static eErrorType Ref;
    public static eErrorType Value;
    public static eErrorType Calc;
    public static eErrorType Spill;
}
public enum OfficeOpenXml.eFillDirection : Enum {
    public int value__;
    public static eFillDirection Row;
    public static eFillDirection Column;
}
public enum OfficeOpenXml.eFillStartPosition : Enum {
    public int value__;
    public static eFillStartPosition TopLeft;
    public static eFillStartPosition BottomRight;
}
public enum OfficeOpenXml.eHtmlRangeTableInclude : Enum {
    public int value__;
    public static eHtmlRangeTableInclude Exclude;
    public static eHtmlRangeTableInclude ClassNamesOnly;
    public static eHtmlRangeTableInclude Include;
}
internal enum OfficeOpenXml.Encryption.AlgorithmHashID : Enum {
    public int value__;
    public static AlgorithmHashID App;
    public static AlgorithmHashID SHA1;
}
internal enum OfficeOpenXml.Encryption.AlgorithmID : Enum {
    public int value__;
    public static AlgorithmID Flags;
    public static AlgorithmID RC4;
    public static AlgorithmID AES128;
    public static AlgorithmID AES192;
    public static AlgorithmID AES256;
}
internal enum OfficeOpenXml.Encryption.eChainingMode : Enum {
    public int value__;
    public static eChainingMode ChainingModeCBC;
    public static eChainingMode ChainingModeCFB;
}
internal enum OfficeOpenXml.Encryption.eCipherAlgorithm : Enum {
    public int value__;
    public static eCipherAlgorithm AES;
    public static eCipherAlgorithm RC2;
    public static eCipherAlgorithm RC4;
    public static eCipherAlgorithm DES;
    public static eCipherAlgorithm DESX;
    public static eCipherAlgorithm TRIPLE_DES;
    public static eCipherAlgorithm TRIPLE_DES_112;
}
internal enum OfficeOpenXml.Encryption.eHashAlgorithm : Enum {
    public int value__;
    public static eHashAlgorithm SHA1;
    public static eHashAlgorithm SHA256;
    public static eHashAlgorithm SHA384;
    public static eHashAlgorithm SHA512;
    public static eHashAlgorithm MD5;
    public static eHashAlgorithm MD4;
    public static eHashAlgorithm MD2;
    public static eHashAlgorithm RIPEMD128;
    public static eHashAlgorithm RIPEMD160;
    public static eHashAlgorithm WHIRLPOOL;
}
internal class OfficeOpenXml.Encryption.EncryptedPackageHandler : object {
    private Byte[] BlockKey_HashInput;
    private Byte[] BlockKey_HashValue;
    private Byte[] BlockKey_KeyValue;
    private Byte[] BlockKey_HmacKey;
    private Byte[] BlockKey_HmacValue;
    internal MemoryStream DecryptPackage(FileInfo fi, ExcelEncryption encryption);
    internal MemoryStream DecryptPackage(MemoryStream stream, ExcelEncryption encryption);
    internal MemoryStream EncryptPackage(Byte[] package, ExcelEncryption encryption);
    private MemoryStream EncryptPackageAgile(Byte[] package, ExcelEncryption encryption);
    private Byte[] EncryptDataAgile(Byte[] data, EncryptionInfoAgile encryptionInfo, HashAlgorithm hashProvider);
    private void SetHMAC(EncryptionInfoAgile ei, HashAlgorithm hashProvider, Byte[] salt, Byte[] data);
    private HMAC GetHmacProvider(EncryptionKeyData ei, Byte[] salt);
    private MemoryStream EncryptPackageBinary(Byte[] package, ExcelEncryption encryption);
    private void CreateDataSpaces(CompoundDocument doc);
    private Byte[] CreateStrongEncryptionDataSpaceStream();
    private Byte[] CreateVersionStream();
    private Byte[] CreateDataSpaceMap();
    private Byte[] CreateTransformInfoPrimary();
    private EncryptionInfoBinary CreateEncryptionInfo(string password, AlgorithmID algID, Byte[]& key);
    private Byte[] EncryptData(Byte[] key, Byte[] data, bool useDataSize);
    private MemoryStream GetStreamFromPackage(CompoundDocument doc, ExcelEncryption encryption);
    private MemoryStream DecryptDocument(Byte[] data, EncryptionInfo encryptionInfo, string password);
    private MemoryStream DecryptAgile(EncryptionInfoAgile encryptionInfo, string password, long size, Byte[] encryptedData, Byte[] data);
    private HashAlgorithm GetHashProvider(EncryptionKeyData encr);
    private MemoryStream DecryptBinary(EncryptionInfoBinary encryptionInfo, string password, long size, Byte[] encryptedData);
    private bool IsPasswordValid(Byte[] key, EncryptionInfoBinary encryptionInfo);
    private bool IsPasswordValid(HashAlgorithm sha, EncryptionKeyEncryptor encr);
    private Byte[] DecryptAgileFromKey(EncryptionKeyData encr, Byte[] key, Byte[] encryptedData, long size, Byte[] iv);
    private static Byte[] ReadCryptoStream(CryptoStream cryptoStream, long size);
    private SymmetricAlgorithm GetEncryptionAlgorithm(EncryptionKeyData encr);
    private void EncryptAgileFromKey(EncryptionKeyEncryptor encr, Byte[] key, Byte[] data, long pos, long size, Byte[] iv, MemoryStream ms);
    private Byte[] GetPasswordHashBinary(string password, EncryptionInfoBinary encryptionInfo);
    private Byte[] GetPasswordHashAgile(string password, EncryptionKeyEncryptor encr, Byte[] blockKey);
    private Byte[] GetFinalHash(HashAlgorithm hashProvider, Byte[] blockKey, Byte[] hash);
    internal static Byte[] GetPasswordHashSpinPrepending(HashAlgorithm hashProvider, Byte[] salt, string password, int spinCount, int hashSize);
    internal static Byte[] GetPasswordHashSpinAppending(HashAlgorithm hashProvider, Byte[] salt, string password, int spinCount, int hashSize);
    private Byte[] FixHashSize(Byte[] hash, int size, byte fill);
    private static Byte[] CombinePassword(Byte[] salt, string password);
    internal static ushort CalculatePasswordHash(string Password);
}
internal class OfficeOpenXml.Encryption.EncryptionHeader : object {
    internal Flags Flags;
    internal int SizeExtra;
    internal AlgorithmID AlgID;
    internal AlgorithmHashID AlgIDHash;
    internal int KeySize;
    internal ProviderType ProviderType;
    internal int Reserved1;
    internal int Reserved2;
    internal string CSPName;
    internal Byte[] WriteBinary();
}
internal abstract class OfficeOpenXml.Encryption.EncryptionInfo : object {
    internal short MajorVersion;
    internal short MinorVersion;
    internal abstract virtual void Read(Byte[] data);
    internal static EncryptionInfo ReadBinary(Byte[] data);
}
internal class OfficeOpenXml.Encryption.EncryptionInfoAgile : EncryptionInfo {
    private XmlNamespaceManager _nsm;
    [CompilerGeneratedAttribute]
private EncryptionDataIntegrity <DataIntegrity>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionKeyData <KeyData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EncryptionKeyEncryptor> <KeyEncryptors>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <Xml>k__BackingField;
    internal EncryptionDataIntegrity DataIntegrity { get; internal set; }
    internal EncryptionKeyData KeyData { get; internal set; }
    internal List`1<EncryptionKeyEncryptor> KeyEncryptors { get; private set; }
    internal XmlDocument Xml { get; internal set; }
    [CompilerGeneratedAttribute]
internal EncryptionDataIntegrity get_DataIntegrity();
    [CompilerGeneratedAttribute]
internal void set_DataIntegrity(EncryptionDataIntegrity value);
    [CompilerGeneratedAttribute]
internal EncryptionKeyData get_KeyData();
    [CompilerGeneratedAttribute]
internal void set_KeyData(EncryptionKeyData value);
    [CompilerGeneratedAttribute]
internal List`1<EncryptionKeyEncryptor> get_KeyEncryptors();
    [CompilerGeneratedAttribute]
private void set_KeyEncryptors(List`1<EncryptionKeyEncryptor> value);
    [CompilerGeneratedAttribute]
internal XmlDocument get_Xml();
    [CompilerGeneratedAttribute]
internal void set_Xml(XmlDocument value);
    internal virtual void Read(Byte[] data);
    internal void ReadFromXml(string xml);
}
internal class OfficeOpenXml.Encryption.EncryptionInfoBinary : EncryptionInfo {
    internal Flags Flags;
    internal UInt32 HeaderSize;
    internal EncryptionHeader Header;
    internal EncryptionVerifier Verifier;
    internal virtual void Read(Byte[] data);
    internal Byte[] WriteBinary();
}
internal class OfficeOpenXml.Encryption.EncryptionVerifier : object {
    internal UInt32 SaltSize;
    internal Byte[] Salt;
    internal Byte[] EncryptedVerifier;
    internal UInt32 VerifierHashSize;
    internal Byte[] EncryptedVerifierHash;
    internal Byte[] WriteBinary();
}
[FlagsAttribute]
internal enum OfficeOpenXml.Encryption.Flags : Enum {
    public int value__;
    public static Flags Reserved1;
    public static Flags Reserved2;
    public static Flags fCryptoAPI;
    public static Flags fDocProps;
    public static Flags fExternal;
    public static Flags fAES;
}
internal enum OfficeOpenXml.Encryption.ProviderType : Enum {
    public int value__;
    public static ProviderType Flags;
    public static ProviderType RC4;
    public static ProviderType AES;
}
public enum OfficeOpenXml.EncryptionAlgorithm : Enum {
    public int value__;
    public static EncryptionAlgorithm AES128;
    public static EncryptionAlgorithm AES192;
    public static EncryptionAlgorithm AES256;
}
public enum OfficeOpenXml.EncryptionVersion : Enum {
    public int value__;
    public static EncryptionVersion Standard;
    public static EncryptionVersion Agile;
}
public enum OfficeOpenXml.eOrientation : Enum {
    public int value__;
    public static eOrientation Portrait;
    public static eOrientation Landscape;
}
public enum OfficeOpenXml.ePageOrder : Enum {
    public int value__;
    public static ePageOrder DownThenOver;
    public static ePageOrder OverThenDown;
}
public enum OfficeOpenXml.ePanePosition : Enum {
    public int value__;
    public static ePanePosition BottomLeft;
    public static ePanePosition BottomRight;
    public static ePanePosition TopLeft;
    public static ePanePosition TopRight;
}
public enum OfficeOpenXml.ePaneState : Enum {
    public int value__;
    public static ePaneState Frozen;
    public static ePaneState FrozenSplit;
    public static ePaneState Split;
}
public enum OfficeOpenXml.ePaperSize : Enum {
    public int value__;
    public static ePaperSize Letter;
    public static ePaperSize LetterSmall;
    public static ePaperSize Tabloid;
    public static ePaperSize Ledger;
    public static ePaperSize Legal;
    public static ePaperSize Statement;
    public static ePaperSize Executive;
    public static ePaperSize A3;
    public static ePaperSize A4;
    public static ePaperSize A4Small;
    public static ePaperSize A5;
    public static ePaperSize B4;
    public static ePaperSize B5;
    public static ePaperSize Folio;
    public static ePaperSize Quarto;
    public static ePaperSize Standard10_14;
    public static ePaperSize Standard11_17;
    public static ePaperSize Note;
    public static ePaperSize Envelope9;
    public static ePaperSize Envelope10;
    public static ePaperSize Envelope11;
    public static ePaperSize Envelope12;
    public static ePaperSize Envelope14;
    public static ePaperSize C;
    public static ePaperSize D;
    public static ePaperSize E;
    public static ePaperSize DLEnvelope;
    public static ePaperSize C5Envelope;
    public static ePaperSize C3Envelope;
    public static ePaperSize C4Envelope;
    public static ePaperSize C6Envelope;
    public static ePaperSize C65Envelope;
    public static ePaperSize B4Envelope;
    public static ePaperSize B5Envelope;
    public static ePaperSize B6Envelope;
    public static ePaperSize ItalyEnvelope;
    public static ePaperSize MonarchEnvelope;
    public static ePaperSize Six3_4Envelope;
    public static ePaperSize USStandard;
    public static ePaperSize GermanStandard;
    public static ePaperSize GermanLegal;
    public static ePaperSize ISOB4;
    public static ePaperSize JapaneseDoublePostcard;
    public static ePaperSize Standard9;
    public static ePaperSize Standard10;
    public static ePaperSize Standard15;
    public static ePaperSize InviteEnvelope;
    public static ePaperSize LetterExtra;
    public static ePaperSize LegalExtra;
    public static ePaperSize TabloidExtra;
    public static ePaperSize A4Extra;
    public static ePaperSize LetterTransverse;
    public static ePaperSize A4Transverse;
    public static ePaperSize LetterExtraTransverse;
    public static ePaperSize SuperA;
    public static ePaperSize SuperB;
    public static ePaperSize LetterPlus;
    public static ePaperSize A4Plus;
    public static ePaperSize A5Transverse;
    public static ePaperSize JISB5Transverse;
    public static ePaperSize A3Extra;
    public static ePaperSize A5Extra;
    public static ePaperSize ISOB5;
    public static ePaperSize A2;
    public static ePaperSize A3Transverse;
    public static ePaperSize A3ExtraTransverse;
}
internal enum OfficeOpenXml.ePhoneticAlignment : Enum {
    public int value__;
    public static ePhoneticAlignment NoControl;
    public static ePhoneticAlignment Left;
    public static ePhoneticAlignment Center;
    public static ePhoneticAlignment Distributed;
}
internal enum OfficeOpenXml.ePhoneticType : Enum {
    public int value__;
    public static ePhoneticType HalfWidthKatakana;
    public static ePhoneticType FullWidthKatakana;
    public static ePhoneticType Hiragana;
    public static ePhoneticType NoConversion;
}
internal enum OfficeOpenXml.eProtectedRangeAlgorithm : Enum {
    public int value__;
    public static eProtectedRangeAlgorithm MD2;
    public static eProtectedRangeAlgorithm MD4;
    public static eProtectedRangeAlgorithm MD5;
    public static eProtectedRangeAlgorithm RIPEMD128;
    public static eProtectedRangeAlgorithm RIPEMD160;
    public static eProtectedRangeAlgorithm SHA1;
    public static eProtectedRangeAlgorithm SHA256;
    public static eProtectedRangeAlgorithm SHA384;
    public static eProtectedRangeAlgorithm SHA512;
    public static eProtectedRangeAlgorithm WHIRLPOOL;
}
internal static class OfficeOpenXml.ErrorValues : object {
    public static ExcelErrorValue ValueError;
    public static ExcelErrorValue NameError;
    public static ExcelErrorValue NAError;
    public static ExcelErrorValue NumError;
    public static ExcelErrorValue NullError;
    public static ExcelErrorValue Div0Error;
    public static ExcelErrorValue RefError;
    public static ExcelErrorValue CalcError;
    private static ErrorValues();
}
public enum OfficeOpenXml.eShiftTypeDelete : Enum {
    public int value__;
    public static eShiftTypeDelete Left;
    public static eShiftTypeDelete Up;
    public static eShiftTypeDelete EntireRow;
    public static eShiftTypeDelete EntireColumn;
}
public enum OfficeOpenXml.eShiftTypeInsert : Enum {
    public int value__;
    public static eShiftTypeInsert Right;
    public static eShiftTypeInsert Down;
    public static eShiftTypeInsert EntireRow;
    public static eShiftTypeInsert EntireColumn;
}
public enum OfficeOpenXml.eSlicerSourceType : Enum {
    public int value__;
    public static eSlicerSourceType PivotTable;
    public static eSlicerSourceType Table;
}
public enum OfficeOpenXml.eSlicerStyle : Enum {
    public int value__;
    public static eSlicerStyle None;
    public static eSlicerStyle Custom;
    public static eSlicerStyle Light1;
    public static eSlicerStyle Light2;
    public static eSlicerStyle Light3;
    public static eSlicerStyle Light4;
    public static eSlicerStyle Light5;
    public static eSlicerStyle Light6;
    public static eSlicerStyle Other1;
    public static eSlicerStyle Other2;
    public static eSlicerStyle Dark1;
    public static eSlicerStyle Dark2;
    public static eSlicerStyle Dark3;
    public static eSlicerStyle Dark4;
    public static eSlicerStyle Dark5;
    public static eSlicerStyle Dark6;
}
public enum OfficeOpenXml.eSortOrder : Enum {
    public int value__;
    public static eSortOrder Ascending;
    public static eSortOrder Descending;
}
public enum OfficeOpenXml.eTableNamedStyleAppliesTo : Enum {
    public int value__;
    public static eTableNamedStyleAppliesTo Tables;
    public static eTableNamedStyleAppliesTo PivotTables;
    public static eTableNamedStyleAppliesTo TablesAndPivotTables;
}
public enum OfficeOpenXml.eVmlDashStyle : Enum {
    public int value__;
    public static eVmlDashStyle Solid;
    public static eVmlDashStyle ShortDash;
    public static eVmlDashStyle ShortDot;
    public static eVmlDashStyle ShortDashDot;
    public static eVmlDashStyle ShortDashDotDot;
    public static eVmlDashStyle Dot;
    public static eVmlDashStyle Dash;
    public static eVmlDashStyle LongDash;
    public static eVmlDashStyle DashDot;
    public static eVmlDashStyle LongDashDot;
    public static eVmlDashStyle LongDashDotDot;
    public static eVmlDashStyle Custom;
}
public enum OfficeOpenXml.eVmlLineStyle : Enum {
    public int value__;
    public static eVmlLineStyle NoLine;
    public static eVmlLineStyle Single;
    public static eVmlLineStyle ThinThin;
    public static eVmlLineStyle ThinThick;
    public static eVmlLineStyle ThickThin;
    public static eVmlLineStyle ThickBetweenThin;
}
public enum OfficeOpenXml.eWorkSheetHidden : Enum {
    public int value__;
    public static eWorkSheetHidden Visible;
    public static eWorkSheetHidden Hidden;
    public static eWorkSheetHidden VeryHidden;
}
public class OfficeOpenXml.ExcelAddress : ExcelAddressBase {
    public string Address { get; public set; }
    public ExcelAddress(int fromRow, int fromCol, int toRow, int toColumn);
    public ExcelAddress(string ws, int fromRow, int fromCol, int toRow, int toColumn);
    public ExcelAddress(string address);
    internal ExcelAddress(string ws, string address);
    internal ExcelAddress(string ws, string address, bool isName);
    public ExcelAddress(string Address, ExcelPackage package, ExcelAddressBase referenceAddress);
    public string get_Address();
    public void set_Address(string value);
}
public class OfficeOpenXml.ExcelAddressBase : ExcelCellBase {
    internal int _fromRow;
    internal int _toRow;
    internal int _fromCol;
    internal int _toCol;
    internal bool _fromRowFixed;
    internal bool _fromColFixed;
    internal bool _toRowFixed;
    internal bool _toColFixed;
    internal string _wb;
    internal string _ws;
    internal string _address;
    internal ExcelCellAddress _start;
    internal ExcelCellAddress _end;
    internal ExcelTableAddress _table;
    private string _firstAddress;
    internal List`1<ExcelAddressBase> _addresses;
    private static HashSet`1<char> _tokens;
    public ExcelCellAddress Start { get; }
    public ExcelCellAddress End { get; }
    public int ExternalReferenceIndex { get; }
    public ExcelTableAddress Table { get; }
    public string Address { get; }
    public string AddressAbsolute { get; }
    public string FullAddress { get; }
    public bool IsName { get; }
    internal string FirstAddress { get; }
    internal string FirstCellAddressRelative { get; }
    internal string AddressSpaceSeparated { get; }
    internal string WorkSheetName { get; }
    internal List`1<ExcelAddressBase> Addresses { get; }
    public int Rows { get; }
    public int Columns { get; }
    public bool IsFullRow { get; }
    public bool IsFullColumn { get; }
    internal bool IsSingleCell { get; }
    public string LocalAddress { get; }
    internal string WorkbookLocalAddress { get; }
    public bool IsExternal { get; }
    internal ExcelAddressBase(FormulaRangeAddress adr);
    public ExcelAddressBase(int fromRow, int fromCol, int toRow, int toColumn);
    public ExcelAddressBase(string worksheetName, int fromRow, int fromCol, int toRow, int toColumn);
    public ExcelAddressBase(int externalReferenceIx, string worksheetName, int fromRow, int fromCol, int toRow, int toColumn);
    public ExcelAddressBase(int fromRow, int fromCol, int toRow, int toColumn, bool fromRowFixed, bool fromColFixed, bool toRowFixed, bool toColFixed);
    internal ExcelAddressBase(int fromRow, int fromCol, int toRow, int toColumn, bool fromRowFixed, bool fromColFixed, bool toRowFixed, bool toColFixed, string worksheetName, string prevAddress);
    public ExcelAddressBase(string address, ExcelWorkbook wb, string wsName);
    public ExcelAddressBase(string address, ExcelPackage pck, ExcelAddressBase referenceAddress);
    internal ExcelAddressBase(string address, bool isName);
    private static ExcelAddressBase();
    internal static bool IsTableAddress(string address);
    internal void ResetAddress(string prevAddress);
    internal void SetRCFromTable(ExcelPackage pck, ExcelAddressBase referenceAddress);
    internal string ChangeTableName(string prevName, string name);
    internal ExcelAddressBase Intersect(ExcelAddressBase address);
    internal ExcelAddressBase IntersectReversed(ExcelAddressBase address);
    internal bool IsInside(ExcelAddressBase effectedAddress);
    protected internal void SetAddress(string address, ExcelWorkbook wb, string wsName);
    internal ExcelAddressBase ToInternalAddress();
    protected internal virtual void BeforeChangeAddress();
    protected internal virtual void ChangeAddress();
    private void SetWbWs(string address);
    internal void ChangeWorksheet(string wsName, string newWs);
    private string GetAddress();
    internal string GetAddressWorkBookWorkSheet();
    public ExcelCellAddress get_Start();
    public ExcelCellAddress get_End();
    public int get_ExternalReferenceIndex();
    public ExcelTableAddress get_Table();
    public virtual string get_Address();
    public string get_AddressAbsolute();
    public string get_FullAddress();
    public bool get_IsName();
    public virtual string ToString();
    public virtual int GetHashCode();
    internal string get_FirstAddress();
    internal string get_FirstCellAddressRelative();
    internal string get_AddressSpaceSeparated();
    protected void Validate();
    internal string get_WorkSheetName();
    internal virtual List`1<ExcelAddressBase> get_Addresses();
    internal virtual List`1<ExcelAddressBase> GetAllAddresses();
    private bool ExtractAddress(string fullAddress);
    private void HandleBrackets(string first, string second, List`1<string> bracketParts);
    internal eAddressCollition Collide(ExcelAddressBase address, bool ignoreWs);
    internal eAddressCollition Collide(int row, int col);
    internal eAddressCollition Collide(int fromRow, int fromCol, int toRow, int toCol);
    internal bool DoNotCollide(int fromRow, int fromCol, int toRow, int toCol);
    internal bool CollideFullRowOrColumn(ExcelAddressBase address);
    internal bool CollideFullRowOrColumn(int fromRow, int fromCol, int toRow, int toCol);
    private bool CollideColumn(int fromCol, int toCol);
    internal bool CollideRow(int fromRow, int toRow);
    internal bool CollideFullRow(int fromRow, int toRow);
    internal bool CollideFullColumn(int fromCol, int toCol);
    internal ExcelAddressBase AddRow(int row, int rows, bool setFixed, bool setRefOnMinMax, bool extendIfLastRow);
    private int GetRow(int row, bool setRefOnMinMax);
    private int GetColumn(int column, bool setRefOnMinMax);
    internal ExcelAddressBase DeleteRow(int row, int rows, bool setFixed, bool adjustMaxRow);
    internal ExcelAddressBase AddColumn(int col, int cols, bool setFixed, bool setRefOnMinMax, bool extendIfLastCol);
    internal ExcelAddressBase DeleteColumn(int col, int cols, bool setFixed, bool adjustMaxCol);
    internal ExcelAddressBase Insert(ExcelAddressBase address, eShiftTypeInsert Shift);
    private void SetAddress(String& first, String& second, Boolean& hasSheet);
    internal static AddressType IsValid(string Address, bool r1c1);
    internal static bool IsR1C1(string address);
    private static bool IsAddress(string intAddress, bool allowRef);
    private static bool SplitAddress(string Address, String& wb, String& ws, String& intAddress);
    internal static bool IsFormula(string address);
    private static bool IsValidName(string address);
    public int get_Rows();
    public int get_Columns();
    public bool get_IsFullRow();
    public bool get_IsFullColumn();
    internal bool get_IsSingleCell();
    public string get_LocalAddress();
    private static string RemoveSheetName(string address);
    internal string get_WorkbookLocalAddress();
    internal static string GetWorkbookPart(string address);
    internal static string GetWorksheetPart(string address, string defaultWorkSheet);
    internal static string GetWorksheetPart(string address, string defaultWorkSheet, Int32& endIx);
    internal static string GetAddressPart(string address);
    internal static void SplitAddress(string fullAddress, String& wb, String& ws, String& address, string defaultWorksheet);
    internal static List`1<String[]> SplitFullAddress(string fullAddress);
    private static string GetString(string address, int ix, Int32& endIx);
    internal bool IsValidRowCol();
    public virtual bool Equals(object obj);
    private bool IsEqual(ExcelAddressBase a1, ExcelAddressBase a2);
    public bool get_IsExternal();
    internal static bool RefersToOtherWorksheet(string address, string worksheetName);
}
internal class OfficeOpenXml.ExcelAddressCollideUtility : object {
    private int _fromRow;
    private int _toRow;
    private int _fromCol;
    private int _toCol;
    private string _worksheetName;
    public ExcelAddressCollideUtility(ExcelAddressBase address);
    public ExcelAddressCollideUtility(FormulaRangeAddress address, ParsingContext ctx);
    private static string GetWsName(FormulaRangeAddress address, ParsingContext ctx);
    internal eAddressCollition Collide(ExcelAddressBase address, bool ignoreWs);
    internal eAddressCollition Collide(FormulaRangeAddress address, ParsingContext ctx, bool ignoreWs);
    internal eAddressCollition Collide(int row, int col);
    internal eAddressCollition Collide(int fromRow, int fromCol, int toRow, int toCol);
    internal bool DoNotCollide(int fromRow, int fromCol, int toRow, int toCol);
    internal bool CollideFullRowOrColumn(ExcelAddressBase address);
    internal bool CollideFullRowOrColumn(FormulaRangeAddress address);
    internal bool CollideFullRowOrColumn(int fromRow, int fromCol, int toRow, int toCol);
    private bool CollideColumn(int fromCol, int toCol);
    internal bool CollideRow(int fromRow, int toRow);
    internal bool CollideFullRow(int fromRow, int toRow);
    internal bool CollideFullColumn(int fromCol, int toCol);
}
public class OfficeOpenXml.ExcelBackgroundImage : XmlHelper {
    private ExcelWorksheet _workSheet;
    private ExcelImage _imageNew;
    private static string BACKGROUNDPIC_PATH;
    [CompilerGeneratedAttribute]
private string <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic>k__BackingField;
    public ExcelImage Image { get; }
    private IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelationDocument { get; }
    private string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.ImageHash { get; private set; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.UriPic { get; private set; }
    private ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RelPic { get; private set; }
    internal ExcelBackgroundImage(XmlNamespaceManager nsm, XmlNode topNode, ExcelWorksheet workSheet);
    public ExcelImage get_Image();
    public void SetFromFile(FileInfo PictureFile);
    public void SetFromFile(string PictureFilePath);
    public void Remove();
    private sealed virtual override IPictureRelationDocument OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelationDocument();
    [CompilerGeneratedAttribute]
private sealed virtual override string OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_ImageHash();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_ImageHash(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_UriPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_UriPic(Uri value);
    [CompilerGeneratedAttribute]
private sealed virtual override ZipPackageRelationship OfficeOpenXml.Drawing.Interfaces.IPictureContainer.get_RelPic();
    [CompilerGeneratedAttribute]
private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.set_RelPic(ZipPackageRelationship value);
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.RemoveImage();
    private sealed virtual override void OfficeOpenXml.Drawing.Interfaces.IPictureContainer.SetNewImage();
}
public enum OfficeOpenXml.ExcelCalcMode : Enum {
    public int value__;
    public static ExcelCalcMode Automatic;
    public static ExcelCalcMode AutomaticNoTable;
    public static ExcelCalcMode Manual;
}
public class OfficeOpenXml.ExcelCellAddress : object {
    private int _row;
    private bool _isRowFixed;
    private int _column;
    private bool _isColumnFixed;
    private string _address;
    public int Row { get; private set; }
    public int Column { get; private set; }
    public string Address { get; internal set; }
    public bool IsRowFixed { get; }
    public bool IsColumnFixed { get; }
    public bool IsRef { get; }
    public ExcelCellAddress(int row, int column, bool isRowFixed, bool isColumnFixed);
    public ExcelCellAddress(string address);
    public int get_Row();
    private void set_Row(int value);
    public int get_Column();
    private void set_Column(int value);
    public string get_Address();
    internal void set_Address(string value);
    public bool get_IsRowFixed();
    public bool get_IsColumnFixed();
    public bool get_IsRef();
    public static string GetColumnLetter(int column);
}
public abstract class OfficeOpenXml.ExcelCellBase : object {
    private static int numberOfCharacters;
    private static int startChar;
    private static int startNum;
    internal static void SplitCellId(ulong cellId, Int32& sheet, Int32& row, Int32& col);
    internal static int GetRowFromCellId(ulong cellId);
    internal static int GetColFromCellId(ulong cellId);
    internal static ulong GetCellId(int sheetId, int row, int col);
    public static string TranslateFromR1C1(string value, int row, int col);
    public static string TranslateToR1C1(string value, int row, int col);
    protected internal static string GetColumnLetter(int iColumnNumber);
    protected internal static string GetColumnLetter(int iColumnNumber, bool fixedCol);
    internal static bool GetRowColFromAddress(string CellAddress, Int32& FromRow, Int32& FromColumn, Int32& ToRow, Int32& ToColumn);
    internal static string GetWorkbookFromAddress(string address);
    internal static bool GetRowColFromAddress(string CellAddress, Int32& FromRow, Int32& FromColumn, Int32& ToRow, Int32& ToColumn, Boolean& fixedFromRow, Boolean& fixedFromColumn, Boolean& fixedToRow, Boolean& fixedToColumn, ExcelWorkbook wb, string wsName);
    private static void SetFromRowCol(Int32& FromRowCol, Boolean& fixedFromRowCol, int rowCol, bool fixedRowCol);
    private static void SetToRowCol(Int32& toRowCol, Boolean& fixedToRowCol, int rowCol, bool fixedRowCol);
    private static bool IsCellAddress(string cellAddress);
    internal static bool GetRowColFromAddress(string CellAddress, Int32& Row, Int32& Column);
    internal static bool GetRowColFromAddress(string CellAddress, Int32& row, Int32& col, Boolean& fixedRow, Boolean& fixedCol);
    internal static bool IsAlpha(char c);
    internal static bool GetRowCol(string address, Int32& row, Int32& col, bool throwException);
    internal static bool GetRowCol(string address, Int32& row, Int32& col, bool throwException, Boolean& fixedRow, Boolean& fixedCol);
    private static bool ThrowAddressExceptionOutOfRange(string address, int row, bool throwException);
    private static bool ThrowAddressException(string address, Int32& row, Int32& col, bool throwException);
    internal static int GetColumn(string sCol);
    public static string GetAddressRow(int Row, bool Absolute);
    public static string GetAddressCol(int Col, bool Absolute);
    public static string GetAddress(int Row, int Column);
    public static string GetAddress(int Row, bool AbsoluteRow, int Column, bool AbsoluteCol);
    public static string GetAddress(int Row, int Column, bool Absolute);
    public static string GetAddress(int FromRow, int FromColumn, int ToRow, int ToColumn);
    public static string GetAddress(int FromRow, int FromColumn, int ToRow, int ToColumn, bool Absolute);
    public static string GetAddress(int FromRow, int FromColumn, int ToRow, int ToColumn, bool FixedFromRow, bool FixedFromColumn, bool FixedToRow, bool FixedToColumn);
    public static string GetFullAddress(string worksheetName, string address);
    public static string GetFullAddress(string workbook, string worksheetName, string address);
    internal static string GetFullAddress(string worksheetName, string address, bool fullRowCol);
    internal static string GetQuotedWorksheetName(string worksheetName);
    public static bool IsSimpleAddress(string address);
    public static bool IsValidAddress(string address);
    public static bool IsValidTableAddress(string address);
    public static bool IsValidRangeAddress(string address);
    private static bool IsCol(char c);
    private static bool IsRow(char r);
    public static bool IsValidCellAddress(string cellAddress);
    internal static string UpdateFormulaReferences(string formula, int rowIncrement, int colIncrement, int afterRow, int afterColumn, string currentSheet, string modifiedSheet, bool setFixed, bool copy, IList`1<Token> tokens);
    private static ExcelAddressBase GetFullAddressFromToken(IList`1<Token> tokens, Int32& i);
    internal static string UpdateFormulaReferences(string formula, ExcelAddressBase range, ExcelAddressBase effectedRange, eShiftTypeInsert shift, string currentSheet, string modifiedSheet, bool setFixed);
    internal static string UpdateFormulaReferences(string formula, ExcelAddressBase range, ExcelAddressBase effectedRange, eShiftTypeDelete shift, string currentSheet, string modifiedSheet, bool setFixed);
    private static string UpdateFormulaReferencesPrivate(string formula, ExcelAddressBase range, ExcelAddressBase effectedRange, string currentSheet, string modifiedSheet, bool setFixed, int rowIncrement, int colIncrement);
    private static bool IsReferencesModifiedWorksheet(string currentSheet, string modifiedSheet, string addressSheet);
    internal static string UpdateSheetNameInFormula(string formula, string oldName, string newName);
    internal static bool IsExternalAddress(string address);
    internal static bool IsValidRowNumber(int row);
    internal static bool IsColumnLetter(string value);
    internal static void SplitAddress(String& address, Int32& extRef, Int32& wsIx, ExcelPackage package);
}
public class OfficeOpenXml.ExcelChartsheet : ExcelWorksheet {
    public ExcelChart Chart { get; }
    internal ExcelChartsheet(XmlNamespaceManager ns, ExcelPackage pck, string relID, Uri uriWorksheet, string sheetName, int sheetID, int positionID, Nullable`1<eWorkSheetHidden> hidden, eChartType chartType, ExcelPivotTable pivotTableSource);
    internal ExcelChartsheet(XmlNamespaceManager ns, ExcelPackage pck, string relID, Uri uriWorksheet, string sheetName, int sheetID, int positionID, Nullable`1<eWorkSheetHidden> hidden);
    public ExcelChart get_Chart();
}
public class OfficeOpenXml.ExcelColumn : object {
    private ExcelWorksheet _worksheet;
    internal int _columnMin;
    internal int _columnMax;
    internal bool _hidden;
    internal double _width;
    [CompilerGeneratedAttribute]
private bool <BestFit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutlineLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Phonetic>k__BackingField;
    internal string _styleName;
    [CompilerGeneratedAttribute]
private bool <PageBreak>k__BackingField;
    public int ColumnMin { get; }
    public int ColumnMax { get; public set; }
    internal ulong ColumnID { get; }
    public bool Hidden { get; public set; }
    internal double VisualWidth { get; }
    public double Width { get; public set; }
    public bool BestFit { get; public set; }
    public bool Collapsed { get; public set; }
    public int OutlineLevel { get; public set; }
    public bool Phonetic { get; public set; }
    public ExcelStyle Style { get; }
    public string StyleName { get; public set; }
    public int StyleID { get; public set; }
    public bool PageBreak { get; public set; }
    public bool Merged { get; public set; }
    private ulong OfficeOpenXml.IRangeID.RangeID { get; private set; }
    protected internal ExcelColumn(ExcelWorksheet Worksheet, int col);
    public int get_ColumnMin();
    public int get_ColumnMax();
    public void set_ColumnMax(int value);
    internal ulong get_ColumnID();
    public bool get_Hidden();
    public void set_Hidden(bool value);
    internal double get_VisualWidth();
    public double get_Width();
    public void set_Width(double value);
    [CompilerGeneratedAttribute]
public bool get_BestFit();
    [CompilerGeneratedAttribute]
public void set_BestFit(bool value);
    [CompilerGeneratedAttribute]
public bool get_Collapsed();
    [CompilerGeneratedAttribute]
public void set_Collapsed(bool value);
    [CompilerGeneratedAttribute]
public int get_OutlineLevel();
    [CompilerGeneratedAttribute]
public void set_OutlineLevel(int value);
    [CompilerGeneratedAttribute]
public bool get_Phonetic();
    [CompilerGeneratedAttribute]
public void set_Phonetic(bool value);
    public ExcelStyle get_Style();
    public string get_StyleName();
    public void set_StyleName(string value);
    public int get_StyleID();
    public void set_StyleID(int value);
    [CompilerGeneratedAttribute]
public bool get_PageBreak();
    [CompilerGeneratedAttribute]
public void set_PageBreak(bool value);
    public bool get_Merged();
    public void set_Merged(bool value);
    public virtual string ToString();
    public void AutoFit();
    public void AutoFit(double MinimumWidth);
    public void AutoFit(double MinimumWidth, double MaximumWidth);
    internal static ulong GetColumnID(int sheetID, int column);
    internal static int ColumnWidthToPixels(decimal columnWidth, decimal mdw);
    private sealed virtual override ulong OfficeOpenXml.IRangeID.get_RangeID();
    private sealed virtual override void OfficeOpenXml.IRangeID.set_RangeID(ulong value);
    internal ExcelColumn Clone(ExcelWorksheet added);
    internal ExcelColumn Clone(ExcelWorksheet added, int col);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelColumnCollection : ExcelRangeColumn {
    private ExcelWorksheet _worksheet;
    public ExcelRangeColumn Item { get; }
    public ExcelRangeColumn Item { get; }
    internal ExcelColumnCollection(ExcelWorksheet worksheet);
    public ExcelRangeColumn get_Item(int column);
    public ExcelRangeColumn get_Item(int fromColumn, int toColumn);
}
public class OfficeOpenXml.ExcelComment : ExcelVmlDrawingComment {
    internal XmlHelper _commentHelper;
    private string _text;
    private static string AUTHORS_PATH;
    private static string AUTHOR_PATH;
    [CompilerGeneratedAttribute]
private ExcelRichTextCollection <RichText>k__BackingField;
    public string Author { get; public set; }
    public string Text { get; public set; }
    public ExcelRichText Font { get; }
    public ExcelRichTextCollection RichText { get; public set; }
    internal string Reference { get; internal set; }
    internal ExcelComment(XmlNamespaceManager ns, XmlNode commentTopNode, ExcelRangeBase cell);
    public string get_Author();
    public void set_Author(string value);
    private int GetAuthor(string value);
    public string get_Text();
    public void set_Text(string value);
    public ExcelRichText get_Font();
    [CompilerGeneratedAttribute]
public ExcelRichTextCollection get_RichText();
    [CompilerGeneratedAttribute]
public void set_RichText(ExcelRichTextCollection value);
    internal string get_Reference();
    internal void set_Reference(string value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelCommentCollection : object {
    internal List`1<ExcelComment> _list;
    private List`1<int> _listIndex;
    [CompilerGeneratedAttribute]
private XmlDocument <CommentXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <NameSpaceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <Worksheet>k__BackingField;
    public XmlDocument CommentXml { get; public set; }
    internal Uri Uri { get; internal set; }
    internal string RelId { get; internal set; }
    internal XmlNamespaceManager NameSpaceManager { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    public ExcelWorksheet Worksheet { get; public set; }
    public int Count { get; }
    public ExcelComment Item { get; }
    public ExcelComment Item { get; }
    public ExcelComment Item { get; }
    internal ExcelCommentCollection(ExcelPackage pck, ExcelWorksheet ws, XmlNamespaceManager ns);
    private void CreateXml(ExcelPackage pck);
    private void AddCommentsFromXml();
    [CompilerGeneratedAttribute]
public XmlDocument get_CommentXml();
    [CompilerGeneratedAttribute]
public void set_CommentXml(XmlDocument value);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
internal string get_RelId();
    [CompilerGeneratedAttribute]
internal void set_RelId(string value);
    [CompilerGeneratedAttribute]
internal XmlNamespaceManager get_NameSpaceManager();
    [CompilerGeneratedAttribute]
internal void set_NameSpaceManager(XmlNamespaceManager value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
public ExcelWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
public void set_Worksheet(ExcelWorksheet value);
    public int get_Count();
    public ExcelComment get_Item(int Index);
    public ExcelComment get_Item(ExcelCellAddress cell);
    public ExcelComment get_Item(string cellAddress);
    public ExcelComment Add(ExcelRangeBase cell, string Text, string author);
    public void Remove(ExcelComment comment);
    internal void Remove(ExcelComment comment, bool shift);
    internal void Delete(int fromRow, int fromCol, int rows, int columns, int toRow, int toCol);
    internal void Insert(int fromRow, int fromCol, int rows, int columns, int toRow, int toCol);
    private sealed virtual override void System.IDisposable.Dispose();
    public void RemoveAt(int Index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Clear();
}
internal static class OfficeOpenXml.ExcelConfigurationReader : object {
    internal static string GetEnvironmentVariable(string key, EnvironmentVariableTarget target, ExcelPackageConfiguration config, List`1<ExcelInitializationError> initErrors);
    internal static string GetJsonConfigValue(string key, ExcelPackageConfiguration config, List`1<ExcelInitializationError> initErrors);
}
public class OfficeOpenXml.ExcelEncryption : object {
    private bool _isEncrypted;
    private string _password;
    [CompilerGeneratedAttribute]
private EncryptionAlgorithm <Algorithm>k__BackingField;
    private EncryptionVersion _version;
    public bool IsEncrypted { get; public set; }
    public string Password { get; public set; }
    public EncryptionAlgorithm Algorithm { get; public set; }
    public EncryptionVersion Version { get; public set; }
    internal ExcelEncryption(EncryptionAlgorithm encryptionAlgorithm);
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public string get_Password();
    public void set_Password(string value);
    [CompilerGeneratedAttribute]
public EncryptionAlgorithm get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(EncryptionAlgorithm value);
    public EncryptionVersion get_Version();
    public void set_Version(EncryptionVersion value);
    public static MemoryStream EncryptPackage(Stream stream, string password, EncryptionVersion encryptionVersion, EncryptionAlgorithm algorithm);
    public static MemoryStream DecryptPackage(Stream stream, string password);
}
public class OfficeOpenXml.ExcelErrorValue : object {
    [CompilerGeneratedAttribute]
private eErrorType <Type>k__BackingField;
    public CompileResult AsCompileResult { get; }
    public eErrorType Type { get; private set; }
    internal ExcelErrorValue(eErrorType type);
    public static ExcelErrorValue Create(eErrorType errorType);
    public CompileResult get_AsCompileResult();
    public static ExcelErrorValue Parse(string val);
    internal static bool IsErrorValue(string val);
    [CompilerGeneratedAttribute]
public eErrorType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(eErrorType value);
    public virtual string ToString();
    public static ExcelErrorValue op_Addition(object v1, ExcelErrorValue v2);
    public static ExcelErrorValue op_Addition(ExcelErrorValue v1, ExcelErrorValue v2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class OfficeOpenXml.ExcelFormulaAddress : ExcelAddressBase {
    internal List`1<ExcelFormulaAddress> _addresses;
    public string Address { get; public set; }
    public List`1<ExcelFormulaAddress> Addresses { get; }
    public ExcelFormulaAddress(int fromRow, int fromCol, int toRow, int toColumn);
    public ExcelFormulaAddress(string address, ExcelWorksheet worksheet);
    internal ExcelFormulaAddress(string ws, string address);
    internal ExcelFormulaAddress(string ws, string address, bool isName);
    private void SetFixed();
    private void GetFixed(string address, Boolean& rowFixed, Boolean& colFixed);
    public string get_Address();
    public void set_Address(string value);
    public List`1<ExcelFormulaAddress> get_Addresses();
    internal string GetOffset(int row, int column, bool withWbWs);
}
public class OfficeOpenXml.ExcelHeaderFooter : XmlHelper {
    public static string PageNumber;
    public static string NumberOfPages;
    public static string FontColor;
    public static string SheetName;
    public static string FilePath;
    public static string FileName;
    public static string CurrentDate;
    public static string CurrentTime;
    public static string Image;
    public static string OutlineStyle;
    public static string ShadowStyle;
    internal ExcelHeaderFooterText _oddHeader;
    internal ExcelHeaderFooterText _oddFooter;
    internal ExcelHeaderFooterText _evenHeader;
    internal ExcelHeaderFooterText _evenFooter;
    internal ExcelHeaderFooterText _firstHeader;
    internal ExcelHeaderFooterText _firstFooter;
    private ExcelWorksheet _ws;
    private static string alignWithMarginsPath;
    private static string differentOddEvenPath;
    private static string differentFirstPath;
    private static string scaleWithDocPath;
    internal ExcelVmlDrawingPictureCollection _vmlDrawingsHF;
    public bool AlignWithMargins { get; public set; }
    public bool differentOddEven { get; public set; }
    public bool differentFirst { get; public set; }
    public bool ScaleWithDocument { get; public set; }
    public ExcelHeaderFooterText OddHeader { get; }
    public ExcelHeaderFooterText OddFooter { get; }
    public ExcelHeaderFooterText EvenHeader { get; }
    public ExcelHeaderFooterText EvenFooter { get; }
    public ExcelHeaderFooterText FirstHeader { get; }
    public ExcelHeaderFooterText FirstFooter { get; }
    public ExcelVmlDrawingPictureCollection Pictures { get; }
    internal ExcelHeaderFooter(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelWorksheet ws);
    public bool get_AlignWithMargins();
    public void set_AlignWithMargins(bool value);
    public bool get_differentOddEven();
    public void set_differentOddEven(bool value);
    public bool get_differentFirst();
    public void set_differentFirst(bool value);
    public bool get_ScaleWithDocument();
    public void set_ScaleWithDocument(bool value);
    public ExcelHeaderFooterText get_OddHeader();
    public ExcelHeaderFooterText get_OddFooter();
    public ExcelHeaderFooterText get_EvenHeader();
    public ExcelHeaderFooterText get_EvenFooter();
    public ExcelHeaderFooterText get_FirstHeader();
    public ExcelHeaderFooterText get_FirstFooter();
    public ExcelVmlDrawingPictureCollection get_Pictures();
    internal void Save();
    internal void SaveHeaderFooterImages();
    private string GetText(ExcelHeaderFooterText headerFooter);
}
public class OfficeOpenXml.ExcelHeaderFooterText : object {
    private static string ARG_TO_LONG_EXCEPTION_TEXT;
    private ExcelWorksheet _ws;
    private string _hf;
    private string _leftAlignedText;
    private string _centeredText;
    private string _rightAlignedText;
    public string LeftAlignedText { get; public set; }
    public string CenteredText { get; public set; }
    public string RightAlignedText { get; public set; }
    internal ExcelHeaderFooterText(XmlNode TextNode, ExcelWorksheet ws, string hf);
    private void SetText(string code, string text);
    public string get_LeftAlignedText();
    public void set_LeftAlignedText(string value);
    public string get_CenteredText();
    public void set_CenteredText(string value);
    public string get_RightAlignedText();
    public void set_RightAlignedText(string value);
    private string ValidateAndTrimText(string value);
    public ExcelVmlDrawingPicture InsertPicture(FileInfo PictureFile, PictureAlignment Alignment);
    public ExcelVmlDrawingPicture InsertPicture(Stream PictureStream, ePictureType pictureType, PictureAlignment Alignment);
    private ExcelVmlDrawingPicture AddImage(string id, ImageInfo ii);
    private string ValidateImage(PictureAlignment Alignment);
}
public class OfficeOpenXml.ExcelHyperLink : Uri {
    private string _referenceAddress;
    private string _display;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private int _colSpan;
    private int _rowSpan;
    [CompilerGeneratedAttribute]
private Uri <OriginalUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public string ReferenceAddress { get; public set; }
    public string Display { get; public set; }
    public string ToolTip { get; public set; }
    public int ColSpan { get; public set; }
    public int RowSpan { get; public set; }
    public Uri OriginalUri { get; internal set; }
    internal string RId { get; internal set; }
    internal string Target { get; internal set; }
    public ExcelHyperLink(string uriString);
    public ExcelHyperLink(string uriString, UriKind uriKind);
    public ExcelHyperLink(string referenceAddress, string display);
    public string get_ReferenceAddress();
    public void set_ReferenceAddress(string value);
    public string get_Display();
    public void set_Display(string value);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
public void set_ToolTip(string value);
    public int get_ColSpan();
    public void set_ColSpan(int value);
    public int get_RowSpan();
    public void set_RowSpan(int value);
    [CompilerGeneratedAttribute]
public Uri get_OriginalUri();
    [CompilerGeneratedAttribute]
internal void set_OriginalUri(Uri value);
    [CompilerGeneratedAttribute]
internal string get_RId();
    [CompilerGeneratedAttribute]
internal void set_RId(string value);
    [CompilerGeneratedAttribute]
internal string get_Target();
    [CompilerGeneratedAttribute]
internal void set_Target(string value);
}
public class OfficeOpenXml.ExcelIgnoredError : XmlHelper {
    public bool NumberStoredAsText { get; public set; }
    public bool CalculatedColumn { get; public set; }
    public bool EmptyCellReference { get; public set; }
    public bool EvaluationError { get; public set; }
    public bool Formula { get; public set; }
    public bool FormulaRange { get; public set; }
    public bool ListDataValidation { get; public set; }
    public ExcelAddressBase Address { get; }
    public bool TwoDigitTextYear { get; public set; }
    public bool UnlockedFormula { get; public set; }
    internal ExcelIgnoredError(XmlNamespaceManager nsm, XmlNode topNode, ExcelAddressBase address);
    public bool get_NumberStoredAsText();
    public void set_NumberStoredAsText(bool value);
    public bool get_CalculatedColumn();
    public void set_CalculatedColumn(bool value);
    public bool get_EmptyCellReference();
    public void set_EmptyCellReference(bool value);
    public bool get_EvaluationError();
    public void set_EvaluationError(bool value);
    public bool get_Formula();
    public void set_Formula(bool value);
    public bool get_FormulaRange();
    public void set_FormulaRange(bool value);
    public bool get_ListDataValidation();
    public void set_ListDataValidation(bool value);
    public ExcelAddressBase get_Address();
    public bool get_TwoDigitTextYear();
    public void set_TwoDigitTextYear(bool value);
    public bool get_UnlockedFormula();
    public void set_UnlockedFormula(bool value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelIgnoredErrorCollection : object {
    private ExcelPackage _package;
    private ExcelWorksheet _excelWorksheet;
    private XmlNamespaceManager _nameSpaceManager;
    private List`1<ExcelIgnoredError> _list;
    private XmlNode _topNode;
    public ExcelIgnoredError Item { get; }
    public int Count { get; }
    internal XmlNode TopNode { get; }
    internal ExcelIgnoredErrorCollection(ExcelPackage package, ExcelWorksheet excelWorksheet, XmlNamespaceManager nameSpaceManager);
    public ExcelIgnoredError get_Item(int Index);
    public int get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelIgnoredError Add(ExcelAddressBase address);
    internal XmlNode get_TopNode();
    private sealed virtual override IEnumerator`1<ExcelIgnoredError> System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelIgnoredError>.GetEnumerator();
    public sealed virtual void Dispose();
}
public class OfficeOpenXml.ExcelImageSettings : object {
    [CompilerGeneratedAttribute]
private IImageHandler <PrimaryImageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IImageHandler <SecondaryImageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IImageHandler <TertiaryImageHandler>k__BackingField;
    public IImageHandler PrimaryImageHandler { get; public set; }
    public IImageHandler SecondaryImageHandler { get; public set; }
    public IImageHandler TertiaryImageHandler { get; public set; }
    [CompilerGeneratedAttribute]
public IImageHandler get_PrimaryImageHandler();
    [CompilerGeneratedAttribute]
public void set_PrimaryImageHandler(IImageHandler value);
    [CompilerGeneratedAttribute]
public IImageHandler get_SecondaryImageHandler();
    [CompilerGeneratedAttribute]
public void set_SecondaryImageHandler(IImageHandler value);
    [CompilerGeneratedAttribute]
public IImageHandler get_TertiaryImageHandler();
    [CompilerGeneratedAttribute]
public void set_TertiaryImageHandler(IImageHandler value);
    internal bool GetImageBounds(MemoryStream ms, ePictureType type, Double& width, Double& height, Double& horizontalResolution, Double& verticalResolution);
}
public class OfficeOpenXml.ExcelInitializationError : object {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string ErrorMessage { get; private set; }
    public DateTime TimestampUtc { get; private set; }
    public Exception Exception { get; private set; }
    internal ExcelInitializationError(string errorMessage, Exception e);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public DateTime get_TimestampUtc();
    [CompilerGeneratedAttribute]
private void set_TimestampUtc(DateTime value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
public class OfficeOpenXml.ExcelNamedRange : ExcelRangeBase {
    private ExcelWorksheet _sheet;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNameHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameComment>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NameValue>k__BackingField;
    private IList`1<Token> _tokens;
    [CompilerGeneratedAttribute]
private string <NameFormula>k__BackingField;
    private string _r1c1Formula;
    [CompilerGeneratedAttribute]
private bool <AllowRelativeAddress>k__BackingField;
    private NameRelativeType _relativeType;
    public string Name { get; internal set; }
    public int LocalSheetId { get; }
    internal ExcelWorksheet LocalSheet { get; }
    internal int Index { get; internal set; }
    public bool IsNameHidden { get; public set; }
    public string NameComment { get; public set; }
    internal object NameValue { get; internal set; }
    internal string NameFormula { get; internal set; }
    internal bool AllowRelativeAddress { get; private set; }
    internal bool IsRelative { get; }
    internal ExcelNamedRange(string name, ExcelWorksheet nameSheet, ExcelWorksheet sheet, string address, int index, bool allowRelativeAddress);
    internal ExcelNamedRange(string name, ExcelWorkbook wb, ExcelWorksheet nameSheet, int index, bool allowRelativeAddress);
    private void Init(string name, ExcelWorksheet nameSheet, int index, bool allowRelativeAddress);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    public int get_LocalSheetId();
    internal ExcelWorksheet get_LocalSheet();
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
public bool get_IsNameHidden();
    [CompilerGeneratedAttribute]
public void set_IsNameHidden(bool value);
    [CompilerGeneratedAttribute]
public string get_NameComment();
    [CompilerGeneratedAttribute]
public void set_NameComment(string value);
    [CompilerGeneratedAttribute]
internal object get_NameValue();
    [CompilerGeneratedAttribute]
internal void set_NameValue(object value);
    [CompilerGeneratedAttribute]
internal string get_NameFormula();
    [CompilerGeneratedAttribute]
internal void set_NameFormula(string value);
    internal string GetRelativeFormula(int row, int col);
    private void SetRelativeType();
    private NameRelativeType HasRelativeRef(IList`1<Token> tokens);
    internal static string GetRelativeFormula(string sourceFormula, int row, int col);
    private void GetRefAddress(Int32& row, Int32& col);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
internal bool get_AllowRelativeAddress();
    [CompilerGeneratedAttribute]
private void set_AllowRelativeAddress(bool value);
    internal bool get_IsRelative();
    public virtual int GetHashCode();
    internal object GetValue(FormulaCellAddress currentCell);
    internal RangeInfo GetRelativeRange(IRangeInfo ri, FormulaCellAddress currentCell);
    internal void SetValue(object resultValue, FormulaCellAddress currentCell);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelNamedRangeCollection : object {
    internal ExcelWorksheet _ws;
    internal ExcelWorkbook _wb;
    private List`1<ExcelNamedRange> _list;
    private Dictionary`2<string, int> _dic;
    public int Count { get; }
    public ExcelNamedRange Item { get; }
    public ExcelNamedRange Item { get; }
    internal ExcelNamedRangeCollection(ExcelWorkbook wb);
    internal ExcelNamedRangeCollection(ExcelWorkbook wb, ExcelWorksheet ws);
    public ExcelNamedRange Add(string Name, ExcelRangeBase Range, bool allowRelativeAddress);
    public ExcelNamedRange Add(string Name, ExcelRangeBase Range);
    internal ExcelNamedRange AddName(string Name, ExcelRangeBase Range, bool allowRelativeAddress);
    private void AddName(string Name, ExcelNamedRange item);
    public ExcelNamedRange AddValue(string Name, object value);
    public ExcelNamedRange AddFormula(string Name, string Formula);
    internal ExcelNamedRange AddFormulaNoValidation(string Name, string Formula);
    internal void Insert(int rowFrom, int colFrom, int rows, int cols, int lowerLimint, int upperLimit);
    internal void Insert(int rowFrom, int colFrom, int rows, int cols, Func`2<ExcelNamedRange, bool> filter, int lowerLimint, int upperLimit);
    internal void Delete(int rowFrom, int colFrom, int rows, int cols, int lowerLimint, int upperLimit);
    internal void Delete(int rowFrom, int colFrom, int rows, int cols, Func`2<ExcelNamedRange, bool> filter, int lowerLimint, int upperLimit);
    public void Remove(string Name);
    public bool ContainsKey(string key);
    public int get_Count();
    public ExcelNamedRange get_Item(string Name);
    public ExcelNamedRange get_Item(int Index);
    public sealed virtual IEnumerator`1<ExcelNamedRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Clear();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelNamedStyleCollection`1 : ExcelStyleCollection`1<T> {
    public T Item { get; }
    public T get_Item(string name);
}
public class OfficeOpenXml.ExcelOutputTextFormat : ExcelTextFormatBase {
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCellFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Formats>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecimalSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThousandsSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedTextQualifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DataIsTransposed>k__BackingField;
    public string Header { get; public set; }
    public string Footer { get; public set; }
    public bool UseCellFormat { get; public set; }
    public String[] Formats { get; public set; }
    public string DecimalSeparator { get; public set; }
    public string ThousandsSeparator { get; public set; }
    public string EncodedTextQualifiers { get; public set; }
    public bool DataIsTransposed { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public string get_Footer();
    [CompilerGeneratedAttribute]
public void set_Footer(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCellFormat();
    [CompilerGeneratedAttribute]
public void set_UseCellFormat(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Formats();
    [CompilerGeneratedAttribute]
public void set_Formats(String[] value);
    [CompilerGeneratedAttribute]
public string get_DecimalSeparator();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_ThousandsSeparator();
    [CompilerGeneratedAttribute]
public void set_ThousandsSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedTextQualifiers();
    [CompilerGeneratedAttribute]
public void set_EncodedTextQualifiers(string value);
    [CompilerGeneratedAttribute]
public bool get_DataIsTransposed();
    [CompilerGeneratedAttribute]
public void set_DataIsTransposed(bool value);
}
public class OfficeOpenXml.ExcelOutputTextFormatFixedWidth : ExcelTextFormatFixedWidthBase {
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCellFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Formats>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecimalSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThousandsSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedTextQualifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTrailingMinus>k__BackingField;
    public string Header { get; public set; }
    public string Footer { get; public set; }
    public bool ExcludeHeader { get; public set; }
    public bool UseCellFormat { get; public set; }
    public String[] Formats { get; public set; }
    public string DecimalSeparator { get; public set; }
    public string ThousandsSeparator { get; public set; }
    public string EncodedTextQualifiers { get; public set; }
    public bool UseTrailingMinus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public string get_Footer();
    [CompilerGeneratedAttribute]
public void set_Footer(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeHeader();
    [CompilerGeneratedAttribute]
public void set_ExcludeHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCellFormat();
    [CompilerGeneratedAttribute]
public void set_UseCellFormat(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Formats();
    [CompilerGeneratedAttribute]
public void set_Formats(String[] value);
    [CompilerGeneratedAttribute]
public string get_DecimalSeparator();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_ThousandsSeparator();
    [CompilerGeneratedAttribute]
public void set_ThousandsSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedTextQualifiers();
    [CompilerGeneratedAttribute]
public void set_EncodedTextQualifiers(string value);
    [CompilerGeneratedAttribute]
public bool get_UseTrailingMinus();
    [CompilerGeneratedAttribute]
public void set_UseTrailingMinus(bool value);
}
public class OfficeOpenXml.ExcelPackage : object {
    internal bool _isDisposed;
    internal static bool preserveWhitespace;
    private Stream _stream;
    private bool _isExternalStream;
    internal ExcelPackage _loadedPackage;
    internal static string schemaXmlExtension;
    internal static string schemaRelsExtension;
    internal static string schemaWorkbook;
    internal static string schemaMain;
    internal static string schemaRelationships;
    internal static string schemaDrawings;
    internal static string schemaSheetDrawings;
    internal static string schemaMarkupCompatibility;
    internal static string schemaChart14;
    internal static string schemaMicrosoftVml;
    internal static string schemaMicrosoftOffice;
    internal static string schemaMicrosoftExcel;
    internal static string schemaChart;
    internal static string schemaChart2012;
    internal static string schemaChart2014;
    internal static string schemaHyperlink;
    internal static string schemaComment;
    internal static string schemaImage;
    internal static string schemaThemeRelationships;
    internal static string schemaMetadata;
    internal static string schemaChartStyle;
    internal static string schemaChartStyleRelationships;
    internal static string schemaChartColorStyleRelationships;
    internal static string schemaThemeOverrideRelationships;
    internal static string schemaCore;
    internal static string schemaExtended;
    internal static string schemaCustom;
    internal static string schemaDc;
    internal static string schemaDcTerms;
    internal static string schemaDcmiType;
    internal static string schemaXsi;
    internal static string schemaVt;
    internal static string schemaMainX14;
    internal static string schemaMainX15;
    internal static string schemaMainXm;
    internal static string schemaXr;
    internal static string schemaXr2;
    internal static string schemaMc2006;
    internal static string schemaChartExMain;
    internal static string schemaChartEx2015_9_8;
    internal static string schemaChartEx2015_10_21;
    internal static string schemaChartEx2016_5_10;
    internal static string schemaChartExRelationships;
    internal static string schemaSlicer;
    internal static string schemaDrawings2010;
    internal static string schemaSlicer2010;
    internal static string schemaRelationshipsSlicer;
    internal static string schemaRelationshipsSlicerCache;
    internal static string schemaThreadedComments;
    internal static string schemaThreadedComment;
    internal static string schemaPersonsRelationShips;
    internal static string schemaRichData2;
    internal static string schemaDynamicArrays;
    private ZipPackage _zipPackage;
    internal ExcelWorkbook _workbook;
    public static int MaxColumns;
    public static int MaxRows;
    internal List`1<Action> BeforeSave;
    private static ExcelPackageConfiguration _configuration;
    private List`1<ExcelInitializationError> _initErrors;
    private PictureStore _pictureStore;
    private ExcelEncryption _encryption;
    private static Nullable`1<LicenseContext> _licenseType;
    internal static bool _licenseSet;
    [CompilerGeneratedAttribute]
private bool <DoAdjustDrawings>k__BackingField;
    [CompilerGeneratedAttribute]
private FileInfo <File>k__BackingField;
    private CompatibilitySettings _compatibility;
    [CompilerGeneratedAttribute]
private ExcelPackageSettings <Settings>k__BackingField;
    private static MemorySettings _memorySettings;
    internal int _worksheetAdd;
    internal static ExcelPackageConfiguration GlobalConfiguration { get; }
    internal PictureStore PictureStore { get; }
    internal ZipPackage ZipPackage { get; }
    public ExcelEncryption Encryption { get; }
    public static Nullable`1<LicenseContext> LicenseContext { get; public set; }
    public ExcelWorkbook Workbook { get; }
    public IEnumerable`1<ExcelInitializationError> InitializationErrors { get; }
    public bool DoAdjustDrawings { get; public set; }
    public FileInfo File { get; public set; }
    public Stream Stream { get; }
    public CompressionLevel Compression { get; public set; }
    public CompatibilitySettings Compatibility { get; }
    public ExcelPackageSettings Settings { get; private set; }
    public static MemorySettings MemorySettings { get; }
    public ExcelPackage(FileInfo newFile);
    public ExcelPackage(string path);
    public ExcelPackage(FileInfo newFile, string password);
    public ExcelPackage(string path, string password);
    public ExcelPackage(FileInfo newFile, FileInfo template);
    public ExcelPackage(FileInfo newFile, FileInfo template, string password);
    public ExcelPackage(string newFilePath, string templatePath, string password);
    public ExcelPackage(FileInfo template, bool useStream);
    public ExcelPackage(FileInfo template, bool useStream, string password);
    public ExcelPackage(Stream newStream);
    public ExcelPackage(Stream newStream, string Password);
    public ExcelPackage(Stream newStream, Stream templateStream);
    public ExcelPackage(Stream newStream, Stream templateStream, string Password);
    private static ExcelPackage();
    internal static ExcelPackageConfiguration get_GlobalConfiguration();
    private void Init();
    private void CreateFromTemplate(FileInfo template, string password);
    private void ConstructNewFile(string password);
    private static void WriteFileToStream(string path, Stream stream);
    private void CreateBlankWb();
    internal PictureStore get_PictureStore();
    internal ZipPackage get_ZipPackage();
    public ExcelEncryption get_Encryption();
    public static Nullable`1<LicenseContext> get_LicenseContext();
    public static void set_LicenseContext(Nullable`1<LicenseContext> value);
    internal static bool IsLicenseSet(List`1<ExcelInitializationError> initErrors);
    public ExcelWorkbook get_Workbook();
    public static void Configure(Action`1<ExcelPackageConfiguration> configHandler);
    public IEnumerable`1<ExcelInitializationError> get_InitializationErrors();
    [CompilerGeneratedAttribute]
public bool get_DoAdjustDrawings();
    [CompilerGeneratedAttribute]
public void set_DoAdjustDrawings(bool value);
    private XmlNamespaceManager CreateDefaultNSM();
    internal void SavePart(Uri uri, XmlDocument xmlDoc);
    internal void SaveWorkbook(Uri uri, XmlDocument xmlDoc);
    public sealed virtual void Dispose();
    public void Save();
    public void Save(string password);
    public void SaveAs(FileInfo file);
    public void SaveAs(string filePath);
    public void SaveAs(FileInfo file, string password);
    public void SaveAs(string filePath, string password);
    public void SaveAs(Stream OutputStream);
    public void SaveAs(Stream OutputStream, string password);
    [CompilerGeneratedAttribute]
public FileInfo get_File();
    [CompilerGeneratedAttribute]
public void set_File(FileInfo value);
    internal void CloseStream();
    public Stream get_Stream();
    public CompressionLevel get_Compression();
    public void set_Compression(CompressionLevel value);
    public CompatibilitySettings get_Compatibility();
    [CompilerGeneratedAttribute]
public ExcelPackageSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(ExcelPackageSettings value);
    public static MemorySettings get_MemorySettings();
    internal XmlDocument GetXmlFromUri(Uri uri);
    public Byte[] GetAsByteArray();
    public Byte[] GetAsByteArray(string password);
    internal Byte[] GetAsByteArray(bool save);
    private void CheckNotDisposed();
    public void Load(Stream input);
    public void Load(Stream input, string Password);
    private void Load(Stream input, Stream output, string Password);
    private void ReleaseResources();
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__151")]
public Task LoadAsync(FileInfo fileInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__152")]
public Task LoadAsync(string filePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__153")]
public Task LoadAsync(FileInfo fileInfo, string Password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__154")]
public Task LoadAsync(string filePath, string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__155")]
public Task LoadAsync(FileInfo fileInfo, Stream output, string Password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__156")]
public Task LoadAsync(string filePath, Stream output, string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__157")]
public Task LoadAsync(Stream input, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__158")]
public Task LoadAsync(Stream input, string Password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<LoadAsync>d__159")]
private Task LoadAsync(Stream input, Stream output, string Password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsync>d__160")]
public Task SaveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsync>d__161")]
public Task SaveAsync(string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsAsync>d__162")]
public Task SaveAsAsync(FileInfo file, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsAsync>d__163")]
public Task SaveAsAsync(string filePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsAsync>d__164")]
public Task SaveAsAsync(FileInfo file, string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsAsync>d__165")]
public Task SaveAsAsync(string filePath, string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsAsync>d__166")]
public Task SaveAsAsync(Stream OutputStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<SaveAsAsync>d__167")]
public Task SaveAsAsync(Stream OutputStream, string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<GetAsByteArrayAsync>d__168")]
internal Task`1<Byte[]> GetAsByteArrayAsync(bool save, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<GetAsByteArrayAsync>d__169")]
public Task`1<Byte[]> GetAsByteArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<GetAsByteArrayAsync>d__170")]
public Task`1<Byte[]> GetAsByteArrayAsync(string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<ConstructNewFileAsync>d__171")]
private Task ConstructNewFileAsync(string password, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelPackage/<WriteFileToStreamAsync>d__172")]
private static Task WriteFileToStreamAsync(string path, Stream stream, CancellationToken cancellationToken);
}
public class OfficeOpenXml.ExcelPackageSettings : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, Dictionary`2<int, string>> <CultureSpecificBuildInNumberFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoGarbageCollectOnDispose>k__BackingField;
    private ExcelTextSettings _textSettings;
    private ExcelImageSettings _imageSettings;
    [CompilerGeneratedAttribute]
private bool <ApplyFiltersOnSave>k__BackingField;
    public static Dictionary`2<string, Dictionary`2<int, string>> CultureSpecificBuildInNumberFormats { get; }
    public bool DoGarbageCollectOnDispose { get; public set; }
    public ExcelTextSettings TextSettings { get; }
    public ExcelImageSettings ImageSettings { get; }
    public bool ApplyFiltersOnSave { get; public set; }
    private static ExcelPackageSettings();
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, Dictionary`2<int, string>> get_CultureSpecificBuildInNumberFormats();
    [CompilerGeneratedAttribute]
public bool get_DoGarbageCollectOnDispose();
    [CompilerGeneratedAttribute]
public void set_DoGarbageCollectOnDispose(bool value);
    public ExcelTextSettings get_TextSettings();
    public ExcelImageSettings get_ImageSettings();
    [CompilerGeneratedAttribute]
public bool get_ApplyFiltersOnSave();
    [CompilerGeneratedAttribute]
public void set_ApplyFiltersOnSave(bool value);
}
internal class OfficeOpenXml.ExcelPhoneticProperties : XmlHelper {
    private static string FontIdPath;
    private static string PhoneticTypePath;
    private static string PhoneticAlignmentPath;
    public int FontId { get; public set; }
    public ePhoneticType PhoneticType { get; public set; }
    public ePhoneticAlignment Alignment { get; public set; }
    internal ExcelPhoneticProperties(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public int get_FontId();
    public void set_FontId(int value);
    public ePhoneticType get_PhoneticType();
    public void set_PhoneticType(ePhoneticType value);
    public ePhoneticAlignment get_Alignment();
    public void set_Alignment(ePhoneticAlignment value);
    private string GetPhoneticTypeString(ePhoneticType value);
}
public class OfficeOpenXml.ExcelPrinterSettings : XmlHelper {
    private ExcelWorksheet _ws;
    private bool _marginsCreated;
    private static string _leftMarginPath;
    private static string _rightMarginPath;
    private static string _topMarginPath;
    private static string _bottomMarginPath;
    private static string _headerMarginPath;
    private static string _footerMarginPath;
    private static string _orientationPath;
    private static string _fitToWidthPath;
    private static string _fitToHeightPath;
    private static string _scalePath;
    private static string _fitToPagePath;
    private static string _headersPath;
    private static string _gridLinesPath;
    private static string _horizontalCenteredPath;
    private static string _verticalCenteredPath;
    private static string _pageOrderPath;
    private static string _blackAndWhitePath;
    private static string _draftPath;
    private static string _paperSizePath;
    public decimal LeftMargin { get; public set; }
    public decimal RightMargin { get; public set; }
    public decimal TopMargin { get; public set; }
    public decimal BottomMargin { get; public set; }
    public decimal HeaderMargin { get; public set; }
    public decimal FooterMargin { get; public set; }
    public eOrientation Orientation { get; public set; }
    public int FitToWidth { get; public set; }
    public int FitToHeight { get; public set; }
    public int Scale { get; public set; }
    public bool FitToPage { get; public set; }
    public bool ShowHeaders { get; public set; }
    public ExcelAddress RepeatRows { get; public set; }
    public ExcelAddress RepeatColumns { get; public set; }
    public ExcelRangeBase PrintArea { get; public set; }
    public bool ShowGridLines { get; public set; }
    public bool HorizontalCentered { get; public set; }
    public bool VerticalCentered { get; public set; }
    public ePageOrder PageOrder { get; public set; }
    public bool BlackAndWhite { get; public set; }
    public bool Draft { get; public set; }
    public ePaperSize PaperSize { get; public set; }
    internal ExcelPrinterSettings(XmlNamespaceManager ns, XmlNode topNode, ExcelWorksheet ws);
    public decimal get_LeftMargin();
    public void set_LeftMargin(decimal value);
    public decimal get_RightMargin();
    public void set_RightMargin(decimal value);
    public decimal get_TopMargin();
    public void set_TopMargin(decimal value);
    public decimal get_BottomMargin();
    public void set_BottomMargin(decimal value);
    public decimal get_HeaderMargin();
    public void set_HeaderMargin(decimal value);
    public decimal get_FooterMargin();
    public void set_FooterMargin(decimal value);
    public eOrientation get_Orientation();
    public void set_Orientation(eOrientation value);
    public int get_FitToWidth();
    public void set_FitToWidth(int value);
    public int get_FitToHeight();
    public void set_FitToHeight(int value);
    public int get_Scale();
    public void set_Scale(int value);
    public bool get_FitToPage();
    public void set_FitToPage(bool value);
    public bool get_ShowHeaders();
    public void set_ShowHeaders(bool value);
    public ExcelAddress get_RepeatRows();
    public void set_RepeatRows(ExcelAddress value);
    public ExcelAddress get_RepeatColumns();
    public void set_RepeatColumns(ExcelAddress value);
    public ExcelRangeBase get_PrintArea();
    public void set_PrintArea(ExcelRangeBase value);
    public bool get_ShowGridLines();
    public void set_ShowGridLines(bool value);
    public bool get_HorizontalCentered();
    public void set_HorizontalCentered(bool value);
    public bool get_VerticalCentered();
    public void set_VerticalCentered(bool value);
    public ePageOrder get_PageOrder();
    public void set_PageOrder(ePageOrder value);
    public bool get_BlackAndWhite();
    public void set_BlackAndWhite(bool value);
    public bool get_Draft();
    public void set_Draft(bool value);
    public ePaperSize get_PaperSize();
    public void set_PaperSize(ePaperSize value);
    private void CreateMargins();
}
public class OfficeOpenXml.ExcelProtectedRange : XmlHelper {
    private ExcelAddress _address;
    public string Name { get; public set; }
    public ExcelAddress Address { get; public set; }
    public string SecurityDescriptor { get; public set; }
    internal int SpinCount { get; internal set; }
    internal string Salt { get; internal set; }
    internal string Hash { get; internal set; }
    internal eProtectedRangeAlgorithm Algorithm { get; internal set; }
    internal ExcelProtectedRange(XmlNamespaceManager nsm, XmlNode topNode);
    public string get_Name();
    public void set_Name(string value);
    public ExcelAddress get_Address();
    public void set_Address(ExcelAddress value);
    public void SetPassword(string password);
    public string get_SecurityDescriptor();
    public void set_SecurityDescriptor(string value);
    internal int get_SpinCount();
    internal void set_SpinCount(int value);
    internal string get_Salt();
    internal void set_Salt(string value);
    internal string get_Hash();
    internal void set_Hash(string value);
    internal eProtectedRangeAlgorithm get_Algorithm();
    internal void set_Algorithm(eProtectedRangeAlgorithm value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelProtectedRangeCollection : XmlHelper {
    private ExcelWorksheet _ws;
    private List`1<ExcelProtectedRange> _list;
    private static string _collectionNodePath;
    private static string _itemNodePath;
    private XmlElement _collectionNode;
    public int Count { get; }
    public ExcelProtectedRange Item { get; }
    internal ExcelProtectedRangeCollection(ExcelWorksheet ws);
    public ExcelProtectedRange Add(string name, ExcelAddress address);
    public void Clear();
    public bool Contains(ExcelProtectedRange item);
    public void CopyTo(ExcelProtectedRange[] array, int arrayIndex);
    public int get_Count();
    public bool Remove(ExcelProtectedRange item);
    public int IndexOf(ExcelProtectedRange item);
    public void RemoveAt(int index);
    public ExcelProtectedRange get_Item(int index);
    private sealed virtual override IEnumerator`1<ExcelProtectedRange> System.Collections.Generic.IEnumerable<OfficeOpenXml.ExcelProtectedRange>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.ExcelProtection : XmlHelper {
    private static string workbookPasswordPath;
    private static string lockStructurePath;
    private static string lockWindowsPath;
    private static string lockRevisionPath;
    private ExcelWriteProtection _writeProtection;
    public bool LockStructure { get; public set; }
    public bool LockWindows { get; public set; }
    public bool LockRevision { get; public set; }
    public ExcelWriteProtection WriteProtection { get; }
    internal ExcelProtection(XmlNamespaceManager ns, XmlNode topNode, ExcelWorkbook wb);
    public void SetPassword(string Password);
    public bool get_LockStructure();
    public void set_LockStructure(bool value);
    public bool get_LockWindows();
    public void set_LockWindows(bool value);
    public bool get_LockRevision();
    public void set_LockRevision(bool value);
    public ExcelWriteProtection get_WriteProtection();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelRange : ExcelRangeBase {
    public ExcelRange Item { get; }
    public ExcelRange Item { get; }
    public ExcelRange Item { get; }
    internal ExcelRange(ExcelWorksheet sheet, string address);
    internal ExcelRange(ExcelWorksheet sheet, int fromRow, int fromCol, int toRow, int toCol);
    public ExcelRange get_Item(string Address);
    private ExcelRange GetTableAddess(ExcelWorksheet _worksheet, string address);
    public ExcelRange get_Item(int Row, int Col);
    public ExcelRange get_Item(int FromRow, int FromCol, int ToRow, int ToCol);
    private static void ValidateRowCol(int Row, int Col);
    public void SetFormula(string formula, bool asSharedFormula);
}
public class OfficeOpenXml.ExcelRangeBase : ExcelAddress {
    protected internal ExcelWorksheet _worksheet;
    internal ExcelWorkbook _workbook;
    private _changeProp _changePropMethod;
    private int _styleID;
    private static SourceCodeTokenizer _tokenizer;
    private FunctionRepository _functions;
    private static _changeProp _setUnknownProp;
    private static _changeProp _setSingleProp;
    private static _changeProp _setRangeProp;
    private static _changeProp _setMultiProp;
    private static _setValue _setStyleIdDelegate;
    private static _setValue _setValueDelegate;
    private static _setValue _setHyperLinkDelegate;
    private static _setValue _setIsRichTextDelegate;
    private static _setValue _setExistsCommentDelegate;
    private static _setValue _setCommentDelegate;
    private static _setValue _setExistsThreadedCommentDelegate;
    private static _setValue _setThreadedCommentDelegate;
    protected internal ExcelRichTextCollection _rtc;
    private CellStoreEnumerator`1<ExcelValue> cellEnum;
    private int _enumAddressIx;
    private ExcelRangeColumn _entireColumn;
    private ExcelRangeRow _entireRow;
    public ExcelStyle Style { get; }
    public string StyleName { get; public set; }
    public int StyleID { get; public set; }
    public object Value { get; public set; }
    public string Text { get; }
    internal string TextForWidth { get; }
    public string Formula { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public Uri Hyperlink { get; public set; }
    public bool Merge { get; public set; }
    public bool AutoFilter { get; public set; }
    public bool IsRichText { get; public set; }
    public bool IsTable { get; }
    public bool IsArrayFormula { get; }
    public ExcelRichTextCollection RichText { get; }
    public ExcelComment Comment { get; }
    public ExcelThreadedCommentThread ThreadedComment { get; }
    public ExcelWorksheet Worksheet { get; }
    public string FullAddress { get; }
    public string FullAddressAbsolute { get; }
    public IRangeConditionalFormatting ConditionalFormatting { get; }
    public IRangeDataValidation DataValidation { get; }
    public ExcelRangeBase FormulaRange { get; }
    public ExcelRangeBase Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ExcelRangeColumn EntireColumn { get; }
    public ExcelRangeRow EntireRow { get; }
    public bool UseImplicitItersection { get; public set; }
    internal ExcelRangeBase(ExcelWorksheet xlWorksheet);
    internal ExcelRangeBase(ExcelWorksheet xlWorksheet, string address);
    internal ExcelRangeBase(ExcelWorkbook wb, ExcelWorksheet xlWorksheet, string address, bool isName);
    private static ExcelRangeBase();
    private void Init(ExcelWorksheet xlWorksheet);
    protected internal virtual void ChangeAddress();
    private void SetDelegate();
    private static void SetUnknown(ExcelRangeBase range, _setValue valueMethod, object value);
    private static void SetSingle(ExcelRangeBase range, _setValue valueMethod, object value);
    private static void SetRange(ExcelRangeBase range, _setValue valueMethod, object value);
    private static void SetMultiRange(ExcelRangeBase range, _setValue valueMethod, object value);
    private void SetValueAddress(ExcelAddressBase address, _setValue valueMethod, object value);
    private static void Set_StyleID(ExcelRangeBase range, object value, int row, int col);
    private static void Set_StyleName(ExcelRangeBase range, object value, int row, int col);
    private static void Set_Value(ExcelRangeBase range, object value, int row, int col);
    internal static void Set_Formula(ExcelRangeBase range, object value, int row, int col);
    private static void Set_SharedFormula(ExcelRangeBase range, string value, ExcelAddressBase address, bool IsArray, bool isDynamic);
    private static void Set_HyperLink(ExcelRangeBase range, object value, int row, int col);
    private static void Set_IsRichText(ExcelRangeBase range, object value, int row, int col);
    private static void Exists_Comment(ExcelRangeBase range, object value, int row, int col);
    private static void Set_Comment(ExcelRangeBase range, object value, int row, int col);
    private static void Exists_ThreadedComment(ExcelRangeBase range, object value, int row, int col);
    private static void Set_ThreadedComment(ExcelRangeBase range, object value, int row, int col);
    internal void SetToSelectedRange();
    private void IsRangeValid(string type);
    public sealed virtual ExcelStyle get_Style();
    public sealed virtual string get_StyleName();
    public void set_StyleName(string value);
    private int GetColumnStyle(int col);
    public sealed virtual int get_StyleID();
    public sealed virtual void set_StyleID(int value);
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    private static FormulaCellAddress GetActiveCell(ExcelWorksheet ws);
    public void SetErrorValue(eErrorType errorType);
    private object GetValueArray();
    private ExcelAddressBase GetAddressDim(ExcelRangeBase addr);
    private object GetSingleValue();
    public string get_Text();
    public void AutoFitColumns();
    public void AutoFitColumns(double MinimumWidth);
    public void AutoFitColumns(double MinimumWidth, double MaximumWidth);
    internal string get_TextForWidth();
    public virtual string get_Formula();
    public virtual void set_Formula(string value);
    private void Set_Formula_Range(ExcelRangeBase range, string formula);
    private void SetFormulaAddress(ExcelRangeBase range, ExcelAddressBase address, SharedFormula f);
    private bool HasOffSheetReference(string value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public IExcelHtmlRangeExporter CreateHtmlExporter();
    public sealed virtual Uri get_Hyperlink();
    public sealed virtual void set_Hyperlink(Uri value);
    public void SetHyperlink(Uri uri);
    public void SetHyperlink(ExcelHyperLink uri);
    public void SetHyperlink(ExcelRange range, string display);
    public void SetHyperlink(ExcelRange range);
    private void SetHyperlinkLocal(ExcelRange range, string display);
    public bool get_Merge();
    public void set_Merge(bool value);
    private void ValidateMergePossible();
    public bool get_AutoFilter();
    public void set_AutoFilter(bool value);
    private void ValidateAutofilterDontCollide();
    public bool get_IsRichText();
    public void set_IsRichText(bool value);
    public bool get_IsTable();
    public ExcelTable GetTable();
    internal void SetIsRichTextFlag(bool value);
    public void Insert(eShiftTypeInsert shift);
    public void Delete(eShiftTypeDelete shift);
    public bool get_IsArrayFormula();
    public ExcelRichTextCollection get_RichText();
    public ExcelComment get_Comment();
    public ExcelThreadedCommentThread get_ThreadedComment();
    public ExcelWorksheet get_Worksheet();
    public string get_FullAddress();
    public string get_FullAddressAbsolute();
    internal void SetValueRichText(object value);
    private void SetValueInner(object value, int row, int col);
    internal void SetSharedFormulaID(int id, int prevId);
    private void CheckAndSplitSharedFormula(ExcelAddressBase address);
    private void SplitFormulas(ExcelAddressBase address);
    private void SplitFormula(ExcelAddressBase address, int ix);
    public void ClearFormulas();
    private void ClearTableFormulas();
    public void ClearFormulaValues();
    private object ConvertData(ExcelTextFormat Format, string v, int col, bool isText);
    public IRangeConditionalFormatting get_ConditionalFormatting();
    public IRangeDataValidation get_DataValidation();
    public T GetValue();
    public ExcelRangeBase Offset(int RowOffset, int ColumnOffset);
    public ExcelRangeBase Offset(int RowOffset, int ColumnOffset, int NumberOfRows, int NumberOfColumns);
    public ExcelComment AddComment(string Text, string Author);
    public ExcelThreadedCommentThread AddThreadedComment();
    public void Copy(ExcelRangeBase Destination);
    public void Copy(ExcelRangeBase Destination, Nullable`1<ExcelRangeCopyOptionFlags> excelRangeCopyOptionFlags);
    public void Copy(ExcelRangeBase Destination, ExcelRangeCopyOptionFlags[] excelRangeCopyOptionFlags);
    public void CopyStyles(ExcelRangeBase Destination);
    public void Clear();
    public void CreateArrayFormula(string ArrayFormula, bool isDynamic);
    public ExcelRangeBase get_FormulaRange();
    internal void DeleteMe(ExcelAddressBase Range, bool shift, bool clearValues, bool clearFormulas, bool clearFlags, bool clearMergedCells, bool clearHyperLinks, bool clearComments, bool clearThreadedComments, bool clearStyles);
    private void ClearValue(CellStoreValue values, bool clearValue, int fromRow, int fromCol, int rows, int cols);
    private void DeleteComments(ExcelAddressBase Range);
    private void DeleteThreadedComments(ExcelAddressBase Range);
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<ExcelRangeBase> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual ExcelRangeBase get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public void Sort();
    public void Sort(int column, bool descending);
    public void Sort(Int32[] columns, Boolean[] descending, CultureInfo culture, CompareOptions compareOptions);
    internal void SortInternal(Int32[] columns, Boolean[] descending, Dictionary`2<int, String[]> customLists, CultureInfo culture, CompareOptions compareOptions, ExcelTable table, bool leftToRight);
    internal void SortInternal(SortOptionsBase options);
    internal void Sort(SortOptionsBase options, ExcelTable table);
    public void Sort(Action`1<RangeSortOptions> configuration);
    public void Sort(RangeSortOptions options);
    private static void SortSetValue(List`1<ExcelValue> list, int index, object value);
    internal string GetName();
    public ExcelRangeColumn get_EntireColumn();
    public ExcelRangeRow get_EntireRow();
    public T GetCellValue();
    public T GetCellValue(int columnOffset);
    public T GetCellValue(int rowOffset, int columnOffset);
    public void SetCellValue(int rowOffset, int columnOffset, object value);
    public bool get_UseImplicitItersection();
    public void set_UseImplicitItersection(bool value);
    public void FillNumber();
    public void FillNumber(Nullable`1<double> startValue, double stepValue);
    public void FillNumber(Action`1<FillNumberParams> options);
    public void FillDateTime();
    public void FillDateTime(Nullable`1<DateTime> startValue, eDateTimeUnit dateTimeUnit, int stepValue);
    public void FillDateTime(Action`1<FillDateParams> options);
    public void FillList(IEnumerable`1<T> list);
    public void FillList(IEnumerable`1<T> list, Action`1<FillListParams> options);
    public ExcelRangeBase LoadFromDataReader(IDataReader Reader, bool PrintHeaders, string TableName, TableStyles TableStyle);
    public ExcelRangeBase LoadFromDataReader(IDataReader Reader, bool PrintHeaders, string TableName, bool Transpose, TableStyles TableStyle);
    public ExcelRangeBase LoadFromDataReader(IDataReader Reader, bool PrintHeaders);
    public ExcelRangeBase LoadFromDataReader(IDataReader Reader, bool PrintHeaders, bool Transpose);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromDataReaderAsync>d__195")]
public Task`1<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders, string TableName, TableStyles TableStyle, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromDataReaderAsync>d__196")]
public Task`1<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders, string TableName, bool Transpose, TableStyles TableStyle, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromDataReaderAsync>d__197")]
public Task`1<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromDataReaderAsync>d__198")]
public Task`1<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders, bool Transpose);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromDataReaderAsync>d__199")]
public Task`1<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromDataReaderAsync>d__200")]
public Task`1<ExcelRangeBase> LoadFromDataReaderAsync(DbDataReader Reader, bool PrintHeaders, CancellationToken cancellationToken, bool Transpose);
    public ExcelRangeBase LoadFromDataTable(DataTable Table, bool PrintHeaders, Nullable`1<TableStyles> TableStyle);
    public ExcelRangeBase LoadFromDataTable(DataTable Table, bool PrintHeaders, Nullable`1<TableStyles> TableStyle, bool Transpose);
    public ExcelRangeBase LoadFromDataTable(DataTable Table, bool PrintHeaders);
    public ExcelRangeBase LoadFromDataTable(DataTable table);
    public ExcelRangeBase LoadFromDataTable(DataTable table, Action`1<LoadFromDataTableParams> paramsConfig);
    public ExcelRangeBase LoadFromArrays(IEnumerable`1<Object[]> Data);
    public ExcelRangeBase LoadFromArraysTransposed(IEnumerable`1<Object[]> Data);
    public ExcelRangeBase LoadFromCollection(IEnumerable`1<T> Collection);
    public ExcelRangeBase LoadFromCollection(IEnumerable`1<T> Collection, bool PrintHeaders);
    public ExcelRangeBase LoadFromCollection(IEnumerable`1<T> Collection, bool PrintHeaders, Nullable`1<TableStyles> TableStyle);
    public ExcelRangeBase LoadFromCollection(IEnumerable`1<T> Collection, bool PrintHeaders, Nullable`1<TableStyles> TableStyle, bool Transpose);
    public ExcelRangeBase LoadFromCollection(IEnumerable`1<T> Collection, bool PrintHeaders, Nullable`1<TableStyles> TableStyle, BindingFlags memberFlags, MemberInfo[] Members);
    private ExcelRangeBase LoadFromCollectionInternal(IEnumerable`1<T> Collection, bool PrintHeaders, Nullable`1<TableStyles> TableStyle, BindingFlags memberFlags, MemberInfo[] Members);
    public ExcelRangeBase LoadFromCollection(IEnumerable`1<T> Collection, bool PrintHeaders, Nullable`1<TableStyles> TableStyle, bool Transpose, BindingFlags memberFlags, MemberInfo[] Members);
    private ExcelRangeBase LoadFromCollectionInternal(IEnumerable`1<T> Collection, bool PrintHeaders, Nullable`1<TableStyles> TableStyle, bool Transpose, BindingFlags memberFlags, MemberInfo[] Members);
    public ExcelRangeBase LoadFromCollection(IEnumerable`1<T> collection, Action`1<LoadFromCollectionParams> paramsConfig);
    public ExcelRangeBase LoadFromText(string Text);
    public ExcelRangeBase LoadFromText(string Text, ExcelTextFormat Format);
    public ExcelRangeBase LoadFromText(string Text, ExcelTextFormat Format, Nullable`1<TableStyles> TableStyle, bool FirstRowIsHeader);
    private ExcelRangeBase LoadFromTextPrivate(string Text, ExcelTextFormat Format, Nullable`1<TableStyles> TableStyle, bool FirstRowIsHeader);
    public ExcelRangeBase LoadFromText(FileInfo TextFile);
    public ExcelRangeBase LoadFromText(FileInfo TextFile, ExcelTextFormat Format);
    public ExcelRangeBase LoadFromText(FileInfo TextFile, ExcelTextFormat Format, Nullable`1<TableStyles> TableStyle, bool FirstRowIsHeader);
    public ExcelRangeBase LoadFromText(string Text, ExcelTextFormatFixedWidth Format);
    public ExcelRangeBase LoadFromText(FileInfo TextFile, ExcelTextFormatFixedWidth Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromTextAsync>d__226")]
public Task`1<ExcelRangeBase> LoadFromTextAsync(FileInfo TextFile);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromTextAsync>d__227")]
public Task`1<ExcelRangeBase> LoadFromTextAsync(FileInfo TextFile, ExcelTextFormat Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<LoadFromTextAsync>d__228")]
public Task`1<ExcelRangeBase> LoadFromTextAsync(FileInfo TextFile, ExcelTextFormat Format, TableStyles TableStyle, bool FirstRowIsHeader);
    public ExcelRangeBase LoadFromDictionaries(IEnumerable`1<IDictionary`2<string, object>> items);
    public ExcelRangeBase LoadFromDictionaries(IEnumerable`1<IDictionary`2<string, object>> items, bool printHeaders);
    public ExcelRangeBase LoadFromDictionaries(IEnumerable`1<IDictionary`2<string, object>> items, bool printHeaders, Nullable`1<TableStyles> tableStyle);
    public ExcelRangeBase LoadFromDictionaries(IEnumerable`1<IDictionary`2<string, object>> items, bool printHeaders, Nullable`1<TableStyles> tableStyle, IEnumerable`1<string> keys);
    public ExcelRangeBase LoadFromDictionaries(IEnumerable`1<object> items, bool printHeaders, Nullable`1<TableStyles> tableStyle, IEnumerable`1<string> keys);
    public ExcelRangeBase LoadFromDictionaries(IEnumerable`1<IDictionary`2<string, object>> items, Action`1<LoadFromDictionariesParams> paramsConfig);
    public ExcelRangeBase LoadFromDictionaries(IEnumerable`1<object> items, Action`1<LoadFromDictionariesParams> paramsConfig);
    public DataTable ToDataTable();
    public DataTable ToDataTable(Action`1<ToDataTableOptions> configHandler);
    public DataTable ToDataTable(ToDataTableOptions options);
    public DataTable ToDataTable(Action`1<ToDataTableOptions> configHandler, DataTable dataTable);
    public DataTable ToDataTable(DataTable dataTable);
    public DataTable ToDataTable(ToDataTableOptions options, DataTable dataTable);
    public string ToText();
    public string ToText(ExcelOutputTextFormat Format);
    public void SaveToText(FileInfo file, ExcelOutputTextFormat Format);
    public void SaveToText(Stream stream, ExcelOutputTextFormat Format);
    public string ToText(ExcelOutputTextFormatFixedWidth Format);
    public void SaveToText(FileInfo file, ExcelOutputTextFormatFixedWidth Format);
    public void SaveToText(Stream stream, ExcelOutputTextFormatFixedWidth Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<ToTextAsync>d__249")]
public Task`1<string> ToTextAsync();
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<ToTextAsync>d__250")]
public Task`1<string> ToTextAsync(ExcelOutputTextFormat Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<SaveToTextAsync>d__251")]
public Task SaveToTextAsync(FileInfo file, ExcelOutputTextFormat Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<SaveToTextAsync>d__252")]
public Task SaveToTextAsync(Stream stream, ExcelOutputTextFormat Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<ToTextAsync>d__253")]
public Task`1<string> ToTextAsync(ExcelOutputTextFormatFixedWidth Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<SaveToTextAsync>d__254")]
public Task SaveToTextAsync(FileInfo file, ExcelOutputTextFormatFixedWidth Format);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<SaveToTextAsync>d__255")]
public Task SaveToTextAsync(Stream stream, ExcelOutputTextFormatFixedWidth Format);
    public string ToJson();
    public string ToJson(Action`1<JsonRangeExportSettings> settings);
    public void SaveToJson(Stream stream);
    public void SaveToJson(Stream stream, Action`1<JsonRangeExportSettings> settings);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<SaveToJsonAsync>d__260")]
public Task SaveToJsonAsync(Stream stream);
    [AsyncStateMachineAttribute("OfficeOpenXml.ExcelRangeBase/<SaveToJsonAsync>d__261")]
public Task SaveToJsonAsync(Stream stream, Action`1<JsonRangeExportSettings> settings);
    private static CultureInfo GetCultureInfo(ExcelOutputTextFormat Format);
    private static CultureInfo GetCultureInfo(ExcelOutputTextFormatFixedWidth Format);
    private bool SkipLines(ExcelOutputTextFormat Format, int row, int skipLinesBegining);
    private string GetTextCSV(ExcelOutputTextFormat Format, int maxFormats, CultureInfo ci, int row, int col, Boolean& isText);
    private string GetTextFixedWidth(ExcelOutputTextFormatFixedWidth format, int maxFormats, CultureInfo ci, int row, int col, eDataTypes& dataType);
    private string GetText(ExcelOutputTextFormat Format, int maxFormats, CultureInfo ci, int row, int col, eDataTypes& dataType);
    private ExcelValue GetCellStoreValue(int row, int col);
    private string WriteHeaderRow(ExcelOutputTextFormat Format, bool hasTextQ, int row, CultureInfo ci);
    public List`1<T> ToCollectionWithMappings(Func`2<ToCollectionRow, T> setRow);
    public List`1<T> ToCollectionWithMappings(Func`2<ToCollectionRow, T> setRow, Action`1<ToCollectionRangeOptions> options);
    public List`1<T> ToCollectionWithMappings(Func`2<ToCollectionRow, T> setRow, ToCollectionRangeOptions options);
    public List`1<T> ToCollection();
    public List`1<T> ToCollection(Action`1<ToCollectionRangeOptions> options);
    public List`1<T> ToCollection(ToCollectionRangeOptions options);
}
public class OfficeOpenXml.ExcelRangeColumn : object {
    private ExcelWorksheet _worksheet;
    internal int _fromCol;
    internal int _toCol;
    internal string _styleName;
    private CellStoreValue _cs;
    private int enumCol;
    private int enumColPos;
    private ExcelColumn _currentCol;
    public int StartColumn { get; }
    public int EndColumn { get; }
    public bool Collapsed { get; public set; }
    public int OutlineLevel { get; public set; }
    public bool Phonetic { get; public set; }
    public bool BestFit { get; public set; }
    public bool Hidden { get; public set; }
    public double Width { get; public set; }
    internal double VisualWidth { get; }
    public bool PageBreak { get; public set; }
    public ExcelStyle Style { get; }
    public string StyleName { get; public set; }
    public int StyleID { get; public set; }
    public ExcelRangeColumn Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ExcelRangeBase Range { get; }
    internal ExcelRangeColumn(ExcelWorksheet ws, int fromCol, int toCol);
    public int get_StartColumn();
    public int get_EndColumn();
    public sealed virtual bool get_Collapsed();
    public sealed virtual void set_Collapsed(bool value);
    public sealed virtual void Group();
    public sealed virtual void UnGroup();
    public sealed virtual void CollapseChildren(bool allLevels);
    public sealed virtual void ExpandChildren(bool allLevels);
    public sealed virtual void SetVisibleOutlineLevel(int level, bool collapseChildren);
    public sealed virtual int get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(int value);
    public sealed virtual bool get_Phonetic();
    public sealed virtual void set_Phonetic(bool value);
    public sealed virtual bool get_BestFit();
    public sealed virtual void set_BestFit(bool value);
    public sealed virtual bool get_Hidden();
    public sealed virtual void set_Hidden(bool value);
    public sealed virtual double get_Width();
    public sealed virtual void set_Width(double value);
    internal double get_VisualWidth();
    public sealed virtual bool get_PageBreak();
    public sealed virtual void set_PageBreak(bool value);
    public ExcelStyle get_Style();
    public string get_StyleName();
    public void set_StyleName(string value);
    public int get_StyleID();
    public void set_StyleID(int value);
    public sealed virtual ExcelRangeColumn get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void AutoFit();
    public sealed virtual void AutoFit(double MinimumWidth);
    public sealed virtual void AutoFit(double MinimumWidth, double MaximumWidth);
    private ExcelColumn GetColumn(int col, bool ignoreFromCol);
    private TOut GetValue(Func`2<ExcelColumn, TOut> getValue, TOut defaultValue);
    private void SetValue(Action`2<ExcelColumn, T> SetValue, T value);
    private void AdjustColumnMaxAndCopy(ExcelColumn currentCol, int newColMax);
    public ExcelRangeBase get_Range();
    public sealed virtual IEnumerator`1<ExcelRangeColumn> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private int GetLastCol();
    public sealed virtual void Dispose();
}
[FlagsAttribute]
public enum OfficeOpenXml.ExcelRangeCopyOptionFlags : Enum {
    public int value__;
    public static ExcelRangeCopyOptionFlags ExcludeFormulas;
    public static ExcelRangeCopyOptionFlags ExcludeValues;
    public static ExcelRangeCopyOptionFlags ExcludeStyles;
    public static ExcelRangeCopyOptionFlags ExcludeComments;
    public static ExcelRangeCopyOptionFlags ExcludeThreadedComments;
    public static ExcelRangeCopyOptionFlags ExcludeHyperLinks;
    public static ExcelRangeCopyOptionFlags ExcludeMergedCells;
    public static ExcelRangeCopyOptionFlags ExcludeDataValidations;
    public static ExcelRangeCopyOptionFlags ExcludeConditionalFormatting;
    public static ExcelRangeCopyOptionFlags Transpose;
    public static ExcelRangeCopyOptionFlags ExcludeDrawings;
}
public class OfficeOpenXml.ExcelRangeRow : object {
    private ExcelWorksheet _worksheet;
    internal int _fromRow;
    internal int _toRow;
    internal string _styleName;
    private CellStoreValue _cs;
    private int enumRow;
    private int enumCol;
    private int minCol;
    public int StartRow { get; }
    public int EndRow { get; }
    public bool Collapsed { get; public set; }
    public int OutlineLevel { get; public set; }
    public bool Phonetic { get; public set; }
    public bool Hidden { get; public set; }
    public double Height { get; public set; }
    public bool CustomHeight { get; public set; }
    public bool PageBreak { get; public set; }
    public ExcelStyle Style { get; }
    public string StyleName { get; public set; }
    public int StyleID { get; public set; }
    public ExcelRangeBase Range { get; }
    public ExcelRangeRow Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal ExcelRangeRow(ExcelWorksheet worksheet, int fromRow, int toRow);
    public int get_StartRow();
    public int get_EndRow();
    public sealed virtual bool get_Collapsed();
    public sealed virtual void set_Collapsed(bool value);
    public sealed virtual int get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(int value);
    public sealed virtual bool get_Phonetic();
    public sealed virtual void set_Phonetic(bool value);
    public sealed virtual bool get_Hidden();
    public sealed virtual void set_Hidden(bool value);
    public sealed virtual double get_Height();
    public sealed virtual void set_Height(double value);
    public sealed virtual bool get_CustomHeight();
    public sealed virtual void set_CustomHeight(bool value);
    public sealed virtual bool get_PageBreak();
    public sealed virtual void set_PageBreak(bool value);
    public ExcelStyle get_Style();
    public string get_StyleName();
    public void set_StyleName(string value);
    public int get_StyleID();
    public void set_StyleID(int value);
    public ExcelRangeBase get_Range();
    public sealed virtual ExcelRangeRow get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private TOut GetValue(Func`2<RowInternal, TOut> getValue, TOut defaultValue);
    private void SetValue(Action`2<RowInternal, T> SetValue, T value);
    public sealed virtual IEnumerator`1<ExcelRangeRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    public sealed virtual void Group();
    public sealed virtual void Ungroup();
    public sealed virtual void CollapseChildren(bool allLevels);
    public sealed virtual void ExpandChildren(bool allLevels);
    public sealed virtual void SetVisibleOutlineLevel(int level, bool collapseChildren);
    private int GetToRow();
    private RowInternal GetRow(int row);
}
public class OfficeOpenXml.ExcelRichDataErrorValue : ExcelErrorValue {
    [CompilerGeneratedAttribute]
private int <SpillRowOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpillColOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPropagated>k__BackingField;
    internal int SpillRowOffset { get; internal set; }
    internal int SpillColOffset { get; internal set; }
    internal bool IsPropagated { get; internal set; }
    internal ExcelRichDataErrorValue(int rowOffset, int colOffset);
    [CompilerGeneratedAttribute]
internal int get_SpillRowOffset();
    [CompilerGeneratedAttribute]
internal void set_SpillRowOffset(int value);
    [CompilerGeneratedAttribute]
internal int get_SpillColOffset();
    [CompilerGeneratedAttribute]
internal void set_SpillColOffset(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsPropagated();
    [CompilerGeneratedAttribute]
internal void set_IsPropagated(bool value);
}
public class OfficeOpenXml.ExcelRow : object {
    private ExcelWorksheet _worksheet;
    private XmlElement _rowElement;
    internal string _styleName;
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [ObsoleteAttribute]
public ulong RowID { get; }
    internal XmlNode Node { get; }
    public bool Hidden { get; public set; }
    public double Height { get; public set; }
    public bool CustomHeight { get; public set; }
    public string StyleName { get; public set; }
    public int StyleID { get; public set; }
    public int Row { get; public set; }
    public bool Collapsed { get; public set; }
    public int OutlineLevel { get; public set; }
    public bool Phonetic { get; public set; }
    public ExcelStyle Style { get; }
    public bool PageBreak { get; public set; }
    public bool Merged { get; public set; }
    [ObsoleteAttribute]
private ulong OfficeOpenXml.IRangeID.RangeID { get; private set; }
    internal ExcelRow(ExcelWorksheet Worksheet, int row);
    public ulong get_RowID();
    internal XmlNode get_Node();
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public double get_Height();
    public void set_Height(double value);
    public bool get_CustomHeight();
    public void set_CustomHeight(bool value);
    public string get_StyleName();
    public void set_StyleName(string value);
    public int get_StyleID();
    public void set_StyleID(int value);
    [CompilerGeneratedAttribute]
public int get_Row();
    [CompilerGeneratedAttribute]
public void set_Row(int value);
    public bool get_Collapsed();
    public void set_Collapsed(bool value);
    public int get_OutlineLevel();
    public void set_OutlineLevel(int value);
    private RowInternal GetRowInternal();
    internal static RowInternal GetRowInternal(ExcelWorksheet ws, int row);
    public bool get_Phonetic();
    public void set_Phonetic(bool value);
    public ExcelStyle get_Style();
    public bool get_PageBreak();
    public void set_PageBreak(bool value);
    public bool get_Merged();
    public void set_Merged(bool value);
    internal static ulong GetRowID(int sheetID, int row);
    private sealed virtual override ulong OfficeOpenXml.IRangeID.get_RangeID();
    private sealed virtual override void OfficeOpenXml.IRangeID.set_RangeID(ulong value);
    internal void Clone(ExcelWorksheet added);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelRowsCollection : ExcelRangeRow {
    private ExcelWorksheet _worksheet;
    public ExcelRangeRow Item { get; }
    public ExcelRangeRow Item { get; }
    internal ExcelRowsCollection(ExcelWorksheet worksheet);
    public ExcelRangeRow get_Item(int row);
    public ExcelRangeRow get_Item(int fromRow, int toRow);
}
public class OfficeOpenXml.ExcelSheetProtection : XmlHelper {
    private bool _hasSheetProtection;
    private static string _isProtectedPath;
    private static string _allowSelectLockedCellsPath;
    private static string _allowSelectUnlockedCellsPath;
    private static string _allowObjectPath;
    private static string _allowScenariosPath;
    private static string _allowFormatCellsPath;
    private static string _allowFormatColumnsPath;
    private static string _allowFormatRowsPath;
    private static string _allowInsertColumnsPath;
    private static string _allowInsertRowsPath;
    private static string _allowInsertHyperlinksPath;
    private static string _allowDeleteColumns;
    private static string _allowDeleteRowsPath;
    private static string _allowSortPath;
    private static string _allowAutoFilterPath;
    private static string _allowPivotTablesPath;
    private static string _passwordPath;
    public bool IsProtected { get; public set; }
    public bool AllowSelectLockedCells { get; public set; }
    public bool AllowSelectUnlockedCells { get; public set; }
    public bool AllowEditObject { get; public set; }
    public bool AllowEditScenarios { get; public set; }
    public bool AllowFormatCells { get; public set; }
    public bool AllowFormatColumns { get; public set; }
    public bool AllowFormatRows { get; public set; }
    public bool AllowInsertColumns { get; public set; }
    public bool AllowInsertRows { get; public set; }
    public bool AllowInsertHyperlinks { get; public set; }
    public bool AllowDeleteColumns { get; public set; }
    public bool AllowDeleteRows { get; public set; }
    public bool AllowSort { get; public set; }
    public bool AllowAutoFilter { get; public set; }
    public bool AllowPivotTables { get; public set; }
    internal ExcelSheetProtection(XmlNamespaceManager nsm, XmlNode topNode, ExcelWorksheet ws);
    public bool get_IsProtected();
    public void set_IsProtected(bool value);
    private void CreatedDefaultNode();
    public bool get_AllowSelectLockedCells();
    public void set_AllowSelectLockedCells(bool value);
    public bool get_AllowSelectUnlockedCells();
    public void set_AllowSelectUnlockedCells(bool value);
    public bool get_AllowEditObject();
    public void set_AllowEditObject(bool value);
    public bool get_AllowEditScenarios();
    public void set_AllowEditScenarios(bool value);
    public bool get_AllowFormatCells();
    public void set_AllowFormatCells(bool value);
    public bool get_AllowFormatColumns();
    public void set_AllowFormatColumns(bool value);
    public bool get_AllowFormatRows();
    public void set_AllowFormatRows(bool value);
    public bool get_AllowInsertColumns();
    public void set_AllowInsertColumns(bool value);
    public bool get_AllowInsertRows();
    public void set_AllowInsertRows(bool value);
    public bool get_AllowInsertHyperlinks();
    public void set_AllowInsertHyperlinks(bool value);
    public bool get_AllowDeleteColumns();
    public void set_AllowDeleteColumns(bool value);
    public bool get_AllowDeleteRows();
    public void set_AllowDeleteRows(bool value);
    public bool get_AllowSort();
    public void set_AllowSort(bool value);
    public bool get_AllowAutoFilter();
    public void set_AllowAutoFilter(bool value);
    public bool get_AllowPivotTables();
    public void set_AllowPivotTables(bool value);
    public void SetPassword(string Password);
}
internal class OfficeOpenXml.ExcelSlicerXmlSource : ExcelXmlSource {
    [CompilerGeneratedAttribute]
private eSlicerSourceType <Type>k__BackingField;
    public eSlicerSourceType Type { get; }
    internal ExcelSlicerXmlSource(eSlicerSourceType type, ZipPackagePart relPart, string relId);
    [CompilerGeneratedAttribute]
public eSlicerSourceType get_Type();
}
internal class OfficeOpenXml.ExcelSlicerXmlSources : XmlHelper {
    private static string _tableUId;
    private static string _pivotTableUId;
    internal List`1<ExcelSlicerXmlSource> _list;
    internal ZipPackagePart _part;
    internal ExcelSlicerXmlSources(XmlNamespaceManager nsm, XmlNode topNode, ZipPackagePart part);
    internal ExcelSlicerXmlSource GetOrCreateSource(eSlicerSourceType sourceType);
    internal XmlNode GetSource(string name, eSlicerSourceType sourceType, ExcelSlicerXmlSource& source);
    private IEnumerable`1<ExcelSlicerXmlSource> GetSources(eSlicerSourceType sourceType);
    internal void Save();
    internal void Remove(ExcelSlicerXmlSource source);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelStyleCollection`1 : object {
    private bool _setNextIdManual;
    [CompilerGeneratedAttribute]
private XmlNode <TopNode>k__BackingField;
    internal List`1<T> _list;
    internal Dictionary`2<string, int> _dic;
    internal int NextId;
    public XmlNode TopNode { get; public set; }
    public T Item { get; }
    public int Count { get; }
    internal ExcelStyleCollection`1(bool SetNextIdManual);
    [CompilerGeneratedAttribute]
public XmlNode get_TopNode();
    [CompilerGeneratedAttribute]
public void set_TopNode(XmlNode value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T get_Item(int PositionID);
    public int get_Count();
    internal int Add(string key, T item);
    internal bool FindById(string key, T& obj);
    internal int FindIndexById(string key);
    internal int FindIndexByBuildInId(int id);
    internal bool ExistsKey(string key);
    internal void Sort(Comparison`1<T> c);
}
public class OfficeOpenXml.ExcelStyles : XmlHelper {
    private static string ColorsPath;
    private static string NumberFormatsPath;
    private static string FontsPath;
    private static string FillsPath;
    private static string BordersPath;
    private static string CellStyleXfsPath;
    private static string CellXfsPath;
    private static string CellStylesPath;
    private static string TableStylesPath;
    internal static string DxfsPath;
    internal static string DxfSlicerStylesPath;
    private static string SlicerStylesPath;
    private XmlDocument _styleXml;
    internal ExcelWorkbook _wb;
    private ExcelNamedStyleXml _normalStyle;
    private XmlNamespaceManager _nameSpaceManager;
    internal int _nextDfxNumFmtID;
    private String[] _indexedColors;
    internal Color[] indexedColorAsColor;
    public ExcelStyleCollection`1<ExcelNumberFormatXml> NumberFormats;
    public ExcelStyleCollection`1<ExcelFontXml> Fonts;
    public ExcelStyleCollection`1<ExcelFillXml> Fills;
    public ExcelStyleCollection`1<ExcelBorderXml> Borders;
    public ExcelStyleCollection`1<ExcelXfs> CellStyleXfs;
    public ExcelStyleCollection`1<ExcelXfs> CellXfs;
    public ExcelStyleCollection`1<ExcelNamedStyleXml> NamedStyles;
    public ExcelNamedStyleCollection`1<ExcelTableNamedStyleBase> TableStyles;
    public ExcelNamedStyleCollection`1<ExcelSlicerNamedStyle> SlicerStyles;
    public ExcelStyleCollection`1<ExcelDxfStyleBase> Dxfs;
    internal ExcelStyleCollection`1<ExcelDxfStyleBase> DxfsSlicers;
    internal Dictionary`2<string, XmlNode> _slicerTableStyleNodes;
    private HashSet`1<string> tableStyleNames;
    internal String[] IndexedColors { get; }
    internal string Id { get; }
    internal ExcelStyles(XmlNamespaceManager NameSpaceManager, XmlDocument xml, ExcelWorkbook wb);
    internal String[] get_IndexedColors();
    internal Color GetIndexedColor(int index);
    private void EnsureValidFills();
    private void LoadFromDocument();
    private void LoadSlicerStyles();
    private void LoadTableStyles();
    internal ExcelNamedStyleXml GetNormalStyle();
    internal ExcelStyle GetStyleObject(int Id, int PositionID, string Address);
    internal int PropertyChange(StyleBase sender, StyleChangeEventArgs e);
    private void SetStyleAddress(StyleBase sender, StyleChangeEventArgs e, ExcelAddressBase address, ExcelWorksheet ws, Dictionary`2& styleCashe);
    private void FullPrecisionRoundRange(ExcelWorksheet ws, ExcelAddressBase address, object value);
    private void SetStyleCells(StyleBase sender, StyleChangeEventArgs e, ExcelAddressBase address, ExcelWorksheet ws, Dictionary`2<int, int> styleCache);
    private bool GetFromCache(Dictionary`2<int, ExcelValue> colCache, int col, Int32& s);
    private void SetStyleFullRow(StyleBase sender, StyleChangeEventArgs e, ExcelAddressBase address, ExcelWorksheet ws, Dictionary`2<int, int> styleCashe);
    private void SetStyleFullColumn(StyleBase sender, StyleChangeEventArgs e, ExcelAddressBase address, ExcelWorksheet ws, Dictionary`2<int, int> styleCashe);
    private void AddNewStyleColumn(StyleBase sender, StyleChangeEventArgs e, ExcelWorksheet ws, Dictionary`2<int, int> styleCashe, ExcelColumn column, int s);
    internal int GetStyleId(ExcelWorksheet ws, int row, int col);
    internal int NamedStylePropertyChange(StyleBase sender, StyleChangeEventArgs e);
    internal string get_Id();
    public ExcelNamedStyleXml CreateNamedStyle(string name);
    public ExcelNamedStyleXml CreateNamedStyle(string name, ExcelStyle Template);
    public ExcelPivotTableNamedStyle CreatePivotTableStyle(string name);
    public ExcelPivotTableNamedStyle CreatePivotTableStyle(string name, PivotTableStyles templateStyle);
    public ExcelPivotTableNamedStyle CreatePivotTableStyle(string name, ExcelTableNamedStyleBase templateStyle);
    public ExcelTableNamedStyle CreateTableStyle(string name);
    public ExcelTableNamedStyle CreateTableStyle(string name, TableStyles templateStyle);
    public ExcelTableNamedStyle CreateTableStyle(string name, ExcelTableNamedStyleBase templateStyle);
    public ExcelTableAndPivotTableNamedStyle CreateTableAndPivotTableStyle(string name);
    public ExcelTableAndPivotTableNamedStyle CreateTableAndPivotTableStyle(string name, TableStyles templateStyle);
    public ExcelTableAndPivotTableNamedStyle CreateTableAndPivotTableStyle(string name, PivotTableStyles templateStyle);
    public ExcelTableAndPivotTableNamedStyle CreateTableAndPivotTableStyle(string name, ExcelTableNamedStyleBase templateStyle);
    public ExcelSlicerNamedStyle CreateSlicerStyle(string name);
    public ExcelSlicerNamedStyle CreateSlicerStyle(string name, eSlicerStyle templateStyle);
    private void ValidateTableStyleName(string name);
    public ExcelSlicerNamedStyle CreateSlicerStyle(string name, ExcelSlicerNamedStyle templateStyle);
    public void UpdateXml();
    private void UpdateNamedStylesAndXfs(int normalIx);
    private void UpdateBorderXml();
    private int UpdateFillXml();
    internal int GetNormalStyleIndex();
    private void UpdateFontXml(int normalIx);
    private void UpdateNumberFormatXml(int normalIx);
    private Nullable`1<int> GetNumFormatId(string format);
    private void AddNamedStyle(int id, XmlNode styleXfsNode, XmlNode cellXfsNode, ExcelNamedStyleXml style);
    private void RemoveUnusedStyles();
    internal int GetStyleIdFromName(string Name);
    private int GetXmlNodeInt(XmlNode node);
    private string GetXmlNode(XmlNode node);
    internal int CloneStyle(ExcelStyles style, int styleID);
    internal int CloneStyle(ExcelStyles style, int styleID, bool isNamedStyle);
    internal int CloneStyle(ExcelStyles style, int styleID, bool isNamedStyle, bool allwaysAddCellXfs, bool isCellStyleXfs);
    internal ExcelDxfStyleLimitedFont GetDxfLimitedFont(Nullable`1<int> dxfId);
    internal ExcelDxfStyle GetDxf(Nullable`1<int> dxfId, Action`3<eStyleClass, eStyleProperty, object> callback);
    internal ExcelDxfBorderBase GetDxfBorder(Nullable`1<int> dxfId, Action`3<eStyleClass, eStyleProperty, object> callback);
    internal ExcelDxfSlicerStyle GetDxfSlicer(Nullable`1<int> dxfId, Action`3<eStyleClass, eStyleProperty, object> callback);
    internal ExcelDxfTableStyle GetDxfTable(Nullable`1<int> dxfId, Action`3<eStyleClass, eStyleProperty, object> callback);
    internal ExcelDxfSlicerStyle GetDxfSlicer(Nullable`1<int> dxfId);
    internal object RoundValueFromNumberFormat(ExcelValue c);
    internal object RoundValueFromNumberFormat(object value, int styleId);
    internal object GetValueForPivotCache(object value, int styleId);
    [CompilerGeneratedAttribute]
private bool <ValidateTableStyleName>b__68_0(string x);
    [CompilerGeneratedAttribute]
private bool <ValidateTableStyleName>b__68_1(string x);
    [CompilerGeneratedAttribute]
private bool <ValidateTableStyleName>b__68_2(string x);
}
public class OfficeOpenXml.ExcelTableAddress : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTotals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsThisRow>k__BackingField;
    public string Name { get; public set; }
    public string ColumnSpan { get; public set; }
    public bool IsAll { get; public set; }
    public bool IsHeader { get; public set; }
    public bool IsData { get; public set; }
    public bool IsTotals { get; public set; }
    public bool IsThisRow { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnSpan();
    [CompilerGeneratedAttribute]
public void set_ColumnSpan(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAll();
    [CompilerGeneratedAttribute]
public void set_IsAll(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHeader();
    [CompilerGeneratedAttribute]
public void set_IsHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsData();
    [CompilerGeneratedAttribute]
public void set_IsData(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTotals();
    [CompilerGeneratedAttribute]
public void set_IsTotals(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsThisRow();
    [CompilerGeneratedAttribute]
public void set_IsThisRow(bool value);
}
public abstract class OfficeOpenXml.ExcelTextFileFormat : object {
    [CompilerGeneratedAttribute]
private string <EOL>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipLinesBeginning>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipLinesEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <ShouldUseRow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Transpose>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TableStyles> <TableStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstRowIsHeader>k__BackingField;
    public string EOL { get; public set; }
    public CultureInfo Culture { get; public set; }
    public int SkipLinesBeginning { get; public set; }
    public int SkipLinesEnd { get; public set; }
    public Encoding Encoding { get; public set; }
    public Func`2<string, bool> ShouldUseRow { get; public set; }
    public bool Transpose { get; public set; }
    public Nullable`1<TableStyles> TableStyle { get; public set; }
    public bool FirstRowIsHeader { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EOL();
    [CompilerGeneratedAttribute]
public void set_EOL(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public int get_SkipLinesBeginning();
    [CompilerGeneratedAttribute]
public void set_SkipLinesBeginning(int value);
    [CompilerGeneratedAttribute]
public int get_SkipLinesEnd();
    [CompilerGeneratedAttribute]
public void set_SkipLinesEnd(int value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_ShouldUseRow();
    [CompilerGeneratedAttribute]
public void set_ShouldUseRow(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public bool get_Transpose();
    [CompilerGeneratedAttribute]
public void set_Transpose(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TableStyles> get_TableStyle();
    [CompilerGeneratedAttribute]
public void set_TableStyle(Nullable`1<TableStyles> value);
    [CompilerGeneratedAttribute]
public bool get_FirstRowIsHeader();
    [CompilerGeneratedAttribute]
public void set_FirstRowIsHeader(bool value);
}
public class OfficeOpenXml.ExcelTextFormat : ExcelTextFormatBase {
}
public abstract class OfficeOpenXml.ExcelTextFormatBase : ExcelTextFileFormat {
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private char <TextQualifier>k__BackingField;
    [CompilerGeneratedAttribute]
private eDataTypes[] <DataTypes>k__BackingField;
    public char Delimiter { get; public set; }
    public char TextQualifier { get; public set; }
    public eDataTypes[] DataTypes { get; public set; }
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    [CompilerGeneratedAttribute]
public char get_TextQualifier();
    [CompilerGeneratedAttribute]
public void set_TextQualifier(char value);
    [CompilerGeneratedAttribute]
public eDataTypes[] get_DataTypes();
    [CompilerGeneratedAttribute]
public void set_DataTypes(eDataTypes[] value);
}
public class OfficeOpenXml.ExcelTextFormatColumn : object {
    internal int _position;
    internal int _length;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private eDataTypes <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private PaddingAlignmentType <PaddingType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseColumn>k__BackingField;
    public string Name { get; public set; }
    public int Position { get; }
    public int Length { get; }
    public eDataTypes DataType { get; public set; }
    public PaddingAlignmentType PaddingType { get; public set; }
    public bool UseColumn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public int get_Position();
    public int get_Length();
    [CompilerGeneratedAttribute]
public eDataTypes get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(eDataTypes value);
    [CompilerGeneratedAttribute]
public PaddingAlignmentType get_PaddingType();
    [CompilerGeneratedAttribute]
public void set_PaddingType(PaddingAlignmentType value);
    [CompilerGeneratedAttribute]
public bool get_UseColumn();
    [CompilerGeneratedAttribute]
public void set_UseColumn(bool value);
}
public class OfficeOpenXml.ExcelTextFormatFixedWidth : ExcelTextFormatFixedWidthBase {
}
public class OfficeOpenXml.ExcelTextFormatFixedWidthBase : ExcelTextFileFormat {
    [CompilerGeneratedAttribute]
private EPPlusReadOnlyList`1<ExcelTextFormatColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private FixedWidthFormatErrorStrategy <FormatErrorStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private char <PaddingCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<char> <PaddingCharacterNumeric>k__BackingField;
    [CompilerGeneratedAttribute]
private FixedWidthReadType <ReadType>k__BackingField;
    private int _lineLength;
    public EPPlusReadOnlyList`1<ExcelTextFormatColumn> Columns { get; public set; }
    public FixedWidthFormatErrorStrategy FormatErrorStrategy { get; public set; }
    public char PaddingCharacter { get; public set; }
    public Nullable`1<char> PaddingCharacterNumeric { get; public set; }
    internal FixedWidthReadType ReadType { get; internal set; }
    public int LineLength { get; public set; }
    [CompilerGeneratedAttribute]
public EPPlusReadOnlyList`1<ExcelTextFormatColumn> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(EPPlusReadOnlyList`1<ExcelTextFormatColumn> value);
    [CompilerGeneratedAttribute]
public FixedWidthFormatErrorStrategy get_FormatErrorStrategy();
    [CompilerGeneratedAttribute]
public void set_FormatErrorStrategy(FixedWidthFormatErrorStrategy value);
    [CompilerGeneratedAttribute]
public char get_PaddingCharacter();
    [CompilerGeneratedAttribute]
public void set_PaddingCharacter(char value);
    [CompilerGeneratedAttribute]
public Nullable`1<char> get_PaddingCharacterNumeric();
    [CompilerGeneratedAttribute]
public void set_PaddingCharacterNumeric(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
internal FixedWidthReadType get_ReadType();
    [CompilerGeneratedAttribute]
internal void set_ReadType(FixedWidthReadType value);
    public int get_LineLength();
    public void set_LineLength(int value);
    private void CreateColumnFormatList(int size);
    public void ClearColumnFormats();
    public void SetColumnLengths(Int32[] lengths);
    public void SetColumnPositions(int lineLength, Int32[] positions);
    public void SetColumnDataTypes(eDataTypes[] dataTypes);
    public void SetColumnPaddingAlignmentType(PaddingAlignmentType[] paddingTypes);
    public void SetUseColumns(Boolean[] UseColumns);
    public void SetColumnsNames(String[] Names);
}
public class OfficeOpenXml.ExcelTextSettings : object {
    [CompilerGeneratedAttribute]
private ITextMeasurer <PrimaryTextMeasurer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextMeasurer <FallbackTextMeasurer>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AutofitScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultTextMeasurer <DefaultTextMeasurer>k__BackingField;
    public ITextMeasurer PrimaryTextMeasurer { get; public set; }
    public ITextMeasurer FallbackTextMeasurer { get; public set; }
    public float AutofitScaleFactor { get; public set; }
    public ITextMeasurer GenericTextMeasurer { get; }
    internal DefaultTextMeasurer DefaultTextMeasurer { get; internal set; }
    [CompilerGeneratedAttribute]
public ITextMeasurer get_PrimaryTextMeasurer();
    [CompilerGeneratedAttribute]
public void set_PrimaryTextMeasurer(ITextMeasurer value);
    [CompilerGeneratedAttribute]
public ITextMeasurer get_FallbackTextMeasurer();
    [CompilerGeneratedAttribute]
public void set_FallbackTextMeasurer(ITextMeasurer value);
    [CompilerGeneratedAttribute]
public float get_AutofitScaleFactor();
    [CompilerGeneratedAttribute]
public void set_AutofitScaleFactor(float value);
    public ITextMeasurer get_GenericTextMeasurer();
    [CompilerGeneratedAttribute]
internal DefaultTextMeasurer get_DefaultTextMeasurer();
    [CompilerGeneratedAttribute]
internal void set_DefaultTextMeasurer(DefaultTextMeasurer value);
}
public class OfficeOpenXml.ExcelWorkbook : XmlHelper {
    internal ExcelPackage _package;
    internal ExcelWorksheets _worksheets;
    private OfficeProperties _properties;
    private ExcelStyles _styles;
    internal HashSet`1<string> _slicerNames;
    internal Dictionary`2<string, ImageInfo> _images;
    internal Dictionary`2<string, int> _sharedStringsLookup;
    internal List`1<SharedStringItemBase> _sharedStringsListNew;
    internal Dictionary`2<string, SharedStringItem> _sharedStrings;
    internal List`1<SharedStringItem> _sharedStringsList;
    internal ExcelNamedRangeCollection _names;
    internal int _nextDrawingId;
    internal int _nextTableID;
    internal int _nextPivotCacheId;
    internal int _nextPivotTableID;
    internal XmlNamespaceManager _namespaceManager;
    internal FormulaParser _formulaParser;
    internal ExcelThreadedCommentPersonCollection _threadedCommentPersons;
    internal FormulaParserManager _parserManager;
    internal CellStore`1<IList`1<Token>> _formulaTokens;
    internal Dictionary`2<string, PivotTableCacheRangeInfo> _pivotTableCaches;
    internal Dictionary`2<Uri, int> _pivotTableIds;
    internal ExcelExternalLinksCollection _externalLinks;
    private decimal _standardFontWidth;
    private string _fontID;
    private ExcelProtection _protection;
    private ExcelWorkbookView _view;
    private ExcelVbaProject _vba;
    [CompilerGeneratedAttribute]
private Uri <WorkbookUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <StylesUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SharedStringsUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PersonsUri>k__BackingField;
    private XmlDocument _workbookXml;
    private static string codeModuleNamePath;
    private static string date1904Path;
    internal static double date1904Offset;
    private Nullable`1<bool> date1904Cache;
    private XmlDocument _stylesXml;
    private string CALC_MODE_PATH;
    private static string FULL_CALC_ON_LOAD_PATH;
    private ExcelThemeManager _theme;
    private static string defaultThemeVersionPath;
    private bool _fullPrecision;
    internal Dictionary`2<string, ExcelSlicerCache> _slicerCaches;
    private ExcelMetadata _metadata;
    private ExcelRichData _richData;
    [CompilerGeneratedAttribute]
private Func`2<NumberFormatToTextArgs, string> <NumberFormatToTextHandler>k__BackingField;
    public ExcelWorksheets Worksheets { get; }
    public ExcelNamedRangeCollection Names { get; }
    public ExcelExternalLinksCollection ExternalLinks { get; }
    internal FormulaParser FormulaParser { get; }
    public FormulaParserManager FormulaParserManager { get; }
    public ExcelThreadedCommentPersonCollection ThreadedCommentPersons { get; }
    public decimal MaxFontWidth { get; public set; }
    public ExcelProtection Protection { get; }
    public ExcelWorkbookView View { get; }
    public ExcelVbaProject VbaProject { get; }
    internal Uri WorkbookUri { get; private set; }
    internal Uri StylesUri { get; private set; }
    internal Uri SharedStringsUri { get; private set; }
    internal Uri PersonsUri { get; private set; }
    internal ZipPackagePart Part { get; }
    public XmlDocument WorkbookXml { get; }
    internal string CodeModuleName { get; internal set; }
    public ExcelVBAModule CodeModule { get; }
    public bool Date1904 { get; public set; }
    public XmlDocument StylesXml { get; public set; }
    public ExcelStyles Styles { get; }
    public OfficeProperties Properties { get; }
    public ExcelCalcMode CalcMode { get; public set; }
    public bool FullCalcOnLoad { get; public set; }
    public ExcelThemeManager ThemeManager { get; }
    public Nullable`1<int> DefaultThemeVersion { get; public set; }
    public bool FullPrecision { get; public set; }
    public bool HasLoadedPivotTables { get; }
    internal Dictionary`2<string, ExcelSlicerCache> SlicerCaches { get; }
    internal bool HasMetadataPart { get; }
    internal bool HasRichdataPart { get; }
    internal ExcelMetadata Metadata { get; }
    internal ExcelRichData RichData { get; }
    public Func`2<NumberFormatToTextArgs, string> NumberFormatToTextHandler { get; public set; }
    internal ExcelWorkbook(ExcelPackage package, XmlNamespaceManager namespaceManager);
    internal bool GetPivotCacheFromAddress(string fullAddress, PivotTableCacheInternal& cacheReference);
    internal void LoadAllDrawings(string loadingWsName);
    internal string GetSlicerName(string name);
    internal bool CheckSlicerNameIsUnique(string name);
    private void LoadSlicerNames();
    private void FindSlicerNames(ExcelDrawings drawings);
    private void CheckGroupShapeSlicer(ExcelGroupShape groupShape);
    private string GetUniqueName(string name, HashSet`1<string> hs);
    internal void LoadPivotTableCaches();
    private void SetUris();
    internal int GetNewPivotCacheId();
    internal void SetNewPivotCacheId(int value);
    private void GetSharedStrings();
    internal void GetDefinedNames();
    private ExcelNamedRange AddFormulaOrValueName(XmlElement elem, string fullAddress, ExcelWorksheet nameWorksheet);
    private ExcelRangeBase CreateRangeForName(ExcelWorksheet worksheet, string fullAddress, Boolean& allowRelativeAddress);
    internal void RemoveSlicerCacheReference(string relId, eSlicerSourceType sourceType);
    internal ExcelRangeBase GetRange(ExcelWorksheet ws, string function);
    internal int GetPivotCacheId(Uri cacheDefinitionUri);
    public ExcelWorksheets get_Worksheets();
    internal ExcelWorksheet GetWorksheetByIndexInList(int index);
    public IExcelHtmlRangeExporter CreateHtmlExporter(ExcelRangeBase[] ranges);
    public ExcelNamedRangeCollection get_Names();
    public ExcelExternalLinksCollection get_ExternalLinks();
    internal FormulaParser get_FormulaParser();
    public FormulaParserManager get_FormulaParserManager();
    public ExcelThreadedCommentPersonCollection get_ThreadedCommentPersons();
    public decimal get_MaxFontWidth();
    public void set_MaxFontWidth(decimal value);
    internal static decimal GetHeightPixels(string fontName, float fontSize);
    public ExcelProtection get_Protection();
    public ExcelWorkbookView get_View();
    public ExcelVbaProject get_VbaProject();
    public void RemoveVBAProject();
    public void CreateVBAProject();
    public void CalculateAllPivotTables(bool refresh);
    [CompilerGeneratedAttribute]
internal Uri get_WorkbookUri();
    [CompilerGeneratedAttribute]
private void set_WorkbookUri(Uri value);
    [CompilerGeneratedAttribute]
internal Uri get_StylesUri();
    [CompilerGeneratedAttribute]
private void set_StylesUri(Uri value);
    [CompilerGeneratedAttribute]
internal Uri get_SharedStringsUri();
    [CompilerGeneratedAttribute]
private void set_SharedStringsUri(Uri value);
    [CompilerGeneratedAttribute]
internal Uri get_PersonsUri();
    [CompilerGeneratedAttribute]
private void set_PersonsUri(Uri value);
    internal ZipPackagePart get_Part();
    public XmlDocument get_WorkbookXml();
    internal string get_CodeModuleName();
    internal void set_CodeModuleName(string value);
    internal void CodeNameChange(string value);
    public ExcelVBAModule get_CodeModule();
    public bool get_Date1904();
    public void set_Date1904(bool value);
    private void CreateWorkbookXml(XmlNamespaceManager namespaceManager);
    public XmlDocument get_StylesXml();
    public void set_StylesXml(XmlDocument value);
    public ExcelStyles get_Styles();
    public OfficeProperties get_Properties();
    public ExcelCalcMode get_CalcMode();
    public void set_CalcMode(ExcelCalcMode value);
    public bool get_FullCalcOnLoad();
    public void set_FullCalcOnLoad(bool value);
    public ExcelThemeManager get_ThemeManager();
    public Nullable`1<int> get_DefaultThemeVersion();
    public void set_DefaultThemeVersion(Nullable`1<int> value);
    public bool get_FullPrecision();
    public void set_FullPrecision(bool value);
    private void ReCalculateFullPrecision();
    internal void Save();
    private void SaveExternalLinks();
    private void SavePivotTableCaches();
    private void FixFieldNamesAndUpdateSharedItems(PivotTableCacheInternal cache, ExcelTable t, XmlNodeList fields);
    private string GetNewName(HashSet`1<string> flds, string fldName);
    private void DeleteCalcChain();
    private void ValidateDataValidations();
    private void SaveSharedStringHandler(ZipOutputStream stream, CompressionLevel compressionLevel, string fileName);
    private void UpdateDefinedNamesXml();
    private void SetNameElement(ExcelNamedRange name, XmlElement elem, Dictionary`2<string, string> nsd);
    private bool ExistsNames();
    public void ClearFormulas();
    public void ClearFormulaValues();
    internal bool ExistsTableName(string Name);
    internal bool ExistsPivotTableName(string Name);
    internal void AddPivotTableCache(PivotTableCacheInternal cacheReference, bool createWorkbookElement);
    internal void RemovePivotTableCache(int cacheId);
    public sealed virtual void Dispose();
    public bool get_HasLoadedPivotTables();
    internal void ReadAllPivotTables();
    internal void ReadAllTables();
    internal Dictionary`2<string, ExcelSlicerCache> get_SlicerCaches();
    internal ExcelSlicerCache GetSlicerCaches(string key);
    internal void LoadSlicerCaches();
    internal ExcelTable GetTable(int tableId);
    internal ExcelTable GetTable(string name);
    internal void ClearDefaultHeightsAndWidths();
    internal object GetSharedString(int ix, Boolean& isRichText);
    internal bool get_HasMetadataPart();
    internal bool get_HasRichdataPart();
    internal ExcelMetadata get_Metadata();
    internal ExcelRichData get_RichData();
    [CompilerGeneratedAttribute]
public Func`2<NumberFormatToTextArgs, string> get_NumberFormatToTextHandler();
    [CompilerGeneratedAttribute]
public void set_NumberFormatToTextHandler(Func`2<NumberFormatToTextArgs, string> value);
}
public class OfficeOpenXml.ExcelWorkbookView : XmlHelper {
    private ExcelWorkbook _wb;
    private static string LEFT_PATH;
    private static string TOP_PATH;
    private static string WIDTH_PATH;
    private static string HEIGHT_PATH;
    private static string MINIMIZED_PATH;
    private static string SHOWVERTICALSCROLL_PATH;
    private static string SHOWHORIZONTALSCR_PATH;
    private static string SHOWSHEETTABS_PATH;
    private static string ACTIVETAB_PATH;
    private static string FirstSheet_PATH;
    public int Left { get; internal set; }
    public int Top { get; internal set; }
    public int Width { get; internal set; }
    public int Height { get; internal set; }
    public bool Minimized { get; public set; }
    public bool ShowVerticalScrollBar { get; public set; }
    public bool ShowHorizontalScrollBar { get; public set; }
    public bool ShowSheetTabs { get; public set; }
    public int ActiveTab { get; public set; }
    internal Nullable`1<int> FirstSheet { get; internal set; }
    internal ExcelWorkbookView(XmlNamespaceManager ns, XmlNode node, ExcelWorkbook wb);
    public int get_Left();
    internal void set_Left(int value);
    public int get_Top();
    internal void set_Top(int value);
    public int get_Width();
    internal void set_Width(int value);
    public int get_Height();
    internal void set_Height(int value);
    public bool get_Minimized();
    public void set_Minimized(bool value);
    public bool get_ShowVerticalScrollBar();
    public void set_ShowVerticalScrollBar(bool value);
    public bool get_ShowHorizontalScrollBar();
    public void set_ShowHorizontalScrollBar(bool value);
    public bool get_ShowSheetTabs();
    public void set_ShowSheetTabs(bool value);
    public void SetWindowSize(int left, int top, int width, int height);
    public int get_ActiveTab();
    public void set_ActiveTab(int value);
    internal Nullable`1<int> get_FirstSheet();
    internal void set_FirstSheet(Nullable`1<int> value);
}
public class OfficeOpenXml.ExcelWorksheet : XmlHelper {
    internal CellStoreValue _values;
    internal CellStore`1<object> _formulas;
    internal FlagCellStore _flags;
    internal CellStore`1<IList`1<Token>> _formulaTokens;
    internal CellStore`1<Uri> _hyperLinks;
    internal CellStore`1<int> _commentsStore;
    internal CellStore`1<int> _threadedCommentsStore;
    internal CellStore`1<Nullable`1<int>> _dataValidationsStore;
    internal CellStore`1<MetaDataReference> _metadataStore;
    internal Dictionary`2<int, SharedFormula> _sharedFormulas;
    internal RangeSorter _rangeSorter;
    internal int _minCol;
    internal int _maxCol;
    internal int _nextControlId;
    internal ExcelPackage _package;
    private Uri _worksheetUri;
    private string _name;
    private int _sheetID;
    private int _positionId;
    private string _relationshipID;
    private XmlDocument _worksheetXml;
    internal ExcelWorksheetView _sheetView;
    internal ExcelHeaderFooter _headerFooter;
    [CompilerGeneratedAttribute]
private bool <IsChartSheet>k__BackingField;
    private static string AutoFilterPath;
    private static string SortStatePath;
    private ExcelAutoFilter _autoFilter;
    private SortState _sortState;
    [CompilerGeneratedAttribute]
private bool <FullPrecision>k__BackingField;
    internal ExcelNamedRangeCollection _names;
    private Dictionary`2<int, double> _textHeights;
    internal double _defaultRowHeight;
    private static string outLineSummaryBelowPath;
    private static string outLineSummaryRightPath;
    private static string outLineApplyStylePath;
    private static string tabColorPath;
    private static string codeModuleNamePath;
    internal ExcelVmlDrawingCollection _vmlDrawings;
    internal ExcelCommentCollection _comments;
    internal ExcelWorksheetThreadedComments _threadedComments;
    private static int BLOCKSIZE;
    private ExcelSlicerXmlSources _slicerXmlSources;
    internal MergeCellsCollection _mergedCells;
    private ExcelSheetProtection _protection;
    private ExcelProtectedRangeCollection _protectedRanges;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, double> <RowHeightCache>k__BackingField;
    internal ExcelDrawings _drawings;
    private ExcelSparklineGroupCollection _sparklineGroups;
    private ExcelTableCollection _tables;
    internal ExcelPivotTableCollection _pivotTables;
    private ExcelConditionalFormattingCollection _conditionalFormatting;
    internal ExcelDataValidationCollection _dataValidations;
    private ExcelIgnoredErrorCollection _ignoredErrors;
    private ExcelBackgroundImage _backgroundImage;
    private ControlsCollectionInternal _controls;
    private Dictionary`2<string, HashInfo> _hashes;
    private ExcelPhoneticProperties _phoneticProperties;
    internal Uri WorksheetUri { get; }
    internal ZipPackagePart Part { get; }
    internal string RelationshipId { get; }
    internal int SheetId { get; internal set; }
    internal bool IsChartSheet { get; internal set; }
    internal int PositionId { get; internal set; }
    internal int IndexInList { get; }
    public int Index { get; }
    [ObsoleteAttribute("AutoFilterAddress is deprecated please use AutoFilter.Address instead.")]
public ExcelAddressBase AutoFilterAddress { get; internal set; }
    public ExcelAutoFilter AutoFilter { get; }
    public SortState SortState { get; }
    internal bool FullPrecision { get; internal set; }
    public ExcelWorksheetView View { get; }
    public string Name { get; public set; }
    public ExcelNamedRangeCollection Names { get; }
    public eWorkSheetHidden Hidden { get; public set; }
    public double DefaultRowHeight { get; public set; }
    public bool RowZeroHeight { get; public set; }
    public bool CustomHeight { get; public set; }
    public double DefaultColWidth { get; public set; }
    public bool OutLineSummaryBelow { get; public set; }
    public bool OutLineSummaryRight { get; public set; }
    public bool OutLineApplyStyle { get; public set; }
    public Color TabColor { get; public set; }
    internal string CodeModuleName { get; internal set; }
    public ExcelVBAModule CodeModule { get; }
    public XmlDocument WorksheetXml { get; }
    internal ExcelVmlDrawingCollection VmlDrawings { get; }
    public ExcelCommentCollection Comments { get; }
    public ExcelWorksheetThreadedComments ThreadedComments { get; }
    internal Uri ThreadedCommentsUri { get; }
    public ExcelHeaderFooter HeaderFooter { get; }
    public ExcelPrinterSettings PrinterSettings { get; }
    internal ExcelSlicerXmlSources SlicerXmlSources { get; }
    public ExcelRange Cells { get; }
    public ExcelRange SelectedRange { get; }
    public MergeCellsCollection MergedCells { get; }
    public ExcelRangeBase Dimension { get; }
    public ExcelRangeBase DimensionByValue { get; }
    public ExcelRangeBase FirstValueCell { get; }
    public ExcelRangeBase LastValueCell { get; }
    public ExcelSheetProtection Protection { get; }
    public ExcelProtectedRangeCollection ProtectedRanges { get; }
    internal bool HasDrawingRelationship { get; }
    internal Dictionary`2<int, double> RowHeightCache { get; internal set; }
    public ExcelDrawings Drawings { get; }
    public ExcelSparklineGroupCollection SparklineGroups { get; }
    public ExcelTableCollection Tables { get; }
    public ExcelPivotTableCollection PivotTables { get; }
    internal bool HasLoadedPivotTables { get; }
    public ExcelConditionalFormattingCollection ConditionalFormatting { get; }
    public ExcelDataValidationCollection DataValidations { get; }
    public ExcelIgnoredErrorCollection IgnoredErrors { get; }
    public ExcelBackgroundImage BackgroundImage { get; }
    public ExcelWorkbook Workbook { get; }
    internal ControlsCollectionInternal Controls { get; }
    public ExcelRowsCollection Rows { get; }
    public ExcelColumnCollection Columns { get; }
    internal bool IsDisposed { get; }
    private ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Package { get; }
    private Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.Hashes { get; }
    private ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedPart { get; }
    private Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.RelatedUri { get; }
    internal ExcelPhoneticProperties PhoneticProperties { get; }
    public ExcelWorksheet(XmlNamespaceManager ns, ExcelPackage excelPackage, string relID, Uri uriWorksheet, string sheetName, int sheetID, int positionID, Nullable`1<eWorkSheetHidden> hide);
    public void ClearFormulas();
    public void ClearFormulaValues();
    internal void LoadComments();
    internal void LoadThreadedComments();
    internal Uri get_WorksheetUri();
    internal ZipPackagePart get_Part();
    internal string get_RelationshipId();
    internal int get_SheetId();
    internal void set_SheetId(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsChartSheet();
    [CompilerGeneratedAttribute]
internal void set_IsChartSheet(bool value);
    internal static bool NameNeedsApostrophes(string ws);
    private static bool StartsWithR1C1(string ws);
    internal int get_PositionId();
    internal void set_PositionId(int value);
    internal int get_IndexInList();
    public int get_Index();
    public ExcelAddressBase get_AutoFilterAddress();
    internal void set_AutoFilterAddress(ExcelAddressBase value);
    public ExcelAutoFilter get_AutoFilter();
    public SortState get_SortState();
    [CompilerGeneratedAttribute]
internal bool get_FullPrecision();
    [CompilerGeneratedAttribute]
internal void set_FullPrecision(bool value);
    internal void CheckSheetTypeAndNotDisposed();
    public ExcelWorksheetView get_View();
    public string get_Name();
    public void set_Name(string value);
    internal int GetColumnWidthPixels(int col, decimal mdw);
    internal decimal GetColumnWidth(int col);
    private void ChangeNames(string value);
    public ExcelNamedRangeCollection get_Names();
    public eWorkSheetHidden get_Hidden();
    public void set_Hidden(eWorkSheetHidden value);
    internal double GetRowHeight(int row);
    internal double GetRowHeightPixels(int row);
    private double GetRowHeightFromCellFonts(int row);
    private void DeactivateTab();
    public double get_DefaultRowHeight();
    public void set_DefaultRowHeight(double value);
    public bool get_RowZeroHeight();
    public void set_RowZeroHeight(bool value);
    private double GetRowHeightFromNormalStyle();
    public bool get_CustomHeight();
    public void set_CustomHeight(bool value);
    public double get_DefaultColWidth();
    public void set_DefaultColWidth(double value);
    public bool get_OutLineSummaryBelow();
    public void set_OutLineSummaryBelow(bool value);
    public bool get_OutLineSummaryRight();
    public void set_OutLineSummaryRight(bool value);
    public bool get_OutLineApplyStyle();
    public void set_OutLineApplyStyle(bool value);
    public Color get_TabColor();
    public void set_TabColor(Color value);
    internal string get_CodeModuleName();
    internal void set_CodeModuleName(string value);
    internal void CodeNameChange(string value);
    public ExcelVBAModule get_CodeModule();
    public XmlDocument get_WorksheetXml();
    internal ExcelVmlDrawingCollection get_VmlDrawings();
    public ExcelCommentCollection get_Comments();
    public ExcelWorksheetThreadedComments get_ThreadedComments();
    internal Uri get_ThreadedCommentsUri();
    private Uri GetThreadedCommentUri();
    private void CreateVmlCollection();
    private void CreateXml();
    private static long GetPosition(ZipPackagePart packPart, bool isZipStream, WorksheetZipStream stream, int nextElementLength);
    private void MoveEntry(ZipInputStream zip, ZipEntry entry);
    private int GetAttributeLength(XmlReader xr);
    private void LoadRowPageBreakes(XmlReader xr);
    private void LoadColPageBreakes(XmlReader xr);
    private void ClearNodes();
    private void LoadColumns(XmlReader xr);
    private void LoadHyperLinks(XmlReader xr);
    internal ExcelRichTextCollection GetRichText(int row, int col, ExcelRangeBase r);
    private ExcelHyperLink GetHyperlinkFromRef(XmlReader xr, string refTag, int fromRow, int toRow, int fromCol, int toCol);
    private void LoadCells(XmlReader xr);
    private void LoadConditionalFormatting(XmlReader xr);
    private void WriteArrayFormulaRange(string address, int index, CellFlags type);
    private bool DoAddRow(XmlReader xr);
    private void LoadMergeCells(XmlReader xr);
    private RowInternal AddRow(XmlReader xr, int row);
    private void SetValueFromXml(XmlReader xr, string type, int styleID, int row, int col);
    private object GetErrorFromMetaData(MetaDataReference md, object v);
    public ExcelHeaderFooter get_HeaderFooter();
    public ExcelPrinterSettings get_PrinterSettings();
    internal ExcelSlicerXmlSources get_SlicerXmlSources();
    public ExcelRange get_Cells();
    public ExcelRange get_SelectedRange();
    public MergeCellsCollection get_MergedCells();
    public ExcelRow Row(int row);
    public ExcelColumn Column(int col);
    public virtual string ToString();
    internal ExcelColumn CopyColumn(ExcelColumn c, int col, int maxCol);
    public void Select();
    public void Select(string Address);
    public void Select(string Address, bool SelectSheet);
    public void Select(ExcelAddress Address);
    public void Select(ExcelAddress Address, bool SelectSheet);
    public void InsertRow(int rowFrom, int rows);
    public void InsertRow(int rowFrom, int rows, int copyStylesFromRow);
    public void InsertColumn(int columnFrom, int columns);
    public void InsertColumn(int columnFrom, int columns, int copyStylesFromColumn);
    public void DeleteRow(int row);
    public void DeleteRow(int rowFrom, int rows);
    [ObsoleteAttribute("Use the two-parameter method instead")]
public void DeleteRow(int rowFrom, int rows, bool shiftOtherRowsUp);
    public void DeleteColumn(int column);
    public void DeleteColumn(int columnFrom, int columns);
    public object GetValue(int Row, int Column);
    internal object GetValueForPivotTable(int Row, int Column);
    public T GetValue(int Row, int Column);
    public void SetValue(int Row, int Column, object Value);
    public void SetValue(string Address, object Value);
    public int GetMergeCellId(int row, int column);
    internal void UpdateSheetNameInFormulas(string newName, int rowFrom, int rows, int columnFrom, int columns);
    private void UpdateSheetNameInFormulas(string oldName, string newName);
    internal void Save();
    private void SaveDrawings();
    private static void HandleSaveForIndividualDrawings(ExcelDrawing d);
    private void SaveSlicers();
    private void SaveThreadedComments();
    internal void SaveHandler(ZipOutputStream stream, CompressionLevel compressionLevel, string fileName);
    private void DeletePrinterSettings();
    private void SaveComments();
    private void UpdateCommentRichText();
    private void SaveVmlDrawings();
    private void SaveTables();
    internal bool IsRichText(int row, int col);
    internal void SetTableTotalFunction(ExcelTable tbl, ExcelTableColumn col, int colNum);
    internal void SetFormula(int row, int col, object value);
    private void SavePivotTables();
    private static string GetTotalFunction(ExcelTableColumn col, string funcNum);
    private void SaveXml(Stream stream);
    internal string GetNameSpacePrefix();
    public ExcelRangeBase get_Dimension();
    public ExcelRangeBase get_DimensionByValue();
    public ExcelRangeBase get_FirstValueCell();
    public ExcelRangeBase get_LastValueCell();
    public ExcelSheetProtection get_Protection();
    public ExcelProtectedRangeCollection get_ProtectedRanges();
    internal bool get_HasDrawingRelationship();
    [CompilerGeneratedAttribute]
internal Dictionary`2<int, double> get_RowHeightCache();
    [CompilerGeneratedAttribute]
internal void set_RowHeightCache(Dictionary`2<int, double> value);
    public ExcelDrawings get_Drawings();
    internal void LoadDrawings();
    public ExcelSparklineGroupCollection get_SparklineGroups();
    public ExcelTableCollection get_Tables();
    public ExcelPivotTableCollection get_PivotTables();
    internal bool get_HasLoadedPivotTables();
    public ExcelConditionalFormattingCollection get_ConditionalFormatting();
    public ExcelDataValidationCollection get_DataValidations();
    private void LoadDataValidations(XmlReader xr);
    private void LoadExtLst(XmlReader xr, WorksheetZipStream stream, String& xml, String& lastXmlElement);
    public ExcelIgnoredErrorCollection get_IgnoredErrors();
    public ExcelBackgroundImage get_BackgroundImage();
    public ExcelWorkbook get_Workbook();
    internal int GetMaxShareFunctionIndex(bool isArray);
    internal void SetHFLegacyDrawingRel(string relID);
    internal void RemoveLegacyDrawingRel(string relID);
    internal void UpdateCellsWithDate1904Setting();
    internal string GetFormula(int row, int col);
    internal string GetFormulaR1C1(int row, int col);
    private void DisposeInternal(IDisposable candidateDisposable);
    public sealed virtual void Dispose();
    internal ExcelColumn GetColumn(int column);
    public sealed virtual bool Equals(ExcelWorksheet x, ExcelWorksheet y);
    public sealed virtual int GetHashCode(ExcelWorksheet obj);
    internal ControlsCollectionInternal get_Controls();
    public ExcelRowsCollection get_Rows();
    public ExcelColumnCollection get_Columns();
    internal bool get_IsDisposed();
    private sealed virtual override ExcelPackage OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Package();
    private sealed virtual override Dictionary`2<string, HashInfo> OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_Hashes();
    private sealed virtual override ZipPackagePart OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedPart();
    private sealed virtual override Uri OfficeOpenXml.Drawing.Interfaces.IPictureRelationDocument.get_RelatedUri();
    internal ExcelValue GetCoreValueInner(int row, int col);
    internal object GetValueInner(int row, int col);
    internal int GetStyleInner(int row, int col);
    internal void SetValueInner(int row, int col, object value);
    internal void SetValueInner(int fromRow, int fromCol, int toRow, int toCol, object value);
    internal void SetStyleInner(int row, int col, int styleId);
    internal void SetValueRow_Value(int row, int col, Object[] array);
    internal void SetValueRow_ValueTransposed(int row, int col, Object[] array);
    internal void SetValueRow_Value(int row, int col, IEnumerable collection);
    internal void SetValueRow_ValueTranspose(int row, int col, IEnumerable collection);
    internal void SetValueStyleIdInner(int row, int col, object value, int styleId);
    internal void SetRangeValueInner(int fromRow, int fromColumn, int toRow, int toColumn, Object[0...,0...] values, bool setHyperLinkFromValue, bool addHyperlinkStyles);
    private void SetValuesWithHyperLink(int fromRow, int fromColumn, Object[0...,0...] values, bool addHyperlinkStyles);
    internal bool ExistsValueInner(int row, int col);
    internal bool ExistsStyleInner(int row, int col);
    internal bool ExistsValueInner(int row, int col, Object& value);
    internal bool ExistsStyleInner(int row, int col, Int32& styleId);
    internal void RemoveSlicerReference(ExcelSlicerXmlSource xmlSource);
    internal ExcelPhoneticProperties get_PhoneticProperties();
    internal XmlNode CreateControlContainerNode();
    internal void NormalStyleChange();
    internal bool IsRowHidden(int row);
    public ExcelRangeBase GetFormulaRange(int row, int column);
    internal void ReCalculateFullPrecision();
    private object GetDisplayedValue(ExcelValue c);
    [CompilerGeneratedAttribute]
private void <LoadHyperLinks>b__148_0(string x);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExcelWorksheets : XmlHelper {
    internal ExcelPackage _pck;
    internal ChangeableDictionary`1<ExcelWorksheet> _worksheets;
    private XmlNamespaceManager _namespaceManager;
    internal static string ERR_DUP_WORKSHEET;
    internal static string WORKSHEET_CONTENTTYPE;
    internal static string CHARTSHEET_CONTENTTYPE;
    internal bool _areDrawingsLoaded;
    public int Count { get; }
    public ExcelWorksheet Item { get; }
    public ExcelWorksheet Item { get; }
    internal ExcelWorksheets(ExcelPackage pck, XmlNamespaceManager nsm, XmlNode topNode);
    internal short GetPositionByToken(string tokenValue);
    public int get_Count();
    public sealed virtual IEnumerator`1<ExcelWorksheet> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelWorksheet Add(string Name);
    private ExcelWorksheet AddSheet(string Name, bool isChart, Nullable`1<eChartType> chartType, ExcelPivotTable pivotTableSource, XmlElement sheetElement);
    public ExcelWorksheet Add(string Name, ExcelWorksheet Copy);
    public ExcelChartsheet AddChart(string Name, eChartType chartType);
    public ExcelChartsheet AddChart(string Name, eChartType chartType, ExcelPivotTable pivotTableSource);
    public ExcelChartsheet AddStockChart(string Name, ExcelRangeBase CategorySerie, ExcelRangeBase HighSerie, ExcelRangeBase LowSerie, ExcelRangeBase CloseSerie, ExcelRangeBase OpenSerie, ExcelRangeBase VolumeSerie);
    internal Nullable`1<int> GetFirstVisibleSheetIndex();
    internal Nullable`1<int> GetLastVisibleSheetIndex();
    internal Nullable`1<int> GetNextVisibleSheetIndex(int index);
    internal string CreateWorkbookRel(string Name, int sheetID, Uri uriWorksheet, bool isChart, XmlElement sheetElement);
    internal void GetSheetURI(String& Name, Int32& sheetID, Uri& uriWorksheet, bool isChart);
    internal string ValidateFixSheetName(string name);
    private string RemoveInvalidCharactersAndTruncate(string name);
    private bool ValidateName(string Name);
    internal XmlDocument CreateNewWorksheet(bool isChart);
    public void Delete(int Index);
    private void DeleteRelationsAndParts(ZipPackagePart part);
    public void Delete(string name);
    public void Delete(ExcelWorksheet Worksheet);
    internal void ReindexWorksheetDictionary();
    public ExcelWorksheet get_Item(int PositionID);
    public ExcelWorksheet get_Item(string Name);
    public ExcelWorksheet Copy(string Name, string NewName);
    internal ExcelWorksheet GetBySheetID(int localSheetID);
    internal ExcelWorksheet GetByName(string name);
    private ExcelWorksheet GetWorksheetByName(string worksheetName, string paramName, bool throwIfNull);
    public void MoveBefore(string sourceName, string targetName);
    public void MoveBefore(int sourcePositionId, int targetPositionId);
    public void MoveAfter(string sourceName, string targetName);
    public void MoveAfter(int sourcePositionId, int targetPositionId);
    public void MoveToStart(string sourceName);
    public void MoveToStart(int sourcePositionId);
    public void MoveToEnd(string sourceName);
    public void MoveToEnd(int sourcePositionId);
    public sealed virtual void Dispose();
    internal void NormalStyleChange();
}
public class OfficeOpenXml.ExcelWorksheetView : XmlHelper {
    private ExcelWorksheet _worksheet;
    private ExcelWorksheetViewPaneSettings _paneSettings;
    [CompilerGeneratedAttribute]
private ExcelWorksheetViewPaneSettings <PaneSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelWorksheetPanes[] <Panes>k__BackingField;
    private string _paneNodePath;
    private string _selectionNodePath;
    protected internal XmlElement SheetViewElement { get; }
    public string ActiveCell { get; public set; }
    public string TopLeftCell { get; public set; }
    public string SelectedRange { get; public set; }
    public ExcelWorksheetViewPaneSettings PaneSettings { get; private set; }
    public bool TabSelected { get; public set; }
    public bool TabSelectedMulti { get; public set; }
    public bool PageLayoutView { get; public set; }
    public bool PageBreakView { get; public set; }
    public bool ShowGridLines { get; public set; }
    public bool ShowHeaders { get; public set; }
    public int ZoomScale { get; public set; }
    public bool RightToLeft { get; public set; }
    internal bool WindowProtection { get; internal set; }
    public ExcelWorksheetPanes[] Panes { get; internal set; }
    public ExcelWorksheetPanes TopLeftPane { get; }
    public ExcelWorksheetPanes TopRightPane { get; }
    public ExcelWorksheetPanes BottomLeftPane { get; }
    public ExcelWorksheetPanes BottomRightPane { get; }
    internal ExcelWorksheetView(XmlNamespaceManager ns, XmlNode node, ExcelWorksheet xlWorksheet);
    private void SetPaneSettings();
    private ExcelWorksheetPanes[] LoadPanes();
    protected internal XmlElement get_SheetViewElement();
    public string get_ActiveCell();
    public void set_ActiveCell(string value);
    public string get_TopLeftCell();
    public void set_TopLeftCell(string value);
    public string get_SelectedRange();
    public void set_SelectedRange(string value);
    [CompilerGeneratedAttribute]
public ExcelWorksheetViewPaneSettings get_PaneSettings();
    [CompilerGeneratedAttribute]
private void set_PaneSettings(ExcelWorksheetViewPaneSettings value);
    private bool IsActiveCellInSelection(ExcelAddressBase ac, ExcelAddressBase sd);
    public bool get_TabSelected();
    public void set_TabSelected(bool value);
    public bool get_TabSelectedMulti();
    public void set_TabSelectedMulti(bool value);
    public void SetTabSelected(bool isSelected, bool allowMultiple);
    public bool get_PageLayoutView();
    public void set_PageLayoutView(bool value);
    public bool get_PageBreakView();
    public void set_PageBreakView(bool value);
    public bool get_ShowGridLines();
    public void set_ShowGridLines(bool value);
    public bool get_ShowHeaders();
    public void set_ShowHeaders(bool value);
    public int get_ZoomScale();
    public void set_ZoomScale(int value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    internal bool get_WindowProtection();
    internal void set_WindowProtection(bool value);
    [CompilerGeneratedAttribute]
public ExcelWorksheetPanes[] get_Panes();
    [CompilerGeneratedAttribute]
internal void set_Panes(ExcelWorksheetPanes[] value);
    public ExcelWorksheetPanes get_TopLeftPane();
    public ExcelWorksheetPanes get_TopRightPane();
    public ExcelWorksheetPanes get_BottomLeftPane();
    public ExcelWorksheetPanes get_BottomRightPane();
    public void FreezePanes(int Row, int Column);
    private void CreateSelectionXml(int Row, int Column, bool isSplit);
    private static void ValidateRows(int Row, int Column);
    public void SplitPanesPixels(int pixelsY, int pixelsX);
    public void SplitPanes(int rowsTop, int columnsLeft);
    private void SetPaneSetting();
    private ExcelCellAddress GetTopLeftCell();
    private decimal GetVisibleColumnWidth(int topCol, int cols);
    private decimal GetVisibleRowWidth(int leftRow, int rows);
    private void RemoveSelection();
    public void UnFreezePanes();
}
public class OfficeOpenXml.ExcelWriteProtection : XmlHelper {
    internal eHashAlgorithm HashAlgorithm { get; private set; }
    internal int SpinCount { get; internal set; }
    internal Byte[] SaltValue { get; internal set; }
    internal Byte[] HashValue { get; internal set; }
    public bool IsReadOnly { get; }
    public string UserName { get; public set; }
    public bool ReadOnlyRecommended { get; public set; }
    internal ExcelWriteProtection(XmlNamespaceManager nameSpaceManager, XmlNode topNode, String[] schemaNodeOrder);
    public void SetReadOnly(string userName, string password);
    private void RemovePasswordAttributes();
    public void RemoveReadOnly();
    internal eHashAlgorithm get_HashAlgorithm();
    private void set_HashAlgorithm(eHashAlgorithm value);
    private string SetHashAlogorithm(eHashAlgorithm value);
    private eHashAlgorithm GetHashAlogorithm(string v);
    internal int get_SpinCount();
    internal void set_SpinCount(int value);
    internal Byte[] get_SaltValue();
    internal void set_SaltValue(Byte[] value);
    internal Byte[] get_HashValue();
    internal void set_HashValue(Byte[] value);
    public bool get_IsReadOnly();
    public string get_UserName();
    public void set_UserName(string value);
    public bool get_ReadOnlyRecommended();
    public void set_ReadOnlyRecommended(bool value);
}
internal class OfficeOpenXml.ExcelXmlSource : object {
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <Rel>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <XmlDocument>k__BackingField;
    internal ZipPackageRelationship Rel { get; }
    internal ZipPackagePart Part { get; }
    internal Uri Uri { get; }
    public XmlDocument XmlDocument { get; }
    internal ExcelXmlSource(ZipPackagePart relPart, string relId);
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_Rel();
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
public XmlDocument get_XmlDocument();
}
internal class OfficeOpenXml.ExcelXMLWriter.ExtLstHelper : object {
    private List`1<string> _listOfExts;
    private Dictionary`2<string, int> _uriToIndex;
    internal int extCount { get; }
    public ExtLstHelper(string xml, ExcelWorksheet ws);
    internal int get_extCount();
    private void ParseIntialXmlToList(string xml, ExcelWorksheet ws);
    internal void InsertExt(string uri, string content, string uriOfNodeBefore);
    internal string GetWholeExtLst(string prefix);
}
public class OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings : object {
    [CompilerGeneratedAttribute]
private TableAccessibilitySettings <TableSettings>k__BackingField;
    public TableAccessibilitySettings TableSettings { get; private set; }
    [CompilerGeneratedAttribute]
public TableAccessibilitySettings get_TableSettings();
    [CompilerGeneratedAttribute]
private void set_TableSettings(TableAccessibilitySettings value);
}
internal class OfficeOpenXml.Export.HtmlExport.Accessibility.AriaAttributes : object {
    public static AriaAttribute AriaLabel { get; }
    public static AriaAttribute AriaDescribedBy { get; }
    public static AriaAttribute AriaLabelledBy { get; }
    public static AriaAttribute get_AriaLabel();
    public static AriaAttribute get_AriaDescribedBy();
    public static AriaAttribute get_AriaLabelledBy();
}
public class OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings : object {
    [CompilerGeneratedAttribute]
private bool <AddAccessibilityAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AriaLabelledBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AriaDescribedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TheadRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TbodyRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TfootRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableHeaderCellRole>k__BackingField;
    public bool AddAccessibilityAttributes { get; public set; }
    public string AriaLabel { get; public set; }
    public string AriaLabelledBy { get; public set; }
    public string AriaDescribedBy { get; public set; }
    public string TableRole { get; public set; }
    public string TheadRole { get; public set; }
    public string TbodyRole { get; public set; }
    public string TfootRole { get; public set; }
    public string TableHeaderCellRole { get; public set; }
    public void ResetToDefault();
    public void Copy(TableAccessibilitySettings copy);
    [CompilerGeneratedAttribute]
public bool get_AddAccessibilityAttributes();
    [CompilerGeneratedAttribute]
public void set_AddAccessibilityAttributes(bool value);
    [CompilerGeneratedAttribute]
public string get_AriaLabel();
    [CompilerGeneratedAttribute]
public void set_AriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_AriaLabelledBy();
    [CompilerGeneratedAttribute]
public void set_AriaLabelledBy(string value);
    [CompilerGeneratedAttribute]
public string get_AriaDescribedBy();
    [CompilerGeneratedAttribute]
public void set_AriaDescribedBy(string value);
    [CompilerGeneratedAttribute]
public string get_TableRole();
    [CompilerGeneratedAttribute]
public void set_TableRole(string value);
    [CompilerGeneratedAttribute]
public string get_TheadRole();
    [CompilerGeneratedAttribute]
public void set_TheadRole(string value);
    [CompilerGeneratedAttribute]
public string get_TbodyRole();
    [CompilerGeneratedAttribute]
public void set_TbodyRole(string value);
    [CompilerGeneratedAttribute]
public string get_TfootRole();
    [CompilerGeneratedAttribute]
public void set_TfootRole(string value);
    [CompilerGeneratedAttribute]
public string get_TableHeaderCellRole();
    [CompilerGeneratedAttribute]
public void set_TableHeaderCellRole(string value);
}
internal class OfficeOpenXml.Export.HtmlExport.CF_Icons : object {
    internal static string SvgInitial;
    internal static string SvgIntialStandard;
    internal static string ArrowNonViewbox;
    internal static string Arrow;
    internal static string CircleSvg;
    internal static string TrafficLightSvg;
    internal static string RedDiamond;
    internal static string YellowTriangle;
    internal static string FlagBase;
    internal static string SmallTriangleBase;
    internal static string RedCross;
    internal static string Exclamation;
    internal static string Checkmark;
    internal static string StarBase;
    internal static string YellowDash;
    internal static string SignalMeter;
    internal static string FilledBoxes;
    internal static string AllQuarters;
    internal static string Hide;
    internal static string ShrinkAndCenter;
    internal static string GetIconSvg(eExcelconditionalFormattingCustomIcon icon);
    internal static string GetIconSvgConvertedString(eExcelconditionalFormattingCustomIcon icon);
    internal static string GetIconSvgUnConvertedString(eExcelconditionalFormattingCustomIcon icon);
    internal static string AddParentNodeSvg(string svg, int width, int height);
    internal static string SetActiveIcons(int numActive, string SvgType);
    internal static string GetIconMiddle(eExcelconditionalFormattingCustomIcon icon);
}
internal static class OfficeOpenXml.Export.HtmlExport.ColumnDataTypeManager : object {
    public static string GetColumnDataType(ExcelWorksheet sheet, ExcelRangeBase range, int startRow, int column);
    private static string GetHtmlDataType(DataType dataType);
}
internal class OfficeOpenXml.Export.HtmlExport.CssCollections.CssRangeRuleCollection : object {
    private HtmlExportSettings _settings;
    private CssExportSettings _cssSettings;
    private ExcelWorkbook _wb;
    private List`1<ExcelRangeBase> _ranges;
    private ExcelTheme _theme;
    private CssRuleCollection _ruleCollection;
    protected internal HashSet`1<string> _images;
    private TranslatorContext _context;
    internal CssRuleCollection RuleCollection { get; }
    internal CssRangeRuleCollection(List`1<ExcelRangeBase> ranges, HtmlRangeExportSettings settings);
    internal CssRangeRuleCollection(List`1<ExcelRangeBase> ranges, HtmlTableExportSettings settings);
    internal CssRuleCollection get_RuleCollection();
    private void Init(List`1<ExcelRangeBase> ranges);
    internal void AddSharedClasses(string tableClass);
    private void AddTableRule(string tableClass);
    private void AddImageAlignment();
    private void AddWorksheetDimensions();
    internal void AddToCollection(List`1<IStyleExport> styleList, ExcelNamedStyleXml ns, int id, int cssOrder, string altName);
    internal void AddSharedIconsetRule();
    internal void AddSharedDatabarRule(ExcelConditionalFormattingDataBar dataBar);
    internal void AddDatabar(ExcelConditionalFormattingDataBar dataBar, int cssOrder, int id);
    internal void AddIconSetCF(ExcelConditionalFormattingIconSetBase`1<T> set, int cssOrder, int id);
    internal void AddPictureToCss(HtmlImage p);
    private void AddPicturePropertiesToCss(HtmlImage image);
    internal void AddOtherCollectionToThisCollection(CssRuleCollection otherCollection);
}
internal class OfficeOpenXml.Export.HtmlExport.CssCollections.CssRule : object {
    [CompilerGeneratedAttribute]
private List`1<Declaration> <Declarations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    internal List`1<Declaration> Declarations { get; internal set; }
    internal string Selector { get; internal set; }
    internal int Order { get; internal set; }
    internal CssRule(string selector, int order);
    [CompilerGeneratedAttribute]
internal List`1<Declaration> get_Declarations();
    [CompilerGeneratedAttribute]
internal void set_Declarations(List`1<Declaration> value);
    [CompilerGeneratedAttribute]
internal string get_Selector();
    [CompilerGeneratedAttribute]
internal void set_Selector(string value);
    [CompilerGeneratedAttribute]
internal int get_Order();
    [CompilerGeneratedAttribute]
internal void set_Order(int value);
    internal void AddDeclaration(string name, String[] values);
    internal void AddDeclarationList(List`1<Declaration> declarations);
}
[DefaultMemberAttribute("Item")]
internal class OfficeOpenXml.Export.HtmlExport.CssCollections.CssRuleCollection : object {
    private List`1<CssRule> _cssRules;
    internal List`1<CssRule> CssRules { get; }
    public CssRule Item { get; public set; }
    internal List`1<CssRule> get_CssRules();
    [IteratorStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.CssCollections.CssRuleCollection/<System-Collections-Generic-IEnumerable<OfficeOpenXml-Export-HtmlExport-CssCollections-CssRule>-GetEnumerator>d__4")]
private sealed virtual override IEnumerator`1<CssRule> System.Collections.Generic.IEnumerable<OfficeOpenXml.Export.HtmlExport.CssCollections.CssRule>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void AddRule(string ruleName, string declarationName, String[] declarationValues);
    internal void AddRule(CssRule rule);
    internal void RemoveRule(CssRule rule);
    internal void RemoveRuleByName(string ruleName);
    public CssRule get_Item(int index);
    public void set_Item(int index, CssRule value);
}
internal class OfficeOpenXml.Export.HtmlExport.CssCollections.CssTableRuleCollection : object {
    protected HtmlTableExportSettings _settings;
    private ExcelTable _table;
    private ExcelTheme _theme;
    [CompilerGeneratedAttribute]
private CssRuleCollection <RuleCollection>k__BackingField;
    private TranslatorContext _context;
    internal CssRuleCollection RuleCollection { get; private set; }
    internal CssTableRuleCollection(ExcelTable table, HtmlTableExportSettings settings);
    [CompilerGeneratedAttribute]
internal CssRuleCollection get_RuleCollection();
    [CompilerGeneratedAttribute]
private void set_RuleCollection(CssRuleCollection value);
    internal void AddHyperlink(string name, ExcelTableStyleElement element);
    internal void AddAlignment(string name, List`1<string> dataTypes);
    internal void AddToCollection(string name, ExcelTableStyleElement element, string htmlElement);
    internal void AddToCollectionVH(string name, ExcelTableStyleElement element, string htmlElement);
    internal void AddTableToCollection(ExcelTable table, List`1<string> datatypes, string tableClassPreset);
    internal void AddOtherCollectionToThisCollection(CssRuleCollection otherCollection);
}
internal class OfficeOpenXml.Export.HtmlExport.CssCollections.Declaration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    public string Name { get; public set; }
    public List`1<string> Values { get; public set; }
    internal Declaration(string name, String[] values);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<string> value);
    internal string ValuesToString();
    internal void AddValues(String[] values);
}
public class OfficeOpenXml.Export.HtmlExport.CssExclude : object {
    [CompilerGeneratedAttribute]
private eFontExclude <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private eBorderExclude <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerticalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TextRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    public eFontExclude Font { get; public set; }
    public eBorderExclude Border { get; public set; }
    public bool Fill { get; public set; }
    public bool VerticalAlignment { get; public set; }
    public bool HorizontalAlignment { get; public set; }
    public bool WrapText { get; public set; }
    public bool TextRotation { get; public set; }
    public bool Indent { get; public set; }
    [CompilerGeneratedAttribute]
public eFontExclude get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(eFontExclude value);
    [CompilerGeneratedAttribute]
public eBorderExclude get_Border();
    [CompilerGeneratedAttribute]
public void set_Border(eBorderExclude value);
    [CompilerGeneratedAttribute]
public bool get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(bool value);
    [CompilerGeneratedAttribute]
public bool get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(bool value);
    [CompilerGeneratedAttribute]
public bool get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(bool value);
    [CompilerGeneratedAttribute]
public bool get_WrapText();
    [CompilerGeneratedAttribute]
public void set_WrapText(bool value);
    [CompilerGeneratedAttribute]
public bool get_TextRotation();
    [CompilerGeneratedAttribute]
public void set_TextRotation(bool value);
    [CompilerGeneratedAttribute]
public bool get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(bool value);
    public void ResetToDefault();
    public void Copy(CssExclude copy);
}
public class OfficeOpenXml.Export.HtmlExport.CssExcludeStyle : object {
    [CompilerGeneratedAttribute]
private CssExclude <TableStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private CssExclude <CellStyle>k__BackingField;
    public CssExclude TableStyle { get; }
    public CssExclude CellStyle { get; }
    [CompilerGeneratedAttribute]
public CssExclude get_TableStyle();
    [CompilerGeneratedAttribute]
public CssExclude get_CellStyle();
}
public abstract class OfficeOpenXml.Export.HtmlExport.CssExportSettings : object {
    [CompilerGeneratedAttribute]
private bool <IncludeSharedClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeNormalFont>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCssReset>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AdditionalCssElements>k__BackingField;
    [CompilerGeneratedAttribute]
private float <IndentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndentUnit>k__BackingField;
    public bool IncludeSharedClasses { get; public set; }
    public bool IncludeNormalFont { get; public set; }
    public bool IncludeCssReset { get; public set; }
    public Dictionary`2<string, string> AdditionalCssElements { get; internal set; }
    public float IndentValue { get; public set; }
    public string IndentUnit { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeSharedClasses();
    [CompilerGeneratedAttribute]
public void set_IncludeSharedClasses(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeNormalFont();
    [CompilerGeneratedAttribute]
public void set_IncludeNormalFont(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCssReset();
    [CompilerGeneratedAttribute]
public void set_IncludeCssReset(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalCssElements();
    [CompilerGeneratedAttribute]
internal void set_AdditionalCssElements(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public float get_IndentValue();
    [CompilerGeneratedAttribute]
public void set_IndentValue(float value);
    [CompilerGeneratedAttribute]
public string get_IndentUnit();
    [CompilerGeneratedAttribute]
public void set_IndentUnit(string value);
    internal void ResetToDefaultInternal();
    internal void CopyInternal(CssExportSettings copy);
}
public class OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings : CssExportSettings {
    [CompilerGeneratedAttribute]
private CssExclude <CssExclude>k__BackingField;
    public CssExclude CssExclude { get; }
    [CompilerGeneratedAttribute]
public CssExclude get_CssExclude();
    public void ResetToDefault();
    public void Copy(CssRangeExportSettings copy);
}
public class OfficeOpenXml.Export.HtmlExport.CssTableExportSettings : CssExportSettings {
    [CompilerGeneratedAttribute]
private bool <IncludeTableStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCellStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private CssExcludeStyle <Exclude>k__BackingField;
    public bool IncludeTableStyles { get; public set; }
    public bool IncludeCellStyles { get; public set; }
    public CssExcludeStyle Exclude { get; }
    [CompilerGeneratedAttribute]
public bool get_IncludeTableStyles();
    [CompilerGeneratedAttribute]
public void set_IncludeTableStyles(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCellStyles();
    [CompilerGeneratedAttribute]
public void set_IncludeCellStyles(bool value);
    [CompilerGeneratedAttribute]
public CssExcludeStyle get_Exclude();
    public void ResetToDefault();
    public void Copy(CssTableExportSettings copy);
}
internal class OfficeOpenXml.Export.HtmlExport.DatabarSvg : object {
    internal static string DataBar;
    internal static string AxisStripes;
    internal static string AxisStripesColor;
    internal static string GetConvertedDatabarString(Color databarColor, bool isGradient, Nullable`1<Color> borderColor);
    internal static string GetConvertedAxisStripes();
    internal static string GetConvertedAxisStripesWithColor(Color axisColor);
    internal static string GetUncovertedDatabar(Color databarColor, bool isGradient, Nullable`1<Color> borderColor);
    private static string GetColorCode(Color color);
}
internal class OfficeOpenXml.Export.HtmlExport.Determinator.StyleChecker : object {
    private ExcelStyles _wbStyles;
    private IStyleExport _style;
    private int _id;
    private List`1<IStyleExport> _styleList;
    [CompilerGeneratedAttribute]
private StyleCache <Cache>k__BackingField;
    internal int Id { get; }
    private StyleCache Cache { get; private set; }
    private IStyleExport Style { get; private set; }
    internal bool ShouldAdd { get; }
    internal StyleChecker(ExcelStyles wbStyles, IStyleExport style, StyleCache cache);
    internal int get_Id();
    [CompilerGeneratedAttribute]
private StyleCache get_Cache();
    [CompilerGeneratedAttribute]
private void set_Cache(StyleCache value);
    private IStyleExport get_Style();
    private void set_Style(IStyleExport value);
    internal bool IsAdded(int bottomStyleId, int rightStyleId);
    internal bool BorderStyleCheck(int borderIdBottom, int borderIdRight);
    internal bool get_ShouldAdd();
    internal bool ShouldAddWithBorders(int bottomStyleId, int rightStyleId);
    internal List`1<IStyleExport> GetStyleList();
    internal void AddConditionalFormattingsToCollection(string cellAddress, Dictionary`2<string, List`1<ExcelConditionalFormattingRule>> dict, Func`3<int, List`1<IStyleExport>, bool> addToCss);
}
[FlagsAttribute]
public enum OfficeOpenXml.Export.HtmlExport.eBorderExclude : Enum {
    public int value__;
    public static eBorderExclude All;
    public static eBorderExclude Top;
    public static eBorderExclude Bottom;
    public static eBorderExclude Left;
    public static eBorderExclude Right;
}
[FlagsAttribute]
public enum OfficeOpenXml.Export.HtmlExport.eFontExclude : Enum {
    public int value__;
    public static eFontExclude All;
    public static eFontExclude Name;
    public static eFontExclude Size;
    public static eFontExclude Color;
    public static eFontExclude Bold;
    public static eFontExclude Italic;
    public static eFontExclude Strike;
    public static eFontExclude Underline;
}
public enum OfficeOpenXml.Export.HtmlExport.eHiddenState : Enum {
    public int value__;
    public static eHiddenState Exclude;
    public static eHiddenState IncludeButHide;
    public static eHiddenState Include;
}
public enum OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling : Enum {
    public int value__;
    public static eHtmlGeneralAlignmentHandling DontSet;
    public static eHtmlGeneralAlignmentHandling ColumnDataType;
    public static eHtmlGeneralAlignmentHandling CellDataType;
}
public enum OfficeOpenXml.Export.HtmlExport.ePictureInclude : Enum {
    public int value__;
    public static ePictureInclude Exclude;
    public static ePictureInclude IncludeInCssOnly;
    public static ePictureInclude Include;
}
public enum OfficeOpenXml.Export.HtmlExport.ePicturePosition : Enum {
    public int value__;
    public static ePicturePosition DontSet;
    public static ePicturePosition Absolute;
    public static ePicturePosition Relative;
}
internal class OfficeOpenXml.Export.HtmlExport.EpplusHtmlAttribute : object {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    public string AttributeName { get; public set; }
    public string Value { get; public set; }
    public string Href { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
}
public class OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings : object {
    [CompilerGeneratedAttribute]
private string <TableId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AdditionalTableClassNames>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessibilitySettings <Accessibility>k__BackingField;
    private int _headerRows;
    [CompilerGeneratedAttribute]
private List`1<string> <Headers>k__BackingField;
    public string TableId { get; public set; }
    public List`1<string> AdditionalTableClassNames { get; protected internal set; }
    public AccessibilitySettings Accessibility { get; private set; }
    public int HeaderRows { get; public set; }
    public List`1<string> Headers { get; }
    [CompilerGeneratedAttribute]
public string get_TableId();
    [CompilerGeneratedAttribute]
public void set_TableId(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AdditionalTableClassNames();
    [CompilerGeneratedAttribute]
protected internal void set_AdditionalTableClassNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public AccessibilitySettings get_Accessibility();
    [CompilerGeneratedAttribute]
private void set_Accessibility(AccessibilitySettings value);
    public int get_HeaderRows();
    public void set_HeaderRows(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Headers();
}
internal class OfficeOpenXml.Export.HtmlExport.ExporterContext : object {
    internal StyleCache _styleCache;
    internal StyleCache _dxfStyleCache;
    internal QuadTree`1<ExcelConditionalFormattingRule> _cfQuadTree;
    internal void InitializeQuadTree(ExcelRangeBase range);
    internal bool AddPairToCache(string key, int value, bool isDxfCache);
    internal int GetCacheId(string key, bool isDxfCache);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterAsync : CssExporterBase {
    private HtmlRangeExportSettings _settings;
    public CssRangeExporterAsync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges);
    public CssRangeExporterAsync(HtmlRangeExportSettings settings, ExcelRangeBase range);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterAsync/<GetCssStringAsync>d__3")]
public Task`1<string> GetCssStringAsync();
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterAsync/<RenderCssAsync>d__4")]
public Task RenderCssAsync(Stream stream);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterAsync : CssExporterBase {
    private ExcelTable _table;
    private HtmlTableExportSettings _tableSettings;
    public CssTableExporterAsync(HtmlTableExportSettings settings, ExcelTable table);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterAsync/<GetCssStringAsync>d__3")]
public Task`1<string> GetCssStringAsync();
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterAsync/<RenderCssAsync>d__4")]
public Task RenderCssAsync(Stream stream);
}
public abstract class OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase : object {
    private EPPlusReadOnlyList`1<ExcelRangeBase> _ranges;
    public EPPlusReadOnlyList`1<ExcelRangeBase> Ranges { get; }
    internal ExcelHtmlExporterBase(ExcelRangeBase range);
    internal ExcelHtmlExporterBase(ExcelRangeBase[] ranges);
    public sealed virtual EPPlusReadOnlyList`1<ExcelRangeBase> get_Ranges();
    private void AddRange(ExcelRangeBase range);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter : ExcelHtmlExporterBase {
    private HtmlRangeExportSettings _settings;
    private ExporterContext _exporterContext;
    public HtmlRangeExportSettings Settings { get; }
    public ExcelHtmlRangeExporter(ExcelRangeBase range);
    public sealed virtual HtmlRangeExportSettings get_Settings();
    public sealed virtual string GetHtmlString();
    public sealed virtual string GetHtmlString(int rangeIndex);
    public sealed virtual string GetHtmlString(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    public sealed virtual string GetHtmlString(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual void RenderHtml(Stream stream);
    public sealed virtual void RenderHtml(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    public sealed virtual void RenderHtml(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual string GetSinglePage(string htmlDocument);
    public sealed virtual string GetCssString();
    public sealed virtual void RenderCss(Stream stream);
    public sealed virtual Task`1<string> GetHtmlStringAsync();
    public sealed virtual Task`1<string> GetHtmlStringAsync(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    public sealed virtual Task`1<string> GetHtmlStringAsync(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual Task RenderHtmlAsync(Stream stream);
    public sealed virtual Task RenderHtmlAsync(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    public sealed virtual Task RenderHtmlAsync(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual Task`1<string> GetSinglePageAsync(string htmlDocument);
    public sealed virtual Task`1<string> GetCssStringAsync();
    public sealed virtual Task RenderCssAsync(Stream stream);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter : object {
    private ExcelTable _table;
    private HtmlTableExportSettings _settings;
    private ExporterContext _exporterContext;
    public HtmlTableExportSettings Settings { get; }
    public ExcelHtmlTableExporter(ExcelTable table);
    public sealed virtual HtmlTableExportSettings get_Settings();
    public sealed virtual string GetHtmlString();
    public sealed virtual void RenderHtml(Stream stream);
    public sealed virtual string GetSinglePage(string htmlDocument);
    public sealed virtual string GetCssString();
    public sealed virtual void RenderCss(Stream stream);
    public sealed virtual Task`1<string> GetHtmlStringAsync();
    public sealed virtual Task RenderHtmlAsync(Stream stream);
    public sealed virtual Task`1<string> GetSinglePageAsync(string htmlDocument);
    public sealed virtual Task`1<string> GetCssStringAsync();
    public sealed virtual Task RenderCssAsync(Stream stream);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter : ExcelHtmlExporterBase {
    private HtmlRangeExportSettings _settings;
    private ExporterContext _exporterContext;
    public HtmlRangeExportSettings Settings { get; }
    public ExcelHtmlWorkbookExporter(ExcelRangeBase[] ranges);
    public sealed virtual HtmlRangeExportSettings get_Settings();
    public sealed virtual string GetHtmlString();
    public sealed virtual string GetHtmlString(int rangeIndex);
    public sealed virtual string GetHtmlString(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    public sealed virtual string GetHtmlString(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual void RenderHtml(Stream stream);
    public sealed virtual void RenderHtml(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    public sealed virtual void RenderHtml(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual string GetSinglePage(string htmlDocument);
    public sealed virtual string GetCssString();
    public sealed virtual void RenderCss(Stream stream);
    public sealed virtual Task`1<string> GetHtmlStringAsync();
    public sealed virtual Task`1<string> GetHtmlStringAsync(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    public sealed virtual Task`1<string> GetHtmlStringAsync(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual Task RenderHtmlAsync(Stream stream);
    public sealed virtual Task RenderHtmlAsync(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    public sealed virtual Task RenderHtmlAsync(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public sealed virtual Task`1<string> GetSinglePageAsync(string htmlDocument);
    public sealed virtual Task`1<string> GetCssStringAsync();
    public sealed virtual Task RenderCssAsync(Stream stream);
}
internal static class OfficeOpenXml.Export.HtmlExport.Exporters.HtmlExporterFactory : object {
    public static HtmlRangeExporterSync CreateHtmlExporterSync(HtmlRangeExportSettings settings, ExcelRangeBase range, ExporterContext context);
    public static HtmlRangeExporterSync CreateHtmlExporterSync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges, ExporterContext context);
    public static HtmlTableExporterSync CreateHtmlTableExporterSync(HtmlTableExportSettings settings, ExcelTable table, ExporterContext context);
    public static CssRangeExporterSync CreateCssExporterSync(HtmlRangeExportSettings settings, ExcelRangeBase range, ExporterContext context);
    public static CssRangeExporterSync CreateCssExporterSync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges, ExporterContext context);
    public static CssTableExporterSync CreateCssExporterTableSync(HtmlTableExportSettings settings, ExcelTable table, ExporterContext context);
    public static HtmlRangeExporterAsync CreateHtmlExporterAsync(HtmlRangeExportSettings settings, ExcelRangeBase range, ExporterContext context);
    public static HtmlRangeExporterAsync CreateHtmlExporterAsync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges, ExporterContext context);
    public static HtmlTableExporterAsync CreateHtmlTableExporterAsync(HtmlTableExportSettings settings, ExcelTable table, ExporterContext context);
    public static CssRangeExporterAsync CreateCssExporterAsync(HtmlRangeExportSettings settings, ExcelRangeBase range, ExporterContext context);
    public static CssRangeExporterAsync CreateCssExporterAsync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges, ExporterContext context);
    public static CssTableExporterAsync CreateCssExporterTableAsync(HtmlTableExportSettings settings, ExcelTable table, ExporterContext context);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync : HtmlRangeExporterBase {
    internal HtmlRangeExporterAsync(HtmlRangeExportSettings settings, ExcelRangeBase range);
    internal HtmlRangeExporterAsync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync/<GetHtmlStringAsync>d__2")]
public Task`1<string> GetHtmlStringAsync();
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync/<GetHtmlStringAsync>d__3")]
public Task`1<string> GetHtmlStringAsync(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync/<GetHtmlStringAsync>d__4")]
public Task`1<string> GetHtmlStringAsync(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync/<RenderHtmlAsync>d__5")]
public Task RenderHtmlAsync(Stream stream);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync/<RenderHtmlAsync>d__6")]
public Task RenderHtmlAsync(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync/<RenderHtmlAsync>d__7")]
public Task RenderHtmlAsync(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync/<GetSinglePageAsync>d__8")]
public Task`1<string> GetSinglePageAsync(string htmlDocument);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterAsync : HtmlTableExporterBase {
    internal HtmlTableExporterAsync(HtmlTableExportSettings settings, ExcelTable table);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterAsync/<GetHtmlStringAsync>d__1")]
public Task`1<string> GetHtmlStringAsync();
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterAsync/<RenderHtmlAsync>d__2")]
public Task RenderHtmlAsync(Stream stream);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterAsync/<GetSinglePageAsync>d__3")]
public Task`1<string> GetSinglePageAsync(string htmlDocument);
}
internal abstract class OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterBase : HtmlExporterBaseInternal {
    protected ExcelTable _table;
    protected HtmlTableExportSettings _tableExportSettings;
    internal HtmlTableExporterBase(HtmlTableExportSettings settings, ExcelTable table, ExcelRangeBase range);
    protected virtual void AddTableData(ExcelTable table, HTMLElement th, int col);
    private void LoadVisibleColumns();
    protected HTMLElement GenerateHtml();
    private void AddTableRows(HTMLElement htmlTable);
    private void AddHeaderRow(HTMLElement table);
    private void AddTotalRow(HTMLElement table);
}
internal abstract class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.AbstractHtmlExporter : object {
    internal static string TableClass;
    internal List`1<HtmlImage> _rangePictures;
    protected List`1<string> _dataTypes;
    protected ExporterContext _exporterContext;
    internal void SetExporterContext(ExporterContext context);
    protected void GetDataTypes(ExcelAddressBase adr, ExcelTable table);
    internal void LoadRangeImages(List`1<ExcelRangeBase> ranges);
    protected string GetCellText(ExcelRangeBase cell, HtmlExportSettings settings);
    protected string GetImageCellClassName(HtmlImage image, HtmlExportSettings settings, bool isTable);
    protected HtmlImage GetImage(int worksheetId, int row, int col);
}
internal abstract class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.CssExporterBase : AbstractHtmlExporter {
    internal HashSet`1<int> _addedToCssXsf;
    internal HashSet`1<int> _addedToCssDxf;
    internal static int OrderDefaultXsf;
    internal static int OrderDefaultDxf;
    protected HtmlExportSettings Settings;
    protected EPPlusReadOnlyList`1<ExcelRangeBase> _ranges;
    internal static string TableStyleClassPrefix;
    public CssExporterBase(HtmlExportSettings settings, ExcelRangeBase range);
    public CssExporterBase(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges);
    private static CssExporterBase();
    private void AddRange(ExcelRangeBase range);
    protected CssRuleCollection CreateRuleCollection(HtmlRangeExportSettings settings);
    protected CssRuleCollection CreateRuleCollection(HtmlTableExportSettings settings);
    protected void AddCssRulesToCollection(CssRangeRuleCollection cssTranslator, HtmlTableExportSettings tableSettings);
    protected void AddCellCss(CssRangeRuleCollection collection, ExcelRangeBase range, bool isTableExporter);
    private bool AddMergedCellsToCollection(ExcelRangeBase range, string ma, CellStoreEnumerator`1<ExcelValue> ce, StyleChecker sc, CssRangeRuleCollection collection);
    internal void AddConditionalFormattingsToCollection(string cellAddress, ExcelNamedStyleXml normalStyle, CssRangeRuleCollection cssTranslator);
    internal void AddIconSetToCollection(ExcelConditionalFormattingIconSetBase`1<T> iconSet, ExcelConditionalFormattingRule rule, CssRangeRuleCollection cssTranslator);
    internal List`1<QuadRangeItem`1<ExcelConditionalFormattingRule>> GetCFItemsAtAddress(string cellAddress);
    internal static CssTableRuleCollection CreateTableCssRules(ExcelTable table, HtmlTableExportSettings settings, List`1<string> datatypes);
    internal CssWriter GetTableCssWriter(Stream stream, ExcelTable table, HtmlTableExportSettings tableSettings);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.CssRangeExporterSync : CssExporterBase {
    private HtmlRangeExportSettings _settings;
    public CssRangeExporterSync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges);
    public CssRangeExporterSync(HtmlRangeExportSettings settings, ExcelRangeBase range);
    public string GetCssString();
    public void RenderCss(Stream stream);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.CssTableExporterSync : CssExporterBase {
    private ExcelTable _table;
    private HtmlTableExportSettings _tableSettings;
    public CssTableExporterSync(HtmlTableExportSettings settings, ExcelTable table);
    public string GetCssString();
    public void RenderCss(Stream stream);
}
internal abstract class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.HtmlExporterBaseInternal : AbstractHtmlExporter {
    protected List`1<int> _columns;
    protected HtmlExportSettings Settings;
    protected List`1<ExcelAddressBase> _mergedCells;
    protected EPPlusReadOnlyList`1<ExcelRangeBase> _ranges;
    private Nullable`1<bool> _isMultiSheet;
    protected bool IsMultiSheet { get; }
    public HtmlExporterBaseInternal(HtmlExportSettings settings, ExcelRangeBase range);
    public HtmlExporterBaseInternal(HtmlExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges);
    protected void SetColumnGroup(HTMLElement element, ExcelRangeBase _range, HtmlExportSettings settings, bool isMultiSheet);
    private HTMLElement GetColumnGroup(ExcelRangeBase _range, HtmlExportSettings settings, bool isMultiSheet);
    protected HTMLElement GetThead(ExcelRangeBase range, List`1<string> headers);
    private HTMLElement CreateThead();
    private HTMLElement CreateRow(ExcelRangeBase range, int row);
    protected virtual int GetHeaderRows(ExcelTable table);
    protected virtual void AddTableData(ExcelTable table, HTMLElement th, int col);
    protected HTMLElement GetTableBody(ExcelRangeBase range, int row, int endRow);
    protected void AddHyperlink(HTMLElement element, ExcelRangeBase cell, HtmlExportSettings settings);
    protected void AddImage(HTMLElement parent, HtmlExportSettings settings, HtmlImage image, object value);
    protected void LoadVisibleColumns(ExcelRangeBase range);
    private void AddRange(ExcelRangeBase range);
    protected void ValidateRangeIndex(int rangeIndex);
    protected void ValidateStream(Stream stream);
    internal bool HandleHiddenRow(EpplusHtmlAttribute attribute, ExcelWorksheet ws, HtmlExportSettings Settings, Int32& row);
    internal void AddRowHeightStyle(HTMLElement element, ExcelRangeBase range, int row, string styleClassPrefix, bool isMultiSheet);
    protected string GetPictureName(HtmlImage p);
    protected bool InMergeCellSpan(int row, int col);
    protected void SetColRowSpan(ExcelRangeBase range, HTMLElement element, ExcelRange cell);
    protected void GetDataTypes(ExcelRangeBase range, HtmlRangeExportSettings settings);
    protected bool get_IsMultiSheet();
    protected void AddTableAccessibilityAttributes(AccessibilitySettings settings, HTMLElement element);
    protected string GetTableId(int index, ExcelHtmlOverrideExportSettings overrideSettings);
    protected List`1<string> GetAdditionalClassNames(ExcelHtmlOverrideExportSettings overrideSettings);
    protected AccessibilitySettings GetAccessibilitySettings(ExcelHtmlOverrideExportSettings overrideSettings);
    protected void AddClassesAttributes(HTMLElement element, ExcelTable table, string tableId, List`1<string> additionalTableClassNames);
    internal void GetClassData(HTMLElement element, bool isTable, HtmlImage image, ExcelRangeBase cell, HtmlExportSettings settings, ExporterContext content, HTMLElement& valueElement, bool isHeader);
    public void AddTableDataFromCell(ExcelRangeBase cell, string dataType, HTMLElement element, HtmlExportSettings settings, bool addRowScope, HtmlImage image, ExporterContext content);
}
internal static class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.HtmlExportTableUtil : object {
    internal static string TableStyleClassPrefix;
    internal static string TableClass;
    internal static string GetClassName(string className, string optionalName);
    internal static string GetWorksheetClassName(string styleClassPrefix, string name, ExcelWorksheet ws, bool addWorksheetName);
    internal static string GetTableClasses(ExcelTable table);
    internal static void AddClassesAttributes(HTMLElement element, ExcelTable table, HtmlTableExportSettings settings);
}
internal abstract class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.HtmlRangeExporterBase : HtmlExporterBaseInternal {
    protected HtmlRangeExportSettings _settings;
    internal HtmlRangeExporterBase(HtmlRangeExportSettings settings, ExcelRangeBase range);
    internal HtmlRangeExporterBase(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges);
    protected HTMLElement GenerateHTML(int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    private void AddTableRows(HTMLElement htmlTable, ExcelRangeBase range);
    private void AddHeaderRow(ExcelRangeBase range, HTMLElement element, ExcelTable table, List`1<string> headers);
    protected virtual int GetHeaderRows(ExcelTable table);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.HtmlRangeExporterSync : HtmlRangeExporterBase {
    internal HtmlRangeExporterSync(HtmlRangeExportSettings settings, ExcelRangeBase range);
    internal HtmlRangeExporterSync(HtmlRangeExportSettings settings, EPPlusReadOnlyList`1<ExcelRangeBase> ranges);
    public string GetHtmlString();
    public string GetHtmlString(int rangeIndex);
    public string GetHtmlString(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    public string GetHtmlString(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public void RenderHtml(Stream stream);
    public void RenderHtml(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    public void RenderHtml(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public string GetSinglePage(string htmlDocument);
}
internal class OfficeOpenXml.Export.HtmlExport.Exporters.Internal.HtmlTableExporterSync : HtmlTableExporterBase {
    internal HtmlTableExporterSync(HtmlTableExportSettings settings, ExcelTable table);
    public string GetHtmlString();
    public void RenderHtml(Stream stream);
    public string GetSinglePage(string htmlDocument);
}
internal static class OfficeOpenXml.Export.HtmlExport.HtmlAttributes : object {
    public static string Class;
    public static string Id;
    public static string Target;
    public static string Href;
    private static HtmlAttributes();
}
internal class OfficeOpenXml.Export.HtmlExport.HtmlCollections.HTMLElement : object {
    internal List`1<EpplusHtmlAttribute> _attributes;
    internal List`1<HTMLElement> _childElements;
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVoidElement>k__BackingField;
    internal string ElementName { get; internal set; }
    internal string Content { get; internal set; }
    internal bool IsVoidElement { get; private set; }
    internal HTMLElement(string elementName);
    [CompilerGeneratedAttribute]
internal string get_ElementName();
    [CompilerGeneratedAttribute]
internal void set_ElementName(string value);
    [CompilerGeneratedAttribute]
internal string get_Content();
    [CompilerGeneratedAttribute]
internal void set_Content(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsVoidElement();
    [CompilerGeneratedAttribute]
private void set_IsVoidElement(bool value);
    public void AddAttribute(string attributeName, string attributeValue);
    public void AddChildElement(HTMLElement element);
}
internal class OfficeOpenXml.Export.HtmlExport.HtmlCollections.HtmlElementCollection : object {
    private List`1<HTMLElement> _elements;
    internal List`1<HTMLElement> Elements { get; }
    internal List`1<HTMLElement> get_Elements();
    [IteratorStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.HtmlCollections.HtmlElementCollection/<System-Collections-Generic-IEnumerable<OfficeOpenXml-Export-HtmlExport-HtmlCollections-HTMLElement>-GetEnumerator>d__4")]
private sealed virtual override IEnumerator`1<HTMLElement> System.Collections.Generic.IEnumerable<OfficeOpenXml.Export.HtmlExport.HtmlCollections.HTMLElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class OfficeOpenXml.Export.HtmlExport.HtmlElements : object {
    internal static HashSet`1<string> VoidElements;
    internal static HashSet`1<string> NoIndentElements;
    public static string Body;
    public static string Table;
    public static string Thead;
    public static string TFoot;
    public static string Tbody;
    public static string TableRow;
    public static string TableHeader;
    public static string TableData;
    public static string A;
    public static string Span;
    public static string ColGroup;
    public static string Img;
    private static HtmlElements();
}
internal static class OfficeOpenXml.Export.HtmlExport.HtmlExportImageUtil : object {
    internal static string GetPictureName(HtmlImage p);
}
public abstract class OfficeOpenXml.Export.HtmlExport.HtmlExportSettings : object {
    [CompilerGeneratedAttribute]
private string <TableId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Minify>k__BackingField;
    [CompilerGeneratedAttribute]
private eHiddenState <HiddenRows>k__BackingField;
    [CompilerGeneratedAttribute]
private eHtmlGeneralAlignmentHandling <HorizontalAlignmentWhenGeneral>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessibilitySettings <Accessibility>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AdditionalTableClassNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataValueAttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetColumnWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetRowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StyleClassPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CellStyleClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DxfStyleClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConditionalFormattingClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabarPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlPictureSettings <Pictures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCssClassNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HyperlinkTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private eHtmlRangeTableInclude <TableStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenderDataAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenderDataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenderConditionalFormattings>k__BackingField;
    public string TableId { get; public set; }
    public bool Minify { get; public set; }
    public eHiddenState HiddenRows { get; public set; }
    public eHtmlGeneralAlignmentHandling HorizontalAlignmentWhenGeneral { get; public set; }
    public AccessibilitySettings Accessibility { get; private set; }
    public List`1<string> AdditionalTableClassNames { get; protected internal set; }
    public string DataValueAttributeName { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool SetColumnWidth { get; public set; }
    public bool SetRowHeight { get; public set; }
    public string StyleClassPrefix { get; public set; }
    public string CellStyleClassName { get; public set; }
    public string DxfStyleClassName { get; public set; }
    public string ConditionalFormattingClassName { get; public set; }
    public string DatabarPrefix { get; public set; }
    public string IconPrefix { get; public set; }
    public HtmlPictureSettings Pictures { get; }
    public bool IncludeCssClassNames { get; public set; }
    public string HyperlinkTarget { get; public set; }
    public eHtmlRangeTableInclude TableStyle { get; public set; }
    public bool RenderDataAttributes { get; public set; }
    public bool RenderDataTypes { get; public set; }
    public bool RenderConditionalFormattings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableId();
    [CompilerGeneratedAttribute]
public void set_TableId(string value);
    [CompilerGeneratedAttribute]
public bool get_Minify();
    [CompilerGeneratedAttribute]
public void set_Minify(bool value);
    [CompilerGeneratedAttribute]
public eHiddenState get_HiddenRows();
    [CompilerGeneratedAttribute]
public void set_HiddenRows(eHiddenState value);
    [CompilerGeneratedAttribute]
public eHtmlGeneralAlignmentHandling get_HorizontalAlignmentWhenGeneral();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignmentWhenGeneral(eHtmlGeneralAlignmentHandling value);
    [CompilerGeneratedAttribute]
public AccessibilitySettings get_Accessibility();
    [CompilerGeneratedAttribute]
private void set_Accessibility(AccessibilitySettings value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AdditionalTableClassNames();
    [CompilerGeneratedAttribute]
protected internal void set_AdditionalTableClassNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_DataValueAttributeName();
    [CompilerGeneratedAttribute]
public void set_DataValueAttributeName(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_SetColumnWidth();
    [CompilerGeneratedAttribute]
public void set_SetColumnWidth(bool value);
    [CompilerGeneratedAttribute]
public bool get_SetRowHeight();
    [CompilerGeneratedAttribute]
public void set_SetRowHeight(bool value);
    [CompilerGeneratedAttribute]
public string get_StyleClassPrefix();
    [CompilerGeneratedAttribute]
public void set_StyleClassPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_CellStyleClassName();
    [CompilerGeneratedAttribute]
public void set_CellStyleClassName(string value);
    [CompilerGeneratedAttribute]
public string get_DxfStyleClassName();
    [CompilerGeneratedAttribute]
public void set_DxfStyleClassName(string value);
    [CompilerGeneratedAttribute]
public string get_ConditionalFormattingClassName();
    [CompilerGeneratedAttribute]
public void set_ConditionalFormattingClassName(string value);
    [CompilerGeneratedAttribute]
public string get_DatabarPrefix();
    [CompilerGeneratedAttribute]
public void set_DatabarPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_IconPrefix();
    [CompilerGeneratedAttribute]
public void set_IconPrefix(string value);
    [CompilerGeneratedAttribute]
public HtmlPictureSettings get_Pictures();
    [CompilerGeneratedAttribute]
public bool get_IncludeCssClassNames();
    [CompilerGeneratedAttribute]
public void set_IncludeCssClassNames(bool value);
    [CompilerGeneratedAttribute]
public string get_HyperlinkTarget();
    [CompilerGeneratedAttribute]
public void set_HyperlinkTarget(string value);
    [CompilerGeneratedAttribute]
public eHtmlRangeTableInclude get_TableStyle();
    [CompilerGeneratedAttribute]
public void set_TableStyle(eHtmlRangeTableInclude value);
    [CompilerGeneratedAttribute]
public bool get_RenderDataAttributes();
    [CompilerGeneratedAttribute]
public void set_RenderDataAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_RenderDataTypes();
    [CompilerGeneratedAttribute]
public void set_RenderDataTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_RenderConditionalFormattings();
    [CompilerGeneratedAttribute]
public void set_RenderConditionalFormattings(bool value);
}
internal class OfficeOpenXml.Export.HtmlExport.HtmlImage : object {
    [CompilerGeneratedAttribute]
private int <WorksheetId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPicture <Picture>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromRowOff>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToRowOff>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromColumnOff>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToColumnOff>k__BackingField;
    public int WorksheetId { get; public set; }
    public ExcelPicture Picture { get; public set; }
    public int FromRow { get; public set; }
    public int FromRowOff { get; public set; }
    public int ToRow { get; public set; }
    public int ToRowOff { get; public set; }
    public int FromColumn { get; public set; }
    public int FromColumnOff { get; public set; }
    public int ToColumn { get; public set; }
    public int ToColumnOff { get; public set; }
    [CompilerGeneratedAttribute]
public int get_WorksheetId();
    [CompilerGeneratedAttribute]
public void set_WorksheetId(int value);
    [CompilerGeneratedAttribute]
public ExcelPicture get_Picture();
    [CompilerGeneratedAttribute]
public void set_Picture(ExcelPicture value);
    [CompilerGeneratedAttribute]
public int get_FromRow();
    [CompilerGeneratedAttribute]
public void set_FromRow(int value);
    [CompilerGeneratedAttribute]
public int get_FromRowOff();
    [CompilerGeneratedAttribute]
public void set_FromRowOff(int value);
    [CompilerGeneratedAttribute]
public int get_ToRow();
    [CompilerGeneratedAttribute]
public void set_ToRow(int value);
    [CompilerGeneratedAttribute]
public int get_ToRowOff();
    [CompilerGeneratedAttribute]
public void set_ToRowOff(int value);
    [CompilerGeneratedAttribute]
public int get_FromColumn();
    [CompilerGeneratedAttribute]
public void set_FromColumn(int value);
    [CompilerGeneratedAttribute]
public int get_FromColumnOff();
    [CompilerGeneratedAttribute]
public void set_FromColumnOff(int value);
    [CompilerGeneratedAttribute]
public int get_ToColumn();
    [CompilerGeneratedAttribute]
public void set_ToColumn(int value);
    [CompilerGeneratedAttribute]
public int get_ToColumnOff();
    [CompilerGeneratedAttribute]
public void set_ToColumnOff(int value);
}
public class OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings : object {
    [CompilerGeneratedAttribute]
private ePictureInclude <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private ePicturePosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddMarginTop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddMarginLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepOriginalSize>k__BackingField;
    [CompilerGeneratedAttribute]
private PictureCssExclude <CssExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddNameAsId>k__BackingField;
    public ePictureInclude Include { get; public set; }
    public ePicturePosition Position { get; public set; }
    public bool AddMarginTop { get; public set; }
    public bool AddMarginLeft { get; public set; }
    public bool KeepOriginalSize { get; public set; }
    public PictureCssExclude CssExclude { get; }
    public bool AddNameAsId { get; public set; }
    [CompilerGeneratedAttribute]
public ePictureInclude get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(ePictureInclude value);
    [CompilerGeneratedAttribute]
public ePicturePosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(ePicturePosition value);
    [CompilerGeneratedAttribute]
public bool get_AddMarginTop();
    [CompilerGeneratedAttribute]
public void set_AddMarginTop(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddMarginLeft();
    [CompilerGeneratedAttribute]
public void set_AddMarginLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepOriginalSize();
    [CompilerGeneratedAttribute]
public void set_KeepOriginalSize(bool value);
    [CompilerGeneratedAttribute]
public PictureCssExclude get_CssExclude();
    [CompilerGeneratedAttribute]
public bool get_AddNameAsId();
    [CompilerGeneratedAttribute]
public void set_AddNameAsId(bool value);
    public void ResetToDefault();
    public void Copy(HtmlPictureSettings copy);
}
public class OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings : HtmlExportSettings {
    private int _headerRows;
    [CompilerGeneratedAttribute]
private List`1<string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private CssRangeExportSettings <Css>k__BackingField;
    public int HeaderRows { get; public set; }
    public List`1<string> Headers { get; }
    public CssRangeExportSettings Css { get; }
    public int get_HeaderRows();
    public void set_HeaderRows(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Headers();
    [CompilerGeneratedAttribute]
public CssRangeExportSettings get_Css();
    public void ResetToDefault();
    public void Copy(HtmlRangeExportSettings copy);
}
internal static class OfficeOpenXml.Export.HtmlExport.HtmlRawDataProvider : object {
    private static DateTime JsBaseDate;
    private static HtmlRawDataProvider();
    internal static string GetHtmlDataTypeFromValue(object value);
    internal static string GetRawValue(object value);
    internal static string GetRawValue(object value, string jsDataType);
}
internal static class OfficeOpenXml.Export.HtmlExport.HtmlRichText : object {
    internal static void GetRichTextStyle(ExcelRichText rt, StringBuilder sb);
}
internal class OfficeOpenXml.Export.HtmlExport.HtmlWriter : BaseWriter {
    internal HtmlWriter(Stream stream, Encoding encoding);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.HtmlWriter/<RenderBeginTagAsync>d__0")]
public Task RenderBeginTagAsync(string elementName, List`1<EpplusHtmlAttribute> attributes, bool closeElement);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.HtmlWriter/<RenderEndTagAsync>d__1")]
public Task RenderEndTagAsync(string elementName);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.HtmlWriter/<RenderHTMLElementAsync>d__2")]
public Task RenderHTMLElementAsync(HTMLElement element, bool minify);
    public void RenderEndTag(string elementName);
    public void RenderBeginTag(string elementName, List`1<EpplusHtmlAttribute> attributes, bool closeElement);
    public void RenderHTMLElement(HTMLElement element, bool minify);
}
public interface OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter {
    public HtmlRangeExportSettings Settings { get; }
    public EPPlusReadOnlyList`1<ExcelRangeBase> Ranges { get; }
    public abstract virtual HtmlRangeExportSettings get_Settings();
    public abstract virtual EPPlusReadOnlyList`1<ExcelRangeBase> get_Ranges();
    public abstract virtual string GetHtmlString();
    public abstract virtual string GetHtmlString(int rangeIndex);
    public abstract virtual string GetHtmlString(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    public abstract virtual string GetHtmlString(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public abstract virtual void RenderHtml(Stream stream);
    public abstract virtual void RenderHtml(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    public abstract virtual void RenderHtml(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public abstract virtual string GetSinglePage(string htmlDocument);
    public abstract virtual string GetCssString();
    public abstract virtual void RenderCss(Stream stream);
    public abstract virtual Task`1<string> GetHtmlStringAsync();
    public abstract virtual Task`1<string> GetHtmlStringAsync(int rangeIndex, ExcelHtmlOverrideExportSettings settings);
    public abstract virtual Task`1<string> GetHtmlStringAsync(int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public abstract virtual Task RenderHtmlAsync(Stream stream);
    public abstract virtual Task RenderHtmlAsync(Stream stream, int rangeIndex, ExcelHtmlOverrideExportSettings overrideSettings);
    public abstract virtual Task RenderHtmlAsync(Stream stream, int rangeIndex, Action`1<ExcelHtmlOverrideExportSettings> config);
    public abstract virtual Task`1<string> GetSinglePageAsync(string htmlDocument);
    public abstract virtual Task`1<string> GetCssStringAsync();
    public abstract virtual Task RenderCssAsync(Stream stream);
}
public interface OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter {
    public HtmlTableExportSettings Settings { get; }
    public abstract virtual HtmlTableExportSettings get_Settings();
    public abstract virtual string GetHtmlString();
    public abstract virtual void RenderHtml(Stream stream);
    public abstract virtual string GetSinglePage(string htmlDocument);
    public abstract virtual string GetCssString();
    public abstract virtual void RenderCss(Stream stream);
    public abstract virtual Task`1<string> GetHtmlStringAsync();
    public abstract virtual Task RenderHtmlAsync(Stream stream);
    public abstract virtual Task`1<string> GetSinglePageAsync(string htmlDocument);
    public abstract virtual Task`1<string> GetCssStringAsync();
    public abstract virtual Task RenderCssAsync(Stream stream);
}
internal static class OfficeOpenXml.Export.HtmlExport.Parsers.AttributeTranslator : object {
    internal static bool HasStyle(ExcelXfs xfs);
    internal static string GetStyleKey(ExcelXfs xfs);
    internal static string GetClassAttributeFromStyle(ExcelRangeBase cell, bool isHeader, HtmlExportSettings settings, string additionalClasses, ExporterContext context);
    internal static List`1<string> GetConditionalFormattings(ExcelRangeBase cell, HtmlExportSettings settings, ExporterContext context, String& cls);
    internal static string GetIconName(ExcelConditionalFormattingIconSetBase`1<T> set, ExcelRangeBase cell);
    internal static string AddIconClasses(string iconName, string prefix);
}
internal class OfficeOpenXml.Export.HtmlExport.PatternFills : object {
    internal static string Dott75;
    internal static string Dott50;
    internal static string Dott25;
    internal static string Dott12_5;
    internal static string Dott6_25;
    internal static string HorizontalStripe;
    internal static string VerticalStripe;
    internal static string ThinHorizontalStripe;
    internal static string ThinVerticalStripe;
    internal static string ReverseDiagonalStripe;
    internal static string DiagonalStripe;
    internal static string ThinReverseDiagonalStripe;
    internal static string ThinDiagonalStripe;
    internal static string DiagonalCrosshatch;
    internal static string ThickDiagonalCrosshatch;
    internal static string ThinHorizontalCrosshatch;
    internal static string ThinDiagonalCrosshatch;
    internal static string GetPatternSvg(ExcelFillStyle patternType, string backgroundColor, string patternColor);
    internal static string GetPatternSvgConvertedOnly(ExcelFillStyle patternType, string backgroundColor, string patternColor);
    private static string GetPatternSvgUnConvertedString(ExcelFillStyle patternType, string backgroundColor, string patternColor);
}
public class OfficeOpenXml.Export.HtmlExport.PictureCssExclude : object {
    [CompilerGeneratedAttribute]
private bool <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Alignment>k__BackingField;
    public bool Border { get; public set; }
    public bool Alignment { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Border();
    [CompilerGeneratedAttribute]
public void set_Border(bool value);
    [CompilerGeneratedAttribute]
public bool get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(bool value);
    public void ResetToDefault();
    public void Copy(PictureCssExclude copy);
}
public class OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings : HtmlExportSettings {
    [CompilerGeneratedAttribute]
private CssTableExportSettings <Css>k__BackingField;
    public CssTableExportSettings Css { get; }
    [CompilerGeneratedAttribute]
public CssTableExportSettings get_Css();
    public void ResetToDefault();
    public void Copy(HtmlTableExportSettings copy);
    public void Configure(Action`1<HtmlTableExportSettings> settings);
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCache : Dictionary`2<string, int> {
    internal bool IsAdded(string key, Int32& id);
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.BorderDxf : object {
    private BorderItemDxf _top;
    private BorderItemDxf _bottom;
    private BorderItemDxf _left;
    private BorderItemDxf _right;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    public bool HasValue { get; }
    public IBorderItem Top { get; }
    public IBorderItem Bottom { get; }
    public IBorderItem Left { get; }
    public IBorderItem Right { get; }
    internal BorderDxf(ExcelDxfBorderBase border);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasValue();
    public sealed virtual IBorderItem get_Top();
    public sealed virtual IBorderItem get_Bottom();
    public sealed virtual IBorderItem get_Left();
    public sealed virtual IBorderItem get_Right();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.BorderItemDxf : object {
    private ExcelDxfBorderItem _border;
    private IStyleColor _color;
    public ExcelBorderStyle Style { get; }
    public IStyleColor Color { get; }
    public BorderItemDxf(ExcelDxfBorderItem border);
    public sealed virtual ExcelBorderStyle get_Style();
    public sealed virtual IStyleColor get_Color();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.BorderItemXml : object {
    private ExcelBorderItemXml _border;
    private IStyleColor _color;
    public ExcelBorderStyle Style { get; }
    public IStyleColor Color { get; }
    public BorderItemXml(ExcelBorderItemXml border);
    public sealed virtual ExcelBorderStyle get_Style();
    public sealed virtual IStyleColor get_Color();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.BorderXml : object {
    private BorderItemXml _top;
    private BorderItemXml _bottom;
    private BorderItemXml _left;
    private BorderItemXml _right;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    public bool HasValue { get; }
    public IBorderItem Top { get; }
    public IBorderItem Bottom { get; }
    public IBorderItem Left { get; }
    public IBorderItem Right { get; }
    internal BorderXml(ExcelBorderXml border);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasValue();
    public sealed virtual IBorderItem get_Top();
    public sealed virtual IBorderItem get_Bottom();
    public sealed virtual IBorderItem get_Left();
    public sealed virtual IBorderItem get_Right();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.FillDxf : object {
    private ExcelDxfFill _fill;
    public ExcelFillStyle PatternType { get; }
    public bool IsGradient { get; }
    public double Degree { get; }
    public double Right { get; }
    public double Bottom { get; }
    public bool IsLinear { get; }
    public bool HasValue { get; }
    public FillDxf(ExcelDxfFill fill);
    public sealed virtual ExcelFillStyle get_PatternType();
    public sealed virtual bool get_IsGradient();
    public sealed virtual double get_Degree();
    public sealed virtual double get_Right();
    public sealed virtual double get_Bottom();
    public sealed virtual bool get_IsLinear();
    public sealed virtual string GetBackgroundColor(ExcelTheme theme);
    public sealed virtual string GetPatternColor(ExcelTheme theme);
    public sealed virtual string GetGradientColor1(ExcelTheme theme);
    public sealed virtual string GetGradientColor2(ExcelTheme theme);
    public sealed virtual bool get_HasValue();
    protected string GetColor(ExcelDxfColor c, ExcelTheme theme);
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.FillXml : object {
    private ExcelFillXml _fill;
    public ExcelFillStyle PatternType { get; }
    public bool IsGradient { get; }
    public double Degree { get; }
    public double Right { get; }
    public double Bottom { get; }
    public bool IsLinear { get; }
    public bool HasValue { get; }
    internal FillXml(ExcelFillXml fill);
    public sealed virtual ExcelFillStyle get_PatternType();
    public sealed virtual bool get_IsGradient();
    public sealed virtual double get_Degree();
    public sealed virtual double get_Right();
    public sealed virtual double get_Bottom();
    public sealed virtual bool get_IsLinear();
    public sealed virtual bool get_HasValue();
    public sealed virtual string GetBackgroundColor(ExcelTheme theme);
    public sealed virtual string GetPatternColor(ExcelTheme theme);
    public sealed virtual string GetGradientColor1(ExcelTheme theme);
    public sealed virtual string GetGradientColor2(ExcelTheme theme);
    internal static string GetColor(ExcelColorXml c, ExcelTheme theme);
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.FontDxf : object {
    private ExcelDxfFontBase _font;
    private IStyleColor _color;
    public string Name { get; }
    public float Size { get; }
    public IStyleColor Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public bool Strike { get; }
    public ExcelUnderLineType UnderLineType { get; }
    public bool HasValue { get; }
    public FontDxf(ExcelDxfFontBase font);
    public sealed virtual string get_Name();
    public sealed virtual float get_Size();
    public sealed virtual IStyleColor get_Color();
    public sealed virtual bool get_Bold();
    public sealed virtual bool get_Italic();
    public sealed virtual bool get_Strike();
    public sealed virtual ExcelUnderLineType get_UnderLineType();
    public sealed virtual bool get_HasValue();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.FontXml : object {
    private ExcelFontXml _font;
    private IStyleColor _color;
    public string Name { get; }
    public float Size { get; }
    public IStyleColor Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public bool Strike { get; }
    public ExcelUnderLineType UnderLineType { get; }
    public bool HasValue { get; }
    public FontXml(ExcelFontXml font);
    public sealed virtual string get_Name();
    public sealed virtual float get_Size();
    public sealed virtual IStyleColor get_Color();
    public sealed virtual bool get_Bold();
    public sealed virtual bool get_Italic();
    public sealed virtual bool get_Strike();
    public sealed virtual ExcelUnderLineType get_UnderLineType();
    public sealed virtual bool get_HasValue();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleColorDxf : object {
    private ExcelDxfColor _color;
    public bool Auto { get; }
    public int Indexed { get; }
    public string Rgb { get; }
    public Nullable`1<eThemeSchemeColor> Theme { get; }
    public double Tint { get; }
    public bool Exists { get; }
    public StyleColorDxf(ExcelDxfColor color);
    public sealed virtual bool get_Auto();
    public sealed virtual int get_Indexed();
    public sealed virtual string get_Rgb();
    public sealed virtual Nullable`1<eThemeSchemeColor> get_Theme();
    public sealed virtual double get_Tint();
    public sealed virtual bool get_Exists();
    public sealed virtual bool AreColorEqual(IStyleColor color);
    public sealed virtual string GetColor(ExcelTheme theme);
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleColorNormal : object {
    private ExcelColor _color;
    public bool Exists { get; }
    public bool Auto { get; }
    public int Indexed { get; }
    public double Tint { get; }
    public Nullable`1<eThemeSchemeColor> Theme { get; }
    public string Rgb { get; }
    public StyleColorNormal(ExcelColor color);
    public sealed virtual bool get_Exists();
    public sealed virtual bool get_Auto();
    public sealed virtual int get_Indexed();
    public sealed virtual double get_Tint();
    public sealed virtual Nullable`1<eThemeSchemeColor> get_Theme();
    public sealed virtual string get_Rgb();
    public sealed virtual bool AreColorEqual(IStyleColor color);
    public sealed virtual string GetColor(ExcelTheme theme);
}
internal static class OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleColorShared : object {
    public static bool AreColorEqual(IStyleColor c1, IStyleColor c2);
    public static string GetColor(IStyleColor color, ExcelTheme theme);
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleColorXml : object {
    private ExcelColorXml _color;
    public bool Exists { get; }
    public bool Auto { get; }
    public int Indexed { get; }
    public double Tint { get; }
    public Nullable`1<eThemeSchemeColor> Theme { get; }
    public string Rgb { get; }
    public StyleColorXml(ExcelColorXml color);
    public sealed virtual bool get_Exists();
    public sealed virtual bool get_Auto();
    public sealed virtual int get_Indexed();
    public sealed virtual double get_Tint();
    public sealed virtual Nullable`1<eThemeSchemeColor> get_Theme();
    public sealed virtual string get_Rgb();
    public sealed virtual bool AreColorEqual(IStyleColor color);
    public sealed virtual string GetColor(ExcelTheme theme);
}
public interface OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleContracts.IBorder {
    internal bool HasValue { get; }
    internal IBorderItem Top { get; }
    internal IBorderItem Bottom { get; }
    internal IBorderItem Left { get; }
    internal IBorderItem Right { get; }
    internal abstract virtual bool get_HasValue();
    internal abstract virtual IBorderItem get_Top();
    internal abstract virtual IBorderItem get_Bottom();
    internal abstract virtual IBorderItem get_Left();
    internal abstract virtual IBorderItem get_Right();
}
[NullableContextAttribute("2")]
public interface OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleContracts.IBorderItem {
    internal ExcelBorderStyle Style { get; }
    internal IStyleColor Color { get; }
    internal abstract virtual ExcelBorderStyle get_Style();
    internal abstract virtual IStyleColor get_Color();
}
public interface OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleContracts.IFill {
    internal double Degree { get; }
    internal double Right { get; }
    internal double Bottom { get; }
    internal bool IsLinear { get; }
    internal bool IsGradient { get; }
    internal bool HasValue { get; }
    internal ExcelFillStyle PatternType { get; }
    internal abstract virtual double get_Degree();
    internal abstract virtual double get_Right();
    internal abstract virtual double get_Bottom();
    internal abstract virtual bool get_IsLinear();
    internal abstract virtual bool get_IsGradient();
    internal abstract virtual bool get_HasValue();
    internal abstract virtual ExcelFillStyle get_PatternType();
    internal abstract virtual string GetBackgroundColor(ExcelTheme theme);
    internal abstract virtual string GetPatternColor(ExcelTheme theme);
    internal abstract virtual string GetGradientColor1(ExcelTheme theme);
    internal abstract virtual string GetGradientColor2(ExcelTheme theme);
}
public interface OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleContracts.IFont {
    internal string Name { get; }
    internal float Size { get; }
    internal IStyleColor Color { get; }
    internal bool HasValue { get; }
    internal bool Bold { get; }
    internal bool Italic { get; }
    internal bool Strike { get; }
    internal ExcelUnderLineType UnderLineType { get; }
    internal abstract virtual string get_Name();
    internal abstract virtual float get_Size();
    internal abstract virtual IStyleColor get_Color();
    internal abstract virtual bool get_HasValue();
    internal abstract virtual bool get_Bold();
    internal abstract virtual bool get_Italic();
    internal abstract virtual bool get_Strike();
    internal abstract virtual ExcelUnderLineType get_UnderLineType();
}
public interface OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleContracts.IStyleColor {
    internal bool Exists { get; }
    internal bool Auto { get; }
    internal string Rgb { get; }
    internal int Indexed { get; }
    internal double Tint { get; }
    internal Nullable`1<eThemeSchemeColor> Theme { get; }
    internal abstract virtual bool get_Exists();
    internal abstract virtual bool get_Auto();
    internal abstract virtual string get_Rgb();
    internal abstract virtual int get_Indexed();
    internal abstract virtual double get_Tint();
    internal abstract virtual Nullable`1<eThemeSchemeColor> get_Theme();
    internal abstract virtual bool AreColorEqual(IStyleColor color);
    internal abstract virtual string GetColor(ExcelTheme theme);
}
public interface OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleContracts.IStyleExport {
    internal string StyleKey { get; }
    internal bool HasStyle { get; }
    internal IFill Fill { get; }
    internal IFont Font { get; }
    internal IBorder Border { get; }
    internal abstract virtual string get_StyleKey();
    internal abstract virtual bool get_HasStyle();
    internal abstract virtual IFill get_Fill();
    internal abstract virtual IFont get_Font();
    internal abstract virtual IBorder get_Border();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleDxf : object {
    private ExcelDxfStyleConditionalFormatting _style;
    [CompilerGeneratedAttribute]
private IFill <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private IFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private IBorder <Border>k__BackingField;
    public bool HasStyle { get; }
    public string StyleKey { get; }
    public IFill Fill { get; }
    public IFont Font { get; }
    public IBorder Border { get; }
    public StyleDxf(ExcelDxfStyleConditionalFormatting style);
    public StyleDxf(ExcelDxfStyleLimitedFont style);
    public sealed virtual bool get_HasStyle();
    public sealed virtual string get_StyleKey();
    [CompilerGeneratedAttribute]
public sealed virtual IFill get_Fill();
    [CompilerGeneratedAttribute]
public sealed virtual IFont get_Font();
    [CompilerGeneratedAttribute]
public sealed virtual IBorder get_Border();
}
internal class OfficeOpenXml.Export.HtmlExport.StyleCollectors.StyleXml : object {
    internal ExcelXfs _style;
    [CompilerGeneratedAttribute]
private IFill <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private IBorder <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private IFont <Font>k__BackingField;
    public string StyleKey { get; }
    public bool HasStyle { get; }
    public IFill Fill { get; }
    public IBorder Border { get; }
    public IFont Font { get; }
    public StyleXml(ExcelXfs style);
    public sealed virtual string get_StyleKey();
    public sealed virtual bool get_HasStyle();
    [CompilerGeneratedAttribute]
public sealed virtual IFill get_Fill();
    [CompilerGeneratedAttribute]
public sealed virtual IBorder get_Border();
    [CompilerGeneratedAttribute]
public sealed virtual IFont get_Font();
    internal string GetStyleKey();
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssBorderTranslator : TranslatorBase {
    private IBorderItem _top;
    private IBorderItem _bottom;
    private IBorderItem _left;
    private IBorderItem _right;
    private ExcelTheme _theme;
    internal CssBorderTranslator(IBorder border);
    internal CssBorderTranslator(IBorderItem top, IBorderItem bottom, IBorderItem left, IBorderItem right);
    internal CssBorderTranslator(IBorder topLeft, IBorder bottom, IBorder right);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
    private void WriteBorderItem(IBorderItem bi, string suffix);
    protected static string GetBorderItemLine(ExcelBorderStyle style, string suffix);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssFillTranslator : TranslatorBase {
    private ExcelTheme _theme;
    private IFill _fill;
    internal CssFillTranslator(IFill fill);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
    private void AddGradient();
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssFontTranslator : TranslatorBase {
    private IFont _f;
    private ExcelFont _nf;
    internal CssFontTranslator(IFont f, ExcelFont nf);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssImageAlignmentTranslator : TranslatorBase {
    private HtmlPictureSettings _picSettings;
    internal CssImageAlignmentTranslator(HtmlPictureSettings picSettings);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssImagePropertiesTranslator : TranslatorBase {
    private double _width;
    private double _height;
    private ExcelImageInfo _bounds;
    private ExcelDrawingBorder _border;
    internal CssImagePropertiesTranslator(HtmlImage image);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
    private string GetDrawingBorder();
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssImageTranslator : TranslatorBase {
    private HtmlImage _p;
    private string _encodedImage;
    internal Nullable`1<ePictureType> type;
    public CssImageTranslator(HtmlImage p);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
    private object GetContentType(ePictureType type);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssTableTextFormatTranslator : TranslatorBase {
    protected ExcelHorizontalAlignment _horizontalAlignment;
    protected ExcelVerticalAlignment _verticalAlignment;
    protected Nullable`1<bool> _applyAlignment;
    private bool _rightDefault;
    internal CssTableTextFormatTranslator(StyleXml xfs, bool rightDefault);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
    protected string GetVerticalAlignment();
    protected string GetHorizontalAlignment();
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssTableTranslator : TranslatorBase {
    private ExcelNamedStyleXml _ns;
    public CssTableTranslator(ExcelNamedStyleXml ns);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssTextFormatTranslator : CssTableTextFormatTranslator {
    private bool _wrapText;
    private int _indent;
    private int _textRotation;
    private bool _rightDefault;
    internal CssTextFormatTranslator(StyleXml xfs);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.CssVerticalHorizontalBorderTranslator : TranslatorBase {
    private ExcelDxfBorderBase _border;
    private ExcelTheme _theme;
    public CssVerticalHorizontalBorderTranslator(ExcelDxfBorderBase border);
    internal virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
    private void WriteBorderItem(ExcelDxfBorderItem bi, string suffix);
    protected static string GetBorderItemLine(ExcelBorderStyle style, string suffix);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.FontDeclarationRules : object {
    private bool _nfName;
    private bool _nfSize;
    private bool _nfColor;
    private bool _nfBold;
    private bool _nfItalic;
    private bool _nfStrike;
    private bool _nfUnderline;
    private IFont _f;
    private ExcelFont _nf;
    private eFontExclude _fontExclude;
    public bool HasFamily { get; }
    public bool HasSize { get; }
    public bool HasColor { get; }
    public bool HasBold { get; }
    public bool HasItalic { get; }
    public bool HasStrike { get; }
    public bool HasUnderline { get; }
    internal FontDeclarationRules(IFont f, ExcelFont nf, TranslatorContext context);
    public bool get_HasFamily();
    public bool get_HasSize();
    public bool get_HasColor();
    public bool get_HasBold();
    public bool get_HasItalic();
    public bool get_HasStrike();
    public bool get_HasUnderline();
}
internal static class OfficeOpenXml.Export.HtmlExport.Translators.ImageEncoder : object {
    internal static string EncodeImage(HtmlImage p, Nullable`1& type);
}
internal abstract class OfficeOpenXml.Export.HtmlExport.Translators.TranslatorBase : object {
    protected List`1<Declaration> declarations;
    internal abstract virtual List`1<Declaration> GenerateDeclarationList(TranslatorContext context);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Translators.TranslatorBase/<GenerateDeclarationListAsync>d__3")]
internal Task`1<List`1<Declaration>> GenerateDeclarationListAsync(TranslatorContext context);
    protected void AddDeclaration(string name, String[] values);
    internal static string GetColor(ExcelColorXml c, ExcelTheme theme);
    protected string GetColor(ExcelDxfColor c, ExcelTheme theme);
    internal static bool AreColorEqual(ExcelColorXml c1, ExcelColor c2);
}
internal class OfficeOpenXml.Export.HtmlExport.Translators.TranslatorContext : object {
    internal ExcelTheme Theme;
    internal float IndentValue;
    internal string IndentUnit;
    internal CssExclude Exclude;
    internal CssExportSettings Settings;
    internal HtmlPictureSettings Pictures;
    private TranslatorBase strategy;
    internal bool SharedIconSetRuleAdded;
    internal bool SharedDatabarRulesAdded;
    internal HashSet`1<eExcelconditionalFormattingCustomIcon> AddedIcons;
    public TranslatorContext(HtmlRangeExportSettings settings);
    public TranslatorContext(HtmlTableExportSettings settings, CssExclude exclude);
    public void SetTranslator(TranslatorBase concreteStrategy);
    public void AddDeclarations(CssRule rule);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Translators.TranslatorContext/<AddDeclarationsAsync>d__14")]
public Task AddDeclarationsAsync(CssRule rule);
}
internal abstract class OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter : object {
    protected Stream _stream;
    protected StreamWriter _writer;
    protected static string IndentWhiteSpace;
    protected bool _newLine;
    protected internal HashSet`1<string> _images;
    [CompilerGeneratedAttribute]
private int <Indent>k__BackingField;
    internal int Indent { get; internal set; }
    internal BaseWriter(Stream stream, Encoding encoding);
    internal BaseWriter(Stream stream);
    public BaseWriter(StreamWriter writer);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<WriteLineAsync>d__0")]
public Task WriteLineAsync();
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<WriteAsync>d__1")]
public Task WriteAsync(string text);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<WriteIndentAsync>d__2")]
protected internal Task WriteIndentAsync();
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<ApplyFormatAsync>d__3")]
internal Task ApplyFormatAsync(bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<ApplyFormatIncreaseIndentAsync>d__4")]
internal Task ApplyFormatIncreaseIndentAsync(bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<ApplyFormatDecreaseIndentAsync>d__5")]
internal Task ApplyFormatDecreaseIndentAsync(bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<WriteClassAsync>d__6")]
internal Task WriteClassAsync(string value, bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<WriteClassEndAsync>d__7")]
internal Task WriteClassEndAsync(bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.BaseWriter/<WriteCssItemAsync>d__8")]
internal Task WriteCssItemAsync(string value, bool minify);
    [CompilerGeneratedAttribute]
internal int get_Indent();
    [CompilerGeneratedAttribute]
internal void set_Indent(int value);
    public void WriteLine();
    public void Write(string text);
    protected internal void WriteIndent();
    internal void ApplyFormat(bool minify);
    internal void ApplyFormatIncreaseIndent(bool minify);
    internal void ApplyFormatDecreaseIndent(bool minify);
    internal void WriteClass(string value, bool minify);
    internal void WriteClassEnd(bool minify);
}
internal class OfficeOpenXml.Export.HtmlExport.Writers.CssWriter : BaseWriter {
    internal CssWriter(StreamWriter writer);
    internal CssWriter(Stream stream);
    internal CssWriter(Stream stream, Encoding encoding);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.CssWriter/<WritePropertyDeclarationAsync>d__0")]
internal Task WritePropertyDeclarationAsync(Declaration declaration, bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.CssWriter/<WriteRuleAsync>d__1")]
internal Task WriteRuleAsync(CssRule rule, bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.CssWriter/<WriteSelectorOpeningAsync>d__2")]
internal Task WriteSelectorOpeningAsync(string selector, bool minify);
    [AsyncStateMachineAttribute("OfficeOpenXml.Export.HtmlExport.Writers.CssWriter/<WriteAndClearFlushAsync>d__3")]
internal Task WriteAndClearFlushAsync(CssRuleCollection collection, bool minify);
    internal void WriteCssItem(string value, bool minify);
    internal void WriteSelectorOpening(string selector, bool minify);
    internal void WritePropertyDeclaration(Declaration declaration, bool minify);
    internal void WriteRule(CssRule rule, bool minify);
    internal void WriteAndClearFlush(CssRuleCollection collection, bool minify);
}
public class OfficeOpenXml.Export.ToCollection.Exceptions.EPPlusDataTypeConvertionException : Exception {
    internal EPPlusDataTypeConvertionException(string msg, Exception innerException);
}
internal class OfficeOpenXml.Export.ToCollection.MappedProperty : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    internal int Index { get; internal set; }
    internal PropertyInfo PropertyInfo { get; internal set; }
    public MappedProperty(int ix, PropertyInfo property);
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
internal PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
internal void set_PropertyInfo(PropertyInfo value);
}
internal class OfficeOpenXml.Export.ToCollection.ToCollectionAutomap : object {
    internal static List`1<MappedProperty> GetAutomapList(List`1<string> h);
    private static string RemoveWS(string v);
}
public enum OfficeOpenXml.Export.ToCollection.ToCollectionConversionFailureStrategy : Enum {
    public int value__;
    public static ToCollectionConversionFailureStrategy Exception;
    public static ToCollectionConversionFailureStrategy SetDefaultValue;
}
internal class OfficeOpenXml.Export.ToCollection.ToCollectionRange : object {
    internal static List`1<string> GetRangeHeaders(ExcelRangeBase range, String[] headers, Nullable`1<int> headerRow, ToCollectionRangeOptions options);
    internal static List`1<T> ToCollection(ExcelRangeBase range, Func`2<ToCollectionRow, T> setRow, ToCollectionRangeOptions options);
    internal static List`1<T> ToCollection(ExcelRangeBase range, ToCollectionRangeOptions options);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Export.ToCollection.ToCollectionRow : object {
    private ExcelWorkbook _workbook;
    private ToCollectionConversionFailureStrategy _failureStrategy;
    internal Dictionary`2<string, int> _headers;
    [CompilerGeneratedAttribute]
private List`1<string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExcelValue> <_cellValues>k__BackingField;
    private List`1<MappedProperty> _members;
    public List`1<string> Headers { get; }
    internal List`1<ExcelValue> _cellValues { get; internal set; }
    public object Item { get; }
    public object Item { get; }
    internal ToCollectionRow(List`1<string> headers, ExcelWorkbook workbook, ToCollectionConversionFailureStrategy failureStrategy);
    [CompilerGeneratedAttribute]
public List`1<string> get_Headers();
    [CompilerGeneratedAttribute]
internal List`1<ExcelValue> get__cellValues();
    [CompilerGeneratedAttribute]
internal void set__cellValues(List`1<ExcelValue> value);
    public object get_Item(int index);
    public object get_Item(string columnName);
    public T GetValue(int index);
    public T GetValue(string columnName);
    public string GetText(int index);
    public string GetText(string columnName);
    public void Automap(T item);
}
public class OfficeOpenXml.Export.ToDataTable.DataColumnMapping : object {
    [CompilerGeneratedAttribute]
private DataColumn <DataColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZeroBasedColumnIndexInRange>k__BackingField;
    private string _dataColumnName;
    private Type _dataColumnType;
    private bool _allowNull;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <TransformCellValue>k__BackingField;
    internal bool HasDataColumn { get; }
    public DataColumn DataColumn { get; private set; }
    public int ZeroBasedColumnIndexInRange { get; public set; }
    public string DataColumnName { get; public set; }
    public Type ColumnDataType { get; public set; }
    public bool AllowNull { get; public set; }
    public Func`2<object, object> TransformCellValue { get; public set; }
    internal DataColumnMapping(DataColumn dataColumn);
    internal bool get_HasDataColumn();
    [CompilerGeneratedAttribute]
public DataColumn get_DataColumn();
    [CompilerGeneratedAttribute]
private void set_DataColumn(DataColumn value);
    [CompilerGeneratedAttribute]
public int get_ZeroBasedColumnIndexInRange();
    [CompilerGeneratedAttribute]
public void set_ZeroBasedColumnIndexInRange(int value);
    public string get_DataColumnName();
    public void set_DataColumnName(string value);
    public Type get_ColumnDataType();
    public void set_ColumnDataType(Type value);
    public bool get_AllowNull();
    public void set_AllowNull(bool value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_TransformCellValue();
    [CompilerGeneratedAttribute]
public void set_TransformCellValue(Func`2<object, object> value);
    internal void Validate();
}
public class OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection : List`1<DataColumnMapping> {
    private Dictionary`2<int, DataColumnMapping> _mappingIndexes;
    internal void Validate();
    public void Add(int zeroBasedIndexInRange, DataColumn dataColumn);
    public void Add(int zeroBasedIndexInRange, DataColumn dataColumn, Func`2<object, object> transformCellValueFunc);
    public void Add(int zeroBasedIndexInRange, string columnName);
    public void Add(int zeroBasedIndexInRange, string columnName, bool allowNull);
    public void Add(int zeroBasedIndexInRange, string columnName, Func`2<object, object> transformCellValueFunc);
    public void Add(int zeroBasedIndexInRange, string columnName, Type columnDataType);
    public void Add(int zeroBasedIndexInRange, string columnName, Type columnDataType, bool allowNull);
    public void Add(int zeroBasedIndexInRange, string columnName, Type columnDataType, bool allowNull, Func`2<object, object> transformCellValueFunc);
    internal DataColumnMapping GetByRangeIndex(int index);
    internal bool ContainsMapping(int index);
}
internal class OfficeOpenXml.Export.ToDataTable.DataTableBuilder : object {
    private ToDataTableOptions _options;
    private ExcelRangeBase _range;
    private ExcelWorksheet _sheet;
    private DataTable _dataTable;
    public DataTableBuilder(ToDataTableOptions options, ExcelRangeBase range);
    public DataTableBuilder(ToDataTableOptions options, ExcelRangeBase range, DataTable dataTable);
    internal DataTable Build();
    private void HandlePrimaryKeys(DataTable dataTable);
    private string GetColumnName(string name);
}
internal class OfficeOpenXml.Export.ToDataTable.DataTableExporter : object {
    private ToDataTableOptions _options;
    private ExcelRangeBase _range;
    private ExcelWorksheet _sheet;
    private DataTable _dataTable;
    private Dictionary`2<Type, MethodInfo> _convertMethods;
    public DataTableExporter(ToDataTableOptions options, ExcelRangeBase range, DataTable dataTable);
    public void Export();
    private void Validate();
    private object CastToColumnDataType(object val, Type dataColumnType, bool allowNull);
}
internal class OfficeOpenXml.Export.ToDataTable.DataTableMapper : object {
    private ToDataTableOptions _options;
    private DataTable _dataTable;
    private ExcelRangeBase _range;
    public DataTableMapper(ToDataTableOptions options, ExcelRangeBase range, DataTable dataTable);
    internal void Map();
    private int FindIndexInRange(string columnName);
}
internal class OfficeOpenXml.Export.ToDataTable.DataTablePrimaryKey : object {
    private ToDataTableOptions _options;
    private HashSet`1<string> _keyNames;
    internal IEnumerable`1<string> KeyNames { get; }
    internal bool HasKeys { get; }
    public DataTablePrimaryKey(ToDataTableOptions options);
    private void Initialize();
    private void AddPrimaryKeyName(string name);
    internal IEnumerable`1<string> get_KeyNames();
    internal bool get_HasKeys();
    internal bool ContainsKey(string key);
}
public enum OfficeOpenXml.Export.ToDataTable.EmptyRowsStrategy : Enum {
    public int value__;
    public static EmptyRowsStrategy Ignore;
    public static EmptyRowsStrategy StopAtFirst;
}
public enum OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy : Enum {
    public int value__;
    public static ExcelErrorParsingStrategy HandleExcelErrorsAsBlankCells;
    public static ExcelErrorParsingStrategy ThrowException;
    public static ExcelErrorParsingStrategy IgnoreRowWithErrors;
}
public enum OfficeOpenXml.Export.ToDataTable.NameParsingStrategy : Enum {
    public int value__;
    public static NameParsingStrategy Preserve;
    public static NameParsingStrategy SpaceToUnderscore;
    public static NameParsingStrategy RemoveSpace;
}
internal class OfficeOpenXml.Export.ToDataTable.ToDataTable : object {
    private ToDataTableOptions _options;
    private ExcelRangeBase _range;
    public ToDataTable(ToDataTableOptions options, ExcelRangeBase range);
    public DataTable Execute();
    public DataTable Execute(DataTable dataTable);
}
public class OfficeOpenXml.Export.ToDataTable.ToDataTableOptions : object {
    private static string DefaultColPrefix;
    private static string DefaultDataTableName;
    private List`1<string> _primaryKeyFields;
    private List`1<int> _primaryKeyIndexes;
    [CompilerGeneratedAttribute]
private bool <FirstRowIsColumnNames>k__BackingField;
    [CompilerGeneratedAttribute]
private NameParsingStrategy <ColumnNameParsingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipNumberOfRowsStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipNumberOfRowsEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelErrorParsingStrategy <ExcelErrorParsingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private EmptyRowsStrategy <EmptyRowStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private DataColumnMappingCollection <Mappings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PredefinedMappingsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTableNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysAllowNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DataIsTransposed>k__BackingField;
    internal IEnumerable`1<string> PrimaryKeyNames { get; }
    internal IEnumerable`1<int> PrimaryKeyIndexes { get; }
    internal static ToDataTableOptions Default { get; }
    public bool FirstRowIsColumnNames { get; public set; }
    public NameParsingStrategy ColumnNameParsingStrategy { get; public set; }
    public int SkipNumberOfRowsStart { get; public set; }
    public int SkipNumberOfRowsEnd { get; public set; }
    public ExcelErrorParsingStrategy ExcelErrorParsingStrategy { get; public set; }
    public EmptyRowsStrategy EmptyRowStrategy { get; public set; }
    public DataColumnMappingCollection Mappings { get; private set; }
    public bool PredefinedMappingsOnly { get; public set; }
    public string ColumnNamePrefix { get; public set; }
    public string DataTableName { get; public set; }
    public string DataTableNamespace { get; public set; }
    public bool AlwaysAllowNull { get; public set; }
    public bool DataIsTransposed { get; public set; }
    internal IEnumerable`1<string> get_PrimaryKeyNames();
    internal IEnumerable`1<int> get_PrimaryKeyIndexes();
    internal static ToDataTableOptions get_Default();
    public static ToDataTableOptions Create();
    public static ToDataTableOptions Create(Action`1<ToDataTableOptions> configHandler);
    [CompilerGeneratedAttribute]
public bool get_FirstRowIsColumnNames();
    [CompilerGeneratedAttribute]
public void set_FirstRowIsColumnNames(bool value);
    [CompilerGeneratedAttribute]
public NameParsingStrategy get_ColumnNameParsingStrategy();
    [CompilerGeneratedAttribute]
public void set_ColumnNameParsingStrategy(NameParsingStrategy value);
    [CompilerGeneratedAttribute]
public int get_SkipNumberOfRowsStart();
    [CompilerGeneratedAttribute]
public void set_SkipNumberOfRowsStart(int value);
    [CompilerGeneratedAttribute]
public int get_SkipNumberOfRowsEnd();
    [CompilerGeneratedAttribute]
public void set_SkipNumberOfRowsEnd(int value);
    [CompilerGeneratedAttribute]
public ExcelErrorParsingStrategy get_ExcelErrorParsingStrategy();
    [CompilerGeneratedAttribute]
public void set_ExcelErrorParsingStrategy(ExcelErrorParsingStrategy value);
    [CompilerGeneratedAttribute]
public EmptyRowsStrategy get_EmptyRowStrategy();
    [CompilerGeneratedAttribute]
public void set_EmptyRowStrategy(EmptyRowsStrategy value);
    [CompilerGeneratedAttribute]
public DataColumnMappingCollection get_Mappings();
    [CompilerGeneratedAttribute]
private void set_Mappings(DataColumnMappingCollection value);
    [CompilerGeneratedAttribute]
public bool get_PredefinedMappingsOnly();
    [CompilerGeneratedAttribute]
public void set_PredefinedMappingsOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_ColumnNamePrefix();
    [CompilerGeneratedAttribute]
public void set_ColumnNamePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_DataTableName();
    [CompilerGeneratedAttribute]
public void set_DataTableName(string value);
    [CompilerGeneratedAttribute]
public string get_DataTableNamespace();
    [CompilerGeneratedAttribute]
public void set_DataTableNamespace(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysAllowNull();
    [CompilerGeneratedAttribute]
public void set_AlwaysAllowNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_DataIsTransposed();
    [CompilerGeneratedAttribute]
public void set_DataIsTransposed(bool value);
    public void SetPrimaryKey(String[] columnNames);
    public void SetPrimaryKey(Int32[] zeroBasedRangeIndexes);
}
internal enum OfficeOpenXml.ExpressionType : Enum {
    public int value__;
    public static ExpressionType Boolean;
    public static ExpressionType Date;
    public static ExpressionType Decimal;
    public static ExpressionType Integer;
    public static ExpressionType String;
    public static ExpressionType Constant;
    public static ExpressionType Enumerable;
    public static ExpressionType Variable;
    public static ExpressionType Group;
    public static ExpressionType ValueError;
    public static ExpressionType Function;
    public static ExpressionType NameValue;
    public static ExpressionType CellAddress;
    public static ExpressionType TableAddress;
    public static ExpressionType Empty;
}
public enum OfficeOpenXml.ExternalReferences.eDdeValueType : Enum {
    public int value__;
    public static eDdeValueType Boolean;
    public static eDdeValueType Error;
    public static eDdeValueType Number;
    public static eDdeValueType Nil;
    public static eDdeValueType String;
}
public enum OfficeOpenXml.ExternalReferences.eExternalLinkType : Enum {
    public int value__;
    public static eExternalLinkType ExternalWorkbook;
    public static eExternalLinkType DdeLink;
    public static eExternalLinkType OleLink;
}
public enum OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus : Enum {
    public int value__;
    public static eExternalWorkbookCacheStatus NotUpdated;
    public static eExternalWorkbookCacheStatus LoadedFromPackage;
    public static eExternalWorkbookCacheStatus Failed;
    public static eExternalWorkbookCacheStatus Updated;
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection : object {
    internal CellStore`1<object> _values;
    private CellStore`1<int> _metaData;
    private CellStoreEnumerator`1<object> _valuesEnum;
    public ExcelExternalCellValue Item { get; }
    public ExcelExternalCellValue Item { get; }
    public ExcelExternalCellValue Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal ExcelExternalCellCollection(CellStore`1<object> values, CellStore`1<int> metaData);
    public ExcelExternalCellValue get_Item(string cellAddress);
    public ExcelExternalCellValue get_Item(int row, int column);
    public sealed virtual ExcelExternalCellValue get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<ExcelExternalCellValue> GetEnumerator();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal CellStoreEnumerator`1<object> GetCellStore(int fromRow, int fromCol, int toRow, int toCol);
    internal object GetValue(int row, int col);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalCellValue : object {
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MetaDataReference>k__BackingField;
    public string Address { get; }
    public int Row { get; internal set; }
    public int Column { get; internal set; }
    public object Value { get; internal set; }
    public int MetaDataReference { get; internal set; }
    public string get_Address();
    [CompilerGeneratedAttribute]
public int get_Row();
    [CompilerGeneratedAttribute]
internal void set_Row(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(int value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    [CompilerGeneratedAttribute]
public int get_MetaDataReference();
    [CompilerGeneratedAttribute]
internal void set_MetaDataReference(int value);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Advise>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferPicture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ole>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalDdeValueCollection <Values>k__BackingField;
    public string Name { get; internal set; }
    public bool Advise { get; internal set; }
    public bool PreferPicture { get; internal set; }
    public bool Ole { get; internal set; }
    public ExcelExternalDdeValueCollection Values { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Advise();
    [CompilerGeneratedAttribute]
internal void set_Advise(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferPicture();
    [CompilerGeneratedAttribute]
internal void set_PreferPicture(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ole();
    [CompilerGeneratedAttribute]
internal void set_Ole(bool value);
    [CompilerGeneratedAttribute]
public ExcelExternalDdeValueCollection get_Values();
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalDdeItemCollection : EPPlusReadOnlyList`1<ExcelExternalDdeItem> {
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink : ExcelExternalLink {
    [CompilerGeneratedAttribute]
private string <DdeService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DdeTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalDdeItemCollection <DdeItems>k__BackingField;
    public eExternalLinkType ExternalLinkType { get; }
    public string DdeService { get; internal set; }
    public string DdeTopic { get; internal set; }
    public ExcelExternalDdeItemCollection DdeItems { get; }
    internal ExcelExternalDdeLink(ExcelWorkbook wb, XmlTextReader reader, ZipPackagePart part, XmlElement workbookElement);
    private void ReadDdeItems(XmlTextReader reader);
    public virtual eExternalLinkType get_ExternalLinkType();
    [CompilerGeneratedAttribute]
public string get_DdeService();
    [CompilerGeneratedAttribute]
internal void set_DdeService(string value);
    [CompilerGeneratedAttribute]
public string get_DdeTopic();
    [CompilerGeneratedAttribute]
internal void set_DdeTopic(string value);
    [CompilerGeneratedAttribute]
public ExcelExternalDdeItemCollection get_DdeItems();
    internal virtual void Save(StreamWriter sw);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue : object {
    [CompilerGeneratedAttribute]
private eDdeValueType <DdeValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public eDdeValueType DdeValueType { get; internal set; }
    public string Value { get; internal set; }
    [CompilerGeneratedAttribute]
public eDdeValueType get_DdeValueType();
    [CompilerGeneratedAttribute]
internal void set_DdeValueType(eDdeValueType value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(string value);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalDdeValueCollection : EPPlusReadOnlyList`1<ExcelExternalDdeValue> {
    [CompilerGeneratedAttribute]
private int <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Columns>k__BackingField;
    public int Rows { get; public set; }
    public int Columns { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(int value);
    [CompilerGeneratedAttribute]
public int get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(int value);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefersTo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SheetId>k__BackingField;
    public string Name { get; internal set; }
    public string RefersTo { get; internal set; }
    public int SheetId { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_RefersTo();
    [CompilerGeneratedAttribute]
internal void set_RefersTo(string value);
    [CompilerGeneratedAttribute]
public int get_SheetId();
    [CompilerGeneratedAttribute]
internal void set_SheetId(int value);
    public virtual string ToString();
}
public abstract class OfficeOpenXml.ExternalReferences.ExcelExternalLink : object {
    internal ExcelWorkbook _wb;
    [CompilerGeneratedAttribute]
private XmlElement <WorkbookElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalLinkAsType <As>k__BackingField;
    internal List`1<string> _errors;
    public eExternalLinkType ExternalLinkType { get; }
    internal XmlElement WorkbookElement { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    public ExcelExternalLinkAsType As { get; }
    public int Index { get; }
    public List`1<string> ErrorLog { get; }
    internal ExcelExternalLink(ExcelWorkbook wb);
    internal ExcelExternalLink(ExcelWorkbook wb, XmlTextReader reader, ZipPackagePart part, XmlElement workbookElement);
    public abstract virtual eExternalLinkType get_ExternalLinkType();
    internal abstract virtual void Save(StreamWriter sw);
    [CompilerGeneratedAttribute]
internal XmlElement get_WorkbookElement();
    [CompilerGeneratedAttribute]
internal void set_WorkbookElement(XmlElement value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
public ExcelExternalLinkAsType get_As();
    public virtual string ToString();
    public int get_Index();
    internal static bool HasWebProtocol(string uriPath);
    public List`1<string> get_ErrorLog();
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType : object {
    private ExcelExternalLink _externalLink;
    public ExcelExternalWorkbook ExternalWorkbook { get; }
    public ExcelExternalDdeLink DdeLink { get; }
    public ExcelExternalOleLink OleLink { get; }
    internal ExcelExternalLinkAsType(ExcelExternalLink externalLink);
    public T Type();
    public ExcelExternalWorkbook get_ExternalWorkbook();
    public ExcelExternalDdeLink get_DdeLink();
    public ExcelExternalOleLink get_OleLink();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection : object {
    private List`1<ExcelExternalLink> _list;
    private ExcelWorkbook _wb;
    [CompilerGeneratedAttribute]
private List`1<DirectoryInfo> <Directories>k__BackingField;
    public int Count { get; }
    public ExcelExternalLink Item { get; }
    public List`1<DirectoryInfo> Directories { get; }
    internal ExcelExternalLinksCollection(ExcelWorkbook wb);
    internal void AddInternal(ExcelExternalLink externalLink);
    public sealed virtual IEnumerator`1<ExcelExternalLink> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    public ExcelExternalLink get_Item(int index);
    public ExcelExternalWorkbook AddExternalWorkbook(FileInfo file);
    internal void LoadExternalReferences();
    public void RemoveAt(int index);
    public void Remove(ExcelExternalLink externalLink);
    public void Clear();
    [CompilerGeneratedAttribute]
public List`1<DirectoryInfo> get_Directories();
    public bool LoadWorkbooks();
    internal int GetExternalLink(string extRef);
    internal int GetIndex(ExcelExternalLink link);
    internal int GetPositionByToken(int extId, string tokenValue);
    public bool UpdateCaches();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExternalReferences.ExcelExternalNamedItemCollection`1 : EPPlusReadOnlyList`1<T> {
    private Dictionary`2<string, int> _names;
    public T Item { get; }
    public T get_Item(string name);
    internal virtual void Add(T item);
    internal virtual void Clear();
    public bool ContainsKey(string name);
    public int GetIndexByName(string name);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalOleItem : object {
    [CompilerGeneratedAttribute]
private bool <Advise>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferPicture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool Advise { get; internal set; }
    public bool PreferPicture { get; internal set; }
    public bool Icon { get; internal set; }
    public string Name { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_Advise();
    [CompilerGeneratedAttribute]
internal void set_Advise(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferPicture();
    [CompilerGeneratedAttribute]
internal void set_PreferPicture(bool value);
    [CompilerGeneratedAttribute]
public bool get_Icon();
    [CompilerGeneratedAttribute]
internal void set_Icon(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalOleItemsCollection : EPPlusReadOnlyList`1<ExcelExternalOleItem> {
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalOleLink : ExcelExternalLink {
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <Relation>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalOleItemsCollection <OleItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProgId>k__BackingField;
    public eExternalLinkType ExternalLinkType { get; }
    internal ZipPackageRelationship Relation { get; internal set; }
    public ExcelExternalOleItemsCollection OleItems { get; }
    public string ProgId { get; }
    internal ExcelExternalOleLink(ExcelWorkbook wb, XmlTextReader reader, ZipPackagePart part, XmlElement workbookElement);
    private void ReadOleItems(XmlTextReader reader);
    public virtual eExternalLinkType get_ExternalLinkType();
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_Relation();
    [CompilerGeneratedAttribute]
internal void set_Relation(ZipPackageRelationship value);
    [CompilerGeneratedAttribute]
public ExcelExternalOleItemsCollection get_OleItems();
    [CompilerGeneratedAttribute]
public string get_ProgId();
    internal virtual void Save(StreamWriter sw);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook : ExcelExternalLink {
    private Dictionary`2<string, int> _sheetNames;
    private Dictionary`2<int, CellStore`1<object>> _sheetValues;
    private Dictionary`2<int, CellStore`1<int>> _sheetMetaData;
    private Dictionary`2<int, ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName>> _definedNamesValues;
    private HashSet`1<int> _sheetRefresh;
    private FileInfo _file;
    private ExcelPackage _package;
    [CompilerGeneratedAttribute]
private bool <IsPathRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private eExternalWorkbookCacheStatus <CacheStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <Relation>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> <CachedNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalNamedItemCollection`1<ExcelExternalWorksheet> <CachedWorksheets>k__BackingField;
    public eExternalLinkType ExternalLinkType { get; }
    public Uri ExternalLinkUri { get; public set; }
    public FileInfo File { get; public set; }
    public ExcelPackage Package { get; }
    public bool IsPathRelative { get; public set; }
    public eExternalWorkbookCacheStatus CacheStatus { get; private set; }
    internal ZipPackageRelationship Relation { get; internal set; }
    public ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> CachedNames { get; }
    public ExcelExternalNamedItemCollection`1<ExcelExternalWorksheet> CachedWorksheets { get; }
    internal ExcelExternalWorkbook(ExcelWorkbook wb, ExcelPackage p);
    internal ExcelExternalWorkbook(ExcelWorkbook wb, XmlTextReader reader, ZipPackagePart part, XmlElement workbookElement);
    public virtual eExternalLinkType get_ExternalLinkType();
    private ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> GetNames(int ix);
    private void ReadSheetDataSet(XmlTextReader reader, ExcelWorkbook wb);
    private void ReadSheetData(XmlTextReader reader, ExcelWorkbook wb);
    private void ReadDefinedNames(XmlTextReader reader);
    private void ReadSheetNames(XmlTextReader reader);
    public Uri get_ExternalLinkUri();
    public void set_ExternalLinkUri(Uri value);
    public FileInfo get_File();
    public void set_File(FileInfo value);
    private void SetDirectoryIfExists();
    public ExcelPackage get_Package();
    public bool Load();
    public bool Load(FileInfo packageFile);
    public bool Load(ExcelPackage package);
    private void SetPackage(ExcelPackage package, bool setTarget);
    private void SetPackage(FileInfo file);
    private void SetTarget(FileInfo file);
    [CompilerGeneratedAttribute]
public bool get_IsPathRelative();
    [CompilerGeneratedAttribute]
public void set_IsPathRelative(bool value);
    private bool SetPackageFromOtherReference(ExcelExternalLinksCollection erCollection, FileInfo file);
    public bool UpdateCache();
    private void UpdateCacheFromCells();
    private void UpdateCacheFromNames(ExcelWorkbook wb, ExcelNamedRangeCollection names);
    [CompilerGeneratedAttribute]
public eExternalWorkbookCacheStatus get_CacheStatus();
    [CompilerGeneratedAttribute]
private void set_CacheStatus(eExternalWorkbookCacheStatus value);
    private void UpdateCacheForFormula(ExcelWorkbook wb, string formula, string address);
    private void UpdateCacheForName(int wsIx, string name);
    private void UpdateCacheForAddress(ExcelAddressBase formulaAddress, string sfAddress);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_Relation();
    [CompilerGeneratedAttribute]
internal void set_Relation(ZipPackageRelationship value);
    [CompilerGeneratedAttribute]
public ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> get_CachedNames();
    [CompilerGeneratedAttribute]
public ExcelExternalNamedItemCollection`1<ExcelExternalWorksheet> get_CachedWorksheets();
    internal virtual void Save(StreamWriter sw);
}
public class OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet : object {
    [CompilerGeneratedAttribute]
private int <SheetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefreshError>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> <CachedNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelExternalCellCollection <CellValues>k__BackingField;
    public int SheetId { get; internal set; }
    public string Name { get; internal set; }
    public bool RefreshError { get; internal set; }
    public ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> CachedNames { get; }
    public ExcelExternalCellCollection CellValues { get; }
    internal ExcelExternalWorksheet(CellStore`1<object> values, CellStore`1<int> metaData, ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> definedNames);
    [CompilerGeneratedAttribute]
public int get_SheetId();
    [CompilerGeneratedAttribute]
internal void set_SheetId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_RefreshError();
    [CompilerGeneratedAttribute]
internal void set_RefreshError(bool value);
    [CompilerGeneratedAttribute]
public ExcelExternalNamedItemCollection`1<ExcelExternalDefinedName> get_CachedNames();
    [CompilerGeneratedAttribute]
public ExcelExternalCellCollection get_CellValues();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ExternalReferences.ExcelExternalWorksheetCollection : EPPlusReadOnlyList`1<ExcelExternalWorksheet> {
    private Dictionary`2<string, int> _sheetNames;
    public ExcelExternalWorksheet Item { get; }
    public ExcelExternalWorksheet get_Item(string name);
    internal virtual void Add(ExcelExternalWorksheet item);
}
internal static class OfficeOpenXml.ExternalReferences.ExternalLinksHandler : object {
    internal static void BreakAllFormulaLinks(ExcelWorkbook wb);
    internal static void BreakFormulaLinks(ExcelWorkbook wb, int ix, bool delete);
    private static void HandleNames(ExcelWorkbook wb, string wsName, ExcelNamedRangeCollection names, int ix);
    private static bool HasFormulaExternalReference(IEnumerable`1<Token> tokens);
    private static bool HasFormulaExternalReference(ExcelWorkbook wb, int ix, IEnumerable`1<Token> tokens, String& newFormula, bool setRefError);
    private static string AddApostrophes(string address, bool needsApostrophes);
}
public interface OfficeOpenXml.ExternalReferences.IExcelExternalNamedItem {
    public string Name { get; }
    public abstract virtual string get_Name();
}
internal static class OfficeOpenXml.Filter.DynamicDateFilterMatcher : object {
    internal static bool Match(ExcelDynamicFilterColumn column, Nullable`1<DateTime> value);
    internal static void SetMatchDates(ExcelDynamicFilterColumn column);
    private static void SetFixed(ExcelDynamicFilterColumn column);
    private static void SetDay(ExcelDynamicFilterColumn column, DateTime dt);
    private static void SetYearToDate(ExcelDynamicFilterColumn column);
    private static void SetFullQuarter(ExcelDynamicFilterColumn column, DateTime dt);
    private static void SetFullYear(ExcelDynamicFilterColumn column, int year);
    private static void SetFullMonth(ExcelDynamicFilterColumn column, DateTime dt);
    private static void SetWeek(ExcelDynamicFilterColumn column, DateTime dt);
}
public enum OfficeOpenXml.Filter.eCalendarType : Enum {
    public int value__;
    public static eCalendarType Gregorian;
    public static eCalendarType GregorianArabic;
    public static eCalendarType GregorianMeFrench;
    public static eCalendarType GregorianUs;
    public static eCalendarType GregorianXlitEnglish;
    public static eCalendarType GregorianXlitFrench;
    public static eCalendarType Hijri;
    public static eCalendarType Hebrew;
    public static eCalendarType Japan;
    public static eCalendarType Korea;
    public static eCalendarType None;
    public static eCalendarType Taiwan;
    public static eCalendarType Thai;
}
public enum OfficeOpenXml.Filter.eDateTimeGrouping : Enum {
    public int value__;
    public static eDateTimeGrouping Day;
    public static eDateTimeGrouping Hour;
    public static eDateTimeGrouping Minute;
    public static eDateTimeGrouping Month;
    public static eDateTimeGrouping Second;
    public static eDateTimeGrouping Year;
}
public enum OfficeOpenXml.Filter.eDynamicFilterType : Enum {
    public int value__;
    public static eDynamicFilterType AboveAverage;
    public static eDynamicFilterType BelowAverage;
    public static eDynamicFilterType LastMonth;
    public static eDynamicFilterType LastQuarter;
    public static eDynamicFilterType LastWeek;
    public static eDynamicFilterType LastYear;
    public static eDynamicFilterType M1;
    public static eDynamicFilterType M2;
    public static eDynamicFilterType M3;
    public static eDynamicFilterType M4;
    public static eDynamicFilterType M5;
    public static eDynamicFilterType M6;
    public static eDynamicFilterType M7;
    public static eDynamicFilterType M8;
    public static eDynamicFilterType M9;
    public static eDynamicFilterType M10;
    public static eDynamicFilterType M11;
    public static eDynamicFilterType M12;
    public static eDynamicFilterType NextMonth;
    public static eDynamicFilterType NextQuarter;
    public static eDynamicFilterType NextWeek;
    public static eDynamicFilterType NextYear;
    public static eDynamicFilterType Null;
    public static eDynamicFilterType Q1;
    public static eDynamicFilterType Q2;
    public static eDynamicFilterType Q3;
    public static eDynamicFilterType Q4;
    public static eDynamicFilterType ThisMonth;
    public static eDynamicFilterType ThisQuarter;
    public static eDynamicFilterType ThisWeek;
    public static eDynamicFilterType ThisYear;
    public static eDynamicFilterType Today;
    public static eDynamicFilterType Tomorrow;
    public static eDynamicFilterType YearToDate;
    public static eDynamicFilterType Yesterday;
}
public enum OfficeOpenXml.Filter.eFilterOperator : Enum {
    public int value__;
    public static eFilterOperator Equal;
    public static eFilterOperator GreaterThan;
    public static eFilterOperator GreaterThanOrEqual;
    public static eFilterOperator LessThan;
    public static eFilterOperator LessThanOrEqual;
    public static eFilterOperator NotEqual;
}
public class OfficeOpenXml.Filter.ExcelAutoFilter : XmlHelper {
    private static string AutoFilterGuid;
    private ExcelWorksheet _worksheet;
    private ExcelTable _table;
    private ExcelAddressBase _address;
    private ExcelFilterColumnCollection _columns;
    public ExcelAddressBase Address { get; internal set; }
    public ExcelFilterColumnCollection Columns { get; }
    internal ExcelAutoFilter(XmlNamespaceManager namespaceManager, XmlNode topNode, ExcelWorksheet worksheet);
    internal ExcelAutoFilter(XmlNamespaceManager namespaceManager, XmlNode topNode, ExcelTable table);
    internal void Save();
    public void ApplyFilter(bool calculateRange);
    public ExcelAddressBase get_Address();
    internal void set_Address(ExcelAddressBase value);
    public ExcelFilterColumnCollection get_Columns();
    public void ClearAll();
    internal XmlNode CreateAutoFilterTopNode();
}
public class OfficeOpenXml.Filter.ExcelColorFilterColumn : ExcelFilterColumn {
    public bool CellColor { get; public set; }
    public int DxfId { get; public set; }
    internal ExcelColorFilterColumn(XmlNamespaceManager namespaceManager, XmlNode topNode);
    public bool get_CellColor();
    public void set_CellColor(bool value);
    public int get_DxfId();
    public void set_DxfId(int value);
    internal virtual bool Match(object value, string valueText);
    internal virtual void Save();
}
public class OfficeOpenXml.Filter.ExcelCustomFilterColumn : ExcelFilterColumn {
    private bool _isNumericFilterSet;
    private bool _isNumericFilter;
    [CompilerGeneratedAttribute]
private bool <And>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelFilterCollection`1<ExcelFilterCustomItem> <Filters>k__BackingField;
    public bool IsNumericFilter { get; public set; }
    public bool And { get; public set; }
    public ExcelFilterCollection`1<ExcelFilterCustomItem> Filters { get; public set; }
    internal ExcelCustomFilterColumn(XmlNamespaceManager namespaceManager, XmlNode topNode);
    private void LoadFilters(XmlNode topNode);
    public bool get_IsNumericFilter();
    public void set_IsNumericFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_And();
    [CompilerGeneratedAttribute]
public void set_And(bool value);
    [CompilerGeneratedAttribute]
public ExcelFilterCollection`1<ExcelFilterCustomItem> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(ExcelFilterCollection`1<ExcelFilterCustomItem> value);
    internal virtual bool Match(object value, string valueText);
    private bool MatchByOperatorNumeric(object value, ExcelFilterCustomItem filter);
    private static bool MatchByOperatorText(object value, ExcelFilterCustomItem filter);
    internal virtual void Save();
}
public class OfficeOpenXml.Filter.ExcelDynamicFilterColumn : ExcelFilterColumn {
    [CompilerGeneratedAttribute]
private eDynamicFilterType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MaxValue>k__BackingField;
    public eDynamicFilterType Type { get; public set; }
    public Nullable`1<double> Value { get; internal set; }
    public Nullable`1<double> MaxValue { get; internal set; }
    internal ExcelDynamicFilterColumn(XmlNamespaceManager namespaceManager, XmlNode topNode);
    [CompilerGeneratedAttribute]
public eDynamicFilterType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(eDynamicFilterType value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MaxValue();
    [CompilerGeneratedAttribute]
internal void set_MaxValue(Nullable`1<double> value);
    internal virtual bool Match(object value, string valueText);
    internal virtual void Save();
    private string GetTypeForXml(eDynamicFilterType type);
    internal virtual void SetFilterValue(ExcelWorksheet worksheet, ExcelAddressBase address);
    private double GetAvg(ExcelWorksheet worksheet, ExcelAddressBase address);
}
public class OfficeOpenXml.Filter.ExcelFilterCollection`1 : ExcelFilterCollectionBase`1<T> {
    public T Add(T value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Filter.ExcelFilterCollectionBase`1 : object {
    internal List`1<T> _list;
    internal bool _maxTwoItems;
    public T Item { get; }
    public int Count { get; }
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T get_Item(int index);
    public int get_Count();
}
public abstract class OfficeOpenXml.Filter.ExcelFilterColumn : XmlHelper {
    private static string _hiddenButtonPath;
    private static string _showButtonPath;
    public int Position { get; }
    public bool HiddenButton { get; public set; }
    public bool ShowButton { get; public set; }
    internal ExcelFilterColumn(XmlNamespaceManager namespaceManager, XmlNode node);
    protected internal object GetFilterValue(string value);
    public int get_Position();
    public bool get_HiddenButton();
    public void set_HiddenButton(bool value);
    public bool get_ShowButton();
    public void set_ShowButton(bool value);
    internal abstract virtual void Save();
    internal abstract virtual bool Match(object value, string valueText);
    internal virtual void SetFilterValue(ExcelWorksheet worksheet, ExcelAddressBase address);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Filter.ExcelFilterColumnCollection : XmlHelper {
    private SortedDictionary`2<int, ExcelFilterColumn> _columns;
    private ExcelAutoFilter _autoFilter;
    public int Count { get; }
    public ExcelFilterColumn Item { get; }
    internal ExcelFilterColumnCollection(XmlNamespaceManager namespaceManager, XmlNode topNode, ExcelAutoFilter autofilter);
    public int get_Count();
    internal XmlNode Add(int position, string topNodeName);
    private XmlElement GetColumnNode(int position, string topNodeName);
    public ExcelFilterColumn get_Item(int index);
    public ExcelValueFilterColumn AddValueFilterColumn(int position);
    public ExcelCustomFilterColumn AddCustomFilterColumn(int position);
    public ExcelColorFilterColumn AddColorFilterColumn(int position);
    public ExcelIconFilterColumn AddIconFilterColumn(int position);
    public ExcelTop10FilterColumn AddTop10FilterColumn(int position);
    public ExcelDynamicFilterColumn AddDynamicFilterColumn(int position);
    public sealed virtual IEnumerator`1<ExcelFilterColumn> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void RemoveAt(int position);
    public void Remove(ExcelFilterColumn column);
    public void Clear();
}
public class OfficeOpenXml.Filter.ExcelFilterCustomItem : ExcelFilterValueItem {
    [CompilerGeneratedAttribute]
private Nullable`1<eFilterOperator> <Operator>k__BackingField;
    public Nullable`1<eFilterOperator> Operator { get; public set; }
    public ExcelFilterCustomItem(string value, eFilterOperator filterOperator);
    [CompilerGeneratedAttribute]
public Nullable`1<eFilterOperator> get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(Nullable`1<eFilterOperator> value);
}
public class OfficeOpenXml.Filter.ExcelFilterDateGroupItem : ExcelFilterItem {
    [CompilerGeneratedAttribute]
private eDateTimeGrouping <Grouping>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Day>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Second>k__BackingField;
    public eDateTimeGrouping Grouping { get; }
    public int Year { get; }
    public Nullable`1<int> Month { get; }
    public Nullable`1<int> Day { get; }
    public Nullable`1<int> Hour { get; }
    public Nullable`1<int> Minute { get; }
    public Nullable`1<int> Second { get; }
    public ExcelFilterDateGroupItem(int year);
    public ExcelFilterDateGroupItem(int year, int month);
    public ExcelFilterDateGroupItem(int year, int month, int day);
    public ExcelFilterDateGroupItem(int year, int month, int day, int hour);
    public ExcelFilterDateGroupItem(int year, int month, int day, int hour, int minute);
    public ExcelFilterDateGroupItem(int year, int month, int day, int hour, int minute, int second);
    private void Validate();
    internal void AddNode(XmlNode node);
    internal bool Match(DateTime value);
    [CompilerGeneratedAttribute]
public eDateTimeGrouping get_Grouping();
    [CompilerGeneratedAttribute]
public int get_Year();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Month();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Day();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Hour();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Minute();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Second();
}
public abstract class OfficeOpenXml.Filter.ExcelFilterItem : object {
}
public class OfficeOpenXml.Filter.ExcelFilterValueItem : ExcelFilterItem {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    internal double _valueDouble;
    public string Value { get; }
    public ExcelFilterValueItem(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class OfficeOpenXml.Filter.ExcelIconFilterColumn : ExcelFilterColumn {
    public int IconId { get; public set; }
    public eExcelconditionalFormattingIconsSetType IconSet { get; public set; }
    internal ExcelIconFilterColumn(XmlNamespaceManager namespaceManager, XmlNode topNode);
    public int get_IconId();
    public void set_IconId(int value);
    public eExcelconditionalFormattingIconsSetType get_IconSet();
    public void set_IconSet(eExcelconditionalFormattingIconsSetType value);
    internal virtual bool Match(object value, string valueText);
    internal virtual void Save();
}
public class OfficeOpenXml.Filter.ExcelTop10FilterColumn : ExcelFilterColumn {
    [CompilerGeneratedAttribute]
private double <FilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Percent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double FilterValue { get; internal set; }
    public bool Percent { get; public set; }
    public bool Top { get; public set; }
    public double Value { get; public set; }
    internal ExcelTop10FilterColumn(XmlNamespaceManager namespaceManager, XmlNode topNode);
    [CompilerGeneratedAttribute]
public double get_FilterValue();
    [CompilerGeneratedAttribute]
internal void set_FilterValue(double value);
    [CompilerGeneratedAttribute]
public bool get_Percent();
    [CompilerGeneratedAttribute]
public void set_Percent(bool value);
    [CompilerGeneratedAttribute]
public bool get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(bool value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    internal virtual bool Match(object value, string valueText);
    internal virtual void Save();
    internal virtual void SetFilterValue(ExcelWorksheet worksheet, ExcelAddressBase address);
}
public class OfficeOpenXml.Filter.ExcelValueFilterCollection : ExcelFilterCollectionBase`1<ExcelFilterItem> {
    [CompilerGeneratedAttribute]
private bool <Blank>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<eCalendarType> <CalendarType>k__BackingField;
    public bool Blank { get; public set; }
    internal Nullable`1<eCalendarType> CalendarType { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_Blank();
    [CompilerGeneratedAttribute]
public void set_Blank(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<eCalendarType> get_CalendarType();
    [CompilerGeneratedAttribute]
internal void set_CalendarType(Nullable`1<eCalendarType> value);
    public ExcelFilterDateGroupItem Add(ExcelFilterDateGroupItem value);
    public ExcelFilterValueItem Add(ExcelFilterValueItem item);
    public ExcelFilterValueItem Add(string value);
    internal void AddOrSetBlank(ExcelFilterValueItem item);
    public void Clear();
    public void RemoveAt(int index);
    public void Remove(ExcelFilterItem item);
}
public class OfficeOpenXml.Filter.ExcelValueFilterColumn : ExcelFilterColumn {
    [CompilerGeneratedAttribute]
private ExcelValueFilterCollection <Filters>k__BackingField;
    public ExcelValueFilterCollection Filters { get; public set; }
    internal ExcelValueFilterColumn(XmlNamespaceManager namespaceManager, XmlNode topNode);
    private void LoadFilters(XmlNode topNode);
    private ExcelFilterDateGroupItem CreateDateGroupItem(XmlNode node);
    [CompilerGeneratedAttribute]
public ExcelValueFilterCollection get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(ExcelValueFilterCollection value);
    internal virtual bool Match(object value, string valueText);
    internal virtual void Save();
    private string ConvertToString(object f);
}
internal static class OfficeOpenXml.Filter.FilterWildCardMatcher : object {
    internal static bool Match(string value, string pattern);
    private static bool MatchTokenList(string value, List`1<string> tokens, int stringPos, int tokenPos);
    private static bool MatchWildCards(string value, List`1<string> tokens, int stringPos, int tokenPos);
    private static List`1<string> SplitInTokens(string filter);
}
public enum OfficeOpenXml.FixedWidthFormatErrorStrategy : Enum {
    public int value__;
    public static FixedWidthFormatErrorStrategy Truncate;
    public static FixedWidthFormatErrorStrategy ThrowError;
}
internal enum OfficeOpenXml.FixedWidthReadType : Enum {
    public int value__;
    public static FixedWidthReadType Length;
    public static FixedWidthReadType Positions;
}
public class OfficeOpenXml.FontSize : object {
    public static string DefaultFont;
    public static string NonExistingFont;
    internal static bool _isLoaded;
    internal static object _lockObj;
    internal static MemoryStream _fontStream;
    public static Dictionary`2<string, Dictionary`2<float, short>> FontWidths;
    public static Dictionary`2<string, Dictionary`2<float, short>> FontHeights;
    private static FontSize();
    internal static decimal GetWidthPixels(string fontName, float fontSize);
    internal static decimal GetHeightPixels(string fontName, float fontSize);
    private static decimal GetWidthHeight(string fontName, float fontSize, bool width, decimal defaultValue);
    internal static Dictionary`2<float, short> GetFontSize(string fontName, bool width);
    public static void LoadAllFontsFromResource();
    public static void LoadFontsFromResource(string fontName, bool disposeStream);
    private static void ReadFontSize(MemoryStream stream, string fontName);
    private static void AddFont(BinaryReader br, string fontName, UInt32 dataPos);
}
internal class OfficeOpenXml.FormulaParsing.ArrayFormulaOutput : object {
    internal static void FillArrayFromRangeInfo(RpnFormula f, IRangeInfo array, RangeHashset rd, RpnOptimizedDependencyChain depChain);
    private static bool HasSpill(ExcelWorksheet ws, int fIx, int startRow, int startColumn, int rows, short columns, Int32& rowOff, Int32& colOff);
    internal static SimpleAddress[] FillDynamicArrayFromRangeInfo(RpnFormula f, IRangeInfo array, RangeHashset rd, RpnOptimizedDependencyChain depChain);
    internal static SimpleAddress[] FillDynamicArraySingleValue(RpnFormula f, CompileResult result, RangeHashset rd, RpnOptimizedDependencyChain depChain);
    private static void CleanupSharedFormulaValues(RpnFormula f, ExcelWorksheet ws, SharedFormula sf, int endRow, int endCol);
    private static SimpleAddress[] GetDirtyRange(int fromRow, int fromCol, int toRow, int toCol, int prevToRow, int prevToCol);
    private static void ClearDynamicFormulaIndex(ExcelWorksheet ws, int fromRow, int fromCol, int toRow, int toCol);
    private static void SetDynamicFormulaIndex(ExcelWorksheet ws, int fromRow, int fromCol, int toRow, int toCol, int formulaIndex);
}
internal class OfficeOpenXml.FormulaParsing.CircularReference : ValueType {
    internal ulong FromCell;
    internal ulong ToCell;
    public CircularReference(ulong fromCell, ulong toCell);
}
internal class OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider : ExcelDataProvider {
    private ExcelPackage _package;
    private ParsingContext _context;
    private ExcelWorksheet _currentWorksheet;
    private RangeAddressFactory _rangeAddressFactory;
    private Dictionary`2<ulong, INameInfo> _names;
    protected ParsingContext ParsingContext { get; }
    public int ExcelMaxColumns { get; }
    public int ExcelMaxRows { get; }
    public EpplusExcelDataProvider(ExcelPackage package);
    public EpplusExcelDataProvider(ExcelPackage package, ParsingContext ctx);
    protected ParsingContext get_ParsingContext();
    public virtual IEnumerable`1<string> GetWorksheets();
    public virtual ExcelNamedRangeCollection GetWorksheetNames(int wsIx);
    public virtual ExcelNamedRangeCollection GetWorksheetNames(string worksheetName);
    public virtual int GetWorksheetIndex(string worksheetName);
    public virtual ExcelTable GetExcelTable(string name);
    public virtual ExcelNamedRangeCollection GetWorkbookNameValues();
    internal virtual IRangeInfo GetRange(FormulaRangeAddress range);
    public virtual IRangeInfo GetRange(string worksheet, int fromRow, int fromCol, int toRow, int toCol);
    public virtual IRangeInfo GetRange(string worksheet, int row, int column, string address);
    public virtual IRangeInfo GetRange(int wsIx, int row, int column);
    public virtual IRangeInfo GetRange(string worksheet, string address);
    private IRangeInfo GetRangeInternal(ExcelAddressBase addr);
    private IRangeInfo GetExternalRangeInfo(ExcelAddressBase addr, string wsName, ExcelWorkbook wb);
    private static ExcelAddress ConvertToA1C1(ExcelPackage package, ExcelAddressBase addr, ExcelAddressBase refAddress);
    private INameInfo GetExternalName(string name, ParsingContext ctx);
    private INameInfo GetExternalName(int extIx, int wsIx, string name, ParsingContext ctx);
    private INameInfo GetLocalName(ExcelPackage package, int extIx, int wsIx, string name, ParsingContext ctx);
    private static INameInfo GetNameFromCache(ExcelExternalWorkbook externalWorkbook, int wsIx, string name, ParsingContext ctx);
    private static INameInfo GetNameFromCache(ExcelExternalWorkbook externalWorkbook, string name, ParsingContext ctx);
    public virtual IEnumerable`1<object> GetRangeValues(string address);
    public object GetValue(int row, int column);
    public bool IsMerged(int row, int column);
    public bool IsHidden(int row, int column);
    public virtual object GetCellValue(string sheetName, int row, int col);
    public virtual object GetCellValue(int wsIx, int row, int col);
    public virtual ExcelCellAddress GetDimensionEnd(int wsIx);
    private void SetCurrentWorksheet(ExcelAddressInfo addressInfo);
    private void SetCurrentWorksheet(string worksheetName);
    private void SetCurrentWorksheet(int wsIx);
    public virtual void Dispose();
    public virtual int get_ExcelMaxColumns();
    public virtual int get_ExcelMaxRows();
    public virtual string GetRangeFormula(string worksheetName, int row, int column);
    public virtual object GetRangeValue(string worksheetName, int row, int column);
    public virtual string GetFormat(object value, string format);
    public virtual IList`1<Token> GetRangeFormulaTokens(string worksheetName, int row, int column);
    public virtual bool IsRowHidden(string worksheetName, int row);
    public virtual void Reset();
    public virtual bool IsExternalName(string name);
    public virtual INameInfo GetName(int externalRef, int wsIx, string name);
    public virtual INameInfo GetName(ExcelNamedRange nameItem);
    public virtual ulong GetCellId(int wsIx, int row, int col);
}
internal class OfficeOpenXml.FormulaParsing.EpplusNameValueProvider : object {
    private ExcelDataProvider _excelDataProvider;
    private ExcelNamedRangeCollection _values;
    internal EpplusNameValueProvider(ExcelDataProvider excelDataProvider);
    public virtual bool IsNamedValue(string key, string ws);
    public virtual object GetNamedValue(string key);
    public virtual object GetNamedValue(string key, string worksheet);
    public virtual void Reload();
}
[FlagsAttribute]
public enum OfficeOpenXml.FormulaParsing.Excel.ExcelCellState : Enum {
    public int value__;
    public static ExcelCellState HiddenCell;
    public static ExcelCellState ContainsError;
    public static ExcelCellState IsResultOfSubtotal;
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.ArgumentCollectionUtil : object {
    private DoubleEnumerableArgConverter _doubleEnumerableArgConverter;
    private ObjectEnumerableArgConverter _objectEnumerableArgConverter;
    public ArgumentCollectionUtil(DoubleEnumerableArgConverter doubleEnumerableArgConverter, ObjectEnumerableArgConverter objectEnumerableArgConverter);
    public virtual IEnumerable`1<ExcelDoubleCellValue> ArgsToDoubleEnumerable(bool ignoreHidden, bool ignoreErrors, bool ignoreSubtotalAggregate, IEnumerable`1<FunctionArgument> arguments, ParsingContext context, bool ignoreNonNumeric);
    public virtual IEnumerable`1<object> ArgsToObjectEnumerable(bool ignoreHidden, bool ignoreErrors, bool ignoreNestedSubtotalAggregate, IEnumerable`1<FunctionArgument> arguments, ParsingContext context);
    public virtual IEnumerable`1<object> ArgsToObjectEnumerable(bool ignoreHidden, bool ignoreErrors, IEnumerable`1<FunctionArgument> arguments, ParsingContext context);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.ArgumentParser : object {
    public abstract virtual object Parse(object obj);
    public abstract virtual object Parse(object obj, RoundingMethod roundingMethod);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.ArgumentParserFactory : object {
    public virtual ArgumentParser CreateArgumentParser(DataType dataType);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.ArgumentParsers : object {
    private static object _syncRoot;
    private Dictionary`2<DataType, ArgumentParser> _parsers;
    private ArgumentParserFactory _parserFactory;
    public ArgumentParsers(ArgumentParserFactory factory);
    private static ArgumentParsers();
    public ArgumentParser GetParser(DataType dataType);
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.ArrayBehaviourConfig : object {
    private List`1<int> _arrayParameterIndexes;
    [CompilerGeneratedAttribute]
private int <IgnoreNumberOfArgsFromStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArrayArgInterval>k__BackingField;
    public int IgnoreNumberOfArgsFromStart { get; public set; }
    public int ArrayArgInterval { get; public set; }
    public void SetArrayParameterIndexes(Int32[] indexes);
    [CompilerGeneratedAttribute]
public int get_IgnoreNumberOfArgsFromStart();
    [CompilerGeneratedAttribute]
public void set_IgnoreNumberOfArgsFromStart(int value);
    [CompilerGeneratedAttribute]
public int get_ArrayArgInterval();
    [CompilerGeneratedAttribute]
public void set_ArrayArgInterval(int value);
    public bool CanBeArrayArg(int argIx);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.BoolArgumentParser : ArgumentParser {
    public virtual object Parse(object obj);
    public virtual object Parse(object obj, RoundingMethod roundingMethod);
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.BuiltInFunctions : FunctionsModule {
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.CellStateHelper : object {
    private static bool ShouldIgnoreNestedSubtotal(bool ignoreNestedSubtotalAndAggregate, ulong cellId, ParsingContext context);
    internal static bool ShouldIgnore(bool ignoreHiddenValues, bool ignoreNestedSubtotalAndAggregate, ICellInfo c, ParsingContext context);
    internal static bool ShouldIgnore(bool ignoreHiddenValues, ICellInfo c, ParsingContext context);
    internal static bool ShouldIgnore(bool ignoreHiddenValues, bool ignoreNonNumeric, ICellInfo c, ParsingContext context, bool ignoreNestedSubtotalAndAggregate);
    internal static bool ShouldIgnore(bool ignoreHiddenValues, bool ignoreNestedSubtotalAndAggregate, FunctionArgument arg, ParsingContext context);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.CollectionFlattener`1 : object {
    public virtual IEnumerable`1<T> FuncArgsToFlatEnumerable(IEnumerable`1<FunctionArgument> arguments, Action`2<FunctionArgument, IList`1<T>> convertFunc);
    private void FuncArgsToFlatEnumerable(IEnumerable`1<FunctionArgument> arguments, List`1<T> argList, Action`2<FunctionArgument, IList`1<T>> convertFunc);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.CompileResultValidator : object {
    private static CompileResultValidator _empty;
    public static CompileResultValidator Empty { get; }
    public abstract virtual void Validate(object obj);
    public static CompileResultValidator get_Empty();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.CompileResultValidators : object {
    private Dictionary`2<DataType, CompileResultValidator> _validators;
    private CompileResultValidator CreateOrGet(DataType dataType);
    public CompileResultValidator GetValidator(DataType dataType);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.DatabaseFunction : ExcelFunction {
    protected IEnumerable`1<double> GetMatchingValues(IEnumerable`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Daverage : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dcount : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.DcountA : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private bool ShouldCount(object value);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dget : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dmax : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dmin : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dproduct : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dstdev : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.DstdevP : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dsum : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dvar : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.Dvarp : DatabaseFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.ExcelDatabase : object {
    private ExcelDataProvider _dataProvider;
    private int _fromCol;
    private int _toCol;
    private int _fieldRow;
    private int _endRow;
    private string _worksheet;
    private int _rowIndex;
    private List`1<ExcelDatabaseField> _fields;
    public IEnumerable`1<ExcelDatabaseField> Fields { get; }
    public bool HasMoreRows { get; }
    public ExcelDatabase(ExcelDataProvider dataProvider, string range);
    public IEnumerable`1<ExcelDatabaseField> get_Fields();
    private void Initialize();
    private object GetCellValue(int row, int col);
    public bool get_HasMoreRows();
    public ExcelDatabaseRow Read();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.ExcelDatabaseCriteria : object {
    private ExcelDataProvider _dataProvider;
    private int _fromCol;
    private int _toCol;
    private string _worksheet;
    private int _fieldRow;
    private Dictionary`2<ExcelDatabaseCriteriaField, object> _criterias;
    public IDictionary`2<ExcelDatabaseCriteriaField, object> Items { get; }
    internal ExcelDatabaseCriteria(ExcelDataProvider dataProvider, string range);
    private void Initialize();
    public virtual IDictionary`2<ExcelDatabaseCriteriaField, object> get_Items();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.ExcelDatabaseCriteriaField : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FieldIndex>k__BackingField;
    public string FieldName { get; private set; }
    public Nullable`1<int> FieldIndex { get; private set; }
    public ExcelDatabaseCriteriaField(string fieldName);
    public ExcelDatabaseCriteriaField(int fieldIndex);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FieldIndex();
    [CompilerGeneratedAttribute]
private void set_FieldIndex(Nullable`1<int> value);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.ExcelDatabaseField : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColIndex>k__BackingField;
    public string FieldName { get; private set; }
    public int ColIndex { get; private set; }
    public ExcelDatabaseField(string fieldName, int colIndex);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public int get_ColIndex();
    [CompilerGeneratedAttribute]
private void set_ColIndex(int value);
}
[DefaultMemberAttribute("Item")]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.ExcelDatabaseRow : object {
    private Dictionary`2<int, string> _fieldIndexes;
    private Dictionary`2<string, object> _items;
    private int _colIndex;
    public object Item { get; public set; }
    public object Item { get; }
    public object get_Item(string field);
    public void set_Item(string field, object value);
    public object get_Item(int index);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Database.RowMatcher : object {
    private WildCardValueMatcher2 _wildCardValueMatcher;
    private ExpressionEvaluator _expressionEvaluator;
    public RowMatcher(ParsingContext ctx);
    public RowMatcher(WildCardValueMatcher2 wildCardValueMatcher, ExpressionEvaluator expressionEvaluator);
    public bool IsMatch(ExcelDatabaseRow row, ExcelDatabaseCriteria criteria);
    private bool Evaluate(object obj, string expression);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Date : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.DateDif : DateParsingFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double DateDiffYears(DateTime start, DateTime end);
    private double DateDiffMonths(DateTime start, DateTime end);
    private double DateDiffMonthsY(DateTime start, DateTime end);
    private DateTime GetStartYearEndDate(DateTime start, DateTime end);
    private DateTime GetStartYearEndDateY(DateTime start, DateTime end);
    private DateTime GetStartYearEndDateMd(DateTime start, DateTime end);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.DateParsingFunction : ExcelFunction {
    protected DateTime ParseDate(IList`1<FunctionArgument> arguments, object dateObj, int argIndex, ExcelErrorValue& error);
    protected DateTime ParseDate(IList`1<FunctionArgument> arguments, object dateObj, ExcelErrorValue& error);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.DateValue : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal CompileResult Execute(string dateString);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Day : DateParsingFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Days : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Days360 : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private int GetNumWholeMonths(DateTime dt1, DateTime dt2);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Edate : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual int get_ArgumentMinLength();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Eomonth : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Hour : DateParsingFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal enum OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Implementations.Days360Calctype : Enum {
    public int value__;
    public static Days360Calctype European;
    public static Days360Calctype Us;
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Implementations.Days360Impl : object {
    internal static int CalcDays360(DateTime startDate, DateTime endDate, Days360Calctype calcType);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.IsoWeekNum : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private int WeekNumber(DateTime fromDate);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Minute : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Month : DateParsingFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Networkdays : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.NetworkdaysIntl : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Now : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool IsVolatile { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsVolatile();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Second : DateParsingFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Time : TimeBaseFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.TimeBaseFunction : ExcelFunction {
    [CompilerGeneratedAttribute]
private TimeStringParser <TimeStringParser>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SerialNumber>k__BackingField;
    protected TimeStringParser TimeStringParser { get; private set; }
    protected double SerialNumber { get; private set; }
    protected double SecondsInADay { get; }
    [CompilerGeneratedAttribute]
protected TimeStringParser get_TimeStringParser();
    [CompilerGeneratedAttribute]
private void set_TimeStringParser(TimeStringParser value);
    [CompilerGeneratedAttribute]
protected double get_SerialNumber();
    [CompilerGeneratedAttribute]
private void set_SerialNumber(double value);
    protected double get_SecondsInADay();
    protected double GetTimeSerialNumber(double seconds);
    protected double GetSeconds(double serialNumber);
    protected double GetHour(double serialNumber);
    protected double GetMinute(double serialNumber);
    protected double GetSecond(double serialNumber);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.TimeString : object {
    private string _input;
    [CompilerGeneratedAttribute]
private int <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AmPm>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValidFormat>k__BackingField;
    public int Hour { get; private set; }
    public int Minute { get; private set; }
    public int Second { get; private set; }
    public string AmPm { get; private set; }
    public double SerialNumber { get; private set; }
    public bool IsValidFormat { get; private set; }
    public TimeString(string input);
    private void Initialize();
    private string SetAmPmPart(string input);
    private double GetSerialNumber(int hour, int minute, double second);
    private bool AreValidTimeValues(int hour, int minute, double second);
    private static bool IsValidDouble(string d);
    [CompilerGeneratedAttribute]
public int get_Hour();
    [CompilerGeneratedAttribute]
private void set_Hour(int value);
    [CompilerGeneratedAttribute]
public int get_Minute();
    [CompilerGeneratedAttribute]
private void set_Minute(int value);
    [CompilerGeneratedAttribute]
public int get_Second();
    [CompilerGeneratedAttribute]
private void set_Second(int value);
    [CompilerGeneratedAttribute]
public string get_AmPm();
    [CompilerGeneratedAttribute]
private void set_AmPm(string value);
    [CompilerGeneratedAttribute]
public double get_SerialNumber();
    [CompilerGeneratedAttribute]
private void set_SerialNumber(double value);
    [CompilerGeneratedAttribute]
public bool get_IsValidFormat();
    [CompilerGeneratedAttribute]
private void set_IsValidFormat(bool value);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.TimeStringParser : object {
    private static string RegEx24;
    private static string RegEx12;
    private double GetSerialNumber(int hour, int minute, int second);
    private void ValidateValues(int hour, int minute, int second);
    public virtual double Parse(string input);
    public virtual bool CanParse(string input);
    private double InternalParse(string input);
    private double Parse12HourTimeString(string input);
    private double Parse24HourTimeString(string input);
    private static void GetValuesFromString(string input, Int32& hour, Int32& minute, Int32& second);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.TimeStringParserV2 : object {
    public virtual double Parse(string input);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.TimeValue : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal CompileResult Execute(string dateString);
    private double GetTimeValue(DateTime result);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Today : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool IsVolatile { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsVolatile();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Weekday : ExcelFunction {
    private static List`1<int> _oneBasedStartOnSunday;
    private static List`1<int> _oneBasedStartOnMonday;
    private static List`1<int> _zeroBasedStartOnSunday;
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    private static Weekday();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private bool IsValidSerialNumber(double serialNumber);
    private int CalculateDayOfWeek(DateTime dateTime, int returnType);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Weeknum : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workday : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.WorkdayIntl : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.AdditionalHolidayDays : object {
    private FunctionArgument _holidayArg;
    private List`1<DateTime> _holidayDates;
    public IEnumerable`1<DateTime> AdditionalDates { get; }
    public AdditionalHolidayDays(FunctionArgument holidayArg);
    public IEnumerable`1<DateTime> get_AdditionalDates();
    private void Initialize();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdays : object {
    private List`1<DayOfWeek> _holidayDays;
    public int NumberOfWorkdaysPerWeek { get; }
    public HolidayWeekdays(DayOfWeek[] holidayDays);
    public int get_NumberOfWorkdaysPerWeek();
    public bool IsHolidayWeekday(DateTime dateTime);
    public DateTime AdjustResultWithHolidays(DateTime resultDate, IEnumerable`1<FunctionArgument> arguments);
    public DateTime GetNextWorkday(DateTime date, WorkdayCalculationDirection direction);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.HolidayWeekdaysFactory : object {
    private DayOfWeek[] _dayOfWeekArray;
    public HolidayWeekdays Create(string weekdays);
    public HolidayWeekdays Create(int code);
}
internal enum OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculationDirection : Enum {
    public int value__;
    public static WorkdayCalculationDirection Forward;
    public static WorkdayCalculationDirection Backward;
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculator : object {
    private HolidayWeekdays _holidayWeekdays;
    public WorkdayCalculator(HolidayWeekdays holidayWeekdays);
    public WorkdayCalculatorResult CalculateNumberOfWorkdays(DateTime startDate, DateTime endDate);
    public WorkdayCalculatorResult CalculateWorkday(DateTime startDate, int nWorkDays);
    public WorkdayCalculatorResult ReduceWorkdaysWithHolidays(WorkdayCalculatorResult calculatedResult, FunctionArgument holidayArgument);
    public WorkdayCalculatorResult AdjustResultWithHolidays(WorkdayCalculatorResult calculatedResult, FunctionArgument holidayArgument);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Workdays.WorkdayCalculatorResult : object {
    [CompilerGeneratedAttribute]
private int <NumberOfWorkdays>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkdayCalculationDirection <Direction>k__BackingField;
    public int NumberOfWorkdays { get; }
    public DateTime StartDate { get; }
    public DateTime EndDate { get; }
    public WorkdayCalculationDirection Direction { get; public set; }
    public WorkdayCalculatorResult(int numberOfWorkdays, DateTime startDate, DateTime endDate, WorkdayCalculationDirection direction);
    [CompilerGeneratedAttribute]
public int get_NumberOfWorkdays();
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public WorkdayCalculationDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(WorkdayCalculationDirection value);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Year : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DateAndTime.Yearfrac : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double CalculateAcutalYear(DateTime dt1, DateTime dt2);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DecimalCompileResultValidator : CompileResultValidator {
    public virtual void Validate(object obj);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleArgParser : object {
    public static double Parse(object obj, ExcelErrorValue& error);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleArgumentParser : ArgumentParser {
    public virtual object Parse(object obj);
    public virtual object Parse(object obj, RoundingMethod roundingMethod);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableArgConverter : CollectionFlattener`1<ExcelDoubleCellValue> {
    public virtual IEnumerable`1<ExcelDoubleCellValue> ConvertArgs(bool ignoreHidden, bool ignoreErrors, bool ignoreSubtotalAggregate, IEnumerable`1<FunctionArgument> arguments, ParsingContext context, bool ignoreNonNumeric);
    public virtual IEnumerable`1<ExcelDoubleCellValue> ConvertArgsIncludingOtherTypes(IEnumerable`1<FunctionArgument> arguments, bool ignoreHidden);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableArgParser : object {
    private IEnumerable`1<FunctionArgument> _args;
    private ParsingContext _context;
    private DoubleEnumerableParseOptions _options;
    private List`1<double> _result;
    public DoubleEnumerableArgParser(IEnumerable`1<FunctionArgument> args, ParsingContext context, DoubleEnumerableParseOptions options);
    private void Parse(IEnumerable`1<FunctionArgument> args, DoubleEnumerableParseOptions options, ExcelErrorValue& error);
    public IList`1<double> GetResult(ExcelErrorValue& error);
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.DoubleEnumerableParseOptions : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreHiddenCells>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreNestedSubtotalAggregate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreNonNumeric>k__BackingField;
    public bool IgnoreErrors { get; public set; }
    public bool IgnoreHiddenCells { get; public set; }
    public bool IgnoreNestedSubtotalAggregate { get; public set; }
    public bool IgnoreNonNumeric { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreHiddenCells();
    [CompilerGeneratedAttribute]
public void set_IgnoreHiddenCells(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreNestedSubtotalAggregate();
    [CompilerGeneratedAttribute]
public void set_IgnoreNestedSubtotalAggregate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreNonNumeric();
    [CompilerGeneratedAttribute]
public void set_IgnoreNonNumeric(bool value);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.EmptyCompileResultValidator : CompileResultValidator {
    public virtual void Validate(object obj);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BesselI : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BesselJ : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BesselK : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BesselY : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Bin2Dec : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Bin2Hex : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Bin2Oct : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BitAnd : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BitLshift : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BitOr : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BitRshift : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.BitXor : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Complex : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Conversions : object {
    private static Dictionary`2<string, Unit> _conversions;
    private static List`1<Prefix> _metricPrefixes;
    private static List`1<Prefix> _binaryPrefixes;
    private static bool _initialized;
    private static object _syncRoot;
    private static Conversions();
    private static void InitMetricPrefixList();
    private static void InitBinaryPrefixList();
    private static void AddMetricPrefix(string abbrevation);
    private static void AddBinaryPrefix(string abbrevation);
    private static void InitMetricPrefixes();
    private static void InitBinaryPrefixes();
    private static void Init();
    public static bool IsValidUnit(string unit);
    public static double Convert(double number, string fromUnit, string toUnit);
}
[FunctionMetadataAttribute]
public class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ConvertFunction : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Dec2Bin : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual int get_ArgumentMinLength();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Dec2Hex : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Dec2Oct : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Delta : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
public class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Erf : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Erfc : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ErfcPrecise : Erfc {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ErfPrecise : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.GeStep : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Hex2Bin : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Hex2Dec : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Hex2Oct : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImAbs : ImFunctionBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Imaginary : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImArgument : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImConjugate : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImCos : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImCosh : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImCot : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImCsc : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImCsch : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImDiv : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImExp : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImFunctionBase : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    protected void GetComplexNumbers(object arg, Double& real, Double& imag, String& imaginarySuffix);
    private static void GetNumbersFromPosition(Double& real, Double& imag, String& imaginarySuffix, string formula, int position);
    private static string GetImagString(string imagString, Double& imag, String& imaginarySuffix);
    protected object CreateImaginaryString(double realPart, double imagPart, string sign, string imSuffix);
    protected List`1<string> GetUniquePrefixes(String[] prefixes);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImLn : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImLog10 : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImLog2 : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.BesselBase : object {
    protected static double f_PI;
    protected static double f_PI_DIV_2;
    protected static double f_PI_DIV_4;
    protected static double f_2_DIV_PI;
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.BesselIimpl : BesselBase {
    public FinanceCalcResult`1<double> BesselI(double x, int n);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.BesselJImpl : BesselBase {
    public FinanceCalcResult`1<double> BesselJ(double x, int N);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.BesselKImpl : BesselBase {
    private static FinanceCalcResult`1<double> Besselk0(double fNum);
    private static FinanceCalcResult`1<double> Besselk1(double fNum);
    public FinanceCalcResult`1<double> BesselK(double fNum, int nOrder);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.BesselYImpl : BesselBase {
    private static FinanceCalcResult`1<double> Bessely0(double fX);
    private static FinanceCalcResult`1<double> Bessely1(double fX);
    public FinanceCalcResult`1<double> BesselY(double fNum, int nOrder);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.ComplexNumber : object {
    [CompilerGeneratedAttribute]
private double <Real>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Imaginary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImagSuffix>k__BackingField;
    public double Real { get; }
    public double Imaginary { get; }
    public string ImagSuffix { get; }
    public ComplexNumber(double real, double imaginary, string imagSuffix);
    [CompilerGeneratedAttribute]
public double get_Real();
    [CompilerGeneratedAttribute]
public double get_Imaginary();
    [CompilerGeneratedAttribute]
public string get_ImagSuffix();
    public ComplexNumber GetProduct(ComplexNumber other);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImPower : ImFunctionBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImProduct : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImReal : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImSec : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImSech : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImSin : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImSinh : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImSqrt : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImSub : ImFunctionBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImSum : ImFunctionBase {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.ImTan : ImFunctionBase {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Oct2Bin : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Oct2Dec : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Oct2Hex : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.TemperatureConverter : object {
    public static Dictionary`2<string, Func`2<double, double>> Conversions;
    private static TemperatureConverter();
    private static double Cel2Fah(double c);
    private static double Fah2Cel(double f);
    private static double Cel2Kel(double c);
    private static double Kel2Cel(double k);
    private static double Fah2Kel(double f);
    private static double Kel2Fah(double k);
    public static bool IsValidUnit(string candidate);
    public static bool IsTempMapping(string from, string to);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.YieldDisc : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[DebuggerDisplayAttribute("{Value}")]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelDoubleCellValue : ValueType {
    public Nullable`1<int> CellRow;
    public Nullable`1<int> CellCol;
    public double Value;
    public ExcelDoubleCellValue(double val);
    public ExcelDoubleCellValue(double val, int cellRow, int cellCol);
    public static double op_Implicit(ExcelDoubleCellValue d);
    public static ExcelDoubleCellValue op_Implicit(double d);
    public sealed virtual int CompareTo(ExcelDoubleCellValue other);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ExcelDoubleCellValue a, ExcelDoubleCellValue b);
    public static bool op_Equality(ExcelDoubleCellValue a, double b);
    public static bool op_Inequality(ExcelDoubleCellValue a, ExcelDoubleCellValue b);
    public static bool op_Inequality(ExcelDoubleCellValue a, double b);
}
public abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction : object {
    private ArgumentCollectionUtil _argumentCollectionUtil;
    private ArgumentParsers _argumentParsers;
    private CompileResultValidators _compileResultValidators;
    protected int NumberOfSignificantFigures;
    private ArrayBehaviourConfig _arrayConfig;
    [CompilerGeneratedAttribute]
private ExcelFunctionParametersInfo <ParametersInfo>k__BackingField;
    internal ArrayBehaviourConfig ArrayBehaviourConfig { get; }
    public int ArgumentMinLength { get; }
    public bool IsErrorHandlingFunction { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public bool HandlesVariables { get; }
    public bool IsVolatile { get; }
    public bool ReturnsReference { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public string NamespacePrefix { get; }
    internal ExcelFunction(ArgumentCollectionUtil argumentCollectionUtil, ArgumentParsers argumentParsers, CompileResultValidators compileResultValidators);
    internal ArrayBehaviourConfig get_ArrayBehaviourConfig();
    public abstract virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal CompileResult ExecuteInternal(IList`1<FunctionArgument> arguments, ParsingContext context);
    public abstract virtual int get_ArgumentMinLength();
    public virtual void GetNewParameterAddress(IList`1<CompileResult> args, int index, Queue`1& addresses);
    public virtual bool get_IsErrorHandlingFunction();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual bool get_HandlesVariables();
    protected object GetFirstValue(IEnumerable`1<FunctionArgument> val);
    [ObsoleteAttribute("Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.")]
protected void ValidateArguments(IEnumerable`1<FunctionArgument> arguments, int minLength, eErrorType errorTypeToThrow);
    [ObsoleteAttribute("Don't use this method from EPPlus 7.x and up. Use property ArgumentMinLength instead.")]
protected void ValidateArguments(IEnumerable`1<FunctionArgument> arguments, int minLength);
    protected string ArgToAddress(IList`1<FunctionArgument> arguments, int index);
    protected int ArgToInt(IList`1<FunctionArgument> arguments, int index, ExcelErrorValue& error, int emptyValue);
    protected int ArgToInt(IList`1<FunctionArgument> arguments, int index, bool ignoreErrors, ExcelErrorValue& error);
    protected int ArgToInt(IList`1<FunctionArgument> arguments, int index, RoundingMethod roundingMethod);
    protected string ArgToString(IList`1<FunctionArgument> arguments, int index);
    protected double ArgToDecimal(object obj, ExcelErrorValue& error);
    protected double ArgToDecimal(object obj, PrecisionAndRoundingStrategy precisionAndRoundingStrategy, ExcelErrorValue& error);
    protected double ArgToDecimal(IList`1<FunctionArgument> arguments, int index, ExcelErrorValue& error, PrecisionAndRoundingStrategy precisionAndRoundingStrategy);
    protected double ArgToDecimal(IList`1<FunctionArgument> arguments, int index, double valueIfNull, ExcelErrorValue& error);
    protected Nullable`1<double> GetDecimalSingleArgument(FunctionArgument arg);
    protected IRangeInfo ArgToRangeInfo(IList`1<FunctionArgument> arguments, int index);
    protected internal static double Divide(double left, double right);
    protected bool IsNumericString(object value);
    protected bool IsInteger(object n);
    protected bool ArgToBool(IList`1<FunctionArgument> arguments, int index);
    protected bool ArgToBool(IList`1<FunctionArgument> arguments, int index, bool valueIfEmpty);
    protected void ThrowArgumentExceptionIf(Func`1<bool> condition, string message);
    protected void ThrowArgumentExceptionIf(Func`1<bool> condition, string message, Object[] formats);
    protected void ThrowExcelErrorValueException(eErrorType errorType);
    protected void ThrowExcelErrorValueException(ExcelErrorValue value);
    protected void ThrowExcelErrorValueExceptionIf(Func`1<bool> condition, eErrorType errorType);
    protected bool IsNumeric(object val);
    protected bool IsBool(object val);
    protected bool IsString(object val, bool allowNullOrEmpty);
    protected bool AreEqual(double d1, double d2);
    protected virtual IList`1<double> ArgsToDoubleEnumerable(IEnumerable`1<FunctionArgument> arguments, ParsingContext context, ExcelErrorValue& error);
    protected virtual IList`1<double> ArgsToDoubleEnumerable(IEnumerable`1<FunctionArgument> arguments, ParsingContext context, Action`1<DoubleEnumerableParseOptions> configHandler, ExcelErrorValue& error);
    protected virtual IList`1<double> ArgsToDoubleEnumerable(FunctionArgument argument, ParsingContext context, Action`1<DoubleEnumerableParseOptions> configHandler, ExcelErrorValue& error);
    protected virtual IList`1<double> ArgsToDoubleEnumerable(FunctionArgument argument, ParsingContext context, ExcelErrorValue& error);
    protected virtual IEnumerable`1<object> ArgsToObjectEnumerable(bool ignoreHiddenCells, bool ignoreErrors, bool ignoreNestedSubtotalAggregate, IEnumerable`1<FunctionArgument> arguments, ParsingContext context);
    protected CompileResult CreateResult(object result, DataType dataType);
    protected CompileResult CreateResult(object result, DataType dataType, FormulaRangeAddress address);
    protected CompileResult CreateDynamicArrayResult(object result, DataType dataType);
    protected CompileResult CreateDynamicArrayResult(object result, DataType dataType, FormulaRangeAddress address);
    protected CompileResult CreateAddressResult(IRangeInfo result, DataType dataType);
    protected CompileResult CreateResult(eErrorType errorType);
    protected void CheckForAndHandleExcelError(FunctionArgument arg, ExcelErrorValue& err);
    protected void CheckForAndHandleExcelError(ICellInfo cell, ExcelErrorValue& err);
    protected CompileResult GetResultByObject(object result);
    public virtual bool get_IsVolatile();
    public virtual bool get_ReturnsReference();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
    [CompilerGeneratedAttribute]
public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual string get_NamespacePrefix();
}
public enum OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionArrayBehaviour : Enum {
    public int value__;
    public static ExcelFunctionArrayBehaviour None;
    public static ExcelFunctionArrayBehaviour Custom;
    public static ExcelFunctionArrayBehaviour FirstArgCouldBeARange;
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionParametersInfo : object {
    private Func`2<int, FunctionParameterInformation> _getParameter;
    public static ExcelFunctionParametersInfo Default { get; }
    public bool HasNormalArguments { get; }
    public ExcelFunctionParametersInfo(Func`2<int, FunctionParameterInformation> getParameter);
    public static ExcelFunctionParametersInfo get_Default();
    public bool get_HasNormalArguments();
    public virtual FunctionParameterInformation GetParameterInfo(int argumentIndex);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunctionTextBase : ExcelFunction {
    protected string ArgDelimiterCollectionToString(IList`1<FunctionArgument> arguments, int index, CompileResult& error);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Accrint : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double CalculateInterest(FinancialDay issue, FinancialDay firstInterest, FinancialDay settlement, double rate, double par, int frequency, DayCountBasis basis, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.AccrintM : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Coupdaybs : CoupFunctionBase`1<int> {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    protected virtual FinanceCalcResult`1<int> ExecuteFunction(FinancialDay settlementDate, FinancialDay maturityDate, int frequency, DayCountBasis basis);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Coupdays : CoupFunctionBase`1<double> {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    protected virtual FinanceCalcResult`1<double> ExecuteFunction(FinancialDay settlementDate, FinancialDay maturityDate, int frequency, DayCountBasis basis);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Coupdaysnc : CoupFunctionBase`1<double> {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    protected virtual FinanceCalcResult`1<double> ExecuteFunction(FinancialDay settlementDate, FinancialDay maturityDate, int frequency, DayCountBasis basis);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.CoupFunctionBase`1 : ExcelFunction {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    protected abstract virtual FinanceCalcResult`1<T> ExecuteFunction(FinancialDay settlementDate, FinancialDay maturityDate, int frequency, DayCountBasis basis);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Coupncd : CoupFunctionBase`1<DateTime> {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    protected virtual FinanceCalcResult`1<DateTime> ExecuteFunction(FinancialDay settlementDate, FinancialDay maturityDate, int frequency, DayCountBasis basis);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Coupnum : CoupFunctionBase`1<int> {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    protected virtual FinanceCalcResult`1<int> ExecuteFunction(FinancialDay settlementDate, FinancialDay maturityDate, int frequency, DayCountBasis basis);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Couppcd : CoupFunctionBase`1<DateTime> {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    protected virtual FinanceCalcResult`1<DateTime> ExecuteFunction(FinancialDay settlementDate, FinancialDay maturityDate, int frequency, DayCountBasis basis);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Cumipmt : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Cumprinc : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static double GetInterest(double rate, double remainingAmount);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Db : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Ddb : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Disc : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.DollarDe : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.DollarFr : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Duration : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Effect : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
public enum OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.DayCountBasis : Enum {
    public int value__;
    public static DayCountBasis US_30_360;
    public static DayCountBasis Actual_Actual;
    public static DayCountBasis Actual_360;
    public static DayCountBasis Actual_365;
    public static DayCountBasis European_30_360;
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay : object {
    [CompilerGeneratedAttribute]
private short <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Day>k__BackingField;
    public short Year { get; public set; }
    public short Month { get; public set; }
    public short Day { get; public set; }
    public bool IsLastDayOfFebruary { get; }
    public bool IsLastDayOfMonth { get; }
    protected DayCountBasis Basis { get; }
    public FinancialDay(DateTime date);
    public FinancialDay(int year, int month, int day);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public short get_Year();
    [CompilerGeneratedAttribute]
public void set_Year(short value);
    [CompilerGeneratedAttribute]
public short get_Month();
    [CompilerGeneratedAttribute]
public void set_Month(short value);
    [CompilerGeneratedAttribute]
public short get_Day();
    [CompilerGeneratedAttribute]
public void set_Day(short value);
    public bool get_IsLastDayOfFebruary();
    public bool get_IsLastDayOfMonth();
    public DateTime ToDateTime();
    public FinancialDay SubtractYears(int years);
    public int CompareTo(FinancialDay other);
    public static bool op_GreaterThan(FinancialDay a, FinancialDay b);
    public static bool op_LessThan(FinancialDay a, FinancialDay b);
    public static bool op_LessThanOrEqual(FinancialDay a, FinancialDay b);
    public static bool op_GreaterThanOrEqual(FinancialDay a, FinancialDay b);
    public static bool op_Equality(FinancialDay a, FinancialDay b);
    public static bool op_Inequality(FinancialDay a, FinancialDay b);
    public FinancialDay SubtractMonths(int months, short day);
    public FinancialDay AddMonths(int months, short day);
    protected abstract virtual FinancialDay Factory(short year, short month, short day);
    internal DayCountBasis GetBasis();
    protected abstract virtual DayCountBasis get_Basis();
    public double SubtractDays(FinancialDay day);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay_Actual_360 : FinancialDay {
    protected DayCountBasis Basis { get; }
    public FinancialDay_Actual_360(DateTime date);
    public FinancialDay_Actual_360(int year, int month, int day);
    protected virtual DayCountBasis get_Basis();
    protected virtual FinancialDay Factory(short year, short month, short day);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay_Actual_365 : FinancialDay {
    protected DayCountBasis Basis { get; }
    public FinancialDay_Actual_365(DateTime date);
    public FinancialDay_Actual_365(int year, int month, int day);
    protected virtual DayCountBasis get_Basis();
    protected virtual FinancialDay Factory(short year, short month, short day);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay_Actual_Actual : FinancialDay {
    protected DayCountBasis Basis { get; }
    public FinancialDay_Actual_Actual(DateTime date);
    public FinancialDay_Actual_Actual(int year, int month, int day);
    protected virtual DayCountBasis get_Basis();
    protected virtual FinancialDay Factory(short year, short month, short day);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay_European_30_360 : FinancialDay {
    protected DayCountBasis Basis { get; }
    public FinancialDay_European_30_360(DateTime date);
    public FinancialDay_European_30_360(int year, int month, int day);
    protected virtual DayCountBasis get_Basis();
    protected virtual FinancialDay Factory(short year, short month, short day);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay_Us_30_360 : FinancialDay {
    protected DayCountBasis Basis { get; }
    public FinancialDay_Us_30_360(DateTime date);
    public FinancialDay_Us_30_360(int year, int month, int day);
    protected virtual DayCountBasis get_Basis();
    protected virtual FinancialDay Factory(short year, short month, short day);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDayFactory : object {
    internal static FinancialDay Create(DateTime date, DayCountBasis basis);
    internal static FinancialPeriod CreatePeriod(DateTime start, DateTime end, DayCountBasis basis);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDays_Actual_360 : FinancialDaysBase {
    public double DaysPerYear { get; }
    public sealed virtual double GetDaysBetweenDates(DateTime startDate, DateTime endDate);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate, bool returnZeroIfNegative);
    protected virtual double GetDaysBetweenDates(FinancialDay start, FinancialDay end, int basis);
    public sealed virtual double GetCoupdays(FinancialDay start, FinancialDay end, int frequency);
    public sealed virtual double get_DaysPerYear();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDays_Actual_365 : FinancialDaysBase {
    public double DaysPerYear { get; }
    public sealed virtual double GetDaysBetweenDates(DateTime startDate, DateTime endDate);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate, bool returnZeroIfNegative);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate);
    protected virtual double GetDaysBetweenDates(FinancialDay start, FinancialDay end, int basis);
    public sealed virtual double GetCoupdays(FinancialDay start, FinancialDay end, int frequency);
    public sealed virtual double get_DaysPerYear();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDays_Actual_Actual : FinancialDaysBase {
    public double DaysPerYear { get; }
    public sealed virtual double GetDaysBetweenDates(DateTime startDate, DateTime endDate);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate, bool returnZeroIfNegative);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate);
    public sealed virtual double GetCoupdays(FinancialDay start, FinancialDay end, int frequency);
    protected virtual double GetDaysBetweenDates(FinancialDay start, FinancialDay end, int basis, bool returnZeroIfNegative);
    protected virtual double GetDaysBetweenDates(FinancialDay start, FinancialDay end, int basis);
    public sealed virtual double get_DaysPerYear();
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDaysBase : object {
    public sealed virtual FinancialPeriod GetCouponPeriod(FinancialDay settlementDay, FinancialDay maturityDay, int frequency);
    public sealed virtual IEnumerable`1<FinancialPeriod> GetCouponPeriodsBackwards(FinancialDay settlement, FinancialDay date, int frequency);
    private FinancialPeriod CreateCalendarPeriod(DateTime startDate, int frequency, DayCountBasis basis, bool createFuturePeriod);
    private FinancialPeriod GetSettlementCalendarYearPeriod(FinancialDay date, int frequency);
    public sealed virtual IEnumerable`1<FinancialPeriod> GetCalendarYearPeriodsBackwards(FinancialDay settlement, FinancialDay date, int frequency);
    public sealed virtual IEnumerable`1<FinancialPeriod> GetCalendarYearPeriodsBackwards(FinancialDay settlement, FinancialDay date, int frequency, int additionalPeriods);
    public sealed virtual int GetNumberOfCouponPeriods(FinancialDay settlementDay, FinancialDay maturityDay, int frequency);
    protected virtual double GetDaysBetweenDates(FinancialDay start, FinancialDay end, int basis, bool returnZeroIfNegative);
    protected virtual double GetDaysBetweenDates(FinancialDay start, FinancialDay end, int basis);
    protected double ActualDaysInLeapYear(FinancialDay start, FinancialDay end);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDaysEuropean_30_360 : FinancialDaysBase {
    public double DaysPerYear { get; }
    public sealed virtual double GetDaysBetweenDates(DateTime startDate, DateTime endDate);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate, bool returnZeroIfNegative);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate);
    public sealed virtual double GetCoupdays(FinancialDay start, FinancialDay end, int frequency);
    public sealed virtual double get_DaysPerYear();
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDaysFactory : object {
    internal static IFinanicalDays Create(DayCountBasis basis);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDaysUs_30_360 : FinancialDaysBase {
    public double DaysPerYear { get; }
    public sealed virtual double GetDaysBetweenDates(DateTime startDate, DateTime endDate);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate, bool returnZeroIfNegative);
    public sealed virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate);
    public sealed virtual double GetCoupdays(FinancialDay start, FinancialDay end, int frequency);
    public sealed virtual double get_DaysPerYear();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialPeriod : object {
    [CompilerGeneratedAttribute]
private FinancialDay <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private FinancialDay <End>k__BackingField;
    internal FinancialDay Start { get; }
    internal FinancialDay End { get; }
    public FinancialPeriod(FinancialDay start, FinancialDay end);
    [CompilerGeneratedAttribute]
internal FinancialDay get_Start();
    [CompilerGeneratedAttribute]
internal FinancialDay get_End();
    public virtual string ToString();
}
internal interface OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.IFinanicalDays {
    public double DaysPerYear { get; }
    public abstract virtual double GetDaysBetweenDates(DateTime startDate, DateTime endDate);
    public abstract virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate);
    public abstract virtual double GetDaysBetweenDates(FinancialDay startDate, FinancialDay endDate, bool returnZeroIfNegative);
    public abstract virtual IEnumerable`1<FinancialPeriod> GetCouponPeriodsBackwards(FinancialDay settlement, FinancialDay date, int frequency);
    public abstract virtual IEnumerable`1<FinancialPeriod> GetCalendarYearPeriodsBackwards(FinancialDay settlement, FinancialDay date, int frequency);
    public abstract virtual IEnumerable`1<FinancialPeriod> GetCalendarYearPeriodsBackwards(FinancialDay settlement, FinancialDay date, int frequency, int additionalPeriods);
    public abstract virtual FinancialPeriod GetCouponPeriod(FinancialDay settlementDate, FinancialDay maturityDate, int frequency);
    public abstract virtual int GetNumberOfCouponPeriods(FinancialDay settlementDate, FinancialDay maturityDate, int frequency);
    public abstract virtual double GetCoupdays(FinancialDay startDate, FinancialDay endDate, int frequency);
    public abstract virtual double get_DaysPerYear();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Fv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FvSchedule : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
public interface OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.IFvProvider {
    public abstract virtual double GetFv(double Rate, double NPer, double Pmt, double PV, PmtDue Due);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CashFlowHelper : object {
    private static double GetAnnuityFactor(double rate, double nper, PmtDue type);
    private static double FvCalc(double rate, double nper, double pmt, double pv, PmtDue type);
    public static double Fv(double rate, double nper, double pmt, double pv, PmtDue type);
    public static double Pv(double rate, double nper, double pmt, double fv, PmtDue type);
    public static double Npv(double rate, IEnumerable`1<double> payments);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.Coupbase : object {
    [CompilerGeneratedAttribute]
private FinancialDay <Settlement>k__BackingField;
    [CompilerGeneratedAttribute]
private FinancialDay <Maturity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Frequency>k__BackingField;
    [CompilerGeneratedAttribute]
private DayCountBasis <Basis>k__BackingField;
    protected FinancialDay Settlement { get; }
    protected FinancialDay Maturity { get; }
    protected int Frequency { get; }
    protected DayCountBasis Basis { get; }
    public Coupbase(FinancialDay settlement, FinancialDay maturity, int frequency, DayCountBasis basis);
    [CompilerGeneratedAttribute]
protected FinancialDay get_Settlement();
    [CompilerGeneratedAttribute]
protected FinancialDay get_Maturity();
    [CompilerGeneratedAttribute]
protected int get_Frequency();
    [CompilerGeneratedAttribute]
protected DayCountBasis get_Basis();
    protected FinancialDay GetCouponPeriodBySettlement();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CoupdaybsImpl : Coupbase {
    public CoupdaybsImpl(FinancialDay settlement, FinancialDay maturity, int frequency, DayCountBasis basis);
    public FinanceCalcResult`1<int> Coupdaybs();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CoupdaysImpl : Coupbase {
    public CoupdaysImpl(FinancialDay settlement, FinancialDay maturity, int frequency, DayCountBasis basis);
    internal FinanceCalcResult`1<double> GetCoupdays();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CoupdaysncImpl : Coupbase {
    public CoupdaysncImpl(FinancialDay settlement, FinancialDay maturity, int frequency, DayCountBasis basis);
    public FinanceCalcResult`1<double> Coupdaysnc();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CoupncdImpl : Coupbase {
    public CoupncdImpl(FinancialDay settlement, FinancialDay maturity, int frequency, DayCountBasis basis);
    internal FinanceCalcResult`1<DateTime> GetCoupncd();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CoupnumImpl : Coupbase {
    public CoupnumImpl(FinancialDay settlement, FinancialDay maturity, int frequency, DayCountBasis basis);
    internal FinanceCalcResult`1<int> GetCoupnum();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CouponPeriod : object {
    [CompilerGeneratedAttribute]
private FinancialDay <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private FinancialDay <End>k__BackingField;
    public FinancialDay Start { get; }
    public FinancialDay End { get; }
    public CouponPeriod(FinancialDay start, FinancialDay end);
    [CompilerGeneratedAttribute]
public FinancialDay get_Start();
    [CompilerGeneratedAttribute]
public FinancialDay get_End();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CouponProvider : object {
    public sealed virtual double GetCoupdaybs(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public sealed virtual double GetCoupdays(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public sealed virtual double GetCoupdaysnc(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public sealed virtual double GetCoupnum(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public sealed virtual DateTime GetCouppcd(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public sealed virtual DateTime GetCoupsncd(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CouppcdImpl : Coupbase {
    public CouppcdImpl(FinancialDay settlement, FinancialDay maturity, int frequency, DayCountBasis basis);
    internal FinanceCalcResult`1<DateTime> GetCouppcd();
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CumipmtImpl : object {
    public static FinanceCalcResult`1<double> GetCumipmt(double rate, int nPer, double pv, int startPeriod, int endPeriod, PmtDue type);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CumprincImpl : object {
    private IPmtProvider _pmtProvider;
    private IFvProvider _fvProvider;
    public CumprincImpl(IPmtProvider pmtProvider, IFvProvider fvProvider);
    public FinanceCalcResult`1<double> GetCumprinc(double rate, double nper, double pv, int startPeriod, int endPeriod, PmtDue type);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.DdbImpl : object {
    internal static FinanceCalcResult`1<double> Ddb(double Cost, double Salvage, double Life, double Period, double Factor);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.DurationImpl : object {
    private IYearFracProvider _yearFracProvider;
    private ICouponProvider _couponProvider;
    public DurationImpl(IYearFracProvider yearFracProvider, ICouponProvider couponProvider);
    public double GetDuration(DateTime settlement, DateTime maturity, double coupon, double yield, int nFreq, DayCountBasis nBase);
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.FinanceCalcResult`1 : object {
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasError>k__BackingField;
    [CompilerGeneratedAttribute]
private eErrorType <ExcelErrorType>k__BackingField;
    public T Result { get; private set; }
    public DataType DataType { get; private set; }
    public bool HasError { get; private set; }
    public eErrorType ExcelErrorType { get; private set; }
    public FinanceCalcResult`1(T result);
    public FinanceCalcResult`1(T result, DataType dataType);
    public FinanceCalcResult`1(eErrorType error);
    [CompilerGeneratedAttribute]
public T get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(T value);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
private void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public bool get_HasError();
    [CompilerGeneratedAttribute]
private void set_HasError(bool value);
    [CompilerGeneratedAttribute]
public eErrorType get_ExcelErrorType();
    [CompilerGeneratedAttribute]
private void set_ExcelErrorType(eErrorType value);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.FvImpl : object {
    internal static FinanceCalcResult`1<double> Fv(double Rate, double NPer, double Pmt, double PV, PmtDue Due);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.FvProvider : object {
    public sealed virtual double GetFv(double Rate, double NPer, double Pmt, double PV, PmtDue Due);
}
public interface OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.ICouponProvider {
    public abstract virtual double GetCoupdaybs(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public abstract virtual double GetCoupdays(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public abstract virtual double GetCoupdaysnc(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public abstract virtual DateTime GetCoupsncd(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public abstract virtual double GetCoupnum(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
    public abstract virtual DateTime GetCouppcd(DateTime settlement, DateTime maturity, int frequency, DayCountBasis basis);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.InternalMethods : object {
    internal static FinanceCalcResult`1<double> PMT_Internal(double Rate, double NPer, double PV, double FV, PmtDue Due);
    internal static double FV_Internal(double Rate, double NPer, double Pmt, double PV, PmtDue Due);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.IntRateImpl : object {
    internal static FinanceCalcResult`1<double> Intrate(DateTime settlement, DateTime maturity, double investment, double redemption, DayCountBasis basis);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.IPmtImpl : object {
    internal static FinanceCalcResult`1<double> Ipmt(double Rate, double Per, double NPer, double PV, double FV, PmtDue Due);
}
public interface OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.IPmtProvider {
    public abstract virtual double GetPmt(double Rate, double NPer, double PV, double FV, PmtDue Due);
}
public interface OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.IPriceProvider {
    public abstract virtual double GetPrice(DateTime settlement, DateTime maturity, double rate, double yield, double redemption, int frequency, DayCountBasis basis);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.IrrImpl : object {
    private static double cnL_IT_STEP;
    private static double cnL_IT_EPSILON;
    private static double OptPV2(Double[]& ValueArray, double Guess);
    internal static FinanceCalcResult`1<double> Irr(Double[] ValueArray, double Guess);
}
public interface OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.IYearFracProvider {
    public abstract virtual double GetYearFrac(DateTime date1, DateTime date2, DayCountBasis basis);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.MirrImpl : object {
    internal static double LDoNPV(double Rate, Double[]& ValueArray, int iWNType);
    internal static FinanceCalcResult`1<double> MIRR(Double[] ValueArray, double FinanceRate, double ReinvestRate);
}
public static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.NperImpl : object {
    public static FinanceCalcResult`1<double> NPer(double Rate, double Pmt, double PV, double FV, PmtDue Due);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.OddfpriceImpl : object {
    private DateTime _settlementDate;
    private DateTime _maturityDate;
    private DateTime _issueDate;
    private DateTime _firstCouponDate;
    private double _rate;
    private double _yield;
    private double _redemption;
    private int _frequency;
    private DayCountBasis _basis;
    public OddfpriceImpl(DateTime settlementDate, DateTime maturityDate, DateTime issueDate, DateTime firstCouponDate, double rate, double yield, double redemption, int frequency, DayCountBasis basis);
    public FinanceCalcResult`1<double> GetOddfprice();
}
public enum OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PmtDue : Enum {
    public int value__;
    public static PmtDue EndOfPeriod;
    public static PmtDue BeginningOfPeriod;
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PmtProvider : object {
    public sealed virtual double GetPmt(double Rate, double NPer, double PV, double FV, PmtDue Due);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PpmtImpl : object {
    internal static FinanceCalcResult`1<double> Ppmt(double Rate, double Per, double NPer, double PV, double FV, PmtDue Due);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PriceImpl : object {
    public static FinanceCalcResult`1<double> GetPrice(FinancialDay settlement, FinancialDay maturity, double rate, double yield, double redemption, int frequency, DayCountBasis basis);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PriceProvider : object {
    public sealed virtual double GetPrice(DateTime settlement, DateTime maturity, double rate, double yield, double redemption, int frequency, DayCountBasis basis);
}
public static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.RateImpl : object {
    private static double cnL_IT_STEP;
    private static double cnL_IT_EPSILON;
    public static FinanceCalcResult`1<double> Rate(double NPer, double Pmt, double PV, double FV, PmtDue Due, double Guess);
    public static double LEvalRate(double Rate, double NPer, double Pmt, double PV, double dFv, PmtDue Due);
}
public static class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.XirrImpl : object {
    public static FinanceCalcResult`1<double> GetXirr(IEnumerable`1<double> aValues, IEnumerable`1<DateTime> aDates, double rGuessRate);
    private static double lcl_sca_XirrResult_Deriv1(IEnumerable`1<double> rValues, IEnumerable`1<DateTime> rDates, double fRate);
    private static double lcl_sca_XirrResult(IEnumerable`1<double> rValues, IEnumerable`1<DateTime> rDates, double fRate);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.YearFracProvider : object {
    private ParsingContext _context;
    public YearFracProvider(ParsingContext context);
    public sealed virtual double GetYearFrac(DateTime date1, DateTime date2, DayCountBasis basis);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.YieldImpl : object {
    private ICouponProvider _couponProvider;
    private IPriceProvider _priceProvider;
    public YieldImpl(ICouponProvider couponProvider, IPriceProvider priceProvider);
    private static bool AreEqual(double x, double y);
    public double GetYield(DateTime settlement, DateTime maturity, double rate, double pr, double redemption, int frequency, DayCountBasis basis);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Intrate : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Ipmt : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static double GetInterest(double rate, double remainingAmount);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Irr : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.IsPmt : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Mduration : Duration {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Mirr : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Nominal : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Nper : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Npv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Oddfprice : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Oddfyield : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Oddlprice : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Oddlyield : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Pduration : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Pmt : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Ppmt : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Price : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.PriceDisc : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Pricemat : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Pv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Rate : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Received : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Rri : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Sln : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Syd : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static double GetInterest(double rate, double remainingAmount);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Tbilleq : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.TbillPrice : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.TbillYield : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Vdb : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public static double DepreciationOverPeriod(double cost, double salvage, double life, double period, double factor, bool straightLine);
    [CompilerGeneratedAttribute]
internal static double <DepreciationOverPeriod>g__GetDoubleDecliningBalance|6_0(double currentDep, double per, <>c__DisplayClass6_0& );
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Xirr : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Xnpv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static IEnumerable`1<DateTime> GetDates(FunctionArgument arg);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Yield : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Yieldmat : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument : object {
    private CompileResult _result;
    public bool IsHiddenCell { get; internal set; }
    public object Value { get; }
    public DataType DataType { get; }
    public FormulaRangeAddress Address { get; }
    public bool IsExcelRange { get; }
    public bool IsExcelRangeOrSingleCell { get; }
    public bool ValueIsExcelError { get; }
    public ExcelErrorValue ValueAsExcelErrorValue { get; }
    public IRangeInfo ValueAsRangeInfo { get; }
    public object ValueFirst { get; }
    public List`1<object> ValueToList { get; }
    internal FunctionArgument(CompileResult result);
    public FunctionArgument(object val);
    public FunctionArgument(object val, DataType dataType);
    public bool get_IsHiddenCell();
    internal void set_IsHiddenCell(bool value);
    public object get_Value();
    public DataType get_DataType();
    public FormulaRangeAddress get_Address();
    public bool get_IsExcelRange();
    public bool get_IsExcelRangeOrSingleCell();
    public bool get_ValueIsExcelError();
    public ExcelErrorValue get_ValueAsExcelErrorValue();
    public IRangeInfo get_ValueAsRangeInfo();
    public object get_ValueFirst();
    public List`1<object> get_ValueToList();
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionNameProvider : object {
    public static FunctionNameProvider Empty { get; }
    public static FunctionNameProvider get_Empty();
    public virtual bool IsFunctionName(string name);
}
[FlagsAttribute]
public enum OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionParameterInformation : Enum {
    public int value__;
    public static FunctionParameterInformation Normal;
    public static FunctionParameterInformation IgnoreAddress;
    public static FunctionParameterInformation Condition;
    public static FunctionParameterInformation UseIfConditionIsTrue;
    public static FunctionParameterInformation UseIfConditionIsFalse;
    public static FunctionParameterInformation IgnoreErrorInPreExecute;
    public static FunctionParameterInformation AdjustParameterAddress;
    public static FunctionParameterInformation IsParameterVariable;
}
public class OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository : object {
    private Dictionary`2<string, ExcelFunction> _functions;
    internal Dictionary`2<string, string> _namespaceFunctions;
    public IEnumerable`1<string> FunctionNames { get; }
    public Dictionary`2<string, string> NamespaceFunctions { get; }
    public static FunctionRepository Create();
    public virtual void LoadModule(IFunctionModule module);
    public virtual ExcelFunction GetFunction(string name);
    public virtual void Clear();
    public sealed virtual bool IsFunctionName(string name);
    public IEnumerable`1<string> get_FunctionNames();
    public void AddOrReplaceFunction(string functionName, ExcelFunction functionImpl);
    public Dictionary`2<string, string> get_NamespaceFunctions();
}
public abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule : object {
    private Dictionary`2<string, ExcelFunction> _functions;
    private Dictionary`2<Type, FunctionCompiler> _customCompilers;
    public IDictionary`2<string, ExcelFunction> Functions { get; }
    public IDictionary`2<Type, FunctionCompiler> CustomCompilers { get; }
    public sealed virtual IDictionary`2<string, ExcelFunction> get_Functions();
    public IDictionary`2<Type, FunctionCompiler> get_CustomCompilers();
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.BetaHelper : object {
    internal static double IBetaInv(double p, double a, double b);
    internal static double IBeta(double x, double a, double b);
    internal static double Beta(double x, double y);
    internal static double Betaln(double x, double y);
    internal static double BetaCdf(double x, double a, double b);
    internal static double BetaPdf(double x, double a, double b);
    internal static double BetaCf(double x, double a, double b);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.BinaryHelper : object {
    public static bool TryParseBinaryToDecimal(string number, int raiseToBase, Int32& result);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.BinomHelper : object {
    internal static double CumulativeDistrubution(double x, double trails, double probS);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.CalcExtensions : object {
    [ExtensionAttribute]
public static double AggregateKahan(IEnumerable`1<double> source, double seed, Func`3<KahanSum, double, KahanSum> func);
    [ExtensionAttribute]
public static double AverageKahan(IEnumerable`1<double> values);
    [ExtensionAttribute]
public static double AverageKahan(IList`1<double> values);
    [ExtensionAttribute]
public static double AverageKahan(IList`1<Nullable`1<double>> values);
    [ExtensionAttribute]
public static double AverageKahan(Double[] values);
    [ExtensionAttribute]
public static double AverageKahan(IEnumerable`1<double> values, Func`2<double, double> selector);
    [ExtensionAttribute]
public static double AverageKahan(IEnumerable`1<int> values, Func`2<int, double> selector);
    [ExtensionAttribute]
public static double SumKahan(IEnumerable`1<double> values);
    [ExtensionAttribute]
public static double SumKahan(IEnumerable`1<Nullable`1<double>> values);
    [ExtensionAttribute]
public static double SumKahan(IEnumerable`1<double> values, Func`2<double, double> selector);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.ChiSquareHelper : object {
    public static double PropbabilityDistribution(double n, double degreeOfFreedom);
    public static double CumulativeDistribution(double n, double degreeOfFreedom);
    public static double Inverse(double n, double degreeOfFreedom);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.ContinuedFraction : object {
    private static double DEFAULT_EPSILON;
    [CompilerGeneratedAttribute]
private Func`3<int, double, double> <GetA>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<int, double, double> <GetB>k__BackingField;
    public Func`3<int, double, double> GetA { get; public set; }
    public Func`3<int, double, double> GetB { get; public set; }
    [CompilerGeneratedAttribute]
public Func`3<int, double, double> get_GetA();
    [CompilerGeneratedAttribute]
public void set_GetA(Func`3<int, double, double> value);
    [CompilerGeneratedAttribute]
public Func`3<int, double, double> get_GetB();
    [CompilerGeneratedAttribute]
public void set_GetB(Func`3<int, double, double> value);
    private static bool PrecisionEquals(double x, double y, double eps);
    public double Evaluate(double x);
    public double Evaluate(double x, int maxIterations);
    public double Evaluate(double x, double epsilon, int maxIterations);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.ErfHelper : object {
    private static double X_CRIT;
    public static double Erf(double x);
    public static double Erf(double x1, double x2);
    public static double Erfc(double x);
    public static double Erfcinv(double p);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.FHelper : object {
    public static double ProbabilityDensityFunction(double x, double df1, double df2);
    public static double CumulativeDistributionFunction(double x, double df1, double df2);
    public static double GetProbability(double x, double df1, double df2, bool cumulative);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper : object {
    private static double HALF_LOG_2_PI;
    private static double LANCZOS_G;
    private static double SQRT_TWO_PI;
    private static double INV_GAMMA1P_M1_A0;
    private static double INV_GAMMA1P_M1_A1;
    private static double INV_GAMMA1P_M1_B1;
    private static double INV_GAMMA1P_M1_B2;
    private static double INV_GAMMA1P_M1_B3;
    private static double INV_GAMMA1P_M1_B4;
    private static double INV_GAMMA1P_M1_B5;
    private static double INV_GAMMA1P_M1_B6;
    private static double INV_GAMMA1P_M1_B7;
    private static double INV_GAMMA1P_M1_B8;
    private static double INV_GAMMA1P_M1_P0;
    private static double INV_GAMMA1P_M1_P1;
    private static double INV_GAMMA1P_M1_P2;
    private static double INV_GAMMA1P_M1_P3;
    private static double INV_GAMMA1P_M1_P4;
    private static double INV_GAMMA1P_M1_P5;
    private static double INV_GAMMA1P_M1_P6;
    private static double INV_GAMMA1P_M1_Q1;
    private static double INV_GAMMA1P_M1_Q2;
    private static double INV_GAMMA1P_M1_Q3;
    private static double INV_GAMMA1P_M1_Q4;
    private static double INV_GAMMA1P_M1_C;
    private static double INV_GAMMA1P_M1_C0;
    private static double INV_GAMMA1P_M1_C1;
    private static double INV_GAMMA1P_M1_C2;
    private static double INV_GAMMA1P_M1_C3;
    private static double INV_GAMMA1P_M1_C4;
    private static double INV_GAMMA1P_M1_C5;
    private static double INV_GAMMA1P_M1_C6;
    private static double INV_GAMMA1P_M1_C7;
    private static double INV_GAMMA1P_M1_C8;
    private static double INV_GAMMA1P_M1_C9;
    private static double INV_GAMMA1P_M1_C10;
    private static double INV_GAMMA1P_M1_C11;
    private static double INV_GAMMA1P_M1_C12;
    private static double INV_GAMMA1P_M1_C13;
    private static Double[] LANCZOS;
    private static GammaHelper();
    public static double RegularizedGammaP(double a, double x, double epsilon, int maxIterations);
    public static double RegularizedGammaQ(double a, double x, double epsilon, int maxIterations);
    public static double LogGamma(double x);
    public static double Lanczos(double x);
    public static double LogGamma1p(double x);
    public static double InvGamma1pm1(double x);
    private static double Log1p(double x);
    public static double Gamma(double x);
    internal static double LowerRegularizedIncompleteGamma(double a, double x);
    internal static double InverseGamma(double p, double a);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaPinvHelper : object {
    public static double gammapinv(double p, double a);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GrowthHelper : object {
    internal static InMemoryRange GetGrowthValuesMultiple(Double[][] xRanges, Double[] coefficients, bool constVar, bool columnArray);
    internal static InMemoryRange GetGrowthValuesSingle(Double[] xRanges, Double[] coefficients, bool columnArray);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.LinestHelper : object {
    internal static InMemoryRange MultipleRegResult(Double[] knownYs, Double[][] xRangeList, bool constVar, bool stats, bool logest);
    internal static Double[] GetSlope(Double[][] xValues, Double[] yValues, bool constVar, bool stats, bool logest, Boolean& matrixIsSingular);
    internal static InMemoryRange LinearRegResult(Double[] knownXs, Double[] knownYs, bool constVar, bool stats, bool logest);
    internal static InMemoryRange ExecuteLinest(IRangeInfo rangeX, IRangeInfo rangeY, bool constVar, bool stats, bool logest, Nullable`1& error);
    internal static Double[] GetDefaultKnownXs(int count);
    internal static IRangeInfo GetDefaultKnownXsRange(IRangeInfo argY);
    internal static Double[] ReverseCoefficientOrder(Double[] coefficients, List`1<double> dropCols, bool constVar, bool logest);
    internal static void GetSums(Double[] coefficients, Double[][] xRanges, Double[] knownYs, bool logest, bool constVar, Double& ssreg, Double& ssresid);
    internal static Double[] GetStandardErrors(double df, double ssresid, int height, int width, List`1<double> dropCols, Double[][] xRangeList);
    internal static Double[][] GetRangeAsJaggedDouble(IRangeInfo rangeX, IRangeInfo rangeY, bool constVar, bool multipleXranges);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.MatrixHelper : object {
    internal static Double[][] TransposeMatrix(Double[][] matrix, int rows, int cols);
    internal static Double[][] MatrixMultDouble(Double[][] matrix, double multiplier);
    internal static Double[] MatrixDiagonal(Double[][] matrix);
    internal static Double[][] CreateMatrix(int rows, int cols);
    internal static Double[][] Multiply(Double[][] a, Double[][] b);
    internal static Double[][] GetIdentityMatrix(int size);
    internal static double GetDeterminant(Double[][] matrix);
    internal static double GetDeterminant(Double[][] lu, int rowSwap);
    internal static Double[][] Decompose(Double[][] matrix, Int32[]& permutations, Int32& rowSwap);
    internal static Double[][] Duplicate(Double[][] matrix);
    internal static Double[][] Inverse(Double[][] matrix);
    internal static Double[][] Inverse(Double[][] lu, Int32[] permutations, int rowSwap);
    private static Double[] InverserSolver(Double[][] luMatrix, Double[] unit);
    internal static int ArgMaxIndex(Double[][] mat);
    internal static double GetM2Norm(Double[][] rr);
    internal static List`1<double> GaussRank(Double[][] xRange, bool constVal);
    internal static Double[][] RemoveColumns(Double[][] xRangeList, List`1<double> dropCols);
    internal static Double[] ListToArray(List`1<double> list);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.PaddingHelper : object {
    public static string EnsureLength(string input, int length, string padWith);
    public static string EnsureMinLength(string input, int length);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.SEHelper : object {
    public static double GetStandardError(Double[] xValues, Double[] yValues, bool pushToZero);
    public static double DevSq(Double[] array, bool meanIsZero);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.StudenttHelper : object {
    public static double ProbabilityDensityFunction(double x, double degreesOfFreedom);
    public static double CumulativeDistributionFunction(double x, double degreesOfFreedom);
    public static double InverseTFunc(double probability, double degreesOfFreedom);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.TrendHelper : object {
    internal static InMemoryRange GetTrendValuesMultiple(Double[][] xRanges, Double[] coefficients, bool constVar, bool columnArray);
    internal static InMemoryRange GetTrendValuesSingle(Double[] xRanges, Double[] coefficients, bool columnArray);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.TwoComplementHelper : object {
    private static bool IsNegativeNumber(string candidate, int fromBase);
    public static double ParseDecFromString(string number, int fromBase);
    private static double NegativeFromBase(string number, int fromBase);
}
public abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.HiddenValuesHandlingFunction : ExcelFunction {
    [CompilerGeneratedAttribute]
private bool <IgnoreHiddenValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreNestedSubtotalsAndAggregates>k__BackingField;
    public bool IgnoreHiddenValues { get; public set; }
    public bool IgnoreErrors { get; public set; }
    public bool IgnoreNestedSubtotalsAndAggregates { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreHiddenValues();
    [CompilerGeneratedAttribute]
public void set_IgnoreHiddenValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreNestedSubtotalsAndAggregates();
    [CompilerGeneratedAttribute]
public void set_IgnoreNestedSubtotalsAndAggregates(bool value);
    protected virtual IList`1<double> ArgsToDoubleEnumerable(IEnumerable`1<FunctionArgument> arguments, ParsingContext context, ExcelErrorValue& error);
    protected IList`1<double> ArgsToDoubleEnumerable(IEnumerable`1<FunctionArgument> arguments, ParsingContext context, bool ignoreErrors, bool ignoreNonNumeric, ExcelErrorValue& error);
    protected bool ShouldIgnore(ICellInfo c, ParsingContext context);
    protected bool ShouldIgnore(FunctionArgument arg, ParsingContext context);
}
public interface OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule {
    public IDictionary`2<string, ExcelFunction> Functions { get; }
    public abstract virtual IDictionary`2<string, ExcelFunction> get_Functions();
}
public interface OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionNameProvider {
    public abstract virtual bool IsFunctionName(string name);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.ErrorType : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsBlank : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsErr : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsError : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsEven : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsLogical : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsNa : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsNonText : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsNumber : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsOdd : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsRef : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.IsText : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.N : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.Na : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.Sheet : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Information.TypeFunction : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.IntArgumentParser : ArgumentParser {
    public virtual object Parse(object obj);
    public virtual object Parse(object obj, RoundingMethod roundingMethod);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.And : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.False : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.If : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool ReturnsReference { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private RangeDefinition GetSizeForArray(IRangeInfo ri, FunctionArgument arg1, FunctionArgument arg2);
    private static void SetRowsColsFromSize(FunctionArgument arg1, Int32& rows, Int16& cols);
    private ArgumentType GetType(object value);
    private object GetArrayResult(FunctionArgument arg, ArgumentType type, int row, int col);
    public virtual bool get_ReturnsReference();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.IfError : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.IfNa : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.Ifs : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool ReturnsReference { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_ReturnsReference();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.IfsWithMultipleMatchesBase : ExcelFunction {
    protected IEnumerable`1<double> GetMatches(string functionName, IList`1<FunctionArgument> arguments, ParsingContext ctx, CompileResult& errorResult);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.LetFunction : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool ReturnsReference { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual bool get_ReturnsReference();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.MaxIfs : IfsWithMultipleMatchesBase {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.MinIfs : IfsWithMultipleMatchesBase {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.Not : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.Or : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.Switch : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool ReturnsReference { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static CompileResult GetResult(FunctionArgument arg);
    private bool IsMatch(object right, object left);
    private double GetNumericValue(object obj);
    public virtual bool get_ReturnsReference();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.True : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Logical.Xor : ExcelFunction {
    private DoubleEnumerableArgConverter _converter;
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public Xor(DoubleEnumerableArgConverter converter);
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Abs : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual int get_ArgumentMinLength();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Acos : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Acosh : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Acot : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Acoth : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Aggregate : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private bool IgnoreHidden(int options);
    private bool IgnoreErrors(int options);
    private bool IgnoreNestedSubtotalAndAggregate(int options);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Arabic : ExcelFunction {
    public static Dictionary`2<string, int> RomanToArabic;
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    private static Arabic();
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public static double ArabicVal(int index, string txt);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Asin : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Asinh : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Atan : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Atan2 : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Atanh : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Average : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void Calculate(FunctionArgument arg, ParsingContext context, KahanSum& retVal, Double& nValues, Nullable`1& error);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.AverageA : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void Calculate(FunctionArgument arg, ParsingContext context, KahanSum& retVal, Double& nValues, ExcelErrorValue& err, bool isInArray);
    private Nullable`1<double> GetNumericValue(object obj, bool isInArray);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.AverageIf : HiddenValuesHandlingFunction {
    private ExpressionEvaluator _expressionEvaluator;
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    private bool Evaluate(object obj, string expression);
    private string GetCriteraFromArg(IList`1<FunctionArgument> arguments);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double CalculateWithLookupRange(IRangeInfo argRange, string criteria, IRangeInfo sumRange, ParsingContext context, ExcelErrorValue& error);
    private double CalculateSingleRange(IRangeInfo range, string expression, ParsingContext context, ExcelErrorValue& error);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.AverageIfs : MultipleRangeCriteriasFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    private object GetCriteraFromArgsByIndex(IList`1<FunctionArgument> arguments, int index);
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Ceiling : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CeilingMath : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CeilingPrecise : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Combin : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Combina : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Cos : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Cosh : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Cot : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Coth : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Count : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void Calculate(IList`1<FunctionArgument> items, Double& nItems, ParsingContext context, ItemContext itemContext, Nullable`1& error);
    private bool ShouldCount(object value, ItemContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CountA : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void Calculate(IEnumerable`1<FunctionArgument> items, ParsingContext context, Double& nItems, ExcelErrorValue& err);
    private bool ShouldCount(object value);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CountBlank : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CountIf : ExcelFunction {
    private ExpressionEvaluator _expressionEvaluator;
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    private bool Evaluate(object obj, string expression);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CountIfs : MultipleRangeCriteriasFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Covar : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CovarianceP : Covar {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.CovarianceS : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Csc : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Csch : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Degrees : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Even : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Exp : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Fact : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.FactDouble : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Floor : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.FloorMath : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.FloorPrecise : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Gcd : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.IsoCeiling : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Large : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    [CompilerGeneratedAttribute]
private void <Execute>b__3_0(DoubleEnumerableParseOptions x);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Lcm : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Ln : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Log : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Log10 : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.MathHelper : object {
    public static double Sec(double x);
    public static double Cosec(double x);
    public static double Cotan(double x);
    public static double Arcsin(double x);
    public static double Arccos(double x);
    public static double Arcsec(double x);
    public static double Arccosec(double x);
    public static double Arccotan(double x);
    public static double HSin(double x);
    public static double HCos(double x);
    public static double HTan(double x);
    public static double HSec(double x);
    public static double HCosec(double x);
    public static double HCotan(double x);
    public static double HArcsin(double x);
    public static double HArccos(double x);
    public static double HArctan(double x);
    public static double HArcsec(double x);
    public static double HArccosec(double x);
    public static double HArccotan(double x);
    public static double LogN(double x, double n);
    public static double Factorial(double number);
    public static double Factorial(double number, double devisor);
    public static double Radians(double angle);
    public static int GreatestCommonDevisor(Int32[] numbers);
    private static int GreatestCommonDevisor(int a, int b);
    public static int LeastCommonMultiple(Int32[] numbers);
    private static int LeastCommonMultiple(int a, int b);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Max : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Maxa : ExcelFunction {
    private DoubleEnumerableArgConverter _argConverter;
    public int ArgumentMinLength { get; }
    public Maxa(DoubleEnumerableArgConverter argConverter);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.MDeterm : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Median : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Min : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    [CompilerGeneratedAttribute]
private void <Execute>b__5_0(DoubleEnumerableParseOptions x);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Mina : ExcelFunction {
    private DoubleEnumerableArgConverter _argConverter;
    public int ArgumentMinLength { get; }
    public Mina(DoubleEnumerableArgConverter argConverter);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.MInverse : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.MMult : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Mod : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Mode : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Mround : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Multinomial : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.MultipleRangeCriteriasFunction : ExcelFunction {
    protected bool Evaluate(object obj, object expression, ParsingContext ctx, bool convertNumericString);
    protected List`1<int> GetMatchIndexes(RangeOrValue rangeOrValue, object searched, ParsingContext ctx, bool convertNumericString);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.MUnit : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Odd : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Percentile : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.PercentileExc : HiddenValuesHandlingFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.PercentileInc : HiddenValuesHandlingFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Percentrank : RankFunctionBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.PercentrankExc : RankFunctionBase {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.PercentrankInc : RankFunctionBase {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Permut : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Permutationa : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Pi : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Power : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Product : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Quartile : Percentile {
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private IList`1<FunctionArgument> BuildArgs(IEnumerable`1<FunctionArgument> arrArg, double quart);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.QuartileExc : PercentileExc {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private IList`1<FunctionArgument> BuildArgs(IEnumerable`1<FunctionArgument> arrArg, double quart);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.QuartileInc : PercentileInc {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private IList`1<FunctionArgument> BuildArgs(IEnumerable`1<FunctionArgument> arrArg, double quart);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Quotient : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Radians : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Rand : ExcelFunction {
    [CompilerGeneratedAttribute]
private static int <Seed>k__BackingField;
    private static int Seed { get; private set; }
    public int ArgumentMinLength { get; }
    public bool IsVolatile { get; }
    [CompilerGeneratedAttribute]
private static int get_Seed();
    [CompilerGeneratedAttribute]
private static void set_Seed(int value);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsVolatile();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RandArray : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsVolatile { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double GetRandomNumber(Random rnd, double min, double max, bool useInteger);
    public virtual bool get_IsVolatile();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RandBetween : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool IsVolatile { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double CalulateDiff(double high, double low);
    public virtual bool get_IsVolatile();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RangeOrValue : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeInfo <Range>k__BackingField;
    public object Value { get; public set; }
    public IRangeInfo Range { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public IRangeInfo get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(IRangeInfo value);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Rank : RankFunctionBase {
    private bool _isAvg;
    public int ArgumentMinLength { get; }
    public Rank(bool isAvg);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RankAvg : Rank {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RankEq : Rank {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RankFunctionBase : ExcelFunction {
    protected static List`1<double> GetNumbersFromRange(FunctionArgument refArg, bool sortAscending);
    protected Double[] GetNumbersFromArgs(IEnumerable`1<FunctionArgument> arguments, int index, ParsingContext context, ExcelErrorValue& error);
    protected double PercentRankIncImpl(Double[] array, double number);
    protected double PercentRankExcImpl(Double[] array, double number);
    protected double RoundResult(double number, int sign);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Roman : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private int FirstArgumentToInt(IList`1<FunctionArgument> arguments, ExcelErrorValue& error);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RomanFunctions.RomanBase : object {
    protected RomanNumber One;
    protected RomanNumber Five;
    protected RomanNumber Ten;
    protected RomanNumber Fifty;
    protected RomanNumber OneHundred;
    protected RomanNumber FiveHundred;
    protected RomanNumber Thousand;
    internal abstract virtual string Execute(int number);
    protected string GetClassicRomanFormat(int number);
    private void Apply(Int32& number, RomanNumber roman, StringBuilder result);
    private void Apply(Int32& number, RomanNumber roman, RomanNumber lowerRoman, StringBuilder result);
    private void Apply(Int32& number, int limit, string letters, StringBuilder result);
    protected string HandleType(int type, string roman);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RomanFunctions.RomanClassic : RomanBase {
    internal virtual string Execute(int number);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RomanFunctions.RomanForm1 : RomanBase {
    internal virtual string Execute(int number);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RomanFunctions.RomanForm2 : RomanBase {
    internal virtual string Execute(int number);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RomanFunctions.RomanForm3 : RomanBase {
    internal virtual string Execute(int number);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RomanFunctions.RomanSimplified : RomanBase {
    internal virtual string Execute(int number);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Round : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual int get_ArgumentMinLength();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Rounddown : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static double RoundDownDecimalNumber(double number, int nDecimals);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.RoundingHelper : object {
    public static double Round(double number, double multiple, Direction direction);
    public static double ExecuteRounding(double number, double lowerRound, double upperRound, Direction direction, bool isNegativeNumber);
    internal static bool IsInvalidNumberAndSign(double number, double sign);
    internal static double RoundToSignificantFig(double number, double nSignificantFigures);
    internal static double RoundToSignificantFig(double number, double nSignificantFigures, bool awayFromMidpoint);
    internal static double GetNumberOfDigitsIntPart(double n);
    private static double GetNumberOfLeadingZeroDecimals(double n);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Roundup : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sec : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SecH : ExcelFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sequence : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void SetSequence(InMemoryRange range, double start, double step);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Seriessum : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sign : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sin : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sinh : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Small : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    [CompilerGeneratedAttribute]
private void <Execute>b__3_0(DoubleEnumerableParseOptions x);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sqrt : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SqrtPi : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Stdev : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal CompileResult StandardDeviation(IEnumerable`1<double> values);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Stdeva : HiddenValuesHandlingFunction {
    private DoubleEnumerableArgConverter _argConverter;
    public int ArgumentMinLength { get; }
    public Stdeva(DoubleEnumerableArgConverter argConverter);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private CompileResult StandardDeviation(IEnumerable`1<double> values);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.StdevDotP : StdevP {
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.StdevDotS : Stdev {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.StdevP : HiddenValuesHandlingFunction {
    public string NamespacePrefix { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static double StandardDeviation(IEnumerable`1<double> values);
    [CompilerGeneratedAttribute]
private void <Execute>b__7_0(DoubleEnumerableParseOptions x);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Stdevpa : HiddenValuesHandlingFunction {
    private DoubleEnumerableArgConverter _argConverter;
    public int ArgumentMinLength { get; }
    public Stdevpa(DoubleEnumerableArgConverter argConverter);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private CompileResult StandardDeviation(IEnumerable`1<double> values);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Subtotal : ExcelFunction {
    private Dictionary`2<int, HiddenValuesHandlingFunction> _functions;
    public int ArgumentMinLength { get; }
    private void Initialize();
    private void AddHiddenValueHandlingFunction(HiddenValuesHandlingFunction func, int funcNum);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private ExcelFunction GetFunctionByCalcType(int funcNum);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumIf : HiddenValuesHandlingFunction {
    private ExpressionEvaluator _evaluator;
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsVolatile { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static IEnumerable`1<string> GetCriteria(FunctionArgument criteriaArg);
    private double CalculateWithSumRange(IRangeInfo range, IEnumerable`1<string> criteria, IRangeInfo sumRange, ParsingContext context);
    private double CalculateSingleRange(IRangeInfo range, IEnumerable`1<string> expressions, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsVolatile();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumIfs : MultipleRangeCriteriasFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumProduct : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void AddValue(object convertVal, List`1<double> currentResult);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sumsq : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double Calculate(FunctionArgument arg, ParsingContext context, ExcelErrorValue& err, bool isInArray);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumSubtotal : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private object Calculate(FunctionArgument arg, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumV2 : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double Calculate(FunctionArgument arg, ParsingContext context, Nullable`1& errType);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumX2mY2 : SumxBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual double Calculate(Double[] set1, Double[] set2);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumX2pY2 : SumxBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual double Calculate(Double[] set1, Double[] set2);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.SumxBase : ExcelFunction {
    private ParsingContext _context;
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public abstract virtual double Calculate(Double[] set1, Double[] set2);
    private void CreateSets(FunctionArgument arg1, FunctionArgument arg2, Double[]& set1, Double[]& set2, ExcelErrorValue& error);
    public List`1<double> CreateSet(FunctionArgument arg, ExcelErrorValue& error);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Sumxmy2 : SumxBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual double Calculate(Double[] set1, Double[] set2);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Tan : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Tanh : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Trunc : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Var : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    [CompilerGeneratedAttribute]
private void <Execute>b__3_0(DoubleEnumerableParseOptions x);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Vara : ExcelFunction {
    private DoubleEnumerableArgConverter _argConverter;
    public int ArgumentMinLength { get; }
    public Vara(DoubleEnumerableArgConverter argConverter);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.VarDotP : VarP {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.VarDotS : Var {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.VarMethods : object {
    private static double Divide(double left, double right);
    public static double Var(IEnumerable`1<ExcelDoubleCellValue> args);
    public static double Var(IEnumerable`1<double> args);
    public static double VarP(IEnumerable`1<ExcelDoubleCellValue> args);
    public static double VarP(IEnumerable`1<double> args);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.VarP : HiddenValuesHandlingFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    [CompilerGeneratedAttribute]
private void <Execute>b__3_0(DoubleEnumerableParseOptions x);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.MathFunctions.Varpa : ExcelFunction {
    private DoubleEnumerableArgConverter _argConverter;
    public int ArgumentMinLength { get; }
    public Varpa(DoubleEnumerableArgConverter argConverter);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
public enum OfficeOpenXml.FormulaParsing.Excel.Functions.Metadata.ExcelFunctionCategory : Enum {
    public int value__;
    public static ExcelFunctionCategory Text;
    public static ExcelFunctionCategory Information;
    public static ExcelFunctionCategory LookupAndReference;
    public static ExcelFunctionCategory Statistical;
    public static ExcelFunctionCategory Financial;
    public static ExcelFunctionCategory Cube;
    public static ExcelFunctionCategory Logical;
    public static ExcelFunctionCategory DateAndTime;
    public static ExcelFunctionCategory MathAndTrig;
    public static ExcelFunctionCategory Database;
    public static ExcelFunctionCategory Engineering;
    public static ExcelFunctionCategory Web;
}
[AttributeUsageAttribute("4")]
public class OfficeOpenXml.FormulaParsing.Excel.Functions.Metadata.FunctionMetadataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ExcelFunctionCategory <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EPPlusVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntroducedInExcelVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsArrays>k__BackingField;
    public ExcelFunctionCategory Category { get; public set; }
    public string EPPlusVersion { get; public set; }
    public string Description { get; public set; }
    public string IntroducedInExcelVersion { get; public set; }
    public bool SupportsArrays { get; public set; }
    [CompilerGeneratedAttribute]
public ExcelFunctionCategory get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(ExcelFunctionCategory value);
    [CompilerGeneratedAttribute]
public string get_EPPlusVersion();
    [CompilerGeneratedAttribute]
public void set_EPPlusVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_IntroducedInExcelVersion();
    [CompilerGeneratedAttribute]
public void set_IntroducedInExcelVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_SupportsArrays();
    [CompilerGeneratedAttribute]
public void set_SupportsArrays(bool value);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.NormInvBase : ExcelFunction {
    private static double S1;
    private static double S2;
    private static double C1;
    private static double C2;
    private static Double[] A;
    private static Double[] B;
    private static Double[] C;
    private static Double[] D;
    private static Double[] E;
    private static Double[] F;
    private static NormInvBase();
    protected static double NormsInv(double p, double mean, double stdev);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Numeric.IntFunction : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.ObjectEnumerableArgConverter : CollectionFlattener`1<object> {
    public virtual IEnumerable`1<object> ConvertArgs(bool ignoreHidden, bool ignoreErrors, bool ignoreNestedSubtotalAggregate, IEnumerable`1<FunctionArgument> arguments, ParsingContext context);
    public virtual IEnumerable`1<object> ConvertArgs(bool ignoreHidden, bool ignoreErrors, IEnumerable`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Address : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.AnchorArray : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Choose : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool ReturnsReference { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_ReturnsReference();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.ChooseCols : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.ChooseRows : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Column : LookupFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public bool IsVolatile { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual bool get_IsVolatile();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Columns : LookupFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual int get_ArgumentMinLength();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Drop : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public bool ReturnsReference { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual string get_NamespacePrefix();
    public virtual bool get_ReturnsReference();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Expand : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.FilterFunction : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual int get_ArgumentMinLength();
    private IRangeInfo GetAsRangeInfo(IList`1<FunctionArgument> arguments, int index);
    private static CompileResult FilterOnRow(IRangeInfo arg1, IRangeInfo arg2, FunctionArgument emptyValue);
    private static CompileResult FilterOnColumn(IRangeInfo arg1, IRangeInfo arg2, FunctionArgument emptyValue);
    public virtual string get_NamespacePrefix();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.GetPivotData : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private CompileResult GetCriteriasFromString(IList`1<FunctionArgument> arguments);
    private void AddCriterias(List`1<string> fieldValues, ExcelPivotTableRowColumnFieldCollection fields, List`1& criteria);
    private static string AddFieldValue(ExcelPivotTable pivotTable, List`1<PivotDataFieldItemSelection> criteria, StringBuilder& sb, int rowColIndex);
    private bool GetSubTotalFunctionFromString(string value, eSubTotalFunctions& function);
    private CompileResult GetCriteriasFromArguments(IList`1<FunctionArgument> arguments);
    private bool GetPivotTable(IRangeInfo ri, ExcelPivotTable& pivotTable);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.HLookup : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual void GetNewParameterAddress(IList`1<CompileResult> args, int index, Queue`1& addresses);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Hstack : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Index : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public bool ReturnsReference { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static IRangeInfo GetResultRange(int row, int col, IRangeInfo ri);
    private CompileResult GetResultSingleCell(int row, int col, IRangeInfo ri);
    public virtual bool get_ReturnsReference();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Indirect : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool ReturnsReference { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_ReturnsReference();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Lookup : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupArguments : object {
    private ArgumentParsers _argumentParsers;
    [CompilerGeneratedAttribute]
private object <SearchedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RangeAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LookupIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LookupOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RangeLookup>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FunctionArgument> <DataArray>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeInfo <RangeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupArgumentDataType <ArgumentDataType>k__BackingField;
    public object SearchedValue { get; private set; }
    public string RangeAddress { get; private set; }
    public int LookupIndex { get; private set; }
    public int LookupOffset { get; private set; }
    public bool RangeLookup { get; private set; }
    public IEnumerable`1<FunctionArgument> DataArray { get; private set; }
    public IRangeInfo RangeInfo { get; private set; }
    public LookupArgumentDataType ArgumentDataType { get; private set; }
    public LookupArguments(IEnumerable`1<FunctionArgument> arguments, ParsingContext context);
    public LookupArguments(IEnumerable`1<FunctionArgument> arguments, ArgumentParsers argumentParsers, ParsingContext context);
    public LookupArguments(object searchedValue, string rangeAddress, int lookupIndex, int lookupOffset, bool rangeLookup, IRangeInfo rangeInfo);
    [CompilerGeneratedAttribute]
public object get_SearchedValue();
    [CompilerGeneratedAttribute]
private void set_SearchedValue(object value);
    [CompilerGeneratedAttribute]
public string get_RangeAddress();
    [CompilerGeneratedAttribute]
private void set_RangeAddress(string value);
    [CompilerGeneratedAttribute]
public int get_LookupIndex();
    [CompilerGeneratedAttribute]
private void set_LookupIndex(int value);
    [CompilerGeneratedAttribute]
public int get_LookupOffset();
    [CompilerGeneratedAttribute]
private void set_LookupOffset(int value);
    [CompilerGeneratedAttribute]
public bool get_RangeLookup();
    [CompilerGeneratedAttribute]
private void set_RangeLookup(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FunctionArgument> get_DataArray();
    [CompilerGeneratedAttribute]
private void set_DataArray(IEnumerable`1<FunctionArgument> value);
    [CompilerGeneratedAttribute]
public IRangeInfo get_RangeInfo();
    [CompilerGeneratedAttribute]
private void set_RangeInfo(IRangeInfo value);
    [CompilerGeneratedAttribute]
public LookupArgumentDataType get_ArgumentDataType();
    [CompilerGeneratedAttribute]
private void set_ArgumentDataType(LookupArgumentDataType value);
}
internal enum OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupDirection : Enum {
    public int value__;
    public static LookupDirection Vertical;
    public static LookupDirection Horizontal;
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupFunction : ExcelFunction {
    private ValueMatcher _valueMatcher;
    public LookupFunction(ValueMatcher valueMatcher);
    protected int IsMatch(object searchedValue, object candidate);
    protected LookupDirection GetLookupDirection(FormulaRangeAddress rangeAddress);
    protected CompileResult Lookup(LookupNavigator navigator, LookupArguments lookupArgs);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupNavigator : object {
    protected LookupDirection Direction;
    protected LookupArguments Arguments;
    protected ParsingContext ParsingContext;
    public int Index { get; }
    public object CurrentValue { get; }
    public LookupNavigator(LookupDirection direction, LookupArguments arguments, ParsingContext parsingContext);
    public abstract virtual int get_Index();
    public abstract virtual bool MoveNext();
    public abstract virtual object get_CurrentValue();
    public abstract virtual object GetLookupValue();
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.ImplicitIntersectionUtil : object {
    public static CompileResult GetResult(IRangeInfo range, FormulaCellAddress currentCell, ParsingContext context);
    public static CompileResult GetResult(IRangeInfo range, int ccr, int ccc, ParsingContext context);
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.LookupBinarySearch : object {
    private static int SearchAsc(object s, IRangeInfo lookupRange, IComparer`1<object> comparer, Nullable`1<LookupRangeDirection> direction);
    private static int SearchDesc(object s, IRangeInfo lookupRange, IComparer`1<object> comparer);
    internal static int SearchAsc(object s, LookupSearchItem[] items, IComparer`1<object> comparer);
    internal static int SearchDesc(object s, LookupSearchItem[] items, IComparer`1<object> comparer);
    internal static int BinarySearch(object lookupValue, IRangeInfo lookupRange, bool asc, IComparer`1<object> comparer, Nullable`1<LookupRangeDirection> direction);
    internal static int GetMaxIndex(IRangeInfo returnArray);
    internal static int GetMatchIndex(int ix, IRangeInfo returnArray, LookupMatchMode matchMode, bool asc);
    internal static int GetMatchIndex(object lookupValue, List`1<LookupSearchItem> searchItems, LookupSearchMode searchMode, LookupMatchMode matchMode);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.LookupComparer : LookupComparerBase {
    public LookupComparer(LookupMatchMode matchMode);
    public virtual int Compare(object x, object y);
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.LookupComparerBase : object {
    private LookupMatchMode _matchMode;
    private ValueMatcher _vm;
    public LookupComparerBase(LookupMatchMode matchMode);
    public abstract virtual int Compare(object x, object y);
    public virtual int Compare(object x, object y, int sortOrder);
    protected int CompareObjects(object x1, object y1);
}
internal enum OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.LookupMatchMode : Enum {
    public int value__;
    public static LookupMatchMode ExactMatch;
    public static LookupMatchMode ExactMatchReturnNextSmaller;
    public static LookupMatchMode ExactMatchReturnNextLarger;
    public static LookupMatchMode Wildcard;
    public static LookupMatchMode ExactMatchWithWildcard;
}
internal enum OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.LookupRangeDirection : Enum {
    public int value__;
    public static LookupRangeDirection Undefined;
    public static LookupRangeDirection Vertical;
    public static LookupRangeDirection Horizontal;
}
[DebuggerDisplayAttribute("Value: {Value}, org ix: {OriginalIndex}")]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.LookupSearchItem : object {
    [CompilerGeneratedAttribute]
private int <OriginalIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public int OriginalIndex { get; public set; }
    public object Value { get; public set; }
    public LookupSearchItem(object val, int originalIndex);
    [CompilerGeneratedAttribute]
public int get_OriginalIndex();
    [CompilerGeneratedAttribute]
public void set_OriginalIndex(int value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
internal enum OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.LookupSearchMode : Enum {
    public int value__;
    public static LookupSearchMode StartingAtFirst;
    public static LookupSearchMode ReverseStartingAtLast;
    public static LookupSearchMode BinarySearchAscending;
    public static LookupSearchMode BinarySearchDescending;
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.XlookupScanner : object {
    private object _lookupValue;
    private IRangeInfo _lookupRange;
    private LookupSearchMode _searchMode;
    private LookupMatchMode _matchMode;
    private LookupRangeDirection _direction;
    private IComparer`1<object> _comparer;
    public XlookupScanner(object lookupValue, IRangeInfo lookupRange, LookupSearchMode searchMode, LookupMatchMode matchMode);
    public XlookupScanner(object lookupValue, IRangeInfo lookupRange, LookupSearchMode searchMode, LookupMatchMode matchMode, LookupRangeDirection direction);
    private LookupRangeDirection GetLookupDirection();
    public int FindIndex();
    private int FindIndexInternal();
    private int GetMaxItemsRow(IRangeInfo lookupRange);
    private int GetMaxItemsColumns(IRangeInfo lookupRange);
    private int FindHorizontal();
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupUtils.XlookupUtil : object {
    internal static LookupRangeDirection GetLookupDirection(IRangeInfo lookupRange);
    internal static LookupMatchMode GetMatchMode(int mm);
    internal static LookupSearchMode GetSearchMode(int sm);
    internal static List`1<object> GetLookupArray(IRangeInfo lookupRange, LookupRangeDirection direction);
    internal static List`1<LookupSearchItem> GetSortedArray(List`1<object> arr);
    private static int CompareObjects(object x1, object y1);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Match : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Offset : LookupFunction {
    public int ArgumentMinLength { get; }
    public bool ReturnsReference { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsVolatile { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual int get_ArgumentMinLength();
    public virtual bool get_ReturnsReference();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsVolatile();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Row : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsVolatile { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsVolatile();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Rows : LookupFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.SingleFunction : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public bool IsVolatile { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual string get_NamespacePrefix();
    public virtual bool get_IsVolatile();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.SortBy : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.SortFunction : ExcelFunction {
    private InMemoryRangeSorter _sorter;
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private InMemoryRange GetSortedRange(IRangeInfo sourceRange, int sortIndex, int sortOrder, bool byCol);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Sorting.InMemoryRangeSorter : object {
    private LookupComparer _comparer;
    public InMemoryRange SortByRow(IRangeInfo sourceRange, int colIndex, int sortOrder);
    public InMemoryRange SortByCol(IRangeInfo sourceRange, int rowIndex, int sortOrder);
}
[DebuggerDisplayAttribute("oix: {OriginalIndex}, v: {Value}")]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Sorting.InMemoryRangeSortItem : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalIndex>k__BackingField;
    public object Value { get; public set; }
    public int OriginalIndex { get; public set; }
    public InMemoryRangeSortItem(object value, int originalIndex);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public int get_OriginalIndex();
    [CompilerGeneratedAttribute]
public void set_OriginalIndex(int value);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Sorting.SortByComparer : LookupComparerBase {
    public virtual int Compare(object x, object y);
    public virtual int Compare(object x, object y, int sortOrder);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Sorting.SortByImpl : object {
    private IRangeInfo _sourceRange;
    private List`1<IRangeInfo> _byRanges;
    private List`1<short> _sortOrders;
    private LookupDirection _direction;
    private LookupComparerBase _comparer;
    public SortByImpl(IRangeInfo sourceRange, List`1<IRangeInfo> byRanges, List`1<short> sortOrders, LookupDirection direction);
    public IRangeInfo Sort();
    private List`1<SortInfo> GetSortedRows();
    private List`1<SortInfo> GetSortedCols();
    [CompilerGeneratedAttribute]
private int <GetSortedRows>b__8_0(SortInfo a, SortInfo b);
    [CompilerGeneratedAttribute]
private int <GetSortedCols>b__9_0(SortInfo a, SortInfo b);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Sorting.SortedColOrRow : object {
    private Dictionary`2<int, InMemoryRangeSortItem> _indexCache;
    public int Count { get; }
    public void AddItem(int index, InMemoryRangeSortItem item);
    public InMemoryRangeSortItem GetByOriginalIndex(int index);
    public int get_Count();
    public List`1<InMemoryRangeSortItem> ToList();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Take : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public bool ReturnsReference { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual string get_NamespacePrefix();
    public virtual bool get_ReturnsReference();
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.ToCol : ToRowColBase {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.ToRow : ToRowColBase {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.ToRowColBase : ExcelFunction {
    public bool IsAllowedInCalculatedPivotTableField { get; }
    protected List`1<object> GetItemsFromRange(IRangeInfo range, int ignore, bool scanByColumn);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Transpose : ExcelFunction {
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Unique : ExcelFunction {
    private LookupComparer _comparer;
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private bool ListContainsArray(List`1<Object[]> items, Object[] candidate, Int32& collisionIx);
    private InMemoryRange GetByRows(IRangeInfo sourceRange, bool exactlyOnce);
    private InMemoryRange GetByCols(IRangeInfo sourceRange, bool exactlyOnce);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.VLookup : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual void GetNewParameterAddress(IList`1<CompileResult> args, int index, Queue`1& addresses);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Vstack : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.Xlookup : ExcelFunction {
    private Stopwatch _stopwatch;
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    private int GetMatchIndex(object lookupValue, IRangeInfo lookupRange, IRangeInfo returnArray, bool asc, LookupMatchMode matchMode);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private CompileResult BuildCompileResult(LookupRangeDirection lookupDirection, IRangeInfo returnArray, string notFoundText, int ix);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.XMatch : ExcelFunction {
    private Stopwatch _stopwatch;
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public bool IsAllowedInCalculatedPivotTableField { get; }
    public virtual string get_NamespacePrefix();
    private int GetMatchIndex(object lookupValue, IRangeInfo lookupRange, bool asc, LookupMatchMode matchMode);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public virtual bool get_IsAllowedInCalculatedPivotTableField();
}
public enum OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod : Enum {
    public int value__;
    public static RoundingMethod Convert;
    public static RoundingMethod Floor;
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Avedev : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Betadist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.BetaDotDist : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.BetaDotInv : Betainv {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Betainv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.BinomDist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.BinomDotDist : BinomDist {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.BinomDotDistDotRange : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.BinomInv : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChiDist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChiInv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChiSqDistRt : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChiSqDotDist : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChisqInv : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChisqInvRt : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChisqTest : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ChiTest : ChisqTest {
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Confidence : ConfidenceNorm {
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ConfidenceNorm : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double NormalCi(int s, double alpha, double sigma, int size);
    private double NormalInv(double p, double mean, double std);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ConfidenceT : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double StudentInv(double p, double dof);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Correl : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static double StandardDeviation(IList`1<double> values);
    private static double Covar(IList`1<double> array1, IList`1<double> array2);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Devsq : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Expondist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ExponDotDist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.FDist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.FdotDist : FDist {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.FDotInv : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.FDotInvDotRT : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.FdotTest : FTest {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Fisher : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.FisherInv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Forecast : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static double ForecastImpl(double x, Double[] arrayY, Double[] arrayX);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ForecastLinear : ExcelFunction {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Frequency : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private List`1<int> Calculate(List`1<object> objData, List`1<object> objBinsArray);
    private List`1<double> ToDoubles(List`1<object> list);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.FTest : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static double VarianceCalc(List`1<double> values);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Gamma : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.GammaDist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.GammaDotDist : GammaDist {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.GammaDotInv : GammaInv {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.GammaInv : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Gammaln : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.GammalnPrecise : Gammaln {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Gauss : NormalDistributionBase {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Geomean : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Growth : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Harmean : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Intercept : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static double InterceptImpl(double x, Double[] arrayY, Double[] arrayX);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Kurt : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Linest : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Logest : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.LogInv : LognormDotInv {
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.LogNormDotDist : NormalDistributionBase {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.LognormDotInv : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ModeDotMult : HiddenValuesHandlingFunction {
    public ExcelFunctionParametersInfo ParametersInfo { get; }
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionParametersInfo get_ParametersInfo();
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ModeSngl : Mode {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NegBinomDist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual string get_NamespacePrefix();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NegBinomDotDist : NegBinomDist {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
internal abstract class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NormalDistributionBase : ExcelFunction {
    protected double CumulativeDistribution(double x, double mean, double stdDev);
    protected double ProbabilityDensity(double x, double mean, double stdDev);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Normdist : NormalDistributionBase {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NormDotDist : Normdist {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NormDotInv : NormInv {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NormDotSdotDist : NormalDistributionBase {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NormDotSdotInv : NormsInv {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NormInv : NormInvBase {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual string get_NamespacePrefix();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Normsdist : NormalDistributionBase {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.NormsInv : NormInvBase {
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Pearson : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static double PearsonImpl(IEnumerable`1<double> arr1, IEnumerable`1<double> arr2);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Phi : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Poisson : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.PoissonDotDist : Poisson {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Prob : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Rsq : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Skew : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.SkewP : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private double CalcStandardDev(IEnumerable`1<double> numbers, double avg);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Slope : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Standardize : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Steyx : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.TDist : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.TDist2t : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.TDistRt : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.TDotDist : TDist {
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.TInv : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.TInv2t : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Trend : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Trimmean : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    public static double TrimMean(List`1<double> values, double percentage);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.TTest : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static double StandardDeviation(List`1<double> values);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.WeibullDist : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    internal static double expDistribution(double x, double lambda, bool cumulative);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.WeibullDotDist : WeibullDist {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.ZDotTest : Ztest {
    public string NamespacePrefix { get; }
    public virtual string get_NamespacePrefix();
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Statistical.Ztest : NormalDistributionBase {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.CharFunction : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Clean : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Concat : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Concatenate : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.CStr : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Dollar : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private string GetFormatString(int decimals);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Exact : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Find : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Fixed : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Hyperlink : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Left : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Len : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Lower : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Mid : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.NumberValue : ExcelFunction {
    private string _decimalSeparator;
    private string _groupSeparator;
    private string _arg;
    private int _nPercentage;
    public string NamespacePrefix { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void SetArgAndPercentage(string arg);
    private bool ValidateAndSetSeparators(IList`1<FunctionArgument> arguments);
    private bool DecimalSeparatorIsValid(string separator);
    private bool GroupSeparatorIsValid(string groupSeparator, string decimalSeparator);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Proper : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Replace : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private string GetFirstPart(string text, int startPos);
    private string GetLastPart(string text, int startPos, int nCharactersToReplace);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Rept : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Right : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Search : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual void ConfigureArrayBehaviour(ArrayBehaviourConfig config);
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Substitute : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static string ReplaceFirst(string text, string search, string replace, int instanceNumber);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.T : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
public class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Text : ExcelFunction {
    public int ArgumentMinLength { get; }
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private static string GetInvariantFormat(string format);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.TextAfter : ExcelFunctionTextBase {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void SetValue(InMemoryRange returnRange, string text, int x, int y, string ifNotFound, int length);
    private void countForward(InMemoryRange returnRange, int x, int y, string text, string delimiters, int instanceNum, int matchEnd, string ifNotFound, Int32& instances, Int32& length);
    private void CountBackwards(InMemoryRange returnRange, int x, int y, string text, string delimiters, int instanceNum, int matchEnd, string ifNotFound, Int32& instances, Int32& length);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.TextBefore : ExcelFunctionTextBase {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private void SetValue(InMemoryRange returnRange, string text, int x, int y, string ifNotFound, int length);
    private void countForward(InMemoryRange returnRange, int x, int y, string text, string delimiters, int instanceNum, int matchEnd, string ifNotFound, Int32& instances, Int32& length);
    private void CountBackwards(InMemoryRange returnRange, int x, int y, string text, string delimiters, int instanceNum, int matchEnd, string ifNotFound, Int32& instances, Int32& length);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Textjoin : ExcelFunction {
    private int MaxReturnLength;
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.TextSplit : ExcelFunctionTextBase {
    public int ArgumentMinLength { get; }
    public string NamespacePrefix { get; }
    public virtual int get_ArgumentMinLength();
    public virtual string get_NamespacePrefix();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
    private CompileResult CreateStringResult(string text, string colDelimiter, string rowDelimiter, string ignoreEmpty, string matchMode, string padWith);
    private CompileResult CreateRangeResult(string text, IRangeInfo range, string colDelimiter, string rowDelimiter, string ignoreEmpty, string matchMode, string padWith);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Trim : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Unichar : ExcelFunction {
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Unicode : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public string NamespacePrefix { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual string get_NamespacePrefix();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Upper : ExcelFunction {
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public int ArgumentMinLength { get; }
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual int get_ArgumentMinLength();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
[FunctionMetadataAttribute]
internal class OfficeOpenXml.FormulaParsing.Excel.Functions.Text.Value : ExcelFunction {
    private CultureInfo _cultureInfo;
    private string _groupSeparator;
    private string _decimalSeparator;
    private string _timeSeparator;
    private string _shortTimePattern;
    private DateValue _dateValueFunc;
    private TimeValue _timeValueFunc;
    public int ArgumentMinLength { get; }
    public ExcelFunctionArrayBehaviour ArrayBehaviour { get; }
    public Value(CultureInfo ci);
    public virtual int get_ArgumentMinLength();
    public virtual ExcelFunctionArrayBehaviour get_ArrayBehaviour();
    public virtual CompileResult Execute(IList`1<FunctionArgument> arguments, ParsingContext context);
}
public enum OfficeOpenXml.FormulaParsing.Excel.HiddenCellHandlingCategory : Enum {
    public int value__;
    public static HiddenCellHandlingCategory Default;
    public static HiddenCellHandlingCategory Subtotal;
    public static HiddenCellHandlingCategory Aggregate;
}
internal interface OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator {
    public Operators Operator { get; }
    public int Precedence { get; }
    public abstract virtual Operators get_Operator();
    public abstract virtual CompileResult Apply(CompileResult left, CompileResult right, ParsingContext ctx);
    public abstract virtual int get_Precedence();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Operators.KahanSum : object {
    private double _sum;
    private double _c;
    public KahanSum(double d);
    public KahanSum Add(double d);
    public static KahanSum op_Addition(KahanSum a, double b);
    public static KahanSum op_Addition(KahanSum a, KahanSum b);
    public static KahanSum op_Implicit(double d);
    public static double op_Implicit(KahanSum kh);
    public double Get();
    public void Clear();
}
public enum OfficeOpenXml.FormulaParsing.Excel.Operators.LimitedOperators : Enum {
    public int value__;
    public static LimitedOperators Equals;
    public static LimitedOperators GreaterThan;
    public static LimitedOperators GreaterThanOrEqual;
    public static LimitedOperators LessThan;
    public static LimitedOperators LessThanOrEqual;
    public static LimitedOperators NotEqualTo;
}
[DebuggerDisplayAttribute("Operator: {GetOperator()}")]
internal class OfficeOpenXml.FormulaParsing.Excel.Operators.Operator : object {
    internal static int PrecedenceColon;
    internal static int PrecedenceIntersect;
    internal static int PrecedencePercent;
    internal static int PrecedenceExp;
    internal static int PrecedenceMultiplyDivide;
    internal static int PrecedenceIntegerDivision;
    internal static int PrecedenceModulus;
    internal static int PrecedenceAddSubtract;
    internal static int PrecedenceConcat;
    internal static int PrecedenceComparison;
    internal static string IntersectIndicator;
    private Func`4<CompileResult, CompileResult, ParsingContext, CompileResult> _implementation;
    private int _precedence;
    private Operators _operator;
    private static IOperator _plus;
    private static IOperator _minus;
    private static IOperator _multiply;
    private static IOperator _divide;
    private static IOperator _colon;
    private static IOperator _intersect;
    private static IOperator _greaterThan;
    private static IOperator _eq;
    private static IOperator _notEqualsTo;
    private static IOperator _greaterThanOrEqual;
    private static IOperator _lessThan;
    private static IOperator _lessThanOrEqual;
    private int OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence { get; }
    private Operators OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator { get; }
    public static IOperator Plus { get; }
    public static IOperator Minus { get; }
    public static IOperator Multiply { get; }
    public static IOperator Divide { get; }
    public static IOperator Exp { get; }
    public static IOperator Concat { get; }
    public static IOperator Colon { get; }
    public static IOperator Intersect { get; }
    public static IOperator GreaterThan { get; }
    public static IOperator Eq { get; }
    public static IOperator NotEqualsTo { get; }
    public static IOperator GreaterThanOrEqual { get; }
    public static IOperator LessThan { get; }
    public static IOperator LessThanOrEqual { get; }
    private Operator(Operators operator, int precedence, Func`4<CompileResult, CompileResult, ParsingContext, CompileResult> implementation);
    private sealed virtual override int OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.get_Precedence();
    private sealed virtual override Operators OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.get_Operator();
    internal Operators GetOperator();
    public sealed virtual CompileResult Apply(CompileResult left, CompileResult right, ParsingContext ctx);
    private static bool CanDoNumericOperation(CompileResult l, CompileResult r);
    public static IOperator get_Plus();
    public static IOperator get_Minus();
    public static IOperator get_Multiply();
    public static IOperator get_Divide();
    public static IOperator get_Exp();
    private static string CompileResultToString(CompileResult c);
    public static IOperator get_Concat();
    public static IOperator get_Colon();
    public static IOperator get_Intersect();
    public static IOperator get_GreaterThan();
    public static IOperator get_Eq();
    public static IOperator get_NotEqualsTo();
    public static IOperator get_GreaterThanOrEqual();
    public static IOperator get_LessThan();
    public static IOperator get_LessThanOrEqual();
    private static object GetObjFromOther(CompileResult obj, CompileResult other);
    private static CompileResult Compare(CompileResult l, CompileResult r, Func`2<int, bool> comparison);
    private static int CompareString(object l, object r);
    private static bool EitherIsError(CompileResult l, CompileResult r, ExcelErrorValue& errorVal);
}
internal enum OfficeOpenXml.FormulaParsing.Excel.Operators.Operators : Enum {
    public int value__;
    public static Operators Undefined;
    public static Operators Concat;
    public static Operators Plus;
    public static Operators Minus;
    public static Operators Multiply;
    public static Operators Divide;
    public static Operators Modulus;
    public static Operators Percent;
    public static Operators Equals;
    public static Operators GreaterThan;
    public static Operators GreaterThanOrEqual;
    public static Operators LessThan;
    public static Operators LessThanOrEqual;
    public static Operators NotEqualTo;
    public static Operators IntegerDivision;
    public static Operators Exponentiation;
    public static Operators Colon;
    public static Operators Intersect;
}
internal class OfficeOpenXml.FormulaParsing.Excel.Operators.OperatorsDict : Dictionary`2<string, IOperator> {
    private static IDictionary`2<string, IOperator> _instance;
    public static IDictionary`2<string, IOperator> Instance { get; }
    public static IDictionary`2<string, IOperator> get_Instance();
}
internal class OfficeOpenXml.FormulaParsing.Excel.Operators.OperatorsEnumDict : Dictionary`2<Operators, IOperator> {
    private static IDictionary`2<Operators, IOperator> _instance;
    public static IDictionary`2<Operators, IOperator> Instance { get; }
    public static IDictionary`2<Operators, IOperator> get_Instance();
}
internal static class OfficeOpenXml.FormulaParsing.Excel.Operators.RangeOperationsOperator : object {
    private static double DoublePrecision;
    private static object ApplyOperator(double l, double r, Operators op, Boolean& error);
    private static object ApplyOperator(string l, string r, Operators op, Boolean& error);
    internal static InMemoryRange Negate(IRangeInfo ri);
    private static InMemoryRange CreateRange(IRangeInfo l, IRangeInfo r, FormulaRangeAddress address);
    private static void SetValue(InMemoryRange resultRange, int row, int col, object value, bool error);
    private static bool IsNumeric(object val);
    private static void SetValue(Operators op, InMemoryRange resultRange, int row, int col, object leftVal, object rightVal);
    private static bool ShouldUseSingleRow(RangeDefinition lSize, RangeDefinition rSize);
    private static bool ShouldUseSingleCol(RangeDefinition lSize, RangeDefinition rSize);
    private static bool ShouldUseSingleCell(RangeDefinition lSize, RangeDefinition rSize);
    private static bool AddressIsNotAvailable(RangeDefinition lSize, RangeDefinition rSize, int row, int col);
    public static CompileResult Apply(CompileResult left, CompileResult right, Operators op, ParsingContext context);
    private static object GetCellValue(IRangeInfo range, int rowOffset, int colOffset);
    public static InMemoryRange ApplySingleValueRight(CompileResult left, CompileResult right, Operators op, ParsingContext context);
    public static InMemoryRange ApplySingleValueLeft(CompileResult left, CompileResult right, Operators op, ParsingContext context);
    private static InMemoryRange ApplyRanges(CompileResult left, CompileResult right, Operators op, ParsingContext context, FormulaRangeAddress intersectAddress);
}
public class OfficeOpenXml.FormulaParsing.ExcelAddressCache : object {
    private object _myLock;
    private Dictionary`2<int, string> _addressCache;
    private Dictionary`2<string, int> _lookupCache;
    private int _nextId;
    private static bool EnableLookupCache;
    public int Count { get; }
    public int GetNewId();
    public bool Add(int id, string address);
    public int get_Count();
    public string Get(int id);
    public void Clear();
}
public class OfficeOpenXml.FormulaParsing.ExcelCalculationOption : object {
    [CompilerGeneratedAttribute]
private bool <AllowCircularReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private PrecisionAndRoundingStrategy <PrecisionAndRoundingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowDependencyChain>k__BackingField;
    public bool AllowCircularReferences { get; public set; }
    public bool CacheExpressions { get; public set; }
    public PrecisionAndRoundingStrategy PrecisionAndRoundingStrategy { get; public set; }
    public bool FollowDependencyChain { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowCircularReferences();
    [CompilerGeneratedAttribute]
public void set_AllowCircularReferences(bool value);
    [CompilerGeneratedAttribute]
public bool get_CacheExpressions();
    [CompilerGeneratedAttribute]
public void set_CacheExpressions(bool value);
    [CompilerGeneratedAttribute]
public PrecisionAndRoundingStrategy get_PrecisionAndRoundingStrategy();
    [CompilerGeneratedAttribute]
public void set_PrecisionAndRoundingStrategy(PrecisionAndRoundingStrategy value);
    [CompilerGeneratedAttribute]
public bool get_FollowDependencyChain();
    [CompilerGeneratedAttribute]
public void set_FollowDependencyChain(bool value);
}
internal abstract class OfficeOpenXml.FormulaParsing.ExcelDataProvider : object {
    public int ExcelMaxColumns { get; }
    public int ExcelMaxRows { get; }
    public abstract virtual IEnumerable`1<string> GetWorksheets();
    public abstract virtual ExcelNamedRangeCollection GetWorksheetNames(int wsIx);
    public abstract virtual ExcelNamedRangeCollection GetWorksheetNames(string worksheetName);
    public abstract virtual bool IsExternalName(string name);
    public abstract virtual ExcelTable GetExcelTable(string name);
    public abstract virtual int GetWorksheetIndex(string worksheetName);
    public abstract virtual ExcelNamedRangeCollection GetWorkbookNameValues();
    public abstract virtual IRangeInfo GetRange(string worksheetName, int row, int column, string address);
    public abstract virtual IRangeInfo GetRange(string worksheetName, string address);
    internal abstract virtual IRangeInfo GetRange(FormulaRangeAddress range);
    public abstract virtual IRangeInfo GetRange(int wsIx, int row, int column);
    public abstract virtual INameInfo GetName(int externalRef, int wsIx, string name);
    public abstract virtual INameInfo GetName(ExcelNamedRange nameItem);
    public abstract virtual IEnumerable`1<object> GetRangeValues(string address);
    public abstract virtual string GetRangeFormula(string worksheetName, int row, int column);
    public abstract virtual IList`1<Token> GetRangeFormulaTokens(string worksheetName, int row, int column);
    public abstract virtual bool IsRowHidden(string worksheetName, int row);
    public abstract virtual object GetCellValue(string sheetName, int row, int col);
    public abstract virtual object GetCellValue(int wsIx, int row, int col);
    public abstract virtual ulong GetCellId(int wsIx, int row, int col);
    public abstract virtual ExcelCellAddress GetDimensionEnd(int worksheet);
    public abstract virtual void Dispose();
    public abstract virtual int get_ExcelMaxColumns();
    public abstract virtual int get_ExcelMaxRows();
    public abstract virtual object GetRangeValue(string worksheetName, int row, int column);
    public abstract virtual string GetFormat(object value, string format);
    public abstract virtual void Reset();
    public abstract virtual IRangeInfo GetRange(string worksheet, int fromRow, int fromCol, int toRow, int toCol);
}
internal class OfficeOpenXml.FormulaParsing.ExcelUtilities.AddressTranslator : object {
    private ExcelDataProvider _excelDataProvider;
    internal AddressTranslator(ExcelDataProvider excelDataProvider);
    public virtual void ToColAndRow(string address, Int32& col, Int32& row);
    public virtual void ToColAndRow(string address, Int32& col, Int32& row, RangeCalculationBehaviour behaviour);
    private int GetRowIndexByBehaviour(RangeCalculationBehaviour behaviour);
    private int GetNumericAlphaValue(char c);
    private string GetAlphaPart(string address);
    private Nullable`1<int> GetIntPart(string address);
}
public class OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo : object {
    [CompilerGeneratedAttribute]
private string <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartCell>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndCell>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddressOnSheet>k__BackingField;
    public string Worksheet { get; private set; }
    public bool WorksheetIsSpecified { get; }
    public bool IsMultipleCells { get; }
    public string StartCell { get; private set; }
    public string EndCell { get; private set; }
    public string AddressOnSheet { get; private set; }
    private ExcelAddressInfo(string address);
    public static ExcelAddressInfo Parse(string address);
    [CompilerGeneratedAttribute]
public string get_Worksheet();
    [CompilerGeneratedAttribute]
private void set_Worksheet(string value);
    public bool get_WorksheetIsSpecified();
    public bool get_IsMultipleCells();
    [CompilerGeneratedAttribute]
public string get_StartCell();
    [CompilerGeneratedAttribute]
private void set_StartCell(string value);
    [CompilerGeneratedAttribute]
public string get_EndCell();
    [CompilerGeneratedAttribute]
private void set_EndCell(string value);
    [CompilerGeneratedAttribute]
public string get_AddressOnSheet();
    [CompilerGeneratedAttribute]
private void set_AddressOnSheet(string value);
}
public static class OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressUtil : object {
    private static Char[] SheetNameInvalidChars;
    private static Char[] NameInvalidChars;
    private static ExcelAddressUtil();
    public static bool IsValidAddress(string token);
    public static bool IsValidName(string name);
    public static string GetValidName(string name);
}
public enum OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelReferenceType : Enum {
    public int value__;
    public static ExcelReferenceType AbsoluteRowAndColumn;
    public static ExcelReferenceType AbsoluteRowRelativeColumn;
    public static ExcelReferenceType RelativeRowAbsoluteColumn;
    public static ExcelReferenceType RelativeRowAndColumn;
}
internal class OfficeOpenXml.FormulaParsing.ExcelUtilities.ExpressionEvaluator : object {
    private WildCardValueMatcher2 _wildCardValueMatcher;
    private ParsingContext _parsingContext;
    private TimeStringParserV2 _timeStringParser;
    public ExpressionEvaluator(ParsingContext ctx);
    public ExpressionEvaluator(WildCardValueMatcher2 wildCardValueMatcher, ParsingContext ctx);
    private string GetNonAlphanumericStartChars(string expr);
    private bool EvaluateOperator(object left, object right, IOperator op);
    public bool TryConvertToDouble(object op, Double& d, bool convertNumericString);
    public bool Evaluate(object left, IEnumerable`1<string> expressions);
    public bool Evaluate(object left, string expression);
    public bool Evaluate(object left, string expression, bool convertNumericString);
    private bool TryConvertStringToDouble(string right, Double& result);
}
internal class OfficeOpenXml.FormulaParsing.ExcelUtilities.IndexToAddressTranslator : object {
    private ExcelDataProvider _excelDataProvider;
    private ExcelReferenceType _excelReferenceType;
    internal IndexToAddressTranslator(ExcelDataProvider excelDataProvider);
    internal IndexToAddressTranslator(ExcelDataProvider excelDataProvider, ExcelReferenceType referenceType);
    protected internal static string GetColumnLetter(int iColumnNumber, bool fixedCol);
    public string ToAddress(int col, int row);
    private string GetRowNumber(int rowNo);
}
public class OfficeOpenXml.FormulaParsing.ExcelUtilities.LookupValueMatcher : ValueMatcher {
    protected virtual int CompareObjectToString(object o1, string o2);
}
public class OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromCol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToCol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToRow>k__BackingField;
    private static RangeAddress _empty;
    internal string Address { get; internal set; }
    public string Worksheet { get; internal set; }
    public int FromCol { get; internal set; }
    public int ToCol { get; internal set; }
    public int FromRow { get; internal set; }
    public int ToRow { get; internal set; }
    public static RangeAddress Empty { get; }
    private static RangeAddress();
    [CompilerGeneratedAttribute]
internal string get_Address();
    [CompilerGeneratedAttribute]
internal void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Worksheet();
    [CompilerGeneratedAttribute]
internal void set_Worksheet(string value);
    [CompilerGeneratedAttribute]
public int get_FromCol();
    [CompilerGeneratedAttribute]
internal void set_FromCol(int value);
    [CompilerGeneratedAttribute]
public int get_ToCol();
    [CompilerGeneratedAttribute]
internal void set_ToCol(int value);
    [CompilerGeneratedAttribute]
public int get_FromRow();
    [CompilerGeneratedAttribute]
internal void set_FromRow(int value);
    [CompilerGeneratedAttribute]
public int get_ToRow();
    [CompilerGeneratedAttribute]
internal void set_ToRow(int value);
    public virtual string ToString();
    public static RangeAddress get_Empty();
    public bool CollidesWith(RangeAddress other);
}
internal class OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddressFactory : object {
    private ExcelDataProvider _excelDataProvider;
    private AddressTranslator _addressTranslator;
    private IndexToAddressTranslator _indexToAddressTranslator;
    private ParsingContext _context;
    internal RangeAddressFactory(ExcelDataProvider excelDataProvider, ParsingContext context);
    internal RangeAddressFactory(ExcelDataProvider excelDataProvider, AddressTranslator addressTranslator, IndexToAddressTranslator indexToAddressTranslator, ParsingContext context);
    public FormulaRangeAddress Create(int col, int row);
    public FormulaRangeAddress Create(int wsIx, int col, int row);
    public FormulaRangeAddress Create(int wsIx, string address);
    public FormulaRangeAddress Create(string range);
    public FormulaCellAddress CreateCell(string cell);
}
internal class OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeFlattener : object {
    public static List`1<Nullable`1<double>> FlattenRange(IRangeInfo r1, bool addNullifEmpty);
    public static List`1<object> FlattenRangeObject(IRangeInfo r1);
    public static void GetNumericPairLists(IRangeInfo r1, IRangeInfo r2, bool dataPointsEqual, List`1& l1, List`1& l2);
}
public class OfficeOpenXml.FormulaParsing.ExcelUtilities.ValueMatcher : object {
    public static int IncompatibleOperands;
    public virtual int IsMatch(object searchedValue, object candidate, bool convertNumericString);
    private static object CheckGetRange(object v);
    protected virtual int CompareStringToString(string searchedValue, string candidate);
    protected virtual int CompareStringToObject(string searchedValue, object candidate, bool convertNumericString);
    protected virtual int CompareObjectToString(object searchedValue, string candidate);
}
internal class OfficeOpenXml.FormulaParsing.ExcelUtilities.VariableParameterHelper : object {
    private IList`1<Token> _tokens;
    private List`1<int> _funcPositions;
    private List`1<VariableFunction> _functions;
    public VariableParameterHelper(IList`1<Token> tokens, List`1<int> funcPositions);
    internal static bool IsVariableParameterFunction(string funcName);
    private static bool IsVariableArg(string funcName, int argIndex, int argCount);
    internal void Process();
    private void ProcessVariableArguments(VariableFunction func);
    private static string ProcessVariableToken(string variableToken);
}
public class OfficeOpenXml.FormulaParsing.ExcelUtilities.WildCardValueMatcher : ValueMatcher {
    protected virtual int CompareStringToString(string searchedValue, string candidate);
    private string BuildRegex(string searchedValue, string candidate);
}
internal class OfficeOpenXml.FormulaParsing.ExcelUtilities.WildCardValueMatcher2 : ValueMatcher {
    protected virtual int CompareStringToString(string searchedValue, string candidate);
    private bool IsMatch(string searchedValue, string candidate);
}
public class OfficeOpenXml.FormulaParsing.Exceptions.CircularReferenceException : Exception {
    public CircularReferenceException(string message);
}
public class OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    private static IEnumerable`1<string> Codes;
    public string Code { get; private set; }
    public static ExcelErrorCodes Value { get; }
    public static ExcelErrorCodes Name { get; }
    public static ExcelErrorCodes NoValueAvaliable { get; }
    private ExcelErrorCodes(string code);
    private static ExcelErrorCodes();
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(ExcelErrorCodes c1, ExcelErrorCodes c2);
    public static bool op_Inequality(ExcelErrorCodes c1, ExcelErrorCodes c2);
    public static bool IsErrorCode(object valueToTest);
    public static ExcelErrorCodes get_Value();
    public static ExcelErrorCodes get_Name();
    public static ExcelErrorCodes get_NoValueAvaliable();
}
public class OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException : Exception {
    [CompilerGeneratedAttribute]
private ExcelErrorValue <ErrorValue>k__BackingField;
    public ExcelErrorValue ErrorValue { get; private set; }
    public ExcelErrorValueException(ExcelErrorValue error);
    public ExcelErrorValueException(string message, ExcelErrorValue error);
    public ExcelErrorValueException(eErrorType errorType);
    [CompilerGeneratedAttribute]
public ExcelErrorValue get_ErrorValue();
    [CompilerGeneratedAttribute]
private void set_ErrorValue(ExcelErrorValue value);
}
public class OfficeOpenXml.FormulaParsing.Exceptions.InvalidFormulaException : Exception {
    public InvalidFormulaException(string msg);
    public InvalidFormulaException(string msg, Exception innerException);
}
public class OfficeOpenXml.FormulaParsing.Exceptions.UnrecognizedTokenException : Exception {
    public UnrecognizedTokenException(Token token);
}
internal class OfficeOpenXml.FormulaParsing.FilterInfo : object {
    private ExcelWorkbook _workbook;
    private HashSet`1<int> _activeWorksheetFilters;
    public FilterInfo(ExcelWorkbook workbook);
    private void Initialize();
    public bool WorksheetHasActiveFilter(int wsIx);
}
internal class OfficeOpenXml.FormulaParsing.FormulaCell : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <wsIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Formula>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CircularRefAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Token> <Tokens>k__BackingField;
    internal int tokenIx;
    internal int addressIx;
    internal CellStoreEnumerator`1<object> iterator;
    internal ExcelWorksheet iteratorWs;
    internal ExcelWorksheet ws;
    internal int Index { get; internal set; }
    internal int wsIndex { get; internal set; }
    internal int Row { get; internal set; }
    internal int Column { get; internal set; }
    internal string Formula { get; internal set; }
    internal string CircularRefAddress { get; internal set; }
    internal List`1<Token> Tokens { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
internal int get_wsIndex();
    [CompilerGeneratedAttribute]
internal void set_wsIndex(int value);
    [CompilerGeneratedAttribute]
internal int get_Row();
    [CompilerGeneratedAttribute]
internal void set_Row(int value);
    [CompilerGeneratedAttribute]
internal int get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(int value);
    [CompilerGeneratedAttribute]
internal string get_Formula();
    [CompilerGeneratedAttribute]
internal void set_Formula(string value);
    [CompilerGeneratedAttribute]
internal string get_CircularRefAddress();
    [CompilerGeneratedAttribute]
internal void set_CircularRefAddress(string value);
    [CompilerGeneratedAttribute]
internal List`1<Token> get_Tokens();
    [CompilerGeneratedAttribute]
internal void set_Tokens(List`1<Token> value);
}
public class OfficeOpenXml.FormulaParsing.FormulaCellInfo : object {
    private string _worksheet;
    private string _address;
    private string _formula;
    public string Worksheet { get; }
    public string Address { get; }
    public string Formula { get; }
    internal FormulaCellInfo(string worksheet, string address, string formula);
    public sealed virtual string get_Worksheet();
    public sealed virtual string get_Address();
    public sealed virtual string get_Formula();
}
public class OfficeOpenXml.FormulaParsing.FormulaExpressions.AddressCompileResult : CompileResult {
    [CompilerGeneratedAttribute]
private FormulaRangeAddress <Address>k__BackingField;
    public FormulaRangeAddress Address { get; }
    public CompileResultType ResultType { get; }
    public AddressCompileResult(object result, DataType dataType, FormulaRangeAddress address);
    public AddressCompileResult(object result, DataType dataType);
    public AddressCompileResult(eErrorType error);
    public AddressCompileResult(ExcelErrorValue errorValue);
    [CompilerGeneratedAttribute]
public virtual FormulaRangeAddress get_Address();
    public virtual CompileResultType get_ResultType();
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.BooleanExpression : Expression {
    private BooleanExpression _negatedExpression;
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal BooleanExpression(string tokenValue, ParsingContext ctx);
    internal BooleanExpression(CompileResult result, ParsingContext ctx);
    private BooleanExpression(ParsingContext ctx, BooleanExpression exp, bool negatedValue);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
}
public class OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResult : CompileResultBase {
    private static CompileResult _empty;
    private static CompileResult _zeroDecimal;
    private static CompileResult _zeroInt;
    private static CompileResult _errorRef;
    private static CompileResult _errorValue;
    private static CompileResult _errorNA;
    private static CompileResult _errorDiv0;
    private static CompileResult _errorNull;
    private static CompileResult _errorName;
    private static CompileResult _errorNum;
    private static CompileResult _errorCalc;
    private static DynamicArrayCompileResult _arrayErrorRef;
    private static DynamicArrayCompileResult _arrayErrorValue;
    private static DynamicArrayCompileResult _arrayErrorNA;
    private static DynamicArrayCompileResult _arrayErrorDiv0;
    private static DynamicArrayCompileResult _arrayErrorNull;
    private static DynamicArrayCompileResult _arrayErrorName;
    private static DynamicArrayCompileResult _arrayErrorNum;
    private static DynamicArrayCompileResult _arrayErrorCalc;
    [CompilerGeneratedAttribute]
private static CompileResult <False>k__BackingField;
    [CompilerGeneratedAttribute]
private static CompileResult <True>k__BackingField;
    private Nullable`1<double> _resultNumeric;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResultOfSubtotal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHiddenCell>k__BackingField;
    public static CompileResult Empty { get; }
    public static CompileResult ZeroDecimal { get; }
    public static CompileResult ZeroInt { get; }
    public static CompileResult False { get; }
    public static CompileResult True { get; }
    public object Result { get; private set; }
    public object ResultValue { get; }
    public double ResultNumeric { get; }
    public DataType DataType { get; private set; }
    public bool IsNumeric { get; }
    public bool IsNumericString { get; }
    public bool IsPercentageString { get; }
    public bool IsDateString { get; }
    public bool IsResultOfSubtotal { get; public set; }
    public bool IsHiddenCell { get; public set; }
    public bool IsResultOfResolvedExcelRange { get; }
    public FormulaRangeAddress Address { get; }
    public CompileResultType ResultType { get; }
    public CompileResult(object result, DataType dataType);
    public CompileResult(eErrorType errorType);
    public CompileResult(ExcelErrorValue errorValue);
    private static CompileResult();
    public static CompileResult get_Empty();
    public static CompileResult get_ZeroDecimal();
    public static CompileResult get_ZeroInt();
    [CompilerGeneratedAttribute]
public static CompileResult get_False();
    [CompilerGeneratedAttribute]
public static CompileResult get_True();
    internal CompileResult Negate();
    internal static CompileResult GetDynamicArrayResultError(eErrorType errorType);
    public static CompileResult GetErrorResult(eErrorType errorType);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(object value);
    public object get_ResultValue();
    public double get_ResultNumeric();
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
private void set_DataType(DataType value);
    public bool get_IsNumeric();
    public bool get_IsNumericString();
    public bool get_IsPercentageString();
    public bool get_IsDateString();
    [CompilerGeneratedAttribute]
public bool get_IsResultOfSubtotal();
    [CompilerGeneratedAttribute]
public void set_IsResultOfSubtotal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHiddenCell();
    [CompilerGeneratedAttribute]
public void set_IsHiddenCell(bool value);
    public bool get_IsResultOfResolvedExcelRange();
    public virtual FormulaRangeAddress get_Address();
    public virtual CompileResultType get_ResultType();
}
public abstract class OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResultBase : object {
    public CompileResultType ResultType { get; }
    public abstract virtual CompileResultType get_ResultType();
}
internal static class OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResultFactory : object {
    public static CompileResult Create(object obj);
    public static CompileResult CreateDynamicArray(object obj, FormulaRangeAddress address);
    public static CompileResult Create(object obj, FormulaRangeAddress address);
    private static DataType GetDataType(Object& obj);
}
public enum OfficeOpenXml.FormulaParsing.FormulaExpressions.CompileResultType : Enum {
    public int value__;
    public static CompileResultType Normal;
    public static CompileResultType RangeAddress;
    public static CompileResultType DynamicArray;
}
public enum OfficeOpenXml.FormulaParsing.FormulaExpressions.DataType : Enum {
    public int value__;
    public static DataType Integer;
    public static DataType Decimal;
    public static DataType String;
    public static DataType Boolean;
    public static DataType Date;
    public static DataType Time;
    public static DataType ExcelRange;
    public static DataType ExcelError;
    public static DataType Empty;
    public static DataType Unknown;
    public static DataType Variable;
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.DecimalExpression : Expression {
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal DecimalExpression(string tokenValue, ParsingContext ctx);
    internal DecimalExpression(CompileResult result, ParsingContext ctx);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
}
public class OfficeOpenXml.FormulaParsing.FormulaExpressions.DynamicArrayCompileResult : AddressCompileResult {
    public CompileResultType ResultType { get; }
    public DynamicArrayCompileResult(object result, DataType dataType, FormulaRangeAddress address);
    public DynamicArrayCompileResult(object result, DataType dataType);
    public DynamicArrayCompileResult(eErrorType error);
    public DynamicArrayCompileResult(ExcelErrorValue errorValue);
    public virtual CompileResultType get_ResultType();
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.EmptyExpression : Expression {
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
    public virtual Expression Negate();
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.EnumerableExpression : Expression {
    private IRangeInfo _range;
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal EnumerableExpression(CompileResult result, ParsingContext ctx);
    internal EnumerableExpression(IRangeInfo range, ParsingContext ctx);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.ErrorExpression : Expression {
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal static ErrorExpression RefError { get; }
    internal static ErrorExpression ValueError { get; }
    internal static ErrorExpression NaError { get; }
    internal static ErrorExpression NameError { get; }
    internal static ErrorExpression NumError { get; }
    internal static ErrorExpression NullError { get; }
    internal static ErrorExpression Div0Error { get; }
    internal static ErrorExpression CalcError { get; }
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal ErrorExpression(string tokenValue, ParsingContext ctx);
    internal ErrorExpression(CompileResult result, ParsingContext ctx);
    internal static ErrorExpression get_RefError();
    internal static ErrorExpression get_ValueError();
    internal static ErrorExpression get_NaError();
    internal static ErrorExpression get_NameError();
    internal static ErrorExpression get_NumError();
    internal static ErrorExpression get_NullError();
    internal static ErrorExpression get_Div0Error();
    internal static ErrorExpression get_CalcError();
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
}
internal abstract class OfficeOpenXml.FormulaParsing.FormulaExpressions.Expression : object {
    internal CompileResult _cachedCompileResult;
    internal Operators Operator;
    internal static EmptyExpression Empty;
    [CompilerGeneratedAttribute]
private ParsingContext <Context>k__BackingField;
    protected ParsingContext Context { get; private set; }
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    public Expression(ParsingContext ctx);
    private static Expression();
    [CompilerGeneratedAttribute]
protected ParsingContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ParsingContext value);
    internal abstract virtual ExpressionType get_ExpressionType();
    public abstract virtual CompileResult Compile();
    public abstract virtual Expression Negate();
    internal virtual Expression CloneWithOffset(int row, int col);
    internal abstract virtual ExpressionStatus get_Status();
    internal abstract virtual void set_Status(ExpressionStatus value);
    public virtual FormulaRangeAddress GetAddress();
    internal virtual void MergeAddress(string address);
}
internal enum OfficeOpenXml.FormulaParsing.FormulaExpressions.ExpressionCondition : Enum {
    public byte value__;
    public static ExpressionCondition None;
    public static ExpressionCondition False;
    public static ExpressionCondition True;
    public static ExpressionCondition Error;
    public static ExpressionCondition Multi;
}
[FlagsAttribute]
internal enum OfficeOpenXml.FormulaParsing.FormulaExpressions.ExpressionStatus : Enum {
    public short value__;
    public static ExpressionStatus NoSet;
    public static ExpressionStatus CanCompile;
    public static ExpressionStatus IsAddress;
    public static ExpressionStatus OnExpressionList;
    public static ExpressionStatus FunctionArgument;
    public static ExpressionStatus IsCached;
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.FormulaCell : object {
    internal Stack`1<Expression> _expressionStack;
    internal Stack`1<FunctionExpression> _funcStackPosition;
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.FormulaExecutor : object {
    private ParsingContext _parsingContext;
    internal FormulaExecutor(ParsingContext parsingContext);
    internal static List`1<Token> CreateRPNTokens(IList`1<Token> tokens);
    public static Dictionary`2<int, Expression> CompileExpressions(IList`1& tokens, ParsingContext parsingContext);
    private static void ExtractTableAddress(int extRef, int wsIx, IList`1<Token> exps, int i, FormulaTableAddress& tableAddress, ParsingContext parsingContext);
    private static void ExtractArray(IList`1<Token> exps, int i, IRangeInfo& range, ParsingContext parsingContext);
    private void PushResult(FormulaCell cell, CompileResult result);
    private IList`1<Expression> GetFunctionArguments(FormulaCell cell);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.CustomArrayBehaviourCompiler : FunctionCompiler {
    private bool _handleErrors;
    internal CustomArrayBehaviourCompiler(ExcelFunction function, ParsingContext context);
    internal CustomArrayBehaviourCompiler(ExcelFunction function, ParsingContext context, bool handleErrors);
    public virtual CompileResult Compile(IEnumerable`1<CompileResult> children, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.DefaultCompiler : FunctionCompiler {
    public DefaultCompiler(ExcelFunction function);
    public virtual CompileResult Compile(IEnumerable`1<CompileResult> children, ParsingContext context);
}
public abstract class OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompiler : object {
    [CompilerGeneratedAttribute]
private ExcelFunction <Function>k__BackingField;
    protected ExcelFunction Function { get; private set; }
    public FunctionCompiler(ExcelFunction function);
    [CompilerGeneratedAttribute]
protected ExcelFunction get_Function();
    [CompilerGeneratedAttribute]
private void set_Function(ExcelFunction value);
    protected void BuildFunctionArguments(CompileResult compileResult, DataType dataType, List`1<FunctionArgument> args);
    protected void BuildFunctionArguments(CompileResult result, List`1<FunctionArgument> args);
    public abstract virtual CompileResult Compile(IEnumerable`1<CompileResult> children, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.FunctionCompilerFactory : object {
    public FunctionCompilerFactory(FunctionRepository repository);
    private FunctionCompiler GetCompilerByType(ExcelFunction function, ParsingContext context);
    internal virtual FunctionCompiler Create(ExcelFunction function, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionCompilers.VariableFunctionCompiler : FunctionCompiler {
    public VariableFunctionCompiler(ExcelFunction function);
    public virtual CompileResult Compile(IEnumerable`1<CompileResult> children, ParsingContext context);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.FunctionExpression : Expression {
    internal ExcelFunction _function;
    internal int _startPos;
    internal int _endPos;
    protected IList`1<int> _arguments;
    internal int _argPos;
    internal ExpressionCondition _latestConditionValue;
    internal CompileResult _cachedResult;
    internal int _negate;
    protected IList`1<CompileResult> _args;
    internal Queue`1<FormulaRangeAddress> _dependencyAddresses;
    private ExpressionStatus _status;
    internal ExpressionType ExpressionType { get; }
    internal bool HandlesVariables { get; }
    internal int NumberOfArguments { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal FunctionExpression(string tokenValue, ParsingContext ctx, int pos);
    private FunctionExpression(ParsingContext ctx);
    internal virtual ExpressionType get_ExpressionType();
    internal virtual bool get_HandlesVariables();
    internal virtual bool IsVariableArg(int arg, bool isLastArgument);
    internal virtual bool IsVariable(string name);
    internal virtual void AddArgument(int arg);
    internal int get_NumberOfArguments();
    internal int GetArgument(int arg);
    public virtual Expression Negate();
    internal bool SetArguments(IList`1<CompileResult> argsResults);
    public virtual CompileResult Compile();
    internal int GetTokenPosForArg(FunctionParameterInformation type);
    internal virtual Expression CloneWithOffset(int row, int col);
    internal string GetExpressionKey(RpnFormula f);
    internal bool NeedsCheckAddressAdjustment();
    internal virtual ExpressionStatus get_Status();
    internal virtual void set_Status(ExpressionStatus value);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.IntegerExpression : Expression {
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal IntegerExpression(string tokenValue, ParsingContext ctx);
    internal IntegerExpression(CompileResult result, ParsingContext ctx);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.LetFunctionExpression : VariableFunctionExpression {
    internal bool HandlesVariables { get; }
    internal LetFunctionExpression(string tokenValue, Stack`1<FunctionExpression> funcStack, ParsingContext ctx, int pos);
    internal virtual void AddArgument(int arg);
    internal virtual bool get_HandlesVariables();
    internal virtual bool IsVariableArg(int arg, bool isLastArgument);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.NamedValueExpression : Expression {
    internal short _externalReferenceIx;
    internal int _worksheetIx;
    internal INameInfo _name;
    private int _negate;
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    public bool IsRelative { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal NamedValueExpression(string name, ParsingContext parsingContext, short externalReferenceIx, int worksheetIx);
    private NamedValueExpression(INameInfo nameInfo, ParsingContext parsingContext, short externalReferenceIx, int worksheetIx, int negate);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public bool get_IsRelative();
    private CompileResult GetNegatedValue(object value, FormulaRangeAddress address);
    private InMemoryRange CreateNegatedRange(IRangeInfo range);
    public virtual Expression Negate();
    public virtual FormulaRangeAddress GetAddress();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
}
[DebuggerDisplayAttribute("RpnRangeExpression: {_addressInfo.Address}")]
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.RangeExpression : Expression {
    protected FormulaRangeAddress _addressInfo;
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal RangeExpression(CompileResult result, ParsingContext ctx);
    internal RangeExpression(FormulaRangeAddress address);
    public RangeExpression(string address, ParsingContext ctx, short externalReferenceIx, int worksheetIx);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
    internal virtual Expression CloneWithOffset(int row, int col);
    public virtual FormulaRangeAddress GetAddress();
    internal virtual void MergeAddress(string address);
    private void SetFixedFlag(bool setFlag, FixedFlag flag);
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.StringExpression : Expression {
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    internal StringExpression(string tokenValue, ParsingContext ctx);
    internal StringExpression(CompileResult result, ParsingContext ctx);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
}
[DebuggerDisplayAttribute("TableAddressExpression: {_addressInfo}")]
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.TableAddressExpression : Expression {
    private FormulaTableAddress _addressInfo;
    private bool _negate;
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    internal ExpressionStatus Status { get; internal set; }
    public TableAddressExpression(FormulaTableAddress addressInfo, ParsingContext ctx);
    internal virtual ExpressionType get_ExpressionType();
    public virtual CompileResult Compile();
    public virtual Expression Negate();
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
    public virtual FormulaRangeAddress GetAddress();
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.VariableExpression : Expression {
    private VariableFunctionExpression _variableFunctionExpression;
    private bool _negate;
    [CompilerGeneratedAttribute]
private bool <IsDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal ExpressionType ExpressionType { get; }
    public bool IsDeclaration { get; private set; }
    internal ExpressionStatus Status { get; internal set; }
    internal CompileResult Value { get; }
    internal string Name { get; private set; }
    public VariableExpression(string variableName, VariableFunctionExpression expression, bool isDeclaration);
    internal virtual ExpressionType get_ExpressionType();
    [CompilerGeneratedAttribute]
public bool get_IsDeclaration();
    [CompilerGeneratedAttribute]
private void set_IsDeclaration(bool value);
    [CompilerGeneratedAttribute]
internal virtual ExpressionStatus get_Status();
    [CompilerGeneratedAttribute]
internal virtual void set_Status(ExpressionStatus value);
    internal CompileResult get_Value();
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual CompileResult Compile();
    public virtual Expression Negate();
}
internal class OfficeOpenXml.FormulaParsing.FormulaExpressions.VariableFunctionExpression : FunctionExpression {
    private Dictionary`2<string, CompileResult> _variables;
    private string _lastDeclaredVariable;
    internal int NumberOfVariables { get; }
    internal VariableFunctionExpression(string tokenValue, Stack`1<FunctionExpression> funcStack, ParsingContext ctx, int pos);
    internal virtual bool IsVariable(string name);
    internal void DeclareVariable(string name);
    internal bool VariableIsDeclared(string name);
    internal bool VariableIsSet(string name);
    internal int get_NumberOfVariables();
    internal void AddVariableValue(CompileResult value);
    internal void AddVariableValue(string name, CompileResult value);
    internal CompileResult GetVariableValue(string variableName);
}
public class OfficeOpenXml.FormulaParsing.FormulaParser : object {
    private ParsingContext _parsingContext;
    private ExcelDataProvider _excelDataProvider;
    [CompilerGeneratedAttribute]
private ISourceCodeTokenizer <Tokenizer>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterInfo <FilterInfo>k__BackingField;
    internal ParsingContext ParsingContext { get; }
    internal ISourceCodeTokenizer Tokenizer { get; private set; }
    internal IEnumerable`1<string> FunctionNames { get; }
    internal FilterInfo FilterInfo { get; private set; }
    public IFormulaParserLogger Logger { get; }
    public FormulaParser(ExcelPackage package);
    internal FormulaParser(ExcelDataProvider excelDataProvider, ExcelPackage package);
    internal FormulaParser(ExcelDataProvider excelDataProvider, ParsingContext parsingContext);
    internal void Configure(Action`1<ParsingConfiguration> configMethod);
    internal ParsingContext get_ParsingContext();
    [CompilerGeneratedAttribute]
internal ISourceCodeTokenizer get_Tokenizer();
    [CompilerGeneratedAttribute]
private void set_Tokenizer(ISourceCodeTokenizer value);
    internal IEnumerable`1<string> get_FunctionNames();
    [CompilerGeneratedAttribute]
internal FilterInfo get_FilterInfo();
    [CompilerGeneratedAttribute]
private void set_FilterInfo(FilterInfo value);
    internal virtual object Parse(string formula, FormulaCellAddress cell, ExcelCalculationOption options);
    internal virtual object Parse(string formula, string address, bool writeToCell);
    public virtual object Parse(string formula, string address, ExcelCalculationOption options);
    public virtual object Parse(string formula);
    public virtual object ParseAt(string address);
    public virtual object ParseAt(string worksheetName, int row, int col);
    internal void InitNewCalc(FilterInfo filterInfo);
    public IFormulaParserLogger get_Logger();
    public sealed virtual void Dispose();
}
public class OfficeOpenXml.FormulaParsing.FormulaParserManager : object {
    private FormulaParser _parser;
    internal FormulaParserManager(FormulaParser parser);
    public void LoadFunctionModule(IFunctionModule module);
    public void AddOrReplaceFunction(string functionName, ExcelFunction functionImpl);
    public void CopyFunctionsFrom(ExcelWorkbook otherWorkbook);
    public IEnumerable`1<string> GetImplementedFunctionNames();
    public IEnumerable`1<KeyValuePair`2<string, ExcelFunction>> GetImplementedFunctions();
    public object Parse(string formula);
    public object Parse(string formula, string address, bool writeToCell);
    public void AttachLogger(IFormulaParserLogger logger);
    public void AttachLogger(FileInfo logfile);
    public void DetachLogger();
    public IEnumerable`1<IFormulaCellInfo> GetCalculationChain(ExcelRangeBase range);
    public IEnumerable`1<IFormulaCellInfo> GetCalculationChain(ExcelRangeBase range, ExcelCalculationOption options);
    private static void Init(ExcelWorkbook workbook);
}
public interface OfficeOpenXml.FormulaParsing.IAddressInfo {
    public FormulaRangeAddress Address { get; }
    public abstract virtual FormulaRangeAddress get_Address();
}
public interface OfficeOpenXml.FormulaParsing.ICellInfo {
    public string Address { get; }
    public string WorksheetName { get; }
    public int Row { get; }
    public int Column { get; }
    public ulong Id { get; }
    public string Formula { get; }
    public object Value { get; }
    public double ValueDouble { get; }
    public double ValueDoubleLogical { get; }
    public bool IsHiddenRow { get; }
    public bool IsExcelError { get; }
    public IList`1<Token> Tokens { get; }
    public abstract virtual string get_Address();
    public abstract virtual string get_WorksheetName();
    public abstract virtual int get_Row();
    public abstract virtual int get_Column();
    public abstract virtual ulong get_Id();
    public abstract virtual string get_Formula();
    public abstract virtual object get_Value();
    public abstract virtual double get_ValueDouble();
    public abstract virtual double get_ValueDoubleLogical();
    public abstract virtual bool get_IsHiddenRow();
    public abstract virtual bool get_IsExcelError();
    public abstract virtual IList`1<Token> get_Tokens();
}
public interface OfficeOpenXml.FormulaParsing.IFormulaCellInfo {
    public string Worksheet { get; }
    public string Address { get; }
    public string Formula { get; }
    public abstract virtual string get_Worksheet();
    public abstract virtual string get_Address();
    public abstract virtual string get_Formula();
}
public interface OfficeOpenXml.FormulaParsing.INameInfo {
    public ulong Id { get; }
    public int wsIx { get; }
    public string Name { get; }
    public string Formula { get; }
    public object Value { get; }
    public bool IsRelative { get; }
    public abstract virtual ulong get_Id();
    public abstract virtual int get_wsIx();
    public abstract virtual string get_Name();
    public abstract virtual string get_Formula();
    public abstract virtual object get_Value();
    public abstract virtual bool get_IsRelative();
    public abstract virtual string GetRelativeFormula(int row, int col);
    public abstract virtual IRangeInfo GetRelativeRange(IRangeInfo ri, FormulaCellAddress currentCell);
    public abstract virtual object GetValue(FormulaCellAddress currentCell);
}
public interface OfficeOpenXml.FormulaParsing.INameValueProvider {
    public abstract virtual bool IsNamedValue(string key, string worksheet);
    public abstract virtual object GetNamedValue(string key);
    public abstract virtual object GetNamedValue(string key, string worksheet);
    public abstract virtual void Reload();
}
[DebuggerDisplayAttribute("Value: {Value}")]
internal class OfficeOpenXml.FormulaParsing.InMemoryCellInfo : object {
    private object _value;
    public string Address { get; }
    public string WorksheetName { get; }
    public int Row { get; }
    public int Column { get; }
    public ulong Id { get; }
    public string Formula { get; }
    public object Value { get; }
    public double ValueDouble { get; }
    public double ValueDoubleLogical { get; }
    public bool IsHiddenRow { get; }
    public bool IsExcelError { get; }
    public IList`1<Token> Tokens { get; }
    public InMemoryCellInfo(object value);
    public sealed virtual string get_Address();
    public sealed virtual string get_WorksheetName();
    public sealed virtual int get_Row();
    public sealed virtual int get_Column();
    public sealed virtual ulong get_Id();
    public sealed virtual string get_Formula();
    public sealed virtual object get_Value();
    public sealed virtual double get_ValueDouble();
    public sealed virtual double get_ValueDoubleLogical();
    public sealed virtual bool get_IsHiddenRow();
    public sealed virtual bool get_IsExcelError();
    public sealed virtual IList`1<Token> get_Tokens();
}
public interface OfficeOpenXml.FormulaParsing.IParsingLifetimeEventHandler {
    public abstract virtual void ParsingCompleted();
}
public interface OfficeOpenXml.FormulaParsing.IRangeInfo {
    public bool IsEmpty { get; }
    public bool IsMulti { get; }
    public bool IsRef { get; }
    public bool IsInMemoryRange { get; }
    public RangeDefinition Size { get; }
    public ExcelWorksheet Worksheet { get; }
    public FormulaRangeAddress Dimension { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsMulti();
    public abstract virtual bool get_IsRef();
    public abstract virtual bool get_IsInMemoryRange();
    public abstract virtual int GetNCells();
    public abstract virtual RangeDefinition get_Size();
    public abstract virtual object GetValue(int row, int col);
    public abstract virtual object GetOffset(int rowOffset, int colOffset);
    public abstract virtual IRangeInfo GetOffset(int rowOffsetStart, int colOffsetStart, int rowOffsetEnd, int colOffsetEnd);
    public abstract virtual bool IsHidden(int rowOffset, int colOffset);
    public abstract virtual ExcelWorksheet get_Worksheet();
    public abstract virtual FormulaRangeAddress get_Dimension();
}
[FlagsAttribute]
internal enum OfficeOpenXml.FormulaParsing.LexicalAnalysis.FixedFlag : Enum {
    public byte value__;
    public static FixedFlag None;
    public static FixedFlag FromRowFixed;
    public static FixedFlag FromColFixed;
    public static FixedFlag ToRowFixed;
    public static FixedFlag ToColFixed;
    public static FixedFlag All;
}
internal class OfficeOpenXml.FormulaParsing.LexicalAnalysis.Formula : object {
    internal ExcelWorksheet _ws;
    internal int StartRow;
    internal int StartCol;
    internal int StartRowOffset;
    internal int StartColOffset;
    internal static ISourceCodeTokenizer _tokenizer;
    internal static ISourceCodeTokenizer _tokenizerNWS;
    internal IList`1<Token> Tokens;
    internal IList`1<Token> RpnTokens;
    internal int AddressExpressionIndex;
    internal CellStoreEnumerator`1<object> _formulaEnumerator;
    internal ulong _id;
    [CompilerGeneratedAttribute]
private FormulaType <FormulaType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstCellDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SecondCellDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DataTableIsTwoDimesional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDataTableRow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <R1CellAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <R2CellAddress>k__BackingField;
    public ulong Id { get; }
    internal FormulaType FormulaType { get; internal set; }
    public bool FirstCellDeleted { get; public set; }
    public bool SecondCellDeleted { get; public set; }
    public bool DataTableIsTwoDimesional { get; public set; }
    public bool IsDataTableRow { get; public set; }
    public string R1CellAddress { get; public set; }
    public string R2CellAddress { get; public set; }
    public Formula(ExcelWorksheet ws);
    public Formula(ExcelWorksheet ws, int row, int col);
    public Formula(ExcelWorksheet ws, int row, int col, string formula);
    private static Formula();
    public ulong get_Id();
    protected void SetFormula(ExcelWorksheet ws, string formula);
    [CompilerGeneratedAttribute]
internal FormulaType get_FormulaType();
    [CompilerGeneratedAttribute]
internal void set_FormulaType(FormulaType value);
    [CompilerGeneratedAttribute]
public bool get_FirstCellDeleted();
    [CompilerGeneratedAttribute]
public void set_FirstCellDeleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_SecondCellDeleted();
    [CompilerGeneratedAttribute]
public void set_SecondCellDeleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_DataTableIsTwoDimesional();
    [CompilerGeneratedAttribute]
public void set_DataTableIsTwoDimesional(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDataTableRow();
    [CompilerGeneratedAttribute]
public void set_IsDataTableRow(bool value);
    [CompilerGeneratedAttribute]
public string get_R1CellAddress();
    [CompilerGeneratedAttribute]
public void set_R1CellAddress(string value);
    [CompilerGeneratedAttribute]
public string get_R2CellAddress();
    [CompilerGeneratedAttribute]
public void set_R2CellAddress(string value);
    internal void SetRowCol(int row, int col);
}
public class OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaAddressBase : object {
    public int ExternalReferenceIx;
    public int WorksheetIx;
}
public class OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaCellAddress : ValueType {
    public int WorksheetIx;
    public int Row;
    public int Column;
    public string Address { get; }
    public ulong CellId { get; }
    public FormulaCellAddress(int wsIx, int row, int column);
    public string get_Address();
    public ulong get_CellId();
}
public class OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaRangeAddress : FormulaAddressBase {
    internal ParsingContext _context;
    public int FromRow;
    public int FromCol;
    public int ToRow;
    public int ToCol;
    internal FixedFlag FixedFlag;
    public bool IsSingleCell { get; }
    public static FormulaRangeAddress Empty { get; }
    public string WorksheetAddress { get; }
    public string WorksheetName { get; }
    public FormulaRangeAddress Address { get; }
    public FormulaRangeAddress(ParsingContext ctx);
    public FormulaRangeAddress(ParsingContext ctx, string address);
    public FormulaRangeAddress(ParsingContext ctx, ExcelAddressBase address);
    public FormulaRangeAddress(ParsingContext context, int wsIx, int fromRow, int fromCol, int toRow, int toCol);
    public bool get_IsSingleCell();
    public static FormulaRangeAddress get_Empty();
    internal eAddressCollition CollidesWith(FormulaRangeAddress other);
    internal bool DoCollide(List`1<SimpleAddress> addresses);
    internal bool DoCollide(int fromRow, int fromCol, int toRow, int toCol);
    public virtual string ToString();
    public string get_WorksheetAddress();
    public string get_WorksheetName();
    internal FormulaRangeAddress Intersect(FormulaRangeAddress address);
    internal ExcelAddressBase ToExcelAddressBase();
    public sealed virtual int CompareTo(FormulaRangeAddress other);
    public virtual FormulaRangeAddress Clone();
    internal bool CollidesWith(int wsIx, int row, int column);
    internal FormulaRangeAddress GetOffset(int row, int column, bool rollIfOverflow);
    internal FormulaRangeAddress GetOffset(int row, int column, int rows, int columns);
    private void GetRolledValue(Int32& value, int maxValue);
    internal ulong GetTopLeftCellId();
    internal IRangeInfo GetAsRangeInfo();
    internal IRangeInfo GetAsExternalRangeInfo();
    internal FormulaRangeAddress GetIntersectingRowOrColumns(FormulaRangeAddress address);
    public sealed virtual FormulaRangeAddress get_Address();
}
public class OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaTableAddress : FormulaRangeAddress {
    public string TableName;
    public string ColumnName1;
    public string ColumnName2;
    public string TablePart1;
    public string TablePart2;
    public FormulaTableAddress(ParsingContext ctx);
    public FormulaTableAddress(ParsingContext ctx, string tableAddress);
    internal void SetTableAddress(ExcelPackage package);
    private void SetColFromTablePart(string value, ExcelTable table, Int32& fromCol, Int32& toCol, bool lastColon);
    private void SetRowFromTablePart(string value, ExcelTable table, Int32& fromRow, Int32& toRow, FixedFlag& fixedFlag);
    public FormulaTableAddress Clone();
}
internal enum OfficeOpenXml.FormulaParsing.LexicalAnalysis.FormulaType : Enum {
    public int value__;
    public static FormulaType Normal;
    public static FormulaType Shared;
    public static FormulaType Array;
    public static FormulaType DataTable;
}
public interface OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer {
    public abstract virtual IList`1<Token> Tokenize(string input);
    public abstract virtual IList`1<Token> Tokenize(string input, string worksheet);
}
public interface OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer {
    public abstract virtual IList`1<Token> Tokenize(string input, string worksheet);
    public abstract virtual IList`1<Token> Tokenize(string input);
}
internal class OfficeOpenXml.FormulaParsing.LexicalAnalysis.SharedFormula : Formula {
    internal int EndRow;
    internal int EndCol;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    private string _formula;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    private Dictionary`2<int, Expression> _compiledExpressions;
    internal bool _hasUpdatedNamespace;
    internal int Index { get; internal set; }
    internal string Formula { get; internal set; }
    internal bool IsArray { get; internal set; }
    internal string Address { get; internal set; }
    public List`1<string> TokenAddresses { get; }
    public List`1<Token> TokensWithFullAddresses { get; }
    public SharedFormula(ExcelWorksheet ws);
    public SharedFormula(ExcelWorksheet ws, int row, int col, string address, string formula);
    public SharedFormula(ExcelRangeBase range);
    public SharedFormula(ExcelRangeBase range, string formula);
    public SharedFormula(ExcelWorksheet ws, int fromRow, int fromCol, int toRow, int toCol, string formula);
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    internal string get_Formula();
    internal void set_Formula(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
internal void set_IsArray(bool value);
    internal string get_Address();
    internal void set_Address(string value);
    public List`1<string> get_TokenAddresses();
    public List`1<Token> get_TokensWithFullAddresses();
    internal SharedFormula Clone();
    internal Formula GetFormula(int row, int col);
    internal RpnFormula GetRpnFormula(RpnOptimizedDependencyChain depChain, int row, int col);
    internal RpnFormula GetRpnArrayFormula(RpnOptimizedDependencyChain depChain, int startRow, int startCol, int endRow, int endCol);
    private Dictionary`2<int, Expression> CloneExpressions(int row, int col);
    internal string GetFormula(int row, int column, string worksheet);
    internal void SetTokens(string worksheet);
    internal void UpdateFormulaNamespaces(Dictionary`2<string, string> nsDict);
    internal static string UpdateFormulaNamespaces(string formula, Dictionary`2<string, string> nsDict);
}
internal class OfficeOpenXml.FormulaParsing.LexicalAnalysis.SimpleAddress : ValueType {
    internal int FromRow;
    internal int FromCol;
    internal int ToRow;
    internal int ToCol;
    internal SimpleAddress(int fromRow, int fromCol, int toRow, int toCol);
}
public class OfficeOpenXml.FormulaParsing.LexicalAnalysis.SourceCodeTokenizer : object {
    private static Dictionary`2<char, Token> _charAddressTokens;
    private static Dictionary`2<char, Token> _charTokens;
    private static Dictionary`2<string, Token> _stringTokens;
    private static HashSet`1<string> _tableParts;
    private bool _r1c1;
    private bool _keepWhitespace;
    private bool _isPivotFormula;
    private TokenType _nameValueOrPivotFieldToken;
    private static Char[] _addressChars;
    public static ISourceCodeTokenizer Default { get; }
    public static ISourceCodeTokenizer R1C1 { get; }
    public static ISourceCodeTokenizer Default_KeepWhiteSpaces { get; }
    public static ISourceCodeTokenizer PivotFormula { get; }
    public SourceCodeTokenizer(IFunctionNameProvider functionRepository, INameValueProvider nameValueProvider, bool r1c1, bool keepWhitespace, bool pivotFormula);
    private static SourceCodeTokenizer();
    public static ISourceCodeTokenizer get_Default();
    public static ISourceCodeTokenizer get_R1C1();
    public static ISourceCodeTokenizer get_Default_KeepWhiteSpaces();
    public static ISourceCodeTokenizer get_PivotFormula();
    public sealed virtual IList`1<Token> Tokenize(string input);
    public sealed virtual IList`1<Token> Tokenize(string input, string worksheet);
    private bool IsWhiteSpace(char c);
    private Token GetLastToken(List`1<Token> l);
    private Token GetLastTokenIgnore(List`1<Token> l, Int32& i, TokenType[] ignoreTokens);
    private void SetRangeOffsetToken(List`1<Token> l);
    private bool IsParameterVariable(string token);
    private void HandleToken(List`1<Token> l, char c, StringBuilder& current, statFlags& flags, List`1& variableFuncPositions);
    private void HandleNegator(List`1<Token> l, StringBuilder current, statFlags flags);
    private static void InsertNegatorToken(List`1<Token> l, Token pt, int index, Token token);
    private static bool IsName(string s);
    private static bool IsValidCellAddress(string address);
}
public class OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token : ValueType {
    private static ushort IS_NEGATED;
    public string Value;
    internal TokenType TokenType;
    internal ushort _flags;
    public bool IsNegated { get; }
    public bool TokenTypeIsAddress { get; }
    public bool TokenTypeIsAddressToken { get; }
    internal Token(TokenType tokenType);
    public Token(string token, TokenType tokenType);
    public Token(string token, TokenType tokenType, bool isNegated);
    public bool get_IsNegated();
    public static bool op_Equality(Token t1, Token t2);
    public static bool op_Inequality(Token t1, Token t2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool TokenTypeIsSet(TokenType tokenType);
    public bool get_TokenTypeIsAddress();
    public bool get_TokenTypeIsAddressToken();
    public bool AreEqualTo(Token otherToken);
    internal TokenType GetTokenTypeFlags();
    internal Token CloneWithNewTokenType(TokenType tokenType);
    internal Token CloneWithNewValue(string val);
    internal Token CloneWithNegatedValue(bool isNegated);
    public virtual string ToString();
}
[FlagsAttribute]
public enum OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType : Enum {
    public ulong value__;
    public static TokenType Operator;
    public static TokenType Negator;
    public static TokenType OpeningParenthesis;
    public static TokenType ClosingParenthesis;
    public static TokenType OpeningEnumerable;
    public static TokenType ClosingEnumerable;
    public static TokenType OpeningBracket;
    public static TokenType ClosingBracket;
    public static TokenType Enumerable;
    public static TokenType Comma;
    public static TokenType SemiColon;
    public static TokenType String;
    public static TokenType StringContent;
    public static TokenType WorksheetName;
    public static TokenType WorksheetNameContent;
    public static TokenType Integer;
    public static TokenType Boolean;
    public static TokenType Decimal;
    public static TokenType Percent;
    public static TokenType Function;
    public static TokenType ExcelAddress;
    public static TokenType NameValue;
    public static TokenType InvalidReference;
    public static TokenType NumericError;
    public static TokenType ValueDataTypeError;
    public static TokenType Null;
    public static TokenType Unrecognized;
    public static TokenType ExcelAddressR1C1;
    public static TokenType CircularReference;
    public static TokenType Colon;
    public static TokenType RangeOffset;
    public static TokenType WhiteSpace;
    public static TokenType ExternalReference;
    public static TokenType TableName;
    public static TokenType TablePart;
    public static TokenType TableColumn;
    public static TokenType CellAddress;
    public static TokenType FullColumnAddress;
    public static TokenType FullRowAddress;
    public static TokenType StartFunctionArguments;
    public static TokenType Array;
    public static TokenType NAError;
    public static TokenType SingleQuote;
    public static TokenType HashMark;
    public static TokenType PivotField;
    public static TokenType ParameterVariableDeclaration;
    public static TokenType NameError;
    public static TokenType ParameterVariable;
}
public interface OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger {
    public abstract virtual void Log(ParsingContext context, Exception ex);
    public abstract virtual void Log(ParsingContext context, string message);
    public abstract virtual void Log(string message);
    public abstract virtual void LogCellCounted();
    public abstract virtual void LogFunction(string func);
    public abstract virtual void LogFunction(string func, long milliseconds);
}
public static class OfficeOpenXml.FormulaParsing.Logging.LoggerFactory : object {
    public static IFormulaParserLogger CreateTextFileLogger(FileInfo file);
}
internal class OfficeOpenXml.FormulaParsing.Logging.TextFileLogger : object {
    private StreamWriter _sw;
    private static string Separator;
    private int _count;
    private DateTime _startTime;
    private Dictionary`2<string, int> _funcs;
    private Dictionary`2<string, long> _funcPerformance;
    internal TextFileLogger(FileInfo fileInfo);
    private void WriteSeparatorAndTimeStamp();
    private void WriteAddressInfo(ParsingContext context);
    public sealed virtual void Log(ParsingContext context, Exception ex);
    public sealed virtual void Log(ParsingContext context, string message);
    public sealed virtual void Log(string message);
    public sealed virtual void LogCellCounted();
    public sealed virtual void LogFunction(string func);
    public sealed virtual void LogFunction(string func, long milliseconds);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private int <LogCellCounted>b__12_0(string x);
}
public class OfficeOpenXml.FormulaParsing.NameValueProvider : object {
    public static INameValueProvider Empty { get; }
    public static INameValueProvider get_Empty();
    public sealed virtual bool IsNamedValue(string key, string worksheet);
    public sealed virtual object GetNamedValue(string key);
    public sealed virtual void Reload();
    public sealed virtual object GetNamedValue(string key, string worksheet);
}
public class OfficeOpenXml.FormulaParsing.ParsingConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <AllowCircularReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private PrecisionAndRoundingStrategy <PrecisionAndRoundingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IFormulaParserLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionRepository <FunctionRepository>k__BackingField;
    public bool AllowCircularReferences { get; internal set; }
    public bool CacheExpressions { get; internal set; }
    public PrecisionAndRoundingStrategy PrecisionAndRoundingStrategy { get; internal set; }
    public IFormulaParserLogger Logger { get; private set; }
    public FunctionRepository FunctionRepository { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_AllowCircularReferences();
    [CompilerGeneratedAttribute]
internal void set_AllowCircularReferences(bool value);
    [CompilerGeneratedAttribute]
public bool get_CacheExpressions();
    [CompilerGeneratedAttribute]
internal void set_CacheExpressions(bool value);
    [CompilerGeneratedAttribute]
public PrecisionAndRoundingStrategy get_PrecisionAndRoundingStrategy();
    [CompilerGeneratedAttribute]
internal void set_PrecisionAndRoundingStrategy(PrecisionAndRoundingStrategy value);
    [CompilerGeneratedAttribute]
public IFormulaParserLogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(IFormulaParserLogger value);
    [CompilerGeneratedAttribute]
public FunctionRepository get_FunctionRepository();
    [CompilerGeneratedAttribute]
private void set_FunctionRepository(FunctionRepository value);
    internal static ParsingConfiguration Create();
    public ParsingConfiguration AttachLogger(IFormulaParserLogger logger);
    public ParsingConfiguration DetachLogger();
}
public class OfficeOpenXml.FormulaParsing.ParsingContext : object {
    [CompilerGeneratedAttribute]
private FunctionCompilerFactory <FunctionCompilerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private FormulaParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDataProvider <ExcelDataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPackage <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private HiddenCellHandlingCategory <HiddenCellBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeAddressFactory <RangeAddressFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private INameValueProvider <NameValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsingConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ulong> <SubtotalAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private FormulaCellAddress <CurrentCell>k__BackingField;
    internal FunctionCompilerFactory FunctionCompilerFactory { get; private set; }
    public FormulaParser Parser { get; public set; }
    internal ExcelDataProvider ExcelDataProvider { get; internal set; }
    internal ExcelPackage Package { get; private set; }
    internal HiddenCellHandlingCategory HiddenCellBehaviour { get; internal set; }
    internal RangeAddressFactory RangeAddressFactory { get; internal set; }
    public INameValueProvider NameValueProvider { get; public set; }
    public ParsingConfiguration Configuration { get; public set; }
    public bool Debug { get; }
    internal HashSet`1<ulong> SubtotalAddresses { get; private set; }
    public FormulaCellAddress CurrentCell { get; public set; }
    public ExcelWorksheet CurrentWorksheet { get; }
    private ParsingContext(ExcelPackage package);
    [CompilerGeneratedAttribute]
internal FunctionCompilerFactory get_FunctionCompilerFactory();
    [CompilerGeneratedAttribute]
private void set_FunctionCompilerFactory(FunctionCompilerFactory value);
    [CompilerGeneratedAttribute]
public FormulaParser get_Parser();
    [CompilerGeneratedAttribute]
public void set_Parser(FormulaParser value);
    [CompilerGeneratedAttribute]
internal ExcelDataProvider get_ExcelDataProvider();
    [CompilerGeneratedAttribute]
internal void set_ExcelDataProvider(ExcelDataProvider value);
    [CompilerGeneratedAttribute]
internal ExcelPackage get_Package();
    [CompilerGeneratedAttribute]
private void set_Package(ExcelPackage value);
    [CompilerGeneratedAttribute]
internal HiddenCellHandlingCategory get_HiddenCellBehaviour();
    [CompilerGeneratedAttribute]
internal void set_HiddenCellBehaviour(HiddenCellHandlingCategory value);
    [CompilerGeneratedAttribute]
internal RangeAddressFactory get_RangeAddressFactory();
    [CompilerGeneratedAttribute]
internal void set_RangeAddressFactory(RangeAddressFactory value);
    [CompilerGeneratedAttribute]
public INameValueProvider get_NameValueProvider();
    [CompilerGeneratedAttribute]
public void set_NameValueProvider(INameValueProvider value);
    [CompilerGeneratedAttribute]
public ParsingConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(ParsingConfiguration value);
    public bool get_Debug();
    public static ParsingContext Create(ExcelPackage package);
    public static ParsingContext Create();
    private sealed virtual override void OfficeOpenXml.FormulaParsing.IParsingLifetimeEventHandler.ParsingCompleted();
    internal int GetWorksheetIndex(string wsName);
    internal ExcelExternalWorkbook GetExternalWoorkbook(int externalReferenceIx);
    [CompilerGeneratedAttribute]
internal HashSet`1<ulong> get_SubtotalAddresses();
    [CompilerGeneratedAttribute]
private void set_SubtotalAddresses(HashSet`1<ulong> value);
    [CompilerGeneratedAttribute]
public FormulaCellAddress get_CurrentCell();
    [CompilerGeneratedAttribute]
public void set_CurrentCell(FormulaCellAddress value);
    public ExcelWorksheet get_CurrentWorksheet();
}
public class OfficeOpenXml.FormulaParsing.ParsingScope : object {
    private ParsingScopes _parsingScopes;
    [CompilerGeneratedAttribute]
private Guid <ScopeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsingScope <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private FormulaRangeAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubtotal>k__BackingField;
    public Guid ScopeId { get; private set; }
    public ParsingScope Parent { get; private set; }
    public FormulaRangeAddress Address { get; private set; }
    public bool IsSubtotal { get; public set; }
    public ParsingScope(ParsingScopes parsingScopes, FormulaRangeAddress address);
    public ParsingScope(ParsingScopes parsingScopes, ParsingScope parent, FormulaRangeAddress address);
    [CompilerGeneratedAttribute]
public Guid get_ScopeId();
    [CompilerGeneratedAttribute]
private void set_ScopeId(Guid value);
    [CompilerGeneratedAttribute]
public ParsingScope get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(ParsingScope value);
    [CompilerGeneratedAttribute]
public FormulaRangeAddress get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(FormulaRangeAddress value);
    [CompilerGeneratedAttribute]
public bool get_IsSubtotal();
    [CompilerGeneratedAttribute]
public void set_IsSubtotal(bool value);
    public sealed virtual void Dispose();
}
public class OfficeOpenXml.FormulaParsing.ParsingScopes : object {
    private IParsingLifetimeEventHandler _lifetimeEventHandler;
    private Stack`1<ParsingScope> _scopes;
    public ParsingScope Current { get; }
    public ParsingScopes(IParsingLifetimeEventHandler lifetimeEventHandler);
    public virtual ParsingScope NewScope(FormulaRangeAddress address);
    public virtual ParsingScope get_Current();
    public virtual void KillScope(ParsingScope parsingScope);
}
public enum OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy : Enum {
    public int value__;
    public static PrecisionAndRoundingStrategy DotNet;
    public static PrecisionAndRoundingStrategy Excel;
}
public class OfficeOpenXml.FormulaParsing.Ranges.CellInfo : object {
    private ExcelWorksheet _ws;
    private CellStoreEnumerator`1<ExcelValue> _values;
    public string Address { get; }
    public int Row { get; }
    public int Column { get; }
    public string Formula { get; }
    public object Value { get; }
    public double ValueDouble { get; }
    public double ValueDoubleLogical { get; }
    public bool IsHiddenRow { get; }
    public bool IsExcelError { get; }
    public IList`1<Token> Tokens { get; }
    public ulong Id { get; }
    public string WorksheetName { get; }
    internal CellInfo(ExcelWorksheet ws, CellStoreEnumerator`1<ExcelValue> values);
    public sealed virtual string get_Address();
    public sealed virtual int get_Row();
    public sealed virtual int get_Column();
    public sealed virtual string get_Formula();
    public sealed virtual object get_Value();
    public sealed virtual double get_ValueDouble();
    public sealed virtual double get_ValueDoubleLogical();
    public sealed virtual bool get_IsHiddenRow();
    public sealed virtual bool get_IsExcelError();
    public sealed virtual IList`1<Token> get_Tokens();
    public sealed virtual ulong get_Id();
    public sealed virtual string get_WorksheetName();
}
public class OfficeOpenXml.FormulaParsing.Ranges.EpplusExcelExternalRangeInfo : object {
    internal ExcelExternalWorksheet _externalWs;
    internal CellStoreEnumerator`1<object> _values;
    private RangeDefinition _size;
    private int _fromRow;
    private int _toRow;
    private int _fromCol;
    private int _toCol;
    private int _cellCount;
    private FormulaRangeAddress _address;
    private ICellInfo _cell;
    public bool IsRef { get; }
    public bool IsEmpty { get; }
    public bool IsMulti { get; }
    public RangeDefinition Size { get; }
    public bool IsInMemoryRange { get; }
    public ICellInfo Current { get; }
    public ExcelWorksheet Worksheet { get; }
    public FormulaRangeAddress Dimension { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public FormulaRangeAddress Address { get; }
    public EpplusExcelExternalRangeInfo(int externalReferenceIx, int worksheetIx, int fromRow, int fromCol, int toRow, int toCol, ParsingContext ctx);
    public EpplusExcelExternalRangeInfo(ExcelExternalWorkbook externalWb, FormulaRangeAddress address, ParsingContext ctx);
    public sealed virtual int GetNCells();
    public sealed virtual bool get_IsRef();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool get_IsMulti();
    public sealed virtual RangeDefinition get_Size();
    public sealed virtual bool get_IsInMemoryRange();
    public sealed virtual ICellInfo get_Current();
    public sealed virtual ExcelWorksheet get_Worksheet();
    public sealed virtual FormulaRangeAddress get_Dimension();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public bool NextCell();
    public sealed virtual IEnumerator`1<ICellInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual FormulaRangeAddress get_Address();
    public sealed virtual object GetValue(int row, int col);
    public sealed virtual object GetOffset(int rowOffset, int colOffset);
    public sealed virtual IRangeInfo GetOffset(int rowOffsetStart, int colOffsetStart, int rowOffsetEnd, int colOffsetEnd);
    public sealed virtual bool IsHidden(int rowOffset, int colOffset);
}
public class OfficeOpenXml.FormulaParsing.Ranges.ExternalCellInfo : object {
    private ExcelExternalWorksheet _ws;
    private CellStoreEnumerator`1<object> _values;
    public string Address { get; }
    public int Row { get; }
    public int Column { get; }
    public string Formula { get; }
    public object Value { get; }
    public double ValueDouble { get; }
    public double ValueDoubleLogical { get; }
    public bool IsHiddenRow { get; }
    public bool IsExcelError { get; }
    public IList`1<Token> Tokens { get; }
    public ulong Id { get; }
    public string WorksheetName { get; }
    internal ExternalCellInfo(ExcelExternalWorksheet ws, CellStoreEnumerator`1<object> values);
    public sealed virtual string get_Address();
    public sealed virtual int get_Row();
    public sealed virtual int get_Column();
    public sealed virtual string get_Formula();
    public sealed virtual object get_Value();
    public sealed virtual double get_ValueDouble();
    public sealed virtual double get_ValueDoubleLogical();
    public sealed virtual bool get_IsHiddenRow();
    public sealed virtual bool get_IsExcelError();
    public sealed virtual IList`1<Token> get_Tokens();
    public sealed virtual ulong get_Id();
    public sealed virtual string get_WorksheetName();
}
public class OfficeOpenXml.FormulaParsing.Ranges.InMemoryRange : object {
    private FormulaRangeAddress _address;
    private ExcelWorksheet _ws;
    private ICellInfo[0...,0...] _cells;
    private int _colIx;
    private int _rowIndex;
    private static InMemoryRange _empty;
    [CompilerGeneratedAttribute]
private RangeDefinition <Size>k__BackingField;
    public static InMemoryRange Empty { get; }
    public bool IsRef { get; }
    public bool IsEmpty { get; }
    public bool IsMulti { get; }
    public bool IsInMemoryRange { get; }
    public RangeDefinition Size { get; private set; }
    public FormulaRangeAddress Address { get; }
    public ExcelWorksheet Worksheet { get; }
    public FormulaRangeAddress Dimension { get; }
    public ICellInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public InMemoryRange(RangeDefinition rangeDef);
    public InMemoryRange(FormulaRangeAddress address, RangeDefinition rangeDef);
    public InMemoryRange(List`1<List`1<object>> range);
    public InMemoryRange(IRangeInfo ri);
    public InMemoryRange(int rows, short cols);
    private static InMemoryRange();
    public static InMemoryRange get_Empty();
    public void SetValue(int row, int col, object val);
    public void SetCell(int row, int col, ICellInfo cell);
    public sealed virtual bool get_IsRef();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool get_IsMulti();
    public sealed virtual bool get_IsInMemoryRange();
    [CompilerGeneratedAttribute]
public sealed virtual RangeDefinition get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(RangeDefinition value);
    public sealed virtual FormulaRangeAddress get_Address();
    public sealed virtual ExcelWorksheet get_Worksheet();
    public sealed virtual FormulaRangeAddress get_Dimension();
    public sealed virtual ICellInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<ICellInfo> GetEnumerator();
    public sealed virtual int GetNCells();
    public sealed virtual object GetOffset(int rowOffset, int colOffset);
    public sealed virtual IRangeInfo GetOffset(int rowOffsetStart, int colOffsetStart, int rowOffsetEnd, int colOffsetEnd);
    public sealed virtual bool IsHidden(int rowOffset, int colOffset);
    public sealed virtual object GetValue(int row, int col);
    public ICellInfo GetCell(int row, int col);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static InMemoryRange CloneRange(IRangeInfo ri);
    internal static InMemoryRange GetFromArray(Object[] values);
}
public class OfficeOpenXml.FormulaParsing.Ranges.NameInfo : object {
    private ExcelNamedRange _nameItem;
    [CompilerGeneratedAttribute]
private IList`1<Token> <Tokens>k__BackingField;
    public ulong Id { get; }
    public int wsIx { get; }
    public string Name { get; }
    public string Formula { get; }
    public bool IsRelative { get; }
    public IList`1<Token> Tokens { get; internal set; }
    public object Value { get; public set; }
    public NameInfo(ExcelNamedRange nameItem);
    public sealed virtual ulong get_Id();
    public sealed virtual int get_wsIx();
    public sealed virtual string get_Name();
    public sealed virtual string get_Formula();
    public sealed virtual string GetRelativeFormula(int row, int col);
    public sealed virtual IRangeInfo GetRelativeRange(IRangeInfo ri, FormulaCellAddress currentCell);
    public sealed virtual object GetValue(FormulaCellAddress currentCell);
    public sealed virtual bool get_IsRelative();
    [CompilerGeneratedAttribute]
public IList`1<Token> get_Tokens();
    [CompilerGeneratedAttribute]
internal void set_Tokens(IList`1<Token> value);
    public sealed virtual object get_Value();
    public void set_Value(object value);
}
public class OfficeOpenXml.FormulaParsing.Ranges.NameInfoWithValue : object {
    private string _name;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public ulong Id { get; }
    public int wsIx { get; }
    public string Name { get; }
    public string Formula { get; }
    public object Value { get; private set; }
    public bool IsRelative { get; }
    public NameInfoWithValue(string name, object value);
    public sealed virtual ulong get_Id();
    public sealed virtual int get_wsIx();
    public sealed virtual string get_Name();
    public sealed virtual string get_Formula();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public sealed virtual bool get_IsRelative();
    public sealed virtual object GetValue(FormulaCellAddress currentCell);
    public sealed virtual string GetRelativeFormula(int row, int col);
    public sealed virtual IRangeInfo GetRelativeRange(IRangeInfo ri, FormulaCellAddress currentCell);
}
public class OfficeOpenXml.FormulaParsing.Ranges.RangeDefinition : ValueType {
    [CompilerGeneratedAttribute]
private short <NumberOfCols>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfRows>k__BackingField;
    public short NumberOfCols { get; private set; }
    public int NumberOfRows { get; private set; }
    public RangeDefinition(int nRows, short nCols);
    public RangeDefinition(short fromCol, int fromRow, short toCol, int toRow);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public short get_NumberOfCols();
    [CompilerGeneratedAttribute]
private void set_NumberOfCols(short value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_NumberOfRows();
    [CompilerGeneratedAttribute]
private void set_NumberOfRows(int value);
}
public class OfficeOpenXml.FormulaParsing.Ranges.RangeInfo : object {
    internal ExcelWorksheet _ws;
    private CellStoreEnumerator`1<ExcelValue> _values;
    private RangeDefinition _size;
    private int _cellCount;
    private FormulaRangeAddress _address;
    private ICellInfo _cell;
    private FormulaRangeAddress _dimension;
    public bool IsRef { get; }
    public bool IsEmpty { get; }
    public bool IsMulti { get; }
    public RangeDefinition Size { get; }
    public bool IsInMemoryRange { get; }
    public ICellInfo Current { get; }
    public ExcelWorksheet Worksheet { get; }
    public FormulaRangeAddress Dimension { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public FormulaRangeAddress Address { get; }
    public RangeInfo(FormulaRangeAddress address);
    public RangeInfo(ExcelWorksheet ws, int fromRow, int fromCol, int toRow, int toCol, ParsingContext ctx, int extRef);
    public RangeInfo(ExcelWorksheet ws, ParsingContext ctx);
    public RangeInfo(ExcelWorksheet ws, ExcelAddressBase address, ParsingContext ctx);
    private void SetAddress(ExcelWorksheet ws, ExcelAddressBase address, ParsingContext ctx);
    public sealed virtual int GetNCells();
    public sealed virtual bool get_IsRef();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool get_IsMulti();
    public sealed virtual RangeDefinition get_Size();
    public sealed virtual bool get_IsInMemoryRange();
    public sealed virtual ICellInfo get_Current();
    public sealed virtual ExcelWorksheet get_Worksheet();
    public sealed virtual FormulaRangeAddress get_Dimension();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public bool NextCell();
    public sealed virtual IEnumerator`1<ICellInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual FormulaRangeAddress get_Address();
    public sealed virtual object GetValue(int row, int col);
    public sealed virtual object GetOffset(int rowOffset, int colOffset);
    public sealed virtual IRangeInfo GetOffset(int rowOffsetStart, int colOffsetStart, int rowOffsetEnd, int colOffsetEnd);
    public sealed virtual bool IsHidden(int rowOffset, int colOffset);
}
internal class OfficeOpenXml.FormulaParsing.RpnArrayFormula : RpnFormula {
    internal int _endRow;
    internal int _endCol;
    internal RpnFormulaType Type { get; }
    internal RpnArrayFormula(ExcelWorksheet ws, int startRow, int startColumn, int endRow, int endCol);
    internal virtual RpnFormulaType get_Type();
}
internal class OfficeOpenXml.FormulaParsing.RpnFormula : object {
    internal ExcelWorksheet _ws;
    internal int _row;
    internal int _column;
    internal string _formula;
    internal IList`1<Token> _tokens;
    internal Dictionary`2<int, Expression> _expressions;
    internal int _enumeratorWorksheetIx;
    internal CellStoreEnumerator`1<object> _formulaEnumerator;
    internal int _tokenIndex;
    internal Stack`1<Expression> _expressionStack;
    internal Stack`1<FunctionExpression> _funcStack;
    internal int _arrayIndex;
    internal bool _isDynamic;
    internal FunctionExpression _currentFunction;
    public bool CanBeDynamicArray { get; }
    internal RpnFormulaType Type { get; }
    internal RpnFormula(ExcelWorksheet ws, int row, int column);
    public bool get_CanBeDynamicArray();
    internal string GetAddress();
    internal void SetFormula(string formula, RpnOptimizedDependencyChain depChain);
    internal void SetFormula(IList`1<Token> tokens, RpnOptimizedDependencyChain depChain);
    public virtual string ToString();
    internal void ClearCache();
    internal virtual int GetWorksheetIndex();
    internal virtual RpnFormulaType get_Type();
}
internal class OfficeOpenXml.FormulaParsing.RpnFormulaExecution : object {
    internal static ArgumentParser _boolArgumentParser;
    internal static bool _cacheExpressions;
    private static RpnFormulaExecution();
    internal static RpnOptimizedDependencyChain Execute(ExcelWorkbook wb, ExcelCalculationOption options);
    internal static RpnOptimizedDependencyChain Execute(ExcelWorksheet ws, ExcelCalculationOption options);
    internal static RpnOptimizedDependencyChain Execute(ExcelRangeBase cells, ExcelCalculationOption options);
    internal static object ExecuteFormula(ExcelWorksheet ws, string formula, ExcelCalculationOption options);
    internal static object ExecuteFormula(ExcelWorkbook wb, string formula, FormulaCellAddress cell, ExcelCalculationOption options);
    internal static object ExecuteFormula(ExcelWorkbook wb, string formula, ExcelCalculationOption options);
    internal static object ExecutePivotFieldFormula(RpnOptimizedDependencyChain depChain, IList`1<Token> tokens, ExcelCalculationOption options);
    private static void ExecuteChain(RpnOptimizedDependencyChain depChain, ExcelRangeBase range, ExcelCalculationOption options, bool writeToCell);
    private static object SetAndReturnValueError(RpnOptimizedDependencyChain depChain, Exception ex, RpnFormula f);
    private static void LogFormula(RpnOptimizedDependencyChain depChain, RpnFormula f);
    private static void ExecuteChain(RpnOptimizedDependencyChain depChain, ExcelNamedRangeCollection namesCollection, ExcelCalculationOption options, bool writeToCell);
    private static void ExecuteName(RpnOptimizedDependencyChain depChain, ExcelNamedRange name, ExcelCalculationOption options, bool writeToCell);
    private static object ExecuteChain(RpnOptimizedDependencyChain depChain, ExcelWorksheet ws, string formula, FormulaCellAddress cell, ExcelCalculationOption options, bool writeToCell);
    private static object ExecuteChain(RpnOptimizedDependencyChain depChain, ExcelWorksheet ws, string formula, ExcelCalculationOption options, bool writeToCell);
    private static bool GetFormula(RpnOptimizedDependencyChain depChain, ExcelWorksheet ws, int row, int column, object value, RpnFormula& f);
    private static void SetCurrentCell(RpnOptimizedDependencyChain depChain, RpnFormula f);
    private static RpnFormula GetNameFormula(RpnOptimizedDependencyChain depChain, ExcelWorksheet ws, INameInfo name, int cellRow, int cellCol);
    private static object AddChainForFormula(RpnOptimizedDependencyChain depChain, RpnFormula f, ExcelCalculationOption options, bool writeToCell);
    private static void SetValueToWorkbook(RpnOptimizedDependencyChain depChain, RpnFormula f, RangeHashset rd, CompileResult cr);
    private static void RecalculateDirtyCells(SimpleAddress[] dirtyRange, RpnOptimizedDependencyChain depChain, RangeHashset rd);
    private static void ReCalculateFormula(RpnFormula f, RpnOptimizedDependencyChain depChain, RangeHashset rd);
    private static void MergeToRd(RangeHashset rd, int fromRow, int fromCol, CellStoreEnumerator`1<object> fe, bool atEnd);
    private static RangeHashset AddAddressToRD(RpnOptimizedDependencyChain depChain, int wsIx);
    private static void CheckCircularReferences(RpnOptimizedDependencyChain depChain, RpnFormula f, FormulaRangeAddress address, ExcelCalculationOption options);
    private static void CheckCircularReferences(RpnOptimizedDependencyChain depChain, RpnFormula f, ExcelCalculationOption options);
    private static void HandleCircularReference(RpnOptimizedDependencyChain depChain, RpnFormula f, ExcelCalculationOption options, ulong toCell);
    private static FormulaRangeAddress ExecuteNextToken(RpnOptimizedDependencyChain depChain, RpnFormula f, bool returnAddresses);
    private static ExpressionCondition GetCondition(CompileResult v);
    private static void ApplyPercent(ParsingContext context, RpnFormula f);
    private static bool ShouldIgnoreAddress(FunctionExpression fe);
    private static int GetNextTokenPosFromCondition(RpnFormula f, FunctionExpression fexp);
    private static void ApplyOperator(ParsingContext context, Token opToken, RpnFormula f);
    private static bool PreExecFunc(RpnOptimizedDependencyChain depChain, RpnFormula f, FunctionExpression funcExp);
    private static CompileResult ExecFunc(RpnOptimizedDependencyChain depChain, RpnFormula f, FunctionExpression funcExp);
    private static void PushResult(ParsingContext context, RpnFormula f, CompileResult result);
    private static IList`1<CompileResult> CompileFunctionArguments(RpnFormula f, FunctionExpression func);
    private static bool GetProcessedAddress(RpnOptimizedDependencyChain depChain, FormulaRangeAddress& address);
    private static bool GetProcessedAddress(RpnOptimizedDependencyChain depChain, int wsIndex, int row, int col);
}
internal enum OfficeOpenXml.FormulaParsing.RpnFormulaType : Enum {
    public int value__;
    public static RpnFormulaType Formula;
    public static RpnFormulaType NameFormula;
    public static RpnFormulaType FixedArrayFormula;
}
internal class OfficeOpenXml.FormulaParsing.RpnNameFormula : RpnFormula {
    [CompilerGeneratedAttribute]
private FormulaCellAddress <CurrentCell>k__BackingField;
    internal FormulaCellAddress CurrentCell { get; }
    internal RpnFormulaType Type { get; }
    internal RpnNameFormula(ExcelWorksheet ws, int row, int column, FormulaCellAddress currentCell);
    [CompilerGeneratedAttribute]
internal FormulaCellAddress get_CurrentCell();
    internal virtual int GetWorksheetIndex();
    internal virtual RpnFormulaType get_Type();
}
internal class OfficeOpenXml.FormulaParsing.RpnOptimizedDependencyChain : object {
    internal List`1<RpnFormula> _formulas;
    internal Stack`1<RpnFormula> _formulaStack;
    internal Dictionary`2<int, RangeHashset> accessedRanges;
    internal Dictionary`2<int, QuadTree`1<int>> formulaRangeReferences;
    internal HashSet`1<ulong> processedCells;
    internal List`1<CircularReference> _circularReferences;
    internal ISourceCodeTokenizer _tokenizer;
    internal FormulaExecutor _formulaExecutor;
    internal ParsingContext _parsingContext;
    internal List`1<int> _startOfChain;
    internal bool HasDynamicArrayFormula;
    internal Dictionary`2<int, Dictionary`2<string, CompileResult>> _expressionCache;
    public RpnOptimizedDependencyChain(ExcelWorkbook wb, ExcelCalculationOption options);
    internal void AddFormulaToChain(RpnFormula f);
    internal RpnOptimizedDependencyChain Execute();
    internal RpnOptimizedDependencyChain Execute(ExcelWorksheet ws);
    internal RpnOptimizedDependencyChain Execute(ExcelWorksheet ws, ExcelCalculationOption options);
    internal Dictionary`2<string, CompileResult> GetCache(ExcelWorksheet ws);
    internal void StartOfChain();
}
public class OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public T Value { get; private set; }
    public string Name { get; private set; }
    public ArgumentInfo`1(T val);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public ArgumentInfo`1<T> Named(string argName);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.FormulaParsing.Utilities.ExtensionMethods : object {
    [ExtensionAttribute]
internal static void IsNotNullOrEmpty(ArgumentInfo`1<string> val);
    [ExtensionAttribute]
internal static void IsNotNull(ArgumentInfo`1<T> val);
    [ExtensionAttribute]
internal static bool IsNumeric(object obj);
}
public static class OfficeOpenXml.FormulaParsing.Utilities.Require : object {
    public static ArgumentInfo`1<T> That(T arg);
}
internal interface OfficeOpenXml.IExcelColumn {
    public bool Collapsed { get; public set; }
    public int OutlineLevel { get; public set; }
    public bool Phonetic { get; public set; }
    public bool BestFit { get; public set; }
    public bool Hidden { get; public set; }
    public double Width { get; public set; }
    public bool PageBreak { get; public set; }
    public abstract virtual bool get_Collapsed();
    public abstract virtual void set_Collapsed(bool value);
    public abstract virtual int get_OutlineLevel();
    public abstract virtual void set_OutlineLevel(int value);
    public abstract virtual bool get_Phonetic();
    public abstract virtual void set_Phonetic(bool value);
    public abstract virtual bool get_BestFit();
    public abstract virtual void set_BestFit(bool value);
    public abstract virtual void AutoFit();
    public abstract virtual void AutoFit(double MinimumWidth);
    public abstract virtual void AutoFit(double MinimumWidth, double MaximumWidth);
    public abstract virtual bool get_Hidden();
    public abstract virtual void set_Hidden(bool value);
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual bool get_PageBreak();
    public abstract virtual void set_PageBreak(bool value);
    public abstract virtual void Group();
    public abstract virtual void UnGroup();
    public abstract virtual void CollapseChildren(bool allLevels);
    public abstract virtual void ExpandChildren(bool allLevels);
    public abstract virtual void SetVisibleOutlineLevel(int level, bool collapseChildren);
}
internal interface OfficeOpenXml.IExcelRow {
    public bool Collapsed { get; public set; }
    public int OutlineLevel { get; public set; }
    public bool Phonetic { get; public set; }
    public bool Hidden { get; public set; }
    public double Height { get; public set; }
    public bool PageBreak { get; public set; }
    public bool CustomHeight { get; public set; }
    public abstract virtual bool get_Collapsed();
    public abstract virtual void set_Collapsed(bool value);
    public abstract virtual int get_OutlineLevel();
    public abstract virtual void set_OutlineLevel(int value);
    public abstract virtual bool get_Phonetic();
    public abstract virtual void set_Phonetic(bool value);
    public abstract virtual bool get_Hidden();
    public abstract virtual void set_Hidden(bool value);
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
    public abstract virtual bool get_PageBreak();
    public abstract virtual void set_PageBreak(bool value);
    public abstract virtual bool get_CustomHeight();
    public abstract virtual void set_CustomHeight(bool value);
    public abstract virtual void Group();
    public abstract virtual void Ungroup();
    public abstract virtual void CollapseChildren(bool allLevels);
    public abstract virtual void ExpandChildren(bool allLevels);
    public abstract virtual void SetVisibleOutlineLevel(int level, bool collapseChildren);
}
internal interface OfficeOpenXml.IRangeID {
    public ulong RangeID { get; public set; }
    public abstract virtual ulong get_RangeID();
    public abstract virtual void set_RangeID(ulong value);
}
internal abstract class OfficeOpenXml.JsonExport : object {
    private JsonExportSettings _settings;
    protected string _indent;
    protected bool _minify;
    internal JsonExport(JsonExportSettings settings);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonExport/<WriteCellDataAsync>d__0")]
protected internal Task WriteCellDataAsync(StreamWriter sw, ExcelRangeBase dr, int headerRows);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonExport/<WriteItemAsync>d__1")]
protected internal Task WriteItemAsync(StreamWriter sw, string v, bool indent, bool addComma);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonExport/<WriteStartAsync>d__2")]
protected internal Task WriteStartAsync(StreamWriter sw);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonExport/<WriteEndAsync>d__3")]
protected internal Task WriteEndAsync(StreamWriter sw, string bracket);
    protected internal void WriteCellData(StreamWriter sw, ExcelRangeBase dr, int headerRows);
    internal static string JsonEscape(string s);
    protected internal void WriteItem(StreamWriter sw, string v, bool indent, bool addComma);
    protected internal void WriteStart(StreamWriter sw);
    protected internal void WriteEnd(StreamWriter sw, string bracket);
}
public abstract class OfficeOpenXml.JsonExportSettings : object {
    [CompilerGeneratedAttribute]
private bool <Minify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnsElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowsElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CellsElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteHyperlinks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteComments>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DataIsTransposed>k__BackingField;
    public bool Minify { get; public set; }
    public string RootElementName { get; public set; }
    public eDataTypeOn AddDataTypesOn { get; public set; }
    public string ColumnsElementName { get; public set; }
    public string RowsElementName { get; public set; }
    public string CellsElementName { get; public set; }
    public bool WriteHyperlinks { get; public set; }
    public bool WriteComments { get; public set; }
    public Encoding Encoding { get; public set; }
    public CultureInfo Culture { get; public set; }
    public bool DataIsTransposed { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Minify();
    [CompilerGeneratedAttribute]
public void set_Minify(bool value);
    public abstract virtual string get_RootElementName();
    public abstract virtual void set_RootElementName(string value);
    public abstract virtual eDataTypeOn get_AddDataTypesOn();
    public abstract virtual void set_AddDataTypesOn(eDataTypeOn value);
    [CompilerGeneratedAttribute]
public string get_ColumnsElementName();
    [CompilerGeneratedAttribute]
public void set_ColumnsElementName(string value);
    [CompilerGeneratedAttribute]
public string get_RowsElementName();
    [CompilerGeneratedAttribute]
public void set_RowsElementName(string value);
    [CompilerGeneratedAttribute]
public string get_CellsElementName();
    [CompilerGeneratedAttribute]
public void set_CellsElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteHyperlinks();
    [CompilerGeneratedAttribute]
public void set_WriteHyperlinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteComments();
    [CompilerGeneratedAttribute]
public void set_WriteComments(bool value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public bool get_DataIsTransposed();
    [CompilerGeneratedAttribute]
public void set_DataIsTransposed(bool value);
}
internal class OfficeOpenXml.JsonRangeExport : JsonExport {
    private ExcelRangeBase _range;
    private JsonRangeExportSettings _settings;
    internal JsonRangeExport(ExcelRangeBase range, JsonRangeExportSettings settings);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonRangeExport/<ExportAsync>d__0")]
internal Task ExportAsync(Stream stream);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonRangeExport/<WriteColumnDataAsync>d__1")]
private Task WriteColumnDataAsync(StreamWriter sw);
    internal void Export(Stream stream);
    private void WriteColumnData(StreamWriter sw);
}
public class OfficeOpenXml.JsonRangeExportSettings : JsonExportSettings {
    [CompilerGeneratedAttribute]
private string <RootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstRowIsHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private eDataTypeOn <AddDataTypesOn>k__BackingField;
    public string RootElementName { get; public set; }
    public bool FirstRowIsHeader { get; public set; }
    public eDataTypeOn AddDataTypesOn { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_RootElementName();
    [CompilerGeneratedAttribute]
public virtual void set_RootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_FirstRowIsHeader();
    [CompilerGeneratedAttribute]
public void set_FirstRowIsHeader(bool value);
    [CompilerGeneratedAttribute]
public virtual eDataTypeOn get_AddDataTypesOn();
    [CompilerGeneratedAttribute]
public virtual void set_AddDataTypesOn(eDataTypeOn value);
}
internal class OfficeOpenXml.JsonTableExport : JsonExport {
    private ExcelTable _table;
    private JsonTableExportSettings _settings;
    internal JsonTableExport(ExcelTable table, JsonTableExportSettings settings);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonTableExport/<ExportAsync>d__0")]
internal Task ExportAsync(Stream stream);
    [AsyncStateMachineAttribute("OfficeOpenXml.JsonTableExport/<WriteColumnDataAsync>d__1")]
private Task WriteColumnDataAsync(StreamWriter sw);
    internal void Export(Stream stream);
    private void WriteColumnData(StreamWriter sw);
}
public class OfficeOpenXml.JsonTableExportSettings : JsonExportSettings {
    [CompilerGeneratedAttribute]
private string <RootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private eDataTypeOn <AddDataTypesOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteColumnsElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteNameAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteShowHeaderAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteShowTotalsAttribute>k__BackingField;
    public string RootElementName { get; public set; }
    public eDataTypeOn AddDataTypesOn { get; public set; }
    public bool WriteColumnsElement { get; public set; }
    public bool WriteNameAttribute { get; public set; }
    public bool WriteShowHeaderAttribute { get; public set; }
    public bool WriteShowTotalsAttribute { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_RootElementName();
    [CompilerGeneratedAttribute]
public virtual void set_RootElementName(string value);
    [CompilerGeneratedAttribute]
public virtual eDataTypeOn get_AddDataTypesOn();
    [CompilerGeneratedAttribute]
public virtual void set_AddDataTypesOn(eDataTypeOn value);
    [CompilerGeneratedAttribute]
public bool get_WriteColumnsElement();
    [CompilerGeneratedAttribute]
public void set_WriteColumnsElement(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteNameAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteNameAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteShowHeaderAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteShowHeaderAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_WriteShowTotalsAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteShowTotalsAttribute(bool value);
}
public enum OfficeOpenXml.LicenseContext : Enum {
    public int value__;
    public static LicenseContext NonCommercial;
    public static LicenseContext Commercial;
}
public class OfficeOpenXml.LicenseException : Exception {
    internal LicenseException(string message);
}
[DebuggerDisplayAttribute("Header: {Header}, SortOrders: {GetSortOrder()}, Index: {Index}")]
internal class OfficeOpenXml.LoadFunctions.ColumnInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsDictionaryProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DictinaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Formula>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormulaR1C1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBuiltInHyperlinkStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private RowFunctions <TotalsRowFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalsRowFormula>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalsRowNumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalsRowLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberPathBase <Path>k__BackingField;
    public bool IsDictionaryProperty { get; public set; }
    public string DictinaryKey { get; public set; }
    public int Index { get; public set; }
    public MemberInfo MemberInfo { get; public set; }
    public string Formula { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public string Header { get; public set; }
    public bool Hidden { get; public set; }
    public string NumberFormat { get; public set; }
    public bool UseBuiltInHyperlinkStyle { get; public set; }
    public RowFunctions TotalsRowFunction { get; public set; }
    public string TotalsRowFormula { get; public set; }
    public string TotalsRowNumberFormat { get; public set; }
    public string TotalsRowLabel { get; public set; }
    public MemberPathBase Path { get; public set; }
    public ColumnInfo(EpplusFormulaTableColumnAttribute attr);
    public ColumnInfo(MemberPath path);
    [CompilerGeneratedAttribute]
public bool get_IsDictionaryProperty();
    [CompilerGeneratedAttribute]
public void set_IsDictionaryProperty(bool value);
    [CompilerGeneratedAttribute]
public string get_DictinaryKey();
    [CompilerGeneratedAttribute]
public void set_DictinaryKey(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public void set_MemberInfo(MemberInfo value);
    [CompilerGeneratedAttribute]
public string get_Formula();
    [CompilerGeneratedAttribute]
public void set_Formula(string value);
    [CompilerGeneratedAttribute]
public string get_FormulaR1C1();
    [CompilerGeneratedAttribute]
public void set_FormulaR1C1(string value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_UseBuiltInHyperlinkStyle();
    [CompilerGeneratedAttribute]
public void set_UseBuiltInHyperlinkStyle(bool value);
    [CompilerGeneratedAttribute]
public RowFunctions get_TotalsRowFunction();
    [CompilerGeneratedAttribute]
public void set_TotalsRowFunction(RowFunctions value);
    [CompilerGeneratedAttribute]
public string get_TotalsRowFormula();
    [CompilerGeneratedAttribute]
public void set_TotalsRowFormula(string value);
    [CompilerGeneratedAttribute]
public string get_TotalsRowNumberFormat();
    [CompilerGeneratedAttribute]
public void set_TotalsRowNumberFormat(string value);
    [CompilerGeneratedAttribute]
public string get_TotalsRowLabel();
    [CompilerGeneratedAttribute]
public void set_TotalsRowLabel(string value);
    [CompilerGeneratedAttribute]
public MemberPathBase get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(MemberPathBase value);
    public virtual string ToString();
    public string GetSortOrder();
}
internal class OfficeOpenXml.LoadFunctions.ColumnInfoCollection : List`1<ColumnInfo> {
    internal void ReindexAndSortColumns();
}
internal static class OfficeOpenXml.LoadFunctions.DictionaryColumnPathFactory : object {
    public static IEnumerable`1<MemberPath> Create(MemberInfo member, MemberPath path, LoadFromCollectionParams parameters);
}
internal class OfficeOpenXml.LoadFunctions.FormulaCell : object {
    [CompilerGeneratedAttribute]
private string <Formula>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormulaR1C1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberFormat>k__BackingField;
    public string Formula { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public string NumberFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Formula();
    [CompilerGeneratedAttribute]
public void set_Formula(string value);
    [CompilerGeneratedAttribute]
public string get_FormulaR1C1();
    [CompilerGeneratedAttribute]
public void set_FormulaR1C1(string value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
}
public interface OfficeOpenXml.LoadFunctions.IExcelNumberFormatProvider {
    public abstract virtual string GetFormat(int numberFormatId);
}
internal class OfficeOpenXml.LoadFunctions.LoadFromCollection`1 : LoadFunctionBase {
    private BindingFlags _bindingFlags;
    private ColumnInfo[] _columns;
    private HeaderParsingTypes _headerParsingType;
    private IEnumerable`1<T> _items;
    private IExcelNumberFormatProvider _numberFormatProvider;
    [CompilerGeneratedAttribute]
private List`1<string> <SortOrderProperties>k__BackingField;
    internal List`1<string> SortOrderProperties { get; private set; }
    public LoadFromCollection`1(ExcelRangeBase range, IEnumerable`1<T> items, LoadFromCollectionParams parameters);
    [CompilerGeneratedAttribute]
internal List`1<string> get_SortOrderProperties();
    [CompilerGeneratedAttribute]
private void set_SortOrderProperties(List`1<string> value);
    protected virtual int GetNumberOfColumns();
    protected virtual int GetNumberOfRows();
    protected virtual void PostProcessTable(ExcelTable table, ExcelRangeBase range);
    protected virtual void LoadInternal(Object[0...,0...] values, Dictionary`2& formulaCells, Dictionary`2& columnFormats);
    private void SetHiddenColumns();
    private void SetValuesAndFormulas(Object[0...,0...] values, Dictionary`2<int, FormulaCell> formulaCells, Int32& col, Int32& row);
    private static string GetEnumValue(object item, Type t);
    private string GetColumnFormatById(int numberFormatId);
    private void SetNumberFormats(Dictionary`2<int, string> columnFormats, int col);
    private void SetNumberFormatOnColumn(Dictionary`2<int, string> columnFormats, int col, ColumnInfo colInfo);
    private void SetHeaders(Object[0...,0...] values, Dictionary`2<int, string> columnFormats, Int32& col, Int32& row);
    private string GetHeaderFromDotNetAttributes(MemberInfo member);
    private string ParseHeader(string header);
}
internal class OfficeOpenXml.LoadFunctions.LoadFromCollectionColumns`1 : object {
    private MemberPathScanner _scanner;
    public LoadFromCollectionColumns`1(LoadFromCollectionParams parameters);
    public LoadFromCollectionColumns`1(MemberPathScanner scanner);
    internal ColumnInfoCollection Setup();
}
internal class OfficeOpenXml.LoadFunctions.LoadFromDataTable : object {
    private ExcelRangeBase _range;
    private ExcelWorksheet _worksheet;
    private DataTable _dataTable;
    private bool _printHeaders;
    private Nullable`1<TableStyles> _tableStyle;
    private bool _transpose;
    public LoadFromDataTable(ExcelRangeBase range, DataTable dataTable, LoadFromDataTableParams parameters);
    public ExcelRangeBase Load();
}
internal class OfficeOpenXml.LoadFunctions.LoadFromDictionaries : LoadFunctionBase {
    private IEnumerable`1<IDictionary`2<string, object>> _items;
    private IEnumerable`1<string> _keys;
    private eDataTypes[] _dataTypes;
    private HeaderParsingTypes _headerParsingType;
    private CultureInfo _cultureInfo;
    public LoadFromDictionaries(ExcelRangeBase range, IEnumerable`1<object> items, LoadFromDictionariesParams parameters);
    public LoadFromDictionaries(ExcelRangeBase range, IEnumerable`1<IDictionary`2<string, object>> items, LoadFromDictionariesParams parameters);
    private static IEnumerable`1<IDictionary`2<string, object>> ConvertToDictionaries(IEnumerable`1<object> items);
    protected virtual void LoadInternal(Object[0...,0...] values, Dictionary`2& formulaCells, Dictionary`2& columnFormats);
    protected virtual int GetNumberOfRows();
    protected virtual int GetNumberOfColumns();
    private string ParseHeader(string header);
}
internal class OfficeOpenXml.LoadFunctions.LoadFromFixedWidthText : LoadFromTextBase`1<ExcelTextFormatFixedWidth> {
    public LoadFromFixedWidthText(ExcelRangeBase range, string text, ExcelTextFormatFixedWidth Format);
    public virtual ExcelRangeBase Load();
    private ExcelRangeBase LoadWidths();
    private ExcelRangeBase LoadPositions();
}
internal class OfficeOpenXml.LoadFunctions.LoadFromText : LoadFromTextBase`1<ExcelTextFormat> {
    public LoadFromText(ExcelRangeBase range, string text, LoadFromTextParams parameters);
    public virtual ExcelRangeBase Load();
    protected String[] GetLines(string text, ExcelTextFormat Format);
}
internal abstract class OfficeOpenXml.LoadFunctions.LoadFromTextBase`1 : object {
    protected ExcelWorksheet _worksheet;
    protected ExcelRangeBase _range;
    protected string _text;
    protected T _format;
    public LoadFromTextBase`1(ExcelRangeBase range, string text, T format);
    public abstract virtual ExcelRangeBase Load();
    protected String[] SplitLines(string text, string EOL);
    protected bool IsEOL(string text, int ix, string eol);
    protected object ConvertData(T Format, eDataTypes[] dataType, string v, int col, bool isText);
    protected object ConvertData(T Format, Nullable`1<eDataTypes> dataType, string v, int col, bool isText);
}
internal abstract class OfficeOpenXml.LoadFunctions.LoadFunctionBase : object {
    private bool _useBuiltInStylesForHyperlinks;
    [CompilerGeneratedAttribute]
private ExcelRangeBase <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TableStyles> <TableStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFirstColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLastColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTotal>k__BackingField;
    protected bool transpose;
    protected ExcelRangeBase Range { get; }
    protected bool PrintHeaders { get; }
    protected Nullable`1<TableStyles> TableStyle { get; protected set; }
    protected string TableName { get; protected set; }
    protected bool ShowFirstColumn { get; protected set; }
    protected bool ShowLastColumn { get; protected set; }
    protected bool ShowTotal { get; protected set; }
    public LoadFunctionBase(ExcelRangeBase range, LoadFunctionFunctionParamsBase parameters);
    [CompilerGeneratedAttribute]
protected ExcelRangeBase get_Range();
    [CompilerGeneratedAttribute]
protected bool get_PrintHeaders();
    [CompilerGeneratedAttribute]
protected Nullable`1<TableStyles> get_TableStyle();
    [CompilerGeneratedAttribute]
protected void set_TableStyle(Nullable`1<TableStyles> value);
    [CompilerGeneratedAttribute]
protected string get_TableName();
    [CompilerGeneratedAttribute]
protected void set_TableName(string value);
    [CompilerGeneratedAttribute]
protected bool get_ShowFirstColumn();
    [CompilerGeneratedAttribute]
protected void set_ShowFirstColumn(bool value);
    [CompilerGeneratedAttribute]
protected bool get_ShowLastColumn();
    [CompilerGeneratedAttribute]
protected void set_ShowLastColumn(bool value);
    [CompilerGeneratedAttribute]
protected bool get_ShowTotal();
    [CompilerGeneratedAttribute]
protected void set_ShowTotal(bool value);
    protected abstract virtual int GetNumberOfRows();
    protected abstract virtual int GetNumberOfColumns();
    protected virtual void PostProcessTable(ExcelTable table, ExcelRangeBase range);
    protected abstract virtual void LoadInternal(Object[0...,0...] values, Dictionary`2& formulaCells, Dictionary`2& columnFormats);
    internal ExcelRangeBase Load();
    private void SetValuesAndFormulas(int nRows, int nCols, Object[0...,0...] values, Dictionary`2<int, FormulaCell> formulaCells, ExcelWorksheet ws);
}
public abstract class OfficeOpenXml.LoadFunctions.LoadFunctionFunctionParamsBase : object {
    [CompilerGeneratedAttribute]
private bool <PrintHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TableStyles> <TableStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBuiltInStylesForHyperlinks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Transpose>k__BackingField;
    public bool PrintHeaders { get; public set; }
    public string TableName { get; public set; }
    public Nullable`1<TableStyles> TableStyle { get; public set; }
    public bool UseBuiltInStylesForHyperlinks { get; public set; }
    public bool Transpose { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PrintHeaders();
    [CompilerGeneratedAttribute]
public void set_PrintHeaders(bool value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TableStyles> get_TableStyle();
    [CompilerGeneratedAttribute]
public void set_TableStyle(Nullable`1<TableStyles> value);
    [CompilerGeneratedAttribute]
public bool get_UseBuiltInStylesForHyperlinks();
    [CompilerGeneratedAttribute]
public void set_UseBuiltInStylesForHyperlinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_Transpose();
    [CompilerGeneratedAttribute]
public void set_Transpose(bool value);
}
public enum OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes : Enum {
    public int value__;
    public static HeaderParsingTypes Preserve;
    public static HeaderParsingTypes UnderscoreToSpace;
    public static HeaderParsingTypes CamelCaseToSpace;
    public static HeaderParsingTypes UnderscoreAndCamelCaseToSpace;
}
public class OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams : LoadFunctionFunctionParamsBase {
    private Dictionary`2<string, IEnumerable`1<string>> _dictionaryKeys;
    private string DefaultDictionaryKeyId;
    private IExcelNumberFormatProvider _numberFormatProvider;
    public static BindingFlags DefaultBindingFlags;
    [CompilerGeneratedAttribute]
private BindingFlags <BindingFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo[] <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderParsingTypes <HeaderParsingType>k__BackingField;
    internal IExcelNumberFormatProvider NumberFormatProvider { get; }
    public BindingFlags BindingFlags { get; public set; }
    public MemberInfo[] Members { get; public set; }
    public HeaderParsingTypes HeaderParsingType { get; public set; }
    internal IExcelNumberFormatProvider get_NumberFormatProvider();
    [CompilerGeneratedAttribute]
public BindingFlags get_BindingFlags();
    [CompilerGeneratedAttribute]
public void set_BindingFlags(BindingFlags value);
    [CompilerGeneratedAttribute]
public MemberInfo[] get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(MemberInfo[] value);
    [CompilerGeneratedAttribute]
public HeaderParsingTypes get_HeaderParsingType();
    [CompilerGeneratedAttribute]
public void set_HeaderParsingType(HeaderParsingTypes value);
    public void RegisterDictionaryKeys(string keyId, IEnumerable`1<string> keys);
    public void RegisterDictionaryKeys(IEnumerable`1<string> keys);
    internal IEnumerable`1<string> GetDictionaryKeys(string keyId);
    internal IEnumerable`1<string> GetDefaultDictionaryKeys();
    public void SetNumberFormatProvider(IExcelNumberFormatProvider numberFormatProvider);
}
public class OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams : object {
    [CompilerGeneratedAttribute]
private bool <PrintHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TableStyles> <TableStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Transpose>k__BackingField;
    public bool PrintHeaders { get; public set; }
    public Nullable`1<TableStyles> TableStyle { get; public set; }
    public bool Transpose { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PrintHeaders();
    [CompilerGeneratedAttribute]
public void set_PrintHeaders(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TableStyles> get_TableStyle();
    [CompilerGeneratedAttribute]
public void set_TableStyle(Nullable`1<TableStyles> value);
    [CompilerGeneratedAttribute]
public bool get_Transpose();
    [CompilerGeneratedAttribute]
public void set_Transpose(bool value);
}
public class OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams : LoadFunctionFunctionParamsBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderParsingTypes <HeaderParsingType>k__BackingField;
    [CompilerGeneratedAttribute]
private eDataTypes[] <DataTypes>k__BackingField;
    public IEnumerable`1<string> Keys { get; private set; }
    public CultureInfo Culture { get; public set; }
    public HeaderParsingTypes HeaderParsingType { get; public set; }
    public eDataTypes[] DataTypes { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Keys();
    [CompilerGeneratedAttribute]
private void set_Keys(IEnumerable`1<string> value);
    public void SetKeys(String[] keys);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public HeaderParsingTypes get_HeaderParsingType();
    [CompilerGeneratedAttribute]
public void set_HeaderParsingType(HeaderParsingTypes value);
    [CompilerGeneratedAttribute]
public eDataTypes[] get_DataTypes();
    [CompilerGeneratedAttribute]
public void set_DataTypes(eDataTypes[] value);
}
public class OfficeOpenXml.LoadFunctions.Params.LoadFromTextParams : object {
    [CompilerGeneratedAttribute]
private bool <FirstRowIsHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelTextFormat <Format>k__BackingField;
    public bool FirstRowIsHeader { get; public set; }
    public string Text { get; public set; }
    public ExcelTextFormat Format { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_FirstRowIsHeader();
    [CompilerGeneratedAttribute]
public void set_FirstRowIsHeader(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public ExcelTextFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(ExcelTextFormat value);
}
internal class OfficeOpenXml.LoadFunctions.ReflectionHelpers.DictionaryItemMemberInfo : MemberInfo {
    private string _key;
    private MemberInfo _parentProperty;
    public Type DeclaringType { get; }
    public MemberTypes MemberType { get; }
    public string Name { get; }
    public Type ReflectedType { get; }
    public DictionaryItemMemberInfo(string key, MemberInfo parentProperty);
    public virtual Type get_DeclaringType();
    public virtual MemberTypes get_MemberType();
    public virtual string get_Name();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public object GetValue(object item);
}
internal class OfficeOpenXml.LoadFunctions.ReflectionHelpers.FormulaColumnMemberPath : MemberPathBase {
    private EpplusFormulaTableColumnAttribute _attr;
    public bool IsFormulaColumn { get; }
    public FormulaColumnMemberPath(EpplusFormulaTableColumnAttribute attr);
    private void Init();
    public virtual bool get_IsFormulaColumn();
    public virtual string GetHeader();
    internal virtual string GetPath();
}
internal class OfficeOpenXml.LoadFunctions.ReflectionHelpers.MemberFilterCollection : object {
    private List`1<MemberInfo> _members;
    public bool IsEmpty { get; }
    public MemberFilterCollection(MemberInfo[] members);
    public bool get_IsEmpty();
    public bool Exists(MemberInfo member);
    public List`1<MemberInfo> ToList();
    public int GetNumberOfChildrenByParent(MemberPath parentPath);
    public bool IsOnlyChild(MemberPath parentPath, MemberInfo child);
    public sealed virtual IEnumerator`1<MemberInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class OfficeOpenXml.LoadFunctions.ReflectionHelpers.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static bool ShouldBeIncluded(MemberInfo memberInfo);
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static object GetValue(MemberInfo memberInfo, object obj, BindingFlags bindingFlags);
}
[DebuggerDisplayAttribute("Path: {GetPath()}, IsNested: {Last().IsNestedProperty}, Order={GetSortOrderString()}")]
internal class OfficeOpenXml.LoadFunctions.ReflectionHelpers.MemberPath : MemberPathBase {
    public MemberPath(MemberInfo member, int sortOrder, bool useForAllPathItems);
    internal void Append(MemberPathItem item, bool useSortOrderForAllPathItems);
    internal void Append(MemberInfo member, int sortOrder, bool useForAllPathItems);
    public virtual string GetHeader();
    public static MemberPath CreateNewOrAppend(MemberPath path, MemberInfo member, int sortOrder, bool useSortOrderForAllPathItems);
}
internal abstract class OfficeOpenXml.LoadFunctions.ReflectionHelpers.MemberPathBase : object {
    protected List`1<MemberPathItem> _members;
    [CompilerGeneratedAttribute]
private bool <IsFormulaColumn>k__BackingField;
    public bool IsFormulaColumn { get; }
    public int Depth { get; }
    public abstract virtual string GetHeader();
    public MemberPathItem Last();
    public object GetLastMemberValue(object item, BindingFlags bindingFlags);
    [CompilerGeneratedAttribute]
public virtual bool get_IsFormulaColumn();
    public int get_Depth();
    public MemberPathItem Get(int index);
    internal virtual string GetPath();
    public MemberPath Clone();
    internal string GetSortOrderString();
}
[DebuggerDisplayAttribute("Member: {Member.Name}, SortOrder: {SortOrder}")]
internal class OfficeOpenXml.LoadFunctions.ReflectionHelpers.MemberPathItem : object {
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberPathItem <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNestedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDictionaryColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDictionaryParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DictionaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private RowFunctions <TotalsRowFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalRowsNumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalRowLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalRowFormula>k__BackingField;
    private Dictionary`2<Type, Func`2<object, object>> _lambdas;
    public MemberInfo Member { get; public set; }
    public MemberPathItem Parent { get; public set; }
    public bool IsNestedProperty { get; public set; }
    public string HeaderPrefix { get; public set; }
    public int SortOrder { get; public set; }
    public bool IsDictionaryColumn { get; public set; }
    public bool IsDictionaryParent { get; public set; }
    public string DictionaryKey { get; public set; }
    public bool Hidden { get; public set; }
    public string NumberFormat { get; public set; }
    public RowFunctions TotalsRowFunction { get; public set; }
    public string TotalRowsNumberFormat { get; public set; }
    public string TotalRowLabel { get; public set; }
    public string TotalRowFormula { get; public set; }
    public MemberPathItem(EpplusFormulaTableColumnAttribute attr);
    public MemberPathItem(MemberInfo member, string dictionaryKey, int index);
    public MemberPathItem(MemberInfo member, int sortOrder);
    [CompilerGeneratedAttribute]
public MemberInfo get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(MemberInfo value);
    [CompilerGeneratedAttribute]
public MemberPathItem get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(MemberPathItem value);
    [CompilerGeneratedAttribute]
public bool get_IsNestedProperty();
    [CompilerGeneratedAttribute]
public void set_IsNestedProperty(bool value);
    [CompilerGeneratedAttribute]
public string get_HeaderPrefix();
    [CompilerGeneratedAttribute]
public void set_HeaderPrefix(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDictionaryColumn();
    [CompilerGeneratedAttribute]
public void set_IsDictionaryColumn(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDictionaryParent();
    [CompilerGeneratedAttribute]
public void set_IsDictionaryParent(bool value);
    [CompilerGeneratedAttribute]
public string get_DictionaryKey();
    [CompilerGeneratedAttribute]
public void set_DictionaryKey(string value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
    [CompilerGeneratedAttribute]
public RowFunctions get_TotalsRowFunction();
    [CompilerGeneratedAttribute]
public void set_TotalsRowFunction(RowFunctions value);
    [CompilerGeneratedAttribute]
public string get_TotalRowsNumberFormat();
    [CompilerGeneratedAttribute]
public void set_TotalRowsNumberFormat(string value);
    [CompilerGeneratedAttribute]
public string get_TotalRowLabel();
    [CompilerGeneratedAttribute]
public void set_TotalRowLabel(string value);
    [CompilerGeneratedAttribute]
public string get_TotalRowFormula();
    [CompilerGeneratedAttribute]
public void set_TotalRowFormula(string value);
    public MemberPathItem Clone();
    public void SetProperties(EpplusTableColumnAttribute attr);
    public void SetProperties(EpplusNestedTableColumnAttribute attr);
    private void CreatePropertyGetter(Type outerType);
    public object GetPropertyValue(object item);
}
internal class OfficeOpenXml.LoadFunctions.ReflectionHelpers.MemberPathScanner : object {
    private MemberFilterCollection _filterMembers;
    private LoadFromCollectionParams _params;
    private List`1<MemberPath> _paths;
    public MemberPathScanner(Type outerType, LoadFromCollectionParams parameters);
    private bool ShouldAddPath(MemberPath parentPath, MemberInfo member);
    private void Scan(Type type, MemberPath path);
    public List`1<MemberPath> GetPaths();
}
[ExtensionAttribute]
internal static class OfficeOpenXml.LoadFunctions.ReflectionHelpers.SortOrderExtensions : object {
    [ExtensionAttribute]
public static int GetSortOrder(MemberInfo member, List`1<MemberInfo> filterMembers, int itemIndex, Boolean& useForAllPathItems);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.LoadFunctions.ReflectionHelpers.TypeExtensions : object {
    [ExtensionAttribute]
public static Type GetTypeOrUnderlyingType(Type type);
    [ExtensionAttribute]
public static bool IsComplexType(Type type);
    private static bool ListContainsMember(List`1<MemberInfo> members, MemberInfo member);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetLoadFromCollectionMembers(Type type, BindingFlags bindingFlags, IEnumerable`1<MemberInfo> filterMembers);
}
internal class OfficeOpenXml.LoadFunctions.ReflectionHelpers.UsedTypesScanner : object {
    private Type _outerType;
    public UsedTypesScanner(Type outerType);
    private void ScanType(HashSet`1<Type> types, Type typeToScan);
    public void ValidateMembers(IEnumerable`1<MemberInfo> members);
    private void ValidateTypes(IEnumerable`1<Type> typesToValidate);
}
internal class OfficeOpenXml.Metadata.ExcelFutureMetadata : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExcelFutureMetadataType> <Types>k__BackingField;
    public int Index { get; public set; }
    public string Name { get; public set; }
    public List`1<ExcelFutureMetadataType> Types { get; }
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<ExcelFutureMetadataType> get_Types();
}
internal class OfficeOpenXml.Metadata.ExcelFutureMetadataDynamicArray : ExcelFutureMetadataType {
    [CompilerGeneratedAttribute]
private bool <IsDynamicArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtLstXml>k__BackingField;
    public FutureMetadataType Type { get; }
    public string Uri { get; }
    public bool IsDynamicArray { get; public set; }
    public bool IsCollapsed { get; public set; }
    public string ExtLstXml { get; public set; }
    public ExcelFutureMetadataDynamicArray(bool isDynamicArray);
    public ExcelFutureMetadataDynamicArray(XmlReader xr);
    internal virtual void WriteXml(StreamWriter sw);
    public virtual FutureMetadataType get_Type();
    public virtual string get_Uri();
    [CompilerGeneratedAttribute]
public bool get_IsDynamicArray();
    [CompilerGeneratedAttribute]
public void set_IsDynamicArray(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCollapsed();
    [CompilerGeneratedAttribute]
public void set_IsCollapsed(bool value);
    [CompilerGeneratedAttribute]
public string get_ExtLstXml();
    [CompilerGeneratedAttribute]
public void set_ExtLstXml(string value);
}
internal class OfficeOpenXml.Metadata.ExcelFutureMetadataRichData : ExcelFutureMetadataType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; private set; }
    public FutureMetadataType Type { get; }
    public string Uri { get; }
    public ExcelFutureMetadataRichData(int index);
    public ExcelFutureMetadataRichData(XmlReader xr);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    public virtual FutureMetadataType get_Type();
    public virtual string get_Uri();
    internal virtual void WriteXml(StreamWriter sw);
}
internal abstract class OfficeOpenXml.Metadata.ExcelFutureMetadataType : object {
    public FutureMetadataType Type { get; }
    public string Uri { get; }
    public ExcelFutureMetadataDynamicArray AsDynamicArray { get; }
    public ExcelFutureMetadataRichData AsRichData { get; }
    public abstract virtual FutureMetadataType get_Type();
    public abstract virtual string get_Uri();
    public ExcelFutureMetadataDynamicArray get_AsDynamicArray();
    public ExcelFutureMetadataRichData get_AsRichData();
    internal abstract virtual void WriteXml(StreamWriter sw);
}
internal class OfficeOpenXml.Metadata.ExcelMetadata : object {
    private ExcelWorkbook _wb;
    private ZipPackagePart _part;
    private Uri _uri;
    private string _metadataStringsXml;
    private string _metadataStringCount;
    private string _mdxMetadataXml;
    private string _mdxMetadataCount;
    public string _extLstXml;
    internal static string FUTURE_METADATA_DYNAMIC_ARRAY_NAME;
    internal static string FUTURE_METADATA_RICHDATA_NAME;
    [CompilerGeneratedAttribute]
private List`1<ExcelMetadataType> <MetadataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ExcelFutureMetadata> <FutureMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExcelMetadataItem> <CellMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExcelMetadataItem> <ValueMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RichDataTypeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DynamicArrayTypeIndex>k__BackingField;
    internal List`1<ExcelMetadataType> MetadataTypes { get; }
    internal Dictionary`2<string, ExcelFutureMetadata> FutureMetadata { get; }
    internal List`1<ExcelMetadataItem> CellMetadata { get; }
    internal List`1<ExcelMetadataItem> ValueMetadata { get; }
    internal int RichDataTypeIndex { get; private set; }
    internal int DynamicArrayTypeIndex { get; private set; }
    internal ZipPackagePart Part { get; }
    public ExcelMetadata(ExcelWorkbook workbook);
    private void ReadMetadata(Stream stream);
    private void ReadMetadataItems(XmlReader xr, string elementName, List`1<ExcelMetadataItem> collection);
    private void ReadFutureMetadata(XmlReader xr);
    private void ReadMetadataTypes(XmlReader xr);
    internal int CreateDefaultXml();
    internal bool HasMetadata();
    [CompilerGeneratedAttribute]
internal List`1<ExcelMetadataType> get_MetadataTypes();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, ExcelFutureMetadata> get_FutureMetadata();
    [CompilerGeneratedAttribute]
internal List`1<ExcelMetadataItem> get_CellMetadata();
    [CompilerGeneratedAttribute]
internal List`1<ExcelMetadataItem> get_ValueMetadata();
    [CompilerGeneratedAttribute]
internal int get_RichDataTypeIndex();
    [CompilerGeneratedAttribute]
private void set_RichDataTypeIndex(int value);
    [CompilerGeneratedAttribute]
internal int get_DynamicArrayTypeIndex();
    [CompilerGeneratedAttribute]
private void set_DynamicArrayTypeIndex(int value);
    internal ZipPackagePart get_Part();
    internal bool IsFormulaDynamic(int cm);
    internal bool IsSpillError(int vm);
    internal bool IsCalcError(int vm);
    internal int GetErrorType(int vm);
    internal void GetDynamicArrayIndex(Int32& cm);
    internal void Save(ZipOutputStream stream, CompressionLevel compressionLevel, string fileName);
    internal void CreatePart();
    private void WriteMetadataItems(StreamWriter sw, string element, List`1<ExcelMetadataItem> collection);
    private void WriteFutureMetadata(StreamWriter sw);
    private void WriteMetadataTypes(StreamWriter sw);
    private void WriteMetadataStrings(StreamWriter sw);
    private void WriteMdxMetadata(StreamWriter sw);
    internal ExcelFutureMetadata GetFutureMetadataRichDataCollection();
    internal bool IsDynamicArray(int cmIx);
}
internal class OfficeOpenXml.Metadata.ExcelMetadataItem : object {
    [CompilerGeneratedAttribute]
private List`1<ExcelMetadataRecord> <Records>k__BackingField;
    public List`1<ExcelMetadataRecord> Records { get; }
    public ExcelMetadataItem(XmlReader xr);
    [CompilerGeneratedAttribute]
public List`1<ExcelMetadataRecord> get_Records();
}
internal class OfficeOpenXml.Metadata.ExcelMetadataRecord : object {
    [CompilerGeneratedAttribute]
private int <RecordTypeIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueTypeIndex>k__BackingField;
    public int RecordTypeIndex { get; private set; }
    public int ValueTypeIndex { get; private set; }
    public ExcelMetadataRecord(int recordTypeIndex, int valueTypeIndex);
    [CompilerGeneratedAttribute]
public int get_RecordTypeIndex();
    [CompilerGeneratedAttribute]
private void set_RecordTypeIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ValueTypeIndex();
    [CompilerGeneratedAttribute]
private void set_ValueTypeIndex(int value);
}
internal class OfficeOpenXml.Metadata.ExcelMetadataType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinSupportedVersion>k__BackingField;
    private MetadataFlags _flags;
    public string Name { get; public set; }
    public int MinSupportedVersion { get; public set; }
    public MetadataFlags Flags { get; public set; }
    public ExcelMetadataType(XmlReader xr);
    internal void SetXmlNodeFlag(string s, MetadataFlags flag, MetadataFlags& value);
    internal void WriteXml(StreamWriter sw);
    private string GetFlagAttributes();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_MinSupportedVersion();
    [CompilerGeneratedAttribute]
public void set_MinSupportedVersion(int value);
    public MetadataFlags get_Flags();
    public void set_Flags(MetadataFlags value);
}
internal enum OfficeOpenXml.Metadata.FutureMetadataType : Enum {
    public int value__;
    public static FutureMetadataType DynamicArray;
    public static FutureMetadataType RichData;
}
[FlagsAttribute]
internal enum OfficeOpenXml.Metadata.MetadataFlags : Enum {
    public int value__;
    public static MetadataFlags GhostRow;
    public static MetadataFlags GhostCol;
    public static MetadataFlags Edit;
    public static MetadataFlags Delete;
    public static MetadataFlags Copy;
    public static MetadataFlags PasteAll;
    public static MetadataFlags PasteFormulas;
    public static MetadataFlags PasteValues;
    public static MetadataFlags PasteFormats;
    public static MetadataFlags PasteComments;
    public static MetadataFlags PasteDataValidation;
    public static MetadataFlags PasteBorders;
    public static MetadataFlags PasteColWidths;
    public static MetadataFlags PasteNumberFormats;
    public static MetadataFlags Merge;
    public static MetadataFlags SplitFirst;
    public static MetadataFlags SplitAll;
    public static MetadataFlags RowColShift;
    public static MetadataFlags ClearAll;
    public static MetadataFlags ClearFormats;
    public static MetadataFlags ClearContents;
    public static MetadataFlags ClearComments;
    public static MetadataFlags Assign;
    public static MetadataFlags Coerce;
    public static MetadataFlags Adjust;
    public static MetadataFlags CellMeta;
}
public class OfficeOpenXml.NumberFormatToTextArgs : object {
    internal int _styleId;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public ExcelWorksheet Worksheet { get; }
    public int Row { get; }
    public int Column { get; }
    public ExcelNumberFormatXml NumberFormat { get; }
    public object Value { get; }
    public string Text { get; }
    internal NumberFormatToTextArgs(ExcelWorksheet ws, int row, int column, object value, int styleId);
    [CompilerGeneratedAttribute]
public ExcelWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
public int get_Row();
    [CompilerGeneratedAttribute]
public int get_Column();
    public ExcelNumberFormatXml get_NumberFormat();
    [CompilerGeneratedAttribute]
public object get_Value();
    public string get_Text();
}
public class OfficeOpenXml.OfficeProperties : XmlHelper {
    private XmlDocument _xmlPropertiesCore;
    private XmlDocument _xmlPropertiesExtended;
    private XmlDocument _xmlPropertiesCustom;
    private Uri _uriPropertiesCore;
    private Uri _uriPropertiesExtended;
    private Uri _uriPropertiesCustom;
    private XmlHelper _coreHelper;
    private XmlHelper _extendedHelper;
    private XmlHelper _customHelper;
    private Dictionary`2<string, XmlElement> _customProperties;
    private ExcelPackage _package;
    private int _maxPid;
    private static string TitlePath;
    private static string SubjectPath;
    private static string AuthorPath;
    private static string CommentsPath;
    private static string KeywordsPath;
    private static string LastModifiedByPath;
    private static string LastPrintedPath;
    private static string CreatedPath;
    private static string CategoryPath;
    private static string ContentStatusPath;
    private static string ApplicationPath;
    private static string HyperlinkBasePath;
    private static string AppVersionPath;
    private static string CompanyPath;
    private static string ManagerPath;
    private static string ModifiedPath;
    private static string LinksUpToDatePath;
    private static string HyperlinksChangedPath;
    private static string ScaleCropPath;
    private static string SharedDocPath;
    public XmlDocument CorePropertiesXml { get; }
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Author { get; public set; }
    public string Comments { get; public set; }
    public string Keywords { get; public set; }
    public string LastModifiedBy { get; public set; }
    public string LastPrinted { get; public set; }
    public DateTime Created { get; public set; }
    public string Category { get; public set; }
    public string Status { get; public set; }
    public XmlDocument ExtendedPropertiesXml { get; }
    public string Application { get; public set; }
    public Uri HyperlinkBase { get; public set; }
    public string AppVersion { get; public set; }
    public string Company { get; public set; }
    public string Manager { get; public set; }
    public DateTime Modified { get; public set; }
    public bool LinksUpToDate { get; public set; }
    public bool HyperlinksChanged { get; public set; }
    public bool ScaleCrop { get; public set; }
    public bool SharedDoc { get; public set; }
    public XmlDocument CustomPropertiesXml { get; }
    internal OfficeProperties(ExcelPackage package, XmlNamespaceManager ns);
    private void LoadCustomProperties();
    public XmlDocument get_CorePropertiesXml();
    private XmlDocument GetXmlDocument(string startXml, Uri uri, string contentType, string relationship);
    public string get_Title();
    public void set_Title(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Comments();
    public void set_Comments(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public string get_LastModifiedBy();
    public void set_LastModifiedBy(string value);
    public string get_LastPrinted();
    public void set_LastPrinted(string value);
    public DateTime get_Created();
    public void set_Created(DateTime value);
    public string get_Category();
    public void set_Category(string value);
    public string get_Status();
    public void set_Status(string value);
    public XmlDocument get_ExtendedPropertiesXml();
    public string get_Application();
    public void set_Application(string value);
    public Uri get_HyperlinkBase();
    public void set_HyperlinkBase(Uri value);
    public string get_AppVersion();
    public void set_AppVersion(string value);
    public string get_Company();
    public void set_Company(string value);
    public string get_Manager();
    public void set_Manager(string value);
    public DateTime get_Modified();
    public void set_Modified(DateTime value);
    public bool get_LinksUpToDate();
    public void set_LinksUpToDate(bool value);
    public bool get_HyperlinksChanged();
    public void set_HyperlinksChanged(bool value);
    public bool get_ScaleCrop();
    public void set_ScaleCrop(bool value);
    public bool get_SharedDoc();
    public void set_SharedDoc(bool value);
    public string GetExtendedPropertyValue(string propertyName);
    public void SetExtendedPropertyValue(string propertyName, string value);
    public XmlDocument get_CustomPropertiesXml();
    public object GetCustomPropertyValue(string propertyName);
    public void SetCustomPropertyValue(string propertyName, object value);
    internal void Save();
}
internal class OfficeOpenXml.Packaging.Ionic.AttributesCriterion : SelectionCriterion {
    private FileAttributes _Attributes;
    internal ComparisonOperator Operator;
    internal string AttributeString { get; internal set; }
    internal string get_AttributeString();
    internal void set_AttributeString(string value);
    public virtual string ToString();
    private bool _EvaluateOne(FileAttributes fileAttrs, FileAttributes criterionAttrs);
    internal virtual bool Evaluate(string filename);
    private bool _Evaluate(FileAttributes fileAttrs);
    internal virtual bool Evaluate(ZipEntry entry);
}
internal enum OfficeOpenXml.Packaging.Ionic.ComparisonOperator : Enum {
    public int value__;
    [DescriptionAttribute(">")]
public static ComparisonOperator GreaterThan;
    [DescriptionAttribute(">=")]
public static ComparisonOperator GreaterThanOrEqualTo;
    [DescriptionAttribute("<")]
public static ComparisonOperator LesserThan;
    [DescriptionAttribute("<=")]
public static ComparisonOperator LesserThanOrEqualTo;
    [DescriptionAttribute("=")]
public static ComparisonOperator EqualTo;
    [DescriptionAttribute("!=")]
public static ComparisonOperator NotEqualTo;
}
internal class OfficeOpenXml.Packaging.Ionic.CompoundCriterion : SelectionCriterion {
    internal LogicalConjunction Conjunction;
    internal SelectionCriterion Left;
    private SelectionCriterion _Right;
    internal SelectionCriterion Right { get; internal set; }
    internal SelectionCriterion get_Right();
    internal void set_Right(SelectionCriterion value);
    internal virtual bool Evaluate(string filename);
    public virtual string ToString();
    internal virtual bool Evaluate(ZipEntry entry);
}
internal class OfficeOpenXml.Packaging.Ionic.Crc.CRC32 : object {
    private UInt32 dwPolynomial;
    private long _TotalBytesRead;
    private bool reverseBits;
    private UInt32[] crc32Table;
    private static int BUFFER_SIZE;
    private UInt32 _register;
    public long TotalBytesRead { get; }
    public int Crc32Result { get; }
    public CRC32(bool reverseBits);
    public CRC32(int polynomial, bool reverseBits);
    public long get_TotalBytesRead();
    public int get_Crc32Result();
    public int GetCrc32(Stream input);
    public int GetCrc32AndCopy(Stream input, Stream output);
    public int ComputeCrc32(int W, byte B);
    internal int _InternalComputeCrc32(UInt32 W, byte B);
    public void SlurpBlock(Byte[] block, int offset, int count);
    public void UpdateCRC(byte b);
    public void UpdateCRC(byte b, int n);
    private static UInt32 ReverseBits(UInt32 data);
    private static byte ReverseBits(byte data);
    private void GenerateLookupTable();
    private UInt32 gf2_matrix_times(UInt32[] matrix, UInt32 vec);
    private void gf2_matrix_square(UInt32[] square, UInt32[] mat);
    public void Combine(int crc, int length);
    public void Reset();
}
internal class OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream : Stream {
    private static long UnsetLengthLimit;
    internal Stream _innerStream;
    private CRC32 _Crc32;
    private long _lengthLimit;
    private bool _leaveOpen;
    public long TotalBytesSlurped { get; }
    public int Crc { get; }
    public bool LeaveOpen { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CrcCalculatorStream(Stream stream);
    public CrcCalculatorStream(Stream stream, bool leaveOpen);
    public CrcCalculatorStream(Stream stream, long length);
    public CrcCalculatorStream(Stream stream, long length, bool leaveOpen);
    public CrcCalculatorStream(Stream stream, long length, bool leaveOpen, CRC32 crc32);
    private CrcCalculatorStream(bool leaveOpen, long length, Stream stream, CRC32 crc32);
    private static CrcCalculatorStream();
    public long get_TotalBytesSlurped();
    public int get_Crc();
    public bool get_LeaveOpen();
    public void set_LeaveOpen(bool value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
internal class OfficeOpenXml.Packaging.Ionic.EnumUtil : object {
    internal static string GetDescription(Enum value);
    internal static object Parse(Type enumType, string stringRepresentation);
    internal static object Parse(Type enumType, string stringRepresentation, bool ignoreCase);
}
internal class OfficeOpenXml.Packaging.Ionic.FileSelector : object {
    internal SelectionCriterion _Criterion;
    [CompilerGeneratedAttribute]
private bool <TraverseReparsePoints>k__BackingField;
    public string SelectionCriteria { get; public set; }
    public bool TraverseReparsePoints { get; public set; }
    public FileSelector(string selectionCriteria);
    public FileSelector(string selectionCriteria, bool traverseDirectoryReparsePoints);
    public string get_SelectionCriteria();
    public void set_SelectionCriteria(string value);
    [CompilerGeneratedAttribute]
public bool get_TraverseReparsePoints();
    [CompilerGeneratedAttribute]
public void set_TraverseReparsePoints(bool value);
    private static string NormalizeCriteriaExpression(string source);
    private static SelectionCriterion _ParseCriterion(string s);
    public virtual string ToString();
    private bool Evaluate(string filename);
    [ConditionalAttribute("SelectorTrace")]
private void SelectorTrace(string format, Object[] args);
    public ICollection`1<string> SelectFiles(string directory);
    public ReadOnlyCollection`1<string> SelectFiles(string directory, bool recurseDirectories);
    private bool Evaluate(ZipEntry entry);
    public ICollection`1<ZipEntry> SelectEntries(ZipFile zip);
    public ICollection`1<ZipEntry> SelectEntries(ZipFile zip, string directoryPathInArchive);
}
internal enum OfficeOpenXml.Packaging.Ionic.LogicalConjunction : Enum {
    public int value__;
    public static LogicalConjunction NONE;
    public static LogicalConjunction AND;
    public static LogicalConjunction OR;
    public static LogicalConjunction XOR;
}
internal class OfficeOpenXml.Packaging.Ionic.NameCriterion : SelectionCriterion {
    private Regex _re;
    private string _regexString;
    internal ComparisonOperator Operator;
    private string _MatchingFileSpec;
    unknown string MatchingFileSpec {internal set; }
    internal virtual void set_MatchingFileSpec(string value);
    public virtual string ToString();
    internal virtual bool Evaluate(string filename);
    private bool _Evaluate(string fullpath);
    internal virtual bool Evaluate(ZipEntry entry);
}
internal abstract class OfficeOpenXml.Packaging.Ionic.SelectionCriterion : object {
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    internal bool Verbose { get; internal set; }
    [CompilerGeneratedAttribute]
internal virtual bool get_Verbose();
    [CompilerGeneratedAttribute]
internal virtual void set_Verbose(bool value);
    internal abstract virtual bool Evaluate(string filename);
    [ConditionalAttribute("SelectorTrace")]
protected static void CriterionTrace(string format, Object[] args);
    internal abstract virtual bool Evaluate(ZipEntry entry);
}
internal class OfficeOpenXml.Packaging.Ionic.SizeCriterion : SelectionCriterion {
    internal ComparisonOperator Operator;
    internal long Size;
    public virtual string ToString();
    internal virtual bool Evaluate(string filename);
    private bool _Evaluate(long Length);
    internal virtual bool Evaluate(ZipEntry entry);
}
internal class OfficeOpenXml.Packaging.Ionic.TimeCriterion : SelectionCriterion {
    internal ComparisonOperator Operator;
    internal WhichTime Which;
    internal DateTime Time;
    public virtual string ToString();
    internal virtual bool Evaluate(string filename);
    private bool _Evaluate(DateTime x);
    internal virtual bool Evaluate(ZipEntry entry);
}
internal class OfficeOpenXml.Packaging.Ionic.TypeCriterion : SelectionCriterion {
    private char ObjectType;
    internal ComparisonOperator Operator;
    internal string AttributeString { get; internal set; }
    internal string get_AttributeString();
    internal void set_AttributeString(string value);
    public virtual string ToString();
    internal virtual bool Evaluate(string filename);
    internal virtual bool Evaluate(ZipEntry entry);
}
internal enum OfficeOpenXml.Packaging.Ionic.WhichTime : Enum {
    public int value__;
    public static WhichTime atime;
    public static WhichTime mtime;
    public static WhichTime ctime;
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.AddOrUpdateAction : Enum {
    public int value__;
    public static AddOrUpdateAction AddOnly;
    public static AddOrUpdateAction AddOrUpdate;
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.AddProgressEventArgs : ZipProgressEventArgs {
    private AddProgressEventArgs(string archiveName, ZipProgressEventType flavor);
    internal static AddProgressEventArgs AfterEntry(string archiveName, ZipEntry entry, int entriesTotal);
    internal static AddProgressEventArgs Started(string archiveName);
    internal static AddProgressEventArgs Completed(string archiveName);
}
public class OfficeOpenXml.Packaging.Ionic.Zip.BadCrcException : ZipException {
    public BadCrcException(string message);
}
public class OfficeOpenXml.Packaging.Ionic.Zip.BadPasswordException : ZipException {
    public BadPasswordException(string message);
    public BadPasswordException(string message, Exception innerException);
}
public class OfficeOpenXml.Packaging.Ionic.Zip.BadReadException : ZipException {
    public BadReadException(string message);
    public BadReadException(string message, Exception innerException);
}
public class OfficeOpenXml.Packaging.Ionic.Zip.BadStateException : ZipException {
    public BadStateException(string message);
    public BadStateException(string message, Exception innerException);
}
public class OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate : MulticastDelegate {
    public CloseDelegate(object object, IntPtr method);
    public virtual void Invoke(string entryName, Stream stream);
    public virtual IAsyncResult BeginInvoke(string entryName, Stream stream, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ComHelper : object {
    public bool IsZipFile(string filename);
    public bool IsZipFileWithExtract(string filename);
    public bool CheckZip(string filename);
    public bool CheckZipPassword(string filename, string password);
    public void FixZipDirectory(string filename);
    public string GetZipLibraryVersion();
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.CompressionMethod : Enum {
    public int value__;
    public static CompressionMethod None;
    public static CompressionMethod Deflate;
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.CountingStream : Stream {
    private Stream _s;
    private long _bytesWritten;
    private long _bytesRead;
    private long _initialOffset;
    public Stream WrappedStream { get; }
    public long BytesWritten { get; }
    public long BytesRead { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long ComputedPosition { get; }
    public long Position { get; public set; }
    public CountingStream(Stream stream);
    public Stream get_WrappedStream();
    public long get_BytesWritten();
    public long get_BytesRead();
    public void Adjust(long delta);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public long get_ComputedPosition();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.CryptoMode : Enum {
    public int value__;
    public static CryptoMode Encrypt;
    public static CryptoMode Decrypt;
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.EncryptionAlgorithm : Enum {
    public int value__;
    public static EncryptionAlgorithm None;
    public static EncryptionAlgorithm PkzipWeak;
    public static EncryptionAlgorithm Unsupported;
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction : Enum {
    public int value__;
    public static ExtractExistingFileAction Throw;
    public static ExtractExistingFileAction OverwriteSilently;
    public static ExtractExistingFileAction DoNotOverwrite;
    public static ExtractExistingFileAction InvokeExtractProgressEvent;
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ExtractProgressEventArgs : ZipProgressEventArgs {
    private int _entriesExtracted;
    private string _target;
    public int EntriesExtracted { get; }
    public string ExtractLocation { get; }
    internal ExtractProgressEventArgs(string archiveName, bool before, int entriesTotal, int entriesExtracted, ZipEntry entry, string extractLocation);
    internal ExtractProgressEventArgs(string archiveName, ZipProgressEventType flavor);
    internal static ExtractProgressEventArgs BeforeExtractEntry(string archiveName, ZipEntry entry, string extractLocation);
    internal static ExtractProgressEventArgs ExtractExisting(string archiveName, ZipEntry entry, string extractLocation);
    internal static ExtractProgressEventArgs AfterExtractEntry(string archiveName, ZipEntry entry, string extractLocation);
    internal static ExtractProgressEventArgs ExtractAllStarted(string archiveName, string extractLocation);
    internal static ExtractProgressEventArgs ExtractAllCompleted(string archiveName, string extractLocation);
    internal static ExtractProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesWritten, long totalBytes);
    public int get_EntriesExtracted();
    public string get_ExtractLocation();
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.OffsetStream : Stream {
    private long _originalPosition;
    private Stream _innerStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public OffsetStream(Stream s);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    private sealed virtual override void System.IDisposable.Dispose();
    public virtual void Close();
}
public class OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate : MulticastDelegate {
    public OpenDelegate(object object, IntPtr method);
    public virtual Stream Invoke(string entryName);
    public virtual IAsyncResult BeginInvoke(string entryName, AsyncCallback callback, object object);
    public virtual Stream EndInvoke(IAsyncResult result);
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ReadProgressEventArgs> <ReadProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <StatusMessageWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public EventHandler`1<ReadProgressEventArgs> ReadProgress { get; public set; }
    public TextWriter StatusMessageWriter { get; public set; }
    public Encoding Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public EventHandler`1<ReadProgressEventArgs> get_ReadProgress();
    [CompilerGeneratedAttribute]
public void set_ReadProgress(EventHandler`1<ReadProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public TextWriter get_StatusMessageWriter();
    [CompilerGeneratedAttribute]
public void set_StatusMessageWriter(TextWriter value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ReadProgressEventArgs : ZipProgressEventArgs {
    private ReadProgressEventArgs(string archiveName, ZipProgressEventType flavor);
    internal static ReadProgressEventArgs Before(string archiveName, int entriesTotal);
    internal static ReadProgressEventArgs After(string archiveName, ZipEntry entry, int entriesTotal);
    internal static ReadProgressEventArgs Started(string archiveName);
    internal static ReadProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesXferred, long totalBytes);
    internal static ReadProgressEventArgs Completed(string archiveName);
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.SaveProgressEventArgs : ZipProgressEventArgs {
    private int _entriesSaved;
    public int EntriesSaved { get; }
    internal SaveProgressEventArgs(string archiveName, bool before, int entriesTotal, int entriesSaved, ZipEntry entry);
    internal SaveProgressEventArgs(string archiveName, ZipProgressEventType flavor);
    internal static SaveProgressEventArgs ByteUpdate(string archiveName, ZipEntry entry, long bytesXferred, long totalBytes);
    internal static SaveProgressEventArgs Started(string archiveName);
    internal static SaveProgressEventArgs Completed(string archiveName);
    public int get_EntriesSaved();
}
public class OfficeOpenXml.Packaging.Ionic.Zip.SetCompressionCallback : MulticastDelegate {
    public SetCompressionCallback(object object, IntPtr method);
    public virtual CompressionLevel Invoke(string localFileName, string fileNameInArchive);
    public virtual IAsyncResult BeginInvoke(string localFileName, string fileNameInArchive, AsyncCallback callback, object object);
    public virtual CompressionLevel EndInvoke(IAsyncResult result);
}
public class OfficeOpenXml.Packaging.Ionic.Zip.SfxGenerationException : ZipException {
    public SfxGenerationException(string message);
}
internal static class OfficeOpenXml.Packaging.Ionic.Zip.SharedUtilities : object {
    private static Regex doubleDotRegex1;
    private static Encoding ibm437;
    private static Encoding utf8;
    private static SharedUtilities();
    public static long GetFileLength(string fileName);
    [ConditionalAttribute("NETCF")]
public static void Workaround_Ladybug318918(Stream s);
    private static string SimplifyFwdSlashPath(string path);
    public static string NormalizePathForUseInZipFile(string pathName);
    internal static Byte[] StringToByteArray(string value, Encoding encoding);
    internal static Byte[] StringToByteArray(string value);
    internal static string Utf8StringFromBuffer(Byte[] buf);
    internal static string StringFromBuffer(Byte[] buf, Encoding encoding);
    internal static int ReadSignature(Stream s);
    internal static int ReadEntrySignature(Stream s);
    internal static int ReadInt(Stream s);
    private static int _ReadFourBytes(Stream s, string message);
    internal static long FindSignature(Stream stream, int SignatureToFind);
    internal static DateTime AdjustTime_Reverse(DateTime time);
    internal static DateTime PackedToDateTime(int packedDateTime);
    internal static int DateTimeToPacked(DateTime time);
    public static void CreateAndOpenUniqueTempFile(string dir, Stream& fs, String& filename);
    public static string InternalGetTempFileName();
    internal static int ReadWithRetry(Stream s, Byte[] buffer, int offset, int count, string FileName);
}
public class OfficeOpenXml.Packaging.Ionic.Zip.WriteDelegate : MulticastDelegate {
    public WriteDelegate(object object, IntPtr method);
    public virtual void Invoke(string entryName, Stream stream);
    public virtual IAsyncResult BeginInvoke(string entryName, Stream stream, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option : Enum {
    public int value__;
    public static Zip64Option Default;
    public static Zip64Option Never;
    public static Zip64Option AsNecessary;
    public static Zip64Option Always;
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipCipherStream : Stream {
    private ZipCrypto _cipher;
    private Stream _s;
    private CryptoMode _mode;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZipCipherStream(Stream s, ZipCrypto cipher, CryptoMode mode);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
internal static class OfficeOpenXml.Packaging.Ionic.Zip.ZipConstants : object {
    public static UInt32 PackedToRemovableMedia;
    public static UInt32 Zip64EndOfCentralDirectoryRecordSignature;
    public static UInt32 Zip64EndOfCentralDirectoryLocatorSignature;
    public static UInt32 EndOfCentralDirectorySignature;
    public static int ZipEntrySignature;
    public static int ZipEntryDataDescriptorSignature;
    public static int SplitArchiveSignature;
    public static int ZipDirEntrySignature;
    public static int AesKeySize;
    public static int AesBlockSize;
    public static ushort AesAlgId128;
    public static ushort AesAlgId192;
    public static ushort AesAlgId256;
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipContainer : object {
    private ZipFile _zf;
    private ZipOutputStream _zos;
    private ZipInputStream _zis;
    public ZipFile ZipFile { get; }
    public ZipOutputStream ZipOutputStream { get; }
    public string Name { get; }
    public string Password { get; }
    public Zip64Option Zip64 { get; }
    public int BufferSize { get; }
    public ParallelDeflateOutputStream ParallelDeflater { get; public set; }
    public long ParallelDeflateThreshold { get; }
    public int ParallelDeflateMaxBufferPairs { get; }
    public int CodecBufferSize { get; }
    public CompressionStrategy Strategy { get; }
    public Zip64Option UseZip64WhenSaving { get; }
    public Encoding AlternateEncoding { get; }
    public Encoding DefaultEncoding { get; }
    public ZipOption AlternateEncodingUsage { get; }
    public Stream ReadStream { get; }
    public ZipContainer(object o);
    public ZipFile get_ZipFile();
    public ZipOutputStream get_ZipOutputStream();
    public string get_Name();
    public string get_Password();
    public Zip64Option get_Zip64();
    public int get_BufferSize();
    public ParallelDeflateOutputStream get_ParallelDeflater();
    public void set_ParallelDeflater(ParallelDeflateOutputStream value);
    public long get_ParallelDeflateThreshold();
    public int get_ParallelDeflateMaxBufferPairs();
    public int get_CodecBufferSize();
    public CompressionStrategy get_Strategy();
    public Zip64Option get_UseZip64WhenSaving();
    public Encoding get_AlternateEncoding();
    public Encoding get_DefaultEncoding();
    public ZipOption get_AlternateEncodingUsage();
    public Stream get_ReadStream();
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto : object {
    private UInt32[] _Keys;
    private CRC32 crc32;
    private byte MagicByte { get; }
    public static ZipCrypto ForWrite(string password);
    public static ZipCrypto ForRead(string password, ZipEntry e);
    private byte get_MagicByte();
    public Byte[] DecryptMessage(Byte[] cipherText, int length);
    public Byte[] EncryptMessage(Byte[] plainText, int length);
    public void InitCipher(string passphrase);
    private void UpdateKeys(byte byteValue);
}
[GuidAttribute("ebc25cf6-9120-4283-b972-0e5520d00004")]
[ComVisibleAttribute("True")]
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry : object {
    private short _VersionMadeBy;
    private short _InternalFileAttrs;
    private int _ExternalFileAttrs;
    private short _filenameLength;
    private short _extraFieldLength;
    private short _commentLength;
    [CompilerGeneratedAttribute]
private ExtractExistingFileAction <ExtractExistingFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipErrorAction <ZipErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private SetCompressionCallback <SetCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <ProvisionalAlternateEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <AlternateEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipOption <AlternateEncodingUsage>k__BackingField;
    private ZipCrypto _zipCrypto_forExtract;
    private ZipCrypto _zipCrypto_forWrite;
    internal DateTime _LastModified;
    private DateTime _Mtime;
    private DateTime _Atime;
    private DateTime _Ctime;
    private bool _ntfsTimesAreSet;
    private bool _emitNtfsTimes;
    private bool _emitUnixTimes;
    private bool _TrimVolumeFromFullyQualifiedPaths;
    internal string _LocalFileName;
    private string _FileNameInArchive;
    internal short _VersionNeeded;
    internal short _BitField;
    internal short _CompressionMethod;
    private short _CompressionMethod_FromZipFile;
    private CompressionLevel _CompressionLevel;
    internal string _Comment;
    private bool _IsDirectory;
    private Byte[] _CommentBytes;
    internal long _CompressedSize;
    internal long _CompressedFileDataSize;
    internal long _UncompressedSize;
    internal int _TimeBlob;
    private bool _crcCalculated;
    internal int _Crc32;
    internal Byte[] _Extra;
    private bool _metadataChanged;
    private bool _restreamRequiredOnSave;
    private bool _sourceIsEncrypted;
    private bool _skippedDuringSave;
    private UInt32 _diskNumber;
    private static Encoding ibm437;
    private Encoding _actualEncoding;
    internal ZipContainer _container;
    private long __FileDataPosition;
    private Byte[] _EntryHeader;
    internal long _RelativeOffsetOfLocalHeader;
    private long _future_ROLH;
    private long _TotalEntrySize;
    private int _LengthOfHeader;
    private int _LengthOfTrailer;
    internal bool _InputUsesZip64;
    private UInt32 _UnsupportedAlgorithmId;
    internal string _Password;
    internal ZipEntrySource _Source;
    internal EncryptionAlgorithm _Encryption;
    internal EncryptionAlgorithm _Encryption_FromZipFile;
    internal Byte[] _WeakEncryptionHeader;
    internal Stream _archiveStream;
    private Stream _sourceStream;
    private Nullable`1<long> _sourceStreamOriginalPosition;
    private bool _sourceWasJitProvided;
    private bool _ioOperationCanceled;
    private bool _presumeZip64;
    private Nullable`1<bool> _entryRequiresZip64;
    private Nullable`1<bool> _OutputUsesZip64;
    private bool _IsText;
    private ZipEntryTimestamp _timestamp;
    private static DateTime _unixEpoch;
    private static DateTime _win32Epoch;
    private static DateTime _zeroHour;
    private WriteDelegate _WriteDelegate;
    private OpenDelegate _OpenDelegate;
    private CloseDelegate _CloseDelegate;
    private Stream _inputDecryptorStream;
    private int _readExtraDepth;
    private object _outputLock;
    internal bool AttributesIndicateDirectory { get; }
    public string Info { get; }
    public DateTime LastModified { get; public set; }
    private int BufferSize { get; }
    public DateTime ModifiedTime { get; public set; }
    public DateTime AccessedTime { get; public set; }
    public DateTime CreationTime { get; public set; }
    public bool EmitTimesInWindowsFormatWhenSaving { get; public set; }
    public bool EmitTimesInUnixFormatWhenSaving { get; public set; }
    internal ZipEntryTimestamp Timestamp { get; }
    public FileAttributes Attributes { get; public set; }
    internal string LocalFileName { get; }
    public string FileName { get; public set; }
    public Stream InputStream { get; public set; }
    public bool InputStreamWasJitProvided { get; }
    internal ZipEntrySource Source { get; }
    public short VersionNeeded { get; }
    public string Comment { get; public set; }
    public Nullable`1<bool> RequiresZip64 { get; }
    public Nullable`1<bool> OutputUsedZip64 { get; }
    public short BitField { get; }
    internal CompressionMethod CompressionMethod { get; internal set; }
    public CompressionLevel CompressionLevel { get; public set; }
    public long CompressedSize { get; }
    public long UncompressedSize { get; }
    public double CompressionRatio { get; }
    public int Crc { get; }
    public bool IsDirectory { get; }
    public bool UsesEncryption { get; }
    internal EncryptionAlgorithm Encryption { get; internal set; }
    private string Password { get; public set; }
    internal bool IsChanged { get; }
    internal ExtractExistingFileAction ExtractExistingFile { get; internal set; }
    internal ZipErrorAction ZipErrorAction { get; internal set; }
    internal bool IncludedInMostRecentSave { get; }
    public SetCompressionCallback SetCompression { get; public set; }
    [ObsoleteAttribute("Beginning with v1.9.1.6 of DotNetZip, this property is obsolete.  It will be removed in a future version of the library. Your applications should  use AlternateEncoding and AlternateEncodingUsage instead.")]
public bool UseUnicodeAsNecessary { get; public set; }
    [ObsoleteAttribute("This property is obsolete since v1.9.1.6. Use AlternateEncoding and AlternateEncodingUsage instead.", "True")]
public Encoding ProvisionalAlternateEncoding { get; public set; }
    public Encoding AlternateEncoding { get; public set; }
    internal ZipOption AlternateEncodingUsage { get; internal set; }
    public bool IsText { get; public set; }
    internal Stream ArchiveStream { get; }
    internal long FileDataPosition { get; }
    private int LengthOfHeader { get; }
    private string UnsupportedAlgorithm { get; }
    private string UnsupportedCompressionMethod { get; }
    private static ZipEntry();
    internal bool get_AttributesIndicateDirectory();
    internal void ResetDirEntry();
    public string get_Info();
    internal static ZipEntry ReadDirEntry(ZipFile zf, Dictionary`2<string, object> previouslySeen);
    internal static bool IsNotValidZipDirEntrySig(int signature);
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    private int get_BufferSize();
    public DateTime get_ModifiedTime();
    public void set_ModifiedTime(DateTime value);
    public DateTime get_AccessedTime();
    public void set_AccessedTime(DateTime value);
    public DateTime get_CreationTime();
    public void set_CreationTime(DateTime value);
    public void SetEntryTimes(DateTime created, DateTime accessed, DateTime modified);
    public bool get_EmitTimesInWindowsFormatWhenSaving();
    public void set_EmitTimesInWindowsFormatWhenSaving(bool value);
    public bool get_EmitTimesInUnixFormatWhenSaving();
    public void set_EmitTimesInUnixFormatWhenSaving(bool value);
    internal ZipEntryTimestamp get_Timestamp();
    public FileAttributes get_Attributes();
    public void set_Attributes(FileAttributes value);
    internal string get_LocalFileName();
    public string get_FileName();
    public void set_FileName(string value);
    public Stream get_InputStream();
    public void set_InputStream(Stream value);
    public bool get_InputStreamWasJitProvided();
    internal ZipEntrySource get_Source();
    public short get_VersionNeeded();
    public string get_Comment();
    public void set_Comment(string value);
    public Nullable`1<bool> get_RequiresZip64();
    public Nullable`1<bool> get_OutputUsedZip64();
    public short get_BitField();
    internal CompressionMethod get_CompressionMethod();
    internal void set_CompressionMethod(CompressionMethod value);
    public CompressionLevel get_CompressionLevel();
    public void set_CompressionLevel(CompressionLevel value);
    public long get_CompressedSize();
    public long get_UncompressedSize();
    public double get_CompressionRatio();
    public int get_Crc();
    public bool get_IsDirectory();
    public bool get_UsesEncryption();
    internal EncryptionAlgorithm get_Encryption();
    internal void set_Encryption(EncryptionAlgorithm value);
    public void set_Password(string value);
    private string get_Password();
    internal bool get_IsChanged();
    [CompilerGeneratedAttribute]
internal ExtractExistingFileAction get_ExtractExistingFile();
    [CompilerGeneratedAttribute]
internal void set_ExtractExistingFile(ExtractExistingFileAction value);
    [CompilerGeneratedAttribute]
internal ZipErrorAction get_ZipErrorAction();
    [CompilerGeneratedAttribute]
internal void set_ZipErrorAction(ZipErrorAction value);
    internal bool get_IncludedInMostRecentSave();
    [CompilerGeneratedAttribute]
public SetCompressionCallback get_SetCompression();
    [CompilerGeneratedAttribute]
public void set_SetCompression(SetCompressionCallback value);
    public bool get_UseUnicodeAsNecessary();
    public void set_UseUnicodeAsNecessary(bool value);
    [CompilerGeneratedAttribute]
public Encoding get_ProvisionalAlternateEncoding();
    [CompilerGeneratedAttribute]
public void set_ProvisionalAlternateEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public Encoding get_AlternateEncoding();
    [CompilerGeneratedAttribute]
public void set_AlternateEncoding(Encoding value);
    [CompilerGeneratedAttribute]
internal ZipOption get_AlternateEncodingUsage();
    [CompilerGeneratedAttribute]
internal void set_AlternateEncodingUsage(ZipOption value);
    internal static string NameInArchive(string filename, string directoryPathInArchive);
    internal static ZipEntry CreateFromNothing(string nameInArchive);
    internal static ZipEntry CreateFromFile(string filename, string nameInArchive);
    internal static ZipEntry CreateForStream(string entryName, Stream s);
    internal static ZipEntry CreateForWriter(string entryName, WriteDelegate d);
    internal static ZipEntry CreateForJitStreamProvider(string nameInArchive, OpenDelegate opener, CloseDelegate closer);
    internal static ZipEntry CreateForZipOutputStream(string nameInArchive);
    private static ZipEntry Create(string nameInArchive, ZipEntrySource source, object arg1, object arg2);
    internal void MarkAsDirectory();
    public bool get_IsText();
    public void set_IsText(bool value);
    public virtual string ToString();
    internal Stream get_ArchiveStream();
    private void SetFdpLoh();
    internal static int GetLengthOfCryptoHeaderBytes(EncryptionAlgorithm a);
    internal long get_FileDataPosition();
    private int get_LengthOfHeader();
    internal void Extract();
    internal void Extract(ExtractExistingFileAction extractExistingFile);
    public void Extract(Stream stream);
    public void Extract(string baseDirectory);
    internal void Extract(string baseDirectory, ExtractExistingFileAction extractExistingFile);
    public void ExtractWithPassword(string password);
    public void ExtractWithPassword(string baseDirectory, string password);
    internal void ExtractWithPassword(ExtractExistingFileAction extractExistingFile, string password);
    internal void ExtractWithPassword(string baseDirectory, ExtractExistingFileAction extractExistingFile, string password);
    public void ExtractWithPassword(Stream stream, string password);
    internal CrcCalculatorStream OpenReader();
    internal CrcCalculatorStream OpenReader(string password);
    internal CrcCalculatorStream InternalOpenReader(string password);
    private void OnExtractProgress(long bytesWritten, long totalBytesToWrite);
    private void OnBeforeExtract(string path);
    private void OnAfterExtract(string path);
    private void OnExtractExisting(string path);
    private static void ReallyDelete(string fileName);
    private void WriteStatus(string format, Object[] args);
    private void InternalExtract(string baseDir, Stream outstream, string password);
    internal void VerifyCrcAfterExtract(int actualCrc32);
    private int CheckExtractExistingFile(string baseDir, string targetFileName);
    private void _CheckRead(int nbytes);
    private int ExtractOne(Stream output);
    internal Stream GetExtractDecompressor(Stream input2);
    internal Stream GetExtractDecryptor(Stream input);
    internal void _SetTimes(string fileOrDirectory, bool isFile);
    private string get_UnsupportedAlgorithm();
    private string get_UnsupportedCompressionMethod();
    internal void ValidateEncryption();
    private void ValidateCompression();
    private void SetupCryptoForExtract(string password);
    private bool ValidateOutput(string basedir, Stream outstream, String& outFileName);
    private void ReadExtraField();
    private static bool ReadHeader(ZipEntry ze, Encoding defaultEncoding);
    internal static int ReadWeakEncryptionHeader(Stream s, Byte[] buffer);
    private static bool IsNotValidSig(int signature);
    internal static ZipEntry ReadEntry(ZipContainer zc, bool first);
    internal static void HandlePK00Prefix(Stream s);
    private static void HandleUnexpectedDataDescriptor(ZipEntry entry);
    internal static int FindExtraFieldSegment(Byte[] extra, int offx, ushort targetHeaderId);
    internal int ProcessExtraField(Stream s, short extraFieldLength);
    private int ProcessExtraFieldPkwareStrongEncryption(Byte[] Buffer, int j);
    private int ProcessExtraFieldZip64(Byte[] buffer, int j, short dataSize, long posn);
    private int ProcessExtraFieldInfoZipTimes(Byte[] buffer, int j, short dataSize, long posn);
    private int ProcessExtraFieldUnixTimes(Byte[] buffer, int j, short dataSize, long posn);
    private int ProcessExtraFieldWindowsTimes(Byte[] buffer, int j, short dataSize, long posn);
    internal void WriteCentralDirectoryEntry(Stream s);
    private Byte[] ConstructExtraField(bool forCentralDirectory);
    private string NormalizeFileName();
    private Byte[] GetEncodedFileNameBytes();
    private bool WantReadAgain();
    private void MaybeUnsetCompressionMethodForWriting(int cycle);
    internal void WriteHeader(Stream s, int cycle);
    private int FigureCrc32();
    private void PrepSourceStream();
    internal void CopyMetaData(ZipEntry source);
    private void OnWriteBlock(long bytesXferred, long totalBytesToXfer);
    private void _WriteEntryData(Stream s);
    private long SetInputAndFigureFileLength(Stream& input);
    internal void FinishOutputStream(Stream s, CountingStream entryCounter, Stream encryptor, Stream compressor, CrcCalculatorStream output);
    internal void PostProcessOutput(Stream s);
    private void SetZip64Flags();
    internal void PrepOutputStream(Stream s, long streamLength, CountingStream& outputCounter, Stream& encryptor, Stream& compressor, CrcCalculatorStream& output);
    private Stream MaybeApplyCompression(Stream s, long streamLength);
    private Stream MaybeApplyEncryption(Stream s);
    private void OnZipErrorWhileSaving(Exception e);
    internal void Write(Stream s);
    internal void StoreRelativeOffset();
    internal void NotifySaveComplete();
    internal void WriteSecurityMetadata(Stream outstream);
    private void CopyThroughOneEntry(Stream outStream);
    private void CopyThroughWithRecompute(Stream outstream);
    private void CopyThroughWithNoChange(Stream outstream);
    [ConditionalAttribute("Trace")]
private void TraceWriteLine(string format, Object[] varParams);
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource : Enum {
    public int value__;
    public static ZipEntrySource None;
    public static ZipEntrySource FileSystem;
    public static ZipEntrySource Stream;
    public static ZipEntrySource ZipFile;
    public static ZipEntrySource WriteDelegate;
    public static ZipEntrySource JitStream;
    public static ZipEntrySource ZipOutputStream;
}
[FlagsAttribute]
internal enum OfficeOpenXml.Packaging.Ionic.Zip.ZipEntryTimestamp : Enum {
    public int value__;
    public static ZipEntryTimestamp None;
    public static ZipEntryTimestamp DOS;
    public static ZipEntryTimestamp Windows;
    public static ZipEntryTimestamp Unix;
    public static ZipEntryTimestamp InfoZip1;
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorAction : Enum {
    public int value__;
    public static ZipErrorAction Throw;
    public static ZipErrorAction Skip;
    public static ZipErrorAction Retry;
    public static ZipErrorAction InvokeErrorEvent;
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorEventArgs : ZipProgressEventArgs {
    private Exception _exc;
    public Exception Exception { get; }
    public string FileName { get; }
    internal static ZipErrorEventArgs Saving(string archiveName, ZipEntry entry, Exception exception);
    public Exception get_Exception();
    public string get_FileName();
}
public class OfficeOpenXml.Packaging.Ionic.Zip.ZipException : Exception {
    public ZipException(string message);
    public ZipException(string message, Exception innerException);
}
[DefaultMemberAttribute("Item")]
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipFile : object {
    [CompilerGeneratedAttribute]
private bool <FullScan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SortEntriesBeforeSaving>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddDirectoryWillTraverseReparsePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodecBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlattenFoldersOnExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionLevel <CompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtractExistingFileAction <ExtractExistingFile>k__BackingField;
    [CompilerGeneratedAttribute]
private SetCompressionCallback <SetCompression>k__BackingField;
    private TextWriter _StatusMessageTextWriter;
    private bool _CaseSensitiveRetrieval;
    private Stream _readstream;
    private Stream _writestream;
    private ushort _versionMadeBy;
    private ushort _versionNeededToExtract;
    private UInt32 _diskNumberWithCd;
    private int _maxOutputSegmentSize;
    private UInt32 _numberOfSegmentsForMostRecentSave;
    private ZipErrorAction _zipErrorAction;
    private bool _disposed;
    private Dictionary`2<string, ZipEntry> _entries;
    private List`1<ZipEntry> _zipEntriesAsList;
    private string _name;
    private string _readName;
    private string _Comment;
    internal string _Password;
    private bool _emitNtfsTimes;
    private bool _emitUnixTimes;
    private CompressionStrategy _Strategy;
    private CompressionMethod _compressionMethod;
    private bool _fileAlreadyExists;
    private string _temporaryFileName;
    private bool _contentsChanged;
    private bool _hasBeenSaved;
    private string _TempFileFolder;
    private bool _ReadStreamIsOurs;
    private object LOCK;
    private bool _saveOperationCanceled;
    private bool _extractOperationCanceled;
    private bool _addOperationCanceled;
    private EncryptionAlgorithm _Encryption;
    private bool _JustSaved;
    private long _locEndOfCDS;
    private UInt32 _OffsetOfCentralDirectory;
    private long _OffsetOfCentralDirectory64;
    private Nullable`1<bool> _OutputUsesZip64;
    internal bool _inExtractAll;
    private Encoding _alternateEncoding;
    private ZipOption _alternateEncodingUsage;
    private static Encoding _defaultEncoding;
    private int _BufferSize;
    internal ParallelDeflateOutputStream ParallelDeflater;
    private long _ParallelDeflateThreshold;
    private int _maxBufferPairs;
    internal Zip64Option _zip64;
    private bool _SavingSfx;
    public static int BufferSizeDefault;
    [CompilerGeneratedAttribute]
private EventHandler`1<SaveProgressEventArgs> SaveProgress;
    [CompilerGeneratedAttribute]
private EventHandler`1<ReadProgressEventArgs> ReadProgress;
    private long _lengthOfReadStream;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExtractProgressEventArgs> ExtractProgress;
    [CompilerGeneratedAttribute]
private EventHandler`1<AddProgressEventArgs> AddProgress;
    [CompilerGeneratedAttribute]
private EventHandler`1<ZipErrorEventArgs> ZipError;
    public string Info { get; }
    public bool FullScan { get; public set; }
    public bool SortEntriesBeforeSaving { get; public set; }
    public bool AddDirectoryWillTraverseReparsePoints { get; public set; }
    public int BufferSize { get; public set; }
    public int CodecBufferSize { get; public set; }
    public bool FlattenFoldersOnExtract { get; public set; }
    public CompressionStrategy Strategy { get; public set; }
    public string Name { get; public set; }
    public CompressionLevel CompressionLevel { get; public set; }
    internal CompressionMethod CompressionMethod { get; internal set; }
    public string Comment { get; public set; }
    public bool EmitTimesInWindowsFormatWhenSaving { get; public set; }
    public bool EmitTimesInUnixFormatWhenSaving { get; public set; }
    internal bool Verbose { get; }
    public bool CaseSensitiveRetrieval { get; public set; }
    [ObsoleteAttribute("Beginning with v1.9.1.6 of DotNetZip, this property is obsolete.  It will be removed in a future version of the library. Your applications should  use AlternateEncoding and AlternateEncodingUsage instead.")]
public bool UseUnicodeAsNecessary { get; public set; }
    internal Zip64Option UseZip64WhenSaving { get; internal set; }
    public Nullable`1<bool> RequiresZip64 { get; }
    public Nullable`1<bool> OutputUsedZip64 { get; }
    public Nullable`1<bool> InputUsesZip64 { get; }
    [ObsoleteAttribute("use AlternateEncoding instead.")]
public Encoding ProvisionalAlternateEncoding { get; public set; }
    public Encoding AlternateEncoding { get; public set; }
    internal ZipOption AlternateEncodingUsage { get; internal set; }
    public static Encoding DefaultEncoding { get; }
    public TextWriter StatusMessageTextWriter { get; public set; }
    public string TempFileFolder { get; public set; }
    private string Password { get; public set; }
    internal ExtractExistingFileAction ExtractExistingFile { get; internal set; }
    internal ZipErrorAction ZipErrorAction { get; internal set; }
    internal EncryptionAlgorithm Encryption { get; internal set; }
    public SetCompressionCallback SetCompression { get; public set; }
    public int MaxOutputSegmentSize { get; public set; }
    public int NumberOfSegmentsForMostRecentSave { get; }
    public long ParallelDeflateThreshold { get; public set; }
    public int ParallelDeflateMaxBufferPairs { get; public set; }
    public static Version LibraryVersion { get; }
    private List`1<ZipEntry> ZipEntriesAsList { get; }
    public ZipEntry Item { get; }
    public ZipEntry Item { get; }
    public ICollection`1<string> EntryFileNames { get; }
    public ICollection`1<ZipEntry> Entries { get; }
    public ICollection`1<ZipEntry> EntriesSorted { get; }
    public int Count { get; }
    internal Stream ReadStream { get; }
    private Stream WriteStream { get; private set; }
    private string ArchiveNameForEvent { get; }
    private long LengthOfReadStream { get; }
    public ZipFile(string fileName);
    public ZipFile(string fileName, Encoding encoding);
    public ZipFile(Encoding encoding);
    public ZipFile(string fileName, TextWriter statusMessageWriter);
    public ZipFile(string fileName, TextWriter statusMessageWriter, Encoding encoding);
    private static ZipFile();
    public ZipEntry AddItem(string fileOrDirectoryName);
    public ZipEntry AddItem(string fileOrDirectoryName, string directoryPathInArchive);
    public ZipEntry AddFile(string fileName);
    public ZipEntry AddFile(string fileName, string directoryPathInArchive);
    public void RemoveEntries(ICollection`1<ZipEntry> entriesToRemove);
    public void RemoveEntries(ICollection`1<string> entriesToRemove);
    public void AddFiles(IEnumerable`1<string> fileNames);
    public void UpdateFiles(IEnumerable`1<string> fileNames);
    public void AddFiles(IEnumerable`1<string> fileNames, string directoryPathInArchive);
    public void AddFiles(IEnumerable`1<string> fileNames, bool preserveDirHierarchy, string directoryPathInArchive);
    public void UpdateFiles(IEnumerable`1<string> fileNames, string directoryPathInArchive);
    public ZipEntry UpdateFile(string fileName);
    public ZipEntry UpdateFile(string fileName, string directoryPathInArchive);
    public ZipEntry UpdateDirectory(string directoryName);
    public ZipEntry UpdateDirectory(string directoryName, string directoryPathInArchive);
    public void UpdateItem(string itemName);
    public void UpdateItem(string itemName, string directoryPathInArchive);
    public ZipEntry AddEntry(string entryName, string content);
    public ZipEntry AddEntry(string entryName, string content, Encoding encoding);
    public ZipEntry AddEntry(string entryName, Stream stream);
    public ZipEntry AddEntry(string entryName, WriteDelegate writer);
    public ZipEntry AddEntry(string entryName, OpenDelegate opener, CloseDelegate closer);
    private ZipEntry _InternalAddEntry(ZipEntry ze);
    public ZipEntry UpdateEntry(string entryName, string content);
    public ZipEntry UpdateEntry(string entryName, string content, Encoding encoding);
    public ZipEntry UpdateEntry(string entryName, WriteDelegate writer);
    public ZipEntry UpdateEntry(string entryName, OpenDelegate opener, CloseDelegate closer);
    public ZipEntry UpdateEntry(string entryName, Stream stream);
    private void RemoveEntryForUpdate(string entryName);
    public ZipEntry AddEntry(string entryName, Byte[] byteContent);
    public ZipEntry UpdateEntry(string entryName, Byte[] byteContent);
    public ZipEntry AddDirectory(string directoryName);
    public ZipEntry AddDirectory(string directoryName, string directoryPathInArchive);
    public ZipEntry AddDirectoryByName(string directoryNameInArchive);
    private ZipEntry AddOrUpdateDirectoryImpl(string directoryName, string rootDirectoryPathInArchive, AddOrUpdateAction action);
    internal void InternalAddEntry(string name, ZipEntry entry);
    private ZipEntry AddOrUpdateDirectoryImpl(string directoryName, string rootDirectoryPathInArchive, AddOrUpdateAction action, bool recurse, int level);
    public static bool CheckZip(string zipFileName);
    public static bool CheckZip(string zipFileName, bool fixIfNecessary, TextWriter writer);
    public static void FixZipDirectory(string zipFileName);
    public static bool CheckZipPassword(string zipFileName, string password);
    public string get_Info();
    [CompilerGeneratedAttribute]
public bool get_FullScan();
    [CompilerGeneratedAttribute]
public void set_FullScan(bool value);
    [CompilerGeneratedAttribute]
public bool get_SortEntriesBeforeSaving();
    [CompilerGeneratedAttribute]
public void set_SortEntriesBeforeSaving(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddDirectoryWillTraverseReparsePoints();
    [CompilerGeneratedAttribute]
public void set_AddDirectoryWillTraverseReparsePoints(bool value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public int get_CodecBufferSize();
    [CompilerGeneratedAttribute]
public void set_CodecBufferSize(int value);
    [CompilerGeneratedAttribute]
public bool get_FlattenFoldersOnExtract();
    [CompilerGeneratedAttribute]
public void set_FlattenFoldersOnExtract(bool value);
    public CompressionStrategy get_Strategy();
    public void set_Strategy(CompressionStrategy value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public CompressionLevel get_CompressionLevel();
    [CompilerGeneratedAttribute]
public void set_CompressionLevel(CompressionLevel value);
    internal CompressionMethod get_CompressionMethod();
    internal void set_CompressionMethod(CompressionMethod value);
    public string get_Comment();
    public void set_Comment(string value);
    public bool get_EmitTimesInWindowsFormatWhenSaving();
    public void set_EmitTimesInWindowsFormatWhenSaving(bool value);
    public bool get_EmitTimesInUnixFormatWhenSaving();
    public void set_EmitTimesInUnixFormatWhenSaving(bool value);
    internal bool get_Verbose();
    public bool ContainsEntry(string name);
    public bool get_CaseSensitiveRetrieval();
    public void set_CaseSensitiveRetrieval(bool value);
    public bool get_UseUnicodeAsNecessary();
    public void set_UseUnicodeAsNecessary(bool value);
    internal Zip64Option get_UseZip64WhenSaving();
    internal void set_UseZip64WhenSaving(Zip64Option value);
    public Nullable`1<bool> get_RequiresZip64();
    public Nullable`1<bool> get_OutputUsedZip64();
    public Nullable`1<bool> get_InputUsesZip64();
    public Encoding get_ProvisionalAlternateEncoding();
    public void set_ProvisionalAlternateEncoding(Encoding value);
    public Encoding get_AlternateEncoding();
    public void set_AlternateEncoding(Encoding value);
    internal ZipOption get_AlternateEncodingUsage();
    internal void set_AlternateEncodingUsage(ZipOption value);
    public static Encoding get_DefaultEncoding();
    public TextWriter get_StatusMessageTextWriter();
    public void set_StatusMessageTextWriter(TextWriter value);
    public string get_TempFileFolder();
    public void set_TempFileFolder(string value);
    public void set_Password(string value);
    private string get_Password();
    [CompilerGeneratedAttribute]
internal ExtractExistingFileAction get_ExtractExistingFile();
    [CompilerGeneratedAttribute]
internal void set_ExtractExistingFile(ExtractExistingFileAction value);
    internal ZipErrorAction get_ZipErrorAction();
    internal void set_ZipErrorAction(ZipErrorAction value);
    internal EncryptionAlgorithm get_Encryption();
    internal void set_Encryption(EncryptionAlgorithm value);
    [CompilerGeneratedAttribute]
public SetCompressionCallback get_SetCompression();
    [CompilerGeneratedAttribute]
public void set_SetCompression(SetCompressionCallback value);
    public int get_MaxOutputSegmentSize();
    public void set_MaxOutputSegmentSize(int value);
    public int get_NumberOfSegmentsForMostRecentSave();
    public void set_ParallelDeflateThreshold(long value);
    public long get_ParallelDeflateThreshold();
    public int get_ParallelDeflateMaxBufferPairs();
    public void set_ParallelDeflateMaxBufferPairs(int value);
    public virtual string ToString();
    public static Version get_LibraryVersion();
    internal void NotifyEntryChanged();
    internal Stream StreamForDiskNumber(UInt32 diskNumber);
    internal void Reset(bool whileSaving);
    public void Initialize(string fileName);
    private void _initEntriesDictionary();
    private void _InitInstance(string zipFileName, TextWriter statusMessageWriter);
    private List`1<ZipEntry> get_ZipEntriesAsList();
    public ZipEntry get_Item(int ix);
    public ZipEntry get_Item(string fileName);
    public ICollection`1<string> get_EntryFileNames();
    public ICollection`1<ZipEntry> get_Entries();
    public ICollection`1<ZipEntry> get_EntriesSorted();
    public int get_Count();
    public void RemoveEntry(ZipEntry entry);
    public void RemoveEntry(string fileName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposeManagedResources);
    internal Stream get_ReadStream();
    private Stream get_WriteStream();
    private void set_WriteStream(Stream value);
    private string get_ArchiveNameForEvent();
    [CompilerGeneratedAttribute]
internal void add_SaveProgress(EventHandler`1<SaveProgressEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_SaveProgress(EventHandler`1<SaveProgressEventArgs> value);
    internal bool OnSaveBlock(ZipEntry entry, long bytesXferred, long totalBytesToXfer);
    private void OnSaveEntry(int current, ZipEntry entry, bool before);
    private void OnSaveEvent(ZipProgressEventType eventFlavor);
    private void OnSaveStarted();
    private void OnSaveCompleted();
    [CompilerGeneratedAttribute]
internal void add_ReadProgress(EventHandler`1<ReadProgressEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ReadProgress(EventHandler`1<ReadProgressEventArgs> value);
    private void OnReadStarted();
    private void OnReadCompleted();
    internal void OnReadBytes(ZipEntry entry);
    internal void OnReadEntry(bool before, ZipEntry entry);
    private long get_LengthOfReadStream();
    [CompilerGeneratedAttribute]
internal void add_ExtractProgress(EventHandler`1<ExtractProgressEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ExtractProgress(EventHandler`1<ExtractProgressEventArgs> value);
    private void OnExtractEntry(int current, bool before, ZipEntry currentEntry, string path);
    internal bool OnExtractBlock(ZipEntry entry, long bytesWritten, long totalBytesToWrite);
    internal bool OnSingleEntryExtract(ZipEntry entry, string path, bool before);
    internal bool OnExtractExisting(ZipEntry entry, string path);
    private void OnExtractAllCompleted(string path);
    private void OnExtractAllStarted(string path);
    [CompilerGeneratedAttribute]
internal void add_AddProgress(EventHandler`1<AddProgressEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_AddProgress(EventHandler`1<AddProgressEventArgs> value);
    private void OnAddStarted();
    private void OnAddCompleted();
    internal void AfterAddEntry(ZipEntry entry);
    [CompilerGeneratedAttribute]
internal void add_ZipError(EventHandler`1<ZipErrorEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ZipError(EventHandler`1<ZipErrorEventArgs> value);
    internal bool OnZipErrorSaving(ZipEntry entry, Exception exc);
    public void ExtractAll(string path);
    internal void ExtractAll(string path, ExtractExistingFileAction extractExistingFile);
    private void _InternalExtractAll(string path, bool overrideExtractExistingProperty);
    public static ZipFile Read(string fileName);
    internal static ZipFile Read(string fileName, ReadOptions options);
    private static ZipFile Read(string fileName, TextWriter statusMessageWriter, Encoding encoding, EventHandler`1<ReadProgressEventArgs> readProgress);
    public static ZipFile Read(Stream zipStream);
    internal static ZipFile Read(Stream zipStream, ReadOptions options);
    private static ZipFile Read(Stream zipStream, TextWriter statusMessageWriter, Encoding encoding, EventHandler`1<ReadProgressEventArgs> readProgress);
    private static void ReadIntoInstance(ZipFile zf);
    private static void Zip64SeekToCentralDirectory(ZipFile zf);
    private static UInt32 ReadFirstFourBytes(Stream s);
    private static void ReadCentralDirectory(ZipFile zf);
    private static void ReadIntoInstance_Orig(ZipFile zf);
    private static void ReadCentralDirectoryFooter(ZipFile zf);
    private static void ReadZipFileComment(ZipFile zf);
    public static bool IsZipFile(string fileName);
    public static bool IsZipFile(string fileName, bool testExtract);
    public static bool IsZipFile(Stream stream, bool testExtract);
    private void DeleteFileWithRetry(string filename);
    public void Save();
    private static void NotifyEntriesSaveComplete(ICollection`1<ZipEntry> c);
    private void RemoveTempFile();
    private void CleanupAfterSaveOperation();
    public void Save(string fileName);
    public void Save(Stream outputStream);
    public void AddSelectedFiles(string selectionCriteria);
    public void AddSelectedFiles(string selectionCriteria, bool recurseDirectories);
    public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk);
    public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, bool recurseDirectories);
    public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive);
    public void AddSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories);
    public void UpdateSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories);
    private string EnsureendInSlash(string s);
    private void _AddOrUpdateSelectedFiles(string selectionCriteria, string directoryOnDisk, string directoryPathInArchive, bool recurseDirectories, bool wantUpdate);
    private static string ReplaceLeadingDirectory(string original, string pattern, string replacement);
    public ICollection`1<ZipEntry> SelectEntries(string selectionCriteria);
    public ICollection`1<ZipEntry> SelectEntries(string selectionCriteria, string directoryPathInArchive);
    public int RemoveSelectedEntries(string selectionCriteria);
    public int RemoveSelectedEntries(string selectionCriteria, string directoryPathInArchive);
    public void ExtractSelectedEntries(string selectionCriteria);
    internal void ExtractSelectedEntries(string selectionCriteria, ExtractExistingFileAction extractExistingFile);
    public void ExtractSelectedEntries(string selectionCriteria, string directoryPathInArchive);
    public void ExtractSelectedEntries(string selectionCriteria, string directoryInArchive, string extractDirectory);
    internal void ExtractSelectedEntries(string selectionCriteria, string directoryPathInArchive, string extractDirectory, ExtractExistingFileAction extractExistingFile);
    [IteratorStateMachineAttribute("OfficeOpenXml.Packaging.Ionic.Zip.ZipFile/<GetEnumerator>d__321")]
public sealed virtual IEnumerator`1<ZipEntry> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [DispIdAttribute("-4")]
public IEnumerator GetNewEnum();
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream : Stream {
    [CompilerGeneratedAttribute]
private int <CodecBufferSize>k__BackingField;
    private Stream _inputStream;
    private ZipEntry _currentEntry;
    private bool _firstEntry;
    private bool _needSetup;
    private ZipContainer _container;
    private CrcCalculatorStream _crcStream;
    private long _LeftToRead;
    internal string _Password;
    private long _endOfEntry;
    private string _name;
    private bool _leaveUnderlyingStreamOpen;
    private bool _closed;
    private bool _findRequired;
    private bool _exceptionPending;
    public int CodecBufferSize { get; public set; }
    unknown string Password {public set; }
    internal Stream ReadStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZipInputStream(Stream stream);
    public ZipInputStream(string fileName);
    public ZipInputStream(Stream stream, bool leaveOpen);
    private void _Init(Stream stream, bool leaveOpen, string name);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public int get_CodecBufferSize();
    [CompilerGeneratedAttribute]
public void set_CodecBufferSize(int value);
    public void set_Password(string value);
    private void SetupStream();
    internal Stream get_ReadStream();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public ZipEntry GetNextEntry();
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.ZipOption : Enum {
    public int value__;
    public static ZipOption Default;
    public static ZipOption Never;
    public static ZipOption AsNecessary;
    public static ZipOption Always;
}
internal static class OfficeOpenXml.Packaging.Ionic.Zip.ZipOutput : object {
    public static bool WriteCentralDirectoryStructure(Stream s, ICollection`1<ZipEntry> entries, UInt32 numSegments, Zip64Option zip64, string comment, ZipContainer container);
    private static Encoding GetEncoding(ZipContainer container, string t);
    private static Byte[] GenCentralDirectoryFooter(long StartOfCentralDirectory, long EndOfCentralDirectory, Zip64Option zip64, int entryCount, string comment, ZipContainer container);
    private static Byte[] GenZip64EndOfCentralDirectory(long StartOfCentralDirectory, long EndOfCentralDirectory, int entryCount, UInt32 numSegments);
    private static int CountEntries(ICollection`1<ZipEntry> _entries);
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream : Stream {
    [CompilerGeneratedAttribute]
private int <CodecBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionStrategy <Strategy>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionLevel <CompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionMethod <CompressionMethod>k__BackingField;
    private EncryptionAlgorithm _encryption;
    private ZipEntryTimestamp _timestamp;
    internal string _password;
    private string _comment;
    private Stream _outputStream;
    private ZipEntry _currentEntry;
    internal Zip64Option _zip64;
    private Dictionary`2<string, ZipEntry> _entriesWritten;
    private int _entryCount;
    private ZipOption _alternateEncodingUsage;
    private Encoding _alternateEncoding;
    private bool _leaveUnderlyingStreamOpen;
    private bool _disposed;
    private bool _exceptionPending;
    private bool _anyEntriesUsedZip64;
    private bool _directoryNeededZip64;
    private CountingStream _outputCounter;
    private Stream _encryptor;
    private Stream _deflater;
    private CrcCalculatorStream _entryOutputStream;
    private bool _needToWriteEntryHeader;
    private string _name;
    private bool _DontIgnoreCase;
    internal ParallelDeflateOutputStream ParallelDeflater;
    private long _ParallelDeflateThreshold;
    private int _maxBufferPairs;
    unknown string Password {public set; }
    public EncryptionAlgorithm Encryption { get; public set; }
    public int CodecBufferSize { get; public set; }
    public CompressionStrategy Strategy { get; public set; }
    public ZipEntryTimestamp Timestamp { get; public set; }
    public CompressionLevel CompressionLevel { get; public set; }
    public CompressionMethod CompressionMethod { get; public set; }
    public string Comment { get; public set; }
    public Zip64Option EnableZip64 { get; public set; }
    public bool OutputUsedZip64 { get; }
    public bool IgnoreCase { get; public set; }
    [ObsoleteAttribute("Beginning with v1.9.1.6 of DotNetZip, this property is obsolete. It will be removed in a future version of the library. Use AlternateEncoding and AlternateEncodingUsage instead.")]
public bool UseUnicodeAsNecessary { get; public set; }
    [ObsoleteAttribute("use AlternateEncoding and AlternateEncodingUsage instead.")]
public Encoding ProvisionalAlternateEncoding { get; public set; }
    public Encoding AlternateEncoding { get; public set; }
    public ZipOption AlternateEncodingUsage { get; public set; }
    public static Encoding DefaultEncoding { get; }
    public long ParallelDeflateThreshold { get; public set; }
    public int ParallelDeflateMaxBufferPairs { get; public set; }
    internal Stream OutputStream { get; }
    internal string Name { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZipOutputStream(Stream stream);
    public ZipOutputStream(string fileName);
    public ZipOutputStream(Stream stream, bool leaveOpen);
    private void _Init(Stream stream, bool leaveOpen, string name);
    public virtual string ToString();
    public void set_Password(string value);
    public EncryptionAlgorithm get_Encryption();
    public void set_Encryption(EncryptionAlgorithm value);
    [CompilerGeneratedAttribute]
public int get_CodecBufferSize();
    [CompilerGeneratedAttribute]
public void set_CodecBufferSize(int value);
    [CompilerGeneratedAttribute]
public CompressionStrategy get_Strategy();
    [CompilerGeneratedAttribute]
public void set_Strategy(CompressionStrategy value);
    public ZipEntryTimestamp get_Timestamp();
    public void set_Timestamp(ZipEntryTimestamp value);
    [CompilerGeneratedAttribute]
public CompressionLevel get_CompressionLevel();
    [CompilerGeneratedAttribute]
public void set_CompressionLevel(CompressionLevel value);
    [CompilerGeneratedAttribute]
public CompressionMethod get_CompressionMethod();
    [CompilerGeneratedAttribute]
public void set_CompressionMethod(CompressionMethod value);
    public string get_Comment();
    public void set_Comment(string value);
    public Zip64Option get_EnableZip64();
    public void set_EnableZip64(Zip64Option value);
    public bool get_OutputUsedZip64();
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_UseUnicodeAsNecessary();
    public void set_UseUnicodeAsNecessary(bool value);
    public Encoding get_ProvisionalAlternateEncoding();
    public void set_ProvisionalAlternateEncoding(Encoding value);
    public Encoding get_AlternateEncoding();
    public void set_AlternateEncoding(Encoding value);
    public ZipOption get_AlternateEncodingUsage();
    public void set_AlternateEncodingUsage(ZipOption value);
    public static Encoding get_DefaultEncoding();
    public void set_ParallelDeflateThreshold(long value);
    public long get_ParallelDeflateThreshold();
    public int get_ParallelDeflateMaxBufferPairs();
    public void set_ParallelDeflateMaxBufferPairs(int value);
    private void InsureUniqueEntry(ZipEntry ze1);
    internal Stream get_OutputStream();
    internal string get_Name();
    public bool ContainsEntry(string name);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public ZipEntry PutNextEntry(string entryName);
    private void _InitiateCurrentEntry(bool finishing);
    private void _FinishCurrentEntry();
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs : EventArgs {
    private int _entriesTotal;
    private bool _cancel;
    private ZipEntry _latestEntry;
    private ZipProgressEventType _flavor;
    private string _archiveName;
    private long _bytesTransferred;
    private long _totalBytesToTransfer;
    public int EntriesTotal { get; public set; }
    public ZipEntry CurrentEntry { get; public set; }
    public bool Cancel { get; public set; }
    public ZipProgressEventType EventType { get; public set; }
    public string ArchiveName { get; public set; }
    public long BytesTransferred { get; public set; }
    public long TotalBytesToTransfer { get; public set; }
    internal ZipProgressEventArgs(string archiveName, ZipProgressEventType flavor);
    public int get_EntriesTotal();
    public void set_EntriesTotal(int value);
    public ZipEntry get_CurrentEntry();
    public void set_CurrentEntry(ZipEntry value);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public ZipProgressEventType get_EventType();
    public void set_EventType(ZipProgressEventType value);
    public string get_ArchiveName();
    public void set_ArchiveName(string value);
    public long get_BytesTransferred();
    public void set_BytesTransferred(long value);
    public long get_TotalBytesToTransfer();
    public void set_TotalBytesToTransfer(long value);
}
internal enum OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType : Enum {
    public int value__;
    public static ZipProgressEventType Adding_Started;
    public static ZipProgressEventType Adding_AfterAddEntry;
    public static ZipProgressEventType Adding_Completed;
    public static ZipProgressEventType Reading_Started;
    public static ZipProgressEventType Reading_BeforeReadEntry;
    public static ZipProgressEventType Reading_AfterReadEntry;
    public static ZipProgressEventType Reading_Completed;
    public static ZipProgressEventType Reading_ArchiveBytesRead;
    public static ZipProgressEventType Saving_Started;
    public static ZipProgressEventType Saving_BeforeWriteEntry;
    public static ZipProgressEventType Saving_AfterWriteEntry;
    public static ZipProgressEventType Saving_Completed;
    public static ZipProgressEventType Saving_AfterSaveTempArchive;
    public static ZipProgressEventType Saving_BeforeRenameTempArchive;
    public static ZipProgressEventType Saving_AfterRenameTempArchive;
    public static ZipProgressEventType Saving_AfterCompileSelfExtractor;
    public static ZipProgressEventType Saving_EntryBytesRead;
    public static ZipProgressEventType Extracting_BeforeExtractEntry;
    public static ZipProgressEventType Extracting_AfterExtractEntry;
    public static ZipProgressEventType Extracting_ExtractEntryWouldOverwrite;
    public static ZipProgressEventType Extracting_EntryBytesWritten;
    public static ZipProgressEventType Extracting_BeforeExtractAll;
    public static ZipProgressEventType Extracting_AfterExtractAll;
    public static ZipProgressEventType Error_Saving;
}
internal class OfficeOpenXml.Packaging.Ionic.Zip.ZipSegmentedStream : Stream {
    private RwMode rwMode;
    private bool _exceptionPending;
    private string _baseName;
    private string _baseDir;
    private string _currentName;
    private string _currentTempName;
    private UInt32 _currentDiskNumber;
    private UInt32 _maxDiskNumber;
    private int _maxSegmentSize;
    private Stream _innerStream;
    [CompilerGeneratedAttribute]
private bool <ContiguousWrite>k__BackingField;
    public bool ContiguousWrite { get; public set; }
    public UInt32 CurrentSegment { get; private set; }
    public string CurrentName { get; }
    public string CurrentTempName { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public static ZipSegmentedStream ForReading(string name, UInt32 initialDiskNumber, UInt32 maxDiskNumber);
    public static ZipSegmentedStream ForWriting(string name, int maxSegmentSize);
    public static Stream ForUpdate(string name, UInt32 diskNumber);
    [CompilerGeneratedAttribute]
public bool get_ContiguousWrite();
    [CompilerGeneratedAttribute]
public void set_ContiguousWrite(bool value);
    public UInt32 get_CurrentSegment();
    private void set_CurrentSegment(UInt32 value);
    public string get_CurrentName();
    public string get_CurrentTempName();
    private string _NameForSegment(UInt32 diskNumber);
    public UInt32 ComputeSegment(int length);
    public virtual string ToString();
    private void _SetReadStream();
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void _SetWriteStream(UInt32 increment);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public long TruncateBackward(UInt32 diskNumber, long offset);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
}
public class OfficeOpenXml.Packaging.Ionic.Zlib.Adler : object {
    private static UInt32 BASE;
    private static int NMAX;
    private static Adler();
    public static UInt32 Adler32(UInt32 adler, Byte[] buf, int index, int len);
}
internal enum OfficeOpenXml.Packaging.Ionic.Zlib.BlockState : Enum {
    public int value__;
    public static BlockState NeedMore;
    public static BlockState BlockDone;
    public static BlockState FinishStarted;
    public static BlockState FinishDone;
}
public enum OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel : Enum {
    public int value__;
    public static CompressionLevel None;
    public static CompressionLevel Level0;
    public static CompressionLevel BestSpeed;
    public static CompressionLevel Level1;
    public static CompressionLevel Level2;
    public static CompressionLevel Level3;
    public static CompressionLevel Level4;
    public static CompressionLevel Level5;
    public static CompressionLevel Default;
    public static CompressionLevel Level6;
    public static CompressionLevel Level7;
    public static CompressionLevel Level8;
    public static CompressionLevel BestCompression;
    public static CompressionLevel Level9;
}
public enum OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode : Enum {
    public int value__;
    public static CompressionMode Compress;
    public static CompressionMode Decompress;
}
public enum OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy : Enum {
    public int value__;
    public static CompressionStrategy Default;
    public static CompressionStrategy Filtered;
    public static CompressionStrategy HuffmanOnly;
}
internal enum OfficeOpenXml.Packaging.Ionic.Zlib.DeflateFlavor : Enum {
    public int value__;
    public static DeflateFlavor Store;
    public static DeflateFlavor Fast;
    public static DeflateFlavor Slow;
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.DeflateManager : object {
    private static int MEM_LEVEL_MAX;
    private static int MEM_LEVEL_DEFAULT;
    private CompressFunc DeflateFunction;
    private static String[] _ErrorMessage;
    private static int PRESET_DICT;
    private static int INIT_STATE;
    private static int BUSY_STATE;
    private static int FINISH_STATE;
    private static int Z_DEFLATED;
    private static int STORED_BLOCK;
    private static int STATIC_TREES;
    private static int DYN_TREES;
    private static int Z_BINARY;
    private static int Z_ASCII;
    private static int Z_UNKNOWN;
    private static int Buf_size;
    private static int MIN_MATCH;
    private static int MAX_MATCH;
    private static int MIN_LOOKAHEAD;
    private static int HEAP_SIZE;
    private static int END_BLOCK;
    internal ZlibCodec _codec;
    internal int status;
    internal Byte[] pending;
    internal int nextPending;
    internal int pendingCount;
    internal sbyte data_type;
    internal int last_flush;
    internal int w_size;
    internal int w_bits;
    internal int w_mask;
    internal Byte[] window;
    internal int window_size;
    internal Int16[] prev;
    internal Int16[] head;
    internal int ins_h;
    internal int hash_size;
    internal int hash_bits;
    internal int hash_mask;
    internal int hash_shift;
    internal int block_start;
    private Config config;
    internal int match_length;
    internal int prev_match;
    internal int match_available;
    internal int strstart;
    internal int match_start;
    internal int lookahead;
    internal int prev_length;
    internal CompressionLevel compressionLevel;
    internal CompressionStrategy compressionStrategy;
    internal Int16[] dyn_ltree;
    internal Int16[] dyn_dtree;
    internal Int16[] bl_tree;
    internal Tree treeLiterals;
    internal Tree treeDistances;
    internal Tree treeBitLengths;
    internal Int16[] bl_count;
    internal Int32[] heap;
    internal int heap_len;
    internal int heap_max;
    internal SByte[] depth;
    internal int _lengthOffset;
    internal int lit_bufsize;
    internal int last_lit;
    internal int _distanceOffset;
    internal int opt_len;
    internal int static_len;
    internal int matches;
    internal int last_eob_len;
    internal short bi_buf;
    internal int bi_valid;
    private bool Rfc1950BytesEmitted;
    private bool _WantRfc1950HeaderBytes;
    internal bool WantRfc1950HeaderBytes { get; internal set; }
    private static DeflateManager();
    private void _InitializeLazyMatch();
    private void _InitializeTreeData();
    internal void _InitializeBlocks();
    internal void pqdownheap(Int16[] tree, int k);
    internal static bool _IsSmaller(Int16[] tree, int n, int m, SByte[] depth);
    internal void scan_tree(Int16[] tree, int max_code);
    internal int build_bl_tree();
    internal void send_all_trees(int lcodes, int dcodes, int blcodes);
    internal void send_tree(Int16[] tree, int max_code);
    private void put_bytes(Byte[] p, int start, int len);
    internal void send_code(int c, Int16[] tree);
    internal void send_bits(int value, int length);
    internal void _tr_align();
    internal bool _tr_tally(int dist, int lc);
    internal void send_compressed_block(Int16[] ltree, Int16[] dtree);
    internal void set_data_type();
    internal void bi_flush();
    internal void bi_windup();
    internal void copy_block(int buf, int len, bool header);
    internal void flush_block_only(bool eof);
    internal BlockState DeflateNone(FlushType flush);
    internal void _tr_stored_block(int buf, int stored_len, bool eof);
    internal void _tr_flush_block(int buf, int stored_len, bool eof);
    private void _fillWindow();
    internal BlockState DeflateFast(FlushType flush);
    internal BlockState DeflateSlow(FlushType flush);
    internal int longest_match(int cur_match);
    internal bool get_WantRfc1950HeaderBytes();
    internal void set_WantRfc1950HeaderBytes(bool value);
    internal int Initialize(ZlibCodec codec, CompressionLevel level);
    internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits);
    internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits, CompressionStrategy compressionStrategy);
    internal int Initialize(ZlibCodec codec, CompressionLevel level, int windowBits, int memLevel, CompressionStrategy strategy);
    internal void Reset();
    internal int End();
    private void SetDeflater();
    internal int SetParams(CompressionLevel level, CompressionStrategy strategy);
    internal int SetDictionary(Byte[] dictionary);
    internal int Deflate(FlushType flush);
}
public class OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream : Stream {
    internal ZlibBaseStream _baseStream;
    internal Stream _innerStream;
    private bool _disposed;
    public FlushType FlushMode { get; public set; }
    public int BufferSize { get; public set; }
    public CompressionStrategy Strategy { get; public set; }
    public long TotalIn { get; }
    public long TotalOut { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DeflateStream(Stream stream, CompressionMode mode);
    public DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level);
    public DeflateStream(Stream stream, CompressionMode mode, bool leaveOpen);
    public DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen);
    public virtual FlushType get_FlushMode();
    public virtual void set_FlushMode(FlushType value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public CompressionStrategy get_Strategy();
    public void set_Strategy(CompressionStrategy value);
    public virtual long get_TotalIn();
    public virtual long get_TotalOut();
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public static Byte[] CompressString(string s);
    public static Byte[] CompressBuffer(Byte[] b);
    public static string UncompressString(Byte[] compressed);
    public static Byte[] UncompressBuffer(Byte[] compressed);
}
public enum OfficeOpenXml.Packaging.Ionic.Zlib.FlushType : Enum {
    public int value__;
    public static FlushType None;
    public static FlushType Partial;
    public static FlushType Sync;
    public static FlushType Full;
    public static FlushType Finish;
}
public class OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream : Stream {
    public Nullable`1<DateTime> LastModified;
    private int _headerByteCount;
    internal ZlibBaseStream _baseStream;
    private bool _disposed;
    private bool _firstReadDone;
    private string _FileName;
    private string _Comment;
    private int _Crc32;
    internal static DateTime _unixEpoch;
    internal static Encoding iso8859dash1;
    public string Comment { get; public set; }
    public string FileName { get; public set; }
    public int Crc32 { get; }
    public FlushType FlushMode { get; public set; }
    public int BufferSize { get; public set; }
    public long TotalIn { get; }
    public long TotalOut { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public GZipStream(Stream stream, CompressionMode mode);
    public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level);
    public GZipStream(Stream stream, CompressionMode mode, bool leaveOpen);
    public GZipStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen);
    private static GZipStream();
    public string get_Comment();
    public void set_Comment(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public int get_Crc32();
    public virtual FlushType get_FlushMode();
    public virtual void set_FlushMode(FlushType value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public virtual long get_TotalIn();
    public virtual long get_TotalOut();
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private int EmitHeader();
    public static Byte[] CompressString(string s);
    public static Byte[] CompressBuffer(Byte[] b);
    public static string UncompressString(Byte[] compressed);
    public static Byte[] UncompressBuffer(Byte[] compressed);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.InflateBlocks : object {
    private static int MANY;
    internal static Int32[] border;
    private InflateBlockMode mode;
    internal int left;
    internal int table;
    internal int index;
    internal Int32[] blens;
    internal Int32[] bb;
    internal Int32[] tb;
    internal InflateCodes codes;
    internal int last;
    internal ZlibCodec _codec;
    internal int bitk;
    internal int bitb;
    internal Int32[] hufts;
    internal Byte[] window;
    internal int end;
    internal int readAt;
    internal int writeAt;
    internal object checkfn;
    internal UInt32 check;
    internal InfTree inftree;
    internal InflateBlocks(ZlibCodec codec, object checkfn, int w);
    private static InflateBlocks();
    internal UInt32 Reset();
    internal int Process(int r);
    internal void Free();
    internal void SetDictionary(Byte[] d, int start, int n);
    internal int SyncPoint();
    internal int Flush(int r);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.InflateCodes : object {
    private static int START;
    private static int LEN;
    private static int LENEXT;
    private static int DIST;
    private static int DISTEXT;
    private static int COPY;
    private static int LIT;
    private static int WASH;
    private static int END;
    private static int BADCODE;
    internal int mode;
    internal int len;
    internal Int32[] tree;
    internal int tree_index;
    internal int need;
    internal int lit;
    internal int bitsToGet;
    internal int dist;
    internal byte lbits;
    internal byte dbits;
    internal Int32[] ltree;
    internal int ltree_index;
    internal Int32[] dtree;
    internal int dtree_index;
    internal void Init(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index);
    internal int Process(InflateBlocks blocks, int r);
    internal int InflateFast(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index, InflateBlocks s, ZlibCodec z);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.InflateManager : object {
    private static int PRESET_DICT;
    private static int Z_DEFLATED;
    private InflateManagerMode mode;
    internal ZlibCodec _codec;
    internal int method;
    internal UInt32 computedCheck;
    internal UInt32 expectedCheck;
    internal int marker;
    private bool _handleRfc1950HeaderBytes;
    internal int wbits;
    internal InflateBlocks blocks;
    private static Byte[] mark;
    internal bool HandleRfc1950HeaderBytes { get; internal set; }
    public InflateManager(bool expectRfc1950HeaderBytes);
    private static InflateManager();
    internal bool get_HandleRfc1950HeaderBytes();
    internal void set_HandleRfc1950HeaderBytes(bool value);
    internal int Reset();
    internal int End();
    internal int Initialize(ZlibCodec codec, int w);
    internal int Inflate(FlushType flush);
    internal int SetDictionary(Byte[] dictionary);
    internal int Sync();
    internal int SyncPoint(ZlibCodec z);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.InfTree : object {
    private static int MANY;
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    internal static int fixed_bl;
    internal static int fixed_bd;
    internal static Int32[] fixed_tl;
    internal static Int32[] fixed_td;
    internal static Int32[] cplens;
    internal static Int32[] cplext;
    internal static Int32[] cpdist;
    internal static Int32[] cpdext;
    internal static int BMAX;
    internal Int32[] hn;
    internal Int32[] v;
    internal Int32[] c;
    internal Int32[] r;
    internal Int32[] u;
    internal Int32[] x;
    private static InfTree();
    private int huft_build(Int32[] b, int bindex, int n, int s, Int32[] d, Int32[] e, Int32[] t, Int32[] m, Int32[] hp, Int32[] hn, Int32[] v);
    internal int inflate_trees_bits(Int32[] c, Int32[] bb, Int32[] tb, Int32[] hp, ZlibCodec z);
    internal int inflate_trees_dynamic(int nl, int nd, Int32[] c, Int32[] bl, Int32[] bd, Int32[] tl, Int32[] td, Int32[] hp, ZlibCodec z);
    internal static int inflate_trees_fixed(Int32[] bl, Int32[] bd, Int32[][] tl, Int32[][] td, ZlibCodec z);
    private void initWorkArea(int vsize);
}
internal static class OfficeOpenXml.Packaging.Ionic.Zlib.InternalConstants : object {
    internal static int MAX_BITS;
    internal static int BL_CODES;
    internal static int D_CODES;
    internal static int LITERALS;
    internal static int LENGTH_CODES;
    internal static int L_CODES;
    internal static int MAX_BL_BITS;
    internal static int REP_3_6;
    internal static int REPZ_3_10;
    internal static int REPZ_11_138;
    private static InternalConstants();
}
internal static class OfficeOpenXml.Packaging.Ionic.Zlib.InternalInflateConstants : object {
    internal static Int32[] InflateMask;
    private static InternalInflateConstants();
}
public class OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream : Stream {
    private static int IO_BUFFER_SIZE_DEFAULT;
    private static int BufferPairsPerCore;
    private List`1<WorkItem> _pool;
    private bool _leaveOpen;
    private bool emitting;
    private Stream _outStream;
    private int _maxBufferPairs;
    private int _bufferSize;
    private AutoResetEvent _newlyCompressedBlob;
    private object _outputLock;
    private bool _isClosed;
    private bool _firstWriteDone;
    private int _currentlyFilling;
    private int _lastFilled;
    private int _lastWritten;
    private int _latestCompressed;
    private int _Crc32;
    private CRC32 _runningCrc;
    private object _latestLock;
    private Queue`1<int> _toWrite;
    private Queue`1<int> _toFill;
    private long _totalBytesProcessed;
    private CompressionLevel _compressLevel;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _pendingException;
    private bool _handlingException;
    private object _eLock;
    private TraceBits _DesiredTrace;
    [CompilerGeneratedAttribute]
private CompressionStrategy <Strategy>k__BackingField;
    public CompressionStrategy Strategy { get; private set; }
    public int MaxBufferPairs { get; public set; }
    public int BufferSize { get; public set; }
    public int Crc32 { get; }
    public long BytesProcessed { get; }
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ParallelDeflateOutputStream(Stream stream);
    public ParallelDeflateOutputStream(Stream stream, CompressionLevel level);
    public ParallelDeflateOutputStream(Stream stream, bool leaveOpen);
    public ParallelDeflateOutputStream(Stream stream, CompressionLevel level, bool leaveOpen);
    public ParallelDeflateOutputStream(Stream stream, CompressionLevel level, CompressionStrategy strategy, bool leaveOpen);
    private static ParallelDeflateOutputStream();
    [CompilerGeneratedAttribute]
public CompressionStrategy get_Strategy();
    [CompilerGeneratedAttribute]
private void set_Strategy(CompressionStrategy value);
    public int get_MaxBufferPairs();
    public void set_MaxBufferPairs(int value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public int get_Crc32();
    public long get_BytesProcessed();
    private void _InitializePoolOfWorkItems();
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void _FlushFinish();
    private void _Flush(bool lastInput);
    public virtual void Flush();
    public virtual void Close();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Reset(Stream stream);
    private void EmitPendingBuffers(bool doAll, bool mustWait);
    private void _DeflateOne(object wi);
    private bool DeflateOneSegment(WorkItem workitem);
    [ConditionalAttribute("Trace")]
private void TraceOutput(TraceBits bits, string format, Object[] varParams);
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.SharedUtils : object {
    public static int URShift(int number, int bits);
    public static int ReadInput(TextReader sourceTextReader, Byte[] target, int start, int count);
    internal static Byte[] ToByteArray(string sourceString);
    internal static Char[] ToCharArray(Byte[] byteArray);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.StaticTree : object {
    internal static Int16[] lengthAndLiteralsTreeCodes;
    internal static Int16[] distTreeCodes;
    internal static StaticTree Literals;
    internal static StaticTree Distances;
    internal static StaticTree BitLengths;
    internal Int16[] treeCodes;
    internal Int32[] extraBits;
    internal int extraBase;
    internal int elems;
    internal int maxLength;
    private StaticTree(Int16[] treeCodes, Int32[] extraBits, int extraBase, int elems, int maxLength);
    private static StaticTree();
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.Tree : object {
    private static int HEAP_SIZE;
    internal static Int32[] ExtraLengthBits;
    internal static Int32[] ExtraDistanceBits;
    internal static Int32[] extra_blbits;
    internal static SByte[] bl_order;
    internal static int Buf_size;
    private static SByte[] _dist_code;
    internal static SByte[] LengthCode;
    internal static Int32[] LengthBase;
    internal static Int32[] DistanceBase;
    internal Int16[] dyn_tree;
    internal int max_code;
    internal StaticTree staticTree;
    private static Tree();
    internal static int DistanceCode(int dist);
    internal void gen_bitlen(DeflateManager s);
    internal void build_tree(DeflateManager s);
    internal static void gen_codes(Int16[] tree, int max_code, Int16[] bl_count);
    internal static int bi_reverse(int code, int len);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.WorkItem : object {
    public Byte[] buffer;
    public Byte[] compressed;
    public int crc;
    public int index;
    public int ordinal;
    public int inputBytesAvailable;
    public int compressedBytesAvailable;
    public ZlibCodec compressor;
    public WorkItem(int size, CompressionLevel compressLevel, CompressionStrategy strategy, int ix);
}
internal class OfficeOpenXml.Packaging.Ionic.Zlib.ZlibBaseStream : Stream {
    protected internal ZlibCodec _z;
    protected internal StreamMode _streamMode;
    protected internal FlushType _flushMode;
    protected internal ZlibStreamFlavor _flavor;
    protected internal CompressionMode _compressionMode;
    protected internal CompressionLevel _level;
    protected internal bool _leaveOpen;
    protected internal Byte[] _workingBuffer;
    protected internal int _bufferSize;
    protected internal Byte[] _buf1;
    protected internal Stream _stream;
    protected internal CompressionStrategy Strategy;
    private CRC32 crc;
    protected internal string _GzipFileName;
    protected internal string _GzipComment;
    protected internal DateTime _GzipMtime;
    protected internal int _gzipHeaderByteCount;
    private bool nomoreinput;
    internal int Crc32 { get; }
    protected internal bool _wantCompress { get; }
    private ZlibCodec z { get; }
    private Byte[] workingBuffer { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZlibBaseStream(Stream stream, CompressionMode compressionMode, CompressionLevel level, ZlibStreamFlavor flavor, bool leaveOpen);
    internal int get_Crc32();
    protected internal bool get__wantCompress();
    private ZlibCodec get_z();
    private Byte[] get_workingBuffer();
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void finish();
    private void end();
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    private string ReadZeroTerminatedString();
    private int _ReadAndValidateGzipHeader();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static void CompressString(string s, Stream compressor);
    public static void CompressBuffer(Byte[] b, Stream compressor);
    public static string UncompressString(Byte[] compressed, Stream decompressor);
    public static Byte[] UncompressBuffer(Byte[] compressed, Stream decompressor);
}
public class OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec : object {
    public Byte[] InputBuffer;
    public int NextIn;
    public int AvailableBytesIn;
    public long TotalBytesIn;
    public Byte[] OutputBuffer;
    public int NextOut;
    public int AvailableBytesOut;
    public long TotalBytesOut;
    public string Message;
    internal DeflateManager dstate;
    internal InflateManager istate;
    internal UInt32 _Adler32;
    public CompressionLevel CompressLevel;
    public int WindowBits;
    public CompressionStrategy Strategy;
    public int Adler32 { get; }
    public ZlibCodec(CompressionMode mode);
    public int get_Adler32();
    public int InitializeInflate();
    public int InitializeInflate(bool expectRfc1950Header);
    public int InitializeInflate(int windowBits);
    public int InitializeInflate(int windowBits, bool expectRfc1950Header);
    public int Inflate(FlushType flush);
    public int EndInflate();
    public int SyncInflate();
    public int InitializeDeflate();
    public int InitializeDeflate(CompressionLevel level);
    public int InitializeDeflate(CompressionLevel level, bool wantRfc1950Header);
    public int InitializeDeflate(CompressionLevel level, int bits);
    public int InitializeDeflate(CompressionLevel level, int bits, bool wantRfc1950Header);
    private int _InternalInitializeDeflate(bool wantRfc1950Header);
    public int Deflate(FlushType flush);
    public int EndDeflate();
    public void ResetDeflate();
    public int SetDeflateParams(CompressionLevel level, CompressionStrategy strategy);
    public int SetDictionary(Byte[] dictionary);
    internal void flush_pending();
    internal int read_buf(Byte[] buf, int start, int size);
}
public static class OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants : object {
    public static int WindowBitsMax;
    public static int WindowBitsDefault;
    public static int Z_OK;
    public static int Z_STREAM_END;
    public static int Z_NEED_DICT;
    public static int Z_STREAM_ERROR;
    public static int Z_DATA_ERROR;
    public static int Z_BUF_ERROR;
    public static int WorkingBufferSizeDefault;
    public static int WorkingBufferSizeMin;
}
[GuidAttribute("ebc25cf6-9120-4283-b972-0e5520d0000E")]
public class OfficeOpenXml.Packaging.Ionic.Zlib.ZlibException : Exception {
    public ZlibException(string s);
}
public class OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream : Stream {
    internal ZlibBaseStream _baseStream;
    private bool _disposed;
    public FlushType FlushMode { get; public set; }
    public int BufferSize { get; public set; }
    public long TotalIn { get; }
    public long TotalOut { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ZlibStream(Stream stream, CompressionMode mode);
    public ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level);
    public ZlibStream(Stream stream, CompressionMode mode, bool leaveOpen);
    public ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen);
    public virtual FlushType get_FlushMode();
    public virtual void set_FlushMode(FlushType value);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public virtual long get_TotalIn();
    public virtual long get_TotalOut();
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public static Byte[] CompressString(string s);
    public static Byte[] CompressBuffer(Byte[] b);
    public static string UncompressString(Byte[] compressed);
    public static Byte[] UncompressBuffer(Byte[] compressed);
}
internal enum OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStreamFlavor : Enum {
    public int value__;
    public static ZlibStreamFlavor ZLIB;
    public static ZlibStreamFlavor DEFLATE;
    public static ZlibStreamFlavor GZIP;
}
public enum OfficeOpenXml.Packaging.TargetMode : Enum {
    public int value__;
    public static TargetMode Internal;
    public static TargetMode External;
}
internal class OfficeOpenXml.Packaging.ZipPackage : ZipPackagePartBase {
    private Dictionary`2<string, ZipPackagePart> Parts;
    internal Dictionary`2<string, ContentType> _contentTypes;
    internal char _dirSeparator;
    internal ZipInputStream _zip;
    private CompressionLevel _compression;
    public CompressionLevel Compression { get; public set; }
    internal ZipPackage(Stream stream);
    private void AddNew();
    private static string GetZipEntryAsString(ZipInputStream zip, ZipEntry e);
    private static Byte[] GetZipEntryAsByteArray(ZipInputStream zip, ZipEntry e);
    private void ExtractEntryToPart(ZipInputStream zip, ZipEntry e);
    private void GetDirSeparator(ZipEntry e);
    private void AddContentTypes(string xml);
    internal ZipPackagePart CreatePart(Uri partUri, string contentType);
    internal ZipPackagePart CreatePart(Uri partUri, string contentType, CompressionLevel compressionLevel, string extension);
    internal ZipPackagePart CreatePart(Uri partUri, ZipPackagePart sourcePart);
    internal ZipPackagePart CreatePart(Uri partUri, string contentType, string xml);
    internal ZipPackagePart GetPart(Uri partUri);
    internal string GetUriKey(string uri);
    internal bool PartExists(Uri partUri);
    internal void DeletePart(Uri Uri);
    internal void Save(Stream stream);
    private string GetContentTypeXml();
    internal void Flush();
    internal void Close();
    public sealed virtual void Dispose();
    public CompressionLevel get_Compression();
    public void set_Compression(CompressionLevel value);
}
internal class OfficeOpenXml.Packaging.ZipPackagePart : ZipPackagePartBase {
    [CompilerGeneratedAttribute]
private ZipPackage <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipEntry <Entry>k__BackingField;
    internal CompressionLevel CompressionLevel;
    private Stream _stream;
    private string _contentType;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private SaveHandlerDelegate <SaveHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldBeSaved>k__BackingField;
    internal ZipPackage Package { get; internal set; }
    internal ZipEntry Entry { get; internal set; }
    internal Stream Stream { get; internal set; }
    public string ContentType { get; internal set; }
    public Uri Uri { get; private set; }
    internal SaveHandlerDelegate SaveHandler { get; internal set; }
    public bool ShouldBeSaved { get; public set; }
    internal ZipPackagePart(ZipPackage package, ZipEntry entry);
    internal ZipPackagePart(ZipPackage package, Uri partUri, string contentType, CompressionLevel compressionLevel);
    [CompilerGeneratedAttribute]
internal ZipPackage get_Package();
    [CompilerGeneratedAttribute]
internal void set_Package(ZipPackage value);
    [CompilerGeneratedAttribute]
internal ZipEntry get_Entry();
    [CompilerGeneratedAttribute]
internal void set_Entry(ZipEntry value);
    internal Stream get_Stream();
    internal void set_Stream(Stream value);
    internal virtual ZipPackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType);
    internal virtual ZipPackageRelationship CreateRelationship(string target, TargetMode targetMode, string relationshipType);
    internal Stream GetStream();
    internal Stream GetStream(FileMode fileMode);
    internal Stream GetStream(FileMode fileMode, FileAccess fileAccess);
    public string get_ContentType();
    internal void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    public Stream GetZipStream();
    [CompilerGeneratedAttribute]
internal SaveHandlerDelegate get_SaveHandler();
    [CompilerGeneratedAttribute]
internal void set_SaveHandler(SaveHandlerDelegate value);
    [CompilerGeneratedAttribute]
public bool get_ShouldBeSaved();
    [CompilerGeneratedAttribute]
public void set_ShouldBeSaved(bool value);
    internal void WriteZip(ZipOutputStream os);
    public sealed virtual void Dispose();
    internal ZipPackageRelationship CreateRelationshipFromCopy(ZipPackageRelationship relToCopy);
}
public abstract class OfficeOpenXml.Packaging.ZipPackagePartBase : object {
    protected internal ZipPackageRelationshipCollection _rels;
    private int _maxRId;
    internal void DeleteRelationship(string id);
    protected internal void UpdateMaxRId(string id, Int32& maxRId);
    internal virtual ZipPackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType);
    internal virtual ZipPackageRelationship CreateRelationship(string target, TargetMode targetMode, string relationshipType);
    internal bool RelationshipExists(string id);
    internal ZipPackageRelationshipCollection GetRelationshipsByType(string schema);
    internal ZipPackageRelationshipCollection GetRelationships();
    internal ZipPackageRelationship GetRelationship(string id);
    internal void ReadRelation(string xml, string source);
    internal void SetMaxRelId(int maxRelId);
}
public class OfficeOpenXml.Packaging.ZipPackageRelationship : object {
    [CompilerGeneratedAttribute]
private Uri <SourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationshipType>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetMode <TargetMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TargetUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public Uri SourceUri { get; internal set; }
    public string RelationshipType { get; internal set; }
    public TargetMode TargetMode { get; internal set; }
    public string Id { get; internal set; }
    public Uri TargetUri { get; public set; }
    public string Target { get; internal set; }
    [CompilerGeneratedAttribute]
public Uri get_SourceUri();
    [CompilerGeneratedAttribute]
internal void set_SourceUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_RelationshipType();
    [CompilerGeneratedAttribute]
internal void set_RelationshipType(string value);
    [CompilerGeneratedAttribute]
public TargetMode get_TargetMode();
    [CompilerGeneratedAttribute]
internal void set_TargetMode(TargetMode value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public Uri get_TargetUri();
    [CompilerGeneratedAttribute]
public void set_TargetUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
internal void set_Target(string value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Packaging.ZipPackageRelationshipCollection : object {
    protected internal Dictionary`2<string, ZipPackageRelationship> _rels;
    internal ZipPackageRelationship Item { get; }
    public int Count { get; }
    internal void Add(ZipPackageRelationship item);
    public sealed virtual IEnumerator`1<ZipPackageRelationship> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Remove(string id);
    internal bool ContainsKey(string id);
    internal ZipPackageRelationship get_Item(string id);
    internal ZipPackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    internal void WriteZip(ZipOutputStream os, string fileName);
    public int get_Count();
}
public enum OfficeOpenXml.PaddingAlignmentType : Enum {
    public int value__;
    public static PaddingAlignmentType Auto;
    public static PaddingAlignmentType Left;
    public static PaddingAlignmentType Right;
}
public enum OfficeOpenXml.PictureAlignment : Enum {
    public int value__;
    public static PictureAlignment Left;
    public static PictureAlignment Centered;
    public static PictureAlignment Right;
}
[ExtensionAttribute]
public static class OfficeOpenXml.RangeExtensions : object {
    [ExtensionAttribute]
public static ExcelRangeBase SkipColumns(ExcelRangeBase range, int count);
    [ExtensionAttribute]
public static ExcelRangeBase SkipRows(ExcelRangeBase range, int count);
    [ExtensionAttribute]
public static ExcelRangeBase TakeColumns(ExcelRangeBase range, int count);
    [ExtensionAttribute]
public static ExcelRangeBase TakeRows(ExcelRangeBase range, int count);
    [ExtensionAttribute]
public static ExcelRangeBase TakeSingleColumn(ExcelRangeBase range, int offset);
    [ExtensionAttribute]
public static ExcelRangeBase TakeColumnsBetween(ExcelRangeBase range, int offset, int count);
    [ExtensionAttribute]
public static ExcelRangeBase TakeSingleRow(ExcelRangeBase range, int offset);
    [ExtensionAttribute]
public static ExcelRangeBase TakeRowsBetween(ExcelRangeBase range, int offset, int count);
    [ExtensionAttribute]
public static ExcelRangeBase TakeSingleCell(ExcelRangeBase range, int rowOffset, int columnOffset);
}
internal class OfficeOpenXml.RichData.ExcelRichData : object {
    [CompilerGeneratedAttribute]
private ExcelRichDataValueTypeInfo <ValueTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelRichValueStructureCollection <Structures>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelRichValueCollection <Values>k__BackingField;
    internal ExcelRichDataValueTypeInfo ValueTypes { get; }
    internal ExcelRichValueStructureCollection Structures { get; }
    internal ExcelRichValueCollection Values { get; }
    internal ExcelRichData(ExcelWorkbook wb);
    [CompilerGeneratedAttribute]
internal ExcelRichDataValueTypeInfo get_ValueTypes();
    [CompilerGeneratedAttribute]
internal ExcelRichValueStructureCollection get_Structures();
    [CompilerGeneratedAttribute]
internal ExcelRichValueCollection get_Values();
    internal void CreateParts();
    internal void SetHasValuesOnParts();
}
internal class OfficeOpenXml.RichData.ExcelRichValue : object {
    [CompilerGeneratedAttribute]
private int <StructureId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelRichValueStructure <Structure>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private RichValueFallbackType <Fallback>k__BackingField;
    private Dictionary`2<string, string> _keyValues;
    public int StructureId { get; public set; }
    public ExcelRichValueStructure Structure { get; public set; }
    public List`1<string> Values { get; }
    public RichValueFallbackType Fallback { get; internal set; }
    public ExcelRichValue(int structureId);
    [CompilerGeneratedAttribute]
public int get_StructureId();
    [CompilerGeneratedAttribute]
public void set_StructureId(int value);
    [CompilerGeneratedAttribute]
public ExcelRichValueStructure get_Structure();
    [CompilerGeneratedAttribute]
public void set_Structure(ExcelRichValueStructure value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
public RichValueFallbackType get_Fallback();
    [CompilerGeneratedAttribute]
internal void set_Fallback(RichValueFallbackType value);
    internal void WriteXml(StreamWriter sw);
    private string GetFallbackAsString();
    public void AddSpillError(int rowOffset, int colOffset, string subType);
    public void AddPropagatedError(string errorType, bool propagated);
    public void AddError(string errorType, string subType);
    internal bool HasValue(String[] keys, String[] values);
}
internal class OfficeOpenXml.RichData.ExcelRichValueCollection : object {
    private ExcelWorkbook _wb;
    private ZipPackagePart _part;
    private ExcelRichValueStructureCollection _structures;
    private Uri _uri;
    private static string PART_URI_PATH;
    [CompilerGeneratedAttribute]
private List`1<ExcelRichValue> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtLstXml>k__BackingField;
    internal ZipPackagePart Part { get; }
    public List`1<ExcelRichValue> Items { get; }
    public string ExtLstXml { get; internal set; }
    public ExcelRichValueCollection(ExcelWorkbook wb, ExcelRichValueStructureCollection structures);
    private void LoadPart(ExcelWorkbook wb);
    internal ZipPackagePart get_Part();
    private void ReadXml(Stream stream);
    private ExcelRichValue ReadItem(XmlReader xr);
    private RichValueFallbackType GetFBType(string t);
    internal void Save(ZipOutputStream stream, CompressionLevel compressionLevel, string fileName);
    internal void CreatePart();
    internal void AddErrorSpill(ExcelRichDataErrorValue spillError);
    internal void AddPropagated(eErrorType errorType);
    internal void AddError(eErrorType errorType, string subType);
    [CompilerGeneratedAttribute]
public List`1<ExcelRichValue> get_Items();
    [CompilerGeneratedAttribute]
public string get_ExtLstXml();
    [CompilerGeneratedAttribute]
internal void set_ExtLstXml(string value);
}
internal class OfficeOpenXml.RichData.ExcelRichValueStructure : object {
    public Dictionary`2<string, List`1<List`1<ExcelRichValueStructureKey>>> RichValueTypes;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExcelRichValueStructureKey> <Keys>k__BackingField;
    public string Type { get; public set; }
    public List`1<ExcelRichValueStructureKey> Keys { get; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public List`1<ExcelRichValueStructureKey> get_Keys();
    internal void WriteXml(StreamWriter sw);
    private string GetTypeAttribute(ExcelRichValueStructureKey key);
    public void SetAsSpillError();
    public void SetAsPropagatedError();
    public void SetAsErrorWithSubType();
    public void SetAsBufferError();
    public void SetAsFieldError();
}
internal class OfficeOpenXml.RichData.ExcelRichValueStructureCollection : object {
    private ExcelWorkbook _wb;
    private ZipPackagePart _part;
    private Uri _uri;
    private static string PART_URI_PATH;
    private Dictionary`2<RichDataStructureFlags, int> _structures;
    [CompilerGeneratedAttribute]
private List`1<ExcelRichValueStructure> <StructureItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtLstXml>k__BackingField;
    internal ZipPackagePart Part { get; }
    public List`1<ExcelRichValueStructure> StructureItems { get; }
    public string ExtLstXml { get; public set; }
    internal ExcelRichValueStructureCollection(ExcelWorkbook wb);
    private void LoadPart(ExcelWorkbook wb);
    internal ZipPackagePart get_Part();
    private void ReadXml(Stream stream);
    private Nullable`1<RichDataStructureFlags> GetStructFlag(ExcelRichValueStructure rvStruct);
    private ExcelRichValueStructure ReadItem(XmlReader xr);
    internal void Save(ZipOutputStream stream, CompressionLevel compressionLevel, string fileName);
    internal void CreatePart();
    internal int GetStructureId(RichDataStructureFlags structure);
    private void AddStructure(RichDataStructureFlags structure);
    [CompilerGeneratedAttribute]
public List`1<ExcelRichValueStructure> get_StructureItems();
    [CompilerGeneratedAttribute]
public string get_ExtLstXml();
    [CompilerGeneratedAttribute]
public void set_ExtLstXml(string value);
}
internal class OfficeOpenXml.RichData.ExcelRichValueStructureKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RichValueDataType <DataType>k__BackingField;
    public string Name { get; public set; }
    public RichValueDataType DataType { get; public set; }
    internal ExcelRichValueStructureKey(string name, string dt);
    private RichValueDataType GetDataType(string dt);
    internal string GetDataTypeString();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public RichValueDataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(RichValueDataType value);
}
internal static class OfficeOpenXml.RichData.RichDataErrorType : object {
    internal static string Name;
    internal static string Spill;
    internal static string Connect;
    internal static string Blocked;
    internal static string Unknown;
    internal static string Field;
    internal static string Calc;
    internal static string Busy;
}
internal enum OfficeOpenXml.RichData.RichDataStructureFlags : Enum {
    public int value__;
    public static RichDataStructureFlags ErrorWithSubType;
    public static RichDataStructureFlags ErrorSpill;
    public static RichDataStructureFlags ErrorPropagated;
}
internal enum OfficeOpenXml.RichData.RichValueFallbackType : Enum {
    public int value__;
    public static RichValueFallbackType Boolean;
    public static RichValueFallbackType Decimal;
    public static RichValueFallbackType Error;
    public static RichValueFallbackType String;
}
[FlagsAttribute]
internal enum OfficeOpenXml.RichData.RichValueKeyFlags : Enum {
    public int value__;
    public static RichValueKeyFlags ShowInCardView;
    public static RichValueKeyFlags ShowInDotNotation;
    public static RichValueKeyFlags ShowInAutoComplete;
    public static RichValueKeyFlags ExcludeFromFile;
    public static RichValueKeyFlags ExcludeFromCalcComparison;
}
internal class OfficeOpenXml.RichData.Types.ExcelRichDataValueTypeInfo : object {
    private ExcelWorkbook _wb;
    private Uri _uri;
    private ZipPackagePart _part;
    private static string PART_URI_PATH;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ExcelRichTypeValueKey> <Global>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ExcelRichTypeValueKey> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtLstXml>k__BackingField;
    private string _globalExtLstXml;
    private string _typesExtLstXml;
    internal ZipPackagePart Part { get; }
    public Dictionary`2<string, ExcelRichTypeValueKey> Global { get; public set; }
    public Dictionary`2<string, ExcelRichTypeValueKey> Types { get; public set; }
    public string ExtLstXml { get; public set; }
    public ExcelRichDataValueTypeInfo(ExcelWorkbook wb);
    public ExcelRichDataValueTypeInfo(ExcelWorkbook wb, ZipPackageRelationship r);
    private void ReadPart(ExcelWorkbook wb);
    internal ZipPackagePart get_Part();
    private void ReadXml(Stream stream);
    private void ReadKeyFlags(XmlReader xr, Dictionary`2<string, ExcelRichTypeValueKey> values, String& extLst);
    private void ReadValues(XmlReader xr, Dictionary`2<string, ExcelRichTypeValueKey> values);
    internal void CreatePart();
    internal void Save(ZipOutputStream stream, CompressionLevel compressionLevel, string fileName);
    private void WriteExtLst(StreamWriter sw, string extLstXml);
    private void WriteSection(StreamWriter sw, Dictionary`2<string, ExcelRichTypeValueKey> section, string elementName, string extLstXml);
    internal void CreateDefault();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ExcelRichTypeValueKey> get_Global();
    [CompilerGeneratedAttribute]
public void set_Global(Dictionary`2<string, ExcelRichTypeValueKey> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ExcelRichTypeValueKey> get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(Dictionary`2<string, ExcelRichTypeValueKey> value);
    [CompilerGeneratedAttribute]
public string get_ExtLstXml();
    [CompilerGeneratedAttribute]
public void set_ExtLstXml(string value);
}
internal class OfficeOpenXml.RichData.Types.ExcelRichTypeValueKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RichValueKeyFlags <Flags>k__BackingField;
    public string Name { get; public set; }
    public RichValueKeyFlags Flags { get; public set; }
    public ExcelRichTypeValueKey(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public RichValueKeyFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(RichValueKeyFlags value);
    internal void WriteXml(StreamWriter sw);
    private IEnumerable`1<T> GetEnumFlags(T flags);
}
internal class OfficeOpenXml.RowInternal : object {
    internal double Height;
    internal bool Hidden;
    internal bool Collapsed;
    internal short OutlineLevel;
    internal bool PageBreak;
    internal bool Phonetic;
    internal bool CustomHeight;
    internal int MergeID;
    internal RowInternal Clone();
}
internal class OfficeOpenXml.ShiftableAddress : object {
    private int _fromRow;
    private int _fromCol;
    private int _toRow;
    private int _toCol;
    private bool _fixedFromRow;
    private bool _fixedToRow;
    private bool _fixedFromCol;
    private bool _fixedToCol;
    private string _leftPart;
    public ShiftableAddress(string address);
    internal string GetOffsetAddress(int rowOffset, int colOffset);
}
internal class OfficeOpenXml.Sorting.Internal.EPPlusSortComparer : EPPlusSortComparerBase`2<SortItem`1<ExcelValue>, ExcelValue> {
    private Int32[] _columns;
    public EPPlusSortComparer(Int32[] columns, Boolean[] descending, Dictionary`2<int, String[]> customLists, CultureInfo culture, CompareOptions compareOptions);
    public virtual int Compare(SortItem`1<ExcelValue> x, SortItem`1<ExcelValue> y);
}
internal abstract class OfficeOpenXml.Sorting.Internal.EPPlusSortComparerBase`2 : object {
    protected static int CustomListNotFound;
    [CompilerGeneratedAttribute]
private Boolean[] <Descending>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, String[]> <CustomLists>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private CompareOptions <CompOptions>k__BackingField;
    protected Boolean[] Descending { get; private set; }
    protected Dictionary`2<int, String[]> CustomLists { get; private set; }
    protected CultureInfo Culture { get; private set; }
    protected CompareOptions CompOptions { get; private set; }
    public EPPlusSortComparerBase`2(Boolean[] descending, Dictionary`2<int, String[]> customLists, CultureInfo culture, CompareOptions compareOptions);
    [CompilerGeneratedAttribute]
protected Boolean[] get_Descending();
    [CompilerGeneratedAttribute]
private void set_Descending(Boolean[] value);
    [CompilerGeneratedAttribute]
protected Dictionary`2<int, String[]> get_CustomLists();
    [CompilerGeneratedAttribute]
private void set_CustomLists(Dictionary`2<int, String[]> value);
    [CompilerGeneratedAttribute]
protected CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
private void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
protected CompareOptions get_CompOptions();
    [CompilerGeneratedAttribute]
private void set_CompOptions(CompareOptions value);
    protected int GetSortWeightByCustomList(string val, String[] list);
    protected int CompareObjects(object x1, object y1);
    public abstract virtual int Compare(T1 x, T1 y);
}
internal class OfficeOpenXml.Sorting.Internal.EPPlusSortComparerLeftToRight : EPPlusSortComparerBase`2<SortItemLeftToRight`1<ExcelValue>, ExcelValue> {
    private Int32[] _rows;
    public EPPlusSortComparerLeftToRight(Int32[] rows, Boolean[] descending, Dictionary`2<int, String[]> customLists, CultureInfo culture, CompareOptions compareOptions);
    public virtual int Compare(SortItemLeftToRight`1<ExcelValue> x, SortItemLeftToRight`1<ExcelValue> y);
}
internal class OfficeOpenXml.Sorting.Internal.RangeWorksheetData : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, byte> <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Formulas>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Uri> <Hyperlinks>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MetaDataReference> <Metadata>k__BackingField;
    public Dictionary`2<string, byte> Flags { get; private set; }
    public Dictionary`2<string, object> Formulas { get; private set; }
    public Dictionary`2<string, Uri> Hyperlinks { get; private set; }
    public Dictionary`2<string, int> Comments { get; private set; }
    public Dictionary`2<string, MetaDataReference> Metadata { get; private set; }
    public RangeWorksheetData(ExcelRangeBase range);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, byte> get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(Dictionary`2<string, byte> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Formulas();
    [CompilerGeneratedAttribute]
private void set_Formulas(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Uri> get_Hyperlinks();
    [CompilerGeneratedAttribute]
private void set_Hyperlinks(Dictionary`2<string, Uri> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_Comments();
    [CompilerGeneratedAttribute]
private void set_Comments(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MetaDataReference> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(Dictionary`2<string, MetaDataReference> value);
    private static Dictionary`2<string, T> GetItems(ExcelRangeBase r, CellStore`1<T> store);
}
internal class OfficeOpenXml.Sorting.Internal.SortItem`1 : SortItemBase`1<T> {
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    internal int Row { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Row();
    [CompilerGeneratedAttribute]
internal void set_Row(int value);
}
internal abstract class OfficeOpenXml.Sorting.Internal.SortItemBase`1 : object {
    [CompilerGeneratedAttribute]
private T[] <Items>k__BackingField;
    internal T[] Items { get; internal set; }
    [CompilerGeneratedAttribute]
internal T[] get_Items();
    [CompilerGeneratedAttribute]
internal void set_Items(T[] value);
}
internal static class OfficeOpenXml.Sorting.Internal.SortItemFactory : object {
    internal static List`1<SortItem`1<ExcelValue>> Create(ExcelRangeBase range);
}
internal class OfficeOpenXml.Sorting.Internal.SortItemLeftToRight`1 : SortItemBase`1<T> {
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    internal int Column { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Column();
    [CompilerGeneratedAttribute]
internal void set_Column(int value);
}
internal static class OfficeOpenXml.Sorting.Internal.SortItemLeftToRightFactory : object {
    internal static List`1<SortItemLeftToRight`1<ExcelValue>> Create(ExcelRangeBase range);
}
public class OfficeOpenXml.Sorting.RangeLeftToRightSortLayer : SortLayerBase {
    private RangeSortOptions _options;
    internal RangeLeftToRightSortLayer(RangeSortOptions options);
    public virtual RangeLeftToRightSortLayerBuilder Row(int row);
    public RangeLeftToRightSortLayerBuilder Row(int row, eSortOrder sortOrder);
}
public class OfficeOpenXml.Sorting.RangeLeftToRightSortLayerBuilder : object {
    private RangeSortOptions _options;
    private RangeLeftToRightSortLayer _sortLayer;
    public RangeLeftToRightSortLayer ThenSortBy { get; }
    internal RangeLeftToRightSortLayerBuilder(RangeSortOptions options, RangeLeftToRightSortLayer sortLayer);
    public virtual RangeLeftToRightSortLayer get_ThenSortBy();
    public RangeLeftToRightSortLayerBuilder UsingCustomList(String[] values);
}
internal class OfficeOpenXml.Sorting.RangeSorter : object {
    private ExcelWorksheet _worksheet;
    public RangeSorter(ExcelWorksheet worksheet);
    private void ValidateColumnArray(ExcelRangeBase range, Int32[] columns);
    private void ValidateRowsArray(ExcelRangeBase range, Int32[] rows);
    private Boolean[] CreateDefaultDescendingArray(Int32[] sortParams);
    public void Sort(ExcelRangeBase range, Int32[] columns, Boolean[]& descending, CultureInfo culture, CompareOptions compareOptions, Dictionary`2<int, String[]> customLists);
    public void SortLeftToRight(ExcelRangeBase range, Int32[] rows, Boolean[]& descending, CultureInfo culture, CompareOptions compareOptions, Dictionary`2<int, String[]> customLists);
    private void ApplySortedRange(ExcelRangeBase range, List`1<SortItem`1<ExcelValue>> sortItems, RangeWorksheetData wsd);
    private void ApplySortedRange(ExcelRangeBase range, List`1<SortItemLeftToRight`1<ExcelValue>> sortItems, RangeWorksheetData wsd);
    private void HandleHyperlink(RangeWorksheetData wsd, int row, int col, string addr);
    private void HandleMetadata(RangeWorksheetData wsd, int row, int col, string addr);
    private void HandleFlags(RangeWorksheetData wsd, int row, int col, string addr);
    private void HandleComment(RangeWorksheetData wsd, int row, int col, string addr);
    private void HandleFormula(RangeWorksheetData wsd, int row, int col, string addr, int initialRow, int initialCol);
    internal void SetWorksheetSortState(ExcelRangeBase range, Int32[] columnsOrRows, Boolean[] descending, CompareOptions compareOptions, bool leftToRight, Dictionary`2<int, String[]> customLists);
}
public class OfficeOpenXml.Sorting.RangeSortLayer : SortLayerBase {
    private RangeSortOptions _options;
    internal RangeSortLayer(RangeSortOptions options);
    public virtual RangeSortLayerBuilder Column(int column);
    public RangeSortLayerBuilder Column(int column, eSortOrder sortOrder);
}
public class OfficeOpenXml.Sorting.RangeSortLayerBuilder : object {
    private RangeSortOptions _options;
    private RangeSortLayer _sortLayer;
    public RangeSortLayer ThenSortBy { get; }
    internal RangeSortLayerBuilder(RangeSortOptions options, RangeSortLayer sortLayer);
    public virtual RangeSortLayer get_ThenSortBy();
    public RangeSortLayerBuilder UsingCustomList(String[] values);
}
public class OfficeOpenXml.Sorting.RangeSortOptions : SortOptionsBase {
    private RangeSortLayer _sortLayer;
    private RangeLeftToRightSortLayer _sortLayerLeftToRight;
    public RangeSortLayer SortBy { get; }
    public RangeLeftToRightSortLayer SortLeftToRightBy { get; }
    public static RangeSortOptions Create();
    public RangeSortLayer get_SortBy();
    public RangeLeftToRightSortLayer get_SortLeftToRightBy();
}
public class OfficeOpenXml.Sorting.SortCondition : XmlHelper {
    private string _descendingPath;
    private string _refPath;
    private string _customListPath;
    public bool Descending { get; public set; }
    public string Ref { get; public set; }
    public String[] CustomList { get; public set; }
    internal SortCondition(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public bool get_Descending();
    public void set_Descending(bool value);
    public string get_Ref();
    public void set_Ref(string value);
    public String[] get_CustomList();
    public void set_CustomList(String[] value);
}
public class OfficeOpenXml.Sorting.SortConditionCollection : XmlHelper {
    private List`1<SortCondition> _sortConditions;
    private string _sortConditionPath;
    internal SortConditionCollection(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    public sealed virtual IEnumerator`1<SortCondition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(string ref, Nullable`1<bool> decending);
    internal void Add(string ref, Nullable`1<bool> decending, String[] customList);
    internal void Clear();
}
public abstract class OfficeOpenXml.Sorting.SortLayerBase : object {
    private SortOptionsBase _options;
    private int _column;
    private int _row;
    internal SortLayerBase(SortOptionsBase options);
    protected void SetColumn(int column);
    protected void SetColumn(int column, eSortOrder sortOrder);
    protected void SetRow(int row);
    protected void SetRow(int row, eSortOrder sortOrder);
    internal void SetCustomList(String[] values);
}
public abstract class OfficeOpenXml.Sorting.SortOptionsBase : object {
    [CompilerGeneratedAttribute]
private bool <LeftToRight>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ColumnIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <RowIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<bool> <Descending>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, String[]> <CustomLists>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private CompareOptions <CompareOptions>k__BackingField;
    internal bool LeftToRight { get; internal set; }
    internal List`1<int> ColumnIndexes { get; private set; }
    internal List`1<int> RowIndexes { get; private set; }
    internal List`1<bool> Descending { get; private set; }
    internal Dictionary`2<int, String[]> CustomLists { get; private set; }
    public CultureInfo Culture { get; public set; }
    public CompareOptions CompareOptions { get; public set; }
    [CompilerGeneratedAttribute]
internal bool get_LeftToRight();
    [CompilerGeneratedAttribute]
internal void set_LeftToRight(bool value);
    [CompilerGeneratedAttribute]
internal List`1<int> get_ColumnIndexes();
    [CompilerGeneratedAttribute]
private void set_ColumnIndexes(List`1<int> value);
    [CompilerGeneratedAttribute]
internal List`1<int> get_RowIndexes();
    [CompilerGeneratedAttribute]
private void set_RowIndexes(List`1<int> value);
    [CompilerGeneratedAttribute]
internal List`1<bool> get_Descending();
    [CompilerGeneratedAttribute]
private void set_Descending(List`1<bool> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<int, String[]> get_CustomLists();
    [CompilerGeneratedAttribute]
private void set_CustomLists(Dictionary`2<int, String[]> value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public CompareOptions get_CompareOptions();
    [CompilerGeneratedAttribute]
public void set_CompareOptions(CompareOptions value);
}
public class OfficeOpenXml.Sorting.SortState : XmlHelper {
    private string _sortStatePath;
    private string _caseSensitivePath;
    private string _columnSortPath;
    private string _refPath;
    private SortConditionCollection _sortConditions;
    public SortConditionCollection SortConditions { get; }
    public bool CaseSensitive { get; internal set; }
    public bool ColumnSort { get; internal set; }
    public string Ref { get; internal set; }
    internal SortState(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    internal SortState(XmlNamespaceManager nameSpaceManager, ExcelWorksheet worksheet);
    internal SortState(XmlNamespaceManager nameSpaceManager, ExcelTable table);
    public void Clear();
    public SortConditionCollection get_SortConditions();
    public bool get_CaseSensitive();
    internal void set_CaseSensitive(bool value);
    public bool get_ColumnSort();
    internal void set_ColumnSort(bool value);
    public string get_Ref();
    internal void set_Ref(string value);
}
internal class OfficeOpenXml.Sorting.TableSorter : object {
    private ExcelTable _table;
    public TableSorter(ExcelTable table);
    public void Sort(TableSortOptions options);
    public void Sort(Action`1<TableSortOptions> configuration);
}
public class OfficeOpenXml.Sorting.TableSortLayer : SortLayerBase {
    private TableSortOptions _options;
    internal TableSortLayer(TableSortOptions options);
    public TableSortLayerBuilder Column(int column);
    public TableSortLayerBuilder Column(int column, eSortOrder sortOrder);
    public TableSortLayerBuilder ColumnNamed(string columnName);
    public TableSortLayerBuilder ColumnNamed(string columnName, eSortOrder sortOrder);
}
public class OfficeOpenXml.Sorting.TableSortLayerBuilder : object {
    private TableSortOptions _options;
    private TableSortLayer _sortLayer;
    public TableSortLayer ThenSortBy { get; }
    internal TableSortLayerBuilder(TableSortOptions options, TableSortLayer sortLayer);
    public TableSortLayer get_ThenSortBy();
    public TableSortLayerBuilder UsingCustomList(String[] values);
}
public class OfficeOpenXml.Sorting.TableSortOptions : SortOptionsBase {
    private TableSortLayer _sortLayer;
    private ExcelTable _table;
    private Dictionary`2<string, int> _columnNameIndexes;
    internal ExcelTable Table { get; }
    public TableSortLayer SortBy { get; }
    public TableSortOptions(ExcelTable table);
    internal ExcelTable get_Table();
    internal int GetColumnNameIndex(string name);
    public TableSortLayer get_SortBy();
}
public enum OfficeOpenXml.Sparkline.eDispBlanksAs : Enum {
    public int value__;
    public static eDispBlanksAs Span;
    public static eDispBlanksAs Gap;
    public static eDispBlanksAs Zero;
}
public enum OfficeOpenXml.Sparkline.eSparklineAxisMinMax : Enum {
    public int value__;
    public static eSparklineAxisMinMax Individual;
    public static eSparklineAxisMinMax Group;
    public static eSparklineAxisMinMax Custom;
}
public enum OfficeOpenXml.Sparkline.eSparklineType : Enum {
    public int value__;
    public static eSparklineType Line;
    public static eSparklineType Column;
    public static eSparklineType Stacked;
}
public class OfficeOpenXml.Sparkline.ExcelSparkline : XmlHelper {
    private static string _fPath;
    private static string _sqrefPath;
    public ExcelAddressBase RangeAddress { get; internal set; }
    public ExcelCellAddress Cell { get; internal set; }
    internal ExcelSparkline(XmlNamespaceManager nsm, XmlNode topNode);
    public ExcelAddressBase get_RangeAddress();
    internal void set_RangeAddress(ExcelAddressBase value);
    public ExcelCellAddress get_Cell();
    internal void set_Cell(ExcelCellAddress value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Sparkline.ExcelSparklineCollection : object {
    private ExcelSparklineGroup _slg;
    private List`1<ExcelSparkline> _lst;
    private static string _topPath;
    public int Count { get; }
    public ExcelSparkline Item { get; }
    internal ExcelSparklineCollection(ExcelSparklineGroup slg);
    public int get_Count();
    private void LoadSparklines();
    public ExcelSparkline get_Item(int index);
    public sealed virtual IEnumerator`1<ExcelSparkline> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(ExcelCellAddress cell, string worksheetName, ExcelAddressBase sqref);
    internal void Remove(ExcelSparkline sparkline);
}
public class OfficeOpenXml.Sparkline.ExcelSparklineColor : XmlHelper {
    public int Indexed { get; public set; }
    public string Rgb { get; internal set; }
    public Nullable`1<eThemeSchemeColor> Theme { get; internal set; }
    public decimal Tint { get; public set; }
    public bool Auto { get; internal set; }
    internal ExcelSparklineColor(XmlNamespaceManager ns, XmlNode node);
    public sealed virtual int get_Indexed();
    public sealed virtual void set_Indexed(int value);
    public sealed virtual string get_Rgb();
    internal void set_Rgb(string value);
    public sealed virtual Nullable`1<eThemeSchemeColor> get_Theme();
    internal void set_Theme(Nullable`1<eThemeSchemeColor> value);
    private void ClearValues();
    public sealed virtual decimal get_Tint();
    public sealed virtual void set_Tint(decimal value);
    public sealed virtual bool get_Auto();
    internal void set_Auto(bool value);
    public sealed virtual void SetColor(Color color);
    public sealed virtual void SetColor(eThemeSchemeColor color);
    public sealed virtual void SetColor(ExcelIndexedColor color);
    public sealed virtual void SetAuto();
}
public class OfficeOpenXml.Sparkline.ExcelSparklineGroup : XmlHelper {
    private ExcelWorksheet _ws;
    [CompilerGeneratedAttribute]
private ExcelSparklineCollection <Sparklines>k__BackingField;
    private static string _dateAxisPath;
    private static string _markersPath;
    private static string _highPath;
    private static string _lowPath;
    private static string _firstPath;
    private static string _lastPath;
    private static string _negativePath;
    private static string _displayXAxisPath;
    private static string _displayHiddenPath;
    private static string lineWidthPath;
    private static string _dispBlanksAsPath;
    private static string _typePath;
    private static string _colorSeriesPath;
    private static string _colorNegativePath;
    private static string _colorAxisPath;
    private static string _colorMarkersPath;
    private static string _colorFirstPath;
    private static string _colorLastPath;
    private static string _colorHighPath;
    private static string _colorLowPath;
    private static string _manualMinPath;
    private static string _manualMaxPath;
    private static string _minAxisTypePath;
    private static string _maxAxisTypePath;
    private static string _rightToLeftPath;
    public ExcelRangeBase DateAxisRange { get; public set; }
    public ExcelRangeBase DataRange { get; }
    public ExcelRangeBase LocationRange { get; }
    public ExcelSparklineCollection Sparklines { get; internal set; }
    internal bool DateAxis { get; internal set; }
    public bool Markers { get; public set; }
    public bool High { get; public set; }
    public bool Low { get; public set; }
    public bool First { get; public set; }
    public bool Last { get; public set; }
    public bool Negative { get; public set; }
    public bool DisplayXAxis { get; public set; }
    public bool DisplayHidden { get; public set; }
    public double LineWidth { get; public set; }
    public eDispBlanksAs DisplayEmptyCellsAs { get; public set; }
    public eSparklineType Type { get; public set; }
    public ExcelSparklineColor ColorSeries { get; }
    public ExcelSparklineColor ColorNegative { get; }
    public ExcelSparklineColor ColorAxis { get; }
    public ExcelSparklineColor ColorMarkers { get; }
    public ExcelSparklineColor ColorFirst { get; }
    public ExcelSparklineColor ColorLast { get; }
    public ExcelSparklineColor ColorHigh { get; }
    public ExcelSparklineColor ColorLow { get; }
    public double ManualMin { get; public set; }
    public double ManualMax { get; public set; }
    public eSparklineAxisMinMax MinAxisType { get; public set; }
    public eSparklineAxisMinMax MaxAxisType { get; public set; }
    public bool RightToLeft { get; public set; }
    internal ExcelSparklineGroup(XmlNamespaceManager ns, XmlElement topNode, ExcelWorksheet ws);
    public ExcelRangeBase get_DateAxisRange();
    public void set_DateAxisRange(ExcelRangeBase value);
    private void RemoveDateAxis();
    public ExcelRangeBase get_DataRange();
    public ExcelRangeBase get_LocationRange();
    [CompilerGeneratedAttribute]
public ExcelSparklineCollection get_Sparklines();
    [CompilerGeneratedAttribute]
internal void set_Sparklines(ExcelSparklineCollection value);
    internal bool get_DateAxis();
    internal void set_DateAxis(bool value);
    public bool get_Markers();
    public void set_Markers(bool value);
    public bool get_High();
    public void set_High(bool value);
    public bool get_Low();
    public void set_Low(bool value);
    public bool get_First();
    public void set_First(bool value);
    public bool get_Last();
    public void set_Last(bool value);
    public bool get_Negative();
    public void set_Negative(bool value);
    public bool get_DisplayXAxis();
    public void set_DisplayXAxis(bool value);
    public bool get_DisplayHidden();
    public void set_DisplayHidden(bool value);
    public double get_LineWidth();
    public void set_LineWidth(double value);
    public eDispBlanksAs get_DisplayEmptyCellsAs();
    public void set_DisplayEmptyCellsAs(eDispBlanksAs value);
    public eSparklineType get_Type();
    public void set_Type(eSparklineType value);
    public ExcelSparklineColor get_ColorSeries();
    public ExcelSparklineColor get_ColorNegative();
    public ExcelSparklineColor get_ColorAxis();
    public ExcelSparklineColor get_ColorMarkers();
    public ExcelSparklineColor get_ColorFirst();
    public ExcelSparklineColor get_ColorLast();
    public ExcelSparklineColor get_ColorHigh();
    public ExcelSparklineColor get_ColorLow();
    public double get_ManualMin();
    public void set_ManualMin(double value);
    public double get_ManualMax();
    public void set_ManualMax(double value);
    public eSparklineAxisMinMax get_MinAxisType();
    public void set_MinAxisType(eSparklineAxisMinMax value);
    public eSparklineAxisMinMax get_MaxAxisType();
    public void set_MaxAxisType(eSparklineAxisMinMax value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection : object {
    private ExcelWorksheet _ws;
    private List`1<ExcelSparklineGroup> _lst;
    private static string _extPath;
    private static string _searchPath;
    private static string _topSearchPath;
    private static string _topPath;
    public int Count { get; }
    public ExcelSparklineGroup Item { get; }
    internal ExcelSparklineGroupCollection(ExcelWorksheet ws);
    public int get_Count();
    public ExcelSparklineGroup Add(eSparklineType type, ExcelAddressBase locationRange, ExcelAddressBase dataRange);
    private ExcelSparklineGroup AddGroup(eSparklineType type, ExcelAddressBase locationRange, ExcelAddressBase dataRange, bool isRows);
    private ExcelSparklineGroup NewSparklineGroup();
    private void LoadSparklines();
    public ExcelSparklineGroup get_Item(int index);
    public sealed virtual IEnumerator`1<ExcelSparklineGroup> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void RemoveAt(int index);
    public void Remove(ExcelSparklineGroup sparklineGroup);
}
public class OfficeOpenXml.Style.Border : StyleBase {
    public ExcelBorderItem Left { get; }
    public ExcelBorderItem Right { get; }
    public ExcelBorderItem Top { get; }
    public ExcelBorderItem Bottom { get; }
    public ExcelBorderItem Diagonal { get; }
    public bool DiagonalUp { get; public set; }
    public bool DiagonalDown { get; public set; }
    internal string Id { get; }
    internal Border(ExcelStyles styles, ChangedEventHandler ChangedEvent, int PositionID, string address, int index);
    public ExcelBorderItem get_Left();
    public ExcelBorderItem get_Right();
    public ExcelBorderItem get_Top();
    public ExcelBorderItem get_Bottom();
    public ExcelBorderItem get_Diagonal();
    public bool get_DiagonalUp();
    public void set_DiagonalUp(bool value);
    public bool get_DiagonalDown();
    public void set_DiagonalDown(bool value);
    internal virtual string get_Id();
    public void BorderAround(ExcelBorderStyle Style);
    public void BorderAround(ExcelBorderStyle Style, Color Color);
    private void SetBorderColor(Color Color, ExcelAddressBase addr);
    private void SetBorderAroundStyle(ExcelBorderStyle Style, ExcelAddressBase addr);
}
public abstract class OfficeOpenXml.Style.Dxf.DxfStyleBase : object {
    internal ExcelStyles _styles;
    internal Action`3<eStyleClass, eStyleProperty, object> _callback;
    [CompilerGeneratedAttribute]
private bool <AllowChange>k__BackingField;
    internal string Id { get; }
    public bool HasValue { get; }
    internal bool AllowChange { get; internal set; }
    internal DxfStyleBase(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    public abstract virtual void Clear();
    internal abstract virtual string get_Id();
    public abstract virtual bool get_HasValue();
    internal abstract virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetValuesFromXml(XmlHelper helper);
    internal abstract virtual void SetStyle();
    internal abstract virtual DxfStyleBase Clone();
    protected void SetValueColor(XmlHelper helper, string path, ExcelDxfColor color);
    internal void SetValueEnum(XmlHelper helper, string path, Enum v);
    internal void SetValue(XmlHelper helper, string path, object v);
    internal void SetValue(XmlHelper helper, string path, string s);
    internal void SetValueBool(XmlHelper helper, string path, Nullable`1<bool> v);
    internal string GetAsString(object v);
    [CompilerGeneratedAttribute]
internal bool get_AllowChange();
    [CompilerGeneratedAttribute]
internal void set_AllowChange(bool value);
    internal ExcelDxfColor GetColor(XmlHelper helper, string path, eStyleClass styleClass);
    internal static Nullable`1<ExcelUnderLineType> GetUnderLineEnum(string value);
    internal ExcelDxfBorderBase ToDxfBorderBaseStyle();
}
internal static class OfficeOpenXml.Style.Dxf.DxfStyleHandler : object {
    internal static void Load(ExcelWorkbook wb, ExcelStyles styles, ExcelStyleCollection`1<ExcelDxfStyleBase> dxfs, string path);
    internal static int CloneDxfStyle(ExcelStyles stylesFrom, ExcelStyles stylesTo, int styleId, string path);
    internal static void UpdateDxfXml(ExcelWorkbook wb);
    private static void UpdateTableStyles(ExcelWorkbook wb, ExcelStyles styles, XmlNode dxfsNode);
    private static void UpdateSlicerStyles(ExcelWorkbook wb, ExcelStyles styles, XmlNode dxfsNode);
    private static void UpdateDxfXmlWorksheet(ExcelWorkbook wb, ExcelStyles styles, XmlNode dxfsNode);
    private static void UpdateDxfXmlTables(ExcelStyles styles, XmlNode dxfsNode, ExcelWorksheet ws);
    private static void UpdateDxfXmlPivotTables(ExcelStyles styles, XmlNode dxfsNode, ExcelWorksheet ws);
    private static Nullable`1<int> AddDxfBorderNode(ExcelStyles styles, XmlNode dxfsNode, ExcelDxfBorderBase borderStyle);
    private static Nullable`1<int> AddDxfNode(ExcelStyleCollection`1<ExcelDxfStyleBase> dxfs, XmlNode dxfsNode, ExcelDxfStyleBase dxfStyle);
    private static void UpdateConditionalFormatting(ExcelWorksheet ws, ExcelStyleCollection`1<ExcelDxfStyleBase> dxfs, XmlNode dxfsNode);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfAlignment : DxfStyleBase {
    [CompilerGeneratedAttribute]
private Nullable`1<ExcelHorizontalAlignment> <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ExcelVerticalAlignment> <VerticalAlignment>k__BackingField;
    private Nullable`1<int> _textRotation;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WrapText>k__BackingField;
    private Nullable`1<int> _indent;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RelativeIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <JustifyLastLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShrinkToFit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReadingOrder>k__BackingField;
    public Nullable`1<ExcelHorizontalAlignment> HorizontalAlignment { get; public set; }
    public Nullable`1<ExcelVerticalAlignment> VerticalAlignment { get; public set; }
    public Nullable`1<int> TextRotation { get; public set; }
    public Nullable`1<bool> WrapText { get; public set; }
    public Nullable`1<int> Indent { get; public set; }
    public Nullable`1<int> RelativeIndent { get; public set; }
    public Nullable`1<bool> JustifyLastLine { get; public set; }
    public Nullable`1<bool> ShrinkToFit { get; public set; }
    public Nullable`1<int> ReadingOrder { get; public set; }
    public bool HasValue { get; }
    internal string Id { get; }
    internal ExcelDxfAlignment(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public Nullable`1<ExcelHorizontalAlignment> get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(Nullable`1<ExcelHorizontalAlignment> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ExcelVerticalAlignment> get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(Nullable`1<ExcelVerticalAlignment> value);
    public Nullable`1<int> get_TextRotation();
    public void set_TextRotation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WrapText();
    [CompilerGeneratedAttribute]
public void set_WrapText(Nullable`1<bool> value);
    public Nullable`1<int> get_Indent();
    public void set_Indent(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RelativeIndent();
    [CompilerGeneratedAttribute]
public void set_RelativeIndent(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_JustifyLastLine();
    [CompilerGeneratedAttribute]
public void set_JustifyLastLine(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShrinkToFit();
    [CompilerGeneratedAttribute]
public void set_ShrinkToFit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReadingOrder();
    [CompilerGeneratedAttribute]
public void set_ReadingOrder(Nullable`1<int> value);
    public void SetTextVertical();
    public virtual bool get_HasValue();
    internal virtual string get_Id();
    internal static string GetEmptyId();
    public virtual void Clear();
    internal virtual DxfStyleBase Clone();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    internal virtual void SetValuesFromXml(XmlHelper helper);
    private Nullable`1<T> GetEnumValue(string v);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase : DxfStyleBase {
    [CompilerGeneratedAttribute]
private ExcelDxfBorderItem <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderItem <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderItem <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderItem <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderItem <Horizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderItem <Vertical>k__BackingField;
    public ExcelDxfBorderItem Left { get; internal set; }
    public ExcelDxfBorderItem Right { get; internal set; }
    public ExcelDxfBorderItem Top { get; internal set; }
    public ExcelDxfBorderItem Bottom { get; internal set; }
    public ExcelDxfBorderItem Horizontal { get; internal set; }
    public ExcelDxfBorderItem Vertical { get; internal set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfBorderBase(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderItem get_Left();
    [CompilerGeneratedAttribute]
internal void set_Left(ExcelDxfBorderItem value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderItem get_Right();
    [CompilerGeneratedAttribute]
internal void set_Right(ExcelDxfBorderItem value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderItem get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(ExcelDxfBorderItem value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderItem get_Bottom();
    [CompilerGeneratedAttribute]
internal void set_Bottom(ExcelDxfBorderItem value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderItem get_Horizontal();
    [CompilerGeneratedAttribute]
internal void set_Horizontal(ExcelDxfBorderItem value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderItem get_Vertical();
    [CompilerGeneratedAttribute]
internal void set_Vertical(ExcelDxfBorderItem value);
    internal virtual string get_Id();
    internal string GetId();
    internal static string GetEmptyId();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    public virtual bool get_HasValue();
    public virtual void Clear();
    public void BorderAround(ExcelBorderStyle borderStyle, eThemeSchemeColor themeColor);
    public void BorderAround(ExcelBorderStyle borderStyle, Color color);
    internal virtual DxfStyleBase Clone();
    internal virtual void SetValuesFromXml(XmlHelper helper);
    private ExcelDxfBorderItem GetBorderItem(XmlHelper helper, string path, eStyleClass styleClass);
    private static Nullable`1<ExcelBorderStyle> GetBorderStyleEnum(string style);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem : DxfStyleBase {
    private eStyleClass _styleClass;
    private Nullable`1<ExcelBorderStyle> _style;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <Color>k__BackingField;
    public Nullable`1<ExcelBorderStyle> Style { get; public set; }
    public ExcelDxfColor Color { get; internal set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfBorderItem(ExcelStyles styles, eStyleClass styleClass, Action`3<eStyleClass, eStyleProperty, object> callback);
    public Nullable`1<ExcelBorderStyle> get_Style();
    public void set_Style(Nullable`1<ExcelBorderStyle> value);
    [CompilerGeneratedAttribute]
public ExcelDxfColor get_Color();
    [CompilerGeneratedAttribute]
internal void set_Color(ExcelDxfColor value);
    internal virtual string get_Id();
    internal static string GetEmptyId();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    public virtual bool get_HasValue();
    public virtual void Clear();
    internal virtual void SetStyle();
    internal virtual DxfStyleBase Clone();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfColor : DxfStyleBase {
    private eStyleClass _styleClass;
    private Nullable`1<eThemeSchemeColor> _theme;
    private Nullable`1<int> _index;
    private Nullable`1<bool> _auto;
    private Nullable`1<double> _tint;
    private Nullable`1<Color> _color;
    public Nullable`1<eThemeSchemeColor> Theme { get; public set; }
    public Nullable`1<int> Index { get; public set; }
    public Nullable`1<bool> Auto { get; public set; }
    public Nullable`1<double> Tint { get; public set; }
    public Nullable`1<Color> Color { get; public set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfColor(ExcelStyles styles, eStyleClass styleClass, Action`3<eStyleClass, eStyleProperty, object> callback);
    public Nullable`1<eThemeSchemeColor> get_Theme();
    public void set_Theme(Nullable`1<eThemeSchemeColor> value);
    public Nullable`1<int> get_Index();
    public void set_Index(Nullable`1<int> value);
    public Nullable`1<bool> get_Auto();
    public void set_Auto(Nullable`1<bool> value);
    public Nullable`1<double> get_Tint();
    public void set_Tint(Nullable`1<double> value);
    public Nullable`1<Color> get_Color();
    public void set_Color(Nullable`1<Color> value);
    internal virtual string get_Id();
    internal static string GetEmptyId();
    public void SetColor(Color color);
    public void SetColor(eThemeSchemeColor color);
    public void SetColor(ExcelIndexedColor color);
    public void SetAuto();
    public void SetColor(int alpha, int red, int green, int blue);
    internal virtual void SetStyle();
    internal virtual DxfStyleBase Clone();
    public virtual bool get_HasValue();
    public virtual void Clear();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal Color GetColorAsColor(bool whiteAsDefault);
    internal string LookupColor();
    private string GetThemeColor(eThemeSchemeColor theme, double tint);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfFill : DxfStyleBase {
    private Nullable`1<ExcelFillStyle> _patternType;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <PatternColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfGradientFill <Gradient>k__BackingField;
    public Nullable`1<ExcelFillStyle> PatternType { get; public set; }
    public ExcelDxfColor PatternColor { get; internal set; }
    public ExcelDxfColor BackgroundColor { get; internal set; }
    internal string Id { get; }
    public eDxfFillStyle Style { get; public set; }
    public ExcelDxfGradientFill Gradient { get; internal set; }
    public bool HasValue { get; }
    internal ExcelDxfFill(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    public Nullable`1<ExcelFillStyle> get_PatternType();
    public void set_PatternType(Nullable`1<ExcelFillStyle> value);
    [CompilerGeneratedAttribute]
public ExcelDxfColor get_PatternColor();
    [CompilerGeneratedAttribute]
internal void set_PatternColor(ExcelDxfColor value);
    [CompilerGeneratedAttribute]
public ExcelDxfColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
internal void set_BackgroundColor(ExcelDxfColor value);
    internal virtual string get_Id();
    internal static string GetEmptyId();
    public eDxfFillStyle get_Style();
    public void set_Style(eDxfFillStyle value);
    [CompilerGeneratedAttribute]
public ExcelDxfGradientFill get_Gradient();
    [CompilerGeneratedAttribute]
internal void set_Gradient(ExcelDxfGradientFill value);
    internal virtual void CreateNodes(XmlHelper helper, string path);
    public virtual bool get_HasValue();
    public virtual void Clear();
    internal virtual DxfStyleBase Clone();
    internal virtual void SetStyle();
    internal virtual void SetValuesFromXml(XmlHelper helper);
    internal static Nullable`1<ExcelFillStyle> GetPatternTypeEnum(string patternType);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfFont : ExcelDxfFontBase {
    private Nullable`1<float> _size;
    private string _name;
    private Nullable`1<int> _family;
    private ExcelVerticalAlignmentFont _verticalAlign;
    private Nullable`1<bool> _outline;
    private Nullable`1<bool> _shadow;
    private Nullable`1<bool> _condense;
    private Nullable`1<bool> _extend;
    private Nullable`1<eThemeFontCollectionType> _scheme;
    public Nullable`1<float> Size { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<int> Family { get; public set; }
    public ExcelVerticalAlignmentFont VerticalAlign { get; public set; }
    public Nullable`1<bool> Outline { get; public set; }
    public Nullable`1<bool> Shadow { get; public set; }
    public Nullable`1<bool> Condense { get; public set; }
    public Nullable`1<bool> Extend { get; public set; }
    public Nullable`1<eThemeFontCollectionType> Scheme { get; public set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfFont(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    public Nullable`1<float> get_Size();
    public void set_Size(Nullable`1<float> value);
    public string get_Name();
    public void set_Name(string value);
    public Nullable`1<int> get_Family();
    public void set_Family(Nullable`1<int> value);
    public ExcelVerticalAlignmentFont get_VerticalAlign();
    public void set_VerticalAlign(ExcelVerticalAlignmentFont value);
    public Nullable`1<bool> get_Outline();
    public void set_Outline(Nullable`1<bool> value);
    public Nullable`1<bool> get_Shadow();
    public void set_Shadow(Nullable`1<bool> value);
    public Nullable`1<bool> get_Condense();
    public void set_Condense(Nullable`1<bool> value);
    public Nullable`1<bool> get_Extend();
    public void set_Extend(Nullable`1<bool> value);
    public Nullable`1<eThemeFontCollectionType> get_Scheme();
    public void set_Scheme(Nullable`1<eThemeFontCollectionType> value);
    internal virtual string get_Id();
    private string GetVAlign();
    internal virtual DxfStyleBase Clone();
    public virtual bool get_HasValue();
    public virtual void Clear();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetValuesFromXml(XmlHelper helper);
    internal virtual void SetStyle();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfFontBase : DxfStyleBase {
    private Nullable`1<bool> _bold;
    private Nullable`1<bool> _italic;
    private Nullable`1<bool> _strike;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <Color>k__BackingField;
    private Nullable`1<ExcelUnderLineType> _underline;
    public Nullable`1<bool> Bold { get; public set; }
    public Nullable`1<bool> Italic { get; public set; }
    public Nullable`1<bool> Strike { get; public set; }
    public ExcelDxfColor Color { get; public set; }
    public Nullable`1<ExcelUnderLineType> Underline { get; public set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfFontBase(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    public Nullable`1<bool> get_Bold();
    public void set_Bold(Nullable`1<bool> value);
    public Nullable`1<bool> get_Italic();
    public void set_Italic(Nullable`1<bool> value);
    public Nullable`1<bool> get_Strike();
    public void set_Strike(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ExcelDxfColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ExcelDxfColor value);
    public Nullable`1<ExcelUnderLineType> get_Underline();
    public void set_Underline(Nullable`1<ExcelUnderLineType> value);
    internal virtual string get_Id();
    internal static string GetEmptyId();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    public virtual bool get_HasValue();
    public virtual void Clear();
    internal virtual DxfStyleBase Clone();
    internal virtual void SetValuesFromXml(XmlHelper helper);
    private Nullable`1<ExcelUnderLineType> GetUnderLine(XmlHelper helper);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill : DxfStyleBase {
    [CompilerGeneratedAttribute]
private ExcelDxfGradientFillColorCollection <Colors>k__BackingField;
    private Nullable`1<eDxfGradientFillType> _gradientType;
    private Nullable`1<double> _degree;
    private Nullable`1<double> _left;
    private Nullable`1<double> _right;
    private Nullable`1<double> _top;
    private Nullable`1<double> _bottom;
    public bool HasValue { get; }
    internal string Id { get; }
    public ExcelDxfGradientFillColorCollection Colors { get; private set; }
    public Nullable`1<eDxfGradientFillType> GradientType { get; public set; }
    public Nullable`1<double> Degree { get; public set; }
    public Nullable`1<double> Left { get; public set; }
    public Nullable`1<double> Right { get; public set; }
    public Nullable`1<double> Top { get; public set; }
    public Nullable`1<double> Bottom { get; public set; }
    internal ExcelDxfGradientFill(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    public virtual bool get_HasValue();
    internal virtual string get_Id();
    internal static string GetEmptyId();
    public virtual void Clear();
    [CompilerGeneratedAttribute]
public ExcelDxfGradientFillColorCollection get_Colors();
    [CompilerGeneratedAttribute]
private void set_Colors(ExcelDxfGradientFillColorCollection value);
    internal virtual DxfStyleBase Clone();
    public Nullable`1<eDxfGradientFillType> get_GradientType();
    public void set_GradientType(Nullable`1<eDxfGradientFillType> value);
    public Nullable`1<double> get_Degree();
    public void set_Degree(Nullable`1<double> value);
    public Nullable`1<double> get_Left();
    public void set_Left(Nullable`1<double> value);
    public Nullable`1<double> get_Right();
    public void set_Right(Nullable`1<double> value);
    public Nullable`1<double> get_Top();
    public void set_Top(Nullable`1<double> value);
    public Nullable`1<double> get_Bottom();
    public void set_Bottom(Nullable`1<double> value);
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    internal virtual void SetValuesFromXml(XmlHelper helper);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColor : DxfStyleBase {
    [CompilerGeneratedAttribute]
private double <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfColor <Color>k__BackingField;
    public double Position { get; }
    public ExcelDxfColor Color { get; internal set; }
    public bool HasValue { get; }
    internal string Id { get; }
    internal ExcelDxfGradientFillColor(ExcelStyles styles, double position, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public double get_Position();
    [CompilerGeneratedAttribute]
public ExcelDxfColor get_Color();
    [CompilerGeneratedAttribute]
internal void set_Color(ExcelDxfColor value);
    public virtual bool get_HasValue();
    internal virtual string get_Id();
    internal static string GetEmptyId();
    public virtual void Clear();
    internal virtual DxfStyleBase Clone();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection : DxfStyleBase {
    private List`1<ExcelDxfGradientFillColor> _lst;
    public ExcelDxfGradientFillColor Item { get; }
    public ExcelDxfGradientFillColor Item { get; }
    public int Count { get; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfGradientFillColorCollection(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    public sealed virtual IEnumerator`1<ExcelDxfGradientFillColor> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ExcelDxfGradientFillColor get_Item(int index);
    public ExcelDxfGradientFillColor get_Item(double position);
    public ExcelDxfGradientFillColor Add(double position);
    public int get_Count();
    internal virtual string get_Id();
    public virtual bool get_HasValue();
    public void RemoveAt(int index);
    public void RemoveAt(double position);
    public void Remove(ExcelDxfGradientFillColor item);
    public virtual void Clear();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    internal virtual DxfStyleBase Clone();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat : DxfStyleBase {
    private int _numFmtID;
    private string _format;
    public int NumFmtID { get; internal set; }
    public string Format { get; public set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfNumberFormat(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    public int get_NumFmtID();
    internal void set_NumFmtID(int value);
    public string get_Format();
    public void set_Format(string value);
    internal virtual string get_Id();
    internal static string GetEmptyId();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    public virtual bool get_HasValue();
    public virtual void Clear();
    internal virtual DxfStyleBase Clone();
    internal virtual void SetValuesFromXml(XmlHelper helper);
    internal virtual void SetStyle();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfProtection : DxfStyleBase {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    public Nullable`1<bool> Locked { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public bool HasValue { get; }
    internal string Id { get; }
    internal ExcelDxfProtection(ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Locked();
    [CompilerGeneratedAttribute]
public void set_Locked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(Nullable`1<bool> value);
    public virtual bool get_HasValue();
    internal virtual string get_Id();
    internal static string GetEmptyId();
    public virtual void Clear();
    internal virtual DxfStyleBase Clone();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    internal virtual void SetValuesFromXml(XmlHelper helper);
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfSlicerStyle : ExcelDxfStyleFont {
    internal ExcelDxfSlicerStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    internal virtual DxfStyleBase Clone();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfStyle : ExcelDxfStyleBase {
    [CompilerGeneratedAttribute]
private ExcelDxfFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfNumberFormat <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfAlignment <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfProtection <Protection>k__BackingField;
    public ExcelDxfFont Font { get; internal set; }
    public ExcelDxfNumberFormat NumberFormat { get; internal set; }
    public ExcelDxfAlignment Alignment { get; internal set; }
    public ExcelDxfProtection Protection { get; internal set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public ExcelDxfFont get_Font();
    [CompilerGeneratedAttribute]
internal void set_Font(ExcelDxfFont value);
    [CompilerGeneratedAttribute]
public ExcelDxfNumberFormat get_NumberFormat();
    [CompilerGeneratedAttribute]
internal void set_NumberFormat(ExcelDxfNumberFormat value);
    [CompilerGeneratedAttribute]
public ExcelDxfAlignment get_Alignment();
    [CompilerGeneratedAttribute]
internal void set_Alignment(ExcelDxfAlignment value);
    [CompilerGeneratedAttribute]
public ExcelDxfProtection get_Protection();
    [CompilerGeneratedAttribute]
internal void set_Protection(ExcelDxfProtection value);
    internal virtual string get_Id();
    public virtual bool get_HasValue();
    internal virtual DxfStyleBase Clone();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    public virtual void Clear();
}
public abstract class OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase : DxfStyleBase {
    internal XmlHelperInstance _helper;
    [CompilerGeneratedAttribute]
private int <DxfId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfFill <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderBase <Border>k__BackingField;
    internal int DxfId { get; internal set; }
    public ExcelDxfFill Fill { get; public set; }
    public ExcelDxfBorderBase Border { get; public set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfStyleBase(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
internal virtual int get_DxfId();
    [CompilerGeneratedAttribute]
internal virtual void set_DxfId(int value);
    [CompilerGeneratedAttribute]
public ExcelDxfFill get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(ExcelDxfFill value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderBase get_Border();
    [CompilerGeneratedAttribute]
public void set_Border(ExcelDxfBorderBase value);
    internal virtual string get_Id();
    internal virtual string GetId();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    public virtual bool get_HasValue();
    public virtual void Clear();
    internal ExcelDxfStyle ToDxfStyle();
    internal ExcelDxfSlicerStyle ToDxfSlicerStyle();
    internal ExcelDxfTableStyle ToDxfTableStyle();
    internal ExcelDxfStyleLimitedFont ToDxfLimitedStyle();
    internal ExcelDxfStyleConditionalFormatting ToDxfConditionalFormattingStyle();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting : ExcelDxfStyleLimitedFont {
    [CompilerGeneratedAttribute]
private ExcelDxfNumberFormat <NumberFormat>k__BackingField;
    public ExcelDxfNumberFormat NumberFormat { get; internal set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfStyleConditionalFormatting(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public ExcelDxfNumberFormat get_NumberFormat();
    [CompilerGeneratedAttribute]
internal void set_NumberFormat(ExcelDxfNumberFormat value);
    internal virtual string get_Id();
    internal virtual string GetId();
    public virtual bool get_HasValue();
    internal virtual DxfStyleBase Clone();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    public virtual void Clear();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfStyleFont : ExcelDxfStyleBase {
    [CompilerGeneratedAttribute]
private ExcelDxfFont <Font>k__BackingField;
    public ExcelDxfFont Font { get; internal set; }
    internal string Id { get; }
    public bool HasValue { get; }
    internal ExcelDxfStyleFont(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public ExcelDxfFont get_Font();
    [CompilerGeneratedAttribute]
internal void set_Font(ExcelDxfFont value);
    internal virtual string get_Id();
    internal virtual string GetId();
    public virtual bool get_HasValue();
    internal virtual DxfStyleBase Clone();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    internal virtual void SetStyle();
    public virtual void Clear();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfStyleLimitedFont : ExcelDxfStyleBase {
    [CompilerGeneratedAttribute]
private ExcelDxfFontBase <Font>k__BackingField;
    public ExcelDxfFontBase Font { get; internal set; }
    public bool HasValue { get; }
    internal string Id { get; }
    internal ExcelDxfStyleLimitedFont(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
    [CompilerGeneratedAttribute]
public ExcelDxfFontBase get_Font();
    [CompilerGeneratedAttribute]
internal void set_Font(ExcelDxfFontBase value);
    internal virtual DxfStyleBase Clone();
    internal virtual void CreateNodes(XmlHelper helper, string path);
    public virtual bool get_HasValue();
    internal virtual void SetStyle();
    public virtual void Clear();
    internal virtual string get_Id();
    internal virtual string GetId();
}
public class OfficeOpenXml.Style.Dxf.ExcelDxfTableStyle : ExcelDxfStyleLimitedFont {
    internal ExcelDxfTableStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles);
    internal ExcelDxfTableStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, Action`3<eStyleClass, eStyleProperty, object> callback);
}
public enum OfficeOpenXml.Style.eDxfFillStyle : Enum {
    public int value__;
    public static eDxfFillStyle PatternFill;
    public static eDxfFillStyle GradientFill;
}
public enum OfficeOpenXml.Style.eDxfGradientFillType : Enum {
    public int value__;
    public static eDxfGradientFillType Linear;
    public static eDxfGradientFillType Path;
}
public enum OfficeOpenXml.Style.eStrikeType : Enum {
    public int value__;
    public static eStrikeType Double;
    public static eStrikeType No;
    public static eStrikeType Single;
}
internal enum OfficeOpenXml.Style.eStyleClass : Enum {
    public int value__;
    public static eStyleClass Numberformat;
    public static eStyleClass Font;
    public static eStyleClass Border;
    public static eStyleClass BorderTop;
    public static eStyleClass BorderLeft;
    public static eStyleClass BorderBottom;
    public static eStyleClass BorderRight;
    public static eStyleClass BorderDiagonal;
    public static eStyleClass Fill;
    public static eStyleClass GradientFill;
    public static eStyleClass FillBackgroundColor;
    public static eStyleClass FillPatternColor;
    public static eStyleClass FillGradientColor1;
    public static eStyleClass FillGradientColor2;
    public static eStyleClass NamedStyle;
    public static eStyleClass Style;
}
internal enum OfficeOpenXml.Style.eStyleProperty : Enum {
    public int value__;
    public static eStyleProperty Format;
    public static eStyleProperty Name;
    public static eStyleProperty Size;
    public static eStyleProperty Bold;
    public static eStyleProperty Italic;
    public static eStyleProperty Strike;
    public static eStyleProperty Color;
    public static eStyleProperty Tint;
    public static eStyleProperty IndexedColor;
    public static eStyleProperty AutoColor;
    public static eStyleProperty GradientColor;
    public static eStyleProperty Family;
    public static eStyleProperty Scheme;
    public static eStyleProperty UnderlineType;
    public static eStyleProperty HorizontalAlign;
    public static eStyleProperty VerticalAlign;
    public static eStyleProperty Border;
    public static eStyleProperty NamedStyle;
    public static eStyleProperty Style;
    public static eStyleProperty PatternType;
    public static eStyleProperty ReadingOrder;
    public static eStyleProperty WrapText;
    public static eStyleProperty TextRotation;
    public static eStyleProperty Locked;
    public static eStyleProperty Hidden;
    public static eStyleProperty ShrinkToFit;
    public static eStyleProperty BorderDiagonalUp;
    public static eStyleProperty BorderDiagonalDown;
    public static eStyleProperty GradientDegree;
    public static eStyleProperty GradientType;
    public static eStyleProperty GradientTop;
    public static eStyleProperty GradientBottom;
    public static eStyleProperty GradientLeft;
    public static eStyleProperty GradientRight;
    public static eStyleProperty XfId;
    public static eStyleProperty Indent;
    public static eStyleProperty QuotePrefix;
    public static eStyleProperty Theme;
    public static eStyleProperty Charset;
    public static eStyleProperty JustifyLastLine;
}
public enum OfficeOpenXml.Style.eTableStyleElement : Enum {
    public int value__;
    public static eTableStyleElement BlankRow;
    public static eTableStyleElement FirstColumn;
    public static eTableStyleElement FirstColumnStripe;
    public static eTableStyleElement FirstColumnSubheading;
    public static eTableStyleElement FirstHeaderCell;
    public static eTableStyleElement FirstRowStripe;
    public static eTableStyleElement FirstRowSubheading;
    public static eTableStyleElement FirstSubtotalColumn;
    public static eTableStyleElement FirstSubtotalRow;
    public static eTableStyleElement HeaderRow;
    public static eTableStyleElement LastColumn;
    public static eTableStyleElement PageFieldLabels;
    public static eTableStyleElement PageFieldValues;
    public static eTableStyleElement SecondColumnStripe;
    public static eTableStyleElement SecondColumnSubheading;
    public static eTableStyleElement SecondRowStripe;
    public static eTableStyleElement SecondRowSubheading;
    public static eTableStyleElement SecondSubtotalColumn;
    public static eTableStyleElement SecondSubtotalRow;
    public static eTableStyleElement ThirdColumnSubheading;
    public static eTableStyleElement ThirdRowSubheading;
    public static eTableStyleElement ThirdSubtotalColumn;
    public static eTableStyleElement ThirdSubtotalRow;
    public static eTableStyleElement TotalRow;
    public static eTableStyleElement WholeTable;
    public static eTableStyleElement LastHeaderCell;
    public static eTableStyleElement FirstTotalCell;
    public static eTableStyleElement LastTotalCell;
}
public enum OfficeOpenXml.Style.eUnderLineType : Enum {
    public int value__;
    public static eUnderLineType Dash;
    public static eUnderLineType DashHeavy;
    public static eUnderLineType DashLong;
    public static eUnderLineType DashLongHeavy;
    public static eUnderLineType Double;
    public static eUnderLineType DotDash;
    public static eUnderLineType DotDashHeavy;
    public static eUnderLineType DotDotDash;
    public static eUnderLineType DotDotDashHeavy;
    public static eUnderLineType Dotted;
    public static eUnderLineType DottedHeavy;
    public static eUnderLineType Heavy;
    public static eUnderLineType None;
    public static eUnderLineType Single;
    public static eUnderLineType Wavy;
    public static eUnderLineType WavyDbl;
    public static eUnderLineType WavyHeavy;
    public static eUnderLineType Words;
}
public class OfficeOpenXml.Style.ExcelBandedTableStyleElement : ExcelTableStyleElement {
    private int _bandSize;
    public int BandSize { get; public set; }
    internal ExcelBandedTableStyleElement(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, eTableStyleElement type);
    public int get_BandSize();
    public void set_BandSize(int value);
    internal virtual void CreateNode();
}
public class OfficeOpenXml.Style.ExcelBorderItem : StyleBase {
    private eStyleClass _cls;
    private StyleBase _parent;
    private ExcelColor _color;
    public ExcelBorderStyle Style { get; public set; }
    public ExcelColor Color { get; }
    internal string Id { get; }
    internal ExcelBorderItem(ExcelStyles styles, ChangedEventHandler ChangedEvent, int worksheetID, string address, eStyleClass cls, StyleBase parent);
    public ExcelBorderStyle get_Style();
    public void set_Style(ExcelBorderStyle value);
    public ExcelColor get_Color();
    internal virtual string get_Id();
    internal virtual void SetIndex(int index);
    private ExcelBorderItemXml GetSource();
}
public enum OfficeOpenXml.Style.ExcelBorderStyle : Enum {
    public int value__;
    public static ExcelBorderStyle None;
    public static ExcelBorderStyle Hair;
    public static ExcelBorderStyle Dotted;
    public static ExcelBorderStyle DashDot;
    public static ExcelBorderStyle Thin;
    public static ExcelBorderStyle DashDotDot;
    public static ExcelBorderStyle Dashed;
    public static ExcelBorderStyle MediumDashDotDot;
    public static ExcelBorderStyle MediumDashed;
    public static ExcelBorderStyle MediumDashDot;
    public static ExcelBorderStyle Thick;
    public static ExcelBorderStyle Medium;
    public static ExcelBorderStyle Double;
}
public class OfficeOpenXml.Style.ExcelColor : StyleBase {
    private eStyleClass _cls;
    private StyleBase _parent;
    public Nullable`1<eThemeSchemeColor> Theme { get; internal set; }
    public decimal Tint { get; public set; }
    public string Rgb { get; internal set; }
    public int Indexed { get; public set; }
    public bool Auto { get; private set; }
    internal string Id { get; }
    internal ExcelColor(ExcelStyles styles, ChangedEventHandler ChangedEvent, int worksheetID, string address, eStyleClass cls, StyleBase parent);
    public sealed virtual Nullable`1<eThemeSchemeColor> get_Theme();
    internal void set_Theme(Nullable`1<eThemeSchemeColor> value);
    public sealed virtual decimal get_Tint();
    public sealed virtual void set_Tint(decimal value);
    public sealed virtual string get_Rgb();
    internal void set_Rgb(string value);
    public sealed virtual int get_Indexed();
    public sealed virtual void set_Indexed(int value);
    public sealed virtual bool get_Auto();
    private void set_Auto(bool value);
    public sealed virtual void SetColor(Color color);
    public sealed virtual void SetColor(eThemeSchemeColor color);
    public sealed virtual void SetColor(ExcelIndexedColor color);
    public sealed virtual void SetAuto();
    public void SetColor(int alpha, int red, int green, int blue);
    internal virtual string get_Id();
    private ExcelColorXml GetSource();
    internal virtual void SetIndex(int index);
    public string LookupColor();
    public string LookupColor(ExcelColor theColor);
    private string GetThemeColor(eThemeSchemeColor theme, double tint);
}
public class OfficeOpenXml.Style.ExcelFill : StyleBase {
    private ExcelColor _patternColor;
    private ExcelColor _backgroundColor;
    private ExcelGradientFill _gradient;
    public ExcelFillStyle PatternType { get; public set; }
    public ExcelColor PatternColor { get; }
    public ExcelColor BackgroundColor { get; }
    public ExcelGradientFill Gradient { get; }
    internal string Id { get; }
    internal ExcelFill(ExcelStyles styles, ChangedEventHandler ChangedEvent, int PositionID, string address, int index);
    public ExcelFillStyle get_PatternType();
    public void set_PatternType(ExcelFillStyle value);
    public ExcelColor get_PatternColor();
    public ExcelColor get_BackgroundColor();
    public ExcelGradientFill get_Gradient();
    internal virtual string get_Id();
    public void SetBackground(Color color, ExcelFillStyle fillStyle);
    public void SetBackground(ExcelIndexedColor color, ExcelFillStyle fillStyle);
    public void SetBackground(eThemeSchemeColor color, ExcelFillStyle fillStyle);
}
public enum OfficeOpenXml.Style.ExcelFillGradientType : Enum {
    public int value__;
    public static ExcelFillGradientType None;
    public static ExcelFillGradientType Linear;
    public static ExcelFillGradientType Path;
}
public enum OfficeOpenXml.Style.ExcelFillStyle : Enum {
    public int value__;
    public static ExcelFillStyle None;
    public static ExcelFillStyle Solid;
    public static ExcelFillStyle DarkGray;
    public static ExcelFillStyle MediumGray;
    public static ExcelFillStyle LightGray;
    public static ExcelFillStyle Gray125;
    public static ExcelFillStyle Gray0625;
    public static ExcelFillStyle DarkVertical;
    public static ExcelFillStyle DarkHorizontal;
    public static ExcelFillStyle DarkDown;
    public static ExcelFillStyle DarkUp;
    public static ExcelFillStyle DarkGrid;
    public static ExcelFillStyle DarkTrellis;
    public static ExcelFillStyle LightVertical;
    public static ExcelFillStyle LightHorizontal;
    public static ExcelFillStyle LightDown;
    public static ExcelFillStyle LightUp;
    public static ExcelFillStyle LightGrid;
    public static ExcelFillStyle LightTrellis;
}
public class OfficeOpenXml.Style.ExcelFont : StyleBase {
    public string Name { get; public set; }
    public float Size { get; public set; }
    public int Family { get; public set; }
    public ExcelColor Color { get; }
    public string Scheme { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Strike { get; public set; }
    public bool UnderLine { get; public set; }
    public ExcelUnderLineType UnderLineType { get; public set; }
    public ExcelVerticalAlignmentFont VerticalAlign { get; public set; }
    public Nullable`1<int> Charset { get; public set; }
    internal string Id { get; }
    internal ExcelFont(ExcelStyles styles, ChangedEventHandler ChangedEvent, int PositionID, string address, int index);
    public string get_Name();
    public void set_Name(string value);
    private void CheckNormalStyleChange();
    public float get_Size();
    public void set_Size(float value);
    public int get_Family();
    public void set_Family(int value);
    public ExcelColor get_Color();
    public string get_Scheme();
    public void set_Scheme(string value);
    public bool get_Bold();
    public void set_Bold(bool value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public bool get_Strike();
    public void set_Strike(bool value);
    public bool get_UnderLine();
    public void set_UnderLine(bool value);
    public ExcelUnderLineType get_UnderLineType();
    public void set_UnderLineType(ExcelUnderLineType value);
    public ExcelVerticalAlignmentFont get_VerticalAlign();
    public void set_VerticalAlign(ExcelVerticalAlignmentFont value);
    public Nullable`1<int> get_Charset();
    public void set_Charset(Nullable`1<int> value);
    public void SetFromFont(string name, float size, bool bold, bool italic, bool underline, bool strikeout);
    internal virtual string get_Id();
}
public class OfficeOpenXml.Style.ExcelGradientFill : StyleBase {
    private ExcelColor _gradientColor1;
    private ExcelColor _gradientColor2;
    public double Degree { get; public set; }
    public ExcelFillGradientType Type { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public ExcelColor Color1 { get; }
    public ExcelColor Color2 { get; }
    internal string Id { get; }
    internal ExcelGradientFill(ExcelStyles styles, ChangedEventHandler ChangedEvent, int PositionID, string address, int index);
    public double get_Degree();
    public void set_Degree(double value);
    public ExcelFillGradientType get_Type();
    public void set_Type(ExcelFillGradientType value);
    public double get_Top();
    public void set_Top(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Right();
    public void set_Right(double value);
    public ExcelColor get_Color1();
    public ExcelColor get_Color2();
    internal virtual string get_Id();
}
public enum OfficeOpenXml.Style.ExcelHorizontalAlignment : Enum {
    public int value__;
    public static ExcelHorizontalAlignment General;
    public static ExcelHorizontalAlignment Left;
    public static ExcelHorizontalAlignment Center;
    public static ExcelHorizontalAlignment CenterContinuous;
    public static ExcelHorizontalAlignment Right;
    public static ExcelHorizontalAlignment Fill;
    public static ExcelHorizontalAlignment Distributed;
    public static ExcelHorizontalAlignment Justify;
}
public enum OfficeOpenXml.Style.ExcelIndexedColor : Enum {
    public int value__;
    public static ExcelIndexedColor Indexed0;
    public static ExcelIndexedColor Indexed1;
    public static ExcelIndexedColor Indexed2;
    public static ExcelIndexedColor Indexed3;
    public static ExcelIndexedColor Indexed4;
    public static ExcelIndexedColor Indexed5;
    public static ExcelIndexedColor Indexed6;
    public static ExcelIndexedColor Indexed7;
    public static ExcelIndexedColor Indexed8;
    public static ExcelIndexedColor Indexed9;
    public static ExcelIndexedColor Indexed10;
    public static ExcelIndexedColor Indexed11;
    public static ExcelIndexedColor Indexed12;
    public static ExcelIndexedColor Indexed13;
    public static ExcelIndexedColor Indexed14;
    public static ExcelIndexedColor Indexed15;
    public static ExcelIndexedColor Indexed16;
    public static ExcelIndexedColor Indexed17;
    public static ExcelIndexedColor Indexed18;
    public static ExcelIndexedColor Indexed19;
    public static ExcelIndexedColor Indexed20;
    public static ExcelIndexedColor Indexed21;
    public static ExcelIndexedColor Indexed22;
    public static ExcelIndexedColor Indexed23;
    public static ExcelIndexedColor Indexed24;
    public static ExcelIndexedColor Indexed25;
    public static ExcelIndexedColor Indexed26;
    public static ExcelIndexedColor Indexed27;
    public static ExcelIndexedColor Indexed28;
    public static ExcelIndexedColor Indexed29;
    public static ExcelIndexedColor Indexed30;
    public static ExcelIndexedColor Indexed31;
    public static ExcelIndexedColor Indexed32;
    public static ExcelIndexedColor Indexed33;
    public static ExcelIndexedColor Indexed34;
    public static ExcelIndexedColor Indexed35;
    public static ExcelIndexedColor Indexed36;
    public static ExcelIndexedColor Indexed37;
    public static ExcelIndexedColor Indexed38;
    public static ExcelIndexedColor Indexed39;
    public static ExcelIndexedColor Indexed40;
    public static ExcelIndexedColor Indexed41;
    public static ExcelIndexedColor Indexed42;
    public static ExcelIndexedColor Indexed43;
    public static ExcelIndexedColor Indexed44;
    public static ExcelIndexedColor Indexed45;
    public static ExcelIndexedColor Indexed46;
    public static ExcelIndexedColor Indexed47;
    public static ExcelIndexedColor Indexed48;
    public static ExcelIndexedColor Indexed49;
    public static ExcelIndexedColor Indexed50;
    public static ExcelIndexedColor Indexed51;
    public static ExcelIndexedColor Indexed52;
    public static ExcelIndexedColor Indexed53;
    public static ExcelIndexedColor Indexed54;
    public static ExcelIndexedColor Indexed55;
    public static ExcelIndexedColor Indexed56;
    public static ExcelIndexedColor Indexed57;
    public static ExcelIndexedColor Indexed58;
    public static ExcelIndexedColor Indexed59;
    public static ExcelIndexedColor Indexed60;
    public static ExcelIndexedColor Indexed61;
    public static ExcelIndexedColor Indexed62;
    public static ExcelIndexedColor Indexed63;
    public static ExcelIndexedColor Indexed64SystemForeground;
    public static ExcelIndexedColor Indexed65SystemBackground;
}
public class OfficeOpenXml.Style.ExcelNumberFormat : StyleBase {
    [CompilerGeneratedAttribute]
private bool <BuildIn>k__BackingField;
    internal NumberFormatType _numberformatType;
    public int NumFmtID { get; }
    public string Format { get; public set; }
    internal string Id { get; }
    public bool BuildIn { get; private set; }
    internal bool IsDateFormat { get; }
    internal bool IsNumberFormat { get; }
    internal ExcelNumberFormat(ExcelStyles styles, ChangedEventHandler ChangedEvent, int PositionID, string Address, int index);
    public int get_NumFmtID();
    public string get_Format();
    public void set_Format(string value);
    internal virtual string get_Id();
    [CompilerGeneratedAttribute]
public bool get_BuildIn();
    [CompilerGeneratedAttribute]
private void set_BuildIn(bool value);
    internal static string GetFromBuildInFromID(int _numFmtId);
    internal static int GetFromBuildIdFromFormat(string format);
    internal bool get_IsDateFormat();
    internal bool get_IsNumberFormat();
    internal static NumberFormatType GetNumberFormatType(string format);
}
public class OfficeOpenXml.Style.ExcelParagraph : ExcelTextFont {
    private static string TextPath;
    public string Text { get; public set; }
    public bool IsFirstInParagraph { get; }
    public bool IsLastInParagraph { get; }
    internal ExcelParagraph(IPictureRelationDocument pictureRelationDocument, XmlNamespaceManager ns, XmlNode rootNode, string path, String[] schemaNodeOrder);
    public string get_Text();
    public void set_Text(string value);
    public bool get_IsFirstInParagraph();
    public bool get_IsLastInParagraph();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Style.ExcelParagraphCollection : XmlHelper {
    private List`1<ExcelParagraph> _list;
    private ExcelDrawing _drawing;
    private string _path;
    private List`1<XmlElement> _paragraphs;
    private float _defaultFontSize;
    public ExcelParagraph Item { get; }
    public int Count { get; }
    public string Text { get; public set; }
    internal ExcelParagraphCollection(ExcelDrawing drawing, XmlNamespaceManager ns, XmlNode topNode, string path, String[] schemaNodeOrder, float defaultFontSize);
    public ExcelParagraph get_Item(int Index);
    public int get_Count();
    public ExcelParagraph Add(string Text, bool NewParagraph);
    public void Clear();
    public void RemoveAt(int Index);
    public void Remove(ExcelParagraph Item);
    public string get_Text();
    public void set_Text(string value);
    private sealed virtual override IEnumerator`1<ExcelParagraph> System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelParagraph>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum OfficeOpenXml.Style.ExcelReadingOrder : Enum {
    public int value__;
    public static ExcelReadingOrder ContextDependent;
    public static ExcelReadingOrder LeftToRight;
    public static ExcelReadingOrder RightToLeft;
}
public class OfficeOpenXml.Style.ExcelRichText : object {
    [CompilerGeneratedAttribute]
private ExcelRichTextCollection <_collection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strike>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ExcelVerticalAlignmentFont> <VerticalAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelRichTextColor <ColorSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelUnderLineType <UnderLineType>k__BackingField;
    private string _text;
    internal ExcelRichTextCollection _collection { get; internal set; }
    public bool PreserveSpace { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Strike { get; public set; }
    public bool UnderLine { get; public set; }
    public Nullable`1<ExcelVerticalAlignmentFont> VerticalAlign { get; public set; }
    public float Size { get; public set; }
    public string FontName { get; public set; }
    public Color Color { get; public set; }
    public ExcelRichTextColor ColorSettings { get; public set; }
    public int Charset { get; public set; }
    public int Family { get; public set; }
    public ExcelUnderLineType UnderLineType { get; public set; }
    public string Text { get; public set; }
    public string HtmlText { get; }
    public bool HasDefaultValue { get; }
    internal ExcelRichText(string text, ExcelRichTextCollection collection);
    internal ExcelRichText(XmlReader xr, ExcelRichTextCollection collection);
    internal ExcelRichText(ExcelRichText rt, ExcelRichTextCollection collection);
    [CompilerGeneratedAttribute]
internal ExcelRichTextCollection get__collection();
    [CompilerGeneratedAttribute]
internal void set__collection(ExcelRichTextCollection value);
    [CompilerGeneratedAttribute]
public bool get_PreserveSpace();
    [CompilerGeneratedAttribute]
public void set_PreserveSpace(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strike();
    [CompilerGeneratedAttribute]
public void set_Strike(bool value);
    public bool get_UnderLine();
    public void set_UnderLine(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<ExcelVerticalAlignmentFont> get_VerticalAlign();
    [CompilerGeneratedAttribute]
public void set_VerticalAlign(Nullable`1<ExcelVerticalAlignmentFont> value);
    [CompilerGeneratedAttribute]
public float get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(float value);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    public Color get_Color();
    public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public ExcelRichTextColor get_ColorSettings();
    [CompilerGeneratedAttribute]
public void set_ColorSettings(ExcelRichTextColor value);
    [CompilerGeneratedAttribute]
public int get_Charset();
    [CompilerGeneratedAttribute]
public void set_Charset(int value);
    [CompilerGeneratedAttribute]
public int get_Family();
    [CompilerGeneratedAttribute]
public void set_Family(int value);
    [CompilerGeneratedAttribute]
public ExcelUnderLineType get_UnderLineType();
    [CompilerGeneratedAttribute]
public void set_UnderLineType(ExcelUnderLineType value);
    public string get_Text();
    public void set_Text(string value);
    public static ExcelUnderLineType GetUnderlineType(string v);
    public static ExcelVerticalAlignmentFont GetUVerticalAlignmentFont(string v);
    private string ValueHasWhiteSpaces();
    public string get_HtmlText();
    internal void WriteHtmlText(StringBuilder sb);
    internal void ReadrPr(XmlReader xr);
    internal void ReadColor(XmlReader xr);
    internal void WriteRichTextAttributes(StringBuilder sb);
    internal void WriteRichTextColorAttributes(StringBuilder sb);
    public bool get_HasDefaultValue();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Style.ExcelRichTextCollection : object {
    private List`1<ExcelRichText> _list;
    internal ExcelRangeBase _cells;
    internal ExcelWorkbook _wb;
    internal bool _isComment;
    public ExcelRichText Item { get; }
    public int Count { get; }
    public string Text { get; public set; }
    public string HtmlText { get; }
    internal ExcelRichTextCollection(ExcelWorkbook wb, ExcelRangeBase cells);
    internal ExcelRichTextCollection(string s, ExcelRangeBase cells);
    internal ExcelRichTextCollection(ExcelRichTextCollection rtc, ExcelRangeBase cells);
    internal ExcelRichTextCollection(XmlReader xr, ExcelWorkbook wb);
    internal ExcelRichTextCollection(XmlNamespaceManager ns, XmlNode textElem, ExcelRangeBase cells);
    public ExcelRichText get_Item(int Index);
    public int get_Count();
    public ExcelRichText Add(string Text, bool NewParagraph);
    public ExcelRichText Insert(int index, string text);
    public void Clear();
    public void RemoveAt(int Index);
    public void Remove(ExcelRichText Item);
    public string get_Text();
    public void set_Text(string value);
    public string get_HtmlText();
    internal string GetXML();
    private sealed virtual override IEnumerator`1<ExcelRichText> System.Collections.Generic.IEnumerable<OfficeOpenXml.Style.ExcelRichText>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Style.ExcelRichTextColor : object {
    [CompilerGeneratedAttribute]
private Color <Rgb>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<eThemeSchemeColor> <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Tint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Auto>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Indexed>k__BackingField;
    public bool HasAttributes { get; }
    public Color Rgb { get; public set; }
    public Nullable`1<eThemeSchemeColor> Theme { get; public set; }
    public Nullable`1<double> Tint { get; public set; }
    public Nullable`1<bool> Auto { get; public set; }
    public Nullable`1<int> Indexed { get; public set; }
    public bool get_HasAttributes();
    [CompilerGeneratedAttribute]
public Color get_Rgb();
    [CompilerGeneratedAttribute]
public void set_Rgb(Color value);
    [CompilerGeneratedAttribute]
public Nullable`1<eThemeSchemeColor> get_Theme();
    [CompilerGeneratedAttribute]
public void set_Theme(Nullable`1<eThemeSchemeColor> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Tint();
    [CompilerGeneratedAttribute]
public void set_Tint(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Auto();
    [CompilerGeneratedAttribute]
public void set_Auto(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Indexed();
    [CompilerGeneratedAttribute]
public void set_Indexed(Nullable`1<int> value);
    internal ExcelRichTextColor Clone();
}
public class OfficeOpenXml.Style.ExcelSlicerTableStyleElement : XmlHelper {
    private ExcelStyles _styles;
    private ExcelDxfSlicerStyle _style;
    [CompilerGeneratedAttribute]
private eTableStyleElement <Type>k__BackingField;
    public ExcelDxfSlicerStyle Style { get; internal set; }
    public eTableStyleElement Type { get; }
    internal ExcelSlicerTableStyleElement(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, eTableStyleElement type);
    public ExcelDxfSlicerStyle get_Style();
    internal void set_Style(ExcelDxfSlicerStyle value);
    [CompilerGeneratedAttribute]
public eTableStyleElement get_Type();
    internal virtual void CreateNode();
}
public class OfficeOpenXml.Style.ExcelStyle : StyleBase {
    private ExcelXfs _xfs;
    [CompilerGeneratedAttribute]
private ExcelNumberFormat <Numberformat>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelFill <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private Border <Border>k__BackingField;
    private static string xfIdPath;
    [CompilerGeneratedAttribute]
private int <PositionID>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelStyles <Styles>k__BackingField;
    public ExcelNumberFormat Numberformat { get; public set; }
    public ExcelFont Font { get; public set; }
    public ExcelFill Fill { get; public set; }
    public Border Border { get; public set; }
    public ExcelHorizontalAlignment HorizontalAlignment { get; public set; }
    public ExcelVerticalAlignment VerticalAlignment { get; public set; }
    public bool JustifyLastLine { get; public set; }
    public bool WrapText { get; public set; }
    public ExcelReadingOrder ReadingOrder { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public int Indent { get; public set; }
    public int TextRotation { get; public set; }
    public bool Locked { get; public set; }
    public bool Hidden { get; public set; }
    public bool QuotePrefix { get; public set; }
    public int XfId { get; public set; }
    internal int PositionID { get; internal set; }
    internal ExcelStyles Styles { get; internal set; }
    internal string Id { get; }
    internal ExcelStyle(ExcelStyles styles, ChangedEventHandler ChangedEvent, int positionID, string Address, int xfsId);
    [CompilerGeneratedAttribute]
public ExcelNumberFormat get_Numberformat();
    [CompilerGeneratedAttribute]
public void set_Numberformat(ExcelNumberFormat value);
    [CompilerGeneratedAttribute]
public ExcelFont get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(ExcelFont value);
    [CompilerGeneratedAttribute]
public ExcelFill get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(ExcelFill value);
    [CompilerGeneratedAttribute]
public Border get_Border();
    [CompilerGeneratedAttribute]
public void set_Border(Border value);
    public ExcelHorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(ExcelHorizontalAlignment value);
    public ExcelVerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(ExcelVerticalAlignment value);
    public bool get_JustifyLastLine();
    public void set_JustifyLastLine(bool value);
    public bool get_WrapText();
    public void set_WrapText(bool value);
    public ExcelReadingOrder get_ReadingOrder();
    public void set_ReadingOrder(ExcelReadingOrder value);
    public void SetTextVertical();
    public bool get_ShrinkToFit();
    public void set_ShrinkToFit(bool value);
    public int get_Indent();
    public void set_Indent(int value);
    public int get_TextRotation();
    public void set_TextRotation(int value);
    public bool get_Locked();
    public void set_Locked(bool value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_QuotePrefix();
    public void set_QuotePrefix(bool value);
    public int get_XfId();
    public void set_XfId(int value);
    [CompilerGeneratedAttribute]
internal int get_PositionID();
    [CompilerGeneratedAttribute]
internal void set_PositionID(int value);
    [CompilerGeneratedAttribute]
internal ExcelStyles get_Styles();
    [CompilerGeneratedAttribute]
internal void set_Styles(ExcelStyles value);
    internal virtual string get_Id();
}
public class OfficeOpenXml.Style.ExcelTableStyleElement : XmlHelper {
    private ExcelStyles _styles;
    private ExcelDxfStyleLimitedFont _style;
    [CompilerGeneratedAttribute]
private eTableStyleElement <Type>k__BackingField;
    public ExcelDxfStyleLimitedFont Style { get; internal set; }
    public eTableStyleElement Type { get; }
    internal ExcelTableStyleElement(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles, eTableStyleElement type);
    public ExcelDxfStyleLimitedFont get_Style();
    internal void set_Style(ExcelDxfStyleLimitedFont value);
    [CompilerGeneratedAttribute]
public eTableStyleElement get_Type();
    internal virtual void CreateNode();
}
public class OfficeOpenXml.Style.ExcelTextFont : XmlHelper {
    private string _path;
    internal XmlNode _rootNode;
    private Action _initXml;
    private IPictureRelationDocument _pictureRelationDocument;
    private string _fontLatinPath;
    private string _fontEaPath;
    private string _fontCsPath;
    private string _boldPath;
    private string _underLinePath;
    private string _underLineColorPath;
    private string _italicPath;
    private string _strikePath;
    private string _sizePath;
    private ExcelDrawingFill _fill;
    private string _colorPath;
    private string _kernPath;
    public string LatinFont { get; public set; }
    public string EastAsianFont { get; public set; }
    public string ComplexFont { get; public set; }
    public bool Bold { get; public set; }
    public eUnderLineType UnderLine { get; public set; }
    public Color UnderLineColor { get; public set; }
    public bool Italic { get; public set; }
    public eStrikeType Strike { get; public set; }
    public float Size { get; public set; }
    public ExcelDrawingFill Fill { get; }
    [ObsoleteAttribute("Use the Fill property for more options")]
public Color Color { get; public set; }
    public double Kerning { get; public set; }
    internal ExcelTextFont(IPictureRelationDocument pictureRelationDocument, XmlNamespaceManager namespaceManager, XmlNode rootNode, string path, String[] schemaNodeOrder, Action initXml);
    public string get_LatinFont();
    public void set_LatinFont(string value);
    public string get_EastAsianFont();
    public void set_EastAsianFont(string value);
    public string get_ComplexFont();
    public void set_ComplexFont(string value);
    protected internal void CreateTopNode();
    public bool get_Bold();
    public void set_Bold(bool value);
    public eUnderLineType get_UnderLine();
    public void set_UnderLine(eUnderLineType value);
    internal void SetFromXml(XmlElement copyFromElement);
    public Color get_UnderLineColor();
    public void set_UnderLineColor(Color value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public eStrikeType get_Strike();
    public void set_Strike(eStrikeType value);
    public float get_Size();
    public void set_Size(float value);
    public ExcelDrawingFill get_Fill();
    public Color get_Color();
    public void set_Color(Color value);
    public double get_Kerning();
    public void set_Kerning(double value);
    public void SetFromFont(string name, float size, bool bold, bool italic, bool underline, bool strikeout);
}
public enum OfficeOpenXml.Style.ExcelUnderLineType : Enum {
    public int value__;
    public static ExcelUnderLineType None;
    public static ExcelUnderLineType Single;
    public static ExcelUnderLineType Double;
    public static ExcelUnderLineType SingleAccounting;
    public static ExcelUnderLineType DoubleAccounting;
}
public enum OfficeOpenXml.Style.ExcelVerticalAlignment : Enum {
    public int value__;
    public static ExcelVerticalAlignment Top;
    public static ExcelVerticalAlignment Center;
    public static ExcelVerticalAlignment Bottom;
    public static ExcelVerticalAlignment Distributed;
    public static ExcelVerticalAlignment Justify;
}
public enum OfficeOpenXml.Style.ExcelVerticalAlignmentFont : Enum {
    public int value__;
    public static ExcelVerticalAlignmentFont None;
    public static ExcelVerticalAlignmentFont Baseline;
    public static ExcelVerticalAlignmentFont Subscript;
    public static ExcelVerticalAlignmentFont Superscript;
}
internal interface OfficeOpenXml.Style.IColor {
    public bool Auto { get; }
    public int Indexed { get; public set; }
    public string Rgb { get; }
    public Nullable`1<eThemeSchemeColor> Theme { get; }
    public decimal Tint { get; public set; }
    public abstract virtual bool get_Auto();
    public abstract virtual int get_Indexed();
    public abstract virtual void set_Indexed(int value);
    public abstract virtual string get_Rgb();
    public abstract virtual Nullable`1<eThemeSchemeColor> get_Theme();
    public abstract virtual decimal get_Tint();
    public abstract virtual void set_Tint(decimal value);
    public abstract virtual void SetColor(Color color);
    public abstract virtual void SetColor(eThemeSchemeColor color);
    public abstract virtual void SetColor(ExcelIndexedColor color);
    public abstract virtual void SetAuto();
}
internal interface OfficeOpenXml.Style.IExcelCell {
    public object Value { get; public set; }
    public string StyleName { get; }
    public int StyleID { get; public set; }
    public ExcelStyle Style { get; }
    public Uri Hyperlink { get; public set; }
    public string Formula { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual string get_StyleName();
    public abstract virtual int get_StyleID();
    public abstract virtual void set_StyleID(int value);
    public abstract virtual ExcelStyle get_Style();
    public abstract virtual Uri get_Hyperlink();
    public abstract virtual void set_Hyperlink(Uri value);
    public abstract virtual string get_Formula();
    public abstract virtual void set_Formula(string value);
    public abstract virtual string get_FormulaR1C1();
    public abstract virtual void set_FormulaR1C1(string value);
}
internal interface OfficeOpenXml.Style.IStyle {
    public ulong Id { get; }
    public ExcelStyle ExcelStyle { get; }
    public abstract virtual void SetNewStyleID(string value);
    public abstract virtual ulong get_Id();
    public abstract virtual ExcelStyle get_ExcelStyle();
}
internal enum OfficeOpenXml.Style.NumberFormatType : Enum {
    public int value__;
    public static NumberFormatType Unset;
    public static NumberFormatType General;
    public static NumberFormatType Numeric;
    public static NumberFormatType Date;
    public static NumberFormatType String;
}
public abstract class OfficeOpenXml.Style.StyleBase : object {
    internal ExcelStyles _styles;
    internal ChangedEventHandler _ChangedEvent;
    internal int _positionID;
    internal string _address;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    internal int Index { get; internal set; }
    internal string Id { get; }
    internal StyleBase(ExcelStyles styles, ChangedEventHandler ChangedEvent, int PositionID, string Address);
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    internal abstract virtual string get_Id();
    internal virtual void SetIndex(int index);
}
internal class OfficeOpenXml.Style.StyleChangeEventArgs : EventArgs {
    internal eStyleClass StyleClass;
    internal eStyleProperty StyleProperty;
    internal object Value;
    [CompilerGeneratedAttribute]
private int <PositionID>k__BackingField;
    internal string Address;
    internal int PositionID { get; internal set; }
    internal StyleChangeEventArgs(eStyleClass styleclass, eStyleProperty styleProperty, object value, int positionID, string address);
    [CompilerGeneratedAttribute]
internal int get_PositionID();
    [CompilerGeneratedAttribute]
internal void set_PositionID(int value);
}
public class OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle : ExcelTableNamedStyleBase {
    public eTableNamedStyleAppliesTo AppliesTo { get; }
    public ExcelTableStyleElement PageFieldLabels { get; }
    public ExcelTableStyleElement PageFieldValues { get; }
    public ExcelTableStyleElement FirstSubtotalColumn { get; }
    public ExcelTableStyleElement SecondSubtotalColumn { get; }
    public ExcelTableStyleElement ThirdSubtotalColumn { get; }
    public ExcelTableStyleElement BlankRow { get; }
    public ExcelTableStyleElement FirstSubtotalRow { get; }
    public ExcelTableStyleElement SecondSubtotalRow { get; }
    public ExcelTableStyleElement ThirdSubtotalRow { get; }
    public ExcelTableStyleElement FirstColumnSubheading { get; }
    public ExcelTableStyleElement SecondColumnSubheading { get; }
    public ExcelTableStyleElement ThirdColumnSubheading { get; }
    public ExcelTableStyleElement FirstRowSubheading { get; }
    public ExcelTableStyleElement SecondRowSubheading { get; }
    public ExcelTableStyleElement ThirdRowSubheading { get; }
    internal ExcelPivotTableNamedStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles);
    public virtual eTableNamedStyleAppliesTo get_AppliesTo();
    public ExcelTableStyleElement get_PageFieldLabels();
    public ExcelTableStyleElement get_PageFieldValues();
    public ExcelTableStyleElement get_FirstSubtotalColumn();
    public ExcelTableStyleElement get_SecondSubtotalColumn();
    public ExcelTableStyleElement get_ThirdSubtotalColumn();
    public ExcelTableStyleElement get_BlankRow();
    public ExcelTableStyleElement get_FirstSubtotalRow();
    public ExcelTableStyleElement get_SecondSubtotalRow();
    public ExcelTableStyleElement get_ThirdSubtotalRow();
    public ExcelTableStyleElement get_FirstColumnSubheading();
    public ExcelTableStyleElement get_SecondColumnSubheading();
    public ExcelTableStyleElement get_ThirdColumnSubheading();
    public ExcelTableStyleElement get_FirstRowSubheading();
    public ExcelTableStyleElement get_SecondRowSubheading();
    public ExcelTableStyleElement get_ThirdRowSubheading();
}
public class OfficeOpenXml.Style.Table.ExcelTableAndPivotTableNamedStyle : ExcelPivotTableNamedStyle {
    public eTableNamedStyleAppliesTo AppliesTo { get; }
    public ExcelTableStyleElement LastHeaderCell { get; }
    public ExcelTableStyleElement FirstTotalCell { get; }
    public ExcelTableStyleElement LastTotalCell { get; }
    internal ExcelTableAndPivotTableNamedStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles);
    public virtual eTableNamedStyleAppliesTo get_AppliesTo();
    public ExcelTableStyleElement get_LastHeaderCell();
    public ExcelTableStyleElement get_FirstTotalCell();
    public ExcelTableStyleElement get_LastTotalCell();
}
public class OfficeOpenXml.Style.Table.ExcelTableNamedStyle : ExcelTableNamedStyleBase {
    public ExcelTableStyleElement LastHeaderCell { get; }
    public ExcelTableStyleElement FirstTotalCell { get; }
    public ExcelTableStyleElement LastTotalCell { get; }
    public eTableNamedStyleAppliesTo AppliesTo { get; }
    internal ExcelTableNamedStyle(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles);
    public ExcelTableStyleElement get_LastHeaderCell();
    public ExcelTableStyleElement get_FirstTotalCell();
    public ExcelTableStyleElement get_LastTotalCell();
    public virtual eTableNamedStyleAppliesTo get_AppliesTo();
}
public class OfficeOpenXml.Style.Table.ExcelTableNamedStyleAsType : object {
    private ExcelTableNamedStyleBase _tableNamedStyle;
    public ExcelTableNamedStyle TableStyle { get; }
    public ExcelPivotTableNamedStyle PivotTableStyle { get; }
    public ExcelTableAndPivotTableNamedStyle TableAndPivotTableStyle { get; }
    internal ExcelTableNamedStyleAsType(ExcelTableNamedStyleBase tableNamedStyle);
    public T Type();
    public ExcelTableNamedStyle get_TableStyle();
    public ExcelPivotTableNamedStyle get_PivotTableStyle();
    public ExcelTableAndPivotTableNamedStyle get_TableAndPivotTableStyle();
}
public abstract class OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase : XmlHelper {
    internal ExcelStyles _styles;
    internal Dictionary`2<eTableStyleElement, ExcelTableStyleElement> _dic;
    [CompilerGeneratedAttribute]
private ExcelTableNamedStyleAsType <As>k__BackingField;
    public eTableNamedStyleAppliesTo AppliesTo { get; }
    public string Name { get; public set; }
    public ExcelTableStyleElement WholeTable { get; }
    public ExcelBandedTableStyleElement FirstColumnStripe { get; }
    public ExcelBandedTableStyleElement SecondColumnStripe { get; }
    public ExcelBandedTableStyleElement FirstRowStripe { get; }
    public ExcelBandedTableStyleElement SecondRowStripe { get; }
    public ExcelTableStyleElement LastColumn { get; }
    public ExcelTableStyleElement FirstColumn { get; }
    public ExcelTableStyleElement HeaderRow { get; }
    public ExcelTableStyleElement TotalRow { get; }
    public ExcelTableStyleElement FirstHeaderCell { get; }
    public ExcelTableNamedStyleAsType As { get; }
    internal ExcelTableNamedStyleBase(XmlNamespaceManager nameSpaceManager, XmlNode topNode, ExcelStyles styles);
    internal static bool IsBanded(eTableStyleElement type);
    internal ExcelTableStyleElement GetTableStyleElement(eTableStyleElement element);
    public abstract virtual eTableNamedStyleAppliesTo get_AppliesTo();
    public string get_Name();
    public void set_Name(string value);
    public ExcelTableStyleElement get_WholeTable();
    public ExcelBandedTableStyleElement get_FirstColumnStripe();
    public ExcelBandedTableStyleElement get_SecondColumnStripe();
    public ExcelBandedTableStyleElement get_FirstRowStripe();
    public ExcelBandedTableStyleElement get_SecondRowStripe();
    public ExcelTableStyleElement get_LastColumn();
    public ExcelTableStyleElement get_FirstColumn();
    public ExcelTableStyleElement get_HeaderRow();
    public ExcelTableStyleElement get_TotalRow();
    public ExcelTableStyleElement get_FirstHeaderCell();
    [CompilerGeneratedAttribute]
public ExcelTableNamedStyleAsType get_As();
    internal void SetFromTemplate(ExcelTableNamedStyleBase templateStyle);
    internal void SetFromTemplate(TableStyles templateStyle);
    internal void SetFromTemplate(PivotTableStyles templateStyle);
    private void LoadTableTemplate(string folder, string styleName);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelBorderItemXml : StyleXmlHelper {
    private ExcelBorderStyle _borderStyle;
    private ExcelColorXml _color;
    private static string _colorPath;
    [CompilerGeneratedAttribute]
private bool <Exists>k__BackingField;
    public ExcelBorderStyle Style { get; public set; }
    public ExcelColorXml Color { get; internal set; }
    internal string Id { get; }
    public bool Exists { get; private set; }
    internal ExcelBorderItemXml(XmlNamespaceManager nameSpaceManager);
    internal ExcelBorderItemXml(XmlNamespaceManager nsm, XmlNode topNode);
    private ExcelBorderStyle GetBorderStyle(string style);
    public ExcelBorderStyle get_Style();
    public void set_Style(ExcelBorderStyle value);
    public ExcelColorXml get_Color();
    internal void set_Color(ExcelColorXml value);
    internal virtual string get_Id();
    internal ExcelBorderItemXml Copy();
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
    private string SetBorderString(ExcelBorderStyle Style);
    [CompilerGeneratedAttribute]
public bool get_Exists();
    [CompilerGeneratedAttribute]
private void set_Exists(bool value);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelBorderXml : StyleXmlHelper {
    private static string leftPath;
    private ExcelBorderItemXml _left;
    private static string rightPath;
    private ExcelBorderItemXml _right;
    private static string topPath;
    private ExcelBorderItemXml _top;
    private static string bottomPath;
    private ExcelBorderItemXml _bottom;
    private static string diagonalPath;
    private ExcelBorderItemXml _diagonal;
    private static string diagonalUpPath;
    private bool _diagonalUp;
    private static string diagonalDownPath;
    private bool _diagonalDown;
    internal string Id { get; }
    public ExcelBorderItemXml Left { get; internal set; }
    public ExcelBorderItemXml Right { get; internal set; }
    public ExcelBorderItemXml Top { get; internal set; }
    public ExcelBorderItemXml Bottom { get; internal set; }
    public ExcelBorderItemXml Diagonal { get; internal set; }
    public bool DiagonalUp { get; internal set; }
    public bool DiagonalDown { get; internal set; }
    internal ExcelBorderXml(XmlNamespaceManager nameSpaceManager);
    internal ExcelBorderXml(XmlNamespaceManager nsm, XmlNode topNode);
    internal virtual string get_Id();
    public ExcelBorderItemXml get_Left();
    internal void set_Left(ExcelBorderItemXml value);
    public ExcelBorderItemXml get_Right();
    internal void set_Right(ExcelBorderItemXml value);
    public ExcelBorderItemXml get_Top();
    internal void set_Top(ExcelBorderItemXml value);
    public ExcelBorderItemXml get_Bottom();
    internal void set_Bottom(ExcelBorderItemXml value);
    public ExcelBorderItemXml get_Diagonal();
    internal void set_Diagonal(ExcelBorderItemXml value);
    public bool get_DiagonalUp();
    internal void set_DiagonalUp(bool value);
    public bool get_DiagonalDown();
    internal void set_DiagonalDown(bool value);
    internal ExcelBorderXml Copy();
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelColorXml : StyleXmlHelper {
    private bool _auto;
    private Nullable`1<eThemeSchemeColor> _theme;
    private decimal _tint;
    private string _rgb;
    private int _indexed;
    [CompilerGeneratedAttribute]
private bool <Exists>k__BackingField;
    internal string Id { get; }
    public bool Auto { get; public set; }
    public Nullable`1<eThemeSchemeColor> Theme { get; public set; }
    public decimal Tint { get; public set; }
    public string Rgb { get; public set; }
    public int Indexed { get; public set; }
    internal bool Exists { get; private set; }
    internal ExcelColorXml(XmlNamespaceManager nameSpaceManager);
    internal ExcelColorXml(XmlNamespaceManager nsm, XmlNode topNode);
    internal virtual string get_Id();
    public bool get_Auto();
    public void set_Auto(bool value);
    public Nullable`1<eThemeSchemeColor> get_Theme();
    public void set_Theme(Nullable`1<eThemeSchemeColor> value);
    public decimal get_Tint();
    public void set_Tint(decimal value);
    public string get_Rgb();
    public void set_Rgb(string value);
    public int get_Indexed();
    public void set_Indexed(int value);
    internal void Clear();
    public void SetColor(Color color);
    public void SetColor(eThemeSchemeColor themeColorType);
    public void SetColor(ExcelIndexedColor indexedColor);
    internal ExcelColorXml Copy();
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
    [CompilerGeneratedAttribute]
internal bool get_Exists();
    [CompilerGeneratedAttribute]
private void set_Exists(bool value);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelFillXml : StyleXmlHelper {
    private static string fillPatternTypePath;
    internal ExcelFillStyle _fillPatternType;
    internal ExcelColorXml _patternColor;
    private static string _patternColorPath;
    internal ExcelColorXml _backgroundColor;
    private static string _backgroundColorPath;
    internal string Id { get; }
    public ExcelFillStyle PatternType { get; public set; }
    public ExcelColorXml PatternColor { get; internal set; }
    public ExcelColorXml BackgroundColor { get; internal set; }
    internal ExcelFillXml(XmlNamespaceManager nameSpaceManager);
    internal ExcelFillXml(XmlNamespaceManager nsm, XmlNode topNode);
    private ExcelFillStyle GetPatternType(string patternType);
    internal virtual string get_Id();
    public ExcelFillStyle get_PatternType();
    public void set_PatternType(ExcelFillStyle value);
    public ExcelColorXml get_PatternColor();
    internal void set_PatternColor(ExcelColorXml value);
    public ExcelColorXml get_BackgroundColor();
    internal void set_BackgroundColor(ExcelColorXml value);
    internal virtual ExcelFillXml Copy();
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
    private string SetPatternString(ExcelFillStyle pattern);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelFontXml : StyleXmlHelper {
    private static string namePath;
    private string _name;
    private static string sizePath;
    private float _size;
    private static string familyPath;
    private int _family;
    private ExcelColorXml _color;
    private static string _colorPath;
    private static string schemePath;
    private string _scheme;
    private static string boldPath;
    private bool _bold;
    private static string italicPath;
    private bool _italic;
    private static string strikePath;
    private bool _strike;
    private static string underLinedPath;
    private ExcelUnderLineType _underlineType;
    private static string verticalAlignPath;
    private string _verticalAlign;
    private static string _charsetPath;
    private Nullable`1<int> _charset;
    internal string Id { get; }
    public string Name { get; public set; }
    public float Size { get; public set; }
    public int Family { get; public set; }
    public ExcelColorXml Color { get; internal set; }
    public string Scheme { get; internal set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Strike { get; public set; }
    public bool UnderLine { get; public set; }
    public ExcelUnderLineType UnderLineType { get; public set; }
    public string VerticalAlign { get; public set; }
    public Nullable`1<int> Charset { get; public set; }
    internal ExcelFontXml(XmlNamespaceManager nameSpaceManager);
    internal ExcelFontXml(XmlNamespaceManager nsm, XmlNode topNode);
    internal virtual string get_Id();
    public string get_Name();
    public void set_Name(string value);
    public float get_Size();
    public void set_Size(float value);
    public int get_Family();
    public void set_Family(int value);
    public ExcelColorXml get_Color();
    internal void set_Color(ExcelColorXml value);
    public string get_Scheme();
    internal void set_Scheme(string value);
    public bool get_Bold();
    public void set_Bold(bool value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public bool get_Strike();
    public void set_Strike(bool value);
    public bool get_UnderLine();
    public void set_UnderLine(bool value);
    public ExcelUnderLineType get_UnderLineType();
    public void set_UnderLineType(ExcelUnderLineType value);
    public string get_VerticalAlign();
    public void set_VerticalAlign(string value);
    public Nullable`1<int> get_Charset();
    public void set_Charset(Nullable`1<int> value);
    public void SetFromFont(string name, float size, bool bold, bool italic, bool underline, bool strikeout);
    internal static float GetFontHeight(string name, float size);
    internal ExcelFontXml Copy();
    internal virtual XmlNode CreateXmlNode(XmlNode topElement);
}
internal class OfficeOpenXml.Style.XmlAccess.ExcelFormatTranslator : object {
    private static Char[] _escapeChars;
    [CompilerGeneratedAttribute]
private List`1<FormatPart> <Formats>k__BackingField;
    private CultureInfo _ci;
    [CompilerGeneratedAttribute]
private eFormatType <DataType>k__BackingField;
    private int _numerator;
    private int _denomerator;
    internal List`1<FormatPart> Formats { get; private set; }
    internal CultureInfo Culture { get; internal set; }
    internal bool HasCulture { get; }
    internal eFormatType DataType { get; private set; }
    internal ExcelFormatTranslator(string format, int numFmtID);
    private static ExcelFormatTranslator();
    private bool ContainsGeneral(String& format);
    [CompilerGeneratedAttribute]
internal List`1<FormatPart> get_Formats();
    [CompilerGeneratedAttribute]
private void set_Formats(List`1<FormatPart> value);
    internal CultureInfo get_Culture();
    internal void set_Culture(CultureInfo value);
    internal bool get_HasCulture();
    [CompilerGeneratedAttribute]
internal eFormatType get_DataType();
    [CompilerGeneratedAttribute]
private void set_DataType(eFormatType value);
    private void ToNetFormat(string ExcelFormat, bool forColWidth);
    private bool NextCharIsTimeOperator(string excelFormat, int pos);
    private static void SetDecimal(List`1<int> lstDec, StringBuilder sb);
    internal string FormatFraction(double d, FormatPart f);
    private string FmtInt(double value, string format);
    internal FormatPart GetFormatPart(object value);
    internal static string GetGeneralFormatFromDoubleValue(double d);
    internal object GetRoundedValue(object value);
    internal object GetPivotTableValue(object value);
    private int GetDecimalsFromFormat(string netFormat);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml : ExcelFillXml {
    private static string _typePath;
    [CompilerGeneratedAttribute]
private ExcelFillGradientType <Type>k__BackingField;
    private static string _degreePath;
    [CompilerGeneratedAttribute]
private double <Degree>k__BackingField;
    private static string _gradientColor1Path;
    [CompilerGeneratedAttribute]
private ExcelColorXml <GradientColor1>k__BackingField;
    private static string _gradientColor2Path;
    [CompilerGeneratedAttribute]
private ExcelColorXml <GradientColor2>k__BackingField;
    private static string _bottomPath;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    private static string _topPath;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    private static string _leftPath;
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    private static string _rightPath;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    public ExcelFillGradientType Type { get; internal set; }
    public double Degree { get; internal set; }
    public ExcelColorXml GradientColor1 { get; private set; }
    public ExcelColorXml GradientColor2 { get; private set; }
    public double Bottom { get; internal set; }
    public double Top { get; internal set; }
    public double Left { get; internal set; }
    public double Right { get; internal set; }
    internal string Id { get; }
    internal ExcelGradientFillXml(XmlNamespaceManager nameSpaceManager);
    internal ExcelGradientFillXml(XmlNamespaceManager nsm, XmlNode topNode);
    [CompilerGeneratedAttribute]
public ExcelFillGradientType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(ExcelFillGradientType value);
    [CompilerGeneratedAttribute]
public double get_Degree();
    [CompilerGeneratedAttribute]
internal void set_Degree(double value);
    [CompilerGeneratedAttribute]
public ExcelColorXml get_GradientColor1();
    [CompilerGeneratedAttribute]
private void set_GradientColor1(ExcelColorXml value);
    [CompilerGeneratedAttribute]
public ExcelColorXml get_GradientColor2();
    [CompilerGeneratedAttribute]
private void set_GradientColor2(ExcelColorXml value);
    [CompilerGeneratedAttribute]
public double get_Bottom();
    [CompilerGeneratedAttribute]
internal void set_Bottom(double value);
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(double value);
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
internal void set_Left(double value);
    [CompilerGeneratedAttribute]
public double get_Right();
    [CompilerGeneratedAttribute]
internal void set_Right(double value);
    internal virtual string get_Id();
    internal virtual ExcelFillXml Copy();
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml : StyleXmlHelper {
    private ExcelStyles _styles;
    private int _styleXfId;
    private static string idPath;
    private int _xfId;
    private static string buildInIdPath;
    [CompilerGeneratedAttribute]
private int <BuildInId>k__BackingField;
    private static string customBuiltinPath;
    [CompilerGeneratedAttribute]
private bool <CustomBuildin>k__BackingField;
    private static string namePath;
    private string _name;
    private ExcelStyle _style;
    private static string uidPath;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    internal string Id { get; }
    public int StyleXfId { get; public set; }
    internal int XfId { get; internal set; }
    public int BuildInId { get; public set; }
    public bool CustomBuildin { get; public set; }
    public string Name { get; internal set; }
    public ExcelStyle Style { get; internal set; }
    internal string Uid { get; internal set; }
    internal ExcelNamedStyleXml(XmlNamespaceManager nameSpaceManager, ExcelStyles styles);
    internal ExcelNamedStyleXml(XmlNamespaceManager NameSpaceManager, XmlNode topNode, ExcelStyles styles);
    internal virtual string get_Id();
    public int get_StyleXfId();
    public void set_StyleXfId(int value);
    internal int get_XfId();
    internal void set_XfId(int value);
    [CompilerGeneratedAttribute]
public int get_BuildInId();
    [CompilerGeneratedAttribute]
public void set_BuildInId(int value);
    [CompilerGeneratedAttribute]
public bool get_CustomBuildin();
    [CompilerGeneratedAttribute]
public void set_CustomBuildin(bool value);
    public string get_Name();
    internal void set_Name(string value);
    public ExcelStyle get_Style();
    internal void set_Style(ExcelStyle value);
    [CompilerGeneratedAttribute]
internal string get_Uid();
    [CompilerGeneratedAttribute]
internal void set_Uid(string value);
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
}
public class OfficeOpenXml.Style.XmlAccess.ExcelNumberFormatXml : StyleXmlHelper {
    [CompilerGeneratedAttribute]
private bool <BuildIn>k__BackingField;
    private int _numFmtId;
    private static string fmtPath;
    private string _format;
    private ExcelFormatTranslator _translator;
    public bool BuildIn { get; private set; }
    public int NumFmtId { get; public set; }
    internal string Id { get; }
    public string Format { get; public set; }
    internal ExcelFormatTranslator FormatTranslator { get; }
    internal ExcelNumberFormatXml(XmlNamespaceManager nameSpaceManager);
    internal ExcelNumberFormatXml(XmlNamespaceManager nameSpaceManager, bool buildIn);
    internal ExcelNumberFormatXml(XmlNamespaceManager nameSpaceManager, bool buildIn, int numFmtId, string format);
    internal ExcelNumberFormatXml(XmlNamespaceManager nsm, XmlNode topNode);
    [CompilerGeneratedAttribute]
public bool get_BuildIn();
    [CompilerGeneratedAttribute]
private void set_BuildIn(bool value);
    public int get_NumFmtId();
    public void set_NumFmtId(int value);
    internal virtual string get_Id();
    public string get_Format();
    public void set_Format(string value);
    internal string GetNewID(int NumFmtId, string Format);
    internal static void AddBuildIn(XmlNamespaceManager NameSpaceManager, ExcelStyleCollection`1<ExcelNumberFormatXml> NumberFormats);
    private static void AddLocalizedFormat(XmlNamespaceManager nameSpaceManager, ExcelStyleCollection`1<ExcelNumberFormatXml> numberFormats, Dictionary`2<int, string> customFormats, int numFmtId, string format);
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
    internal ExcelFormatTranslator get_FormatTranslator();
}
public class OfficeOpenXml.Style.XmlAccess.ExcelXfs : StyleXmlHelper {
    private ExcelStyles _styles;
    [CompilerGeneratedAttribute]
private int <XfId>k__BackingField;
    private int _numFmtId;
    [CompilerGeneratedAttribute]
private int <FontId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FillId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BorderId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isBuildIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ApplyNumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ApplyFont>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ApplyFill>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ApplyBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ApplyAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ApplyProtection>k__BackingField;
    private ExcelNumberFormatXml _numberformat;
    private static string horizontalAlignPath;
    [CompilerGeneratedAttribute]
private ExcelHorizontalAlignment <HorizontalAlignment>k__BackingField;
    private static string verticalAlignPath;
    [CompilerGeneratedAttribute]
private ExcelVerticalAlignment <VerticalAlignment>k__BackingField;
    private static string justifyLastLine;
    [CompilerGeneratedAttribute]
private bool <JustifyLastLine>k__BackingField;
    private static string wrapTextPath;
    [CompilerGeneratedAttribute]
private bool <WrapText>k__BackingField;
    private string textRotationPath;
    private int _textRotation;
    private static string lockedPath;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    private static string hiddenPath;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    private static string quotePrefixPath;
    [CompilerGeneratedAttribute]
private bool <QuotePrefix>k__BackingField;
    private static string readingOrderPath;
    private ExcelReadingOrder _readingOrder;
    private static string shrinkToFitPath;
    [CompilerGeneratedAttribute]
private bool <ShrinkToFit>k__BackingField;
    private static string indentPath;
    private int _indent;
    public int XfId { get; public set; }
    internal int NumberFormatId { get; internal set; }
    internal int FontId { get; internal set; }
    internal int FillId { get; internal set; }
    internal int BorderId { get; internal set; }
    private bool isBuildIn { get; private set; }
    internal Nullable`1<bool> ApplyNumberFormat { get; internal set; }
    internal Nullable`1<bool> ApplyFont { get; internal set; }
    internal Nullable`1<bool> ApplyFill { get; internal set; }
    internal Nullable`1<bool> ApplyBorder { get; internal set; }
    internal Nullable`1<bool> ApplyAlignment { get; internal set; }
    internal Nullable`1<bool> ApplyProtection { get; internal set; }
    public ExcelNumberFormatXml Numberformat { get; }
    public ExcelFontXml Font { get; }
    public ExcelFillXml Fill { get; }
    public ExcelBorderXml Border { get; }
    public ExcelHorizontalAlignment HorizontalAlignment { get; public set; }
    public ExcelVerticalAlignment VerticalAlignment { get; public set; }
    public bool JustifyLastLine { get; public set; }
    public bool WrapText { get; public set; }
    public int TextRotation { get; public set; }
    public bool Locked { get; public set; }
    public bool Hidden { get; public set; }
    public bool QuotePrefix { get; public set; }
    public ExcelReadingOrder ReadingOrder { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public int Indent { get; public set; }
    internal string Id { get; }
    internal ExcelXfs(XmlNamespaceManager nameSpaceManager, ExcelStyles styles);
    internal ExcelXfs(XmlNamespaceManager nsm, XmlNode topNode, ExcelStyles styles);
    private ExcelReadingOrder GetReadingOrder(string value);
    private ExcelHorizontalAlignment GetHorizontalAlign(string align);
    private ExcelVerticalAlignment GetVerticalAlign(string align);
    [CompilerGeneratedAttribute]
public int get_XfId();
    [CompilerGeneratedAttribute]
public void set_XfId(int value);
    internal int get_NumberFormatId();
    internal void set_NumberFormatId(int value);
    [CompilerGeneratedAttribute]
internal int get_FontId();
    [CompilerGeneratedAttribute]
internal void set_FontId(int value);
    [CompilerGeneratedAttribute]
internal int get_FillId();
    [CompilerGeneratedAttribute]
internal void set_FillId(int value);
    [CompilerGeneratedAttribute]
internal int get_BorderId();
    [CompilerGeneratedAttribute]
internal void set_BorderId(int value);
    [CompilerGeneratedAttribute]
private bool get_isBuildIn();
    [CompilerGeneratedAttribute]
private void set_isBuildIn(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ApplyNumberFormat();
    [CompilerGeneratedAttribute]
internal void set_ApplyNumberFormat(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ApplyFont();
    [CompilerGeneratedAttribute]
internal void set_ApplyFont(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ApplyFill();
    [CompilerGeneratedAttribute]
internal void set_ApplyFill(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ApplyBorder();
    [CompilerGeneratedAttribute]
internal void set_ApplyBorder(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ApplyAlignment();
    [CompilerGeneratedAttribute]
internal void set_ApplyAlignment(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ApplyProtection();
    [CompilerGeneratedAttribute]
internal void set_ApplyProtection(Nullable`1<bool> value);
    public ExcelNumberFormatXml get_Numberformat();
    public ExcelFontXml get_Font();
    public ExcelFillXml get_Fill();
    public ExcelBorderXml get_Border();
    [CompilerGeneratedAttribute]
public ExcelHorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(ExcelHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public ExcelVerticalAlignment get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(ExcelVerticalAlignment value);
    [CompilerGeneratedAttribute]
public bool get_JustifyLastLine();
    [CompilerGeneratedAttribute]
public void set_JustifyLastLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_WrapText();
    [CompilerGeneratedAttribute]
public void set_WrapText(bool value);
    public int get_TextRotation();
    public void set_TextRotation(int value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
public void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuotePrefix();
    [CompilerGeneratedAttribute]
public void set_QuotePrefix(bool value);
    public ExcelReadingOrder get_ReadingOrder();
    public void set_ReadingOrder(ExcelReadingOrder value);
    [CompilerGeneratedAttribute]
public bool get_ShrinkToFit();
    [CompilerGeneratedAttribute]
public void set_ShrinkToFit(bool value);
    public int get_Indent();
    public void set_Indent(int value);
    internal void RegisterEvent(ExcelXfs xf);
    internal virtual string get_Id();
    internal ExcelXfs Copy();
    internal ExcelXfs Copy(ExcelStyles styles);
    internal int GetNewID(ExcelStyleCollection`1<ExcelXfs> xfsCol, StyleBase styleObject, eStyleClass styleClass, eStyleProperty styleProperty, object value);
    private int GetIdBorder(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    private void SetBorderItem(ExcelBorderItemXml excelBorderItem, eStyleProperty styleProperty, object value);
    private int GetIdFill(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    private int GetIdGradientFill(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    private int GetIdNumberFormat(eStyleProperty styleProperty, object value);
    private int GetIdFont(eStyleProperty styleProperty, object value);
    internal virtual XmlNode CreateXmlNode(XmlNode topNode);
    internal XmlNode CreateXmlNode(XmlNode topNode, bool isCellStyleXsf);
    private string SetAlignString(Enum align);
}
public abstract class OfficeOpenXml.Style.XmlAccess.StyleXmlHelper : XmlHelper {
    internal long useCnt;
    internal int newID;
    internal string Id { get; }
    internal StyleXmlHelper(XmlNamespaceManager nameSpaceManager);
    internal StyleXmlHelper(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    internal abstract virtual XmlNode CreateXmlNode(XmlNode top);
    internal abstract virtual string get_Id();
    internal bool GetBoolValue(XmlNode topNode, string path);
}
public enum OfficeOpenXml.Table.ApplyDataFrom : Enum {
    public int value__;
    public static ApplyDataFrom ColumnNamesToCells;
    public static ApplyDataFrom CellsToColumnNames;
}
public class OfficeOpenXml.Table.ExcelTable : ExcelTableDxfBase {
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <TableXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TableUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationshipID>k__BackingField;
    private static string ID_PATH;
    private static string NAME_PATH;
    private static string DISPLAY_NAME_PATH;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <WorkSheet>k__BackingField;
    private ExcelAddressBase _address;
    internal ExcelTableColumnCollection _cols;
    private TableStyles _tableStyle;
    private static string HEADERROWCOUNT_PATH;
    private static string AUTOFILTER_PATH;
    private static string AUTOFILTER_ADDRESS_PATH;
    private ExcelAutoFilter _autoFilter;
    private static string TOTALSROWCOUNT_PATH;
    private static string TOTALSROWSHOWN_PATH;
    private static string STYLENAME_PATH;
    private static string SHOWFIRSTCOLUMN_PATH;
    private static string SHOWLASTCOLUMN_PATH;
    private static string SHOWROWSTRIPES_PATH;
    private static string SHOWCOLUMNSTRIPES_PATH;
    private static string TOTALSROWCELLSTYLE_PATH;
    private static string DATACELLSTYLE_PATH;
    private static string HEADERROWCELLSTYLE_PATH;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderBase <HeaderRowBorderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfBorderBase <TableBorderStyle>k__BackingField;
    private TableSorter _tableSorter;
    private static string SortStatePath;
    private SortState _sortState;
    internal ZipPackagePart Part { get; internal set; }
    public XmlDocument TableXml { get; public set; }
    public Uri TableUri { get; internal set; }
    internal string RelationshipID { get; internal set; }
    internal int Id { get; internal set; }
    public string Name { get; public set; }
    public ExcelWorksheet WorkSheet { get; public set; }
    public ExcelAddressBase Address { get; internal set; }
    public ExcelRangeBase Range { get; }
    internal ExcelRangeBase DataRange { get; }
    public ExcelTableColumnCollection Columns { get; }
    public TableStyles TableStyle { get; public set; }
    public bool ShowHeader { get; public set; }
    internal ExcelAddressBase AutoFilterAddress { get; }
    public ExcelAutoFilter AutoFilter { get; }
    public bool ShowFilter { get; public set; }
    public bool ShowTotal { get; public set; }
    public string StyleName { get; public set; }
    public bool ShowFirstColumn { get; public set; }
    public bool ShowLastColumn { get; public set; }
    public bool ShowRowStripes { get; public set; }
    public bool ShowColumnStripes { get; public set; }
    public string TotalsRowCellStyle { get; public set; }
    public string DataCellStyleName { get; public set; }
    public string HeaderRowCellStyle { get; public set; }
    internal Nullable`1<int> HeaderRowBorderDxfId { get; internal set; }
    public ExcelDxfBorderBase HeaderRowBorderStyle { get; public set; }
    internal Nullable`1<int> TableBorderDxfId { get; internal set; }
    public ExcelDxfBorderBase TableBorderStyle { get; public set; }
    public SortState SortState { get; }
    internal ExcelTable(ZipPackageRelationship rel, ExcelWorksheet sheet);
    internal ExcelTable(ExcelWorksheet sheet, ExcelAddressBase address, string name, int tblId);
    private void Init();
    internal string UpdateAndReturnValidName(int index, string newName, string oldName, ICollection`1<string> names);
    private string GetStartXml(string name, int tblId);
    internal static string CleanDisplayName(string name);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
public XmlDocument get_TableXml();
    [CompilerGeneratedAttribute]
public void set_TableXml(XmlDocument value);
    [CompilerGeneratedAttribute]
public Uri get_TableUri();
    [CompilerGeneratedAttribute]
internal void set_TableUri(Uri value);
    [CompilerGeneratedAttribute]
internal string get_RelationshipID();
    [CompilerGeneratedAttribute]
internal void set_RelationshipID(string value);
    internal int get_Id();
    internal void set_Id(int value);
    public string get_Name();
    public void set_Name(string value);
    internal void DeleteMe();
    [CompilerGeneratedAttribute]
public ExcelWorksheet get_WorkSheet();
    [CompilerGeneratedAttribute]
public void set_WorkSheet(ExcelWorksheet value);
    public ExcelAddressBase get_Address();
    internal void set_Address(ExcelAddressBase value);
    public ExcelRangeBase get_Range();
    internal ExcelRangeBase get_DataRange();
    public string ToText();
    public IExcelHtmlTableExporter CreateHtmlExporter();
    public string ToText(ExcelOutputTextFormat format);
    public Task`1<string> ToTextAsync();
    public Task`1<string> ToTextAsync(ExcelOutputTextFormat format);
    public void SaveToText(FileInfo file, ExcelOutputTextFormat format);
    public void SaveToText(Stream stream, ExcelOutputTextFormat format);
    [AsyncStateMachineAttribute("OfficeOpenXml.Table.ExcelTable/<SaveToTextAsync>d__51")]
public Task SaveToTextAsync(Stream stream, ExcelOutputTextFormat format);
    [AsyncStateMachineAttribute("OfficeOpenXml.Table.ExcelTable/<SaveToTextAsync>d__52")]
public Task SaveToTextAsync(FileInfo file, ExcelOutputTextFormat format);
    [AsyncStateMachineAttribute("OfficeOpenXml.Table.ExcelTable/<SaveToJsonAsync>d__53")]
public Task SaveToJsonAsync(Stream stream);
    [AsyncStateMachineAttribute("OfficeOpenXml.Table.ExcelTable/<SaveToJsonAsync>d__54")]
public Task SaveToJsonAsync(Stream stream, Action`1<JsonTableExportSettings> settings);
    [AsyncStateMachineAttribute("OfficeOpenXml.Table.ExcelTable/<SaveToJsonInternalAsync>d__55")]
private Task SaveToJsonInternalAsync(Stream stream, JsonTableExportSettings s);
    public DataTable ToDataTable();
    public string ToJson();
    public string ToJson(Action`1<JsonTableExportSettings> settings);
    public void SaveToJson(Stream stream);
    public void SaveToJson(Stream stream, Action`1<JsonTableExportSettings> settings);
    private void SaveToJsonInternal(Stream stream, JsonTableExportSettings s);
    private string ToJsonString(JsonTableExportSettings s);
    public DataTable ToDataTable(ToDataTableOptions options);
    public DataTable ToDataTable(Action`1<ToDataTableOptions> configHandler);
    public List`1<T> ToCollection();
    public List`1<T> ToCollection(Action`1<ToCollectionTableOptions> options);
    public List`1<T> ToCollection(ToCollectionTableOptions options);
    public List`1<T> ToCollection(Func`2<ToCollectionRow, T> setRow);
    public List`1<T> ToCollectionWithMappings(Func`2<ToCollectionRow, T> setRow, Action`1<ToCollectionTableOptions> options);
    public List`1<T> ToCollectionWithMappings(Func`2<ToCollectionRow, T> setRow, ToCollectionTableOptions options);
    public ExcelTableColumnCollection get_Columns();
    public TableStyles get_TableStyle();
    public void set_TableStyle(TableStyles value);
    public void SyncColumnNames(ApplyDataFrom dataOrigin, bool syncEmptyCells);
    private void OverwriteRows();
    private void OverwriteColumnNames(bool setValueOnCellIfNull);
    public bool get_ShowHeader();
    public void set_ShowHeader(bool value);
    internal ExcelAddressBase get_AutoFilterAddress();
    public ExcelAutoFilter get_AutoFilter();
    private void WriteAutoFilter(bool showTotal);
    private void SetAutoFilter();
    public bool get_ShowFilter();
    public void set_ShowFilter(bool value);
    public bool get_ShowTotal();
    public void set_ShowTotal(bool value);
    public string get_StyleName();
    public void set_StyleName(string value);
    private TableStyles GetTableStyle(string value);
    public bool get_ShowFirstColumn();
    public void set_ShowFirstColumn(bool value);
    public bool get_ShowLastColumn();
    public void set_ShowLastColumn(bool value);
    public bool get_ShowRowStripes();
    public void set_ShowRowStripes(bool value);
    public bool get_ShowColumnStripes();
    public void set_ShowColumnStripes(bool value);
    public string get_TotalsRowCellStyle();
    public void set_TotalsRowCellStyle(string value);
    public string get_DataCellStyleName();
    public void set_DataCellStyleName(string value);
    public string get_HeaderRowCellStyle();
    public void set_HeaderRowCellStyle(string value);
    public sealed virtual bool Equals(ExcelTable x, ExcelTable y);
    public sealed virtual int GetHashCode(ExcelTable obj);
    public ExcelRangeBase AddRow(int rows);
    public ExcelRangeBase InsertRow(int position, int rows, bool copyStyles);
    private void ExtendCalculatedFormulas(ExcelRangeBase range);
    private void CopyStylesFromRow(string address, int copyRow);
    private void CopyStylesFromColumn(string address, int copyColumn);
    public ExcelRangeBase DeleteRow(int position, int rows);
    internal ExcelRangeBase InsertColumn(int position, int columns, bool copyStyles);
    internal ExcelRangeBase DeleteColumn(int position, int columns);
    internal Nullable`1<int> get_HeaderRowBorderDxfId();
    internal void set_HeaderRowBorderDxfId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderBase get_HeaderRowBorderStyle();
    [CompilerGeneratedAttribute]
public void set_HeaderRowBorderStyle(ExcelDxfBorderBase value);
    internal Nullable`1<int> get_TableBorderDxfId();
    internal void set_TableBorderDxfId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ExcelDxfBorderBase get_TableBorderStyle();
    [CompilerGeneratedAttribute]
public void set_TableBorderStyle(ExcelDxfBorderBase value);
    public SortState get_SortState();
    internal void SetTableSortState(Int32[] columns, Boolean[] descending, CompareOptions compareOptions, Dictionary`2<int, String[]> customLists);
    public void Sort(TableSortOptions options);
    public void Sort(Action`1<TableSortOptions> configuration);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Table.ExcelTableCollection : object {
    private List`1<ExcelTable> _tables;
    internal Dictionary`2<string, int> _tableNames;
    private ExcelWorksheet _ws;
    public int Count { get; }
    public ExcelTable Item { get; }
    public ExcelTable Item { get; }
    internal ExcelTableCollection(ExcelWorksheet ws);
    private ExcelTable Add(ExcelTable tbl);
    public ExcelTable Add(ExcelAddressBase Range, string Name);
    private void ValidateName(string name);
    public void Delete(int Index, bool ClearRange);
    public void Delete(string Name, bool ClearRange);
    public void Delete(ExcelTable Table, bool ClearRange);
    internal string GetNewTableName();
    public int get_Count();
    public ExcelTable GetFromRange(ExcelRangeBase Range);
    public ExcelTable get_Item(int Index);
    public ExcelTable get_Item(string Name);
    public sealed virtual IEnumerator`1<ExcelTable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Table.ExcelTableColumn : ExcelTableDxfBase {
    internal ExcelTable _tbl;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    private static string TOTALSROWFORMULA_PATH;
    private static string DATACELLSTYLE_PATH;
    internal static string CALCULATEDCOLUMNFORMULA_PATH;
    private ExcelTableSlicer _slicer;
    public int Id { get; public set; }
    public int Position { get; internal set; }
    public string Name { get; public set; }
    public string TotalsRowLabel { get; public set; }
    public RowFunctions TotalsRowFunction { get; public set; }
    public string TotalsRowFormula { get; public set; }
    public string DataCellStyleName { get; public set; }
    public ExcelTableSlicer Slicer { get; internal set; }
    public string CalculatedColumnFormula { get; public set; }
    public ExcelTable Table { get; }
    internal ExcelTableColumn(XmlNamespaceManager ns, XmlNode topNode, ExcelTable tbl, int pos);
    public int get_Id();
    public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
internal void set_Position(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TotalsRowLabel();
    public void set_TotalsRowLabel(string value);
    public RowFunctions get_TotalsRowFunction();
    public void set_TotalsRowFunction(RowFunctions value);
    public string get_TotalsRowFormula();
    public void set_TotalsRowFormula(string value);
    public string get_DataCellStyleName();
    public void set_DataCellStyleName(string value);
    public ExcelTableSlicer get_Slicer();
    internal void set_Slicer(ExcelTableSlicer value);
    public ExcelTableSlicer AddSlicer();
    public string get_CalculatedColumnFormula();
    public void set_CalculatedColumnFormula(string value);
    internal void SetFormula(string formula);
    internal void RemoveFormulaNode();
    public ExcelTable get_Table();
    internal void SetTableFormula(bool clear);
    internal void SetFormulaCells(int fromRow, int toRow, int colNum);
    internal static string DecodeTableColumnName(string name);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Table.ExcelTableColumnCollection : object {
    private List`1<ExcelTableColumn> _cols;
    private Dictionary`2<string, int> _colNames;
    internal int _maxId;
    [CompilerGeneratedAttribute]
private ExcelTable <Table>k__BackingField;
    public ExcelTable Table { get; private set; }
    public int Count { get; }
    public ExcelTableColumn Item { get; }
    public ExcelTableColumn Item { get; }
    internal ExcelTableColumnCollection(ExcelTable table);
    [CompilerGeneratedAttribute]
public ExcelTable get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(ExcelTable value);
    public int get_Count();
    public ExcelTableColumn get_Item(int Index);
    public ExcelTableColumn get_Item(string Name);
    internal void UpdateColName(int dictIndex, string newName);
    private sealed virtual override IEnumerator`1<ExcelTableColumn> System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.ExcelTableColumn>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal string GetUniqueName(string name);
    public ExcelRangeBase Add(int columns);
    public ExcelRangeBase Insert(int position, int columns);
    public ExcelRangeBase Delete(int position, int columns);
    internal List`1<string> GetColNamesList();
    internal bool ContainsColName(string name);
    internal void UpdateColName(string oldName, string newName);
    internal int GetIndexOfColName(string name);
}
public class OfficeOpenXml.Table.ExcelTableDxfBase : XmlHelper {
    private ExcelTable _table;
    private ExcelTableColumn _tableColumn;
    [CompilerGeneratedAttribute]
private ExcelDxfStyle <HeaderRowStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfStyle <DataStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelDxfStyle <TotalsRowStyle>k__BackingField;
    internal Nullable`1<int> HeaderRowDxfId { get; internal set; }
    internal string HeaderRowStyleName { get; internal set; }
    public ExcelDxfStyle HeaderRowStyle { get; internal set; }
    internal Nullable`1<int> DataDxfId { get; internal set; }
    public ExcelDxfStyle DataStyle { get; internal set; }
    public ExcelDxfStyle TotalsRowStyle { get; internal set; }
    internal Nullable`1<int> TotalsRowDxfId { get; internal set; }
    internal ExcelTableDxfBase(XmlNamespaceManager nsm);
    internal ExcelTableDxfBase(XmlNamespaceManager nsm, XmlNode topNode);
    internal void InitDxf(ExcelStyles styles, ExcelTable table, ExcelTableColumn tableColumn);
    internal Nullable`1<int> get_HeaderRowDxfId();
    internal void set_HeaderRowDxfId(Nullable`1<int> value);
    internal string get_HeaderRowStyleName();
    internal void set_HeaderRowStyleName(string value);
    [CompilerGeneratedAttribute]
public ExcelDxfStyle get_HeaderRowStyle();
    [CompilerGeneratedAttribute]
internal void set_HeaderRowStyle(ExcelDxfStyle value);
    internal Nullable`1<int> get_DataDxfId();
    internal void set_DataDxfId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ExcelDxfStyle get_DataStyle();
    [CompilerGeneratedAttribute]
internal void set_DataStyle(ExcelDxfStyle value);
    [CompilerGeneratedAttribute]
public ExcelDxfStyle get_TotalsRowStyle();
    [CompilerGeneratedAttribute]
internal void set_TotalsRowStyle(ExcelDxfStyle value);
    internal Nullable`1<int> get_TotalsRowDxfId();
    internal void set_TotalsRowDxfId(Nullable`1<int> value);
    internal void SetHeaderStyle(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    internal void SetDataStyle(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    internal void SetTotalsStyle(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    internal void SetTableBorderStyle(eStyleClass styleClass, eStyleProperty styleProperty, object value);
    private void SetStyle(ExcelRangeBase headerRange, eStyleClass styleClass, eStyleProperty styleProperty, object value);
    private void SetStyleNumberFormat(ExcelRangeBase range, eStyleProperty styleProperty, object value);
    private void SetStyleFont(ExcelRangeBase headerRange, eStyleProperty styleProperty, object value);
    private void SetStyleBorder(ExcelBorderItem border, eStyleProperty styleProperty, object value);
    private void SetStyleColor(ExcelColor color, eStyleProperty styleProperty, object value);
    private void SetStyleFill(ExcelRangeBase headerRange, eStyleProperty styleProperty, object value);
    private void SetStyleGradient(ExcelRangeBase headerRange, eStyleProperty styleProperty, object value);
}
internal class OfficeOpenXml.Table.PivotTable.ArrayComparer : object {
    internal static ArrayComparer Instance;
    private static ArrayComparer();
    public static bool IsEqual(Int32[] x, Int32[] y);
    public sealed virtual int Compare(Int32[] x, Int32[] y);
    public sealed virtual bool Equals(Int32[] x, Int32[] y);
    public sealed virtual int GetHashCode(Int32[] obj);
}
internal class OfficeOpenXml.Table.PivotTable.CacheComparer : object {
    public sealed virtual bool Equals(object x, object y);
    private static object GetCaseInsensitiveValue(object x);
    public sealed virtual int GetHashCode(object obj);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.CacheIndexItem : ValueType {
    [CompilerGeneratedAttribute]
private Int32[] <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    internal Int32[] Key { get; internal set; }
    internal int Index { get; internal set; }
    public CacheIndexItem(Int32[] key);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal Int32[] get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(Int32[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    public int Compare(CacheIndexItem x, CacheIndexItem y);
    public bool Equals(CacheIndexItem x, CacheIndexItem y);
    public int GetHashCode(CacheIndexItem obj);
    public sealed virtual int CompareTo(CacheIndexItem other);
    public virtual string ToString();
}
internal static class OfficeOpenXml.Table.PivotTable.Calculation.Filters.PivotTableFilterMatcher : object {
    internal static bool IsHiddenByPageField(ExcelPivotTable pivotTable, PivotTableCacheRecords recs, int r);
    internal static bool IsHiddenByRowColumnFilter(ExcelPivotTable pivotTable, List`1<ExcelPivotTableFilter> captionFilters, PivotTableCacheRecords recs, int r);
    internal static bool IsHiddenBySlicer(ExcelPivotTable pivotTable, PivotTableCacheRecords recs, int r, List`1<ExcelPivotTableField> slicerFields);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.AverageItem : object {
    [CompilerGeneratedAttribute]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public double Sum { get; public set; }
    public int Count { get; public set; }
    public double Average { get; }
    public AverageItem(double sum);
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
public void set_Sum(double value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    public double get_Average();
    public static AverageItem op_Addition(AverageItem a1, AverageItem a2);
    public static AverageItem op_Addition(AverageItem a1, double value);
    public static AverageItem op_Addition(AverageItem a1, object value);
}
internal abstract class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunction : object {
    internal abstract virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal abstract virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
    protected static bool IsNumeric(object value);
    protected static double GetValueDouble(object value);
    protected static void SetError(Int32[] key, PivotCalculationStore dataFieldItems, ExcelErrorValue v);
    protected static void SumValue(Int32[] key, PivotCalculationStore dataFieldItems, double d);
    protected static void CountValue(Int32[] key, PivotCalculationStore dataFieldItems, double c);
    protected static void MultiplyValue(Int32[] key, PivotCalculationStore dataFieldItems, double d);
    protected static void MinValue(Int32[] key, PivotCalculationStore dataFieldItems, double d);
    protected static void MaxValue(Int32[] key, PivotCalculationStore dataFieldItems, double d);
    protected static void AverageValue(Int32[] key, PivotCalculationStore dataFieldItems, AverageItem value);
    protected static void AverageValue(Int32[] key, PivotCalculationStore dataFieldItems, double value);
    protected static void ValueList(Int32[] key, PivotCalculationStore dataFieldItems, object value);
    protected static void DoubleListToList(Int32[] key, PivotCalculationStore dataFieldItems, List`1<double> list);
    private static void GetMinMaxValue(Int32[] key, PivotCalculationStore dataFieldItems, object value, bool isMin);
    protected static void AddItemsToKey(Int32[] key, int colStartRef, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, T d, Action`3<Int32[], PivotCalculationStore, T> action);
    protected static void AggregateKeys(Int32[] key, int colStartRef, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, T d, Action`3<Int32[], PivotCalculationStore, T> action, List`1<bool> showTotals);
    private static void AddAggregatedKey(Int32[] key, int highIx, int lowIx, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, T d, Action`3<Int32[], PivotCalculationStore, T> action, Int32[] uniqueKey);
    private static void AddToKeys(Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, Int32[] sumKey, Int32[] key);
    private static void AddKey(Int32[] key, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, T d, Action`3<Int32[], PivotCalculationStore, T> action, Int32[] newKey);
    internal static bool IsNonTopLevel(Int32[] newKey, int colStartRef);
    private static bool HasSumLevel(Int32[] newKey, int start, int end);
    private static Int32[] GetGrandTotalKey(int size);
    private static Int32[] GetKey(Int32[] key, int pos);
    private static bool ShouldAggregateKey(Int32[] key, int colStartRef, int pos, List`1<bool> showTotals);
    internal void FilterValueFields(ExcelPivotTable pivotTable, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<int> fieldIndex);
    private Dictionary`2<Int32[], double> GetTop10SumDict(Dictionary`2<Int32[], List`1<double>> totDict, ExcelPivotTableFilter valueFilter);
    private static void AddBreakItem(Dictionary`2<Int32[], double> dic, Int32[] key, List`1<double> l, bool isTop, double d);
    private static void HandleTopBottom(ExcelPivotTableFilter valueFilter, PivotCalculationStore filterItems, List`1<Int32[]> keysToRemove, Dictionary`2<Int32[], double> totSum, CacheIndexItem item, Int32[] pk);
    private Dictionary`2<Int32[], List`1<double>> GetTop10TotalDictionary(PivotCalculationStore filterItems);
    private Int32[] GetParentKey(Int32[] key);
    private bool SumKeyMatches(Int32[] key, int startIx, int keyIx, List`1<Int32[]> keysToRemove);
    private void RemoveSumLevels(PivotCalculationStore& dataFieldItems);
    private bool ParentMatch(List`1<Int32[]> matchingSumLevels, Int32[] key);
    private bool KeyMatches(Int32[] key, Int32[] pKey);
    internal void Aggregate(ExcelPivotTable pivotTable, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionAverage : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionCount : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionCountNums : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionMax : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionMin : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionProduct : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionStdDev : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionStdDevP : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionSum : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionVar : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.Functions.PivotFunctionVarP : PivotFunction {
    internal virtual void AddItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys);
    internal virtual void AggregateItems(Int32[] key, int colStartIx, object value, PivotCalculationStore dataFieldItems, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, List`1<bool> showTotals);
    internal virtual void Calculate(List`1<object> list, PivotCalculationStore dataFieldItems);
}
[DefaultMemberAttribute("Item")]
internal class OfficeOpenXml.Table.PivotTable.Calculation.PivotCalculationStore : object {
    internal static int SumLevelValue;
    [CompilerGeneratedAttribute]
private List`1<object> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CacheIndexItem> <Index>k__BackingField;
    internal List`1<object> Values { get; internal set; }
    internal List`1<CacheIndexItem> Index { get; internal set; }
    public int Count { get; }
    internal object Item { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<object> get_Values();
    [CompilerGeneratedAttribute]
internal void set_Values(List`1<object> value);
    [CompilerGeneratedAttribute]
internal List`1<CacheIndexItem> get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(List`1<CacheIndexItem> value);
    public int get_Count();
    internal void Add(Int32[] key, object value);
    internal void Add(Int32[] key, ExcelErrorValue errorValue);
    internal object get_Item(Int32[] key);
    internal void set_Item(Int32[] key, object value);
    internal object GetByIndex(int index);
    internal int GetIndex(Int32[] key);
    internal bool ContainsKey(Int32[] key);
    internal object GetPreviousValue(Int32[] key);
    internal object GetNextValue(Int32[] key);
    internal void Remove(CacheIndexItem item);
    internal bool TryGetValue(Int32[] key, Object& o, object emptyValue);
    private sealed virtual override IEnumerator`1<CacheIndexItem> System.Collections.Generic.IEnumerable<OfficeOpenXml.Table.PivotTable.Calculation.CacheIndexItem>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    internal void SetAllValues(ExcelErrorValue nAError);
}
public class OfficeOpenXml.Table.PivotTable.Calculation.PivotDataFieldItemSelection : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private eSubTotalFunctions <SubtotalFunction>k__BackingField;
    public string FieldName { get; public set; }
    public object Value { get; public set; }
    public eSubTotalFunctions SubtotalFunction { get; public set; }
    public PivotDataFieldItemSelection(string fieldName, object value);
    public PivotDataFieldItemSelection(string fieldName, object value, eSubTotalFunctions subtotalFunction);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public eSubTotalFunctions get_SubtotalFunction();
    [CompilerGeneratedAttribute]
public void set_SubtotalFunction(eSubTotalFunctions value);
}
internal abstract class OfficeOpenXml.Table.PivotTable.Calculation.PivotKeyUtil : object {
    internal static Int32[] GetKey(int size, int iv);
    internal static Int32[] GetColumnTotalKey(Int32[] key, int colFieldsStart);
    internal static Int32[] GetRowTotalKey(Int32[] key, int colFieldsStart);
    internal static Int32[] GetParentKey(Int32[] key, int keyCol);
    internal static Int32[] GetNextKey(Int32[] key, int keyCol);
    internal static Int32[] GetPrevKey(Int32[] key, int keyCol);
    internal static bool IsSumBefore(Int32[] key, int bf, List`1<int> fieldIndex, int colFieldsStart);
    internal static bool IsSumAfter(Int32[] key, int bf, List`1<int> fieldIndex, int colFieldsStart, int addStart);
    internal static bool IsRowGrandTotal(Int32[] key, int colFieldStart);
    internal static bool IsColumnGrandTotal(Int32[] key, int colFieldStart);
    internal static Int32[] GetKeyPart(Int32[] key, int fromIndex, int toIndex);
    protected static Int32[] GetNextKeyFromKeys(HashSet`1<Int32[]> keysParent, int keyCol, int index);
    protected static Int32[] GetPreviousKeyFromKeys(HashSet`1<Int32[]> keysParent, int keyCol, int index);
    internal static bool ExistsValueInTable(Int32[] key, int colFieldStart, PivotCalculationStore calculatedItems);
    protected static Int32[] GetPrevKeyFromCalculatedTable(List`1<List`1<Int32[]>> calcTable, int r, int c, int keyCol, bool isRowField);
    protected static Int32[] GetNextKeyFromCalculatedTable(List`1<List`1<Int32[]>> calcTable, int r, int c, int keyCol, bool isRowField);
    protected static bool HasSameParent(Int32[] key1, Int32[] key2, int keyCol);
    protected static bool IsSameLevelAs(Int32[] key, bool isRowField, int baseLevel, int keyCol, ExcelPivotTableDataField df);
}
internal abstract class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsBase : PivotKeyUtil {
    internal abstract virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsDifference : PivotShowAsDifferenceBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private object CalcDifference(double value, double prevValue);
}
internal abstract class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsDifferenceBase : PivotShowAsBase {
    protected void CalculateDifferenceShared(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems, Func`3<double, double, object> calcFunc);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsDifferencePercent : PivotShowAsDifferenceBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private object CalcDifferencePercent(double value, double prevValue);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsIndex : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOf : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private bool NextKey(Int32[]& currentKey, ExcelPivotTable pt, List`1<int> fieldIndex);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOfColumnTotal : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private static double GetColumnTotal(Int32[] key, int colStartIx, PivotCalculationStore calculatedItems, ExcelErrorValue& error);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOfGrandTotal : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOfParentColumnTotal : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private static double GetParentColumnTotal(Int32[] key, int colStartIx, PivotCalculationStore calculatedItems, ExcelErrorValue& error);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOfParentRowTotal : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private static double GetParentTotal(Int32[] key, int colStartIx, PivotCalculationStore calculatedItems, ExcelErrorValue& error);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOfParentTotal : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private static double GetParentTotal(Int32[] key, int bf, int colStartIx, PivotCalculationStore calculatedItems, ExcelErrorValue& error);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOfRowTotal : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    private static double GetRowTotalValue(Int32[] key, int colStartIx, PivotCalculationStore calculatedItems, ExcelErrorValue& error);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsPercentOfRunningTotal : PivotShowAsRunningTotal {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    internal static bool ShouldCalculateKey(Int32[] key, int bf, List`1<int> fieldIndex, int colFieldsStart, int addStart);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsRankAscending : PivotShowAsRankBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
}
internal abstract class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsRankBase : PivotShowAsBase {
    protected void CalculateRank(ExcelPivotTableDataField df, List`1<int> fieldIndex, PivotCalculationStore calculatedItems, bool ascending);
    private void RankKeys(PivotCalculationStore calculatedItems, SortedList`2<Int32[], object> rankItems, int keyCol, int maxBfKey, bool ascending);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsRankDescending : PivotShowAsRankBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
}
internal class OfficeOpenXml.Table.PivotTable.Calculation.ShowDataAs.PivotShowAsRunningTotal : PivotShowAsBase {
    internal virtual void Calculate(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems);
    internal static void CalculateRunningTotal(ExcelPivotTableDataField df, List`1<int> fieldIndex, Dictionary`2<Int32[], HashSet`1<Int32[]>> keys, PivotCalculationStore& calculatedItems, bool leaveParentSum);
}
public enum OfficeOpenXml.Table.PivotTable.DataFieldFunctions : Enum {
    public int value__;
    public static DataFieldFunctions Average;
    public static DataFieldFunctions Count;
    public static DataFieldFunctions CountNums;
    public static DataFieldFunctions Max;
    public static DataFieldFunctions Min;
    public static DataFieldFunctions Product;
    public static DataFieldFunctions None;
    public static DataFieldFunctions StdDev;
    public static DataFieldFunctions StdDevP;
    public static DataFieldFunctions Sum;
    public static DataFieldFunctions Var;
    public static DataFieldFunctions VarP;
}
[FlagsAttribute]
public enum OfficeOpenXml.Table.PivotTable.eDateGroupBy : Enum {
    public int value__;
    public static eDateGroupBy Years;
    public static eDateGroupBy Quarters;
    public static eDateGroupBy Months;
    public static eDateGroupBy Days;
    public static eDateGroupBy Hours;
    public static eDateGroupBy Minutes;
    public static eDateGroupBy Seconds;
}
public enum OfficeOpenXml.Table.PivotTable.eItemType : Enum {
    public int value__;
    public static eItemType Data;
    public static eItemType Avg;
    public static eItemType Blank;
    public static eItemType Count;
    public static eItemType CountA;
    public static eItemType Default;
    public static eItemType Grand;
    public static eItemType Max;
    public static eItemType Min;
    public static eItemType Product;
    public static eItemType StdDev;
    public static eItemType StdDevP;
    public static eItemType Sum;
    public static eItemType Var;
    public static eItemType VarP;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotAreaType : Enum {
    public int value__;
    public static ePivotAreaType All;
    public static ePivotAreaType FieldButton;
    public static ePivotAreaType Data;
    public static ePivotAreaType None;
    public static ePivotAreaType Normal;
    public static ePivotAreaType Origin;
    public static ePivotAreaType TopEnd;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotFieldAxis : Enum {
    public int value__;
    public static ePivotFieldAxis None;
    public static ePivotFieldAxis Column;
    public static ePivotFieldAxis Page;
    public static ePivotFieldAxis Row;
    public static ePivotFieldAxis Values;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotTableAxis : Enum {
    public int value__;
    public static ePivotTableAxis None;
    public static ePivotTableAxis ColumnAxis;
    public static ePivotTableAxis PageAxis;
    public static ePivotTableAxis RowAxis;
    public static ePivotTableAxis ValuesAxis;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType : Enum {
    public int value__;
    public static ePivotTableCaptionFilterType CaptionBeginsWith;
    public static ePivotTableCaptionFilterType CaptionBetween;
    public static ePivotTableCaptionFilterType CaptionContains;
    public static ePivotTableCaptionFilterType CaptionEndsWith;
    public static ePivotTableCaptionFilterType CaptionEqual;
    public static ePivotTableCaptionFilterType CaptionGreaterThan;
    public static ePivotTableCaptionFilterType CaptionGreaterThanOrEqual;
    public static ePivotTableCaptionFilterType CaptionLessThan;
    public static ePivotTableCaptionFilterType CaptionLessThanOrEqual;
    public static ePivotTableCaptionFilterType CaptionNotBeginsWith;
    public static ePivotTableCaptionFilterType CaptionNotBetween;
    public static ePivotTableCaptionFilterType CaptionNotContains;
    public static ePivotTableCaptionFilterType CaptionNotEndsWith;
    public static ePivotTableCaptionFilterType CaptionNotEqual;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType : Enum {
    public int value__;
    public static ePivotTableDatePeriodFilterType LastMonth;
    public static ePivotTableDatePeriodFilterType LastQuarter;
    public static ePivotTableDatePeriodFilterType LastWeek;
    public static ePivotTableDatePeriodFilterType LastYear;
    public static ePivotTableDatePeriodFilterType M1;
    public static ePivotTableDatePeriodFilterType M2;
    public static ePivotTableDatePeriodFilterType M3;
    public static ePivotTableDatePeriodFilterType M4;
    public static ePivotTableDatePeriodFilterType M5;
    public static ePivotTableDatePeriodFilterType M6;
    public static ePivotTableDatePeriodFilterType M7;
    public static ePivotTableDatePeriodFilterType M8;
    public static ePivotTableDatePeriodFilterType M9;
    public static ePivotTableDatePeriodFilterType M10;
    public static ePivotTableDatePeriodFilterType M11;
    public static ePivotTableDatePeriodFilterType M12;
    public static ePivotTableDatePeriodFilterType NextMonth;
    public static ePivotTableDatePeriodFilterType NextQuarter;
    public static ePivotTableDatePeriodFilterType NextWeek;
    public static ePivotTableDatePeriodFilterType NextYear;
    public static ePivotTableDatePeriodFilterType Q1;
    public static ePivotTableDatePeriodFilterType Q2;
    public static ePivotTableDatePeriodFilterType Q3;
    public static ePivotTableDatePeriodFilterType Q4;
    public static ePivotTableDatePeriodFilterType ThisMonth;
    public static ePivotTableDatePeriodFilterType ThisQuarter;
    public static ePivotTableDatePeriodFilterType ThisWeek;
    public static ePivotTableDatePeriodFilterType ThisYear;
    public static ePivotTableDatePeriodFilterType Today;
    public static ePivotTableDatePeriodFilterType Tomorrow;
    public static ePivotTableDatePeriodFilterType YearToDate;
    public static ePivotTableDatePeriodFilterType Yesterday;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType : Enum {
    public int value__;
    public static ePivotTableDateValueFilterType DateBetween;
    public static ePivotTableDateValueFilterType DateEqual;
    public static ePivotTableDateValueFilterType DateNewerThan;
    public static ePivotTableDateValueFilterType DateNewerThanOrEqual;
    public static ePivotTableDateValueFilterType DateNotBetween;
    public static ePivotTableDateValueFilterType DateNotEqual;
    public static ePivotTableDateValueFilterType DateOlderThan;
    public static ePivotTableDateValueFilterType DateOlderThanOrEqual;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotTableFilterType : Enum {
    public int value__;
    public static ePivotTableFilterType CaptionBeginsWith;
    public static ePivotTableFilterType CaptionBetween;
    public static ePivotTableFilterType CaptionContains;
    public static ePivotTableFilterType CaptionEndsWith;
    public static ePivotTableFilterType CaptionEqual;
    public static ePivotTableFilterType CaptionGreaterThan;
    public static ePivotTableFilterType CaptionGreaterThanOrEqual;
    public static ePivotTableFilterType CaptionLessThan;
    public static ePivotTableFilterType CaptionLessThanOrEqual;
    public static ePivotTableFilterType CaptionNotBeginsWith;
    public static ePivotTableFilterType CaptionNotBetween;
    public static ePivotTableFilterType CaptionNotContains;
    public static ePivotTableFilterType CaptionNotEndsWith;
    public static ePivotTableFilterType CaptionNotEqual;
    public static ePivotTableFilterType DateBetween;
    public static ePivotTableFilterType DateEqual;
    public static ePivotTableFilterType DateNewerThan;
    public static ePivotTableFilterType DateNewerThanOrEqual;
    public static ePivotTableFilterType DateNotBetween;
    public static ePivotTableFilterType DateNotEqual;
    public static ePivotTableFilterType DateOlderThan;
    public static ePivotTableFilterType DateOlderThanOrEqual;
    public static ePivotTableFilterType LastMonth;
    public static ePivotTableFilterType LastQuarter;
    public static ePivotTableFilterType LastWeek;
    public static ePivotTableFilterType LastYear;
    public static ePivotTableFilterType M1;
    public static ePivotTableFilterType M2;
    public static ePivotTableFilterType M3;
    public static ePivotTableFilterType M4;
    public static ePivotTableFilterType M5;
    public static ePivotTableFilterType M6;
    public static ePivotTableFilterType M7;
    public static ePivotTableFilterType M8;
    public static ePivotTableFilterType M9;
    public static ePivotTableFilterType M10;
    public static ePivotTableFilterType M11;
    public static ePivotTableFilterType M12;
    public static ePivotTableFilterType NextMonth;
    public static ePivotTableFilterType NextQuarter;
    public static ePivotTableFilterType NextWeek;
    public static ePivotTableFilterType NextYear;
    public static ePivotTableFilterType Q1;
    public static ePivotTableFilterType Q2;
    public static ePivotTableFilterType Q3;
    public static ePivotTableFilterType Q4;
    public static ePivotTableFilterType ThisMonth;
    public static ePivotTableFilterType ThisQuarter;
    public static ePivotTableFilterType ThisWeek;
    public static ePivotTableFilterType ThisYear;
    public static ePivotTableFilterType Today;
    public static ePivotTableFilterType Tomorrow;
    public static ePivotTableFilterType YearToDate;
    public static ePivotTableFilterType Yesterday;
    public static ePivotTableFilterType Unknown;
    public static ePivotTableFilterType ValueBetween;
    public static ePivotTableFilterType ValueEqual;
    public static ePivotTableFilterType ValueGreaterThan;
    public static ePivotTableFilterType ValueGreaterThanOrEqual;
    public static ePivotTableFilterType ValueLessThan;
    public static ePivotTableFilterType ValueLessThanOrEqual;
    public static ePivotTableFilterType ValueNotBetween;
    public static ePivotTableFilterType ValueNotEqual;
    public static ePivotTableFilterType Count;
    public static ePivotTableFilterType Sum;
    public static ePivotTableFilterType Percent;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotTableTop10FilterType : Enum {
    public int value__;
    public static ePivotTableTop10FilterType Count;
    public static ePivotTableTop10FilterType Sum;
    public static ePivotTableTop10FilterType Percent;
}
public enum OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType : Enum {
    public int value__;
    public static ePivotTableValueFilterType ValueBetween;
    public static ePivotTableValueFilterType ValueEqual;
    public static ePivotTableValueFilterType ValueGreaterThan;
    public static ePivotTableValueFilterType ValueGreaterThanOrEqual;
    public static ePivotTableValueFilterType ValueLessThan;
    public static ePivotTableValueFilterType ValueLessThanOrEqual;
    public static ePivotTableValueFilterType ValueNotBetween;
    public static ePivotTableValueFilterType ValueNotEqual;
}
public enum OfficeOpenXml.Table.PivotTable.ePrevNextPivotItem : Enum {
    public int value__;
    public static ePrevNextPivotItem Previous;
    public static ePrevNextPivotItem Next;
}
public enum OfficeOpenXml.Table.PivotTable.eShowDataAs : Enum {
    public int value__;
    public static eShowDataAs Difference;
    public static eShowDataAs Index;
    public static eShowDataAs Normal;
    public static eShowDataAs Percent;
    public static eShowDataAs PercentDifference;
    public static eShowDataAs PercentOfColumn;
    public static eShowDataAs PercentOfRow;
    public static eShowDataAs PercentOfTotal;
    public static eShowDataAs RunningTotal;
    public static eShowDataAs PercentOfParentRow;
    public static eShowDataAs PercentOfParentColumn;
    public static eShowDataAs PercentOfParent;
    public static eShowDataAs RankAscending;
    public static eShowDataAs RankDescending;
    public static eShowDataAs PercentOfRunningTotal;
}
public enum OfficeOpenXml.Table.PivotTable.eSortType : Enum {
    public int value__;
    public static eSortType None;
    public static eSortType Ascending;
    public static eSortType Descending;
}
public enum OfficeOpenXml.Table.PivotTable.eSourceType : Enum {
    public int value__;
    public static eSourceType Consolidation;
    public static eSourceType External;
    public static eSourceType Scenario;
    public static eSourceType Worksheet;
}
[FlagsAttribute]
public enum OfficeOpenXml.Table.PivotTable.eSubTotalFunctions : Enum {
    public int value__;
    public static eSubTotalFunctions None;
    public static eSubTotalFunctions Count;
    public static eSubTotalFunctions CountA;
    public static eSubTotalFunctions Avg;
    public static eSubTotalFunctions Default;
    public static eSubTotalFunctions Min;
    public static eSubTotalFunctions Max;
    public static eSubTotalFunctions Product;
    public static eSubTotalFunctions StdDev;
    public static eSubTotalFunctions StdDevP;
    public static eSubTotalFunctions Sum;
    public static eSubTotalFunctions Var;
    public static eSubTotalFunctions VarP;
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotArea : XmlHelper {
    private ExcelPivotTable _pt;
    public Nullable`1<int> FieldIndex { get; public set; }
    public Nullable`1<int> FieldPosition { get; public set; }
    public bool IsValuesField { get; public set; }
    public ePivotAreaType PivotAreaType { get; internal set; }
    public ePivotTableAxis Axis { get; public set; }
    public bool DataOnly { get; public set; }
    public bool LabelOnly { get; public set; }
    public bool GrandRow { get; public set; }
    public bool GrandColumn { get; public set; }
    public bool CacheIndex { get; public set; }
    public bool Outline { get; public set; }
    public string Offset { get; internal set; }
    public bool CollapsedLevelsAreSubtotals { get; public set; }
    internal ExcelPivotArea(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt);
    public Nullable`1<int> get_FieldIndex();
    public void set_FieldIndex(Nullable`1<int> value);
    public Nullable`1<int> get_FieldPosition();
    public void set_FieldPosition(Nullable`1<int> value);
    public bool get_IsValuesField();
    public void set_IsValuesField(bool value);
    public ePivotAreaType get_PivotAreaType();
    internal void set_PivotAreaType(ePivotAreaType value);
    public ePivotTableAxis get_Axis();
    public void set_Axis(ePivotTableAxis value);
    public bool get_DataOnly();
    public void set_DataOnly(bool value);
    public bool get_LabelOnly();
    public void set_LabelOnly(bool value);
    public bool get_GrandRow();
    public void set_GrandRow(bool value);
    public bool get_GrandColumn();
    public void set_GrandColumn(bool value);
    public bool get_CacheIndex();
    public void set_CacheIndex(bool value);
    public bool get_Outline();
    public void set_Outline(bool value);
    public string get_Offset();
    internal void set_Offset(string value);
    public bool get_CollapsedLevelsAreSubtotals();
    public void set_CollapsedLevelsAreSubtotals(bool value);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotAreaAutoSort : ExcelPivotArea {
    [CompilerGeneratedAttribute]
private ExcelPivotAreaStyleConditions <Conditions>k__BackingField;
    public ExcelPivotAreaStyleConditions Conditions { get; }
    internal ExcelPivotAreaAutoSort(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt);
    [CompilerGeneratedAttribute]
public ExcelPivotAreaStyleConditions get_Conditions();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference : ExcelPivotAreaReferenceBase {
    private List`1<ExcelPivotTableDataField> _dataFields;
    public ExcelPivotTableDataField Item { get; }
    public int Count { get; }
    internal ExcelPivotAreaDataFieldReference(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt, int fieldIndex);
    public ExcelPivotTableDataField get_Item(int index);
    public int get_Count();
    internal void AddInternal(ExcelPivotTableDataField item);
    public void Add(int index);
    public void Add(ExcelPivotTableDataField field);
    internal virtual void UpdateXml();
    internal void Clear();
    public sealed virtual IEnumerator`1<ExcelPivotTableDataField> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReference : ExcelPivotAreaReferenceBase {
    [CompilerGeneratedAttribute]
private ExcelPivotAreaReferenceItems <Items>k__BackingField;
    public ExcelPivotTableField Field { get; }
    public ExcelPivotAreaReferenceItems Items { get; }
    internal ExcelPivotAreaReference(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt, int fieldIndex);
    public ExcelPivotTableField get_Field();
    [CompilerGeneratedAttribute]
public ExcelPivotAreaReferenceItems get_Items();
    internal virtual void UpdateXml();
}
public abstract class OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase : XmlHelper {
    internal ExcelPivotTable _pt;
    internal int FieldIndex { get; internal set; }
    public bool Selected { get; public set; }
    internal bool Relative { get; internal set; }
    internal bool ByPosition { get; internal set; }
    public bool DefaultSubtotal { get; public set; }
    public bool AvgSubtotal { get; public set; }
    public bool CountSubtotal { get; public set; }
    public bool CountASubtotal { get; public set; }
    public bool MaxSubtotal { get; public set; }
    public bool MinSubtotal { get; public set; }
    public bool ProductSubtotal { get; public set; }
    public bool StdDevPSubtotal { get; public set; }
    public bool StdDevSubtotal { get; public set; }
    public bool SumSubtotal { get; public set; }
    public bool VarPSubtotal { get; public set; }
    public bool VarSubtotal { get; public set; }
    internal ExcelPivotAreaReferenceBase(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt);
    internal int get_FieldIndex();
    internal void set_FieldIndex(int value);
    public bool get_Selected();
    public void set_Selected(bool value);
    internal bool get_Relative();
    internal void set_Relative(bool value);
    internal bool get_ByPosition();
    internal void set_ByPosition(bool value);
    internal abstract virtual void UpdateXml();
    public bool get_DefaultSubtotal();
    public void set_DefaultSubtotal(bool value);
    public bool get_AvgSubtotal();
    public void set_AvgSubtotal(bool value);
    public bool get_CountSubtotal();
    public void set_CountSubtotal(bool value);
    public bool get_CountASubtotal();
    public void set_CountASubtotal(bool value);
    public bool get_MaxSubtotal();
    public void set_MaxSubtotal(bool value);
    public bool get_MinSubtotal();
    public void set_MinSubtotal(bool value);
    public bool get_ProductSubtotal();
    public void set_ProductSubtotal(bool value);
    public bool get_StdDevPSubtotal();
    public void set_StdDevPSubtotal(bool value);
    public bool get_StdDevSubtotal();
    public void set_StdDevSubtotal(bool value);
    public bool get_SumSubtotal();
    public void set_SumSubtotal(bool value);
    public bool get_VarPSubtotal();
    public void set_VarPSubtotal(bool value);
    public bool get_VarSubtotal();
    public void set_VarSubtotal(bool value);
    internal void SetFunction(DataFieldFunctions function);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceCollection : EPPlusReadOnlyList`1<ExcelPivotAreaReference> {
    private XmlHelper _xmlHelper;
    private ExcelPivotTable _pt;
    internal ExcelPivotAreaReferenceCollection(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt);
    public ExcelPivotAreaReference Add(ExcelPivotTableField field);
    public ExcelPivotAreaReference Add(ExcelPivotTable pivotTable, int fieldIndex);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceItems : EPPlusReadOnlyList`1<PivotItemReference> {
    private ExcelPivotAreaReference _reference;
    internal ExcelPivotAreaReferenceItems(ExcelPivotAreaReference reference);
    public void Add(int index);
    public bool AddByValue(object value);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotAreaStyleConditions : object {
    [CompilerGeneratedAttribute]
private ExcelPivotAreaReferenceCollection <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPivotAreaDataFieldReference <DataFields>k__BackingField;
    public ExcelPivotAreaReferenceCollection Fields { get; }
    public ExcelPivotAreaDataFieldReference DataFields { get; }
    internal ExcelPivotAreaStyleConditions(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt);
    [CompilerGeneratedAttribute]
public ExcelPivotAreaReferenceCollection get_Fields();
    [CompilerGeneratedAttribute]
public ExcelPivotAreaDataFieldReference get_DataFields();
    internal void UpdateXml();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition : object {
    private ExcelWorkbook _wb;
    internal PivotTableCacheInternal _cacheReference;
    private XmlNamespaceManager _nsm;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <Relationship>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPivotTable <PivotTable>k__BackingField;
    private static string _sourceWorksheetPath;
    internal static string _sourceNamePath;
    internal static string _sourceAddressPath;
    internal ExcelRangeBase _sourceRange;
    internal ZipPackagePart Part { get; internal set; }
    public XmlDocument CacheDefinitionXml { get; }
    public Uri CacheDefinitionUri { get; }
    internal ZipPackageRelationship Relationship { get; internal set; }
    public ExcelPivotTable PivotTable { get; private set; }
    internal Uri SourceExternalReference { get; }
    public ExcelRangeBase SourceRange { get; public set; }
    public bool SaveData { get; public set; }
    public eSourceType CacheSource { get; }
    internal bool IsExternalReferernce { get; }
    internal ExcelPivotCacheDefinition(XmlNamespaceManager nsm, ExcelPivotTable pivotTable);
    internal ExcelPivotCacheDefinition(XmlNamespaceManager nsm, ExcelPivotTable pivotTable, ExcelRangeBase sourceRange);
    internal ExcelPivotCacheDefinition(XmlNamespaceManager nsm, ExcelPivotTable pivotTable, PivotTableCacheInternal cache);
    public void Refresh();
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    public XmlDocument get_CacheDefinitionXml();
    public Uri get_CacheDefinitionUri();
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_Relationship();
    [CompilerGeneratedAttribute]
internal void set_Relationship(ZipPackageRelationship value);
    [CompilerGeneratedAttribute]
public ExcelPivotTable get_PivotTable();
    [CompilerGeneratedAttribute]
private void set_PivotTable(ExcelPivotTable value);
    internal Uri get_SourceExternalReference();
    public ExcelRangeBase get_SourceRange();
    public void set_SourceRange(ExcelRangeBase value);
    private void UpdateCacheInFields();
    private List`1<int> IntersectRows(List`1<int> rows1, List`1<int> rows2);
    public bool get_SaveData();
    public void set_SaveData(bool value);
    public eSourceType get_CacheSource();
    internal bool get_IsExternalReferernce();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTable : XmlHelper {
    public static PivotNull PivotNullValue;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPivotTableAreaStyleCollection <Styles>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <PivotTableXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PivotTableUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <Relationship>k__BackingField;
    private static string NAME_PATH;
    private static string DISPLAY_NAME_PATH;
    [CompilerGeneratedAttribute]
private ExcelPivotCacheDefinition <CacheDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCalculated>k__BackingField;
    internal List`1<Dictionary`2<Int32[], HashSet`1<Int32[]>>> Keys;
    internal List`1<PivotCalculationStore> CalculatedItems;
    internal Dictionary`2<string, PivotCalculationStore> CalculatedFieldReferencedItems;
    internal Dictionary`2<string, PivotCalculationStore> CalculatedFieldRowColumnSubTotals;
    internal HashSet`1<Int32[]> _rowItems;
    internal HashSet`1<Int32[]> _colItems;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <WorkSheet>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelAddressBase <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValuesFieldPosition>k__BackingField;
    private ExcelPivotTableFilterCollection _filters;
    private static string FIRSTHEADERROW_PATH;
    private static string FIRSTDATAROW_PATH;
    private static string FIRSTDATACOL_PATH;
    private ExcelPivotTableFieldCollection _fields;
    private ExcelPivotTableRowColumnFieldCollection _rowFields;
    private ExcelPivotTableRowColumnFieldCollection _columnFields;
    private ExcelPivotTableDataFieldCollection _dataFields;
    private ExcelPivotTableRowColumnFieldCollection _pageFields;
    private static string STYLENAME_PATH;
    private static string SHOWCOLHEADERS_PATH;
    private static string SHOWCOLSTRIPES_PATH;
    private static string SHOWLASTCOLUMN_PATH;
    private static string SHOWROWHEADERS_PATH;
    private static string SHOWROWSTRIPES_PATH;
    private TableStyles _tableStyle;
    private PivotTableStyles _pivotTableStyle;
    private static string _showValuesRowPath;
    private int _newFilterId;
    internal ZipPackagePart Part { get; internal set; }
    public ExcelPivotTableAreaStyleCollection Styles { get; private set; }
    public XmlDocument PivotTableXml { get; private set; }
    public Uri PivotTableUri { get; internal set; }
    internal ZipPackageRelationship Relationship { get; internal set; }
    public string Name { get; public set; }
    public ExcelPivotCacheDefinition CacheDefinition { get; private set; }
    public bool IsCalculated { get; private set; }
    public ExcelPivotTableCalculatedData CalculatedData { get; }
    public ExcelWorksheet WorkSheet { get; public set; }
    public ExcelAddressBase Address { get; internal set; }
    public bool DataOnRows { get; public set; }
    public int ValuesFieldPosition { get; public set; }
    public bool ApplyNumberFormats { get; public set; }
    public bool ApplyBorderFormats { get; public set; }
    public bool ApplyFontFormats { get; public set; }
    public bool ApplyPatternFormats { get; public set; }
    public bool ApplyWidthHeightFormats { get; public set; }
    public bool ShowMemberPropertyTips { get; public set; }
    public bool ShowCalcMember { get; public set; }
    public bool EnableDrill { get; public set; }
    public bool ShowDrill { get; public set; }
    public bool ShowDataTips { get; public set; }
    public bool FieldPrintTitles { get; public set; }
    public bool ItemPrintTitles { get; public set; }
    public bool ColumnGrandTotals { get; public set; }
    public bool RowGrandTotals { get; public set; }
    public bool PrintDrill { get; public set; }
    public bool ShowError { get; public set; }
    public string ErrorCaption { get; public set; }
    public string DataCaption { get; public set; }
    public bool ShowHeaders { get; public set; }
    public int PageWrap { get; public set; }
    public bool UseAutoFormatting { get; public set; }
    public bool GridDropZones { get; public set; }
    public int Indent { get; public set; }
    public bool OutlineData { get; public set; }
    public bool Outline { get; public set; }
    public bool MultipleFieldFilters { get; public set; }
    public bool Compact { get; public set; }
    public bool CompactData { get; public set; }
    public string GrandTotalCaption { get; public set; }
    public string RowHeaderCaption { get; public set; }
    public string ColumnHeaderCaption { get; public set; }
    public string MissingCaption { get; public set; }
    public ExcelPivotTableFilterCollection Filters { get; }
    public int FirstHeaderRow { get; public set; }
    public int FirstDataRow { get; public set; }
    public int FirstDataCol { get; public set; }
    public ExcelPivotTableFieldCollection Fields { get; }
    public ExcelPivotTableRowColumnFieldCollection RowFields { get; }
    public ExcelPivotTableRowColumnFieldCollection ColumnFields { get; }
    public ExcelPivotTableDataFieldCollection DataFields { get; }
    public ExcelPivotTableRowColumnFieldCollection PageFields { get; }
    public string StyleName { get; public set; }
    public bool ShowColumnHeaders { get; public set; }
    public bool ShowColumnStripes { get; public set; }
    public bool ShowLastColumn { get; public set; }
    public bool ShowRowHeaders { get; public set; }
    public bool ShowRowStripes { get; public set; }
    [ObsoleteAttribute("Use the PivotTableStyle property for more options")]
public TableStyles TableStyle { get; public set; }
    public PivotTableStyles PivotTableStyle { get; public set; }
    public bool ShowValuesRow { get; public set; }
    internal int CacheId { get; internal set; }
    internal List`1<int> RowColumnFieldIndicies { get; }
    internal ExcelPivotTable(ZipPackageRelationship rel, ExcelWorksheet sheet);
    internal ExcelPivotTable(ExcelWorksheet sheet, ExcelAddressBase address, PivotTableCacheInternal pivotTableCache, string name, int tblId);
    internal ExcelPivotTable(ExcelWorksheet sheet, ExcelAddressBase address, ExcelRangeBase sourceAddress, string name, int tblId);
    private static ExcelPivotTable();
    private void CreatePivotTable(ExcelWorksheet sheet, ExcelAddressBase address, int fields, string name, int tblId);
    private void Init();
    private void LoadFields();
    private string GetStartXml(string name, ExcelAddressBase address, int fields);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
public ExcelPivotTableAreaStyleCollection get_Styles();
    [CompilerGeneratedAttribute]
private void set_Styles(ExcelPivotTableAreaStyleCollection value);
    [CompilerGeneratedAttribute]
public XmlDocument get_PivotTableXml();
    [CompilerGeneratedAttribute]
private void set_PivotTableXml(XmlDocument value);
    [CompilerGeneratedAttribute]
public Uri get_PivotTableUri();
    [CompilerGeneratedAttribute]
internal void set_PivotTableUri(Uri value);
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_Relationship();
    [CompilerGeneratedAttribute]
internal void set_Relationship(ZipPackageRelationship value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ExcelPivotCacheDefinition get_CacheDefinition();
    [CompilerGeneratedAttribute]
private void set_CacheDefinition(ExcelPivotCacheDefinition value);
    [CompilerGeneratedAttribute]
public bool get_IsCalculated();
    [CompilerGeneratedAttribute]
private void set_IsCalculated(bool value);
    public void Calculate(bool refreshCache);
    public object GetPivotData(string dataFieldName);
    public object GetPivotData(string dataFieldName, IList`1<PivotDataFieldItemSelection> fieldItemSelection);
    private int GetMatchingCount(HashSet`1<Int32[]> uniqueItems, Int32[] key, int colStartIx, Int32[]& newKey);
    private Int32[] GetSumKey(Int32[] key);
    public ExcelPivotTableCalculatedData get_CalculatedData();
    private bool IsCollapsedOrNoSubTotalFunction(Int32[] key, List`1<int> keyFieldIndex, ExcelPivotTableDataField datafield);
    private bool IsCollapsedOrNoSubTotalFunction(Int32[] key, List`1<int> keyFieldIndex, int fromIndex, int toIndex, ExcelPivotTableDataField datafield);
    private eSubTotalFunctions GetSubTotalEnum(DataFieldFunctions function);
    private bool ExistsValueInTable(Int32[] key, int dfIx);
    private ExcelErrorValue GetGroupingKey(IList`1<PivotDataFieldItemSelection> criteria, Int32[]& key, int i, int j, Dictionary`2<object, int> cache);
    private string CleanDisplayName(string name);
    [CompilerGeneratedAttribute]
public ExcelWorksheet get_WorkSheet();
    [CompilerGeneratedAttribute]
public void set_WorkSheet(ExcelWorksheet value);
    [CompilerGeneratedAttribute]
public ExcelAddressBase get_Address();
    [CompilerGeneratedAttribute]
internal void set_Address(ExcelAddressBase value);
    public bool get_DataOnRows();
    public void set_DataOnRows(bool value);
    [CompilerGeneratedAttribute]
public int get_ValuesFieldPosition();
    [CompilerGeneratedAttribute]
public void set_ValuesFieldPosition(int value);
    public bool get_ApplyNumberFormats();
    public void set_ApplyNumberFormats(bool value);
    public bool get_ApplyBorderFormats();
    public void set_ApplyBorderFormats(bool value);
    public bool get_ApplyFontFormats();
    public void set_ApplyFontFormats(bool value);
    public bool get_ApplyPatternFormats();
    public void set_ApplyPatternFormats(bool value);
    public bool get_ApplyWidthHeightFormats();
    public void set_ApplyWidthHeightFormats(bool value);
    public bool get_ShowMemberPropertyTips();
    public void set_ShowMemberPropertyTips(bool value);
    public bool get_ShowCalcMember();
    public void set_ShowCalcMember(bool value);
    public bool get_EnableDrill();
    public void set_EnableDrill(bool value);
    public bool get_ShowDrill();
    public void set_ShowDrill(bool value);
    public bool get_ShowDataTips();
    public void set_ShowDataTips(bool value);
    public bool get_FieldPrintTitles();
    public void set_FieldPrintTitles(bool value);
    public bool get_ItemPrintTitles();
    public void set_ItemPrintTitles(bool value);
    public bool get_ColumnGrandTotals();
    public void set_ColumnGrandTotals(bool value);
    public bool get_RowGrandTotals();
    public void set_RowGrandTotals(bool value);
    public bool get_PrintDrill();
    public void set_PrintDrill(bool value);
    public bool get_ShowError();
    public void set_ShowError(bool value);
    public string get_ErrorCaption();
    public void set_ErrorCaption(string value);
    public string get_DataCaption();
    public void set_DataCaption(string value);
    public bool get_ShowHeaders();
    public void set_ShowHeaders(bool value);
    public int get_PageWrap();
    public void set_PageWrap(int value);
    public bool get_UseAutoFormatting();
    public void set_UseAutoFormatting(bool value);
    public bool get_GridDropZones();
    public void set_GridDropZones(bool value);
    public int get_Indent();
    public void set_Indent(int value);
    public bool get_OutlineData();
    public void set_OutlineData(bool value);
    public bool get_Outline();
    public void set_Outline(bool value);
    public bool get_MultipleFieldFilters();
    public void set_MultipleFieldFilters(bool value);
    public bool get_Compact();
    public void set_Compact(bool value);
    public void SetCompact(bool value);
    public bool get_CompactData();
    public void set_CompactData(bool value);
    public string get_GrandTotalCaption();
    public void set_GrandTotalCaption(string value);
    public string get_RowHeaderCaption();
    public void set_RowHeaderCaption(string value);
    public string get_ColumnHeaderCaption();
    public void set_ColumnHeaderCaption(string value);
    public string get_MissingCaption();
    public void set_MissingCaption(string value);
    public ExcelPivotTableFilterCollection get_Filters();
    public int get_FirstHeaderRow();
    public void set_FirstHeaderRow(int value);
    public int get_FirstDataRow();
    public void set_FirstDataRow(int value);
    public int get_FirstDataCol();
    public void set_FirstDataCol(int value);
    public ExcelPivotTableFieldCollection get_Fields();
    public ExcelPivotTableRowColumnFieldCollection get_RowFields();
    public ExcelPivotTableRowColumnFieldCollection get_ColumnFields();
    public ExcelPivotTableDataFieldCollection get_DataFields();
    public ExcelPivotTableRowColumnFieldCollection get_PageFields();
    public string get_StyleName();
    public void set_StyleName(string value);
    public bool get_ShowColumnHeaders();
    public void set_ShowColumnHeaders(bool value);
    public bool get_ShowColumnStripes();
    public void set_ShowColumnStripes(bool value);
    public bool get_ShowLastColumn();
    public void set_ShowLastColumn(bool value);
    public bool get_ShowRowHeaders();
    public void set_ShowRowHeaders(bool value);
    public bool get_ShowRowStripes();
    public void set_ShowRowStripes(bool value);
    public TableStyles get_TableStyle();
    public void set_TableStyle(TableStyles value);
    public PivotTableStyles get_PivotTableStyle();
    public void set_PivotTableStyle(PivotTableStyles value);
    public bool get_ShowValuesRow();
    public void set_ShowValuesRow(bool value);
    internal int get_CacheId();
    internal void set_CacheId(int value);
    internal List`1<int> get_RowColumnFieldIndicies();
    internal int ChangeCacheId(int oldCacheId);
    internal int GetNewFilterId();
    internal void SetNewFilterId(int value);
    internal void Save();
    private void UpdatePivotTableStyles();
    internal void Sort();
    internal IList`1<ExcelPivotTableDataField> GetFieldsToCalculate();
    internal void MatchFieldValuesToIndex();
    internal void InitCalculation();
    internal List`1<Int32[]> GetTableKeys();
    internal List`1<Int32[]> GetTableRowKeys();
    internal List`1<Int32[]> GetTableColumnKeys();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyle : ExcelPivotArea {
    private ExcelStyles _styles;
    [CompilerGeneratedAttribute]
private ExcelPivotAreaStyleConditions <Conditions>k__BackingField;
    private ExcelDxfStyle _style;
    public ExcelPivotAreaStyleConditions Conditions { get; }
    public ExcelDxfStyle Style { get; internal set; }
    internal Nullable`1<int> DxfId { get; internal set; }
    internal ExcelPivotTableAreaStyle(XmlNamespaceManager nsm, XmlNode topNode, ExcelPivotTable pt);
    [CompilerGeneratedAttribute]
public ExcelPivotAreaStyleConditions get_Conditions();
    public ExcelDxfStyle get_Style();
    internal void set_Style(ExcelDxfStyle value);
    internal Nullable`1<int> get_DxfId();
    internal void set_DxfId(Nullable`1<int> value);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection : EPPlusReadOnlyList`1<ExcelPivotTableAreaStyle> {
    private ExcelStyles _styles;
    private XmlHelper _xmlHelper;
    private ExcelPivotTable _pt;
    internal ExcelPivotTableAreaStyleCollection(ExcelPivotTable pt);
    public ExcelPivotTableAreaStyle Add();
    public ExcelPivotTableAreaStyle AddTopEnd();
    public ExcelPivotTableAreaStyle AddTopEnd(string offsetAddress);
    public ExcelPivotTableAreaStyle AddTopStart(string offsetAddress);
    public ExcelPivotTableAreaStyle AddButtonField(ExcelPivotTableField field);
    public ExcelPivotTableAreaStyle AddWholeTable();
    public ExcelPivotTableAreaStyle AddAllLabels();
    public ExcelPivotTableAreaStyle AddAllData();
    internal ExcelPivotTableAreaStyle AddAll(bool labels, bool data);
    public ExcelPivotTableAreaStyle AddLabel(ExcelPivotTableField[] fields);
    public ExcelPivotTableAreaStyle AddData(ExcelPivotTableField[] fields);
    public ExcelPivotTableAreaStyle AddButtonField(ePivotTableAxis axis, int index);
    internal ExcelPivotTableAreaStyle Add(ePivotAreaType type);
    internal ExcelPivotTableAreaStyle Add(ePivotAreaType type, ePivotTableAxis axis);
    private XmlNode GetTopNode();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField : XmlHelper {
    internal PivotTableCacheInternal _cache;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private EPPlusReadOnlyList`1<object> <SharedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private EPPlusReadOnlyList`1<object> <GroupItems>k__BackingField;
    internal Dictionary`2<object, int> _cacheLookup;
    internal Dictionary`2<int, int> _duplicateCacheItems;
    internal Dictionary`2<object, int> _groupLookup;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, List`1<int>> <_fieldRecordIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private eDateGroupBy <DateGrouping>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPivotTableFieldGroup <Grouping>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    private IList`1<Token> _formulaTokens;
    public int Index { get; public set; }
    public string Name { get; internal set; }
    public EPPlusReadOnlyList`1<object> SharedItems { get; }
    public EPPlusReadOnlyList`1<object> GroupItems { get; public set; }
    internal Dictionary`2<int, List`1<int>> _fieldRecordIndex { get; internal set; }
    public eDateGroupBy DateGrouping { get; private set; }
    public ExcelPivotTableFieldGroup Grouping { get; public set; }
    public string Format { get; public set; }
    internal Nullable`1<int> NumFmtId { get; internal set; }
    internal bool IsRowColumnOrPage { get; }
    internal bool IsRowOrColumn { get; }
    public string Formula { get; public set; }
    internal IList`1<Token> FormulaTokens { get; }
    internal bool DatabaseField { get; internal set; }
    internal bool HasSlicer { get; }
    internal ExcelPivotTableCacheField(XmlNamespaceManager nsm, XmlNode topNode, PivotTableCacheInternal cache, int index);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    public string get_Name();
    internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public EPPlusReadOnlyList`1<object> get_SharedItems();
    [CompilerGeneratedAttribute]
public EPPlusReadOnlyList`1<object> get_GroupItems();
    [CompilerGeneratedAttribute]
public void set_GroupItems(EPPlusReadOnlyList`1<object> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<int, List`1<int>> get__fieldRecordIndex();
    [CompilerGeneratedAttribute]
internal void set__fieldRecordIndex(Dictionary`2<int, List`1<int>> value);
    [CompilerGeneratedAttribute]
public eDateGroupBy get_DateGrouping();
    [CompilerGeneratedAttribute]
private void set_DateGrouping(eDateGroupBy value);
    [CompilerGeneratedAttribute]
public ExcelPivotTableFieldGroup get_Grouping();
    [CompilerGeneratedAttribute]
public void set_Grouping(ExcelPivotTableFieldGroup value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    internal Nullable`1<int> get_NumFmtId();
    internal void set_NumFmtId(Nullable`1<int> value);
    internal void WriteSharedItems(XmlElement fieldNode, XmlNamespaceManager nsm);
    internal bool get_IsRowColumnOrPage();
    internal bool get_IsRowOrColumn();
    public string get_Formula();
    public void set_Formula(string value);
    internal IList`1<Token> get_FormulaTokens();
    internal bool get_DatabaseField();
    internal void set_DatabaseField(bool value);
    internal bool get_HasSlicer();
    internal void UpdateSlicers();
    private void SetFlags(XmlElement shNode, DataTypeFlags flags);
    private int GetNoOfTypes(DataTypeFlags flags);
    private void AppendSharedItems(XmlElement shNode);
    internal static string GetSharedStringText(object si, String& dt);
    private static string GetDateString(DateTime d);
    private DataTypeFlags GetFlags();
    private void AppendItem(XmlElement shNode, string elementName, string value);
    internal void SetCacheFieldNode();
    private void AddItems(EPPlusReadOnlyList`1<object> items, XmlNode itemsNode, Dictionary`2<object, int> cacheLookup);
    internal void SetDateGroup(ExcelPivotTableField field, eDateGroupBy groupBy, DateTime StartDate, DateTime EndDate, int interval, bool firstGroupField);
    internal void SetNumericGroup(int baseIndex, double start, double end, double interval);
    private int AddNumericGroupItems(double start, double end, double interval);
    private int AddDateGroupItems(ExcelPivotTableFieldGroup group, eDateGroupBy GroupBy, DateTime StartDate, DateTime EndDate, int interval);
    private void UpdateCacheLookupFromItems(List`1<object> items, Dictionary`2& cacheLookup);
    private void AddTimeSerie(int count, XmlElement groupItems);
    private void AddGroupItem(XmlElement groupItems, string value);
    internal void Refresh();
    private void UpdateGroupItems();
    private void UpdateStartEndValue(DateTime& startDate, DateTime& endDate);
    private void UpdateSharedItems();
    private void UpdatePivotItemsFromSharedItems(HashSet`1<object> siHs);
    internal void UpdateSubTotalItems(List`1<ExcelPivotTableFieldItem> list, eSubTotalFunctions functions);
    private List`1<eItemType> GetItemTypeFromFunctionList(eSubTotalFunctions subTotalFunctions);
    internal static object AddSharedItemToHashSet(HashSet`1<object> hs, object o);
    internal static object GetShareItemValue(object v);
    internal Dictionary`2<object, int> GetCacheLookup();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableCalculatedData : object {
    private ExcelPivotTable _pivotTable;
    private List`1<PivotDataFieldItemSelection> _criterias;
    internal ExcelPivotTableCalculatedData(ExcelPivotTable pivotTable);
    internal ExcelPivotTableCalculatedData(ExcelPivotTable pivotTable, List`1<PivotDataFieldItemSelection> criterias);
    public ExcelPivotTableCalculatedData SelectField(string fieldName, object value);
    public ExcelPivotTableCalculatedData SelectField(string fieldName, object value, eSubTotalFunctions subtotalFunction);
    private PivotDataFieldItemSelection CreateField(string fieldName, object value);
    public object GetValue(string dataFieldName);
    public object GetValue(int dataFieldIndex);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection : object {
    private List`1<ExcelPivotTable> _pivotTables;
    internal Dictionary`2<string, int> _pivotTableNames;
    private ExcelWorksheet _ws;
    public int Count { get; }
    public ExcelPivotTable Item { get; }
    public ExcelPivotTable Item { get; }
    internal ExcelPivotTableCollection(ExcelWorksheet ws);
    internal ExcelPivotTable Add(ExcelPivotTable tbl);
    public ExcelPivotTable Add(ExcelAddressBase Range, ExcelRangeBase Source, string Name);
    private void ValidateAdd(ExcelAddressBase Range, ExcelRangeBase Source, string Name);
    public ExcelPivotTable Add(ExcelAddressBase Range, ExcelTable Source, string Name);
    public ExcelPivotTable Add(ExcelAddressBase Range, ExcelPivotCacheDefinition PivotCacheDefinition, string Name);
    internal string GetNewTableName();
    public int get_Count();
    public ExcelPivotTable get_Item(int Index);
    public ExcelPivotTable get_Item(string Name);
    public sealed virtual IEnumerator`1<ExcelPivotTable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Delete(string Name, bool ClearRange);
    public void Delete(int Index, bool ClearRange);
    public void Delete(ExcelPivotTable PivotTable, bool ClearRange);
    public void Calculate(bool refresh);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField : XmlHelper {
    [CompilerGeneratedAttribute]
private ExcelPivotTableField <Field>k__BackingField;
    private ExcelPivotTableDataFieldShowDataAs _showDataAs;
    public ExcelPivotTableField Field { get; internal set; }
    public int Index { get; internal set; }
    public string Name { get; public set; }
    public int BaseField { get; public set; }
    public int BaseItem { get; public set; }
    internal int NumFmtId { get; internal set; }
    public string Format { get; public set; }
    public DataFieldFunctions Function { get; public set; }
    public ExcelPivotTableDataFieldShowDataAs ShowDataAs { get; }
    internal eShowDataAs ShowDataAsInternal { get; internal set; }
    internal ExcelPivotTableDataField(XmlNamespaceManager ns, XmlNode topNode, ExcelPivotTableField field);
    [CompilerGeneratedAttribute]
public ExcelPivotTableField get_Field();
    [CompilerGeneratedAttribute]
internal void set_Field(ExcelPivotTableField value);
    public int get_Index();
    internal void set_Index(int value);
    public string get_Name();
    public void set_Name(string value);
    public int get_BaseField();
    public void set_BaseField(int value);
    public int get_BaseItem();
    public void set_BaseItem(int value);
    internal int get_NumFmtId();
    internal void set_NumFmtId(int value);
    public string get_Format();
    public void set_Format(string value);
    public DataFieldFunctions get_Function();
    public void set_Function(DataFieldFunctions value);
    public ExcelPivotTableDataFieldShowDataAs get_ShowDataAs();
    internal eShowDataAs get_ShowDataAsInternal();
    internal void set_ShowDataAsInternal(eShowDataAs value);
    private bool IsShowDataAsExtLst(eShowDataAs value);
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldCollection : ExcelPivotTableFieldCollectionBase`1<ExcelPivotTableDataField> {
    private ExcelPivotTable _table;
    public ExcelPivotTableDataField Item { get; }
    internal ExcelPivotTableDataFieldCollection(ExcelPivotTable table);
    public ExcelPivotTableDataField Add(ExcelPivotTableField field);
    private void ValidateDupName(ExcelPivotTableDataField dataField);
    public ExcelPivotTableDataField get_Item(string name);
    internal bool ExistsDfName(string name, ExcelPivotTableDataField datafield);
    public void Remove(ExcelPivotTableDataField dataField);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs : object {
    private ExcelPivotTableDataField _dataField;
    public eShowDataAs Value { get; }
    internal ExcelPivotTableDataFieldShowDataAs(ExcelPivotTableDataField dataField);
    public void SetNormal();
    public void SetPercentOfTotal();
    public void SetPercentOfRow();
    public void SetPercentOfColumn();
    public void SetPercent(ExcelPivotTableField baseField, int baseItem);
    public void SetPercent(ExcelPivotTableField baseField, ePrevNextPivotItem baseItem);
    public void SetPercentParent(ExcelPivotTableField baseField);
    public void SetIndex();
    public void SetRunningTotal(ExcelPivotTableField baseField);
    public void SetDifference(ExcelPivotTableField baseField, int baseItem);
    public void SetDifference(ExcelPivotTableField baseField, ePrevNextPivotItem baseItem);
    public void SetPercentageDifference(ExcelPivotTableField baseField, int baseItem);
    public void SetPercentageDifference(ExcelPivotTableField baseField, ePrevNextPivotItem baseItem);
    public void SetPercentParentRow();
    public void SetPercentParentColumn();
    public void SetPercentOfRunningTotal(ExcelPivotTableField baseField);
    public void SetRankAscending(ExcelPivotTableField baseField);
    public void SetRankDescending(ExcelPivotTableField baseField);
    public eShowDataAs get_Value();
    private void Validate(ExcelPivotTableField baseField, Nullable`1<int> baseItem);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableField : XmlHelper {
    [CompilerGeneratedAttribute]
private ExcelPivotTable <PivotTable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BaseIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelPivotAreaAutoSort <AutoSort>k__BackingField;
    private eSubTotalFunctions _subTotalFunctions;
    internal ExcelPivotTablePageFieldSettings _pageFieldSettings;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    internal ExcelPivotTableFieldItemsCollection _items;
    private ExcelPivotTableCacheField _cacheField;
    private ExcelPivotTableSlicer _slicer;
    private ExcelPivotTableFieldFilterCollection _filters;
    internal ExcelPivotTable PivotTable { get; internal set; }
    public int Index { get; public set; }
    internal int BaseIndex { get; internal set; }
    public string Name { get; public set; }
    public bool Compact { get; public set; }
    public bool Outline { get; public set; }
    public bool SubtotalTop { get; public set; }
    public bool MultipleItemSelectionAllowed { get; public set; }
    public bool ShowAll { get; public set; }
    public bool ShowDropDowns { get; public set; }
    public bool ShowInFieldList { get; public set; }
    public bool ShowAsCaption { get; public set; }
    public bool ShowMemberPropertyInCell { get; public set; }
    public bool ShowMemberPropertyToolTip { get; public set; }
    public eSortType Sort { get; public set; }
    public ExcelPivotAreaAutoSort AutoSort { get; private set; }
    public bool IncludeNewItemsInFilter { get; public set; }
    public eSubTotalFunctions SubTotalFunctions { get; public set; }
    public ePivotFieldAxis Axis { get; internal set; }
    public bool IsRowField { get; internal set; }
    public bool IsColumnField { get; internal set; }
    public bool IsDataField { get; public set; }
    public bool IsPageField { get; internal set; }
    public ExcelPivotTablePageFieldSettings PageFieldSettings { get; }
    internal eDateGroupBy DateGrouping { get; }
    public ExcelPivotTableFieldGroup Grouping { get; }
    public string Format { get; public set; }
    public ExcelPivotTableFieldItemsCollection Items { get; }
    public ExcelPivotTableCacheField Cache { get; public set; }
    public ExcelPivotTableSlicer Slicer { get; internal set; }
    internal bool ShouldHaveItems { get; }
    public ExcelPivotTableFieldFilterCollection Filters { get; }
    internal Nullable`1<int> NumFmtId { get; internal set; }
    internal bool DragToCol { get; }
    internal bool DragToRow { get; }
    internal bool DragToPage { get; }
    internal ExcelPivotTableDataField DataField { get; }
    internal ExcelPivotTableField(XmlNamespaceManager ns, XmlNode topNode, ExcelPivotTable table, int index, int baseIndex);
    [CompilerGeneratedAttribute]
internal ExcelPivotTable get_PivotTable();
    [CompilerGeneratedAttribute]
internal void set_PivotTable(ExcelPivotTable value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
internal int get_BaseIndex();
    [CompilerGeneratedAttribute]
internal void set_BaseIndex(int value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_Compact();
    public void set_Compact(bool value);
    public bool get_Outline();
    public void set_Outline(bool value);
    public bool get_SubtotalTop();
    public void set_SubtotalTop(bool value);
    public bool get_MultipleItemSelectionAllowed();
    public void set_MultipleItemSelectionAllowed(bool value);
    public bool get_ShowAll();
    public void set_ShowAll(bool value);
    public bool get_ShowDropDowns();
    public void set_ShowDropDowns(bool value);
    public bool get_ShowInFieldList();
    public void set_ShowInFieldList(bool value);
    public bool get_ShowAsCaption();
    public void set_ShowAsCaption(bool value);
    public bool get_ShowMemberPropertyInCell();
    public void set_ShowMemberPropertyInCell(bool value);
    public bool get_ShowMemberPropertyToolTip();
    public void set_ShowMemberPropertyToolTip(bool value);
    public eSortType get_Sort();
    public void set_Sort(eSortType value);
    public void SetAutoSort(ExcelPivotTableDataField dataField, eSortType sortType);
    public void RemoveAutoSort();
    [CompilerGeneratedAttribute]
public ExcelPivotAreaAutoSort get_AutoSort();
    [CompilerGeneratedAttribute]
private void set_AutoSort(ExcelPivotAreaAutoSort value);
    public bool get_IncludeNewItemsInFilter();
    public void set_IncludeNewItemsInFilter(bool value);
    public eSubTotalFunctions get_SubTotalFunctions();
    public void set_SubTotalFunctions(eSubTotalFunctions value);
    public ePivotFieldAxis get_Axis();
    internal void set_Axis(ePivotFieldAxis value);
    public bool get_IsRowField();
    internal void set_IsRowField(bool value);
    public bool get_IsColumnField();
    internal void set_IsColumnField(bool value);
    public bool get_IsDataField();
    public void set_IsDataField(bool value);
    public bool get_IsPageField();
    internal void set_IsPageField(bool value);
    public ExcelPivotTablePageFieldSettings get_PageFieldSettings();
    internal eDateGroupBy get_DateGrouping();
    public ExcelPivotTableFieldGroup get_Grouping();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    internal XmlElement AppendField(XmlNode rowsNode, int index, string fieldNodeText, string indexAttrText);
    public ExcelPivotTableFieldItemsCollection get_Items();
    internal void LoadItems();
    private void Load_SubTotalFunction();
    private void Update_SubTotalFunctions();
    public ExcelPivotTableCacheField get_Cache();
    public void set_Cache(ExcelPivotTableCacheField value);
    public void AddNumericGrouping(double Start, double End, double Interval);
    public ExcelPivotTableSlicer AddSlicer();
    public ExcelPivotTableSlicer get_Slicer();
    internal void set_Slicer(ExcelPivotTableSlicer value);
    public void AddDateGrouping(eDateGroupBy groupBy);
    public void AddDateGrouping(eDateGroupBy groupBy, DateTime startDate, DateTime endDate);
    public void AddDateGrouping(int days, DateTime startDate, DateTime endDate);
    private ExcelPivotTableField AddField(eDateGroupBy groupBy, DateTime startDate, DateTime endDate, Boolean& firstField);
    private ExcelPivotTableField AddField(eDateGroupBy groupBy, DateTime startDate, DateTime endDate, Boolean& firstField, int interval);
    private static void UpdatePivotTableGroupItems(ExcelPivotTableField field, PivotTableCacheInternal cacheRef, bool addTypeDefault);
    internal void UpdateGroupItems(ExcelPivotTableCacheField cacheField, bool addTypeDefault);
    private Dictionary`2<object, ExcelPivotTableFieldItem> GetItemsDictionary();
    private void AddDateGrouping(eDateGroupBy groupBy, DateTime startDate, DateTime endDate, int groupInterval);
    private void ValidateGrouping();
    internal void SaveToXml();
    internal int GetGroupingKey(int shIndex);
    private int GetNumericGroupIndex(ExcelPivotTableFieldNumericGroup ng, object value);
    private static int GetDateGroupIndex(ExcelPivotTableFieldDateGroup dg, object value);
    private static int GetDayGroupIndex(ExcelPivotTableFieldDateGroup dg, DateTime startDate, DateTime dt);
    internal Dictionary`2<object, int> GetLookup();
    internal bool get_ShouldHaveItems();
    public ExcelPivotTableFieldFilterCollection get_Filters();
    internal Nullable`1<int> get_NumFmtId();
    internal void set_NumFmtId(Nullable`1<int> value);
    internal bool get_DragToCol();
    internal bool get_DragToRow();
    internal bool get_DragToPage();
    internal ExcelPivotTableDataField get_DataField();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollection : ExcelPivotTableFieldCollectionBase`1<ExcelPivotTableField> {
    private ExcelPivotTable _table;
    public ExcelPivotTableField Item { get; }
    internal ExcelPivotTableFieldCollection(ExcelPivotTable table);
    public ExcelPivotTableField get_Item(string name);
    public ExcelPivotTableField GetDateGroupField(eDateGroupBy GroupBy);
    public ExcelPivotTableField GetNumericGroupField();
    internal ExcelPivotTableField AddDateGroupField(int index);
    internal ExcelPivotTableField AddField(int index);
    private XmlElement CreateFieldNode(ExcelPivotTable tbl);
    public ExcelPivotTableField AddCalculatedField(string name, string formula);
    internal void RemoveAt(int index);
    internal void Remove(ExcelPivotTableField item);
}
[DefaultMemberAttribute("Item")]
public abstract class OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollectionBase`1 : object {
    internal List`1<T> _list;
    public int Count { get; }
    public T Item { get; }
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    internal void AddInternal(T field);
    internal void Clear();
    public virtual T get_Item(int Index);
    internal int IndexOf(T item);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldDateGroup : ExcelPivotTableFieldGroup {
    private static string groupByPath;
    public eDateGroupBy GroupBy { get; private set; }
    public bool AutoStart { get; }
    public bool AutoEnd { get; }
    public Nullable`1<DateTime> StartDate { get; }
    public Nullable`1<DateTime> EndDate { get; }
    public Nullable`1<int> GroupInterval { get; }
    internal ExcelPivotTableFieldDateGroup(XmlNamespaceManager ns, XmlNode topNode);
    public eDateGroupBy get_GroupBy();
    private void set_GroupBy(eDateGroupBy value);
    public bool get_AutoStart();
    public bool get_AutoEnd();
    public Nullable`1<DateTime> get_StartDate();
    public Nullable`1<DateTime> get_EndDate();
    public Nullable`1<int> get_GroupInterval();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldGroup : XmlHelper {
    public Nullable`1<int> BaseIndex { get; internal set; }
    public Nullable`1<int> ParentIndex { get; }
    internal ExcelPivotTableFieldGroup(XmlNamespaceManager ns, XmlNode topNode);
    public Nullable`1<int> get_BaseIndex();
    internal void set_BaseIndex(Nullable`1<int> value);
    public Nullable`1<int> get_ParentIndex();
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItem : object {
    internal eBoolFlags flags;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private eItemType <Type>k__BackingField;
    public string Text { get; public set; }
    public object Value { get; internal set; }
    public bool Hidden { get; public set; }
    public bool ShowDetails { get; public set; }
    internal bool C { get; internal set; }
    internal bool D { get; internal set; }
    internal bool E { get; internal set; }
    internal bool F { get; internal set; }
    internal bool M { get; internal set; }
    internal bool S { get; internal set; }
    internal int X { get; internal set; }
    internal eItemType Type { get; internal set; }
    internal ExcelPivotTableFieldItem(XmlElement node);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_ShowDetails();
    public void set_ShowDetails(bool value);
    internal bool get_C();
    internal void set_C(bool value);
    internal bool get_D();
    internal void set_D(bool value);
    internal bool get_E();
    internal void set_E(bool value);
    internal bool get_F();
    internal void set_F(bool value);
    internal bool get_M();
    internal void set_M(bool value);
    internal bool get_S();
    internal void set_S(bool value);
    [CompilerGeneratedAttribute]
internal int get_X();
    [CompilerGeneratedAttribute]
internal void set_X(int value);
    [CompilerGeneratedAttribute]
internal eItemType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(eItemType value);
    internal void GetXmlString(StringBuilder sb);
    private void AddBool(StringBuilder sb, string attrName, bool b, bool defaultValue);
    private void SetFlag(eBoolFlags flag, bool value);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection : ExcelPivotTableFieldCollectionBase`1<ExcelPivotTableFieldItem> {
    private ExcelPivotTableField _field;
    internal Lookup`2<int, int> _cacheLookup;
    private List`1<int> _hiddenItemIndex;
    internal List`1<int> HiddenItemIndex { get; }
    internal ExcelPivotTableFieldItemsCollection(ExcelPivotTableField field);
    internal void InitNewCalculation();
    internal List`1<int> get_HiddenItemIndex();
    private List`1<int> GetHiddenList();
    public bool Contains(object value);
    public ExcelPivotTableFieldItem GetByValue(object value);
    public int GetIndexByValue(object value);
    internal void MatchValueToIndex();
    public void ShowAll();
    public void ShowDetails(bool isExpanded);
    public void SelectSingleItem(int index);
    public void Refresh();
    internal void Sort(eSortType sort);
    internal ExcelPivotTableFieldItem GetByCacheIndex(int index);
    [CompilerGeneratedAttribute]
private int <MatchValueToIndex>b__11_2(ExcelPivotTableFieldItem y);
    [CompilerGeneratedAttribute]
private int <Sort>b__16_2(ExcelPivotTableFieldItem y);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldNumericGroup : ExcelPivotTableFieldGroup {
    private static string startPath;
    private static string endPath;
    private static string groupIntervalPath;
    [CompilerGeneratedAttribute]
private bool <EndIsDivisibleWithInterval>k__BackingField;
    public double Start { get; private set; }
    public double End { get; private set; }
    public double Interval { get; private set; }
    internal bool EndIsDivisibleWithInterval { get; private set; }
    internal ExcelPivotTableFieldNumericGroup(XmlNamespaceManager ns, XmlNode topNode);
    public double get_Start();
    private void set_Start(double value);
    public double get_End();
    private void set_End(double value);
    public double get_Interval();
    private void set_Interval(double value);
    internal void CalculateEndIsDivisibleWithInterval();
    [CompilerGeneratedAttribute]
internal bool get_EndIsDivisibleWithInterval();
    [CompilerGeneratedAttribute]
private void set_EndIsDivisibleWithInterval(bool value);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTablePageFieldSettings : XmlHelper {
    internal ExcelPivotTableField _field;
    [CompilerGeneratedAttribute]
private object <SelectedValue>k__BackingField;
    internal int Index { get; internal set; }
    public int Caption { get; public set; }
    public string Name { get; public set; }
    public int SelectedItem { get; internal set; }
    internal object SelectedValue { get; internal set; }
    internal int Hier { get; internal set; }
    internal ExcelPivotTablePageFieldSettings(XmlNamespaceManager ns, XmlNode topNode, ExcelPivotTableField field, int index);
    internal int get_Index();
    internal void set_Index(int value);
    public int get_Caption();
    public void set_Caption(int value);
    public string get_Name();
    public void set_Name(string value);
    public int get_SelectedItem();
    internal void set_SelectedItem(int value);
    [CompilerGeneratedAttribute]
internal object get_SelectedValue();
    [CompilerGeneratedAttribute]
internal void set_SelectedValue(object value);
    internal int get_Hier();
    internal void set_Hier(int value);
}
public class OfficeOpenXml.Table.PivotTable.ExcelPivotTableRowColumnFieldCollection : ExcelPivotTableFieldCollectionBase`1<ExcelPivotTableField> {
    internal string _topNode;
    internal ExcelPivotTable _table;
    internal ExcelPivotTableRowColumnFieldCollection(ExcelPivotTable table, string topNode);
    public ExcelPivotTableField Add(ExcelPivotTableField Field);
    internal ExcelPivotTableField Insert(ExcelPivotTableField Field, int Index);
    private void SetFlag(ExcelPivotTableField field, bool value);
    public void Remove(ExcelPivotTableField Field);
    public void RemoveAt(int Index);
}
public class OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection : ExcelPivotTableFilterBaseCollection {
    internal ExcelPivotTableFieldFilterCollection(ExcelPivotTableField field);
    public ExcelPivotTableFilter AddCaptionFilter(ePivotTableCaptionFilterType type, string value1, string value2);
    public ExcelPivotTableFilter AddDateValueFilter(ePivotTableDateValueFilterType type, DateTime value1, Nullable`1<DateTime> value2);
    public ExcelPivotTableFilter AddDatePeriodFilter(ePivotTableDatePeriodFilterType type);
    public ExcelPivotTableFilter AddValueFilter(ePivotTableValueFilterType type, ExcelPivotTableDataField dataField, object value1, object value2);
    public ExcelPivotTableFilter AddValueFilter(ePivotTableValueFilterType type, int dataFieldIndex, object value1, object value2);
    public ExcelPivotTableFilter AddTop10Filter(ePivotTableTop10FilterType type, ExcelPivotTableDataField dataField, double value, bool isTop);
    public ExcelPivotTableFilter AddTop10Filter(ePivotTableTop10FilterType type, int dataFieldIndex, double value, bool isTop);
}
public class OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter : XmlHelper {
    private XmlNode _filterColumnNode;
    private bool _date1904;
    [CompilerGeneratedAttribute]
private object <Value1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value2>k__BackingField;
    private ExcelFilterColumn _filter;
    public int Id { get; internal set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public ePivotTableFilterType Type { get; internal set; }
    public int EvalOrder { get; internal set; }
    internal int Fld { get; internal set; }
    internal int MeasureFldIndex { get; internal set; }
    internal int MeasureHierIndex { get; internal set; }
    internal int MemberPropertyFldIndex { get; internal set; }
    public object Value1 { get; public set; }
    public object Value2 { get; public set; }
    internal string StringValue1 { get; internal set; }
    internal string StringValue2 { get; internal set; }
    internal ExcelFilterColumn Filter { get; internal set; }
    internal ExcelPivotTableFilter(XmlNamespaceManager nsm, XmlNode topNode, bool date1904);
    private void LoadValues();
    private Nullable`1<DateTime> GetValueDate(string xPath);
    public int get_Id();
    internal void set_Id(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    internal void CreateDateCustomFilter(ePivotTableDateValueFilterType type);
    internal void CreateDateDynamicFilter(ePivotTableDatePeriodFilterType type);
    internal void CreateTop10Filter(ePivotTableTop10FilterType type, bool isTop, double value);
    internal void CreateCaptionCustomFilter(ePivotTableCaptionFilterType type);
    internal void CreateValueCustomFilter(ePivotTableValueFilterType type);
    private string GetFilterValueAsString(object v);
    internal void CreateValueFilter();
    internal bool MatchesLabel(ExcelPivotTable pivotTable, PivotTableCacheRecords recs, int index);
    private bool MatchCaptions(ExcelPivotTable pivotTable, int index);
    private bool MatchDate(ExcelPivotTable pivotTable, int index);
    internal bool MatchNumeric(object value);
    public ePivotTableFilterType get_Type();
    internal void set_Type(ePivotTableFilterType value);
    public int get_EvalOrder();
    internal void set_EvalOrder(int value);
    internal int get_Fld();
    internal void set_Fld(int value);
    internal int get_MeasureFldIndex();
    internal void set_MeasureFldIndex(int value);
    internal int get_MeasureHierIndex();
    internal void set_MeasureHierIndex(int value);
    internal int get_MemberPropertyFldIndex();
    internal void set_MemberPropertyFldIndex(int value);
    [CompilerGeneratedAttribute]
public object get_Value1();
    [CompilerGeneratedAttribute]
public void set_Value1(object value);
    [CompilerGeneratedAttribute]
public object get_Value2();
    [CompilerGeneratedAttribute]
public void set_Value2(object value);
    internal string get_StringValue1();
    internal void set_StringValue1(string value);
    internal string get_StringValue2();
    internal void set_StringValue2(string value);
    internal ExcelFilterColumn get_Filter();
    internal void set_Filter(ExcelFilterColumn value);
}
[DefaultMemberAttribute("Item")]
public abstract class OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterBaseCollection : object {
    internal List`1<ExcelPivotTableFilter> _filters;
    internal ExcelPivotTable _table;
    internal ExcelPivotTableField _field;
    public int Count { get; }
    public ExcelPivotTableFilter Item { get; }
    internal ExcelPivotTableFilterBaseCollection(ExcelPivotTable table);
    internal ExcelPivotTableFilterBaseCollection(ExcelPivotTableField field);
    internal void ReloadTable();
    public sealed virtual IEnumerator`1<ExcelPivotTableFilter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal XmlNode GetOrCreateFiltersNode();
    internal ExcelPivotTableFilter CreateFilter();
    public int get_Count();
    public ExcelPivotTableFilter get_Item(int index);
}
public class OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterCollection : ExcelPivotTableFilterBaseCollection {
    internal ExcelPivotTableFilterCollection(ExcelPivotTable table);
}
public class OfficeOpenXml.Table.PivotTable.PivotItemReference : ValueType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public int Index { get; internal set; }
    public object Value { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
}
public class OfficeOpenXml.Table.PivotTable.PivotNull : ValueType {
    public sealed virtual bool Equals(PivotNull x, PivotNull y);
    public virtual bool Equals(object obj);
    public sealed virtual int GetHashCode(PivotNull obj);
    public virtual string ToString();
}
internal class OfficeOpenXml.Table.PivotTable.PivotTableCacheInternal : XmlHelper {
    internal List`1<ExcelPivotTable> _pivotTables;
    internal ExcelWorkbook _wb;
    internal static string _sourceWorksheetPath;
    internal static string _sourceNamePath;
    internal static string _sourceAddressPath;
    internal static string _sourceRIdPath;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <CacheDefinitionXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CacheDefinitionUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CacheRecordUri>k__BackingField;
    [CompilerGeneratedAttribute]
private PivotTableCacheRecords <Records>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackageRelationship <RecordRelationship>k__BackingField;
    private List`1<ExcelPivotTableCacheField> _fields;
    private int _cacheId;
    private int _extLstCacheId;
    internal string Ref { get; }
    internal string SourceName { get; }
    internal string SourceWorksheetName { get; internal set; }
    internal string SourceRId { get; internal set; }
    internal ExcelRangeBase SourceRange { get; }
    internal ZipPackagePart Part { get; internal set; }
    internal XmlDocument CacheDefinitionXml { get; internal set; }
    internal Uri CacheDefinitionUri { get; internal set; }
    internal Uri CacheRecordUri { get; internal set; }
    internal PivotTableCacheRecords Records { get; private set; }
    internal ZipPackageRelationship RecordRelationship { get; internal set; }
    internal string RecordRelationshipId { get; internal set; }
    internal List`1<ExcelPivotTableCacheField> Fields { get; }
    internal eSourceType CacheSource { get; }
    internal int CacheId { get; internal set; }
    internal int ExtLstCacheId { get; internal set; }
    internal bool RefreshOnLoad { get; internal set; }
    public bool SaveData { get; public set; }
    public Uri SourceExternalReferenceUri { get; }
    public PivotTableCacheInternal(XmlNamespaceManager nsm, ExcelWorkbook wb);
    public PivotTableCacheInternal(ExcelWorkbook wb, Uri uri, int cacheId);
    internal string get_Ref();
    internal string get_SourceName();
    internal string get_SourceWorksheetName();
    internal void set_SourceWorksheetName(string value);
    internal string get_SourceRId();
    internal void set_SourceRId(string value);
    internal ExcelRangeBase get_SourceRange();
    private ExcelRangeBase GetRangeByName(ExcelWorksheet w, string name);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal XmlDocument get_CacheDefinitionXml();
    [CompilerGeneratedAttribute]
internal void set_CacheDefinitionXml(XmlDocument value);
    [CompilerGeneratedAttribute]
internal Uri get_CacheDefinitionUri();
    [CompilerGeneratedAttribute]
internal void set_CacheDefinitionUri(Uri value);
    [CompilerGeneratedAttribute]
internal Uri get_CacheRecordUri();
    [CompilerGeneratedAttribute]
internal void set_CacheRecordUri(Uri value);
    [CompilerGeneratedAttribute]
internal PivotTableCacheRecords get_Records();
    [CompilerGeneratedAttribute]
private void set_Records(PivotTableCacheRecords value);
    [CompilerGeneratedAttribute]
internal ZipPackageRelationship get_RecordRelationship();
    [CompilerGeneratedAttribute]
internal void set_RecordRelationship(ZipPackageRelationship value);
    internal string get_RecordRelationshipId();
    internal void set_RecordRelationshipId(string value);
    internal List`1<ExcelPivotTableCacheField> get_Fields();
    private void LoadFields();
    internal void RefreshFields();
    private void UpdatePageFieldValues();
    private void RemoveDeletedFields(ExcelRangeBase r);
    private void UpdateRowColumnPageFields(List`1<List`1<string>> tableFields);
    private static void RemoveEmptyFieldsElement(ExcelPivotTableRowColumnFieldCollection col);
    private void ChangeIndex(ExcelPivotTableRowColumnFieldCollection fields, List`1<string> prevFields);
    private List`1<List`1<string>> GetTableFields();
    private void RefreshPivotTableItems();
    internal eSourceType get_CacheSource();
    internal void InitNew(ExcelPivotTable pivotTable, ExcelRangeBase sourceAddress, string xml);
    internal void ResetRecordXml(ZipPackage pck);
    private string GetStartXml(ExcelWorksheet sourceWorksheet, ExcelRangeBase sourceRange);
    internal void SetSourceName(string name);
    internal void SetSourceAddress(string address);
    internal int get_CacheId();
    internal void set_CacheId(int value);
    internal int get_ExtLstCacheId();
    internal void set_ExtLstCacheId(int value);
    internal bool get_RefreshOnLoad();
    internal void set_RefreshOnLoad(bool value);
    public bool get_SaveData();
    public void set_SaveData(bool value);
    public Uri get_SourceExternalReferenceUri();
    private void RemoveRecordsXml();
    internal void AddRecordsXml();
    internal void Delete();
    internal ExcelPivotTableCacheField AddDateGroupField(ExcelPivotTableField field, eDateGroupBy groupBy, DateTime startDate, DateTime endDate, int interval);
    internal ExcelPivotTableCacheField AddFormula(string name, string formula);
    private ExcelPivotTableCacheField CreateField(string name, int index, bool databaseField);
    internal string GetSourceAddress();
    internal int GetMaxRow();
}
internal class OfficeOpenXml.Table.PivotTable.PivotTableCalculation : object {
    private static Dictionary`2<DataFieldFunctions, PivotFunction> _calculateFunctions;
    private static Dictionary`2<eShowDataAs, PivotShowAsBase> _calculateShowAs;
    private static PivotTableCalculation();
    internal static PivotCalculationStore GetNewCalculatedItems();
    internal static Dictionary`2<Int32[], HashSet`1<Int32[]>> GetNewKeys();
    internal static bool Calculate(ExcelPivotTable pivotTable, List`1& calculatedItems, List`1& keys);
    private static void CalculateRowColumnSubtotals(ExcelPivotTable pivotTable, List`1<Dictionary`2<Int32[], HashSet`1<Int32[]>>> keys);
    private static DataFieldFunctions GetDataTypeFunction(eSubTotalFunctions stf);
    private static void SetRowColumnsItemsToHashSets(ExcelPivotTable pivotTable);
    private static void CalculateSourceFields(ExcelPivotTable pivotTable);
    private static bool GetSumCalcItems(ExcelPivotTable pivotTable, string fieldName, PivotCalculationStore& store);
    private static void CalculateField(ExcelPivotTable pivotTable, PivotCalculationStore dataFieldItems, List`1<Dictionary`2<Int32[], HashSet`1<Int32[]>>> keys, ExcelPivotTableCacheField cacheField, DataFieldFunctions function);
    internal static Int32[] GetKeyWithParentLevel(Int32[] key, Int32[] childKey, int rf);
    internal static bool IsKeyGrandTotal(Int32[] key, int startIx, int endIx);
    internal static bool IsReferencingUngroupableKey(Int32[] key, int rf);
    internal static List`1<List`1<Int32[]>> GetAsCalculatedTable(ExcelPivotTable pivotTable);
}
internal class OfficeOpenXml.Table.PivotTable.PivotTableColumnCalculation : object {
    private ExcelPivotTable _tbl;
    private List`1<PivotCalculationStore> _calcItems;
    private List`1<int> _calcOrder;
    private FormulaParser _formulaParser;
    private FunctionRepository _fr;
    public PivotTableColumnCalculation(ExcelPivotTable tbl);
    internal void CalculateFormulaFields(List`1<int> fieldIndex);
    private PivotCalculationStore CalculateField(ExcelPivotTableField f, IList`1<Token> tokens, List`1<Int32[]> calcTokens, List`1<int> fieldIndex);
    private Token GetTokenFromValue(object v);
    private List`1<Int32[]> GetPivotFieldReferencesInFormula(ExcelPivotTableField f, IList`1<Token> tokens);
    private List`1<int> GetCalcOrder();
    private bool ValidateNoCircularReference(ExcelPivotTableField f, List`1<int> calcOrder, Stack`1<ExcelPivotTableField> prevFields);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Table.PivotTable.PivotTableEnumExtentions : object {
    [ExtensionAttribute]
internal static ePivotAreaType ToPivotAreaType(string value);
    [ExtensionAttribute]
internal static string ToPivotAreaTypeString(ePivotAreaType value);
    [ExtensionAttribute]
internal static ePivotTableAxis ToPivotTableAxis(string value);
    [ExtensionAttribute]
internal static string ToPivotTableAxisString(ePivotTableAxis value);
    [ExtensionAttribute]
internal static string FromShowDataAs(eShowDataAs value);
    [ExtensionAttribute]
internal static eShowDataAs ToShowDataAs(string text);
}
public enum OfficeOpenXml.Table.PivotTableStyles : Enum {
    public int value__;
    public static PivotTableStyles None;
    public static PivotTableStyles Custom;
    public static PivotTableStyles Light1;
    public static PivotTableStyles Light2;
    public static PivotTableStyles Light3;
    public static PivotTableStyles Light4;
    public static PivotTableStyles Light5;
    public static PivotTableStyles Light6;
    public static PivotTableStyles Light7;
    public static PivotTableStyles Light8;
    public static PivotTableStyles Light9;
    public static PivotTableStyles Light10;
    public static PivotTableStyles Light11;
    public static PivotTableStyles Light12;
    public static PivotTableStyles Light13;
    public static PivotTableStyles Light14;
    public static PivotTableStyles Light15;
    public static PivotTableStyles Light16;
    public static PivotTableStyles Light17;
    public static PivotTableStyles Light18;
    public static PivotTableStyles Light19;
    public static PivotTableStyles Light20;
    public static PivotTableStyles Light21;
    public static PivotTableStyles Light22;
    public static PivotTableStyles Light23;
    public static PivotTableStyles Light24;
    public static PivotTableStyles Light25;
    public static PivotTableStyles Light26;
    public static PivotTableStyles Light27;
    public static PivotTableStyles Light28;
    public static PivotTableStyles Medium1;
    public static PivotTableStyles Medium2;
    public static PivotTableStyles Medium3;
    public static PivotTableStyles Medium4;
    public static PivotTableStyles Medium5;
    public static PivotTableStyles Medium6;
    public static PivotTableStyles Medium7;
    public static PivotTableStyles Medium8;
    public static PivotTableStyles Medium9;
    public static PivotTableStyles Medium10;
    public static PivotTableStyles Medium11;
    public static PivotTableStyles Medium12;
    public static PivotTableStyles Medium13;
    public static PivotTableStyles Medium14;
    public static PivotTableStyles Medium15;
    public static PivotTableStyles Medium16;
    public static PivotTableStyles Medium17;
    public static PivotTableStyles Medium18;
    public static PivotTableStyles Medium19;
    public static PivotTableStyles Medium20;
    public static PivotTableStyles Medium21;
    public static PivotTableStyles Medium22;
    public static PivotTableStyles Medium23;
    public static PivotTableStyles Medium24;
    public static PivotTableStyles Medium25;
    public static PivotTableStyles Medium26;
    public static PivotTableStyles Medium27;
    public static PivotTableStyles Medium28;
    public static PivotTableStyles Dark1;
    public static PivotTableStyles Dark2;
    public static PivotTableStyles Dark3;
    public static PivotTableStyles Dark4;
    public static PivotTableStyles Dark5;
    public static PivotTableStyles Dark6;
    public static PivotTableStyles Dark7;
    public static PivotTableStyles Dark8;
    public static PivotTableStyles Dark9;
    public static PivotTableStyles Dark10;
    public static PivotTableStyles Dark11;
    public static PivotTableStyles Dark12;
    public static PivotTableStyles Dark13;
    public static PivotTableStyles Dark14;
    public static PivotTableStyles Dark15;
    public static PivotTableStyles Dark16;
    public static PivotTableStyles Dark17;
    public static PivotTableStyles Dark18;
    public static PivotTableStyles Dark19;
    public static PivotTableStyles Dark20;
    public static PivotTableStyles Dark21;
    public static PivotTableStyles Dark22;
    public static PivotTableStyles Dark23;
    public static PivotTableStyles Dark24;
    public static PivotTableStyles Dark25;
    public static PivotTableStyles Dark26;
    public static PivotTableStyles Dark27;
    public static PivotTableStyles Dark28;
}
public enum OfficeOpenXml.Table.RowFunctions : Enum {
    public int value__;
    public static RowFunctions Average;
    public static RowFunctions Count;
    public static RowFunctions CountNums;
    public static RowFunctions Custom;
    public static RowFunctions Max;
    public static RowFunctions Min;
    public static RowFunctions None;
    public static RowFunctions StdDev;
    public static RowFunctions Sum;
    public static RowFunctions Var;
}
internal class OfficeOpenXml.Table.TableAdjustFormula : object {
    private ExcelTable _tbl;
    public TableAdjustFormula(ExcelTable tbl);
    internal void AdjustFormulas(string prevName, string name);
    private void AdjustName(ExcelNamedRange n, string prevName, string name);
    private string ReplaceTableName(string formula, string prevName, string name);
}
public enum OfficeOpenXml.Table.TableStyles : Enum {
    public int value__;
    public static TableStyles None;
    public static TableStyles Custom;
    public static TableStyles Light1;
    public static TableStyles Light2;
    public static TableStyles Light3;
    public static TableStyles Light4;
    public static TableStyles Light5;
    public static TableStyles Light6;
    public static TableStyles Light7;
    public static TableStyles Light8;
    public static TableStyles Light9;
    public static TableStyles Light10;
    public static TableStyles Light11;
    public static TableStyles Light12;
    public static TableStyles Light13;
    public static TableStyles Light14;
    public static TableStyles Light15;
    public static TableStyles Light16;
    public static TableStyles Light17;
    public static TableStyles Light18;
    public static TableStyles Light19;
    public static TableStyles Light20;
    public static TableStyles Light21;
    public static TableStyles Medium1;
    public static TableStyles Medium2;
    public static TableStyles Medium3;
    public static TableStyles Medium4;
    public static TableStyles Medium5;
    public static TableStyles Medium6;
    public static TableStyles Medium7;
    public static TableStyles Medium8;
    public static TableStyles Medium9;
    public static TableStyles Medium10;
    public static TableStyles Medium11;
    public static TableStyles Medium12;
    public static TableStyles Medium13;
    public static TableStyles Medium14;
    public static TableStyles Medium15;
    public static TableStyles Medium16;
    public static TableStyles Medium17;
    public static TableStyles Medium18;
    public static TableStyles Medium19;
    public static TableStyles Medium20;
    public static TableStyles Medium21;
    public static TableStyles Medium22;
    public static TableStyles Medium23;
    public static TableStyles Medium24;
    public static TableStyles Medium25;
    public static TableStyles Medium26;
    public static TableStyles Medium27;
    public static TableStyles Medium28;
    public static TableStyles Dark1;
    public static TableStyles Dark2;
    public static TableStyles Dark3;
    public static TableStyles Dark4;
    public static TableStyles Dark5;
    public static TableStyles Dark6;
    public static TableStyles Dark7;
    public static TableStyles Dark8;
    public static TableStyles Dark9;
    public static TableStyles Dark10;
    public static TableStyles Dark11;
}
public class OfficeOpenXml.ThreadedComments.ExcelThreadedComment : XmlHelper {
    private ExcelWorkbook _workbook;
    private ExcelThreadedCommentThread _thread;
    private ExcelCellAddress _cellAddress;
    private ExcelThreadedCommentMentionCollection _mentions;
    unknown ExcelThreadedCommentThread Thread {internal set; }
    public bool ContainsMentions { get; }
    internal string Ref { get; internal set; }
    public ExcelCellAddress CellAddress { get; internal set; }
    public DateTime DateCreated { get; public set; }
    public string Id { get; internal set; }
    public string PersonId { get; public set; }
    public ExcelThreadedCommentPerson Author { get; }
    public string ParentId { get; public set; }
    internal Nullable`1<bool> Done { get; internal set; }
    public string Text { get; internal set; }
    public ExcelThreadedCommentMentionCollection Mentions { get; }
    internal ExcelThreadedComment(XmlNode topNode, XmlNamespaceManager namespaceManager, ExcelWorkbook workbook);
    internal ExcelThreadedComment(XmlNode topNode, XmlNamespaceManager namespaceManager, ExcelWorkbook workbook, ExcelThreadedCommentThread thread);
    internal void set_Thread(ExcelThreadedCommentThread value);
    internal static string NewId();
    public bool get_ContainsMentions();
    internal string get_Ref();
    internal void set_Ref(string value);
    public ExcelCellAddress get_CellAddress();
    internal void set_CellAddress(ExcelCellAddress value);
    public DateTime get_DateCreated();
    public void set_DateCreated(DateTime value);
    public string get_Id();
    internal void set_Id(string value);
    public string get_PersonId();
    public void set_PersonId(string value);
    public ExcelThreadedCommentPerson get_Author();
    public string get_ParentId();
    public void set_ParentId(string value);
    internal Nullable`1<bool> get_Done();
    internal void set_Done(Nullable`1<bool> value);
    public string get_Text();
    internal void set_Text(string value);
    public void EditText(string newText);
    public void EditText(string newTextWithFormats, ExcelThreadedCommentPerson[] personsToMention);
    public ExcelThreadedCommentMentionCollection get_Mentions();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection : XmlHelper {
    private ExcelPackage _package;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    private Dictionary`2<string, ExcelThreadedComment> _commentsIndex;
    private List`1<ExcelThreadedComment> _commentList;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <Worksheet>k__BackingField;
    internal Uri Uri { get; internal set; }
    internal string RelId { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    public ExcelWorksheet Worksheet { get; public set; }
    public ExcelThreadedComment Item { get; }
    public ExcelThreadedComment Item { get; }
    public int Count { get; }
    internal ExcelThreadedCommentCollection(ExcelWorksheet worksheet, XmlNode topNode);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
internal void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
internal string get_RelId();
    [CompilerGeneratedAttribute]
internal void set_RelId(string value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
public ExcelWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
public void set_Worksheet(ExcelWorksheet value);
    public ExcelThreadedComment get_Item(int index);
    public ExcelThreadedComment get_Item(string id);
    public sealed virtual IEnumerator`1<ExcelThreadedComment> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    private void RebuildIndex();
    internal void Add(ExcelThreadedComment comment);
    internal bool Remove(ExcelThreadedComment comment);
    internal void Clear();
    public virtual string ToString();
}
public class OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention : XmlHelper {
    public int StartIndex { get; public set; }
    public int Length { get; public set; }
    public string MentionId { get; public set; }
    public string MentionPersonId { get; public set; }
    public ExcelThreadedCommentMention(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    internal static string NewId();
    public int get_StartIndex();
    public void set_StartIndex(int value);
    public int get_Length();
    public void set_Length(int value);
    public string get_MentionId();
    public void set_MentionId(string value);
    public string get_MentionPersonId();
    public void set_MentionPersonId(string value);
}
public class OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection : XmlHelper {
    private List`1<ExcelThreadedCommentMention> _mentionList;
    internal ExcelThreadedCommentMentionCollection(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    private void LoadMentions();
    public sealed virtual IEnumerator`1<ExcelThreadedCommentMention> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void AddMention(ExcelThreadedCommentPerson person, int textPosition);
    internal void SortAndAddMentionsToXml();
    internal void Clear();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <SortAndAddMentionsToXml>b__6_1(ExcelThreadedCommentMention x);
}
public class OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson : XmlHelper {
    public string Id { get; public set; }
    public string DisplayName { get; public set; }
    public string UserId { get; public set; }
    public IdentityProvider ProviderId { get; public set; }
    internal ExcelThreadedCommentPerson(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    internal static string NewId();
    public string get_Id();
    public void set_Id(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_UserId();
    public void set_UserId(string value);
    public IdentityProvider get_ProviderId();
    public void set_ProviderId(IdentityProvider value);
    public sealed virtual bool Equals(ExcelThreadedCommentPerson x, ExcelThreadedCommentPerson y);
    public sealed virtual int GetHashCode(ExcelThreadedCommentPerson obj);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection : object {
    private ExcelWorkbook _workbook;
    private List`1<ExcelThreadedCommentPerson> _personList;
    [CompilerGeneratedAttribute]
private XmlDocument <PersonsXml>k__BackingField;
    public XmlDocument PersonsXml { get; private set; }
    public int Count { get; }
    public ExcelThreadedCommentPerson Item { get; }
    public ExcelThreadedCommentPerson Item { get; }
    public ExcelThreadedCommentPersonCollection(ExcelWorkbook workbook);
    [CompilerGeneratedAttribute]
public XmlDocument get_PersonsXml();
    [CompilerGeneratedAttribute]
private void set_PersonsXml(XmlDocument value);
    public int get_Count();
    public ExcelThreadedCommentPerson get_Item(int index);
    public ExcelThreadedCommentPerson get_Item(string id);
    public ExcelThreadedCommentPerson Find(Predicate`1<ExcelThreadedCommentPerson> match);
    public IEnumerable`1<ExcelThreadedCommentPerson> FindAll(Predicate`1<ExcelThreadedCommentPerson> match);
    public ExcelThreadedCommentPerson Add(string displayName);
    public ExcelThreadedCommentPerson Add(string displayName, string userId, IdentityProvider identityProvider);
    public ExcelThreadedCommentPerson Add(string displayName, string userId, IdentityProvider identityProvider, string id);
    public sealed virtual IEnumerator`1<ExcelThreadedCommentPerson> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(ExcelThreadedCommentPerson person);
    public void Remove(ExcelThreadedCommentPerson person);
    public void Clear();
    public virtual string ToString();
    internal void Save(ExcelPackage package, ZipPackagePart WorkbookPart, Uri personsUri);
}
public class OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread : object {
    [CompilerGeneratedAttribute]
private ExcelCellAddress <CellAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelThreadedCommentCollection <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <ThreadedCommentsXml>k__BackingField;
    public ExcelCellAddress CellAddress { get; internal set; }
    public ExcelThreadedCommentCollection Comments { get; private set; }
    public ExcelWorksheet Worksheet { get; private set; }
    public XmlDocument ThreadedCommentsXml { get; private set; }
    public bool IsResolved { get; }
    internal ExcelThreadedCommentThread(ExcelCellAddress cellAddress, XmlDocument commentsXml, ExcelWorksheet worksheet);
    [CompilerGeneratedAttribute]
public ExcelCellAddress get_CellAddress();
    [CompilerGeneratedAttribute]
internal void set_CellAddress(ExcelCellAddress value);
    [CompilerGeneratedAttribute]
public ExcelThreadedCommentCollection get_Comments();
    [CompilerGeneratedAttribute]
private void set_Comments(ExcelThreadedCommentCollection value);
    [CompilerGeneratedAttribute]
public ExcelWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
private void set_Worksheet(ExcelWorksheet value);
    [CompilerGeneratedAttribute]
public XmlDocument get_ThreadedCommentsXml();
    [CompilerGeneratedAttribute]
private void set_ThreadedCommentsXml(XmlDocument value);
    private void ReplicateThreadToLegacyComment();
    internal void OnCommentThreadChanged();
    public ExcelThreadedComment AddComment(string personId, string text);
    internal ExcelThreadedComment AddComment(string personId, string text, bool replicateLegacyComment);
    internal void AddComment(ExcelThreadedComment comment);
    public ExcelThreadedComment AddComment(string personId, string textWithFormats, ExcelThreadedCommentPerson[] personsToMention);
    public bool Remove(ExcelThreadedComment comment);
    public void ResolveThread();
    public bool get_IsResolved();
    public void ReopenThread();
    public void DeleteThread();
    internal void AddCommentFromXml(XmlElement copyFromElement);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments : object {
    private ExcelWorksheet _worksheet;
    private ExcelPackage _package;
    internal List`1<ExcelThreadedCommentThread> _threads;
    private List`1<int> _threadsIndex;
    internal int _nextId;
    [CompilerGeneratedAttribute]
private ExcelThreadedCommentPersonCollection <Persons>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <ThreadedCommentsXml>k__BackingField;
    public ExcelThreadedCommentPersonCollection Persons { get; private set; }
    public IEnumerable`1<ExcelThreadedCommentThread> Threads { get; }
    public int Count { get; }
    public XmlDocument ThreadedCommentsXml { get; private set; }
    public ExcelThreadedCommentThread Item { get; }
    public ExcelThreadedCommentThread Item { get; }
    public ExcelThreadedCommentThread Item { get; }
    internal ExcelWorksheetThreadedComments(ExcelThreadedCommentPersonCollection persons, ExcelWorksheet worksheet);
    [CompilerGeneratedAttribute]
public ExcelThreadedCommentPersonCollection get_Persons();
    [CompilerGeneratedAttribute]
private void set_Persons(ExcelThreadedCommentPersonCollection value);
    public IEnumerable`1<ExcelThreadedCommentThread> get_Threads();
    public int get_Count();
    [CompilerGeneratedAttribute]
public XmlDocument get_ThreadedCommentsXml();
    [CompilerGeneratedAttribute]
private void set_ThreadedCommentsXml(XmlDocument value);
    private void LoadThreads();
    private void AddCommentsFromXml();
    private void ValidateCellAddress(string cellAddress);
    public ExcelThreadedCommentThread Add(string cellAddress);
    public ExcelThreadedCommentThread Add(ExcelCellAddress cellAddress);
    public ExcelThreadedCommentThread get_Item(string cellAddress);
    public ExcelThreadedCommentThread get_Item(ExcelCellAddress cellAddress);
    public ExcelThreadedCommentThread get_Item(int index);
    public void RemoveAt(int index);
    public void Remove(ExcelThreadedCommentThread threadedComment);
    internal void Delete(int fromRow, int fromCol, int rows, int columns, int toRow, int toCol);
    internal void Insert(int fromRow, int fromCol, int rows, int columns, int toRow, int toCol);
    public virtual string ToString();
}
public enum OfficeOpenXml.ThreadedComments.IdentityProvider : Enum {
    public int value__;
    public static IdentityProvider NoProvider;
    public static IdentityProvider ActiveDirectory;
    public static IdentityProvider WindowsLiveId;
    public static IdentityProvider Office365;
    public static IdentityProvider PeoplePicker;
}
internal static class OfficeOpenXml.ThreadedComments.MentionsHelper : object {
    internal static void InsertMentions(ExcelThreadedComment comment, string textWithFormats, ExcelThreadedCommentPerson[] personsToMention);
}
public abstract class OfficeOpenXml.ToCollectionOptions : object {
    [CompilerGeneratedAttribute]
private String[] <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ToCollectionConversionFailureStrategy <ConversionFailureStrategy>k__BackingField;
    internal String[] Headers { get; private set; }
    public ToCollectionConversionFailureStrategy ConversionFailureStrategy { get; public set; }
    [CompilerGeneratedAttribute]
internal String[] get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(String[] value);
    public void SetCustomHeaders(String[] header);
    [CompilerGeneratedAttribute]
public ToCollectionConversionFailureStrategy get_ConversionFailureStrategy();
    [CompilerGeneratedAttribute]
public void set_ConversionFailureStrategy(ToCollectionConversionFailureStrategy value);
}
public class OfficeOpenXml.ToCollectionRangeOptions : ToCollectionOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HeaderRow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DataStartRow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DataIsTransposed>k__BackingField;
    public Nullable`1<int> HeaderRow { get; public set; }
    public Nullable`1<int> DataStartRow { get; public set; }
    public static ToCollectionRangeOptions Default { get; }
    public bool DataIsTransposed { get; public set; }
    internal ToCollectionRangeOptions(ToCollectionOptions options);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_HeaderRow();
    [CompilerGeneratedAttribute]
public void set_HeaderRow(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DataStartRow();
    [CompilerGeneratedAttribute]
public void set_DataStartRow(Nullable`1<int> value);
    public static ToCollectionRangeOptions get_Default();
    [CompilerGeneratedAttribute]
public bool get_DataIsTransposed();
    [CompilerGeneratedAttribute]
public void set_DataIsTransposed(bool value);
}
public class OfficeOpenXml.ToCollectionTableOptions : ToCollectionOptions {
    public static ToCollectionTableOptions Default { get; }
    public static ToCollectionTableOptions get_Default();
}
internal class OfficeOpenXml.TokenOffsetCollection : object {
    private string _currentWs;
    private int _rowOffset;
    private int _columnOffset;
    private List`1<Token> _tokens;
    private int _index;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, ShiftableAddress> <TokenAddresses>k__BackingField;
    private Dictionary`2<int, ShiftableAddress> TokenAddresses { get; private set; }
    public Token Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public TokenOffsetCollection(string currentWs, List`1<Token> tokens);
    [CompilerGeneratedAttribute]
private Dictionary`2<int, ShiftableAddress> get_TokenAddresses();
    [CompilerGeneratedAttribute]
private void set_TokenAddresses(Dictionary`2<int, ShiftableAddress> value);
    public void SetOffset(int rowOffset, int columnOffset);
    public sealed virtual Token get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<Token> GetEnumerator();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class OfficeOpenXml.Utils.AddressUtility : object {
    public static string ParseEntireColumnSelections(string address);
    private static void AddRowNumbersToEntireColumnRange(String& address, string range);
    internal static string ShiftAddressRowsInFormula(string worksheetName, string formula, int currentRow, int rows);
    internal static string ShiftAddressColumnsInFormula(string worksheetName, string formula, int currentColumn, int columns);
}
internal class OfficeOpenXml.Utils.Argument`1 : object {
    private T _value;
    private T OfficeOpenXml.Utils.IArgument<T>.Value { get; }
    public Argument`1(T value);
    private sealed virtual override T OfficeOpenXml.Utils.IArgument<T>.get_Value();
}
[ExtensionAttribute]
public static class OfficeOpenXml.Utils.ArgumentExtensions : object {
    [ExtensionAttribute]
public static void IsNotNull(IArgument`1<T> argument, string argumentName);
    [ExtensionAttribute]
public static void IsNotNullOrEmpty(IArgument`1<string> argument, string argumentName);
    [ExtensionAttribute]
public static void IsInRange(IArgument`1<T> argument, T min, T max, string argumentName);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.AttributeExtensions : object {
    [ExtensionAttribute]
internal static bool HasAttributeOfType(MemberInfo member, Nullable`1<bool> inherit);
    [ExtensionAttribute]
internal static bool HasAttributeOfType(MemberInfo member, T& attr, Nullable`1<bool> inherit);
    [ExtensionAttribute]
internal static T GetFirstAttributeOfType(MemberInfo member, Nullable`1<bool> inherit);
    [ExtensionAttribute]
internal static bool HasMemberWithAttributeOfType(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<T> FindAttributesOfType(Type type);
    [ExtensionAttribute]
internal static bool IsComplexType(Type type);
    [ExtensionAttribute]
internal static string EncodeXMLAttribute(string s);
    [ExtensionAttribute]
internal static string EncodeXMLElement(string s);
}
internal class OfficeOpenXml.Utils.ColorConverter : object {
    internal static Color GetThemeColor(ExcelTheme theme, eThemeSchemeColor tc);
    internal static Color GetThemeColor(ExcelDrawingThemeColorManager cm);
    private static int GetRgpPercentToRgb(double percentage);
    internal static Color ApplyTint(Color ret, double tint);
}
internal class OfficeOpenXml.Utils.CompundDocument.CompoundDocument : object {
    internal StoragePart Storage;
    [CompilerGeneratedAttribute]
private List`1<CompoundDocumentItem> <Directories>k__BackingField;
    internal List`1<CompoundDocumentItem> Directories { get; private set; }
    internal CompoundDocument(MemoryStream ms);
    internal CompoundDocument(FileInfo fi);
    internal CompoundDocument(Byte[] doc);
    [CompilerGeneratedAttribute]
internal List`1<CompoundDocumentItem> get_Directories();
    [CompilerGeneratedAttribute]
private void set_Directories(List`1<CompoundDocumentItem> value);
    internal static bool IsCompoundDocument(FileInfo fi);
    internal static bool IsCompoundDocument(MemoryStream ms);
    internal void Read(FileInfo fi);
    internal void Read(Byte[] doc);
    internal void Read(MemoryStream ms);
    private void GetStorageAndStreams(StoragePart storage, CompoundDocumentItem parent);
    internal void Save(MemoryStream ms);
    private void WriteStorageAndStreams(StoragePart storage, CompoundDocumentItem parent);
}
internal class OfficeOpenXml.Utils.CompundDocument.CompoundDocumentFile : object {
    private static int miniFATSectorSize;
    private static int FATSectorSizeV3;
    private static int FATSectorSizeV4;
    private static int DIFAT_SECTOR;
    private static int FAT_SECTOR;
    private static int END_OF_CHAIN;
    private static int FREE_SECTOR;
    private static Byte[] header;
    private short minorVersion;
    private short majorVersion;
    private int numberOfDirectorySector;
    private short sectorShif;
    private short minSectorShift;
    private int _numberOfFATSectors;
    private int _firstDirectorySectorLocation;
    private int _transactionSignatureNumber;
    private int _miniStreamCutoffSize;
    private int _firstMiniFATSectorLocation;
    private int _numberofMiniFATSectors;
    private int _firstDIFATSectorLocation;
    private int _numberofDIFATSectors;
    private List`1<Byte[]> _sectors;
    private List`1<Byte[]> _miniSectors;
    private int _sectorSize;
    private int _miniSectorSize;
    private int _sectorSizeInt;
    private int _currentDIFATSectorPos;
    private int _currentFATSectorPos;
    private int _currentDirSectorPos;
    private int _prevDirFATSectorPos;
    [CompilerGeneratedAttribute]
private CompoundDocumentItem <RootItem>k__BackingField;
    private List`1<CompoundDocumentItem> _directories;
    public CompoundDocumentItem RootItem { get; public set; }
    internal List`1<CompoundDocumentItem> Directories { get; }
    internal CompoundDocumentFile(FileInfo fi);
    internal CompoundDocumentFile(Byte[] file);
    internal CompoundDocumentFile(MemoryStream ms);
    private static CompoundDocumentFile();
    [CompilerGeneratedAttribute]
public CompoundDocumentItem get_RootItem();
    [CompilerGeneratedAttribute]
public void set_RootItem(CompoundDocumentItem value);
    internal List`1<CompoundDocumentItem> get_Directories();
    public static bool IsCompoundDocument(FileInfo fi);
    public static bool IsCompoundDocument(MemoryStream ms);
    public static bool IsCompoundDocument(Byte[] b);
    internal void Read(BinaryReader br);
    private void LoadDIFATSectors(DocWriteInfo dwi);
    private void LoadSectors(BinaryReader br);
    private void LoadMinSectors(DocWriteInfo& dwi, List`1<CompoundDocumentItem> dir);
    private void GetMiniSectors(Byte[] miniFATStream);
    private Byte[] GetStream(int startingSectorLocation, long streamSize, List`1<int> FAT, List`1<Byte[]> sectors);
    private List`1<int> ReadMiniFAT(List`1<Byte[]> sectors, DocWriteInfo dwi);
    private List`1<CompoundDocumentItem> ReadDirectories(List`1<Byte[]> sectors, DocWriteInfo dwi);
    private List`1<int> ReadFAT(List`1<Byte[]> sectors, DocWriteInfo dwi);
    private void ReadDirectory(List`1<Byte[]> sectors, int index, List`1<CompoundDocumentItem> l);
    internal void AddChildTree(CompoundDocumentItem e, List`1<CompoundDocumentItem> dirs);
    internal void AddLeftSiblingTree(CompoundDocumentItem e, List`1<CompoundDocumentItem> dirs);
    internal void AddRightSiblingTree(CompoundDocumentItem e, List`1<CompoundDocumentItem> dirs);
    public void Write(MemoryStream ms);
    private List`1<CompoundDocumentItem> FlattenDirs();
    private void InitItem(CompoundDocumentItem item);
    private int AddChildren(CompoundDocumentItem item, List`1<CompoundDocumentItem> l);
    private void SetUnhandled(int listAdd, List`1<CompoundDocumentItem> children);
    private int SetSiblings(int listAdd, List`1<CompoundDocumentItem> children, int fromPos, int toPos, int currSibl);
    private int GetPos(int fromPos, int toPos);
    private bool NoGreater(List`1<CompoundDocumentItem> children, int pos, int lPos, int listAdd);
    private bool NoLess(List`1<CompoundDocumentItem> children, int pos, int rPos, int listAdd);
    private int GetLevels(int c);
    private void FillDIFAT(BinaryWriter bw);
    private void WritePosition(BinaryWriter bw, int sector, Int32& writePos, bool isFATEntry);
    private void WritePosition(BinaryWriter bw, Int32[] sectors, Int32& writePos);
    private void WriteDirs(BinaryWriter bw, List`1<CompoundDocumentItem> dirs);
    private int WriteDirStream(BinaryWriter bw, List`1<CompoundDocumentItem> dirs);
    private void WriteMiniFAT(BinaryWriter bw, Byte[] miniFAT);
    private int WriteStream(BinaryWriter bw, Byte[] stream);
    private void WriteFAT(BinaryWriter bw, int sector, long size);
    private void CheckUpdateDIFAT(BinaryWriter bw);
    private void AllocateFAT(BinaryWriter bw, int miniFatLength, List`1<CompoundDocumentItem> dirs);
    private int GetDIFatSectors(int FATSectors);
    private void WriteFATItem(BinaryWriter bw, int value);
    private int GetSectors(int v, int size);
    private Byte[] SetMiniStream(List`1<CompoundDocumentItem> dirs);
    private static void WriteStreamFullSector(BinaryWriter bw, int sectorSize);
    private void WriteHeader(BinaryWriter bw);
    private void CreateFATStreams(CompoundDocumentItem item, BinaryWriter bw, BinaryWriter bwMini, DocWriteInfo dwi);
    private int WriteStream(BinaryWriter bw, List`1<int> fat, Byte[] stream, int FATSectorSize);
    private void AddFAT(List`1<int> fat, long streamSize, int sectorSize, int addPos);
    private void LoadFromMemoryStream(MemoryStream ms);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("OfficeOpenXml.Utils.CompundDocument.CompoundDocumentFile/<IsCompoundDocumentAsync>d__89")]
public static Task`1<bool> IsCompoundDocumentAsync(FileInfo fi, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("OfficeOpenXml.Utils.CompundDocument.CompoundDocumentFile/<IsCompoundDocumentAsync>d__90")]
public static Task`1<bool> IsCompoundDocumentAsync(MemoryStream ms, CancellationToken cancellationToken);
}
[DebuggerDisplayAttribute("FullName: {FullName}")]
internal class OfficeOpenXml.Utils.CompundDocument.CompoundDocumentItem : object {
    [CompilerGeneratedAttribute]
private CompoundDocumentItem <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CompoundDocumentItem> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ColorFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildID>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ClsID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeftSibling>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RightSibling>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatBits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ModifiedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartingSectorLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StreamSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Stream>k__BackingField;
    internal bool _handled;
    public CompoundDocumentItem Parent { get; public set; }
    public List`1<CompoundDocumentItem> Children { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; }
    public byte ColorFlag { get; public set; }
    public byte ObjectType { get; public set; }
    public int ChildID { get; public set; }
    public Guid ClsID { get; public set; }
    public int LeftSibling { get; public set; }
    public int RightSibling { get; public set; }
    public int StatBits { get; public set; }
    public long CreationTime { get; public set; }
    public long ModifiedTime { get; public set; }
    public int StartingSectorLocation { get; public set; }
    public long StreamSize { get; public set; }
    public Byte[] Stream { get; public set; }
    [CompilerGeneratedAttribute]
public CompoundDocumentItem get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(CompoundDocumentItem value);
    [CompilerGeneratedAttribute]
public List`1<CompoundDocumentItem> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<CompoundDocumentItem> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_FullName();
    [CompilerGeneratedAttribute]
public byte get_ColorFlag();
    [CompilerGeneratedAttribute]
public void set_ColorFlag(byte value);
    [CompilerGeneratedAttribute]
public byte get_ObjectType();
    [CompilerGeneratedAttribute]
public void set_ObjectType(byte value);
    [CompilerGeneratedAttribute]
public int get_ChildID();
    [CompilerGeneratedAttribute]
public void set_ChildID(int value);
    [CompilerGeneratedAttribute]
public Guid get_ClsID();
    [CompilerGeneratedAttribute]
public void set_ClsID(Guid value);
    [CompilerGeneratedAttribute]
public int get_LeftSibling();
    [CompilerGeneratedAttribute]
public void set_LeftSibling(int value);
    [CompilerGeneratedAttribute]
public int get_RightSibling();
    [CompilerGeneratedAttribute]
public void set_RightSibling(int value);
    [CompilerGeneratedAttribute]
public int get_StatBits();
    [CompilerGeneratedAttribute]
public void set_StatBits(int value);
    [CompilerGeneratedAttribute]
public long get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(long value);
    [CompilerGeneratedAttribute]
public long get_ModifiedTime();
    [CompilerGeneratedAttribute]
public void set_ModifiedTime(long value);
    [CompilerGeneratedAttribute]
public int get_StartingSectorLocation();
    [CompilerGeneratedAttribute]
public void set_StartingSectorLocation(int value);
    [CompilerGeneratedAttribute]
public long get_StreamSize();
    [CompilerGeneratedAttribute]
public void set_StreamSize(long value);
    [CompilerGeneratedAttribute]
public Byte[] get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(Byte[] value);
    internal void Read(BinaryReader br);
    internal void Write(BinaryWriter bw);
    public virtual string ToString();
    public sealed virtual int CompareTo(CompoundDocumentItem other);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.ConvertUtil : object {
    internal static TextInfo _invariantTextInfo;
    internal static CompareInfo _invariantCompareInfo;
    private static ConvertUtil();
    internal static bool IsNumericOrDate(object candidate);
    internal static bool IsNumeric(object candidate);
    internal static bool IsExcelNumeric(object candidate);
    internal static bool IsNumericOrDate(object candidate, bool includeNumericString, bool includePercentageString);
    internal static bool IsPercentageString(string s);
    internal static bool TryParseNumericString(string candidateString, Double& numericValue, CultureInfo cultureInfo);
    internal static bool TryParsePercentageString(string s, Double& numericValue, CultureInfo cultureInfo);
    internal static bool TryParseBooleanString(string candidateString, Boolean& result);
    internal static bool ToBooleanString(string candidateString, bool defaultValue);
    internal static bool TryParseIntString(string candidateString, Int32& result);
    internal static bool TryParseDateString(string candidateString, DateTime& result);
    internal static double GetValueDouble(object v, bool ignoreBool, bool retNaN);
    internal static double GetValueDouble(object v, bool ignoreBool, bool retNaN, bool includeStrings);
    internal static Nullable`1<bool> GetValueBool(object v);
    internal static Nullable`1<DateTime> GetValueDate(object v);
    internal static string ExcelEscapeString(string s);
    internal static void ExcelEncodeString(StreamWriter sw, string t);
    internal static void ExcelEncodeString(StringBuilder sb, string t, bool encodeTabLF);
    internal static string ExcelEscapeAndEncodeString(string t, bool crLfEncode);
    internal static string ExcelEncodeString(string t, bool crLfEncode);
    internal static string ExcelDecodeString(string t);
    public static T GetTypedCellValue(object value);
    internal static T GetTypedCellValueInner(object value, bool returnDefaultIfException);
    internal static string GetValueForXml(object v, bool date1904);
    private static bool IsDate(object v, DateTime& date);
    private static bool IsTimeSpan(object v, TimeSpan& timeSpan);
    internal static string CropString(string s, int maxLength);
    internal static object GetValueFromType(XmlReader xr, string type, int styleId, ExcelWorkbook workbook);
    internal static string GetCellType(object v, bool allowStr);
    internal static bool IsNumericOrDateDatatype(object v);
    [ExtensionAttribute]
internal static string ParseXmlString(string xmlString);
    internal static int ParseInt(object obj, RoundingMethod roundingMethod);
    private static int ConvertToInt(object obj, RoundingMethod roundingMethod);
    internal static DateTime FromOADateExcel(double d);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.CsvExtensions : object {
    [ExtensionAttribute]
public static string GetCsvPosition(string argument, int position);
    [ExtensionAttribute]
public static string SetCsvPosition(string argument, int position, int size, string value, string defaultValue);
}
internal class OfficeOpenXml.Utils.DateTimeUtil : object {
    internal static void GetQuarterDates(DateTime date, DateTime& startDate, DateTime& endDate);
    internal static void GetWeekDates(DateTime date, DateTime& startDate, DateTime& endDate);
}
internal static class OfficeOpenXml.Utils.EnumUtil : object {
    public static bool HasFlag(T value, T flag);
    public static bool HasNotFlag(T value, T flag);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.Extensions.EnumExtensions : object {
    [ExtensionAttribute]
internal static string ToEnumString(Enum enumValue);
    [ExtensionAttribute]
internal static Nullable`1<T> ToEnum(string s);
    [ExtensionAttribute]
internal static T ToEnum(string s, T defaultValue);
    [ExtensionAttribute]
internal static string GetStringValueForXml(bool boolValue);
    [ExtensionAttribute]
internal static bool IsInt(string s);
    [ExtensionAttribute]
internal static string ToColorString(Color color);
    [ExtensionAttribute]
internal static string GetXmlAttributeValue(bool value, string attribute, Nullable`1<bool> defaultValue);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.Extensions.XmlExtensions : object {
    [ExtensionAttribute]
internal static XmlNode GetChildAtPosition(XmlNode node, int index, XmlNodeType type);
}
internal static class OfficeOpenXml.Utils.FileHelper : object {
    internal static string GetRelativeFile(FileInfo sourceFile, FileInfo targetFile, bool addFileProtocolIfAbsolute);
}
public interface OfficeOpenXml.Utils.IArgument`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
internal class OfficeOpenXml.Utils.InvariantObjectComparer : object {
    internal static InvariantObjectComparer Instance;
    private static StringComparer sc;
    private static InvariantObjectComparer();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
    private static object GetValueToCompare(object obj);
}
public class OfficeOpenXml.Utils.MemorySettings : object {
    public RecyclableMemoryStreamManager MemoryManager { get; public set; }
    public bool UseRecyclableMemory { get; public set; }
    public RecyclableMemoryStreamManager get_MemoryManager();
    public void set_MemoryManager(RecyclableMemoryStreamManager value);
    public bool get_UseRecyclableMemory();
    public void set_UseRecyclableMemory(bool value);
}
internal class OfficeOpenXml.Utils.RecyclableMemory : object {
    private static RecyclableMemoryStreamManager _memoryManager;
    private static object _dataLock;
    [CompilerGeneratedAttribute]
private static bool <UseRecyclableMemory>k__BackingField;
    public static bool UseRecyclableMemory { get; public set; }
    internal static bool HasMemoryManager { get; }
    internal static RecyclableMemoryStreamManager MemoryManager { get; }
    private static RecyclableMemory();
    [CompilerGeneratedAttribute]
public static bool get_UseRecyclableMemory();
    [CompilerGeneratedAttribute]
public static void set_UseRecyclableMemory(bool value);
    internal static bool get_HasMemoryManager();
    internal static RecyclableMemoryStreamManager get_MemoryManager();
    public static void SetRecyclableMemoryStreamManager(RecyclableMemoryStreamManager recyclableMemoryStreamManager);
    internal static MemoryStream GetStream();
    internal static MemoryStream GetStream(Byte[] array);
    internal static MemoryStream GetStream(int capacity);
}
public static class OfficeOpenXml.Utils.Require : object {
    public static IArgument`1<T> Argument(T argument);
}
public static class OfficeOpenXml.Utils.SqRefUtility : object {
    public static string ToSqRefAddress(string address);
    public static string FromSqRefAddress(string address);
}
internal class OfficeOpenXml.Utils.StreamUtil : object {
    private static object _lock;
    private static StreamUtil();
    internal static void CopyStream(Stream inputStream, Stream& outputStream);
    [AsyncStateMachineAttribute("OfficeOpenXml.Utils.StreamUtil/<CopyStreamAsync>d__2")]
internal static Task CopyStreamAsync(Stream inputStream, Stream outputStream, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.StringExtensions : object {
    [ExtensionAttribute]
internal static string NullIfWhiteSpace(string s);
    [ExtensionAttribute]
internal static string CapitalizeFirstLetter(string s);
    [ExtensionAttribute]
internal static string UnCapitalizeFirstLetter(string s);
    [ExtensionAttribute]
internal static string GetSubstringStoppingAtSymbol(string s, int index, string stopSymbol);
    [ExtensionAttribute]
internal static bool ContainsOnlyCharacter(string s, char theCharacter, bool ignoreCase);
}
internal class OfficeOpenXml.Utils.StyleResourceManager : object {
    internal static string GetItem(string name);
}
internal static class OfficeOpenXml.Utils.TypeConversion.NumericTypeConversions : object {
    private static Dictionary`2<Type, Func`2<object, object>> _numericTypes;
    private static NumericTypeConversions();
    public static bool IsNumeric(Type type);
    public static bool TryConvert(object obj, Object& convertedObj, Type convertToType);
}
public class OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1 : object {
    private Type _returnType;
    private Type _underlyingType;
    public Type Type { get; }
    public bool IsNumeric { get; }
    public bool IsNullable { get; }
    public bool IsDateTime { get; }
    public bool IsTimeSpan { get; }
    public Type get_Type();
    public bool get_IsNumeric();
    public bool get_IsNullable();
    public bool get_IsDateTime();
    public bool get_IsTimeSpan();
}
internal class OfficeOpenXml.Utils.TypeConversion.TypeConvertUtil`1 : object {
    [CompilerGeneratedAttribute]
private ReturnTypeWrapper`1<TReturnType> <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueWrapper <Value>k__BackingField;
    public ReturnTypeWrapper`1<TReturnType> ReturnType { get; private set; }
    public ValueWrapper Value { get; private set; }
    internal TypeConvertUtil`1(object o);
    [CompilerGeneratedAttribute]
public ReturnTypeWrapper`1<TReturnType> get_ReturnType();
    [CompilerGeneratedAttribute]
private void set_ReturnType(ReturnTypeWrapper`1<TReturnType> value);
    [CompilerGeneratedAttribute]
public ValueWrapper get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(ValueWrapper value);
    public object ConvertToReturnType();
    public bool TryGetDateTime(Object& returnDate);
    public bool TryGetTimeSpan(Object& timeSpan);
}
internal class OfficeOpenXml.Utils.TypeConversion.ValueWrapper : object {
    private object _object;
    public bool IsString { get; }
    public bool IsEmptyString { get; }
    public bool IsNumeric { get; }
    public bool IsDateTime { get; }
    public bool IsTimeSpan { get; }
    public object Object { get; }
    public ValueWrapper(object obj);
    public bool get_IsString();
    public bool get_IsEmptyString();
    public bool get_IsNumeric();
    public bool get_IsDateTime();
    public bool get_IsTimeSpan();
    public DateTime ToDateTime();
    public TimeSpan ToTimeSpan();
    public double ToDouble();
    public virtual string ToString();
    public object get_Object();
}
internal class OfficeOpenXml.Utils.UriHelper : object {
    internal static Uri ResolvePartUri(Uri sourceUri, Uri targetUri);
    internal static Uri GetRelativeUri(Uri sourceUri, Uri targetUri);
}
internal static class OfficeOpenXml.Utils.ValueToTextHandler : object {
    internal static string GetFormattedText(object Value, ExcelWorkbook wb, int styleId, bool forWidthCalc, CultureInfo cultureInfo);
    internal static ExcelNumberFormatXml GetNumberFormat(int styleId, ExcelStyles styles);
    internal static string FormatValue(object v, bool forWidthCalc, ExcelFormatTranslator nf, CultureInfo overrideCultureInfo);
    private static string FormatNumber(double d, string format, CultureInfo cultureInfo);
    private static string CheckAndRemoveNegativeSign(string format, string s, string ns);
    private static string FormatNumberExcel(double d, string format, CultureInfo cultureInfo);
    private static string GetDateText(DateTime d, string format, FormatPart f, CultureInfo cultureInfo);
}
internal static class OfficeOpenXml.Utils.VBACompression : object {
    internal static Byte[] CompressPart(Byte[] part);
    private static Byte[] CompressChunk(Byte[] buffer, Int32& startPos);
    internal static Byte[] DecompressPart(Byte[] part);
    internal static Byte[] DecompressPart(Byte[] part, int startPos);
    private static void DecompressChunk(MemoryStream ms, Byte[] compBuffer, Int32& pos);
    private static int GetLengthBits(int decompPos);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.XmlReaderExtensions : object {
    [ExtensionAttribute]
internal static bool IsElementWithName(XmlReader xr, string name);
    [ExtensionAttribute]
internal static bool IsEndElementWithName(XmlReader xr, string name);
}
[ExtensionAttribute]
internal static class OfficeOpenXml.Utils.XmlReaderHelper : object {
    [ExtensionAttribute]
internal static bool ReadUntil(XmlReader xr, int depth, String[] tagName);
    [ExtensionAttribute]
internal static bool ReadUntil(XmlReader xr, String[] tagName);
    [ExtensionAttribute]
internal static bool ReadUntil(XmlReader xr, XmlNodeType nodeType, String[] tagName);
    [ExtensionAttribute]
internal static bool ReadUntil(XmlReader xr, int depth, Dictionary`2<string, int> nodeOrder, string tag);
}
internal class OfficeOpenXml.Utils.XmlStreamHelper : object {
    internal static void ReadUntil(XmlTextReader reader, string elementName);
}
internal abstract class OfficeOpenXml.Vba.ContentHash.ContentHashInputProvider : object {
    private ExcelVbaProject _project;
    private Encoding _hashEncoding;
    protected ExcelVbaProject Project { get; }
    protected Encoding HashEncoding { get; }
    public ContentHashInputProvider(ExcelVbaProject project);
    protected ExcelVbaProject get_Project();
    protected Encoding get_HashEncoding();
    public void CreateHashInput(MemoryStream ms);
    protected abstract virtual void CreateHashInputInternal(MemoryStream s);
    public static void GetContentNormalizedDataHashInput(ExcelVbaProject project, MemoryStream ms);
    public static void GetFormsNormalizedDataHashInput(ExcelVbaProject project, MemoryStream ms);
    public static void GetV3ContentNormalizedDataHashInput(ExcelVbaProject project, MemoryStream ms);
}
internal class OfficeOpenXml.Vba.ContentHash.ContentNormalizedDataHashInputProvider : ContentHashInputProvider {
    public ContentNormalizedDataHashInputProvider(ExcelVbaProject project);
    protected virtual void CreateHashInputInternal(MemoryStream ms);
    private void GetContentHash(MemoryStream ms);
}
internal enum OfficeOpenXml.VBA.ContentHash.ExcelVbaSignatureHashAlgorithm : Enum {
    public int value__;
    public static ExcelVbaSignatureHashAlgorithm MD5;
    public static ExcelVbaSignatureHashAlgorithm SHA1;
    public static ExcelVbaSignatureHashAlgorithm SHA256;
    public static ExcelVbaSignatureHashAlgorithm SHA384;
    public static ExcelVbaSignatureHashAlgorithm SHA512;
}
internal class OfficeOpenXml.Vba.ContentHash.FormsNormalizedDataHashInputProvider : ContentHashInputProvider {
    public FormsNormalizedDataHashInputProvider(ExcelVbaProject project);
    protected virtual void CreateHashInputInternal(MemoryStream ms);
    private void FormsNormaizedData(BinaryWriter bw);
    private static void WriteDesignerStreams(BinaryWriter bw, ExcelVbaProject p, List`1<SortItem> list);
    internal static void NormalizeDesigner(ExcelVbaProject p, BinaryWriter bw, string designer);
    private static void AppendDesignerStreams(ExcelVbaProject p, List`1<SortItem> list, string designer);
    private static void NormalizeStorage(StoragePart storage, List`1<SortItem> list, string parentName);
    private static void WriteStreamData(BinaryWriter bw, Byte[] b);
    private static IList`1<SortItem> GetSortedChildren(StoragePart storage);
    private static IList`1<string> GetDesigners(ExcelVbaProject p);
    private void NormalizeDesignerStorage(ExcelVBAModule designerModule, BinaryWriter bw);
}
internal class OfficeOpenXml.Vba.ContentHash.V3NormalizedDataHashInputProvider : ContentHashInputProvider {
    private List`1<string> DefaultAttributes;
    private static string HostExtenderInfo;
    public V3NormalizedDataHashInputProvider(ExcelVbaProject project);
    protected virtual void CreateHashInputInternal(MemoryStream ms);
    private void CreateV3NormalizedDataHashInput(BinaryWriter bw);
    private void HandleProjectReference(ExcelVbaProject p, BinaryWriter bw, ExcelVbaReference reference);
    private static void WriteNameRecord(BinaryWriter bw, ExcelVbaReference reference, Encoding encoding);
    private void WriteModuleRecord(ExcelVbaProject p, BinaryWriter bw, ExcelVBAModule module);
    private void NormalizeProjectStream(BinaryWriter bw);
}
internal static class OfficeOpenXml.VBA.ContentHash.VbaSignHashAlgorithmUtil : object {
    internal static Byte[] GetContentHash(ExcelVbaProject proj, EPPlusSignatureContext ctx);
    internal static Byte[] ComputeHash(Byte[] buffer, EPPlusSignatureContext ctx);
}
public enum OfficeOpenXml.VBA.eAttributeDataType : Enum {
    public int value__;
    public static eAttributeDataType String;
    public static eAttributeDataType NonString;
}
public enum OfficeOpenXml.VBA.eModuleType : Enum {
    public int value__;
    public static eModuleType Document;
    public static eModuleType Module;
    public static eModuleType Class;
    public static eModuleType Designer;
}
public enum OfficeOpenXml.VBA.eSyskind : Enum {
    public int value__;
    public static eSyskind Win16;
    public static eSyskind Win32;
    public static eSyskind Macintosh;
    public static eSyskind Win64;
}
[DefaultMemberAttribute("Item")]
public class OfficeOpenXml.VBA.ExcelVBACollectionBase`1 : object {
    protected internal List`1<T> _list;
    public T Item { get; }
    public T Item { get; }
    public int Count { get; }
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T get_Item(string Name);
    public T get_Item(int Index);
    public int get_Count();
    public bool Exists(string Name);
    public void Remove(T Item);
    public void RemoveAt(int index);
    internal void Clear();
}
public class OfficeOpenXml.VBA.ExcelVBAModule : object {
    private string _name;
    private ModuleNameChange _nameChangeCallback;
    private static Char[] _nonValidChars;
    [CompilerGeneratedAttribute]
private string <NameUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    private string _code;
    [CompilerGeneratedAttribute]
private int <HelpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelVbaModuleAttributesCollection <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private eModuleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private string <streamName>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassID>k__BackingField;
    public string Name { get; public set; }
    internal string NameUnicode { get; internal set; }
    public string Description { get; public set; }
    public string Code { get; public set; }
    public int HelpContext { get; public set; }
    public ExcelVbaModuleAttributesCollection Attributes { get; internal set; }
    public eModuleType Type { get; internal set; }
    public bool ReadOnly { get; public set; }
    public bool Private { get; public set; }
    internal string streamName { get; internal set; }
    internal ushort Cookie { get; internal set; }
    internal UInt32 ModuleOffset { get; internal set; }
    internal string ClassID { get; internal set; }
    internal ExcelVBAModule(ModuleNameChange nameChangeCallback);
    private static ExcelVBAModule();
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_NameUnicode();
    [CompilerGeneratedAttribute]
internal void set_NameUnicode(string value);
    internal static bool IsValidModuleName(string name);
    private static bool IsAbove255AndNotLetter(char c);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public string get_Code();
    public void set_Code(string value);
    [CompilerGeneratedAttribute]
public int get_HelpContext();
    [CompilerGeneratedAttribute]
public void set_HelpContext(int value);
    [CompilerGeneratedAttribute]
public ExcelVbaModuleAttributesCollection get_Attributes();
    [CompilerGeneratedAttribute]
internal void set_Attributes(ExcelVbaModuleAttributesCollection value);
    [CompilerGeneratedAttribute]
public eModuleType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(eModuleType value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(bool value);
    [CompilerGeneratedAttribute]
internal string get_streamName();
    [CompilerGeneratedAttribute]
internal void set_streamName(string value);
    [CompilerGeneratedAttribute]
internal ushort get_Cookie();
    [CompilerGeneratedAttribute]
internal void set_Cookie(ushort value);
    [CompilerGeneratedAttribute]
internal UInt32 get_ModuleOffset();
    [CompilerGeneratedAttribute]
internal void set_ModuleOffset(UInt32 value);
    [CompilerGeneratedAttribute]
internal string get_ClassID();
    [CompilerGeneratedAttribute]
internal void set_ClassID(string value);
    public virtual string ToString();
}
public class OfficeOpenXml.VBA.ExcelVbaModuleAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private eAttributeDataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; internal set; }
    public eAttributeDataType DataType { get; internal set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public eAttributeDataType get_DataType();
    [CompilerGeneratedAttribute]
internal void set_DataType(eAttributeDataType value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string ToString();
}
public class OfficeOpenXml.VBA.ExcelVbaModuleAttributesCollection : ExcelVBACollectionBase`1<ExcelVbaModuleAttribute> {
    internal string GetAttributeText();
}
public class OfficeOpenXml.VBA.ExcelVbaModuleCollection : ExcelVBACollectionBase`1<ExcelVBAModule> {
    private ExcelVbaProject _project;
    internal ExcelVbaModuleCollection(ExcelVbaProject project);
    internal void Add(ExcelVBAModule Item);
    public ExcelVBAModule AddModule(string Name);
    public ExcelVBAModule AddClass(string Name, bool Exposed);
}
public class OfficeOpenXml.VBA.ExcelVbaProject : object {
    private static string schemaRelVba;
    internal static string PartUri;
    internal ExcelWorkbook _wb;
    internal ZipPackage _pck;
    [CompilerGeneratedAttribute]
private eSyskind <SystemKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CompatVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpFile1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpFile2>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HelpContextID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Constants>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodePage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LibFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lcid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LcidInvoke>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectStreamText>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelVbaReferenceCollection <References>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelVbaModuleCollection <Modules>k__BackingField;
    internal List`1<string> _HostExtenders;
    private ExcelVbaSignature _signature;
    private ExcelVbaProtection _protection;
    [CompilerGeneratedAttribute]
private CompoundDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public eSyskind SystemKind { get; public set; }
    public Nullable`1<UInt32> CompatVersion { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string HelpFile1 { get; public set; }
    public string HelpFile2 { get; public set; }
    public int HelpContextID { get; public set; }
    public string Constants { get; public set; }
    public int CodePage { get; internal set; }
    internal int LibFlags { get; internal set; }
    internal int MajorVersion { get; internal set; }
    internal int MinorVersion { get; internal set; }
    internal int Lcid { get; internal set; }
    internal int LcidInvoke { get; internal set; }
    internal string ProjectID { get; internal set; }
    internal string ProjectStreamText { get; internal set; }
    public ExcelVbaReferenceCollection References { get; public set; }
    public ExcelVbaModuleCollection Modules { get; public set; }
    public ExcelVbaSignature Signature { get; }
    public ExcelVbaProtection Protection { get; }
    internal CompoundDocument Document { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    internal Uri Uri { get; private set; }
    internal ExcelVbaProject(ExcelWorkbook wb);
    [CompilerGeneratedAttribute]
public eSyskind get_SystemKind();
    [CompilerGeneratedAttribute]
public void set_SystemKind(eSyskind value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_CompatVersion();
    [CompilerGeneratedAttribute]
public void set_CompatVersion(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_HelpFile1();
    [CompilerGeneratedAttribute]
public void set_HelpFile1(string value);
    [CompilerGeneratedAttribute]
public string get_HelpFile2();
    [CompilerGeneratedAttribute]
public void set_HelpFile2(string value);
    [CompilerGeneratedAttribute]
public int get_HelpContextID();
    [CompilerGeneratedAttribute]
public void set_HelpContextID(int value);
    [CompilerGeneratedAttribute]
public string get_Constants();
    [CompilerGeneratedAttribute]
public void set_Constants(string value);
    [CompilerGeneratedAttribute]
public int get_CodePage();
    [CompilerGeneratedAttribute]
internal void set_CodePage(int value);
    [CompilerGeneratedAttribute]
internal int get_LibFlags();
    [CompilerGeneratedAttribute]
internal void set_LibFlags(int value);
    [CompilerGeneratedAttribute]
internal int get_MajorVersion();
    [CompilerGeneratedAttribute]
internal void set_MajorVersion(int value);
    [CompilerGeneratedAttribute]
internal int get_MinorVersion();
    [CompilerGeneratedAttribute]
internal void set_MinorVersion(int value);
    [CompilerGeneratedAttribute]
internal int get_Lcid();
    [CompilerGeneratedAttribute]
internal void set_Lcid(int value);
    [CompilerGeneratedAttribute]
internal int get_LcidInvoke();
    [CompilerGeneratedAttribute]
internal void set_LcidInvoke(int value);
    [CompilerGeneratedAttribute]
internal string get_ProjectID();
    [CompilerGeneratedAttribute]
internal void set_ProjectID(string value);
    [CompilerGeneratedAttribute]
internal string get_ProjectStreamText();
    [CompilerGeneratedAttribute]
internal void set_ProjectStreamText(string value);
    [CompilerGeneratedAttribute]
public ExcelVbaReferenceCollection get_References();
    [CompilerGeneratedAttribute]
public void set_References(ExcelVbaReferenceCollection value);
    [CompilerGeneratedAttribute]
public ExcelVbaModuleCollection get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(ExcelVbaModuleCollection value);
    public ExcelVbaSignature get_Signature();
    public ExcelVbaProtection get_Protection();
    private void GetProject();
    private void ReadModules();
    private void ReadProjectProperties();
    private Byte[] Decrypt(string value);
    private string Encrypt(Byte[] value);
    private string GetString(Byte[] value, int max);
    private Byte[] GetByte(string value);
    private void ReadDirStream();
    internal void Save();
    private bool Validate();
    private Byte[] CreateVBAProjectStream();
    private Byte[] CreateDirStream();
    private void WriteModuleRecord(BinaryWriter bw, ExcelVBAModule module);
    private void WriteNameReference(BinaryWriter bw, ExcelVbaReference reference);
    private void WriteControlReference(BinaryWriter bw, ExcelVbaReference reference);
    private void WriteOrginalReference(BinaryWriter bw, ExcelVbaReference reference);
    private void WriteProjectReference(BinaryWriter bw, ExcelVbaReference reference);
    private void WriteRegisteredReference(BinaryWriter bw, ExcelVbaReference reference);
    private Byte[] CreateProjectwmStream();
    private Byte[] CreateProjectStream();
    private string WriteProtectionStat();
    private string WritePassword();
    private string WriteVisibilityState();
    private string GetString(BinaryReader br, UInt32 size);
    private string GetString(BinaryReader br, UInt32 size, Encoding enc);
    private string GetStringAndUnicodeString(BinaryReader br, UInt32 size);
    [CompilerGeneratedAttribute]
internal CompoundDocument get_Document();
    [CompilerGeneratedAttribute]
internal void set_Document(CompoundDocument value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    [CompilerGeneratedAttribute]
internal Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    internal void Create();
    internal string GetModuleNameFromWorksheet(ExcelWorksheet sheet);
    internal ExcelVbaModuleAttributesCollection GetDocumentAttributes(string name, string clsid);
    public void Remove();
    internal void RemoveMe();
    public virtual string ToString();
}
public class OfficeOpenXml.VBA.ExcelVbaProtection : object {
    private ExcelVbaProject _project;
    [CompilerGeneratedAttribute]
private bool <UserProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HostProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VbeProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VisibilityState>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PasswordKey>k__BackingField;
    public bool UserProtected { get; internal set; }
    public bool HostProtected { get; internal set; }
    public bool VbeProtected { get; internal set; }
    public bool VisibilityState { get; internal set; }
    internal Byte[] PasswordHash { get; internal set; }
    internal Byte[] PasswordKey { get; internal set; }
    internal ExcelVbaProtection(ExcelVbaProject project);
    [CompilerGeneratedAttribute]
public bool get_UserProtected();
    [CompilerGeneratedAttribute]
internal void set_UserProtected(bool value);
    [CompilerGeneratedAttribute]
public bool get_HostProtected();
    [CompilerGeneratedAttribute]
internal void set_HostProtected(bool value);
    [CompilerGeneratedAttribute]
public bool get_VbeProtected();
    [CompilerGeneratedAttribute]
internal void set_VbeProtected(bool value);
    [CompilerGeneratedAttribute]
public bool get_VisibilityState();
    [CompilerGeneratedAttribute]
internal void set_VisibilityState(bool value);
    [CompilerGeneratedAttribute]
internal Byte[] get_PasswordHash();
    [CompilerGeneratedAttribute]
internal void set_PasswordHash(Byte[] value);
    [CompilerGeneratedAttribute]
internal Byte[] get_PasswordKey();
    [CompilerGeneratedAttribute]
internal void set_PasswordKey(Byte[] value);
    public void SetPassword(string Password);
}
public class OfficeOpenXml.VBA.ExcelVbaReference : object {
    [CompilerGeneratedAttribute]
private int <ReferenceRecordID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecondaryReferenceRecordID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Libid>k__BackingField;
    public int ReferenceRecordID { get; internal set; }
    public int SecondaryReferenceRecordID { get; internal set; }
    public string Name { get; public set; }
    public string Libid { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ReferenceRecordID();
    [CompilerGeneratedAttribute]
internal void set_ReferenceRecordID(int value);
    [CompilerGeneratedAttribute]
public int get_SecondaryReferenceRecordID();
    [CompilerGeneratedAttribute]
internal void set_SecondaryReferenceRecordID(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Libid();
    [CompilerGeneratedAttribute]
public void set_Libid(string value);
    public virtual string ToString();
}
public class OfficeOpenXml.VBA.ExcelVbaReferenceCollection : ExcelVBACollectionBase`1<ExcelVbaReference> {
    public void Add(ExcelVbaReference Item);
}
public class OfficeOpenXml.VBA.ExcelVbaReferenceControl : ExcelVbaReference {
    [CompilerGeneratedAttribute]
private string <LibIdExtended>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibIdTwiddled>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OriginalTypeLib>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Cookie>k__BackingField;
    [ObsoleteAttribute("Use LibIdExtended instead of this.")]
public string LibIdExternal { get; public set; }
    public string LibIdExtended { get; public set; }
    public string LibIdTwiddled { get; public set; }
    public Guid OriginalTypeLib { get; public set; }
    internal UInt32 Cookie { get; internal set; }
    public string get_LibIdExternal();
    public void set_LibIdExternal(string value);
    [CompilerGeneratedAttribute]
public string get_LibIdExtended();
    [CompilerGeneratedAttribute]
public void set_LibIdExtended(string value);
    [CompilerGeneratedAttribute]
public string get_LibIdTwiddled();
    [CompilerGeneratedAttribute]
public void set_LibIdTwiddled(string value);
    [CompilerGeneratedAttribute]
public Guid get_OriginalTypeLib();
    [CompilerGeneratedAttribute]
public void set_OriginalTypeLib(Guid value);
    [CompilerGeneratedAttribute]
internal UInt32 get_Cookie();
    [CompilerGeneratedAttribute]
internal void set_Cookie(UInt32 value);
}
public class OfficeOpenXml.VBA.ExcelVbaReferenceProject : ExcelVbaReference {
    [CompilerGeneratedAttribute]
private string <LibIdRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MinorVersion>k__BackingField;
    public string LibIdRelative { get; public set; }
    public UInt32 MajorVersion { get; public set; }
    public ushort MinorVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LibIdRelative();
    [CompilerGeneratedAttribute]
public void set_LibIdRelative(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_MajorVersion();
    [CompilerGeneratedAttribute]
public void set_MajorVersion(UInt32 value);
    [CompilerGeneratedAttribute]
public ushort get_MinorVersion();
    [CompilerGeneratedAttribute]
public void set_MinorVersion(ushort value);
}
public class OfficeOpenXml.VBA.ExcelVbaSignature : object {
    internal ZipPackagePart _vbaPart;
    private X509Certificate2 _certificate;
    [CompilerGeneratedAttribute]
private SignedCms <Verifier>k__BackingField;
    [CompilerGeneratedAttribute]
private CompoundDocument <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelSignatureVersion <LegacySignature>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelSignatureVersion <AgileSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private ExcelSignatureVersion <V3Signature>k__BackingField;
    public X509Certificate2 Certificate { get; public set; }
    public SignedCms Verifier { get; internal set; }
    internal CompoundDocument Signature { get; internal set; }
    internal ZipPackagePart Part { get; internal set; }
    public ExcelSignatureVersion LegacySignature { get; public set; }
    public ExcelSignatureVersion AgileSignature { get; public set; }
    public ExcelSignatureVersion V3Signature { get; public set; }
    internal ExcelVbaSignature(ZipPackagePart vbaPart);
    public X509Certificate2 get_Certificate();
    public void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public SignedCms get_Verifier();
    [CompilerGeneratedAttribute]
internal void set_Verifier(SignedCms value);
    [CompilerGeneratedAttribute]
internal CompoundDocument get_Signature();
    [CompilerGeneratedAttribute]
internal void set_Signature(CompoundDocument value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    internal void Save(ExcelVbaProject proj);
    [CompilerGeneratedAttribute]
public ExcelSignatureVersion get_LegacySignature();
    [CompilerGeneratedAttribute]
public void set_LegacySignature(ExcelSignatureVersion value);
    [CompilerGeneratedAttribute]
public ExcelSignatureVersion get_AgileSignature();
    [CompilerGeneratedAttribute]
public void set_AgileSignature(ExcelSignatureVersion value);
    [CompilerGeneratedAttribute]
public ExcelSignatureVersion get_V3Signature();
    [CompilerGeneratedAttribute]
public void set_V3Signature(ExcelSignatureVersion value);
}
internal enum OfficeOpenXml.VBA.ExcelVbaSignatureType : Enum {
    public int value__;
    public static ExcelVbaSignatureType Legacy;
    public static ExcelVbaSignatureType Agile;
    public static ExcelVbaSignatureType V3;
}
internal class OfficeOpenXml.VBA.ModuleNameChange : MulticastDelegate {
    public ModuleNameChange(object object, IntPtr method);
    public virtual void Invoke(string value);
    public virtual IAsyncResult BeginInvoke(string value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class OfficeOpenXml.VBA.Signatures.CertUtil : object {
    internal static X509Certificate2 GetCertFromStore(StoreLocation loc, string thumbPrint);
    internal static Byte[] GetSerializedCertStore(Byte[] certRawData);
    internal static Byte[] CreateBinarySignature(MemoryStream ms, BinaryWriter bw, Byte[] certStore, Byte[] cert);
    internal static X509Certificate2 GetCertificate(string thumbprint);
    internal static SignedCms SignProject(ExcelVbaProject proj, EPPlusVbaSignature signature, EPPlusSignatureContext ctx);
}
internal class OfficeOpenXml.VBA.Signatures.EPPlusSignatureContext : object {
    private ExcelVbaSignatureType _signatureType;
    [CompilerGeneratedAttribute]
private string <AlgorithmIdentifierOId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CompiledHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SourceHash>k__BackingField;
    public ExcelVbaSignatureType SignatureType { get; }
    public string AlgorithmIdentifierOId { get; public set; }
    public VbaSignatureHashAlgorithm HashAlgorithm { get; public set; }
    public Byte[] CompiledHash { get; public set; }
    public Byte[] SourceHash { get; public set; }
    public EPPlusSignatureContext(ExcelVbaSignatureType signatureType);
    public ExcelVbaSignatureType get_SignatureType();
    [CompilerGeneratedAttribute]
public string get_AlgorithmIdentifierOId();
    [CompilerGeneratedAttribute]
public void set_AlgorithmIdentifierOId(string value);
    public VbaSignatureHashAlgorithm get_HashAlgorithm();
    public void set_HashAlgorithm(VbaSignatureHashAlgorithm value);
    [CompilerGeneratedAttribute]
public Byte[] get_CompiledHash();
    [CompilerGeneratedAttribute]
public void set_CompiledHash(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_SourceHash();
    [CompilerGeneratedAttribute]
public void set_SourceHash(Byte[] value);
    public HashAlgorithm GetHashAlgorithm();
    private HashAlgorithm GetHashAlgorithmDefault();
    public Byte[] GetHashAlgorithmBytes();
    public Byte[] GetIndirectDataContentOidBytes();
}
internal abstract class OfficeOpenXml.VBA.Signatures.EPPlusVbaSignature : object {
    private ZipPackagePart _vbaPart;
    private ExcelVbaSignatureType _signatureType;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private SignedCms <Verifier>k__BackingField;
    [CompilerGeneratedAttribute]
private EPPlusSignatureContext <Context>k__BackingField;
    internal ZipPackagePart Part { get; internal set; }
    internal string SchemaRelation { get; }
    internal string ContentType { get; }
    public X509Certificate2 Certificate { get; public set; }
    public SignedCms Verifier { get; internal set; }
    public EPPlusSignatureContext Context { get; public set; }
    public EPPlusVbaSignature(ZipPackagePart vbaPart, ExcelVbaSignatureType signatureType);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    internal string get_SchemaRelation();
    internal string get_ContentType();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public SignedCms get_Verifier();
    [CompilerGeneratedAttribute]
internal void set_Verifier(SignedCms value);
    [CompilerGeneratedAttribute]
public EPPlusSignatureContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(EPPlusSignatureContext value);
    internal bool ReadSignature();
    internal void CreateSignature(ExcelVbaProject project);
}
internal class OfficeOpenXml.VBA.Signatures.EPPlusVbaSignatureAgile : EPPlusVbaSignature {
    public EPPlusVbaSignatureAgile(ZipPackagePart part);
}
internal class OfficeOpenXml.VBA.Signatures.EPPlusVbaSignatureLegacy : EPPlusVbaSignature {
    public EPPlusVbaSignatureLegacy(ZipPackagePart part);
}
internal class OfficeOpenXml.VBA.Signatures.EPPlusVbaSignatureV3 : EPPlusVbaSignature {
    public EPPlusVbaSignatureV3(ZipPackagePart vbaPart);
}
public class OfficeOpenXml.Vba.Signatures.ExcelSignatureVersion : object {
    [CompilerGeneratedAttribute]
private bool <CreateSignatureOnSave>k__BackingField;
    [CompilerGeneratedAttribute]
private SignedCms <Verifier>k__BackingField;
    [CompilerGeneratedAttribute]
private VbaSignatureHashAlgorithm <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipPackagePart <Part>k__BackingField;
    internal EPPlusVbaSignature SignatureHandler;
    public bool CreateSignatureOnSave { get; public set; }
    public SignedCms Verifier { get; internal set; }
    public VbaSignatureHashAlgorithm HashAlgorithm { get; public set; }
    internal ZipPackagePart Part { get; internal set; }
    internal X509Certificate2 Certificate { get; internal set; }
    internal ExcelSignatureVersion(EPPlusVbaSignature signature, VbaSignatureHashAlgorithm hashAlgorithm);
    [CompilerGeneratedAttribute]
public bool get_CreateSignatureOnSave();
    [CompilerGeneratedAttribute]
public void set_CreateSignatureOnSave(bool value);
    [CompilerGeneratedAttribute]
public SignedCms get_Verifier();
    [CompilerGeneratedAttribute]
internal void set_Verifier(SignedCms value);
    [CompilerGeneratedAttribute]
public VbaSignatureHashAlgorithm get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithm(VbaSignatureHashAlgorithm value);
    [CompilerGeneratedAttribute]
internal ZipPackagePart get_Part();
    [CompilerGeneratedAttribute]
internal void set_Part(ZipPackagePart value);
    internal X509Certificate2 get_Certificate();
    internal void set_Certificate(X509Certificate2 value);
    internal void CreateSignature(ExcelVbaProject project);
}
internal static class OfficeOpenXml.VBA.Signatures.ProjectSignUtil : object {
    internal static ContentInfo SignProject(ExcelVbaProject proj, EPPlusVbaSignature signature, EPPlusSignatureContext ctx);
    private static ContentInfo CreateContentInfo(Byte[] hash, MemoryStream ms, EPPlusSignatureContext ctx);
    private static void WriteSequenceLength(BinaryWriter bw, int length);
    private static int GetByteSize(int length);
    private static Byte[] GetHashContent(EPPlusSignatureContext ctx, Byte[] hash);
    private static byte GetContentInfoTotalSize();
    private static void WriteOid(BinaryWriter bw, Byte[] bytes);
}
internal class OfficeOpenXml.VBA.Signatures.SignatureInfo : object {
    public UInt32 cbSignature;
    public UInt32 signatureOffset;
    public UInt32 cbSigningCertStore;
    public UInt32 certStoreOffset;
    public UInt32 cbProjectName;
    public UInt32 projectNameOffset;
    public UInt32 fTimestamp;
    public UInt32 cbTimestampUrl;
    public UInt32 timestampUrlOffset;
    public Byte[] signature;
    public UInt32 version;
    public UInt32 fileType;
    public UInt32 id;
    internal UInt32 endel1;
    internal UInt32 endel2;
    internal ushort rgchProjectNameBuffer;
    internal ushort rgchTimestampBuffer;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private SignedCms <Verifier>k__BackingField;
    public X509Certificate2 Certificate { get; internal set; }
    public SignedCms Verifier { get; internal set; }
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
internal void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public SignedCms get_Verifier();
    [CompilerGeneratedAttribute]
internal void set_Verifier(SignedCms value);
}
internal static class OfficeOpenXml.VBA.Signatures.SignaturePartUtil : object {
    internal static ZipPackagePart GetPart(ExcelVbaProject proj, EPPlusVbaSignature signature);
    internal static void DeleteParts(ZipPackagePart[] parts);
    internal static void DeletePartAndRelations(ZipPackagePart part);
    private static Uri GetUriByType(ExcelVbaSignatureType signatureType, UriKind uriKind);
}
internal static class OfficeOpenXml.VBA.Signatures.SignatureReader : object {
    private static string IndirectDataContentOid;
    private static string IndirectDataContentOidV2;
    internal static SignatureInfo ReadSignature(ZipPackagePart part, ExcelVbaSignatureType signatureType, EPPlusSignatureContext ctx);
    internal static void ReadSignedData(Byte[] data, EPPlusSignatureContext ctx);
    private static int ReadSequence(BinaryReader br);
    private static Byte[] ReadOctStringBytes(BinaryReader bw);
    internal static string ReadHash(Byte[] content, int offset);
    internal static string ReadOId(BinaryReader bw);
}
internal static class OfficeOpenXml.VBA.VbaSchemaRelations : object {
    public static string Legacy;
    public static string Agile;
    public static string V3;
}
public enum OfficeOpenXml.VBA.VbaSignatureHashAlgorithm : Enum {
    public int value__;
    public static VbaSignatureHashAlgorithm MD5;
    public static VbaSignatureHashAlgorithm SHA1;
    public static VbaSignatureHashAlgorithm SHA256;
    public static VbaSignatureHashAlgorithm SHA384;
    public static VbaSignatureHashAlgorithm SHA512;
}
internal class OfficeOpenXml.WorksheetZipStream : Stream {
    private RollingBuffer _rollingBuffer;
    private Stream _stream;
    private StreamReader _streamReader;
    private Encoding _encoding;
    private long _size;
    private long _position;
    public BinaryWriter Buffer;
    [CompilerGeneratedAttribute]
private bool <WriteToBuffer>k__BackingField;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool WriteToBuffer { get; public set; }
    public WorksheetZipStream(Stream stream, bool writeToBuffer, long size);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void SetWriteToBuffer();
    [CompilerGeneratedAttribute]
public bool get_WriteToBuffer();
    [CompilerGeneratedAttribute]
public void set_WriteToBuffer(bool value);
    internal string GetBufferAsString(bool writeToBufferAfter);
    internal string GetBufferAsStringRemovingElement(bool writeToBufferAfter, string element);
    private static string GetPlaceholderTag(string xml, int startIx, int endIx);
    private int GetEndElementPos(string xml, string element, int endIx);
    private void GetElementPos(string xml, string element, Int32& startIx, Int32& endIx);
    internal void ReadToEnd();
    internal string ReadFromEndElement(string endElement, string startXml, string readToElement, bool writeToBuffer, string xmlPrefix, string attribute, bool addEmptyNode);
    internal string ReadToEndFromAfterUri(string lastUri, string startXml);
    internal string ReadToExt(string startXml, string uriValue, String& lastElement, string lastUri);
    private int GetXmlIndex(string xml, string uriValue);
    private bool HasExtElementUri(string elementString, string uriValue);
    private int FindElementPos(string xml, string element, bool returnStartPos, int ix);
    private int FindLastElementPos(string xml, string element, string prefix, bool returnStartPos, int ix);
    private int FindLastElementPosWithoutPrefix(string xml, string element, bool returnStartPos, int ix);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class OfficeOpenXml.XmlHelper : object {
    private Int32[] _levels;
    [CompilerGeneratedAttribute]
private XmlNamespaceManager <NameSpaceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNode <TopNode>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SchemaNodeOrder>k__BackingField;
    private Char[] _whiteSpaces;
    internal XmlNamespaceManager NameSpaceManager { get; internal set; }
    internal XmlNode TopNode { get; internal set; }
    internal String[] SchemaNodeOrder { get; internal set; }
    internal XmlHelper(XmlNamespaceManager nameSpaceManager);
    internal XmlHelper(XmlNamespaceManager nameSpaceManager, XmlNode topNode);
    [CompilerGeneratedAttribute]
internal XmlNamespaceManager get_NameSpaceManager();
    [CompilerGeneratedAttribute]
internal void set_NameSpaceManager(XmlNamespaceManager value);
    [CompilerGeneratedAttribute]
internal XmlNode get_TopNode();
    [CompilerGeneratedAttribute]
internal void set_TopNode(XmlNode value);
    [CompilerGeneratedAttribute]
internal String[] get_SchemaNodeOrder();
    [CompilerGeneratedAttribute]
internal void set_SchemaNodeOrder(String[] value);
    internal void AddSchemaNodeOrder(String[] schemaNodeOrder, String[] newItems);
    internal void SetBoolNode(string path, bool value);
    internal void AddSchemaNodeOrder(String[] schemaNodeOrder, String[] newItems, Int32[] levels);
    internal static String[] CopyToSchemaNodeOrder(String[] schemaNodeOrder, String[] newItems);
    internal static void CopyElement(XmlElement fromElement, XmlElement toElement, String[] ignoreAttribute);
    internal XmlNode CreateNode(string path);
    internal XmlNode CreateNode(XmlNode node, string path);
    internal XmlNode CreateNode(XmlNode node, string path, bool addNew);
    internal XmlNode CreateNode(string path, bool insertFirst, bool addNew, string exitName);
    internal XmlNode CreateAlternateContentNode(string elementName, string requires);
    private XmlNode CreateNode(XmlNode node, string path, bool insertFirst, bool addNew, string exitName, string alternateContentRequires);
    internal bool CreateNodeUntil(string path, string untilNodeName, XmlNode& spPrNode);
    internal XmlNode ReplaceElement(XmlNode oldChild, string newNodeName);
    internal XmlNode CreateComplexNode(string path);
    internal XmlNode CreateComplexNode(XmlNode topNode, string path);
    internal XmlNode CreateComplexNode(XmlNode topNode, string path, eNodeInsertOrder nodeInsertOrder, XmlNode referenceNode);
    internal XmlNode GetNode(string path);
    internal XmlNodeList GetNodes(string path);
    internal void ClearChildren(string path);
    private XmlNode GetPrependNode(string nodeName, XmlNode node, Int32& index);
    private int GetIndex(int ix);
    private int GetNodePos(string nodeName, int startIndex);
    internal void DeleteAllNode(string path);
    internal void DeleteNode(string path, bool deleteElement);
    internal void DeleteTopNode();
    internal void SetXmlNodeDouble(string path, Nullable`1<double> d, bool allowNegative);
    internal void SetXmlNodeDouble(string path, Nullable`1<double> d, CultureInfo ci, string suffix, bool allowNegative);
    internal void SetXmlNodeInt(string path, Nullable`1<int> d, CultureInfo ci, bool allowNegative);
    internal void SetXmlNodeLong(string path, Nullable`1<long> d, CultureInfo ci, bool allowNegative);
    internal void SetXmlNodeStringPreserveWhiteSpace(string path, string value, bool removeIfBlank, bool insertFirst);
    internal void SetXmlNodeString(string path, string value);
    internal void SetXmlNodeString(string path, string value, bool removeIfBlank);
    internal void SetXmlNodeString(XmlNode node, string path, string value);
    internal void SetXmlNodeString(XmlNode node, string path, string value, bool removeIfBlank);
    internal void SetXmlNodeString(XmlNode node, string path, string value, bool removeIfBlank, bool insertFirst);
    internal void SetXmlNodeBool(string path, bool value);
    internal void SetXmlNodeBoolVml(string path, bool value);
    internal void SetXmlNodeBool(string path, bool value, bool removeIf);
    internal void SetXmlNodePercentage(string path, Nullable`1<double> value, bool allowNegative, double minMaxValue);
    internal void SetXmlNodeAngle(string path, Nullable`1<double> value, string parameter, int minValue, int maxValue);
    internal void SetXmlNodeEmuToPt(string path, Nullable`1<double> value);
    internal void SetXmlNodeFontSize(string path, Nullable`1<double> value, string propertyName, bool AllowNegative);
    internal bool ExistsNode(string path);
    internal bool ExistsNode(XmlNode node, string path);
    internal Nullable`1<bool> GetXmlNodeBoolNullable(string path);
    internal Nullable`1<bool> GetXmlNodeBoolNullableWithVal(string path);
    internal bool GetXmlNodeBool(string path);
    internal bool GetXmlNodeBool(string path, XmlNode parentNode);
    internal bool GetXmlNodeBool(string path, bool blankValue);
    internal static bool GetBoolFromString(string s);
    internal static bool GetBoolFromNullString(string s);
    internal int GetXmlNodeInt(string path, int defaultValue);
    internal double GetXmlNodeAngel(string path, double defaultValue);
    internal double GetXmlNodeEmuToPt(string path);
    internal Nullable`1<double> GetXmlNodeEmuToPtNull(string path);
    internal Nullable`1<int> GetXmlNodeIntNull(string path);
    internal long GetXmlNodeLong(string path);
    internal Nullable`1<long> GetXmlNodeLongNull(string path);
    internal decimal GetXmlNodeDecimal(string path);
    internal Nullable`1<decimal> GetXmlNodeDecimalNull(string path);
    internal Nullable`1<double> GetXmlNodeDoubleNull(string path);
    internal double GetXmlNodeDouble(string path);
    internal Nullable`1<DateTime> GetXmlNodeDateTime(string path);
    internal string GetXmlNodeString(XmlNode node, string path);
    internal string GetXmlNodeString(string path);
    internal static Uri GetNewUri(ZipPackage package, string sUri);
    internal static Uri GetNewUri(ZipPackage package, string sUri, Int32& id);
    internal Nullable`1<T> GetXmlEnumNull(string path, Nullable`1<T> defaultValue);
    internal Nullable`1<double> GetXmlNodePercentage(string path);
    internal double GetXmlNodeFontSize(string path);
    internal void RenameNode(XmlNode node, string prefix, string newName, String[] allowedChildren);
    internal void InserAfter(XmlNode parentNode, string beforeNodes, XmlNode newNode);
    internal static void LoadXmlSafe(XmlDocument xmlDoc, Stream stream);
    internal static void LoadXmlSafe(XmlDocument xmlDoc, string xml, Encoding encoding);
    internal void CreatespPrNode(string nodePath, bool withLine);
    internal XmlNode GetOrCreateExtLstSubNode(string uriGuid, string prefix, String[] uriOrder);
    internal static bool GetRichTextPropertyBool(XmlNode n);
    internal static ExcelUnderLineType GetRichTextPropertyUnderlineType(XmlNode n, Boolean& val);
    internal static ExcelVerticalAlignmentFont GetRichTextPropertyVerticalAlignmentFont(XmlNode n);
    internal static float GetRichTextProperyFloat(XmlNode n);
    internal static string GetRichTextPropertyString(XmlNode n);
    internal static ExcelRichTextColor GetRichTextPropertyColor(XmlNode n, ExcelRichText rt);
    internal static int GetRichTextPropertyInt(XmlNode n);
}
internal static class OfficeOpenXml.XmlHelperFactory : object {
    internal static XmlHelper Create(XmlNamespaceManager namespaceManager);
    internal static XmlHelper Create(XmlNamespaceManager namespaceManager, XmlNode topNode);
}
internal class OfficeOpenXml.XmlHelperInstance : XmlHelper {
    internal XmlHelperInstance(XmlNamespaceManager namespaceManager);
    internal XmlHelperInstance(XmlNamespaceManager namespaceManager, XmlNode topNode);
}
internal enum RichValueDataType : Enum {
    public int value__;
    public static RichValueDataType Decimal;
    public static RichValueDataType Integer;
    public static RichValueDataType Bool;
    public static RichValueDataType Error;
    public static RichValueDataType String;
    public static RichValueDataType RichValue;
    public static RichValueDataType Array;
    public static RichValueDataType SupportingPropertyBag;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
