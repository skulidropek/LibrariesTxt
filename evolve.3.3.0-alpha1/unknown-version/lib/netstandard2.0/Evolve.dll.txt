internal enum ConsoleTables.Alignment : Enum {
    public int value__;
    public static Alignment Left;
    public static Alignment Right;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ConsoleTables.ConsoleTable : object {
    [CompilerGeneratedAttribute]
private IList`1<object> <Columns>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<Object[]> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleTableOptions <Options>k__BackingField;
    public static HashSet`1<Type> NumericTypes;
    public IList`1<object> Columns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<Object[]> Rows { get; protected set; }
    public ConsoleTableOptions Options { get; protected set; }
    public ConsoleTable(String[] columns);
    public ConsoleTable(ConsoleTableOptions options);
    private static ConsoleTable();
    [CompilerGeneratedAttribute]
public IList`1<object> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<object> value);
    [CompilerGeneratedAttribute]
public IList`1<Object[]> get_Rows();
    [CompilerGeneratedAttribute]
protected void set_Rows(IList`1<Object[]> value);
    [CompilerGeneratedAttribute]
public ConsoleTableOptions get_Options();
    [CompilerGeneratedAttribute]
protected void set_Options(ConsoleTableOptions value);
    public ConsoleTable AddColumn(IEnumerable`1<string> names);
    public ConsoleTable AddRow(Object[] values);
    public ConsoleTable Configure(Action`1<ConsoleTableOptions> action);
    public virtual string ToString();
    public string ToMarkDownString();
    private string ToMarkDownString(char delimiter);
    public string ToMinimalString();
    public string ToStringAlternative();
    private string Format(List`1<int> columnLengths, char delimiter);
    private string GetNumberAlignment(int i);
    private List`1<int> ColumnLengths();
    public void Write(Format format);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private int <ColumnLengths>b__25_0(object t, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ConsoleTables.ConsoleTableOptions : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Alignment <NumberAlignment>k__BackingField;
    public IEnumerable`1<string> Columns { get; public set; }
    public bool EnableCount { get; public set; }
    public Alignment NumberAlignment { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableCount();
    [CompilerGeneratedAttribute]
public void set_EnableCount(bool value);
    [CompilerGeneratedAttribute]
public Alignment get_NumberAlignment();
    [CompilerGeneratedAttribute]
public void set_NumberAlignment(Alignment value);
}
internal enum ConsoleTables.Format : Enum {
    public int value__;
    public static Format Default;
    public static Format MarkDown;
    public static Format Alternative;
    public static Format Minimal;
}
public enum EvolveDb.Configuration.CommandOptions : Enum {
    public int value__;
    public static CommandOptions DoNothing;
    public static CommandOptions Migrate;
    public static CommandOptions Repair;
    public static CommandOptions Erase;
    public static CommandOptions Info;
    public static CommandOptions Validate;
}
[NullableContextAttribute("1")]
public interface EvolveDb.Configuration.IEvolveConfiguration {
    public IEnumerable`1<string> Locations { get; }
    public CommandOptions Command { get; }
    public bool IsEraseDisabled { get; }
    public bool MustEraseOnValidationError { get; }
    public Encoding Encoding { get; }
    public string SqlMigrationPrefix { get; }
    public string SqlRepeatableMigrationPrefix { get; }
    public string SqlMigrationSeparator { get; }
    public string SqlMigrationSuffix { get; }
    public IEnumerable`1<string> Schemas { get; }
    public string MetadataTableSchema { get; }
    public string MetadataTableName { get; }
    public string PlaceholderPrefix { get; }
    public string PlaceholderSuffix { get; }
    public Dictionary`2<string, string> Placeholders { get; }
    public MigrationVersion TargetVersion { get; }
    public MigrationVersion StartVersion { get; }
    public bool EnableClusterMode { get; }
    public bool OutOfOrder { get; }
    public Nullable`1<int> CommandTimeout { get; }
    public Nullable`1<int> AmbientTransactionTimeout { get; }
    public IEnumerable`1<Assembly> EmbeddedResourceAssemblies { get; }
    public IEnumerable`1<string> EmbeddedResourceFilters { get; }
    public bool RetryRepeatableMigrationsUntilNoError { get; }
    public TransactionKind TransactionMode { get; }
    public bool SkipNextMigrations { get; }
    public IMigrationLoader MigrationLoader { get; }
    public abstract virtual IEnumerable`1<string> get_Locations();
    public abstract virtual CommandOptions get_Command();
    public abstract virtual bool get_IsEraseDisabled();
    public abstract virtual bool get_MustEraseOnValidationError();
    public abstract virtual Encoding get_Encoding();
    public abstract virtual string get_SqlMigrationPrefix();
    public abstract virtual string get_SqlRepeatableMigrationPrefix();
    public abstract virtual string get_SqlMigrationSeparator();
    public abstract virtual string get_SqlMigrationSuffix();
    public abstract virtual IEnumerable`1<string> get_Schemas();
    public abstract virtual string get_MetadataTableSchema();
    public abstract virtual string get_MetadataTableName();
    public abstract virtual string get_PlaceholderPrefix();
    public abstract virtual string get_PlaceholderSuffix();
    public abstract virtual Dictionary`2<string, string> get_Placeholders();
    public abstract virtual MigrationVersion get_TargetVersion();
    public abstract virtual MigrationVersion get_StartVersion();
    public abstract virtual bool get_EnableClusterMode();
    public abstract virtual bool get_OutOfOrder();
    public abstract virtual Nullable`1<int> get_CommandTimeout();
    public abstract virtual Nullable`1<int> get_AmbientTransactionTimeout();
    public abstract virtual IEnumerable`1<Assembly> get_EmbeddedResourceAssemblies();
    public abstract virtual IEnumerable`1<string> get_EmbeddedResourceFilters();
    public abstract virtual bool get_RetryRepeatableMigrationsUntilNoError();
    public abstract virtual TransactionKind get_TransactionMode();
    public abstract virtual bool get_SkipNextMigrations();
    public abstract virtual IMigrationLoader get_MigrationLoader();
}
public enum EvolveDb.Configuration.TransactionKind : Enum {
    public int value__;
    public static TransactionKind CommitEach;
    public static TransactionKind CommitAll;
    public static TransactionKind RollbackAll;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Connection.WrappedConnection : object {
    private static string NoAmbiantTransactionFound;
    private static string TransactionAlreadyStarted;
    private static string NoActiveTransaction;
    private static string ConnectionValidationError;
    private bool _openedInternally;
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private DbConnection <DbConnection>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DbTransaction <CurrentTx>k__BackingField;
    public DbConnection DbConnection { get; }
    [NullableAttribute("2")]
public DbTransaction CurrentTx { get; private set; }
    public bool SQLiteInMemoryDatabase { get; }
    internal bool CassandraCluster { get; }
    public WrappedConnection(DbConnection connection);
    [CompilerGeneratedAttribute]
public DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DbTransaction get_CurrentTx();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CurrentTx(DbTransaction value);
    public bool get_SQLiteInMemoryDatabase();
    internal bool get_CassandraCluster();
    public void UseAmbientTransaction();
    public DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public void Commit();
    public void Rollback();
    public void Open();
    public void Close();
    public WrappedConnection Validate();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ClearTransaction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.Cassandra.CassandraCluster : DatabaseHelper {
    private string _currentKeyspaceName;
    [CompilerGeneratedAttribute]
private SqlStatementBuilderBase <SqlStatementBuilder>k__BackingField;
    public string DatabaseName { get; }
    public string CurrentUser { get; }
    public SqlStatementBuilderBase SqlStatementBuilder { get; }
    public CassandraCluster(WrappedConnection wrappedConnection);
    public virtual string get_DatabaseName();
    public virtual string get_CurrentUser();
    public virtual string GetCurrentSchemaName();
    public static string GetFirstAvailableKeyspace(WrappedConnection wrappedConnection);
    public virtual Schema GetSchema(string schemaName);
    public virtual IEvolveMetadata GetMetadataTable(string schema, string tableName);
    public virtual bool TryAcquireApplicationLock();
    public virtual bool ReleaseApplicationLock();
    [CompilerGeneratedAttribute]
public virtual SqlStatementBuilderBase get_SqlStatementBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.Cassandra.CassandraKeyspace : Schema {
    private ReplicationStrategy _replicationStrategy;
    public CassandraKeyspace(string keyspaceName, ReplicationStrategy replicationStrategy, WrappedConnection wrappedConnection);
    public virtual bool Create();
    public virtual bool Drop();
    public virtual bool Erase();
    public virtual bool IsEmpty();
    public virtual bool IsExists();
    public static CassandraKeyspace Retreive(string keyspaceName, WrappedConnection wrappedConnection);
    private static ReplicationStrategy GetReplicationStrategyFromConfiguration(string keyspaceName);
    internal static ReplicationStrategy CreateLocalStrategy();
    public static ReplicationStrategy CreateSimpleStrategy(int replicationFactor);
    public static ReplicationStrategy CreateNetworkTopologyStrategy(DataCenterReplicationFactor[] dataCentersReplicationFactors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.Cassandra.CassandraMetadataTable : MetadataTable {
    private static int LockTtlInSeconds;
    public CassandraMetadataTable(string schema, string tableName, DatabaseHelper database);
    protected virtual void InternalCreate();
    protected virtual IEnumerable`1<MigrationMetadata> InternalGetAllMetadata();
    protected virtual bool InternalIsExists();
    protected virtual void InternalSave(MigrationMetadata metadata);
    protected virtual void InternalUpdateChecksum(int migrationId, string checksum);
    protected virtual bool InternalTryLock();
    protected virtual bool InternalReleaseLock();
    [CompilerGeneratedAttribute]
private bool <InternalSave>g__idExists|4_0(int id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.Cassandra.Configuration : object {
    public static string ConfigurationFile;
    public static string DefaultKeyspaceKey;
    public static bool ConfigurationFileExists();
    public static string GetConfiguration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.Cassandra.CqlStatementBuilder : SqlStatementBuilderBase {
    private static string StatementTerminationCharacter;
    [NullableAttribute("2")]
public string BatchDelimiter { get; }
    [NullableContextAttribute("2")]
public virtual string get_BatchDelimiter();
    [IteratorStateMachineAttribute("EvolveDb.Dialect.Cassandra.CqlStatementBuilder/<Parse>d__3")]
protected virtual IEnumerable`1<SqlStatement> Parse(string sqlScript, bool transactionEnabled);
    [IteratorStateMachineAttribute("EvolveDb.Dialect.Cassandra.CqlStatementBuilder/<<Parse>g__GetLines|3_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <Parse>g__GetLines|3_0(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.CockroachDB.CockroachDBCluster : DatabaseHelper {
    public string DatabaseName { get; }
    public string CurrentUser { get; }
    public SqlStatementBuilderBase SqlStatementBuilder { get; }
    public CockroachDBCluster(WrappedConnection wrappedConnection);
    public virtual string get_DatabaseName();
    public virtual string get_CurrentUser();
    public virtual SqlStatementBuilderBase get_SqlStatementBuilder();
    public virtual string GetCurrentSchemaName();
    public virtual IEvolveMetadata GetMetadataTable(string schema, string tableName);
    public virtual Schema GetSchema(string schemaName);
    public virtual bool TryAcquireApplicationLock();
    public virtual bool ReleaseApplicationLock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.CockroachDB.CockroachDBDatabase : Schema {
    public CockroachDBDatabase(string schemaName, WrappedConnection wrappedConnection);
    public virtual bool IsExists();
    public virtual bool IsEmpty();
    public virtual bool Create();
    public virtual bool Drop();
    public virtual bool Erase();
    protected void DropViews();
    protected void DropTables();
    protected void DropSequences();
    private static string Quote(string dbObject);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropViews>b__6_0(string view);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropTables>b__7_0(string table);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropSequences>b__8_0(string seq);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.CockroachDB.CockroachDBMetadataTable : MetadataTable {
    public CockroachDBMetadataTable(string schema, string tableName, DatabaseHelper database);
    protected virtual bool InternalTryLock();
    protected virtual bool InternalReleaseLock();
    protected virtual bool InternalIsExists();
    protected virtual void InternalCreate();
    protected virtual void InternalSave(MigrationMetadata metadata);
    protected virtual void InternalUpdateChecksum(int migrationId, string checksum);
    protected virtual IEnumerable`1<MigrationMetadata> InternalGetAllMetadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class EvolveDb.Dialect.DatabaseHelper : object {
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private WrappedConnection <WrappedConnection>k__BackingField;
    public WrappedConnection WrappedConnection { get; }
    public string DatabaseName { get; }
    public string CurrentUser { get; }
    public SqlStatementBuilderBase SqlStatementBuilder { get; }
    protected DatabaseHelper(WrappedConnection wrappedConnection);
    [CompilerGeneratedAttribute]
public WrappedConnection get_WrappedConnection();
    public abstract virtual string get_DatabaseName();
    public abstract virtual string get_CurrentUser();
    public abstract virtual SqlStatementBuilderBase get_SqlStatementBuilder();
    [NullableContextAttribute("2")]
public abstract virtual string GetCurrentSchemaName();
    public abstract virtual Schema GetSchema(string schemaName);
    public abstract virtual IEvolveMetadata GetMetadataTable(string schema, string tableName);
    public abstract virtual bool TryAcquireApplicationLock();
    public abstract virtual bool ReleaseApplicationLock();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class EvolveDb.Dialect.DatabaseHelperFactory : object {
    private static string UnknownDBMS;
    private static Dictionary`2<DBMS, Func`2<WrappedConnection, DatabaseHelper>> _dbmsMap;
    private static DatabaseHelperFactory();
    public static DatabaseHelper GetDatabaseHelper(DBMS dbmsType, WrappedConnection connection);
}
public enum EvolveDb.Dialect.DBMS : Enum {
    public int value__;
    public static DBMS MySQL;
    public static DBMS MariaDB;
    public static DBMS Oracle;
    public static DBMS PostgreSQL;
    public static DBMS SQLite;
    public static DBMS SQLServer;
    public static DBMS Cassandra;
    public static DBMS CockroachDB;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.MySQL.MySQLDatabase : DatabaseHelper {
    private static string LOCK_ID;
    public string DatabaseName { get; }
    public string CurrentUser { get; }
    public SqlStatementBuilderBase SqlStatementBuilder { get; }
    public MySQLDatabase(WrappedConnection wrappedConnection);
    public virtual string get_DatabaseName();
    public virtual string get_CurrentUser();
    public virtual SqlStatementBuilderBase get_SqlStatementBuilder();
    public virtual string GetCurrentSchemaName();
    public virtual IEvolveMetadata GetMetadataTable(string schema, string tableName);
    public virtual Schema GetSchema(string schemaName);
    public virtual bool TryAcquireApplicationLock();
    public virtual bool ReleaseApplicationLock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.MySQL.MySQLMetadataTable : MetadataTable {
    public MySQLMetadataTable(string schema, string tableName, DatabaseHelper database);
    protected virtual bool InternalTryLock();
    protected virtual bool InternalReleaseLock();
    protected virtual bool InternalIsExists();
    protected virtual void InternalCreate();
    protected virtual void InternalSave(MigrationMetadata metadata);
    protected virtual void InternalUpdateChecksum(int migrationId, string checksum);
    protected virtual IEnumerable`1<MigrationMetadata> InternalGetAllMetadata();
}
internal class EvolveDb.Dialect.MySQL.MySQLSchema : Schema {
    [NullableContextAttribute("1")]
public MySQLSchema(string schemaName, WrappedConnection wrappedConnection);
    public virtual bool IsExists();
    public virtual bool IsEmpty();
    public virtual bool Create();
    public virtual bool Drop();
    public virtual bool Erase();
    private void DropTables();
    private void DropViews();
    private void DropRoutines();
    private void DropEvents();
    [CompilerGeneratedAttribute]
private void <DropTables>b__6_0(string t);
    [CompilerGeneratedAttribute]
private void <DropViews>b__7_0(string vw);
    [CompilerGeneratedAttribute]
private void <DropRoutines>b__8_1(<>f__AnonymousType1`2<string, string> x);
    [CompilerGeneratedAttribute]
private void <DropEvents>b__9_0(string evt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.PostgreSQL.PostgreSQLDatabase : DatabaseHelper {
    private static int LOCK_ID;
    public string DatabaseName { get; }
    public string CurrentUser { get; }
    public SqlStatementBuilderBase SqlStatementBuilder { get; }
    public PostgreSQLDatabase(WrappedConnection wrappedConnection);
    public virtual string get_DatabaseName();
    public virtual string get_CurrentUser();
    public virtual SqlStatementBuilderBase get_SqlStatementBuilder();
    public virtual IEvolveMetadata GetMetadataTable(string schema, string tableName);
    public virtual string GetCurrentSchemaName();
    public virtual Schema GetSchema(string schemaName);
    public virtual bool TryAcquireApplicationLock();
    public virtual bool ReleaseApplicationLock();
    private string CleanSchemaName(string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.PostgreSQL.PostgreSQLMetadataTable : MetadataTable {
    public PostgreSQLMetadataTable(string schema, string tableName, DatabaseHelper database);
    protected virtual bool InternalTryLock();
    protected virtual bool InternalReleaseLock();
    protected virtual bool InternalIsExists();
    protected virtual void InternalCreate();
    protected virtual void InternalSave(MigrationMetadata metadata);
    protected virtual void InternalUpdateChecksum(int migrationId, string checksum);
    protected virtual IEnumerable`1<MigrationMetadata> InternalGetAllMetadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.PostgreSQL.PostgreSQLSchema : Schema {
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    public long Version { get; }
    public PostgreSQLSchema(string schemaName, WrappedConnection wrappedConnection);
    [CompilerGeneratedAttribute]
public long get_Version();
    public virtual bool IsExists();
    public virtual bool IsEmpty();
    public virtual bool Create();
    public virtual bool Drop();
    public virtual bool Erase();
    protected void DropMaterializedViews();
    protected void DropSequences();
    protected void DropBaseTypes(bool recreate);
    protected void DropBaseAggregates();
    protected void DropRoutines();
    protected void DropEnums();
    protected void DropDomains();
    protected void DropViews();
    protected void DropTables();
    protected void DropExtensions();
    private static string Quote(string dbObject);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropMaterializedViews>b__9_0(string view);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropSequences>b__10_0(string seq);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropBaseTypes>b__11_1(<>f__AnonymousType2`2<string, char> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropBaseTypes>b__11_3(<>f__AnonymousType2`2<string, char> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropBaseAggregates>b__12_1(<>f__AnonymousType3`2<string, string> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropRoutines>b__13_1(<>f__AnonymousType3`2<string, string> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropRoutines>b__13_3(<>f__AnonymousType4`3<string, string, char> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropEnums>b__14_0(string enumName);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropDomains>b__15_0(string domain);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropViews>b__16_0(string view);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropTables>b__17_0(string table);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropExtensions>b__18_0(string ext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class EvolveDb.Dialect.Schema : object {
    protected WrappedConnection _wrappedConnection;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public Schema(string schemaName, WrappedConnection wrappedConnection);
    [CompilerGeneratedAttribute]
public string get_Name();
    public abstract virtual bool IsExists();
    public abstract virtual bool IsEmpty();
    public abstract virtual bool Create();
    public abstract virtual bool Erase();
    public abstract virtual bool Drop();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SimpleSqlStatementBuilder : SqlStatementBuilderBase {
    public string BatchDelimiter { get; }
    public virtual string get_BatchDelimiter();
    [NullableContextAttribute("1")]
protected virtual IEnumerable`1<SqlStatement> Parse(string sqlScript, bool transactionEnabled);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SQLite.SQLiteDatabase : DatabaseHelper {
    public string DatabaseName { get; }
    public string CurrentUser { get; }
    public SqlStatementBuilderBase SqlStatementBuilder { get; }
    public SQLiteDatabase(WrappedConnection wrappedConnection);
    public virtual string get_DatabaseName();
    public virtual string get_CurrentUser();
    public virtual SqlStatementBuilderBase get_SqlStatementBuilder();
    public virtual string GetCurrentSchemaName();
    public virtual Schema GetSchema(string schemaName);
    public virtual IEvolveMetadata GetMetadataTable(string schema, string tableName);
    public virtual bool TryAcquireApplicationLock();
    public virtual bool ReleaseApplicationLock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SQLite.SQLiteMetadataTable : MetadataTable {
    public SQLiteMetadataTable(string tableName, DatabaseHelper database);
    protected virtual bool InternalTryLock();
    protected virtual bool InternalReleaseLock();
    protected virtual bool InternalIsExists();
    protected virtual void InternalCreate();
    protected virtual void InternalSave(MigrationMetadata metadata);
    protected virtual void InternalUpdateChecksum(int migrationId, string checksum);
    protected virtual IEnumerable`1<MigrationMetadata> InternalGetAllMetadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SQLite.SQLiteSchema : Schema {
    private static List`1<string> IgnoredSystemTableNames;
    private static List`1<string> UndroppableTableNames;
    public SQLiteSchema(WrappedConnection wrappedConnection);
    private static SQLiteSchema();
    public virtual bool IsExists();
    public virtual bool IsEmpty();
    public virtual bool Create();
    public virtual bool Drop();
    public virtual bool Erase();
    protected List`1<string> GetTables();
    protected void DropTables();
    protected void DropViews();
    protected void DropSequences();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropTables>b__9_0(string t);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropViews>b__10_0(string vw);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SQLServer.SQLServerDatabase : DatabaseHelper {
    private static string LOCK_ID;
    public string DatabaseName { get; }
    public string CurrentUser { get; }
    public SqlStatementBuilderBase SqlStatementBuilder { get; }
    public SQLServerDatabase(WrappedConnection wrappedConnection);
    public virtual string get_DatabaseName();
    public virtual string get_CurrentUser();
    public virtual SqlStatementBuilderBase get_SqlStatementBuilder();
    public virtual IEvolveMetadata GetMetadataTable(string schema, string tableName);
    public virtual Schema GetSchema(string schemaName);
    public virtual bool TryAcquireApplicationLock();
    public virtual bool ReleaseApplicationLock();
    [NullableContextAttribute("2")]
public virtual string GetCurrentSchemaName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SQLServer.SQLServerMetadataTable : MetadataTable {
    public SQLServerMetadataTable(string schema, string tableName, DatabaseHelper database);
    protected virtual bool InternalTryLock();
    protected virtual bool InternalReleaseLock();
    protected virtual bool InternalIsExists();
    protected virtual void InternalCreate();
    protected virtual void InternalSave(MigrationMetadata metadata);
    protected virtual void InternalUpdateChecksum(int migrationId, string checksum);
    protected virtual IEnumerable`1<MigrationMetadata> InternalGetAllMetadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SQLServer.SQLServerSchema : Schema {
    private long _version;
    private long SQLServerVersion { get; }
    public SQLServerSchema(string schemaName, WrappedConnection wrappedConnection);
    public virtual bool IsExists();
    public virtual bool IsEmpty();
    public virtual bool Create();
    public virtual bool Drop();
    public virtual bool Erase();
    protected void DropForeignKeys();
    protected void DropDefaultConstraints();
    protected void DropProcedures();
    protected void DropViews();
    private void DropSystemVersioning();
    protected void DropTables(bool throwOnError);
    protected void DropComputedColumns(bool throwOnError);
    protected void DropFunctions(bool throwOnError);
    protected void DropTypes();
    protected void DropSynonyms();
    protected void DropSequences();
    private List`1<string> GetTables();
    private long get_SQLServerVersion();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropForeignKeys>b__7_1(<>f__AnonymousType5`2<string, string> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropDefaultConstraints>b__8_1(<>f__AnonymousType5`2<string, string> x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropProcedures>b__9_0(string proc);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropViews>b__10_0(string view);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropSystemVersioning>b__11_0(string table);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropTypes>b__15_0(string t);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropSynonyms>b__16_0(string s);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DropSequences>b__17_0(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SQLServer.SQLServerStatementBuilder : SqlStatementBuilderBase {
    private Regex _regexDelimiter;
    public string BatchDelimiter { get; }
    public virtual string get_BatchDelimiter();
    protected virtual IEnumerable`1<SqlStatement> Parse(string migrationScript, bool transactionEnabled);
    private IEnumerable`1<string> ParseBatchDelimiter(string sqlScript);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Dialect.SqlStatement : object {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MustExecuteInTransaction>k__BackingField;
    public int LineNumber { get; }
    public string Sql { get; }
    public bool MustExecuteInTransaction { get; }
    public SqlStatement(string sql, bool mustExecuteInTransaction, int lineNumber);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public bool get_MustExecuteInTransaction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class EvolveDb.Dialect.SqlStatementBuilderBase : object {
    [NullableAttribute("2")]
public string BatchDelimiter { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_BatchDelimiter();
    public virtual IEnumerable`1<SqlStatement> LoadSqlStatements(MigrationScript migrationScript, Dictionary`2<string, string> placeholders);
    protected abstract virtual IEnumerable`1<SqlStatement> Parse(string sqlScript, bool transactionEnabled);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EvolveDb.Evolve : object {
    private DbConnection _userCnn;
    private Action`1<string> _log;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Schemas>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptions <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEraseDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MustEraseOnValidationError>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataTableName>k__BackingField;
    [NullableAttribute("2")]
private string _metadaTableSchema;
    [CompilerGeneratedAttribute]
private string <PlaceholderPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlaceholderSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Placeholders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlMigrationPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlRepeatableMigrationPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlMigrationSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlMigrationSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationVersion <TargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationVersion <StartVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableClusterMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutOfOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AmbientTransactionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Assembly> <EmbeddedResourceAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EmbeddedResourceFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetryRepeatableMigrationsUntilNoError>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionKind <TransactionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipNextMigrations>k__BackingField;
    [NullableAttribute("2")]
private IMigrationLoader _migrationLoader;
    [CompilerGeneratedAttribute]
private int <NbMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NbReparation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NbSchemaErased>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NbSchemaToEraseSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalTimeElapsedInMs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AppliedMigrations>k__BackingField;
    [CompilerGeneratedAttribute]
private DBMS <DBMS>k__BackingField;
    public IEnumerable`1<string> Schemas { get; public set; }
    public CommandOptions Command { get; public set; }
    public bool IsEraseDisabled { get; public set; }
    public bool MustEraseOnValidationError { get; public set; }
    public Encoding Encoding { get; public set; }
    public IEnumerable`1<string> Locations { get; public set; }
    public string MetadataTableName { get; public set; }
    public string MetadataTableSchema { get; public set; }
    public string PlaceholderPrefix { get; public set; }
    public string PlaceholderSuffix { get; public set; }
    public Dictionary`2<string, string> Placeholders { get; public set; }
    public string SqlMigrationPrefix { get; public set; }
    public string SqlRepeatableMigrationPrefix { get; public set; }
    public string SqlMigrationSeparator { get; public set; }
    public string SqlMigrationSuffix { get; public set; }
    public MigrationVersion TargetVersion { get; public set; }
    public MigrationVersion StartVersion { get; public set; }
    public bool EnableClusterMode { get; public set; }
    public bool OutOfOrder { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public Nullable`1<int> AmbientTransactionTimeout { get; public set; }
    public IEnumerable`1<Assembly> EmbeddedResourceAssemblies { get; public set; }
    public IEnumerable`1<string> EmbeddedResourceFilters { get; public set; }
    public bool RetryRepeatableMigrationsUntilNoError { get; public set; }
    public TransactionKind TransactionMode { get; public set; }
    public bool SkipNextMigrations { get; public set; }
    public IMigrationLoader MigrationLoader { get; public set; }
    public IEvolveConfiguration Options { get; }
    public int NbMigration { get; private set; }
    public int NbReparation { get; private set; }
    public int NbSchemaErased { get; private set; }
    public int NbSchemaToEraseSkipped { get; private set; }
    public long TotalTimeElapsedInMs { get; private set; }
    public List`1<string> AppliedMigrations { get; private set; }
    public DBMS DBMS { get; }
    public Evolve(DbConnection dbConnection, Action`1<string> logDelegate, Nullable`1<DBMS> dbms);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Schemas();
    [CompilerGeneratedAttribute]
public void set_Schemas(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual CommandOptions get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(CommandOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEraseDisabled();
    [CompilerGeneratedAttribute]
public void set_IsEraseDisabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MustEraseOnValidationError();
    [CompilerGeneratedAttribute]
public void set_MustEraseOnValidationError(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Locations();
    [CompilerGeneratedAttribute]
public void set_Locations(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MetadataTableName();
    [CompilerGeneratedAttribute]
public void set_MetadataTableName(string value);
    public sealed virtual string get_MetadataTableSchema();
    public void set_MetadataTableSchema(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PlaceholderPrefix();
    [CompilerGeneratedAttribute]
public void set_PlaceholderPrefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PlaceholderSuffix();
    [CompilerGeneratedAttribute]
public void set_PlaceholderSuffix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Placeholders();
    [CompilerGeneratedAttribute]
public void set_Placeholders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SqlMigrationPrefix();
    [CompilerGeneratedAttribute]
public void set_SqlMigrationPrefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SqlRepeatableMigrationPrefix();
    [CompilerGeneratedAttribute]
public void set_SqlRepeatableMigrationPrefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SqlMigrationSeparator();
    [CompilerGeneratedAttribute]
public void set_SqlMigrationSeparator(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SqlMigrationSuffix();
    [CompilerGeneratedAttribute]
public void set_SqlMigrationSuffix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MigrationVersion get_TargetVersion();
    [CompilerGeneratedAttribute]
public void set_TargetVersion(MigrationVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual MigrationVersion get_StartVersion();
    [CompilerGeneratedAttribute]
public void set_StartVersion(MigrationVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableClusterMode();
    [CompilerGeneratedAttribute]
public void set_EnableClusterMode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OutOfOrder();
    [CompilerGeneratedAttribute]
public void set_OutOfOrder(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_AmbientTransactionTimeout();
    [CompilerGeneratedAttribute]
public void set_AmbientTransactionTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Assembly> get_EmbeddedResourceAssemblies();
    [CompilerGeneratedAttribute]
public void set_EmbeddedResourceAssemblies(IEnumerable`1<Assembly> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_EmbeddedResourceFilters();
    [CompilerGeneratedAttribute]
public void set_EmbeddedResourceFilters(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RetryRepeatableMigrationsUntilNoError();
    [CompilerGeneratedAttribute]
public void set_RetryRepeatableMigrationsUntilNoError(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TransactionKind get_TransactionMode();
    [CompilerGeneratedAttribute]
public void set_TransactionMode(TransactionKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipNextMigrations();
    [CompilerGeneratedAttribute]
public void set_SkipNextMigrations(bool value);
    public sealed virtual IMigrationLoader get_MigrationLoader();
    public void set_MigrationLoader(IMigrationLoader value);
    public IEvolveConfiguration get_Options();
    [CompilerGeneratedAttribute]
public int get_NbMigration();
    [CompilerGeneratedAttribute]
private void set_NbMigration(int value);
    [CompilerGeneratedAttribute]
public int get_NbReparation();
    [CompilerGeneratedAttribute]
private void set_NbReparation(int value);
    [CompilerGeneratedAttribute]
public int get_NbSchemaErased();
    [CompilerGeneratedAttribute]
private void set_NbSchemaErased(int value);
    [CompilerGeneratedAttribute]
public int get_NbSchemaToEraseSkipped();
    [CompilerGeneratedAttribute]
private void set_NbSchemaToEraseSkipped(int value);
    [CompilerGeneratedAttribute]
public long get_TotalTimeElapsedInMs();
    [CompilerGeneratedAttribute]
private void set_TotalTimeElapsedInMs(long value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AppliedMigrations();
    [CompilerGeneratedAttribute]
private void set_AppliedMigrations(List`1<string> value);
    [CompilerGeneratedAttribute]
public DBMS get_DBMS();
    public void ExecuteCommand();
    public void Validate();
    public IEnumerable`1<MigrationMetadataUI> Info();
    private IEnumerable`1<MigrationMetadata> GetAllExecutedMigration(IEvolveMetadata metadata);
    public void Migrate();
    private void InternalMigrate(DatabaseHelper db);
    private static void ConfigureTransactionTimeoutCore(TimeSpan timeout);
    private void ExecuteAllOutOfOrderMigration(DatabaseHelper db);
    private MigrationVersion ExecuteAllMigration(DatabaseHelper db);
    private IEnumerable`1<MigrationScript> GetAllPendingMigration(MigrationVersion startVersion, MigrationVersion lastAppliedVersion);
    private IEnumerable`1<MigrationScript> GetAllOutOfOrderPendingMigration(IEvolveMetadata metadata, MigrationVersion startVersion, MigrationVersion lastAppliedVersion);
    private void ExecuteAllRepeatableMigration(DatabaseHelper db);
    private IEnumerable`1<MigrationScript> GetAllPendingRepeatableMigration(IEvolveMetadata metadata, bool excludeRepeatAlways);
    public void Repair();
    public void Erase();
    private void InternalErase(DatabaseHelper db);
    private void InternalExecuteCommand(Action`1<DatabaseHelper> commandAction);
    private void ExecuteMigration(MigrationScript migration, DatabaseHelper db);
    private void SkipMigration(MigrationScript migration, DatabaseHelper db);
    private void LogRollbackAppliedMigration();
    private DatabaseHelper InitiateDatabaseConnection();
    private void WaitForApplicationLock(DatabaseHelper db);
    private void WaitForMetadataTableLock(DatabaseHelper db);
    private void ManageSchemas(DatabaseHelper db);
    private void ManageStartVersion(DatabaseHelper db);
    private void ValidateAndRepairMetadata(DatabaseHelper db);
    internal IEnumerable`1<string> FindSchemas();
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<MigrationMetadataUI> <Info>g__GetAllBeforeFirstMigrationUI|142_3(IEvolveMetadata metadata);
    [CompilerGeneratedAttribute]
private void <Migrate>b__144_0(DatabaseHelper db);
    [CompilerGeneratedAttribute]
private MigrationVersion <InternalMigrate>g__Migrate|145_0(<>c__DisplayClass145_0& );
    [CompilerGeneratedAttribute]
internal static void <ConfigureTransactionTimeoutCore>g__SetTransactionManagerField|146_0(string fieldName, object value);
    [CompilerGeneratedAttribute]
private void <Repair>b__153_0(DatabaseHelper db);
    [CompilerGeneratedAttribute]
private void <Erase>b__154_0(DatabaseHelper db);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EvolveDb.EvolveConfigurationException : EvolveException {
    public EvolveConfigurationException(string message);
    public EvolveConfigurationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EvolveDb.EvolveException : Exception {
    public EvolveException(string message);
    public EvolveException(string message, Exception innerEx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EvolveDb.EvolveSqlException : EvolveException {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    public string Sql { get; }
    public EvolveSqlException(string sql, Exception innerEx);
    [CompilerGeneratedAttribute]
public string get_Sql();
}
public class EvolveDb.EvolveValidationException : EvolveException {
    [NullableContextAttribute("1")]
public EvolveValidationException(string message);
}
[NullableContextAttribute("1")]
internal interface EvolveDb.Metadata.IEvolveMetadata {
    public abstract virtual bool TryLock();
    public abstract virtual bool ReleaseLock();
    public abstract virtual bool IsExists();
    public abstract virtual bool CreateIfNotExists();
    public abstract virtual void SaveMigration(MigrationScript migration, bool success, Nullable`1<TimeSpan> elapsed);
    public abstract virtual void Save(MetadataType type, string version, string description, string name);
    public abstract virtual void UpdateChecksum(int migrationId, string checksum);
    public abstract virtual IEnumerable`1<MigrationMetadata> GetAllMetadata();
    public abstract virtual IEnumerable`1<MigrationMetadata> GetAllAppliedMigration();
    public abstract virtual IEnumerable`1<MigrationMetadata> GetAllAppliedRepeatableMigration();
    public abstract virtual bool CanDropSchema(string schemaName);
    public abstract virtual bool CanEraseSchema(string schemaName);
    public abstract virtual MigrationVersion FindStartVersion();
    public abstract virtual MigrationVersion FindLastAppliedVersion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class EvolveDb.Metadata.MetadataTable : object {
    protected static string MigrationMetadataTypeNotSupported;
    protected DatabaseHelper _database;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public string Schema { get; }
    public string TableName { get; }
    public MetadataTable(string schema, string tableName, DatabaseHelper database);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public string get_TableName();
    public sealed virtual bool CreateIfNotExists();
    public sealed virtual void SaveMigration(MigrationScript migration, bool success, Nullable`1<TimeSpan> elapsed);
    public sealed virtual void Save(MetadataType type, string version, string description, string name);
    public sealed virtual void UpdateChecksum(int migrationId, string checksum);
    public sealed virtual IEnumerable`1<MigrationMetadata> GetAllMetadata();
    public sealed virtual IEnumerable`1<MigrationMetadata> GetAllAppliedMigration();
    public sealed virtual MigrationVersion FindLastAppliedVersion();
    public sealed virtual IEnumerable`1<MigrationMetadata> GetAllAppliedRepeatableMigration();
    public sealed virtual bool CanDropSchema(string schemaName);
    public sealed virtual bool CanEraseSchema(string schemaName);
    public sealed virtual MigrationVersion FindStartVersion();
    public sealed virtual bool TryLock();
    public sealed virtual bool ReleaseLock();
    public sealed virtual bool IsExists();
    protected abstract virtual bool InternalIsExists();
    protected void Create();
    protected abstract virtual void InternalCreate();
    protected abstract virtual bool InternalTryLock();
    protected abstract virtual bool InternalReleaseLock();
    protected abstract virtual void InternalSave(MigrationMetadata metadata);
    protected abstract virtual void InternalUpdateChecksum(int migrationId, string checksum);
    protected abstract virtual IEnumerable`1<MigrationMetadata> InternalGetAllMetadata();
    private bool InternalCreateIfNotExists();
    private void Execute(Action action, bool createIfNotExists);
    private T Execute(Func`1<T> func, bool createIfNotExists);
    [CompilerGeneratedAttribute]
private bool <CreateIfNotExists>b__9_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<MigrationMetadata> <GetAllMetadata>b__13_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private List`1<MigrationMetadata> <GetAllAppliedMigration>b__14_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private MigrationVersion <FindLastAppliedVersion>b__15_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private List`1<MigrationMetadata> <GetAllAppliedRepeatableMigration>b__16_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private MigrationVersion <FindStartVersion>b__19_0();
    [CompilerGeneratedAttribute]
private bool <TryLock>b__20_0();
    [CompilerGeneratedAttribute]
private bool <ReleaseLock>b__21_0();
    [CompilerGeneratedAttribute]
private bool <IsExists>b__22_0();
    [CompilerGeneratedAttribute]
private void <Create>b__24_0();
}
public enum EvolveDb.Metadata.MetadataType : Enum {
    public int value__;
    public static MetadataType Migration;
    public static MetadataType NewSchema;
    public static MetadataType EmptySchema;
    public static MetadataType StartVersion;
    public static MetadataType RepeatableMigration;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EvolveDb.MetadataEx : object {
    [ExtensionAttribute]
public static bool IsEvolveInitialized(IEvolveMetadata metadata);
    [ExtensionAttribute]
public static bool IsEmptySchemaMetadataExists(IEvolveMetadata metadata, string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EvolveDb.Migration.EmbeddedResourceMigrationLoader : object {
    private static string InvalidEmbeddedResourceFormat;
    protected IEvolveConfiguration _options;
    public EmbeddedResourceMigrationLoader(IEvolveConfiguration& options);
    public virtual IEnumerable`1<MigrationScript> GetMigrations();
    public virtual IEnumerable`1<MigrationScript> GetRepeatableMigrations();
    private static string GetFileName(string resource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Migration.EmbeddedResourceMigrationScript : MigrationScript {
    private static string IncorrectMigrationType;
    public EmbeddedResourceMigrationScript(string version, string description, string name, Stream content, MetadataType type, Encoding encoding);
    private static string ReadContent(Stream content, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EvolveDb.Migration.FileMigrationLoader : object {
    private static string InvalidMigrationScriptLocation;
    protected IEvolveConfiguration _options;
    public FileMigrationLoader(IEvolveConfiguration& options);
    public virtual IEnumerable`1<MigrationScript> GetMigrations();
    public virtual IEnumerable`1<MigrationScript> GetRepeatableMigrations();
    private static DirectoryInfo ResolveDirectory(string location);
    [IteratorStateMachineAttribute("EvolveDb.Migration.FileMigrationLoader/<GetNotHiddenFilesRecursive>d__6")]
private IEnumerable`1<FileInfo> GetNotHiddenFilesRecursive(DirectoryInfo dir, string pattern);
    [CompilerGeneratedAttribute]
internal static bool <GetNotHiddenFilesRecursive>g__NotHiddenOrSystem|6_3(FileAttributes attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class EvolveDb.Migration.FileMigrationScript : MigrationScript {
    private static string IncorrectMigrationType;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public string Path { get; }
    public Encoding Encoding { get; }
    public FileMigrationScript(string path, string version, string description, MetadataType type, Encoding encoding);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [NullableContextAttribute("2")]
public virtual void ValidateChecksum(string checksum);
    private string FallbackCheck();
}
[NullableContextAttribute("1")]
public interface EvolveDb.Migration.IMigrationLoader {
    public abstract virtual IEnumerable`1<MigrationScript> GetMigrations();
    public abstract virtual IEnumerable`1<MigrationScript> GetRepeatableMigrations();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class EvolveDb.Migration.MigrationBase : object {
    [NullableAttribute("1")]
private static string InvalidObjectType;
    [CompilerGeneratedAttribute]
private MigrationVersion <Version>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataType <Type>k__BackingField;
    public MigrationVersion Version { get; }
    [NullableAttribute("1")]
public string Description { get; }
    [NullableAttribute("1")]
public string Name { get; }
    public MetadataType Type { get; }
    [NullableContextAttribute("1")]
protected MigrationBase(string version, string description, string name, MetadataType type);
    [CompilerGeneratedAttribute]
public MigrationVersion get_Version();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public MetadataType get_Type();
    public sealed virtual int CompareTo(MigrationBase other);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public static bool op_Equality(MigrationBase operand1, MigrationBase operand2);
    public static bool op_Inequality(MigrationBase operand1, MigrationBase operand2);
    public static bool op_GreaterThan(MigrationBase operand1, MigrationBase operand2);
    public static bool op_LessThan(MigrationBase operand1, MigrationBase operand2);
    public static bool op_GreaterThanOrEqual(MigrationBase operand1, MigrationBase operand2);
    public static bool op_LessThanOrEqual(MigrationBase operand1, MigrationBase operand2);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class EvolveDb.Migration.MigrationMetadata : MigrationBase {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <InstalledOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public int Id { get; public set; }
    public string Checksum { get; public set; }
    public string InstalledBy { get; public set; }
    public DateTime InstalledOn { get; public set; }
    public bool Success { get; public set; }
    [NullableContextAttribute("1")]
public MigrationMetadata(string version, string description, string name, MetadataType type);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public string get_InstalledBy();
    [CompilerGeneratedAttribute]
public void set_InstalledBy(string value);
    [CompilerGeneratedAttribute]
public DateTime get_InstalledOn();
    [CompilerGeneratedAttribute]
public void set_InstalledOn(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class EvolveDb.Migration.MigrationMetadataUI : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <InstalledOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    public Nullable`1<int> Id { get; public set; }
    public string Version { get; public set; }
    public string Category { get; public set; }
    public string Description { get; public set; }
    public string InstalledBy { get; public set; }
    public Nullable`1<DateTime> InstalledOn { get; public set; }
    public Nullable`1<bool> Success { get; public set; }
    public string Checksum { get; public set; }
    [NullableContextAttribute("1")]
public MigrationMetadataUI(string version, string description, string category);
    [NullableContextAttribute("1")]
internal MigrationMetadataUI(MigrationMetadata migration);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_InstalledBy();
    [CompilerGeneratedAttribute]
public void set_InstalledBy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_InstalledOn();
    [CompilerGeneratedAttribute]
public void set_InstalledOn(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class EvolveDb.Migration.MigrationScript : MigrationBase {
    private static string IncorrectMigrationChecksum;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; }
    public bool IsTransactionEnabled { get; }
    public bool MustRepeatAlways { get; }
    protected MigrationScript(string version, string description, string name, string content, MetadataType type);
    [CompilerGeneratedAttribute]
public string get_Content();
    public virtual bool get_IsTransactionEnabled();
    public virtual bool get_MustRepeatAlways();
    [NullableContextAttribute("2")]
public virtual void ValidateChecksum(string checksum);
    public virtual string CalculateChecksum();
    protected static string NormalizeLineEndings(string str);
    private bool OptionExists(string option);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EvolveDb.Migration.MigrationVersion : object {
    private static string InvalidObjectType;
    private static string InvalidVersionPatternMatching;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<long> <VersionParts>k__BackingField;
    public static Regex MatchPattern { get; }
    public string Label { get; }
    public List`1<long> VersionParts { get; public set; }
    public static MigrationVersion MinVersion { get; }
    public static MigrationVersion MaxVersion { get; }
    public MigrationVersion(string version);
    public static Regex get_MatchPattern();
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public List`1<long> get_VersionParts();
    [CompilerGeneratedAttribute]
public void set_VersionParts(List`1<long> value);
    public static MigrationVersion get_MinVersion();
    public static MigrationVersion get_MaxVersion();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(MigrationVersion other);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public static bool op_Equality(MigrationVersion operand1, MigrationVersion operand2);
    [NullableContextAttribute("2")]
public static bool op_Inequality(MigrationVersion operand1, MigrationVersion operand2);
    [NullableContextAttribute("2")]
public static bool op_GreaterThan(MigrationVersion operand1, MigrationVersion operand2);
    [NullableContextAttribute("2")]
public static bool op_LessThan(MigrationVersion operand1, MigrationVersion operand2);
    [NullableContextAttribute("2")]
public static bool op_GreaterThanOrEqual(MigrationVersion operand1, MigrationVersion operand2);
    [NullableContextAttribute("2")]
public static bool op_LessThanOrEqual(MigrationVersion operand1, MigrationVersion operand2);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EvolveDb.MiscEx : object {
    [ExtensionAttribute]
public static string TruncateWithEllipsis(string s, int maxLength);
    [ExtensionAttribute]
public static string NormalizeSqlString(string s, int maxLength);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string s);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TV GetValue(IDictionary`2<TK, TV> dict, TK key, TV defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class EvolveDb.Utilities.Check : object {
    private static string ArgumentIsEmpty;
    private static string CollectionArgumentHasNullElement;
    private static string FileNotFound;
    public static string NotNullOrEmpty(string text, string parameterName);
    public static T NotNull(T reference, string parameterName);
    public static IEnumerable`1<T> HasNoNulls(IEnumerable`1<T> enumerable, string parameterName);
    public static string FileExists(string filePath, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EvolveDb.Utilities.MigrationUtil : object {
    private static string MigrationNamePrefixNotFound;
    private static string MigrationNameSeparatorNotFound;
    private static string MigrationNameVersionNotFound;
    private static string MigrationNameDescriptionNotFound;
    private static string DuplicateMigrationScriptVersion;
    private static string DuplicateRepeatableMigrationScript;
    public static void ExtractVersionAndDescription(string script, string prefix, string separator, String& version, String& description);
    public static void ExtractDescription(string script, string prefix, string separator, String& description);
    private static void ExtractVersionAndDescription(string script, string prefix, string separator, String& version, String& description, bool throwIfNoVersion);
    [ExtensionAttribute]
public static IEnumerable`1<MigrationBase> CheckForDuplicateVersion(IEnumerable`1<MigrationBase> migrations);
    [ExtensionAttribute]
public static IEnumerable`1<MigrationBase> CheckForDuplicateName(IEnumerable`1<MigrationBase> migrations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class EvolveDb.WrappedConnectionEx : object {
    private static string DBMSNotSupported;
    [ExtensionAttribute]
public static DBMS GetDatabaseServerType(WrappedConnection wrappedConnection);
    [ExtensionAttribute]
public static bool TryBeginTransaction(WrappedConnection wrappedConnection);
    [ExtensionAttribute]
public static bool TryCommit(WrappedConnection wrappedConnection);
    [ExtensionAttribute]
public static bool TryRollback(WrappedConnection wrappedConnection);
    [ExtensionAttribute]
public static long QueryForLong(WrappedConnection wrappedConnection, string sql);
    [ExtensionAttribute]
public static string QueryForString(WrappedConnection wrappedConnection, string sql);
    [ExtensionAttribute]
public static bool QueryForBool(WrappedConnection wrappedConnection, string sql);
    [ExtensionAttribute]
public static T Query(WrappedConnection wrappedConnection, string sql);
    [ExtensionAttribute]
public static IEnumerable`1<string> QueryForListOfString(WrappedConnection wrappedConnection, string sql);
    [ExtensionAttribute]
public static IEnumerable`1<T> QueryForList(WrappedConnection wrappedConnection, string sql, Func`2<IDataReader, T> map);
    [ExtensionAttribute]
public static int ExecuteNonQuery(WrappedConnection wrappedConnection, string sql, Nullable`1<int> commandTimeout);
    [ExtensionAttribute]
public static T ExecuteDbCommand(WrappedConnection wrappedConnection, string sql, Action`1<IDbCommand> setupDbCommand, Func`2<IDbCommand, T> query);
    private static T Execute(WrappedConnection wrappedConnection, string sql, Func`2<IDbCommand, T> query, Action`1<IDbCommand> setupDbCommand);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class SimpleJSON.JSON : object {
    public static JSONNode Parse(string aJSON);
}
[DefaultMemberAttribute("Item")]
internal class SimpleJSON.JSONArray : JSONNode {
    private List`1<JSONNode> m_List;
    private bool inline;
    public bool Inline { get; public set; }
    public JSONNodeType Tag { get; }
    public bool IsArray { get; }
    public JSONNode Item { get; public set; }
    public JSONNode Item { get; public set; }
    public int Count { get; }
    public IEnumerable`1<JSONNode> Children { get; }
    public virtual bool get_Inline();
    public virtual void set_Inline(bool value);
    public virtual JSONNodeType get_Tag();
    public virtual bool get_IsArray();
    public virtual Enumerator GetEnumerator();
    public virtual JSONNode get_Item(int aIndex);
    public virtual void set_Item(int aIndex, JSONNode value);
    public virtual JSONNode get_Item(string aKey);
    public virtual void set_Item(string aKey, JSONNode value);
    public virtual int get_Count();
    public virtual void Add(string aKey, JSONNode aItem);
    public virtual JSONNode Remove(int aIndex);
    public virtual JSONNode Remove(JSONNode aNode);
    [IteratorStateMachineAttribute("SimpleJSON.JSONArray/<get_Children>d__22")]
public virtual IEnumerable`1<JSONNode> get_Children();
    internal virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
}
internal class SimpleJSON.JSONBool : JSONNode {
    private bool m_Data;
    public JSONNodeType Tag { get; }
    public bool IsBoolean { get; }
    public string Value { get; public set; }
    public bool AsBool { get; public set; }
    public JSONBool(bool aData);
    public JSONBool(string aData);
    public virtual JSONNodeType get_Tag();
    public virtual bool get_IsBoolean();
    public virtual Enumerator GetEnumerator();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_AsBool();
    public virtual void set_AsBool(bool value);
    internal virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class SimpleJSON.JSONLazyCreator : JSONNode {
    private JSONNode m_Node;
    private string m_Key;
    public JSONNodeType Tag { get; }
    public JSONNode Item { get; public set; }
    public JSONNode Item { get; public set; }
    public int AsInt { get; public set; }
    public float AsFloat { get; public set; }
    public double AsDouble { get; public set; }
    public long AsLong { get; public set; }
    public bool AsBool { get; public set; }
    public JSONArray AsArray { get; }
    public JSONObject AsObject { get; }
    public JSONLazyCreator(JSONNode aNode);
    public JSONLazyCreator(JSONNode aNode, string aKey);
    public virtual JSONNodeType get_Tag();
    public virtual Enumerator GetEnumerator();
    private T Set(T aVal);
    public virtual JSONNode get_Item(int aIndex);
    public virtual void set_Item(int aIndex, JSONNode value);
    public virtual JSONNode get_Item(string aKey);
    public virtual void set_Item(string aKey, JSONNode value);
    public virtual void Add(JSONNode aItem);
    public virtual void Add(string aKey, JSONNode aItem);
    public static bool op_Equality(JSONLazyCreator a, object b);
    public static bool op_Inequality(JSONLazyCreator a, object b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual int get_AsInt();
    public virtual void set_AsInt(int value);
    public virtual float get_AsFloat();
    public virtual void set_AsFloat(float value);
    public virtual double get_AsDouble();
    public virtual void set_AsDouble(double value);
    public virtual long get_AsLong();
    public virtual void set_AsLong(long value);
    public virtual bool get_AsBool();
    public virtual void set_AsBool(bool value);
    public virtual JSONArray get_AsArray();
    public virtual JSONObject get_AsObject();
    internal virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
}
[DefaultMemberAttribute("Item")]
internal abstract class SimpleJSON.JSONNode : object {
    public static bool forceASCII;
    public static bool longAsString;
    public static bool allowLineComments;
    [ThreadStaticAttribute]
private static StringBuilder m_EscapeBuilder;
    public JSONNodeType Tag { get; }
    public JSONNode Item { get; public set; }
    public JSONNode Item { get; public set; }
    public string Value { get; public set; }
    public int Count { get; }
    public bool IsNumber { get; }
    public bool IsString { get; }
    public bool IsBoolean { get; }
    public bool IsNull { get; }
    public bool IsArray { get; }
    public bool IsObject { get; }
    public bool Inline { get; public set; }
    public IEnumerable`1<JSONNode> Children { get; }
    public IEnumerable`1<JSONNode> DeepChildren { get; }
    public IEnumerable`1<KeyValuePair`2<string, JSONNode>> Linq { get; }
    public KeyEnumerator Keys { get; }
    public ValueEnumerator Values { get; }
    public double AsDouble { get; public set; }
    public int AsInt { get; public set; }
    public float AsFloat { get; public set; }
    public bool AsBool { get; public set; }
    public long AsLong { get; public set; }
    public JSONArray AsArray { get; }
    public JSONObject AsObject { get; }
    internal static StringBuilder EscapeBuilder { get; }
    private static JSONNode();
    public abstract virtual JSONNodeType get_Tag();
    public virtual JSONNode get_Item(int aIndex);
    public virtual void set_Item(int aIndex, JSONNode value);
    public virtual JSONNode get_Item(string aKey);
    public virtual void set_Item(string aKey, JSONNode value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual int get_Count();
    public virtual bool get_IsNumber();
    public virtual bool get_IsString();
    public virtual bool get_IsBoolean();
    public virtual bool get_IsNull();
    public virtual bool get_IsArray();
    public virtual bool get_IsObject();
    public virtual bool get_Inline();
    public virtual void set_Inline(bool value);
    public virtual void Add(string aKey, JSONNode aItem);
    public virtual void Add(JSONNode aItem);
    public virtual JSONNode Remove(string aKey);
    public virtual JSONNode Remove(int aIndex);
    public virtual JSONNode Remove(JSONNode aNode);
    [IteratorStateMachineAttribute("SimpleJSON.JSONNode/<get_Children>d__41")]
public virtual IEnumerable`1<JSONNode> get_Children();
    [IteratorStateMachineAttribute("SimpleJSON.JSONNode/<get_DeepChildren>d__43")]
public IEnumerable`1<JSONNode> get_DeepChildren();
    public virtual bool HasKey(string aKey);
    public virtual JSONNode GetValueOrDefault(string aKey, JSONNode aDefault);
    public virtual string ToString();
    public virtual string ToString(int aIndent);
    internal abstract virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
    public abstract virtual Enumerator GetEnumerator();
    public IEnumerable`1<KeyValuePair`2<string, JSONNode>> get_Linq();
    public KeyEnumerator get_Keys();
    public ValueEnumerator get_Values();
    public virtual double get_AsDouble();
    public virtual void set_AsDouble(double value);
    public virtual int get_AsInt();
    public virtual void set_AsInt(int value);
    public virtual float get_AsFloat();
    public virtual void set_AsFloat(float value);
    public virtual bool get_AsBool();
    public virtual void set_AsBool(bool value);
    public virtual long get_AsLong();
    public virtual void set_AsLong(long value);
    public virtual JSONArray get_AsArray();
    public virtual JSONObject get_AsObject();
    public static JSONNode op_Implicit(string s);
    public static string op_Implicit(JSONNode d);
    public static JSONNode op_Implicit(double n);
    public static double op_Implicit(JSONNode d);
    public static JSONNode op_Implicit(float n);
    public static float op_Implicit(JSONNode d);
    public static JSONNode op_Implicit(int n);
    public static int op_Implicit(JSONNode d);
    public static JSONNode op_Implicit(long n);
    public static long op_Implicit(JSONNode d);
    public static JSONNode op_Implicit(bool b);
    public static bool op_Implicit(JSONNode d);
    public static JSONNode op_Implicit(KeyValuePair`2<string, JSONNode> aKeyValue);
    public static bool op_Equality(JSONNode a, object b);
    public static bool op_Inequality(JSONNode a, object b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static StringBuilder get_EscapeBuilder();
    internal static string Escape(string aText);
    private static JSONNode ParseElement(string token, bool quoted);
    public static JSONNode Parse(string aJSON);
}
internal enum SimpleJSON.JSONNodeType : Enum {
    public int value__;
    public static JSONNodeType Array;
    public static JSONNodeType Object;
    public static JSONNodeType String;
    public static JSONNodeType Number;
    public static JSONNodeType NullValue;
    public static JSONNodeType Boolean;
    public static JSONNodeType None;
    public static JSONNodeType Custom;
}
internal class SimpleJSON.JSONNull : JSONNode {
    private static JSONNull m_StaticInstance;
    public static bool reuseSameInstance;
    public JSONNodeType Tag { get; }
    public bool IsNull { get; }
    public string Value { get; public set; }
    public bool AsBool { get; public set; }
    private static JSONNull();
    public static JSONNull CreateOrGet();
    public virtual JSONNodeType get_Tag();
    public virtual bool get_IsNull();
    public virtual Enumerator GetEnumerator();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_AsBool();
    public virtual void set_AsBool(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
}
internal class SimpleJSON.JSONNumber : JSONNode {
    private double m_Data;
    public JSONNodeType Tag { get; }
    public bool IsNumber { get; }
    public string Value { get; public set; }
    public double AsDouble { get; public set; }
    public long AsLong { get; public set; }
    public JSONNumber(double aData);
    public JSONNumber(string aData);
    public virtual JSONNodeType get_Tag();
    public virtual bool get_IsNumber();
    public virtual Enumerator GetEnumerator();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual double get_AsDouble();
    public virtual void set_AsDouble(double value);
    public virtual long get_AsLong();
    public virtual void set_AsLong(long value);
    internal virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
    private static bool IsNumeric(object value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class SimpleJSON.JSONObject : JSONNode {
    private Dictionary`2<string, JSONNode> m_Dict;
    private bool inline;
    public bool Inline { get; public set; }
    public JSONNodeType Tag { get; }
    public bool IsObject { get; }
    public JSONNode Item { get; public set; }
    public JSONNode Item { get; public set; }
    public int Count { get; }
    public IEnumerable`1<JSONNode> Children { get; }
    public virtual bool get_Inline();
    public virtual void set_Inline(bool value);
    public virtual JSONNodeType get_Tag();
    public virtual bool get_IsObject();
    public virtual Enumerator GetEnumerator();
    public virtual JSONNode get_Item(string aKey);
    public virtual void set_Item(string aKey, JSONNode value);
    public virtual JSONNode get_Item(int aIndex);
    public virtual void set_Item(int aIndex, JSONNode value);
    public virtual int get_Count();
    public virtual void Add(string aKey, JSONNode aItem);
    public virtual JSONNode Remove(string aKey);
    public virtual JSONNode Remove(int aIndex);
    public virtual JSONNode Remove(JSONNode aNode);
    public virtual bool HasKey(string aKey);
    public virtual JSONNode GetValueOrDefault(string aKey, JSONNode aDefault);
    [IteratorStateMachineAttribute("SimpleJSON.JSONObject/<get_Children>d__25")]
public virtual IEnumerable`1<JSONNode> get_Children();
    internal virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
}
internal class SimpleJSON.JSONString : JSONNode {
    private string m_Data;
    public JSONNodeType Tag { get; }
    public bool IsString { get; }
    public string Value { get; public set; }
    public JSONString(string aData);
    public virtual JSONNodeType get_Tag();
    public virtual bool get_IsString();
    public virtual Enumerator GetEnumerator();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal enum SimpleJSON.JSONTextMode : Enum {
    public int value__;
    public static JSONTextMode Compact;
    public static JSONTextMode Indent;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
