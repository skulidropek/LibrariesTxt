public abstract class Examine.BaseIndexProvider : object {
    private ILogger`1<BaseIndexProvider> _logger;
    private IndexOptions _indexOptions;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<IndexOperationEventArgs> IndexOperationComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<IndexingErrorEventArgs> IndexingError;
    [CompilerGeneratedAttribute]
private EventHandler`1<IndexingItemEventArgs> TransformingIndexValues;
    protected ILoggerFactory LoggerFactory { get; }
    public string Name { get; }
    public IValueSetValidator ValueSetValidator { get; }
    public ISearcher Searcher { get; }
    public ReadOnlyFieldDefinitionCollection FieldDefinitions { get; }
    protected BaseIndexProvider(ILoggerFactory loggerFactory, string name, IOptionsMonitor`1<IndexOptions> indexOptions);
    [CompilerGeneratedAttribute]
protected ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public IValueSetValidator get_ValueSetValidator();
    protected ValueSetValidationResult ValidateItem(ValueSet item);
    protected abstract virtual void PerformIndexItems(IEnumerable`1<ValueSet> values, Action`1<IndexOperationEventArgs> onComplete);
    protected abstract virtual void PerformDeleteFromIndex(IEnumerable`1<string> itemIds, Action`1<IndexOperationEventArgs> onComplete);
    public abstract virtual ISearcher get_Searcher();
    public sealed virtual void IndexItems(IEnumerable`1<ValueSet> values);
    public sealed virtual void DeleteFromIndex(IEnumerable`1<string> itemIds);
    public abstract virtual void CreateIndex();
    public sealed virtual ReadOnlyFieldDefinitionCollection get_FieldDefinitions();
    public abstract virtual bool IndexExists();
    [CompilerGeneratedAttribute]
public sealed virtual void add_IndexOperationComplete(EventHandler`1<IndexOperationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IndexOperationComplete(EventHandler`1<IndexOperationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_IndexingError(EventHandler`1<IndexingErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IndexingError(EventHandler`1<IndexingErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransformingIndexValues(EventHandler`1<IndexingItemEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransformingIndexValues(EventHandler`1<IndexingItemEventArgs> value);
    protected void OnIndexOperationComplete(IndexOperationEventArgs e);
    protected virtual void OnIndexingError(IndexingErrorEventArgs e);
    protected virtual void OnTransformingIndexValues(IndexingItemEventArgs e);
}
public abstract class Examine.BaseSearchProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    protected BaseSearchProvider(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public abstract virtual ISearchResults Search(string searchText, QueryOptions options);
    public abstract virtual IQuery CreateQuery(string category, BooleanOperation defaultOperation);
}
public abstract class Examine.DisposableObjectSlim : object {
    private object _locko;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    protected bool Disposed { get; private set; }
    [CompilerGeneratedAttribute]
protected bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected abstract virtual void DisposeResources();
}
public class Examine.EmptySearchResults : object {
    [CompilerGeneratedAttribute]
private static ISearchResults <Instance>k__BackingField;
    public static ISearchResults Instance { get; }
    public long TotalItemCount { get; }
    private static EmptySearchResults();
    [CompilerGeneratedAttribute]
public static ISearchResults get_Instance();
    public sealed virtual IEnumerator`1<ISearchResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual long get_TotalItemCount();
    public IEnumerable`1<ISearchResult> Skip(int skip);
    public IEnumerable`1<ISearchResult> SkipTake(int skip, Nullable`1<int> take);
}
[ExtensionAttribute]
public static class Examine.ExamineExtensions : object {
    [ExtensionAttribute]
public static T GetNamedOptions(IOptionsMonitor`1<T> optionsMonitor, string name);
    [ExtensionAttribute]
public static IIndex GetIndex(IExamineManager examineManager, string indexName);
    [ExtensionAttribute]
public static void DeleteFromIndex(IIndex index, string itemId);
    [ExtensionAttribute]
public static void IndexItem(IIndex index, ValueSet node);
}
public static class Examine.ExamineFieldNames : object {
    public static string SpecialFieldPrefix;
    public static string SortedFieldNamePrefix;
    public static string CategoryFieldName;
    public static string ItemIdFieldName;
    public static string ItemTypeFieldName;
}
public class Examine.ExamineManager : object {
    private ConcurrentDictionary`2<string, IIndex> _indexers;
    private ConcurrentDictionary`2<string, ISearcher> _searchers;
    private bool _disposed;
    public IEnumerable`1<ISearcher> RegisteredSearchers { get; }
    public IEnumerable`1<IIndex> Indexes { get; }
    public ExamineManager(IEnumerable`1<IIndex> indexes, IEnumerable`1<ISearcher> searchers);
    public sealed virtual bool TryGetSearcher(string searcherName, ISearcher& searcher);
    public sealed virtual bool TryGetIndex(string indexName, IIndex& index);
    public sealed virtual IEnumerable`1<ISearcher> get_RegisteredSearchers();
    public sealed virtual IEnumerable`1<IIndex> get_Indexes();
    private IIndex AddIndex(IIndex index);
    private ISearcher AddSearcher(ISearcher searcher);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Stop(bool immediate);
}
[IsReadOnlyAttribute]
public class Examine.FieldDefinition : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Name { get; }
    public string Type { get; }
    public FieldDefinition(string name, string type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Type();
    public sealed virtual bool Equals(FieldDefinition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FieldDefinition left, FieldDefinition right);
    public static bool op_Inequality(FieldDefinition left, FieldDefinition right);
}
public class Examine.FieldDefinitionCollection : ReadOnlyFieldDefinitionCollection {
    public FieldDefinitionCollection(FieldDefinition[] definitions);
    public FieldDefinition GetOrAdd(string fieldName, Func`2<string, FieldDefinition> add);
    public void AddOrUpdate(FieldDefinition definition);
    public bool TryAdd(FieldDefinition definition);
}
public static class Examine.FieldDefinitionTypes : object {
    public static string Integer;
    public static string Float;
    public static string Double;
    public static string Long;
    public static string DateTime;
    public static string DateYear;
    public static string DateMonth;
    public static string DateDay;
    public static string DateHour;
    public static string DateMinute;
    public static string Raw;
    public static string FullText;
    public static string FullTextSortable;
    public static string InvariantCultureIgnoreCase;
    public static string EmailAddress;
}
public interface Examine.IExamineManager {
    public IEnumerable`1<IIndex> Indexes { get; }
    public IEnumerable`1<ISearcher> RegisteredSearchers { get; }
    public abstract virtual IEnumerable`1<IIndex> get_Indexes();
    public abstract virtual IEnumerable`1<ISearcher> get_RegisteredSearchers();
    public abstract virtual void Dispose();
    public abstract virtual bool TryGetIndex(string indexName, IIndex& index);
    public abstract virtual bool TryGetSearcher(string searcherName, ISearcher& searcher);
}
public interface Examine.IIndex {
    public string Name { get; }
    public ISearcher Searcher { get; }
    public ReadOnlyFieldDefinitionCollection FieldDefinitions { get; }
    public abstract virtual string get_Name();
    public abstract virtual ISearcher get_Searcher();
    public abstract virtual void IndexItems(IEnumerable`1<ValueSet> values);
    public abstract virtual void DeleteFromIndex(IEnumerable`1<string> itemIds);
    public abstract virtual void CreateIndex();
    public abstract virtual ReadOnlyFieldDefinitionCollection get_FieldDefinitions();
    public abstract virtual bool IndexExists();
    [CompilerGeneratedAttribute]
public abstract virtual void add_IndexOperationComplete(EventHandler`1<IndexOperationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IndexOperationComplete(EventHandler`1<IndexOperationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransformingIndexValues(EventHandler`1<IndexingItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransformingIndexValues(EventHandler`1<IndexingItemEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_IndexingError(EventHandler`1<IndexingErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IndexingError(EventHandler`1<IndexingErrorEventArgs> value);
}
public interface Examine.IIndexStats {
    public abstract virtual long GetDocumentCount();
    public abstract virtual IEnumerable`1<string> GetFieldNames();
}
public class Examine.IndexingErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IIndex <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemId>k__BackingField;
    public Exception Exception { get; }
    public string Message { get; }
    public IIndex Index { get; }
    public string ItemId { get; }
    public IndexingErrorEventArgs(IIndex index, string message, string itemId, Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public IIndex get_Index();
    [CompilerGeneratedAttribute]
public string get_ItemId();
}
public class Examine.IndexingItemEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IIndex <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueSet <ValueSet>k__BackingField;
    public IIndex Index { get; }
    public ValueSet ValueSet { get; private set; }
    public IndexingItemEventArgs(IIndex index, ValueSet valueSet);
    [CompilerGeneratedAttribute]
public IIndex get_Index();
    [CompilerGeneratedAttribute]
public ValueSet get_ValueSet();
    [CompilerGeneratedAttribute]
private void set_ValueSet(ValueSet value);
    public void SetValues(IDictionary`2<string, IEnumerable`1<object>> values);
}
[IsReadOnlyAttribute]
public class Examine.IndexOperation : ValueType {
    [CompilerGeneratedAttribute]
private ValueSet <ValueSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexOperationType <Operation>k__BackingField;
    public ValueSet ValueSet { get; }
    public IndexOperationType Operation { get; }
    public IndexOperation(ValueSet valueSet, IndexOperationType operation);
    [CompilerGeneratedAttribute]
public ValueSet get_ValueSet();
    [CompilerGeneratedAttribute]
public IndexOperationType get_Operation();
}
public class Examine.IndexOperationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IIndex <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemsIndexed>k__BackingField;
    public IIndex Index { get; }
    public int ItemsIndexed { get; }
    public IndexOperationEventArgs(IIndex index, int itemsIndexed);
    [CompilerGeneratedAttribute]
public IIndex get_Index();
    [CompilerGeneratedAttribute]
public int get_ItemsIndexed();
}
public enum Examine.IndexOperationType : Enum {
    public int value__;
    public static IndexOperationType Add;
    public static IndexOperationType Delete;
}
public class Examine.IndexOptions : object {
    [CompilerGeneratedAttribute]
private FieldDefinitionCollection <FieldDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueSetValidator <Validator>k__BackingField;
    public FieldDefinitionCollection FieldDefinitions { get; public set; }
    public IValueSetValidator Validator { get; public set; }
    [CompilerGeneratedAttribute]
public FieldDefinitionCollection get_FieldDefinitions();
    [CompilerGeneratedAttribute]
public void set_FieldDefinitions(FieldDefinitionCollection value);
    [CompilerGeneratedAttribute]
public IValueSetValidator get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(IValueSetValidator value);
}
public interface Examine.ISearcher {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual ISearchResults Search(string searchText, QueryOptions options);
    public abstract virtual IQuery CreateQuery(string category, BooleanOperation defaultOperation);
}
[DefaultMemberAttribute("Item")]
public interface Examine.ISearchResult {
    public string Id { get; }
    public float Score { get; }
    public IReadOnlyDictionary`2<string, string> Values { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyList`1<string>> AllValues { get; }
    public KeyValuePair`2<string, string> Item { get; }
    public string Item { get; }
    public abstract virtual string get_Id();
    public abstract virtual float get_Score();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Values();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyList`1<string>> get_AllValues();
    public abstract virtual IEnumerable`1<string> GetValues(string key);
    public abstract virtual KeyValuePair`2<string, string> get_Item(int resultIndex);
    public abstract virtual string get_Item(string key);
}
public interface Examine.ISearchResults {
    public long TotalItemCount { get; }
    public abstract virtual long get_TotalItemCount();
}
public interface Examine.IValueSetValidator {
    public abstract virtual ValueSetValidationResult Validate(ValueSet valueSet);
}
public static class Examine.ObjectExtensions : object {
    public static IDictionary`2<string, object> ConvertObjectToDictionary(object o, String[] ignoreProperties);
}
public class Examine.OrderedDictionary`2 : KeyedCollection`2<TKey, KeyValuePair`2<TKey, TVal>> {
    private static ICollection`1<TKey> EmptyCollection;
    private static ICollection`1<TVal> EmptyValues;
    private TVal System.Collections.Generic.IReadOnlyDictionary<TKey,TVal>.Item { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TVal>.Keys { get; }
    private IEnumerable`1<TVal> System.Collections.Generic.IReadOnlyDictionary<TKey,TVal>.Values { get; }
    private TVal System.Collections.Generic.IDictionary<TKey,TVal>.Item { get; private set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TVal> Values { get; }
    public OrderedDictionary`2(IEqualityComparer`1<TKey> comparer);
    private static OrderedDictionary`2();
    public TVal GetItem(int index);
    public int IndexOf(TKey key);
    protected virtual TKey GetKeyForItem(KeyValuePair`2<TKey, TVal> item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void Add(TKey key, TVal value);
    public sealed virtual bool TryGetValue(TKey key, TVal& value);
    private sealed virtual override TVal System.Collections.Generic.IReadOnlyDictionary<TKey,TVal>.get_Item(TKey key);
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TVal>.get_Keys();
    private sealed virtual override IEnumerable`1<TVal> System.Collections.Generic.IReadOnlyDictionary<TKey,TVal>.get_Values();
    private sealed virtual override TVal System.Collections.Generic.IDictionary<TKey,TVal>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TVal>.set_Item(TKey key, TVal value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TVal> get_Values();
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TVal>.Remove(TKey key);
}
public class Examine.ReadOnlyFieldDefinitionCollection : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, FieldDefinition> <Definitions>k__BackingField;
    public int Count { get; }
    protected ConcurrentDictionary`2<string, FieldDefinition> Definitions { get; }
    public ReadOnlyFieldDefinitionCollection(FieldDefinition[] definitions);
    public ReadOnlyFieldDefinitionCollection(IEnumerable`1<FieldDefinition> definitions);
    public virtual bool TryGetValue(string fieldName, FieldDefinition& fieldDefinition);
    public int get_Count();
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<string, FieldDefinition> get_Definitions();
    public sealed virtual IEnumerator`1<FieldDefinition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Examine.Search.BooleanOperation : Enum {
    public int value__;
    public static BooleanOperation And;
    public static BooleanOperation Or;
    public static BooleanOperation Not;
}
public enum Examine.Search.Examineness : Enum {
    public int value__;
    public static Examineness Fuzzy;
    public static Examineness SimpleWildcard;
    public static Examineness ComplexWildcard;
    public static Examineness Explicit;
    public static Examineness Escaped;
    public static Examineness Boosted;
    public static Examineness Proximity;
}
[IsReadOnlyAttribute]
public class Examine.Search.ExamineValue : ValueType {
    [CompilerGeneratedAttribute]
private Examineness <Examineness>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Level>k__BackingField;
    public Examineness Examineness { get; }
    public string Value { get; }
    public float Level { get; }
    public ExamineValue(Examineness vagueness, string value);
    public ExamineValue(Examineness vagueness, string value, float level);
    [CompilerGeneratedAttribute]
public sealed virtual Examineness get_Examineness();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Level();
}
public interface Examine.Search.IBooleanOperation {
    public abstract virtual IQuery And();
    public abstract virtual IBooleanOperation And(Func`2<INestedQuery, INestedBooleanOperation> inner, BooleanOperation defaultOp);
    public abstract virtual IQuery Or();
    public abstract virtual IBooleanOperation Or(Func`2<INestedQuery, INestedBooleanOperation> inner, BooleanOperation defaultOp);
    public abstract virtual IQuery Not();
    public abstract virtual IBooleanOperation AndNot(Func`2<INestedQuery, INestedBooleanOperation> inner, BooleanOperation defaultOp);
}
public interface Examine.Search.IExamineValue {
    public Examineness Examineness { get; }
    public float Level { get; }
    public string Value { get; }
    public abstract virtual Examineness get_Examineness();
    public abstract virtual float get_Level();
    public abstract virtual string get_Value();
}
public interface Examine.Search.INestedBooleanOperation {
    public abstract virtual INestedQuery And();
    public abstract virtual INestedBooleanOperation And(Func`2<INestedQuery, INestedBooleanOperation> inner, BooleanOperation defaultOp);
    public abstract virtual INestedQuery Or();
    public abstract virtual INestedBooleanOperation Or(Func`2<INestedQuery, INestedBooleanOperation> inner, BooleanOperation defaultOp);
    public abstract virtual INestedQuery Not();
    public abstract virtual INestedBooleanOperation AndNot(Func`2<INestedQuery, INestedBooleanOperation> inner, BooleanOperation defaultOp);
}
public interface Examine.Search.INestedQuery {
    public abstract virtual INestedBooleanOperation Field(string fieldName, T fieldValue);
    public abstract virtual INestedBooleanOperation Field(string fieldName, string fieldValue);
    public abstract virtual INestedBooleanOperation Field(string fieldName, IExamineValue fieldValue);
    public abstract virtual INestedBooleanOperation GroupedAnd(IEnumerable`1<string> fields, String[] query);
    public abstract virtual INestedBooleanOperation GroupedAnd(IEnumerable`1<string> fields, IExamineValue[] query);
    public abstract virtual INestedBooleanOperation GroupedOr(IEnumerable`1<string> fields, String[] query);
    public abstract virtual INestedBooleanOperation GroupedOr(IEnumerable`1<string> fields, IExamineValue[] query);
    public abstract virtual INestedBooleanOperation GroupedNot(IEnumerable`1<string> fields, String[] query);
    public abstract virtual INestedBooleanOperation GroupedNot(IEnumerable`1<string> fields, IExamineValue[] query);
    public abstract virtual INestedBooleanOperation ManagedQuery(string query, String[] fields);
    public abstract virtual INestedBooleanOperation RangeQuery(String[] fields, Nullable`1<T> min, Nullable`1<T> max, bool minInclusive, bool maxInclusive);
}
public interface Examine.Search.IOrdering {
    public abstract virtual IOrdering OrderBy(SortableField[] fields);
    public abstract virtual IOrdering OrderByDescending(SortableField[] fields);
    public abstract virtual IOrdering SelectFields(ISet`1<string> fieldNames);
    public abstract virtual IOrdering SelectField(string fieldName);
    public abstract virtual IOrdering SelectAllFields();
}
public interface Examine.Search.IQuery {
    public abstract virtual IBooleanOperation NativeQuery(string query);
    public abstract virtual IBooleanOperation Group(Func`2<INestedQuery, INestedBooleanOperation> inner, BooleanOperation defaultOp);
    public abstract virtual IBooleanOperation Id(string id);
    public abstract virtual IBooleanOperation Field(string fieldName, T fieldValue);
    public abstract virtual IBooleanOperation Field(string fieldName, string fieldValue);
    public abstract virtual IBooleanOperation Field(string fieldName, IExamineValue fieldValue);
    public abstract virtual IBooleanOperation GroupedAnd(IEnumerable`1<string> fields, String[] query);
    public abstract virtual IBooleanOperation GroupedAnd(IEnumerable`1<string> fields, IExamineValue[] query);
    public abstract virtual IBooleanOperation GroupedOr(IEnumerable`1<string> fields, String[] query);
    public abstract virtual IBooleanOperation GroupedOr(IEnumerable`1<string> fields, IExamineValue[] query);
    public abstract virtual IBooleanOperation GroupedNot(IEnumerable`1<string> fields, String[] query);
    public abstract virtual IBooleanOperation GroupedNot(IEnumerable`1<string> fields, IExamineValue[] query);
    public abstract virtual IOrdering All();
    public abstract virtual IBooleanOperation ManagedQuery(string query, String[] fields);
    public abstract virtual IBooleanOperation RangeQuery(String[] fields, Nullable`1<T> min, Nullable`1<T> max, bool minInclusive, bool maxInclusive);
}
public interface Examine.Search.IQueryExecutor {
    public abstract virtual ISearchResults Execute(QueryOptions options);
}
public class Examine.Search.QueryOptions : object {
    public static int DefaultMaxResults;
    [CompilerGeneratedAttribute]
private static QueryOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Take>k__BackingField;
    public static QueryOptions Default { get; }
    public int Skip { get; }
    public int Take { get; }
    public QueryOptions(int skip, Nullable`1<int> take);
    private static QueryOptions();
    public static QueryOptions SkipTake(int skip, Nullable`1<int> take);
    [CompilerGeneratedAttribute]
public static QueryOptions get_Default();
    [CompilerGeneratedAttribute]
public int get_Skip();
    [CompilerGeneratedAttribute]
public int get_Take();
}
[IsReadOnlyAttribute]
public class Examine.Search.SortableField : ValueType {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private SortType <SortType>k__BackingField;
    public string FieldName { get; }
    public SortType SortType { get; }
    public SortableField(string fieldName);
    public SortableField(string fieldName, SortType sortType);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public SortType get_SortType();
}
public enum Examine.Search.SortType : Enum {
    public int value__;
    public static SortType Score;
    public static SortType DocumentOrder;
    public static SortType String;
    public static SortType Int;
    public static SortType Float;
    public static SortType Long;
    public static SortType Double;
}
[ExtensionAttribute]
public static class Examine.SearchExtensions : object {
    [ExtensionAttribute]
public static IExamineValue SingleCharacterWildcard(string s);
    [ExtensionAttribute]
public static IExamineValue MultipleCharacterWildcard(string s);
    [ExtensionAttribute]
public static IExamineValue Fuzzy(string s);
    [ExtensionAttribute]
public static IExamineValue Fuzzy(string s, float fuzzieness);
    [ExtensionAttribute]
public static IExamineValue Boost(string s, float boost);
    [ExtensionAttribute]
public static IExamineValue Proximity(string s, int proximity);
    [ExtensionAttribute]
public static IExamineValue Escape(string s);
}
[DefaultMemberAttribute("Item")]
public class Examine.SearchResult : object {
    private OrderedDictionary`2<string, string> _fields;
    private Lazy`1<OrderedDictionary`2<string, IReadOnlyList`1<string>>> _fieldValues;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Score>k__BackingField;
    public string Id { get; }
    public float Score { get; }
    public IReadOnlyDictionary`2<string, string> Values { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyList`1<string>> AllValues { get; }
    public KeyValuePair`2<string, string> Item { get; }
    public string Item { get; }
    public SearchResult(string id, float score, Func`1<IDictionary`2<string, List`1<string>>> lazyFieldVals);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Score();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_Values();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyList`1<string>> get_AllValues();
    public sealed virtual IEnumerable`1<string> GetValues(string key);
    public sealed virtual KeyValuePair`2<string, string> get_Item(int resultIndex);
    public sealed virtual string get_Item(string key);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Examine.ValueSet : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyList`1<object>> <Values>k__BackingField;
    public string Id { get; }
    public string Category { get; }
    public string ItemType { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyList`1<object>> Values { get; }
    public ValueSet(string id);
    public ValueSet(string id, string category, IDictionary`2<string, object> values);
    public ValueSet(string id, string category, string itemType, IDictionary`2<string, object> values);
    public ValueSet(string id, string category, IDictionary`2<string, IEnumerable`1<object>> values);
    public ValueSet(string id, string category, string itemType, IDictionary`2<string, IEnumerable`1<object>> values);
    private ValueSet(string id, string category, string itemType, IReadOnlyDictionary`2<string, IReadOnlyList`1<object>> values);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyList`1<object>> get_Values();
    public static ValueSet FromObject(string id, string category, string itemType, object values);
    public static ValueSet FromObject(string id, string category, object values);
    public IEnumerable`1<object> GetValues(string key);
    public object GetValue(string key);
    [IteratorStateMachineAttribute("Examine.ValueSet/<Yield>d__22")]
private static IEnumerable`1<object> Yield(object i);
    public ValueSet Clone();
}
[IsReadOnlyAttribute]
public class Examine.ValueSetValidationResult : ValueType {
    [CompilerGeneratedAttribute]
private ValueSetValidationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueSet <ValueSet>k__BackingField;
    public ValueSetValidationStatus Status { get; }
    public ValueSet ValueSet { get; }
    public ValueSetValidationResult(ValueSetValidationStatus status, ValueSet valueSet);
    [CompilerGeneratedAttribute]
public ValueSetValidationStatus get_Status();
    [CompilerGeneratedAttribute]
public ValueSet get_ValueSet();
}
public enum Examine.ValueSetValidationStatus : Enum {
    public int value__;
    public static ValueSetValidationStatus Valid;
    public static ValueSetValidationStatus Failed;
    public static ValueSetValidationStatus Filtered;
}
