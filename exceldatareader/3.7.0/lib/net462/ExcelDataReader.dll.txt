public enum ExcelDataReader.CellError : Enum {
    public byte value__;
    public static CellError NULL;
    public static CellError DIV0;
    public static CellError VALUE;
    public static CellError REF;
    public static CellError NAME;
    public static CellError NUM;
    public static CellError NA;
    public static CellError GETTING_DATA;
}
public class ExcelDataReader.CellRange : object {
    [CompilerGeneratedAttribute]
private int <FromColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToRow>k__BackingField;
    public int FromColumn { get; }
    public int FromRow { get; }
    public int ToColumn { get; }
    public int ToRow { get; }
    internal CellRange(string range);
    internal CellRange(int fromColumn, int fromRow, int toColumn, int toRow);
    [CompilerGeneratedAttribute]
public int get_FromColumn();
    [CompilerGeneratedAttribute]
public int get_FromRow();
    [CompilerGeneratedAttribute]
public int get_ToColumn();
    [CompilerGeneratedAttribute]
public int get_ToRow();
    public virtual string ToString();
}
public class ExcelDataReader.CellStyle : object {
    [CompilerGeneratedAttribute]
private int <FontIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberFormatIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    public int FontIndex { get; internal set; }
    public int NumberFormatIndex { get; internal set; }
    public int IndentLevel { get; internal set; }
    public HorizontalAlignment HorizontalAlignment { get; internal set; }
    public bool Hidden { get; internal set; }
    public bool Locked { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_FontIndex();
    [CompilerGeneratedAttribute]
internal void set_FontIndex(int value);
    [CompilerGeneratedAttribute]
public int get_NumberFormatIndex();
    [CompilerGeneratedAttribute]
internal void set_NumberFormatIndex(int value);
    [CompilerGeneratedAttribute]
public int get_IndentLevel();
    [CompilerGeneratedAttribute]
internal void set_IndentLevel(int value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
internal void set_HorizontalAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
internal void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
internal void set_Locked(bool value);
}
internal enum ExcelDataReader.Core.BinaryFormat.BIFFRECORDTYPE : Enum {
    public ushort value__;
    public static BIFFRECORDTYPE INTERFACEHDR;
    public static BIFFRECORDTYPE MMS;
    public static BIFFRECORDTYPE MERGECELLS;
    public static BIFFRECORDTYPE INTERFACEEND;
    public static BIFFRECORDTYPE WRITEACCESS;
    public static BIFFRECORDTYPE CODEPAGE;
    public static BIFFRECORDTYPE DSF;
    public static BIFFRECORDTYPE TABID;
    public static BIFFRECORDTYPE FNGROUPCOUNT;
    public static BIFFRECORDTYPE FILEPASS;
    public static BIFFRECORDTYPE WINDOWPROTECT;
    public static BIFFRECORDTYPE PROTECT;
    public static BIFFRECORDTYPE PASSWORD;
    public static BIFFRECORDTYPE PROT4REV;
    public static BIFFRECORDTYPE PROT4REVPASSWORD;
    public static BIFFRECORDTYPE WINDOW1;
    public static BIFFRECORDTYPE BACKUP;
    public static BIFFRECORDTYPE HIDEOBJ;
    public static BIFFRECORDTYPE RECORD1904;
    public static BIFFRECORDTYPE REFRESHALL;
    public static BIFFRECORDTYPE BOOKBOOL;
    public static BIFFRECORDTYPE FONT;
    public static BIFFRECORDTYPE FONT_V34;
    public static BIFFRECORDTYPE FORMAT;
    public static BIFFRECORDTYPE FORMAT_V23;
    public static BIFFRECORDTYPE XF;
    public static BIFFRECORDTYPE XF_V4;
    public static BIFFRECORDTYPE XF_V3;
    public static BIFFRECORDTYPE XF_V2;
    public static BIFFRECORDTYPE IXFE;
    public static BIFFRECORDTYPE STYLE;
    public static BIFFRECORDTYPE BOUNDSHEET;
    public static BIFFRECORDTYPE COUNTRY;
    public static BIFFRECORDTYPE SST;
    public static BIFFRECORDTYPE CONTINUE;
    public static BIFFRECORDTYPE EXTSST;
    public static BIFFRECORDTYPE BOF;
    public static BIFFRECORDTYPE BOF_V2;
    public static BIFFRECORDTYPE BOF_V3;
    public static BIFFRECORDTYPE BOF_V4;
    public static BIFFRECORDTYPE EOF;
    public static BIFFRECORDTYPE CALCCOUNT;
    public static BIFFRECORDTYPE CALCMODE;
    public static BIFFRECORDTYPE PRECISION;
    public static BIFFRECORDTYPE REFMODE;
    public static BIFFRECORDTYPE DELTA;
    public static BIFFRECORDTYPE ITERATION;
    public static BIFFRECORDTYPE SAVERECALC;
    public static BIFFRECORDTYPE PRINTHEADERS;
    public static BIFFRECORDTYPE PRINTGRIDLINES;
    public static BIFFRECORDTYPE GUTS;
    public static BIFFRECORDTYPE WSBOOL;
    public static BIFFRECORDTYPE GRIDSET;
    public static BIFFRECORDTYPE DEFAULTROWHEIGHT_V2;
    public static BIFFRECORDTYPE DEFAULTROWHEIGHT;
    public static BIFFRECORDTYPE HEADER;
    public static BIFFRECORDTYPE FOOTER;
    public static BIFFRECORDTYPE HCENTER;
    public static BIFFRECORDTYPE VCENTER;
    public static BIFFRECORDTYPE PRINTSETUP;
    public static BIFFRECORDTYPE DFAULTCOLWIDTH;
    public static BIFFRECORDTYPE DIMENSIONS;
    public static BIFFRECORDTYPE DIMENSIONS_V2;
    public static BIFFRECORDTYPE ROW_V2;
    public static BIFFRECORDTYPE ROW;
    public static BIFFRECORDTYPE WINDOW2;
    public static BIFFRECORDTYPE SELECTION;
    public static BIFFRECORDTYPE INDEX;
    public static BIFFRECORDTYPE DBCELL;
    public static BIFFRECORDTYPE BLANK;
    public static BIFFRECORDTYPE BLANK_OLD;
    public static BIFFRECORDTYPE MULBLANK;
    public static BIFFRECORDTYPE INTEGER;
    public static BIFFRECORDTYPE INTEGER_OLD;
    public static BIFFRECORDTYPE NUMBER;
    public static BIFFRECORDTYPE NUMBER_OLD;
    public static BIFFRECORDTYPE LABEL;
    public static BIFFRECORDTYPE LABEL_OLD;
    public static BIFFRECORDTYPE LABELSST;
    public static BIFFRECORDTYPE FORMULA;
    public static BIFFRECORDTYPE FORMULA_V3;
    public static BIFFRECORDTYPE FORMULA_V4;
    public static BIFFRECORDTYPE BOOLERR;
    public static BIFFRECORDTYPE BOOLERR_OLD;
    public static BIFFRECORDTYPE ARRAY;
    public static BIFFRECORDTYPE RK;
    public static BIFFRECORDTYPE MULRK;
    public static BIFFRECORDTYPE RSTRING;
    public static BIFFRECORDTYPE SHAREDFMLA;
    public static BIFFRECORDTYPE SHAREDFMLA_OLD;
    public static BIFFRECORDTYPE STRING;
    public static BIFFRECORDTYPE STRING_OLD;
    public static BIFFRECORDTYPE CF;
    public static BIFFRECORDTYPE CODENAME;
    public static BIFFRECORDTYPE CONDFMT;
    public static BIFFRECORDTYPE DCONBIN;
    public static BIFFRECORDTYPE DV;
    public static BIFFRECORDTYPE DVAL;
    public static BIFFRECORDTYPE HLINK;
    public static BIFFRECORDTYPE MSODRAWINGGROUP;
    public static BIFFRECORDTYPE MSODRAWING;
    public static BIFFRECORDTYPE MSODRAWINGSELECTION;
    public static BIFFRECORDTYPE PARAMQRY;
    public static BIFFRECORDTYPE QSI;
    public static BIFFRECORDTYPE SUPBOOK;
    public static BIFFRECORDTYPE SXDB;
    public static BIFFRECORDTYPE SXDBEX;
    public static BIFFRECORDTYPE SXFDBTYPE;
    public static BIFFRECORDTYPE SXRULE;
    public static BIFFRECORDTYPE SXEX;
    public static BIFFRECORDTYPE SXFILT;
    public static BIFFRECORDTYPE SXNAME;
    public static BIFFRECORDTYPE SXSELECT;
    public static BIFFRECORDTYPE SXPAIR;
    public static BIFFRECORDTYPE SXFMLA;
    public static BIFFRECORDTYPE SXFORMAT;
    public static BIFFRECORDTYPE SXFORMULA;
    public static BIFFRECORDTYPE SXVDEX;
    public static BIFFRECORDTYPE TXO;
    public static BIFFRECORDTYPE USERBVIEW;
    public static BIFFRECORDTYPE USERSVIEWBEGIN;
    public static BIFFRECORDTYPE USERSVIEWEND;
    public static BIFFRECORDTYPE USESELFS;
    public static BIFFRECORDTYPE XL5MODIFY;
    public static BIFFRECORDTYPE OBJ;
    public static BIFFRECORDTYPE NOTE;
    public static BIFFRECORDTYPE VERTICALPAGEBREAKS;
    public static BIFFRECORDTYPE XCT;
    public static BIFFRECORDTYPE UNCALCED;
    public static BIFFRECORDTYPE QUICKTIP;
    public static BIFFRECORDTYPE COLINFO;
}
internal enum ExcelDataReader.Core.BinaryFormat.BIFFTYPE : Enum {
    public ushort value__;
    public static BIFFTYPE WorkbookGlobals;
    public static BIFFTYPE VBModule;
    public static BIFFTYPE Worksheet;
    public static BIFFTYPE Chart;
    public static BIFFTYPE v4MacroSheet;
    public static BIFFTYPE v4WorkbookGlobals;
}
internal interface ExcelDataReader.Core.BinaryFormat.IXlsString {
    public abstract virtual string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffBlankCell : XlsBiffRecord {
    public bool IsEmpty { get; }
    public ushort RowIndex { get; }
    public ushort ColumnIndex { get; }
    public ushort XFormat { get; }
    public ushort Format { get; }
    public bool IsBiff2Cell { get; }
    internal XlsBiffBlankCell(Byte[] bytes);
    public virtual bool get_IsEmpty();
    public ushort get_RowIndex();
    public ushort get_ColumnIndex();
    public ushort get_XFormat();
    public ushort get_Format();
    public bool get_IsBiff2Cell();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffBOF : XlsBiffRecord {
    public ushort Version { get; }
    public BIFFTYPE Type { get; }
    public ushort CreationId { get; }
    public ushort CreationYear { get; }
    public UInt32 HistoryFlag { get; }
    public UInt32 MinVersionToOpen { get; }
    internal XlsBiffBOF(Byte[] bytes);
    public ushort get_Version();
    public BIFFTYPE get_Type();
    public ushort get_CreationId();
    public ushort get_CreationYear();
    public UInt32 get_HistoryFlag();
    public UInt32 get_MinVersionToOpen();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffBoundSheet : XlsBiffRecord {
    private IXlsString _sheetName;
    [CompilerGeneratedAttribute]
private UInt32 <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private SheetType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private SheetVisibility <VisibleState>k__BackingField;
    public UInt32 StartOffset { get; }
    public SheetType Type { get; }
    public SheetVisibility VisibleState { get; }
    internal XlsBiffBoundSheet(Byte[] bytes, int biffVersion);
    internal XlsBiffBoundSheet(UInt32 startOffset, SheetType type, SheetVisibility visibleState, string name);
    [CompilerGeneratedAttribute]
public UInt32 get_StartOffset();
    [CompilerGeneratedAttribute]
public SheetType get_Type();
    [CompilerGeneratedAttribute]
public SheetVisibility get_VisibleState();
    public string GetSheetName(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffCodeName : XlsBiffRecord {
    private XlsUnicodeString _xlsString;
    internal XlsBiffCodeName(Byte[] bytes);
    public string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffColInfo : XlsBiffRecord {
    [CompilerGeneratedAttribute]
private Column <Value>k__BackingField;
    public Column Value { get; }
    public XlsBiffColInfo(Byte[] bytes);
    [CompilerGeneratedAttribute]
public Column get_Value();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffContinue : XlsBiffRecord {
    internal XlsBiffContinue(Byte[] bytes);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffDefaultRowHeight : XlsBiffRecord {
    [CompilerGeneratedAttribute]
private int <RowHeight>k__BackingField;
    public int RowHeight { get; }
    public XlsBiffDefaultRowHeight(Byte[] bytes, int biffVersion);
    [CompilerGeneratedAttribute]
public int get_RowHeight();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffDimensions : XlsBiffRecord {
    [CompilerGeneratedAttribute]
private UInt32 <FirstRow>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LastRow>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FirstColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LastColumn>k__BackingField;
    public UInt32 FirstRow { get; }
    public UInt32 LastRow { get; }
    public ushort FirstColumn { get; }
    public ushort LastColumn { get; }
    internal XlsBiffDimensions(Byte[] bytes, int biffVersion);
    [CompilerGeneratedAttribute]
public UInt32 get_FirstRow();
    [CompilerGeneratedAttribute]
public UInt32 get_LastRow();
    [CompilerGeneratedAttribute]
public ushort get_FirstColumn();
    [CompilerGeneratedAttribute]
public ushort get_LastColumn();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffEof : XlsBiffRecord {
    internal XlsBiffEof(Byte[] bytes);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffFilePass : XlsBiffRecord {
    [CompilerGeneratedAttribute]
private EncryptionInfo <EncryptionInfo>k__BackingField;
    public EncryptionInfo EncryptionInfo { get; }
    internal XlsBiffFilePass(Byte[] bytes, int biffVersion);
    [CompilerGeneratedAttribute]
public EncryptionInfo get_EncryptionInfo();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffFont : XlsBiffRecord {
    private IXlsString _fontName;
    [CompilerGeneratedAttribute]
private Encoding <ByteStringEncoding>k__BackingField;
    public Encoding ByteStringEncoding { get; }
    internal XlsBiffFont(Byte[] bytes, int biffVersion);
    [CompilerGeneratedAttribute]
public Encoding get_ByteStringEncoding();
    public string GetFontName(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffFormatString : XlsBiffRecord {
    private IXlsString _xlsString;
    public ushort Index { get; }
    internal XlsBiffFormatString(Byte[] bytes, int biffVersion);
    public ushort get_Index();
    public string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffFormulaCell : XlsBiffBlankCell {
    private int _biffVersion;
    private bool _booleanValue;
    private CellError _errorValue;
    private double _xNumValue;
    private FormulaValueType _formulaType;
    private bool _initialized;
    public bool IsEmpty { get; }
    public FormulaValueType FormulaType { get; }
    public bool BooleanValue { get; }
    public CellError ErrorValue { get; }
    public double XNumValue { get; }
    internal XlsBiffFormulaCell(Byte[] bytes, int biffVersion);
    public virtual bool get_IsEmpty();
    public FormulaValueType get_FormulaType();
    public bool get_BooleanValue();
    public CellError get_ErrorValue();
    public double get_XNumValue();
    private void LazyInit();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffFormulaString : XlsBiffRecord {
    private IXlsString _xlsString;
    internal XlsBiffFormulaString(Byte[] bytes, int biffVersion);
    public string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffHeaderFooterString : XlsBiffRecord {
    private IXlsString _xlsString;
    internal XlsBiffHeaderFooterString(Byte[] bytes, int biffVersion);
    public string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffIntegerCell : XlsBiffBlankCell {
    public bool IsEmpty { get; }
    public int Value { get; }
    internal XlsBiffIntegerCell(Byte[] bytes);
    public virtual bool get_IsEmpty();
    public int get_Value();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffInterfaceHdr : XlsBiffRecord {
    public ushort CodePage { get; }
    internal XlsBiffInterfaceHdr(Byte[] bytes);
    public ushort get_CodePage();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffLabelCell : XlsBiffBlankCell {
    private IXlsString _xlsString;
    public bool IsEmpty { get; }
    internal XlsBiffLabelCell(Byte[] bytes, int biffVersion);
    public virtual bool get_IsEmpty();
    public string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffLabelSSTCell : XlsBiffBlankCell {
    public bool IsEmpty { get; }
    public UInt32 SSTIndex { get; }
    internal XlsBiffLabelSSTCell(Byte[] bytes);
    public virtual bool get_IsEmpty();
    public UInt32 get_SSTIndex();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffMergeCells : XlsBiffRecord {
    [CompilerGeneratedAttribute]
private List`1<CellRange> <MergeCells>k__BackingField;
    public List`1<CellRange> MergeCells { get; }
    public XlsBiffMergeCells(Byte[] bytes);
    [CompilerGeneratedAttribute]
public List`1<CellRange> get_MergeCells();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffMSODrawing : XlsBiffRecord {
    internal XlsBiffMSODrawing(Byte[] bytes);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffMulBlankCell : XlsBiffBlankCell {
    public bool IsEmpty { get; }
    public ushort LastColumnIndex { get; }
    internal XlsBiffMulBlankCell(Byte[] bytes);
    public virtual bool get_IsEmpty();
    public ushort get_LastColumnIndex();
    public ushort GetXF(ushort columnIdx);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffMulRKCell : XlsBiffBlankCell {
    public bool IsEmpty { get; }
    public ushort LastColumnIndex { get; }
    internal XlsBiffMulRKCell(Byte[] bytes);
    public virtual bool get_IsEmpty();
    public ushort get_LastColumnIndex();
    public ushort GetXF(ushort columnIdx);
    public double GetValue(ushort columnIdx);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffNumberCell : XlsBiffBlankCell {
    public bool IsEmpty { get; }
    public double Value { get; }
    internal XlsBiffNumberCell(Byte[] bytes);
    public virtual bool get_IsEmpty();
    public double get_Value();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffQuickTip : XlsBiffRecord {
    internal XlsBiffQuickTip(Byte[] bytes);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffRecord : object {
    protected static int ContentOffset;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    public BIFFRECORDTYPE Id { get; }
    public ushort RecordSize { get; }
    public int Size { get; }
    internal Byte[] Bytes { get; }
    public XlsBiffRecord(Byte[] bytes);
    public BIFFRECORDTYPE get_Id();
    public ushort get_RecordSize();
    public int get_Size();
    [CompilerGeneratedAttribute]
internal Byte[] get_Bytes();
    public byte ReadByte(int offset);
    public ushort ReadUInt16(int offset);
    public UInt32 ReadUInt32(int offset);
    public ulong ReadUInt64(int offset);
    public short ReadInt16(int offset);
    public int ReadInt32(int offset);
    public long ReadInt64(int offset);
    public Byte[] ReadArray(int offset, int size);
    public float ReadFloat(int offset);
    public double ReadDouble(int offset);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffRKCell : XlsBiffBlankCell {
    public bool IsEmpty { get; }
    public double Value { get; }
    internal XlsBiffRKCell(Byte[] bytes);
    public virtual bool get_IsEmpty();
    public double get_Value();
    public static double NumFromRK(UInt32 rk);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffRow : XlsBiffRecord {
    [CompilerGeneratedAttribute]
private ushort <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FirstDefinedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <LastDefinedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultRowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <XFormat>k__BackingField;
    public ushort RowIndex { get; }
    public ushort FirstDefinedColumn { get; }
    public ushort LastDefinedColumn { get; }
    public bool UseDefaultRowHeight { get; }
    public int RowHeight { get; }
    public bool UseXFormat { get; }
    public ushort XFormat { get; }
    internal XlsBiffRow(Byte[] bytes);
    [CompilerGeneratedAttribute]
public ushort get_RowIndex();
    [CompilerGeneratedAttribute]
public ushort get_FirstDefinedColumn();
    [CompilerGeneratedAttribute]
public ushort get_LastDefinedColumn();
    [CompilerGeneratedAttribute]
public bool get_UseDefaultRowHeight();
    [CompilerGeneratedAttribute]
public int get_RowHeight();
    [CompilerGeneratedAttribute]
public bool get_UseXFormat();
    [CompilerGeneratedAttribute]
public ushort get_XFormat();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffSimpleValueRecord : XlsBiffRecord {
    public ushort Value { get; }
    internal XlsBiffSimpleValueRecord(Byte[] bytes);
    public ushort get_Value();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffSST : XlsBiffRecord {
    private List`1<IXlsString> _strings;
    private XlsSSTReader _reader;
    public UInt32 Count { get; }
    public UInt32 UniqueCount { get; }
    internal XlsBiffSST(Byte[] bytes);
    public UInt32 get_Count();
    public UInt32 get_UniqueCount();
    public void ReadContinueStrings(XlsBiffContinue sstContinue);
    public void Flush();
    public string GetString(UInt32 sstIndex, Encoding encoding);
    private void ReadSstStrings();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffStream : object {
    [CompilerGeneratedAttribute]
private int <BiffVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private BIFFTYPE <BiffType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <BaseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionInfo <Encryption>k__BackingField;
    [CompilerGeneratedAttribute]
private SymmetricAlgorithm <Cipher>k__BackingField;
    [CompilerGeneratedAttribute]
private ICryptoTransform <CipherTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CipherBlock>k__BackingField;
    public int BiffVersion { get; }
    public BIFFTYPE BiffType { get; }
    public int Size { get; }
    public int Position { get; public set; }
    public Stream BaseStream { get; }
    public Byte[] SecretKey { get; }
    public EncryptionInfo Encryption { get; }
    public SymmetricAlgorithm Cipher { get; }
    public ICryptoTransform CipherTransform { get; public set; }
    public int CipherBlock { get; public set; }
    public XlsBiffStream(Stream baseStream, int offset, int explicitVersion, Nullable`1<BIFFTYPE> defaultType, string password, Byte[] secretKey, EncryptionInfo encryption);
    [CompilerGeneratedAttribute]
public int get_BiffVersion();
    [CompilerGeneratedAttribute]
public BIFFTYPE get_BiffType();
    public int get_Size();
    public int get_Position();
    public void set_Position(int value);
    [CompilerGeneratedAttribute]
public Stream get_BaseStream();
    [CompilerGeneratedAttribute]
public Byte[] get_SecretKey();
    [CompilerGeneratedAttribute]
public EncryptionInfo get_Encryption();
    [CompilerGeneratedAttribute]
public SymmetricAlgorithm get_Cipher();
    [CompilerGeneratedAttribute]
public ICryptoTransform get_CipherTransform();
    [CompilerGeneratedAttribute]
public void set_CipherTransform(ICryptoTransform value);
    [CompilerGeneratedAttribute]
public int get_CipherBlock();
    [CompilerGeneratedAttribute]
public void set_CipherBlock(int value);
    public void Seek(int offset, SeekOrigin origin);
    public XlsBiffRecord Read();
    public XlsBiffRecord GetRecord(Stream stream);
    public sealed virtual void Dispose();
    private static int GetBiffVersion(XlsBiffBOF bof);
    private void CreateBlockDecryptor(int blockNumber);
    private void AlignBlockDecryptor(int blockOffset);
    private void DecryptRecord(int startPosition, BIFFRECORDTYPE id, Byte[] bytes);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffUncalced : XlsBiffRecord {
    internal XlsBiffUncalced(Byte[] bytes);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffWindow1 : XlsBiffRecord {
    public ushort Left { get; }
    public ushort Top { get; }
    public ushort Width { get; }
    public ushort Height { get; }
    public Window1Flags Flags { get; }
    public ushort ActiveTab { get; }
    public ushort FirstVisibleTab { get; }
    public ushort SelectedTabCount { get; }
    public ushort TabRatio { get; }
    internal XlsBiffWindow1(Byte[] bytes);
    public ushort get_Left();
    public ushort get_Top();
    public ushort get_Width();
    public ushort get_Height();
    public Window1Flags get_Flags();
    public ushort get_ActiveTab();
    public ushort get_FirstVisibleTab();
    public ushort get_SelectedTabCount();
    public ushort get_TabRatio();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsBiffXF : XlsBiffRecord {
    [CompilerGeneratedAttribute]
private int <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentCellStyleXf>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCellStyleXf>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    public int Font { get; }
    public int Format { get; }
    public int ParentCellStyleXf { get; }
    public bool IsCellStyleXf { get; }
    public bool IsLocked { get; }
    public bool IsHidden { get; }
    public int IndentLevel { get; }
    public HorizontalAlignment HorizontalAlignment { get; }
    internal XlsBiffXF(Byte[] bytes, int biffVersion);
    [CompilerGeneratedAttribute]
public int get_Font();
    [CompilerGeneratedAttribute]
public int get_Format();
    [CompilerGeneratedAttribute]
public int get_ParentCellStyleXf();
    [CompilerGeneratedAttribute]
public bool get_IsCellStyleXf();
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public int get_IndentLevel();
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalAlignment();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsByteString : object {
    private Byte[] _bytes;
    private UInt32 _offset;
    public ushort CharacterCount { get; }
    public XlsByteString(Byte[] bytes, UInt32 offset);
    public ushort get_CharacterCount();
    public sealed virtual string GetValue(Encoding encoding);
    public Byte[] ReadArray(int offset, int size);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsInternalString : object {
    private string stringValue;
    public XlsInternalString(string value);
    public sealed virtual string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsShortByteString : object {
    private Byte[] _bytes;
    private UInt32 _offset;
    public ushort CharacterCount { get; }
    public XlsShortByteString(Byte[] bytes, UInt32 offset);
    public ushort get_CharacterCount();
    public sealed virtual string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsShortUnicodeString : object {
    private Byte[] _bytes;
    private UInt32 _offset;
    public ushort CharacterCount { get; }
    public bool IsMultiByte { get; }
    public XlsShortUnicodeString(Byte[] bytes, UInt32 offset);
    public ushort get_CharacterCount();
    public bool get_IsMultiByte();
    public sealed virtual string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsSSTReader : object {
    [CompilerGeneratedAttribute]
private XlsBiffRecord <CurrentRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentRecordOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private SstState <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsSSTStringHeader <CurrentHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentRemainingCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CurrentResult>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentResultOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentHeaderBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentTailBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CurrentIsMultiByte>k__BackingField;
    private XlsBiffRecord CurrentRecord { get; private set; }
    private int CurrentRecordOffset { get; private set; }
    private SstState CurrentState { get; private set; }
    private XlsSSTStringHeader CurrentHeader { get; private set; }
    private int CurrentRemainingCharacters { get; private set; }
    private Byte[] CurrentResult { get; private set; }
    private int CurrentResultOffset { get; private set; }
    private int CurrentHeaderBytes { get; private set; }
    private int CurrentTailBytes { get; private set; }
    private bool CurrentIsMultiByte { get; private set; }
    [CompilerGeneratedAttribute]
private XlsBiffRecord get_CurrentRecord();
    [CompilerGeneratedAttribute]
private void set_CurrentRecord(XlsBiffRecord value);
    [CompilerGeneratedAttribute]
private int get_CurrentRecordOffset();
    [CompilerGeneratedAttribute]
private void set_CurrentRecordOffset(int value);
    [CompilerGeneratedAttribute]
private SstState get_CurrentState();
    [CompilerGeneratedAttribute]
private void set_CurrentState(SstState value);
    [CompilerGeneratedAttribute]
private XlsSSTStringHeader get_CurrentHeader();
    [CompilerGeneratedAttribute]
private void set_CurrentHeader(XlsSSTStringHeader value);
    [CompilerGeneratedAttribute]
private int get_CurrentRemainingCharacters();
    [CompilerGeneratedAttribute]
private void set_CurrentRemainingCharacters(int value);
    [CompilerGeneratedAttribute]
private Byte[] get_CurrentResult();
    [CompilerGeneratedAttribute]
private void set_CurrentResult(Byte[] value);
    [CompilerGeneratedAttribute]
private int get_CurrentResultOffset();
    [CompilerGeneratedAttribute]
private void set_CurrentResultOffset(int value);
    [CompilerGeneratedAttribute]
private int get_CurrentHeaderBytes();
    [CompilerGeneratedAttribute]
private void set_CurrentHeaderBytes(int value);
    [CompilerGeneratedAttribute]
private int get_CurrentTailBytes();
    [CompilerGeneratedAttribute]
private void set_CurrentTailBytes(int value);
    [CompilerGeneratedAttribute]
private bool get_CurrentIsMultiByte();
    [CompilerGeneratedAttribute]
private void set_CurrentIsMultiByte(bool value);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.BinaryFormat.XlsSSTReader/<ReadStringsFromSST>d__41")]
public IEnumerable`1<IXlsString> ReadStringsFromSST(XlsBiffSST sst);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.BinaryFormat.XlsSSTReader/<ReadStringsFromContinue>d__42")]
public IEnumerable`1<IXlsString> ReadStringsFromContinue(XlsBiffContinue sstContinue);
    public IXlsString Flush();
    private bool TryReadString(IXlsString& result);
    private void ReadUnicodeBytes(Byte[] dest, int offset, int characterCount, bool isMultiByte);
    private byte ReadByte();
    private bool Advance(int bytes, Int32& advanceBytes);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsSSTStringHeader : object {
    private Byte[] _bytes;
    private int _offset;
    public ushort CharacterCount { get; }
    public FormattedUnicodeStringFlags Flags { get; }
    public bool HasExtString { get; }
    public bool HasFormatting { get; }
    public bool IsMultiByte { get; }
    public ushort FormatCount { get; }
    public UInt32 ExtendedStringSize { get; }
    public UInt32 HeadSize { get; }
    public UInt32 TailSize { get; }
    public XlsSSTStringHeader(Byte[] bytes, int offset);
    public ushort get_CharacterCount();
    public FormattedUnicodeStringFlags get_Flags();
    public bool get_HasExtString();
    public bool get_HasFormatting();
    public bool get_IsMultiByte();
    public ushort get_FormatCount();
    public UInt32 get_ExtendedStringSize();
    public UInt32 get_HeadSize();
    public UInt32 get_TailSize();
}
internal class ExcelDataReader.Core.BinaryFormat.XlsUnicodeString : object {
    private Byte[] _bytes;
    private UInt32 _offset;
    public ushort CharacterCount { get; }
    public bool IsMultiByte { get; }
    public XlsUnicodeString(Byte[] bytes, UInt32 offset);
    public ushort get_CharacterCount();
    public bool get_IsMultiByte();
    public sealed virtual string GetValue(Encoding encoding);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsWorkbook : CommonWorkbook {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BiffVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionInfo <Encryption>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffInterfaceHdr <InterfaceHdr>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffRecord <Mms>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffRecord <WriteAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffSimpleValueRecord <CodePage>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffRecord <Dsf>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffRecord <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffSimpleValueRecord <Backup>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XlsBiffFont> <Fonts>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XlsBiffBoundSheet> <Sheets>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffSST <SST>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsBiffRecord <ExtSST>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDate1904>k__BackingField;
    public Stream Stream { get; }
    public int BiffVersion { get; }
    public Byte[] SecretKey { get; }
    public EncryptionInfo Encryption { get; }
    public Encoding Encoding { get; private set; }
    public XlsBiffInterfaceHdr InterfaceHdr { get; public set; }
    public XlsBiffRecord Mms { get; public set; }
    public XlsBiffRecord WriteAccess { get; public set; }
    public XlsBiffSimpleValueRecord CodePage { get; public set; }
    public XlsBiffRecord Dsf { get; public set; }
    public XlsBiffRecord Country { get; public set; }
    public XlsBiffSimpleValueRecord Backup { get; public set; }
    public List`1<XlsBiffFont> Fonts { get; }
    public List`1<XlsBiffBoundSheet> Sheets { get; }
    public XlsBiffSST SST { get; public set; }
    public XlsBiffRecord ExtSST { get; public set; }
    public bool IsDate1904 { get; private set; }
    public int ResultsCount { get; }
    internal XlsWorkbook(Stream stream, string password, Encoding fallbackEncoding);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public int get_BiffVersion();
    [CompilerGeneratedAttribute]
public Byte[] get_SecretKey();
    [CompilerGeneratedAttribute]
public EncryptionInfo get_Encryption();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public XlsBiffInterfaceHdr get_InterfaceHdr();
    [CompilerGeneratedAttribute]
public void set_InterfaceHdr(XlsBiffInterfaceHdr value);
    [CompilerGeneratedAttribute]
public XlsBiffRecord get_Mms();
    [CompilerGeneratedAttribute]
public void set_Mms(XlsBiffRecord value);
    [CompilerGeneratedAttribute]
public XlsBiffRecord get_WriteAccess();
    [CompilerGeneratedAttribute]
public void set_WriteAccess(XlsBiffRecord value);
    [CompilerGeneratedAttribute]
public XlsBiffSimpleValueRecord get_CodePage();
    [CompilerGeneratedAttribute]
public void set_CodePage(XlsBiffSimpleValueRecord value);
    [CompilerGeneratedAttribute]
public XlsBiffRecord get_Dsf();
    [CompilerGeneratedAttribute]
public void set_Dsf(XlsBiffRecord value);
    [CompilerGeneratedAttribute]
public XlsBiffRecord get_Country();
    [CompilerGeneratedAttribute]
public void set_Country(XlsBiffRecord value);
    [CompilerGeneratedAttribute]
public XlsBiffSimpleValueRecord get_Backup();
    [CompilerGeneratedAttribute]
public void set_Backup(XlsBiffSimpleValueRecord value);
    [CompilerGeneratedAttribute]
public List`1<XlsBiffFont> get_Fonts();
    [CompilerGeneratedAttribute]
public List`1<XlsBiffBoundSheet> get_Sheets();
    [CompilerGeneratedAttribute]
public XlsBiffSST get_SST();
    [CompilerGeneratedAttribute]
public void set_SST(XlsBiffSST value);
    [CompilerGeneratedAttribute]
public XlsBiffRecord get_ExtSST();
    [CompilerGeneratedAttribute]
public void set_ExtSST(XlsBiffRecord value);
    [CompilerGeneratedAttribute]
public bool get_IsDate1904();
    [CompilerGeneratedAttribute]
private void set_IsDate1904(bool value);
    public sealed virtual int get_ResultsCount();
    public static bool IsRawBiffStream(Byte[] bytes);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.BinaryFormat.XlsWorkbook/<ReadWorksheets>d__66")]
public sealed virtual IEnumerable`1<XlsWorksheet> ReadWorksheets();
    internal void AddXf(XlsBiffXF xf);
    private void ReadWorkbookGlobals(XlsBiffStream biffStream);
}
internal class ExcelDataReader.Core.BinaryFormat.XlsWorksheet : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisibleState>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderFooter <HeaderFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private CellRange[] <MergeCells>k__BackingField;
    [CompilerGeneratedAttribute]
private Column[] <ColumnWidths>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DataOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultRowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, XlsRowOffset> <RowOffsetMap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDate1904>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsWorkbook <Workbook>k__BackingField;
    public string Name { get; }
    public string CodeName { get; private set; }
    public string VisibleState { get; }
    public HeaderFooter HeaderFooter { get; private set; }
    public CellRange[] MergeCells { get; private set; }
    public Column[] ColumnWidths { get; private set; }
    public UInt32 DataOffset { get; }
    public Stream Stream { get; }
    public Encoding Encoding { get; private set; }
    public double DefaultRowHeight { get; public set; }
    public Dictionary`2<int, XlsRowOffset> RowOffsetMap { get; }
    public int FieldCount { get; private set; }
    public int RowCount { get; private set; }
    public bool IsDate1904 { get; private set; }
    public XlsWorkbook Workbook { get; }
    public XlsWorksheet(XlsWorkbook workbook, XlsBiffBoundSheet refSheet, Stream stream);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodeName();
    [CompilerGeneratedAttribute]
private void set_CodeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VisibleState();
    [CompilerGeneratedAttribute]
public sealed virtual HeaderFooter get_HeaderFooter();
    [CompilerGeneratedAttribute]
private void set_HeaderFooter(HeaderFooter value);
    [CompilerGeneratedAttribute]
public sealed virtual CellRange[] get_MergeCells();
    [CompilerGeneratedAttribute]
private void set_MergeCells(CellRange[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Column[] get_ColumnWidths();
    [CompilerGeneratedAttribute]
private void set_ColumnWidths(Column[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_DataOffset();
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public double get_DefaultRowHeight();
    [CompilerGeneratedAttribute]
public void set_DefaultRowHeight(double value);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, XlsRowOffset> get_RowOffsetMap();
    [CompilerGeneratedAttribute]
public sealed virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
private void set_FieldCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RowCount();
    [CompilerGeneratedAttribute]
private void set_RowCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDate1904();
    [CompilerGeneratedAttribute]
private void set_IsDate1904(bool value);
    [CompilerGeneratedAttribute]
public XlsWorkbook get_Workbook();
    [IteratorStateMachineAttribute("ExcelDataReader.Core.BinaryFormat.XlsWorksheet/<ReadRows>d__55")]
public sealed virtual IEnumerable`1<Row> ReadRows();
    private void GetBlockSize(int startRow, Int32& blockRowCount, Int32& minOffset, Int32& maxOffset);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.BinaryFormat.XlsWorksheet/<ReadWorksheetRows>d__57")]
private IEnumerable`1<Row> ReadWorksheetRows(XlsBiffStream biffStream);
    private XlsRowBlock ReadNextBlock(XlsBiffStream biffStream, int startRow, int rows, int minOffset, int maxOffset);
    private Row EnsureRow(XlsRowBlock result, int rowIndex);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.BinaryFormat.XlsWorksheet/<ReadMultiCell>d__60")]
private IEnumerable`1<Cell> ReadMultiCell(XlsBiffBlankCell cell);
    private Cell ReadSingleCell(XlsBiffStream biffStream, XlsBiffBlankCell cell, int xfIndex);
    private string GetLabelString(XlsBiffLabelCell cell, ExtendedFormat effectiveStyle);
    private XlsBiffFont GetFont(int fontIndex);
    private object TryGetFormulaValue(XlsBiffStream biffStream, XlsBiffFormulaCell formulaCell, ExtendedFormat effectiveStyle, Nullable`1& error);
    private string TryGetFormulaString(XlsBiffStream biffStream, ExtendedFormat effectiveStyle);
    private object TryConvertOADateTime(double value, int numberFormatIndex);
    private object TryConvertOADateTime(int value, int numberFormatIndex);
    private int GetXfIndexForCell(XlsBiffBlankCell cell, XlsBiffRecord ixfe);
    private void ReadWorksheetGlobals();
    private void SetMinMaxRow(int rowIndex, XlsBiffRow row);
    private void SetMinMaxRowOffset(int rowIndex, int recordOffset, int maxOverlapRow);
}
internal static class ExcelDataReader.Core.BuiltinNumberFormat : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<int, NumberFormatString> <Formats>k__BackingField;
    private static Dictionary`2<int, NumberFormatString> Formats { get; }
    private static BuiltinNumberFormat();
    [CompilerGeneratedAttribute]
private static Dictionary`2<int, NumberFormatString> get_Formats();
    public static NumberFormatString GetBuiltinNumberFormat(int numFmtId);
}
internal class ExcelDataReader.Core.Cell : object {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtendedFormat <EffectiveStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CellError> <Error>k__BackingField;
    public int ColumnIndex { get; }
    public ExtendedFormat EffectiveStyle { get; }
    public object Value { get; }
    public Nullable`1<CellError> Error { get; }
    public Cell(int columnIndex, object value, ExtendedFormat effectiveStyle, Nullable`1<CellError> error);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public ExtendedFormat get_EffectiveStyle();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Nullable`1<CellError> get_Error();
}
internal class ExcelDataReader.Core.Column : object {
    [CompilerGeneratedAttribute]
private int <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    public int Minimum { get; }
    public int Maximum { get; }
    public bool Hidden { get; }
    public Nullable`1<double> Width { get; }
    public Column(int minimum, int maximum, bool hidden, Nullable`1<double> width);
    [CompilerGeneratedAttribute]
public int get_Minimum();
    [CompilerGeneratedAttribute]
public int get_Maximum();
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
}
internal class ExcelDataReader.Core.CommonWorkbook : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<int, NumberFormatString> <Formats>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExtendedFormat> <ExtendedFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExtendedFormat> <CellStyleExtendedFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private NumberFormatString <GeneralNumberFormat>k__BackingField;
    public Dictionary`2<int, NumberFormatString> Formats { get; }
    public List`1<ExtendedFormat> ExtendedFormats { get; }
    public List`1<ExtendedFormat> CellStyleExtendedFormats { get; }
    private NumberFormatString GeneralNumberFormat { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<int, NumberFormatString> get_Formats();
    [CompilerGeneratedAttribute]
public List`1<ExtendedFormat> get_ExtendedFormats();
    [CompilerGeneratedAttribute]
public List`1<ExtendedFormat> get_CellStyleExtendedFormats();
    [CompilerGeneratedAttribute]
private NumberFormatString get_GeneralNumberFormat();
    public ExtendedFormat GetEffectiveCellStyle(int xfIndex, int numberFormatFromCell);
    public void AddNumberFormat(int formatIndexInFile, string formatString);
    public sealed virtual NumberFormatString GetNumberFormatString(int numberFormatIndex);
}
internal class ExcelDataReader.Core.CompoundFormat.CompoundDirectoryEntry : object {
    [CompilerGeneratedAttribute]
private string <EntryName>k__BackingField;
    [CompilerGeneratedAttribute]
private STGTY <EntryType>k__BackingField;
    [CompilerGeneratedAttribute]
private DECOLOR <EntryColor>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LeftSiblingSid>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RightSiblingSid>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ChildSid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <UserFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StreamFirstSector>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StreamSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEntryMiniStream>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PropType>k__BackingField;
    public string EntryName { get; public set; }
    public STGTY EntryType { get; public set; }
    public DECOLOR EntryColor { get; public set; }
    public UInt32 LeftSiblingSid { get; public set; }
    public UInt32 RightSiblingSid { get; public set; }
    public UInt32 ChildSid { get; public set; }
    public Guid ClassId { get; public set; }
    public UInt32 UserFlags { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public UInt32 StreamFirstSector { get; public set; }
    public UInt32 StreamSize { get; public set; }
    public bool IsEntryMiniStream { get; public set; }
    public UInt32 PropType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntryName();
    [CompilerGeneratedAttribute]
public void set_EntryName(string value);
    [CompilerGeneratedAttribute]
public STGTY get_EntryType();
    [CompilerGeneratedAttribute]
public void set_EntryType(STGTY value);
    [CompilerGeneratedAttribute]
public DECOLOR get_EntryColor();
    [CompilerGeneratedAttribute]
public void set_EntryColor(DECOLOR value);
    [CompilerGeneratedAttribute]
public UInt32 get_LeftSiblingSid();
    [CompilerGeneratedAttribute]
public void set_LeftSiblingSid(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_RightSiblingSid();
    [CompilerGeneratedAttribute]
public void set_RightSiblingSid(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ChildSid();
    [CompilerGeneratedAttribute]
public void set_ChildSid(UInt32 value);
    [CompilerGeneratedAttribute]
public Guid get_ClassId();
    [CompilerGeneratedAttribute]
public void set_ClassId(Guid value);
    [CompilerGeneratedAttribute]
public UInt32 get_UserFlags();
    [CompilerGeneratedAttribute]
public void set_UserFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTime();
    [CompilerGeneratedAttribute]
public void set_LastWriteTime(DateTime value);
    [CompilerGeneratedAttribute]
public UInt32 get_StreamFirstSector();
    [CompilerGeneratedAttribute]
public void set_StreamFirstSector(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StreamSize();
    [CompilerGeneratedAttribute]
public void set_StreamSize(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_IsEntryMiniStream();
    [CompilerGeneratedAttribute]
public void set_IsEntryMiniStream(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_PropType();
    [CompilerGeneratedAttribute]
public void set_PropType(UInt32 value);
}
internal class ExcelDataReader.Core.CompoundFormat.CompoundDocument : object {
    [CompilerGeneratedAttribute]
private CompoundHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <SectorTable>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <MiniSectorTable>k__BackingField;
    [CompilerGeneratedAttribute]
private CompoundDirectoryEntry <RootEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CompoundDirectoryEntry> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private static long <SafeFileTimeMaxDate>k__BackingField;
    internal CompoundHeader Header { get; }
    internal List`1<UInt32> SectorTable { get; }
    internal List`1<UInt32> MiniSectorTable { get; }
    internal CompoundDirectoryEntry RootEntry { get; internal set; }
    internal List`1<CompoundDirectoryEntry> Entries { get; internal set; }
    private static long SafeFileTimeMaxDate { get; }
    public CompoundDocument(Stream stream);
    private static CompoundDocument();
    [CompilerGeneratedAttribute]
internal CompoundHeader get_Header();
    [CompilerGeneratedAttribute]
internal List`1<UInt32> get_SectorTable();
    [CompilerGeneratedAttribute]
internal List`1<UInt32> get_MiniSectorTable();
    [CompilerGeneratedAttribute]
internal CompoundDirectoryEntry get_RootEntry();
    [CompilerGeneratedAttribute]
internal void set_RootEntry(CompoundDirectoryEntry value);
    [CompilerGeneratedAttribute]
internal List`1<CompoundDirectoryEntry> get_Entries();
    [CompilerGeneratedAttribute]
internal void set_Entries(List`1<CompoundDirectoryEntry> value);
    [CompilerGeneratedAttribute]
private static long get_SafeFileTimeMaxDate();
    internal static List`1<UInt32> GetSectorChain(UInt32 sector, List`1<UInt32> sectorTable);
    internal static bool IsCompoundDocument(Byte[] probe);
    internal CompoundDirectoryEntry FindEntry(String[] entryNames);
    internal long GetMiniSectorOffset(UInt32 sector);
    internal long GetSectorOffset(UInt32 sector);
    internal Byte[] ReadStream(Stream stream, UInt32 baseSector, int length, bool isMini);
    internal Byte[] ReadStream(Stream stream, List`1<UInt32> sectors, int length);
    private static CompoundHeader ReadHeader(BinaryReader reader);
    private static void TrimSectorChain(List`1<UInt32> chain, FATMARKERS marker);
    private static UInt32 GetNextSector(UInt32 sector, List`1<UInt32> sectorTable);
    private void ReadDirectoryEntries(Byte[] bytes);
    private CompoundDirectoryEntry ReadDirectoryEntry(BinaryReader reader);
    private List`1<UInt32> ReadDifSectorChain(BinaryReader reader);
    private List`1<UInt32> ReadSectorTable(BinaryReader reader, List`1<UInt32> chain);
    private List`1<UInt32> ReadSectorAsUInt32s(BinaryReader reader, UInt32 sector);
    [CompilerGeneratedAttribute]
internal static DateTime <ReadDirectoryEntry>g__ReadFileTime|32_0(BinaryReader reader);
}
internal class ExcelDataReader.Core.CompoundFormat.CompoundHeader : object {
    [CompilerGeneratedAttribute]
private ulong <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <DllVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ByteOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SectorSizeInPot>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MiniSectorSizeInPot>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DirectorySectorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FatSectorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <RootDirectoryEntryStart>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TransactionSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MiniStreamCutoff>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MiniFatFirstSector>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MiniFatSectorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DifFirstSector>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DifSectorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <First109DifSectorChain>k__BackingField;
    public ulong Signature { get; public set; }
    public bool IsSignatureValid { get; }
    public Guid ClassId { get; public set; }
    public ushort Version { get; public set; }
    public ushort DllVersion { get; public set; }
    public ushort ByteOrder { get; public set; }
    public int SectorSizeInPot { get; public set; }
    public int SectorSize { get; }
    public int MiniSectorSizeInPot { get; public set; }
    public int MiniSectorSize { get; }
    public int DirectorySectorCount { get; public set; }
    public int FatSectorCount { get; public set; }
    public UInt32 RootDirectoryEntryStart { get; public set; }
    public UInt32 TransactionSignature { get; public set; }
    public UInt32 MiniStreamCutoff { get; public set; }
    public UInt32 MiniFatFirstSector { get; public set; }
    public int MiniFatSectorCount { get; public set; }
    public UInt32 DifFirstSector { get; public set; }
    public int DifSectorCount { get; public set; }
    public List`1<UInt32> First109DifSectorChain { get; public set; }
    [CompilerGeneratedAttribute]
public ulong get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(ulong value);
    public bool get_IsSignatureValid();
    [CompilerGeneratedAttribute]
public Guid get_ClassId();
    [CompilerGeneratedAttribute]
public void set_ClassId(Guid value);
    [CompilerGeneratedAttribute]
public ushort get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_DllVersion();
    [CompilerGeneratedAttribute]
public void set_DllVersion(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_ByteOrder();
    [CompilerGeneratedAttribute]
public void set_ByteOrder(ushort value);
    [CompilerGeneratedAttribute]
public int get_SectorSizeInPot();
    [CompilerGeneratedAttribute]
public void set_SectorSizeInPot(int value);
    public int get_SectorSize();
    [CompilerGeneratedAttribute]
public int get_MiniSectorSizeInPot();
    [CompilerGeneratedAttribute]
public void set_MiniSectorSizeInPot(int value);
    public int get_MiniSectorSize();
    [CompilerGeneratedAttribute]
public int get_DirectorySectorCount();
    [CompilerGeneratedAttribute]
public void set_DirectorySectorCount(int value);
    [CompilerGeneratedAttribute]
public int get_FatSectorCount();
    [CompilerGeneratedAttribute]
public void set_FatSectorCount(int value);
    [CompilerGeneratedAttribute]
public UInt32 get_RootDirectoryEntryStart();
    [CompilerGeneratedAttribute]
public void set_RootDirectoryEntryStart(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TransactionSignature();
    [CompilerGeneratedAttribute]
public void set_TransactionSignature(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MiniStreamCutoff();
    [CompilerGeneratedAttribute]
public void set_MiniStreamCutoff(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MiniFatFirstSector();
    [CompilerGeneratedAttribute]
public void set_MiniFatFirstSector(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_MiniFatSectorCount();
    [CompilerGeneratedAttribute]
public void set_MiniFatSectorCount(int value);
    [CompilerGeneratedAttribute]
public UInt32 get_DifFirstSector();
    [CompilerGeneratedAttribute]
public void set_DifFirstSector(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_DifSectorCount();
    [CompilerGeneratedAttribute]
public void set_DifSectorCount(int value);
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_First109DifSectorChain();
    [CompilerGeneratedAttribute]
public void set_First109DifSectorChain(List`1<UInt32> value);
}
internal class ExcelDataReader.Core.CompoundFormat.CompoundStream : Stream {
    [CompilerGeneratedAttribute]
private List`1<UInt32> <SectorChain>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <RootSectorChain>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <BaseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private CompoundDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMini>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LeaveOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SectorChainOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SectorOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SectorBytes>k__BackingField;
    public List`1<UInt32> SectorChain { get; }
    public List`1<UInt32> RootSectorChain { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private Stream BaseStream { get; private set; }
    private CompoundDocument Document { get; }
    private bool IsMini { get; }
    private bool LeaveOpen { get; }
    private int SectorChainOffset { get; private set; }
    private int Offset { get; private set; }
    private int SectorOffset { get; private set; }
    private Byte[] SectorBytes { get; private set; }
    public CompoundStream(CompoundDocument document, Stream baseStream, List`1<UInt32> sectorChain, int length, bool leaveOpen);
    public CompoundStream(CompoundDocument document, Stream baseStream, UInt32 baseSector, int length, bool isMini, bool leaveOpen);
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_SectorChain();
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_RootSectorChain();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    [CompilerGeneratedAttribute]
public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
private Stream get_BaseStream();
    [CompilerGeneratedAttribute]
private void set_BaseStream(Stream value);
    [CompilerGeneratedAttribute]
private CompoundDocument get_Document();
    [CompilerGeneratedAttribute]
private bool get_IsMini();
    [CompilerGeneratedAttribute]
private bool get_LeaveOpen();
    [CompilerGeneratedAttribute]
private int get_SectorChainOffset();
    [CompilerGeneratedAttribute]
private void set_SectorChainOffset(int value);
    [CompilerGeneratedAttribute]
private int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    [CompilerGeneratedAttribute]
private int get_SectorOffset();
    [CompilerGeneratedAttribute]
private void set_SectorOffset(int value);
    [CompilerGeneratedAttribute]
private Byte[] get_SectorBytes();
    [CompilerGeneratedAttribute]
private void set_SectorBytes(Byte[] value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void ReadSector();
    private void ReadMiniSector();
    private void ReadRegularSector();
}
internal enum ExcelDataReader.Core.CompoundFormat.DECOLOR : Enum {
    public byte value__;
    public static DECOLOR DE_RED;
    public static DECOLOR DE_BLACK;
}
internal enum ExcelDataReader.Core.CompoundFormat.FATMARKERS : Enum {
    public UInt32 value__;
    public static FATMARKERS FAT_EndOfChain;
    public static FATMARKERS FAT_FreeSpace;
    public static FATMARKERS FAT_FatSector;
    public static FATMARKERS FAT_DifSector;
}
internal enum ExcelDataReader.Core.CompoundFormat.STGTY : Enum {
    public byte value__;
    public static STGTY STGTY_INVALID;
    public static STGTY STGTY_STORAGE;
    public static STGTY STGTY_STREAM;
    public static STGTY STGTY_LOCKBYTES;
    public static STGTY STGTY_PROPERTY;
    public static STGTY STGTY_ROOT;
}
internal static class ExcelDataReader.Core.CsvFormat.CsvAnalyzer : object {
    public static void Analyze(Stream stream, Char[] separators, Encoding fallbackEncoding, int analyzeInitialCsvRows, Int32& fieldCount, Char& autodetectSeparator, Encoding& autodetectEncoding, Int32& bomLength, Int32& rowCount);
    private static void AnalyzeCsvRows(Stream inputStream, Byte[] buffer, int initialBytesRead, int bomLength, int analyzeInitialCsvRows, Char[] separators, SeparatorInfo[] separatorInfos);
    private static bool IsMinNumberOfRowAnalyzed(int analyzeInitialCsvRows, SeparatorInfo[] separatorInfos);
    private static void ParseSeparatorsBuffer(Byte[] bytes, int offset, int count, Char[] separators, SeparatorInfo[] separatorInfos);
    private static void FlushSeparatorsBuffers(Char[] separators, SeparatorInfo[] separatorInfos);
    private static Encoding GetEncodingFromBom(Byte[] bom, Int32& bomLength);
    private static bool IsEncodingPreamble(Byte[] bom, Encoding encoding, Int32& bomLength);
}
internal class ExcelDataReader.Core.CsvFormat.CsvParser : object {
    [CompilerGeneratedAttribute]
private CsvState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private char <QuoteChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TrailingWhitespaceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Decoder <Decoder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCarriageReturn>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <CharBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <ValueResult>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RowResult>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<List`1<string>> <RowsResult>k__BackingField;
    private CsvState State { get; private set; }
    private char QuoteChar { get; }
    private int TrailingWhitespaceCount { get; private set; }
    private Decoder Decoder { get; }
    private bool HasCarriageReturn { get; private set; }
    private char Separator { get; }
    private Char[] CharBuffer { get; private set; }
    private StringBuilder ValueResult { get; private set; }
    private List`1<string> RowResult { get; private set; }
    private List`1<List`1<string>> RowsResult { get; private set; }
    public CsvParser(char separator, Encoding encoding);
    [CompilerGeneratedAttribute]
private CsvState get_State();
    [CompilerGeneratedAttribute]
private void set_State(CsvState value);
    [CompilerGeneratedAttribute]
private char get_QuoteChar();
    [CompilerGeneratedAttribute]
private int get_TrailingWhitespaceCount();
    [CompilerGeneratedAttribute]
private void set_TrailingWhitespaceCount(int value);
    [CompilerGeneratedAttribute]
private Decoder get_Decoder();
    [CompilerGeneratedAttribute]
private bool get_HasCarriageReturn();
    [CompilerGeneratedAttribute]
private void set_HasCarriageReturn(bool value);
    [CompilerGeneratedAttribute]
private char get_Separator();
    [CompilerGeneratedAttribute]
private Char[] get_CharBuffer();
    [CompilerGeneratedAttribute]
private void set_CharBuffer(Char[] value);
    [CompilerGeneratedAttribute]
private StringBuilder get_ValueResult();
    [CompilerGeneratedAttribute]
private void set_ValueResult(StringBuilder value);
    [CompilerGeneratedAttribute]
private List`1<string> get_RowResult();
    [CompilerGeneratedAttribute]
private void set_RowResult(List`1<string> value);
    [CompilerGeneratedAttribute]
private List`1<List`1<string>> get_RowsResult();
    [CompilerGeneratedAttribute]
private void set_RowsResult(List`1<List`1<string>> value);
    public void ParseBuffer(Byte[] bytes, int offset, int count, List`1& rows);
    public void Flush(List`1& rows);
    private void ParseChar(char c, int bytesUsed);
    private bool ReadPreValue(char c, int bytesUsed);
    private bool ReadValue(char c, int bytesUsed);
    private bool ReadQuotedValue(char c, int bytesUsed);
    private bool ReadQuotedValueQuote(char c, int bytesUsed);
    private bool ReadSeparator(char c, int bytesUsed);
    private bool ReadLinebreak(char c, int bytesUsed);
    private void AddValueToRow();
    private void AddRowToResult();
    private bool IsWhitespace(char c);
}
internal class ExcelDataReader.Core.CsvFormat.CsvWorkbook : object {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <AutodetectSeparators>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnalyzeInitialCsvRows>k__BackingField;
    public int ResultsCount { get; }
    public Stream Stream { get; }
    public Encoding Encoding { get; }
    public Char[] AutodetectSeparators { get; }
    public int AnalyzeInitialCsvRows { get; }
    public CsvWorkbook(Stream stream, Encoding encoding, Char[] autodetectSeparators, int analyzeInitialCsvRows);
    public sealed virtual int get_ResultsCount();
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public Char[] get_AutodetectSeparators();
    [CompilerGeneratedAttribute]
public int get_AnalyzeInitialCsvRows();
    [IteratorStateMachineAttribute("ExcelDataReader.Core.CsvFormat.CsvWorkbook/<ReadWorksheets>d__15")]
public sealed virtual IEnumerable`1<CsvWorksheet> ReadWorksheets();
    public sealed virtual NumberFormatString GetNumberFormatString(int index);
}
internal class ExcelDataReader.Core.CsvFormat.CsvWorksheet : object {
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BomLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyzedPartial>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnalyzedRowCount>k__BackingField;
    public string Name { get; }
    public string CodeName { get; }
    public string VisibleState { get; }
    public HeaderFooter HeaderFooter { get; }
    public CellRange[] MergeCells { get; }
    public int FieldCount { get; }
    public int RowCount { get; }
    public Stream Stream { get; }
    public Encoding Encoding { get; }
    public char Separator { get; }
    public Column[] ColumnWidths { get; }
    private int BomLength { get; private set; }
    private bool AnalyzedPartial { get; }
    private int AnalyzedRowCount { get; }
    public CsvWorksheet(Stream stream, Encoding fallbackEncoding, Char[] autodetectSeparators, int analyzeInitialCsvRows);
    public sealed virtual string get_Name();
    public sealed virtual string get_CodeName();
    public sealed virtual string get_VisibleState();
    public sealed virtual HeaderFooter get_HeaderFooter();
    public sealed virtual CellRange[] get_MergeCells();
    [CompilerGeneratedAttribute]
public sealed virtual int get_FieldCount();
    public sealed virtual int get_RowCount();
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public char get_Separator();
    public sealed virtual Column[] get_ColumnWidths();
    [CompilerGeneratedAttribute]
private int get_BomLength();
    [CompilerGeneratedAttribute]
private void set_BomLength(int value);
    [CompilerGeneratedAttribute]
private bool get_AnalyzedPartial();
    [CompilerGeneratedAttribute]
private int get_AnalyzedRowCount();
    [IteratorStateMachineAttribute("ExcelDataReader.Core.CsvFormat.CsvWorksheet/<ReadRows>d__37")]
public sealed virtual IEnumerable`1<Row> ReadRows();
    [IteratorStateMachineAttribute("ExcelDataReader.Core.CsvFormat.CsvWorksheet/<GetReaderRows>d__38")]
private static IEnumerable`1<Row> GetReaderRows(int rowIndex, List`1<List`1<string>> rows);
}
internal class ExcelDataReader.Core.EncodingHelper : object {
    public static Encoding GetEncoding(ushort codePage);
}
internal class ExcelDataReader.Core.ExtendedFormat : object {
    [CompilerGeneratedAttribute]
private static ExtendedFormat <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentCellStyleXf>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FontIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberFormatIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    public static ExtendedFormat Zero { get; }
    public int ParentCellStyleXf { get; }
    public int FontIndex { get; }
    public int NumberFormatIndex { get; }
    public bool Locked { get; }
    public bool Hidden { get; }
    public int IndentLevel { get; }
    public HorizontalAlignment HorizontalAlignment { get; }
    public ExtendedFormat(int numberFormatIndex);
    public ExtendedFormat(int parentCellStyleXf, int fontIndex, int numberFormatIndex, bool locked, bool hidden, int indentLevel, HorizontalAlignment horizontalAlignment);
    private static ExtendedFormat();
    [CompilerGeneratedAttribute]
public static ExtendedFormat get_Zero();
    [CompilerGeneratedAttribute]
public int get_ParentCellStyleXf();
    [CompilerGeneratedAttribute]
public int get_FontIndex();
    [CompilerGeneratedAttribute]
public int get_NumberFormatIndex();
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public int get_IndentLevel();
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalAlignment();
}
internal static class ExcelDataReader.Core.Helpers : object {
    private static Regex EscapeRegex;
    private static Char[] SingleByteEncodingHelper;
    private static Helpers();
    public static bool IsSingleByteEncoding(Encoding encoding);
    public static string ConvertEscapeChars(string input);
    public static double AdjustOADateTime(double value, bool date1904);
    public static bool IsValidOADateTime(double value);
    public static object ConvertFromOATime(double value, bool date1904);
    public static object ConvertFromOATime(int value, bool date1904);
}
internal interface ExcelDataReader.Core.IWorkbook`1 {
    public int ResultsCount { get; }
    public abstract virtual int get_ResultsCount();
    public abstract virtual IEnumerable`1<TWorksheet> ReadWorksheets();
    public abstract virtual NumberFormatString GetNumberFormatString(int index);
}
internal interface ExcelDataReader.Core.IWorksheet {
    public string Name { get; }
    public string CodeName { get; }
    public string VisibleState { get; }
    public HeaderFooter HeaderFooter { get; }
    public int FieldCount { get; }
    public int RowCount { get; }
    public CellRange[] MergeCells { get; }
    public Column[] ColumnWidths { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_CodeName();
    public abstract virtual string get_VisibleState();
    public abstract virtual HeaderFooter get_HeaderFooter();
    public abstract virtual int get_FieldCount();
    public abstract virtual int get_RowCount();
    public abstract virtual CellRange[] get_MergeCells();
    public abstract virtual Column[] get_ColumnWidths();
    public abstract virtual IEnumerable`1<Row> ReadRows();
}
internal class ExcelDataReader.Core.NumberFormat.Color : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal class ExcelDataReader.Core.NumberFormat.Condition : object {
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public string Operator { get; public set; }
    public double Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
}
internal class ExcelDataReader.Core.NumberFormat.DecimalSection : object {
    [CompilerGeneratedAttribute]
private bool <ThousandSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ThousandDivisor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PercentMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <BeforeDecimal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecimalSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AfterDecimal>k__BackingField;
    public bool ThousandSeparator { get; public set; }
    public double ThousandDivisor { get; public set; }
    public double PercentMultiplier { get; public set; }
    public List`1<string> BeforeDecimal { get; public set; }
    public bool DecimalSeparator { get; public set; }
    public List`1<string> AfterDecimal { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ThousandSeparator();
    [CompilerGeneratedAttribute]
public void set_ThousandSeparator(bool value);
    [CompilerGeneratedAttribute]
public double get_ThousandDivisor();
    [CompilerGeneratedAttribute]
public void set_ThousandDivisor(double value);
    [CompilerGeneratedAttribute]
public double get_PercentMultiplier();
    [CompilerGeneratedAttribute]
public void set_PercentMultiplier(double value);
    [CompilerGeneratedAttribute]
public List`1<string> get_BeforeDecimal();
    [CompilerGeneratedAttribute]
public void set_BeforeDecimal(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DecimalSeparator();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparator(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AfterDecimal();
    [CompilerGeneratedAttribute]
public void set_AfterDecimal(List`1<string> value);
    public static bool TryParse(List`1<string> tokens, DecimalSection& format);
    private static double GetPercentMultiplier(List`1<string> tokens);
    private static double GetTrailingCommasDivisor(List`1<string> tokens, Boolean& thousandSeparator);
}
internal class ExcelDataReader.Core.NumberFormat.ExponentialSection : object {
    [CompilerGeneratedAttribute]
private List`1<string> <BeforeDecimal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecimalSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AfterDecimal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExponentialToken>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Power>k__BackingField;
    public List`1<string> BeforeDecimal { get; public set; }
    public bool DecimalSeparator { get; public set; }
    public List`1<string> AfterDecimal { get; public set; }
    public string ExponentialToken { get; public set; }
    public List`1<string> Power { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_BeforeDecimal();
    [CompilerGeneratedAttribute]
public void set_BeforeDecimal(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DecimalSeparator();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparator(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AfterDecimal();
    [CompilerGeneratedAttribute]
public void set_AfterDecimal(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ExponentialToken();
    [CompilerGeneratedAttribute]
public void set_ExponentialToken(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Power();
    [CompilerGeneratedAttribute]
public void set_Power(List`1<string> value);
    public static bool TryParse(List`1<string> tokens, ExponentialSection& format);
}
internal class ExcelDataReader.Core.NumberFormat.FractionSection : object {
    [CompilerGeneratedAttribute]
private List`1<string> <IntegerPart>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Numerator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DenominatorPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Denominator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DenominatorConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DenominatorSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <FractionSuffix>k__BackingField;
    public List`1<string> IntegerPart { get; public set; }
    public List`1<string> Numerator { get; public set; }
    public List`1<string> DenominatorPrefix { get; public set; }
    public List`1<string> Denominator { get; public set; }
    public int DenominatorConstant { get; public set; }
    public List`1<string> DenominatorSuffix { get; public set; }
    public List`1<string> FractionSuffix { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_IntegerPart();
    [CompilerGeneratedAttribute]
public void set_IntegerPart(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Numerator();
    [CompilerGeneratedAttribute]
public void set_Numerator(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DenominatorPrefix();
    [CompilerGeneratedAttribute]
public void set_DenominatorPrefix(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Denominator();
    [CompilerGeneratedAttribute]
public void set_Denominator(List`1<string> value);
    [CompilerGeneratedAttribute]
public int get_DenominatorConstant();
    [CompilerGeneratedAttribute]
public void set_DenominatorConstant(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DenominatorSuffix();
    [CompilerGeneratedAttribute]
public void set_DenominatorSuffix(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_FractionSuffix();
    [CompilerGeneratedAttribute]
public void set_FractionSuffix(List`1<string> value);
    public static bool TryParse(List`1<string> tokens, FractionSection& format);
    private static void GetNumerator(List`1<string> tokens, List`1& integerPart, List`1& numeratorPart);
    private static bool TryGetDenominator(List`1<string> tokens, List`1& denominatorPrefix, List`1& denominatorPart, Int32& denominatorConstant, List`1& denominatorSuffix, List`1& fractionSuffix);
}
public class ExcelDataReader.Core.NumberFormat.NumberFormatString : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTimeSpanFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Section> <Sections>k__BackingField;
    public bool IsValid { get; }
    public string FormatString { get; }
    public bool IsDateTimeFormat { get; }
    public bool IsTimeSpanFormat { get; }
    internal IReadOnlyList`1<Section> Sections { get; }
    public NumberFormatString(string formatString);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public bool get_IsDateTimeFormat();
    [CompilerGeneratedAttribute]
public bool get_IsTimeSpanFormat();
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<Section> get_Sections();
    private Section GetFirstSection(SectionType type);
}
internal static class ExcelDataReader.Core.NumberFormat.Parser : object {
    public static Section ParseSection(Tokenizer reader, Boolean& syntaxError);
    internal static int ParseNumberTokens(List`1<string> tokens, int startPosition, List`1& beforeDecimal, Boolean& decimalSeparator, List`1& afterDecimal);
    private static void ParseDate(List`1<string> tokens, List`1& result);
    private static string ReadToken(Tokenizer reader, Boolean& syntaxError);
    private static bool ReadLiteral(Tokenizer reader);
    private static bool TryParseCondition(string token, Condition& result);
    private static bool ReadConditionValue(Tokenizer tokenizer);
    private static bool TryParseColor(string token, Color& color);
}
internal class ExcelDataReader.Core.NumberFormat.Section : object {
    [CompilerGeneratedAttribute]
private SectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Condition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private ExponentialSection <Exponential>k__BackingField;
    [CompilerGeneratedAttribute]
private FractionSection <Fraction>k__BackingField;
    [CompilerGeneratedAttribute]
private DecimalSection <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GeneralTextDateDurationParts>k__BackingField;
    public SectionType Type { get; public set; }
    public Color Color { get; public set; }
    public Condition Condition { get; public set; }
    public ExponentialSection Exponential { get; public set; }
    public FractionSection Fraction { get; public set; }
    public DecimalSection Number { get; public set; }
    public List`1<string> GeneralTextDateDurationParts { get; public set; }
    [CompilerGeneratedAttribute]
public SectionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SectionType value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Condition get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Condition value);
    [CompilerGeneratedAttribute]
public ExponentialSection get_Exponential();
    [CompilerGeneratedAttribute]
public void set_Exponential(ExponentialSection value);
    [CompilerGeneratedAttribute]
public FractionSection get_Fraction();
    [CompilerGeneratedAttribute]
public void set_Fraction(FractionSection value);
    [CompilerGeneratedAttribute]
public DecimalSection get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(DecimalSection value);
    [CompilerGeneratedAttribute]
public List`1<string> get_GeneralTextDateDurationParts();
    [CompilerGeneratedAttribute]
public void set_GeneralTextDateDurationParts(List`1<string> value);
}
internal enum ExcelDataReader.Core.NumberFormat.SectionType : Enum {
    public int value__;
    public static SectionType General;
    public static SectionType Number;
    public static SectionType Fraction;
    public static SectionType Exponential;
    public static SectionType Date;
    public static SectionType Duration;
    public static SectionType Text;
}
internal static class ExcelDataReader.Core.NumberFormat.Token : object {
    public static bool IsExponent(string token);
    public static bool IsLiteral(string token);
    public static bool IsNumberLiteral(string token);
    public static bool IsPlaceholder(string token);
    public static bool IsGeneral(string token);
    public static bool IsDatePart(string token);
    public static bool IsDurationPart(string token);
    public static bool IsDigit09(string token);
    public static bool IsDigit19(string token);
}
internal class ExcelDataReader.Core.NumberFormat.Tokenizer : object {
    private string formatString;
    private int formatStringPosition;
    public int Position { get; }
    public int Length { get; }
    public Tokenizer(string fmt);
    public int get_Position();
    public int get_Length();
    public string Substring(int startIndex, int length);
    public int Peek(int offset);
    public int PeekUntil(int startOffset, int until);
    public bool PeekOneOf(int offset, string s);
    public void Advance(int characters);
    public bool ReadOneOrMore(int c);
    public bool ReadOneOf(string s);
    public bool ReadString(string s, bool ignoreCase);
    public bool ReadEnclosed(char open, char close);
}
internal class ExcelDataReader.Core.OfficeCrypto.AgileEncryptedPackageStream : Stream {
    private static int SegmentLength;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <IV>k__BackingField;
    [CompilerGeneratedAttribute]
private HashIdentifier <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionInfo <Encryption>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SegmentBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SegmentOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SegmentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DecryptedLength>k__BackingField;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private Stream Stream { get; private set; }
    private Byte[] Key { get; }
    private Byte[] IV { get; }
    private HashIdentifier HashAlgorithm { get; }
    private EncryptionInfo Encryption { get; }
    private int Offset { get; private set; }
    private Byte[] SegmentBytes { get; private set; }
    private int SegmentOffset { get; private set; }
    private int SegmentIndex { get; private set; }
    private int DecryptedLength { get; private set; }
    public AgileEncryptedPackageStream(Stream stream, Byte[] key, Byte[] iv, EncryptionInfo encryption);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
private Stream get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
private Byte[] get_Key();
    [CompilerGeneratedAttribute]
private Byte[] get_IV();
    [CompilerGeneratedAttribute]
private HashIdentifier get_HashAlgorithm();
    [CompilerGeneratedAttribute]
private EncryptionInfo get_Encryption();
    [CompilerGeneratedAttribute]
private int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    [CompilerGeneratedAttribute]
private Byte[] get_SegmentBytes();
    [CompilerGeneratedAttribute]
private void set_SegmentBytes(Byte[] value);
    [CompilerGeneratedAttribute]
private int get_SegmentOffset();
    [CompilerGeneratedAttribute]
private void set_SegmentOffset(int value);
    [CompilerGeneratedAttribute]
private int get_SegmentIndex();
    [CompilerGeneratedAttribute]
private void set_SegmentIndex(int value);
    [CompilerGeneratedAttribute]
private int get_DecryptedLength();
    [CompilerGeneratedAttribute]
private void set_DecryptedLength(int value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void ReadSegment();
}
internal class ExcelDataReader.Core.OfficeCrypto.AgileEncryption : EncryptionInfo {
    private static string NEncryption;
    private static string NKeyData;
    private static string NKeyEncryptors;
    private static string NKeyEncryptor;
    private static string NEncryptedKey;
    private static string NsEncryption;
    private static string NsPassword;
    [CompilerGeneratedAttribute]
private CipherIdentifier <CipherAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherMode <CipherChaining>k__BackingField;
    [CompilerGeneratedAttribute]
private HashIdentifier <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlockSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HashSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SaltValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PasswordSaltValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherIdentifier <PasswordCipherAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherMode <PasswordCipherChaining>k__BackingField;
    [CompilerGeneratedAttribute]
private HashIdentifier <PasswordHashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PasswordEncryptedKeyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PasswordEncryptedVerifierHashInput>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PasswordEncryptedVerifierHashValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PasswordSpinCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PasswordKeyBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PasswordBlockSize>k__BackingField;
    public CipherIdentifier CipherAlgorithm { get; public set; }
    public CipherMode CipherChaining { get; public set; }
    public HashIdentifier HashAlgorithm { get; public set; }
    public int KeyBits { get; public set; }
    public int BlockSize { get; public set; }
    public int HashSize { get; public set; }
    public Byte[] SaltValue { get; public set; }
    public Byte[] PasswordSaltValue { get; public set; }
    public CipherIdentifier PasswordCipherAlgorithm { get; public set; }
    public CipherMode PasswordCipherChaining { get; public set; }
    public HashIdentifier PasswordHashAlgorithm { get; public set; }
    public Byte[] PasswordEncryptedKeyValue { get; public set; }
    public Byte[] PasswordEncryptedVerifierHashInput { get; public set; }
    public Byte[] PasswordEncryptedVerifierHashValue { get; public set; }
    public int PasswordSpinCount { get; public set; }
    public int PasswordKeyBits { get; public set; }
    public int PasswordBlockSize { get; public set; }
    public bool IsXor { get; }
    public AgileEncryption(Byte[] bytes);
    [CompilerGeneratedAttribute]
public CipherIdentifier get_CipherAlgorithm();
    [CompilerGeneratedAttribute]
public void set_CipherAlgorithm(CipherIdentifier value);
    [CompilerGeneratedAttribute]
public CipherMode get_CipherChaining();
    [CompilerGeneratedAttribute]
public void set_CipherChaining(CipherMode value);
    [CompilerGeneratedAttribute]
public HashIdentifier get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithm(HashIdentifier value);
    [CompilerGeneratedAttribute]
public int get_KeyBits();
    [CompilerGeneratedAttribute]
public void set_KeyBits(int value);
    [CompilerGeneratedAttribute]
public int get_BlockSize();
    [CompilerGeneratedAttribute]
public void set_BlockSize(int value);
    [CompilerGeneratedAttribute]
public int get_HashSize();
    [CompilerGeneratedAttribute]
public void set_HashSize(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_SaltValue();
    [CompilerGeneratedAttribute]
public void set_SaltValue(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PasswordSaltValue();
    [CompilerGeneratedAttribute]
public void set_PasswordSaltValue(Byte[] value);
    [CompilerGeneratedAttribute]
public CipherIdentifier get_PasswordCipherAlgorithm();
    [CompilerGeneratedAttribute]
public void set_PasswordCipherAlgorithm(CipherIdentifier value);
    [CompilerGeneratedAttribute]
public CipherMode get_PasswordCipherChaining();
    [CompilerGeneratedAttribute]
public void set_PasswordCipherChaining(CipherMode value);
    [CompilerGeneratedAttribute]
public HashIdentifier get_PasswordHashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_PasswordHashAlgorithm(HashIdentifier value);
    [CompilerGeneratedAttribute]
public Byte[] get_PasswordEncryptedKeyValue();
    [CompilerGeneratedAttribute]
public void set_PasswordEncryptedKeyValue(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PasswordEncryptedVerifierHashInput();
    [CompilerGeneratedAttribute]
public void set_PasswordEncryptedVerifierHashInput(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PasswordEncryptedVerifierHashValue();
    [CompilerGeneratedAttribute]
public void set_PasswordEncryptedVerifierHashValue(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_PasswordSpinCount();
    [CompilerGeneratedAttribute]
public void set_PasswordSpinCount(int value);
    [CompilerGeneratedAttribute]
public int get_PasswordKeyBits();
    [CompilerGeneratedAttribute]
public void set_PasswordKeyBits(int value);
    [CompilerGeneratedAttribute]
public int get_PasswordBlockSize();
    [CompilerGeneratedAttribute]
public void set_PasswordBlockSize(int value);
    public virtual bool get_IsXor();
    public virtual SymmetricAlgorithm CreateCipher();
    public virtual Byte[] GenerateSecretKey(string password);
    public virtual Byte[] GenerateBlockKey(int blockNumber, Byte[] secretKey);
    public virtual Stream CreateEncryptedPackageStream(Stream stream, Byte[] secretKey);
    public virtual bool VerifyPassword(string password);
    private static Byte[] GenerateSecretKey(string password, Byte[] saltValue, HashIdentifier hashIdentifier, Byte[] encryptedKeyValue, int spinCount, int keyBits, SymmetricAlgorithm cipher);
    private static Byte[] HashPassword(string password, Byte[] saltValue, HashAlgorithm hashAlgorithm, int spinCount);
    private static HashIdentifier ParseHash(string value);
    private static CipherIdentifier ParseCipher(string value);
    private static CipherMode ParseCipherMode(string value);
    private void ReadXmlEncryptionInfoStream(XmlReader xmlReader);
    private void ReadKeyEncryptors(XmlReader xmlReader);
    private void ReadKeyEncryptor(XmlReader xmlReader);
}
internal enum ExcelDataReader.Core.OfficeCrypto.CipherIdentifier : Enum {
    public int value__;
    public static CipherIdentifier None;
    public static CipherIdentifier RC2;
    public static CipherIdentifier DES;
    public static CipherIdentifier DES3;
    public static CipherIdentifier AES;
    public static CipherIdentifier RC4;
}
internal static class ExcelDataReader.Core.OfficeCrypto.CryptoHelpers : object {
    public static HashAlgorithm Create(HashIdentifier hashAlgorithm);
    public static Byte[] HashBytes(Byte[] bytes, HashIdentifier hashAlgorithm);
    public static Byte[] Combine(Byte[][] arrays);
    public static SymmetricAlgorithm CreateCipher(CipherIdentifier identifier, int keySize, int blockSize, CipherMode mode);
    public static SymmetricAlgorithm InitCipher(SymmetricAlgorithm cipher, int keySize, int blockSize, CipherMode mode);
    public static Byte[] DecryptBytes(SymmetricAlgorithm algo, Byte[] bytes, Byte[] key, Byte[] iv);
    public static Byte[] DecryptBytes(ICryptoTransform transform, Byte[] bytes);
}
internal abstract class ExcelDataReader.Core.OfficeCrypto.EncryptionInfo : object {
    public bool IsXor { get; }
    public abstract virtual bool get_IsXor();
    public static EncryptionInfo Create(ushort xorEncryptionKey, ushort xorHashValue);
    public static EncryptionInfo Create(Byte[] bytes);
    public abstract virtual Byte[] GenerateSecretKey(string password);
    public abstract virtual Byte[] GenerateBlockKey(int blockNumber, Byte[] secretKey);
    public abstract virtual Stream CreateEncryptedPackageStream(Stream stream, Byte[] secretKey);
    public abstract virtual bool VerifyPassword(string password);
    public abstract virtual SymmetricAlgorithm CreateCipher();
}
internal enum ExcelDataReader.Core.OfficeCrypto.HashIdentifier : Enum {
    public int value__;
    public static HashIdentifier None;
    public static HashIdentifier MD5;
    public static HashIdentifier SHA1;
    public static HashIdentifier SHA256;
    public static HashIdentifier SHA384;
    public static HashIdentifier SHA512;
}
internal class ExcelDataReader.Core.OfficeCrypto.RC4Encryption : EncryptionInfo {
    [CompilerGeneratedAttribute]
private Byte[] <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EncryptedVerifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EncryptedVerifierHash>k__BackingField;
    public Byte[] Salt { get; }
    public Byte[] EncryptedVerifier { get; }
    public Byte[] EncryptedVerifierHash { get; }
    public bool IsXor { get; }
    public RC4Encryption(Byte[] bytes);
    [CompilerGeneratedAttribute]
public Byte[] get_Salt();
    [CompilerGeneratedAttribute]
public Byte[] get_EncryptedVerifier();
    [CompilerGeneratedAttribute]
public Byte[] get_EncryptedVerifierHash();
    public virtual bool get_IsXor();
    public static Byte[] GenerateSecretKey(string password, Byte[] salt);
    public virtual SymmetricAlgorithm CreateCipher();
    public virtual Stream CreateEncryptedPackageStream(Stream stream, Byte[] secretKey);
    public virtual Byte[] GenerateBlockKey(int blockNumber, Byte[] secretKey);
    public virtual Byte[] GenerateSecretKey(string password);
    public virtual bool VerifyPassword(string password);
}
internal class ExcelDataReader.Core.OfficeCrypto.RC4Managed : SymmetricAlgorithm {
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
internal class ExcelDataReader.Core.OfficeCrypto.StandardEncryptedPackageStream : Stream {
    [CompilerGeneratedAttribute]
private CryptoStream <BaseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private SymmetricAlgorithm <Cipher>k__BackingField;
    [CompilerGeneratedAttribute]
private ICryptoTransform <Decryptor>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DecryptedLength>k__BackingField;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private CryptoStream BaseStream { get; private set; }
    private SymmetricAlgorithm Cipher { get; private set; }
    private ICryptoTransform Decryptor { get; private set; }
    private long DecryptedLength { get; }
    public StandardEncryptedPackageStream(Stream underlyingStream, Byte[] secretKey, StandardEncryption encryption);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [CompilerGeneratedAttribute]
private CryptoStream get_BaseStream();
    [CompilerGeneratedAttribute]
private void set_BaseStream(CryptoStream value);
    [CompilerGeneratedAttribute]
private SymmetricAlgorithm get_Cipher();
    [CompilerGeneratedAttribute]
private void set_Cipher(SymmetricAlgorithm value);
    [CompilerGeneratedAttribute]
private ICryptoTransform get_Decryptor();
    [CompilerGeneratedAttribute]
private void set_Decryptor(ICryptoTransform value);
    [CompilerGeneratedAttribute]
private long get_DecryptedLength();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
internal class ExcelDataReader.Core.OfficeCrypto.StandardEncryption : EncryptionInfo {
    private static int AesBlockSize;
    private static int RC4BlockSize;
    [CompilerGeneratedAttribute]
private CipherIdentifier <CipherAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private HashIdentifier <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlockSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeySize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CSPName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SaltValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Verifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <VerifierHash>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VerifierHashBytesNeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionHeaderFlags <Flags>k__BackingField;
    public CipherIdentifier CipherAlgorithm { get; public set; }
    public HashIdentifier HashAlgorithm { get; public set; }
    public int BlockSize { get; public set; }
    public int KeySize { get; public set; }
    public string CSPName { get; public set; }
    public Byte[] SaltValue { get; public set; }
    public Byte[] Verifier { get; public set; }
    public Byte[] VerifierHash { get; public set; }
    public int VerifierHashBytesNeeded { get; public set; }
    public bool IsXor { get; }
    private EncryptionHeaderFlags Flags { get; private set; }
    public StandardEncryption(Byte[] bytes);
    [CompilerGeneratedAttribute]
public CipherIdentifier get_CipherAlgorithm();
    [CompilerGeneratedAttribute]
public void set_CipherAlgorithm(CipherIdentifier value);
    [CompilerGeneratedAttribute]
public HashIdentifier get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithm(HashIdentifier value);
    [CompilerGeneratedAttribute]
public int get_BlockSize();
    [CompilerGeneratedAttribute]
public void set_BlockSize(int value);
    [CompilerGeneratedAttribute]
public int get_KeySize();
    [CompilerGeneratedAttribute]
public void set_KeySize(int value);
    [CompilerGeneratedAttribute]
public string get_CSPName();
    [CompilerGeneratedAttribute]
public void set_CSPName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_SaltValue();
    [CompilerGeneratedAttribute]
public void set_SaltValue(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Verifier();
    [CompilerGeneratedAttribute]
public void set_Verifier(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_VerifierHash();
    [CompilerGeneratedAttribute]
public void set_VerifierHash(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_VerifierHashBytesNeeded();
    [CompilerGeneratedAttribute]
public void set_VerifierHashBytesNeeded(int value);
    public virtual bool get_IsXor();
    [CompilerGeneratedAttribute]
private EncryptionHeaderFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(EncryptionHeaderFlags value);
    public virtual SymmetricAlgorithm CreateCipher();
    public virtual Stream CreateEncryptedPackageStream(Stream stream, Byte[] secretKey);
    public virtual Byte[] GenerateBlockKey(int blockNumber, Byte[] secretKey);
    public virtual Byte[] GenerateSecretKey(string password);
    public virtual bool VerifyPassword(string password);
    private static Byte[] GenerateCryptoApiSecretKey(string password, Byte[] saltValue, HashIdentifier hashAlgorithm, int keySize);
    private static Byte[] GenerateEcma376SecretKey(string password, Byte[] saltValue, HashIdentifier hashIdentifier, int keySize, int verifierHashSize);
    private static Byte[] DeriveKey(Byte[] hashValue, HashAlgorithm hashAlgorithm, int keySize, int verifierHashSize);
}
internal class ExcelDataReader.Core.OfficeCrypto.XorEncryption : EncryptionInfo {
    [CompilerGeneratedAttribute]
private ushort <EncryptionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <HashValue>k__BackingField;
    public ushort EncryptionKey { get; public set; }
    public ushort HashValue { get; public set; }
    public bool IsXor { get; }
    [CompilerGeneratedAttribute]
public ushort get_EncryptionKey();
    [CompilerGeneratedAttribute]
public void set_EncryptionKey(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_HashValue();
    [CompilerGeneratedAttribute]
public void set_HashValue(ushort value);
    public virtual bool get_IsXor();
    public virtual SymmetricAlgorithm CreateCipher();
    public virtual Stream CreateEncryptedPackageStream(Stream stream, Byte[] secretKey);
    public virtual Byte[] GenerateBlockKey(int blockNumber, Byte[] secretKey);
    public virtual Byte[] GenerateSecretKey(string password);
    public virtual bool VerifyPassword(string password);
}
internal class ExcelDataReader.Core.OfficeCrypto.XorManaged : SymmetricAlgorithm {
    private static Byte[] PadArray;
    private static UInt16[] InitialCode;
    private static UInt16[] XorMatrix;
    private static XorManaged();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
    internal static ushort CreatePasswordVerifier_Method1(Byte[] passwordBytes);
    internal static ushort CreateXorKey_Method1(Byte[] passwordBytes);
    internal static Byte[] CreateXorArray_Method1(Byte[] passwordBytes);
    private static byte RotateLeft(byte b, int shift);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class ExcelDataReader.Core.OpenXmlFormat.BinaryFormat.BiffReader : RecordReader {
    private Byte[] _buffer;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    protected Stream Stream { get; }
    public BiffReader(Stream stream);
    [CompilerGeneratedAttribute]
protected Stream get_Stream();
    [NullableContextAttribute("2")]
public virtual Record Read();
    protected static UInt32 GetDWord(Byte[] buffer, UInt32 offset);
    protected static int GetInt32(Byte[] buffer, UInt32 offset);
    protected static ushort GetWord(Byte[] buffer, UInt32 offset);
    protected static string GetString(Byte[] buffer, UInt32 offset, UInt32 length);
    protected static string GetNullableString(Byte[] buffer, UInt32& offset);
    protected static double GetRkNumber(Byte[] buffer, UInt32 offset);
    protected static double GetDouble(Byte[] buffer, UInt32 offset);
    protected abstract virtual Record ReadOverride(Byte[] buffer, UInt32 recordId, UInt32 recordLength);
    protected virtual void Dispose(bool disposing);
    private bool TryReadVariableValue(UInt32& value);
}
internal class ExcelDataReader.Core.OpenXmlFormat.BinaryFormat.BiffSharedStringsReader : BiffReader {
    private static int StringItem;
    public BiffSharedStringsReader(Stream stream);
    protected virtual Record ReadOverride(Byte[] buffer, UInt32 recordId, UInt32 recordLength);
}
internal class ExcelDataReader.Core.OpenXmlFormat.BinaryFormat.BiffStylesReader : BiffReader {
    private static int Xf;
    private static int CellXfStart;
    private static int CellXfEnd;
    private static int CellStyleXfStart;
    private static int CellStyleXfEnd;
    private static int NumberFormatStart;
    private static int NumberFormat;
    private static int NumberFormatEnd;
    private bool _inCellXf;
    private bool _inCellStyleXf;
    private bool _inNumberFormat;
    public BiffStylesReader(Stream stream);
    protected virtual Record ReadOverride(Byte[] buffer, UInt32 recordId, UInt32 recordLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ExcelDataReader.Core.OpenXmlFormat.BinaryFormat.BiffWorkbookReader : BiffReader {
    private static int WorkbookPr;
    private static int Sheet;
    private Dictionary`2<string, string> _worksheetRels;
    public BiffWorkbookReader(Stream stream, Dictionary`2<string, string> worksheetRels);
    protected virtual Record ReadOverride(Byte[] buffer, UInt32 recordId, UInt32 recordLength);
}
internal class ExcelDataReader.Core.OpenXmlFormat.BinaryFormat.BiffWorksheetReader : BiffReader {
    private static UInt32 Row;
    private static UInt32 Blank;
    private static UInt32 Number;
    private static UInt32 BoolError;
    private static UInt32 Bool;
    private static UInt32 Float;
    private static UInt32 String;
    private static UInt32 SharedString;
    private static UInt32 FormulaString;
    private static UInt32 FormulaNumber;
    private static UInt32 FormulaBool;
    private static UInt32 FormulaError;
    private static UInt32 BrtCellRString;
    private static UInt32 SheetDataBegin;
    private static UInt32 SheetDataEnd;
    private static UInt32 SheetPr;
    private static UInt32 SheetFormatPr;
    private static UInt32 Column;
    private static UInt32 HeaderFooter;
    private static UInt32 MergeCell;
    public BiffWorksheetReader(Stream stream);
    protected virtual Record ReadOverride(Byte[] buffer, UInt32 recordId, UInt32 recordLength);
    [CompilerGeneratedAttribute]
internal static CellRecord <ReadOverride>g__ReadCell|21_0(object value, Nullable`1<CellError> errorValue, <>c__DisplayClass21_0& );
}
internal abstract class ExcelDataReader.Core.OpenXmlFormat.RecordReader : object {
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
public abstract virtual Record Read();
    protected abstract virtual void Dispose(bool disposing);
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.CellRecord : Record {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <XfIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CellError> <Error>k__BackingField;
    public int ColumnIndex { get; }
    public int XfIndex { get; }
    public object Value { get; }
    public Nullable`1<CellError> Error { get; }
    public CellRecord(int columnIndex, int xfIndex, object value, Nullable`1<CellError> error);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public int get_XfIndex();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Nullable`1<CellError> get_Error();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.CellStyleExtendedFormatRecord : Record {
    [CompilerGeneratedAttribute]
private ExtendedFormat <ExtendedFormat>k__BackingField;
    public ExtendedFormat ExtendedFormat { get; }
    public CellStyleExtendedFormatRecord(ExtendedFormat extendedFormat);
    [CompilerGeneratedAttribute]
public ExtendedFormat get_ExtendedFormat();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.ColumnRecord : Record {
    [CompilerGeneratedAttribute]
private Column <Column>k__BackingField;
    public Column Column { get; }
    public ColumnRecord(Column column);
    [CompilerGeneratedAttribute]
public Column get_Column();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.ExtendedFormatRecord : Record {
    [CompilerGeneratedAttribute]
private ExtendedFormat <ExtendedFormat>k__BackingField;
    public ExtendedFormat ExtendedFormat { get; }
    public ExtendedFormatRecord(ExtendedFormat extendedFormat);
    [CompilerGeneratedAttribute]
public ExtendedFormat get_ExtendedFormat();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.HeaderFooterRecord : Record {
    [CompilerGeneratedAttribute]
private HeaderFooter <HeaderFooter>k__BackingField;
    public HeaderFooter HeaderFooter { get; }
    public HeaderFooterRecord(HeaderFooter headerFooter);
    [CompilerGeneratedAttribute]
public HeaderFooter get_HeaderFooter();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.MergeCellRecord : Record {
    [CompilerGeneratedAttribute]
private CellRange <Range>k__BackingField;
    public CellRange Range { get; }
    public MergeCellRecord(CellRange range);
    [CompilerGeneratedAttribute]
public CellRange get_Range();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.NumberFormatRecord : Record {
    [CompilerGeneratedAttribute]
private int <FormatIndexInFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    public int FormatIndexInFile { get; }
    public string FormatString { get; }
    public NumberFormatRecord(int formatIndexInFile, string formatString);
    [CompilerGeneratedAttribute]
public int get_FormatIndexInFile();
    [CompilerGeneratedAttribute]
public string get_FormatString();
}
internal abstract class ExcelDataReader.Core.OpenXmlFormat.Records.Record : object {
    [CompilerGeneratedAttribute]
private static Record <Default>k__BackingField;
    internal static Record Default { get; }
    private static Record();
    [CompilerGeneratedAttribute]
internal static Record get_Default();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.RowHeaderRecord : Record {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Height>k__BackingField;
    public int RowIndex { get; }
    public bool Hidden { get; }
    public Nullable`1<double> Height { get; }
    public RowHeaderRecord(int rowIndex, bool hidden, Nullable`1<double> height);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Height();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.SharedStringRecord : Record {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public SharedStringRecord(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.SheetDataBeginRecord : Record {
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.SheetDataEndRecord : Record {
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.SheetFormatPrRecord : Record {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DefaultRowHeight>k__BackingField;
    public Nullable`1<double> DefaultRowHeight { get; }
    public SheetFormatPrRecord(Nullable`1<double> defaultRowHeight);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DefaultRowHeight();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.SheetPrRecord : Record {
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    public string CodeName { get; }
    public SheetPrRecord(string codeName);
    [CompilerGeneratedAttribute]
public string get_CodeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ExcelDataReader.Core.OpenXmlFormat.Records.SheetRecord : Record {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisibleState>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Rid>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Name { get; }
    public string VisibleState { get; }
    public UInt32 Id { get; }
    [NullableAttribute("2")]
public string Rid { get; }
    [NullableAttribute("2")]
public string Path { get; }
    public SheetRecord(string name, UInt32 id, string rid, string visibleState, string path);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_VisibleState();
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Rid();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
}
internal class ExcelDataReader.Core.OpenXmlFormat.Records.WorkbookPrRecord : Record {
    [CompilerGeneratedAttribute]
private bool <Date1904>k__BackingField;
    public bool Date1904 { get; }
    public WorkbookPrRecord(bool date1904);
    [CompilerGeneratedAttribute]
public bool get_Date1904();
}
internal class ExcelDataReader.Core.OpenXmlFormat.XlsxSST : List`1<string> {
}
internal class ExcelDataReader.Core.OpenXmlFormat.XlsxWorkbook : CommonWorkbook {
    private ZipWorker _zipWorker;
    [CompilerGeneratedAttribute]
private List`1<SheetRecord> <Sheets>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsxSST <SST>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDate1904>k__BackingField;
    public List`1<SheetRecord> Sheets { get; }
    public XlsxSST SST { get; }
    public bool IsDate1904 { get; private set; }
    public int ResultsCount { get; }
    public XlsxWorkbook(ZipWorker zipWorker);
    [CompilerGeneratedAttribute]
public List`1<SheetRecord> get_Sheets();
    [CompilerGeneratedAttribute]
public XlsxSST get_SST();
    [CompilerGeneratedAttribute]
public bool get_IsDate1904();
    [CompilerGeneratedAttribute]
private void set_IsDate1904(bool value);
    public sealed virtual int get_ResultsCount();
    [IteratorStateMachineAttribute("ExcelDataReader.Core.OpenXmlFormat.XlsxWorkbook/<ReadWorksheets>d__14")]
public sealed virtual IEnumerable`1<XlsxWorksheet> ReadWorksheets();
    private void ReadWorkbook();
    private void ReadSharedStrings();
    private void ReadStyles();
}
internal class ExcelDataReader.Core.OpenXmlFormat.XlsxWorksheet : object {
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisibleState>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderFooter <HeaderFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultRowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private CellRange[] <MergeCells>k__BackingField;
    [CompilerGeneratedAttribute]
private Column[] <ColumnWidths>k__BackingField;
    [CompilerGeneratedAttribute]
private ZipWorker <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private XlsxWorkbook <Workbook>k__BackingField;
    public int FieldCount { get; }
    public int RowCount { get; }
    public string Name { get; }
    public string CodeName { get; }
    public string VisibleState { get; }
    public HeaderFooter HeaderFooter { get; }
    public double DefaultRowHeight { get; }
    public UInt32 Id { get; }
    public string Rid { get; public set; }
    public string Path { get; public set; }
    public CellRange[] MergeCells { get; }
    public Column[] ColumnWidths { get; }
    private ZipWorker Document { get; }
    private XlsxWorkbook Workbook { get; }
    public XlsxWorksheet(ZipWorker document, XlsxWorkbook workbook, SheetRecord refSheet);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public sealed virtual int get_RowCount();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CodeName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_VisibleState();
    [CompilerGeneratedAttribute]
public sealed virtual HeaderFooter get_HeaderFooter();
    [CompilerGeneratedAttribute]
public double get_DefaultRowHeight();
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public string get_Rid();
    [CompilerGeneratedAttribute]
public void set_Rid(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CellRange[] get_MergeCells();
    [CompilerGeneratedAttribute]
public sealed virtual Column[] get_ColumnWidths();
    [CompilerGeneratedAttribute]
private ZipWorker get_Document();
    [CompilerGeneratedAttribute]
private XlsxWorkbook get_Workbook();
    [IteratorStateMachineAttribute("ExcelDataReader.Core.OpenXmlFormat.XlsxWorksheet/<ReadRows>d__45")]
public sealed virtual IEnumerable`1<Row> ReadRows();
    private object ConvertCellValue(object value, int numberFormatIndex);
}
internal static class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.StringHelper : object {
    private static string ElementT;
    private static string ElementR;
    public static string ReadStringItem(XmlReader reader, string nsSpreadsheetMl);
    private static void ReadRichTextRun(XmlReader reader, StringBuilder sb, string nsSpreadsheetMl);
    private static string ReadElementContent(XmlReader reader);
}
internal static class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlNamespaces : object {
    public static string StrictNsSpreadsheetMl;
    public static string StrictNsDocumentRelationship;
    public static string NsSpreadsheetMl;
    public static string NsDocumentRelationship;
}
internal class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlProperNamespaces : object {
    [CompilerGeneratedAttribute]
private string <NsSpreadsheetMl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NsDocumentRelationship>k__BackingField;
    public string NsSpreadsheetMl { get; }
    public string NsDocumentRelationship { get; }
    public XmlProperNamespaces(bool isStrict);
    [CompilerGeneratedAttribute]
public string get_NsSpreadsheetMl();
    [CompilerGeneratedAttribute]
public string get_NsDocumentRelationship();
}
internal abstract class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlRecordReader : RecordReader {
    private IEnumerator`1<Record> _enumerator;
    [CompilerGeneratedAttribute]
private XmlProperNamespaces <ProperNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlReader <Reader>k__BackingField;
    public XmlProperNamespaces ProperNamespaces { get; public set; }
    protected XmlReader Reader { get; }
    public XmlRecordReader(XmlReader reader);
    [CompilerGeneratedAttribute]
public XmlProperNamespaces get_ProperNamespaces();
    [CompilerGeneratedAttribute]
public void set_ProperNamespaces(XmlProperNamespaces value);
    [CompilerGeneratedAttribute]
protected XmlReader get_Reader();
    public virtual Record Read();
    protected abstract virtual IEnumerable`1<Record> ReadOverride();
    protected virtual void Dispose(bool disposing);
}
internal class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlSharedStringsReader : XmlRecordReader {
    private static string ElementSst;
    private static string ElementStringItem;
    public XmlSharedStringsReader(XmlReader reader);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlSharedStringsReader/<ReadOverride>d__3")]
protected virtual IEnumerable`1<Record> ReadOverride();
}
internal class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlStylesReader : XmlRecordReader {
    private static string ElementStyleSheet;
    private static string ANumFmtId;
    private static string ElementCellCrossReference;
    private static string ElementCellStyleCrossReference;
    private static string NXF;
    private static string AXFId;
    private static string ElementNumberFormats;
    private static string NNumFmt;
    private static string AFormatCode;
    private static string NAlignment;
    private static string AIndent;
    private static string AHorizontal;
    private static string NProtection;
    private static string AHidden;
    private static string ALocked;
    public XmlStylesReader(XmlReader reader);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlStylesReader/<ReadOverride>d__16")]
protected virtual IEnumerable`1<Record> ReadOverride();
    [IteratorStateMachineAttribute("ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlStylesReader/<ReadCellXfs>d__17")]
private IEnumerable`1<ExtendedFormat> ReadCellXfs(string nsSpreadsheetMl);
    [CompilerGeneratedAttribute]
internal static void <ReadCellXfs>g__ReadAlignment|17_0(XmlReader reader, string nsSpreadsheetMl, Int32& indentLevel, HorizontalAlignment& horizontalAlignment, Boolean& hidden, Boolean& locked);
}
internal class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlWorkbookReader : XmlRecordReader {
    private static string ElementWorkbook;
    private static string ElementWorkbookProperties;
    private static string ElementSheets;
    private static string ElementSheet;
    private static string AttributeSheetId;
    private static string AttributeVisibleState;
    private static string AttributeName;
    private static string AttributeRelationshipId;
    private Dictionary`2<string, string> _worksheetsRels;
    public XmlWorkbookReader(XmlReader reader, Dictionary`2<string, string> worksheetsRels);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlWorkbookReader/<ReadOverride>d__10")]
protected virtual IEnumerable`1<Record> ReadOverride();
    private bool CheckStartElementAndApplyNamespaces(string element);
}
internal class ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlWorksheetReader : XmlRecordReader {
    private static string NWorksheet;
    private static string NSheetData;
    private static string NRow;
    private static string ARef;
    private static string AR;
    private static string NV;
    private static string NIs;
    private static string AT;
    private static string AS;
    private static string NC;
    private static string NInlineStr;
    private static string NStr;
    private static string NMergeCells;
    private static string NSheetProperties;
    private static string NSheetFormatProperties;
    private static string ADefaultRowHeight;
    private static string NHeaderFooter;
    private static string ADifferentFirst;
    private static string ADifferentOddEven;
    private static string NFirstHeader;
    private static string NFirstFooter;
    private static string NOddHeader;
    private static string NOddFooter;
    private static string NEvenHeader;
    private static string NEvenFooter;
    private static string NCols;
    private static string NCol;
    private static string AMin;
    private static string AMax;
    private static string AHidden;
    private static string AWidth;
    private static string ACustomWidth;
    private static string NMergeCell;
    private static string ACustomHeight;
    private static string AHt;
    public XmlWorksheetReader(XmlReader reader);
    [IteratorStateMachineAttribute("ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlWorksheetReader/<ReadOverride>d__36")]
protected virtual IEnumerable`1<Record> ReadOverride();
    private HeaderFooter ReadHeaderFooter(string nsSpreadsheetMl);
    private CellRecord ReadCell(int nextColumnIndex, string nsSpreadsheetMl);
    [CompilerGeneratedAttribute]
internal static void <ReadCell>g__ConvertCellValue|38_0(string rawValue, string aT, Object& value, Nullable`1& error);
    [CompilerGeneratedAttribute]
internal static Nullable`1<CellError> <ReadCell>g__ConvertError|38_1(string e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ExcelDataReader.Core.OpenXmlFormat.ZipWorker : object {
    private static string DefaultFileWorkbook;
    private static string Format;
    private static string BinFormat;
    private static XmlReaderSettings XmlSettings;
    private Dictionary`2<string, ZipArchiveEntry> _entries;
    private Dictionary`2<string, string> _worksheetRels;
    private string _fileWorkbook;
    [NullableAttribute("2")]
private string _fileSharedStrings;
    [NullableAttribute("2")]
private string _fileStyles;
    [NullableAttribute("2")]
private ZipArchive _zipFile;
    public ZipWorker(Stream fileStream);
    private static ZipWorker();
    [NullableContextAttribute("2")]
public RecordReader GetSharedStringsReader();
    [NullableContextAttribute("2")]
public RecordReader GetStylesReader();
    [NullableContextAttribute("2")]
public RecordReader GetWorkbookReader();
    public RecordReader GetWorksheetReader(string sheetPath);
    private static Stream OpenZipEntry(ZipArchiveEntry zipEntry);
    [NullableContextAttribute("2")]
private ZipArchiveEntry FindEntry(string name);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__ResolvePath|10_0(string basePath, string path);
    [CompilerGeneratedAttribute]
private string <.ctor>g__CheckPath|10_1(string path);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private string <.ctor>g__ReadRootRels|10_2();
}
internal static class ExcelDataReader.Core.ReferenceHelper : object {
    public static bool ParseReference(string value, Int32& column, Int32& row);
    private static bool IsDigit(int ch);
    private static bool TryParseDecInt(string s, int startIndex, Int32& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ExcelDataReader.Core.Row : object {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Cell> <Cells>k__BackingField;
    public int RowIndex { get; }
    public double Height { get; }
    public List`1<Cell> Cells { get; }
    public Row(int rowIndex, double height, List`1<Cell> cells);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public List`1<Cell> get_Cells();
}
internal static class ExcelDataReader.Core.XmlReaderHelper : object {
    public static bool ReadFirstContent(XmlReader xmlReader);
    public static bool SkipContent(XmlReader xmlReader);
}
internal static class ExcelDataReader.Errors : object {
    public static string ErrorStreamWorkbookNotFound;
    public static string ErrorWorkbookIsNotStream;
    public static string ErrorWorkbookGlobalsInvalidData;
    public static string ErrorFatBadSector;
    public static string ErrorFatRead;
    public static string ErrorEndOfFile;
    public static string ErrorCyclicSectorChain;
    public static string ErrorHeaderSignature;
    public static string ErrorHeaderOrder;
    public static string ErrorBiffRecordSize;
    public static string ErrorBiffIlegalBefore;
    public static string ErrorBiffIlegalAfter;
    public static string ErrorDirectoryEntryArray;
    public static string ErrorCompoundNoOpenXml;
    public static string ErrorZipNoOpenXml;
    public static string ErrorInvalidPassword;
}
internal class ExcelDataReader.ExcelBinaryReader : ExcelDataReader`2<XlsWorkbook, XlsWorksheet> {
    public ExcelBinaryReader(Stream stream, string password, Encoding fallbackEncoding);
    public virtual void Close();
}
internal class ExcelDataReader.ExcelCsvReader : ExcelDataReader`2<CsvWorkbook, CsvWorksheet> {
    public ExcelCsvReader(Stream stream, Encoding fallbackEncoding, Char[] autodetectSeparators, int analyzeInitialCsvRows);
    public virtual void Close();
}
[DefaultMemberAttribute("Item")]
internal abstract class ExcelDataReader.ExcelDataReader`2 : object {
    private IEnumerator`1<TWorksheet> _worksheetIterator;
    private IEnumerator`1<Row> _rowIterator;
    private IEnumerator`1<TWorksheet> _cachedWorksheetIterator;
    private List`1<TWorksheet> _cachedWorksheets;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private TWorkbook <Workbook>k__BackingField;
    [CompilerGeneratedAttribute]
private Cell[] <RowCells>k__BackingField;
    public string Name { get; }
    public string CodeName { get; }
    public string VisibleState { get; }
    public HeaderFooter HeaderFooter { get; }
    public CellRange[] MergeCells { get; }
    public int Depth { get; private set; }
    public int ResultsCount { get; }
    public bool IsClosed { get; private set; }
    public int FieldCount { get; }
    public int RowCount { get; }
    public int RecordsAffected { get; }
    public double RowHeight { get; }
    protected TWorkbook Workbook { get; protected set; }
    protected Cell[] RowCells { get; protected set; }
    public object Item { get; }
    public object Item { get; }
    protected virtual override void Finalize();
    public sealed virtual string get_Name();
    public sealed virtual string get_CodeName();
    public sealed virtual string get_VisibleState();
    public sealed virtual HeaderFooter get_HeaderFooter();
    public sealed virtual CellRange[] get_MergeCells();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Depth();
    [CompilerGeneratedAttribute]
private void set_Depth(int value);
    public sealed virtual int get_ResultsCount();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    public sealed virtual int get_FieldCount();
    public sealed virtual int get_RowCount();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual double get_RowHeight();
    [CompilerGeneratedAttribute]
protected TWorkbook get_Workbook();
    [CompilerGeneratedAttribute]
protected void set_Workbook(TWorkbook value);
    [CompilerGeneratedAttribute]
protected Cell[] get_RowCells();
    [CompilerGeneratedAttribute]
protected void set_RowCells(Cell[] value);
    public sealed virtual object get_Item(int i);
    public sealed virtual object get_Item(string name);
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual string GetString(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
    public sealed virtual string GetNumberFormatString(int i);
    public sealed virtual int GetNumberFormatIndex(int i);
    public sealed virtual double GetColumnWidth(int i);
    public sealed virtual CellStyle GetCellStyle(int i);
    public sealed virtual Nullable`1<CellError> GetCellError(int i);
    public sealed virtual void Reset();
    public virtual void Close();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [IteratorStateMachineAttribute("ExcelDataReader.ExcelDataReader`2/<ReadWorksheetsWithCache>d__79")]
private IEnumerable`1<TWorksheet> ReadWorksheetsWithCache();
    private void ResetSheetData();
    private void ReadCurrentRow();
}
internal class ExcelDataReader.ExcelOpenXmlReader : ExcelDataReader`2<XlsxWorkbook, XlsxWorksheet> {
    [CompilerGeneratedAttribute]
private ZipWorker <Document>k__BackingField;
    private ZipWorker Document { get; private set; }
    public ExcelOpenXmlReader(Stream stream);
    [CompilerGeneratedAttribute]
private ZipWorker get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(ZipWorker value);
    public virtual void Close();
}
public class ExcelDataReader.ExcelReaderConfiguration : object {
    [CompilerGeneratedAttribute]
private Encoding <FallbackEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <AutodetectSeparators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LeaveOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnalyzeInitialCsvRows>k__BackingField;
    public Encoding FallbackEncoding { get; public set; }
    public string Password { get; public set; }
    public Char[] AutodetectSeparators { get; public set; }
    public bool LeaveOpen { get; public set; }
    public int AnalyzeInitialCsvRows { get; public set; }
    [CompilerGeneratedAttribute]
public Encoding get_FallbackEncoding();
    [CompilerGeneratedAttribute]
public void set_FallbackEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public Char[] get_AutodetectSeparators();
    [CompilerGeneratedAttribute]
public void set_AutodetectSeparators(Char[] value);
    [CompilerGeneratedAttribute]
public bool get_LeaveOpen();
    [CompilerGeneratedAttribute]
public void set_LeaveOpen(bool value);
    [CompilerGeneratedAttribute]
public int get_AnalyzeInitialCsvRows();
    [CompilerGeneratedAttribute]
public void set_AnalyzeInitialCsvRows(int value);
}
public static class ExcelDataReader.ExcelReaderFactory : object {
    private static string DirectoryEntryWorkbook;
    private static string DirectoryEntryBook;
    private static string DirectoryEntryEncryptedPackage;
    private static string DirectoryEntryEncryptionInfo;
    public static IExcelDataReader CreateReader(Stream fileStream, ExcelReaderConfiguration configuration);
    public static IExcelDataReader CreateBinaryReader(Stream fileStream, ExcelReaderConfiguration configuration);
    public static IExcelDataReader CreateOpenXmlReader(Stream fileStream, ExcelReaderConfiguration configuration);
    public static IExcelDataReader CreateCsvReader(Stream fileStream, ExcelReaderConfiguration configuration);
    private static bool TryGetWorkbook(Stream fileStream, CompoundDocument document, Stream& stream);
    private static bool TryGetEncryptedPackage(Stream fileStream, CompoundDocument document, string password, Stream& stream);
}
public class ExcelDataReader.Exceptions.CompoundDocumentException : ExcelReaderException {
    public CompoundDocumentException(string message);
    public CompoundDocumentException(string message, Exception inner);
}
public class ExcelDataReader.Exceptions.ExcelReaderException : Exception {
    public ExcelReaderException(string message);
    public ExcelReaderException(string message, Exception inner);
    protected ExcelReaderException(SerializationInfo info, StreamingContext context);
}
public class ExcelDataReader.Exceptions.HeaderException : ExcelReaderException {
    public HeaderException(string message);
    public HeaderException(string message, Exception inner);
    protected HeaderException(SerializationInfo info, StreamingContext context);
}
public class ExcelDataReader.Exceptions.InvalidPasswordException : ExcelReaderException {
    public InvalidPasswordException(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ExcelDataReader.HeaderFooter : object {
    [CompilerGeneratedAttribute]
private bool <HasDifferentFirst>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDifferentOddEven>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OddHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OddFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvenHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvenFooter>k__BackingField;
    public bool HasDifferentFirst { get; }
    public bool HasDifferentOddEven { get; }
    public string FirstHeader { get; internal set; }
    public string FirstFooter { get; internal set; }
    public string OddHeader { get; internal set; }
    public string OddFooter { get; internal set; }
    public string EvenHeader { get; internal set; }
    public string EvenFooter { get; internal set; }
    internal HeaderFooter(bool hasDifferentFirst, bool hasDifferentOddEven);
    internal HeaderFooter(string footer, string header);
    [CompilerGeneratedAttribute]
public bool get_HasDifferentFirst();
    [CompilerGeneratedAttribute]
public bool get_HasDifferentOddEven();
    [CompilerGeneratedAttribute]
public string get_FirstHeader();
    [CompilerGeneratedAttribute]
internal void set_FirstHeader(string value);
    [CompilerGeneratedAttribute]
public string get_FirstFooter();
    [CompilerGeneratedAttribute]
internal void set_FirstFooter(string value);
    [CompilerGeneratedAttribute]
public string get_OddHeader();
    [CompilerGeneratedAttribute]
internal void set_OddHeader(string value);
    [CompilerGeneratedAttribute]
public string get_OddFooter();
    [CompilerGeneratedAttribute]
internal void set_OddFooter(string value);
    [CompilerGeneratedAttribute]
public string get_EvenHeader();
    [CompilerGeneratedAttribute]
internal void set_EvenHeader(string value);
    [CompilerGeneratedAttribute]
public string get_EvenFooter();
    [CompilerGeneratedAttribute]
internal void set_EvenFooter(string value);
}
public enum ExcelDataReader.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment General;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Centered;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Filled;
    public static HorizontalAlignment Justified;
    public static HorizontalAlignment CenteredAcrossSelection;
    public static HorizontalAlignment Distributed;
}
public interface ExcelDataReader.IExcelDataReader {
    public string Name { get; }
    public string CodeName { get; }
    public string VisibleState { get; }
    public HeaderFooter HeaderFooter { get; }
    public CellRange[] MergeCells { get; }
    public int ResultsCount { get; }
    public int RowCount { get; }
    public double RowHeight { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_CodeName();
    public abstract virtual string get_VisibleState();
    public abstract virtual HeaderFooter get_HeaderFooter();
    public abstract virtual CellRange[] get_MergeCells();
    public abstract virtual int get_ResultsCount();
    public abstract virtual int get_RowCount();
    public abstract virtual double get_RowHeight();
    public abstract virtual void Reset();
    public abstract virtual string GetNumberFormatString(int i);
    public abstract virtual int GetNumberFormatIndex(int i);
    public abstract virtual double GetColumnWidth(int i);
    public abstract virtual CellStyle GetCellStyle(int i);
    public abstract virtual Nullable`1<CellError> GetCellError(int i);
}
public interface ExcelDataReader.Log.ILog {
    public abstract virtual void Debug(string message, Object[] formatting);
    public abstract virtual void Info(string message, Object[] formatting);
    public abstract virtual void Warn(string message, Object[] formatting);
    public abstract virtual void Error(string message, Object[] formatting);
    public abstract virtual void Fatal(string message, Object[] formatting);
}
public interface ExcelDataReader.Log.ILogFactory {
    public abstract virtual ILog Create(Type loggingType);
}
public static class ExcelDataReader.Log.Log : object {
    private static object LockObject;
    private static Type logType;
    private static ILogFactory factoryInstance;
    private static Log();
    public static void InitializeWith();
    public static ILog GetLoggerFor(Type loggingType);
}
public class ExcelDataReader.Log.Logger.NullLogFactory : ValueType {
    public sealed virtual void Debug(string message, Object[] formatting);
    public sealed virtual void Info(string message, Object[] formatting);
    public sealed virtual void Warn(string message, Object[] formatting);
    public sealed virtual void Error(string message, Object[] formatting);
    public sealed virtual void Fatal(string message, Object[] formatting);
    public sealed virtual ILog Create(Type loggingType);
}
public static class ExcelDataReader.Log.LogManager : object {
    public static ILog Log(T type);
}
internal static class ExcelDataReader.Misc.DateTimeHelper : object {
    public static double OADateMinAsDouble;
    public static double OADateMaxAsDouble;
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static long TicksPerMinute;
    private static long TicksPerHour;
    private static long TicksPerDay;
    private static int MillisPerSecond;
    private static int MillisPerMinute;
    private static int MillisPerHour;
    private static int MillisPerDay;
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1899;
    private static int DaysTo10000;
    private static long MaxMillis;
    private static long DoubleDateOffset;
    public static DateTime FromOADate(double d);
    internal static long DoubleDateToTicks(double value);
}
internal class ExcelDataReader.Misc.LeaveOpenStream : Stream {
    [CompilerGeneratedAttribute]
private Stream <BaseStream>k__BackingField;
    public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public LeaveOpenStream(Stream baseStream);
    [CompilerGeneratedAttribute]
public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[ExtensionAttribute]
internal static class ExcelDataReader.StreamExtensions : object {
    [ExtensionAttribute]
public static int ReadAtLeast(Stream stream, Byte[] buffer, int offset, int minimumBytes);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
