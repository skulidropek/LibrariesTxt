public enum ExCSS.AlignContent : Enum {
    public byte value__;
    public static AlignContent Center;
    public static AlignContent Start;
    public static AlignContent End;
    public static AlignContent FlexStart;
    public static AlignContent FlexEnd;
    public static AlignContent Normal;
    public static AlignContent Baseline;
    public static AlignContent SpaceBetween;
    public static AlignContent SpaceAround;
    public static AlignContent SpaceEvenly;
    public static AlignContent Stretch;
}
internal class ExCSS.AlignContentProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static AlignContentProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.AlignItem : Enum {
    public byte value__;
    public static AlignItem Normal;
    public static AlignItem Stretch;
    public static AlignItem Center;
    public static AlignItem Start;
    public static AlignItem End;
    public static AlignItem FlexStart;
    public static AlignItem FlexEnd;
    public static AlignItem SelfStart;
    public static AlignItem SelfEnd;
    public static AlignItem Baseline;
}
internal class ExCSS.AlignItemsProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static AlignItemsProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AlignSelfProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static AlignSelfProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.AllSelector : SelectorBase {
    public static AllSelector Create();
}
public class ExCSS.Angle : ValueType {
    public static Angle Zero;
    public static Angle HalfQuarter;
    public static Angle Quarter;
    public static Angle TripleHalfQuarter;
    public static Angle Half;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Unit <Type>k__BackingField;
    public float Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Angle(float value, Unit unit);
    private static Angle();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Unit get_Type();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Angle a, Angle b);
    public static bool op_GreaterThan(Angle a, Angle b);
    public static bool op_LessThanOrEqual(Angle a, Angle b);
    public static bool op_LessThan(Angle a, Angle b);
    public sealed virtual int CompareTo(Angle other);
    public static bool TryParse(string s, Angle& result);
    public static Unit GetUnit(string s);
    public float ToRadian();
    public float ToTurns();
    public sealed virtual bool Equals(Angle other);
    public static bool op_Equality(Angle a, Angle b);
    public static bool op_Inequality(Angle a, Angle b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
internal class ExCSS.AnimationDelayProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationDelayProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.AnimationDirection : Enum {
    public byte value__;
    public static AnimationDirection Normal;
    public static AnimationDirection Alternate;
    public static AnimationDirection Reverse;
    public static AnimationDirection AlternateReverse;
}
internal class ExCSS.AnimationDirectionProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationDirectionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AnimationDurationProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationDurationProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AnimationFillModeProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationFillModeProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.AnimationFillStyle : Enum {
    public byte value__;
    public static AnimationFillStyle None;
    public static AnimationFillStyle Forwards;
    public static AnimationFillStyle Backwards;
    public static AnimationFillStyle Both;
}
internal class ExCSS.AnimationIterationCountProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationIterationCountProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AnimationNameProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationNameProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AnimationPlayStateProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationPlayStateProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AnimationProperty : ShorthandProperty {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AnimationTimingFunctionProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static AnimationTimingFunctionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.AnyValueConverter : object {
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.ArgumentsValueConverter : object {
    private IValueConverter[] _converters;
    public ArgumentsValueConverter(IValueConverter[] converters);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.AspectRatioMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public AspectRatioMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.AttrAvailableSelector : AttrSelectorBase {
    public AttrAvailableSelector(string attribute, string value);
}
public class ExCSS.AttrBeginsSelector : AttrSelectorBase {
    public AttrBeginsSelector(string attribute, string value);
}
public class ExCSS.AttrContainsSelector : AttrSelectorBase {
    public AttrContainsSelector(string attribute, string value);
}
public class ExCSS.AttrEndsSelector : AttrSelectorBase {
    public AttrEndsSelector(string attribute, string value);
}
public class ExCSS.AttrHyphenSelector : AttrSelectorBase {
    public AttrHyphenSelector(string attribute, string value);
}
public class ExCSS.AttributeSelectorFactory : object {
    private static Lazy`1<AttributeSelectorFactory> Lazy;
    private Dictionary`2<string, Type> _types;
    internal static AttributeSelectorFactory Instance { get; }
    private static AttributeSelectorFactory();
    internal static AttributeSelectorFactory get_Instance();
    public IAttrSelector Create(string combinator, string match, string value, string prefix);
    private static string FormFront(string prefix, string match);
    private static string FormMatch(string prefix, string match);
}
public class ExCSS.AttrListSelector : AttrSelectorBase {
    public AttrListSelector(string attribute, string value);
}
public class ExCSS.AttrMatchSelector : AttrSelectorBase {
    public AttrMatchSelector(string attribute, string value);
}
public class ExCSS.AttrNotMatchSelector : AttrSelectorBase {
    public AttrNotMatchSelector(string attribute, string value);
}
public abstract class ExCSS.AttrSelectorBase : SelectorBase {
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Attribute { get; }
    public string Value { get; }
    protected AttrSelectorBase(string attribute, string value, string text);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Attribute();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
}
internal class ExCSS.BackfaceVisibilityProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BackfaceVisibilityProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.BackgroundAttachment : Enum {
    public byte value__;
    public static BackgroundAttachment Fixed;
    public static BackgroundAttachment Local;
    public static BackgroundAttachment Scroll;
}
internal class ExCSS.BackgroundAttachmentProperty : Property {
    private static IValueConverter AttachmentConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundAttachmentProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BackgroundClipProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundClipProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BackgroundColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BackgroundImageProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundImageProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BackgroundOriginProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundOriginProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BackgroundPositionProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundPositionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BackgroundProperty : ShorthandProperty {
    private static IValueConverter NormalLayerConverter;
    private static IValueConverter FinalLayerConverter;
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.BackgroundRepeat : Enum {
    public byte value__;
    public static BackgroundRepeat Repeat;
    public static BackgroundRepeat Space;
    public static BackgroundRepeat Round;
    public static BackgroundRepeat NoRepeat;
}
internal class ExCSS.BackgroundRepeatProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundRepeatProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BackgroundSizeProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static BackgroundSizeProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.BlendMode : Enum {
    public byte value__;
    public static BlendMode Normal;
    public static BlendMode Multiply;
    public static BlendMode Screen;
    public static BlendMode Overlay;
    public static BlendMode Darken;
    public static BlendMode Lighten;
    public static BlendMode ColorDodge;
    public static BlendMode ColorBurn;
    public static BlendMode HardLight;
    public static BlendMode SoftLight;
    public static BlendMode Difference;
    public static BlendMode Exclusion;
    public static BlendMode Hue;
    public static BlendMode Saturation;
    public static BlendMode Color;
    public static BlendMode Luminosity;
}
internal class ExCSS.BorderBottomColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderBottomColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderBottomLeftRadiusProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderBottomLeftRadiusProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderBottomProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderBottomProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderBottomRightRadiusProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderBottomRightRadiusProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderBottomStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderBottomStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderBottomWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderBottomWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderCollapseProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderCollapseProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderColorProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderImageOutsetProperty : Property {
    internal static IValueConverter TheConverter;
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderImageOutsetProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderImageProperty : ShorthandProperty {
    private static IValueConverter ImageConverter;
    internal IValueConverter Converter { get; }
    private static BorderImageProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderImageRepeatProperty : Property {
    internal static IValueConverter TheConverter;
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderImageRepeatProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderImageSliceProperty : Property {
    internal static IValueConverter TheConverter;
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderImageSliceProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderImageSourceProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderImageSourceProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderImageWidthProperty : Property {
    internal static IValueConverter TheConverter;
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderImageWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderLeftColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderLeftColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderLeftProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderLeftProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderLeftStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderLeftStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderLeftWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderLeftWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderRadiusConverter : object {
    private IValueConverter _converter;
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.BorderRadiusProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderRadiusProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.BorderRepeat : Enum {
    public byte value__;
    public static BorderRepeat Stretch;
    public static BorderRepeat Repeat;
    public static BorderRepeat Round;
}
internal class ExCSS.BorderRightColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderRightColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderRightProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderRightProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderRightStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderRightStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderRightWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderRightWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderSpacingProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderSpacingProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderStyleProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderTopColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderTopColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderTopLeftRadiusProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderTopLeftRadiusProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderTopProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderTopProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderTopRightRadiusProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderTopRightRadiusProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderTopStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderTopStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderTopWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderTopWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BorderWidthProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BorderWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BottomProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BottomProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BoxDecorationBreak : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BoxDecorationBreak();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.BoxModel : Enum {
    public byte value__;
    public static BoxModel BorderBox;
    public static BoxModel PaddingBox;
    public static BoxModel ContentBox;
}
internal class ExCSS.BoxShadowProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BoxShadowProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BoxSizingProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BoxSizingProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BreakAfterProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BreakAfterProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BreakBeforeProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BreakBeforeProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.BreakInsideProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static BreakInsideProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.BreakMode : Enum {
    public byte value__;
    public static BreakMode Auto;
    public static BreakMode Always;
    public static BreakMode Avoid;
    public static BreakMode Left;
    public static BreakMode Right;
    public static BreakMode Page;
    public static BreakMode Column;
    public static BreakMode AvoidPage;
    public static BreakMode AvoidColumn;
    public static BreakMode AvoidRegion;
}
internal class ExCSS.CaptionSideProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static CaptionSideProperty();
    internal virtual IValueConverter get_Converter();
}
[ExtensionAttribute]
internal static class ExCSS.CharExtensions : object {
    [ExtensionAttribute]
public static int FromHex(char c);
    [ExtensionAttribute]
public static string ToHex(char character);
    [ExtensionAttribute]
public static bool IsInRange(char c, int lower, int upper);
    [ExtensionAttribute]
public static bool IsNormalQueryCharacter(char c);
    [ExtensionAttribute]
public static bool IsNormalPathCharacter(char c);
    [ExtensionAttribute]
public static bool IsUppercaseAscii(char c);
    [ExtensionAttribute]
public static bool IsLowercaseAscii(char c);
    [ExtensionAttribute]
public static bool IsAlphanumericAscii(char c);
    [ExtensionAttribute]
public static bool IsHex(char c);
    [ExtensionAttribute]
public static bool IsNonAscii(char c);
    [ExtensionAttribute]
public static bool IsNonPrintable(char c);
    [ExtensionAttribute]
public static bool IsLetter(char c);
    [ExtensionAttribute]
public static bool IsName(char c);
    [ExtensionAttribute]
public static bool IsNameStart(char c);
    [ExtensionAttribute]
public static bool IsLineBreak(char c);
    [ExtensionAttribute]
public static bool IsSpaceCharacter(char c);
    [ExtensionAttribute]
public static bool IsDigit(char c);
    [ExtensionAttribute]
public static bool IsInvalid(int c);
    [ExtensionAttribute]
public static bool IsOneOf(char c, char a, char b);
    [ExtensionAttribute]
public static bool IsOneOf(char c, char o1, char o2, char o3);
    [ExtensionAttribute]
public static bool IsOneOf(char c, char o1, char o2, char o3, char o4);
}
public class ExCSS.CharsetRule : Rule {
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    public string CharacterSet { get; public set; }
    internal CharsetRule(StylesheetParser parser);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CharacterSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CharacterSet(string value);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    protected virtual void ReplaceWith(IRule rule);
}
public abstract class ExCSS.ChildSelector : StylesheetNode {
    private string _name;
    [CompilerGeneratedAttribute]
private int <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    protected ISelector Kind;
    public int Step { get; private set; }
    public int Offset { get; private set; }
    public Priority Specificity { get; }
    public string Text { get; }
    protected ChildSelector(string name);
    [CompilerGeneratedAttribute]
public int get_Step();
    [CompilerGeneratedAttribute]
private void set_Step(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    internal ChildSelector With(int step, int offset, ISelector kind);
}
public class ExCSS.ClassSelector : SelectorBase {
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    public string Class { get; }
    private ClassSelector(string name);
    [CompilerGeneratedAttribute]
public string get_Class();
    public static ClassSelector Create(string name);
}
public enum ExCSS.ClearMode : Enum {
    public byte value__;
    public static ClearMode None;
    public static ClearMode Left;
    public static ClearMode Right;
    public static ClearMode Both;
}
internal class ExCSS.ClearProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ClearProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ClipProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ClipProperty();
    internal virtual IValueConverter get_Converter();
}
[ExtensionAttribute]
internal static class ExCSS.CollectionExtensions : object {
    [IteratorStateMachineAttribute("ExCSS.CollectionExtensions/<Concat>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> items, T element);
    [ExtensionAttribute]
public static T GetItemByIndex(IEnumerable`1<T> items, int index);
    [ExtensionAttribute]
public static IEnumerable`1<Object[]> ToObjectArray(IEnumerable`1<T> items);
}
public class ExCSS.Color : ValueType {
    private byte _alpha;
    private byte _red;
    private byte _green;
    private byte _blue;
    private int _hashcode;
    public static Color Black;
    public static Color White;
    public static Color Red;
    public static Color Magenta;
    public static Color Green;
    public static Color PureGreen;
    public static Color Blue;
    public static Color Transparent;
    public int Value { get; }
    public byte A { get; }
    public double Alpha { get; }
    public byte R { get; }
    public byte G { get; }
    public byte B { get; }
    public Color(byte r, byte g, byte b);
    public Color(byte red, byte green, byte blue, byte alpha);
    private static Color();
    public static Color FromRgba(byte red, byte green, byte blue, float alpha);
    public static Color FromRgba(float red, float green, float blue, float alpha);
    public static Color FromGray(byte number, float alpha);
    public static Color FromGray(float value, float alpha);
    public static Nullable`1<Color> FromName(string name);
    public static Color FromRgb(byte red, byte green, byte blue);
    public static Color FromHex(string color);
    public static bool TryFromHex(string color, Color& value);
    public static Color FromFlexHex(string color);
    public static Color FromHsl(float hue, float saturation, float luminosity);
    public static Color FromHsla(float hue, float saturation, float luminosity, float alpha);
    public static Color FromHwb(float hue, float whiteness, float blackness);
    public static Color FromHwba(float hue, float whiteness, float blackness, float alpha);
    public int get_Value();
    public byte get_A();
    public double get_Alpha();
    public byte get_R();
    public byte get_G();
    public byte get_B();
    public static bool op_Equality(Color a, Color b);
    public static bool op_Inequality(Color a, Color b);
    public sealed virtual bool Equals(Color other);
    public virtual bool Equals(object obj);
    private sealed virtual override int System.IComparable<ExCSS.Color>.CompareTo(Color other);
    public virtual int GetHashCode();
    public static Color Mix(Color above, Color below);
    public static Color Mix(double alpha, Color above, Color below);
    private static byte Normalize(float value);
    private static byte Convert(float value);
    private static float HueToRgb(float m1, float m2, float h);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
internal class ExCSS.ColorIndexMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public ColorIndexMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColorMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public ColorMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColorProperty();
    internal virtual IValueConverter get_Converter();
}
public static class ExCSS.Colors : object {
    private static Dictionary`2<string, Color> NamedColors;
    public static IEnumerable`1<string> Names { get; }
    private static Colors();
    public static IEnumerable`1<string> get_Names();
    public static Nullable`1<Color> GetColor(string name);
    public static string GetName(Color color);
}
internal class ExCSS.ColorToken : Token {
    public bool IsValid { get; }
    public ColorToken(string data, TextPosition position);
    public bool get_IsValid();
    public virtual string ToValue();
}
internal class ExCSS.ColumnCountProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnCountProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnFillProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnFillProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnGapProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnGapProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnRuleColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnRuleColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnRuleProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnRuleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnRuleStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnRuleStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnRuleWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnRuleWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnSpanProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnSpanProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnsProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnsProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ColumnWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ColumnWidthProperty();
    internal virtual IValueConverter get_Converter();
}
public abstract class ExCSS.Combinator : object {
    public static Combinator Child;
    public static Combinator Deep;
    public static Combinator Descendent;
    public static Combinator AdjacentSibling;
    public static Combinator Sibling;
    public static Combinator Namespace;
    public static Combinator Column;
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    public string Delimiter { get; protected set; }
    private static Combinator();
    [CompilerGeneratedAttribute]
public string get_Delimiter();
    [CompilerGeneratedAttribute]
protected void set_Delimiter(string value);
    public virtual ISelector Change(ISelector selector);
}
public static class ExCSS.Combinators : object {
    public static string Exactly;
    public static string Unlike;
    public static string InList;
    public static string InToken;
    public static string Begins;
    public static string Ends;
    public static string InText;
    public static string Column;
    public static string Pipe;
    public static string Adjacent;
    public static string Descendent;
    public static string Deep;
    public static string Child;
    public static string Sibling;
    private static Combinators();
}
public class ExCSS.CombinatorSelector : ValueType {
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelector <Selector>k__BackingField;
    public string Delimiter { get; internal set; }
    public ISelector Selector { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Delimiter();
    [CompilerGeneratedAttribute]
internal void set_Delimiter(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ISelector get_Selector();
    [CompilerGeneratedAttribute]
internal void set_Selector(ISelector value);
}
internal class ExCSS.Comment : StylesheetNode {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Data { get; }
    public Comment(string data);
    [CompilerGeneratedAttribute]
public string get_Data();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class ExCSS.CommentToken : Token {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public bool IsValid { get; }
    public CommentToken(string data, bool valid, TextPosition position);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    public virtual string ToValue();
}
public class ExCSS.ComplexSelector : StylesheetNode {
    private List`1<CombinatorSelector> _selectors;
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    public string Text { get; }
    public int Length { get; }
    public bool IsReady { get; private set; }
    public Priority Specificity { get; }
    public sealed virtual string get_Text();
    public int get_Length();
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
private void set_IsReady(bool value);
    public sealed virtual Priority get_Specificity();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public void ConcludeSelector(ISelector selector);
    public void AppendSelector(ISelector selector, Combinator combinator);
    public sealed virtual IEnumerator`1<CombinatorSelector> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class ExCSS.CompoundSelector : Selectors {
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public class ExCSS.CompressedStyleFormatter : object {
    public static IStyleFormatter Instance;
    private static CompressedStyleFormatter();
    private sealed virtual override string ExCSS.IStyleFormatter.Declaration(string name, string value, bool important);
    private sealed virtual override string ExCSS.IStyleFormatter.Constraint(string name, string value);
    private sealed virtual override string ExCSS.IStyleFormatter.Rule(string name, string value);
    private sealed virtual override string ExCSS.IStyleFormatter.Rule(string name, string prelude, string rules);
    private sealed virtual override string ExCSS.IStyleFormatter.Style(string selector, IStyleFormattable rules);
    private sealed virtual override string ExCSS.IStyleFormatter.Comment(string data);
    private sealed virtual override string ExCSS.IStyleFormatter.Sheet(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string ExCSS.IStyleFormatter.Block(IEnumerable`1<IStyleFormattable> rules);
    private sealed virtual override string ExCSS.IStyleFormatter.Declarations(IEnumerable`1<string> declarations);
    private sealed virtual override string ExCSS.IStyleFormatter.Medium(bool exclusive, bool inverse, string type, IEnumerable`1<IStyleFormattable> constraints);
    private void WriteJoined(StringBuilder sb, IEnumerable`1<IStyleFormattable> elements, string separator, bool first);
}
internal class ExCSS.ConditionalStartsWithValueConverter : object {
    private string _when;
    private String[] _prefixKeywords;
    private IValueConverter _converter;
    public ConditionalStartsWithValueConverter(string when, IValueConverter converter, String[] prefixKeywords);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
    private IPropertyValue CreateFrom(IPropertyValue value, IEnumerable`1<Token> tokens);
}
internal abstract class ExCSS.ConditionRule : GroupingRule {
    internal ConditionRule(RuleType type, StylesheetParser parser);
}
internal class ExCSS.Conditions.AndCondition : StylesheetNode {
    public sealed virtual bool Check();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class ExCSS.ConstraintValueConverter : object {
    private IValueConverter _converter;
    private String[] _labels;
    public ConstraintValueConverter(IValueConverter converter, String[] labels);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
    [CompilerGeneratedAttribute]
private bool <Construct>b__4_0(Property m);
}
internal class ExCSS.ContentProperty : Property {
    private static Dictionary`2<string, ContentMode> ContentModes;
    private static ContentMode[] Default;
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ContentProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ContinuousValueConverter : object {
    private IValueConverter _converter;
    public ContinuousValueConverter(IValueConverter converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal static class ExCSS.Converters : object {
    public static IValueConverter LineWidthConverter;
    public static IValueConverter LengthConverter;
    public static IValueConverter ResolutionConverter;
    public static IValueConverter TimeConverter;
    public static IValueConverter UrlConverter;
    public static IValueConverter StringConverter;
    public static IValueConverter EvenStringsConverter;
    public static IValueConverter LiteralsConverter;
    public static IValueConverter IdentifierConverter;
    public static IValueConverter AnimatableConverter;
    public static IValueConverter IntegerConverter;
    public static IValueConverter NaturalIntegerConverter;
    public static IValueConverter WeightIntegerConverter;
    public static IValueConverter PositiveIntegerConverter;
    public static IValueConverter BinaryConverter;
    public static IValueConverter AngleConverter;
    public static IValueConverter NumberConverter;
    public static IValueConverter NaturalNumberConverter;
    public static IValueConverter PercentConverter;
    public static IValueConverter RgbComponentConverter;
    public static IValueConverter AlphaValueConverter;
    public static IValueConverter PureColorConverter;
    public static IValueConverter LengthOrPercentConverter;
    public static IValueConverter PercentOrFractionConverter;
    public static IValueConverter AngleNumberConverter;
    public static IValueConverter SideOrCornerConverter;
    public static IValueConverter PointConverter;
    public static IValueConverter AttrConverter;
    public static IValueConverter StepsConverter;
    public static IValueConverter CubicBezierConverter;
    public static IValueConverter CounterConverter;
    public static IValueConverter ShapeConverter;
    public static IValueConverter LinearGradientConverter;
    public static IValueConverter RadialGradientConverter;
    public static IValueConverter RgbColorConverter;
    public static IValueConverter RgbaColorConverter;
    public static IValueConverter HslColorConverter;
    public static IValueConverter HslaColorConverter;
    public static IValueConverter GrayColorConverter;
    public static IValueConverter HwbColorConverter;
    public static IValueConverter PerspectiveConverter;
    public static IValueConverter MatrixTransformConverter;
    public static IValueConverter TranslateTransformConverter;
    public static IValueConverter ScaleTransformConverter;
    public static IValueConverter RotateTransformConverter;
    public static IValueConverter SkewTransformConverter;
    public static IValueConverter DefaultFontFamiliesConverter;
    public static IValueConverter LineStyleConverter;
    public static IValueConverter BackgroundAttachmentConverter;
    public static IValueConverter BackgroundRepeatConverter;
    public static IValueConverter BoxModelConverter;
    public static IValueConverter AnimationDirectionConverter;
    public static IValueConverter AnimationFillStyleConverter;
    public static IValueConverter TextDecorationStyleConverter;
    public static IValueConverter TextDecorationLinesConverter;
    public static IValueConverter ListPositionConverter;
    public static IValueConverter ListStyleConverter;
    public static IValueConverter BreakModeConverter;
    public static IValueConverter BreakInsideModeConverter;
    public static IValueConverter PageBreakModeConverter;
    public static IValueConverter UnicodeModeConverter;
    public static IValueConverter VisibilityConverter;
    public static IValueConverter PlayStateConverter;
    public static IValueConverter FontVariantConverter;
    public static IValueConverter DirectionModeConverter;
    public static IValueConverter HorizontalAlignmentConverter;
    public static IValueConverter VerticalAlignmentConverter;
    public static IValueConverter WhitespaceConverter;
    public static IValueConverter TextTransformConverter;
    public static IValueConverter TextAlignLastConverter;
    public static IValueConverter TextAnchorConverter;
    public static IValueConverter TextJustifyConverter;
    public static IValueConverter ObjectFittingConverter;
    public static IValueConverter PositionModeConverter;
    public static IValueConverter OverflowModeConverter;
    public static IValueConverter FloatingConverter;
    public static IValueConverter DisplayModeConverter;
    public static IValueConverter ClearModeConverter;
    public static IValueConverter FontStretchConverter;
    public static IValueConverter FontStyleConverter;
    public static IValueConverter FontWeightConverter;
    public static IValueConverter SystemFontConverter;
    public static IValueConverter StrokeLinecapConverter;
    public static IValueConverter StrokeLinejoinConverter;
    public static IValueConverter WordBreakConverter;
    public static IValueConverter OverflowWrapConverter;
    public static IValueConverter FillRuleConverter;
    public static IValueConverter IntrinsicSizingConverter;
    public static IValueConverter AlignContentConverter;
    public static IValueConverter AlignItemsConverter;
    public static IValueConverter JustifyContentConverter;
    public static IValueConverter AlignSelfConverter;
    public static IValueConverter OptionalIntegerConverter;
    public static IValueConverter PositiveOrInfiniteNumberConverter;
    public static IValueConverter OptionalNumberConverter;
    public static IValueConverter OptionalLengthConverter;
    public static IValueConverter AutoLengthConverter;
    public static IValueConverter OptionalLengthOrPercentConverter;
    public static IValueConverter AutoLengthOrPercentConverter;
    public static IValueConverter OptionalPercentOrFractionConverter;
    public static IValueConverter FontSizeConverter;
    public static IValueConverter FlexDirectionConverter;
    public static IValueConverter FlexWrapConverter;
    public static IValueConverter FlexGrowShrinkConverter;
    public static IValueConverter FlexBasisConverter;
    public static IValueConverter FlexFlowConverter;
    public static IValueConverter FlexConverter;
    public static IValueConverter LineHeightConverter;
    public static IValueConverter BorderSliceConverter;
    public static IValueConverter ImageBorderWidthConverter;
    public static IValueConverter TransitionConverter;
    public static IValueConverter GradientConverter;
    public static IValueConverter TransformConverter;
    public static IValueConverter ColorConverter;
    public static IValueConverter CurrentColorConverter;
    public static IValueConverter InvertedColorConverter;
    public static IValueConverter PaintConverter;
    public static IValueConverter StrokeDasharrayConverter;
    public static IValueConverter StrokeMiterlimitConverter;
    public static IValueConverter RatioConverter;
    public static IValueConverter ShadowConverter;
    public static IValueConverter MultipleShadowConverter;
    public static IValueConverter ImageSourceConverter;
    public static IValueConverter OptionalImageSourceConverter;
    public static IValueConverter MultipleImageSourceConverter;
    public static IValueConverter BorderRadiusShorthandConverter;
    public static IValueConverter BorderRadiusConverter;
    public static IValueConverter FontFamiliesConverter;
    public static IValueConverter BackgroundSizeConverter;
    public static IValueConverter BackgroundRepeatsConverter;
    public static IValueConverter TableLayoutConverter;
    public static IValueConverter EmptyCellsConverter;
    public static IValueConverter CaptionSideConverter;
    public static IValueConverter BackfaceVisibilityConverter;
    public static IValueConverter BorderCollapseConverter;
    public static IValueConverter BoxDecorationConverter;
    public static IValueConverter ColumnSpanConverter;
    public static IValueConverter ColumnFillConverter;
    public static IValueConverter BoxSizingConverter;
    public static IValueConverter Any;
    private static Converters();
    public static IValueConverter Assign(string identifier, T result);
    public static IValueConverter Toggle(string on, string off);
    public static IValueConverter WithOrder(IValueConverter[] converters);
    public static IValueConverter WithAny(IValueConverter[] converters);
    public static IValueConverter Continuous(IValueConverter converter);
    private static IValueConverter Construct(Func`1<IValueConverter> f);
    private static IValueConverter WithArgs(IValueConverter converter, int arguments);
    private static IValueConverter WithArgs(IValueConverter converter);
    private static IValueConverter WithArgs(IValueConverter[] converters);
}
public class ExCSS.Counter : object {
    [CompilerGeneratedAttribute]
private string <CounterIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefinedSeparator>k__BackingField;
    public string CounterIdentifier { get; }
    public string ListStyle { get; }
    public string DefinedSeparator { get; }
    public Counter(string identifier, string listStyle, string separator);
    [CompilerGeneratedAttribute]
public string get_CounterIdentifier();
    [CompilerGeneratedAttribute]
public string get_ListStyle();
    [CompilerGeneratedAttribute]
public string get_DefinedSeparator();
}
internal class ExCSS.CounterIncrementProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static CounterIncrementProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.CounterResetProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static CounterResetProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.CubicBezierTimingFunction : object {
    [CompilerGeneratedAttribute]
private float <X1>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y1>k__BackingField;
    [CompilerGeneratedAttribute]
private float <X2>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y2>k__BackingField;
    public float X1 { get; }
    public float Y1 { get; }
    public float X2 { get; }
    public float Y2 { get; }
    public CubicBezierTimingFunction(float x1, float y1, float x2, float y2);
    [CompilerGeneratedAttribute]
public float get_X1();
    [CompilerGeneratedAttribute]
public float get_Y1();
    [CompilerGeneratedAttribute]
public float get_X2();
    [CompilerGeneratedAttribute]
public float get_Y2();
}
internal class ExCSS.CursorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static CursorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.DeclarationCondition : StylesheetNode {
    private Property _property;
    private TokenValue _tokenValue;
    public DeclarationCondition(Property property, TokenValue tokenValue);
    public sealed virtual bool Check();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
[DefaultMemberAttribute("Item")]
internal abstract class ExCSS.DeclarationRule : Rule {
    private string _name;
    public string Item { get; }
    public IEnumerable`1<Property> Declarations { get; }
    public int Length { get; }
    internal DeclarationRule(RuleType type, string name, StylesheetParser parser);
    internal void SetProperty(Property property);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual string get_Item(string propertyName);
    public IEnumerable`1<Property> get_Declarations();
    public sealed virtual int get_Length();
    public sealed virtual string GetPropertyValue(string propertyName);
    public sealed virtual string GetPropertyPriority(string propertyName);
    public sealed virtual void SetProperty(string propertyName, string propertyValue, string priority);
    public sealed virtual string RemoveProperty(string propertyName);
    public sealed virtual IEnumerator`1<IProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected abstract virtual Property CreateNewProperty(string name);
    protected string GetValue(string propertyName);
    protected void SetValue(string propertyName, string valueText);
}
internal class ExCSS.DeviceAspectRatioMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public DeviceAspectRatioMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.DeviceHeightMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public DeviceHeightMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.DevicePixelRatioFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public DevicePixelRatioFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.DeviceWidthMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public DeviceWidthMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.DictionaryValueConverter`1 : object {
    private Dictionary`2<string, T> _values;
    public DictionaryValueConverter`1(Dictionary`2<string, T> values);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
public enum ExCSS.DirectionMode : Enum {
    public byte value__;
    public static DirectionMode Ltr;
    public static DirectionMode Rtl;
}
internal class ExCSS.DirectionProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static DirectionProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.DisplayMode : Enum {
    public byte value__;
    public static DisplayMode None;
    public static DisplayMode Inline;
    public static DisplayMode Block;
    public static DisplayMode ListItem;
    public static DisplayMode InlineBlock;
    public static DisplayMode InlineTable;
    public static DisplayMode Table;
    public static DisplayMode TableCaption;
    public static DisplayMode TableCell;
    public static DisplayMode TableColumn;
    public static DisplayMode TableColumnGroup;
    public static DisplayMode TableFooterGroup;
    public static DisplayMode TableHeaderGroup;
    public static DisplayMode TableRow;
    public static DisplayMode TableRowGroup;
    public static DisplayMode Flex;
    public static DisplayMode InlineFlex;
    public static DisplayMode Grid;
    public static DisplayMode InlineGrid;
}
internal class ExCSS.DisplayProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static DisplayProperty();
    internal virtual IValueConverter get_Converter();
}
internal abstract class ExCSS.DocumentFunction : StylesheetNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Name { get; }
    public string Data { get; }
    internal DocumentFunction(string name, string data);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Data();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public abstract virtual bool Matches(Url url);
}
internal class ExCSS.DocumentRule : GroupingRule {
    public string ConditionText { get; public set; }
    public IEnumerable`1<IDocumentFunction> Conditions { get; }
    internal DocumentRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public string get_ConditionText();
    public void set_ConditionText(string value);
    public IEnumerable`1<IDocumentFunction> get_Conditions();
}
internal class ExCSS.DomainFunction : DocumentFunction {
    private string _subdomain;
    public DomainFunction(string url);
    public virtual bool Matches(Url url);
}
internal class ExCSS.EmptyCellsProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static EmptyCellsProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.EmptyCondition : StylesheetNode {
    public sealed virtual bool Check();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class ExCSS.EndListValueConverter : object {
    private IValueConverter _endConverter;
    private IValueConverter _listConverter;
    public EndListValueConverter(IValueConverter listConverter, IValueConverter endConverter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.FallbackValueConverter : object {
    private IValueConverter _converter;
    private TokenValue _defaultValue;
    public FallbackValueConverter(IValueConverter converter, TokenValue defaultValue);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
public static class ExCSS.FeatureNames : object {
    public static string MinWidth;
    public static string MinHeight;
    public static string MinDeviceWidth;
    public static string MinDeviceHeight;
    public static string MinAspectRatio;
    public static string MinResolution;
    public static string MinColor;
    public static string MinColorIndex;
    public static string MinMonochrome;
    public static string MinDevicePixelRatio;
    public static string MaxWidth;
    public static string MaxHeight;
    public static string MaxDeviceWidth;
    public static string MaxDeviceHeight;
    public static string MaxAspectRatio;
    public static string MaxResolution;
    public static string MaxColor;
    public static string MaxColorIndex;
    public static string MaxMonochrome;
    public static string MaxDevicePixelRatio;
    public static string Width;
    public static string Height;
    public static string DeviceWidth;
    public static string DeviceHeight;
    public static string AspectRatio;
    public static string Resolution;
    public static string Color;
    public static string ColorIndex;
    public static string Monochrome;
    public static string Orientation;
    public static string Grid;
    public static string Scan;
    public static string DevicePixelRatio;
    public static string MinDeviceAspectRatio;
    public static string MaxDeviceAspectRatio;
    public static string DeviceAspectRatio;
    public static string UpdateFrequency;
    public static string Scripting;
    public static string Pointer;
    public static string Hover;
    private static FeatureNames();
}
internal class ExCSS.FeatureProperty : Property {
    [CompilerGeneratedAttribute]
private MediaFeature <Feature>k__BackingField;
    internal IValueConverter Converter { get; }
    internal MediaFeature Feature { get; }
    internal FeatureProperty(MediaFeature feature);
    internal virtual IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
internal MediaFeature get_Feature();
}
internal class ExCSS.FillOpacityProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FillOpacityProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FillProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FillProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FillRule : Enum {
    public byte value__;
    public static FillRule Nonzero;
    public static FillRule Evenodd;
}
internal class ExCSS.FillRuleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FillRuleProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.FirstChildSelector : ChildSelector {
}
public class ExCSS.FirstColumnSelector : ChildSelector {
}
public class ExCSS.FirstTypeSelector : ChildSelector {
}
internal class ExCSS.FlexBasisProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FlexBasisProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FlexDirection : Enum {
    public byte value__;
    public static FlexDirection Row;
    public static FlexDirection RowReverse;
    public static FlexDirection Column;
    public static FlexDirection ColumnReverse;
}
internal class ExCSS.FlexDirectionProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FlexDirectionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FlexFlowProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FlexFlowProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FlexGrowProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FlexGrowProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FlexProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FlexProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FlexShrinkProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FlexShrinkProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FlexWrap : Enum {
    public byte value__;
    public static FlexWrap NoWrap;
    public static FlexWrap Wrap;
    public static FlexWrap WrapReverse;
}
internal class ExCSS.FlexWrapProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FlexWrapProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.Floating : Enum {
    public byte value__;
    public static Floating None;
    public static Floating Left;
    public static Floating Right;
}
internal class ExCSS.FloatProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FloatProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FontFaceRule : DeclarationRule {
    private string ExCSS.IFontFaceRule.Family { get; private set; }
    private string ExCSS.IFontFaceRule.Source { get; private set; }
    private string ExCSS.IFontFaceRule.Style { get; private set; }
    private string ExCSS.IFontFaceRule.Weight { get; private set; }
    private string ExCSS.IFontFaceRule.Stretch { get; private set; }
    private string ExCSS.IFontFaceRule.Range { get; private set; }
    private string ExCSS.IFontFaceRule.Variant { get; private set; }
    private string ExCSS.IFontFaceRule.Features { get; private set; }
    internal FontFaceRule(StylesheetParser parser);
    protected virtual Property CreateNewProperty(string name);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Family();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Family(string value);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Source();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Source(string value);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Style();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Style(string value);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Weight();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Weight(string value);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Stretch();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Stretch(string value);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Range();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Range(string value);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Variant();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Variant(string value);
    private sealed virtual override string ExCSS.IFontFaceRule.get_Features();
    private sealed virtual override void ExCSS.IFontFaceRule.set_Features(string value);
}
internal class ExCSS.FontFamilyProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontFamilyProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FontProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FontSize : Enum {
    public byte value__;
    public static FontSize Custom;
    public static FontSize Tiny;
    public static FontSize Little;
    public static FontSize Smaller;
    public static FontSize Small;
    public static FontSize Medium;
    public static FontSize Large;
    public static FontSize Larger;
    public static FontSize Big;
    public static FontSize Huge;
}
internal class ExCSS.FontSizeAdjustProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontSizeAdjustProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.FontSizeProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontSizeProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FontStretch : Enum {
    public byte value__;
    public static FontStretch Normal;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
}
internal class ExCSS.FontStretchProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontStretchProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FontStyle : Enum {
    public byte value__;
    public static FontStyle Normal;
    public static FontStyle Italic;
    public static FontStyle Oblique;
}
internal class ExCSS.FontStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontStyleProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FontVariant : Enum {
    public byte value__;
    public static FontVariant Normal;
    public static FontVariant SmallCaps;
}
internal class ExCSS.FontVariantProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontVariantProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.FontWeight : Enum {
    public byte value__;
    public static FontWeight Normal;
    public static FontWeight Bold;
    public static FontWeight Bolder;
    public static FontWeight Lighter;
}
internal class ExCSS.FontWeightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static FontWeightProperty();
    internal virtual IValueConverter get_Converter();
}
[ExtensionAttribute]
public static class ExCSS.FormatExtensions : object {
    [ExtensionAttribute]
public static string ToCss(IStyleFormattable style);
    [ExtensionAttribute]
public static string ToCss(IStyleFormattable style, IStyleFormatter formatter);
    [ExtensionAttribute]
public static void ToCss(IStyleFormattable style, TextWriter writer);
}
public class ExCSS.Frequency : ValueType {
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Unit <Type>k__BackingField;
    public float Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Frequency(float value, Unit unit);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Unit get_Type();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Frequency a, Frequency b);
    public static bool op_GreaterThan(Frequency a, Frequency b);
    public static bool op_LessThanOrEqual(Frequency a, Frequency b);
    public static bool op_LessThan(Frequency a, Frequency b);
    public sealed virtual int CompareTo(Frequency other);
    public static bool TryParse(string s, Frequency& result);
    public static Unit GetUnit(string s);
    public float ToHertz();
    public sealed virtual bool Equals(Frequency other);
    public static bool op_Equality(Frequency a, Frequency b);
    public static bool op_Inequality(Frequency a, Frequency b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
public static class ExCSS.FunctionNames : object {
    public static string Url;
    public static string UrlPrefix;
    public static string Domain;
    public static string Regexp;
    public static string Rgba;
    public static string Rgb;
    public static string Hsl;
    public static string Hsla;
    public static string Rect;
    public static string Attr;
    public static string LinearGradient;
    public static string RadialGradient;
    public static string RepeatingLinearGradient;
    public static string RepeatingRadialGradient;
    public static string Image;
    public static string Counter;
    public static string Counters;
    public static string Calc;
    public static string Toggle;
    public static string Translate;
    public static string TranslateX;
    public static string TranslateY;
    public static string TranslateZ;
    public static string Translate3d;
    public static string Matrix;
    public static string Matrix3d;
    public static string Rotate;
    public static string Rotate3d;
    public static string RotateX;
    public static string RotateY;
    public static string RotateZ;
    public static string Skew;
    public static string SkewX;
    public static string SkewY;
    public static string Scale;
    public static string Scale3d;
    public static string ScaleX;
    public static string ScaleY;
    public static string ScaleZ;
    public static string Steps;
    public static string CubicBezier;
    public static string Perspective;
    public static string Gray;
    public static string Hwb;
    private static FunctionNames();
}
internal class ExCSS.FunctionToken : Token {
    private List`1<Token> _arguments;
    public IEnumerable`1<Token> ArgumentTokens { get; }
    public FunctionToken(string data, TextPosition position);
    public IEnumerable`1<Token> get_ArgumentTokens();
    public virtual string ToValue();
    public void AddArgumentToken(Token token);
    public sealed virtual IEnumerator`1<Token> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class ExCSS.FunctionValueConverter : object {
    private IValueConverter _arguments;
    private string _name;
    public FunctionValueConverter(string name, IValueConverter arguments);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
    private bool Check(FunctionToken function);
}
internal class ExCSS.GapProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static GapProperty();
    internal virtual IValueConverter get_Converter();
}
internal abstract class ExCSS.GradientConverter : object {
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
    private static IPropertyValue[] ToGradientStops(List`1<List`1<Token>> values, int offset);
    private static IPropertyValue ToGradientStop(List`1<Token> value);
    protected abstract virtual IPropertyValue ConvertFirstArgument(IEnumerable`1<Token> value);
}
public class ExCSS.GradientStop : ValueType {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Location>k__BackingField;
    public Color Color { get; }
    public Length Location { get; }
    public GradientStop(Color color, Length location);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Color get_Color();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Length get_Location();
}
internal class ExCSS.GridMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.GroupCondition : StylesheetNode {
    private IConditionFunction _content;
    public IConditionFunction Content { get; public set; }
    public IConditionFunction get_Content();
    public void set_Content(IConditionFunction value);
    public sealed virtual bool Check();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal abstract class ExCSS.GroupingRule : Rule {
    [CompilerGeneratedAttribute]
private RuleList <Rules>k__BackingField;
    public RuleList Rules { get; }
    private IRuleList ExCSS.IGroupingRule.Rules { get; }
    internal GroupingRule(RuleType type, StylesheetParser parser);
    [CompilerGeneratedAttribute]
public RuleList get_Rules();
    private sealed virtual override IRuleList ExCSS.IGroupingRule.get_Rules();
    public sealed virtual IRule AddNewRule(RuleType ruleType);
    public sealed virtual int Insert(string ruleText, int index);
    public sealed virtual void RemoveAt(int index);
}
internal class ExCSS.HeightMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public HeightMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.HeightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static HeightProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.HorizontalAlignment : Enum {
    public byte value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Center;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Justify;
}
public enum ExCSS.HoverAbility : Enum {
    public byte value__;
    public static HoverAbility None;
    public static HoverAbility OnDemand;
    public static HoverAbility Hover;
}
internal class ExCSS.HoverMediaFeature : MediaFeature {
    private static IValueConverter TheConverter;
    internal IValueConverter Converter { get; }
    private static HoverMediaFeature();
    internal virtual IValueConverter get_Converter();
}
public interface ExCSS.IAttrSelector {
    public string Attribute { get; }
    public string Value { get; }
    public abstract virtual string get_Attribute();
    public abstract virtual string get_Value();
}
public interface ExCSS.ICharsetRule {
    public string CharacterSet { get; public set; }
    public abstract virtual string get_CharacterSet();
    public abstract virtual void set_CharacterSet(string value);
}
public interface ExCSS.IConditionFunction {
    public abstract virtual bool Check();
}
public interface ExCSS.IConditionRule {
    public string ConditionText { get; public set; }
    public abstract virtual string get_ConditionText();
    public abstract virtual void set_ConditionText(string value);
}
internal class ExCSS.IdentifierValueConverter : object {
    private Func`2<IEnumerable`1<Token>, string> _converter;
    public IdentifierValueConverter(Func`2<IEnumerable`1<Token>, string> converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.IdentifierValueConverter`1 : object {
    private string _identifier;
    private T _result;
    public IdentifierValueConverter`1(string identifier, T result);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
public interface ExCSS.IDocumentFunction {
    public string Name { get; }
    public string Data { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Data();
}
public class ExCSS.IdSelector : SelectorBase {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    private IdSelector(string name);
    [CompilerGeneratedAttribute]
public string get_Id();
    public static IdSelector Create(string name);
}
public interface ExCSS.IFontFaceRule {
    public string Family { get; public set; }
    public string Source { get; public set; }
    public string Style { get; public set; }
    public string Weight { get; public set; }
    public string Stretch { get; public set; }
    public string Range { get; public set; }
    public string Variant { get; public set; }
    public string Features { get; public set; }
    public abstract virtual string get_Family();
    public abstract virtual void set_Family(string value);
    public abstract virtual string get_Source();
    public abstract virtual void set_Source(string value);
    public abstract virtual string get_Style();
    public abstract virtual void set_Style(string value);
    public abstract virtual string get_Weight();
    public abstract virtual void set_Weight(string value);
    public abstract virtual string get_Stretch();
    public abstract virtual void set_Stretch(string value);
    public abstract virtual string get_Range();
    public abstract virtual void set_Range(string value);
    public abstract virtual string get_Variant();
    public abstract virtual void set_Variant(string value);
    public abstract virtual string get_Features();
    public abstract virtual void set_Features(string value);
}
public interface ExCSS.IGradient {
    public IEnumerable`1<GradientStop> Stops { get; }
    public bool IsRepeating { get; }
    public abstract virtual IEnumerable`1<GradientStop> get_Stops();
    public abstract virtual bool get_IsRepeating();
}
public interface ExCSS.IGroupingRule {
    public IRuleList Rules { get; }
    public abstract virtual IRuleList get_Rules();
    public abstract virtual int Insert(string rule, int index);
    public abstract virtual void RemoveAt(int index);
}
public interface ExCSS.IImageSource {
}
public interface ExCSS.IImportRule {
    public string Href { get; public set; }
    public MediaList Media { get; }
    public abstract virtual string get_Href();
    public abstract virtual void set_Href(string value);
    public abstract virtual MediaList get_Media();
}
public interface ExCSS.IKeyframeRule {
    public string KeyText { get; public set; }
    public StyleDeclaration Style { get; }
    public KeyframeSelector Key { get; public set; }
    public abstract virtual string get_KeyText();
    public abstract virtual void set_KeyText(string value);
    public abstract virtual StyleDeclaration get_Style();
    public abstract virtual KeyframeSelector get_Key();
    public abstract virtual void set_Key(KeyframeSelector value);
}
public interface ExCSS.IKeyframesRule {
    public string Name { get; public set; }
    public IRuleList Rules { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IRuleList get_Rules();
    public abstract virtual void Add(string rule);
    public abstract virtual void Remove(string key);
    public abstract virtual IKeyframeRule Find(string key);
}
public interface ExCSS.IMarginRule {
    public string Name { get; }
    public StyleDeclaration Style { get; }
    public abstract virtual string get_Name();
    public abstract virtual StyleDeclaration get_Style();
}
public interface ExCSS.IMediaFeature {
    public string Name { get; }
    public string Value { get; }
    public bool HasValue { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
    public abstract virtual bool get_HasValue();
}
public interface ExCSS.IMediaRule {
    public MediaList Media { get; }
    public abstract virtual MediaList get_Media();
}
internal class ExCSS.ImportRule : Rule {
    private Stylesheet _stylesheet;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    public string Href { get; public set; }
    public MediaList Media { get; }
    public Stylesheet Sheet { get; }
    internal ImportRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    protected virtual void ReplaceWith(IRule rule);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Href();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Href(string value);
    public sealed virtual MediaList get_Media();
    public Stylesheet get_Sheet();
}
public interface ExCSS.INamespaceRule {
    public string NamespaceUri { get; public set; }
    public string Prefix { get; public set; }
    public abstract virtual string get_NamespaceUri();
    public abstract virtual void set_NamespaceUri(string value);
    public abstract virtual string get_Prefix();
    public abstract virtual void set_Prefix(string value);
}
public enum ExCSS.IntrinsicSizing : Enum {
    public byte value__;
    public static IntrinsicSizing MaxContent;
    public static IntrinsicSizing MinContent;
    public static IntrinsicSizing FitContent;
    public static IntrinsicSizing Content;
}
public interface ExCSS.IPageRule {
    public string SelectorText { get; public set; }
    public StyleDeclaration Style { get; }
    public abstract virtual string get_SelectorText();
    public abstract virtual void set_SelectorText(string value);
    public abstract virtual StyleDeclaration get_Style();
}
[DefaultMemberAttribute("Item")]
public interface ExCSS.IProperties {
    public string Item { get; }
    public int Length { get; }
    public abstract virtual string get_Item(string propertyName);
    public abstract virtual int get_Length();
    public abstract virtual string GetPropertyValue(string propertyName);
    public abstract virtual string GetPropertyPriority(string propertyName);
    public abstract virtual void SetProperty(string propertyName, string propertyValue, string priority);
    public abstract virtual string RemoveProperty(string propertyName);
}
public interface ExCSS.IProperty {
    public string Name { get; }
    public string Value { get; }
    public string Original { get; }
    public bool IsImportant { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
    public abstract virtual string get_Original();
    public abstract virtual bool get_IsImportant();
}
internal interface ExCSS.IPropertyValue {
    public string CssText { get; }
    public TokenValue Original { get; }
    public abstract virtual string get_CssText();
    public abstract virtual TokenValue get_Original();
    public abstract virtual TokenValue ExtractFor(string name);
}
public interface ExCSS.IRule {
    public RuleType Type { get; }
    public string Text { get; public set; }
    public IRule Parent { get; }
    public Stylesheet Owner { get; }
    public abstract virtual RuleType get_Type();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual IRule get_Parent();
    public abstract virtual Stylesheet get_Owner();
}
public interface ExCSS.IRuleCreator {
    public abstract virtual IRule AddNewRule(RuleType ruleType);
}
[DefaultMemberAttribute("Item")]
public interface ExCSS.IRuleList {
    public IRule Item { get; }
    public int Length { get; }
    public abstract virtual IRule get_Item(int index);
    public abstract virtual int get_Length();
}
public interface ExCSS.ISelector {
    public Priority Specificity { get; }
    public string Text { get; }
    public abstract virtual Priority get_Specificity();
    public abstract virtual string get_Text();
}
public interface ExCSS.IStyleFormattable {
    public abstract virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public interface ExCSS.IStyleFormatter {
    public abstract virtual string Sheet(IEnumerable`1<IStyleFormattable> rules);
    public abstract virtual string Block(IEnumerable`1<IStyleFormattable> rules);
    public abstract virtual string Declaration(string name, string value, bool important);
    public abstract virtual string Declarations(IEnumerable`1<string> declarations);
    public abstract virtual string Medium(bool exclusive, bool inverse, string type, IEnumerable`1<IStyleFormattable> constraints);
    public abstract virtual string Constraint(string name, string value);
    public abstract virtual string Rule(string name, string value);
    public abstract virtual string Rule(string name, string prelude, string rules);
    public abstract virtual string Style(string selector, IStyleFormattable rules);
    public abstract virtual string Comment(string data);
}
public interface ExCSS.IStyleRule {
    public string SelectorText { get; public set; }
    public StyleDeclaration Style { get; }
    public ISelector Selector { get; public set; }
    public abstract virtual string get_SelectorText();
    public abstract virtual void set_SelectorText(string value);
    public abstract virtual StyleDeclaration get_Style();
    public abstract virtual ISelector get_Selector();
    public abstract virtual void set_Selector(ISelector value);
}
public interface ExCSS.IStylesheetNode {
    public IEnumerable`1<IStylesheetNode> Children { get; }
    public StylesheetText StylesheetText { get; }
    public abstract virtual IEnumerable`1<IStylesheetNode> get_Children();
    public abstract virtual StylesheetText get_StylesheetText();
}
public interface ExCSS.ISupportsRule {
    public IConditionFunction Condition { get; }
    public abstract virtual IConditionFunction get_Condition();
}
public interface ExCSS.ITimingFunction {
}
public interface ExCSS.ITransform {
    public abstract virtual TransformMatrix ComputeMatrix();
}
internal interface ExCSS.IValueConverter {
    public abstract virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public abstract virtual IPropertyValue Construct(Property[] properties);
}
public enum ExCSS.JustifyContent : Enum {
    public byte value__;
    public static JustifyContent Start;
    public static JustifyContent Center;
    public static JustifyContent SpaceBetween;
    public static JustifyContent SpaceAround;
    public static JustifyContent SpaceEvenly;
    public static JustifyContent End;
    public static JustifyContent FlexStart;
    public static JustifyContent FlexEnd;
    public static JustifyContent Left;
    public static JustifyContent Right;
    public static JustifyContent Normal;
    public static JustifyContent Stretch;
}
internal class ExCSS.JustifyContentProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static JustifyContentProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.KeyframeRule : Rule {
    public string KeyText { get; public set; }
    public KeyframeSelector Key { get; public set; }
    public StyleDeclaration Style { get; }
    internal KeyframeRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual string get_KeyText();
    public sealed virtual void set_KeyText(string value);
    public sealed virtual KeyframeSelector get_Key();
    public sealed virtual void set_Key(KeyframeSelector value);
    public sealed virtual StyleDeclaration get_Style();
}
public class ExCSS.KeyframeSelector : StylesheetNode {
    private List`1<Percent> _stops;
    public IEnumerable`1<Percent> Stops { get; }
    public string Text { get; }
    public KeyframeSelector(IEnumerable`1<Percent> stops);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public IEnumerable`1<Percent> get_Stops();
    public string get_Text();
}
internal class ExCSS.KeyframesRule : Rule {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleList <Rules>k__BackingField;
    public string Name { get; public set; }
    public RuleList Rules { get; }
    private IRuleList ExCSS.IKeyframesRule.Rules { get; }
    internal KeyframesRule(StylesheetParser parser);
    protected virtual void ReplaceWith(IRule rule);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public RuleList get_Rules();
    private sealed virtual override IRuleList ExCSS.IKeyframesRule.get_Rules();
    public sealed virtual void Add(string ruleText);
    public sealed virtual void Remove(string key);
    public KeyframeRule Find(string key);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    private sealed virtual override IKeyframeRule ExCSS.IKeyframesRule.Find(string key);
}
internal static class ExCSS.Keywords : object {
    public static string Important;
    public static string Inherit;
    public static string Initial;
    public static string None;
    public static string Auto;
    public static string From;
    public static string To;
    public static string Always;
    public static string Avoid;
    public static string Left;
    public static string Right;
    public static string Both;
    public static string Forwards;
    public static string Backwards;
    public static string Page;
    public static string Column;
    public static string AvoidPage;
    public static string AvoidColumn;
    public static string AvoidRegion;
    public static string Inset;
    public static string Outset;
    public static string Ridge;
    public static string Groove;
    public static string Fixed;
    public static string Local;
    public static string Scroll;
    public static string NoRepeat;
    public static string Repeat;
    public static string RepeatX;
    public static string RepeatY;
    public static string Round;
    public static string Space;
    public static string Stretch;
    public static string Inline;
    public static string Block;
    public static string InlineBlock;
    public static string ListItem;
    public static string InlineTable;
    public static string Table;
    public static string TableCaption;
    public static string TableCell;
    public static string TableColumn;
    public static string TableColumnGroup;
    public static string TableFooterGroup;
    public static string TableHeaderGroup;
    public static string TableRow;
    public static string TableRowGroup;
    public static string Flex;
    public static string InlineFlex;
    public static string Grid;
    public static string InlineGrid;
    public static string Visible;
    public static string Hidden;
    public static string Collapse;
    public static string Static;
    public static string Relative;
    public static string Absolute;
    public static string Sticky;
    public static string Serif;
    public static string SansSerif;
    public static string Monospace;
    public static string Cursive;
    public static string Fantasy;
    public static string Caption;
    public static string Icon;
    public static string Menu;
    public static string MessageBox;
    public static string SmallCaption;
    public static string StatusBar;
    public static string Normal;
    public static string Italic;
    public static string Oblique;
    public static string UltraCondensed;
    public static string ExtraCondensed;
    public static string Condensed;
    public static string SemiCondensed;
    public static string SemiExpanded;
    public static string Expanded;
    public static string ExtraExpanded;
    public static string UltraExpanded;
    public static string Bold;
    public static string Bolder;
    public static string Lighter;
    public static string Center;
    public static string SpaceBetween;
    public static string SpaceAround;
    public static string SpaceEvenly;
    public static string Justify;
    public static string Underline;
    public static string Overline;
    public static string LineThrough;
    public static string Blink;
    public static string Solid;
    public static string Double;
    public static string Dotted;
    public static string Dashed;
    public static string Wavy;
    public static string Capitalize;
    public static string Uppercase;
    public static string Lowercase;
    public static string FullWidth;
    public static string Baseline;
    public static string Sub;
    public static string Super;
    public static string TextTop;
    public static string TextBottom;
    public static string Middle;
    public static string Top;
    public static string Bottom;
    public static string Pre;
    public static string Nowrap;
    public static string PreWrap;
    public static string PreLine;
    public static string OpenQuote;
    public static string NoOpenQuote;
    public static string CloseQuote;
    public static string NoCloseQuote;
    public static string Embed;
    public static string Isolate;
    public static string IsolateOverride;
    public static string BidirectionalOverride;
    public static string Plaintext;
    public static string Default;
    public static string ContextMenu;
    public static string Help;
    public static string Pointer;
    public static string Progress;
    public static string Wait;
    public static string Cell;
    public static string Crosshair;
    public static string Text;
    public static string VerticalText;
    public static string Alias;
    public static string Copy;
    public static string Move;
    public static string NoDrop;
    public static string NotAllowed;
    public static string EastResize;
    public static string NorthResize;
    public static string NorthEastResize;
    public static string NorthWestResize;
    public static string SouthResize;
    public static string SouthEastResize;
    public static string SouthWestResize;
    public static string WestResize;
    public static string EastWestResize;
    public static string NorthSouthResize;
    public static string NorthEastSouthWestResize;
    public static string NorthWestSouthEastResize;
    public static string ColResize;
    public static string RowResize;
    public static string AllScroll;
    public static string ZoomIn;
    public static string ZoomOut;
    public static string Grab;
    public static string Grabbing;
    public static string Thin;
    public static string Medium;
    public static string Thick;
    public static string Inside;
    public static string Outside;
    public static string BorderBox;
    public static string PaddingBox;
    public static string ContentBox;
    public static string Reverse;
    public static string Alternate;
    public static string AlternateReverse;
    public static string Ease;
    public static string EaseIn;
    public static string EaseOut;
    public static string EaseInOut;
    public static string Linear;
    public static string StepStart;
    public static string StepEnd;
    public static string Disc;
    public static string Circle;
    public static string Square;
    public static string Decimal;
    public static string DecimalLeadingZero;
    public static string LowerRoman;
    public static string UpperRoman;
    public static string LowerGreek;
    public static string LowerLatin;
    public static string UpperLatin;
    public static string Armenian;
    public static string Georgian;
    public static string LowerAlpha;
    public static string UpperAlpha;
    public static string XxSmall;
    public static string XSmall;
    public static string Small;
    public static string Large;
    public static string XLarge;
    public static string XxLarge;
    public static string Larger;
    public static string Smaller;
    public static string And;
    public static string Or;
    public static string Not;
    public static string Only;
    public static string Show;
    public static string Hide;
    public static string Invert;
    public static string Flat;
    public static string Preserve3d;
    public static string SmallCaps;
    public static string Slice;
    public static string Clone;
    public static string Running;
    public static string Paused;
    public static string Infinite;
    public static string Cover;
    public static string Contain;
    public static string Ltr;
    public static string Rtl;
    public static string All;
    public static string Balance;
    public static string Separate;
    public static string Start;
    public static string End;
    public static string Fill;
    public static string Screen;
    public static string Print;
    public static string Speech;
    public static string StyleSheet;
    public static string On;
    public static string Off;
    public static string Of;
    public static string Portrait;
    public static string Landscape;
    public static string Progressive;
    public static string Interlace;
    public static string Replace;
    public static string At;
    public static string Yes;
    public static string No;
    public static string Color;
    public static string ColorBurn;
    public static string ColorDodge;
    public static string Darken;
    public static string Difference;
    public static string Exclusion;
    public static string HardLight;
    public static string Hue;
    public static string Lighten;
    public static string Luminosity;
    public static string Multiply;
    public static string Overlay;
    public static string Saturation;
    public static string SoftLight;
    public static string Ellipse;
    public static string ClosestSide;
    public static string ClosestCorner;
    public static string FarthestSide;
    public static string FarthestCorner;
    public static string Slow;
    public static string Enabled;
    public static string Disabled;
    public static string InitialOnly;
    public static string Coarse;
    public static string Fine;
    public static string OnDemand;
    public static string Hover;
    public static string Any;
    public static string ScaleDown;
    public static string CurrentColor;
    public static string Public;
    public static string System;
    public static string CData;
    public static string Asterisk;
    public static string Odd;
    public static string Even;
    public static string Distribute;
    public static string DistributeAllLines;
    public static string DistributeCenterLast;
    public static string InterCluster;
    public static string InterIdeograph;
    public static string InterWord;
    public static string Kashida;
    public static string Newspaper;
    public static string Butt;
    public static string Miter;
    public static string Bevel;
    public static string BreakAll;
    public static string KeepAll;
    public static string BreakWord;
    public static string Nonzero;
    public static string Evenodd;
    public static string Row;
    public static string RowReverse;
    public static string ColumnReverse;
    public static string Wrap;
    public static string WrapReverse;
    public static string MaxContent;
    public static string MinContent;
    public static string FitContent;
    public static string Content;
    public static string Revert;
    public static string RevertLayer;
    public static string Unset;
    public static string FlexStart;
    public static string FlexEnd;
    public static string Safe;
    public static string Unsafe;
    public static string First;
    public static string Last;
    public static string SelfStart;
    public static string SelfEnd;
    private static Keywords();
}
internal class ExCSS.KeywordToken : Token {
    public KeywordToken(TokenType type, string data, TextPosition position);
    public virtual string ToValue();
}
public class ExCSS.LastChildSelector : ChildSelector {
}
public class ExCSS.LastColumnSelector : ChildSelector {
}
public class ExCSS.LastTypeSelector : ChildSelector {
}
internal class ExCSS.LeftProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static LeftProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.Length : ValueType {
    public static Length Zero;
    public static Length Half;
    public static Length Full;
    public static Length Thin;
    public static Length Medium;
    public static Length Thick;
    public static Length Missing;
    [CompilerGeneratedAttribute]
private Unit <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    public bool IsAbsolute { get; }
    public bool IsRelative { get; }
    public Unit Type { get; }
    public float Value { get; }
    public string UnitString { get; }
    public Length(float value, Unit unit);
    private static Length();
    public bool get_IsAbsolute();
    public bool get_IsRelative();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Unit get_Type();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Length a, Length b);
    public static bool op_GreaterThan(Length a, Length b);
    public static bool op_LessThanOrEqual(Length a, Length b);
    public static bool op_LessThan(Length a, Length b);
    public sealed virtual int CompareTo(Length other);
    public static bool TryParse(string s, Length& result);
    public static Unit GetUnit(string s);
    public float ToPixel();
    public float To(Unit unit);
    public sealed virtual bool Equals(Length other);
    public static bool op_Equality(Length a, Length b);
    public static bool op_Inequality(Length a, Length b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
internal class ExCSS.LetterSpacingProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static LetterSpacingProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.Lexer : LexerBase {
    [CompilerGeneratedAttribute]
private EventHandler`1<TokenizerError> Error;
    private TextPosition _position;
    [CompilerGeneratedAttribute]
private bool <IsInValue>k__BackingField;
    public bool IsInValue { get; public set; }
    public Lexer(TextSource source);
    [CompilerGeneratedAttribute]
public void add_Error(EventHandler`1<TokenizerError> value);
    [CompilerGeneratedAttribute]
public void remove_Error(EventHandler`1<TokenizerError> value);
    [CompilerGeneratedAttribute]
public bool get_IsInValue();
    [CompilerGeneratedAttribute]
public void set_IsInValue(bool value);
    public Token Get();
    internal void RaiseErrorOccurred(ParseError error, TextPosition position);
    private Token Data(char current);
    private Token StringDoubleQuote();
    private Token StringSingleQuote();
    private Token ColorLiteral();
    private Token HashStart();
    private Token HashRest();
    private Token Comment();
    private Token AtKeywordStart();
    private Token AtKeywordRest(char current);
    private Token IdentStart(char current);
    private Token IdentRest(char current);
    private Token NumberStart(char current);
    private Token NumberRest();
    private Token NumberFraction();
    private Token Dimension(string number);
    private Token SciNotation();
    private Token UrlStart(string functionName);
    private Token UrlDoubleQuote(string functionName);
    private Token UrlSingleQuote(string functionName);
    private Token UrlUnquoted(char current, string functionName);
    private Token UrlEnd(string functionName);
    private Token UrlBad(string functionName);
    private Token UnicodeRange(char current);
    private Token NewMatch(string match);
    private Token NewColumn();
    private Token NewCloseCurly();
    private Token NewOpenCurly();
    private Token NewCloseSquare();
    private Token NewOpenSquare();
    private Token NewOpenComment();
    private Token NewSemicolon();
    private Token NewColon();
    private Token NewCloseComment();
    private Token NewComma();
    private Token NewCloseRound();
    private Token NewOpenRound();
    private Token NewString(string value, char quote, bool bad);
    private Token NewHash(string value);
    private Token NewComment(string value, bool bad);
    private Token NewAtKeyword(string value);
    private Token NewIdent(string value);
    private Token NewFunction(string value);
    private Token NewPercentage(string value);
    private Token NewDimension(string value, string unit);
    private Token NewUrl(string functionName, string data, bool bad);
    private Token NewRange(string range);
    private Token NewRange(string start, string end);
    private Token NewWhitespace(char character);
    private Token NewNumber(string number);
    private Token NewDelimiter(char c);
    private Token NewColor(string text);
    private Token NewEof();
    private Token NumberExponential(char letter);
    private Token NumberDash();
    private string ConsumeEscape(char current);
    private bool IsValidEscape(char current);
    private void RaiseErrorOccurred(ParseError code);
}
internal abstract class ExCSS.LexerBase : object {
    private Stack`1<ushort> _columns;
    [CompilerGeneratedAttribute]
private StringBuilder <StringBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private TextSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Current>k__BackingField;
    protected StringBuilder StringBuffer { get; private set; }
    public TextSource Source { get; }
    public ushort Line { get; private set; }
    public ushort Column { get; private set; }
    public int Position { get; }
    protected char Current { get; private set; }
    public int InsertionPoint { get; protected set; }
    protected LexerBase(TextSource source);
    public string FlushBuffer();
    public sealed virtual void Dispose();
    public TextPosition GetCurrentPosition();
    protected char SkipSpaces();
    protected char GetNext();
    protected char GetPrevious();
    protected void Advance();
    protected void Advance(int distance);
    protected void Back();
    protected void Back(int distance);
    private void AdvanceNative();
    private void BackNative();
    private char NormalizeForward(char symbol);
    private char NormalizeBackward(char symbol);
    [CompilerGeneratedAttribute]
protected StringBuilder get_StringBuffer();
    [CompilerGeneratedAttribute]
private void set_StringBuffer(StringBuilder value);
    [CompilerGeneratedAttribute]
public TextSource get_Source();
    [CompilerGeneratedAttribute]
public ushort get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(ushort value);
    public int get_Position();
    [CompilerGeneratedAttribute]
protected char get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(char value);
    public int get_InsertionPoint();
    protected void set_InsertionPoint(int value);
}
public class ExCSS.LinearGradient : object {
    private GradientStop[] _stops;
    [CompilerGeneratedAttribute]
private Angle <Angle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRepeating>k__BackingField;
    public Angle Angle { get; }
    public IEnumerable`1<GradientStop> Stops { get; }
    public bool IsRepeating { get; }
    public LinearGradient(Angle angle, GradientStop[] stops, bool repeating);
    [CompilerGeneratedAttribute]
public Angle get_Angle();
    public sealed virtual IEnumerable`1<GradientStop> get_Stops();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRepeating();
}
internal class ExCSS.LinearGradientConverter : GradientConverter {
    private IValueConverter _converter;
    protected virtual IPropertyValue ConvertFirstArgument(IEnumerable`1<Token> value);
}
internal class ExCSS.LineHeightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static LineHeightProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.LineStyle : Enum {
    public byte value__;
    public static LineStyle None;
    public static LineStyle Hidden;
    public static LineStyle Dotted;
    public static LineStyle Dashed;
    public static LineStyle Solid;
    public static LineStyle Double;
    public static LineStyle Groove;
    public static LineStyle Ridge;
    public static LineStyle Inset;
    public static LineStyle Outset;
}
public enum ExCSS.ListPosition : Enum {
    public byte value__;
    public static ListPosition Inside;
    public static ListPosition Outside;
}
public class ExCSS.ListSelector : Selectors {
    [CompilerGeneratedAttribute]
private bool <IsInvalid>k__BackingField;
    public bool IsInvalid { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_IsInvalid();
    [CompilerGeneratedAttribute]
internal void set_IsInvalid(bool value);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public enum ExCSS.ListStyle : Enum {
    public byte value__;
    public static ListStyle None;
    public static ListStyle Disc;
    public static ListStyle Circle;
    public static ListStyle Square;
    public static ListStyle Decimal;
    public static ListStyle DecimalLeadingZero;
    public static ListStyle LowerRoman;
    public static ListStyle UpperRoman;
    public static ListStyle LowerGreek;
    public static ListStyle LowerLatin;
    public static ListStyle UpperLatin;
    public static ListStyle Armenian;
    public static ListStyle Georgian;
}
internal class ExCSS.ListStyleImageProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ListStyleImageProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ListStylePositionProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ListStylePositionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ListStyleProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ListStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ListStyleTypeProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ListStyleTypeProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ListValueConverter : object {
    private IValueConverter _converter;
    public ListValueConverter(IValueConverter converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal static class ExCSS.Map : object {
    public static Dictionary`2<string, Whitespace> WhitespaceModes;
    public static Dictionary`2<string, TextTransform> TextTransforms;
    public static Dictionary`2<string, TextAlignLast> TextAlignmentsLast;
    public static Dictionary`2<string, TextAnchor> TextAnchors;
    public static Dictionary`2<string, TextJustify> TextJustifyOptions;
    public static Dictionary`2<string, JustifyContent> JustifyContentOptions;
    public static Dictionary`2<string, HorizontalAlignment> HorizontalAlignments;
    public static Dictionary`2<string, VerticalAlignment> VerticalAlignments;
    public static Dictionary`2<string, LineStyle> LineStyles;
    public static Dictionary`2<string, BoxModel> BoxModels;
    public static Dictionary`2<string, ITimingFunction> TimingFunctions;
    public static Dictionary`2<string, AnimationFillStyle> AnimationFillStyles;
    public static Dictionary`2<string, AnimationDirection> AnimationDirections;
    public static Dictionary`2<string, Visibility> Visibilities;
    public static Dictionary`2<string, PlayState> PlayStates;
    public static Dictionary`2<string, FontVariant> FontVariants;
    public static Dictionary`2<string, DirectionMode> DirectionModes;
    public static Dictionary`2<string, ListStyle> ListStyles;
    public static Dictionary`2<string, ListPosition> ListPositions;
    public static Dictionary`2<string, FontSize> FontSizes;
    public static Dictionary`2<string, TextDecorationStyle> TextDecorationStyles;
    public static Dictionary`2<string, TextDecorationLine> TextDecorationLines;
    public static Dictionary`2<string, BorderRepeat> BorderRepeatModes;
    public static Dictionary`2<string, string> DefaultFontFamilies;
    public static Dictionary`2<string, BackgroundAttachment> BackgroundAttachments;
    public static Dictionary`2<string, FontStyle> FontStyles;
    public static Dictionary`2<string, FontStretch> FontStretches;
    public static Dictionary`2<string, BreakMode> BreakModes;
    public static Dictionary`2<string, BreakMode> PageBreakModes;
    public static Dictionary`2<string, BreakMode> BreakInsideModes;
    public static Dictionary`2<string, float> HorizontalModes;
    public static Dictionary`2<string, float> VerticalModes;
    public static Dictionary`2<string, UnicodeMode> UnicodeModes;
    public static Dictionary`2<string, SystemCursor> Cursors;
    public static Dictionary`2<string, PositionMode> PositionModes;
    public static Dictionary`2<string, Overflow> OverflowModes;
    public static Dictionary`2<string, Floating> FloatingModes;
    public static Dictionary`2<string, DisplayMode> DisplayModes;
    public static Dictionary`2<string, ClearMode> ClearModes;
    public static Dictionary`2<string, BackgroundRepeat> BackgroundRepeats;
    public static Dictionary`2<string, BlendMode> BlendModes;
    public static Dictionary`2<string, UpdateFrequency> UpdateFrequencies;
    public static Dictionary`2<string, ScriptingState> ScriptingStates;
    public static Dictionary`2<string, PointerAccuracy> PointerAccuracies;
    public static Dictionary`2<string, HoverAbility> HoverAbilities;
    public static Dictionary`2<string, SizeMode> RadialGradientSizeModes;
    public static Dictionary`2<string, ObjectFitting> ObjectFittings;
    public static Dictionary`2<string, FontWeight> FontWeights;
    public static Dictionary`2<string, SystemFont> SystemFonts;
    public static Dictionary`2<string, StrokeLinecap> StrokeLinecaps;
    public static Dictionary`2<string, StrokeLinejoin> StrokeLinejoins;
    public static Dictionary`2<string, WordBreak> WordBreaks;
    public static Dictionary`2<string, OverflowWrap> OverflowWraps;
    public static Dictionary`2<string, FillRule> FillRules;
    public static Dictionary`2<string, FlexDirection> FlexDirections;
    public static Dictionary`2<string, FlexWrap> FlexWraps;
    public static Dictionary`2<string, IntrinsicSizing> IntrinsicSizings;
    public static Dictionary`2<string, AlignContent> AlignContents;
    public static Dictionary`2<string, AlignItem> AlignItems;
    private static Map();
}
internal class ExCSS.MarginBottomProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MarginBottomProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.MarginLeftProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MarginLeftProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.MarginProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MarginProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.MarginRightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MarginRightProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.MarginStyleRule : Rule {
    public ISelector Selector { get; public set; }
    public string SelectorText { get; public set; }
    public StyleDeclaration Style { get; }
    public MarginStyleRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual ISelector get_Selector();
    public sealed virtual void set_Selector(ISelector value);
    public sealed virtual string get_SelectorText();
    public sealed virtual void set_SelectorText(string value);
    public sealed virtual StyleDeclaration get_Style();
}
internal class ExCSS.MarginTopProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MarginTopProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.MatrixTransform : object {
    private Single[] _values;
    internal MatrixTransform(Single[] values);
    public sealed virtual TransformMatrix ComputeMatrix();
}
internal class ExCSS.MaxHeightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MaxHeightProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.MaxWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MaxWidthProperty();
    internal virtual IValueConverter get_Converter();
}
public abstract class ExCSS.MediaFeature : StylesheetNode {
    private TokenValue _tokenValue;
    [CompilerGeneratedAttribute]
private bool <IsMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal IValueConverter Converter { get; }
    public bool IsMinimum { get; }
    public bool IsMaximum { get; }
    public string Name { get; }
    public string Value { get; }
    public bool HasValue { get; }
    internal MediaFeature(string name);
    internal abstract virtual IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public bool get_IsMinimum();
    [CompilerGeneratedAttribute]
public bool get_IsMaximum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string get_Value();
    public sealed virtual bool get_HasValue();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    internal bool TrySetValue(TokenValue tokenValue);
}
internal class ExCSS.MediaFeatureFactory : object {
    private static Lazy`1<MediaFeatureFactory> Lazy;
    private Dictionary`2<string, Creator> _creators;
    internal static MediaFeatureFactory Instance { get; }
    private static MediaFeatureFactory();
    internal static MediaFeatureFactory get_Instance();
    public MediaFeature Create(string name);
}
[DefaultMemberAttribute("Item")]
public class ExCSS.MediaList : StylesheetNode {
    private StylesheetParser _parser;
    public string Item { get; }
    public IEnumerable`1<Medium> Media { get; }
    public int Length { get; }
    public string MediaText { get; public set; }
    internal MediaList(StylesheetParser parser);
    public string get_Item(int index);
    public IEnumerable`1<Medium> get_Media();
    public int get_Length();
    public string get_MediaText();
    public void set_MediaText(string value);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public void Add(string newMedium);
    public void Remove(string oldMedium);
    public IEnumerator`1<Medium> GetEnumerator();
}
internal class ExCSS.MediaRule : ConditionRule {
    public string ConditionText { get; public set; }
    public MediaList Media { get; }
    internal MediaRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual string get_ConditionText();
    public sealed virtual void set_ConditionText(string value);
    public sealed virtual MediaList get_Media();
}
public class ExCSS.Medium : StylesheetNode {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInverse>k__BackingField;
    public IEnumerable`1<MediaFeature> Features { get; }
    public string Type { get; internal set; }
    public bool IsExclusive { get; internal set; }
    public bool IsInverse { get; internal set; }
    public string Constraints { get; }
    public IEnumerable`1<MediaFeature> get_Features();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExclusive();
    [CompilerGeneratedAttribute]
internal void set_IsExclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInverse();
    [CompilerGeneratedAttribute]
internal void set_IsInverse(bool value);
    public string get_Constraints();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    [CompilerGeneratedAttribute]
private bool <Equals>b__16_0(MediaFeature feature);
}
internal class ExCSS.MinHeightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MinHeightProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.MinWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static MinWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.MonochromeMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public MonochromeMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.NamespaceRule : Rule {
    private string _namespaceUri;
    private string _prefix;
    public string NamespaceUri { get; public set; }
    public string Prefix { get; public set; }
    internal NamespaceRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    protected virtual void ReplaceWith(IRule rule);
    public sealed virtual string get_NamespaceUri();
    public sealed virtual void set_NamespaceUri(string value);
    public sealed virtual string get_Prefix();
    public sealed virtual void set_Prefix(string value);
    private static bool IsNotSupported(RuleType type);
    private void CheckValidity();
}
public class ExCSS.NamespaceSelector : SelectorBase {
    private NamespaceSelector(string prefix);
    public static NamespaceSelector Create(string prefix);
}
internal class ExCSS.NotCondition : StylesheetNode {
    private IConditionFunction _content;
    public IConditionFunction Content { get; public set; }
    public IConditionFunction get_Content();
    public void set_Content(IConditionFunction value);
    public sealed virtual bool Check();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public class ExCSS.Number : ValueType {
    public static Number Zero;
    public static Number Infinite;
    public static Number One;
    private Unit _unit;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    public float Value { get; }
    public bool IsInteger { get; }
    public Number(float value, Unit unit);
    private static Number();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    public bool get_IsInteger();
    public static bool op_GreaterThanOrEqual(Number a, Number b);
    public static bool op_GreaterThan(Number a, Number b);
    public static bool op_LessThanOrEqual(Number a, Number b);
    public static bool op_LessThan(Number a, Number b);
    public sealed virtual int CompareTo(Number other);
    public sealed virtual bool Equals(Number other);
    public static bool op_Equality(Number a, Number b);
    public static bool op_Inequality(Number a, Number b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
internal class ExCSS.NumberToken : Token {
    private static Char[] FloatIndicators;
    public bool IsInteger { get; }
    public int IntegerValue { get; }
    public float Value { get; }
    public NumberToken(string number, TextPosition position);
    private static NumberToken();
    public bool get_IsInteger();
    public int get_IntegerValue();
    public float get_Value();
}
internal class ExCSS.ObjectFitProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ObjectFitProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.ObjectFitting : Enum {
    public byte value__;
    public static ObjectFitting None;
    public static ObjectFitting Fill;
    public static ObjectFitting Contain;
    public static ObjectFitting Cover;
    public static ObjectFitting ScaleDown;
}
internal class ExCSS.ObjectPositionProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ObjectPositionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OneOrMoreValueConverter : object {
    private IValueConverter _converter;
    private int _maximum;
    private int _minimum;
    public OneOrMoreValueConverter(IValueConverter converter, int minimum, int maximum);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.OpacityProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OpacityProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OptionValueConverter : object {
    private IValueConverter _converter;
    public OptionValueConverter(IValueConverter converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.OptionValueConverter`1 : object {
    private IValueConverter _converter;
    public OptionValueConverter`1(IValueConverter converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.OrCondition : StylesheetNode {
    public sealed virtual bool Check();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class ExCSS.OrderedOptionsConverter : object {
    private IValueConverter[] _converters;
    public OrderedOptionsConverter(IValueConverter[] converters);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.OrderProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OrderProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OrientationMediaFeature : MediaFeature {
    private static IValueConverter TheConverter;
    internal IValueConverter Converter { get; }
    private static OrientationMediaFeature();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OrphansProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OrphansProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OrValueConverter : object {
    private IValueConverter _next;
    private IValueConverter _previous;
    public OrValueConverter(IValueConverter previous, IValueConverter next);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.OutlineColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OutlineColorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OutlineProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OutlineProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OutlineStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OutlineStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.OutlineWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OutlineWidthProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.Overflow : Enum {
    public byte value__;
    public static Overflow Auto;
    public static Overflow Visible;
    public static Overflow Hidden;
    public static Overflow Scroll;
}
internal class ExCSS.OverflowProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OverflowProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.OverflowWrap : Enum {
    public byte value__;
    public static OverflowWrap Normal;
    public static OverflowWrap BreakWord;
}
internal class ExCSS.OverflowWrapProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static OverflowWrapProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PaddingBottomProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PaddingBottomProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PaddingLeftProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PaddingLeftProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PaddingProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PaddingProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PaddingRightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PaddingRightProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PaddingTopProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PaddingTopProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PageBreakAfterProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PageBreakAfterProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PageBreakBeforeProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PageBreakBeforeProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PageBreakInsideProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PageBreakInsideProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PageRule : Rule {
    public string SelectorText { get; public set; }
    public ISelector Selector { get; public set; }
    public StyleDeclaration Style { get; }
    public IEnumerable`1<MarginStyleRule> Margins { get; }
    internal PageRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual string get_SelectorText();
    public sealed virtual void set_SelectorText(string value);
    public ISelector get_Selector();
    public void set_Selector(ISelector value);
    public sealed virtual StyleDeclaration get_Style();
    public IEnumerable`1<MarginStyleRule> get_Margins();
}
public class ExCSS.PageSelector : StylesheetNode {
    private string _name;
    public Priority Specificity { get; }
    public string Text { get; }
    public PageSelector(string name);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
}
public enum ExCSS.ParseError : Enum {
    public byte value__;
    public static ParseError EOF;
    public static ParseError InvalidCharacter;
    public static ParseError InvalidBlockStart;
    public static ParseError InvalidToken;
    public static ParseError ColonMissing;
    public static ParseError IdentExpected;
    public static ParseError InputUnexpected;
    public static ParseError LineBreakUnexpected;
    public static ParseError UnknownAtRule;
    public static ParseError InvalidSelector;
    public static ParseError InvalidKeyframe;
    public static ParseError ValueMissing;
    public static ParseError InvalidValue;
    public static ParseError UnknownDeclarationName;
}
public class ExCSS.ParseException : Exception {
    public ParseException(string message);
}
[ExtensionAttribute]
internal static class ExCSS.ParserExtensions : object {
    private static Dictionary`2<string, Func`2<string, DocumentFunction>> FunctionTypes;
    private static Dictionary`2<string, Func`2<IEnumerable`1<IConditionFunction>, IConditionFunction>> GroupCreators;
    private static ParserExtensions();
    private static IConditionFunction CreateAndCondition(IEnumerable`1<IConditionFunction> conditions);
    private static IConditionFunction CreateOrCondition(IEnumerable`1<IConditionFunction> conditions);
    [ExtensionAttribute]
public static TokenType GetTypeFromName(string functionName);
    [ExtensionAttribute]
public static Func`2<IEnumerable`1<IConditionFunction>, IConditionFunction> GetCreator(string conjunction);
    [ExtensionAttribute]
public static int GetCode(ParseError code);
    [ExtensionAttribute]
public static bool Is(Token token, TokenType a);
    [ExtensionAttribute]
public static bool Is(Token token, TokenType a, TokenType b);
    [ExtensionAttribute]
public static bool IsNot(Token token, TokenType a, TokenType b);
    [ExtensionAttribute]
public static bool IsNot(Token token, TokenType a, TokenType b, TokenType c);
    [ExtensionAttribute]
public static bool IsDeclarationName(Token token);
    [ExtensionAttribute]
public static DocumentFunction ToDocumentFunction(Token token);
    [ExtensionAttribute]
public static Rule CreateRule(StylesheetParser parser, RuleType type);
}
internal class ExCSS.ParserOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <IncludeUnknownRules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeUnknownDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInvalidSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInvalidValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowInvalidConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveDuplicateProperties>k__BackingField;
    public bool IncludeUnknownRules { get; public set; }
    public bool IncludeUnknownDeclarations { get; public set; }
    public bool AllowInvalidSelectors { get; public set; }
    public bool AllowInvalidValues { get; public set; }
    public bool AllowInvalidConstraints { get; public set; }
    public bool PreserveComments { get; public set; }
    public bool PreserveDuplicateProperties { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IncludeUnknownRules();
    [CompilerGeneratedAttribute]
public void set_IncludeUnknownRules(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IncludeUnknownDeclarations();
    [CompilerGeneratedAttribute]
public void set_IncludeUnknownDeclarations(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_AllowInvalidSelectors();
    [CompilerGeneratedAttribute]
public void set_AllowInvalidSelectors(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_AllowInvalidValues();
    [CompilerGeneratedAttribute]
public void set_AllowInvalidValues(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_AllowInvalidConstraints();
    [CompilerGeneratedAttribute]
public void set_AllowInvalidConstraints(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_PreserveComments();
    [CompilerGeneratedAttribute]
public void set_PreserveComments(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_PreserveDuplicateProperties();
    [CompilerGeneratedAttribute]
public void set_PreserveDuplicateProperties(bool value);
}
public class ExCSS.Percent : ValueType {
    public static Percent Zero;
    public static Percent Fifty;
    public static Percent Hundred;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    public float NormalizedValue { get; }
    public float Value { get; }
    public Percent(float value);
    private static Percent();
    public float get_NormalizedValue();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    public static bool op_GreaterThanOrEqual(Percent a, Percent b);
    public static bool op_GreaterThan(Percent a, Percent b);
    public static bool op_LessThanOrEqual(Percent a, Percent b);
    public static bool op_LessThan(Percent a, Percent b);
    public sealed virtual int CompareTo(Percent other);
    public sealed virtual bool Equals(Percent other);
    public static bool op_Equality(Percent a, Percent b);
    public static bool op_Inequality(Percent a, Percent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
internal class ExCSS.PeriodicValueConverter : object {
    private IValueConverter _converter;
    private String[] _labels;
    public PeriodicValueConverter(IValueConverter converter, String[] labels);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.PerspectiveOriginProperty : Property {
    private static IValueConverter PerspectiveConverter;
    internal IValueConverter Converter { get; }
    private static PerspectiveOriginProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PerspectiveProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PerspectiveProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.PerspectiveTransform : object {
    private Length _distance;
    internal PerspectiveTransform(Length distance);
    public sealed virtual TransformMatrix ComputeMatrix();
}
public enum ExCSS.PlayState : Enum {
    public byte value__;
    public static PlayState Running;
    public static PlayState Paused;
}
public class ExCSS.Point : ValueType {
    public static Point Center;
    public static Point LeftTop;
    public static Point RightTop;
    public static Point RightBottom;
    public static Point LeftBottom;
    [CompilerGeneratedAttribute]
private Length <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Y>k__BackingField;
    public Length X { get; }
    public Length Y { get; }
    public Point(Length x, Length y);
    private static Point();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Length get_X();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Length get_Y();
}
public enum ExCSS.PointerAccuracy : Enum {
    public byte value__;
    public static PointerAccuracy None;
    public static PointerAccuracy Coarse;
    public static PointerAccuracy Fine;
}
internal class ExCSS.PointerMediaFeature : MediaFeature {
    private static IValueConverter TheConverter;
    internal IValueConverter Converter { get; }
    private static PointerMediaFeature();
    internal virtual IValueConverter get_Converter();
}
[ExtensionAttribute]
internal static class ExCSS.Pool : object {
    private static Stack`1<StringBuilder> Builder;
    private static Stack`1<SelectorConstructor> Selector;
    private static Stack`1<ValueBuilder> Value;
    private static object Lock;
    private static Pool();
    public static StringBuilder NewStringBuilder();
    public static SelectorConstructor NewSelectorConstructor(AttributeSelectorFactory attributeSelector, PseudoClassSelectorFactory pseudoClassSelector, PseudoElementSelectorFactory pseudoElementSelector);
    public static ValueBuilder NewValueBuilder();
    [ExtensionAttribute]
public static string ToPool(StringBuilder sb);
    [ExtensionAttribute]
public static ISelector ToPool(SelectorConstructor ctor);
    [ExtensionAttribute]
public static TokenValue ToPool(ValueBuilder vb);
}
[ExtensionAttribute]
internal static class ExCSS.PortableExtensions : object {
    [ExtensionAttribute]
public static string ConvertFromUtf32(int utf32);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type);
}
internal static class ExCSS.PortNumbers : object {
    private static Dictionary`2<string, string> Ports;
    private static PortNumbers();
    public static string GetDefaultPort(string protocol);
}
public enum ExCSS.PositionMode : Enum {
    public byte value__;
    public static PositionMode Static;
    public static PositionMode Relative;
    public static PositionMode Absolute;
    public static PositionMode Fixed;
    public static PositionMode Sticky;
}
internal class ExCSS.PositionProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static PositionProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.Priority : ValueType {
    private UInt32 _priority;
    public static Priority Zero;
    public static Priority OneTag;
    public static Priority OneClass;
    public static Priority OneId;
    public static Priority Inline;
    [CompilerGeneratedAttribute]
private byte <Ids>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Classes>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Inlines>k__BackingField;
    public byte Ids { get; }
    public byte Tags { get; }
    public byte Classes { get; }
    public byte Inlines { get; }
    public Priority(UInt32 priority);
    public Priority(byte inlines, byte ids, byte classes, byte tags);
    private static Priority();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Ids();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Tags();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Classes();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Inlines();
    public static Priority op_Addition(Priority a, Priority b);
    public static bool op_Equality(Priority a, Priority b);
    public static bool op_GreaterThan(Priority a, Priority b);
    public static bool op_GreaterThanOrEqual(Priority a, Priority b);
    public static bool op_LessThan(Priority a, Priority b);
    public static bool op_LessThanOrEqual(Priority a, Priority b);
    public static bool op_Inequality(Priority a, Priority b);
    public sealed virtual bool Equals(Priority other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(Priority other);
    public virtual string ToString();
}
public abstract class ExCSS.Property : StylesheetNode {
    private PropertyFlags _flags;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImportant>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyValue <DeclaredValue>k__BackingField;
    public string Value { get; }
    public string Original { get; }
    public bool IsInherited { get; }
    public bool IsAnimatable { get; }
    public bool IsInitial { get; }
    internal bool HasValue { get; }
    internal bool CanBeHashless { get; }
    internal bool CanBeUnitless { get; }
    public bool CanBeInherited { get; }
    internal bool IsShorthand { get; }
    public string Name { get; }
    public bool IsImportant { get; public set; }
    public string CssText { get; }
    internal IValueConverter Converter { get; }
    internal IPropertyValue DeclaredValue { get; internal set; }
    internal Property(string name, PropertyFlags flags);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    internal bool TrySetValue(TokenValue newTokenValue);
    public sealed virtual string get_Value();
    public sealed virtual string get_Original();
    public bool get_IsInherited();
    public bool get_IsAnimatable();
    public bool get_IsInitial();
    internal bool get_HasValue();
    internal bool get_CanBeHashless();
    internal bool get_CanBeUnitless();
    public bool get_CanBeInherited();
    internal bool get_IsShorthand();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsImportant();
    [CompilerGeneratedAttribute]
public void set_IsImportant(bool value);
    public string get_CssText();
    internal abstract virtual IValueConverter get_Converter();
    [CompilerGeneratedAttribute]
internal IPropertyValue get_DeclaredValue();
    [CompilerGeneratedAttribute]
internal void set_DeclaredValue(IPropertyValue value);
}
[ExtensionAttribute]
internal static class ExCSS.PropertyExtensions : object {
    [ExtensionAttribute]
public static IPropertyValue Guard(Property[] properties);
}
internal class ExCSS.PropertyFactory : object {
    private static Lazy`1<PropertyFactory> Lazy;
    private List`1<string> _animatables;
    private Dictionary`2<string, LonghandCreator> _fonts;
    private Dictionary`2<string, LonghandCreator> _longhands;
    private Dictionary`2<string, String[]> _mappings;
    private Dictionary`2<string, ShorthandCreator> _shorthands;
    internal static PropertyFactory Instance { get; }
    private static PropertyFactory();
    internal static PropertyFactory get_Instance();
    private void AddShorthand(string name, ShorthandCreator creator, String[] longhands);
    private void AddLonghand(string name, LonghandCreator creator, bool animatable, bool font);
    public Property Create(string name);
    public Property CreateFont(string name);
    public Property CreateViewport(string name);
    public Property CreateLonghand(string name);
    public ShorthandProperty CreateShorthand(string name);
    public Property[] CreateLonghandsFor(string name);
    public bool IsShorthand(string name);
    public bool IsAnimatable(string name);
    public String[] GetLonghands(string name);
    public IEnumerable`1<string> GetShorthands(string name);
}
[FlagsAttribute]
internal enum ExCSS.PropertyFlags : Enum {
    public byte value__;
    public static PropertyFlags None;
    public static PropertyFlags Inherited;
    public static PropertyFlags Hashless;
    public static PropertyFlags Unitless;
    public static PropertyFlags Animatable;
    public static PropertyFlags Shorthand;
}
public static class ExCSS.PropertyNames : object {
    public static string AlignContent;
    public static string AlignItems;
    public static string AlignBaseline;
    public static string AlignSelf;
    public static string Accelerator;
    public static string Animation;
    public static string AnimationDelay;
    public static string AnimationDirection;
    public static string AnimationDuration;
    public static string AnimationFillMode;
    public static string AnimationIterationCount;
    public static string AnimationName;
    public static string AnimationPlayState;
    public static string AnimationTimingFunction;
    public static string BackgroundAttachment;
    public static string BackgroundColor;
    public static string BackgroundClip;
    public static string BackgroundOrigin;
    public static string BackgroundSize;
    public static string BackgroundImage;
    public static string BackgroundPosition;
    public static string BackgroundPositionX;
    public static string BackgroundPositionY;
    public static string BackgroundRepeat;
    public static string Background;
    public static string Behavior;
    public static string BaselineShift;
    public static string BorderColor;
    public static string BorderSpacing;
    public static string BorderCollapse;
    public static string BorderStyle;
    public static string BorderRadius;
    public static string BorderTopLeftRadius;
    public static string BorderTopRightRadius;
    public static string BorderBottomLeftRadius;
    public static string BorderBottomRightRadius;
    public static string BoxShadow;
    public static string BoxSizing;
    public static string BoxDecorationBreak;
    public static string BreakAfter;
    public static string BreakBefore;
    public static string BreakInside;
    public static string BackfaceVisibility;
    public static string BorderImage;
    public static string BorderImageOutset;
    public static string BorderImageRepeat;
    public static string BorderImageSource;
    public static string BorderImageSlice;
    public static string BorderImageWidth;
    public static string BorderTop;
    public static string BorderRight;
    public static string BorderBottom;
    public static string BorderLeft;
    public static string BorderTopColor;
    public static string BorderLeftColor;
    public static string BorderRightColor;
    public static string BorderBottomColor;
    public static string BorderTopStyle;
    public static string BorderLeftStyle;
    public static string BorderRightStyle;
    public static string BorderBottomStyle;
    public static string BorderTopWidth;
    public static string BorderLeftWidth;
    public static string BorderRightWidth;
    public static string BorderBottomWidth;
    public static string BorderWidth;
    public static string Border;
    public static string Bottom;
    public static string Columns;
    public static string ColumnCount;
    public static string ColumnFill;
    public static string ColumnGap;
    public static string ColumnRule;
    public static string ColumnRuleColor;
    public static string ColumnRuleStyle;
    public static string ColumnRuleWidth;
    public static string ColumnSpan;
    public static string ColumnWidth;
    public static string CaptionSide;
    public static string Clear;
    public static string Clip;
    public static string ClipLeft;
    public static string ClipTop;
    public static string ClipRight;
    public static string ClipBottom;
    public static string ClipPath;
    public static string ClipRule;
    public static string Color;
    public static string ColorInterpolationFilters;
    public static string Content;
    public static string CounterIncrement;
    public static string CounterReset;
    public static string Cursor;
    public static string Direction;
    public static string Display;
    public static string DominantBaseline;
    public static string EmptyCells;
    public static string EnableBackground;
    public static string Fill;
    public static string FillOpacity;
    public static string FillRule;
    public static string Filter;
    public static string Flex;
    public static string FlexBasis;
    public static string FlexDirection;
    public static string FlexFlow;
    public static string FlexGrow;
    public static string FlexShrink;
    public static string FlexWrap;
    public static string Float;
    public static string FontFamily;
    public static string FontFeatureSettings;
    public static string FontSize;
    public static string FontSizeAdjust;
    public static string FontStyle;
    public static string FontStretch;
    public static string FontVariant;
    public static string FontWeight;
    public static string Font;
    public static string Gap;
    public static string GlyphOrientationHorizontal;
    public static string GlyphOrientationVertical;
    public static string Height;
    public static string ImeMode;
    public static string JustifyContent;
    public static string LayoutGrid;
    public static string LayoutGridChar;
    public static string LayoutGridType;
    public static string LayoutGridMode;
    public static string LayoutGridLine;
    public static string Left;
    public static string LetterSpacing;
    public static string LineHeight;
    public static string ListStyleImage;
    public static string ListStylePosition;
    public static string ListStyleType;
    public static string ListStyle;
    public static string MarginRight;
    public static string MarginLeft;
    public static string MarginTop;
    public static string MarginBottom;
    public static string Margin;
    public static string Marker;
    public static string MarkerEnd;
    public static string MarkerMid;
    public static string MarkerStart;
    public static string Mask;
    public static string MaxHeight;
    public static string MaxWidth;
    public static string MinHeight;
    public static string MinWidth;
    public static string Opacity;
    public static string Order;
    public static string Orphans;
    public static string OutlineColor;
    public static string OutlineStyle;
    public static string OutlineWidth;
    public static string Outline;
    public static string Overflow;
    public static string OverflowX;
    public static string OverflowY;
    public static string OverflowWrap;
    public static string PaddingTop;
    public static string PaddingRight;
    public static string PaddingLeft;
    public static string PaddingBottom;
    public static string Padding;
    public static string PageBreakAfter;
    public static string PageBreakBefore;
    public static string PageBreakInside;
    public static string Perspective;
    public static string PerspectiveOrigin;
    public static string PointerEvents;
    public static string Position;
    public static string Quotes;
    public static string Right;
    public static string RowGap;
    public static string RubyAlign;
    public static string RubyOverhang;
    public static string RubyPosition;
    public static string Scrollbar3dLightColor;
    public static string ScrollbarArrowColor;
    public static string ScrollbarDarkShadowColor;
    public static string ScrollbarFaceColor;
    public static string ScrollbarHighlightColor;
    public static string ScrollbarShadowColor;
    public static string ScrollbarTrackColor;
    public static string Stroke;
    public static string StrokeDasharray;
    public static string StrokeDashoffset;
    public static string StrokeLinecap;
    public static string StrokeLinejoin;
    public static string StrokeMiterlimit;
    public static string StrokeOpacity;
    public static string StrokeWidth;
    public static string TableLayout;
    public static string TextAlign;
    public static string TextAlignLast;
    public static string TextAnchor;
    public static string TextAutospace;
    public static string TextDecoration;
    public static string TextDecorationColor;
    public static string TextDecorationLine;
    public static string TextDecorationStyle;
    public static string TextIndent;
    public static string TextJustify;
    public static string TextOverflow;
    public static string TextShadow;
    public static string TextTransform;
    public static string TextUnderlinePosition;
    public static string Transform;
    public static string TransformOrigin;
    public static string TransformStyle;
    public static string Transition;
    public static string TransitionDelay;
    public static string TransitionDuration;
    public static string TransitionTimingFunction;
    public static string TransitionProperty;
    public static string Top;
    public static string UnicodeBidirectional;
    public static string VerticalAlign;
    public static string Visibility;
    public static string WhiteSpace;
    public static string Widows;
    public static string Width;
    public static string WordBreak;
    public static string WordSpacing;
    public static string WordWrap;
    public static string WritingMode;
    public static string ZIndex;
    public static string Zoom;
    public static string UnicodeRange;
    public static string Src;
    public static string ObjectFit;
    public static string ObjectPosition;
    private static PropertyNames();
}
public static class ExCSS.ProtocolNames : object {
    public static string Http;
    public static string Https;
    public static string Ftp;
    public static string JavaScript;
    public static string Data;
    public static string Mailto;
    public static string File;
    public static string Ws;
    public static string Wss;
    public static string Telnet;
    public static string Ssh;
    public static string Gopher;
    public static string Blob;
    private static String[] RelativeProtocols;
    private static String[] OriginalableProtocols;
    private static ProtocolNames();
    public static bool IsRelative(string protocol);
    public static bool IsOriginable(string protocol);
}
public static class ExCSS.PseudoClassNames : object {
    public static string Root;
    public static string Scope;
    public static string OnlyType;
    public static string FirstOfType;
    public static string LastOfType;
    public static string OnlyChild;
    public static string FirstChild;
    public static string LastChild;
    public static string Empty;
    public static string AnyLink;
    public static string Link;
    public static string Visited;
    public static string Active;
    public static string Hover;
    public static string Focus;
    public static string FocusVisible;
    public static string FocusWithin;
    public static string Target;
    public static string Enabled;
    public static string Disabled;
    public static string Checked;
    public static string Unchecked;
    public static string Indeterminate;
    public static string PlaceholderShown;
    public static string Default;
    public static string Valid;
    public static string Invalid;
    public static string Required;
    public static string InRange;
    public static string OutOfRange;
    public static string Optional;
    public static string ReadOnly;
    public static string ReadWrite;
    public static string Shadow;
    public static string Dir;
    public static string Has;
    public static string Matches;
    public static string NthChild;
    public static string NthLastChild;
    public static string NthOfType;
    public static string NthLastOfType;
    public static string NthColumn;
    public static string NthLastColumn;
    public static string Not;
    public static string Lang;
    public static string Contains;
    public static string HostContext;
    public static string Separator;
    private static PseudoClassNames();
}
public class ExCSS.PseudoClassSelector : SelectorBase {
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    public string Class { get; }
    private PseudoClassSelector(string name);
    [CompilerGeneratedAttribute]
public string get_Class();
    public static ISelector Create(string name);
}
public class ExCSS.PseudoClassSelectorFactory : object {
    private static Lazy`1<PseudoClassSelectorFactory> Lazy;
    private static Dictionary`2<string, ISelector> Selectors;
    internal static PseudoClassSelectorFactory Instance { get; }
    private static PseudoClassSelectorFactory();
    internal static PseudoClassSelectorFactory get_Instance();
    public ISelector Create(string name);
}
public static class ExCSS.PseudoElementNames : object {
    public static string Before;
    public static string After;
    public static string Selection;
    public static string FirstLine;
    public static string FirstLetter;
    public static string Content;
    public static string Separator;
    private static PseudoElementNames();
}
public class ExCSS.PseudoElementSelector : SelectorBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    private PseudoElementSelector(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public static ISelector Create(string name);
}
public class ExCSS.PseudoElementSelectorFactory : object {
    private static Lazy`1<PseudoElementSelectorFactory> Lazy;
    private StylesheetParser _parser;
    private Dictionary`2<string, ISelector> _selectors;
    internal static PseudoElementSelectorFactory Instance { get; }
    internal PseudoElementSelectorFactory(StylesheetParser parser);
    private static PseudoElementSelectorFactory();
    internal static PseudoElementSelectorFactory get_Instance();
    public ISelector Create(string name);
}
internal enum ExCSS.QuirksMode : Enum {
    public byte value__;
    public static QuirksMode Off;
    public static QuirksMode Limited;
    public static QuirksMode On;
}
internal class ExCSS.QuotesProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static QuotesProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.RadialGradient : object {
    private GradientStop[] _stops;
    [CompilerGeneratedAttribute]
private bool <IsCircle>k__BackingField;
    [CompilerGeneratedAttribute]
private SizeMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <MajorRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <MinorRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRepeating>k__BackingField;
    public bool IsCircle { get; }
    public SizeMode Mode { get; }
    public Point Position { get; }
    public Length MajorRadius { get; }
    public Length MinorRadius { get; }
    public IEnumerable`1<GradientStop> Stops { get; }
    public bool IsRepeating { get; }
    public RadialGradient(bool circle, Point pt, Length width, Length height, SizeMode sizeMode, GradientStop[] stops, bool repeating);
    [CompilerGeneratedAttribute]
public bool get_IsCircle();
    [CompilerGeneratedAttribute]
public SizeMode get_Mode();
    [CompilerGeneratedAttribute]
public Point get_Position();
    [CompilerGeneratedAttribute]
public Length get_MajorRadius();
    [CompilerGeneratedAttribute]
public Length get_MinorRadius();
    public IEnumerable`1<GradientStop> get_Stops();
    [CompilerGeneratedAttribute]
public bool get_IsRepeating();
}
internal class ExCSS.RadialGradientConverter : GradientConverter {
    private IValueConverter _converter;
    protected virtual IPropertyValue ConvertFirstArgument(IEnumerable`1<Token> value);
}
internal class ExCSS.RangeToken : Token {
    [CompilerGeneratedAttribute]
private string <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private string <End>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SelectedRange>k__BackingField;
    public string Start { get; }
    public string End { get; }
    public String[] SelectedRange { get; }
    public RangeToken(string range, TextPosition position);
    public RangeToken(string start, string end, TextPosition position);
    private String[] GetRange();
    [CompilerGeneratedAttribute]
public string get_Start();
    [CompilerGeneratedAttribute]
public string get_End();
    [CompilerGeneratedAttribute]
public String[] get_SelectedRange();
}
internal class ExCSS.RegexpFunction : DocumentFunction {
    private Regex _regex;
    public RegexpFunction(string url);
    public virtual bool Matches(Url url);
}
internal class ExCSS.RequiredValueConverter : object {
    private IValueConverter _converter;
    public RequiredValueConverter(IValueConverter converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
public class ExCSS.Resolution : ValueType {
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Unit <Type>k__BackingField;
    public float Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Resolution(float value, Unit unit);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Unit get_Type();
    public string get_UnitString();
    public static bool TryParse(string s, Resolution& result);
    public static Unit GetUnit(string s);
    public float ToDotsPerPixel();
    public float To(Unit unit);
    public sealed virtual bool Equals(Resolution other);
    public sealed virtual int CompareTo(Resolution other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
internal class ExCSS.ResolutionMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public ResolutionMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.RightProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static RightProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.RotateTransform : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Z>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Angle>k__BackingField;
    public float X { get; }
    public float Y { get; }
    public float Z { get; }
    public float Angle { get; }
    internal RotateTransform(float x, float y, float z, float angle);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public float get_Z();
    [CompilerGeneratedAttribute]
public float get_Angle();
    public sealed virtual TransformMatrix ComputeMatrix();
}
internal class ExCSS.RowGapProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static RowGapProperty();
    internal virtual IValueConverter get_Converter();
}
public abstract class ExCSS.Rule : StylesheetNode {
    private IRule _parentRule;
    [CompilerGeneratedAttribute]
private StylesheetParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private Stylesheet <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleType <Type>k__BackingField;
    internal StylesheetParser Parser { get; }
    public Stylesheet Owner { get; internal set; }
    public RuleType Type { get; }
    public string Text { get; public set; }
    public IRule Parent { get; internal set; }
    internal Rule(RuleType type, StylesheetParser parser);
    [CompilerGeneratedAttribute]
internal StylesheetParser get_Parser();
    [CompilerGeneratedAttribute]
public sealed virtual Stylesheet get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Stylesheet value);
    [CompilerGeneratedAttribute]
public sealed virtual RuleType get_Type();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual IRule get_Parent();
    internal void set_Parent(IRule value);
    protected virtual void ReplaceWith(IRule rule);
    protected void ReplaceSingle(IStylesheetNode oldNode, IStylesheetNode newNode);
}
[DefaultMemberAttribute("Item")]
internal class ExCSS.RuleList : object {
    private StylesheetNode _parent;
    public Rule Item { get; }
    private IRule ExCSS.IRuleList.Item { get; }
    public bool HasDeclarativeRules { get; }
    public IEnumerable`1<Rule> Nodes { get; }
    public int Length { get; }
    internal RuleList(StylesheetNode parent);
    public Rule get_Item(int index);
    private sealed virtual override IRule ExCSS.IRuleList.get_Item(int index);
    public bool get_HasDeclarativeRules();
    public IEnumerable`1<Rule> get_Nodes();
    public sealed virtual int get_Length();
    private static bool IsDeclarativeRule(Rule rule);
    internal void RemoveAt(int index);
    internal void Remove(Rule rule);
    internal void Insert(int index, Rule rule);
    internal void Add(Rule rule);
    public sealed virtual IEnumerator`1<IRule> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class ExCSS.RuleNames : object {
    public static string Supports;
    public static string Charset;
    public static string Document;
    public static string FontFace;
    public static string ViewPort;
    public static string Import;
    public static string Keyframes;
    public static string Media;
    public static string Namespace;
    public static string Page;
    private static RuleNames();
}
public enum ExCSS.RuleType : Enum {
    public byte value__;
    public static RuleType Unknown;
    public static RuleType Style;
    public static RuleType Charset;
    public static RuleType Import;
    public static RuleType Media;
    public static RuleType FontFace;
    public static RuleType Page;
    public static RuleType Keyframes;
    public static RuleType Keyframe;
    public static RuleType MarginBox;
    public static RuleType Namespace;
    public static RuleType CounterStyle;
    public static RuleType Supports;
    public static RuleType Document;
    public static RuleType FontFeatureValues;
    public static RuleType Viewport;
    public static RuleType RegionStyle;
}
internal class ExCSS.ScaleTransform : object {
    private float _sx;
    private float _sy;
    private float _sz;
    internal ScaleTransform(float sx, float sy, float sz);
    public sealed virtual TransformMatrix ComputeMatrix();
}
internal class ExCSS.ScanMediaFeature : MediaFeature {
    private static IValueConverter TheConverter;
    internal IValueConverter Converter { get; }
    private static ScanMediaFeature();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ScriptingMediaFeature : MediaFeature {
    private static IValueConverter TheConverter;
    internal IValueConverter Converter { get; }
    private static ScriptingMediaFeature();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.ScriptingState : Enum {
    public byte value__;
    public static ScriptingState None;
    public static ScriptingState InitialOnly;
    public static ScriptingState Enabled;
}
public abstract class ExCSS.SelectorBase : StylesheetNode {
    [CompilerGeneratedAttribute]
private Priority <Specificity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public Priority Specificity { get; }
    public string Text { get; }
    protected SelectorBase(Priority specificity, string text);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    [CompilerGeneratedAttribute]
public sealed virtual Priority get_Specificity();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
}
internal class ExCSS.SelectorConstructor : object {
    private Stack`1<Combinator> _combinators;
    private State _state;
    private ISelector _temp;
    private ListSelector _group;
    private ComplexSelector _complex;
    private string _attrName;
    private string _attrValue;
    private string _attrOp;
    private string _attrNs;
    private bool _valid;
    private bool _ready;
    private AttributeSelectorFactory _attributeSelector;
    private PseudoElementSelectorFactory _pseudoElementSelector;
    private PseudoClassSelectorFactory _pseudoClassSelector;
    private static Dictionary`2<string, Func`2<SelectorConstructor, FunctionState>> PseudoClassFunctions;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    public bool IsValid { get; }
    public bool IsNested { get; private set; }
    public SelectorConstructor(AttributeSelectorFactory attributeSelector, PseudoClassSelectorFactory pseudoClassSelector, PseudoElementSelectorFactory pseudoElementSelector);
    private static SelectorConstructor();
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public bool get_IsNested();
    [CompilerGeneratedAttribute]
private void set_IsNested(bool value);
    public ISelector GetResult();
    public void Apply(Token token);
    public SelectorConstructor Reset(AttributeSelectorFactory attributeSelector, PseudoClassSelectorFactory pseudoClassSelector, PseudoElementSelectorFactory pseudoElementSelector);
    private void OnData(Token token);
    private void OnAttribute(Token token);
    private void OnAttributeOperator(Token token);
    private void OnAttributeValue(Token token);
    private void OnAttributeEnd(Token token);
    private void OnPseudoClass(Token token);
    private void OnPseudoElement(Token token);
    private void OnClass(Token token);
    private void InsertOr();
    private void Insert(ISelector selector);
    private Combinator GetCombinator();
    private void Insert(Combinator combinator);
    private void OnDelim(Token token);
    private ISelector GetPseudoFunction(FunctionToken arguments);
    private SelectorConstructor CreateChild();
}
[DefaultMemberAttribute("Item")]
public abstract class ExCSS.Selectors : StylesheetNode {
    protected List`1<ISelector> _selectors;
    public Priority Specificity { get; }
    public string Text { get; }
    public int Length { get; }
    public ISelector Item { get; public set; }
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public int get_Length();
    public ISelector get_Item(int index);
    public void set_Item(int index, ISelector value);
    public void Add(ISelector selector);
    public void Remove(ISelector selector);
    public sealed virtual IEnumerator`1<ISelector> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class ExCSS.Shadow : object {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <OffsetX>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <OffsetY>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <BlurRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <SpreadRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInset>k__BackingField;
    public Color Color { get; }
    public Length OffsetX { get; }
    public Length OffsetY { get; }
    public Length BlurRadius { get; }
    public Length SpreadRadius { get; }
    public bool IsInset { get; }
    public Shadow(bool inset, Length offsetX, Length offsetY, Length blurRadius, Length spreadRadius, Color color);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public Length get_OffsetX();
    [CompilerGeneratedAttribute]
public Length get_OffsetY();
    [CompilerGeneratedAttribute]
public Length get_BlurRadius();
    [CompilerGeneratedAttribute]
public Length get_SpreadRadius();
    [CompilerGeneratedAttribute]
public bool get_IsInset();
}
public class ExCSS.Shape : object {
    [CompilerGeneratedAttribute]
private Length <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Left>k__BackingField;
    public Length Top { get; }
    public Length Right { get; }
    public Length Bottom { get; }
    public Length Left { get; }
    public Shape(Length top, Length right, Length bottom, Length left);
    [CompilerGeneratedAttribute]
public Length get_Top();
    [CompilerGeneratedAttribute]
public Length get_Right();
    [CompilerGeneratedAttribute]
public Length get_Bottom();
    [CompilerGeneratedAttribute]
public Length get_Left();
}
internal abstract class ExCSS.ShorthandProperty : Property {
    protected ShorthandProperty(string name, PropertyFlags flags);
    public string Stringify(Property[] properties);
    public void Export(Property[] properties);
}
internal class ExCSS.SkewTransform : object {
    [CompilerGeneratedAttribute]
private float <Alpha>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Beta>k__BackingField;
    public float Alpha { get; }
    public float Beta { get; }
    internal SkewTransform(float alpha, float beta);
    public sealed virtual TransformMatrix ComputeMatrix();
    [CompilerGeneratedAttribute]
public float get_Alpha();
    [CompilerGeneratedAttribute]
public float get_Beta();
}
internal class ExCSS.SrcProperty : Property {
    internal IValueConverter Converter { get; }
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.StartsWithValueConverter : object {
    private IValueConverter _converter;
    private string _data;
    private TokenType _type;
    public StartsWithValueConverter(TokenType type, string data, IValueConverter converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
    private IPropertyValue CreateFrom(IPropertyValue value, IEnumerable`1<Token> tokens);
    private List`1<Token> Transform(IEnumerable`1<Token> values);
}
public class ExCSS.StepsTimingFunction : object {
    [CompilerGeneratedAttribute]
private int <Intervals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStart>k__BackingField;
    public int Intervals { get; }
    public bool IsStart { get; }
    public StepsTimingFunction(int intervals, bool start);
    [CompilerGeneratedAttribute]
public int get_Intervals();
    [CompilerGeneratedAttribute]
public bool get_IsStart();
}
[ExtensionAttribute]
internal static class ExCSS.StringExtensions : object {
    [ExtensionAttribute]
public static bool Has(string value, char chr, int index);
    [ExtensionAttribute]
public static bool Contains(String[] list, string element, StringComparison comparison);
    [ExtensionAttribute]
public static bool Is(string current, string other);
    [ExtensionAttribute]
public static bool Isi(string current, string other);
    [ExtensionAttribute]
public static bool IsOneOf(string element, string item1, string item2);
    [ExtensionAttribute]
public static string StylesheetString(string value);
    [ExtensionAttribute]
public static string StylesheetFunction(string value, string argument);
    [ExtensionAttribute]
public static string StylesheetUrl(string value);
    [ExtensionAttribute]
public static string StylesheetUnit(string value, Single& result);
}
internal class ExCSS.StringsValueConverter : object {
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.StringToken : Token {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Quote>k__BackingField;
    public bool IsValid { get; }
    public char Quote { get; }
    public StringToken(string data, bool valid, char quote, TextPosition position);
    public virtual string ToValue();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public char get_Quote();
}
internal class ExCSS.StringValueConverter : object {
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.StrokeDasharrayProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeDasharrayProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.StrokeDashoffsetProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeDashoffsetProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.StrokeLinecap : Enum {
    public byte value__;
    public static StrokeLinecap Butt;
    public static StrokeLinecap Round;
    public static StrokeLinecap Square;
}
internal class ExCSS.StrokeLinecapProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeLinecapProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.StrokeLinejoin : Enum {
    public byte value__;
    public static StrokeLinejoin Miter;
    public static StrokeLinejoin Round;
    public static StrokeLinejoin Bevel;
}
internal class ExCSS.StrokeLinejoinProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeLinejoinProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.StrokeMiterlimitProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeMiterlimitProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.StrokeOpacityProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeOpacityProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.StrokeProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.StrokeWidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static StrokeWidthProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.StructValueConverter`1 : object {
    private Func`2<IEnumerable`1<Token>, Nullable`1<T>> _converter;
    public StructValueConverter`1(Func`2<IEnumerable`1<Token>, Nullable`1<T>> converter);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
[DefaultMemberAttribute("Item")]
public class ExCSS.StyleDeclaration : StylesheetNode {
    private Rule _parent;
    private StylesheetParser _parser;
    [CompilerGeneratedAttribute]
private Action`1<string> Changed;
    public IRule Parent { get; }
    public string Item { get; }
    public string Item { get; }
    public int Length { get; }
    public bool IsStrictMode { get; }
    public IEnumerable`1<Property> Declarations { get; }
    public string CssText { get; public set; }
    public string AlignContent { get; public set; }
    public string AlignItems { get; public set; }
    public string AlignSelf { get; public set; }
    public string Accelerator { get; public set; }
    public string AlignmentBaseline { get; public set; }
    public string Animation { get; public set; }
    public string AnimationDelay { get; public set; }
    public string AnimationDirection { get; public set; }
    public string AnimationDuration { get; public set; }
    public string AnimationFillMode { get; public set; }
    public string AnimationIterationCount { get; public set; }
    public string AnimationName { get; public set; }
    public string AnimationPlayState { get; public set; }
    public string AnimationTimingFunction { get; public set; }
    public string BackfaceVisibility { get; public set; }
    public string Background { get; public set; }
    public string BackgroundAttachment { get; public set; }
    public string BackgroundClip { get; public set; }
    public string BackgroundColor { get; public set; }
    public string BackgroundImage { get; public set; }
    public string BackgroundOrigin { get; public set; }
    public string BackgroundPosition { get; public set; }
    public string BackgroundPositionX { get; public set; }
    public string BackgroundPositionY { get; public set; }
    public string BackgroundRepeat { get; public set; }
    public string BackgroundSize { get; public set; }
    public string BaselineShift { get; public set; }
    public string Behavior { get; public set; }
    public string Bottom { get; public set; }
    public string Border { get; public set; }
    public string BorderBottom { get; public set; }
    public string BorderBottomColor { get; public set; }
    public string BorderBottomLeftRadius { get; public set; }
    public string BorderBottomRightRadius { get; public set; }
    public string BorderBottomStyle { get; public set; }
    public string BorderBottomWidth { get; public set; }
    public string BorderCollapse { get; public set; }
    public string BorderColor { get; public set; }
    public string BorderImage { get; public set; }
    public string BorderImageOutset { get; public set; }
    public string BorderImageRepeat { get; public set; }
    public string BorderImageSlice { get; public set; }
    public string BorderImageSource { get; public set; }
    public string BorderImageWidth { get; public set; }
    public string BorderLeft { get; public set; }
    public string BorderLeftColor { get; public set; }
    public string BorderLeftStyle { get; public set; }
    public string BorderLeftWidth { get; public set; }
    public string BorderRadius { get; public set; }
    public string BorderRight { get; public set; }
    public string BorderRightColor { get; public set; }
    public string BorderRightStyle { get; public set; }
    public string BorderRightWidth { get; public set; }
    public string BorderSpacing { get; public set; }
    public string BorderStyle { get; public set; }
    public string BorderTop { get; public set; }
    public string BorderTopColor { get; public set; }
    public string BorderTopLeftRadius { get; public set; }
    public string BorderTopRightRadius { get; public set; }
    public string BorderTopStyle { get; public set; }
    public string BorderTopWidth { get; public set; }
    public string BorderWidth { get; public set; }
    public string BoxShadow { get; public set; }
    public string BoxSizing { get; public set; }
    public string BreakAfter { get; public set; }
    public string BreakBefore { get; public set; }
    public string BreakInside { get; public set; }
    public string CaptionSide { get; public set; }
    public string Clear { get; public set; }
    public string Clip { get; public set; }
    public string ClipBottom { get; public set; }
    public string ClipLeft { get; public set; }
    public string ClipPath { get; public set; }
    public string ClipRight { get; public set; }
    public string ClipRule { get; public set; }
    public string ClipTop { get; public set; }
    public string Color { get; public set; }
    public string ColorInterpolationFilters { get; public set; }
    public string ColumnCount { get; public set; }
    public string ColumnFill { get; public set; }
    public string ColumnGap { get; public set; }
    public string ColumnRule { get; public set; }
    public string ColumnRuleColor { get; public set; }
    public string ColumnRuleStyle { get; public set; }
    public string ColumnRuleWidth { get; public set; }
    public string Columns { get; public set; }
    public string ColumnSpan { get; public set; }
    public string ColumnWidth { get; public set; }
    public string Content { get; public set; }
    public string CounterIncrement { get; public set; }
    public string CounterReset { get; public set; }
    public string Float { get; public set; }
    public string Cursor { get; public set; }
    public string Direction { get; public set; }
    public string Display { get; public set; }
    public string DominantBaseline { get; public set; }
    public string EmptyCells { get; public set; }
    public string EnableBackground { get; public set; }
    public string Fill { get; public set; }
    public string FillOpacity { get; public set; }
    public string FillRule { get; public set; }
    public string Filter { get; public set; }
    public string Flex { get; public set; }
    public string FlexBasis { get; public set; }
    public string FlexDirection { get; public set; }
    public string FlexFlow { get; public set; }
    public string FlexGrow { get; public set; }
    public string FlexShrink { get; public set; }
    public string FlexWrap { get; public set; }
    public string Font { get; public set; }
    public string FontFamily { get; public set; }
    public string FontFeatureSettings { get; public set; }
    public string FontSize { get; public set; }
    public string FontSizeAdjust { get; public set; }
    public string FontStretch { get; public set; }
    public string FontStyle { get; public set; }
    public string FontVariant { get; public set; }
    public string FontWeight { get; public set; }
    public string Gap { get; public set; }
    public string GlyphOrientationHorizontal { get; public set; }
    public string GlyphOrientationVertical { get; public set; }
    public string Height { get; public set; }
    public string ImeMode { get; public set; }
    public string JustifyContent { get; public set; }
    public string LayoutGrid { get; public set; }
    public string LayoutGridChar { get; public set; }
    public string LayoutGridLine { get; public set; }
    public string LayoutGridMode { get; public set; }
    public string LayoutGridType { get; public set; }
    public string Left { get; public set; }
    public string LetterSpacing { get; public set; }
    public string LineHeight { get; public set; }
    public string ListStyle { get; public set; }
    public string ListStyleImage { get; public set; }
    public string ListStylePosition { get; public set; }
    public string ListStyleType { get; public set; }
    public string Margin { get; public set; }
    public string MarginBottom { get; public set; }
    public string MarginLeft { get; public set; }
    public string MarginRight { get; public set; }
    public string MarginTop { get; public set; }
    public string Marker { get; public set; }
    public string MarkerEnd { get; public set; }
    public string MarkerMid { get; public set; }
    public string MarkerStart { get; public set; }
    public string Mask { get; public set; }
    public string MaxHeight { get; public set; }
    public string MaxWidth { get; public set; }
    public string MinHeight { get; public set; }
    public string MinWidth { get; public set; }
    public string Opacity { get; public set; }
    public string Order { get; public set; }
    public string Orphans { get; public set; }
    public string Outline { get; public set; }
    public string OutlineColor { get; public set; }
    public string OutlineStyle { get; public set; }
    public string OutlineWidth { get; public set; }
    public string Overflow { get; public set; }
    public string OverflowX { get; public set; }
    public string OverflowY { get; public set; }
    public string OverflowWrap { get; public set; }
    public string Padding { get; public set; }
    public string PaddingBottom { get; public set; }
    public string PaddingLeft { get; public set; }
    public string PaddingRight { get; public set; }
    public string PaddingTop { get; public set; }
    public string PageBreakAfter { get; public set; }
    public string PageBreakBefore { get; public set; }
    public string PageBreakInside { get; public set; }
    public string Perspective { get; public set; }
    public string PerspectiveOrigin { get; public set; }
    public string PointerEvents { get; public set; }
    public string RowGap { get; public set; }
    public string Quotes { get; public set; }
    public string Position { get; public set; }
    public string Right { get; public set; }
    public string RubyAlign { get; public set; }
    public string RubyOverhang { get; public set; }
    public string RubyPosition { get; public set; }
    public string Scrollbar3DLightColor { get; public set; }
    public string ScrollbarArrowColor { get; public set; }
    public string ScrollbarDarkShadowColor { get; public set; }
    public string ScrollbarFaceColor { get; public set; }
    public string ScrollbarHighlightColor { get; public set; }
    public string ScrollbarShadowColor { get; public set; }
    public string ScrollbarTrackColor { get; public set; }
    public string Stroke { get; public set; }
    public string StrokeDasharray { get; public set; }
    public string StrokeDashoffset { get; public set; }
    public string StrokeLinecap { get; public set; }
    public string StrokeLinejoin { get; public set; }
    public string StrokeMiterlimit { get; public set; }
    public string StrokeOpacity { get; public set; }
    public string StrokeWidth { get; public set; }
    public string TableLayout { get; public set; }
    public string TextAlign { get; public set; }
    public string TextAlignLast { get; public set; }
    public string TextAnchor { get; public set; }
    public string TextAutospace { get; public set; }
    public string TextDecoration { get; public set; }
    public string TextIndent { get; public set; }
    public string TextJustify { get; public set; }
    public string TextOverflow { get; public set; }
    public string TextShadow { get; public set; }
    public string TextTransform { get; public set; }
    public string TextUnderlinePosition { get; public set; }
    public string Top { get; public set; }
    public string Transform { get; public set; }
    public string TransformOrigin { get; public set; }
    public string TransformStyle { get; public set; }
    public string Transition { get; public set; }
    public string TransitionDelay { get; public set; }
    public string TransitionDuration { get; public set; }
    public string TransitionProperty { get; public set; }
    public string TransitionTimingFunction { get; public set; }
    public string UnicodeBidirectional { get; public set; }
    public string VerticalAlign { get; public set; }
    public string Visibility { get; public set; }
    public string WhiteSpace { get; public set; }
    public string Widows { get; public set; }
    public string Width { get; public set; }
    public string WordBreak { get; public set; }
    public string WordSpacing { get; public set; }
    public string WritingMode { get; public set; }
    public string ZIndex { get; public set; }
    public string Zoom { get; public set; }
    private StyleDeclaration(Rule parent, StylesheetParser parser);
    internal StyleDeclaration(StylesheetParser parser);
    internal StyleDeclaration(Rule parent);
    [CompilerGeneratedAttribute]
public void add_Changed(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_Changed(Action`1<string> value);
    public void Update(string value);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual string RemoveProperty(string propertyName);
    private void RemovePropertyByName(string propertyName);
    public sealed virtual string GetPropertyPriority(string propertyName);
    public sealed virtual string GetPropertyValue(string propertyName);
    public void SetPropertyValue(string propertyName, string propertyValue);
    public void SetPropertyPriority(string propertyName, string priority);
    public sealed virtual void SetProperty(string propertyName, string propertyValue, string priority);
    internal Property CreateProperty(string propertyName);
    internal Property GetProperty(string name);
    internal void SetProperty(Property property);
    internal void SetDeclarations(IEnumerable`1<Property> declarations);
    internal void UpdateDeclarations(IEnumerable`1<Property> declarations);
    private void ChangeDeclarations(IEnumerable`1<Property> declarations, Predicate`1<Property> defaultSkip, Func`3<Property, Property, bool> removeExisting);
    private void SetLonghand(Property property);
    private void SetShorthand(ShorthandProperty shorthand);
    private void RaiseChanged();
    public sealed virtual IEnumerator`1<IProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IRule get_Parent();
    public string get_Item(int index);
    public sealed virtual string get_Item(string name);
    public sealed virtual int get_Length();
    public bool get_IsStrictMode();
    public IEnumerable`1<Property> get_Declarations();
    public string get_CssText();
    public void set_CssText(string value);
    public string get_AlignContent();
    public void set_AlignContent(string value);
    public string get_AlignItems();
    public void set_AlignItems(string value);
    public string get_AlignSelf();
    public void set_AlignSelf(string value);
    public string get_Accelerator();
    public void set_Accelerator(string value);
    public string get_AlignmentBaseline();
    public void set_AlignmentBaseline(string value);
    public string get_Animation();
    public void set_Animation(string value);
    public string get_AnimationDelay();
    public void set_AnimationDelay(string value);
    public string get_AnimationDirection();
    public void set_AnimationDirection(string value);
    public string get_AnimationDuration();
    public void set_AnimationDuration(string value);
    public string get_AnimationFillMode();
    public void set_AnimationFillMode(string value);
    public string get_AnimationIterationCount();
    public void set_AnimationIterationCount(string value);
    public string get_AnimationName();
    public void set_AnimationName(string value);
    public string get_AnimationPlayState();
    public void set_AnimationPlayState(string value);
    public string get_AnimationTimingFunction();
    public void set_AnimationTimingFunction(string value);
    public string get_BackfaceVisibility();
    public void set_BackfaceVisibility(string value);
    public string get_Background();
    public void set_Background(string value);
    public string get_BackgroundAttachment();
    public void set_BackgroundAttachment(string value);
    public string get_BackgroundClip();
    public void set_BackgroundClip(string value);
    public string get_BackgroundColor();
    public void set_BackgroundColor(string value);
    public string get_BackgroundImage();
    public void set_BackgroundImage(string value);
    public string get_BackgroundOrigin();
    public void set_BackgroundOrigin(string value);
    public string get_BackgroundPosition();
    public void set_BackgroundPosition(string value);
    public string get_BackgroundPositionX();
    public void set_BackgroundPositionX(string value);
    public string get_BackgroundPositionY();
    public void set_BackgroundPositionY(string value);
    public string get_BackgroundRepeat();
    public void set_BackgroundRepeat(string value);
    public string get_BackgroundSize();
    public void set_BackgroundSize(string value);
    public string get_BaselineShift();
    public void set_BaselineShift(string value);
    public string get_Behavior();
    public void set_Behavior(string value);
    public string get_Bottom();
    public void set_Bottom(string value);
    public string get_Border();
    public void set_Border(string value);
    public string get_BorderBottom();
    public void set_BorderBottom(string value);
    public string get_BorderBottomColor();
    public void set_BorderBottomColor(string value);
    public string get_BorderBottomLeftRadius();
    public void set_BorderBottomLeftRadius(string value);
    public string get_BorderBottomRightRadius();
    public void set_BorderBottomRightRadius(string value);
    public string get_BorderBottomStyle();
    public void set_BorderBottomStyle(string value);
    public string get_BorderBottomWidth();
    public void set_BorderBottomWidth(string value);
    public string get_BorderCollapse();
    public void set_BorderCollapse(string value);
    public string get_BorderColor();
    public void set_BorderColor(string value);
    public string get_BorderImage();
    public void set_BorderImage(string value);
    public string get_BorderImageOutset();
    public void set_BorderImageOutset(string value);
    public string get_BorderImageRepeat();
    public void set_BorderImageRepeat(string value);
    public string get_BorderImageSlice();
    public void set_BorderImageSlice(string value);
    public string get_BorderImageSource();
    public void set_BorderImageSource(string value);
    public string get_BorderImageWidth();
    public void set_BorderImageWidth(string value);
    public string get_BorderLeft();
    public void set_BorderLeft(string value);
    public string get_BorderLeftColor();
    public void set_BorderLeftColor(string value);
    public string get_BorderLeftStyle();
    public void set_BorderLeftStyle(string value);
    public string get_BorderLeftWidth();
    public void set_BorderLeftWidth(string value);
    public string get_BorderRadius();
    public void set_BorderRadius(string value);
    public string get_BorderRight();
    public void set_BorderRight(string value);
    public string get_BorderRightColor();
    public void set_BorderRightColor(string value);
    public string get_BorderRightStyle();
    public void set_BorderRightStyle(string value);
    public string get_BorderRightWidth();
    public void set_BorderRightWidth(string value);
    public string get_BorderSpacing();
    public void set_BorderSpacing(string value);
    public string get_BorderStyle();
    public void set_BorderStyle(string value);
    public string get_BorderTop();
    public void set_BorderTop(string value);
    public string get_BorderTopColor();
    public void set_BorderTopColor(string value);
    public string get_BorderTopLeftRadius();
    public void set_BorderTopLeftRadius(string value);
    public string get_BorderTopRightRadius();
    public void set_BorderTopRightRadius(string value);
    public string get_BorderTopStyle();
    public void set_BorderTopStyle(string value);
    public string get_BorderTopWidth();
    public void set_BorderTopWidth(string value);
    public string get_BorderWidth();
    public void set_BorderWidth(string value);
    public string get_BoxShadow();
    public void set_BoxShadow(string value);
    public string get_BoxSizing();
    public void set_BoxSizing(string value);
    public string get_BreakAfter();
    public void set_BreakAfter(string value);
    public string get_BreakBefore();
    public void set_BreakBefore(string value);
    public string get_BreakInside();
    public void set_BreakInside(string value);
    public string get_CaptionSide();
    public void set_CaptionSide(string value);
    public string get_Clear();
    public void set_Clear(string value);
    public string get_Clip();
    public void set_Clip(string value);
    public string get_ClipBottom();
    public void set_ClipBottom(string value);
    public string get_ClipLeft();
    public void set_ClipLeft(string value);
    public string get_ClipPath();
    public void set_ClipPath(string value);
    public string get_ClipRight();
    public void set_ClipRight(string value);
    public string get_ClipRule();
    public void set_ClipRule(string value);
    public string get_ClipTop();
    public void set_ClipTop(string value);
    public string get_Color();
    public void set_Color(string value);
    public string get_ColorInterpolationFilters();
    public void set_ColorInterpolationFilters(string value);
    public string get_ColumnCount();
    public void set_ColumnCount(string value);
    public string get_ColumnFill();
    public void set_ColumnFill(string value);
    public string get_ColumnGap();
    public void set_ColumnGap(string value);
    public string get_ColumnRule();
    public void set_ColumnRule(string value);
    public string get_ColumnRuleColor();
    public void set_ColumnRuleColor(string value);
    public string get_ColumnRuleStyle();
    public void set_ColumnRuleStyle(string value);
    public string get_ColumnRuleWidth();
    public void set_ColumnRuleWidth(string value);
    public string get_Columns();
    public void set_Columns(string value);
    public string get_ColumnSpan();
    public void set_ColumnSpan(string value);
    public string get_ColumnWidth();
    public void set_ColumnWidth(string value);
    public string get_Content();
    public void set_Content(string value);
    public string get_CounterIncrement();
    public void set_CounterIncrement(string value);
    public string get_CounterReset();
    public void set_CounterReset(string value);
    public string get_Float();
    public void set_Float(string value);
    public string get_Cursor();
    public void set_Cursor(string value);
    public string get_Direction();
    public void set_Direction(string value);
    public string get_Display();
    public void set_Display(string value);
    public string get_DominantBaseline();
    public void set_DominantBaseline(string value);
    public string get_EmptyCells();
    public void set_EmptyCells(string value);
    public string get_EnableBackground();
    public void set_EnableBackground(string value);
    public string get_Fill();
    public void set_Fill(string value);
    public string get_FillOpacity();
    public void set_FillOpacity(string value);
    public string get_FillRule();
    public void set_FillRule(string value);
    public string get_Filter();
    public void set_Filter(string value);
    public string get_Flex();
    public void set_Flex(string value);
    public string get_FlexBasis();
    public void set_FlexBasis(string value);
    public string get_FlexDirection();
    public void set_FlexDirection(string value);
    public string get_FlexFlow();
    public void set_FlexFlow(string value);
    public string get_FlexGrow();
    public void set_FlexGrow(string value);
    public string get_FlexShrink();
    public void set_FlexShrink(string value);
    public string get_FlexWrap();
    public void set_FlexWrap(string value);
    public string get_Font();
    public void set_Font(string value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_FontFeatureSettings();
    public void set_FontFeatureSettings(string value);
    public string get_FontSize();
    public void set_FontSize(string value);
    public string get_FontSizeAdjust();
    public void set_FontSizeAdjust(string value);
    public string get_FontStretch();
    public void set_FontStretch(string value);
    public string get_FontStyle();
    public void set_FontStyle(string value);
    public string get_FontVariant();
    public void set_FontVariant(string value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public string get_Gap();
    public void set_Gap(string value);
    public string get_GlyphOrientationHorizontal();
    public void set_GlyphOrientationHorizontal(string value);
    public string get_GlyphOrientationVertical();
    public void set_GlyphOrientationVertical(string value);
    public string get_Height();
    public void set_Height(string value);
    public string get_ImeMode();
    public void set_ImeMode(string value);
    public string get_JustifyContent();
    public void set_JustifyContent(string value);
    public string get_LayoutGrid();
    public void set_LayoutGrid(string value);
    public string get_LayoutGridChar();
    public void set_LayoutGridChar(string value);
    public string get_LayoutGridLine();
    public void set_LayoutGridLine(string value);
    public string get_LayoutGridMode();
    public void set_LayoutGridMode(string value);
    public string get_LayoutGridType();
    public void set_LayoutGridType(string value);
    public string get_Left();
    public void set_Left(string value);
    public string get_LetterSpacing();
    public void set_LetterSpacing(string value);
    public string get_LineHeight();
    public void set_LineHeight(string value);
    public string get_ListStyle();
    public void set_ListStyle(string value);
    public string get_ListStyleImage();
    public void set_ListStyleImage(string value);
    public string get_ListStylePosition();
    public void set_ListStylePosition(string value);
    public string get_ListStyleType();
    public void set_ListStyleType(string value);
    public string get_Margin();
    public void set_Margin(string value);
    public string get_MarginBottom();
    public void set_MarginBottom(string value);
    public string get_MarginLeft();
    public void set_MarginLeft(string value);
    public string get_MarginRight();
    public void set_MarginRight(string value);
    public string get_MarginTop();
    public void set_MarginTop(string value);
    public string get_Marker();
    public void set_Marker(string value);
    public string get_MarkerEnd();
    public void set_MarkerEnd(string value);
    public string get_MarkerMid();
    public void set_MarkerMid(string value);
    public string get_MarkerStart();
    public void set_MarkerStart(string value);
    public string get_Mask();
    public void set_Mask(string value);
    public string get_MaxHeight();
    public void set_MaxHeight(string value);
    public string get_MaxWidth();
    public void set_MaxWidth(string value);
    public string get_MinHeight();
    public void set_MinHeight(string value);
    public string get_MinWidth();
    public void set_MinWidth(string value);
    public string get_Opacity();
    public void set_Opacity(string value);
    public string get_Order();
    public void set_Order(string value);
    public string get_Orphans();
    public void set_Orphans(string value);
    public string get_Outline();
    public void set_Outline(string value);
    public string get_OutlineColor();
    public void set_OutlineColor(string value);
    public string get_OutlineStyle();
    public void set_OutlineStyle(string value);
    public string get_OutlineWidth();
    public void set_OutlineWidth(string value);
    public string get_Overflow();
    public void set_Overflow(string value);
    public string get_OverflowX();
    public void set_OverflowX(string value);
    public string get_OverflowY();
    public void set_OverflowY(string value);
    public string get_OverflowWrap();
    public void set_OverflowWrap(string value);
    public string get_Padding();
    public void set_Padding(string value);
    public string get_PaddingBottom();
    public void set_PaddingBottom(string value);
    public string get_PaddingLeft();
    public void set_PaddingLeft(string value);
    public string get_PaddingRight();
    public void set_PaddingRight(string value);
    public string get_PaddingTop();
    public void set_PaddingTop(string value);
    public string get_PageBreakAfter();
    public void set_PageBreakAfter(string value);
    public string get_PageBreakBefore();
    public void set_PageBreakBefore(string value);
    public string get_PageBreakInside();
    public void set_PageBreakInside(string value);
    public string get_Perspective();
    public void set_Perspective(string value);
    public string get_PerspectiveOrigin();
    public void set_PerspectiveOrigin(string value);
    public string get_PointerEvents();
    public void set_PointerEvents(string value);
    public string get_RowGap();
    public void set_RowGap(string value);
    public string get_Quotes();
    public void set_Quotes(string value);
    public string get_Position();
    public void set_Position(string value);
    public string get_Right();
    public void set_Right(string value);
    public string get_RubyAlign();
    public void set_RubyAlign(string value);
    public string get_RubyOverhang();
    public void set_RubyOverhang(string value);
    public string get_RubyPosition();
    public void set_RubyPosition(string value);
    public string get_Scrollbar3DLightColor();
    public void set_Scrollbar3DLightColor(string value);
    public string get_ScrollbarArrowColor();
    public void set_ScrollbarArrowColor(string value);
    public string get_ScrollbarDarkShadowColor();
    public void set_ScrollbarDarkShadowColor(string value);
    public string get_ScrollbarFaceColor();
    public void set_ScrollbarFaceColor(string value);
    public string get_ScrollbarHighlightColor();
    public void set_ScrollbarHighlightColor(string value);
    public string get_ScrollbarShadowColor();
    public void set_ScrollbarShadowColor(string value);
    public string get_ScrollbarTrackColor();
    public void set_ScrollbarTrackColor(string value);
    public string get_Stroke();
    public void set_Stroke(string value);
    public string get_StrokeDasharray();
    public void set_StrokeDasharray(string value);
    public string get_StrokeDashoffset();
    public void set_StrokeDashoffset(string value);
    public string get_StrokeLinecap();
    public void set_StrokeLinecap(string value);
    public string get_StrokeLinejoin();
    public void set_StrokeLinejoin(string value);
    public string get_StrokeMiterlimit();
    public void set_StrokeMiterlimit(string value);
    public string get_StrokeOpacity();
    public void set_StrokeOpacity(string value);
    public string get_StrokeWidth();
    public void set_StrokeWidth(string value);
    public string get_TableLayout();
    public void set_TableLayout(string value);
    public string get_TextAlign();
    public void set_TextAlign(string value);
    public string get_TextAlignLast();
    public void set_TextAlignLast(string value);
    public string get_TextAnchor();
    public void set_TextAnchor(string value);
    public string get_TextAutospace();
    public void set_TextAutospace(string value);
    public string get_TextDecoration();
    public void set_TextDecoration(string value);
    public string get_TextIndent();
    public void set_TextIndent(string value);
    public string get_TextJustify();
    public void set_TextJustify(string value);
    public string get_TextOverflow();
    public void set_TextOverflow(string value);
    public string get_TextShadow();
    public void set_TextShadow(string value);
    public string get_TextTransform();
    public void set_TextTransform(string value);
    public string get_TextUnderlinePosition();
    public void set_TextUnderlinePosition(string value);
    public string get_Top();
    public void set_Top(string value);
    public string get_Transform();
    public void set_Transform(string value);
    public string get_TransformOrigin();
    public void set_TransformOrigin(string value);
    public string get_TransformStyle();
    public void set_TransformStyle(string value);
    public string get_Transition();
    public void set_Transition(string value);
    public string get_TransitionDelay();
    public void set_TransitionDelay(string value);
    public string get_TransitionDuration();
    public void set_TransitionDuration(string value);
    public string get_TransitionProperty();
    public void set_TransitionProperty(string value);
    public string get_TransitionTimingFunction();
    public void set_TransitionTimingFunction(string value);
    public string get_UnicodeBidirectional();
    public void set_UnicodeBidirectional(string value);
    public string get_VerticalAlign();
    public void set_VerticalAlign(string value);
    public string get_Visibility();
    public void set_Visibility(string value);
    public string get_WhiteSpace();
    public void set_WhiteSpace(string value);
    public string get_Widows();
    public void set_Widows(string value);
    public string get_Width();
    public void set_Width(string value);
    public string get_WordBreak();
    public void set_WordBreak(string value);
    public string get_WordSpacing();
    public void set_WordSpacing(string value);
    public string get_WritingMode();
    public void set_WritingMode(string value);
    public string get_ZIndex();
    public void set_ZIndex(string value);
    public string get_Zoom();
    public void set_Zoom(string value);
    [CompilerGeneratedAttribute]
private bool <GetPropertyPriority>b__13_0(string longhand);
}
public class ExCSS.StyleRule : Rule {
    public ISelector Selector { get; public set; }
    public string SelectorText { get; public set; }
    public StyleDeclaration Style { get; }
    public StyleRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual ISelector get_Selector();
    public sealed virtual void set_Selector(ISelector value);
    public sealed virtual string get_SelectorText();
    public sealed virtual void set_SelectorText(string value);
    public sealed virtual StyleDeclaration get_Style();
}
public class ExCSS.Stylesheet : StylesheetNode {
    private StylesheetParser _parser;
    [CompilerGeneratedAttribute]
private RuleList <Rules>k__BackingField;
    internal RuleList Rules { get; }
    public IEnumerable`1<ICharsetRule> CharacterSetRules { get; }
    public IEnumerable`1<IFontFaceRule> FontfaceSetRules { get; }
    public IEnumerable`1<IMediaRule> MediaRules { get; }
    public IEnumerable`1<IImportRule> ImportRules { get; }
    public IEnumerable`1<INamespaceRule> NamespaceRules { get; }
    public IEnumerable`1<IPageRule> PageRules { get; }
    public IEnumerable`1<IStyleRule> StyleRules { get; }
    internal Stylesheet(StylesheetParser parser);
    [CompilerGeneratedAttribute]
internal RuleList get_Rules();
    public IEnumerable`1<ICharsetRule> get_CharacterSetRules();
    public IEnumerable`1<IFontFaceRule> get_FontfaceSetRules();
    public IEnumerable`1<IMediaRule> get_MediaRules();
    public IEnumerable`1<IImportRule> get_ImportRules();
    public IEnumerable`1<INamespaceRule> get_NamespaceRules();
    public IEnumerable`1<IPageRule> get_PageRules();
    public IEnumerable`1<IStyleRule> get_StyleRules();
    public IRule Add(RuleType ruleType);
    public void RemoveAt(int index);
    public int Insert(string ruleText, int index);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class ExCSS.StylesheetComposer : object {
    private Lexer _lexer;
    private StylesheetParser _parser;
    private Stack`1<StylesheetNode> _nodes;
    public StylesheetComposer(Lexer lexer, StylesheetParser parser);
    public Rule CreateAtRule(Token token);
    public Rule CreateRule(Token token);
    public Rule CreateCharset(Token current);
    public Rule CreateDocument(Token current);
    public Rule CreateViewport(Token current);
    public Rule CreateFontFace(Token current);
    public Rule CreateImport(Token current);
    public Rule CreateKeyframes(Token current);
    public Rule CreateMedia(Token current);
    public Rule CreateNamespace(Token current);
    public Rule CreatePage(Token current);
    public Rule CreateSupports(Token current);
    public Rule CreateStyle(Token current);
    public Rule CreateMarginStyle(Token& current);
    public KeyframeRule CreateKeyframeRule(Token current);
    public Rule CreateUnknown(Token current);
    public TokenValue CreateValue(Token& token);
    public List`1<Medium> CreateMedia(Token& token);
    public TextPosition CreateRules(Stylesheet sheet);
    public IConditionFunction CreateCondition(Token& token);
    public KeyframeSelector CreateKeyframeSelector(Token& token);
    private PageSelector CreatePageSelector(Token& token);
    public List`1<DocumentFunction> CreateFunctions(Token& token);
    public TextPosition FillDeclarations(StyleDeclaration style);
    public Property CreateDeclarationWith(Func`2<string, Property> createProperty, Token& token);
    public Property CreateDeclaration(Token& token);
    public Medium CreateMedium(Token& token);
    private void JumpToEnd(Token& current);
    private void MoveToRuleEnd(Token& current);
    private void JumpToArgEnd(Token& current);
    private void JumpToDeclEnd(Token& current);
    private Token NextToken();
    private StylesheetText CreateView(TextPosition start, TextPosition end);
    private void ParseComments(Token& token);
    private Rule SkipDeclarations(Token token);
    private void RaiseErrorOccurred(ParseError code, TextPosition position);
    private IConditionFunction AggregateCondition(Token& token);
    private IConditionFunction ExtractCondition(Token& token);
    private IConditionFunction DeclarationCondition(Token& token);
    private List`1<IConditionFunction> MultipleConditions(IConditionFunction condition, string connector, Token& token);
    private void FillFunctions(Action`1<DocumentFunction> add, Token& token);
    private TextPosition FillKeyframeRules(KeyframesRule parentRule);
    private TextPosition FillDeclarations(DeclarationRule rule, Func`2<string, Property> createProperty);
    private TextPosition FillRules(GroupingRule group);
    private void FillMediaList(MediaList list, TokenType end, Token& token);
    private ISelector CreateSelector(Token& token);
    private ISelector CreateMarginSelector(Token& token);
    private TokenValue CreateValue(TokenType closing, Token& token, Boolean& important);
    private string GetRuleName(Token& token);
    private MediaFeature CreateFeature(Token& token);
}
public abstract class ExCSS.StylesheetNode : object {
    private List`1<IStylesheetNode> _children;
    [CompilerGeneratedAttribute]
private StylesheetText <StylesheetText>k__BackingField;
    public StylesheetText StylesheetText { get; internal set; }
    public IEnumerable`1<IStylesheetNode> Children { get; }
    protected void ReplaceAll(IStylesheetNode node);
    [CompilerGeneratedAttribute]
public sealed virtual StylesheetText get_StylesheetText();
    [CompilerGeneratedAttribute]
internal void set_StylesheetText(StylesheetText value);
    public sealed virtual IEnumerable`1<IStylesheetNode> get_Children();
    public abstract virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public void AppendChild(IStylesheetNode child);
    public void ReplaceChild(IStylesheetNode oldChild, IStylesheetNode newChild);
    public void InsertBefore(IStylesheetNode referenceChild, IStylesheetNode child);
    public void InsertChild(int index, IStylesheetNode child);
    public void RemoveChild(IStylesheetNode child);
    public void Clear();
    private void Setup(IStylesheetNode child);
    private static void Teardown(IStylesheetNode child);
}
public class ExCSS.StylesheetParser : object {
    internal static StylesheetParser Default;
    [CompilerGeneratedAttribute]
private ParserOptions <Options>k__BackingField;
    internal ParserOptions Options { get; }
    public StylesheetParser(bool includeUnknownRules, bool includeUnknownDeclarations, bool tolerateInvalidSelectors, bool tolerateInvalidValues, bool tolerateInvalidConstraints, bool preserveComments, bool preserveDuplicateProperties);
    private static StylesheetParser();
    [CompilerGeneratedAttribute]
internal ParserOptions get_Options();
    public Stylesheet Parse(string content);
    public Stylesheet Parse(Stream content);
    public Task`1<Stylesheet> ParseAsync(string content);
    [AsyncStateMachineAttribute("ExCSS.StylesheetParser/<ParseAsync>d__8")]
public Task`1<Stylesheet> ParseAsync(string content, CancellationToken cancelToken);
    public Task`1<Stylesheet> ParseAsync(Stream content);
    [AsyncStateMachineAttribute("ExCSS.StylesheetParser/<ParseAsync>d__10")]
public Task`1<Stylesheet> ParseAsync(Stream content, CancellationToken cancelToken);
    public ISelector ParseSelector(string selectorText);
    internal KeyframeSelector ParseKeyframeSelector(string keyText);
    internal SelectorConstructor GetSelectorCreator();
    internal Stylesheet Parse(TextSource source);
    [AsyncStateMachineAttribute("ExCSS.StylesheetParser/<ParseAsync>d__15")]
internal Task`1<Stylesheet> ParseAsync(Stylesheet sheet, TextSource source);
    internal TokenValue ParseValue(string valueText);
    internal Rule ParseRule(string ruleText);
    internal Property ParseDeclaration(string declarationText);
    internal List`1<Medium> ParseMediaList(string mediaText);
    internal IConditionFunction ParseCondition(string conditionText);
    internal List`1<DocumentFunction> ParseDocumentRules(string documentText);
    internal Medium ParseMedium(string mediumText);
    internal KeyframeRule ParseKeyframeRule(string ruleText);
    internal void AppendDeclarations(StyleDeclaration style, string declarations);
    private T Parse(string source, Func`3<StylesheetComposer, Token, T> create);
    private T Parse(string source, Func`3<StylesheetComposer, Token, Tuple`2<T, Token>> create);
    private static Lexer CreateTokenizer(string sourceCode);
}
public class ExCSS.StylesheetText : object {
    private TextSource _source;
    [CompilerGeneratedAttribute]
private TextRange <Range>k__BackingField;
    public TextRange Range { get; }
    public string Text { get; }
    internal StylesheetText(TextRange range, TextSource source);
    [CompilerGeneratedAttribute]
public TextRange get_Range();
    public string get_Text();
}
internal class ExCSS.SupportsRule : ConditionRule {
    public string ConditionText { get; public set; }
    public IConditionFunction Condition { get; public set; }
    internal SupportsRule(StylesheetParser parser);
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public sealed virtual string get_ConditionText();
    public sealed virtual void set_ConditionText(string value);
    public sealed virtual IConditionFunction get_Condition();
    public void set_Condition(IConditionFunction value);
}
internal static class ExCSS.Symbols : object {
    public static char StartOfHeading;
    public static char Backspace;
    public static char UnitSeparator;
    public static char ShiftOut;
    public static char Zero;
    public static char Seven;
    public static char Nine;
    public static char CapitalA;
    public static char CapitalF;
    public static char CapitalW;
    public static char CapitalZ;
    public static char LowerA;
    public static char LowerF;
    public static char LowerZ;
    public static char Delete;
    public static char EndOfFile;
    public static char Tilde;
    public static char Pipe;
    public static char Null;
    public static char Num;
    public static char Dollar;
    public static char Semicolon;
    public static char Asterisk;
    public static char Equality;
    public static char Plus;
    public static char Minus;
    public static char Comma;
    public static char Dot;
    public static char Accent;
    public static char At;
    public static char LessThan;
    public static char GreaterThan;
    public static char SingleQuote;
    public static char DoubleQuote;
    public static char CurvedQuote;
    public static char QuestionMark;
    public static char Tab;
    public static char LineFeed;
    public static char CarriageReturn;
    public static char FormFeed;
    public static char Space;
    public static char Solidus;
    public static char ReverseSolidus;
    public static char Colon;
    public static char ExclamationMark;
    public static char Replacement;
    public static char Underscore;
    public static char RoundBracketOpen;
    public static char RoundBracketClose;
    public static char SquareBracketOpen;
    public static char SquareBracketClose;
    public static char CurlyBracketOpen;
    public static char CurlyBracketClose;
    public static char Percent;
    public static int MaximumCodepoint;
    public static char ExtendedAsciiStart;
    public static char NonBreakingSpace;
    public static char UTF16SurrogateMin;
    public static char UTF16SurrogateMax;
    public static Dictionary`2<char, char> Punycode;
    private static Symbols();
}
public enum ExCSS.SystemCursor : Enum {
    public byte value__;
    public static SystemCursor Auto;
    public static SystemCursor Default;
    public static SystemCursor None;
    public static SystemCursor ContextMenu;
    public static SystemCursor Help;
    public static SystemCursor Pointer;
    public static SystemCursor Progress;
    public static SystemCursor Wait;
    public static SystemCursor Cell;
    public static SystemCursor Crosshair;
    public static SystemCursor Text;
    public static SystemCursor VerticalText;
    public static SystemCursor Alias;
    public static SystemCursor Copy;
    public static SystemCursor Move;
    public static SystemCursor NoDrop;
    public static SystemCursor NotAllowed;
    public static SystemCursor EResize;
    public static SystemCursor NResize;
    public static SystemCursor NeResize;
    public static SystemCursor NwResize;
    public static SystemCursor SResize;
    public static SystemCursor SeResize;
    public static SystemCursor SwResize;
    public static SystemCursor WResize;
    public static SystemCursor EwResize;
    public static SystemCursor NsResize;
    public static SystemCursor NeswResize;
    public static SystemCursor NwseResize;
    public static SystemCursor ColResize;
    public static SystemCursor RowResize;
    public static SystemCursor AllScroll;
    public static SystemCursor ZoomIn;
    public static SystemCursor ZoomOut;
    public static SystemCursor Grab;
    public static SystemCursor Grabbing;
}
public enum ExCSS.SystemFont : Enum {
    public byte value__;
    public static SystemFont Caption;
    public static SystemFont Icon;
    public static SystemFont Menu;
    public static SystemFont MessageBox;
    public static SystemFont SmallCaption;
    public static SystemFont StatusBar;
}
internal class ExCSS.TableLayoutProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TableLayoutProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.TextAlignLast : Enum {
    public byte value__;
    public static TextAlignLast Auto;
    public static TextAlignLast Start;
    public static TextAlignLast End;
    public static TextAlignLast Left;
    public static TextAlignLast Right;
    public static TextAlignLast Center;
    public static TextAlignLast Justify;
}
internal class ExCSS.TextAlignLastProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextAlignLastProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TextAlignProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextAlignProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.TextAnchor : Enum {
    public byte value__;
    public static TextAnchor Start;
    public static TextAnchor Middle;
    public static TextAnchor End;
}
internal class ExCSS.TextAnchorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextAnchorProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TextDecorationColorProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextDecorationColorProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.TextDecorationLine : Enum {
    public byte value__;
    public static TextDecorationLine Underline;
    public static TextDecorationLine Overline;
    public static TextDecorationLine LineThrough;
    public static TextDecorationLine Blink;
}
internal class ExCSS.TextDecorationLineProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static TextDecorationLineProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TextDecorationProperty : ShorthandProperty {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextDecorationProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.TextDecorationStyle : Enum {
    public byte value__;
    public static TextDecorationStyle Solid;
    public static TextDecorationStyle Double;
    public static TextDecorationStyle Dotted;
    public static TextDecorationStyle Dashed;
    public static TextDecorationStyle Wavy;
}
internal class ExCSS.TextDecorationStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextDecorationStyleProperty();
    internal virtual IValueConverter get_Converter();
}
[ExtensionAttribute]
public static class ExCSS.TextEncoding : object {
    public static HashSet`1<string> AvailableEncodings;
    public static Encoding Utf8;
    public static Encoding Utf16Be;
    public static Encoding Utf16Le;
    public static Encoding Utf32Le;
    public static Encoding Utf32Be;
    public static Encoding Gb18030;
    public static Encoding Big5;
    public static Encoding Windows874;
    public static Encoding Windows1250;
    public static Encoding Windows1251;
    public static Encoding Windows1252;
    public static Encoding Windows1253;
    public static Encoding Windows1254;
    public static Encoding Windows1255;
    public static Encoding Windows1256;
    public static Encoding Windows1257;
    public static Encoding Windows1258;
    public static Encoding Latin2;
    public static Encoding Latin3;
    public static Encoding Latin4;
    public static Encoding Latin5;
    public static Encoding Latin13;
    public static Encoding UsAscii;
    public static Encoding Korean;
    private static Dictionary`2<string, Encoding> Encodings;
    private static TextEncoding();
    [ExtensionAttribute]
public static bool IsUnicode(Encoding encoding);
    public static bool IsSupported(string charset);
    public static Encoding Resolve(string charset);
    private static Encoding GetEncoding(string name);
    private static Dictionary`2<string, Encoding> CreateEncodings();
}
internal class ExCSS.TextIndentProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextIndentProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.TextJustify : Enum {
    public byte value__;
    public static TextJustify Auto;
    public static TextJustify InterWord;
    public static TextJustify InterIdeograph;
    public static TextJustify InterCluster;
    public static TextJustify Distribute;
    public static TextJustify DistributeAllLines;
    public static TextJustify DistributeCenterLast;
    public static TextJustify Kashida;
    public static TextJustify Newspaper;
}
internal class ExCSS.TextJustifyProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextJustifyProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.TextPosition : ValueType {
    public static TextPosition Empty;
    private ushort _line;
    private ushort _column;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public int Position { get; }
    public TextPosition(ushort line, ushort column, int position);
    private static TextPosition();
    public int get_Line();
    public int get_Column();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Position();
    public TextPosition Shift(int columns);
    public TextPosition After(char chr);
    public TextPosition After(string str);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TextPosition other);
    public static bool op_GreaterThan(TextPosition a, TextPosition b);
    public static bool op_LessThan(TextPosition a, TextPosition b);
    public sealed virtual int CompareTo(TextPosition other);
}
public class ExCSS.TextRange : ValueType {
    [CompilerGeneratedAttribute]
private TextPosition <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private TextPosition <End>k__BackingField;
    public TextPosition Start { get; }
    public TextPosition End { get; }
    public TextRange(TextPosition start, TextPosition end);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TextPosition get_Start();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TextPosition get_End();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TextRange other);
    public static bool op_GreaterThan(TextRange a, TextRange b);
    public static bool op_LessThan(TextRange a, TextRange b);
    public sealed virtual int CompareTo(TextRange other);
}
internal class ExCSS.TextShadowProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextShadowProperty();
    internal virtual IValueConverter get_Converter();
}
[DefaultMemberAttribute("Item")]
public class ExCSS.TextSource : object {
    private static int BufferSize;
    private Stream _baseStream;
    private MemoryStream _raw;
    private Byte[] _buffer;
    private Char[] _chars;
    private StringBuilder _content;
    private EncodingConfidence _confidence;
    private bool _finished;
    private Encoding _encoding;
    private Decoder _decoder;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public string Text { get; }
    public char Item { get; }
    public int Index { get; public set; }
    public int Length { get; }
    public Encoding CurrentEncoding { get; public set; }
    private TextSource(Encoding encoding);
    public TextSource(string source);
    public TextSource(Stream baseStream, Encoding encoding);
    public sealed virtual void Dispose();
    public string get_Text();
    public char get_Item(int index);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    public int get_Length();
    public Encoding get_CurrentEncoding();
    public void set_CurrentEncoding(Encoding value);
    public char ReadCharacter();
    public string ReadCharacters(int characters);
    [AsyncStateMachineAttribute("ExCSS.TextSource/<PrefetchAllAsync>d__30")]
public Task PrefetchAllAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("ExCSS.TextSource/<DetectByteOrderMarkAsync>d__31")]
private Task DetectByteOrderMarkAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("ExCSS.TextSource/<ReadIntoBufferAsync>d__32")]
private Task ReadIntoBufferAsync(CancellationToken cancellationToken);
    private void ExpandBuffer(long size);
    private void ReadIntoBuffer();
    private void AppendContentFromBuffer(int size);
}
public enum ExCSS.TextTransform : Enum {
    public byte value__;
    public static TextTransform None;
    public static TextTransform Capitalize;
    public static TextTransform Uppercase;
    public static TextTransform Lowercase;
    public static TextTransform FullWidth;
}
internal class ExCSS.TextTransformProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TextTransformProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.Time : ValueType {
    public static Time Zero;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Unit <Type>k__BackingField;
    public float Value { get; }
    public Unit Type { get; }
    public string UnitString { get; }
    public Time(float value, Unit unit);
    private static Time();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Unit get_Type();
    public string get_UnitString();
    public static bool op_GreaterThanOrEqual(Time a, Time b);
    public static bool op_GreaterThan(Time a, Time b);
    public static bool op_LessThanOrEqual(Time a, Time b);
    public static bool op_LessThan(Time a, Time b);
    public sealed virtual int CompareTo(Time other);
    public static Unit GetUnit(string s);
    public float ToMilliseconds();
    public sealed virtual bool Equals(Time other);
    public static bool op_Equality(Time a, Time b);
    public static bool op_Inequality(Time a, Time b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
internal class ExCSS.Token : object {
    public static Token Whitespace;
    public static Token Comma;
    [CompilerGeneratedAttribute]
private TextPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public TextPosition Position { get; }
    public TokenType Type { get; }
    public string Data { get; }
    public Token(TokenType type, string data, TextPosition position);
    private static Token();
    public virtual string ToValue();
    [CompilerGeneratedAttribute]
public TextPosition get_Position();
    [CompilerGeneratedAttribute]
public TokenType get_Type();
    [CompilerGeneratedAttribute]
public string get_Data();
}
public class ExCSS.TokenizerError : object {
    private ParseError _code;
    [CompilerGeneratedAttribute]
private TextPosition <Position>k__BackingField;
    public TextPosition Position { get; }
    public int Code { get; }
    public string Message { get; }
    public TokenizerError(ParseError code, TextPosition position);
    [CompilerGeneratedAttribute]
public TextPosition get_Position();
    public int get_Code();
    public string get_Message();
}
internal enum ExCSS.TokenType : Enum {
    public byte value__;
    public static TokenType String;
    public static TokenType Url;
    public static TokenType Color;
    public static TokenType Hash;
    public static TokenType Comment;
    public static TokenType AtKeyword;
    public static TokenType Ident;
    public static TokenType Function;
    public static TokenType Number;
    public static TokenType Percentage;
    public static TokenType Dimension;
    public static TokenType Range;
    public static TokenType Cdo;
    public static TokenType Cdc;
    public static TokenType Column;
    public static TokenType Delim;
    public static TokenType Match;
    public static TokenType RoundBracketOpen;
    public static TokenType RoundBracketClose;
    public static TokenType CurlyBracketOpen;
    public static TokenType CurlyBracketClose;
    public static TokenType SquareBracketOpen;
    public static TokenType SquareBracketClose;
    public static TokenType Colon;
    public static TokenType Comma;
    public static TokenType Semicolon;
    public static TokenType Whitespace;
    public static TokenType EndOfFile;
}
[DefaultMemberAttribute("Item")]
internal class ExCSS.TokenValue : StylesheetNode {
    private List`1<Token> _tokens;
    public static TokenValue Initial;
    public static TokenValue Empty;
    public Token Item { get; }
    public int Count { get; }
    public string Text { get; }
    private TokenValue(Token token);
    public TokenValue(IEnumerable`1<Token> tokens);
    private static TokenValue();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
    public static TokenValue FromString(string text);
    public static TokenValue FromNumber(int number);
    public Token get_Item(int index);
    public int get_Count();
    public string get_Text();
    public sealed virtual IEnumerator`1<Token> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class ExCSS.TopProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TopProperty();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.TransformMatrix : object {
    public static TransformMatrix Zero;
    public static TransformMatrix One;
    private Single[0...,0...] _matrix;
    public float Tx { get; }
    public float Ty { get; }
    public float Tz { get; }
    public TransformMatrix(Single[] values);
    public TransformMatrix(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33, float tx, float ty, float tz, float px, float py, float pz);
    private static TransformMatrix();
    public sealed virtual bool Equals(TransformMatrix other);
    public float get_Tx();
    public float get_Ty();
    public float get_Tz();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ExCSS.TransformOriginProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TransformOriginProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TransformProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TransformProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TransformStyleProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static TransformStyleProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TransitionDelayProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static TransitionDelayProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TransitionDurationProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static TransitionDurationProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TransitionProperty : ShorthandProperty {
    internal static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static TransitionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TransitionPropertyProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static TransitionPropertyProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TransitionTimingFunctionProperty : Property {
    private static IValueConverter ListConverter;
    internal IValueConverter Converter { get; }
    private static TransitionTimingFunctionProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.TranslateTransform : object {
    [CompilerGeneratedAttribute]
private Length <Dx>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Dy>k__BackingField;
    [CompilerGeneratedAttribute]
private Length <Dz>k__BackingField;
    public Length Dx { get; }
    public Length Dy { get; }
    public Length Dz { get; }
    internal TranslateTransform(Length x, Length y, Length z);
    public sealed virtual TransformMatrix ComputeMatrix();
    [CompilerGeneratedAttribute]
public Length get_Dx();
    [CompilerGeneratedAttribute]
public Length get_Dy();
    [CompilerGeneratedAttribute]
public Length get_Dz();
}
public class ExCSS.TypeSelector : SelectorBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    private TypeSelector(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public static TypeSelector Create(string name);
}
internal class ExCSS.UnicodeBidirectionalProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static UnicodeBidirectionalProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.UnicodeMode : Enum {
    public byte value__;
    public static UnicodeMode Normal;
    public static UnicodeMode Embed;
    public static UnicodeMode Isolate;
    public static UnicodeMode BidirectionalOverride;
    public static UnicodeMode IsolateOverride;
    public static UnicodeMode Plaintext;
}
internal class ExCSS.UnicodeRangeProperty : Property {
    internal IValueConverter Converter { get; }
    internal virtual IValueConverter get_Converter();
}
public static class ExCSS.UnitNames : object {
    public static string Khz;
    public static string Hz;
    public static string Ms;
    public static string S;
    public static string Turn;
    public static string Rad;
    public static string Grad;
    public static string Deg;
    public static string Em;
    public static string Ex;
    public static string Cm;
    public static string Mm;
    public static string In;
    public static string Px;
    public static string Ch;
    public static string Vw;
    public static string Vh;
    public static string Vmin;
    public static string Vmax;
    public static string Dpi;
    public static string Dpcm;
    public static string Dppx;
    public static string Pt;
    public static string Rem;
    public static string Pc;
    public static string Percent;
    private static UnitNames();
}
internal class ExCSS.UnitToken : Token {
    [CompilerGeneratedAttribute]
private string <Unit>k__BackingField;
    public float Value { get; }
    public string Unit { get; }
    public UnitToken(TokenType type, string value, string dimension, TextPosition position);
    public virtual string ToValue();
    public float get_Value();
    [CompilerGeneratedAttribute]
public string get_Unit();
}
internal class ExCSS.UnknownMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public UnknownMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.UnknownProperty : Property {
    internal IValueConverter Converter { get; }
    internal UnknownProperty(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.UnknownRule : Rule {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public UnknownRule(string name, StylesheetParser parser);
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
public class ExCSS.UnknownSelector : StylesheetNode {
    public Priority Specificity { get; }
    public string Text { get; }
    public sealed virtual Priority get_Specificity();
    public sealed virtual string get_Text();
    public virtual void ToCss(TextWriter writer, IStyleFormatter formatter);
}
internal class ExCSS.UnorderedOptionsConverter : object {
    private IValueConverter[] _converters;
    public UnorderedOptionsConverter(IValueConverter[] converters);
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
public enum ExCSS.UpdateFrequency : Enum {
    public byte value__;
    public static UpdateFrequency None;
    public static UpdateFrequency Slow;
    public static UpdateFrequency Normal;
}
internal class ExCSS.UpdateFrequencyMediaFeature : MediaFeature {
    private static IValueConverter TheConverter;
    internal IValueConverter Converter { get; }
    private static UpdateFrequencyMediaFeature();
    internal virtual IValueConverter get_Converter();
}
public class ExCSS.Url : object {
    private static string CurrentDirectory;
    private static string CurrentDirectoryAlternative;
    private static string UpperDirectory;
    private static String[] UpperDirectoryAlternatives;
    private static Url DefaultBase;
    private string _fragment;
    private string _query;
    private string _path;
    private string _scheme;
    private string _port;
    private string _host;
    private bool _relative;
    [CompilerGeneratedAttribute]
private bool <IsInvalid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Origin { get; }
    public bool IsInvalid { get; private set; }
    public bool IsRelative { get; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string Data { get; private set; }
    public string Fragment { get; public set; }
    public string Host { get; public set; }
    public string HostName { get; public set; }
    public string Href { get; public set; }
    public string Path { get; public set; }
    public string Port { get; public set; }
    public string Scheme { get; public set; }
    public string Query { get; public set; }
    private Url(string scheme, string host, string port);
    public Url(string address);
    public Url(Url baseAddress, string relativeAddress);
    public Url(Url address);
    private static Url();
    public static Uri op_Implicit(Url value);
    public static Url Create(string address);
    public static Url Convert(Uri uri);
    public string get_Origin();
    [CompilerGeneratedAttribute]
public bool get_IsInvalid();
    [CompilerGeneratedAttribute]
private void set_IsInvalid(bool value);
    public bool get_IsRelative();
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    public string get_Fragment();
    public void set_Fragment(string value);
    public string get_Host();
    public void set_Host(string value);
    public string get_HostName();
    public void set_HostName(string value);
    public string get_Href();
    public void set_Href(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_Port();
    public void set_Port(string value);
    public string get_Scheme();
    public void set_Scheme(string value);
    public string get_Query();
    public void set_Query(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Url other);
    public virtual string ToString();
    private string Serialize();
    private bool ParseUrl(string input, Url baseUrl);
    private void Reset(Url baseUrl);
    private bool ParseScheme(string input, bool onlyScheme);
    private bool ParseSchemeData(string input, int index);
    private bool RelativeState(string input, int index);
    private bool IgnoreSlashesState(string input, int index);
    private bool ParseAuthority(string input, int index);
    private bool ParseFileHost(string input, int index);
    private bool ParseHostName(string input, int index, bool onlyHost, bool onlyPort);
    private bool ParsePort(string input, int index, bool onlyPort);
    private bool ParsePath(string input, int index, bool onlyPath);
    private bool ParseQuery(string input, int index, bool onlyQuery);
    private bool ParseFragment(string input, int index);
    private static int Utf8PercentEncode(StringBuilder buffer, string source, int index);
    private static string SanatizeHost(string hostName, int start, int length);
    private static string SanatizePort(string port, int start, int length);
}
internal class ExCSS.UrlFunction : DocumentFunction {
    private Url _expected;
    public UrlFunction(string url);
    public virtual bool Matches(Url actual);
}
internal class ExCSS.UrlPrefixFunction : DocumentFunction {
    public UrlPrefixFunction(string url);
    public virtual bool Matches(Url url);
}
internal class ExCSS.UrlToken : Token {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    public bool IsValid { get; }
    public string FunctionName { get; }
    public UrlToken(string functionName, string data, bool valid, TextPosition position);
    public virtual string ToValue();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
}
internal class ExCSS.UrlValueConverter : object {
    public sealed virtual IPropertyValue Convert(IEnumerable`1<Token> value);
    public sealed virtual IPropertyValue Construct(Property[] properties);
}
internal class ExCSS.ValueBuilder : object {
    private List`1<Token> _values;
    private Token _buffer;
    private bool _valid;
    private int _open;
    [CompilerGeneratedAttribute]
private bool <IsImportant>k__BackingField;
    public bool IsReady { get; }
    public bool IsValid { get; }
    public bool IsImportant { get; private set; }
    public bool get_IsReady();
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public bool get_IsImportant();
    [CompilerGeneratedAttribute]
private void set_IsImportant(bool value);
    public TokenValue GetResult();
    public void Apply(Token token);
    public ValueBuilder Reset();
    private bool CheckImportant(Token token);
    private void Add(Token token);
    private static bool IsCommaOrSlash(Token token);
    private static bool IsComma(Token token);
    private static bool IsExclamationMark(Token token);
    private static bool IsSlash(Token token);
}
[ExtensionAttribute]
internal static class ExCSS.ValueConverterExtensions : object {
    [ExtensionAttribute]
public static IPropertyValue ConvertDefault(IValueConverter converter);
    [ExtensionAttribute]
public static IPropertyValue VaryStart(IValueConverter converter, List`1<Token> list);
    [ExtensionAttribute]
public static IPropertyValue VaryAll(IValueConverter converter, List`1<Token> list);
    [ExtensionAttribute]
public static IValueConverter Many(IValueConverter converter, int min, int max);
    [ExtensionAttribute]
public static IValueConverter FromList(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter ToConverter(Dictionary`2<string, T> values);
    [ExtensionAttribute]
public static IValueConverter Periodic(IValueConverter converter, String[] labels);
    [ExtensionAttribute]
public static IValueConverter RequiresEnd(IValueConverter listConverter, IValueConverter endConverter);
    [ExtensionAttribute]
public static IValueConverter Required(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter Option(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter For(IValueConverter converter, String[] labels);
    [ExtensionAttribute]
public static IValueConverter Option(IValueConverter converter, T defaultValue);
    [ExtensionAttribute]
public static IValueConverter Or(IValueConverter primary, IValueConverter secondary);
    [ExtensionAttribute]
public static IValueConverter Or(IValueConverter primary, string keyword);
    [ExtensionAttribute]
public static IValueConverter Or(IValueConverter primary, string keyword, T value);
    [ExtensionAttribute]
public static IValueConverter OrNone(IValueConverter primary);
    [ExtensionAttribute]
public static IValueConverter OrDefault(IValueConverter primary);
    [ExtensionAttribute]
public static IValueConverter OrDefault(IValueConverter primary, T value);
    [ExtensionAttribute]
public static IValueConverter OrInherit(IValueConverter primary);
    [ExtensionAttribute]
public static IValueConverter OrAuto(IValueConverter primary);
    [ExtensionAttribute]
public static IValueConverter OrGlobalValue(IValueConverter primary);
    [ExtensionAttribute]
public static IValueConverter ConditionalStartsWithKeyword(IValueConverter primary, string when, String[] keywords);
    [ExtensionAttribute]
public static IValueConverter StartsWithKeyword(IValueConverter converter, string keyword);
    [ExtensionAttribute]
public static IValueConverter StartsWithDelimiter(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter WithCurrentColor(IValueConverter converter);
    [ExtensionAttribute]
public static IValueConverter WithFallback(IValueConverter converter, int defaultValue);
}
[ExtensionAttribute]
internal static class ExCSS.ValueExtensions : object {
    private static bool IsWeight(int value);
    [ExtensionAttribute]
public static Token OnlyOrDefault(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static bool Is(IEnumerable`1<Token> value, string expected);
    [ExtensionAttribute]
public static string ToUri(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Length> ToDistance(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Length ToLength(FontSize fontSize);
    [ExtensionAttribute]
public static Nullable`1<Percent> ToPercent(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Percent> ToPercentOrFraction(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static string ToCssString(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static string ToLiterals(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static string ToIdentifier(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static string ToIdentifierCaseInsensitive(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static string ToAnimatableIdentifier(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<float> ToSingle(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<float> ToNaturalSingle(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<float> ToGreaterOrEqualOneSingle(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<int> ToInteger(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<int> ToNaturalInteger(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<int> ToPositiveInteger(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<int> ToWeightInteger(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<int> ToBinary(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<float> ToAlphaValue(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<byte> ToRgbComponent(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Angle> ToAngle(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Angle> ToAngleNumber(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Length> ToLength(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Resolution> ToResolution(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Time> ToTime(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Length> ToBorderWidth(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static List`1<List`1<Token>> ToItems(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static void Trim(List`1<Token> value);
    [ExtensionAttribute]
public static List`1<List`1<Token>> ToList(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static string ToText(IEnumerable`1<Token> value);
    [ExtensionAttribute]
public static Nullable`1<Color> ToColor(IEnumerable`1<Token> value);
}
public enum ExCSS.VerticalAlignment : Enum {
    public byte value__;
    public static VerticalAlignment Baseline;
    public static VerticalAlignment Sub;
    public static VerticalAlignment Super;
    public static VerticalAlignment TextTop;
    public static VerticalAlignment TextBottom;
    public static VerticalAlignment Middle;
    public static VerticalAlignment Top;
    public static VerticalAlignment Bottom;
}
internal class ExCSS.VerticalAlignProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static VerticalAlignProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ViewportRule : DeclarationRule {
    internal ViewportRule(StylesheetParser parser);
    protected virtual Property CreateNewProperty(string name);
}
public enum ExCSS.Visibility : Enum {
    public byte value__;
    public static Visibility Visible;
    public static Visibility Hidden;
    public static Visibility Collapse;
}
internal class ExCSS.VisibilityProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static VisibilityProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.Whitespace : Enum {
    public byte value__;
    public static Whitespace Normal;
    public static Whitespace Pre;
    public static Whitespace NoWrap;
    public static Whitespace PreWrap;
    public static Whitespace PreLine;
}
internal class ExCSS.WhiteSpaceProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static WhiteSpaceProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.WidowsProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static WidowsProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.WidthMediaFeature : MediaFeature {
    internal IValueConverter Converter { get; }
    public WidthMediaFeature(string name);
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.WidthProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static WidthProperty();
    internal virtual IValueConverter get_Converter();
}
public enum ExCSS.WordBreak : Enum {
    public byte value__;
    public static WordBreak Normal;
    public static WordBreak BreakAll;
    public static WordBreak KeepAll;
}
internal class ExCSS.WordBreakProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static WordBreakProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.WordSpacingProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static WordSpacingProperty();
    internal virtual IValueConverter get_Converter();
}
internal class ExCSS.ZIndexProperty : Property {
    private static IValueConverter StyleConverter;
    internal IValueConverter Converter { get; }
    private static ZIndexProperty();
    internal virtual IValueConverter get_Converter();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
internal static class System.Threading.Tasks.TaskEx : object {
    public static Task Run(Action action, CancellationToken cancel);
    public static Task Delay(int millisecondsDelay, CancellationToken cancel);
    public static Task WhenAll(IEnumerable`1<Task> tasks);
}
