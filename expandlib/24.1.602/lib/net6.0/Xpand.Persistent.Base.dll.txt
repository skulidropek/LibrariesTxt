[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string PropertyChanged;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public class Xpand.Persistent.Base.AdditionalViewControls.AdditionalViewControlsRuleAttribute : LogicRuleAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ControlType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <DecoratorType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MessageProperty>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<Color> <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<Color> <ForeColor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<FontStyle> <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Height>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ImageName>k__BackingField;
    public Type ControlType { get; public set; }
    public Type DecoratorType { get; public set; }
    public string MessageProperty { get; public set; }
    public string Message { get; public set; }
    public Position Position { get; public set; }
    public Nullable`1<Color> BackColor { get; public set; }
    public Nullable`1<Color> ForeColor { get; public set; }
    public Nullable`1<FontStyle> FontStyle { get; public set; }
    public Nullable`1<int> Height { get; public set; }
    public Nullable`1<int> FontSize { get; public set; }
    public string ImageName { get; public set; }
    public AdditionalViewControlsRuleAttribute(string id, string normalCriteria, string emptyCriteria, Type controlType, Type decoratorType, string message, Position position);
    public AdditionalViewControlsRuleAttribute(string id, string normalCriteria, string emptyCriteria, string message, Position position);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ControlType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ControlType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DecoratorType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DecoratorType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageProperty();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageProperty(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Position get_Position();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Position(Position value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Color> get_BackColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BackColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Color> get_ForeColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForeColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<FontStyle> get_FontStyle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontStyle(Nullable`1<FontStyle> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Height(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_FontSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ImageName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ImageName(string value);
}
[FlagsAttribute]
public enum Xpand.Persistent.Base.AdditionalViewControls.FontStyle : Enum {
    public int value__;
    public static FontStyle Regular;
    public static FontStyle Bold;
    public static FontStyle Italic;
    public static FontStyle Underline;
    public static FontStyle Strikeout;
}
public interface Xpand.Persistent.Base.AdditionalViewControls.IAdditionalViewControlsRule {
    [CategoryAttribute("Data")]
[DescriptionAttribute("The type of the control to be added to the view")]
[TypeConverterAttribute("DevExpress.ExpressApp.Model.Core.StringToTypeConverter")]
[RequiredAttribute]
[DataSourcePropertyAttribute("ControlTypes", "Mono.Cecil.CustomAttributeArgument[]")]
public Type ControlType { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("The type of the control that will be used to decorate the inserted control")]
[TypeConverterAttribute("DevExpress.ExpressApp.Model.Core.StringToTypeConverter")]
[RequiredAttribute]
[DataSourcePropertyAttribute("DecoratorTypes", "Mono.Cecil.CustomAttributeArgument[]")]
public Type DecoratorType { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("The type of the control that will be used to decorate the inserted control")]
public string MessageProperty { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("The type of the control that will be used to decorate the inserted control")]
[LocalizableAttribute("True")]
public string Message { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Specifies the position at which the control is to be inserted")]
public Position Position { get; public set; }
    public abstract virtual Type get_ControlType();
    public abstract virtual void set_ControlType(Type value);
    public abstract virtual Type get_DecoratorType();
    public abstract virtual void set_DecoratorType(Type value);
    public abstract virtual string get_MessageProperty();
    public abstract virtual void set_MessageProperty(string value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual Position get_Position();
    public abstract virtual void set_Position(Position value);
}
public interface Xpand.Persistent.Base.AdditionalViewControls.IContextAdditionalViewControlsRule {
}
public interface Xpand.Persistent.Base.AdditionalViewControls.ISupportAppeareance {
    [CategoryAttribute("Appearance")]
public Nullable`1<Color> BackColor { get; public set; }
    [CategoryAttribute("Appearance")]
public Nullable`1<Color> ForeColor { get; public set; }
    [CategoryAttribute("Appearance")]
public Nullable`1<FontStyle> FontStyle { get; public set; }
    [CategoryAttribute("Appearance")]
public Nullable`1<int> Height { get; public set; }
    [CategoryAttribute("Appearance")]
public Nullable`1<int> FontSize { get; public set; }
    [EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.ImageGalleryModelEditorControl, DevExpress.ExpressApp.Win.v24.1", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CategoryAttribute("Appearance")]
public string ImageName { get; public set; }
    public abstract virtual Nullable`1<Color> get_BackColor();
    public abstract virtual void set_BackColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ForeColor();
    public abstract virtual void set_ForeColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<FontStyle> get_FontStyle();
    public abstract virtual void set_FontStyle(Nullable`1<FontStyle> value);
    public abstract virtual Nullable`1<int> get_Height();
    public abstract virtual void set_Height(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_FontSize();
    public abstract virtual void set_FontSize(Nullable`1<int> value);
    public abstract virtual string get_ImageName();
    public abstract virtual void set_ImageName(string value);
}
public enum Xpand.Persistent.Base.AdditionalViewControls.Position : Enum {
    public int value__;
    public static Position Top;
    public static Position Bottom;
    public static Position DetailViewItem;
}
public class Xpand.Persistent.Base.AllTypesLocalizedClassInfoTypeConverter : ReferenceConverter {
    private static Type[] Types;
    private static AllTypesLocalizedClassInfoTypeConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object val, Type destType);
    private string GetTypeName(Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object val);
}
public enum Xpand.Persistent.Base.AuditTrail.AuditMemberStrategy : Enum {
    public int value__;
    public static AuditMemberStrategy None;
    public static AuditMemberStrategy OwnMembers;
    public static AuditMemberStrategy AllMembers;
}
[InvisibleLogicPropertyAttribute("ExecutionContextGroup")]
public interface Xpand.Persistent.Base.AuditTrail.IAuditTrailRule {
    [CategoryAttribute("AuditTrail")]
public Nullable`1<bool> AuditPending { get; public set; }
    [CategoryAttribute("AuditTrail")]
public bool IncludeRelatedTypes { get; public set; }
    [CategoryAttribute("AuditTrail")]
public Nullable`1<ObjectAuditingMode> AuditingMode { get; public set; }
    [CategoryAttribute("AuditTrail")]
public AuditMemberStrategy AuditMemberStrategy { get; public set; }
    [CategoryAttribute("AuditTrail")]
public AuditTrailStrategy AuditTrailStrategy { get; public set; }
    public abstract virtual Nullable`1<bool> get_AuditPending();
    public abstract virtual void set_AuditPending(Nullable`1<bool> value);
    public abstract virtual bool get_IncludeRelatedTypes();
    public abstract virtual void set_IncludeRelatedTypes(bool value);
    public abstract virtual Nullable`1<ObjectAuditingMode> get_AuditingMode();
    public abstract virtual void set_AuditingMode(Nullable`1<ObjectAuditingMode> value);
    public abstract virtual AuditMemberStrategy get_AuditMemberStrategy();
    public abstract virtual void set_AuditMemberStrategy(AuditMemberStrategy value);
    public abstract virtual AuditTrailStrategy get_AuditTrailStrategy();
    public abstract virtual void set_AuditTrailStrategy(AuditTrailStrategy value);
}
public interface Xpand.Persistent.Base.AuditTrail.IContextAuditTrailRule {
    [CategoryAttribute("AuditTrail")]
[DataSourcePropertyAttribute("AuditTrailMembersContexts", "Mono.Cecil.CustomAttributeArgument[]")]
public string AuditTrailMembersContext { get; public set; }
    public abstract virtual string get_AuditTrailMembersContext();
    public abstract virtual void set_AuditTrailMembersContext(string value);
}
public enum Xpand.Persistent.Base.AuditTrail.ObjectAuditingMode : Enum {
    public int value__;
    public static ObjectAuditingMode None;
    public static ObjectAuditingMode Full;
    public static ObjectAuditingMode Lightweight;
    public static ObjectAuditingMode CreationOnly;
}
public enum Xpand.Persistent.Base.DifferenceType : Enum {
    public int value__;
    public static DifferenceType Model;
    public static DifferenceType User;
    public static DifferenceType Role;
}
public interface Xpand.Persistent.Base.Email.IContextEmailRule {
    [RequiredAttribute]
[CategoryAttribute("Email")]
[DataSourcePropertyAttribute("SmtpClientContexts", "Mono.Cecil.CustomAttributeArgument[]")]
public string SmtpClientContext { get; public set; }
    [CategoryAttribute("Email")]
[DataSourcePropertyAttribute("TemplateContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public string TemplateContext { get; public set; }
    [CategoryAttribute("Email")]
[DataSourcePropertyAttribute("EmailReceipientsContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[RuleRequiredFieldAttribute]
public string EmailReceipientsContext { get; public set; }
    public abstract virtual string get_SmtpClientContext();
    public abstract virtual void set_SmtpClientContext(string value);
    public abstract virtual string get_TemplateContext();
    public abstract virtual void set_TemplateContext(string value);
    public abstract virtual string get_EmailReceipientsContext();
    public abstract virtual void set_EmailReceipientsContext(string value);
}
public interface Xpand.Persistent.Base.Email.IEmailOperationPermissionData {
    public string CurrentObjectEmailMember { get; public set; }
    public abstract virtual string get_CurrentObjectEmailMember();
    public abstract virtual void set_CurrentObjectEmailMember(string value);
}
public interface Xpand.Persistent.Base.Email.IEmailRule {
    [DataSourcePropertyAttribute("ModelClass.AllMembers", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("Email")]
[RuleRequiredFieldAttribute]
public IModelMember CurrentObjectEmailMember { get; public set; }
    public abstract virtual IModelMember get_CurrentObjectEmailMember();
    public abstract virtual void set_CurrentObjectEmailMember(IModelMember value);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ActionExtensions : object {
    [ExtensionAttribute]
public static void ActivateKey(ActionBase action, string key);
    [ExtensionAttribute]
public static IModelAction Model(ActionBase actionBase);
    [ExtensionAttribute]
public static IModelBaseChoiceActionItem Model(ChoiceActionItem choiceActionItem);
    [ExtensionAttribute]
public static void CloneParameter(ActionBase clone, ActionBase ori);
    [ExtensionAttribute]
public static bool DoExecute(ActionBase actionBase);
}
public class Xpand.Persistent.Base.General.ApplicationBuilder : object {
    private string _assemblyPath;
    private Func`2<string, ITypesInfo> _buildTypesInfoSystem;
    private string _moduleName;
    private bool _withOutObjectSpaceProvider;
    public static ApplicationBuilder Create();
    private static Func`2<string, ITypesInfo> BuildTypesInfoSystem(bool tryToUseCurrentTypesInfo);
    public ApplicationBuilder FromAssembliesPath(string path);
    public ApplicationBuilder UsingTypesInfo(Func`2<string, ITypesInfo> buildTypesInfoSystem);
    public ApplicationBuilder FromModule(string moduleName);
    public XafApplication Build(ModuleList moduleList);
    private void SetConnectionString(XafApplication xafApplication);
    public ApplicationBuilder WithOutObjectSpaceProvider();
}
public class Xpand.Persistent.Base.General.ApplicationHelper : object {
    private static string ValueManagerKey;
    private static IValueManager`1 modreq(System.Runtime.CompilerServices.IsVolatile) _instanceValueManager;
    private static object SyncRoot;
    private XafApplication _application;
    public static ApplicationHelper Instance { get; }
    public XafApplication Application { get; }
    private static ApplicationHelper();
    public static ApplicationHelper get_Instance();
    public XafApplication get_Application();
    public void Initialize(XafApplication application);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ApplicationModulesManagerExtensions : object {
    private static void LoadRegularTypesToTypesInfo(ITypesInfo typesInfo, ModuleBase module);
    [ExtensionAttribute]
public static void AddModule(ApplicationModulesManager applicationModulesManager, XafApplication application, ModuleBase[] moduleBases);
    private static void AddModule(ApplicationModulesManager applicationModulesManager, XafApplication application, ModuleBase[] moduleBases, HashSet`1<string> installedModules);
}
public class Xpand.Persistent.Base.General.ApplicationModulesManagerSetupArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ApplicationModulesManager <ModuleManager>k__BackingField;
    public ApplicationModulesManager ModuleManager { get; }
    public ApplicationModulesManagerSetupArgs(ApplicationModulesManager moduleManager);
    [CompilerGeneratedAttribute]
public ApplicationModulesManager get_ModuleManager();
}
public abstract class Xpand.Persistent.Base.General.AttributeRegistrator : object {
    public abstract virtual IEnumerable`1<Attribute> GetAttributes(ITypeInfo typesInfo);
}
public abstract class Xpand.Persistent.Base.General.AttributeRegistrator`1 : AttributeRegistrator {
    public Type Type { get; }
    public Type get_Type();
}
internal class Xpand.Persistent.Base.General.CodeGenerator : object {
    private TypeHelper _typeHelper;
    private ReferencesCollector _referencesCollector;
    private List`1<Type> _usingTypes;
    private string _viewName;
    private ITypeInfo _typeInfo;
    public CodeInfo GetCode(ITypeInfo typeInfo);
    protected virtual string CreateClassConstructor();
    private string CreateProperties();
    private string CreateProperty(IMemberInfo info);
    protected virtual string CreatePropertyCore(string keyAttributeCode, string tableNameAttributeCode, string propertyType, string columnName);
    private string TableNameAttributeCode(IMemberInfo memberInfo);
    private string KeyAttributeCode(IMemberInfo info);
    private IEnumerable`1<IMemberInfo> PersistentNonSystemMemberInfos();
    private string GetPropertyType(IMemberInfo info);
    protected string TypeToString(Type type);
    protected virtual string CreateClassDeclaration();
}
internal class Xpand.Persistent.Base.General.CodeInfo : object {
    private ITypeInfo _typeInfo;
    private string _source;
    private List`1<string> _references;
    private string _viewName;
    public ITypeInfo TypeInfo { get; }
    public string Source { get; }
    public List`1<string> References { get; }
    public ITypeInfo ViewTypeInfo { get; }
    public CodeInfo(ITypeInfo typeInfo, string source, List`1<string> references, string viewName);
    public ITypeInfo get_TypeInfo();
    public string get_Source();
    public List`1<string> get_References();
    public ITypeInfo get_ViewTypeInfo();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.CollectionSourceExtensions : object {
    [ExtensionAttribute]
public static CriteriaOperator GetAssociatedCollectionCriteria(CollectionSourceBase collectionSource);
    [ExtensionAttribute]
public static CriteriaOperator GetExternalCriteria(CollectionSourceBase collectionSource);
    [ExtensionAttribute]
public static CriteriaOperator GetCriteria(CollectionSourceBase collectionSource);
}
public class Xpand.Persistent.Base.General.ConnectionStringHelper : object {
    private static string ConnectionStringHelperName;
    private static string _currentConnectionString;
    private XpandModuleBase _xpandModuleBase;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler ConnectionStringUpdated;
    protected XafApplication Application { get; }
    protected bool RuntimeMode { get; }
    [CompilerGeneratedAttribute]
public void add_ConnectionStringUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionStringUpdated(EventHandler value);
    private void OnConnectionStringUpdated();
    private void ApplicationOnLoggedOff(object sender, EventArgs eventArgs);
    private void ConnectionStringActions(object sender, ObjectSpaceCreatedEventArgs e);
    protected XafApplication get_Application();
    protected bool get_RuntimeMode();
    public void Attach(XpandModuleBase moduleBase);
    private void ApplicationOnDatabaseVersionMismatch(object sender, DatabaseVersionMismatchEventArgs databaseVersionMismatchEventArgs);
    private void XafApplicationOnStatusUpdating(object sender, StatusUpdatingEventArgs statusUpdatingEventArgs);
    private bool Executed(string name);
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ActionItemsFromModelController : ViewController {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CustomizeActionItemArgs> CustomizeActionItem;
    [CompilerGeneratedAttribute]
public void add_CustomizeActionItem(EventHandler`1<CustomizeActionItemArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomizeActionItem(EventHandler`1<CustomizeActionItemArgs> value);
    protected virtual void OnCustomizeActionItem(CustomizeActionItemArgs e);
    protected virtual void OnViewControllersActivated();
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ActionModelChoiceItemController : ViewController {
    protected virtual void OnDeactivated();
    protected virtual void OnViewControlsCreated();
    private void UpdateItem(ChoiceActionItem item, SingleChoiceAction action);
    private void SingleChoiceActionOnItemsChanged(object sender, ItemsChangedEventArgs e);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ActionModifyModelController : WindowController {
    public static string ModifyModelActionName;
    private List`1<SingleChoiceAction> _singleChoiceActions;
    private SingleChoiceAction _modifyModelAction;
    public SingleChoiceAction ModifyModelAction { get; }
    public SingleChoiceAction get_ModifyModelAction();
    private void ModifyModelActionOnExecute(object sender, SingleChoiceActionExecuteEventArgs e);
    protected virtual void OnActivated();
    private IEnumerable`1<IModelChoiceActionItemModifyModel> GetModelChoiceActionItemModifyModels(IEnumerable`1<IModelChoiceActionItem> modelChoiceActionItems);
    protected virtual void OnDeactivated();
    private void SingleChoiceActionOnExecute(object sender, SingleChoiceActionExecuteEventArgs e);
    private string OldValue(string propertyName, IEnumerable`1<IModelNode> modelNodes, string value);
    private IEnumerable`1<IModelNode> GetModelNodes(IModelModifyModelNodePath modelNodePath);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.Actions.CustomizeActionItemArgs : EventArgs {
    private ChoiceActionItem _actionItem;
    public ChoiceActionItem ActionItem { get; }
    public CustomizeActionItemArgs(ChoiceActionItem actionItem);
    public ChoiceActionItem get_ActionItem();
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelActionItemsFromModel {
    [CategoryAttribute("eXpand")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.General.Model.VisibilityCalculators.ActionVisibilityCalculator`1<DevExpress.ExpressApp.Actions.SingleChoiceAction>")]
public bool ItemsFromModel { get; public set; }
    public abstract virtual bool get_ItemsFromModel();
    public abstract virtual void set_ItemsFromModel(bool value);
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelChoiceActionItemActive {
    [CategoryAttribute("eXpand")]
public Nullable`1<bool> Active { get; public set; }
    public abstract virtual Nullable`1<bool> get_Active();
    public abstract virtual void set_Active(Nullable`1<bool> value);
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelChoiceActionItemModifyModel {
    public IModelModifyModelNodePaths ModelNodePaths { get; }
    public abstract virtual IModelModifyModelNodePaths get_ModelNodePaths();
}
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelModelNodeAttribute {
    [RequiredAttribute]
public string Value { get; public set; }
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelModeNodeAttributes {
}
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelModifyModelNodePath {
    public IModelModeNodeAttributes Attributes { get; }
    [RequiredAttribute]
[DefaultValueAttribute("Views")]
[RefreshPropertiesAttribute("1")]
public string ModelNodePath { get; public set; }
    [DefaultValueAttribute("(AsObjectView Is Not Null)")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.CriteriaModelEditorControl, DevExpress.ExpressApp.Win.v24.1, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CriteriaOptionsAttribute("EvaluatorTypeInfo")]
public string Criteria { get; public set; }
    public abstract virtual IModelModeNodeAttributes get_Attributes();
    public abstract virtual string get_ModelNodePath();
    public abstract virtual void set_ModelNodePath(string value);
    public abstract virtual string get_Criteria();
    public abstract virtual void set_Criteria(string value);
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.General.Controllers.Actions.ModifyModelNodePathsNodeGenerator")]
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelModifyModelNodePaths {
    [RequiredAttribute]
public string NewCaption { get; public set; }
    public abstract virtual string get_NewCaption();
    public abstract virtual void set_NewCaption(string value);
}
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModelViewConfigurationView {
    [DataSourcePropertyAttribute("Application.DetailViews", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("eXpand")]
public IModelDetailView ConfigurationView { get; public set; }
    public abstract virtual IModelDetailView get_ConfigurationView();
    public abstract virtual void set_ConfigurationView(IModelDetailView value);
}
public interface Xpand.Persistent.Base.General.Controllers.Actions.IModifyModelActionUser {
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ModelActionNodesUpdater : ModelNodesGeneratorUpdater`1<ModelActionsNodesGenerator> {
    public static string LockViewModel;
    public virtual void UpdateNode(ModelNode node);
}
[NonPersistentAttribute]
public class Xpand.Persistent.Base.General.Controllers.Actions.ModelConfiguration : XpandCustomObject {
    public ModelConfiguration(Session session);
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ModelConfigurationController : ModifyModelActionControllerBase {
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    private void ModifyModelActionOnItemsChanged(object sender, ItemsChangedEventArgs e);
    protected virtual void ModifyModelActionOnExecute(object sender, SingleChoiceActionExecuteEventArgs e);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
[DomainLogicAttribute("Xpand.Persistent.Base.General.Controllers.Actions.IModelModifyModelNodePaths")]
public class Xpand.Persistent.Base.General.Controllers.Actions.ModelModifyModelNodePathsDomainLogic : object {
    public static string Get_NewCaption(IModelModifyModelNodePaths nodePaths);
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ModifyModelActionChoiceItemsUpdater : ModelNodesGeneratorUpdater`1<ModelActionsNodesGenerator> {
    public static string ChangeViewModel;
    public static string ResetViewModel;
    public virtual void UpdateNode(ModelNode node);
}
public abstract class Xpand.Persistent.Base.General.Controllers.Actions.ModifyModelActionControllerBase : ViewController {
    private ActionModifyModelController _actionModifyModelController;
    public ActionModifyModelController ActionModifyModelController { get; }
    protected virtual void OnActivated();
    public ActionModifyModelController get_ActionModifyModelController();
    protected abstract virtual void ModifyModelActionOnExecute(object sender, SingleChoiceActionExecuteEventArgs e);
    protected virtual void OnDeactivated();
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ModifyModelNodePathsNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.General.Controllers.Actions.ResetViewModelController : ModifyModelActionControllerBase {
    protected virtual void ModifyModelActionOnExecute(object sender, SingleChoiceActionExecuteEventArgs e);
    public void ResetViewModel(ActionBaseEventArgs e);
}
public class Xpand.Persistent.Base.General.Controllers.CreatableItemController : ViewController {
    protected virtual void OnFrameAssigned();
    private void OnCollectDescendantTypes(object sender, CollectTypesEventArgs e);
    private void FrameOnDisposing(object sender, EventArgs eventArgs);
    [CompilerGeneratedAttribute]
private void <OnFrameAssigned>b__0_0(NewObjectViewController controller);
    [CompilerGeneratedAttribute]
private ITypeInfo <OnCollectDescendantTypes>b__1_0(Type type);
    [CompilerGeneratedAttribute]
private void <FrameOnDisposing>b__2_0(NewObjectViewController controller);
}
[AttributeUsageAttribute("4")]
public class Xpand.Persistent.Base.General.Controllers.CreateableItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <MasterObjectType>k__BackingField;
    public Type MasterObjectType { get; }
    public CreateableItemAttribute(Type masterObjectType);
    [CompilerGeneratedAttribute]
public Type get_MasterObjectType();
}
public class Xpand.Persistent.Base.General.Controllers.CreateExpandAbleMembersViewController : ViewController {
    public static string CreateExpandAbleMembers;
    protected virtual void OnActivated();
    public virtual void ConstractExpandObjectMembers();
    private sealed virtual override void DevExpress.ExpressApp.IModelExtender.ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.CustomAttributesController : WindowController {
    public virtual void CustomizeTypesInfo(ITypesInfo typesInfo);
    private void HandleCustomAttribute(IMemberInfo memberInfo, ITypesInfo typesInfo);
}
public class Xpand.Persistent.Base.General.Controllers.Dashboard.DashboardInteractionController : ViewController`1<DashboardView> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ListViewFilteringArgs> ListViewFiltering;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ListViewFilteredArgs> ListViewFiltered;
    private Dictionary`2<IModelListView, MasterDetailMode> _masterDetailModes;
    [CompilerGeneratedAttribute]
public void add_ListViewFiltering(EventHandler`1<ListViewFilteringArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ListViewFiltering(EventHandler`1<ListViewFilteringArgs> value);
    [CompilerGeneratedAttribute]
public void add_ListViewFiltered(EventHandler`1<ListViewFilteredArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ListViewFiltered(EventHandler`1<ListViewFilteredArgs> value);
    private void OnListViewFiltered(ListViewFilteredArgs e);
    private void OnListViewFiltering(ListViewFilteringArgs e);
    protected virtual void OnDeactivated();
    protected virtual void OnActivated();
    protected virtual void OnViewControlsCreated();
    private void ListViewSelectionChangedHandler(object sender, EventArgs e);
    private void AssignMasterDetailModes(IModelDashboardViewItemEx modelDashboardViewItem);
    private void ResetMasterDetailModes();
    private void OnSelectionChanged(SelectionChangedArgs selectionChangedArgs);
    private void NotifyControllers(ListView listView);
    private IEnumerable`1<IDataSourceSelectionChanged> Controllers(IFrameContainer item);
    private ListView DataSourceListView(IModelListView dataSourceView);
    private bool ViewMatch(DashboardViewItem item, IModelListView dataSourceView);
    private void LayoutManagerOnCustomizeAppearance(object sender, CustomizeAppearanceEventArgs customizeAppearanceEventArgs);
    private ListView FilteredListView(ListView listView, DashboardViewItem dashboardViewItem, IModelDashboardViewItemEx modelDashboardViewItemFiltered);
    private CriteriaOperator CriteriaSelectionOperator(ListView listView, IModelColumn filteredColumn);
    public IEnumerable GetKeys(ListView listView);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
    [CompilerGeneratedAttribute]
private void <OnActivated>b__10_0(EventPattern`1<object> _);
    [CompilerGeneratedAttribute]
private object <GetKeys>b__23_0(object o);
}
[ExtensionAttribute]
[DomainLogicAttribute("Xpand.Persistent.Base.General.Controllers.Dashboard.IModelDashboardViewFilter")]
public static class Xpand.Persistent.Base.General.Controllers.Dashboard.DashboardViewFilteredDomainLogic : object {
    public static IModelList`1<IModelListView> Get_DataSourceViews(IModelDashboardViewFilter modelDashboardViewFilter);
    [ExtensionAttribute]
public static IEnumerable`1<IModelDashboardViewItemEx> AllDashBoardViewItems(IModelDashboardViewFilter modelDashboardViewFilter);
    public static IModelList`1<IModelColumn> Get_FilteredColumns(IModelDashboardViewFilter modelDashboardViewFilter);
}
public class Xpand.Persistent.Base.General.Controllers.Dashboard.DashboardViewFilterVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.Controllers.Dashboard.DashboardViewItemExtensions : object {
    [ExtensionAttribute]
public static IModelDashboardViewItem GetModel(DashboardViewItem item, DashboardView view);
}
public interface Xpand.Persistent.Base.General.Controllers.Dashboard.IDashboardInteractionUser {
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Controllers.Dashboard.IModelDashboardReportViewItemBase {
    public string ReportName { get; public set; }
    public bool CreateDocumentOnLoad { get; public set; }
    [BrowsableAttribute("False")]
public IModelView View { get; public set; }
    [BrowsableAttribute("False")]
public string Criteria { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute]
public ActionsToolbarVisibility ActionsToolbarVisibility { get; public set; }
    [DefaultValueAttribute]
[BrowsableAttribute("False")]
public ViewItemVisibility Visibility { get; public set; }
    [BrowsableAttribute("False")]
public Nullable`1<MasterDetailMode> MasterDetailMode { get; public set; }
    public abstract virtual string get_ReportName();
    public abstract virtual void set_ReportName(string value);
    public abstract virtual bool get_CreateDocumentOnLoad();
    public abstract virtual void set_CreateDocumentOnLoad(bool value);
    public abstract virtual IModelView get_View();
    public abstract virtual void set_View(IModelView value);
    public abstract virtual string get_Criteria();
    public abstract virtual void set_Criteria(string value);
    public abstract virtual ActionsToolbarVisibility get_ActionsToolbarVisibility();
    public abstract virtual void set_ActionsToolbarVisibility(ActionsToolbarVisibility value);
    public abstract virtual ViewItemVisibility get_Visibility();
    public abstract virtual void set_Visibility(ViewItemVisibility value);
    public abstract virtual Nullable`1<MasterDetailMode> get_MasterDetailMode();
    public abstract virtual void set_MasterDetailMode(Nullable`1<MasterDetailMode> value);
}
public interface Xpand.Persistent.Base.General.Controllers.Dashboard.IModelDashboardViewFilter {
    [DataSourcePropertyAttribute("FilteredColumns", "Mono.Cecil.CustomAttributeArgument[]")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.General.Controllers.Dashboard.DashboardViewFilterVisibilityCalculator")]
public IModelColumn FilteredColumn { get; public set; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelColumn> FilteredColumns { get; }
    [DataSourcePropertyAttribute("DataSourceViews", "Mono.Cecil.CustomAttributeArgument[]")]
public IModelListView DataSourceView { get; public set; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelListView> DataSourceViews { get; }
    public abstract virtual IModelColumn get_FilteredColumn();
    public abstract virtual void set_FilteredColumn(IModelColumn value);
    public abstract virtual IModelList`1<IModelColumn> get_FilteredColumns();
    public abstract virtual IModelListView get_DataSourceView();
    public abstract virtual void set_DataSourceView(IModelListView value);
    public abstract virtual IModelList`1<IModelListView> get_DataSourceViews();
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Controllers.Dashboard.IModelDashboardViewItemEx {
    [ModelBrowsableAttribute("Xpand.Persistent.Base.General.Controllers.Dashboard.ModelDashboardViewItemExVisibilityCalculator")]
public IModelDashboardViewFilter Filter { get; }
    [DefaultValueAttribute]
[ModelBrowsableAttribute("Xpand.Persistent.Base.General.Controllers.Dashboard.ModelDashboardViewItemExVisibilityCalculator")]
[CategoryAttribute("eXpand")]
public ViewItemVisibility Visibility { get; public set; }
    [ModelBrowsableAttribute("Xpand.Persistent.Base.General.Controllers.Dashboard.ModelDashboardViewItemExVisibilityCalculator")]
[CategoryAttribute("eXpand")]
public Nullable`1<MasterDetailMode> MasterDetailMode { get; public set; }
    public abstract virtual IModelDashboardViewFilter get_Filter();
    public abstract virtual ViewItemVisibility get_Visibility();
    public abstract virtual void set_Visibility(ViewItemVisibility value);
    public abstract virtual Nullable`1<MasterDetailMode> get_MasterDetailMode();
    public abstract virtual void set_MasterDetailMode(Nullable`1<MasterDetailMode> value);
}
public class Xpand.Persistent.Base.General.Controllers.Dashboard.ListViewFilteredArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ListView <FilterListView>k__BackingField;
    public ListView FilterListView { get; }
    public ListViewFilteredArgs(ListView filterListView);
    [CompilerGeneratedAttribute]
public ListView get_FilterListView();
}
public class Xpand.Persistent.Base.General.Controllers.Dashboard.ListViewFilteringArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DashboardViewItem <DashboardViewItem>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ListView <DataSourceListView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelDashboardViewItemEx <Model>k__BackingField;
    public DashboardViewItem DashboardViewItem { get; }
    public ListView DataSourceListView { get; }
    public IModelDashboardViewItemEx Model { get; }
    public ListViewFilteringArgs(DashboardViewItem dashboardViewItem, IModelDashboardViewItemEx model, ListView dataSourceListView);
    [CompilerGeneratedAttribute]
public DashboardViewItem get_DashboardViewItem();
    [CompilerGeneratedAttribute]
public ListView get_DataSourceListView();
    [CompilerGeneratedAttribute]
public IModelDashboardViewItemEx get_Model();
}
public class Xpand.Persistent.Base.General.Controllers.Dashboard.ModelDashboardViewItemExVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Controllers.Dashboard.SelectionChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ListView <ListView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DashboardViewItem <DashboardViewItem>k__BackingField;
    public ListView ListView { get; }
    public DashboardViewItem DashboardViewItem { get; }
    public IModelDashboardViewItemEx DashboardViewItemModel { get; }
    public SelectionChangedArgs(ListView listView, DashboardViewItem dashboardViewItem);
    [CompilerGeneratedAttribute]
public ListView get_ListView();
    [CompilerGeneratedAttribute]
public DashboardViewItem get_DashboardViewItem();
    public IModelDashboardViewItemEx get_DashboardViewItemModel();
}
public class Xpand.Persistent.Base.General.Controllers.DisableDialogController : Controller {
    private Type[] _types;
    public DisableDialogController(Type[] types);
    protected virtual void OnFrameAssigned();
    [CompilerGeneratedAttribute]
private void <OnFrameAssigned>b__2_0(Controller controller);
}
public class Xpand.Persistent.Base.General.Controllers.EasyTestController : WindowController {
    private static string LoadModel;
    private static string MergeModel;
    private ParametrizedAction _parametrizedAction;
    private SingleChoiceAction _easyTestAction;
    public SingleChoiceAction EasyTestAction { get; }
    public ParametrizedAction ParametrizedAction { get; }
    public SingleChoiceAction get_EasyTestAction();
    public ParametrizedAction get_ParametrizedAction();
    private void SingleChoiceActionOnExecute(object sender, SingleChoiceActionExecuteEventArgs e);
}
public class Xpand.Persistent.Base.General.Controllers.FilterByColumnController : ViewController`1<ListView> {
    private SimpleAction _cellFilterAction;
    private static string _actionActiveContext;
    public SimpleAction CellFilterAction { get; }
    private static FilterByColumnController();
    public SimpleAction get_CellFilterAction();
    public void UpdateAction(bool cellFilter);
    public CriteriaOperator GetCriteria(IModelColumn modelColumn, object parameters, CriteriaOperator activeFilterCriteria);
}
public class Xpand.Persistent.Base.General.Controllers.FilteredMasterObjectViewController : MasterObjectViewController`2<object, object> {
    private string _criteria;
    protected virtual void OnActivated();
    protected virtual void UpdateMasterObject(object masterObject);
}
public class Xpand.Persistent.Base.General.Controllers.HideFromNewMenuViewController : ViewController`1<ObjectView> {
    protected virtual void OnViewControlsCreated();
    public List`1<ITypeInfo> GetHiddenTypes();
}
public interface Xpand.Persistent.Base.General.Controllers.IModelClassCreateExpandAbleMembers {
    [CategoryAttribute("eXpand")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Creates automatically any ref objects that are null when a detailview of a new persistent object is shown")]
public bool CreateExpandAbleMembers { get; public set; }
    public abstract virtual bool get_CreateExpandAbleMembers();
    public abstract virtual void set_CreateExpandAbleMembers(bool value);
}
public interface Xpand.Persistent.Base.General.Controllers.IModelClassModelSaving {
    [CategoryAttribute("eXpand")]
public bool HandleModelSaving { get; public set; }
    public abstract virtual bool get_HandleModelSaving();
    public abstract virtual void set_HandleModelSaving(bool value);
}
public interface Xpand.Persistent.Base.General.Controllers.IModelClassModifyObjectSpace {
    [CategoryAttribute("eXpand")]
public bool ModifyObjectSpace { get; public set; }
    public abstract virtual bool get_ModifyObjectSpace();
    public abstract virtual void set_ModifyObjectSpace(bool value);
}
public interface Xpand.Persistent.Base.General.Controllers.IModelClassNotifiedMembers {
    [CategoryAttribute("eXpand")]
[TypeConverterAttribute("Xpand.Persistent.Base.General.Controllers.ModelClassMembersConverter")]
public string NotifiedMembers { get; public set; }
    public abstract virtual string get_NotifiedMembers();
    public abstract virtual void set_NotifiedMembers(string value);
}
[ModelInterfaceImplementorAttribute("Xpand.Persistent.Base.General.Controllers.IModelClassCreateExpandAbleMembers", "ModelClass")]
public interface Xpand.Persistent.Base.General.Controllers.IModelDetailViewCreateExpandAbleMembers {
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Controllers.IModelNavigationItemDataSource {
    [CategoryAttribute("eXpand")]
[DataSourcePropertyAttribute("Application.ListViews", "Mono.Cecil.CustomAttributeArgument[]")]
public IModelListView DatasourceListView { get; public set; }
    public abstract virtual IModelListView get_DatasourceListView();
    public abstract virtual void set_DatasourceListView(IModelListView value);
}
[ModelInterfaceImplementorAttribute("Xpand.Persistent.Base.General.Controllers.IModelClassModifyObjectSpace", "ModelClass")]
public interface Xpand.Persistent.Base.General.Controllers.IModelObjectViewModifyObjectSpace {
}
[ModelInterfaceImplementorAttribute("Xpand.Persistent.Base.General.Controllers.IModelClassNotifiedMembers", "ModelClass")]
public interface Xpand.Persistent.Base.General.Controllers.IModelObjectViewNotifiedMembers {
}
public interface Xpand.Persistent.Base.General.Controllers.IModelOptionsCollectionEditMode {
    [CategoryAttribute("eXpand")]
[DefaultValueAttribute]
public ViewEditMode CollectionsEditMode { get; public set; }
    public abstract virtual ViewEditMode get_CollectionsEditMode();
    public abstract virtual void set_CollectionsEditMode(ViewEditMode value);
}
public interface Xpand.Persistent.Base.General.Controllers.IModelOptionsNavigationContainer {
    [CategoryAttribute("eXpand.Navigation")]
[DescriptionAttribute("Overrides NavigationAlwaysVisibleOnStartup")]
public Nullable`1<bool> HideNavigationOnStartup { get; public set; }
    [CategoryAttribute("eXpand.Navigation")]
[DefaultValueAttribute("True")]
public bool NavigationAlwaysVisibleOnStartup { get; public set; }
    public abstract virtual Nullable`1<bool> get_HideNavigationOnStartup();
    public abstract virtual void set_HideNavigationOnStartup(Nullable`1<bool> value);
    public abstract virtual bool get_NavigationAlwaysVisibleOnStartup();
    public abstract virtual void set_NavigationAlwaysVisibleOnStartup(bool value);
}
[ModelInterfaceImplementorAttribute("Xpand.Persistent.Base.General.Controllers.IModelClassModelSaving", "ModelClass")]
public interface Xpand.Persistent.Base.General.Controllers.IModelViewModelSaving {
}
public interface Xpand.Persistent.Base.General.Controllers.ISupportCancelModification {
}
public interface Xpand.Persistent.Base.General.Controllers.ISupportNotifiedMembers {
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.General.Controllers.MasterObjectDataSourceCriteriaAttribute : ModelExportedValueAttribute {
    private string _dataSourceCriteria;
    public string DataSourceCriteria { get; }
    public object Value { get; }
    public MasterObjectDataSourceCriteriaAttribute(string dataSourceCriteria);
    public string get_DataSourceCriteria();
    public virtual object get_Value();
}
public abstract class Xpand.Persistent.Base.General.Controllers.MasterObjectViewController`2 : ViewController`1<ListView> {
    protected virtual void OnActivated();
    protected abstract virtual void UpdateMasterObject(TMasterObject masterObject);
    private void OnMasterObjectChanged(object sender, EventArgs e);
    protected virtual void OnDeactivated();
}
public class Xpand.Persistent.Base.General.Controllers.ModelClassMembersConverter : StringConverter {
    public static string AllMembers;
    public static string Calculated;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
public class Xpand.Persistent.Base.General.Controllers.ModelController : ViewController {
    private Nullable`1<bool> _handleModelSaving;
    protected virtual void OnActivated();
    public void SetView();
    public void SetView(ShowViewParameters showViewParameters);
}
[DomainLogicAttribute("Xpand.Persistent.Base.General.Controllers.IModelObjectViewNotifiedMembers")]
public class Xpand.Persistent.Base.General.Controllers.ModelObjectViewNotifiedMembersDomainLogic : object {
    public static string Get_NotifiedMembers(IModelObjectViewNotifiedMembers members);
    private static IEnumerable`1<IModelCommonMemberViewItem> GetModelViewItems(IModelObjectView modelObjectView);
    private static bool IsEditorSupported(IModelCommonMemberViewItem item);
}
public class Xpand.Persistent.Base.General.Controllers.ModelViewSavingController : ViewController {
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    private void ViewOnCustomModelSaving(object sender, HandledEventArgs handledEventArgs);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.ModifyObjectSpaceController : ViewController`1<ObjectView> {
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    private void ObjectSpaceOnObjectChanged(object sender, ObjectChangedEventArgs objectChangedEventArgs);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.NavigationContainerController : WindowController {
    public static string ToggleNavigationId;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SimpleAction <ToggleNavigation>k__BackingField;
    public SimpleAction ToggleNavigation { get; }
    [CompilerGeneratedAttribute]
public SimpleAction get_ToggleNavigation();
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.NavigationItemsController : WindowController {
    private bool _recreate;
    private IEnumerable`1<IModelNavigationItemDataSource> NavigationItemDataSources { get; }
    protected virtual void OnFrameAssigned();
    private void FrameOnDisposing(object sender, EventArgs eventArgs);
    private void ApplicationOnObjectSpaceCreated(object sender, ObjectSpaceCreatedEventArgs e);
    private void ObjectSpaceOnDisposed(object sender, EventArgs eventArgs);
    private void ObjectSpaceOnCommitting(object sender, CancelEventArgs cancelEventArgs);
    private void ObjectSpaceOnCommitted(object sender, EventArgs eventArgs);
    private void ShowNavigationItemControllerOnItemsInitialized(object sender, EventArgs eventArgs);
    private void OnCustomInitializeItems(object sender, HandledEventArgs handledEventArgs);
    private IEnumerable`1<IModelNavigationItemDataSource> get_NavigationItemDataSources();
    private void CreateChildNavigationItem(IModelNavigationItemDataSource navigationItem, int index, string caption, string id);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
    [CompilerGeneratedAttribute]
private void <OnFrameAssigned>b__1_0(ShowNavigationItemController showNavigationItemController);
    [CompilerGeneratedAttribute]
private void <FrameOnDisposing>b__2_0(ShowNavigationItemController showNavigationItemController);
}
public class Xpand.Persistent.Base.General.Controllers.NotifyMembersController : ViewController`1<ObjectView> {
    private MethodInvoker _onChangedmethodInfo;
    private string _notifiedMembers;
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    private void ObjectSpaceOnObjectChanged(object sender, ObjectChangedEventArgs objectChangedEventArgs);
    private IEnumerable`1<IModelMember> IsNotifiedEnabled(string propertyName);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.Persistent.Base.General.Controllers.PessimisticLocker : object {
    private object _currentObject;
    private Session _session;
    private Nullable`1<bool> _isLocked;
    public bool IsLocked { get; }
    private XPMemberInfo LockingMemberInfo { get; }
    public PessimisticLocker(IDataLayer dataLayer, object currentObject);
    public bool get_IsLocked();
    private object GetCurrentObject(object currentObject);
    public void UnLock(bool force);
    private void UnLockCore();
    public void UnLock();
    public void Lock();
    private object GetCurrentUser();
    private XPMemberInfo get_LockingMemberInfo();
}
public class Xpand.Persistent.Base.General.Controllers.PessimisticLockingAttribute : Attribute {
}
public abstract class Xpand.Persistent.Base.General.Controllers.PessimisticLockingViewController : ViewController`1<DetailView> {
    private PessimisticLocker _pessimisticLocker;
    private SimpleAction _unlockObjectShipAction;
    public static string PessimisticLocking;
    public static string LockedUser;
    public SimpleAction UnlockObjectShipAction { get; }
    public SimpleAction get_UnlockObjectShipAction();
    private void SimpleActionOnExecute(object sender, SimpleActionExecuteEventArgs simpleActionExecuteEventArgs);
    protected virtual void OnActivated();
    private void View_CurrentObjectChanged(object sender, EventArgs e);
    private void Initalize();
    private void ViewOnAllowEditChanged(object sender, EventArgs eventArgs);
    protected void UpdateViewAllowEditState();
    protected virtual void SubscribeToEvents();
    private void ObjectSpaceOnCommitted(object sender, EventArgs eventArgs);
    private void ViewOnClosing(object sender, EventArgs eventArgs);
    private void ViewOnQueryCanChangeCurrentObject(object sender, CancelEventArgs cancelEventArgs);
    private void ObjectSpaceOnRollingBack(object sender, CancelEventArgs cancelEventArgs);
    private void ObjectSpaceOnObjectChanged(object sender, ObjectChangedEventArgs objectChangedEventArgs);
}
public abstract class Xpand.Persistent.Base.General.Controllers.PopulateController`1 : ViewController`1<ObjectView> {
    private string _oldPredefinedValues;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisablePropertyEditorReplacement>k__BackingField;
    protected string PropertyName { get; }
    public bool DisablePropertyEditorReplacement { get; public set; }
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    private void ObjectSpaceOnObjectChanged(object sender, ObjectChangedEventArgs objectChangedEventArgs);
    protected virtual IEnumerable`1<string> RefreshingProperties();
    protected virtual void Populate(Func`2<IModelMember, string> collect);
    private void PopulateCore(Func`2<IModelMember, string> collect, string propertyName);
    protected string get_PropertyName();
    [CompilerGeneratedAttribute]
public bool get_DisablePropertyEditorReplacement();
    [CompilerGeneratedAttribute]
public void set_DisablePropertyEditorReplacement(bool value);
    protected string GetPropertyName(Expression`1<Func`2<T, object>> lambdaExpression);
    protected PropertyEditor GetPropertyEditor(Expression`1<Func`2<T, object>> expression);
    protected abstract virtual string GetPredefinedValues(IModelMember wrapper);
    protected abstract virtual Expression`1<Func`2<T, object>> GetPropertyName();
    [CompilerGeneratedAttribute]
private string <OnActivated>b__2_0(IModelMember member);
    [CompilerGeneratedAttribute]
private string <OnDeactivated>b__3_0(IModelMember member);
}
public class Xpand.Persistent.Base.General.Controllers.PopupParentFrameController : ViewController`1<ObjectView> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Frame <ParentFrame>k__BackingField;
    public Frame ParentFrame { get; }
    public PopupParentFrameController(Frame parentFrame);
    protected virtual void OnActivated();
    private void ItemOnControlCreated(object sender, EventArgs eventArgs);
    [CompilerGeneratedAttribute]
public Frame get_ParentFrame();
}
public abstract class Xpand.Persistent.Base.General.Controllers.UpdateTypeConverterController`2 : ViewController {
    public virtual void CustomizeTypesInfo(ITypesInfo typesInfo);
    protected abstract virtual Expression`1<Func`2<T, object>> Expression();
}
public class Xpand.Persistent.Base.General.Controllers.XpandLinkToListViewController : Controller {
    private Link _link;
    private View _previousView;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler LinkChanged;
    public Link Link { get; public set; }
    private void Application_ViewShowing(object sender, ViewShowingEventArgs e);
    private void ViewOnDisposing(object sender, CancelEventArgs cancelEventArgs);
    private void Frame_ViewChanging(object sender, ViewChangingEventArgs e);
    private void Frame_ViewChanged(object sender, ViewChangedEventArgs e);
    protected virtual void OnLinkChanged();
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    protected virtual void Dispose(bool disposing);
    public Link get_Link();
    public void set_Link(Link value);
    [CompilerGeneratedAttribute]
public void add_LinkChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LinkChanged(EventHandler value);
}
public abstract class Xpand.Persistent.Base.General.Controllers.XpandReferenceConverter : ReferenceConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    protected virtual IEnumerable`1<Type> GetTypeInfos(ITypeInfo typeInfo);
    protected abstract virtual Type GetTypeInfo();
}
public class Xpand.Persistent.Base.General.CreateUnitOfWorkHandler : MulticastDelegate {
    public CreateUnitOfWorkHandler(object object, IntPtr method);
    public virtual XpandUnitOfWork Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual XpandUnitOfWork EndInvoke(IAsyncResult result);
}
public class Xpand.Persistent.Base.General.CreatingListEditorEventArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelListView <ModelListView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CollectionSourceBase <CollectionSource>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ListEditor <ListEditor>k__BackingField;
    public IModelListView ModelListView { get; }
    public CollectionSourceBase CollectionSource { get; }
    public ListEditor ListEditor { get; public set; }
    public CreatingListEditorEventArgs(IModelListView modelListView, CollectionSourceBase collectionSource);
    [CompilerGeneratedAttribute]
public IModelListView get_ModelListView();
    [CompilerGeneratedAttribute]
public CollectionSourceBase get_CollectionSource();
    [CompilerGeneratedAttribute]
public ListEditor get_ListEditor();
    [CompilerGeneratedAttribute]
public void set_ListEditor(ListEditor value);
}
public class Xpand.Persistent.Base.General.CreatingWorkingDataLayerArgs : EventArgs {
    private IDataStore _workingDataStore;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDataLayer <DataLayer>k__BackingField;
    public IDataStore WorkingDataStore { get; }
    public IDataLayer DataLayer { get; public set; }
    public CreatingWorkingDataLayerArgs(IDataStore workingDataStore);
    public IDataStore get_WorkingDataStore();
    [CompilerGeneratedAttribute]
public IDataLayer get_DataLayer();
    [CompilerGeneratedAttribute]
public void set_DataLayer(IDataLayer value);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.CriteriaOperatorExtensions : object {
    [ExtensionAttribute]
public static bool Fit(CriteriaOperator criteriaOperator, object targetObject);
    [ExtensionAttribute]
public static ExpressionEvaluator NewExpressionEvaluator(CriteriaOperator criteriaOperator, object targetObject);
    private static EvaluatorContextDescriptor GetEvaluatorContextDescriptor(Type objectType, object targetObject);
}
[AttributeUsageAttribute("4")]
public class Xpand.Persistent.Base.General.CustomAttributes.EnumFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EnumFilterMode <FilterMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Criteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Object[] <Values>k__BackingField;
    public string PropertyName { get; }
    public EnumFilterMode FilterMode { get; }
    public string Criteria { get; }
    public Object[] Values { get; }
    public EnumFilterAttribute(string propertyName, EnumFilterMode filterMode, string criteria, Object[] values);
    public EnumFilterAttribute(string propertyName, EnumFilterMode filterMode, Object[] values);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public EnumFilterMode get_FilterMode();
    [CompilerGeneratedAttribute]
public string get_Criteria();
    [CompilerGeneratedAttribute]
public Object[] get_Values();
}
public enum Xpand.Persistent.Base.General.CustomAttributes.EnumFilterMode : Enum {
    public int value__;
    public static EnumFilterMode Remove;
    public static EnumFilterMode Allow;
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.CustomAttributes.EnumPropertyEditorExtensions : object {
    [ExtensionAttribute]
public static void SetupEnumPropertyDataSource(IMemberInfo memberInfo, object objectInstance, IObjectSpace objectSpace, TControlItem[] startitems, IList controlItems, Func`2<TControlItem, object> itemValueSelector);
}
public interface Xpand.Persistent.Base.General.CustomAttributes.ICustomAttribute {
}
public interface Xpand.Persistent.Base.General.CustomAttributes.IEnumPropertyEditor {
}
public interface Xpand.Persistent.Base.General.CustomAttributes.IReleasedSequencePropertyEditor {
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.General.CustomAttributes.PropertyEditorAttribute : Attribute {
    private Type _propertyEditorType;
    public string Name { get; }
    public string Value { get; }
    public PropertyEditorAttribute(Type propertyEditorType);
    public sealed virtual string get_Name();
    public sealed virtual string get_Value();
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.General.CustomAttributes.SequencePropertyAttribute : Attribute {
    public string Name { get; }
    public string Value { get; }
    public sealed virtual string get_Name();
    public sealed virtual string get_Value();
}
[AttributeUsageAttribute("384")]
public class Xpand.Persistent.Base.General.CustomAttributes.TooltipAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public TooltipAttribute(string value);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
}
public class Xpand.Persistent.Base.General.CustomFunctions.EvaluateCSharpOperator : object {
    public List`1<string> Usings;
    public static string OperatorName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EvaluateCSharpOperator <Instance>k__BackingField;
    public static EvaluateCSharpOperator Instance { get; }
    public string Name { get; }
    private static EvaluateCSharpOperator();
    [CompilerGeneratedAttribute]
public static EvaluateCSharpOperator get_Instance();
    public sealed virtual Type ResultType(Type[] operands);
    public sealed virtual object Evaluate(Object[] operands);
    public sealed virtual string get_Name();
}
public class Xpand.Persistent.Base.General.CustomFunctions.ModelValueOperator : object {
    public static string OperatorName;
    private static ModelValueOperator _instance;
    public static ModelValueOperator Instance { get; }
    public string Name { get; }
    private static ModelValueOperator();
    public static ModelValueOperator get_Instance();
    public sealed virtual string get_Name();
    public sealed virtual object Evaluate(Object[] operands);
    public sealed virtual Type ResultType(Type[] operands);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.CustomShowNavigationItemEventArgsExtensions : object {
    [ExtensionAttribute]
public static bool FitToObjectType(CustomShowNavigationItemEventArgs args, XafApplication application, Type objectType);
}
internal class Xpand.Persistent.Base.General.DataSetDataStore : DataSetDataStore {
    private TypeHelper _typeHelper;
    private SelectStatement _selectStatement;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private XPClassInfo <ObjectClassInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITypeInfo <DynamicTypeInfo>k__BackingField;
    public XPClassInfo ObjectClassInfo { get; public set; }
    public ITypeInfo DynamicTypeInfo { get; public set; }
    public SelectStatement SelectStatement { get; }
    [CompilerGeneratedAttribute]
public XPClassInfo get_ObjectClassInfo();
    [CompilerGeneratedAttribute]
public void set_ObjectClassInfo(XPClassInfo value);
    [CompilerGeneratedAttribute]
public ITypeInfo get_DynamicTypeInfo();
    [CompilerGeneratedAttribute]
public void set_DynamicTypeInfo(ITypeInfo value);
    public SelectStatement get_SelectStatement();
    public virtual SelectedData SelectData(SelectStatement[] selects);
    private string GetColumnName(IMemberInfo info, ReferenceInfoAttribute referenceInfoAttribute);
    private CriteriaOperator CreateOperand(IMemberInfo memberInfo, SelectStatement selectStatement);
    private string GetAlias(ReferenceInfoAttribute referenceInfoAttribute, SelectStatement selectStatement);
}
[AttributeUsageAttribute("1")]
public class Xpand.Persistent.Base.General.DataStoreAttribute : DataStoreAttribute {
    private static Dictionary`2<string, Type> Dictionary;
    public DataStoreAttribute(Type nameSpaceType, string dataStoreName);
    public DataStoreAttribute(Type nameSpaceType, string dataStoreName, bool isLegacy);
    public DataStoreAttribute(string connectionString, string nameSpaceType);
    public DataStoreAttribute(string connectionString, string nameSpaceType, bool isLegacy);
    private static DataStoreAttribute();
    private static Type FindType(string nameSpaceType);
}
public class Xpand.Persistent.Base.General.DataStoreProvider : object {
    private DataStoreProxy _proxy;
    private string _connectionString;
    public string ConnectionString { get; public set; }
    public XPDictionary XPDictionary { get; }
    public DataStoreProxy Proxy { get; }
    public DataStoreProvider(string connectionString);
    public DataStoreProvider(IDataStore dataStore);
    public sealed virtual IDataStore CreateSchemaCheckingStore(IDisposable[]& disposableObjects);
    public sealed virtual string get_ConnectionString();
    public void set_ConnectionString(string value);
    public sealed virtual IDataStore CreateWorkingStore(IDisposable[]& disposableObjects);
    public virtual IDataStore CreateUpdatingStore(bool allowUpdateSchema, IDisposable[]& disposableObjects);
    public XPDictionary get_XPDictionary();
    public virtual DataStoreProxy get_Proxy();
}
public class Xpand.Persistent.Base.General.DynamicSecuritySystemObjects : object {
    private XafApplication _application;
    public DynamicSecuritySystemObjects(XafApplication application);
    public List`1<XPMemberInfo> BuildRole(Type otherPartMember);
    public List`1<XPMemberInfo> BuildRole(Type otherPartMember, string association, string propertyName, string otherPartPropertyName, bool visibleInDetailView);
    private static string GetRoleAssociation(string association, ITypeInfo typeInfo);
    private bool IsValidType(Type typeToCreateOn);
    private bool IsValidDataLayer();
    private bool IsXpoType(Type typeToCreateOn);
    public List`1<XPMemberInfo> BuildUser(Type otherPartMember);
    public List`1<XPMemberInfo> BuildUser(Type otherPartMember, string association, string propertyName, string otherPartPropertyName);
    private static string GetUserAssociation(string association, Type userType);
    public void HideInDetailView(List`1<XPMemberInfo> xpMemberInfos, string name);
    private void HideMemberInDetailView(XPMemberInfo xpMemberInfo);
    public void HideRoleInDetailView(List`1<XPMemberInfo> xpMemberInfos);
}
public class Xpand.Persistent.Base.General.EasyTestModule : ModuleBase {
    protected virtual IEnumerable`1<Type> GetDeclaredControllerTypes();
}
public class Xpand.Persistent.Base.General.EditorAliases : ValueType {
    public static string ProgressBarEditor;
    public static string FileBrowserEditor;
    public static string ReleasedSequence;
    public static string ChooseFromList;
    public static string TokenList;
    public static string DashboardXMLEditor;
    public static string XpandTreeListEditor;
    public static string HyperLinkPropertyEditor;
    public static string CriteriaPropertyEditorEx;
    [ObsoleteAttribute("Remove this alias to default to Xpand.ExpressApp.Win.PropertyEditors.EnumPropertyEditor instead", "True")]
public static string FilterableEnumPropertyEditor;
    public static string EnumPropertyEditor;
    public static string ASPxSearchLookupPropertyEditor;
    public static string FastSearchPropertyEditor;
    public static string RichEditRftPropertyEditor;
    public static string NullAbleBooleanPropertyEditor;
    public static string StringPropertyEditor;
    public static string StringLookupPropertyEditor;
    public static string TimePropertyEditor;
    public static string CSCodePropertyEditor;
    public static string LabelPropertyEditor;
}
public class Xpand.Persistent.Base.General.ExtendingModelInterfacesArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ModelInterfaceExtenders <Extenders>k__BackingField;
    public ModelInterfaceExtenders Extenders { get; }
    public ExtendingModelInterfacesArgs(ModelInterfaceExtenders extenders);
    [CompilerGeneratedAttribute]
public ModelInterfaceExtenders get_Extenders();
}
public class Xpand.Persistent.Base.General.FastReflectPropertyDescriptor : PropertyDescriptor {
    private PropertyInfo _propertyInfo;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public FastReflectPropertyDescriptor(PropertyInfo propertyInfo);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual string ToString();
    public virtual Type get_PropertyType();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.FileDataExtensions : object {
    [ExtensionAttribute]
public static Byte[] GetBytes(IFileData fileData);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.FrameExtensions : object {
    [ExtensionAttribute]
public static void CleanDetailView(Frame frame);
    [ExtensionAttribute]
public static IEnumerable`1<TAction> Actions(Frame frame, IEnumerable`1<IModelNode> items);
    [ExtensionAttribute]
public static bool Available(ActionBase a);
    [ExtensionAttribute]
public static IEnumerable`1<ActionBase> Available(IEnumerable`1<ActionBase> actionBases);
    [ExtensionAttribute]
public static IEnumerable`1<ActionBase> Actions(Frame frame);
    [ExtensionAttribute]
public static IEnumerable`1<T> Actions(Frame frame);
    [ExtensionAttribute]
public static void OnViewChanged(Frame frame);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetControllers(Frame frame);
    [ExtensionAttribute]
public static void GetController(Frame frame, Action`1<T> withController);
    [ExtensionAttribute]
public static void GetController(Frame frame, Type controllerType, Action`1<Controller> action);
    [ExtensionAttribute]
public static Controller GetController(Frame frame, Type controllerType);
}
public class Xpand.Persistent.Base.General.GeneratorUpdaterEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ModelNodesGeneratorUpdaters <Updaters>k__BackingField;
    public ModelNodesGeneratorUpdaters Updaters { get; }
    public GeneratorUpdaterEventArgs(ModelNodesGeneratorUpdaters updaters);
    [CompilerGeneratedAttribute]
public ModelNodesGeneratorUpdaters get_Updaters();
}
public class Xpand.Persistent.Base.General.HideFromNewMenuAttribute : Attribute {
}
public interface Xpand.Persistent.Base.General.IChooseFromListCollectionEditor {
}
[ObsoleteAttribute("not used", "True")]
public interface Xpand.Persistent.Base.General.IConfirmationRequired {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfirmationRequired(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfirmationRequired(CancelEventHandler value);
}
public interface Xpand.Persistent.Base.General.IDataBound {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataBound(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataBound(EventHandler`1<EventArgs> value);
}
public interface Xpand.Persistent.Base.General.IDataSourceSelectionChanged {
    public IList SelectedObjects { get; public set; }
    public abstract virtual IList get_SelectedObjects();
    public abstract virtual void set_SelectedObjects(IList value);
}
public interface Xpand.Persistent.Base.General.IDateRange {
    public string Name { get; public set; }
    public DateTime StartPoint { get; public set; }
    public DateTime EndPoint { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual DateTime get_StartPoint();
    public abstract virtual void set_StartPoint(DateTime value);
    public abstract virtual DateTime get_EndPoint();
    public abstract virtual void set_EndPoint(DateTime value);
}
public interface Xpand.Persistent.Base.General.IFastManyToMany {
}
public interface Xpand.Persistent.Base.General.IFileChooser {
    public IFileData FileData { get; public set; }
    public ErrorHandling ErrorHandling { get; public set; }
    public abstract virtual IFileData get_FileData();
    public abstract virtual void set_FileData(IFileData value);
    public abstract virtual ErrorHandling get_ErrorHandling();
    public abstract virtual void set_ErrorHandling(ErrorHandling value);
}
public interface Xpand.Persistent.Base.General.ILayoutManager {
}
public interface Xpand.Persistent.Base.General.IMasterDetailRuleInfo {
    public IModelListView ChildListView { get; public set; }
    public IModelMember CollectionMember { get; public set; }
    public ITypeInfo TypeInfo { get; public set; }
    public CriteriaOperator Criteria { get; }
    public abstract virtual IModelListView get_ChildListView();
    public abstract virtual void set_ChildListView(IModelListView value);
    public abstract virtual IModelMember get_CollectionMember();
    public abstract virtual void set_CollectionMember(IModelMember value);
    public abstract virtual ITypeInfo get_TypeInfo();
    public abstract virtual void set_TypeInfo(ITypeInfo value);
    public abstract virtual CriteriaOperator get_Criteria();
}
public interface Xpand.Persistent.Base.General.IObjectSpaceHolder {
    public IObjectSpace ObjectSpace { get; }
    public abstract virtual IObjectSpace get_ObjectSpace();
}
public interface Xpand.Persistent.Base.General.IObsoleteTreeNode {
    public bool Obsolete { get; public set; }
    public abstract virtual bool get_Obsolete();
    public abstract virtual void set_Obsolete(bool value);
}
public interface Xpand.Persistent.Base.General.IPictureItem {
    public string ID { get; }
    public Image Image { get; }
    public string ImagePath { get; }
    public abstract virtual string get_ID();
    public abstract virtual Image get_Image();
    public abstract virtual string get_ImagePath();
}
public interface Xpand.Persistent.Base.General.IPropertyEditor {
    public object ControlValue { get; }
    public IMemberInfo MemberInfo { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueRead(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueRead(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ControlCreated(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ControlCreated(EventHandler`1<EventArgs> value);
    public abstract virtual void SetValue(string value);
    public abstract virtual object get_ControlValue();
    public abstract virtual IMemberInfo get_MemberInfo();
}
public interface Xpand.Persistent.Base.General.ISelectionCriteria {
    public CriteriaOperator SelectionCriteria { get; public set; }
    public abstract virtual void AddSelectedObjects(IEnumerable`1<object> objects);
    public abstract virtual CriteriaOperator get_SelectionCriteria();
    public abstract virtual void set_SelectionCriteria(CriteriaOperator value);
}
[ObsoleteAttribute("", "True")]
public interface Xpand.Persistent.Base.General.ISettingsStorage {
    public abstract virtual SettingsStorage CreateLogonParameterStoreCore();
}
public interface Xpand.Persistent.Base.General.IStringLookupPropertyEditor {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemsCalculating(EventHandler`1<HandledEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemsCalculating(EventHandler`1<HandledEventArgs> value);
}
public interface Xpand.Persistent.Base.General.ISupportValueReading {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueReading(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueReading(EventHandler value);
}
public interface Xpand.Persistent.Base.General.ITestXafApplication {
}
public interface Xpand.Persistent.Base.General.IWebApplication {
    public abstract virtual void LogOff();
}
public interface Xpand.Persistent.Base.General.IWinApplication {
    public abstract virtual void LogOff();
}
public interface Xpand.Persistent.Base.General.IWindowCreating {
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowCreating(EventHandler`1<WindowCreatingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowCreating(EventHandler`1<WindowCreatingEventArgs> value);
}
[ObsoleteAttribute("not used", "True")]
public interface Xpand.Persistent.Base.General.IWriteSecuredLogonParameters {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomWriteSecuredLogonParameters(HandledEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomWriteSecuredLogonParameters(HandledEventHandler value);
}
public interface Xpand.Persistent.Base.General.IXafApplication {
    public string ModelAssemblyFilePath { get; }
    public abstract virtual string get_ModelAssemblyFilePath();
    public abstract virtual void WriteLastLogonParameters(DetailView view, object logonObject);
}
public interface Xpand.Persistent.Base.General.IXpandLogonParameters {
    public bool RememberMe { get; public set; }
    public SettingsStorage Storage { get; }
    public abstract virtual bool get_RememberMe();
    public abstract virtual void set_RememberMe(bool value);
    public abstract virtual SettingsStorage get_Storage();
}
public interface Xpand.Persistent.Base.General.IXpandModuleBase {
    public ModuleTypeList RequiredModuleTypes { get; }
    public XafApplication Application { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomAddGeneratorUpdaters(EventHandler`1<GeneratorUpdaterEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomAddGeneratorUpdaters(EventHandler`1<GeneratorUpdaterEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ApplicationModulesManagerSetup(EventHandler`1<ApplicationModulesManagerSetupArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ApplicationModulesManagerSetup(EventHandler`1<ApplicationModulesManagerSetupArgs> value);
    public abstract virtual ModuleTypeList get_RequiredModuleTypes();
    public abstract virtual XafApplication get_Application();
}
public interface Xpand.Persistent.Base.General.IXpandObjectSpace {
    public abstract virtual object FindObject(Type objectType, CriteriaOperator criteria, bool inTransaction, bool selectDeleted);
}
public interface Xpand.Persistent.Base.General.IXpandObjectSpaceProvider {
    public IDataLayer WorkingDataLayer { get; }
    public IXpoDataStoreProxy DataStoreProvider { get; public set; }
    public abstract virtual IDataLayer get_WorkingDataLayer();
    public abstract virtual IXpoDataStoreProxy get_DataStoreProvider();
    public abstract virtual void set_DataStoreProvider(IXpoDataStoreProxy value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreatingWorkingDataLayer(EventHandler`1<CreatingWorkingDataLayerArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreatingWorkingDataLayer(EventHandler`1<CreatingWorkingDataLayerArgs> value);
}
public interface Xpand.Persistent.Base.General.IXpoDataStoreProxy {
    public DataStoreProxy Proxy { get; }
    public abstract virtual DataStoreProxy get_Proxy();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ListViewExtensions : object {
    [ExtensionAttribute]
public static CriteriaOperator GetTotalCriteria(ListView xpandListView);
    [ExtensionAttribute]
public static bool IsLookup(ListView listView, Frame frame);
    [ExtensionAttribute]
public static bool IsNested(ListView xpandListView, Frame frame);
}
public class Xpand.Persistent.Base.General.MasterDetailRuleInfo : object {
    private CriteriaOperator _criteria;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelListView <ChildListView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelMember <CollectionMember>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITypeInfo <TypeInfo>k__BackingField;
    public IModelListView ChildListView { get; public set; }
    public IModelMember CollectionMember { get; public set; }
    public ITypeInfo TypeInfo { get; public set; }
    public CriteriaOperator Criteria { get; }
    public MasterDetailRuleInfo(IModelListView childListView, IModelMember collectionMember, ITypeInfo typeInfo, CriteriaOperator criteria);
    [CompilerGeneratedAttribute]
public sealed virtual IModelListView get_ChildListView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChildListView(IModelListView value);
    [CompilerGeneratedAttribute]
public sealed virtual IModelMember get_CollectionMember();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CollectionMember(IModelMember value);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeInfo get_TypeInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TypeInfo(ITypeInfo value);
    public sealed virtual CriteriaOperator get_Criteria();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static XPMemberInfo GetXPMemberInfo(IMemberInfo memberInfo);
}
public class Xpand.Persistent.Base.General.Model.AttributeCategoryNameProvider : object {
    public static string ModelMembers;
    public static string Xpand;
    public static string XpandNavigation;
    public static string Search;
    public static string LogicData;
    public static string LogicBehavior;
}
public enum Xpand.Persistent.Base.General.Model.ClientSideSecurity : Enum {
    public int value__;
    public static ClientSideSecurity UIlevel;
    public static ClientSideSecurity IntegratedMode;
}
public class Xpand.Persistent.Base.General.Model.ColumnChooserListViewVisibilityCalulator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
[ExtensionAttribute]
[DomainLogicAttribute("Xpand.Persistent.Base.General.Model.IModelClassDefaultCriteria")]
public static class Xpand.Persistent.Base.General.Model.DefaultCriteriaDomainLogic : object {
    public static string Get_DefaultCriteria(IModelClassDefaultCriteria modelClassDefaultCriteria);
    [ExtensionAttribute]
public static IMemberInfo GetDefaultMember(ITypeInfo typeInfo);
    private static IMemberInfo GetDefaultMember(ITypeInfo typeInfo, Func`2<IMemberInfo, bool> condition);
}
public interface Xpand.Persistent.Base.General.Model.IColumnCellFilterUser {
}
public interface Xpand.Persistent.Base.General.Model.IColumnChooserListView {
    [CategoryAttribute("eXpand")]
[ModelValueCalculatorAttribute("((IModelMemberColumnChooserListView) ModelMember)", "ColumnChooserListView")]
[DataSourcePropertyAttribute("Application.Views", "Mono.Cecil.CustomAttributeArgument[]")]
[DataSourceCriteriaAttribute("(AsObjectView Is Not Null) And (AsObjectView.ModelClass Is Not Null) And ('@This.ModelMember.ModelClass' = AsObjectView.ModelClass)")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.General.Model.ColumnChooserListViewVisibilityCalulator")]
[ModelReadOnlyAttribute("Xpand.Persistent.Base.General.Model.ModelColumnChooserReadOnlyCalculator")]
public IModelListView ColumnChooserListView { get; public set; }
    public abstract virtual IModelListView get_ColumnChooserListView();
    public abstract virtual void set_ColumnChooserListView(IModelListView value);
}
public interface Xpand.Persistent.Base.General.Model.IModelApplicationModule {
    [ModelPersistentNameAttribute("Modules")]
public IModelModules ModulesList { get; }
    public abstract virtual IModelModules get_ModulesList();
}
public interface Xpand.Persistent.Base.General.Model.IModelApplicationReadonlyParameters {
    public IModelReadOnlyParameters ReadOnlyParameters { get; }
    public abstract virtual IModelReadOnlyParameters get_ReadOnlyParameters();
}
public interface Xpand.Persistent.Base.General.Model.IModelApplicationViews {
    [BrowsableAttribute("False")]
public IModelList`1<IModelListView> ListViews { get; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelDetailView> DetailViews { get; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelDashboardView> DashboardViews { get; }
    public abstract virtual IModelList`1<IModelListView> get_ListViews();
    public abstract virtual IModelList`1<IModelDetailView> get_DetailViews();
    public abstract virtual IModelList`1<IModelDashboardView> get_DashboardViews();
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Model.IModelClassDefaultCriteria {
    [RequiredAttribute]
[CategoryAttribute("eXpand")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.CriteriaModelEditorControl, DevExpress.ExpressApp.Win.v24.1, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[CriteriaOptionsAttribute("TypeInfo")]
public string DefaultCriteria { get; public set; }
    public abstract virtual string get_DefaultCriteria();
    public abstract virtual void set_DefaultCriteria(string value);
}
[ModelInterfaceImplementorAttribute("Xpand.Persistent.Base.General.Model.IModelMemberCellFilter", "ModelMember")]
public interface Xpand.Persistent.Base.General.Model.IModelColumnCellFilter {
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Model.IModelColumnDetailViews {
    [BrowsableAttribute("False")]
public IModelList`1<IModelDetailView> DetailViews { get; }
    public abstract virtual IModelList`1<IModelDetailView> get_DetailViews();
}
public interface Xpand.Persistent.Base.General.Model.IModelMemberCellFilter {
    [CategoryAttribute("eXpand.Search")]
public bool CellFilter { get; public set; }
    public abstract virtual bool get_CellFilter();
    public abstract virtual void set_CellFilter(bool value);
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Model.IModelMemberDataStoreForeignKeyCreated {
    [BrowsableAttribute("False")]
public bool DataStoreForeignKeyCreated { get; public set; }
    public abstract virtual bool get_DataStoreForeignKeyCreated();
    public abstract virtual void set_DataStoreForeignKeyCreated(bool value);
}
[KeyPropertyAttribute("Name")]
[DisplayPropertyAttribute("Name")]
public interface Xpand.Persistent.Base.General.Model.IModelModule {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.General.Model.ModuleNodesGenerator")]
public interface Xpand.Persistent.Base.General.Model.IModelModules {
}
public interface Xpand.Persistent.Base.General.Model.IModelNodePath {
    [CategoryAttribute("eXpand")]
public string PathToHere { get; }
    public abstract virtual string get_PathToHere();
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.General.Model.IModelOptionsClientSideSecurity {
    [CategoryAttribute("eXpand")]
[DescriptionAttribute("When SecurityStrategyComplex is used defined the type of security for eXpand objectspaceprovider")]
public Nullable`1<ClientSideSecurity> ClientSideSecurity { get; public set; }
    public abstract virtual Nullable`1<ClientSideSecurity> get_ClientSideSecurity();
    public abstract virtual void set_ClientSideSecurity(Nullable`1<ClientSideSecurity> value);
}
public interface Xpand.Persistent.Base.General.Model.IModelReadOnlyParameter {
    [TypeConverterAttribute("DevExpress.ExpressApp.Model.Core.StringToTypeConverter")]
[BrowsableAttribute("False")]
public Type Type { get; public set; }
    public abstract virtual Type get_Type();
    public abstract virtual void set_Type(Type value);
}
[ModelReadOnlyAttribute("DevExpress.ExpressApp.Model.Core.ModelReadOnlyCalculator")]
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.General.Model.ModelReadOnlyParametersNodesGenerator")]
public interface Xpand.Persistent.Base.General.Model.IModelReadOnlyParameters {
}
public interface Xpand.Persistent.Base.General.Model.ITreeUser {
}
[DomainLogicAttribute("Xpand.Persistent.Base.General.Model.IModelApplicationViews")]
public class Xpand.Persistent.Base.General.Model.ModelApplicationViewsDomainLogic : object {
    public static string ListViews;
    public static string DetailViews;
    public static string DashboardViews;
    public static IModelList`1<IModelListView> Get_ListViews(IModelApplicationViews modelClassFullTextSearch);
    private static IModelList`1<T> GetViews(IModelApplicationViews modelClassFullTextSearch);
    public static IModelList`1<IModelDetailView> Get_DetailViews(IModelApplicationViews modelClassFullTextSearch);
    public static IModelList`1<IModelDashboardView> Get_DashboardViews(IModelApplicationViews modelClassFullTextSearch);
}
public class Xpand.Persistent.Base.General.Model.ModelColumnChooserReadOnlyCalculator : object {
    public sealed virtual bool IsReadOnly(IModelNode node, string propertyName);
    public sealed virtual bool IsReadOnly(IModelNode node, IModelNode childNode);
}
[DomainLogicAttribute("Xpand.Persistent.Base.General.Model.IModelColumnDetailViews")]
public class Xpand.Persistent.Base.General.Model.ModelColumnDetailViewsDomainLogic : object {
    public static string DetailViews;
    public static IModelList`1<IModelDetailView> Get_DetailViews(IModelColumnDetailViews detailViews);
}
[DomainLogicAttribute("Xpand.Persistent.Base.General.Model.IModelNodePath")]
public class Xpand.Persistent.Base.General.Model.ModelNodePathDomainLogic : object {
    public string Get_PathToHere(IModelNodePath modelNodePath);
}
public class Xpand.Persistent.Base.General.Model.ModelReadOnlyParametersNodesGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.General.Model.ModuleNodesGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.General.Model.Options.GridListEditorVisibilityCalculator : EditorTypeVisibilityCalculator`1<IModelListView> {
    public virtual bool IsVisible(IModelNode node, string propertyName);
    private static bool IsVisibleCore(IModelNode node, string propertyName, GridListEditorVisibilityCalculatorHelper calculatorHelper);
}
public abstract class Xpand.Persistent.Base.General.Model.Options.GridListEditorVisibilityCalculatorHelper : EditorTypeVisibilityCalculator`1<IModelListView> {
}
public class Xpand.Persistent.Base.General.Model.RequiredCalculators.NotRequiredCalculator : object {
    public sealed virtual bool IsRequired(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.ActionVisibilityCalculator`1 : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.AlwaysEditableVisibilityCalculator : object {
    public sealed virtual bool IsReadOnly(IModelNode node, string propertyName);
    public sealed virtual bool IsReadOnly(IModelNode node, IModelNode childNode);
    public bool IsReadOnly(IModelNode node);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.AlwaysVisibleCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public abstract class Xpand.Persistent.Base.General.Model.VisibilityCalculators.EditorTypeVisibilityCalculator`1 : object {
    protected Type EditorType(IModelNode node);
    public abstract virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.EditorTypeVisibilityCalculator`2 : EditorTypeVisibilityCalculator`1<TParentNode> {
    public virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.NotVisibileCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.RuntimeOnlyCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.WebOnlyVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.General.Model.VisibilityCalculators.WinOnlyVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ModelApplicationBaseExtensions : object {
    [ExtensionAttribute]
public static Platform GetPlatform(IModelApplication application);
    [ExtensionAttribute]
public static Platform GetPlatform(ModelApplicationBase applicationBase);
    [ExtensionAttribute]
public static void RemoveLayer(ModelApplicationBase application);
    [ExtensionAttribute]
public static void RemoveLayer(ModelApplicationBase application, string id);
    [ExtensionAttribute]
public static void ReplaceLayer(ModelApplicationBase application, ModelApplicationBase layer);
    private static void RefreshLayers(ModelApplicationBase application, Func`2<ModelApplicationBase, ModelApplicationBase> func);
    [ExtensionAttribute]
public static void AddLayer(ModelApplicationBase application, ModelNode layer);
    [ExtensionAttribute]
public static void InsertLayer(ModelApplicationBase application, int index, ModelApplicationBase layer);
    [ExtensionAttribute]
public static void AddLayerBeforeLast(ModelApplicationBase application, ModelApplicationBase layer);
    [ExtensionAttribute]
public static ModelApplicationBase GetLayer(ModelApplicationBase modelApplicationBase, string id);
    [ExtensionAttribute]
public static ModelApplicationBase GetLayer(ModelApplicationBase modelApplicationBase, int index);
    [ExtensionAttribute]
public static List`1<ModelNodeWrapper> GetLayers(ModelApplicationBase modelApplicationBase);
    [ExtensionAttribute]
public static void ReInitLayers(ModelApplicationBase modelApplicationBase);
    [ExtensionAttribute]
public static bool HasAspect(ModelApplicationBase modelApplicationBase, string aspectName);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ModelNodeExtensions : object {
    [IteratorStateMachineAttribute("Xpand.Persistent.Base.General.ModelNodeExtensions/<GetModelPropertyEditors>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IModelPropertyEditor> GetModelPropertyEditors(IModelDetailView modelDetailView);
    [ExtensionAttribute]
public static IModelList`1<IModelClass> ModelClasses(IModelNode modelNode, Type assignableFromType);
    [ExtensionAttribute]
public static void UpdateValue(T targetNode, IModelNode sourceNode, Expression`1[] expressions);
    [ExtensionAttribute]
public static void ClearValue(TNode node, Expression`1<Func`2<TNode, object>> expression);
    [ExtensionAttribute]
public static ITypeInfo GetGenericListArgument(IModelNode nodeByPath);
    [ExtensionAttribute]
public static IEnumerable`1<IModelChoiceActionItem> ActionChoiceItems(IModelNode modelNode, Frame frame);
    [ExtensionAttribute]
public static ActionBase ToAction(IModelAction modelAction);
    [ExtensionAttribute]
public static ActionBase ToAction(IModelAction modelAction, Frame frame);
    private static ExpressionEvaluator GetExpressionEvaluator(IModelNode dataSourceNode, CriteriaOperator criteriaOperator);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetNodes(IEnumerable`1<T> modelNodes, string criteria);
    [ExtensionAttribute]
public static XPClassInfo QueryXPClassInfo(IModelClass modelClass);
    [ExtensionAttribute]
public static XPMemberInfo GetXPMemberInfo(IModelMember modelMember);
    [ExtensionAttribute]
public static TNode GetParent(IModelNode modelNode);
    [ExtensionAttribute]
public static void Undo(IModelNode modelNode);
    [ExtensionAttribute]
public static IModelNode FindNodeByPath(IModelNode modelNode, string nodePath);
    [ExtensionAttribute]
public static string Path(IModelNode modelNode);
    [ExtensionAttribute]
public static string Xml(IModelNode modelNode);
    [ExtensionAttribute]
public static object GetValue(IModelNode modelNode, Expression`1<Func`2<T, object>> property);
    [ExtensionAttribute]
public static object GetValue(IModelNode modelNode, string propertyName);
    [ExtensionAttribute]
public static object GetValue(IModelNode modelNode, string propertyName, Type propertyType);
    [ExtensionAttribute]
public static void SetChangedValue(IModelNode modelNode, string propertyName, string value);
    [ExtensionAttribute]
public static object ChangedValue(ModelValueInfo modelValueInfo, object value, Type destinationType);
    [ExtensionAttribute]
public static bool IsRemovedNode(IModelNode modelNode);
    [ExtensionAttribute]
public static bool IsNewNode(IModelNode modelNode);
    [ExtensionAttribute]
public static bool HasValue(IModelNode modelNode, Type[] interfacesToSearch);
    [ExtensionAttribute]
public static string Id(IModelNode modelNode);
    [ExtensionAttribute]
public static IEnumerable`1<IModelLayoutViewItem> ViewItems(IEnumerable`1<IModelViewLayoutElement> modelViewLayout, IModelMemberViewItem memberViewItem);
}
public class Xpand.Persistent.Base.General.ModelNodeWrapper : object {
    private ModelNode _modelNode;
    public ModelNode ModelNode { get; }
    public ModelNodeWrapper(ModelNode modelNode);
    public ModelNode get_ModelNode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ModelXmlReaderExtensions : object {
    [ExtensionAttribute]
public static void ReadFromModel(ModelXmlReader modelXmlReader, IModelNode modelNode, IModelNode readFrom);
    [ExtensionAttribute]
public static void ReadFromModel(ModelXmlReader modelXmlReader, IModelNode modelNode, IModelNode readFrom, Func`2<string, bool> aspectNamePredicate);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ModuleActivator : object {
    private static Destructor Finalise;
    private static string _path;
    private static Dictionary`2<string, Assembly> LoadedAssemblies;
    private static ModuleActivator();
    [ExtensionAttribute]
public static void AddModules(ModuleBase moduleBase, string xpandDllPath);
    public static IEnumerable`1<ModuleBase> CreateInstances(string path, string tabNameFilter, string searchPattern);
    [IteratorStateMachineAttribute("Xpand.Persistent.Base.General.ModuleActivator/<GetModuleTypes>d__6")]
private static IEnumerable`1<Type> GetModuleTypes(string filter, string searchPattern);
    private static Assembly CurrentDomainOnAssemblyResolve(object sender, ResolveEventArgs args);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ModuleBaseExtensions : object {
    [ExtensionAttribute]
public static string GetConnectionString(ModuleBase moduleBase);
}
public enum Xpand.Persistent.Base.General.ModuleType : Enum {
    public int value__;
    public static ModuleType None;
    public static ModuleType Agnostic;
    public static ModuleType Win;
    public static ModuleType Web;
    public static ModuleType Mobile;
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ModuleUpdaterExtensions : object {
    [ExtensionAttribute]
public static string XpandRootPath(ModuleUpdater moduleUpdater);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.MonoCecilExtensions : object {
    private static ConcurrentDictionary`2<Assembly, AssemblyDefinition> AssemblyDefinitions;
    private static MonoCecilExtensions();
    [ExtensionAttribute]
public static Assembly FindAssembly(AppDomain appDomain, AssemblyDefinition assemblyDefinition);
    [ExtensionAttribute]
public static Type FindType(AppDomain appDomain, TypeDefinition typeDefinition);
    [ExtensionAttribute]
public static Assembly FindAssembly(AppDomain appDomain, TypeDefinition typeDefinition);
    [ExtensionAttribute]
public static IEnumerable`1<AssemblyDefinition> ToAssemblyDefinition(IEnumerable`1<Assembly> assemblies);
}
public class Xpand.Persistent.Base.General.MultiDataStoreProvider : DataStoreProvider {
    private MultiDataStoreProxy _multiDataStoreProxy;
    public DataStoreProxy Proxy { get; }
    public MultiDataStoreProvider(string connectionString);
    public MultiDataStoreProvider(IDataStore connectionString);
    public virtual IDataStore CreateUpdatingStore(bool allowUpdateSchema, IDisposable[]& disposableObjects);
    public virtual DataStoreProxy get_Proxy();
}
public class Xpand.Persistent.Base.General.MultiDataStoreProxy : DataStoreProxy {
    private XpoObjectHacker _xpoObjectHacker;
    private DataStoreManager _dataStoreManager;
    public DataStoreManager DataStoreManager { get; }
    public MultiDataStoreProxy(IDataStore dataStore, string connectionString, XPDictionary dictionary);
    public MultiDataStoreProxy(string connectionString, AutoCreateOption autoCreateOption);
    public MultiDataStoreProxy(string connectionString, XPDictionary dictionary, AutoCreateOption option);
    public virtual void Init();
    public DataStoreManager get_DataStoreManager();
    private void FillDictionaries(XPDictionary xpDictionary);
    public virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    private ModificationResult ModifyXPObjectTable(ModificationStatement[] dmlStatements, InsertStatement insertStatement, ModificationResult modificationResult);
    private bool TypeExists(IDataStoreManagerDataLayer dataLayer, InsertStatement stm1);
    private bool IsMainLayer(IDbConnection connection);
    public virtual SelectedData SelectData(SelectStatement[] selects);
    public virtual UpdateSchemaResult UpdateSchema(bool dontCreateIfFirstTableNotExist, DBTable[] tables);
    private void RunExtraUpdaters(DBTable[] tables, ConnectionProviderSql store, bool doNotCreateIfFirstTableNotExist);
    [CompilerGeneratedAttribute]
private SelectedData <SelectData>b__13_0(SelectStatement stm);
}
public class Xpand.Persistent.Base.General.NestedXpandObjectSpace : XPNestedObjectSpace {
    public NestedXpandObjectSpace(IObjectSpace parentObjectSpace);
}
[AttributeUsageAttribute("384")]
public class Xpand.Persistent.Base.General.NewObjectCollectCreatableItemTypesDataSourceAttribute : Attribute {
    private string propertyName;
    public string PropertyName { get; }
    public NewObjectCollectCreatableItemTypesDataSourceAttribute(string propertyName);
    public string get_PropertyName();
}
public class Xpand.Persistent.Base.General.NewObjectCreateGroupAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <GroupPath>k__BackingField;
    public string GroupPath { get; }
    public NewObjectCreateGroupAttribute(string groupPath);
    [CompilerGeneratedAttribute]
public string get_GroupPath();
}
public class Xpand.Persistent.Base.General.ObjectChangedEventArgs`1 : ObjectChangedEventArgs {
    public TObject Object { get; }
    public ObjectChangedEventArgs`1(object theObject, string propertyName, object oldValue, object newValue);
    public ObjectChangedEventArgs`1(ObjectChangedEventArgs objectChangedEventArgs);
    public TObject get_Object();
}
public class Xpand.Persistent.Base.General.ObjectManipulatingEventArgs`1 : ObjectManipulatingEventArgs {
    public TObject Object { get; }
    public ObjectManipulatingEventArgs`1(TObject theObject);
    public TObject get_Object();
}
public abstract class Xpand.Persistent.Base.General.ObjectObserver`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ObjectChangedEventArgs`1<TObject>> ObjectChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ObjectsManipulatingEventArgs`1<TObject>> ObjectDeleted;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ObjectsManipulatingEventArgs`1<TObject>> ObjectDeleting;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ObjectManipulatingEventArgs`1<TObject>> ObjectSaved;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ObjectManipulatingEventArgs`1<TObject>> ObjectSaving;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectSpace <ObjectSpace>k__BackingField;
    public IObjectSpace ObjectSpace { get; }
    protected ObjectObserver`1(IObjectSpace objectSpace);
    [CompilerGeneratedAttribute]
public void add_ObjectChanged(EventHandler`1<ObjectChangedEventArgs`1<TObject>> value);
    [CompilerGeneratedAttribute]
public void remove_ObjectChanged(EventHandler`1<ObjectChangedEventArgs`1<TObject>> value);
    protected virtual void OnChanged(ObjectChangedEventArgs`1<TObject> e);
    [CompilerGeneratedAttribute]
public void add_ObjectDeleted(EventHandler`1<ObjectsManipulatingEventArgs`1<TObject>> value);
    [CompilerGeneratedAttribute]
public void remove_ObjectDeleted(EventHandler`1<ObjectsManipulatingEventArgs`1<TObject>> value);
    protected virtual void OnDeleted(ObjectsManipulatingEventArgs`1<TObject> e);
    [CompilerGeneratedAttribute]
public void add_ObjectDeleting(EventHandler`1<ObjectsManipulatingEventArgs`1<TObject>> value);
    [CompilerGeneratedAttribute]
public void remove_ObjectDeleting(EventHandler`1<ObjectsManipulatingEventArgs`1<TObject>> value);
    protected virtual void OnDeleting(ObjectsManipulatingEventArgs`1<TObject> e);
    [CompilerGeneratedAttribute]
public void add_ObjectSaved(EventHandler`1<ObjectManipulatingEventArgs`1<TObject>> value);
    [CompilerGeneratedAttribute]
public void remove_ObjectSaved(EventHandler`1<ObjectManipulatingEventArgs`1<TObject>> value);
    protected virtual void OnSaved(ObjectManipulatingEventArgs`1<TObject> e);
    [CompilerGeneratedAttribute]
public void add_ObjectSaving(EventHandler`1<ObjectManipulatingEventArgs`1<TObject>> value);
    [CompilerGeneratedAttribute]
public void remove_ObjectSaving(EventHandler`1<ObjectManipulatingEventArgs`1<TObject>> value);
    protected virtual void OnSaving(ObjectManipulatingEventArgs`1<TObject> e);
    private void ObjectSpaceOnDisposed(object sender, EventArgs eventArgs);
    private void ObjectSpaceOnCommitting(object sender, CancelEventArgs cancelEventArgs);
    protected virtual void OnCommiting(CancelEventArgs cancelEventArgs);
    [CompilerGeneratedAttribute]
public IObjectSpace get_ObjectSpace();
    private void ObjectSpaceOnObjectSaving(object sender, ObjectManipulatingEventArgs objectManipulatingEventArgs);
    private void ObjectSpaceOnObjectSaved(object sender, ObjectManipulatingEventArgs objectManipulatingEventArgs);
    private void ObjectSpaceOnObjectDeleting(object sender, ObjectsManipulatingEventArgs objectsManipulatingEventArgs);
    private void ObjectSpaceOnObjectDeleted(object sender, ObjectsManipulatingEventArgs objectsManipulatingEventArgs);
    private void ObjectSpaceOnObjectChanged(object sender, ObjectChangedEventArgs objectChangedEventArgs);
}
public class Xpand.Persistent.Base.General.ObjectsManipulatingEventArgs`1 : ObjectsManipulatingEventArgs {
    public IEnumerable`1<TObject> Objects { get; }
    public ObjectsManipulatingEventArgs`1(TObject theObject);
    public ObjectsManipulatingEventArgs`1(IEnumerable`1<TObject> objects);
    public IEnumerable`1<TObject> get_Objects();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ObjectSpaceExtensions : object {
    [ExtensionAttribute]
public static ConnectionProviderType GetProviderType(IObjectSpaceProvider provider);
    [ExtensionAttribute]
public static IObjectSpaceProvider FindProvider(IList`1<IObjectSpaceProvider> providers, Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void SetIsModified(IObjectSpace objectSpace, bool isModified);
    [ExtensionAttribute]
public static CriteriaOperator TransformExpression(IObjectSpace objectSpace, Expression`1<Func`2<T, bool>> expression);
    [ExtensionAttribute]
public static void RollbackSilent(IObjectSpace objectSpace);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Session Session(IObjectSpace objectSpace);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static UnitOfWork UnitOfWork(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static T GetObject(IObjectSpace objectSpace, Expression`1<Func`2<T, bool>> expression, bool intransaction);
    [ExtensionAttribute]
public static bool Contains(IObjectSpace objectSpace, Expression`1<Func`2<T, bool>> expression, bool intransaction);
    [ExtensionAttribute]
public static bool Contains(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static XPClassInfo FindXPClassInfo(IObjectSpace objectSpace, Type type);
    [ExtensionAttribute]
public static Type GetObjectKeyType(IObjectSpace objectSpace, Type objectType);
    [ExtensionAttribute]
public static void CreateForeignKey(IObjectSpace objectSpace, XPCustomMemberInfo customMemberInfo, bool throwUnableToCreateDBObjectException);
    [ExtensionAttribute]
public static void CreateColumn(IObjectSpace objectSpace, XPCustomMemberInfo customMemberInfo, bool throwUnableToCreateDBObjectException);
    private static void CreateDbObject(IObjectSpace objectSpace, Action`1<IDataStore> create);
    [ExtensionAttribute]
public static bool IsServerSide(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static IEnumerable`1<TClassType> GetNonDeletedObjectsToSave(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static IEnumerable`1<TClassType> GetDeletedObjectsToSave(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static IEnumerable`1<TClassType> GetNewObjectsToSave(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static IEnumerable`1<TClassType> GetObjectsToUpdate(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static IEnumerable`1<TClassType> QueryObjects(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static IEnumerable`1<TClassType> QueryObjects(IObjectSpace objectSpace, PersistentCriteriaEvaluationBehavior behavior);
    [ExtensionAttribute]
public static IEnumerable`1<TClassType> QueryObjects(IObjectSpace objectSpace, Expression`1<Func`2<TClassType, bool>> expression, PersistentCriteriaEvaluationBehavior behavior);
    [ExtensionAttribute]
public static bool NeedReload(IObjectSpace objectSpace, object currentObject);
    private static XPClassInfo FindObjectXPClassInfo(object obj, Session session);
    [ExtensionAttribute]
private static XPClassInfo GetClassInfo(IObjectSpace objectSpace, object currentObject, XPMemberInfo& optimisticLockFieldInfo);
    [ExtensionAttribute]
public static T QueryObject(Session session, Expression`1<Func`2<T, bool>> expression, Type implType, bool intransaction);
    [ExtensionAttribute]
public static T QueryObject(IObjectSpace objectSpace, Expression`1<Func`2<T, bool>> expression, Type implType, bool intransaction);
    [ExtensionAttribute]
public static T QueryObject(IObjectSpace objectSpace, Expression`1<Func`2<T, bool>> expression, bool intransaction);
    [ExtensionAttribute]
public static T Create(Session session);
    [ExtensionAttribute]
public static T Create(IObjectSpace objectSpace);
    [ExtensionAttribute]
public static CriteriaOperator GetCriteriaOperator(Session session, Expression`1<Func`2<T, bool>> expression);
    [ExtensionAttribute]
public static CriteriaOperator GetCriteriaOperator(IObjectSpace objectSpace, Expression`1<Func`2<T, bool>> expression);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.ObjectSpaceProviderExtensions : object {
    [ExtensionAttribute]
public static void MakeThreadSafe(IObjectSpaceProvider objectSpaceProvider);
}
[AttributeUsageAttribute("4")]
public class Xpand.Persistent.Base.General.ObjectToViewAttribute : Attribute {
    private string _viewName;
    public string ViewName { get; }
    public ObjectToViewAttribute(string viewName);
    public string get_ViewName();
}
public class Xpand.Persistent.Base.General.ObjectToViewMapper : object {
    private TypeHelper _typeHelper;
    public Dictionary`2<ITypeInfo, string> GenerateSql(ISqlGeneratorFormatter sqlGeneratorFormatter, IList`1<ITypeInfo> typeInfos);
    private string ParseSql(string sql);
    private void SetupDataStore(DataSetDataStore dataSetDataStore, UnitOfWork unitOfWork, ITypeInfo typeInfo);
    private ITypeInfo FindMappedTypeInfo(string name);
    private void RegisterReferences(IList`1<string> references, Type[] types);
    public IList`1<ITypeInfo> BuildTypeInfos();
}
public class Xpand.Persistent.Base.General.PictureItemEventArgs : EventArgs {
    public IPictureItem ItemClicked;
    public PictureItemEventArgs(IPictureItem itemClicked);
}
public enum Xpand.Persistent.Base.General.Platform : Enum {
    public int value__;
    public static Platform Agnostic;
    public static Platform Win;
    public static Platform Web;
    public static Platform Mobile;
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.General.PropertyEditorProperty : Attribute {
    private string _propertyName;
    public string PropertyName { get; }
    public PropertyEditorProperty(string propertyName);
    public string get_PropertyName();
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.General.ReferenceInfoAttribute : Attribute {
    private string _tableName;
    private ITypeInfo _typeInfo;
    public ITypeInfo TypeInfo { get; }
    public string TableName { get; }
    public ReferenceInfoAttribute(string tableName, string typeName);
    public ITypeInfo get_TypeInfo();
    public string get_TableName();
}
public class Xpand.Persistent.Base.General.RegistryTimeZoneProvider : object {
    private static Dictionary`2<string, TimeZoneId> timeZoneIdTable;
    private static RegistryTimeZoneProvider();
    public static string GetRegistryKeyNameByTimeZoneId(TimeZoneId id);
    public static TimeZoneId GetTimeZoneIdByRegistryKeyName(string key);
    private static Dictionary`2<string, TimeZoneId> CreateTimeZoneIdTable();
}
public enum Xpand.Persistent.Base.General.RelationType : Enum {
    public int value__;
    public static RelationType Undefined;
    public static RelationType ManyToMany;
    public static RelationType OneToMany;
}
public class Xpand.Persistent.Base.General.RequestTextPictureItemEventArgs : PictureItemEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    public RequestTextPictureItemEventArgs(IPictureItem itemClicked);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Xpand.Persistent.Base.General.ReservedMember : Attribute {
}
[AttributeUsageAttribute("4")]
public class Xpand.Persistent.Base.General.SessionLessPersistentAttribute : Attribute {
}
public class Xpand.Persistent.Base.General.TypeConverters.StringToModelMemberConverter : TypeConverter {
    private IModelApplication _modelApplication;
    public StringToModelMemberConverter(IModelApplication modelApplication);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Xpand.Persistent.Base.General.TypeConverters.StringToModelViewConverter : TypeConverter {
    private IModelApplication _modelApplication;
    public StringToModelViewConverter(IModelApplication modelApplication);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Xpand.Persistent.Base.General.TypeHelper : object {
    public XPDictionary XPDictionary { get; }
    public string GetColumnNameCore(IMemberInfo info);
    public IMemberInfo DefaultMember(ITypeInfo typeInfo);
    public XPDictionary get_XPDictionary();
}
public class Xpand.Persistent.Base.General.TypesInfoBuilder : object {
    private string _moduleName;
    public static TypesInfoBuilder Create();
    public TypesInfoBuilder FromModule(string moduleName);
    public ITypesInfo Build(bool tryToUseCurrentTypesInfo);
    private bool UseCurrentTypesInfo();
    private TypesInfo GetTypesInfo();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.TypesInfoExtensions : object {
    private static MemberSetter XpoTypeInfoSourceSetter;
    private static TypesInfoExtensions();
    [IteratorStateMachineAttribute("Xpand.Persistent.Base.General.TypesInfoExtensions/<BaseInfos>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<ITypeInfo> BaseInfos(ITypeInfo typeInfo);
    [ExtensionAttribute]
public static IEnumerable`1<ITypeInfo> DomainSealedInfos(ITypesInfo typesInfo, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<ITypeInfo> DomainSealedInfos(ITypesInfo typesInfo);
    [ExtensionAttribute]
public static ITypeInfo GetITypeInfo(object obj);
    [ExtensionAttribute]
public static ITypeInfo GetITypeInfo(Type type);
    [ExtensionAttribute]
public static bool IsDomainComponent(Type type);
    [ExtensionAttribute]
public static IModelClass ModelClass(ITypeInfo typeInfo);
    [ExtensionAttribute]
public static void AssignAsPersistentEntityStore(XpoTypeInfoSource xpoTypeInfoSource);
    [ExtensionAttribute]
public static void AssignAsInstance(ITypesInfo typesInfo);
    [ExtensionAttribute]
public static Type FindBusinessObjectType(ITypesInfo typesInfo, Type type);
    [ExtensionAttribute]
public static Type FindBusinessObjectType(ITypesInfo typesInfo);
    [ExtensionAttribute]
public static XPMemberInfo CreateMember(ITypesInfo typesInfo, Type typeToCreateOn, Type typeOfMember, string associationName);
    [ExtensionAttribute]
public static XPMemberInfo CreateMember(ITypesInfo typesInfo, Type typeToCreateOn, Type typeOfMember, string associationName, bool refreshTypesInfo);
    [ExtensionAttribute]
public static XPMemberInfo CreateMember(ITypesInfo typesInfo, Type typeToCreateOn, Type typeOfMember, string associationName, string propertyName);
    [ExtensionAttribute]
public static XPMemberInfo CreateMember(ITypesInfo typesInfo, Type typeToCreateOn, Type typeOfMember, string associationName, string propertyName, bool refreshTypesInfo);
    [ExtensionAttribute]
public static XPMemberInfo CreateCollection(ITypesInfo typeInfo, Type typeToCreateOn, Type typeOfCollection, string associationName);
    [ExtensionAttribute]
public static ITypeInfo FindTypeInfo(ITypesInfo typesInfo);
    [ExtensionAttribute]
public static void AddAttribute(ITypeInfo typeInfo, Expression`1<Func`2<T, object>> expression, Attribute attribute);
    [ExtensionAttribute]
public static IMemberInfo FindMember(ITypeInfo typesInfo, Expression`1<Func`2<T, object>> expression);
    private static bool TypeIsRegister(ITypesInfo typeInfo, Type typeToCreateOn);
}
[ExtensionAttribute]
[SecuritySafeCriticalAttribute]
public static class Xpand.Persistent.Base.General.ViewExtensions : object {
    [ExtensionAttribute]
public static bool Fits(View view, ViewType viewType, Nesting nesting, Type objectType);
    private static bool FitsCore(View view, Nesting nesting);
    private static bool FitsCore(View view, ViewType viewType);
    [ExtensionAttribute]
public static void Clean(DetailView detailView, Frame frame);
    private static ILayoutManager GetLayoutManager(bool isLayoutSimple, bool delayedViewItemsInitialization);
    private static ILayoutManager CreateWebLayoutManager(bool isLayoutSimple, bool delayedViewItemsInitialization, ITypeInfo typeInfo);
    [ExtensionAttribute]
public static void UpdateLayoutManager(CompositeView compositeView);
}
public class Xpand.Persistent.Base.General.WindowCreatingEventArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Window <Window>k__BackingField;
    public Window Window { get; public set; }
    [CompilerGeneratedAttribute]
public Window get_Window();
    [CompilerGeneratedAttribute]
public void set_Window(Window value);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.General.XafApplicationExtensions : object {
    private static object Locker;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <DisableObjectSpaceProviderCreation>k__BackingField;
    public static bool DisableObjectSpaceProviderCreation { get; public set; }
    private static XafApplicationExtensions();
    [ExtensionAttribute]
public static void ShowView(XafApplication application, View view);
    [ExtensionAttribute]
public static Task`1<int> ShowToastAsync(XafApplication application, string text);
    [ExtensionAttribute]
public static void SendMail(string body, string subject, bool isBodyHtml);
    [ExtensionAttribute]
public static void SendMail(Exception exception);
    [ExtensionAttribute]
public static DeviceCategory GetDeviceCategory(XafApplication application);
    [ExtensionAttribute]
public static ListView CreateListView(XafApplication application, IObjectSpace objectSpace, bool isRoot);
    [ExtensionAttribute]
public static IObjectSpace CreateObjectSpace(XafApplication application);
    [ExtensionAttribute]
public static Platform GetPlatform(XafApplication application);
    [ExtensionAttribute]
internal static Platform GetPlatform(IEnumerable`1<ModuleBase> moduleBases);
    private static bool CheckPlatform(ModuleBase[] modules, String[] platformStrings);
    private static bool CheckPlatformCore(ModuleBase[] moduleBases, string platformString);
    [ExtensionAttribute]
public static string GetStorageFolder(XafApplication app, string folderName);
    private static T GetFileLocation(T defaultValue, string keyName);
    [ExtensionAttribute]
public static void SetEasyTestParameter(XafApplication app, string parameter);
    [ExtensionAttribute]
public static bool GetEasyTestParameter(XafApplication app, string parameter);
    [IteratorStateMachineAttribute("Xpand.Persistent.Base.General.XafApplicationExtensions/<CreateValidationControllers>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Controller> CreateValidationControllers(XafApplication app);
    [IteratorStateMachineAttribute("Xpand.Persistent.Base.General.XafApplicationExtensions/<CreateAppearanceControllers>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<Controller> CreateAppearanceControllers(XafApplication app);
    [ExtensionAttribute]
public static bool IsLoggedIn(XafApplication application);
    [ExtensionAttribute]
public static void WriteLastLogonParameters(XafApplication application, DetailView detailView);
    [ExtensionAttribute]
public static void ReadLastLogonParameters(XafApplication application);
    [ExtensionAttribute]
public static ReadOnlyCollection`1<Controller> ActualControllers(ControllersManager controllersManager);
    [ExtensionAttribute]
public static void EnsureShowViewStrategy(XafApplication xafApplication);
    [ExtensionAttribute]
public static bool CanBuildSecurityObjects(XafApplication xafApplication);
    [ExtensionAttribute]
public static View CreateView(XafApplication application, IModelView viewModel);
    [ExtensionAttribute]
public static Controller CreateController(XafApplication application, Type type);
    [ExtensionAttribute]
public static T FindModule(XafApplication xafApplication, bool exactMatch);
    [ExtensionAttribute]
public static ModuleBase FindModule(XafApplication xafApplication, Type moduleType, bool exactMatch);
    [ExtensionAttribute]
public static void SetClientSideSecurity(XafApplication xafApplication);
    [ExtensionAttribute]
public static int DropDatabaseOnVersionMismatch(XafApplication xafApplication);
    private static bool VersionMissMatch(XafApplication xafApplication);
    private static void DropSqlServerDatabase(string connectionString);
    private static MSSqlConnectionProvider DataStore(string connectionString);
    [ExtensionAttribute]
public static Nullable`1<ClientSideSecurity> ClientSideSecurity(XafApplication xafApplication);
    [ExtensionAttribute]
public static SimpleDataLayer CreateCachedDataLayer(XafApplication xafApplication, IDataStore argsDataStore);
    [CompilerGeneratedAttribute]
public static bool get_DisableObjectSpaceProviderCreation();
    [CompilerGeneratedAttribute]
public static void set_DisableObjectSpaceProviderCreation(bool value);
    [ExtensionAttribute]
public static void CreateCustomObjectSpaceProvider(XafApplication xafApplication, CreateCustomObjectSpaceProviderEventArgs args);
    private static string ConnectionString(XafApplication xafApplication, CreateCustomObjectSpaceProviderEventArgs args);
    [ExtensionAttribute]
public static void CreateCustomObjectSpaceProvider(XafApplication xafApplication, CreateCustomObjectSpaceProviderEventArgs args, string dataStoreName);
    private static IObjectSpaceProvider ObjectSpaceProvider(XafApplication xafApplication, string connectionString);
    private static string GetConnectionStringWithOutThreadSafeDataLayerInitialization(CreateCustomObjectSpaceProviderEventArgs args);
}
public class Xpand.Persistent.Base.General.XpandCollectionSource : CollectionSource {
    protected internal XpandCollectionSource(IObjectSpace objectSpace, ITypeInfo objectTypeInfo, CollectionSourceDataAccessMode dataAccessMode, bool isAsyncServerMode, CollectionSourceMode mode);
    protected internal XpandCollectionSource(IObjectSpace objectSpace, Type objectType, CollectionSourceDataAccessMode dataAccessMode, bool isAsyncServerMode, CollectionSourceMode mode);
    protected internal XpandCollectionSource(IObjectSpace objectSpace, ITypeInfo objectTypeInfo, bool isServerMode, bool isAsyncServerMode, CollectionSourceMode mode);
    protected internal XpandCollectionSource(IObjectSpace objectSpace, Type objectType, bool isServerMode, bool isAsyncServerMode, CollectionSourceMode mode);
    public XpandCollectionSource(IObjectSpace objectSpace, Type objectType, CollectionSourceDataAccessMode dataAccessMode, CollectionSourceMode mode);
    public XpandCollectionSource(IObjectSpace objectSpace, Type objectType, CollectionSourceDataAccessMode dataAccessMode);
    public XpandCollectionSource(IObjectSpace objectSpace, Type objectType, bool isServerMode, CollectionSourceMode mode);
    public XpandCollectionSource(IObjectSpace objectSpace, Type objectType, bool isServerMode);
    public XpandCollectionSource(IObjectSpace objectSpace, Type objectType);
    protected virtual void ApplySorting(IList`1<SortProperty> sorting);
    private bool ShouldApplySorting(IList`1<SortProperty> sorting);
}
[AttributeUsageAttribute("4")]
public class Xpand.Persistent.Base.General.XpandDefaultPropertyAttribute : Attribute {
    private string _expression;
    private string _memberName;
    private bool _inVisibleInAllViews;
    public bool InVisibleInAllViews { get; public set; }
    public string MemberName { get; }
    public string Expression { get; }
    public XpandDefaultPropertyAttribute(string expression);
    public XpandDefaultPropertyAttribute(string expression, string memberName);
    public bool get_InVisibleInAllViews();
    public void set_InVisibleInAllViews(bool value);
    public string get_MemberName();
    public string get_Expression();
}
[ToolboxItemAttribute("False")]
public class Xpand.Persistent.Base.General.XpandModuleBase : ModuleBase {
    private static string _xpandPathInRegistry;
    public static string ManifestModuleName;
    private static object LockObject;
    public static object Control;
    private static Assembly _baseImplAssembly;
    private static string _connectionString;
    private static object SyncRoot;
    protected Type DefaultXafAppType;
    private static string _assemblyString;
    private static IValueManager`1 modreq(System.Runtime.CompilerServices.IsVolatile) _callMonitor;
    private static HashSet`1<Type> DisabledControllerTypes;
    private static object DisabledControllerTypesLock;
    private ModuleType _moduleType;
    private List`1<KeyValuePair`2<string, ModelDifferenceStore>> _extraDiffStores;
    private bool _loggedOn;
    private static TypesInfo AdditionalTypesTypesInfo;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ApplicationModulesManagerSetupArgs> ApplicationModulesManagerSetup;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CancelEventHandler InitSeqGenerator;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ExtendingModelInterfacesArgs> ExtendingModelInterfaces;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<GeneratorUpdaterEventArgs> CustomAddGeneratorUpdaters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Type <UserType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Type <RoleType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <ObjectSpaceCreated>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Type <SequenceObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <IsEasyTesting>k__BackingField;
    public static string UITypeEditor;
    public static MultiValueDictionary`2<KeyValuePair`2<string, ApplicationModulesManager>, object> CallMonitor { get; }
    public ModuleType ModuleType { get; }
    public static Type UserType { get; public set; }
    public static Type RoleType { get; public set; }
    protected internal bool RuntimeMode { get; }
    public static Assembly BaseImplAssembly { get; }
    public static XpoTypeInfoSource XpoTypeInfoSource { get; }
    public static string ConnectionString { get; internal set; }
    public static string XpandPathInRegistry { get; }
    public static string DXPathInRegistry { get; }
    public static string BinDirectory { get; }
    public static bool ObjectSpaceCreated { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public static Type SequenceObjectType { get; public set; }
    public static bool IsEasyTesting { get; public set; }
    private static XpandModuleBase();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ApplicationModulesManagerSetup(EventHandler`1<ApplicationModulesManagerSetupArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ApplicationModulesManagerSetup(EventHandler`1<ApplicationModulesManagerSetupArgs> value);
    protected virtual void OnApplicationModulesManagerSetup(ApplicationModulesManagerSetupArgs e);
    [CompilerGeneratedAttribute]
public void add_InitSeqGenerator(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InitSeqGenerator(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ExtendingModelInterfaces(EventHandler`1<ExtendingModelInterfacesArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExtendingModelInterfaces(EventHandler`1<ExtendingModelInterfacesArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CustomAddGeneratorUpdaters(EventHandler`1<GeneratorUpdaterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CustomAddGeneratorUpdaters(EventHandler`1<GeneratorUpdaterEventArgs> value);
    private void OnCustomAddGeneratorUpdaters(GeneratorUpdaterEventArgs e);
    protected virtual void OnExtendingModelInterfaces(ExtendingModelInterfacesArgs e);
    public static MultiValueDictionary`2<KeyValuePair`2<string, ApplicationModulesManager>, object> get_CallMonitor();
    public static void DisableControllers(Type[] types);
    protected IEnumerable`1<Type> FilterDisabledControllers(IEnumerable`1<Type> controllers);
    protected virtual IEnumerable`1<Type> GetDeclaredControllerTypes();
    protected virtual IEnumerable`1<Type> GetDeclaredControllerTypesCore(IEnumerable`1<Type> declaredControllerTypes);
    internal void OnInitSeqGenerator(CancelEventArgs e);
    public virtual void AddModelNodeUpdaters(IModelNodeUpdaterRegistrator updaterRegistrator);
    public virtual void CustomizeLogics(CustomLogics customLogics);
    public bool Executed(string name);
    private bool ExecutedCore(string name, object value);
    private bool ExecutionConditions();
    public bool Executed(string name, ModuleType moduleType);
    public ModuleType get_ModuleType();
    public bool Executed(string name);
    public virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
    public virtual void ExtendModelWebInterfaces(ModelInterfaceExtenders extenders);
    [CompilerGeneratedAttribute]
public static Type get_UserType();
    [CompilerGeneratedAttribute]
public static void set_UserType(Type value);
    [CompilerGeneratedAttribute]
public static Type get_RoleType();
    [CompilerGeneratedAttribute]
public static void set_RoleType(Type value);
    public virtual void AddGeneratorUpdaters(ModelNodesGeneratorUpdaters updaters);
    protected internal bool get_RuntimeMode();
    public static Assembly get_BaseImplAssembly();
    public static XpoTypeInfoSource get_XpoTypeInfoSource();
    public static string get_ConnectionString();
    internal static void set_ConnectionString(string value);
    [SecuritySafeCriticalAttribute]
private static void LoadBaseImplAssembly();
    public static string get_XpandPathInRegistry();
    public static string get_DXPathInRegistry();
    public static Assembly XpandAssemblyResolve(object sender, ResolveEventArgs args);
    public static Type GetDxBaseImplType(string typeName);
    protected void LoadDxBaseImplType(string typeName);
    protected virtual IEnumerable`1<Type> GetDeclaredExportedTypes();
    private void AssignSecurityEntities();
    public static bool IsLoadingExternalModel();
    public static IEnumerable`1<Type> CollectExportedTypesFromAssembly(Assembly assembly);
    public Type LoadFromBaseImpl(string typeName);
    private Type LoadFromBaseImplCore(string typeName);
    protected internal void AddToAdditionalExportedTypes(String[] types);
    protected Type[] AddToAdditionalExportedTypes(string nameSpaceName, Assembly assembly);
    private IEnumerable`1<ITypeInfo> GetTypeInfos(Assembly assembly);
    protected internal Type[] AddToAdditionalExportedTypes(string nameSpaceName);
    protected void CreateWeaklyTypedCollection(ITypesInfo typesInfo, Type classType, string propertyName);
    public IList`1<Type> GetAdditionalClasses(ApplicationModulesManager manager);
    public IList`1<Type> GetAdditionalClasses(ModuleList moduleList);
    public virtual void Setup(ApplicationModulesManager moduleManager);
    public virtual void Setup(XafApplication application);
    private void ApplicationOnDisposed(object sender, EventArgs e);
    private void ApplicationOnCreateCustomCollectionSource(object sender, CreateCustomCollectionSourceEventArgs e);
    private void OnCreateCustomUserModelDifferenceStore(object sender, CreateCustomModelDifferenceStoreEventArgs e);
    [IteratorStateMachineAttribute("Xpand.Persistent.Base.General.XpandModuleBase/<GetExtraDiffStores>d__96")]
private IEnumerable`1<KeyValuePair`2<string, ModelDifferenceStore>> GetExtraDiffStores();
    public static string get_BinDirectory();
    [CompilerGeneratedAttribute]
public static bool get_ObjectSpaceCreated();
    [CompilerGeneratedAttribute]
internal static void set_ObjectSpaceCreated(bool value);
    [CompilerGeneratedAttribute]
public static Type get_SequenceObjectType();
    [CompilerGeneratedAttribute]
public static void set_SequenceObjectType(Type value);
    [CompilerGeneratedAttribute]
public static bool get_IsEasyTesting();
    [CompilerGeneratedAttribute]
public static void set_IsEasyTesting(bool value);
    private void CheckApplicationTypes();
    private void ApplicationOnSettingUp(object sender, SetupEventArgs e);
    protected virtual Type[] ApplicationTypes();
    private IEnumerable`1<Attribute> GetAttributes(ITypeInfo type);
    private IEnumerable`1<Attribute> GetAttributes(ITypeInfo type, AttributeRegistrator registrator);
    private void CreateAttributeRegistratorAttributes(ITypeInfo persistentType);
    public virtual void CustomizeTypesInfo(ITypesInfo typesInfo);
    private void EditorAliasForNullableEnums(ITypesInfo typesInfo);
    private static void CreateXpandDefaultProperty(ITypesInfo typesInfo);
    public sealed virtual void ConvertXml(ConvertXmlParameters parameters);
    private void ApplicationOnSetupComplete(object sender, EventArgs eventArgs);
    public sealed virtual void UpdateNode(IModelMemberEx node, IModelApplication application);
    public static void RemoveCall(string name, ApplicationModulesManager applicationModulesManager);
    private sealed virtual override ModuleTypeList Xpand.Persistent.Base.General.IXpandModuleBase.get_RequiredModuleTypes();
    private sealed virtual override XafApplication Xpand.Persistent.Base.General.IXpandModuleBase.get_Application();
}
[AttributeUsageAttribute("1028")]
public class Xpand.Persistent.Base.General.XpandNavigationItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ObjectKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewId>k__BackingField;
    public string Caption { get; public set; }
    public string Id { get; public set; }
    public int Index { get; }
    public string Path { get; }
    public string ObjectKey { get; public set; }
    public string ViewId { get; }
    public XpandNavigationItemAttribute(string path, string viewId, int index);
    public XpandNavigationItemAttribute(string path, string viewId, string objectKey, int index);
    public XpandNavigationItemAttribute(string path, string viewId, string objectKey, string id, int index);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_ObjectKey();
    [CompilerGeneratedAttribute]
public void set_ObjectKey(string value);
    [CompilerGeneratedAttribute]
public string get_ViewId();
}
public class Xpand.Persistent.Base.General.XpandNavigationItemNodeUpdater : ModelNodesGeneratorUpdater`1<NavigationItemNodeGenerator> {
    public virtual void UpdateNode(ModelNode node);
    private String[] ViewIds(XpandNavigationItemAttribute itemAttribute, IModelClass modelClass);
    private void AddNodes(IModelNavigationItems navigationItems, List`1<string> strings, String[] viewIds, string objectKey, int index, string caption);
    private IModelNavigationItem GetNavigationItem(IModelNavigationItems navigationItems, string id, string objectKey, int index, string caption);
}
public class Xpand.Persistent.Base.General.XpandObjectSpace : XPObjectSpace {
    public Func`2<object, object> GetObjectAction;
    public XpandObjectSpace(ITypesInfo typesInfo, XpoTypeInfoSource xpoTypeInfoSource, CreateUnitOfWorkHandler createUnitOfWorkDelegate);
    public virtual object GetObject(object objectFromDifferentObjectSpace);
    public sealed virtual object FindObject(Type objectType, CriteriaOperator criteria, bool inTransaction, bool selectDeleted);
    public virtual object CreateObject(Type type);
    private XPClassInfo FindXPClassInfo(Type type);
    protected virtual void SetModified(object obj, ObjectChangedEventArgs args);
}
public class Xpand.Persistent.Base.General.XpandObjectSpaceProvider : XPObjectSpaceProvider {
    private ISecurityStrategyBase _security;
    private IDataLayer _dataLayer;
    private Nullable`1<ClientSideSecurity> _clientSideSecurity;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CreatingWorkingDataLayerArgs> CreatingWorkingDataLayer;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IXpoDataStoreProxy <DataStoreProvider>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AllowICommandChannelDoWithSecurityContext>k__BackingField;
    public IXpoDataStoreProxy DataStoreProvider { get; public set; }
    public IDataLayer WorkingDataLayer { get; }
    private string DevExpress.ExpressApp.IObjectSpaceProvider.ConnectionString { get; private set; }
    public bool AllowICommandChannelDoWithSecurityContext { get; public set; }
    public XpandObjectSpaceProvider(IXpoDataStoreProxy provider, ISecurityStrategyBase security, bool threadSafe);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreatingWorkingDataLayer(EventHandler`1<CreatingWorkingDataLayerArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreatingWorkingDataLayer(EventHandler`1<CreatingWorkingDataLayerArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual IXpoDataStoreProxy get_DataStoreProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataStoreProvider(IXpoDataStoreProxy value);
    private sealed virtual override DatabaseSchemaState DevExpress.ExpressApp.IDatabaseSchemaChecker.CheckDatabaseSchemaCompatibility(Exception& exception);
    private XPClassInfo[] GetPersistentClasses();
    public sealed virtual IDataLayer get_WorkingDataLayer();
    private sealed virtual override string DevExpress.ExpressApp.IObjectSpaceProvider.get_ConnectionString();
    private sealed virtual override void DevExpress.ExpressApp.IObjectSpaceProvider.set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowICommandChannelDoWithSecurityContext();
    [CompilerGeneratedAttribute]
public void set_AllowICommandChannelDoWithSecurityContext(bool value);
    protected virtual IObjectSpace CreateObjectSpaceCore();
    private sealed virtual override IObjectSpace DevExpress.ExpressApp.IObjectSpaceProvider.CreateUpdatingObjectSpace(bool allowUpdateSchema);
    private SessionObjectLayer GetSecuredObjectLayer(XpandUnitOfWork unitOfWork);
    protected virtual UnitOfWork CreateUnitOfWork(IDataLayer dataLayer);
    private XpandUnitOfWork CreateUnitOfWork(IDataStore dataStore, IEnumerable`1<IDisposable> disposableObjects);
    public void SetClientSideSecurity(Nullable`1<ClientSideSecurity> clientSideSecurity);
    protected void OnCreatingWorkingDataLayer(CreatingWorkingDataLayerArgs e);
    protected virtual IDataLayer CreateDataLayer(IDataStore dataStore);
    private IDataLayer CreateDataLayerCore(IDataStore dataStore);
    public sealed virtual IObjectSpace CreateNonsecuredObjectSpace();
    private IObjectSpace CreateNonsecuredObjectSpaceCore();
    [CompilerGeneratedAttribute]
private XpandUnitOfWork <CreateObjectSpaceCore>b__22_0();
    [CompilerGeneratedAttribute]
private UnitOfWork <CreateNonsecuredObjectSpaceCore>b__32_0(IDataLayer layer);
}
public class Xpand.Persistent.Base.General.XpandThreadSafeDataLayer : ThreadSafeDataLayer {
    public XpandThreadSafeDataLayer(XPDictionary xpDictionary, IDataStore dataStore);
    protected virtual void OnClassInfoChanged(object sender, ClassInfoEventArgs e);
}
public class Xpand.Persistent.Base.General.XpoObjectHacker : object {
    public void EnsureIsNotIdentity(IEnumerable`1<DBTable> tables);
    public ParameterValue CreateObjectTypeIdentifier(InsertStatement insertStatement, IDataLayer simpleDataLayer, int value);
    public void CreateObjectTypeIdentifier(InsertStatement insertStatement, IDataLayer simpleDataLayer);
    private int FindIdentityValue(QueryParameterCollection queryParameterCollection, IDataLayer simpleDataLayer);
}
public enum Xpand.Persistent.Base.ImportExport.ErrorHandling : Enum {
    public int value__;
    public static ErrorHandling DoNothing;
    public static ErrorHandling CreateErrorObjects;
    public static ErrorHandling ThrowException;
}
public enum Xpand.Persistent.Base.ImportExport.FailReason : Enum {
    public int value__;
    public static FailReason Invalid;
    public static FailReason TypeNotFound;
    public static FailReason PropertyNotFound;
}
public interface Xpand.Persistent.Base.ImportExport.IClassInfoGraphNode {
    public NodeType NodeType { get; public set; }
    public string Name { get; public set; }
    public ISerializationConfiguration SerializationConfiguration { get; public set; }
    public SerializationStrategy SerializationStrategy { get; public set; }
    public bool Key { get; public set; }
    public string TypeName { get; public set; }
    public abstract virtual NodeType get_NodeType();
    public abstract virtual void set_NodeType(NodeType value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ISerializationConfiguration get_SerializationConfiguration();
    public abstract virtual void set_SerializationConfiguration(ISerializationConfiguration value);
    public abstract virtual SerializationStrategy get_SerializationStrategy();
    public abstract virtual void set_SerializationStrategy(SerializationStrategy value);
    public abstract virtual bool get_Key();
    public abstract virtual void set_Key(bool value);
    public abstract virtual string get_TypeName();
    public abstract virtual void set_TypeName(string value);
}
public interface Xpand.Persistent.Base.ImportExport.IIOError {
    public FailReason Reason { get; public set; }
    public string ElementXml { get; public set; }
    public string InnerXml { get; public set; }
    public abstract virtual FailReason get_Reason();
    public abstract virtual void set_Reason(FailReason value);
    public abstract virtual string get_ElementXml();
    public abstract virtual void set_ElementXml(string value);
    public abstract virtual string get_InnerXml();
    public abstract virtual void set_InnerXml(string value);
}
public interface Xpand.Persistent.Base.ImportExport.ISerializationConfiguration {
    public Type TypeToSerialize { get; public set; }
    public IList`1<IClassInfoGraphNode> SerializationGraph { get; }
    public ISerializationConfigurationGroup SerializationConfigurationGroup { get; public set; }
    public abstract virtual Type get_TypeToSerialize();
    public abstract virtual void set_TypeToSerialize(Type value);
    public abstract virtual IList`1<IClassInfoGraphNode> get_SerializationGraph();
    public abstract virtual ISerializationConfigurationGroup get_SerializationConfigurationGroup();
    public abstract virtual void set_SerializationConfigurationGroup(ISerializationConfigurationGroup value);
}
public interface Xpand.Persistent.Base.ImportExport.ISerializationConfigurationGroup {
    public string Name { get; public set; }
    public IList`1<ISerializationConfiguration> Configurations { get; }
    public bool MinifyOutput { get; public set; }
    public bool ZipOutput { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IList`1<ISerializationConfiguration> get_Configurations();
    public abstract virtual bool get_MinifyOutput();
    public abstract virtual void set_MinifyOutput(bool value);
    public abstract virtual bool get_ZipOutput();
    public abstract virtual void set_ZipOutput(bool value);
}
public enum Xpand.Persistent.Base.ImportExport.NodeType : Enum {
    public int value__;
    public static NodeType Simple;
    public static NodeType Object;
    public static NodeType Collection;
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.ImportExport.SerializationKeyAttribute : Attribute {
}
public enum Xpand.Persistent.Base.ImportExport.SerializationStrategy : Enum {
    public int value__;
    public static SerializationStrategy SerializeAsValue;
    public static SerializationStrategy SerializeAsObject;
    public static SerializationStrategy DoNotSerialize;
}
[AttributeUsageAttribute("132")]
public class Xpand.Persistent.Base.ImportExport.SerializationStrategyAttribute : Attribute {
    private SerializationStrategy _serializationStrategy;
    public SerializationStrategy SerializationStrategy { get; }
    public SerializationStrategyAttribute(SerializationStrategy serializationStrategy);
    public SerializationStrategy get_SerializationStrategy();
}
public interface Xpand.Persistent.Base.IXpoModelDifference {
    public DifferenceType DifferenceType { get; }
    public string Name { get; public set; }
    public bool Disabled { get; public set; }
    public DateTime DateCreated { get; public set; }
    public string XmlContent { get; public set; }
    public abstract virtual DifferenceType get_DifferenceType();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_Disabled();
    public abstract virtual void set_Disabled(bool value);
    public abstract virtual DateTime get_DateCreated();
    public abstract virtual void set_DateCreated(DateTime value);
    public abstract virtual string get_XmlContent();
    public abstract virtual void set_XmlContent(string value);
}
public interface Xpand.Persistent.Base.JobScheduler.Calendars.IAnnualCalendar {
    public List`1<DateTime> DatesExcluded { get; }
    public List`1<DateTime> DatesIncluded { get; }
    public abstract virtual List`1<DateTime> get_DatesExcluded();
    public abstract virtual List`1<DateTime> get_DatesIncluded();
}
public interface Xpand.Persistent.Base.JobScheduler.Calendars.ICronCalendar {
    public string CronExpression { get; public set; }
    public abstract virtual string get_CronExpression();
    public abstract virtual void set_CronExpression(string value);
}
public interface Xpand.Persistent.Base.JobScheduler.Calendars.IDailyCalendar {
    public bool InvertTimeRange { get; public set; }
    public IList`1<IDateRange> DateRanges { get; }
    public abstract virtual bool get_InvertTimeRange();
    public abstract virtual void set_InvertTimeRange(bool value);
    public abstract virtual IList`1<IDateRange> get_DateRanges();
}
public interface Xpand.Persistent.Base.JobScheduler.Calendars.IHolidayCalendar {
    public List`1<DateTime> DatesExcluded { get; }
    public abstract virtual List`1<DateTime> get_DatesExcluded();
}
public interface Xpand.Persistent.Base.JobScheduler.Calendars.IMonthlyCalendar {
    public List`1<int> DaysExcluded { get; }
    public List`1<int> DaysIncluded { get; }
    public abstract virtual List`1<int> get_DaysExcluded();
    public abstract virtual List`1<int> get_DaysIncluded();
}
public interface Xpand.Persistent.Base.JobScheduler.Calendars.ITriggerCalendar {
    public string Name { get; public set; }
    public TimeZoneId TimeZone { get; public set; }
    [SizeAttribute("-1")]
public string Description { get; public set; }
    public string CalendarTypeFullName { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual TimeZoneId get_TimeZone();
    public abstract virtual void set_TimeZone(TimeZoneId value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_CalendarTypeFullName();
}
public interface Xpand.Persistent.Base.JobScheduler.Calendars.IWeeklyCalendar {
    public List`1<DayOfWeek> DaysOfWeekExcluded { get; }
    public List`1<DayOfWeek> DaysOfWeekIncluded { get; }
    public abstract virtual List`1<DayOfWeek> get_DaysOfWeekExcluded();
    public abstract virtual List`1<DayOfWeek> get_DaysOfWeekIncluded();
}
public abstract class Xpand.Persistent.Base.JobScheduler.DataMapTypeAttribute : Attribute {
    private Type _type;
    public Type Type { get; }
    protected DataMapTypeAttribute(Type type);
    public Type get_Type();
    public static CriteriaOperator GetCriteria(Session session, Type jobType);
}
public interface Xpand.Persistent.Base.JobScheduler.IDataMap {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface Xpand.Persistent.Base.JobScheduler.IJobSchedulerGroup {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface Xpand.Persistent.Base.JobScheduler.IRequireSchedulerInitialization {
}
public interface Xpand.Persistent.Base.JobScheduler.ISupportJobDetail {
    public IXpandJobDetail JobDetail { get; public set; }
    public abstract virtual IXpandJobDetail get_JobDetail();
    public abstract virtual void set_JobDetail(IXpandJobDetail value);
}
public interface Xpand.Persistent.Base.JobScheduler.ISupportSchedulerLink {
}
public interface Xpand.Persistent.Base.JobScheduler.IXpandJob {
    public string Name { get; public set; }
    public Type JobType { get; public set; }
    public IDataMap DataMap { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual Type get_JobType();
    public abstract virtual void set_JobType(Type value);
    public abstract virtual IDataMap get_DataMap();
    public abstract virtual void set_DataMap(IDataMap value);
}
public interface Xpand.Persistent.Base.JobScheduler.IXpandJobDetail {
    public string Name { get; public set; }
    public string Description { get; public set; }
    public IXpandJob Job { get; public set; }
    public bool RequestsRecovery { get; public set; }
    public IList`1<IXpandJobTrigger> JobTriggers { get; }
    public IList`1<IJobListenerTrigger> JobListenerTriggers { get; }
    public IJobSchedulerGroup Group { get; public set; }
    public IDataMap JobDataMap { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual IXpandJob get_Job();
    public abstract virtual void set_Job(IXpandJob value);
    public abstract virtual bool get_RequestsRecovery();
    public abstract virtual void set_RequestsRecovery(bool value);
    public abstract virtual IList`1<IXpandJobTrigger> get_JobTriggers();
    public abstract virtual IList`1<IJobListenerTrigger> get_JobListenerTriggers();
    public abstract virtual IJobSchedulerGroup get_Group();
    public abstract virtual void set_Group(IJobSchedulerGroup value);
    public abstract virtual IDataMap get_JobDataMap();
    public abstract virtual void set_JobDataMap(IDataMap value);
}
public class Xpand.Persistent.Base.JobScheduler.JobDataMapTypeAttribute : DataMapTypeAttribute {
    public JobDataMapTypeAttribute(Type type);
}
public class Xpand.Persistent.Base.JobScheduler.JobDetailDataMapTypeAttribute : DataMapTypeAttribute {
    public JobDetailDataMapTypeAttribute(Type type);
}
[AttributeUsageAttribute("384")]
public class Xpand.Persistent.Base.JobScheduler.NonDataMapMember : Attribute {
}
public enum Xpand.Persistent.Base.JobScheduler.Triggers.CronTriggerMisfireInstruction : Enum {
    public int value__;
    public static CronTriggerMisfireInstruction InstructionNotSet;
    public static CronTriggerMisfireInstruction SmartPolicy;
    [TooltipAttribute("Instructs the IScheduler that upon a mis-fire situation, the CronTrigger wants to be fired now by IScheduler. ")]
public static CronTriggerMisfireInstruction CronTriggerFireOnceNow;
    [TooltipAttribute("Instructs the IScheduler that upon a mis-fire situation, the CronTrigger wants to have it's next-fire-time updated to the next time in the schedule after the current time (taking into account any associated ICalendar, but it does not want to be fired now.")]
public static CronTriggerMisfireInstruction CronTriggerDoNothing;
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IJobDetailJobListenerTriggerLink {
    public IJobListenerTrigger JobListenerTrigger { get; public set; }
    public abstract virtual IJobListenerTrigger get_JobListenerTrigger();
    public abstract virtual void set_JobListenerTrigger(IJobListenerTrigger value);
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IJobDetails {
    public IList`1<IXpandJobDetail> JobDetails { get; }
    public abstract virtual IList`1<IXpandJobDetail> get_JobDetails();
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IJobDetailTriggerLink {
    public IXpandJobTrigger JobTrigger { get; public set; }
    public abstract virtual IXpandJobTrigger get_JobTrigger();
    public abstract virtual void set_JobTrigger(IXpandJobTrigger value);
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IJobListenerTrigger {
    public JobListenerEvent Event { get; public set; }
    public Type JobType { get; public set; }
    public IJobSchedulerGroup Group { get; public set; }
    public abstract virtual JobListenerEvent get_Event();
    public abstract virtual void set_Event(JobListenerEvent value);
    public abstract virtual Type get_JobType();
    public abstract virtual void set_JobType(Type value);
    public abstract virtual IJobSchedulerGroup get_Group();
    public abstract virtual void set_Group(IJobSchedulerGroup value);
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IJobSchedulerGroupTriggerLink {
    public IJobSchedulerGroup JobSchedulerGroup { get; public set; }
    public IXpandJobTrigger Trigger { get; public set; }
    public abstract virtual IJobSchedulerGroup get_JobSchedulerGroup();
    public abstract virtual void set_JobSchedulerGroup(IJobSchedulerGroup value);
    public abstract virtual IXpandJobTrigger get_Trigger();
    public abstract virtual void set_Trigger(IXpandJobTrigger value);
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IJobTriggerTriggerListenerTriggerLink {
    public IXpandJobTrigger JobTrigger { get; public set; }
    public ITriggerListenerTrigger TriggerListenerTrigger { get; public set; }
    public abstract virtual IXpandJobTrigger get_JobTrigger();
    public abstract virtual void set_JobTrigger(IXpandJobTrigger value);
    public abstract virtual ITriggerListenerTrigger get_TriggerListenerTrigger();
    public abstract virtual void set_TriggerListenerTrigger(ITriggerListenerTrigger value);
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.ITriggerListenerTrigger {
    public Type JobType { get; public set; }
    public IJobSchedulerGroup Group { get; public set; }
    public TriggerListenerEvent Event { get; public set; }
    public IList`1<IXpandJobTrigger> JobTriggers { get; }
    public abstract virtual Type get_JobType();
    public abstract virtual void set_JobType(Type value);
    public abstract virtual IJobSchedulerGroup get_Group();
    public abstract virtual void set_Group(IJobSchedulerGroup value);
    public abstract virtual TriggerListenerEvent get_Event();
    public abstract virtual void set_Event(TriggerListenerEvent value);
    public abstract virtual IList`1<IXpandJobTrigger> get_JobTriggers();
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IXpandCronTrigger {
    public string CronExpression { get; public set; }
    public TimeZoneId TimeZone { get; public set; }
    public CronTriggerMisfireInstruction MisfireInstruction { get; public set; }
    public abstract virtual string get_CronExpression();
    public abstract virtual void set_CronExpression(string value);
    public abstract virtual TimeZoneId get_TimeZone();
    public abstract virtual void set_TimeZone(TimeZoneId value);
    public abstract virtual CronTriggerMisfireInstruction get_MisfireInstruction();
    public abstract virtual void set_MisfireInstruction(CronTriggerMisfireInstruction value);
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IXpandJobTrigger {
    public string Name { get; public set; }
    public string Description { get; public set; }
    public ITriggerCalendar Calendar { get; public set; }
    public Nullable`1<DateTime> EndTimeUtc { get; public set; }
    public DateTime StartTimeUtc { get; public set; }
    public TriggerPriority Priority { get; public set; }
    public IList`1<ITriggerListenerTrigger> TriggerListenerTriggers { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual ITriggerCalendar get_Calendar();
    public abstract virtual void set_Calendar(ITriggerCalendar value);
    public abstract virtual Nullable`1<DateTime> get_EndTimeUtc();
    public abstract virtual void set_EndTimeUtc(Nullable`1<DateTime> value);
    public abstract virtual DateTime get_StartTimeUtc();
    public abstract virtual void set_StartTimeUtc(DateTime value);
    public abstract virtual TriggerPriority get_Priority();
    public abstract virtual void set_Priority(TriggerPriority value);
    public abstract virtual IList`1<ITriggerListenerTrigger> get_TriggerListenerTriggers();
}
public interface Xpand.Persistent.Base.JobScheduler.Triggers.IXpandSimpleTrigger {
    public SimpleTriggerMisfireInstruction MisfireInstruction { get; public set; }
    public Nullable`1<int> RepeatCount { get; public set; }
    public Nullable`1<TimeSpan> RepeatInterval { get; public set; }
    public int TimesTriggered { get; public set; }
    public Nullable`1<DateTimeOffset> FinalFireTimeUtc { get; }
    public abstract virtual void SetFinalFireTimeUtc(Nullable`1<DateTimeOffset> dateTime);
    public abstract virtual SimpleTriggerMisfireInstruction get_MisfireInstruction();
    public abstract virtual void set_MisfireInstruction(SimpleTriggerMisfireInstruction value);
    public abstract virtual Nullable`1<int> get_RepeatCount();
    public abstract virtual void set_RepeatCount(Nullable`1<int> value);
    public abstract virtual Nullable`1<TimeSpan> get_RepeatInterval();
    public abstract virtual void set_RepeatInterval(Nullable`1<TimeSpan> value);
    public abstract virtual int get_TimesTriggered();
    public abstract virtual void set_TimesTriggered(int value);
    public abstract virtual Nullable`1<DateTimeOffset> get_FinalFireTimeUtc();
}
public enum Xpand.Persistent.Base.JobScheduler.Triggers.JobListenerEvent : Enum {
    public int value__;
    public static JobListenerEvent Executing;
    public static JobListenerEvent Vetoed;
    public static JobListenerEvent Executed;
}
public enum Xpand.Persistent.Base.JobScheduler.Triggers.SimpleTriggerMisfireInstruction : Enum {
    public int value__;
    public static SimpleTriggerMisfireInstruction InstructionNotSet;
    public static SimpleTriggerMisfireInstruction SmartPolicy;
    [TooltipAttribute("Instructs the IScheduler that upon a mis-fire situation, the SimpleTrigger wants to be fired now by IScheduler. 
NOTE: This instruction should typically only be used for 'one-shot' (non-repeating) Triggers. If it is used on a trigger with a repeat count > 0 then it is equivalent to the instruction RescheduleNowWithRemainingRepeatCount . 
")]
public static SimpleTriggerMisfireInstruction FireNow;
    [TooltipAttribute("Instructs the IScheduler that upon a mis-fire situation, the SimpleTrigger wants to be re-scheduled to 'now' (even if the associated ICalendar excludes 'now') with the repeat count left as-is. This does obey the Trigger end-time however, so if 'now' is after the end-time the Trigger will not fire again. 
Remarks:
NOTE: Use of this instruction causes the trigger to 'forget' the start-time and repeat-count that it was originally setup with (this is only an issue if you for some reason wanted to be able to tell what the original values were at some later time). 
")]
public static SimpleTriggerMisfireInstruction RescheduleNowWithExistingRepeatCount;
    [TooltipAttribute("Instructs the IScheduler that upon a mis-fire situation, the SimpleTrigger wants to be re-scheduled to 'now' (even if the associated ICalendar excludes 'now') with the repeat count set to what it would be, if it had not missed any firings. This does obey the Trigger end-time however, so if 'now' is after the end-time the Trigger will not fire again. 
NOTE: Use of this instruction causes the trigger to 'forget' the start-time and repeat-count that it was originally setup with. Instead, the repeat count on the trigger will be changed to whatever the remaining repeat count is (this is only an issue if you for some reason wanted to be able to tell what the original values were at some later time). 

NOTE: This instruction could cause the Trigger to go to the 'COMPLETE' state after firing 'now', if all the repeat-fire-times where missed. 
")]
public static SimpleTriggerMisfireInstruction RescheduleNowWithRemainingRepeatCount;
    [TooltipAttribute("Instructs the IScheduler that upon a mis-fire situation, the SimpleTrigger wants to be re-scheduled to the next scheduled time after 'now' - taking into account any associated ICalendar, and with the repeat count set to what it would be, if it had not missed any firings. 
Remarks:
NOTE/WARNING: This instruction could cause the Trigger to go directly to the 'COMPLETE' state if all fire-times where missed. ")]
public static SimpleTriggerMisfireInstruction RescheduleNextWithRemainingCount;
    [TooltipAttribute("Instructs the IScheduler that upon a mis-fire situation, the SimpleTrigger wants to be re-scheduled to the next scheduled time after 'now' - taking into account any associated ICalendar, and with the repeat count left unchanged. 
Remarks:
NOTE/WARNING: This instruction could cause the Trigger to go directly to the 'COMPLETE' state if all the end-time of the trigger has arrived.
")]
public static SimpleTriggerMisfireInstruction RescheduleNextWithExistingCount;
}
public enum Xpand.Persistent.Base.JobScheduler.Triggers.TimeZoneId : Enum {
    public int value__;
    public static TimeZoneId Adelaide;
    public static TimeZoneId Afghanistan;
    public static TimeZoneId Alaska;
    public static TimeZoneId Arab;
    public static TimeZoneId Arabian;
    public static TimeZoneId Arabic;
    public static TimeZoneId Atlantic;
    public static TimeZoneId Argentina;
    public static TimeZoneId Armenia;
    public static TimeZoneId Azerbaijan;
    public static TimeZoneId Azores;
    public static TimeZoneId Balkan;
    public static TimeZoneId Cairo;
    public static TimeZoneId CapeVerde;
    public static TimeZoneId Caucasus;
    public static TimeZoneId Central;
    public static TimeZoneId CentralAmerica;
    public static TimeZoneId CentralAsia;
    public static TimeZoneId CentralAustralian;
    public static TimeZoneId CentralBrazilian;
    public static TimeZoneId CentralCanadian;
    public static TimeZoneId CentralEurope;
    public static TimeZoneId CentralEuropean;
    public static TimeZoneId CentralMexico;
    public static TimeZoneId CentralPacific;
    public static TimeZoneId China;
    public static TimeZoneId Custom;
    public static TimeZoneId DateLine;
    public static TimeZoneId Eastern;
    public static TimeZoneId EasternAfrica;
    public static TimeZoneId EasternAustralia;
    public static TimeZoneId EasternAustralian;
    public static TimeZoneId EasternEurope;
    public static TimeZoneId EasternSouthAmerica;
    public static TimeZoneId Ekaterinburg;
    public static TimeZoneId Fiji;
    public static TimeZoneId Georgian;
    public static TimeZoneId Greenland;
    public static TimeZoneId Greenwich;
    public static TimeZoneId Hawaii;
    public static TimeZoneId India;
    public static TimeZoneId Iran;
    public static TimeZoneId Israel;
    public static TimeZoneId Jordan;
    public static TimeZoneId Kamchatka;
    public static TimeZoneId Korea;
    public static TimeZoneId Lisbon;
    public static TimeZoneId Mauritius;
    public static TimeZoneId Mexico;
    public static TimeZoneId Mexico2;
    public static TimeZoneId MidAtlantic;
    public static TimeZoneId MidEast;
    public static TimeZoneId MidwayIsland;
    public static TimeZoneId Montevideo;
    public static TimeZoneId Morocco;
    public static TimeZoneId Mountain;
    public static TimeZoneId MountainMexico;
    public static TimeZoneId Myanmar;
    public static TimeZoneId Namibia;
    public static TimeZoneId Nepal;
    public static TimeZoneId Newfoundland;
    public static TimeZoneId NewZealand;
    public static TimeZoneId NorthAsia;
    public static TimeZoneId NorthAsiaEast;
    public static TimeZoneId NorthCentralAsia;
    public static TimeZoneId NorthEurope;
    public static TimeZoneId Pacific;
    public static TimeZoneId PacificMexico;
    public static TimeZoneId Pakistan;
    public static TimeZoneId Paraguay;
    public static TimeZoneId Romance;
    public static TimeZoneId Russian;
    public static TimeZoneId Singapore;
    public static TimeZoneId SouthAfrica;
    public static TimeZoneId SouthAmericaEastern;
    public static TimeZoneId SouthAmericaPacific;
    public static TimeZoneId SouthAmericaWestern;
    public static TimeZoneId SouthEasternAsia;
    public static TimeZoneId SouthPacific;
    public static TimeZoneId SriLanka;
    public static TimeZoneId Taipei;
    public static TimeZoneId Tasmania;
    public static TimeZoneId Tokyo;
    public static TimeZoneId Tonga;
    public static TimeZoneId Ulaanbaatar;
    public static TimeZoneId USEastern;
    public static TimeZoneId USMountain;
    public static TimeZoneId UTC;
    public static TimeZoneId Venezuela;
    public static TimeZoneId Vladivostok;
    public static TimeZoneId WestAsia;
    public static TimeZoneId WestAustralia;
    public static TimeZoneId WestCentralAfrica;
    public static TimeZoneId WestEurope;
    public static TimeZoneId WestPacific;
    public static TimeZoneId Yakutsk;
    public static TimeZoneId Kaliningrad;
    public static TimeZoneId Salvador;
    public static TimeZoneId Damascus;
}
public enum Xpand.Persistent.Base.JobScheduler.Triggers.TriggerListenerEvent : Enum {
    public int value__;
    public static TriggerListenerEvent Fired;
    public static TriggerListenerEvent Vetoed;
    public static TriggerListenerEvent Complete;
}
public enum Xpand.Persistent.Base.JobScheduler.Triggers.TriggerPriority : Enum {
    public int value__;
    public static TriggerPriority Default;
}
[FlagsAttribute]
public enum Xpand.Persistent.Base.Logic.ExecutionContext : Enum {
    public int value__;
    public static ExecutionContext None;
    public static ExecutionContext ViewChanging;
    public static ExecutionContext ObjectSpaceObjectChanged;
    public static ExecutionContext ObjectSpaceReloaded;
    public static ExecutionContext CurrentObjectChanged;
    public static ExecutionContext ViewControlsCreated;
    public static ExecutionContext ControllerActivated;
    public static ExecutionContext ViewChanged;
    public static ExecutionContext TemplateViewChanged;
    public static ExecutionContext ObjectSpaceCommited;
    public static ExecutionContext CustomProcessSelectedItem;
    public static ExecutionContext ControlsCreating;
    public static ExecutionContext ViewOnSelectionChanged;
    public static ExecutionContext NotifyPropertyObjectChanged;
    public static ExecutionContext ViewShowing;
    public static ExecutionContext CustomizeShowViewParameters;
    public static ExecutionContext ControllerDeActivated;
}
[FlagsAttribute]
public enum Xpand.Persistent.Base.Logic.FrameTemplateContext : Enum {
    public int value__;
    public static FrameTemplateContext All;
    public static FrameTemplateContext PopupWindow;
    public static FrameTemplateContext LookupControl;
    public static FrameTemplateContext LookupWindow;
    public static FrameTemplateContext ApplicationWindow;
    public static FrameTemplateContext NestedFrame;
    public static FrameTemplateContext View;
}
public interface Xpand.Persistent.Base.Logic.ILogicInstaller {
    public List`1<ExecutionContext> ValidExecutionContexts { get; }
    public abstract virtual List`1<ExecutionContext> get_ValidExecutionContexts();
    public abstract virtual IModelLogicWrapper GetModelLogic(IModelApplication applicationModel);
    public abstract virtual IModelLogicWrapper GetModelLogic();
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.Logic.ILogicRule {
    [CategoryAttribute("Logic.Behavior")]
[DescriptionAttribute("Specifies the criteria string which is used when determining whether logic should be executed.")]
[CriteriaOptionsAttribute("TypeInfo")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.CriteriaModelEditorControl, DevExpress.ExpressApp.Win.v24.1, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string NormalCriteria { get; public set; }
    [CategoryAttribute("Logic.Behavior")]
[DescriptionAttribute("Specifies the criteria string which is used when determining whether logic should be executed only used for listviews with no records.")]
[CriteriaOptionsAttribute("TypeInfo")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.CriteriaModelEditorControl, DevExpress.ExpressApp.Win.v24.1, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string EmptyCriteria { get; public set; }
    [CategoryAttribute("Logic.Behavior")]
public Nullable`1<bool> IsNew { get; public set; }
    [CategoryAttribute("Logic.Behavior")]
public Nullable`1<bool> IsRootView { get; public set; }
    [CategoryAttribute("Logic.Behavior")]
[DescriptionAttribute("Specifies the View type in which the current rule is in effect.")]
[RefreshPropertiesAttribute("1")]
public ViewType ViewType { get; public set; }
    [CategoryAttribute("Logic.Behavior")]
[DescriptionAttribute("Specifies the View type in which the current rule is in effect.")]
[DataSourcePropertyAttribute("Views", "Mono.Cecil.CustomAttributeArgument[]")]
public IModelView View { get; public set; }
    [CategoryAttribute("Logic.Behavior")]
[DescriptionAttribute("Specifies the Nesting type in which the current rule is in effect.")]
public Nesting Nesting { get; public set; }
    [CategoryAttribute("Logic.Behavior")]
public Nullable`1<ViewEditMode> ViewEditMode { get; public set; }
    [BrowsableAttribute("False")]
public ITypeInfo TypeInfo { get; public set; }
    public abstract virtual string get_NormalCriteria();
    public abstract virtual void set_NormalCriteria(string value);
    public abstract virtual string get_EmptyCriteria();
    public abstract virtual void set_EmptyCriteria(string value);
    public abstract virtual Nullable`1<bool> get_IsNew();
    public abstract virtual void set_IsNew(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_IsRootView();
    public abstract virtual void set_IsRootView(Nullable`1<bool> value);
    public abstract virtual ViewType get_ViewType();
    public abstract virtual void set_ViewType(ViewType value);
    public abstract virtual IModelView get_View();
    public abstract virtual void set_View(IModelView value);
    public abstract virtual Nesting get_Nesting();
    public abstract virtual void set_Nesting(Nesting value);
    public abstract virtual Nullable`1<ViewEditMode> get_ViewEditMode();
    public abstract virtual void set_ViewEditMode(Nullable`1<ViewEditMode> value);
    public abstract virtual ITypeInfo get_TypeInfo();
    public abstract virtual void set_TypeInfo(ITypeInfo value);
}
public interface Xpand.Persistent.Base.Logic.ILogicRuleObject {
    public string ActionExecutionContextGroup { get; public set; }
    public ExecutionContext ExecutionContext { get; public set; }
    public FrameTemplateContext FrameTemplateContext { get; public set; }
    public HashSet`1<string> Views { get; }
    public HashSet`1<string> ObjectChangedPropertyNames { get; }
    public abstract virtual string get_ActionExecutionContextGroup();
    public abstract virtual void set_ActionExecutionContextGroup(string value);
    public abstract virtual ExecutionContext get_ExecutionContext();
    public abstract virtual void set_ExecutionContext(ExecutionContext value);
    public abstract virtual FrameTemplateContext get_FrameTemplateContext();
    public abstract virtual void set_FrameTemplateContext(FrameTemplateContext value);
    public abstract virtual HashSet`1<string> get_Views();
    public abstract virtual HashSet`1<string> get_ObjectChangedPropertyNames();
}
public interface Xpand.Persistent.Base.Logic.IModelLogicExecutionContextWrapper {
    public IEnumerable`1<IModelExecutionContexts> ExecutionContextsGroup { get; public set; }
    public abstract virtual IEnumerable`1<IModelExecutionContexts> get_ExecutionContextsGroup();
    public abstract virtual void set_ExecutionContextsGroup(IEnumerable`1<IModelExecutionContexts> value);
}
public interface Xpand.Persistent.Base.Logic.IModelLogicWrapper {
    public IEnumerable`1<IModelLogicRule> Rules { get; public set; }
    public IEnumerable`1<IModelActionExecutionContexts> ActionExecutionContextGroup { get; public set; }
    public IEnumerable`1<IModelObjectChangedExecutionContexts> ObjectChangedExecutionContextGroup { get; public set; }
    public IEnumerable`1<IModelViewContexts> ViewContextsGroup { get; public set; }
    public IEnumerable`1<IModelFrameTemplateContexts> FrameTemplateContextsGroup { get; public set; }
    public Type RuleType { get; public set; }
    public abstract virtual IEnumerable`1<IModelLogicRule> get_Rules();
    public abstract virtual void set_Rules(IEnumerable`1<IModelLogicRule> value);
    public abstract virtual IEnumerable`1<IModelActionExecutionContexts> get_ActionExecutionContextGroup();
    public abstract virtual void set_ActionExecutionContextGroup(IEnumerable`1<IModelActionExecutionContexts> value);
    public abstract virtual IEnumerable`1<IModelObjectChangedExecutionContexts> get_ObjectChangedExecutionContextGroup();
    public abstract virtual void set_ObjectChangedExecutionContextGroup(IEnumerable`1<IModelObjectChangedExecutionContexts> value);
    public abstract virtual IEnumerable`1<IModelViewContexts> get_ViewContextsGroup();
    public abstract virtual void set_ViewContextsGroup(IEnumerable`1<IModelViewContexts> value);
    public abstract virtual IEnumerable`1<IModelFrameTemplateContexts> get_FrameTemplateContextsGroup();
    public abstract virtual void set_FrameTemplateContextsGroup(IEnumerable`1<IModelFrameTemplateContexts> value);
    public abstract virtual Type get_RuleType();
    public abstract virtual void set_RuleType(Type value);
}
public interface Xpand.Persistent.Base.Logic.IRule {
    [ModelPersistentNameAttribute("ID")]
[CategoryAttribute("Design")]
[DescriptionAttribute("Read-only. Required. Specifies the current rule identifier.")]
public string Id { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Misc")]
[DescriptionAttribute("Localizable. Specifies the description of the current rule.")]
public string Description { get; public set; }
    public Nullable`1<int> Index { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual Nullable`1<int> get_Index();
    public abstract virtual void set_Index(Nullable`1<int> value);
}
public abstract class Xpand.Persistent.Base.Logic.LogicRule : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ActionExecutionContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ViewEditMode> <ViewEditMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NormalCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EmptyCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsNew>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsRootView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewType <ViewType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelView <View>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nesting <Nesting>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITypeInfo <TypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ExecutionContext <ExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FrameTemplateContext <FrameTemplateContext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private HashSet`1<string> <Views>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private HashSet`1<string> <ObjectChangedPropertyNames>k__BackingField;
    public string ActionExecutionContextGroup { get; public set; }
    public string ID { get; public set; }
    public Nullable`1<ViewEditMode> ViewEditMode { get; public set; }
    public string NormalCriteria { get; public set; }
    public string EmptyCriteria { get; public set; }
    public Nullable`1<bool> IsNew { get; public set; }
    public Nullable`1<bool> IsRootView { get; public set; }
    public ViewType ViewType { get; public set; }
    public IModelView View { get; public set; }
    public Nesting Nesting { get; public set; }
    private string Xpand.Persistent.Base.Logic.IRule.Id { get; private set; }
    public string Description { get; public set; }
    public ITypeInfo TypeInfo { get; public set; }
    public Nullable`1<int> Index { get; public set; }
    public ExecutionContext ExecutionContext { get; public set; }
    public FrameTemplateContext FrameTemplateContext { get; public set; }
    public HashSet`1<string> Views { get; }
    public HashSet`1<string> ObjectChangedPropertyNames { get; }
    protected LogicRule(IContextLogicRule logicRule);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionExecutionContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActionExecutionContextGroup(string value);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ViewEditMode> get_ViewEditMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewEditMode(Nullable`1<ViewEditMode> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NormalCriteria();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NormalCriteria(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EmptyCriteria();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmptyCriteria(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsNew();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNew(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsRootView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsRootView(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual ViewType get_ViewType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewType(ViewType value);
    [CompilerGeneratedAttribute]
public sealed virtual IModelView get_View();
    [CompilerGeneratedAttribute]
public sealed virtual void set_View(IModelView value);
    [CompilerGeneratedAttribute]
public sealed virtual Nesting get_Nesting();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Nesting(Nesting value);
    private sealed virtual override string Xpand.Persistent.Base.Logic.IRule.get_Id();
    private sealed virtual override void Xpand.Persistent.Base.Logic.IRule.set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeInfo get_TypeInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TypeInfo(ITypeInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Index(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual ExecutionContext get_ExecutionContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecutionContext(ExecutionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual FrameTemplateContext get_FrameTemplateContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameTemplateContext(FrameTemplateContext value);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_Views();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_ObjectChangedPropertyNames();
    public virtual string ToString();
}
[AttributeUsageAttribute("68")]
public abstract class Xpand.Persistent.Base.Logic.LogicRuleAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<int> <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NormalCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <EmptyCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsNew>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FrameTemplateContext <FrameTemplateContext>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ViewType <ViewType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<ViewEditMode> <ViewEditMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <View>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelView <Xpand.Persistent.Base.Logic.ILogicRule.View>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nesting <Nesting>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExecutionContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ActionExecutionContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ObjectChangedExecutionContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ViewContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FrameTemplateContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <IsRootView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITypeInfo <Xpand.Persistent.Base.Logic.ILogicRule.TypeInfo>k__BackingField;
    public string Id { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<int> Index { get; public set; }
    public string NormalCriteria { get; public set; }
    public string EmptyCriteria { get; public set; }
    public Nullable`1<bool> IsNew { get; public set; }
    public FrameTemplateContext FrameTemplateContext { get; public set; }
    public ViewType ViewType { get; public set; }
    public Nullable`1<ViewEditMode> ViewEditMode { get; public set; }
    public string View { get; public set; }
    [TypeConverterAttribute("Xpand.Persistent.Base.General.TypeConverters.StringToModelViewConverter")]
private IModelView Xpand.Persistent.Base.Logic.ILogicRule.View { get; private set; }
    public Nesting Nesting { get; public set; }
    public string ExecutionContextGroup { get; public set; }
    public string ActionExecutionContextGroup { get; public set; }
    public string ObjectChangedExecutionContextGroup { get; public set; }
    public string ViewContextGroup { get; public set; }
    public string FrameTemplateContextGroup { get; public set; }
    public Nullable`1<bool> IsRootView { get; public set; }
    private ITypeInfo Xpand.Persistent.Base.Logic.ILogicRule.TypeInfo { get; private set; }
    protected LogicRuleAttribute(string id);
    protected LogicRuleAttribute(string id, string normalCriteria, string emptyCriteria);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Index(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NormalCriteria();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NormalCriteria(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EmptyCriteria();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmptyCriteria(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsNew();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNew(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public FrameTemplateContext get_FrameTemplateContext();
    [CompilerGeneratedAttribute]
public void set_FrameTemplateContext(FrameTemplateContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ViewType get_ViewType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewType(ViewType value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ViewEditMode> get_ViewEditMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewEditMode(Nullable`1<ViewEditMode> value);
    [CompilerGeneratedAttribute]
public string get_View();
    [CompilerGeneratedAttribute]
public void set_View(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override IModelView Xpand.Persistent.Base.Logic.ILogicRule.get_View();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xpand.Persistent.Base.Logic.ILogicRule.set_View(IModelView value);
    [CompilerGeneratedAttribute]
public sealed virtual Nesting get_Nesting();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Nesting(Nesting value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExecutionContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecutionContextGroup(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionExecutionContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActionExecutionContextGroup(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ObjectChangedExecutionContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObjectChangedExecutionContextGroup(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ViewContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewContextGroup(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FrameTemplateContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameTemplateContextGroup(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsRootView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsRootView(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
private sealed virtual override ITypeInfo Xpand.Persistent.Base.Logic.ILogicRule.get_TypeInfo();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xpand.Persistent.Base.Logic.ILogicRule.set_TypeInfo(ITypeInfo value);
}
public class Xpand.Persistent.Base.Logic.Model.ActionExecutionContextGroupVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.Logic.Model.ActionExecutionContextNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.Model.ActionExecutionContextsGroupNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.Model.ConextLogicRuleExecutionContextGroupVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.Logic.Model.FrameTemplateContextGroupVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
[RuleCriteriaAttribute]
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.Logic.Model.IContextLogicRule {
    [DataSourcePropertyAttribute("FrameTemplateContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("Logic.Data")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.Logic.Model.FrameTemplateContextGroupVisibilityCalculator")]
public string FrameTemplateContextGroup { get; public set; }
    [CategoryAttribute("Logic.Data")]
[DataSourcePropertyAttribute("ExecutionContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.Logic.Model.ConextLogicRuleExecutionContextGroupVisibilityCalculator")]
public string ExecutionContextGroup { get; public set; }
    [CategoryAttribute("Logic.Data")]
[DataSourcePropertyAttribute("ActionExecutionContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.Logic.Model.ActionExecutionContextGroupVisibilityCalculator")]
public string ActionExecutionContextGroup { get; public set; }
    [CategoryAttribute("Logic.Data")]
[DataSourcePropertyAttribute("ObjectChangedExecutionContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.Logic.Model.ObjectChangedContextGroupVisibilityCalculator")]
public string ObjectChangedExecutionContextGroup { get; public set; }
    [CategoryAttribute("Logic.Data")]
[DataSourcePropertyAttribute("ViewContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.Logic.Model.ViewContextGroupVisibilityCalculator")]
public string ViewContextGroup { get; public set; }
    public abstract virtual string get_FrameTemplateContextGroup();
    public abstract virtual void set_FrameTemplateContextGroup(string value);
    public abstract virtual string get_ExecutionContextGroup();
    public abstract virtual void set_ExecutionContextGroup(string value);
    public abstract virtual string get_ActionExecutionContextGroup();
    public abstract virtual void set_ActionExecutionContextGroup(string value);
    public abstract virtual string get_ObjectChangedExecutionContextGroup();
    public abstract virtual void set_ObjectChangedExecutionContextGroup(string value);
    public abstract virtual string get_ViewContextGroup();
    public abstract virtual void set_ViewContextGroup(string value);
}
public interface Xpand.Persistent.Base.Logic.Model.ILogicRuleOperationPermissionData {
    public Type ObjectTypeData { get; public set; }
    public string ID { get; public set; }
    public string ViewId { get; public set; }
    public abstract virtual Type get_ObjectTypeData();
    public abstract virtual void set_ObjectTypeData(Type value);
    public abstract virtual string get_ID();
    public abstract virtual void set_ID(string value);
    public abstract virtual string get_ViewId();
    public abstract virtual void set_ViewId(string value);
}
[KeyPropertyAttribute("Name")]
[DisplayPropertyAttribute("Name")]
public interface Xpand.Persistent.Base.Logic.Model.IModelActionExecutionContext {
    [DataSourcePropertyAttribute("ExecutionContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> ExecutionContexts { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IEnumerable`1<string> get_ExecutionContexts();
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.Model.ActionExecutionContextsGroupNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelActionExecutionContextGroup {
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.Model.ActionExecutionContextNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelActionExecutionContexts {
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.Logic.Model.IModelConditionalLogicRule {
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.Logic.Model.IModelConditionalLogicRule`1 {
    [BrowsableAttribute("False")]
public T Attribute { get; public set; }
    public abstract virtual T get_Attribute();
    public abstract virtual void set_Attribute(T value);
}
[KeyPropertyAttribute("Name")]
[DisplayPropertyAttribute("Name")]
public interface Xpand.Persistent.Base.Logic.Model.IModelExecutionContext {
    [DataSourcePropertyAttribute("ExecutionContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> ExecutionContexts { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IEnumerable`1<string> get_ExecutionContexts();
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.NodeGenerators.ExecutionContextNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelExecutionContexts {
    [BrowsableAttribute("False")]
public ExecutionContext ExecutionContext { get; public set; }
    public abstract virtual ExecutionContext get_ExecutionContext();
    public abstract virtual void set_ExecutionContext(ExecutionContext value);
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.NodeGenerators.ExecutionContextsGroupNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelExecutionContextsGroup {
}
[KeyPropertyAttribute("Name")]
[DisplayPropertyAttribute("Name")]
public interface Xpand.Persistent.Base.Logic.Model.IModelFrameTemplateContext {
    [DataSourcePropertyAttribute("FrameTemplateContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> FrameTemplateContexts { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IEnumerable`1<string> get_FrameTemplateContexts();
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.NodeGenerators.FrameTemplateContextNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelFrameTemplateContexts {
    [BrowsableAttribute("False")]
public FrameTemplateContext FrameTemplateContext { get; public set; }
    public abstract virtual FrameTemplateContext get_FrameTemplateContext();
    public abstract virtual void set_FrameTemplateContext(FrameTemplateContext value);
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.NodeGenerators.FrameTemplateContextsGroupNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelFrameTemplateContextsGroup {
}
public interface Xpand.Persistent.Base.Logic.Model.IModelLogicContexts {
    public IModelExecutionContextsGroup ExecutionContextsGroup { get; }
    public IModelActionExecutionContextGroup ActionExecutionContextGroup { get; }
    [ModelBrowsableAttribute("Xpand.Persistent.Base.Logic.Model.ObjectChangedExecutionContextGroupVisibilityCalculator")]
public IModelObjectChangedExecutionContextGroup ObjectChangedExecutionContextGroup { get; }
    public IModelViewContextsGroup ViewContextsGroup { get; }
    public IModelFrameTemplateContextsGroup FrameTemplateContextsGroup { get; }
    public abstract virtual IModelExecutionContextsGroup get_ExecutionContextsGroup();
    public abstract virtual IModelActionExecutionContextGroup get_ActionExecutionContextGroup();
    public abstract virtual IModelObjectChangedExecutionContextGroup get_ObjectChangedExecutionContextGroup();
    public abstract virtual IModelViewContextsGroup get_ViewContextsGroup();
    public abstract virtual IModelFrameTemplateContextsGroup get_FrameTemplateContextsGroup();
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.Logic.Model.IModelLogicRule {
    [ModelPersistentNameAttribute("TypeInfo")]
[DataSourcePropertyAttribute("Application.BOModel", "Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
[DescriptionAttribute("Required. Specifies the business class whose properties are affected by the current rule.")]
[CategoryAttribute("Logic.Data")]
[RefreshPropertiesAttribute("1")]
public IModelClass ModelClass { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<IModelView> Views { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> ActionExecutionContexts { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> ObjectChangedExecutionContexts { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> ExecutionContexts { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> FrameTemplateContexts { get; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> ViewContexts { get; }
    [BrowsableAttribute("False")]
public IModelLogicWrapper ModelLogicWrapper { get; public set; }
    public abstract virtual IModelClass get_ModelClass();
    public abstract virtual void set_ModelClass(IModelClass value);
    public abstract virtual IEnumerable`1<IModelView> get_Views();
    public abstract virtual IEnumerable`1<string> get_ActionExecutionContexts();
    public abstract virtual IEnumerable`1<string> get_ObjectChangedExecutionContexts();
    public abstract virtual IEnumerable`1<string> get_ExecutionContexts();
    public abstract virtual IEnumerable`1<string> get_FrameTemplateContexts();
    public abstract virtual IEnumerable`1<string> get_ViewContexts();
    public abstract virtual IModelLogicWrapper get_ModelLogicWrapper();
    public abstract virtual void set_ModelLogicWrapper(IModelLogicWrapper value);
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.NodeGenerators.LogicRulesNodesGenerator")]
[ObsoleteAttribute]
public interface Xpand.Persistent.Base.Logic.Model.IModelLogicRules {
}
public interface Xpand.Persistent.Base.Logic.Model.IModelObjectChangedExecutionContext {
    public string PropertyNames { get; public set; }
    public string Values { get; public set; }
    public abstract virtual string get_PropertyNames();
    public abstract virtual void set_PropertyNames(string value);
    public abstract virtual string get_Values();
    public abstract virtual void set_Values(string value);
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.Model.ObjectChangedExecutionContextNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelObjectChangedExecutionContextGroup {
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.Model.ObjectChangedExecutionContextsNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelObjectChangedExecutionContexts {
}
[KeyPropertyAttribute("Name")]
[DisplayPropertyAttribute("Name")]
public interface Xpand.Persistent.Base.Logic.Model.IModelViewContext {
    [DataSourcePropertyAttribute("ViewContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> ViewContexts { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IEnumerable`1<string> get_ViewContexts();
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.NodeGenerators.ViewContextNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelViewContexts {
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Logic.NodeGenerators.ViewContextsGroupNodeGenerator")]
public interface Xpand.Persistent.Base.Logic.Model.IModelViewContextsGroup {
}
public class Xpand.Persistent.Base.Logic.Model.InvisibleLogicPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public InvisibleLogicPropertyAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
}
public class Xpand.Persistent.Base.Logic.Model.ObjectChangedContextGroupVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.Logic.Model.ObjectChangedExecutionContextGroupVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.Logic.Model.ObjectChangedExecutionContextNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.Model.ObjectChangedExecutionContextsNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.Model.ViewContextGroupVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.Logic.ModelLogicWrapper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IModelLogicRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IModelExecutionContexts> <ExecutionContextsGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IModelActionExecutionContexts> <ActionExecutionContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IModelObjectChangedExecutionContexts> <ObjectChangedExecutionContextGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IModelViewContexts> <ViewContextsGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<IModelFrameTemplateContexts> <FrameTemplateContextsGroup>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Xpand.Persistent.Base.Logic.IModelLogicWrapper.RuleType>k__BackingField;
    public IEnumerable`1<IModelLogicRule> Rules { get; public set; }
    public IEnumerable`1<IModelExecutionContexts> ExecutionContextsGroup { get; public set; }
    public IEnumerable`1<IModelActionExecutionContexts> ActionExecutionContextGroup { get; public set; }
    public IEnumerable`1<IModelObjectChangedExecutionContexts> ObjectChangedExecutionContextGroup { get; public set; }
    public IEnumerable`1<IModelViewContexts> ViewContextsGroup { get; public set; }
    public IEnumerable`1<IModelFrameTemplateContexts> FrameTemplateContextsGroup { get; public set; }
    private Type Xpand.Persistent.Base.Logic.IModelLogicWrapper.RuleType { get; private set; }
    public ModelLogicWrapper(IEnumerable`1<IModelLogicRule> rules, IModelLogicContexts logicContexts);
    public ModelLogicWrapper(IEnumerable`1<IModelLogicRule> rules, IEnumerable`1<IModelExecutionContexts> executionContextsGroup, IEnumerable`1<IModelObjectChangedExecutionContexts> objectChangedExecutionContextsGroup, IEnumerable`1<IModelViewContexts> viewContextsGroup, IEnumerable`1<IModelFrameTemplateContexts> frameTemplateContextsGroup);
    public ModelLogicWrapper(IEnumerable`1<IModelLogicRule> rules, IEnumerable`1<IModelExecutionContexts> executionContextsGroup, IEnumerable`1<IModelViewContexts> viewContextsGroup, IEnumerable`1<IModelFrameTemplateContexts> frameTemplateContextsGroup);
    public ModelLogicWrapper(IEnumerable`1<IModelLogicRule> rules, IEnumerable`1<IModelExecutionContexts> executionContextsGroup);
    public ModelLogicWrapper(IEnumerable`1<IModelLogicRule> rules, IEnumerable`1<IModelExecutionContexts> executionContextsGroup, IEnumerable`1<IModelObjectChangedExecutionContexts> objectChangedExecutionContextsGroup, IEnumerable`1<IModelActionExecutionContexts> actionExecutionContextGroup, IEnumerable`1<IModelViewContexts> viewContextsGroup, IEnumerable`1<IModelFrameTemplateContexts> frameTemplateContextsGroup);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IModelLogicRule> get_Rules();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Rules(IEnumerable`1<IModelLogicRule> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IModelExecutionContexts> get_ExecutionContextsGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecutionContextsGroup(IEnumerable`1<IModelExecutionContexts> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IModelActionExecutionContexts> get_ActionExecutionContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActionExecutionContextGroup(IEnumerable`1<IModelActionExecutionContexts> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IModelObjectChangedExecutionContexts> get_ObjectChangedExecutionContextGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObjectChangedExecutionContextGroup(IEnumerable`1<IModelObjectChangedExecutionContexts> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IModelViewContexts> get_ViewContextsGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewContextsGroup(IEnumerable`1<IModelViewContexts> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IModelFrameTemplateContexts> get_FrameTemplateContextsGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FrameTemplateContextsGroup(IEnumerable`1<IModelFrameTemplateContexts> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Type Xpand.Persistent.Base.Logic.IModelLogicWrapper.get_RuleType();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xpand.Persistent.Base.Logic.IModelLogicWrapper.set_RuleType(Type value);
}
public class Xpand.Persistent.Base.Logic.NodeGenerators.ExecutionContextNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.NodeGenerators.ExecutionContextsGroupNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.NodeGenerators.FrameTemplateContextNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.NodeGenerators.FrameTemplateContextsGroupNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.NodeGenerators.LogicRulesNodesGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.NodeGenerators.ViewContextNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Logic.NodeGenerators.ViewContextsGroupNodeGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public interface Xpand.Persistent.Base.MasterDetail.IContextMasterDetailRule {
}
public interface Xpand.Persistent.Base.MasterDetail.IMasterDetailOperationPermissionData {
    public string ChildListView { get; public set; }
    public string CollectionMember { get; public set; }
    public abstract virtual string get_ChildListView();
    public abstract virtual void set_ChildListView(string value);
    public abstract virtual string get_CollectionMember();
    public abstract virtual void set_CollectionMember(string value);
}
public interface Xpand.Persistent.Base.MasterDetail.IMasterDetailRule {
    [DataSourcePropertyAttribute("ChildListViews", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("MasterDetail")]
[RequiredAttribute]
public IModelListView ChildListView { get; public set; }
    [CategoryAttribute("MasterDetail")]
[RequiredAttribute]
[DescriptionAttribute("The collection member that is going to be used as child collection")]
[DataSourcePropertyAttribute("CollectionMembers", "Mono.Cecil.CustomAttributeArgument[]")]
[RefreshPropertiesAttribute("1")]
public IModelMember CollectionMember { get; public set; }
    public abstract virtual IModelListView get_ChildListView();
    public abstract virtual void set_ChildListView(IModelListView value);
    public abstract virtual IModelMember get_CollectionMember();
    public abstract virtual void set_CollectionMember(IModelMember value);
}
public class Xpand.Persistent.Base.MasterDetail.MasterDetailAttribute : LogicRuleAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ChildListView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelListView <Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.ChildListView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CollectionMember>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelMember <Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.CollectionMember>k__BackingField;
    public string ChildListView { get; public set; }
    [TypeConverterAttribute("Xpand.Persistent.Base.General.TypeConverters.StringToModelViewConverter")]
private IModelListView Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.ChildListView { get; private set; }
    public string CollectionMember { get; public set; }
    [TypeConverterAttribute("Xpand.Persistent.Base.General.TypeConverters.StringToModelMemberConverter")]
private IModelMember Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.CollectionMember { get; private set; }
    public MasterDetailAttribute(string id, string normalCriteria, string childListView, string collectionMember);
    [CompilerGeneratedAttribute]
public string get_ChildListView();
    [CompilerGeneratedAttribute]
public void set_ChildListView(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override IModelListView Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.get_ChildListView();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.set_ChildListView(IModelListView value);
    [CompilerGeneratedAttribute]
public string get_CollectionMember();
    [CompilerGeneratedAttribute]
public void set_CollectionMember(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override IModelMember Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.get_CollectionMember();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xpand.Persistent.Base.MasterDetail.IMasterDetailRule.set_CollectionMember(IModelMember value);
}
public interface Xpand.Persistent.Base.MemberLevelSecurity.IMemberLevelSecurityModule {
}
public class Xpand.Persistent.Base.MessageBox.GenericMessageBox : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MessageBoxEventHandler LocalAccept;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler LocalCancel;
    public GenericMessageBox(ShowViewParameters svp, XafApplication app, string message, MessageBoxEventHandler accept, EventHandler cancel);
    public GenericMessageBox(ShowViewParameters svp, XafApplication app, string message, MessageBoxEventHandler accept);
    public GenericMessageBox(ShowViewParameters svp, XafApplication app, string message);
    [CompilerGeneratedAttribute]
private void add_LocalAccept(MessageBoxEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_LocalAccept(MessageBoxEventHandler value);
    [CompilerGeneratedAttribute]
private void add_LocalCancel(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_LocalCancel(EventHandler value);
    private void AttachDialogController(ShowViewParameters svp, XafApplication app, MessageBoxEventHandler accept, EventHandler cancel);
    private void AttachDialogController(ShowViewParameters svp, XafApplication app, MessageBoxEventHandler accept);
    private void AttachDialogController(ShowViewParameters svp, XafApplication app);
    private static void CreateDetailView(ShowViewParameters svp, XafApplication app, string message);
    private void AcceptAction_Execute(object sender, SimpleActionExecuteEventArgs e);
    private void dc_Cancelling(object sender, EventArgs e);
}
[NonPersistentAttribute]
public class Xpand.Persistent.Base.MessageBox.MessageBoxTextMessage : object {
    private string _message;
    [ModelDefaultAttribute("Caption", " ")]
[SizeAttribute("-1")]
public string Message { get; }
    public MessageBoxTextMessage(string message);
    public string get_Message();
}
public class Xpand.Persistent.Base.MiddleTier.XpandServerApplication : ServerApplication {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<WindowCreatingEventArgs> WindowCreating;
    private string Xpand.Persistent.Base.General.IXafApplication.ModelAssemblyFilePath { get; }
    public XpandServerApplication(ISecurityStrategyBase securityStrategy);
    protected virtual void OnSetupComplete();
    protected virtual void CreateDefaultObjectSpaceProvider(CreateCustomObjectSpaceProviderEventArgs args);
    protected virtual void OnDatabaseVersionMismatch(DatabaseVersionMismatchEventArgs args);
    private sealed virtual override void Xpand.Persistent.Base.General.IXafApplication.WriteLastLogonParameters(DetailView view, object logonObject);
    private sealed virtual override string Xpand.Persistent.Base.General.IXafApplication.get_ModelAssemblyFilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void add_WindowCreating(EventHandler`1<WindowCreatingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WindowCreating(EventHandler`1<WindowCreatingEventArgs> value);
    protected virtual void OnWindowCreating(WindowCreatingEventArgs e);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.MiddleTier.XpandWcfDataServerHelper : object {
    public static void AddKnownTypes();
    public static void AddKnownTypes(string modulePath);
    [ExtensionAttribute]
public static void AddKnownTypesForAll(XpandServerApplication serverApplication);
    [ExtensionAttribute]
public static void AddKnownTypesForAll(ITypesInfo typesInfo);
    private static void AddKnownTypesFor(ITypesInfo typesInfo);
}
public class Xpand.Persistent.Base.ModelAdapter.DynamicModelPropertyInfo : PropertyInfo {
    private List`1<object> _attributesCore;
    private PropertyInfo _targetPropertyInfo;
    private Type _propertyType;
    private string _name;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CanWrite>k__BackingField;
    public string Name { get; }
    public Type PropertyType { get; }
    public Type DeclaringType { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public PropertyAttributes Attributes { get; }
    public Type ReflectedType { get; }
    public DynamicModelPropertyInfo(string name, Type propertyType, Type declaringType, bool canRead, bool canWrite, PropertyInfo targetPropertyInfo);
    public virtual string get_Name();
    public virtual Type get_PropertyType();
    [CompilerGeneratedAttribute]
public virtual Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public virtual bool get_CanRead();
    [CompilerGeneratedAttribute]
public virtual bool get_CanWrite();
    public virtual PropertyAttributes get_Attributes();
    public virtual Type get_ReflectedType();
    public virtual string ToString();
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public void SetName(string name);
    public void SetPropertyType(Type type);
    public void RemoveAttribute(Attribute attribute);
    public void AddAttribute(Attribute attribute);
    public void RemoveInvalidTypeConverterAttributes(string nameSpace);
    public void RemoveAttributes(Type type);
}
public enum Xpand.Persistent.Base.ModelAdapter.FileLocation : Enum {
    public int value__;
    public static FileLocation None;
    public static FileLocation ApplicationFolder;
    public static FileLocation CurrentUserApplicationDataFolder;
}
public class Xpand.Persistent.Base.ModelAdapter.FontBuilder : object {
    private IModelAppearanceFont _modelAppearanceFont;
    private Font _font;
    public IModelNode ModelAppearanceFont { get; }
    public FontBuilder(IModelAppearanceFont modelAppearanceFont, Font font);
    public IModelNode get_ModelAppearanceFont();
    public Font GetFont();
    private FontStyle GetFontStyle();
    private object GetNodeValue(string name, string propertyName);
    protected virtual object GetNodeValueCore(IModelNode modelNode, string name);
}
internal class Xpand.Persistent.Base.ModelAdapter.FontBuilderSynch : FontBuilder {
    private Func`3<ModelNode, ModelValueInfo, object> _getApplyModelNodeValue;
    public FontBuilderSynch(IModelAppearanceFont modelAppearanceFont, Font font, Func`3<ModelNode, ModelValueInfo, object> getApplyModelNodeValue);
    protected virtual object GetNodeValueCore(IModelNode modelNode, string name);
}
public class Xpand.Persistent.Base.ModelAdapter.FontPropertyDescriptor : PropertyDescriptor {
    private Func`3<ModelNode, ModelValueInfo, object> _getApplyModelNodeValue;
    private ModelNode _modelNode;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public FontPropertyDescriptor(string name, Attribute[] attrs, Func`3<ModelNode, ModelValueInfo, object> getApplyModelNodeValue, ModelNode modelNode);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
}
public enum Xpand.Persistent.Base.ModelAdapter.GraphicsUnit : Enum {
    public int value__;
    public static GraphicsUnit World;
    public static GraphicsUnit Display;
    public static GraphicsUnit Pixel;
    public static GraphicsUnit Point;
    public static GraphicsUnit Inch;
    public static GraphicsUnit Document;
    public static GraphicsUnit Millimeter;
}
public interface Xpand.Persistent.Base.ModelAdapter.IModelAppearanceFont {
    [DataSourcePropertyAttribute("FontNames", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("Font")]
public string FontName { get; public set; }
    [CategoryAttribute("Font")]
public Nullable`1<float> Size { get; public set; }
    [CategoryAttribute("Font")]
public Nullable`1<bool> Bold { get; public set; }
    [CategoryAttribute("Font")]
public Nullable`1<GraphicsUnit> Unit { get; public set; }
    [CategoryAttribute("Font")]
public Nullable`1<bool> Underline { get; public set; }
    [CategoryAttribute("Font")]
public Nullable`1<bool> Strikeout { get; public set; }
    [CategoryAttribute("Font")]
public Nullable`1<bool> Italic { get; public set; }
    [BrowsableAttribute("False")]
public IEnumerable`1<string> FontNames { get; }
    public abstract virtual string get_FontName();
    public abstract virtual void set_FontName(string value);
    public abstract virtual Nullable`1<float> get_Size();
    public abstract virtual void set_Size(Nullable`1<float> value);
    public abstract virtual Nullable`1<bool> get_Bold();
    public abstract virtual void set_Bold(Nullable`1<bool> value);
    public abstract virtual Nullable`1<GraphicsUnit> get_Unit();
    public abstract virtual void set_Unit(Nullable`1<GraphicsUnit> value);
    public abstract virtual Nullable`1<bool> get_Underline();
    public abstract virtual void set_Underline(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_Strikeout();
    public abstract virtual void set_Strikeout(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_Italic();
    public abstract virtual void set_Italic(Nullable`1<bool> value);
    public abstract virtual IEnumerable`1<string> get_FontNames();
}
public interface Xpand.Persistent.Base.ModelAdapter.IModelNodeEnabled {
    [DefaultValueAttribute("True")]
[CategoryAttribute("Activation")]
public bool NodeEnabled { get; public set; }
    [BrowsableAttribute("False")]
public IModelObjectView ParentObjectView { get; }
    public abstract virtual bool get_NodeEnabled();
    public abstract virtual void set_NodeEnabled(bool value);
    public abstract virtual IModelObjectView get_ParentObjectView();
}
public class Xpand.Persistent.Base.ModelAdapter.InterfaceBuilder : object {
    private ModelInterfaceExtenders _extenders;
    private List`1<Type> _usingTypes;
    private static Nullable`1<bool> _runtimeMode;
    private static bool _skipAssemblyCleanup;
    public static bool RuntimeMode { get; public set; }
    public ModelInterfaceExtenders Extenders { get; }
    public static bool ExternalModelEditor { get; }
    public static bool SkipAssemblyCleanup { get; public set; }
    public static bool IsDevMachine { get; }
    public static bool IsDBUpdater { get; }
    public InterfaceBuilder(ModelInterfaceExtenders extenders);
    public static bool get_RuntimeMode();
    public static void set_RuntimeMode(bool value);
    public ModelInterfaceExtenders get_Extenders();
    public static bool get_ExternalModelEditor();
    public static bool get_SkipAssemblyCleanup();
    public static void set_SkipAssemblyCleanup(bool value);
    public static bool get_IsDevMachine();
    public static bool get_IsDBUpdater();
    private string TypeToString(Type type);
    public void ExtendInterface(Type targetType, Type extenderType, Assembly assembly);
    public Type CalcType(Type extenderType, Assembly assembly);
    private bool AttributeLocatorMatches(Type extenderType, Type type1);
    private bool AttributeMatch(Type extenderType, Attribute attribute);
    public void ExtendInterface(Assembly assembly);
    public string GeneratedDisplayNameCode(string arg3);
}
public class Xpand.Persistent.Base.ModelAdapter.InterfaceBuilderData : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<DynamicModelPropertyInfo, bool> <Act>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <BaseInterface>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Type> <ReferenceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <RootBaseInterface>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAbstract>k__BackingField;
    public Type ComponentType { get; }
    public Func`2<DynamicModelPropertyInfo, bool> Act { get; public set; }
    [DescriptionAttribute("The interface from which all autogenerated interfaces derive. Default is the IModelNodeEnabled")]
public Type BaseInterface { get; public set; }
    public List`1<Type> ReferenceTypes { get; }
    public Type RootBaseInterface { get; public set; }
    public bool IsAbstract { get; public set; }
    public InterfaceBuilderData(Type componentType);
    [CompilerGeneratedAttribute]
public Type get_ComponentType();
    [CompilerGeneratedAttribute]
public Func`2<DynamicModelPropertyInfo, bool> get_Act();
    [CompilerGeneratedAttribute]
public void set_Act(Func`2<DynamicModelPropertyInfo, bool> value);
    [CompilerGeneratedAttribute]
public Type get_BaseInterface();
    [CompilerGeneratedAttribute]
public void set_BaseInterface(Type value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ReferenceTypes();
    [CompilerGeneratedAttribute]
public Type get_RootBaseInterface();
    [CompilerGeneratedAttribute]
public void set_RootBaseInterface(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsAbstract();
    [CompilerGeneratedAttribute]
public void set_IsAbstract(bool value);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.ModelAdapter.InterfaceBuilderExtensions : object {
    public static HashSet`1<string> ExcludedReservedNames;
    private static InterfaceBuilderExtensions();
    [ExtensionAttribute]
public static Type MakeNullAble(Type generic, Type[] args);
    [ExtensionAttribute]
public static bool FilterAttributes(DynamicModelPropertyInfo info, Type[] attributes);
    [ExtensionAttribute]
public static bool Filter(DynamicModelPropertyInfo info, Type componentBaseType, Type[] filteredPropertyBaseTypes, Type[] attributes);
    private static bool FilterCore(DynamicModelPropertyInfo info, Type componentBaseType, IEnumerable`1<Type> filteredPropertyBaseTypes);
    [ExtensionAttribute]
public static bool IsValidEnum(Type propertyType, object value);
    [ExtensionAttribute]
public static bool IsStruct(Type type);
    [ExtensionAttribute]
public static bool IsBrowseAble(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool BehaveLikeValueType(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetValidProperties(Type type, Type[] attributes);
    [ExtensionAttribute]
private static bool HasAttributes(PropertyInfo propertyInfo, Type[] attributes);
    private static bool IsValidProperty(PropertyInfo info);
    private static bool IsObsolete(PropertyInfo info);
    [ExtensionAttribute]
public static void SetBrowsable(DynamicModelPropertyInfo info, Dictionary`2<string, bool> propertyNames);
    [ExtensionAttribute]
public static void SetCategory(DynamicModelPropertyInfo info, Dictionary`2<string, string> propertyNames);
    [ExtensionAttribute]
public static void CreateValueCalculator(DynamicModelPropertyInfo info, IModelValueCalculator modelValueCalculator);
    [ExtensionAttribute]
public static void CreateValueCalculator(DynamicModelPropertyInfo info, string expressionPath);
    private static void CreateValueCalculatorCore(DynamicModelPropertyInfo info);
    [ExtensionAttribute]
public static void SetDefaultValues(DynamicModelPropertyInfo info, Dictionary`2<string, object> propertyNames);
}
public class Xpand.Persistent.Base.ModelAdapter.MapModelReadOnlyCalculator : object {
    public sealed virtual bool IsReadOnly(IModelNode node, string propertyName);
    public sealed virtual bool IsReadOnly(IModelNode node, IModelNode childNode);
    public bool IsReadOnly(IModelNode node);
}
public class Xpand.Persistent.Base.ModelAdapter.MapModelValueCalculator : object {
    public sealed virtual object Calculate(ModelNode node, string propertyName);
}
public enum Xpand.Persistent.Base.ModelAdapter.ModelAdapterAlias : Enum {
    public int value__;
    public static ModelAdapterAlias ASPxDateEditControl;
    public static ModelAdapterAlias DashboardViewEditor;
    public static ModelAdapterAlias DashboardViewer;
    public static ModelAdapterAlias HtmlEditor;
    public static ModelAdapterAlias ASPxHyperLinkControl;
    public static ModelAdapterAlias ASPxLookupDropDownEditControl;
    public static ModelAdapterAlias ASPxLookupFindEditControl;
    public static ModelAdapterAlias ASPxSearchDropDownEditControl;
    public static ModelAdapterAlias ASPxSpinEditControl;
    public static ModelAdapterAlias RepositoryItemBaseSpinEdit;
    public static ModelAdapterAlias RepositoryItemBlobBaseEdit;
    public static ModelAdapterAlias RepositoryItemButtonEdit;
    public static ModelAdapterAlias RepositoryItemCalcEdit;
    public static ModelAdapterAlias RepositoryItemCheckedComboBoxEdit;
    public static ModelAdapterAlias RepositoryItemCheckEdit;
    public static ModelAdapterAlias RepositoryItemColorEdit;
    public static ModelAdapterAlias RepositoryItemColorPickEdit;
    public static ModelAdapterAlias RepositoryItemColorComboBox;
    public static ModelAdapterAlias RepositoryItemDateEdit;
    public static ModelAdapterAlias RepositoryItemFontEdit;
    public static ModelAdapterAlias RepositoryItemHyperLinkEdit;
    public static ModelAdapterAlias RepositoryItemImageComboBox;
    public static ModelAdapterAlias RepositoryItemImageEdit;
    public static ModelAdapterAlias RepositoryItemLookUpEdit;
    public static ModelAdapterAlias RepositoryItemLookUpEditBase;
    public static ModelAdapterAlias RepositoryItemMarqueeProgressBar;
    public static ModelAdapterAlias RepositoryItemMemoEdit;
    public static ModelAdapterAlias RepositoryItemMemoExEdit;
    public static ModelAdapterAlias RepositoryItemMRUEdit;
    public static ModelAdapterAlias RepositoryItemObjectEdit;
    public static ModelAdapterAlias RepositoryItemPictureEdit;
    public static ModelAdapterAlias RepositoryItemPopupBase;
    public static ModelAdapterAlias RepositoryItemPopupBaseAutoSearchEdit;
    public static ModelAdapterAlias RepositoryItemPopupContainerEdit;
    public static ModelAdapterAlias RepositoryItemPopupCriteriaEdit;
    public static ModelAdapterAlias RepositoryItemPopupExpressionEdit;
    public static ModelAdapterAlias RepositoryItemPopupProgressEdit;
    public static ModelAdapterAlias RepositoryItemProtectedContextTextEdit;
    public static ModelAdapterAlias RepositoryItemRadioGroup;
    public static ModelAdapterAlias RepositoryItemRangeTrackBar;
    public static ModelAdapterAlias RepositoryItemRtfEditEx;
    public static ModelAdapterAlias RepositoryItemSpinEdit;
    public static ModelAdapterAlias RepositoryItemTextEdit;
    public static ModelAdapterAlias RepositoryItemTimeEdit;
    public static ModelAdapterAlias RepositoryItemTrackBar;
    public static ModelAdapterAlias RepositoryItemZoomTrackBar;
    public static ModelAdapterAlias RichEdit;
    public static ModelAdapterAlias LabelControl;
    public static ModelAdapterAlias FilterControl;
    public static ModelAdapterAlias LayoutControlGroup;
    public static ModelAdapterAlias UploadControl;
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.ModelAdapter.ModelAdapterAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ModelAdapterAlias <Adapter>k__BackingField;
    public ModelAdapterAlias Adapter { get; }
    public ModelAdapterAttribute(ModelAdapterAlias adapter);
    [CompilerGeneratedAttribute]
public ModelAdapterAlias get_Adapter();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.ModelAdapter.ModelAdapterExtension : object {
    [ExtensionAttribute]
public static ModelNode GetNodeByPath(IModelNode node, string path);
}
[DomainLogicAttribute("Xpand.Persistent.Base.ModelAdapter.IModelAppearanceFont")]
public class Xpand.Persistent.Base.ModelAdapter.ModelAppearanceFontLogic : object {
    public static IEnumerable`1<string> Get_FontNames(IModelAppearanceFont appearanceFont);
}
public abstract class Xpand.Persistent.Base.ModelAdapter.ModelListSynchronizer : ModelSynchronizer {
    private ModelSynchronizerList _modelSynchronizerList;
    public ModelSynchronizerList ModelSynchronizerList { get; }
    protected ModelListSynchronizer(object control, IModelNode model);
    protected virtual void ApplyModelCore();
    public virtual void SynchronizeModel();
    public ModelSynchronizerList get_ModelSynchronizerList();
    public virtual void Dispose();
}
[DomainLogicAttribute("Xpand.Persistent.Base.ModelAdapter.IModelNodeEnabled")]
public class Xpand.Persistent.Base.ModelAdapter.ModelNodeEnabledDomainLogic : object {
    public static IModelObjectView Get_ParentObjectView(IModelNodeEnabled modelNodeEnabled);
}
public abstract class Xpand.Persistent.Base.ModelAdapter.ModelSynchronizer`2 : ModelSynchronizer`2<TComponent, TModelNode> {
    public static HashSet`1<string> ExcludedNodeMembers;
    protected ModelSynchronizer`2(TComponent component, TModelNode modelNode);
    private static ModelSynchronizer`2();
    protected void SynchronizeValues(ModelNode modelNode, object component, PropertyDescriptorCollection properties);
    protected virtual object GetSynchronizeValuesNodeValue(ModelNode modelNode, ModelValueInfo valueInfo, PropertyDescriptor propertyDescriptor, bool isNullableType, object component);
    protected virtual object GetPropertyValue(object component, PropertyDescriptor propertyDescriptor, ModelValueInfo valueInfo, ModelNode modelNode);
    protected virtual bool IsDefaultValue(object value, PropertyDescriptor propertyDescriptor);
    protected void ApplyModel(IModelNode node, object component, Action`3<ModelNode, object, PropertyDescriptorCollection> action);
    protected virtual void CheckComponentType(object component);
    protected void ApplyValues(ModelNode node, object component, PropertyDescriptorCollection properties);
    protected virtual PropertyDescriptor GetPropertyDescriptor(PropertyDescriptorCollection properties, ModelValueInfo valueInfo, object component, ModelNode node);
    protected virtual object GetApplyModelNodeValue(ModelNode node, ModelValueInfo valueInfo);
    protected object PropertyDefaultValue(object value, ModelNode node, PropertyDescriptor propertyDescriptor, ModelValueInfo valueInfo, object component);
    private object NodeRealValueCore(ModelValueInfo valueInfo, ModelNode node);
    protected virtual object GetNodeValueCore(ModelNode node, ModelValueInfo valueInfo);
    protected virtual IEnumerable`1<ModelValueInfo> GetModelValueInfos(IModelNode modelNode);
    private bool IsDisabled(IModelNode modelNode);
    private bool IsNotExcluded(ModelValueInfo info);
    protected virtual bool IsDefaultCoreValue(object value, Type propertyType);
}
public class Xpand.Persistent.Base.ModelAdapter.ModelSynchronizerList : List`1<IModelSynchronizable> {
    public sealed virtual void ApplyModel();
    public virtual void Dispose();
    public sealed virtual void SynchronizeModel();
}
public class Xpand.Persistent.Base.ModelAdapter.ModelValueCalculatorWrapperAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <CalculatorType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LinkValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NodeTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    public Type CalculatorType { get; }
    public string LinkValue { get; }
    public string NodeName { get; }
    public string NodeTypeName { get; }
    public string PropertyName { get; }
    public ModelValueCalculatorWrapperAttribute(Type calculatorType);
    public ModelValueCalculatorWrapperAttribute(ModelValueCalculatorAttribute modelValueCalculatorAttribute, Type calculatorType);
    [CompilerGeneratedAttribute]
public Type get_CalculatorType();
    [CompilerGeneratedAttribute]
public string get_LinkValue();
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public string get_NodeTypeName();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
}
internal class Xpand.Persistent.Base.ModelAdapter.ParentCalculator : object {
    public static ModelNode GetParent(IModelNode node);
}
public enum Xpand.Persistent.Base.ModelArtifact.ActionState : Enum {
    public int value__;
    public static ActionState Default;
    public static ActionState Disabled;
    public static ActionState Hidden;
    public static ActionState Executed;
    public static ActionState ExecutedAndDisable;
    public static ActionState ForceActive;
}
public class Xpand.Persistent.Base.ModelArtifact.ActionStateRuleActionIdRequiredCalculator : object {
    public sealed virtual bool IsRequired(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.ModelArtifact.ActionStateRuleAttribute : ArtifactStateRuleAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ActionState <ActionState>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ActionContext>k__BackingField;
    public string ActionId { get; public set; }
    public ActionState ActionState { get; public set; }
    public string ActionContext { get; public set; }
    public ActionStateRuleAttribute(string id, string actionId, string normalCriteria, string emptyCriteria, ActionState actionState);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ActionState get_ActionState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActionState(ActionState value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActionContext(string value);
}
public abstract class Xpand.Persistent.Base.ModelArtifact.ArtifactStateRuleAttribute : LogicRuleAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Module>k__BackingField;
    public string Module { get; public set; }
    protected ArtifactStateRuleAttribute(string id, string normalCriteria, string emptyCriteria);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Module();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Module(string value);
}
public class Xpand.Persistent.Base.ModelArtifact.ContextActionStateRuleActionContextRequiredCalculator : object {
    public sealed virtual bool IsRequired(IModelNode node, string propertyName);
}
public enum Xpand.Persistent.Base.ModelArtifact.ControllerState : Enum {
    public int value__;
    public static ControllerState Default;
    public static ControllerState Disabled;
    public static ControllerState Enabled;
    public static ControllerState Register;
}
public class Xpand.Persistent.Base.ModelArtifact.ControllerStateRuleAttribute : ArtifactStateRuleAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ControllerState <ControllerState>k__BackingField;
    public Type ControllerType { get; public set; }
    public ControllerState ControllerState { get; public set; }
    public ControllerStateRuleAttribute(string id, Type controllerType, string normalCriteria, string emptyCriteria, ControllerState state);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ControllerType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ControllerType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual ControllerState get_ControllerState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ControllerState(ControllerState value);
}
public class Xpand.Persistent.Base.ModelArtifact.ControllerStateRuleControllerTypeRequiredCalculator : object {
    public sealed virtual bool IsRequired(IModelNode node, string propertyName);
}
public interface Xpand.Persistent.Base.ModelArtifact.IActionStateRule {
    [RequiredAttribute("Xpand.Persistent.Base.ModelArtifact.ActionStateRuleActionIdRequiredCalculator")]
[DataSourcePropertyAttribute("Actions", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("Data")]
public string ActionId { get; public set; }
    [CategoryAttribute("Behavior")]
public ActionState ActionState { get; public set; }
    public abstract virtual string get_ActionId();
    public abstract virtual void set_ActionId(string value);
    public abstract virtual ActionState get_ActionState();
    public abstract virtual void set_ActionState(ActionState value);
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.ModelArtifact.IArtifactStateRule {
    [CategoryAttribute("Data")]
[DescriptionAttribute("Regex")]
public string Module { get; public set; }
    public abstract virtual string get_Module();
    public abstract virtual void set_Module(string value);
}
public interface Xpand.Persistent.Base.ModelArtifact.IContextActionStateRule {
    [DataSourcePropertyAttribute("ActionContexts", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("Data")]
[RequiredAttribute("Xpand.Persistent.Base.ModelArtifact.ContextActionStateRuleActionContextRequiredCalculator")]
public string ActionContext { get; public set; }
    public abstract virtual string get_ActionContext();
    public abstract virtual void set_ActionContext(string value);
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.ModelArtifact.IContextArtifactStateRule {
}
public interface Xpand.Persistent.Base.ModelArtifact.IContextControllerStateRule {
}
public interface Xpand.Persistent.Base.ModelArtifact.IContextObjectViewRule {
}
public interface Xpand.Persistent.Base.ModelArtifact.IControllerStateRule {
    [CategoryAttribute("Data")]
[RequiredAttribute("Xpand.Persistent.Base.ModelArtifact.ControllerStateRuleControllerTypeRequiredCalculator")]
[DataSourcePropertyAttribute("Controllers", "Mono.Cecil.CustomAttributeArgument[]")]
[TypeConverterAttribute("DevExpress.ExpressApp.Model.Core.StringToTypeConverter")]
public Type ControllerType { get; public set; }
    [CategoryAttribute("Behavior")]
[ModelPersistentNameAttribute("State")]
public ControllerState ControllerState { get; public set; }
    public abstract virtual Type get_ControllerType();
    public abstract virtual void set_ControllerType(Type value);
    public abstract virtual ControllerState get_ControllerState();
    public abstract virtual void set_ControllerState(ControllerState value);
}
public interface Xpand.Persistent.Base.ModelArtifact.IObjectViewRule {
    [DataSourcePropertyAttribute("ObjectViews", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("Data")]
[RequiredAttribute]
public IModelObjectView ObjectView { get; public set; }
    public abstract virtual IModelObjectView get_ObjectView();
    public abstract virtual void set_ObjectView(IModelObjectView value);
}
public class Xpand.Persistent.Base.ModelArtifact.ObjectViewRuleAttribute : LogicRuleAttribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ObjectView>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelObjectView <Xpand.Persistent.Base.ModelArtifact.IObjectViewRule.ObjectView>k__BackingField;
    public string ObjectView { get; public set; }
    [TypeConverterAttribute("Xpand.Persistent.Base.General.TypeConverters.StringToModelViewConverter")]
private IModelObjectView Xpand.Persistent.Base.ModelArtifact.IObjectViewRule.ObjectView { get; private set; }
    public ObjectViewRuleAttribute(string id, string normalCriteria, string emptyCriteria, string objectView);
    [CompilerGeneratedAttribute]
public string get_ObjectView();
    [CompilerGeneratedAttribute]
public void set_ObjectView(string value);
    [CompilerGeneratedAttribute]
private sealed virtual override IModelObjectView Xpand.Persistent.Base.ModelArtifact.IObjectViewRule.get_ObjectView();
    [CompilerGeneratedAttribute]
private sealed virtual override void Xpand.Persistent.Base.ModelArtifact.IObjectViewRule.set_ObjectView(IModelObjectView value);
}
public enum Xpand.Persistent.Base.ModelDifference.ApplicationModelCombineModifier : Enum {
    public int value__;
    public static ApplicationModelCombineModifier Allow;
    public static ApplicationModelCombineModifier Deny;
}
public class Xpand.Persistent.Base.ModelDifference.AspectInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Xml>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AspectName>k__BackingField;
    public string Xml { get; public set; }
    public string AspectName { get; public set; }
    public AspectInfo(string xml, string aspectName);
    [CompilerGeneratedAttribute]
public string get_Xml();
    [CompilerGeneratedAttribute]
public void set_Xml(string value);
    [CompilerGeneratedAttribute]
public string get_AspectName();
    [CompilerGeneratedAttribute]
public void set_AspectName(string value);
}
public enum Xpand.Persistent.Base.ModelDifference.DeviceCategory : Enum {
    public int value__;
    public static DeviceCategory All;
    public static DeviceCategory Desktop;
    public static DeviceCategory Tablet;
    public static DeviceCategory Mobile;
}
public interface Xpand.Persistent.Base.ModelDifference.IAdditionalModuleProvider {
    public abstract virtual void AddAdditionalModules(ApplicationModulesManager applicationModulesManager);
}
public interface Xpand.Persistent.Base.ModelDifference.IModelCombinePermission {
    public ApplicationModelCombineModifier Modifier { get; public set; }
    public string Difference { get; public set; }
    public abstract virtual ApplicationModelCombineModifier get_Modifier();
    public abstract virtual void set_Modifier(ApplicationModelCombineModifier value);
    public abstract virtual string get_Difference();
    public abstract virtual void set_Difference(string value);
}
public abstract class Xpand.Persistent.Base.ModelDifference.ModelApplicationFromStreamStoreBase : object {
    public string Name { get; }
    public virtual void Load(ModelApplicationBase model);
    protected virtual string GetAspect();
    public virtual string get_Name();
    public virtual void Load(ModelApplicationBase model, string aspect);
    protected abstract virtual Stream GetStream();
}
internal class Xpand.Persistent.Base.ModelDifference.ModelBuilder : object {
    private string _assembliesPath;
    private XafApplication _application;
    private ITypesInfo _typesInfo;
    private string _moduleName;
    private XpandApplicationModulesManager _modulesManager;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <SkipModelAssemblyFile>k__BackingField;
    public static bool SkipModelAssemblyFile { get; public set; }
    private IEnumerable`1<string> GetAspects(string configFileName);
    public static ModelBuilder Create();
    private string GetConfigPath();
    private String[] GetModulesFromConfig(XafApplication application);
    private ModelApplicationBase BuildModel(XafApplication application, string configFileName, XpandApplicationModulesManager applicationModulesManager);
    [CompilerGeneratedAttribute]
public static bool get_SkipModelAssemblyFile();
    [CompilerGeneratedAttribute]
public static void set_SkipModelAssemblyFile(bool value);
    private XpandApplicationModulesManager CreateModulesManager(XafApplication application, string configFileName, string assembliesPath, ITypesInfo typesInfo);
    public ModelBuilder WithApplication(XafApplication xafApplication);
    public ModelApplicationBase Build(bool rebuild);
    public ModelBuilder UsingTypesInfo(ITypesInfo typesInfo);
    public ModelBuilder FromModule(string moduleName);
}
public class Xpand.Persistent.Base.ModelDifference.ModelLoader : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <IsDebug>k__BackingField;
    private string _moduleName;
    private ITypesInfo _instance;
    private ITypesInfo _typesInfo;
    private XafApplication _xafApplication;
    private ModelBuilder _modelBuilder;
    public static bool IsDebug { get; public set; }
    public ModelLoader(string moduleName, ITypesInfo instance);
    [CompilerGeneratedAttribute]
public static bool get_IsDebug();
    [CompilerGeneratedAttribute]
public static void set_IsDebug(bool value);
    public ModelApplicationBase ReCreate(XafApplication xafApplication);
    public ModelApplicationBase GetMasterModel(XafApplication xafApplication, Action`1<ITypesInfo> action);
    public ModelApplicationBase GetMasterModel(XafApplication application, bool tryToUseCurrentTypesInfo, Action`1<ITypesInfo> action);
    private ModelApplicationBase GetMasterModelCore(bool rebuild);
}
public class Xpand.Persistent.Base.ModelDifference.ResourceInfo : object {
    private List`1<AspectInfo> _aspectInfos;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AssemblyName>k__BackingField;
    public string Name { get; public set; }
    public string AssemblyName { get; public set; }
    public List`1<AspectInfo> AspectInfos { get; }
    public ResourceInfo(string name, Assembly assembly);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    public List`1<AspectInfo> get_AspectInfos();
}
public class Xpand.Persistent.Base.ModelDifference.ResourceLoadedArgs : CancelEventArgs {
    private string _resourceName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ModelApplicationBase <Model>k__BackingField;
    public string ResourceName { get; }
    public ModelApplicationBase Model { get; public set; }
    public ResourceLoadedArgs(string resourceName);
    public string get_ResourceName();
    [CompilerGeneratedAttribute]
public ModelApplicationBase get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(ModelApplicationBase value);
}
public class Xpand.Persistent.Base.ModelDifference.ResourceModelCollector : object {
    private static int MaxExpectedEncodingStringLengthInBytes;
    private static Encoding[] _expectedEncodings;
    private static Encoding _defaultEncoding;
    private static ResourceModelCollector();
    public Dictionary`2<string, ResourceInfo> Collect(IEnumerable`1<Assembly> assemblies, string prefix);
    private string GetResourceName(string prefix, string path);
    private string GetPath(string prefix, string resourceName);
    private string GetAspectName(string resourceName);
    private string GetXml(string resourceName, Assembly assembly1);
    private Encoding GetEncodingFromHeader(string encodingString);
    internal Encoding GetStreamEncoding(Stream stream);
    public static Dictionary`2<string, StringModelStore> GetEmbededModelStores(IEnumerable`1<ModuleBase> modules);
    public static Dictionary`2<string, StringModelStore> GetEmbededModelStores(Func`2<KeyValuePair`2<string, ResourceInfo>, bool> func, ModuleList modules);
    public static Dictionary`2<string, ResourceInfo> ResourceInfos(IEnumerable`1<ModuleBase> modules);
    public static Dictionary`2<string, StringModelStore> GetEmbededModelStores();
    public static Dictionary`2<string, StringModelStore> GetEmbededModelStores(Func`2<KeyValuePair`2<string, ResourceInfo>, bool> func);
}
public class Xpand.Persistent.Base.ModelDifference.ResourcesModelStore : ModelStoreBase {
    private Assembly _assembly;
    private bool _loadDefaulModel;
    private string _prefix;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ResourceLoadedArgs> ResourceLoading;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ResourceLoadedArgs> ResourceLoaded;
    public bool ReadOnly { get; }
    public string Name { get; }
    public ResourcesModelStore(Assembly assembly, string prefix, bool loadDefaulModel);
    public ResourcesModelStore(Assembly assembly, string prefix);
    public virtual bool get_ReadOnly();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public void add_ResourceLoading(EventHandler`1<ResourceLoadedArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ResourceLoading(EventHandler`1<ResourceLoadedArgs> value);
    [CompilerGeneratedAttribute]
public void add_ResourceLoaded(EventHandler`1<ResourceLoadedArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ResourceLoaded(EventHandler`1<ResourceLoadedArgs> value);
    public void OnResourceLoaded(ResourceLoadedArgs e);
    protected void OnResourceLoading(ResourceLoadedArgs e);
    public virtual void Load(ModelApplicationBase model);
    private Func`2<string, bool> Predicate();
    private bool CanLoadDefault(string s);
    private void ReadFromResource(ModelNode rootNode, string resourceName, string aspect);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <Predicate>b__18_0(string s);
}
internal class Xpand.Persistent.Base.ModelDifference.XpandApplicationModulesManager : ApplicationModulesManager {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITypesInfo <TypesInfo>k__BackingField;
    public ITypesInfo TypesInfo { get; public set; }
    public XpandApplicationModulesManager(ControllersManager controllersManager, string assembliesPath);
    [CompilerGeneratedAttribute]
public ITypesInfo get_TypesInfo();
    [CompilerGeneratedAttribute]
public void set_TypesInfo(ITypesInfo value);
    public void AddAdditionalModules(XafApplication application);
}
public class Xpand.Persistent.Base.ModuleUpdaterHelper : object {
    public static void CreateDummyUsers(IObjectSpace ObjectSpace);
}
public enum Xpand.Persistent.Base.PersistentMetaData.CodeDomProvider : Enum {
    public int value__;
    public static CodeDomProvider CSharp;
}
public enum Xpand.Persistent.Base.PersistentMetaData.DataStoreAuthentication : Enum {
    public int value__;
    public static DataStoreAuthentication Windows;
    public static DataStoreAuthentication Server;
}
public interface Xpand.Persistent.Base.PersistentMetaData.ICodeTemplate {
    public CodeDomProvider CodeDomProvider { get; public set; }
    public TemplateType TemplateType { get; public set; }
    public bool IsDefault { get; public set; }
    public abstract virtual CodeDomProvider get_CodeDomProvider();
    public abstract virtual void set_CodeDomProvider(CodeDomProvider value);
    public abstract virtual TemplateType get_TemplateType();
    public abstract virtual void set_TemplateType(TemplateType value);
    public abstract virtual bool get_IsDefault();
    public abstract virtual void set_IsDefault(bool value);
    public abstract virtual void SetDefaults();
}
public interface Xpand.Persistent.Base.PersistentMetaData.ICodeTemplateInfo {
    public ICodeTemplate CodeTemplate { get; public set; }
    public ITemplateInfo TemplateInfo { get; public set; }
    public abstract virtual ICodeTemplate get_CodeTemplate();
    public abstract virtual void set_CodeTemplate(ICodeTemplate value);
    public abstract virtual ITemplateInfo get_TemplateInfo();
    public abstract virtual void set_TemplateInfo(ITemplateInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IDataBase {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IDataStoreLogonObject {
    public DataStoreAuthentication Authentication { get; public set; }
    public string ServerName { get; public set; }
    public string UserName { get; public set; }
    public IDataBase DataBase { get; public set; }
    public string PassWord { get; public set; }
    public IList`1<IDataBase> DataBases { get; }
    public abstract virtual DataStoreAuthentication get_Authentication();
    public abstract virtual void set_Authentication(DataStoreAuthentication value);
    public abstract virtual string get_ServerName();
    public abstract virtual void set_ServerName(string value);
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
    public abstract virtual IDataBase get_DataBase();
    public abstract virtual void set_DataBase(IDataBase value);
    public abstract virtual string get_PassWord();
    public abstract virtual void set_PassWord(string value);
    public abstract virtual IList`1<IDataBase> get_DataBases();
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.PersistentMetaData.IDataStoreLogonObjectExtensions : object {
    [ExtensionAttribute]
public static string GetConnectionString(IDataStoreLogonObject dataStoreLogonObject);
    private static Dictionary`2<string, string> GetParamsDict(IDataStoreLogonObject dataStoreLogonObject);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IExtendedCollectionMemberInfo {
}
public interface Xpand.Persistent.Base.PersistentMetaData.IExtendedCoreTypeMemberInfo {
    public DBColumnType DataType { get; public set; }
    public abstract virtual DBColumnType get_DataType();
    public abstract virtual void set_DataType(DBColumnType value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IExtendedMemberInfo {
    public Type Owner { get; public set; }
    public abstract virtual Type get_Owner();
    public abstract virtual void set_Owner(Type value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IExtendedOrphanedCollection {
    public string Criteria { get; public set; }
    public string ElementTypeFullName { get; public set; }
    public abstract virtual string get_Criteria();
    public abstract virtual void set_Criteria(string value);
    public abstract virtual string get_ElementTypeFullName();
    public abstract virtual void set_ElementTypeFullName(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IExtendedReferenceMemberInfo {
    public Type ReferenceType { get; public set; }
    public abstract virtual Type get_ReferenceType();
    public abstract virtual void set_ReferenceType(Type value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IInterfaceInfo {
    public string Name { get; public set; }
    public string Assembly { get; public set; }
    public Type Type { get; }
    public IList`1<IPersistentClassInfo> PersistentClassInfos { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Assembly();
    public abstract virtual void set_Assembly(string value);
    public abstract virtual Type get_Type();
    public abstract virtual IList`1<IPersistentClassInfo> get_PersistentClassInfos();
}
public interface Xpand.Persistent.Base.PersistentMetaData.IMapperInfo {
    public string NavigationPath { get; public set; }
    public bool XpoDataBase { get; public set; }
    public abstract virtual string get_NavigationPath();
    public abstract virtual void set_NavigationPath(string value);
    public abstract virtual bool get_XpoDataBase();
    public abstract virtual void set_XpoDataBase(bool value);
}
public class Xpand.Persistent.Base.PersistentMetaData.InterfaceRegistratorAttribute : Attribute {
    private Type interfaceType;
    public Type InterfaceType { get; }
    public InterfaceRegistratorAttribute(Type interfaceType);
    public Type get_InterfaceType();
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentAssemblyInfo {
    public Guid Oid { get; public set; }
    public string Name { get; public set; }
    public IList`1<IPersistentClassInfo> PersistentClassInfos { get; }
    public string Errors { get; public set; }
    public bool DoNotCompile { get; public set; }
    public CodeDomProvider CodeDomProvider { get; }
    public Session Session { get; }
    public IFileData StrongKeyFileData { get; public set; }
    public int CompileOrder { get; public set; }
    public IList`1<IPersistentAssemblyAttributeInfo> Attributes { get; }
    public int Revision { get; public set; }
    public string GeneratedCode { get; }
    public abstract virtual Guid get_Oid();
    public abstract virtual void set_Oid(Guid value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IList`1<IPersistentClassInfo> get_PersistentClassInfos();
    public abstract virtual string get_Errors();
    public abstract virtual void set_Errors(string value);
    public abstract virtual bool get_DoNotCompile();
    public abstract virtual void set_DoNotCompile(bool value);
    public abstract virtual CodeDomProvider get_CodeDomProvider();
    public abstract virtual Session get_Session();
    public abstract virtual IFileData get_StrongKeyFileData();
    public abstract virtual void set_StrongKeyFileData(IFileData value);
    public abstract virtual int get_CompileOrder();
    public abstract virtual void set_CompileOrder(int value);
    public abstract virtual IList`1<IPersistentAssemblyAttributeInfo> get_Attributes();
    public abstract virtual int get_Revision();
    public abstract virtual void set_Revision(int value);
    public abstract virtual string get_GeneratedCode();
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentAssociatedMemberInfo {
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentClassInfo {
    public string BaseTypeFullName { get; public set; }
    public string MergedObjectFullName { get; public set; }
    public IList`1<IPersistentMemberInfo> OwnMembers { get; }
    public IList`1<IInterfaceInfo> Interfaces { get; }
    public IPersistentAssemblyInfo PersistentAssemblyInfo { get; public set; }
    public Type BaseType { get; public set; }
    public abstract virtual string get_BaseTypeFullName();
    public abstract virtual void set_BaseTypeFullName(string value);
    public abstract virtual string get_MergedObjectFullName();
    public abstract virtual void set_MergedObjectFullName(string value);
    public abstract virtual IList`1<IPersistentMemberInfo> get_OwnMembers();
    public abstract virtual IList`1<IInterfaceInfo> get_Interfaces();
    public abstract virtual IPersistentAssemblyInfo get_PersistentAssemblyInfo();
    public abstract virtual void set_PersistentAssemblyInfo(IPersistentAssemblyInfo value);
    public abstract virtual Type get_BaseType();
    public abstract virtual void set_BaseType(Type value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentCollectionMemberInfo {
    public string CollectionTypeFullName { get; public set; }
    public IPersistentClassInfo CollectionClassInfo { get; public set; }
    public abstract virtual string get_CollectionTypeFullName();
    public abstract virtual void set_CollectionTypeFullName(string value);
    public abstract virtual void SetCollectionTypeFullName(string s);
    public abstract virtual IPersistentClassInfo get_CollectionClassInfo();
    public abstract virtual void set_CollectionClassInfo(IPersistentClassInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentCoreTypeMemberInfo {
    public DBColumnType DataType { get; public set; }
    public abstract virtual DBColumnType get_DataType();
    public abstract virtual void set_DataType(DBColumnType value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentMemberInfo {
    public IPersistentClassInfo Owner { get; public set; }
    public abstract virtual IPersistentClassInfo get_Owner();
    public abstract virtual void set_Owner(IPersistentClassInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentReferenceMemberInfo {
    public string ReferenceTypeFullName { get; public set; }
    public IPersistentClassInfo ReferenceClassInfo { get; public set; }
    public abstract virtual string get_ReferenceTypeFullName();
    public abstract virtual void set_ReferenceTypeFullName(string value);
    public abstract virtual void SetReferenceTypeFullName(string fullName);
    public abstract virtual IPersistentClassInfo get_ReferenceClassInfo();
    public abstract virtual void set_ReferenceClassInfo(IPersistentClassInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentTemplatedTypeInfo {
    public ICodeTemplateInfo CodeTemplateInfo { get; public set; }
    public abstract virtual ICodeTemplateInfo get_CodeTemplateInfo();
    public abstract virtual void set_CodeTemplateInfo(ICodeTemplateInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.IPersistentTypeInfo {
    public string Name { get; public set; }
    public IList`1<IPersistentAttributeInfo> TypeAttributes { get; }
    public IList`1<ITemplateInfo> TemplateInfos { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IList`1<IPersistentAttributeInfo> get_TypeAttributes();
    public abstract virtual IList`1<ITemplateInfo> get_TemplateInfos();
}
public interface Xpand.Persistent.Base.PersistentMetaData.ISqlMapperInfo {
    public IMapperInfo MapperInfo { get; public set; }
    public abstract virtual IMapperInfo get_MapperInfo();
    public abstract virtual void set_MapperInfo(IMapperInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.ITemplateInfo {
    public string TemplateCode { get; public set; }
    public string Name { get; public set; }
    public abstract virtual string get_TemplateCode();
    public abstract virtual void set_TemplateCode(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public class Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.AttributeInfoAttribute : Attribute {
    private Object[] _initializedArgumentValues;
    private ConstructorInfo _constructor;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Instance>k__BackingField;
    public Object[] InitializedArgumentValues { get; }
    public ConstructorInfo Constructor { get; }
    public object Instance { get; public set; }
    public AttributeInfoAttribute(ConstructorInfo constructorInfo, Object[] initializedArgumentValues);
    public Object[] get_InitializedArgumentValues();
    public ConstructorInfo get_Constructor();
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(object value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentAssemblyAttributeInfo {
    public IPersistentAssemblyInfo Owner { get; public set; }
    public abstract virtual IPersistentAssemblyInfo get_Owner();
    public abstract virtual void set_Owner(IPersistentAssemblyInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentAssemblyDataStoreAttribute {
    public IPersistentClassInfo PersistentClassInfo { get; public set; }
    public string ConnectionString { get; public set; }
    public abstract virtual IPersistentClassInfo get_PersistentClassInfo();
    public abstract virtual void set_PersistentClassInfo(IPersistentClassInfo value);
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentAssemblyDataStoreAttributeInfo {
    public IDataStoreLogonObject DataStoreLogon { get; public set; }
    public IPersistentClassInfo PersistentClassInfo { get; public set; }
    public abstract virtual IDataStoreLogonObject get_DataStoreLogon();
    public abstract virtual void set_DataStoreLogon(IDataStoreLogonObject value);
    public abstract virtual IPersistentClassInfo get_PersistentClassInfo();
    public abstract virtual void set_PersistentClassInfo(IPersistentClassInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentAssemblyVersionAttributeInfo {
    public string Version { get; public set; }
    public abstract virtual string get_Version();
    public abstract virtual void set_Version(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentAssociationAttribute {
    public RelationType RelationType { get; public set; }
    public string AssociationName { get; public set; }
    public string ElementTypeFullName { get; public set; }
    public abstract virtual RelationType get_RelationType();
    public abstract virtual void set_RelationType(RelationType value);
    public abstract virtual string get_AssociationName();
    public abstract virtual void set_AssociationName(string value);
    public abstract virtual string get_ElementTypeFullName();
    public abstract virtual void set_ElementTypeFullName(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentAttributeCreator {
    public abstract virtual AttributeInfoAttribute Create();
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentAttributeInfo {
    public IPersistentTypeInfo Owner { get; public set; }
    public abstract virtual IPersistentTypeInfo get_Owner();
    public abstract virtual void set_Owner(IPersistentTypeInfo value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentDefaulClassOptionsAttribute {
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentKeyAttribute {
    public bool AutoGenerated { get; public set; }
    public abstract virtual bool get_AutoGenerated();
    public abstract virtual void set_AutoGenerated(bool value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentMapInheritanceAttribute {
    public MapInheritanceType MapInheritanceType { get; public set; }
    public abstract virtual MapInheritanceType get_MapInheritanceType();
    public abstract virtual void set_MapInheritanceType(MapInheritanceType value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentModelDefaultAttribute {
    public string PropertyName { get; public set; }
    public string Value { get; public set; }
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentNavigationItemAttribute {
    public string ViewId { get; public set; }
    public string ObjectKey { get; public set; }
    public string Path { get; public set; }
    public abstract virtual string get_ViewId();
    public abstract virtual void set_ViewId(string value);
    public abstract virtual string get_ObjectKey();
    public abstract virtual void set_ObjectKey(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentPersistentAliasAttribute {
    public string AliasExpression { get; public set; }
    public abstract virtual string get_AliasExpression();
    public abstract virtual void set_AliasExpression(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentPersistentAttribute {
    public string MapTo { get; public set; }
    public abstract virtual string get_MapTo();
    public abstract virtual void set_MapTo(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentRuleRequiredFieldAttribute {
    public string ID { get; public set; }
    public string Context { get; public set; }
    public abstract virtual string get_ID();
    public abstract virtual void set_ID(string value);
    public abstract virtual string get_Context();
    public abstract virtual void set_Context(string value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentSizeAttribute {
    public int Size { get; public set; }
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
}
public interface Xpand.Persistent.Base.PersistentMetaData.PersistentAttributeInfos.IPersistentVisibleInDetailViewAttribute {
    public bool Visible { get; public set; }
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
}
public enum Xpand.Persistent.Base.PersistentMetaData.TemplateType : Enum {
    public int value__;
    public static TemplateType None;
    public static TemplateType Class;
    public static TemplateType XPReadWritePropertyMember;
    public static TemplateType XPOneToOnePropertyMember;
    public static TemplateType XPCollectionMember;
    public static TemplateType XPCalculatedPropertyMember;
    public static TemplateType InterfaceReadWriteMember;
    public static TemplateType Struct;
    public static TemplateType ReadWriteMember;
    public static TemplateType FieldMember;
    public static TemplateType XPOneToOneReadOnlyPropertyMember;
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsBehavior {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsChartDataSource {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsCustomization {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsData {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsDataField {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsFilterPopup {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsHint {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsMenu {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsSelection {
}
public interface Xpand.Persistent.Base.PivotChart.IPivotOptionsView {
}
public interface Xpand.Persistent.Base.PivotChart.Web.IPivotGridOptionsOLAP {
}
public interface Xpand.Persistent.Base.PivotChart.Web.IPivotGridWebOptionsChartDataSource {
}
public interface Xpand.Persistent.Base.PivotChart.Web.IPivotGridWebOptionsCustomization {
}
public interface Xpand.Persistent.Base.PivotChart.Web.IPivotGridWebOptionsLoadingPanel {
}
public interface Xpand.Persistent.Base.PivotChart.Web.IPivotGridWebOptionsPager {
}
public interface Xpand.Persistent.Base.PivotChart.Web.IPivotGridWebOptionsView {
}
public class Xpand.Persistent.Base.RuleInfoObject : XpandCustomObject {
    private RuleScheduleType _ruleScheduleType;
    private string _ruleId;
    private DateTime _executed;
    public RuleScheduleType RuleScheduleType { get; public set; }
    public string RuleId { get; public set; }
    public DateTime Executed { get; public set; }
    public RuleInfoObject(Session session);
    public RuleScheduleType get_RuleScheduleType();
    public void set_RuleScheduleType(RuleScheduleType value);
    public string get_RuleId();
    public void set_RuleId(string value);
    public DateTime get_Executed();
    public void set_Executed(DateTime value);
}
public enum Xpand.Persistent.Base.RuleScheduleType : Enum {
    public int value__;
    public static RuleScheduleType Purging;
}
public class Xpand.Persistent.Base.RuntimeMembers.CustomCreateMemberArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IModelMemberEx <ModelMemberEx>k__BackingField;
    public IModelMemberEx ModelMemberEx { get; }
    public CustomCreateMemberArgs(IModelMemberEx modelMemberEx);
    [CompilerGeneratedAttribute]
public IModelMemberEx get_ModelMemberEx();
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.Collections.IModelMemberColection {
    [CategoryAttribute("eXpand.RuntimeMembers")]
[RequiredAttribute]
[DataSourcePropertyAttribute("CollectionTypes", "Mono.Cecil.CustomAttributeArgument[]")]
[RefreshPropertiesAttribute("1")]
public IModelClass CollectionType { get; public set; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelClass> CollectionTypes { get; }
    public abstract virtual IModelClass get_CollectionType();
    public abstract virtual void set_CollectionType(IModelClass value);
    public abstract virtual IModelList`1<IModelClass> get_CollectionTypes();
}
[ModelDisplayNameAttribute("AssociatedCollection")]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.Collections.IModelMemberOneToManyCollection {
    [CategoryAttribute("eXpand.RuntimeMembers")]
[RequiredAttribute]
[DataSourcePropertyAttribute("AssociatedMembers", "Mono.Cecil.CustomAttributeArgument[]")]
public IModelMemberDataStoreForeignKeyCreated AssociatedMember { get; public set; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelMemberDataStoreForeignKeyCreated> AssociatedMembers { get; }
    [RequiredAttribute]
[CategoryAttribute("eXpand.RuntimeMembers")]
public string AssociationName { get; public set; }
    public abstract virtual IModelMemberDataStoreForeignKeyCreated get_AssociatedMember();
    public abstract virtual void set_AssociatedMember(IModelMemberDataStoreForeignKeyCreated value);
    public abstract virtual IModelList`1<IModelMemberDataStoreForeignKeyCreated> get_AssociatedMembers();
    public abstract virtual string get_AssociationName();
    public abstract virtual void set_AssociationName(string value);
}
[ModelDisplayNameAttribute("OrphanedColection")]
[ModelPersistentNameAttribute("RuntimeOrphanedColection")]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.Collections.IModelMemberOrphanedColection {
    [CategoryAttribute("eXpand.RuntimeMembers")]
[CriteriaOptionsAttribute("CollectionType.TypeInfo")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.CriteriaModelEditorControl, DevExpress.ExpressApp.Win.v24.1, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string Criteria { get; public set; }
    public abstract virtual string get_Criteria();
    public abstract virtual void set_Criteria(string value);
}
[DomainLogicAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.Collections.IModelMemberColection")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.Collections.ModelMemberCollectionDomainLogic : object {
    public static IModelList`1<IModelClass> Get_CollectionTypes(IModelMemberColection orphanedColection);
    public static Type Get_Type(IModelMemberColection orphanedColection);
}
[DomainLogicAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.Collections.IModelMemberOneToManyCollection")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.Collections.ModelMemberOneToManyDomainLogic : ModelMemberExDomainLogicBase`1<IModelMemberOneToManyCollection> {
    public static string Get_AssociationName(IModelMemberOneToManyCollection modelMemberOneToManyCollection);
    public static IModelList`1<IModelMemberDataStoreForeignKeyCreated> Get_AssociatedMembers(IModelMemberOneToManyCollection modelMemberOneToManyCollection);
    private static bool CanBeLinked(IModelMemberDataStoreForeignKeyCreated modelMember, IModelClass modelClass);
    public static IMemberInfo Get_MemberInfo(IModelMemberOneToManyCollection modelMemberOneToManyCollection);
    private static void CreateCollectionMemberInfo(IModelMemberOneToManyCollection collection, XPClassInfo info);
}
[DomainLogicAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.Collections.IModelMemberOrphanedColection")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.Collections.ModelMemberOrphanedColectionDomainLogic : ModelMemberExDomainLogicBase`1<IModelMemberOrphanedColection> {
    public static IMemberInfo Get_MemberInfo(IModelMemberOrphanedColection orphanedColection);
}
public class Xpand.Persistent.Base.RuntimeMembers.Model.Collections.ModelReadOnlDataStoreForeignKeyCreatedyCalculator : object {
    public sealed virtual bool IsReadOnly(IModelNode node, string propertyName);
    public sealed virtual bool IsReadOnly(IModelNode node, IModelNode childNode);
    public bool IsReadOnly(IModelNode node);
}
public class Xpand.Persistent.Base.RuntimeMembers.Model.DesignerOnlyCalculatorForExMembers : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.IModelClassEx {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ITypeInfo TypeInfo { get; }
    public abstract virtual ITypeInfo get_TypeInfo();
}
[ModelDisplayNameAttribute("Calculated")]
[ModelPersistentNameAttribute("RuntimeCalculatedMember")]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberCalculated {
    [RequiredAttribute]
[CategoryAttribute("eXpand.RuntimeMembers")]
[DescriptionAttribute("Using an expression here it will force the creation of a calculated property insted of a normal one")]
[CriteriaOptionsAttribute("ModelClass.TypeInfo")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.ExpressionModelEditorControl, DevExpress.ExpressApp.Win.v24.1, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string AliasExpression { get; public set; }
    public abstract virtual string get_AliasExpression();
    public abstract virtual void set_AliasExpression(string value);
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberEx {
    [CategoryAttribute("eXpand.RuntimeMembers")]
[DescriptionAttribute("Specifies the current property type.")]
[TypeConverterAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.XpandStringToTypeConverterExtended")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberExTypeVisibilityCalculator")]
[RequiredAttribute]
[ModelReadOnlyAttribute("Xpand.Persistent.Base.General.Model.VisibilityCalculators.AlwaysEditableVisibilityCalculator")]
public Type Type { get; public set; }
    [ModelBrowsableAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.DesignerOnlyCalculatorForExMembers")]
public bool IsCustom { get; public set; }
    [BrowsableAttribute("False")]
public Nullable`1<bool> CreatedAtDesignTime { get; public set; }
    [ModelBrowsableAttribute("Xpand.Persistent.Base.General.Model.VisibilityCalculators.NotVisibileCalculator")]
[RequiredAttribute("Xpand.Persistent.Base.General.Model.RequiredCalculators.NotRequiredCalculator")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.ExpressionModelEditorControl, DevExpress.ExpressApp.Win.v24.1, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a, Version=24.1.6.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string Expression { get; public set; }
    [DefaultValueAttribute("False")]
public bool IsCalculated { get; public set; }
    public abstract virtual Type get_Type();
    public abstract virtual void set_Type(Type value);
    public abstract virtual bool get_IsCustom();
    public abstract virtual void set_IsCustom(bool value);
    public abstract virtual Nullable`1<bool> get_CreatedAtDesignTime();
    public abstract virtual void set_CreatedAtDesignTime(Nullable`1<bool> value);
    public abstract virtual string get_Expression();
    public abstract virtual void set_Expression(string value);
    public abstract virtual bool get_IsCalculated();
    public abstract virtual void set_IsCalculated(bool value);
}
[ModelDisplayNameAttribute("NonPersistent")]
[ModelPersistentNameAttribute("RuntimeNonPersistentMember")]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberNonPersistent {
}
[ModelPersistentNameAttribute("RuntimeMember")]
[ModelDisplayNameAttribute("Persistent")]
public interface Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberPersistent {
    [BrowsableAttribute("False")]
public bool DataStoreColumnCreated { get; public set; }
    public abstract virtual bool get_DataStoreColumnCreated();
    public abstract virtual void set_DataStoreColumnCreated(bool value);
}
public class Xpand.Persistent.Base.RuntimeMembers.Model.ModelClassExDomainLogic : object {
    public static ITypeInfo Get_TypeInfo(IModelClass modelClass);
}
[DomainLogicAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberCalculated")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberCalculatedDomainLogic : ModelMemberExDomainLogicBase`1<IModelMemberCalculated> {
    public static IMemberInfo Get_MemberInfo(IModelMemberCalculated modelMemberCalculated);
}
[DomainLogicAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberEx")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberExDomainLogic : object {
    public static string AttributesCategory;
    public static void Set_IsCalculated(IModelMemberEx modelRuntimeMember, bool value);
    public static string Get_Caption(IModelMemberEx modelRuntimeMember);
    private static string GetMemberCaption(IMemberInfo memberInfo);
}
public abstract class Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberExDomainLogicBase`1 : object {
    private static LightDictionary`2<IModelApplication, LightDictionary`2<TModelMember, bool>> MemberTags;
    private static ModelMemberExDomainLogicBase`1();
    protected static IMemberInfo GetMemberInfo(TModelMember modelMemberEx, Action`2<TModelMember, XPClassInfo> createXpandCustomMemberInfo, Func`2<TModelMember, bool> validState);
    private static bool CreatedAtDesignTime(TModelMember modelMemberEx);
    protected static bool CheckTag(TModelMember modelMemberEx);
    private static void InitMemberTags(TModelMember modelMemberEx);
    protected static bool ValidState(TModelMember modelMemberEx, XPCustomMemberInfo memberInfo, Func`2<TModelMember, bool> validState);
    private static void TagMember(TModelMember modelMemberEx, bool tag);
    protected static XPClassInfo FindXPClassInfo(TModelMember modelMemberEx);
}
[AttributeUsageAttribute("384")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberExMemberInfoAttribute : Attribute {
}
public class Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberExTypeVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
[DomainLogicAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberNonPersistent")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberNonPersistentDomainLogic : ModelMemberExDomainLogicBase`1<IModelMemberNonPersistent> {
    public static IMemberInfo Get_MemberInfo(IModelMemberNonPersistent modelRuntimeMember);
}
[DomainLogicAttribute("Xpand.Persistent.Base.RuntimeMembers.Model.IModelMemberPersistent")]
public class Xpand.Persistent.Base.RuntimeMembers.Model.ModelMemberPersistentDomainLogic : ModelMemberExDomainLogicBase`1<IModelMemberPersistent> {
    public static IMemberInfo Get_MemberInfo(IModelMemberPersistent modelRuntimeMember);
}
public class Xpand.Persistent.Base.RuntimeMembers.Model.XpandStringToTypeConverterExtended : StringToTypeConverterExtended {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Xpand.Persistent.Base.RuntimeMembers.RuntimeMemberBuilder : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static EventHandler`1<CustomCreateMemberArgs> CustomCreateMember;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <SuppressException>k__BackingField;
    public static bool SuppressException { get; public set; }
    [CompilerGeneratedAttribute]
public static void add_CustomCreateMember(EventHandler`1<CustomCreateMemberArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_CustomCreateMember(EventHandler`1<CustomCreateMemberArgs> value);
    private static void OnCustomCreateMember(CustomCreateMemberArgs e);
    private static IEnumerable`1<IModelMemberEx> GetMembersEx(IModelApplication model);
    public static void CreateRuntimeMembers(IModelApplication model);
    [CompilerGeneratedAttribute]
public static bool get_SuppressException();
    [CompilerGeneratedAttribute]
public static void set_SuppressException(bool value);
    private static void CreateAssociatedCollectionMembers(IEnumerable`1<IModelMemberOneToManyCollection> modelMemberOneToManyCollections, XPObjectSpace xpObjectSpace);
    private static void RefreshTypes(ITypesInfo typesInfo, IEnumerable`1<ITypeInfo> typeInfos);
    private static IObjectSpace CreateObjectSpace();
    private static void CreateXpandCustomMemberInfo(IModelMemberEx modelMemberEx, XPObjectSpace objectSpace);
    private static void CreateForeignKey(IModelMemberOneToManyCollection modelMemberOneToManyCollection, XPObjectSpace objectSpace, XpandCustomMemberInfo customMemberInfo);
    private static bool CanCreateForeignKey(IModelMemberOneToManyCollection modelMemberOneToManyCollection, XPObjectSpace objectSpace);
    private static void CreateColumn(IModelMemberPersistent modelMemberPersistent, XPObjectSpace objectSpace, XpandCustomMemberInfo customMemberInfo);
    private static bool CanCreateColumn(IModelMemberPersistent modelMemberPersistent, XPObjectSpace objectSpace);
    private static bool CanCreateDbArtifact(IModelMemberEx modelMemberEx, XPObjectSpace objectSpace);
    private static void UpdateMember(IModelMemberEx modelMemberEx, XPMemberInfo xpMemberInfo);
    private static void AddAttributes(IModelMemberEx modelMemberEx, XPCustomMemberInfo memberInfo);
    private static XpandCustomMemberInfo CreateMemberInfo(IModelMemberEx modelMemberEx, XPClassInfo xpClassInfo);
}
public class Xpand.Persistent.Base.RuntimeMembers.RuntimeMemberModelDifferenceController : ObjectViewController`2<ObjectView, IModelDifference> {
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    private void ObjectSpaceOnCommitted(object sender, EventArgs eventArgs);
}
public class Xpand.Persistent.Base.Security.EncryptedSettingsStorage : SettingsStorage {
    public static char KeyValueDelimiter;
    public static char PairDelimiter;
    private NameValueCollection _values;
    private string _key;
    public NameValueCollection Values { get; }
    private static EncryptedSettingsStorage();
    public NameValueCollection get_Values();
    public virtual bool IsPathExist(string optionPath);
    public virtual void SaveOption(string optionPath, string optionName, string optionValue);
    public virtual string LoadOption(string optionPath, string optionName);
    public Byte[] GetContent();
    private Byte[] Encrypt(StringBuilder sb);
    public void SetContents(Byte[] bytes);
}
public interface Xpand.Persistent.Base.Security.ICustomLogonParameter {
}
[ModelAbstractClassAttribute]
public interface Xpand.Persistent.Base.Security.IModelOptionsRegistration {
    [ModelBrowsableAttribute("Xpand.Persistent.Base.Security.ModelOptionsRegistrationVisibilityCalculator")]
public IModelRegistrationEnabled Registration { get; }
    public abstract virtual IModelRegistrationEnabled get_Registration();
}
public interface Xpand.Persistent.Base.Security.IModelRegistrationActivation {
    [CategoryAttribute("Activation")]
[DefaultValueAttribute("True")]
public bool ActivateUser { get; public set; }
    [DataSourcePropertyAttribute("ActivationIdMembers", "Mono.Cecil.CustomAttributeArgument[]")]
[DescriptionAttribute("For this to work you need to inherit from XpandWebApplication")]
[CategoryAttribute("Activation")]
public IModelMember ActivationIdMember { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("<b>Activation successful!</b>")]
[CategoryAttribute("Activation")]
public string SuccessFulActivationOutput { get; public set; }
    [DefaultValueAttribute("/")]
[CategoryAttribute("Activation")]
public string SuccessFulActivationReturnUrl { get; public set; }
    public abstract virtual bool get_ActivateUser();
    public abstract virtual void set_ActivateUser(bool value);
    public abstract virtual IModelMember get_ActivationIdMember();
    public abstract virtual void set_ActivationIdMember(IModelMember value);
    public abstract virtual string get_SuccessFulActivationOutput();
    public abstract virtual void set_SuccessFulActivationOutput(string value);
    public abstract virtual string get_SuccessFulActivationReturnUrl();
    public abstract virtual void set_SuccessFulActivationReturnUrl(string value);
}
public interface Xpand.Persistent.Base.Security.IModelRegistrationEnabled {
    public bool Enabled { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
public interface Xpand.Persistent.Base.Security.ISecurityModuleUser {
}
public interface Xpand.Persistent.Base.Security.ISecurityPermisssionPolicyRelated {
}
public interface Xpand.Persistent.Base.Security.ISecurityRelated {
}
public class Xpand.Persistent.Base.Security.ModelOptionsRegistrationVisibilityCalculator : object {
    public sealed virtual bool IsVisible(IModelNode node, string propertyName);
}
[DomainLogicAttribute("Xpand.Persistent.Base.Security.IModelRegistrationActivation")]
public class Xpand.Persistent.Base.Security.ModelRegistrationActivationDomainLogic : object {
    public static IModelList`1<IModelMember> Get_ActivationIdMembers(IModelRegistrationActivation modelRegistration);
    public static IModelMember Get_ActivationIdMember(IModelRegistrationActivation modelRegistration);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.Security.SecurityExtensions : object {
    [ExtensionAttribute]
public static bool IsRemoteClient(ISecurityStrategyBase security);
    [ExtensionAttribute]
public static bool CanAuthenticate(AuthenticationStandard authenticationStandard);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.Security.SecurityModuleUserLogic : object {
    [ExtensionAttribute]
public static void AddSecurityObjectsToAdditionalExportedTypes(ISecurityModuleUser securityModuleUser, string nameSpace);
}
[AttributeUsageAttribute("4")]
public class Xpand.Persistent.Base.Security.SecurityOperationsAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CollectionName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OperationProviderProperty>k__BackingField;
    public string CollectionName { get; }
    public string OperationProviderProperty { get; }
    public SecurityOperationsAttribute(string collectionName, string operationProviderProperty);
    [CompilerGeneratedAttribute]
public string get_CollectionName();
    [CompilerGeneratedAttribute]
public string get_OperationProviderProperty();
}
public interface Xpand.Persistent.Base.StateMachine.IStateMachineTransitionPermission {
    public string StateMachineName { get; public set; }
    public string StateCaption { get; public set; }
    public bool Hide { get; public set; }
    public abstract virtual string get_StateMachineName();
    public abstract virtual void set_StateMachineName(string value);
    public abstract virtual string get_StateCaption();
    public abstract virtual void set_StateCaption(string value);
    public abstract virtual bool get_Hide();
    public abstract virtual void set_Hide(bool value);
}
public enum Xpand.Persistent.Base.StateMachine.StateMachineTransitionModifier : Enum {
    public int value__;
    public static StateMachineTransitionModifier Deny;
}
[DomainComponentAttribute]
[XafDefaultPropertyAttribute("Name")]
public class Xpand.Persistent.Base.TreeNode.ColumnChooser : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Key>k__BackingField;
    private ColumnChooser _parent;
    private IModelColumn _modelColumn;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private BindingList`1<ColumnChooser> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [BrowsableAttribute("False")]
[KeyAttribute]
public string Key { get; public set; }
    private ITreeNode DevExpress.Persistent.Base.General.ITreeNode.Parent { get; }
    [VisibleInListViewAttribute("False")]
public ColumnChooser Parent { get; public set; }
    private BindingList`1<ColumnChooser> Children { get; }
    [DisplayNameAttribute("Name")]
public string Caption { get; public set; }
    private string DevExpress.Persistent.Base.General.ITreeNode.Name { get; }
    private IBindingList DevExpress.Persistent.Base.General.ITreeNode.Children { get; }
    [BrowsableAttribute("False")]
public IModelColumn ModelColumn { get; }
    [BrowsableAttribute("False")]
public string PropertyName { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    private sealed virtual override ITreeNode DevExpress.Persistent.Base.General.ITreeNode.get_Parent();
    public ColumnChooser get_Parent();
    public void set_Parent(ColumnChooser value);
    [CompilerGeneratedAttribute]
private BindingList`1<ColumnChooser> get_Children();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    private sealed virtual override string DevExpress.Persistent.Base.General.ITreeNode.get_Name();
    private sealed virtual override IBindingList DevExpress.Persistent.Base.General.ITreeNode.get_Children();
    public IModelColumn get_ModelColumn();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    public void Update(IModelColumn modelColumn, ColumnChooser parentColumnChooser);
    public static ColumnChooser Create(IObjectSpace objectSpace, IModelColumn modelColumn, ColumnChooser parentColumnChooser);
}
[DomainComponentAttribute]
[DisplayNameAttribute("Choose Column")]
public class Xpand.Persistent.Base.TreeNode.ColumnChooserList : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private BindingList`1<ColumnChooser> <Columns>k__BackingField;
    public BindingList`1<ColumnChooser> Columns { get; }
    private static IModelColumn[] SortModelColumns(IModelColumn[] columns);
    public static ColumnChooserList Create(IObjectSpace objectSpace, IModelColumn[] modelColumns, ColumnChooser parentChooser);
    [CompilerGeneratedAttribute]
public BindingList`1<ColumnChooser> get_Columns();
}
[GenerateMessageTemplatesModelAttribute("RuleRequiredForAtLeast1Property")]
public interface Xpand.Persistent.Base.Validation.AtLeast1PropertyIsRequired.IRuleRequiredForAtLeast1PropertyProperties {
    [DefaultValueAttribute("At least one of {TargetProperties} must not be empty.")]
[CategoryAttribute("Format")]
[LocalizableAttribute("True")]
public string MessageTemplateMustNotBeEmpty { get; public set; }
    public abstract virtual string get_MessageTemplateMustNotBeEmpty();
    public abstract virtual void set_MessageTemplateMustNotBeEmpty(string value);
}
public class Xpand.Persistent.Base.Validation.AtLeast1PropertyIsRequired.RuleRequiredForAtLeast1Property : RuleBase {
    private List`1<string> _properties;
    public ReadOnlyCollection`1<string> UsedProperties { get; }
    public IRuleRequiredForAtLeast1PropertyProperties Properties { get; }
    public Type PropertiesType { get; }
    public RuleRequiredForAtLeast1Property(IRuleRequiredForAtLeast1PropertyProperties properties);
    public RuleRequiredForAtLeast1Property(string id, ContextIdentifiers targetContextIDs, Type objectType);
    public virtual ReadOnlyCollection`1<string> get_UsedProperties();
    public IRuleRequiredForAtLeast1PropertyProperties get_Properties();
    public virtual Type get_PropertiesType();
    protected virtual bool IsValidInternal(object target, String& errorMessageTemplate);
    private Dictionary`2<string, object> GetValues(object target);
    [CompilerGeneratedAttribute]
private bool <IsValidInternal>b__10_0(KeyValuePair`2<string, object> value);
}
[AttributeUsageAttribute("1028")]
public class Xpand.Persistent.Base.Validation.AtLeast1PropertyIsRequired.RuleRequiredForAtLeast1PropertyAttribute : RuleBaseAttribute {
    protected Type RuleType { get; }
    protected Type PropertiesType { get; }
    public RuleRequiredForAtLeast1PropertyProperties Properties { get; }
    public string MessageTemplateMustNotBeEmpty { get; public set; }
    public string TargetProperties { get; public set; }
    public string Delimiters { get; public set; }
    public RuleRequiredForAtLeast1PropertyAttribute(string id, string targetContextIDs, string targetProperties);
    public RuleRequiredForAtLeast1PropertyAttribute(string id, DefaultContexts targetContexts, string targetProperties);
    protected virtual Type get_RuleType();
    protected virtual Type get_PropertiesType();
    public RuleRequiredForAtLeast1PropertyProperties get_Properties();
    public sealed virtual string get_MessageTemplateMustNotBeEmpty();
    public sealed virtual void set_MessageTemplateMustNotBeEmpty(string value);
    public sealed virtual string get_TargetProperties();
    public sealed virtual void set_TargetProperties(string value);
    public sealed virtual string get_Delimiters();
    public sealed virtual void set_Delimiters(string value);
}
[NonPersistentAttribute]
public class Xpand.Persistent.Base.Validation.AtLeast1PropertyIsRequired.RuleRequiredForAtLeast1PropertyProperties : RuleMultiPropertiesValues {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MessageTemplateMustNotBeEmpty>k__BackingField;
    public string MessageTemplateMustNotBeEmpty { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageTemplateMustNotBeEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageTemplateMustNotBeEmpty(string value);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.Validation.Extensions : object {
    [ExtensionAttribute]
public static RuleSetValidationResult NewRuleSetValidationMessageResult(RuleSet ruleSet, IObjectSpace objectSpace, string messageTemplate, object objectTarget);
    [ExtensionAttribute]
public static RuleSetValidationResult NewRuleSetValidationMessageResult(IRuleSet ruleSet, IObjectSpace objectSpace, string messageTemplate, ContextIdentifier contextIdentifier, object objectTarget, Type targeObjecttType, List`1<string> usedProperties, ValidationResultType resultType);
}
public interface Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.IPropertyValueValidator {
    public abstract virtual bool IsPropertyValueValid(string propertyName, String& errorMessageTemplate, ContextIdentifiers contextIdentifiers, string ruleId);
}
[GenerateMessageTemplatesModelAttribute("RuleFromIPropertyValueValidatorProperties")]
public interface Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.IRuleFromIPropertyValueValidatorProperties {
    [CategoryAttribute("Format")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Invalid {TargetPropertyName}")]
public string MessageTemplateInvalidPropertyValue { get; public set; }
    public abstract virtual string get_MessageTemplateInvalidPropertyValue();
    public abstract virtual void set_MessageTemplateInvalidPropertyValue(string value);
}
public class Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.RuleFromIPropertyValueValidator : RulePropertyValue {
    public static string PropertiesMessageTemplateInvalidPropertyValue;
    private static IValueManager`1<string> _defaultMessageTemplateInvalidPropertyValue;
    public static string DefaultMessageTemplateInvalidPropertyValue { get; public set; }
    public IRuleFromIPropertyValueValidatorProperties Properties { get; }
    public Type PropertiesType { get; }
    public RuleFromIPropertyValueValidator(IRulePropertyValueProperties properties);
    public static string get_DefaultMessageTemplateInvalidPropertyValue();
    public static void set_DefaultMessageTemplateInvalidPropertyValue(string value);
    public IRuleFromIPropertyValueValidatorProperties get_Properties();
    public virtual Type get_PropertiesType();
    protected virtual bool IsValidInternal(object target, String& errorMessageTemplate);
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.RuleFromIPropertyValueValidatorAttribute : RuleBaseAttribute {
    protected RuleFromIPropertyValueValidatorProperties Properties { get; }
    protected Type RuleType { get; }
    protected Type PropertiesType { get; }
    private string DevExpress.Persistent.Validation.IRulePropertyValueProperties.TargetPropertyName { get; private set; }
    private string Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.IRuleFromIPropertyValueValidatorProperties.MessageTemplateInvalidPropertyValue { get; private set; }
    public RuleFromIPropertyValueValidatorAttribute(string id, string targetContextIDs);
    public RuleFromIPropertyValueValidatorAttribute(string id, DefaultContexts targetContexts);
    public RuleFromIPropertyValueValidatorAttribute(string id, string targetContextIDs, string messageTemplate);
    public RuleFromIPropertyValueValidatorAttribute(string id, DefaultContexts targetContexts, string messageTemplate);
    protected RuleFromIPropertyValueValidatorProperties get_Properties();
    protected virtual Type get_RuleType();
    protected virtual Type get_PropertiesType();
    private sealed virtual override string DevExpress.Persistent.Validation.IRulePropertyValueProperties.get_TargetPropertyName();
    private sealed virtual override void DevExpress.Persistent.Validation.IRulePropertyValueProperties.set_TargetPropertyName(string value);
    private sealed virtual override string Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.IRuleFromIPropertyValueValidatorProperties.get_MessageTemplateInvalidPropertyValue();
    private sealed virtual override void Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.IRuleFromIPropertyValueValidatorProperties.set_MessageTemplateInvalidPropertyValue(string value);
}
[NonPersistentAttribute]
public class Xpand.Persistent.Base.Validation.FromIPropertyValueValidator.RuleFromIPropertyValueValidatorProperties : RulePropertyValueProperties {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MessageTemplateInvalidPropertyValue>k__BackingField;
    [CategoryAttribute("Format")]
[LocalizableAttribute("True")]
public string MessageTemplateInvalidPropertyValue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageTemplateInvalidPropertyValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageTemplateInvalidPropertyValue(string value);
}
public interface Xpand.Persistent.Base.Validation.IPasswordScoreController {
}
public interface Xpand.Persistent.Base.Validation.IRuleMultiPropertiesValues {
    [RequiredAttribute]
[CategoryAttribute("Data")]
public string TargetProperties { get; public set; }
    [DefaultValueAttribute(";,.:")]
[CategoryAttribute("Data")]
[RequiredAttribute]
public string Delimiters { get; public set; }
    public abstract virtual string get_TargetProperties();
    public abstract virtual void set_TargetProperties(string value);
    public abstract virtual string get_Delimiters();
    public abstract virtual void set_Delimiters(string value);
}
[GenerateMessageTemplatesModelAttribute("RuleRequiredField")]
[DomainComponentAttribute]
[DescriptionAttribute("Defines templates for the messages displayed when RuleRequiredField validation rules are broken.")]
public interface Xpand.Persistent.Base.Validation.IRuleValidFileNameProperties {
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool SkipNullOrEmptyValues { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute(""{TargetPropertyName}" must not be empty.")]
[CategoryAttribute("Format")]
public string MessageTemplateFileIsValid { get; public set; }
    public abstract virtual bool get_SkipNullOrEmptyValues();
    public abstract virtual void set_SkipNullOrEmptyValues(bool value);
    public abstract virtual string get_MessageTemplateFileIsValid();
    public abstract virtual void set_MessageTemplateFileIsValid(string value);
}
public static class Xpand.Persistent.Base.Validation.RuleDefaultMessageTemplates : object {
    public static string ValidFileName;
    public static string TargetProertiesMustNotBeEmpty;
    public static string InvalidTargetPropertyName;
}
public class Xpand.Persistent.Base.Validation.RuleMessage : RuleBase {
    private List`1<string> _usedProperties;
    public ReadOnlyCollection`1<string> UsedProperties { get; }
    public RuleMessage(ContextIdentifiers targetContextIDs, Type targetType, List`1<string> usedProperties);
    public virtual ReadOnlyCollection`1<string> get_UsedProperties();
    protected virtual bool IsValidInternal(object target, String& errorMessageTemplate);
}
[NonPersistentAttribute]
public abstract class Xpand.Persistent.Base.Validation.RuleMultiPropertiesValues : RuleBaseProperties {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TargetProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Delimiters>k__BackingField;
    public string TargetProperties { get; public set; }
    public string Delimiters { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetProperties(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Delimiters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Delimiters(string value);
}
public class Xpand.Persistent.Base.Validation.RuleValidFileName : RulePropertyValue`1<object> {
    public static string PropertiesMessageTemplateMustNotBeEmpty;
    private static string RuleValidFileNameDefaultMessageTemplate;
    public static string DefaultMessageValidFileName { get; public set; }
    public IRuleValidFileNameProperties Properties { get; }
    public Type PropertiesType { get; }
    public RuleValidFileName(string id, IMemberInfo property, ContextIdentifiers targetContextIDs);
    public RuleValidFileName(string id, IMemberInfo property, ContextIdentifiers targetContextIDs, Type objectType);
    public RuleValidFileName(IRuleValidFileNameProperties properties);
    public static string get_DefaultMessageValidFileName();
    public static void set_DefaultMessageValidFileName(string value);
    protected virtual bool IsValueValid(object value, String& errorMessageTemplate);
    public IRuleValidFileNameProperties get_Properties();
    public virtual Type get_PropertiesType();
}
[AttributeUsageAttribute("128")]
public class Xpand.Persistent.Base.Validation.RuleValidFileNameAttribute : RuleBaseAttribute {
    protected IRuleValidFileNameProperties Properties { get; }
    protected Type RuleType { get; }
    protected Type PropertiesType { get; }
    public string TargetPropertyName { get; public set; }
    private string Xpand.Persistent.Base.Validation.IRuleValidFileNameProperties.MessageTemplateFileIsValid { get; private set; }
    public RuleValidFileNameAttribute(string id, string targetContextIDs);
    public RuleValidFileNameAttribute(DefaultContexts targetContexts);
    public RuleValidFileNameAttribute(string id, DefaultContexts targetContexts);
    public RuleValidFileNameAttribute(string id, string targetContextIDs, string messageTemplate);
    public RuleValidFileNameAttribute(string id, DefaultContexts targetContexts, string messageTemplate);
    protected virtual bool CheckIfCollectionPropertyRuleAttributeCore();
    protected IRuleValidFileNameProperties get_Properties();
    protected virtual Type get_RuleType();
    protected virtual Type get_PropertiesType();
    public sealed virtual string get_TargetPropertyName();
    public sealed virtual void set_TargetPropertyName(string value);
    private sealed virtual override string Xpand.Persistent.Base.Validation.IRuleValidFileNameProperties.get_MessageTemplateFileIsValid();
    private sealed virtual override void Xpand.Persistent.Base.Validation.IRuleValidFileNameProperties.set_MessageTemplateFileIsValid(string value);
}
[DomainComponentAttribute]
public class Xpand.Persistent.Base.Validation.RuleValidFileNameProperties : RulePropertyValueProperties {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MessageTemplateFileIsValid>k__BackingField;
    public string MessageTemplateFileIsValid { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageTemplateFileIsValid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageTemplateFileIsValid(string value);
}
[NonPersistentAttribute]
public abstract class Xpand.Persistent.Base.XpandBaseCustomObject : XpandCustomObject {
    private bool _isDefaultPropertyAttributeInit;
    private XPMemberInfo _defaultPropertyMemberInfo;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectSpace <ObjectSpace>k__BackingField;
    [BrowsableAttribute("False")]
public IObjectSpace ObjectSpace { get; public set; }
    protected XpandBaseCustomObject(Session session);
    public virtual void AfterConstruction();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual IObjectSpace get_ObjectSpace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObjectSpace(IObjectSpace value);
}
[DomainComponentAttribute]
[DefaultPropertyAttribute("FileName")]
public class Xpand.Persistent.Base.XpandFileData : object {
    private Byte[] _content;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FullName>k__BackingField;
    private PropertyChangedEventHandler PropertyChanged;
    public int Size { get; public set; }
    [SizeAttribute("260")]
public string FileName { get; public set; }
    [PersistentAttribute]
[DelayedAttribute]
[ValueConverterAttribute("DevExpress.Persistent.Base.CompressionConverter")]
[MemberDesignTimeVisibilityAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Byte[] Content { get; public set; }
    [NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
public bool IsEmpty { get; }
    [InvisibleInAllViewsAttribute]
[SizeAttribute("-1")]
public string FullName { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    public sealed virtual void LoadFromStream(string fileName, Stream stream);
    public sealed virtual void SaveToStream(Stream stream);
    public sealed virtual void Clear();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileName(string value);
    public Byte[] get_Content();
    public void set_Content(Byte[] value);
    public sealed virtual bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FullName(string value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void <>OnPropertyChanged(PropertyChangedEventArgs eventArgs);
}
public class Xpand.Persistent.Base.XpandLocalizedClassInfoTypeConverter : LocalizedClassInfoTypeConverter {
    protected virtual string GetClassCaption(string fullName);
}
public class Xpand.Persistent.Base.Xpo.AssemblyXpoTypeInfoSource : XpandXpoTypeInfoSource {
    private Assembly _assembly;
    private static ReflectionDictionary _reflectionDictionary;
    private static Dictionary`2<Assembly, XpandXpoTypeInfoSource> _assemblyInstance;
    public static Dictionary`2<Assembly, XpandXpoTypeInfoSource> AssemblyInstance { get; }
    public AssemblyXpoTypeInfoSource(TypesInfo typesInfo, Assembly assembly);
    public AssemblyXpoTypeInfoSource(TypesInfo typesInfo, Assembly assembly, Type[] types);
    private AssemblyXpoTypeInfoSource(TypesInfo typesInfo, XPDictionary xpDictionary);
    private static AssemblyXpoTypeInfoSource();
    private static ReflectionDictionary GetDictionary(Type[] types);
    public static Dictionary`2<Assembly, XpandXpoTypeInfoSource> get_AssemblyInstance();
    private sealed virtual override void DevExpress.ExpressApp.DC.IEntityStore.RegisterEntity(Type type);
    private sealed virtual override bool DevExpress.ExpressApp.DC.IEntityStore.CanRegister(Type type);
    public static void CreateSource(Assembly assembly);
    private bool IsValidType(Type type);
}
public class Xpand.Persistent.Base.Xpo.BinaryOperatorValueMapperCriteriaProcessor : CriteriaProcessorBase {
    private Dictionary`2<string, object> _dictionary;
    public BinaryOperatorValueMapperCriteriaProcessor(Dictionary`2<string, object> dictionary);
    private sealed virtual override void DevExpress.Data.Filtering.ICriteriaVisitor.Visit(BinaryOperator theOperator);
}
public class Xpand.Persistent.Base.Xpo.CustomFunctionValueProcessor : XpandCriteriaProcessorBase {
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BetweenOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BinaryOperator theOperator);
    private OperandValue GetCustomFunctionOperandValue(CriteriaOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(FunctionOperator theOperator);
}
public class Xpand.Persistent.Base.Xpo.DCPropertyInfo : PropertyInfo {
    private XpandCustomMemberInfo _xpandCustomMemberInfo;
    private XPClassInfo _declaringTypeCore;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CanWrite>k__BackingField;
    public string Name { get; }
    public Type PropertyType { get; }
    public Type DeclaringType { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public PropertyAttributes Attributes { get; }
    public Type ReflectedType { get; }
    public DCPropertyInfo(string name, Type propertyType, XPClassInfo declaringType, bool canRead, bool canWrite, XpandCustomMemberInfo xpandCustomMemberInfo);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual Type get_PropertyType();
    public virtual Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public virtual bool get_CanRead();
    [CompilerGeneratedAttribute]
public virtual bool get_CanWrite();
    public virtual PropertyAttributes get_Attributes();
    public virtual Type get_ReflectedType();
    public virtual string ToString();
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public void RemoveAttribute(Attribute attribute);
    public void AddAttribute(Attribute attribute);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.Xpo.Extensions : object {
    [ExtensionAttribute]
public static IDataStore ConnectionProvider(IDataLayer dataLayer, object obj);
    [ExtensionAttribute]
public static IDataStore ConnectionProvider(IDataLayer dataLayer, Type type);
    [ExtensionAttribute]
public static void Register(ICustomFunctionOperator customFunctionOperator);
    [ExtensionAttribute]
public static void ValidateAndCommitChanges(Session session);
    [ExtensionAttribute]
public static IObjectSpace XPObjectSpace(object xpObject);
}
public class Xpand.Persistent.Base.Xpo.FullTextOperatorProcessor : object {
    private IEnumerable`1<XPMemberInfo> _memberInfos;
    public FullTextOperatorProcessor(IEnumerable`1<XPMemberInfo> memberInfos);
    public static object Process(CriteriaOperator op, IEnumerable`1<XPMemberInfo> memberInfos);
    public sealed virtual CriteriaOperator Visit(BetweenOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(BinaryOperator theOperator);
    private bool IsFullIndexed(CriteriaOperator theOperator);
    private bool IsFullIndexedCore(string name);
    public sealed virtual CriteriaOperator Visit(UnaryOperator theOperator);
    public sealed virtual CriteriaOperator Visit(InOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(GroupOperator theOperator);
    public sealed virtual CriteriaOperator Visit(OperandValue theOperand);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(FunctionOperator theOperator);
    private sealed virtual override CriteriaOperator DevExpress.Data.Filtering.IQueryCriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit(QueryOperand theOperand);
    public sealed virtual CriteriaOperator Visit(QuerySubQueryContainer theOperand);
    public sealed virtual CriteriaOperator Visit(AggregateOperand theOperand);
    public sealed virtual CriteriaOperator Visit(OperandProperty theOperand);
    public sealed virtual CriteriaOperator Visit(JoinOperand theOperand);
    [CompilerGeneratedAttribute]
private CriteriaOperator <DevExpress.Data.Filtering.ICriteriaVisitor<DevExpress.Data.Filtering.CriteriaOperator>.Visit>b__9_0(CriteriaOperator operator);
}
[ExtensionAttribute]
public static class Xpand.Persistent.Base.Xpo.IXPSimpleObjectExtensions : object {
    [ExtensionAttribute]
public static XpandCollectionMemberInfo CreateCollection(XPClassInfo classInfo, string propertyName, Type elementType, string criteria, Attribute[] attributes);
}
[ModelDisplayNameAttribute("ModelMember")]
public interface Xpand.Persistent.Base.Xpo.MetaData.IModelMemberModelMember {
    [RequiredAttribute("Xpand.Persistent.Base.Xpo.MetaData.NonRequiredCalculator")]
[CategoryAttribute("eXpand.ModelMembers")]
[ReadOnlyAttribute("True")]
public Type Type { get; public set; }
    [CategoryAttribute("eXpand.ModelMembers")]
public IModelMemberModelMembers AdditionalMembers { get; }
    [CategoryAttribute("eXpand.ModelMembers")]
[ModelReadOnlyAttribute("Xpand.Persistent.Base.Xpo.MetaData.ReadonlyOnTrueCalculator")]
public bool CreateMember { get; public set; }
    public abstract virtual Type get_Type();
    public abstract virtual void set_Type(Type value);
    public abstract virtual IModelMemberModelMembers get_AdditionalMembers();
    public abstract virtual bool get_CreateMember();
    public abstract virtual void set_CreateMember(bool value);
}
[KeyPropertyAttribute("Name")]
[ModelDisplayNameAttribute("AdditionalMember")]
public interface Xpand.Persistent.Base.Xpo.MetaData.IModelMemberModelMemberAdditionalMember {
    [RequiredAttribute("Xpand.Persistent.Base.Xpo.MetaData.NonRequiredCalculator")]
[ReadOnlyAttribute("True")]
public Type Type { get; public set; }
    [RequiredAttribute]
public string Name { get; public set; }
    public abstract virtual Type get_Type();
    public abstract virtual void set_Type(Type value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface Xpand.Persistent.Base.Xpo.MetaData.IModelMemberModelMemberCommon {
    [CategoryAttribute("eXpand.ModelMembers")]
[TypeConverterAttribute("Xpand.Persistent.Base.Xpo.MetaData.StringToModelTypeConverter")]
[RequiredAttribute]
public Type DeclaredType { get; public set; }
    [RequiredAttribute]
[CategoryAttribute("eXpand.ModelMembers")]
public string ModelNodePath { get; public set; }
    public abstract virtual Type get_DeclaredType();
    public abstract virtual void set_DeclaredType(Type value);
    public abstract virtual string get_ModelNodePath();
    public abstract virtual void set_ModelNodePath(string value);
}
[ModelNodesGeneratorAttribute("Xpand.Persistent.Base.Xpo.MetaData.ModelMemberModelMembersNodesGenerator")]
public interface Xpand.Persistent.Base.Xpo.MetaData.IModelMemberModelMembers {
}
public interface Xpand.Persistent.Base.Xpo.MetaData.IXpandModelMemberInfo {
    public bool IsReadOnly { get; }
    public abstract virtual void SynchronizeModel(object theObject, IModelNode modelNode);
    public abstract virtual void ApplyModel(object theObject, IModelNode modelNode);
    public abstract virtual bool get_IsReadOnly();
}
public class Xpand.Persistent.Base.Xpo.MetaData.ModelMemberInfoAdditionalData : object {
    private Type _memberType;
    private Type _modelOwner;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public Type MemberType { get; }
    public Type ModelOwner { get; }
    public ModelMemberInfoAdditionalData(string name, Type memberType, Type modelOwner);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Type get_MemberType();
    public Type get_ModelOwner();
}
public class Xpand.Persistent.Base.Xpo.MetaData.ModelMemberInfoData : ModelMemberInfoAdditionalData {
    private XPClassInfo _owner;
    private string _modelNodePath;
    public XPClassInfo Owner { get; }
    public string ModelNodePath { get; }
    public ModelMemberInfoData(XPClassInfo owner, string name, Type memberType, string modelNodePath, Type modelOwner);
    public ModelMemberInfoData(XPClassInfo owner, Type memberType, string modelNodePath, Type modelOwner);
    public XPClassInfo get_Owner();
    public string get_ModelNodePath();
}
[DomainLogicAttribute("Xpand.Persistent.Base.Xpo.MetaData.IModelMemberModelMemberAdditionalMember")]
public class Xpand.Persistent.Base.Xpo.MetaData.ModelMemberModelMemberAdditionalMemberDomainLogic : object {
    public static string Get_ModelNodePath(IModelMemberModelMemberAdditionalMember modelMember);
    public static Type Get_Type(IModelMemberModelMemberAdditionalMember modelMember);
}
[DomainLogicAttribute("Xpand.Persistent.Base.Xpo.MetaData.IModelMemberModelMember")]
public class Xpand.Persistent.Base.Xpo.MetaData.ModelMemberModelMemberDomainLogic : ModelMemberExDomainLogicBase`1<IModelMemberModelMember> {
    public static Type Get_Type(IModelMemberModelMember modelMember);
    public static string Get_ModelNodePath(IModelMemberModelMember modelMember);
    public static IMemberInfo Get_MemberInfo(IModelMemberModelMember modelMemberCalculated);
    private static XpandModelMemberInfo GetXpandModelMemberInfo(IModelMemberModelMember memberModelMember, XPClassInfo info);
}
public class Xpand.Persistent.Base.Xpo.MetaData.ModelMemberModelMembersNodesGenerator : ModelNodesGeneratorBase {
    protected virtual void GenerateNodesCore(ModelNode node);
}
public class Xpand.Persistent.Base.Xpo.MetaData.NonRequiredCalculator : object {
    public sealed virtual bool IsRequired(IModelNode node, string propertyName);
}
public class Xpand.Persistent.Base.Xpo.MetaData.ReadonlyOnTrueCalculator : object {
    public sealed virtual bool IsReadOnly(IModelNode node, string propertyName);
    public sealed virtual bool IsReadOnly(IModelNode node, IModelNode childNode);
}
public class Xpand.Persistent.Base.Xpo.MetaData.StringToEnumConverter`1 : StringConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class Xpand.Persistent.Base.Xpo.MetaData.StringToModelTypeConverter : StringToTypeConverterBase {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class Xpand.Persistent.Base.Xpo.MetaData.XpandCollectionMemberInfo : XpandCustomMemberInfo {
    private string _criteria;
    public string Criteria { get; }
    protected bool CanPersist { get; }
    public XpandCollectionMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, string criteria);
    public string get_Criteria();
    public virtual object GetValue(object theObject);
    private Object[] GetArguments(XPBaseObject xpBaseObject);
    protected virtual bool get_CanPersist();
}
public class Xpand.Persistent.Base.Xpo.MetaData.XpandModelMemberInfo : XpandCustomMemberInfo {
    private string _modelNodePath;
    private XpandCustomMemberInfo _modelNodeIdMemberInfo;
    public string ModelNodePath { get; }
    public XpandModelMemberInfo(ModelMemberInfoData memberInfoData, bool isReadOnly, ModelMemberInfoAdditionalData[] additionalMembers);
    public sealed virtual void SynchronizeModel(object theObject, IModelNode modelNode);
    public sealed virtual void ApplyModel(object theObject, IModelNode modelNode);
    public void SetModelNodeValue(object theObject, IModelNode modelNode);
    public string get_ModelNodePath();
    private sealed virtual override bool Xpand.Persistent.Base.Xpo.MetaData.IXpandModelMemberInfo.get_IsReadOnly();
}
public class Xpand.Persistent.Base.Xpo.MetaData.XpandModelMemberInfoController : ViewController`1<DetailView> {
    private List`1<IXpandModelMemberInfo> _memberInfos;
    protected virtual void OnActivated();
    public void SynchronizeModel(IModelNode modelNode, object theObject);
}
public class Xpand.Persistent.Base.Xpo.PatchXpoSpecificFieldNameProcessor : CriteriaProcessorBase {
    private List`1<string> _existingLookupFieldNames;
    private bool _remove;
    public PatchXpoSpecificFieldNameProcessor(List`1<string> existingLookupFieldNames);
    protected virtual void Process(OperandProperty theOperand);
}
public class Xpand.Persistent.Base.Xpo.XpandXpoTypeInfoSource : XpoTypeInfoSource {
    public XpandXpoTypeInfoSource(TypesInfo typesInfo);
    public XpandXpoTypeInfoSource(TypesInfo typesInfo, Type[] types);
    public XpandXpoTypeInfoSource(TypesInfo typesInfo, XPDictionary dictionary);
    private sealed virtual override void DevExpress.ExpressApp.DC.ITypeInfoSource.EnumMembers(TypeInfo info, EnumMembersHandler handler);
    private sealed virtual override void DevExpress.ExpressApp.DC.ITypeInfoSource.InitMemberInfo(object member, XafMemberInfo memberInfo);
    private void EnumDCInterfaceMembers(TypeInfo info, EnumMembersHandler handler);
    private IEnumerable`1<DCPropertyInfo> DCPropertyInfos(XPClassInfo classInfo);
    private DCPropertyInfo DcPropertyInfo(XPClassInfo classInfo, XpandCustomMemberInfo info);
}
