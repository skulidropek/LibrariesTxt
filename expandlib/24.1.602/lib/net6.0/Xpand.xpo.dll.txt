[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public class Xpand.Xpo.Attributes.AggregatedDelete : Attribute {
}
public class Xpand.Xpo.Attributes.Encrypt : Attribute {
}
public class Xpand.Xpo.Collections.ManyToManyCollectionHelper`1 : object {
    private XPClassInfo intermediateClassInfo;
    private IXPSimpleObject owner;
    private XPBaseCollection hiddenCollection;
    private XPCollection`1<T> collection;
    private Dictionary`2<object, IntermediateObject> intermediateObjectHash;
    public ManyToManyCollectionHelper`1(IXPSimpleObject owner, XPBaseCollection hiddenCollection, string hiddenCollectionName);
    private void collection_CollectionChanged(object sender, XPCollectionChangedEventArgs e);
    public XPCollection`1<T> GetCollection();
}
public class Xpand.Xpo.Collections.XpandXPCollection`1 : XPCollection`1<T> {
    public XpandXPCollection`1(Session session, object theOwner, XPMemberInfo refProperty);
    public XpandXPCollection`1(CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XpandXPCollection`1(Expression`1<Func`2<T, bool>> theCriteria, SortProperty[] sortProperties);
    public XpandXPCollection`1(Session session);
    public XpandXPCollection`1(Session session, CriteriaOperator theCriteria, SortProperty[] sortProperties);
    public XpandXPCollection`1(Session session, bool loadingEnabled);
    public XpandXPCollection`1(Session session, IEnumerable originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    public XpandXPCollection`1(Session session, IEnumerable originalCollection, Expression`1<Func`2<T, bool>> copyFilter, bool caseSensitive);
    public XpandXPCollection`1(Session session, IEnumerable originalCollection, CriteriaOperator copyFilter);
    public XpandXPCollection`1(Session session, IEnumerable originalCollection, Expression`1<Func`2<T, bool>> copyFilter);
    public XpandXPCollection`1(Session session, IEnumerable originalCollection);
    public XpandXPCollection`1(Session session, XPBaseCollection originalCollection, CriteriaOperator copyFilter, bool caseSensitive);
    public XpandXPCollection`1(Session session, XPBaseCollection originalCollection, Expression`1<Func`2<T, bool>> copyFilter, bool caseSensitive);
    public XpandXPCollection`1(Session session, XPBaseCollection originalCollection, CriteriaOperator copyFilter);
    public XpandXPCollection`1(Session session, XPBaseCollection originalCollection, Expression`1<Func`2<T, bool>> copyFilter);
    public XpandXPCollection`1(XPBaseCollection originalCollection, CriteriaOperator filter);
    public XpandXPCollection`1(XPBaseCollection originalCollection, Expression`1<Func`2<T, bool>> filter);
    public XpandXPCollection`1(XPBaseCollection originalCollection, CriteriaOperator filter, bool caseSensitive);
    public XpandXPCollection`1(XPBaseCollection originalCollection, Expression`1<Func`2<T, bool>> filter, bool caseSensitive);
    public XpandXPCollection`1(XPBaseCollection originalCollection);
    public XpandXPCollection`1(Session session, XPBaseCollection originalCollection);
    public XpandXPCollection`1(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, CriteriaOperator condition, bool selectDeleted);
    public XpandXPCollection`1(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, Expression`1<Func`2<T, bool>> condition, bool selectDeleted);
    public XpandXPCollection`1(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, CriteriaOperator condition);
    public XpandXPCollection`1(PersistentCriteriaEvaluationBehavior criteriaEvaluationBehavior, Session session, Expression`1<Func`2<T, bool>> expression);
    public XpandXPCollection`1(Session session, Expression`1<Func`2<T, bool>> expression, SortProperty[] sortProperties);
}
[ExtensionAttribute]
public static class Xpand.Xpo.Collections.XPBaseCollectionExtensions : object {
    public static CriteriaOperator EmptyCollectionCriteria;
    private static XPBaseCollectionExtensions();
    [ExtensionAttribute]
public static int GetCount(XPBaseCollection xpBaseCollection);
    public static int GetObjectsCount(XPClassInfo xpClassInfo, CriteriaOperator criteria, Session session);
    public static CriteriaOperator CombineCriteria(CriteriaOperator[] criteriaOperators);
}
[ExtensionAttribute]
public static class Xpand.Xpo.Collections.XPCollectionExtensions : object {
    [ExtensionAttribute]
public static void CreateCriteria(XPCollection`1<T> collection, Expression`1<Func`2<T, bool>> expression);
    [ExtensionAttribute]
public static void CombineFilter(XPCollection`1<T> collection, Expression`1<Func`2<T, bool>> expression);
}
public enum Xpand.Xpo.ConnectionProviders.ConnectionProviderType : Enum {
    public int value__;
    public static ConnectionProviderType Unknown;
    public static ConnectionProviderType MSSQL;
    public static ConnectionProviderType Oracle;
    public static ConnectionProviderType MySQL;
}
[ExtensionAttribute]
public static class Xpand.Xpo.ConnectionProviders.DBColumnTypeExtensions : object {
    [ExtensionAttribute]
public static Type GetType(DBColumnType dbColumnType, Type propertyType);
}
public class Xpand.Xpo.ConnectionProviders.MSSqlConnectionProvider : MSSqlConnectionProvider {
    public static string GetDayAndMonth;
    public MSSqlConnectionProvider(string connection, AutoCreateOption autoCreateOption);
    public MSSqlConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    private void GetColumns(DBTable table);
    private DBColumnType GetTypeFromString(string typeName, int length);
    protected virtual UpdateSchemaResult ProcessUpdateSchema(bool skipIfFirstTableNotExists, DBTable[] tables);
    private void UpdateColumnSize(IEnumerable`1<DBTable> tables);
    public virtual string FormatFunction(FunctionOperatorType operatorType, String[] operands);
}
public class Xpand.Xpo.ConnectionProviders.MySqlConnectionProvider : MySqlConnectionProvider {
    public MySqlConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    private void GetColumns(DBTable table);
    private DBColumnType GetTypeFromString(string typeName, Int32& size);
    private static string RemoveBrackets(string typeName);
}
public class Xpand.Xpo.ConnectionProviders.OracleConnectionProvider : BaseOracleConnectionProvider {
    public OracleConnectionProvider(IDbConnection connection, AutoCreateOption autoCreateOption);
    public virtual void GetTableSchema(DBTable table, bool checkIndexes, bool checkForeignKeys);
    protected virtual void CommandBuilderDeriveParameters(IDbCommand command);
    protected virtual IDbConnection CreateConnection();
    private void GetColumns(DBTable table);
    private DBColumnType GetTypeFromString(string typeName, int size, int precision, int scale);
}
public class Xpand.Xpo.Converters.SerializableObjectConverter : ValueConverter {
    public Type StorageType { get; }
    public virtual Type get_StorageType();
    public virtual object ConvertToStorageType(object value);
    public virtual object ConvertFromStorageType(object value);
}
public class Xpand.Xpo.Converters.TypeConverters.EnumDescConverter : EnumConverter {
    protected Type myVal;
    public EnumDescConverter(Type type);
    public static string GetEnumDescription(Enum value);
    public static string GetEnumDescription(Type value, string name);
    public static object GetEnumValue(Type value, string description);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Xpand.Xpo.Converters.TypeConverters.EnumDescTypeConverter : TypeConverter {
    protected Type myVal;
    public EnumDescTypeConverter(Type type);
    public static string GetEnumDescription(Enum value);
    public static string GetEnumDescription(Type value, string name);
    public static object GetEnumValue(Type value, string description);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public static String[] GetEnumDescriptions(Type type, bool useValuesAsIDColumn);
    public static Array GetEnumDescriptions(Type type);
}
public class Xpand.Xpo.Converters.TypeConverters.Int32TypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Xpand.Xpo.CustomFunctions.FullTextContainsFunction : object {
    private static FullTextContainsFunction _instance;
    public static string FunctionName;
    public static ICustomFunctionOperator Instance { get; }
    public string Name { get; }
    private static FullTextContainsFunction();
    public static ICustomFunctionOperator get_Instance();
    public sealed virtual object Evaluate(Object[] operands);
    public sealed virtual string get_Name();
    public sealed virtual Type ResultType(Type[] operands);
    public sealed virtual string Format(Type providerType, String[] operands);
}
[AttributeUsageAttribute("1")]
public class Xpand.Xpo.DB.DataStoreAttribute : Attribute {
    private Type _nameSpaceType;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLegacy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DataStoreName>k__BackingField;
    public bool IsLegacy { get; }
    public string ConnectionString { get; protected set; }
    public string NameSpace { get; }
    public string DataStoreName { get; }
    public DataStoreAttribute(Type nameSpaceType, string dataStoreName);
    public DataStoreAttribute(Type nameSpaceType, string dataStoreName, bool isLegacy);
    [CompilerGeneratedAttribute]
public bool get_IsLegacy();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
protected void set_ConnectionString(string value);
    public string get_NameSpace();
    [CompilerGeneratedAttribute]
public string get_DataStoreName();
}
[ExtensionAttribute]
public static class Xpand.Xpo.DB.DataStoreExtensions : object {
    [ExtensionAttribute]
public static void DoWithConnectionProviderSql(IDataStore dataStore, Action`1<ConnectionProviderSql> action);
    [ExtensionAttribute]
public static void CreateForeignKey(IDataStore dataStore, XPMemberInfo xpMemberInfo, bool throwUnableToCreateDBObjectException);
    [ExtensionAttribute]
public static void CreateColumn(IDataStore dataStore, XPMemberInfo xpMemberInfo, bool throwUnableToCreateDBObjectException);
    [ExtensionAttribute]
public static void CreateForeignKey(ConnectionProviderSql connectionProviderSql, XPMemberInfo xpMemberInfo, bool throwUnableToCreateDBObjectException);
    [ExtensionAttribute]
public static void CreateColumn(ConnectionProviderSql connectionProviderSql, XPMemberInfo xpMemberInfo, bool throwUnableToCreateDBObjectException);
    private static void CreateColumnCore(XPMemberInfo xpMemberInfo, bool throwUnableToCreateDBObjectException, ConnectionProviderSql sql, DBColumn column);
    private static Action`1<ConnectionProviderSql> CreateForeighKey(XPMemberInfo xpMemberInfo);
    private static void CallSchemaUpdateMethod(ConnectionProviderSql connectionProviderSql, Action`1<ConnectionProviderSql> action, bool throwUnableToCreateDBObjectException);
    private static DBColumnType GetDbColumnType(XPMemberInfo xpMemberInfo);
}
public class Xpand.Xpo.DB.DataStoreInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DBTable> <DbTables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLegacy>k__BackingField;
    public List`1<DBTable> DbTables { get; }
    public bool IsLegacy { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DBTable> get_DbTables();
    [CompilerGeneratedAttribute]
public bool get_IsLegacy();
    [CompilerGeneratedAttribute]
public void set_IsLegacy(bool value);
}
public class Xpand.Xpo.DB.DataStoreManager : object {
    public static string DefaultDictionaryKey;
    private Dictionary`2<KeyInfo, ReflectionDictionary> _reflectionDictionaries;
    private Dictionary`2<string, IDataStoreManagerDataLayer> _simpleDataLayers;
    private Dictionary`2<string, List`1<string>> _tables;
    private string _connectionString;
    private DataStoreAttribute[] _dataStoreAttributes;
    private bool _dataLayersCreated;
    public Dictionary`2<KeyInfo, ReflectionDictionary> ReflectionDictionaries { get; }
    public DataStoreManager(string connectionString);
    public KeyInfo GetKeyInfo(Type type);
    private KeyInfo GetKeyInfo(XPClassInfo xpClassInfo);
    private void AddTableNames(XPClassInfo xpClassInfo, string key);
    private IEnumerable`1<string> GetIntermediateTableNames(XPClassInfo classInfo);
    public ReflectionDictionary GetDictionary(Type type);
    public Dictionary`2<KeyInfo, ReflectionDictionary> get_ReflectionDictionaries();
    private XPClassInfo GetXPClassInfo(Type type);
    public ReflectionDictionary GetDictionary(XPClassInfo xpClassInfo);
    private ReflectionDictionary GetDictionary(KeyInfo keyInfo);
    public IDataStore GetConnectionProvider(Type type);
    public string GetConnectionString(Type type);
    public string GetConnectionString(string key);
    public IDataStore GetConnectionProvider(string key);
    public static IEnumerable`1<DataStoreAttribute> GetDataStoreAttributes(string dataStoreName);
    public IEnumerable`1<DataStoreAttribute> GetDataStoreAttributes();
    public Dictionary`2<string, IDataStoreManagerDataLayer> GetDataLayers(IDataStore defaultStore);
    public IDataStoreManagerDataLayer GetDataLayer(string key, IDataStore defaultStore);
    public Dictionary`2<IDataStore, DataStoreInfo> GetDataStores(DBTable[] dbTables, IDataStore dataStore);
    public string GetKey(string tableName);
    public Type GetType(string typeName);
}
public class Xpand.Xpo.DB.DataStoreManagerSimpleDataLayer : SimpleDataLayer {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLegacy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsMainLayer>k__BackingField;
    public bool IsLegacy { get; }
    public bool IsMainLayer { get; }
    public DataStoreManagerSimpleDataLayer(XPDictionary dictionary, IDataStore provider, bool isMainLayer, bool isLegacy);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLegacy();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMainLayer();
    private sealed virtual override IDataStore Xpand.Xpo.DB.IDataStoreManagerDataLayer.get_ConnectionProvider();
}
public class Xpand.Xpo.DB.DataStoreManagerThreadSafeDataLayer : SimpleDataLayer {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLegacy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsMainLayer>k__BackingField;
    public bool IsLegacy { get; }
    public bool IsMainLayer { get; }
    public DataStoreManagerThreadSafeDataLayer(XPDictionary dictionary, IDataStore provider, bool isMainLayer, bool isLegacy);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLegacy();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMainLayer();
    private sealed virtual override IDataStore Xpand.Xpo.DB.IDataStoreManagerDataLayer.get_ConnectionProvider();
}
public class Xpand.Xpo.DB.DataStoreModifyDataEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ModificationStatement[] <ModificationStatements>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ModificationResult <ModificationResult>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Handled>k__BackingField;
    public ModificationStatement[] ModificationStatements { get; public set; }
    public ModificationResult ModificationResult { get; public set; }
    public bool Handled { get; public set; }
    public DataStoreModifyDataEventArgs(ModificationStatement[] dmlStatements);
    [CompilerGeneratedAttribute]
public ModificationStatement[] get_ModificationStatements();
    [CompilerGeneratedAttribute]
public void set_ModificationStatements(ModificationStatement[] value);
    [CompilerGeneratedAttribute]
public ModificationResult get_ModificationResult();
    [CompilerGeneratedAttribute]
public void set_ModificationResult(ModificationResult value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class Xpand.Xpo.DB.DataStoreProxy : object {
    private BaseDataLayer _dataLayerCore;
    private IDataStore _dataStoreCore;
    protected List`1<ISchemaUpdater> SchemaUpdaters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<DataStoreModifyDataEventArgs> DataStoreModifyData;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<DataStoreSelectDataEventArgs> DataStoreSelectData;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<DataStoreUpdateSchemaEventArgs> DataStoreUpdateSchema;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConnectionOpeningEventHandler ConnectionOpening;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConnectionOpenedEventHandler ConnectionOpened;
    public IDataStore DataStore { get; }
    public AutoCreateOption AutoCreateOption { get; }
    public IDbConnection Connection { get; }
    public DataStoreProxy(IDataStore dataStore);
    public DataStoreProxy(string connectionString, AutoCreateOption autoCreateOption);
    public static ConnectionProviderSql op_Implicit(DataStoreProxy proxy);
    public sealed virtual IDataStore get_DataStore();
    public sealed virtual AutoCreateOption get_AutoCreateOption();
    public virtual ModificationResult ModifyData(ModificationStatement[] dmlStatements);
    public virtual SelectedData SelectData(SelectStatement[] selects);
    public void RegisterSchemaUpdater(ISchemaUpdater schemaUpdater);
    public virtual UpdateSchemaResult UpdateSchema(bool dontCreateIfFirstTableNotExist, DBTable[] tables);
    protected void OnDataStoreModifyData(DataStoreModifyDataEventArgs args);
    protected void OnDataStoreSelectData(DataStoreSelectDataEventArgs args);
    protected void OnDataStoreUpdateSchema(DataStoreUpdateSchemaEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataStoreModifyData(EventHandler`1<DataStoreModifyDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataStoreModifyData(EventHandler`1<DataStoreModifyDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataStoreSelectData(EventHandler`1<DataStoreSelectDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataStoreSelectData(EventHandler`1<DataStoreSelectDataEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataStoreUpdateSchema(EventHandler`1<DataStoreUpdateSchemaEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataStoreUpdateSchema(EventHandler`1<DataStoreUpdateSchemaEventArgs> value);
    public sealed virtual IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectionOpening(ConnectionOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectionOpening(ConnectionOpeningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConnectionOpened(ConnectionOpenedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConnectionOpened(ConnectionOpenedEventHandler value);
    public sealed virtual IDbCommand CreateCommand();
    private sealed virtual override object DevExpress.Xpo.Helpers.ICommandChannel.Do(string command, object args);
    public virtual void Init();
    protected virtual void OnConnectionOpened(ConnectionOpenedEventArgs e);
    protected virtual void OnConnectionOpening(ConnectionOpeningEventArgs e);
}
public class Xpand.Xpo.DB.DataStoreSelectDataEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SelectStatement[] <SelectStatements>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SelectedData <SelectedData>k__BackingField;
    public SelectStatement[] SelectStatements { get; public set; }
    public bool Handled { get; public set; }
    public SelectedData SelectedData { get; public set; }
    public DataStoreSelectDataEventArgs(SelectStatement[] selects);
    [CompilerGeneratedAttribute]
public SelectStatement[] get_SelectStatements();
    [CompilerGeneratedAttribute]
public void set_SelectStatements(SelectStatement[] value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public SelectedData get_SelectedData();
    [CompilerGeneratedAttribute]
public void set_SelectedData(SelectedData value);
}
public class Xpand.Xpo.DB.DataStoreUpdateSchemaEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DBTable[] <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DontCreateIfFirstTableNotExist>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UpdateSchemaResult <UpdateSchemaResult>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Updated>k__BackingField;
    public DBTable[] Tables { get; public set; }
    public bool DontCreateIfFirstTableNotExist { get; public set; }
    public UpdateSchemaResult UpdateSchemaResult { get; public set; }
    public bool Updated { get; public set; }
    public DataStoreUpdateSchemaEventArgs(bool dontCreateIfFirstTableNotExist, DBTable[] tables);
    [CompilerGeneratedAttribute]
public DBTable[] get_Tables();
    [CompilerGeneratedAttribute]
public void set_Tables(DBTable[] value);
    [CompilerGeneratedAttribute]
public bool get_DontCreateIfFirstTableNotExist();
    [CompilerGeneratedAttribute]
public void set_DontCreateIfFirstTableNotExist(bool value);
    [CompilerGeneratedAttribute]
public UpdateSchemaResult get_UpdateSchemaResult();
    [CompilerGeneratedAttribute]
public void set_UpdateSchemaResult(UpdateSchemaResult value);
    [CompilerGeneratedAttribute]
public bool get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(bool value);
}
public interface Xpand.Xpo.DB.ICanCreateSchema {
    public bool CanCreateSchema { get; }
    public abstract virtual bool get_CanCreateSchema();
    public abstract virtual void CreateColumn(DBTable table, DBColumn column);
}
public interface Xpand.Xpo.DB.IDataStoreManagerDataLayer {
    public bool IsLegacy { get; }
    public bool IsMainLayer { get; }
    public IDataStore ConnectionProvider { get; }
    public abstract virtual bool get_IsLegacy();
    public abstract virtual bool get_IsMainLayer();
    public abstract virtual IDataStore get_ConnectionProvider();
}
public interface Xpand.Xpo.DB.IDataStoreProxy {
    public IDataStore DataStore { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataStoreModifyData(EventHandler`1<DataStoreModifyDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataStoreModifyData(EventHandler`1<DataStoreModifyDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataStoreSelectData(EventHandler`1<DataStoreSelectDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataStoreSelectData(EventHandler`1<DataStoreSelectDataEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataStoreUpdateSchema(EventHandler`1<DataStoreUpdateSchemaEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataStoreUpdateSchema(EventHandler`1<DataStoreUpdateSchemaEventArgs> value);
    public abstract virtual IDataStore get_DataStore();
}
public interface Xpand.Xpo.DB.ISchemaUpdater {
    public abstract virtual void Update(ConnectionProviderSql proxy, DataStoreUpdateSchemaEventArgs dataStoreUpdateSchemaEventArgs);
}
[IsReadOnlyAttribute]
public class Xpand.Xpo.DB.KeyInfo : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLegacy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Key>k__BackingField;
    public bool IsLegacy { get; }
    public string Key { get; }
    public KeyInfo(bool isLegacy, string key);
    [CompilerGeneratedAttribute]
public bool get_IsLegacy();
    [CompilerGeneratedAttribute]
public string get_Key();
}
public class Xpand.Xpo.DB.SchemaColumnSizeUpdater : object {
    private static HashSet`1<string> HashSet;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static bool <Disabled>k__BackingField;
    public static bool Disabled { get; public set; }
    private static SchemaColumnSizeUpdater();
    [CompilerGeneratedAttribute]
public static bool get_Disabled();
    [CompilerGeneratedAttribute]
public static void set_Disabled(bool value);
    public sealed virtual void Update(ConnectionProviderSql connectionProviderSql, DataStoreUpdateSchemaEventArgs dataStoreUpdateSchemaEventArgs);
    private void UpdateColumnSize(IEnumerable`1<DBTable> tables, ConnectionProviderSql sqlDataStore);
    private string GetSql(DBTable table, ConnectionProviderSql sqlDataStore, DBColumn column);
    private bool NeedsAltering(DBColumn column, DBColumn actualColumn);
}
[ObsoleteAttribute("Use SequenceGenerator", "True")]
public class Xpand.Xpo.DB.XpoSequencer : XPBaseObject {
    [KeyAttribute("True")]
public Guid Oid;
    [SizeAttribute("254")]
[IndexedAttribute]
public string SequencePrefix;
    public int Counter;
    public static int MaxIdGenerationAttempts;
    public static int MinConflictDelay;
    public static int MaxConflictDelay;
    public XpoSequencer(Session session);
    public static int GetNextValue(IDataLayer dataLayer, string sequencePrefix);
}
[ObsoleteAttribute("Use SequenceGenerator", "True")]
public class Xpand.Xpo.DB.XpoServerId : XPLiteObject {
    private static object SyncRoot;
    public string SequencePrefix;
    private static string cachedSequencePrefix;
    private static IDataLayer dataLayerForCachedServerPrefix;
    [KeyAttribute("False")]
public int Zero { get; public set; }
    public XpoServerId(Session session);
    private static XpoServerId();
    public int get_Zero();
    public void set_Zero(int value);
    public static void ResetCache();
    public static string GetSequencePrefix(IDataLayer dataLayer);
    public static int GetNextUniqueValue(IDataLayer dataLayer, string sequencePrefix);
    public static int GetNextUniqueValue(IXPSimpleObject simpleObject);
}
[ExtensionAttribute]
public static class Xpand.Xpo.ExpressionExtensions : object {
    [ExtensionAttribute]
public static Expression Visit(Expression exp, Func`2<T, Expression> visitor);
    [ExtensionAttribute]
public static TExp Visit(TExp exp, Func`2<T, Expression> visitor);
    [ExtensionAttribute]
public static Expression`1<TDelegate> Visit(Expression`1<TDelegate> exp, Func`2<T, Expression> visitor);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Visit(IQueryable`1<TSource> source, Func`2<T, Expression> visitor);
}
public abstract class Xpand.Xpo.ExpressionVisitor : object {
    protected virtual Expression Visit(Expression exp);
    protected virtual MemberBinding VisitBinding(MemberBinding binding);
    protected virtual ElementInit VisitElementInitializer(ElementInit initializer);
    protected virtual Expression VisitUnary(UnaryExpression u);
    protected virtual Expression VisitBinary(BinaryExpression b);
    protected virtual Expression VisitTypeIs(TypeBinaryExpression b);
    protected virtual Expression VisitConstant(ConstantExpression c);
    protected virtual Expression VisitConditional(ConditionalExpression c);
    protected virtual Expression VisitParameter(ParameterExpression p);
    protected virtual Expression VisitMemberAccess(MemberExpression m);
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    protected virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    protected virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    protected virtual Expression VisitLambda(LambdaExpression lambda);
    protected virtual NewExpression VisitNew(NewExpression nex);
    protected virtual Expression VisitMemberInit(MemberInitExpression init);
    protected virtual Expression VisitListInit(ListInitExpression init);
    protected virtual Expression VisitNewArray(NewArrayExpression na);
    protected virtual Expression VisitInvocation(InvocationExpression iv);
}
public class Xpand.Xpo.ExpressionVisitor`1 : ExpressionVisitor {
    private Func`2<T, Expression> _visitor;
    public ExpressionVisitor`1(Func`2<T, Expression> visitor);
    public static Expression Visit(Expression exp, Func`2<T, Expression> visitor);
    public static Expression`1<TDelegate> Visit(Expression`1<TDelegate> exp, Func`2<T, Expression> visitor);
    protected virtual Expression Visit(Expression exp);
}
[ExtensionAttribute]
public static class Xpand.Xpo.Extensions : object {
    [ExtensionAttribute]
public static bool IsOutdated(XPBaseObject obj);
}
[ExtensionAttribute]
public static class Xpand.Xpo.Filtering.CriteriaOperatorExtensions : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static IList`1<ICustomFunctionOperator> <ThirdPartyCustomFunctionOperators>k__BackingField;
    public static IList`1<ICustomFunctionOperator> ThirdPartyCustomFunctionOperators { get; }
    private static CriteriaOperatorExtensions();
    [CompilerGeneratedAttribute]
public static IList`1<ICustomFunctionOperator> get_ThirdPartyCustomFunctionOperators();
    [ExtensionAttribute]
public static IEnumerable`1<CriteriaOperator> GetOperators(CriteriaOperator criteriaOperator);
    [ExtensionAttribute]
public static CriteriaOperator ToCriteria(string criteria, Object[] args);
    [ExtensionAttribute]
public static CriteriaOperator GetClassTypeFilter(Type type, Session session, string path);
    [ExtensionAttribute]
public static CriteriaOperator GetClassTypeFilter(Type type, Session session);
    public static CriteriaOperator Parse(string propertyPath, CriteriaOperator criteriaOperator);
}
public class Xpand.Xpo.Filtering.CriteriaOperatorExtractor : object {
    private List`1<BinaryOperator> binaryOperators;
    private List`1<NotOperator> notOperators;
    private List`1<NullOperator> nullOperators;
    private List`1<UnaryOperator> unaryOperators;
    public List`1<UnaryOperator> UnaryOperators { get; }
    public List`1<NotOperator> NotOperators { get; }
    public List`1<NullOperator> NullOperators { get; }
    public List`1<BinaryOperator> BinaryOperators { get; }
    public List`1<UnaryOperator> get_UnaryOperators();
    public List`1<NotOperator> get_NotOperators();
    public List`1<NullOperator> get_NullOperators();
    public List`1<BinaryOperator> get_BinaryOperators();
    private CriteriaOperator Extract(CriteriaOperator criteriaOperator, string s);
    public CriteriaOperator Extract(CriteriaOperator criteriaOperator);
    public void Remove(CriteriaOperator& criteriaOperator, string removeString);
    public void Replace(CriteriaOperator& criteriaOperator, string matchString, CriteriaOperator replaceOperator);
    private CriteriaOperator Extract(CriteriaOperator criteriaOperator, string matchString, CriteriaOperator replaceOperator);
}
public class Xpand.Xpo.Filtering.XpandCriteriaProcessorBase : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <AggregateLevel>k__BackingField;
    protected int AggregateLevel { get; private set; }
    [CompilerGeneratedAttribute]
protected int get_AggregateLevel();
    [CompilerGeneratedAttribute]
private void set_AggregateLevel(int value);
    private sealed virtual override object DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Object>.Visit(AggregateOperand operand);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BetweenOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(BinaryOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(FunctionOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(GroupOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(InOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(OperandValue operand);
    private sealed virtual override object DevExpress.Data.Filtering.ICriteriaVisitor<System.Object>.Visit(UnaryOperator theOperator);
    private sealed virtual override object DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Object>.Visit(JoinOperand operand);
    private sealed virtual override object DevExpress.Data.Filtering.IClientCriteriaVisitor<System.Object>.Visit(OperandProperty operand);
    protected virtual void Process(AggregateOperand operand);
    protected virtual void Process(BetweenOperator theOperator);
    protected virtual void Process(BinaryOperator theOperator);
    public void Process(CriteriaOperator criteria);
    protected virtual void Process(FunctionOperator theOperator);
    protected virtual void Process(GroupOperator theOperator);
    protected virtual void Process(InOperator theOperator);
    protected virtual void Process(JoinOperand operand);
    protected virtual void Process(OperandProperty operand);
    protected virtual void Process(OperandValue operand);
    protected virtual void Process(UnaryOperator theOperator);
}
public class Xpand.Xpo.FunctionOperators.ContainsFunction : FunctionOperator {
    public static string ContainsFunctionName;
    public ContainsFunction(string propertyName, OperandValue operandValue);
}
public class Xpand.Xpo.FunctionOperators.YearFunction : FunctionOperator {
    public static string YearFunctionName;
    public YearFunction(string propertyName);
    public YearFunction(string propertyName, int year);
}
[ExtensionAttribute]
public static class Xpand.Xpo.IXPSimpleObjectExtensions : object {
    [ExtensionAttribute]
public static XPMemberInfo GetKeyProperty(XPClassInfo classInfo);
    [ExtensionAttribute]
public static XpandCustomMemberInfo CreateCustomMember(XPClassInfo classInfo, string propertyName, Type propertyType, bool nonPersistent, Attribute[] attributes);
    [ExtensionAttribute]
public static XpandCalcMemberInfo CreateCalculabeMember(XPClassInfo classInfo, string propertyName, Type propertyType, string aliasExpression);
    [ExtensionAttribute]
public static bool IsUniqueConstrauntViolated(T prmValue, String[] prmUniqueFields);
}
public class Xpand.Xpo.MetaData.CustomXPMemberInfoValueEventArgs : HandledEventArgs {
    private object _currentObject;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    public object CurrentObject { get; }
    public object Value { get; public set; }
    public CustomXPMemberInfoValueEventArgs(object currentObject);
    public CustomXPMemberInfoValueEventArgs(object currentObject, object value);
    public object get_CurrentObject();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public interface Xpand.Xpo.MetaData.IXpandProxyCustomMemberInfo {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomSetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomSetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomGetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomGetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
}
public class Xpand.Xpo.MetaData.XpandCalcMemberInfo : XpandCustomMemberInfo {
    protected bool CanPersist { get; }
    public XpandCalcMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, string aliasExpression);
    public virtual object GetValue(object theObject);
    protected virtual bool get_CanPersist();
    public void SetAliasExpression(string aliasExpression);
}
public class Xpand.Xpo.MetaData.XpandCodeMemberInfo : XpandCustomMemberInfo {
    private Func`2<XPBaseObject, object> _callBack;
    protected bool CanPersist { get; }
    public XpandCodeMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, XPClassInfo referenceType, bool nonPersistent, bool nonPublic, Func`2<XPBaseObject, object> callBack);
    public virtual object GetValue(object theObject);
    protected virtual bool get_CanPersist();
}
public class Xpand.Xpo.MetaData.XpandCustomMemberInfo : XPCustomMemberInfo {
    public XpandCustomMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, XPClassInfo referenceType, bool nonPersistent, bool nonPublic);
    public XpandCustomMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, XPClassInfo referenceType, bool nonPersistent, bool nonPublic, bool readOnly);
}
public class Xpand.Xpo.MetaData.XpandProxyCustomMemberInfo : XpandCustomMemberInfo {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CustomXPMemberInfoValueEventArgs> CustomSetValue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CustomXPMemberInfoValueEventArgs> CustomGetValue;
    public XpandProxyCustomMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, XPClassInfo referenceType, bool nonPersistent, bool nonPublic);
    public XpandProxyCustomMemberInfo(XPClassInfo owner, string propertyName, Type propertyType, XPClassInfo referenceType, bool nonPersistent, bool nonPublic, bool readOnly);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CustomSetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CustomSetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CustomGetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CustomGetValue(EventHandler`1<CustomXPMemberInfoValueEventArgs> value);
    protected virtual void OnCustomSetValue(CustomXPMemberInfoValueEventArgs e);
    protected virtual void OnCustomGetValue(CustomXPMemberInfoValueEventArgs e);
    public virtual object GetValue(object theObject);
    public virtual void SetValue(object theObject, object theValue);
}
public class Xpand.Xpo.Parser.EnumCriteriaParser : object {
    private Dictionary`2<string, OperandValue> _values;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <EnumType>k__BackingField;
    public string PropertyName { get; private set; }
    public Type EnumType { get; private set; }
    public EnumCriteriaParser(string propertyName, Type enumType);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_EnumType();
    [CompilerGeneratedAttribute]
private void set_EnumType(Type value);
    public sealed virtual CriteriaOperator Visit(FunctionOperator theOperator);
    public sealed virtual CriteriaOperator Visit(OperandValue theOperand);
    public sealed virtual CriteriaOperator Visit(GroupOperator theOperator);
    public sealed virtual CriteriaOperator Visit(InOperator theOperator);
    public sealed virtual CriteriaOperator Visit(UnaryOperator theOperator);
    public sealed virtual CriteriaOperator Visit(BinaryOperator theOperator);
    public sealed virtual CriteriaOperator Visit(BetweenOperator theOperator);
    private static void UnsupportedCriteria();
    private void UpdatePropertyName(CriteriaOperator operand);
    private void ToValue(IList`1<CriteriaOperator> operands);
    private bool ToValue(CriteriaOperator operand, CriteriaOperator& operandValue);
}
public class Xpand.Xpo.Parser.PropertyPathParser : object {
    private XPClassInfo _xpClassInfo;
    private Session _session;
    public PropertyPathParser(XPClassInfo type, Session session);
    public CriteriaOperator Parse(string propertyPath, string parameters);
}
public class Xpand.Xpo.PropertyValueStore : List`1<KeyValuePair`2<XPMemberInfo, object>> {
}
[ExtensionAttribute]
public static class Xpand.Xpo.SessionExtensions : object {
    [ExtensionAttribute]
public static int GetObjectCount(Session session, CriteriaOperator criteria);
    public static PropertyValueStore CreatePropertyValueStore(XPClassInfo classInfo, MemberInitExpression memberInitExpression);
    [ExtensionAttribute]
public static ModificationResult Delete(Session session, CriteriaOperator criteria);
    [ExtensionAttribute]
public static ModificationResult Update(Session session, Expression`1<Func`1<T>> evaluator, CriteriaOperator criteria);
    [ExtensionAttribute]
public static void UnDelete(XPBaseObject simpleObject);
    [ExtensionAttribute]
public static bool IsNewObject(IXPSimpleObject simpleObject);
    [ExtensionAttribute]
public static int GetCount(Session session, Type type, CriteriaOperator criteriaOperator);
    [ExtensionAttribute]
public static int GetCount(Session session, Type type);
    [ExtensionAttribute]
public static int GetCount(Session session, CriteriaOperator criteriaOperator);
    [ExtensionAttribute]
public static int GetCount(Session session);
    [ExtensionAttribute]
public static object GetObject(Session session, PersistentCriteriaEvaluationBehavior behavior, object o);
    [ExtensionAttribute]
public static object GetObject(Session session, object o);
    [ExtensionAttribute]
public static TClassType FindObject(Session session, PersistentCriteriaEvaluationBehavior persistentCriteriaEvaluationBehavior, Expression`1<Func`2<TClassType, bool>> expression);
    [ExtensionAttribute]
public static object FindObject(Session session, Type classType, Expression`1<Func`2<TClassType, bool>> expression, bool selectDeleted);
    [ExtensionAttribute]
public static TClassType FindObject(Session session, Expression`1<Func`2<TClassType, bool>> expression);
}
[NonPersistentAttribute]
public abstract class Xpand.Xpo.XpandCustomObject : XPCustomObject {
    public static string ChangedPropertiesName;
    private Guid _oid;
    private bool _isDefaultPropertyAttributeInit;
    private XPMemberInfo _defaultPropertyMemberInfo;
    public static string CancelTriggerObjectChangedName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private HashSet`1<string> <ChangedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <CancelTriggerObjectChanged>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <TrucateStrings>k__BackingField;
    [PersistentAttribute("Oid")]
[KeyAttribute("True")]
[BrowsableAttribute("False")]
[MemberDesignTimeVisibilityAttribute("False")]
public Guid Oid { get; public set; }
    [BrowsableAttribute("False")]
[MemberDesignTimeVisibilityAttribute("False")]
public bool IsNewObject { get; }
    [ObsoleteAttribute("Use XpandUnitOfWork instead")]
[NonPersistentAttribute]
public HashSet`1<string> ChangedProperties { get; public set; }
    [BrowsableAttribute("False")]
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
public bool CancelTriggerObjectChanged { get; public set; }
    [BrowsableAttribute("False")]
[NonPersistentAttribute]
[MemberDesignTimeVisibilityAttribute("False")]
public bool TrucateStrings { get; public set; }
    protected XpandCustomObject(Session session);
    public Guid get_Oid();
    public void set_Oid(Guid value);
    protected virtual void OnSaving();
    public virtual string ToString();
    public bool get_IsNewObject();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ChangedProperties();
    [CompilerGeneratedAttribute]
public void set_ChangedProperties(HashSet`1<string> value);
    protected virtual void TriggerObjectChanged(ObjectChangeEventArgs args);
    [CompilerGeneratedAttribute]
public bool get_CancelTriggerObjectChanged();
    [CompilerGeneratedAttribute]
public void set_CancelTriggerObjectChanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrucateStrings();
    [CompilerGeneratedAttribute]
public void set_TrucateStrings(bool value);
    private void DoTrucateStrings();
    private string TruncateValue(XPMemberInfo xpMemberInfo, string value);
}
public class Xpand.Xpo.XpandReflectionHelper : XpandReflectionHelper {
    public static object ChangeType(object value, Type conversionType, CultureInfo cultureInfo);
    public static object ChangeType(object value, Type conversionType);
    public static PropertyInfo GetPropertyInfo(Type type, string propertyName);
    public static void SetProperty(string propertyName, object value, object o);
    public static object GetPropertyInfoValue(string propertyName, object o, bool returnNullIfPropertyNotExists);
    public static object GetPropertyInfoValue(string propertyName, object o);
    public static object GetXPMemberInfoValue(string propertyName, XPBaseObject o);
    public static void SetXpMemberProperty(string propertyName, object value, XPBaseObject dbObject, bool save);
    public static void SetXpMemberProperty(string propertyName, object value, XPBaseObject dbObject);
    public static XPMemberInfo GetXPMemberInfo(XPClassInfo xpClassInfo, string propertyName, bool throwIfMissing);
    public static XPMemberInfo GetXPMemberInfo(Session session, Type type, string propertyName, bool throwIfMissing);
    public static XPMemberInfo GetXPMemberInfo(XPClassInfo xpClassInfo, string propertyName);
    public static XPMemberInfo GetXPMemberInfo(Session session, Type type, string propertyName);
    public static XPMemberInfo[] GetXPMemberInfos(XPClassInfo classInfo);
}
public class Xpand.Xpo.XpandUnitOfWork : UnitOfWork {
    public XpandUnitOfWork(XPDictionary dictionary);
    public XpandUnitOfWork(IDataLayer layer, IDisposable[] disposeOnDisconnect);
    public XpandUnitOfWork(IObjectLayer layer, IDisposable[] disposeOnDisconnect);
    protected virtual MemberInfoCollection GetPropertiesListForUpdateInsert(object theObject, bool isUpdate, bool addDelayedReference);
}
