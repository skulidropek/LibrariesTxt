[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("eXpand: Security")]
public class Xpand.ExpressApp.Security.AuthenticationProviders.AuthenticationCombined : AuthenticationBase {
    private AuthenticationCombinedLogonParameters _logonParameters;
    private Type _userType;
    private Type _logonParametersType;
    private bool _createUserAutomatically;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CustomCreateUserEventArgs> CustomCreateUser;
    [BrowsableAttribute("False")]
public object LogonParameters { get; }
    public bool AskLogonParametersViaUI { get; }
    public bool IsLogoffEnabled { get; }
    [CategoryAttribute("Behavior")]
public Type UserType { get; public set; }
    [TypeConverterAttribute("DevExpress.ExpressApp.Design.BusinessClassTypeConverter`1<Xpand.ExpressApp.Security.AuthenticationProviders.AuthenticationCombinedLogonParameters>")]
[RefreshPropertiesAttribute("1")]
[CategoryAttribute("Behavior")]
public Type LogonParametersType { get; public set; }
    [CategoryAttribute("Behavior")]
public bool CreateUserAutomatically { get; public set; }
    public AuthenticationCombined(Type userType, Type logonParametersType);
    public virtual object Authenticate(IObjectSpace objectSpace);
    private object AuthenticateStandard(IObjectSpace objectSpace);
    private object AuthenticateActiveDirectory(IObjectSpace objectSpace);
    public virtual void ClearSecuredLogonParameters();
    public virtual bool IsSecurityMember(Type type, string memberName);
    public virtual object get_LogonParameters();
    public virtual bool get_AskLogonParametersViaUI();
    public virtual bool get_IsLogoffEnabled();
    public virtual IList`1<Type> GetBusinessClasses();
    public virtual Type get_UserType();
    public virtual void set_UserType(Type value);
    public Type get_LogonParametersType();
    public void set_LogonParametersType(Type value);
    public bool get_CreateUserAutomatically();
    public void set_CreateUserAutomatically(bool value);
    [CompilerGeneratedAttribute]
public void add_CustomCreateUser(EventHandler`1<CustomCreateUserEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomCreateUser(EventHandler`1<CustomCreateUserEventArgs> value);
}
[NonPersistentAttribute]
public class Xpand.ExpressApp.Security.AuthenticationProviders.AuthenticationCombinedLogonParameters : object {
    private bool _useActiveDirectory;
    private string _userName;
    private string _password;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyChangedEventHandler PropertyChanged;
    public bool UseActiveDirectory { get; public set; }
    public string UserName { get; public set; }
    [ModelDefaultAttribute("IsPassword", "True")]
public string Password { get; public set; }
    public bool get_UseActiveDirectory();
    public void set_UseActiveDirectory(bool value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    protected void RaisePropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
[ToolboxTabNameAttribute("eXpand: Security")]
public class Xpand.ExpressApp.Security.AuthenticationProviders.AutoAuthenticationStandard : AuthenticationStandard {
    public bool AskLogonParametersViaUI { get; }
    public AutoAuthenticationStandard(Type userType, Type logonParametersType);
    public virtual bool get_AskLogonParametersViaUI();
}
public interface Xpand.ExpressApp.Security.AuthenticationProviders.IModelAnonymousAuthentication {
    [ModelBrowsableAttribute("Xpand.Persistent.Base.General.Model.VisibilityCalculators.WebOnlyVisibilityCalculator")]
public bool Enabled { get; public set; }
    [ModelBrowsableAttribute("Xpand.Persistent.Base.General.Model.VisibilityCalculators.WebOnlyVisibilityCalculator")]
[DefaultValueAttribute("Anonymous")]
public string AnonymousUser { get; public set; }
    [DefaultValueAttribute("Login")]
[LocalizableAttribute("True")]
[RequiredAttribute]
public string LoginActionCaption { get; public set; }
    [DefaultValueAttribute("Login")]
[LocalizableAttribute("True")]
public string LoginActionTooltip { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual string get_AnonymousUser();
    public abstract virtual void set_AnonymousUser(string value);
    public abstract virtual string get_LoginActionCaption();
    public abstract virtual void set_LoginActionCaption(string value);
    public abstract virtual string get_LoginActionTooltip();
    public abstract virtual void set_LoginActionTooltip(string value);
}
public interface Xpand.ExpressApp.Security.AuthenticationProviders.IModelAthentication {
    public IModelAnonymousAuthentication AnonymousAuthentication { get; }
    public IModelAutoAthentication AutoAthentication { get; }
    public abstract virtual IModelAnonymousAuthentication get_AnonymousAuthentication();
    public abstract virtual IModelAutoAthentication get_AutoAthentication();
}
public interface Xpand.ExpressApp.Security.AuthenticationProviders.IModelAutoAthentication {
    [DescriptionAttribute("If enabled you need to use XpandLogonParameters object in your authentication ")]
public bool Enabled { get; public set; }
    [DefaultValueAttribute("15")]
[DescriptionAttribute("The time in days after which the authentication ticket will expire. To ue the Session timeout set this value to zero")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.General.Model.VisibilityCalculators.WebOnlyVisibilityCalculator")]
public int TicketExpiration { get; public set; }
    [DescriptionAttribute("Enable this to override XAF's default behaviour and create only the encrypted ticket")]
[ModelBrowsableAttribute("Xpand.Persistent.Base.General.Model.VisibilityCalculators.WebOnlyVisibilityCalculator")]
[DefaultValueAttribute("True")]
public bool UseOnlySecuredStorage { get; public set; }
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual int get_TicketExpiration();
    public abstract virtual void set_TicketExpiration(int value);
    public abstract virtual bool get_UseOnlySecuredStorage();
    public abstract virtual void set_UseOnlySecuredStorage(bool value);
}
public interface Xpand.ExpressApp.Security.AuthenticationProviders.IModelOptionsAuthentication {
    public IModelAthentication Athentication { get; }
    public abstract virtual IModelAthentication get_Athentication();
}
[ToolboxTabNameAttribute("eXpand: Security")]
public class Xpand.ExpressApp.Security.AuthenticationProviders.XpandAuthenticationStandard : AuthenticationStandard {
    public bool AskLogonParametersViaUI { get; }
    public XpandAuthenticationStandard(Type userType, Type logonParametersType);
    public virtual bool get_AskLogonParametersViaUI();
}
[NonPersistentAttribute]
[DomainComponentAttribute]
public class Xpand.ExpressApp.Security.AuthenticationProviders.XpandLogonParameters : AuthenticationStandardLogonParameters {
    private string _dbServer;
    private SettingsStorage _storage;
    private bool _rememberMe;
    [ValueConverterAttribute("DevExpress.ExpressApp.Utils.StringObjectToStringConverter")]
[DataSourcePropertyAttribute("DBServers", "Mono.Cecil.CustomAttributeArgument[]")]
[RuleRequiredFieldAttribute]
public StringObject DBServer { get; public set; }
    [BrowsableAttribute("False")]
public IList`1<StringObject> DBServers { get; }
    private string Xpand.ExpressApp.Security.Controllers.IDBServerParameter.DBServer { get; private set; }
    [IndexAttribute("2")]
public bool RememberMe { get; public set; }
    [BrowsableAttribute("False")]
public bool AutoAuthentication { get; }
    [BrowsableAttribute("False")]
public bool ChooseDatabaseAtLogon { get; }
    [BrowsableAttribute("False")]
public SettingsStorage Storage { get; }
    public StringObject get_DBServer();
    public void set_DBServer(StringObject value);
    public IList`1<StringObject> get_DBServers();
    private sealed virtual override string Xpand.ExpressApp.Security.Controllers.IDBServerParameter.get_DBServer();
    private sealed virtual override void Xpand.ExpressApp.Security.Controllers.IDBServerParameter.set_DBServer(string value);
    public sealed virtual bool get_RememberMe();
    public sealed virtual void set_RememberMe(bool value);
    public bool get_AutoAuthentication();
    public bool get_ChooseDatabaseAtLogon();
    public sealed virtual SettingsStorage get_Storage();
    private sealed virtual override void DevExpress.ExpressApp.Utils.ICustomObjectSerialize.ReadPropertyValues(SettingsStorage storage);
    protected void ReadPropertyValuesCore(SettingsStorage storage);
    private sealed virtual override void DevExpress.ExpressApp.Utils.ICustomObjectSerialize.WritePropertyValues(SettingsStorage storage);
    protected void WritePropertyValuesCore(SettingsStorage storage);
}
public abstract class Xpand.ExpressApp.Security.Controllers.AnonymousLogonController : WindowController {
    protected virtual void OnActivated();
}
public class Xpand.ExpressApp.Security.Controllers.ChooseDatabaseAtLogonController : ObjectViewController`2<DetailView, IDBServerParameter> {
    public static string DBServer;
    private static String[] DBServers;
    private static string LogonDBServer;
    private static ChooseDatabaseAtLogonController();
    protected virtual void OnActivated();
    public static string GetDbServerName(ConnectionStringSettings settings);
    protected virtual void OnFrameAssigned();
    private void FrameOnDisposing(object sender, EventArgs eventArgs);
    public static IEnumerable`1<ConnectionStringSettings> GetConnectionStringSettings();
    private void ApplicationOnLoggingOn(object sender, LogonEventArgs logonEventArgs);
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
public class Xpand.ExpressApp.Security.Controllers.FilterCustomPermissionsController : ViewController`1<ListView> {
    protected virtual void OnFrameAssigned();
    private void OnCollectDescendantTypes(object sender, CollectTypesEventArgs e);
    private void FrameOnDisposing(object sender, EventArgs eventArgs);
    protected virtual void OnActivated();
    public void UpdateCollectionCriteria(List`1<string> list);
    protected virtual ICollection GetPermissionTypeNames();
    [CompilerGeneratedAttribute]
private void <OnFrameAssigned>b__1_0(NewObjectViewController controller);
    [CompilerGeneratedAttribute]
private void <FrameOnDisposing>b__3_0(NewObjectViewController controller);
}
public interface Xpand.ExpressApp.Security.Controllers.IDBServerParameter {
    public string DBServer { get; public set; }
    public abstract virtual string get_DBServer();
    public abstract virtual void set_DBServer(string value);
}
public interface Xpand.ExpressApp.Security.Controllers.IModelOptionsChooseDatabaseAtLogon {
    [CategoryAttribute("eXpand.Security")]
public bool ChooseDatabaseAtLogon { get; public set; }
    public abstract virtual bool get_ChooseDatabaseAtLogon();
    public abstract virtual void set_ChooseDatabaseAtLogon(bool value);
}
public class Xpand.ExpressApp.Security.Controllers.MyDetailsController : MyDetailsController {
}
public class Xpand.ExpressApp.Security.Controllers.MyDetailsPermissionController : WindowController {
    private MyDetailsController _myDetailsController;
    private ShowNavigationItemController _showNavigationItemController;
    private ChoiceActionItem _myDetailsItem;
    private static string KeyDisable;
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    private ChoiceActionItem FindMyDetailsItem(IEnumerable`1<ChoiceActionItem> items);
}
public class Xpand.ExpressApp.Security.Controllers.RememberMeController : WindowController {
    protected virtual void OnActivated();
    protected virtual void OnDeactivated();
    protected virtual void ApplicationOnLoggingOff(object sender, LoggingOffEventArgs loggingOffEventArgs);
}
public class Xpand.ExpressApp.Security.Controllers.ShowNavigationItemController : ShowNavigationItemController {
    protected virtual bool SyncItemsWithRequestSecurity(ChoiceActionItemCollection items);
}
public class Xpand.ExpressApp.Security.Core.CurrentUserNameOperator : object {
    public static string OperatorName;
    private static CurrentUserNameOperator _instance;
    public string Name { get; }
    public static CurrentUserNameOperator Instance { get; }
    private static CurrentUserNameOperator();
    public sealed virtual string get_Name();
    public static CurrentUserNameOperator get_Instance();
    public sealed virtual object Evaluate(Object[] operands);
    public sealed virtual Type ResultType(Type[] operands);
}
[AttributeUsageAttribute("4")]
public class Xpand.ExpressApp.Security.Core.FullPermissionAttribute : Attribute {
}
public interface Xpand.ExpressApp.Security.Core.ISupportHiddenNavigationItems {
    public string HiddenNavigationItems { get; public set; }
    public abstract virtual string get_HiddenNavigationItems();
    public abstract virtual void set_HiddenNavigationItems(string value);
}
public interface Xpand.ExpressApp.Security.Core.IXpandRoleCustomPermissions {
    public IList`1<IOperationPermissionProvider> Permissions { get; }
    public abstract virtual IList`1<IOperationPermissionProvider> get_Permissions();
}
[AttributeUsageAttribute("4")]
public class Xpand.ExpressApp.Security.Core.PermissionBehaviorAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public string Name { get; }
    public PermissionBehaviorAttribute(object enum);
    public PermissionBehaviorAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public enum Xpand.ExpressApp.Security.Core.SecurityOperationsEnum : Enum {
    public int value__;
    public static SecurityOperationsEnum Read;
    public static SecurityOperationsEnum Write;
    public static SecurityOperationsEnum Create;
    public static SecurityOperationsEnum Delete;
    public static SecurityOperationsEnum Navigate;
    public static SecurityOperationsEnum FullObjectAccess;
    public static SecurityOperationsEnum FullAccess;
    public static SecurityOperationsEnum ReadOnlyAccess;
    public static SecurityOperationsEnum CRUDAccess;
    public static SecurityOperationsEnum ReadWriteAccess;
}
[ExtensionAttribute]
public static class Xpand.ExpressApp.Security.Core.SecuritySystemExtensions : object {
    [ExtensionAttribute]
public static void NewSecurityStrategyComplex(XafApplication application, Type userType, Type roleType);
    [ExtensionAttribute]
public static void NewSecurityStrategyComplexV2(XafApplication application, Type authenticationType, Type logonParametersType);
    [ExtensionAttribute]
public static void NewSecurityStrategyComplex(XafApplication application, Type authenticationType, Type logonParametersType, Type userType, Type roleType);
    private static void NewSecurityStrategyComplexCore(XafApplication application, Type authenticationType, Type logonParametersType, Type userType, Type roleType, Type defaultUserType, Type defaultRoleType);
    [ExtensionAttribute]
public static PermissionDictionary WithSecurityOperationAttributePermissions(IPermissionDictionary permissionDictionary);
    [ExtensionAttribute]
public static PermissionDictionary WithHiddenNavigationItemPermissions(IPermissionDictionary permissionDictionary);
    [ExtensionAttribute]
public static PermissionDictionary WithCustomPermissions(IPermissionDictionary permissionDictionary);
    [ExtensionAttribute]
public static ISecurityUserWithRoles GetAnonymousUser(XpandRole systemRole);
    [ExtensionAttribute]
public static ISecurityUserWithRoles GetAnonymousUser(XpandRole systemRole, string userName);
    [ExtensionAttribute]
public static ISecurityUserWithRoles GetUser(ISecurityRole systemRole, string userName, string passWord);
    [ExtensionAttribute]
public static XpandRole GetAnonymousRole(IObjectSpace objectSpace, string roleName, bool selfReadOnlyPermissions);
    [ExtensionAttribute]
private static IModifier CreateModifierPermission(IObjectSpace objectSpace, Modifier modifier, Type objectType);
    [ExtensionAttribute]
public static IModifier CreateModifierPermission(IObjectSpace objectSpace, Modifier modifier);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewTypePermission<TObject>() instead (does same thing, only renamed)")]
public static SecuritySystemTypePermissionObject CreateTypePermission(SecuritySystemRoleBase role, Action`1<SecuritySystemTypePermissionObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewTypePermission<TObject>() instead (does same thing, only renamed)")]
public static SecuritySystemTypePermissionObject CreateTypePermission(SecuritySystemRoleBase role);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewTypePermission() instead (does same thing, only renamed)")]
public static SecuritySystemTypePermissionObject CreateTypePermission(SecuritySystemRoleBase role, Type targetType);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewTypePermission() instead (does same thing, only renamed)")]
public static SecuritySystemTypePermissionObject CreateTypePermission(SecuritySystemRoleBase systemRole, Type targetType, Action`1<SecuritySystemTypePermissionObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
public static SecuritySystemTypePermissionObject AddNewTypePermission(SecuritySystemRoleBase role, Action`1<SecuritySystemTypePermissionObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
public static SecuritySystemTypePermissionObject AddNewTypePermission(SecuritySystemRoleBase role);
    [ExtensionAttribute]
public static SecuritySystemTypePermissionObject AddNewTypePermission(ISecurityRole role, Type targetType);
    [ExtensionAttribute]
public static SecuritySystemTypePermissionObject AddNewTypePermission(SecuritySystemRoleBase role, Type targetType, Action`1<SecuritySystemTypePermissionObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewMemberPermission() instead (does same thing, only renamed)")]
public static SecuritySystemMemberPermissionsObject CreateMemberPermission(SecuritySystemTypePermissionObject securitySystemTypePermissionObject, Action`1<SecuritySystemMemberPermissionsObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
public static SecuritySystemMemberPermissionsObject AddNewMemberPermission(SecuritySystemTypePermissionObject securitySystemTypePermissionObject, Action`1<SecuritySystemMemberPermissionsObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewObjectPermission() instead (does same thing, only renamed)")]
public static SecuritySystemObjectPermissionsObject CreateObjectPermission(SecuritySystemTypePermissionObject securitySystemTypePermissionObject, bool defaultAllowValues);
    [ExtensionAttribute]
public static SecuritySystemObjectPermissionsObject AddNewObjectPermission(SecuritySystemTypePermissionObject securitySystemTypePermissionObject, bool defaultAllowValues);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewObjectPermission() instead (does same thing, only renamed)")]
public static SecuritySystemObjectPermissionsObject CreateObjectPermission(SecuritySystemTypePermissionObject securitySystemTypePermissionObject, Action`1<SecuritySystemObjectPermissionsObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
public static SecuritySystemObjectPermissionsObject AddNewObjectPermission(SecuritySystemTypePermissionObject securitySystemTypePermissionObject, Action`1<SecuritySystemObjectPermissionsObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
public static void CreatePermissionBehaviour(ISecurityRole systemRole, Enum behaviourEnum, Action`2<ISecurityRole, ITypeInfo> action);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddNewFullPermissionAttributes() instead (does same thing, only renamed)")]
public static void CreateFullPermissionAttributes(SecuritySystemRoleBase systemRole, Action`1<SecuritySystemTypePermissionObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
public static void AddNewFullPermissionAttributes(ISecurityRole securityRole, Action`1<SecuritySystemTypePermissionObject> action, bool defaultAllowValues);
    [ExtensionAttribute]
public static List`1<IOperationPermission> GetPermissions(ISecurityUserWithRoles securityUserWithRoles);
    [ExtensionAttribute]
public static bool IsNewSecuritySystem(IRoleTypeProvider security);
}
[ExtensionAttribute]
public static class Xpand.ExpressApp.Security.Core.SecuritySystemRoleExtensions : object {
    [ExtensionAttribute]
private static IEnumerable`1<XPMemberInfo> OperationPermissionCollectionMembers(IXpandRoleCustomPermissions xpandRoleCustomPermissions);
    [ExtensionAttribute]
public static IEnumerable`1<NavigationItemPermission> GetHiddenNavigationItemPermissions(ISupportHiddenNavigationItems supportHiddenNavigationItems);
    [ExtensionAttribute]
public static IEnumerable`1<IOperationPermission> GetCustomPermissions(IXpandRoleCustomPermissions xpandRoleCustomPermissions);
    [ExtensionAttribute]
public static IEnumerable`1<IOperationPermission> SecurityOperationAttributePermissions(IXpandRoleCustomPermissions xpandRoleCustomPermissions);
    [IteratorStateMachineAttribute("Xpand.ExpressApp.Security.Core.SecuritySystemRoleExtensions/<ObjectOperationPermissions>d__4")]
[ExtensionAttribute]
private static IEnumerable`1<IOperationPermission> ObjectOperationPermissions(ISecurityRole securityRole, XPMemberInfo member);
    private static IOperationPermission ObjectOperationPermissions(XPMemberInfo member, object obj, string securityOperation, string roleName);
    private static string Criteria(object obj, XPClassInfo classInfo);
    private static string GetSecurityOperation(ISecurityRole securityRole, XPMemberInfo memberInfo);
    private static string Convert(ISecurityRole securityRole, ITypeInfo roleTypeInfo, SecurityOperationsAttribute operationsAttribute);
    private static IMemberInfo MemberInfo(ITypeInfo roleTypeInfo, SecurityOperationsAttribute operationsAttribute);
}
[ImageNameAttribute("BO_Role")]
[DisplayNameAttribute("Role")]
[MapInheritanceAttribute]
[AppearanceAttribute]
[OverallCustomizationAllowedAttribute]
public class Xpand.ExpressApp.Security.Core.XpandRole : SecuritySystemRole {
    private string _hiddenNavigationItems;
    [SizeAttribute("-1")]
public string HiddenNavigationItems { get; public set; }
    [AssociationAttribute("XpandRole-XpandPermissionDatas")]
[AggregatedAttribute]
public XPCollection`1<XpandPermissionData> Permissions { get; }
    private IList`1<IOperationPermissionProvider> Xpand.ExpressApp.Security.Core.IXpandRoleCustomPermissions.Permissions { get; }
    public XpandRole(Session session);
    public sealed virtual string get_HiddenNavigationItems();
    public sealed virtual void set_HiddenNavigationItems(string value);
    public virtual string ToString();
    public XPCollection`1<XpandPermissionData> get_Permissions();
    private sealed virtual override IList`1<IOperationPermissionProvider> Xpand.ExpressApp.Security.Core.IXpandRoleCustomPermissions.get_Permissions();
    protected virtual IEnumerable`1<IOperationPermission> GetPermissionsCore();
}
[DisplayNameAttribute("User")]
public class Xpand.ExpressApp.Security.Core.XpandUser : SecuritySystemUser {
    private string _email;
    private string _activation;
    [InvisibleInAllViewsAttribute]
public string Activation { get; public set; }
    [ModelDefaultAttribute("IsEmail", "True")]
[EditorAliasAttribute("HyperLinkPropertyEditor")]
public string Email { get; public set; }
    public XpandUser(Session session);
    public string get_Activation();
    public void set_Activation(string value);
    public string get_Email();
    public void set_Email(string value);
}
[DisplayNameAttribute("AnonymousLogin")]
public class Xpand.ExpressApp.Security.Permissions.AnonymousLoginOperationPermissionData : ModifierPermissionData {
    public AnonymousLoginOperationPermissionData(Session session);
    public virtual IList`1<IOperationPermission> GetPermissions();
}
public class Xpand.ExpressApp.Security.Permissions.AnonymousLoginOperationRequest : ModifierOperationRequest {
    public AnonymousLoginOperationRequest(AnonymousLoginPermission permission);
}
public class Xpand.ExpressApp.Security.Permissions.AnonymousLoginPermission : ModifierPermission {
    public static string OperationName;
    public AnonymousLoginPermission(Modifier modifier);
    public virtual IList`1<string> GetSupportedOperations();
}
public class Xpand.ExpressApp.Security.Permissions.AnonymousLoginRequestProcessor : ModifierRequestProcessor`1<AnonymousLoginPermission> {
}
public interface Xpand.ExpressApp.Security.Permissions.ICustomPermissionRequestProccesor {
    public IPermissionDictionary Permissions { get; public set; }
    public abstract virtual IPermissionDictionary get_Permissions();
    public abstract virtual void set_Permissions(IPermissionDictionary value);
}
public interface Xpand.ExpressApp.Security.Permissions.IModifier {
    public Modifier Modifier { get; public set; }
    public abstract virtual Modifier get_Modifier();
    public abstract virtual void set_Modifier(Modifier value);
}
public interface Xpand.ExpressApp.Security.Permissions.IOperationPermissionProvider {
    public abstract virtual IList`1<IOperationPermission> GetPermissions();
}
public interface Xpand.ExpressApp.Security.Permissions.IPermissionInfo {
    public abstract virtual IEnumerable`1<IOperationPermission> GetPermissions(ISecurityRole securityRole);
}
public class Xpand.ExpressApp.Security.Permissions.IsAdministratorPermissionRequest : object {
    public sealed virtual object GetHashObject();
}
public class Xpand.ExpressApp.Security.Permissions.IsAdministratorPermissionRequestProcessor : PermissionRequestProcessorBase`1<IsAdministratorPermissionRequest> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPermissionDictionary <Permissions>k__BackingField;
    public IPermissionDictionary Permissions { get; public set; }
    public virtual bool IsGranted(IsAdministratorPermissionRequest permissionRequest);
    [CompilerGeneratedAttribute]
public sealed virtual IPermissionDictionary get_Permissions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Permissions(IPermissionDictionary value);
}
public enum Xpand.ExpressApp.Security.Permissions.Modifier : Enum {
    public int value__;
    public static Modifier Allow;
    public static Modifier Deny;
}
public abstract class Xpand.ExpressApp.Security.Permissions.ModifierOperationRequest : OperationPermissionRequestBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Modifier <Modifier>k__BackingField;
    public Modifier Modifier { get; public set; }
    protected ModifierOperationRequest(ModifierPermission permission, string operationName);
    public virtual object GetHashObject();
    [CompilerGeneratedAttribute]
public sealed virtual Modifier get_Modifier();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Modifier(Modifier value);
}
public abstract class Xpand.ExpressApp.Security.Permissions.ModifierPermission : OperationPermissionBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Modifier <Modifier>k__BackingField;
    public Modifier Modifier { get; public set; }
    protected ModifierPermission(string operation);
    [CompilerGeneratedAttribute]
public sealed virtual Modifier get_Modifier();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Modifier(Modifier value);
}
[MapInheritanceAttribute]
public abstract class Xpand.ExpressApp.Security.Permissions.ModifierPermissionData : XpandPermissionData {
    private Modifier _modifier;
    public Modifier Modifier { get; public set; }
    protected ModifierPermissionData(Session session);
    public sealed virtual Modifier get_Modifier();
    public sealed virtual void set_Modifier(Modifier value);
}
public abstract class Xpand.ExpressApp.Security.Permissions.ModifierRequestProcessor`1 : PermissionRequestProcessorBase`1<ModifierOperationRequest> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPermissionDictionary <Permissions>k__BackingField;
    public IPermissionDictionary Permissions { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IPermissionDictionary get_Permissions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Permissions(IPermissionDictionary value);
    public virtual bool IsGranted(ModifierOperationRequest modifierOperationRequest);
}
[DisplayNameAttribute("MyDetails")]
public class Xpand.ExpressApp.Security.Permissions.MyDetailsOperationPermissionData : ModifierPermissionData {
    public MyDetailsOperationPermissionData(Session session);
    public virtual IList`1<IOperationPermission> GetPermissions();
}
public class Xpand.ExpressApp.Security.Permissions.MyDetailsOperationRequest : ModifierOperationRequest {
    public MyDetailsOperationRequest(MyDetailsPermission permission);
}
public class Xpand.ExpressApp.Security.Permissions.MyDetailsPermission : ModifierPermission {
    public static string OperationName;
    public MyDetailsPermission(Modifier modifier);
    public virtual IList`1<string> GetSupportedOperations();
}
public class Xpand.ExpressApp.Security.Permissions.MyDetailsRequestProcessor : ModifierRequestProcessor`1<MyDetailsPermission> {
}
public class Xpand.ExpressApp.Security.Permissions.NavigationItemPermission : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HiddenNavigationItem>k__BackingField;
    public string HiddenNavigationItem { get; public set; }
    public string Operation { get; }
    public NavigationItemPermission(string hiddenNavigationItem);
    [CompilerGeneratedAttribute]
public string get_HiddenNavigationItem();
    [CompilerGeneratedAttribute]
public void set_HiddenNavigationItem(string value);
    public sealed virtual string get_Operation();
}
public class Xpand.ExpressApp.Security.Permissions.NavigationItemPermissionRequest : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NavigationItem>k__BackingField;
    public string NavigationItem { get; public set; }
    public NavigationItemPermissionRequest(string navigationItem);
    [CompilerGeneratedAttribute]
public string get_NavigationItem();
    [CompilerGeneratedAttribute]
public void set_NavigationItem(string value);
    public sealed virtual object GetHashObject();
}
public class Xpand.ExpressApp.Security.Permissions.NavigationItemPermissionRequestProcessor : PermissionRequestProcessorBase`1<NavigationItemPermissionRequest> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPermissionDictionary <Permissions>k__BackingField;
    public IPermissionDictionary Permissions { get; public set; }
    public virtual bool IsGranted(NavigationItemPermissionRequest permissionRequest);
    [CompilerGeneratedAttribute]
public sealed virtual IPermissionDictionary get_Permissions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Permissions(IPermissionDictionary value);
}
[AttributeUsageAttribute("4")]
public class Xpand.ExpressApp.Security.Permissions.OverallCustomizationAllowedAttribute : Attribute {
}
public class Xpand.ExpressApp.Security.Permissions.PermissionProviderStorage : HashSet`1<IPermissionInfo> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static PermissionProviderStorage <Instance>k__BackingField;
    public static PermissionProviderStorage Instance { get; }
    private static PermissionProviderStorage();
    [CompilerGeneratedAttribute]
public static PermissionProviderStorage get_Instance();
}
[ExtensionAttribute]
public static class Xpand.ExpressApp.Security.Permissions.PermissionRequestProcessorStorage : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ConcurrentDictionary`2<Type, IPermissionRequestProcessor> <Instance>k__BackingField;
    public static ConcurrentDictionary`2<Type, IPermissionRequestProcessor> Instance { get; }
    private static PermissionRequestProcessorStorage();
    [ExtensionAttribute]
public static T GetProcessor(IPermissionDictionary customPermissions);
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<Type, IPermissionRequestProcessor> get_Instance();
}
[ImageNameAttribute("BO_Security_Permission_Type")]
public abstract class Xpand.ExpressApp.Security.Permissions.XpandPermissionData : XpandCustomObject {
    private IEnumerable`1<XPMemberInfo> _propertyInfos;
    private XpandRole _role;
    [VisibleInDetailViewAttribute("False")]
public string Permission { get; }
    [VisibleInListViewAttribute("False")]
[VisibleInDetailViewAttribute("False")]
[AssociationAttribute("XpandRole-XpandPermissionDatas")]
public XpandRole Role { get; public set; }
    protected XpandPermissionData(Session session);
    public virtual string ToString();
    public string get_Permission();
    protected virtual string GetPermissionInfoCaption();
    private string GetCaption(XPMemberInfo propertyInfo);
    private void EnumerateProperties();
    private bool InfoTypeMatch(XPMemberInfo info);
    private bool AttributesMatch(XPMemberInfo info);
    public abstract virtual IList`1<IOperationPermission> GetPermissions();
    public XpandRole get_Role();
    public void set_Role(XpandRole value);
    [CompilerGeneratedAttribute]
private string <GetPermissionInfoCaption>b__5_0(string current, XPMemberInfo propertyInfo);
    [CompilerGeneratedAttribute]
private bool <EnumerateProperties>b__7_0(XPMemberInfo info);
}
public class Xpand.ExpressApp.Security.Registration.CustomActiveKeyArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private View <View>k__BackingField;
    public View View { get; }
    public CustomActiveKeyArgs(View view);
    [CompilerGeneratedAttribute]
public View get_View();
}
public interface Xpand.ExpressApp.Security.Registration.ILogonActionParameters {
}
public interface Xpand.ExpressApp.Security.Registration.ILogonParameters {
    public abstract virtual void Process(XafApplication application, IObjectSpace objectSpace);
}
public interface Xpand.ExpressApp.Security.Registration.ILogonRegistrationParameters {
}
public interface Xpand.ExpressApp.Security.Registration.IModelRegistration {
    [DataSourcePropertyAttribute("RoleClasses", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("Role")]
public IModelClass RoleModelClass { get; public set; }
    [CriteriaOptionsAttribute("RoleModelClass.TypeInfo")]
[EditorAttribute("DevExpress.ExpressApp.Win.Core.ModelEditor.CriteriaModelEditorControl, DevExpress.ExpressApp.Win.v24.1", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("[Name] = 'User' Or [Name] = 'Default'")]
[CategoryAttribute("Role")]
public string RoleCriteria { get; public set; }
    [DataSourcePropertyAttribute("UserClasses", "Mono.Cecil.CustomAttributeArgument[]")]
[CategoryAttribute("User")]
public IModelClass UserModelClass { get; public set; }
    [DataSourcePropertyAttribute("UserModelClass.AllMembers", "Mono.Cecil.CustomAttributeArgument[]")]
[RuleRequiredFieldAttribute]
[CategoryAttribute("User")]
public IModelMember EmailMember { get; public set; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelMember> ActivationIdMembers { get; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelClass> RoleClasses { get; }
    [BrowsableAttribute("False")]
public IModelList`1<IModelClass> UserClasses { get; }
    public abstract virtual IModelClass get_RoleModelClass();
    public abstract virtual void set_RoleModelClass(IModelClass value);
    public abstract virtual string get_RoleCriteria();
    public abstract virtual void set_RoleCriteria(string value);
    public abstract virtual IModelClass get_UserModelClass();
    public abstract virtual void set_UserModelClass(IModelClass value);
    public abstract virtual IModelMember get_EmailMember();
    public abstract virtual void set_EmailMember(IModelMember value);
    public abstract virtual IModelList`1<IModelMember> get_ActivationIdMembers();
    public abstract virtual IModelList`1<IModelClass> get_RoleClasses();
    public abstract virtual IModelList`1<IModelClass> get_UserClasses();
}
public class Xpand.ExpressApp.Security.Registration.ManageUsersOnLogonController : ViewController`1<DetailView> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ParameterEventArgs> CustomProccessLogonParameter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ParameterEventArgs> CustomProccessedLogonParameter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ParameterEventArgs> CustomCancelLogonParameter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CustomActiveKeyArgs> CustomActiveKey;
    protected static string LogonActionParametersActiveKey;
    public static string EmailPattern;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SimpleAction <RestorePasswordAction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SimpleAction <RegisterUserAction>k__BackingField;
    public SimpleAction RestorePasswordAction { get; }
    public SimpleAction RegisterUserAction { get; }
    [CompilerGeneratedAttribute]
public void add_CustomProccessLogonParameter(EventHandler`1<ParameterEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomProccessLogonParameter(EventHandler`1<ParameterEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomProccessedLogonParameter(EventHandler`1<ParameterEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomProccessedLogonParameter(EventHandler`1<ParameterEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CustomCancelLogonParameter(EventHandler`1<ParameterEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomCancelLogonParameter(EventHandler`1<ParameterEventArgs> value);
    protected virtual void OnCustomCancelLogonParameter(ParameterEventArgs e);
    protected virtual void OnCustomProccessedLogonParameter(ParameterEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CustomActiveKey(EventHandler`1<CustomActiveKeyArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CustomActiveKey(EventHandler`1<CustomActiveKeyArgs> value);
    protected virtual void OnCustomActiveKey(CustomActiveKeyArgs e);
    protected virtual void OnCustomProccessLogonParameter(ParameterEventArgs e);
    protected virtual void OnViewChanging(View view);
    private SimpleAction CreateLogonSimpleAction(string id, string category, string caption, string imageName, string toolTip, Type parametersType);
    private void CreateParametersView(object sender, SimpleActionExecuteEventArgs e);
    protected virtual void CreateParametersViewCore(SimpleActionExecuteEventArgs e);
    private void CancelActionOnExecuting(object sender, CancelEventArgs cancelEventArgs);
    private void AcceptActionOnExecuting(object sender, CancelEventArgs cancelEventArgs);
    private void ShowCallerView(ActionBase actionBase, Window window, CancelEventArgs cancelEventArgs);
    protected virtual void AcceptParameters(ILogonParameters parameters);
    protected virtual void CancelParameters(ILogonParameters parameters);
    protected virtual bool GetLogonParametersActiveState();
    [CompilerGeneratedAttribute]
public SimpleAction get_RestorePasswordAction();
    [CompilerGeneratedAttribute]
public SimpleAction get_RegisterUserAction();
    public sealed virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
}
[ExtensionAttribute]
[DomainLogicAttribute("Xpand.ExpressApp.Security.Registration.IModelRegistration")]
public static class Xpand.ExpressApp.Security.Registration.ModelRegistrationDomainLogic : object {
    public static IModelMember Get_EmailMember(IModelRegistration modelRegistration);
    public static IModelClass Get_UserModelClass(IModelRegistration modelRegistration);
    public static IModelClass Get_RoleModelClass(IModelRegistration modelRegistration);
    public static IModelList`1<IModelClass> Get_RoleClasses(IModelRegistration modelRegistration);
    public static IModelList`1<IModelClass> Get_UserClasses(IModelRegistration modelRegistration);
    [ExtensionAttribute]
public static IModelList`1<IModelClass> UserModelClasses(IModelNode modelRegistration);
    [ExtensionAttribute]
public static IModelList`1<IModelClass> RoleModelClasses(IModelNode modelRegistration);
}
public class Xpand.ExpressApp.Security.Registration.ParameterEventArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ILogonParameters <Parameters>k__BackingField;
    public ILogonParameters Parameters { get; }
    public ParameterEventArgs(ILogonParameters parameters);
    [CompilerGeneratedAttribute]
public ILogonParameters get_Parameters();
}
[NonPersistentAttribute]
[ModelDefaultAttribute("Caption", "Register User")]
[ImageNameAttribute("BO_User")]
public class Xpand.ExpressApp.Security.Registration.RegisterUserParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <User>k__BackingField;
    [RuleRequiredFieldAttribute]
public string UserName { get; public set; }
    [RuleRequiredFieldAttribute]
[ModelDefaultAttribute("IsPassword", "true")]
public string Password { get; public set; }
    [RuleRequiredFieldAttribute]
[RuleRegularExpressionAttribute]
public string Email { get; public set; }
    [BrowsableAttribute("False")]
public object User { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public object get_User();
    [CompilerGeneratedAttribute]
public void set_User(object value);
    public sealed virtual void Process(XafApplication application, IObjectSpace objectSpace);
    private void AddRoles(IModelRegistration modelRegistration, ITypeInfo userTypeInfo, ISecurityUserWithRoles securityUserWithRoles, IObjectSpace objectSpace);
}
[NonPersistentAttribute]
[ModelDefaultAttribute("Caption", "Restore Password")]
[ImageNameAttribute("Action_ResetPassword")]
public class Xpand.ExpressApp.Security.Registration.RestorePasswordParameters : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <User>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Password>k__BackingField;
    [RuleRequiredFieldAttribute]
[RuleRegularExpressionAttribute]
public string Email { get; public set; }
    [BrowsableAttribute("False")]
public object User { get; public set; }
    [BrowsableAttribute("False")]
public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public object get_User();
    [CompilerGeneratedAttribute]
public void set_User(object value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public sealed virtual void Process(XafApplication application, IObjectSpace objectSpace);
}
public class Xpand.ExpressApp.Security.Updater : ModuleUpdater {
    public Updater(IObjectSpace objectSpace, Version currentDBVersion);
}
[ToolboxBitmapAttribute("DevExpress.ExpressApp.Security.SecurityModule", "Resources.BO_Security.ico")]
[ToolboxItemAttribute("True")]
[ToolboxTabNameAttribute("eXpand: Win-Web Modules")]
public class Xpand.ExpressApp.Security.XpandSecurityModule : XpandModuleBase {
    public static string BaseImplNameSpace;
    public static string XpandSecurity;
    public virtual void ExtendModelInterfaces(ModelInterfaceExtenders extenders);
    public virtual void Setup(ApplicationModulesManager moduleManager);
    protected virtual IEnumerable`1<Type> GetDeclaredControllerTypes();
    private void ApplicationOnSetupComplete(object sender, EventArgs eventArgs);
    private void OnCustomizeRequestProcessors(object sender, CustomizeRequestProcessorsEventArgs e);
    public static void CustomizeRequestProcessors(CustomizeRequestProcessorsEventArgs e);
    public virtual void CustomizeTypesInfo(ITypesInfo typesInfo);
    private void ApplySecurityOperations(ITypesInfo typesInfo);
    [CompilerGeneratedAttribute]
private bool <ApplySecurityOperations>b__10_1(ITypeInfo info);
}
public abstract class Xpand.ExpressApp.Security.XpandSecurityModuleBase : XpandModuleBase {
    public virtual void Setup(ApplicationModulesManager moduleManager);
    private void application_CreateCustomLogonWindowControllers(object sender, CreateCustomLogonWindowControllersEventArgs e);
    protected void AddControllers(Dictionary`2<Type, Controller> controllers, IEnumerable`1<Controller> controllersToAdd);
    protected virtual void AddRegistrationControllers(XafApplication application, Dictionary`2<Type, Controller> controllers);
    [IteratorStateMachineAttribute("Xpand.ExpressApp.Security.XpandSecurityModuleBase/<CreateRegistrationControllers>d__4")]
public static IEnumerable`1<Controller> CreateRegistrationControllers(XafApplication app);
}
