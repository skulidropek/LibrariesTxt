internal class ExpectedObjects.AbsolutePathMemberComparison : object {
    private Type _rootType;
    private string _memberPath;
    [CompilerGeneratedAttribute]
private IComparison <Comparison>k__BackingField;
    public IComparison Comparison { get; }
    public AbsolutePathMemberComparison(IComparison comparison, Type rootType, string memberPath);
    [CompilerGeneratedAttribute]
public sealed virtual IComparison get_Comparison();
    public sealed virtual bool ShouldApply(string memberPath);
}
internal class ExpectedObjects.AbsolutePathMemberContext : object {
    private IMemberConfigurationContext _memberConfigurationContext;
    private Type _rootType;
    private string _memberPath;
    public AbsolutePathMemberContext(IMemberConfigurationContext memberConfigurationContext, Type rootType, string memberPath);
    public sealed virtual void UsesComparison(IComparison comparison);
}
internal interface ExpectedObjects.Chain.IComparisonLink {
    public abstract virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.LinkComparisonContext : object {
    [CompilerGeneratedAttribute]
private object <Expected>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreTypeInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparisonContext <ComparisonContext>k__BackingField;
    public object Expected { get; public set; }
    public object Actual { get; public set; }
    public string MemberPath { get; public set; }
    public bool IgnoreTypeInformation { get; public set; }
    public IConfiguration Configuration { get; public set; }
    public IComparisonContext ComparisonContext { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Expected();
    [CompilerGeneratedAttribute]
public void set_Expected(object value);
    [CompilerGeneratedAttribute]
public object get_Actual();
    [CompilerGeneratedAttribute]
public void set_Actual(object value);
    [CompilerGeneratedAttribute]
public string get_MemberPath();
    [CompilerGeneratedAttribute]
public void set_MemberPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTypeInformation();
    [CompilerGeneratedAttribute]
public void set_IgnoreTypeInformation(bool value);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
public IComparisonContext get_ComparisonContext();
    [CompilerGeneratedAttribute]
public void set_ComparisonContext(IComparisonContext value);
}
internal class ExpectedObjects.Chain.LinkComparisonResult : object {
    public static LinkComparisonResult False;
    public static LinkComparisonResult True;
    [CompilerGeneratedAttribute]
private bool <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ExpectedResult>k__BackingField;
    public bool Result { get; public set; }
    public object ExpectedResult { get; public set; }
    private static LinkComparisonResult();
    [CompilerGeneratedAttribute]
public bool get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(bool value);
    [CompilerGeneratedAttribute]
public object get_ExpectedResult();
    [CompilerGeneratedAttribute]
public void set_ExpectedResult(object value);
}
internal class ExpectedObjects.Chain.Links.ComparisonComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.InstanceOfTypeComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.LeafInstanceOfTypeComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
    private bool IsLeaf(object expected);
}
internal class ExpectedObjects.Chain.Links.MemberComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
    private IComparison GetMemberComparison(string path, IConfiguration configuration);
}
internal class ExpectedObjects.Chain.Links.MissingComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.NullActualComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.NullExpectedComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.ReferenceEqualsComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.StrategyComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.TrueLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.Links.TypeStrategyComparisonLink : object {
    public sealed virtual LinkComparisonResult Compare(LinkComparisonContext linkComparisonContext, Func`2<LinkComparisonContext, LinkComparisonResult> next);
}
internal class ExpectedObjects.Chain.StrategyChain : object {
    private IList`1<IComparisonLink> _links;
    public void Link(IComparisonLink typeStrategyComparisonLink);
    public LinkComparisonResult Process(LinkComparisonContext linkComparisonContext);
    private Func`2<LinkComparisonContext, LinkComparisonResult> GetNextLink(Queue`1<IComparisonLink> queue);
}
public class ExpectedObjects.ComparisonException : Exception {
    public ComparisonException(string message);
}
public class ExpectedObjects.ComparisonResult : object {
    private object _actual;
    [CompilerGeneratedAttribute]
private bool <Result>k__BackingField;
    public bool Result { get; public set; }
    public ComparisonResult(object actual, bool result);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Result();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Result(bool value);
    public bool Equals(ComparisonResult other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class ExpectedObjects.Comparisons.Any`1 : object {
    public sealed virtual bool AreEqual(object actual);
    public sealed virtual object GetExpectedResult();
}
public class ExpectedObjects.Comparisons.AnyMatchingPredicate`1 : object {
    private Expression`1<Func`2<T, bool>> _predicate;
    public AnyMatchingPredicate`1(Expression`1<Func`2<T, bool>> predicate);
    public sealed virtual bool AreEqual(object actual);
    public sealed virtual object GetExpectedResult();
}
public class ExpectedObjects.Comparisons.DefaultComparison`1 : object {
    public sealed virtual bool AreEqual(object actual);
    public sealed virtual object GetExpectedResult();
}
public class ExpectedObjects.Comparisons.IgnoredComparison : object {
    public sealed virtual bool AreEqual(object actual);
    public sealed virtual object GetExpectedResult();
}
public class ExpectedObjects.Comparisons.NotDefaultComparison`1 : object {
    public sealed virtual bool AreEqual(object actual);
    public sealed virtual object GetExpectedResult();
}
public class ExpectedObjects.Comparisons.NotNullComparison : object {
    public sealed virtual bool AreEqual(object actual);
    public sealed virtual object GetExpectedResult();
}
public class ExpectedObjects.Comparisons.NullComparison : object {
    public sealed virtual bool AreEqual(object actual);
    public sealed virtual object GetExpectedResult();
}
public class ExpectedObjects.ConfigurationContext`1 : object {
    private MemberType _memberType;
    private Stack`1<IComparisonStrategy> _strategies;
    private IList`1<IMemberComparison> _memberComparisons;
    private IDictionary`2<Type, IComparisonStrategy> _typeStrategies;
    [CompilerGeneratedAttribute]
private object <Object>k__BackingField;
    public IEnumerable`1<IComparisonStrategy> ComparisonStrategies { get; }
    public IEnumerable`1<IMemberComparison> MemberComparisons { get; }
    public object Object { get; }
    public ConfigurationContext`1(TExpected object);
    public sealed virtual IEnumerable`1<IComparisonStrategy> get_ComparisonStrategies();
    public sealed virtual IEnumerable`1<IMemberComparison> get_MemberComparisons();
    public sealed virtual IComparisonStrategy GetTypeStrategy(Type type);
    public sealed virtual BindingFlags GetFieldBindingFlags();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Object();
    public sealed virtual void PushStrategy();
    public sealed virtual void PushStrategy(IComparisonStrategy comparisonStrategy);
    public sealed virtual void RemoveStrategy();
    public sealed virtual void IncludeMemberTypes(MemberType memberType);
    public sealed virtual void ReplaceStrategy();
    public sealed virtual void ClearStrategies();
    public sealed virtual void MapStrategy(IComparisonStrategy comparisonStrategy);
    public sealed virtual IMemberContext Member(Expression`1<Func`2<TExpected, TMember>> memberExpression);
    public sealed virtual IMemberContext Member(string memberPath);
    public sealed virtual IMemberContext RelativeMember(string memberPath);
    private sealed virtual override void ExpectedObjects.IMemberConfigurationContext.ConfigureMember(IMemberComparison memberComparison);
}
[ExtensionAttribute]
public static class ExpectedObjects.ConfigurationContextExtensions : object {
    [ExtensionAttribute]
internal static IConfigurationContext UseAllStrategies(IConfigurationContext configurationContext);
    [ExtensionAttribute]
public static IConfigurationContext UseStrategies(IConfigurationContext configurationContext, IEnumerable`1<IComparisonStrategy> strategies);
    [ExtensionAttribute]
public static IConfigurationContext UseOrdinalComparison(IConfigurationContext configurationContext);
    [ExtensionAttribute]
public static IConfigurationContext`1<T> Ignore(IConfigurationContext`1<T> configurationContext, Expression`1<Func`2<T, TMember>> memberExpression);
    [ExtensionAttribute]
public static IConfigurationContext`1<T> IgnoreAbsolutePath(IConfigurationContext`1<T> configurationContext, string memberPath);
    [ExtensionAttribute]
public static IConfigurationContext`1<T> IgnoreRelativePath(IConfigurationContext`1<T> configurationContext, string memberPath);
    [ExtensionAttribute]
public static IConfigurationContext IgnoreEqualsOverride(IConfigurationContext configurationContext);
    [ExtensionAttribute]
public static IConfigurationContext CompareByValue(IConfigurationContext configurationContext);
}
public class ExpectedObjects.EqualityComparer : object {
    private IConfiguration _configurationContext;
    private Stack`1<string> _elementStack;
    private StackDictionary`2<object, IComparisonResult> _visited;
    private bool _ignoreTypeInformation;
    private IWriter _writer;
    private object _expected;
    private StrategyChain _strategyChain;
    public EqualityComparer(IConfiguration configurationContext);
    private void InitializeStrategyChain();
    public sealed virtual bool AreEqual(object expected, object actual, string member);
    public sealed virtual bool ReportEquality(object expected, object actual, string member);
    public sealed virtual bool CompareProperties(object expected, object actual, Func`3<PropertyInfo, PropertyInfo, bool> propertyComparison);
    public sealed virtual bool CompareFields(object expected, object actual, Func`3<FieldInfo, FieldInfo, bool> comparison);
    public sealed virtual void Report(bool status, string message, object expected, object actual);
    public bool AreEqual(object expected, object actual, IWriter writer, bool ignoreTypeInformation);
    private bool Compare(object expected, object actual, string member, IWriter writer);
    private string GetExpectedMemberPath();
    private static string ReplaceRootName(string path, string rootName);
    private string GetMemberPath();
}
public class ExpectedObjects.EqualityResult : object {
    [CompilerGeneratedAttribute]
private bool <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Expected>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
private EqualityResultType <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public bool Status { get; }
    public string Member { get; public set; }
    public object Expected { get; }
    public object Actual { get; }
    public EqualityResultType ResultType { get; }
    public string Message { get; }
    public EqualityResult(bool status, string member, object expected, object actual, EqualityResultType resultType, string message);
    [CompilerGeneratedAttribute]
public bool get_Status();
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(string value);
    [CompilerGeneratedAttribute]
public object get_Expected();
    [CompilerGeneratedAttribute]
public object get_Actual();
    [CompilerGeneratedAttribute]
public EqualityResultType get_ResultType();
    [CompilerGeneratedAttribute]
public string get_Message();
}
public enum ExpectedObjects.EqualityResultType : Enum {
    public int value__;
    public static EqualityResultType Comparison;
    public static EqualityResultType Custom;
}
public static class ExpectedObjects.Expect : object {
    private static NotNullComparison NotNullComparison;
    private static NullComparison NullComparison;
    private static IgnoredComparison IgnoredComparison;
    private static Expect();
    public static Any`1<T> Any();
    public static AnyMatchingPredicate`1<T> Any(Expression`1<Func`2<T, bool>> predicateExpression);
    public static NotNullComparison NotNull();
    public static NullComparison Null();
    public static IComparison Ignored();
    public static IComparison Default();
    public static IComparison NotDefault();
}
public class ExpectedObjects.ExpectedDescription : object {
    private object _expectedResult;
    public ExpectedDescription(object expectedResult);
    public virtual string ToString();
}
public class ExpectedObjects.ExpectedObject : object {
    private IConfiguration _configuration;
    private object _expected;
    public ExpectedObject(object instance, IConfiguration configuration);
    public virtual bool Equals(object actual);
    public bool Equals(object actual, IWriter writer, bool ignoreTypeInformation);
    public bool Equals(ExpectedObject other);
    public virtual int GetHashCode();
    public static bool op_Equality(ExpectedObject left, ExpectedObject right);
    public static bool op_Inequality(ExpectedObject left, ExpectedObject right);
}
[ExtensionAttribute]
public static class ExpectedObjects.ExpectedObjectExtensions : object {
    [ExtensionAttribute]
public static ExpectedObject ToExpectedObject(object expected);
    [ExtensionAttribute]
public static ExpectedObject ToExpectedObject(T expected, Action`1<IConfigurationContext`1<T>> configurationAction);
    [ExtensionAttribute]
public static bool Matches(ExpectedObject expected, object actual);
    [ExtensionAttribute]
public static bool DoesNotMatch(ExpectedObject expected, object actual);
}
internal class ExpectedObjects.ExpressionMemberContext`2 : object {
    private IMemberConfigurationContext _memberConfigurationContext;
    private Type _rootType;
    private Expression`1<Func`2<TExpected, TMember>> _memberExpression;
    public ExpressionMemberContext`2(IMemberConfigurationContext memberConfigurationContext, Type rootType, Expression`1<Func`2<TExpected, TMember>> memberExpression);
    public sealed virtual void UsesComparison(IComparison comparison);
    private string GetMemberPath(Expression`1<Func`2<TExpected, TMember>> expr);
}
public interface ExpectedObjects.IComparison {
    public abstract virtual bool AreEqual(object actual);
    public abstract virtual object GetExpectedResult();
}
public interface ExpectedObjects.IComparisonContext {
    public abstract virtual bool AreEqual(object expected, object actual, string member);
    public abstract virtual bool ReportEquality(object expected, object actual, string member);
    public abstract virtual bool CompareProperties(object expected, object actual, Func`3<PropertyInfo, PropertyInfo, bool> comparison);
    public abstract virtual bool CompareFields(object expected, object actual, Func`3<FieldInfo, FieldInfo, bool> comparison);
    public abstract virtual void Report(bool status, string message, object expected, object actual);
}
internal interface ExpectedObjects.IComparisonResult {
    public bool Result { get; public set; }
    public abstract virtual bool get_Result();
    public abstract virtual void set_Result(bool value);
}
public interface ExpectedObjects.IConfiguration {
    public IEnumerable`1<IComparisonStrategy> ComparisonStrategies { get; }
    public IEnumerable`1<IMemberComparison> MemberComparisons { get; }
    public abstract virtual IEnumerable`1<IComparisonStrategy> get_ComparisonStrategies();
    public abstract virtual IEnumerable`1<IMemberComparison> get_MemberComparisons();
    public abstract virtual BindingFlags GetFieldBindingFlags();
    public abstract virtual IComparisonStrategy GetTypeStrategy(Type type);
}
public interface ExpectedObjects.IConfigurationContext {
    public object Object { get; }
    public abstract virtual object get_Object();
    public abstract virtual void PushStrategy();
    public abstract virtual void PushStrategy(IComparisonStrategy comparisonStrategy);
    public abstract virtual void RemoveStrategy();
    public abstract virtual void IncludeMemberTypes(MemberType memberType);
    public abstract virtual void ReplaceStrategy();
    public abstract virtual void ClearStrategies();
    public abstract virtual void MapStrategy(IComparisonStrategy comparisonStrategy);
}
public interface ExpectedObjects.IConfigurationContext`1 {
    public abstract virtual IMemberContext Member(Expression`1<Func`2<T, TMember>> memberExpression);
    public abstract virtual IMemberContext Member(string memberPath);
    public abstract virtual IMemberContext RelativeMember(string memberPath);
}
public interface ExpectedObjects.IExpectedDescription {
    public abstract virtual string ToString();
}
public interface ExpectedObjects.IMemberComparison {
    public IComparison Comparison { get; }
    public abstract virtual bool ShouldApply(string memberPath);
    public abstract virtual IComparison get_Comparison();
}
public interface ExpectedObjects.IMemberConfigurationContext {
    public abstract virtual void ConfigureMember(IMemberComparison memberComparison);
}
public interface ExpectedObjects.IMemberContext {
    public abstract virtual void UsesComparison(IComparison comparison);
}
public interface ExpectedObjects.IMissing {
}
public interface ExpectedObjects.IMissingElement {
}
public interface ExpectedObjects.IMissingMember {
}
public interface ExpectedObjects.IUnexpectedElement {
    public object Element { get; public set; }
    public abstract virtual object get_Element();
    public abstract virtual void set_Element(object value);
}
[FlagsAttribute]
public enum ExpectedObjects.MemberType : Enum {
    public int value__;
    public static MemberType None;
    public static MemberType PublicFields;
}
public class ExpectedObjects.MissingElement : object {
}
public class ExpectedObjects.MissingMember`1 : object {
    public Type MemberType { get; }
    public Type get_MemberType();
}
[ExtensionAttribute]
internal static class ExpectedObjects.ObjectExtensions : object {
    [ExtensionAttribute]
internal static string ToUsefulString(object obj, bool verbose);
    [ExtensionAttribute]
private static string EachToUsefulString(IEnumerable`1<T> enumerable, bool verbose);
    [ExtensionAttribute]
private static string Tab(string str);
}
[ExtensionAttribute]
internal static class ExpectedObjects.ObjectStringExtensions : object {
    private static int _indentLevel;
    [ExtensionAttribute]
public static string ToObjectString(object o);
    [ExtensionAttribute]
public static string ToUsefulTypeName(Type type);
    private static string Prefix();
    [ExtensionAttribute]
private static StringBuilder CreateObject(object o, Stack`1<object> visited);
    [ExtensionAttribute]
private static string ToUsefulClassName(object o);
    [ExtensionAttribute]
private static string GetCSharpString(object o, Stack`1<object> visited);
    public static bool IsExpression(object instance);
    [ExtensionAttribute]
private static string GetItems(IEnumerable items, Stack`1<object> visited);
    [ExtensionAttribute]
private static bool IsNumericType(object o);
}
[ExtensionAttribute]
public static class ExpectedObjects.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetVisibleProperties(Type type, BindingFlags bindingFlags);
    private static IEnumerable`1<PropertyInfo> GetVisibleProperties(Type type, BindingFlags bindingFlags, IList`1<PropertyInfo> filterProperties);
    [ExtensionAttribute]
public static bool HasSameIndexParameters(PropertyInfo propertyInfo1, PropertyInfo propertyInfo2);
}
internal class ExpectedObjects.RelativeMemberComparison : object {
    private string _memberPath;
    [CompilerGeneratedAttribute]
private IComparison <Comparison>k__BackingField;
    public IComparison Comparison { get; }
    public RelativeMemberComparison(IComparison comparison, string memberPath);
    [CompilerGeneratedAttribute]
public sealed virtual IComparison get_Comparison();
    public sealed virtual bool ShouldApply(string memberPath);
}
internal class ExpectedObjects.RelativePathMemberContext : object {
    private IMemberConfigurationContext _memberConfigurationContext;
    private string _memberPath;
    public RelativePathMemberContext(IMemberConfigurationContext memberConfigurationContext, string memberPath);
    public sealed virtual void UsesComparison(IComparison comparison);
}
[ExtensionAttribute]
internal static class ExpectedObjects.Reporting.EnumerableExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumerable, Action`3<T, int, IEnumerable`1<T>> action);
}
public interface ExpectedObjects.Reporting.IWriter {
    public abstract virtual void Write(EqualityResult content);
    public abstract virtual string GetFormattedResults();
}
public class ExpectedObjects.Reporting.NullWriter : object {
    public static IWriter Instance;
    private static NullWriter();
    public sealed virtual void Write(EqualityResult content);
    public sealed virtual string GetFormattedResults();
}
public class ExpectedObjects.Reporting.ShouldWriter : object {
    private static int IndentLength;
    private bool _expandObjects;
    private List`1<EqualityResult> _results;
    [CompilerGeneratedAttribute]
private WriterVerbosity <Verbosity>k__BackingField;
    public WriterVerbosity Verbosity { get; public set; }
    [CompilerGeneratedAttribute]
public WriterVerbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(WriterVerbosity value);
    public sealed virtual void Write(EqualityResult content);
    public sealed virtual string GetFormattedResults();
    public string GetTrunkFormattedResults();
    private string GetFormattedObjects(EqualityResult result, bool expandObjects);
    public bool IsLeaf(EqualityResult result);
    public bool IsRoot(EqualityResult result);
}
public class ExpectedObjects.Reporting.SimpleShouldWriter : object {
    private List`1<EqualityResult> _results;
    public sealed virtual void Write(EqualityResult content);
    public sealed virtual string GetFormattedResults();
    public bool IsLeaf(EqualityResult result);
}
[ExtensionAttribute]
internal static class ExpectedObjects.Reporting.StringBuilderExtensions : object {
    private static int IndentLength;
    [ExtensionAttribute]
public static void Indent(StringBuilder sb, string s, int level);
    [ExtensionAttribute]
public static void Heading(StringBuilder sb, string s, int level);
}
public enum ExpectedObjects.Reporting.WriterVerbosity : Enum {
    public int value__;
    public static WriterVerbosity None;
    public static WriterVerbosity Minimal;
    public static WriterVerbosity Normal;
    public static WriterVerbosity Verbose;
}
[ExtensionAttribute]
public static class ExpectedObjects.ShouldExtensions : object {
    [ExtensionAttribute]
public static void ShouldEqual(ExpectedObject expected, T actual);
    [ExtensionAttribute]
public static void ShouldNotEqual(ExpectedObject expected, T actual);
    [ExtensionAttribute]
public static void ShouldMatch(ExpectedObject expected, T actual);
    [ExtensionAttribute]
public static void ShouldNotMatch(ExpectedObject expected, T actual);
}
[DefaultMemberAttribute("Item")]
public class ExpectedObjects.StackDictionary`2 : object {
    private IDictionary`2<TKey, T> _dictionary;
    private Stack`1<T> _stack;
    public T Item { get; }
    public T get_Item(TKey key);
    public bool ContainsKey(TKey actual);
    public void Push(TKey key, T item);
    public T Pop(TKey key);
}
public class ExpectedObjects.Strategies.ComparableComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
}
public class ExpectedObjects.Strategies.DefaultComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
}
public class ExpectedObjects.Strategies.Description : object {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Label { get; }
    public object Value { get; }
    public Description(string label, object value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public class ExpectedObjects.Strategies.EnumerableComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
    private static Dictionary`2<int, object> GetDictionary(List`1<object> list);
}
public class ExpectedObjects.Strategies.EqualityResults : object {
    private List`1<EqualityResult> _results;
    public bool Status { get; }
    public IEnumerable`1<EqualityResult> Results { get; }
    public bool get_Status();
    public IEnumerable`1<EqualityResult> get_Results();
    private bool AllEqual(List`1<EqualityResult> results);
    public void AddResult(EqualityResult result);
}
public class ExpectedObjects.Strategies.EqualsOverrideComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
}
public interface ExpectedObjects.Strategies.IComparisonStrategy {
    public abstract virtual bool CanCompare(object expected, object actual);
    public abstract virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
}
public class ExpectedObjects.Strategies.KeyValuePairComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
    private MethodInfo GetMethodInfo(string methodName, Type[] genericTypes);
    private object GetKey(KeyValuePair`2<TKey, TValue> keyValuePair);
    private object GetValue(KeyValuePair`2<TKey, TValue> keyValuePair);
}
public class ExpectedObjects.Strategies.OrdinalEnumerableComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
}
public class ExpectedObjects.Strategies.PrimitiveComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
}
public class ExpectedObjects.Strategies.ValueComparisonStrategy : object {
    public sealed virtual bool CanCompare(object expected, object actual);
    public sealed virtual bool AreEqual(object expected, object actual, IComparisonContext comparisonContext);
    private static bool CompareField(FieldInfo expectedFieldInfo, FieldInfo actualFieldInfo, object expected, object actual, IComparisonContext comparisonContext);
    private static bool CompareProperty(PropertyInfo expectedPropertyInfo, PropertyInfo actualPropertyInfo, object expected, object actual, IComparisonContext comparisonContext, bool areEqual);
    private static bool CompareIndexedProperty(PropertyInfo pi, object expected, object actual, ParameterInfo[] indexes, IComparisonContext comparisonContext);
    private static bool CompareStandardProperty(PropertyInfo pi1, PropertyInfo pi2, object expected, object actual, IComparisonContext comparisonContext);
}
[ExtensionAttribute]
internal static class ExpectedObjects.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static Type GetTypeInfo(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetDeclaredMethods(Type type, string methodName);
}
public class ExpectedObjects.UnexpectedElement : object {
    [CompilerGeneratedAttribute]
private object <Element>k__BackingField;
    public object Element { get; public set; }
    public UnexpectedElement(object element);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Element(object value);
}
