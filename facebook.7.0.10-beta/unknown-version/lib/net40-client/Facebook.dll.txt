internal class Facebook.CombinationStream : Stream {
    private IList`1<Stream> _streams;
    private IList`1<int> _streamsToDispose;
    private int _currentStreamIndex;
    private Stream _currentStream;
    private long _length;
    private long _postion;
    public IList`1<Stream> InternalStreams { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CombinationStream(IList`1<Stream> streams);
    public CombinationStream(IList`1<Stream> streams, IList`1<int> streamsToDispose);
    public IList`1<Stream> get_InternalStreams();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal class Facebook.DataContractJsonSerializerStrategy : PocoJsonSerializerStrategy {
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    private static bool CanAdd(MemberInfo info, String& jsonKey);
}
public static class Facebook.DateTimeConvertor : object {
    private static String[] Iso8601Format;
    public static DateTime Epoch { get; }
    private static DateTimeConvertor();
    public static DateTime get_Epoch();
    public static DateTime FromUnixTime(double unixTime);
    public static DateTime FromUnixTime(string unixTime);
    public static double ToUnixTime(DateTime dateTime);
    public static double ToUnixTime(DateTimeOffset dateTime);
    public static string ToIso8601FormattedDateTime(DateTime dateTime);
    public static DateTime FromIso8601FormattedDateTime(string iso8601DateTime);
}
public class Facebook.FacebookApiEventArgs : AsyncCompletedEventArgs {
    private object _result;
    public FacebookApiEventArgs(Exception error, bool cancelled, object userState, object result);
    public object GetResultData();
    public TResult GetResultData();
}
public class Facebook.FacebookApiException : Exception {
    [CompilerGeneratedAttribute]
private string <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorSubcode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorUserTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorUserMsg>k__BackingField;
    public string ErrorType { get; public set; }
    public int ErrorCode { get; public set; }
    public int ErrorSubcode { get; public set; }
    public string ErrorUserTitle { get; public set; }
    public string ErrorUserMsg { get; public set; }
    public FacebookApiException(string message);
    public FacebookApiException(string message, string errorType);
    public FacebookApiException(string message, string errorType, int errorCode);
    public FacebookApiException(string message, string errorType, int errorCode, int errorSubcode);
    public FacebookApiException(string message, Exception innerException);
    protected FacebookApiException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ErrorType();
    [CompilerGeneratedAttribute]
public void set_ErrorType(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorSubcode();
    [CompilerGeneratedAttribute]
public void set_ErrorSubcode(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorUserTitle();
    [CompilerGeneratedAttribute]
public void set_ErrorUserTitle(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorUserMsg();
    [CompilerGeneratedAttribute]
public void set_ErrorUserMsg(string value);
}
public class Facebook.FacebookApiLimitException : FacebookApiException {
    public FacebookApiLimitException(string message);
    public FacebookApiLimitException(string message, string errorType);
    public FacebookApiLimitException(string message, Exception innerException);
    protected FacebookApiLimitException(SerializationInfo info, StreamingContext context);
}
public class Facebook.FacebookBatchParameter : object {
    [CompilerGeneratedAttribute]
private HttpMethod <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    public HttpMethod HttpMethod { get; public set; }
    public string Path { get; public set; }
    public object Parameters { get; public set; }
    public object Data { get; public set; }
    public FacebookBatchParameter(string path);
    public FacebookBatchParameter(HttpMethod httpMethod, string path);
    public FacebookBatchParameter(string path, object parameters);
    public FacebookBatchParameter(HttpMethod httpMethod, string path, object parameters);
    [CompilerGeneratedAttribute]
public HttpMethod get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(HttpMethod value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public object get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(object value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
}
public class Facebook.FacebookClient : object {
    private static int BufferSize;
    private static string AttachmentMustHavePropertiesSetError;
    private static string AttachmentValueIsNull;
    private static string UnknownResponse;
    private static string MultiPartFormPrefix;
    private static string MultiPartNewLine;
    private static string ETagKey;
    private static string AtLeastOneBatchParameterRequried;
    private static string OnlyOneAttachmentAllowedPerBatchRequest;
    private static string InvalidSignedRequest;
    private static string SubscriptionXHubSigntureRequestHeaderKey;
    private static string SubscriptionHubChallengeKey;
    private static string SubscriptionHubVerifyTokenKey;
    private static string SubscriptionHubModeKey;
    private static string InvalidHttpXHubSignature;
    private static string InvalidHubChallenge;
    private static string InvalidVerifyToken;
    private static string InvalidHubMode;
    internal static String[] LegacyRestApiReadOnlyCalls;
    private string _accessToken;
    private string _appId;
    private string _appSecret;
    private bool _isSecureConnection;
    private bool _useFacebookBeta;
    private string _version;
    private static string _defaultVersion;
    private Func`2<object, string> _serializeJson;
    private static Func`2<object, string> _defaultJsonSerializer;
    private Func`3<string, Type, object> _deserializeJson;
    private static Func`3<string, Type, object> _defaultJsonDeserializer;
    private Func`2<Uri, HttpWebRequestWrapper> _httpWebRequestFactory;
    private static Func`2<Uri, HttpWebRequestWrapper> _defaultHttpWebRequestFactory;
    private HttpWebRequestWrapper _httpWebRequest;
    private object _httpWebRequestLocker;
    private EventHandler`1<FacebookApiEventArgs> GetCompleted;
    private EventHandler`1<FacebookApiEventArgs> PostCompleted;
    private EventHandler`1<FacebookApiEventArgs> DeleteCompleted;
    private EventHandler`1<FacebookUploadProgressChangedEventArgs> UploadProgressChanged;
    private EventHandler`1<HttpWebRequestCreatedEventArgs> HttpWebRequestWrapperCreated;
    [CompilerGeneratedAttribute]
private Func`1<string> <Boundary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionVerifyToken>k__BackingField;
    internal Func`1<string> Boundary { get; internal set; }
    public string AccessToken { get; public set; }
    public string AppId { get; public set; }
    public string AppSecret { get; public set; }
    public bool IsSecureConnection { get; public set; }
    public bool UseFacebookBeta { get; public set; }
    public string Version { get; public set; }
    public static string DefaultVersion { get; public set; }
    [ObsoleteAttribute("Use SetJsonSerializers")]
[EditorBrowsableAttribute("1")]
public Func`2<object, string> SerializeJson { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SetJsonSerializers")]
public Func`3<string, Type, object> DeserializeJson { get; public set; }
    [ObsoleteAttribute("Use SetHttpWebRequestFactory.")]
[EditorBrowsableAttribute("1")]
public Func`2<Uri, HttpWebRequestWrapper> HttpWebRequestFactory { get; public set; }
    public string SubscriptionVerifyToken { get; public set; }
    private static FacebookClient();
    public FacebookClient(string accessToken);
    [CompilerGeneratedAttribute]
internal Func`1<string> get_Boundary();
    [CompilerGeneratedAttribute]
internal void set_Boundary(Func`1<string> value);
    public virtual string get_AccessToken();
    public virtual void set_AccessToken(string value);
    public virtual string get_AppId();
    public virtual void set_AppId(string value);
    public virtual string get_AppSecret();
    public virtual void set_AppSecret(string value);
    public virtual bool get_IsSecureConnection();
    public virtual void set_IsSecureConnection(bool value);
    public virtual bool get_UseFacebookBeta();
    public virtual void set_UseFacebookBeta(bool value);
    public virtual string get_Version();
    public virtual void set_Version(string value);
    public static string get_DefaultVersion();
    public static void set_DefaultVersion(string value);
    public virtual Func`2<object, string> get_SerializeJson();
    public virtual void set_SerializeJson(Func`2<object, string> value);
    public virtual Func`3<string, Type, object> get_DeserializeJson();
    public virtual void set_DeserializeJson(Func`3<string, Type, object> value);
    public virtual Func`2<Uri, HttpWebRequestWrapper> get_HttpWebRequestFactory();
    public virtual void set_HttpWebRequestFactory(Func`2<Uri, HttpWebRequestWrapper> value);
    public static void SetDefaultJsonSerializers(Func`2<object, string> jsonSerializer, Func`3<string, Type, object> jsonDeserializer);
    public virtual void SetJsonSerializers(Func`2<object, string> jsonSerializer, Func`3<string, Type, object> jsonDeserializer);
    public static void SetDefaultHttpWebRequestFactory(Func`2<Uri, HttpWebRequestWrapper> httpWebRequestFactory);
    public virtual void SetHttpWebRequestFactory(Func`2<Uri, HttpWebRequestWrapper> httpWebRequestFactory);
    private HttpHelper PrepareRequest(HttpMethod httpMethod, string path, object parameters, Type resultType, Stream& input, Boolean& containsEtag, IList`1& batchEtags);
    private object ProcessResponse(HttpHelper httpHelper, string responseString, Type resultType, bool containsEtag, IList`1<int> batchEtags);
    private void SerializeParameters(IDictionary`2<string, object> parameters);
    internal static Exception GetException(HttpHelper httpHelper, object result);
    private static IDictionary`2<string, object> ToDictionary(object parameters, IDictionary`2& mediaObjects, IDictionary`2& mediaStreams);
    private static string BuildHttpQuery(object parameter, Func`2<string, string> encode);
    private static string ParseUrlQueryString(string path, IDictionary`2<string, object> parameters, bool forceParseAllUrls, Uri& uri, Boolean& isLegacyRestApi, Boolean& isAbsolutePath);
    internal static string ParseUrlQueryString(string path, IDictionary`2<string, object> parameters, bool forceParseAllUrls);
    public void add_GetCompleted(EventHandler`1<FacebookApiEventArgs> value);
    public void remove_GetCompleted(EventHandler`1<FacebookApiEventArgs> value);
    public void add_PostCompleted(EventHandler`1<FacebookApiEventArgs> value);
    public void remove_PostCompleted(EventHandler`1<FacebookApiEventArgs> value);
    public void add_DeleteCompleted(EventHandler`1<FacebookApiEventArgs> value);
    public void remove_DeleteCompleted(EventHandler`1<FacebookApiEventArgs> value);
    public void add_UploadProgressChanged(EventHandler`1<FacebookUploadProgressChangedEventArgs> value);
    public void remove_UploadProgressChanged(EventHandler`1<FacebookUploadProgressChangedEventArgs> value);
    private void add_HttpWebRequestWrapperCreated(EventHandler`1<HttpWebRequestCreatedEventArgs> value);
    private void remove_HttpWebRequestWrapperCreated(EventHandler`1<HttpWebRequestCreatedEventArgs> value);
    public virtual void CancelAsync();
    [ObsoleteAttribute("Use ApiTaskAsync instead.")]
[EditorBrowsableAttribute("1")]
protected virtual void ApiAsync(HttpMethod httpMethod, string path, object parameters, Type resultType, object userState);
    [ObsoleteAttribute]
protected virtual void OnGetCompleted(FacebookApiEventArgs args);
    [ObsoleteAttribute]
protected virtual void OnPostCompleted(FacebookApiEventArgs args);
    [ObsoleteAttribute]
protected virtual void OnDeleteCompleted(FacebookApiEventArgs args);
    [ObsoleteAttribute]
protected void OnUploadProgressChanged(FacebookUploadProgressChangedEventArgs args);
    [ObsoleteAttribute]
private void OnCompleted(HttpMethod httpMethod, FacebookApiEventArgs args);
    [ObsoleteAttribute("Use GetTaskAsync instead.")]
[EditorBrowsableAttribute("1")]
public virtual void GetAsync(string path);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetTaskAsync instead.")]
public virtual void GetAsync(object parameters);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetTaskAsync instead.")]
public virtual void GetAsync(string path, object parameters);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetTaskAsync instead.")]
public virtual void GetAsync(string path, object parameters, object userState);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetTaskAsync instead.")]
public virtual void GetAsync(string path, object parameters, object userState, Type resultType);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetTaskAsync instead.")]
public virtual void GetAsync(string path, object parameters, object userState);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetTaskAsync instead.")]
public virtual void GetAsync(string path, object parameters);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetTaskAsync instead.")]
public virtual void GetAsync(string path);
    [ObsoleteAttribute("Use GetTaskAsync instead.")]
[EditorBrowsableAttribute("1")]
public virtual void GetAsync(object parameters);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use PostTaskAsync instead.")]
public virtual void PostAsync(object parameters);
    [ObsoleteAttribute("Use PostTaskAsync instead.")]
[EditorBrowsableAttribute("1")]
public virtual void PostAsync(string path, object parameters);
    [ObsoleteAttribute("Use PostTaskAsync instead.")]
[EditorBrowsableAttribute("1")]
public virtual void PostAsync(string path, object parameters, object userState);
    [ObsoleteAttribute("Use DeleteTaskAsync instead.")]
[EditorBrowsableAttribute("1")]
public virtual void DeleteAsync(string path);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use DeleteTaskAsync instead.")]
public virtual void DeleteAsync(string path, object parameters, object userState);
    protected virtual Task`1<object> ApiTaskAsync(HttpMethod httpMethod, string path, object parameters, Type resultType, object userState, CancellationToken cancellationToken);
    private static void TransferCompletionToTask(TaskCompletionSource`1<T> tcs, AsyncCompletedEventArgs e, Func`1<T> getResult, Action unregisterHandler);
    private void RemoveTaskAsyncHandlers(HttpMethod httpMethod, EventHandler`1<FacebookApiEventArgs> handler);
    public virtual Task`1<object> GetTaskAsync(string path);
    public virtual Task`1<object> GetTaskAsync(object parameters);
    public virtual Task`1<object> GetTaskAsync(string path, object parameters);
    public virtual Task`1<object> GetTaskAsync(string path, object parameters, CancellationToken cancellationToken);
    public virtual Task`1<object> GetTaskAsync(string path, object parameters, CancellationToken cancellationToken, Type resultType);
    public virtual Task`1<TResult> GetTaskAsync(string path, object parameters, CancellationToken cancellationToken);
    public virtual Task`1<TResult> GetTaskAsync(string path, object parameters);
    public virtual Task`1<TResult> GetTaskAsync(object parameters);
    public virtual Task`1<TResult> GetTaskAsync(string path);
    public virtual Task`1<object> PostTaskAsync(object parameters);
    public virtual Task`1<object> PostTaskAsync(string path, object parameters);
    public virtual Task`1<object> PostTaskAsync(string path, object parameters, CancellationToken cancellationToken);
    public virtual Task`1<object> PostTaskAsync(string path, object parameters, object userState, CancellationToken cancellationToken);
    public virtual Task`1<object> DeleteTaskAsync(string path);
    public virtual Task`1<object> DeleteTaskAsync(string path, object parameters, CancellationToken cancellationToken);
    public virtual object Batch(FacebookBatchParameter[] batchParameters);
    public virtual object Batch(FacebookBatchParameter[] batchParameters, object parameters);
    [ObsoleteAttribute("Use BatchTaskAsync instead.")]
[EditorBrowsableAttribute("1")]
public virtual void BatchAsync(FacebookBatchParameter[] batchParameters, object userState, object parameters);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use BatchTaskAsync instead.")]
public virtual void BatchAsync(FacebookBatchParameter[] batchParameters, object userState);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use BatchTaskAsync instead.")]
public virtual void BatchAsync(FacebookBatchParameter[] batchParameters);
    internal object PrepareBatchRequest(FacebookBatchParameter[] batchParameters, object parameters);
    internal object ProcessBatchResponse(object result, IList`1<int> batchEtags);
    public virtual Task`1<object> BatchTaskAsync(FacebookBatchParameter[] batchParameters);
    public virtual Task`1<object> BatchTaskAsync(FacebookBatchParameter[] batchParameters, object userState, CancellationToken cancellationToken);
    public virtual Task`1<object> BatchTaskAsync(FacebookBatchParameter[] batchParameters, object userState, object parameters, CancellationToken cancellationToken);
    protected virtual object Api(HttpMethod httpMethod, string path, object parameters, Type resultType);
    public virtual object Get(string path);
    public virtual object Get(object parameters);
    public virtual object Get(string path, object parameters);
    public virtual object Get(string path, object parameters, Type resultType);
    public virtual TResult Get(string path);
    public virtual TResult Get(object parameters);
    public virtual TResult Get(string path, object parameters);
    public virtual object Post(object parameters);
    public virtual object Post(string path, object parameters);
    public virtual object Delete(string path);
    public virtual object Delete(string path, object parameters);
    public virtual bool TryParseSignedRequest(string appSecret, string signedRequestValue, Object& signedRequest);
    public virtual bool TryParseSignedRequest(string signedRequestValue, Object& signedRequest);
    public virtual object ParseSignedRequest(string appSecret, string signedRequestValue);
    public virtual object ParseSignedRequest(string signedRequestValue);
    private static Byte[] Base64UrlDecode(string base64UrlSafeString);
    private static Byte[] ComputeHmacSha256Hash(Byte[] data, Byte[] key);
    [CompilerGeneratedAttribute]
public virtual string get_SubscriptionVerifyToken();
    [CompilerGeneratedAttribute]
public virtual void set_SubscriptionVerifyToken(string value);
    public virtual void VerifyGetSubscription(string requestHubMode, string requestVerifyToken, string requestHubChallenge, string verifyToken);
    public virtual void VerifyGetSubscription(string requestHubMode, string requestVerifyToken, string requestHubChallenge);
    public virtual object VerifyPostSubscription(string requestHttpXHubSignature, string requestBody, Type resultType, string appSecret);
    public object VerifyPostSubscription(string requestHttpXHubSignature, string requestBody, Type resultType);
    public object VerifyPostSubscription(string requestHttpXHubSignature, string requestBody);
    public virtual object VerifyPostSubscription(string requestHttpXHubSignature, string requestBody, string appSecret);
    private static Byte[] ComputeHmacSha1Hash(Byte[] data, Byte[] key);
    public virtual bool TryParseOAuthCallbackUrl(Uri url, FacebookOAuthResult& facebookOAuthResult);
    public virtual FacebookOAuthResult ParseOAuthCallbackUrl(Uri uri);
    public virtual object ParseDialogCallbackUrl(Uri uri);
    public virtual Uri GetDialogUrl(string dialog, object parameters);
    public virtual Uri GetLoginUrl(object parameters);
    public virtual Uri GetLogoutUrl(object parameters);
    [CompilerGeneratedAttribute]
private static TResult <GetTaskAsync>b__e(object result);
}
public class Facebook.FacebookMediaObject : object {
    private Byte[] _value;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string ContentType { get; public set; }
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public FacebookMediaObject SetValue(Byte[] value);
    public Byte[] GetValue();
}
public class Facebook.FacebookMediaStream : object {
    private Stream _value;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string ContentType { get; public set; }
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public FacebookMediaStream SetValue(Stream value);
    public Stream GetValue();
    public sealed virtual void Dispose();
}
public class Facebook.FacebookOAuthException : FacebookApiException {
    public FacebookOAuthException(string message);
    public FacebookOAuthException(string message, string errorType);
    public FacebookOAuthException(string message, string errorType, int errorCode);
    public FacebookOAuthException(string message, string errorType, int errorCode, int errorSubcode);
    public FacebookOAuthException(string message, Exception innerException);
    protected FacebookOAuthException(SerializationInfo info, StreamingContext context);
}
public class Facebook.FacebookOAuthResult : object {
    private string _accessToken;
    private DateTime _expires;
    private string _error;
    private string _errorReason;
    private string _errorDescription;
    private string _code;
    private string _state;
    public string Error { get; }
    public string ErrorReason { get; }
    public string ErrorDescription { get; }
    public DateTime Expires { get; }
    public string AccessToken { get; }
    public bool IsSuccess { get; }
    public string Code { get; }
    public string State { get; }
    internal FacebookOAuthResult(IDictionary`2<string, object> parameters);
    public virtual string get_Error();
    public virtual string get_ErrorReason();
    public virtual string get_ErrorDescription();
    public virtual DateTime get_Expires();
    public virtual string get_AccessToken();
    public virtual bool get_IsSuccess();
    public virtual string get_Code();
    public virtual string get_State();
}
public class Facebook.FacebookUploadProgressChangedEventArgs : ProgressChangedEventArgs {
    private long _received;
    private long _sent;
    private long _totalRecived;
    private long _totalSend;
    public long BytesReceived { get; }
    public long TotalBytesToReceive { get; }
    public long BytesSent { get; }
    public long TotalBytesToSend { get; }
    public FacebookUploadProgressChangedEventArgs(long bytesReceived, long totalBytesToReceive, long bytesSent, long totalBytesToSend, int progressPercentage, object userToken);
    public long get_BytesReceived();
    public long get_TotalBytesToReceive();
    public long get_BytesSent();
    public long get_TotalBytesToSend();
}
internal class Facebook.HttpHelper : object {
    private static string ErrorPerformingHttpRequest;
    private OpenReadCompletedEventHandler OpenReadCompleted;
    private OpenWriteCompletedEventHandler OpenWriteCompleted;
    private HttpWebRequestWrapper _httpWebRequest;
    private HttpWebResponseWrapper _httpWebResponse;
    private Exception _innerException;
    private static CultureInfo InvariantCulture;
    private static object entitiesLock;
    private static SortedDictionary`2<string, char> entities;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public Exception InnerException { get; }
    public int Timeout { get; public set; }
    public HttpWebRequestWrapper HttpWebRequest { get; }
    public HttpWebResponseWrapper HttpWebResponse { get; }
    private static IDictionary`2<string, char> Entities { get; }
    public HttpHelper(Uri url);
    public HttpHelper(string url);
    public HttpHelper(HttpWebRequestWrapper httpWebRequest);
    private static HttpHelper();
    public Exception get_InnerException();
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    public void add_OpenReadCompleted(OpenReadCompletedEventHandler value);
    public void remove_OpenReadCompleted(OpenReadCompletedEventHandler value);
    public void add_OpenWriteCompleted(OpenWriteCompletedEventHandler value);
    public void remove_OpenWriteCompleted(OpenWriteCompletedEventHandler value);
    public HttpWebRequestWrapper get_HttpWebRequest();
    public HttpWebResponseWrapper get_HttpWebResponse();
    public virtual Stream OpenWrite();
    public virtual Stream OpenRead();
    public virtual void OpenReadAsync(object userToken);
    public virtual void OpenReadAsync();
    public virtual void OpenWriteAsync(object userToken);
    public virtual void OpenWriteAsync();
    private void ResponseCallback(IAsyncResult asyncResult, object userToken);
    private void ScanTimoutCallback(object state, bool timedOut);
    private static void TransferCompletionToTask(TaskCompletionSource`1<T> tcs, AsyncCompletedEventArgs e, Func`1<T> getResult, Action unregisterHandler);
    public virtual Task`1<Stream> OpenReadTaskAsync(CancellationToken cancellationToken);
    public virtual Task`1<Stream> OpenReadTaskAsync();
    public virtual Task`1<Stream> OpenWriteTaskAsync();
    public virtual Task`1<Stream> OpenWriteTaskAsync(CancellationToken cancellationToken);
    public void CancelAsync();
    protected virtual void OnOpenReadCompleted(OpenReadCompletedEventArgs args);
    protected virtual void OnOpenWriteCompleted(OpenWriteCompletedEventArgs args);
    public static string UrlEncode(string s);
    public static string UrlDecode(string s);
    private static string UrlDecode(string s, Encoding e);
    private static void WriteCharBytes(IList buf, char ch, Encoding e);
    private static int GetChar(string str, int offset, int length);
    private static int GetInt(byte b);
    private static void InitEntities();
    private static IDictionary`2<string, char> get_Entities();
    public static string HtmlDecode(string s);
    [CompilerGeneratedAttribute]
private void <OpenReadTaskAsync>b__8();
    [CompilerGeneratedAttribute]
private void <OpenWriteTaskAsync>b__10();
}
public enum Facebook.HttpMethod : Enum {
    public int value__;
    public static HttpMethod Get;
    public static HttpMethod Post;
    public static HttpMethod Delete;
}
internal class Facebook.HttpWebRequestCreatedEventArgs : EventArgs {
    private object _userToken;
    private HttpWebRequestWrapper _httpWebRequestWrapper;
    public HttpWebRequestWrapper HttpWebRequest { get; }
    public object UserState { get; }
    public HttpWebRequestCreatedEventArgs(object userToken, HttpWebRequestWrapper httpWebRequestWrapper);
    public HttpWebRequestWrapper get_HttpWebRequest();
    public object get_UserState();
}
[EditorBrowsableAttribute("1")]
public class Facebook.HttpWebRequestWrapper : object {
    private HttpWebRequest _httpWebRequest;
    private object _cancelledLock;
    [CompilerGeneratedAttribute]
private bool <IsCancelled>k__BackingField;
    public string Method { get; public set; }
    public string ContentType { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public long ContentLength { get; public set; }
    public bool AllowWriteStreamBuffering { get; public set; }
    public string UserAgent { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public Uri RequestUri { get; }
    public string Accept { get; public set; }
    public ServicePoint ServicePoint { get; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public string Connection { get; public set; }
    public string Expect { get; public set; }
    public DateTime IfModifiedSince { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public string Referer { get; public set; }
    public int Timeout { get; public set; }
    public string TransferEncoding { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public bool IsCancelled { get; public set; }
    public HttpWebRequestWrapper(HttpWebRequest httpWebRequest);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual WebHeaderCollection get_Headers();
    public virtual void set_Headers(WebHeaderCollection value);
    public virtual bool get_AllowAutoRedirect();
    public virtual void set_AllowAutoRedirect(bool value);
    public virtual long get_ContentLength();
    public virtual void set_ContentLength(long value);
    public virtual bool get_AllowWriteStreamBuffering();
    public virtual void set_AllowWriteStreamBuffering(bool value);
    public virtual string get_UserAgent();
    public virtual void set_UserAgent(string value);
    public virtual CookieContainer get_CookieContainer();
    public virtual void set_CookieContainer(CookieContainer value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public virtual Uri get_RequestUri();
    public virtual string get_Accept();
    public virtual void set_Accept(string value);
    public virtual ServicePoint get_ServicePoint();
    public virtual DecompressionMethods get_AutomaticDecompression();
    public virtual void set_AutomaticDecompression(DecompressionMethods value);
    public virtual string get_Connection();
    public virtual void set_Connection(string value);
    public virtual string get_Expect();
    public virtual void set_Expect(string value);
    public virtual DateTime get_IfModifiedSince();
    public virtual void set_IfModifiedSince(DateTime value);
    public virtual int get_ReadWriteTimeout();
    public virtual void set_ReadWriteTimeout(int value);
    public virtual string get_Referer();
    public virtual void set_Referer(string value);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual string get_TransferEncoding();
    public virtual void set_TransferEncoding(string value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    public virtual bool TrySetContentLength(long contentLength);
    public virtual bool TrySetUserAgent(string userAgent);
    public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public virtual HttpWebResponseWrapper EndGetResponse(IAsyncResult asyncResult);
    public virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public virtual Task`1<HttpWebResponseWrapper> GetResponseAsync();
    public virtual Task`1<Stream> GetRequestStreamAsync();
    public virtual HttpWebResponseWrapper GetResponse();
    public virtual Stream GetRequestStream();
    public virtual void Abort();
    [CompilerGeneratedAttribute]
public virtual bool get_IsCancelled();
    [CompilerGeneratedAttribute]
public virtual void set_IsCancelled(bool value);
}
[EditorBrowsableAttribute("1")]
public class Facebook.HttpWebResponseWrapper : object {
    private HttpWebResponse _httpWebResponse;
    public string Method { get; }
    public long ContentLength { get; }
    public string ContentType { get; }
    public Uri ResponseUri { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public CookieCollection Cookies { get; }
    public WebHeaderCollection Headers { get; }
    public string ContentEncoding { get; }
    public string CharacterSet { get; }
    public bool IsMutuallyAuthenticated { get; }
    public DateTime LastModified { get; }
    public Version ProtocolVersion { get; }
    public string Server { get; }
    public HttpWebResponseWrapper(HttpWebResponse httpWebResponse);
    public virtual string get_Method();
    public virtual long get_ContentLength();
    public virtual string get_ContentType();
    public virtual Uri get_ResponseUri();
    public virtual HttpStatusCode get_StatusCode();
    public virtual string get_StatusDescription();
    public virtual CookieCollection get_Cookies();
    public virtual WebHeaderCollection get_Headers();
    public virtual string get_ContentEncoding();
    public virtual string get_CharacterSet();
    public virtual bool get_IsMutuallyAuthenticated();
    public virtual DateTime get_LastModified();
    public virtual Version get_ProtocolVersion();
    public virtual string get_Server();
    public virtual Stream GetResponseStream();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal interface Facebook.IJsonSerializerStrategy {
    public abstract virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public abstract virtual object DeserializeObject(object value, Type type);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
public class Facebook.JsonArray : List`1<object> {
    public JsonArray(int capacity);
    public virtual string ToString();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
[DefaultMemberAttribute("Item")]
public class Facebook.JsonObject : DynamicObject {
    private Dictionary`2<string, object> _members;
    public object Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonObject(IEqualityComparer`1<string> comparer);
    public object get_Item(int index);
    internal static object GetAtIndex(IDictionary`2<string, object> obj, int index);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryDeleteMember(DeleteMemberBinder binder);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
internal class Facebook.OpenReadCompletedEventArgs : AsyncCompletedEventArgs {
    private Stream _result;
    public Stream Result { get; }
    public OpenReadCompletedEventArgs(Stream result, Exception error, bool cancelled, object userState);
    public Stream get_Result();
}
internal class Facebook.OpenReadCompletedEventHandler : MulticastDelegate {
    public OpenReadCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OpenReadCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OpenReadCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Facebook.OpenWriteCompletedEventArgs : AsyncCompletedEventArgs {
    private Stream _result;
    public Stream Result { get; }
    public OpenWriteCompletedEventArgs(Stream result, Exception error, bool cancelled, object userState);
    public Stream get_Result();
}
internal class Facebook.OpenWriteCompletedEventHandler : MulticastDelegate {
    public OpenWriteCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OpenWriteCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OpenWriteCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal class Facebook.PocoJsonSerializerStrategy : object {
    internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache;
    internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache;
    internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache;
    internal static Type[] EmptyTypes;
    internal static Type[] ArrayConstructorParameterTypes;
    private static String[] Iso8601Format;
    private static PocoJsonSerializerStrategy();
    protected virtual string MapClrMemberNameToJsonFieldName(string clrPropertyName);
    internal virtual ConstructorDelegate ContructorDelegateFactory(Type key);
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    public virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public virtual object DeserializeObject(object value, Type type);
    protected virtual object SerializeEnum(Enum p);
    protected virtual bool TrySerializeKnownTypes(object input, Object& output);
    protected virtual bool TrySerializeUnknownTypes(object input, Object& output);
}
[GeneratedCodeAttribute("reflection-utils", "1.0.0")]
internal class Facebook.Reflection.ReflectionUtils : object {
    private static Object[] EmptyObjects;
    private static ReflectionUtils();
    public static Type GetTypeInfo(Type type);
    public static Attribute GetAttribute(MemberInfo info, Type type);
    public static Type GetGenericListElementType(Type type);
    public static Attribute GetAttribute(Type objectType, Type attributeType);
    public static Type[] GetGenericTypeArguments(Type type);
    public static bool IsTypeGeneric(Type type);
    public static bool IsTypeGenericeCollectionInterface(Type type);
    public static bool IsAssignableFrom(Type type1, Type type2);
    public static bool IsTypeDictionary(Type type);
    public static bool IsNullableType(Type type);
    public static object ToNullableType(object obj, Type nullableType);
    public static bool IsValueType(Type type);
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static ConstructorInfo GetConstructorInfo(Type type, Type[] argsType);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static IEnumerable`1<FieldInfo> GetFields(Type type);
    public static MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo);
    public static MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo);
    public static ConstructorDelegate GetContructor(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetContructor(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByExpression(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByExpression(Type type, Type[] argsType);
    public static GetDelegate GetGetMethod(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethod(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByExpression(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByExpression(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethod(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethod(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByExpression(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByExpression(FieldInfo fieldInfo);
    public static BinaryExpression Assign(Expression left, Expression right);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal static class Facebook.SimpleJson : object {
    private static int TOKEN_NONE;
    private static int TOKEN_CURLY_OPEN;
    private static int TOKEN_CURLY_CLOSE;
    private static int TOKEN_SQUARED_OPEN;
    private static int TOKEN_SQUARED_CLOSE;
    private static int TOKEN_COLON;
    private static int TOKEN_COMMA;
    private static int TOKEN_STRING;
    private static int TOKEN_NUMBER;
    private static int TOKEN_TRUE;
    private static int TOKEN_FALSE;
    private static int TOKEN_NULL;
    private static int BUILDER_CAPACITY;
    private static Char[] EscapeTable;
    private static Char[] EscapeCharacters;
    private static string EscapeCharactersString;
    private static IJsonSerializerStrategy _currentJsonSerializerStrategy;
    private static PocoJsonSerializerStrategy _pocoJsonSerializerStrategy;
    private static DataContractJsonSerializerStrategy _dataContractJsonSerializerStrategy;
    public static IJsonSerializerStrategy CurrentJsonSerializerStrategy { get; public set; }
    [EditorBrowsableAttribute("2")]
public static PocoJsonSerializerStrategy PocoJsonSerializerStrategy { get; }
    [EditorBrowsableAttribute("2")]
public static DataContractJsonSerializerStrategy DataContractJsonSerializerStrategy { get; }
    private static SimpleJson();
    public static object DeserializeObject(string json);
    public static bool TryDeserializeObject(string json, Object& obj);
    public static object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(string json, Type type);
    public static T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static T DeserializeObject(string json);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static string SerializeObject(object json);
    public static string EscapeToJavascriptString(string jsonString);
    private static IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success);
    private static JsonArray ParseArray(Char[] json, Int32& index, Boolean& success);
    private static object ParseValue(Char[] json, Int32& index, Boolean& success);
    private static string ParseString(Char[] json, Int32& index, Boolean& success);
    private static string ConvertFromUtf32(int utf32);
    private static object ParseNumber(Char[] json, Int32& index, Boolean& success);
    private static int GetLastIndexOfNumber(Char[] json, int index);
    private static void EatWhitespace(Char[] json, Int32& index);
    private static int LookAhead(Char[] json, int index);
    private static int NextToken(Char[] json, Int32& index);
    private static bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder);
    private static bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder);
    private static bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder);
    private static bool SerializeString(string aString, StringBuilder builder);
    private static bool SerializeNumber(object number, StringBuilder builder);
    private static bool IsNumeric(object value);
    public static IJsonSerializerStrategy get_CurrentJsonSerializerStrategy();
    public static void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value);
    public static PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy();
    public static DataContractJsonSerializerStrategy get_DataContractJsonSerializerStrategy();
}
[ExtensionAttribute]
internal static class Facebook.TaskExtensions : object {
    [ExtensionAttribute]
public static Task`1<T2> Then(Task`1<T1> first, Func`2<T1, T2> next);
}
[EditorBrowsableAttribute("1")]
public class Facebook.WebExceptionWrapper : Exception {
    private WebException _webException;
    private WebExceptionStatus _status;
    public WebException ActualWebException { get; }
    public WebExceptionStatus Status { get; }
    public WebExceptionWrapper(WebException webException);
    protected WebExceptionWrapper(SerializationInfo info, StreamingContext context);
    public virtual HttpWebResponseWrapper GetResponse();
    public virtual WebException get_ActualWebException();
    public virtual WebExceptionStatus get_Status();
}
internal static class GlobalAssemblyInfo : object {
    internal static string PublicKey;
}
