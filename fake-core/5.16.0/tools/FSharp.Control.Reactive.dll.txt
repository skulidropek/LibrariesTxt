[CompilationRepresentationAttribute("4")]
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.BuildersModule : object {
    [CompilationMappingAttribute("9")]
public static ObservableBuilder observe { get; }
    [CompilationMappingAttribute("9")]
public static RxQueryBuilder rxquery { get; }
    public static ObservableBuilder get_observe();
    public static RxQueryBuilder get_rxquery();
}
[CompilationMappingAttribute("3")]
public class FSharp.Control.Reactive.Disposable : object {
    public static CompositeDisposable Composite { get; }
    public static SerialDisposable Serial { get; }
    public static CompositeDisposable get_Composite();
    public static SerialDisposable get_Serial();
}
[CompilationRepresentationAttribute("4")]
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.DisposableModule : object {
    public static IDisposable create(FSharpFunc`2<Unit, Unit> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void ignoring(FSharpFunc`2<Unit, a> f, IDisposable d);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static b using(FSharpFunc`2<a, b> f, a d);
    public static void dispose(IDisposable x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable compose(IDisposable x, IDisposable d);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void setIndirectly(FSharpFunc`2<Unit, a> disposableFactory, SerialDisposable d);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void setInnerDisposalOf(SerialDisposable d, IDisposable x);
}
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.Disposables : object {
    public static IDisposable compose(a disposables);
}
[CompilationRepresentationAttribute("4")]
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.ObservableModule : object {
    public static IObserver`1<a> Observer.Create.Static(FSharpFunc`2<a, Unit> onNext);
    public static IObserver`1<a> Observer.Create.Static(FSharpFunc`2<a, Unit> onNext, FSharpFunc`2<Exception, Unit> onError);
    public static IObserver`1<a> Observer.Create.Static(FSharpFunc`2<a, Unit> onNext, FSharpFunc`2<Unit, Unit> onCompleted);
    public static IObserver`1<a> Observer.Create.Static(FSharpFunc`2<a, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, FSharpFunc`2<Unit, Unit> onCompleted);
    public static IObserver`1<object> Observer.get_Empty.Static();
    public static IObservable`1<T> Observable.Create.Static(FSharpFunc`2<IObserver`1<T>, FSharpFunc`2<Unit, Unit>> subscribe);
    public static IObservable`1<a> Observable.Create.Static(FSharpFunc`2<IObserver`1<a>, IDisposable> subscribe);
    public static IObservable`1<T> Observable.CreateAsync.Static(FSharpFunc`2<IObserver`1<T>, FSharpAsync`1<IDisposable>> subscribe);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable IObservable`1.Subscribe(IObservable`1<T> this, FSharpFunc`2<T, Unit> onNext);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable IObservable`1.Subscribe(IObservable`1<T> this, FSharpFunc`2<T, Unit> onNext, FSharpFunc`2<Exception, Unit> onError);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable IObservable`1.Subscribe(IObservable`1<T> this, FSharpFunc`2<T, Unit> onNext, FSharpFunc`2<Unit, Unit> onCompleted);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable IObservable`1.Subscribe(IObservable`1<T> this, FSharpFunc`2<T, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, FSharpFunc`2<Unit, Unit> onCompleted);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> aggregate(FSharpFunc`2<a, FSharpFunc`2<a, a>> accumulator, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> all(FSharpFunc`2<a, bool> pred, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> amb(IObservable`1<a> second, IObservable`1<a> first);
    public static IObservable`1<T> ambSeq(IEnumerable`1<IObservable`1<T>> source);
    public static IObservable`1<T> ambArray(IObservable`1[] source);
    public static IObservable`1<bool> any(IObservable`1<Source> source);
    public static IObservable`1<Source> asObservable(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<TNext> bind(FSharpFunc`2<T, IObservable`1<TNext>> f, IObservable`1<T> m);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> apply(IObservable`1<FSharpFunc`2<a, b>> f, IObservable`1<a> m);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Pattern`2<b, a> both(IObservable`1<a> second, IObservable`1<b> first);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> buffer(IObservable`1<BufferClosing> bufferClosingSelector, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<T>> bufferBounded(IObservable`1<BufferClosing> boundaries, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferCount(int count, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferCountSkip(int count, int skip, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferSpan(TimeSpan timeSpan, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferSpanOn(IScheduler scheduler, TimeSpan timeSpan, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferSpanCount(TimeSpan timeSpan, int count, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferSpanCountOn(IScheduler scheduler, TimeSpan timeSpan, int count, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferFork(IObservable`1<BufferOpening> bufferOpenings, FSharpFunc`2<BufferOpening, IObservable`1<T>> bufferClosingSelector, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferSpanShift(TimeSpan timeSpan, TimeSpan timeShift, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> bufferSpanShiftOn(IScheduler scheduler, TimeSpan timeSpan, TimeSpan timeShift, IObservable`1<a> source);
    public static IObservable`1<CastType> cast(IObservable`1<object> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> case(FSharpFunc`2<Unit, a> selector, IDictionary`2<a, IObservable`1<b>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> caseDefault(FSharpFunc`2<Unit, Value> selector, IObservable`1<Result> defaulSource, IDictionary`2<Value, IObservable`1<Result>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> caseOn(IScheduler scheduler, Func`1<a> selector, IDictionary`2<a, IObservable`1<b>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> catch(IObservable`1<T> second, IObservable`1<T> first);
    public static IObservable`1<FSharpOption`1<a>> catchOption(IObservable`1<a> source);
    internal static IObservable`1<FSharpResult`2<d, b>> error@323(FSharpFunc`2<a, IObservable`1<b>> handler, a ex);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<FSharpResult`2<c, b>> catchResult(FSharpFunc`2<a, IObservable`1<b>> handler, IObservable`1<c> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> catchWith(FSharpFunc`2<a, IObservable`1<b>> handler, IObservable`1<b> source);
    public static IObservable`1<T> catchSeq(IEnumerable`1<IObservable`1<T>> sources);
    public static IObservable`1<T> catchArray(IObservable`1[] sources);
    public static IEnumerable`1<IList`1<Source>> chunkify(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> collect(FSharpFunc`2<Source, IObservable`1<Result>> map, IEnumerable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IEnumerable`1<a> collectMerge(FSharpFunc`2<Unit, a> newCollector, FSharpFunc`2<a, FSharpFunc`2<b, a>> merge, IObservable`1<b> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IEnumerable`1<a> collectMergeInit(FSharpFunc`2<Unit, a> getInitialCollector, FSharpFunc`2<a, FSharpFunc`2<b, a>> merge, FSharpFunc`2<a, a> getNewCollector, IObservable`1<b> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Tuple`2<T1, T2>> combineLatest(IObservable`1<T1> source1, IObservable`1<T2> source2);
    public static IObservable`1<IList`1<T>> combineLatestSeq(IEnumerable`1<IObservable`1<T>> source);
    public static IObservable`1<IList`1<T>> combineLatestArray(IObservable`1[] source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> combineLatestSeqMap(FSharpFunc`2<IList`1<T>, Result> map, IEnumerable`1<IObservable`1<T>> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> concat(IObservable`1<T> second, IObservable`1<T> first);
    public static IObservable`1<T> concatSeq(IEnumerable`1<IObservable`1<T>> sources);
    public static IObservable`1<T> concatArray(IObservable`1[] sources);
    public static IObservable`1<T> concatInner(IObservable`1<IObservable`1<T>> sources);
    public static IObservable`1<T> concatTasks(IObservable`1<Task`1<T>> sources);
    public static IDisposable connect(IConnectableObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> contains(a value, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> containsCompare(IEqualityComparer`1<a> comparer, a value, IObservable`1<a> source);
    public static IObservable`1<int> count(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<int> countSatisfy(FSharpFunc`2<a, bool> predicate, IObservable`1<a> source);
    public static IObservable`1<Source> defaultIfEmpty(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> defaultIfEmptyIs(Source defaultValue, IObservable`1<Source> source);
    public static IObservable`1<Result> defer(FSharpFunc`2<Unit, IObservable`1<Result>> observableFactory);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> delay(TimeSpan dueTime, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> delayOn(IScheduler scheduler, TimeSpan dueTime, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> delayUntil(IObservable`1<Source> source, DateTimeOffset dueTime);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> delayUntilOn(IScheduler scheduler, DateTimeOffset dueTime, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> delayMap(FSharpFunc`2<Source, IObservable`1<TDelay>> delayDurationSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> delayMapFilter(FSharpFunc`2<Source, IObservable`1<TDelay>> delayDurationSelector, IObservable`1<TDelay> subscriptionDelay, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> delaySubscription(TimeSpan dueTime, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> delaySubscriptionOn(IScheduler scheduler, TimeSpan dueTime, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> delaySubscriptionUntil(DateTimeOffset dueTime, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> delaySubscriptionUntilOn(IScheduler scheduler, DateTimeOffset dueTime, IObservable`1<a> source);
    public static IObservable`1<a> dematerialize(IObservable`1<Notification`1<a>> source);
    public static IObservable`1<Source> distinct(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> distinctKey(FSharpFunc`2<Source, Key> keySelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> distinctCompare(IEqualityComparer`1<Source> comparer, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> distinctKeyCompare(FSharpFunc`2<Source, Key> keySelector, IEqualityComparer`1<Key> comparer, IObservable`1<Source> source);
    public static IObservable`1<Source> distinctUntilChanged(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> distinctUntilChangedKey(FSharpFunc`2<Source, Key> keySelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> distinctUntilChangedCompare(IEqualityComparer`1<Source> comparer, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> distinctUntilChangedKeyCompare(FSharpFunc`2<Source, Key> keySelector, IEqualityComparer`1<Key> comparer, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> elementAt(int index, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> elementAtOrDefault(int index, IObservable`1<Source> source);
    public static IObservable`1<T> empty();
    public static IObservable`1<T> emptyWitness(T witness);
    public static IObservable`1<a> emptyCompleted(IScheduler scheduler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> emptyCompletedWitness(IScheduler scheduler, a witness);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> equals(IObservable`1<Source> first, IObservable`1<Source> second);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> equalsComparer(IEqualityComparer`1<Source> comparer, IObservable`1<Source> first, IObservable`1<Source> second);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> equalsSeq(IObservable`1<Source> first, IEnumerable`1<Source> second);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> equalsSeqComparer(IEqualityComparer`1<Source> comparer, IObservable`1<Source> first, IEnumerable`1<Source> second);
    public static IObservable`1<a> error(Exception e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<bool> exists(FSharpFunc`2<a, bool> predicate, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> filter(FSharpFunc`2<T, bool> predicate, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> filteri(FSharpFunc`2<int, FSharpFunc`2<T, bool>> predicate, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> finallyDo(FSharpFunc`2<Unit, Unit> finallyAction, IObservable`1<a> source);
    public static IObservable`1<T> first(IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> firstIf(FSharpFunc`2<T, bool> predicate, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<R> flatmap(FSharpFunc`2<S, IObservable`1<R>> map, IObservable`1<S> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Other> flatmapOther(IObservable`1<Other> other, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> flatmapSeq(FSharpFunc`2<Source, IEnumerable`1<Result>> map, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> flatmapTask(FSharpFunc`2<Source, Task`1<Result>> map, IObservable`1<Source> source);
    public static IObservable`1<a> ofAsync(FSharpAsync`1<a> asyncOperation);
    public static FSharpFunc`2<a, IObservable`1<b>> liftAsync(FSharpFunc`2<a, FSharpAsync`1<b>> asyncOperation);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> flatmapAsync(FSharpFunc`2<Source, FSharpAsync`1<a>> asyncOperation, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> fold(FSharpFunc`2<a, FSharpFunc`2<b, a>> accumulator, a init, IObservable`1<b> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> foldMap(FSharpFunc`2<a, FSharpFunc`2<b, a>> accumulator, a init, FSharpFunc`2<a, c> map, IObservable`1<b> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Unit> fromEvent(FSharpFunc`2<Delegate, Unit> addHandler, FSharpFunc`2<Delegate, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Unit> fromEventOn(IScheduler scheduler, FSharpFunc`2<Action, Unit> addHandler, FSharpFunc`2<Action, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<TEventArgs> fromEventGeneric(FSharpFunc`2<FSharpFunc`2<TEventArgs, Unit>, Unit> addHandler, FSharpFunc`2<FSharpFunc`2<TEventArgs, Unit>, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> fromEventGenericOn(IScheduler scheduler, FSharpFunc`2<FSharpFunc`2<TEventArgs, Unit>, Unit> addHandler, FSharpFunc`2<FSharpFunc`2<TEventArgs, Unit>, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<EventArgs> fromEventConversion(FSharpFunc`2<FSharpFunc`2<EventArgs, Unit>, Delegate> conversion, FSharpFunc`2<Delegate, Unit> addHandler, FSharpFunc`2<Delegate, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<EventPattern`1<TEventArgs>> fromEventConversionOn(IScheduler scheduler, FSharpFunc`2<EventHandler`1<TEventArgs>, TDelegate> conversion, FSharpFunc`2<TDelegate, Unit> addHandler, FSharpFunc`2<TDelegate, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<object> fromEventHandler(FSharpFunc`2<EventHandler`1<object>, Unit> addHandler, FSharpFunc`2<EventHandler`1<object>, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<EventPattern`1<EventArgs>> fromEventHandlerOn(IScheduler scheduler, FSharpFunc`2<EventHandler`1<EventArgs>, Unit> addHandler, FSharpFunc`2<EventHandler`1<EventArgs>, Unit> removeHandler);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<EventPattern`1<object>> fromEventPattern(string eventName, object target);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> generate(State initialState, FSharpFunc`2<State, bool> condition, FSharpFunc`2<State, State> iterator, FSharpFunc`2<State, Result> resultMap);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<TResult> generateOn(IScheduler scheduler, State initialState, FSharpFunc`2<State, bool> condition, FSharpFunc`2<State, State> iterator, FSharpFunc`2<State, TResult> resultMap);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> generateTimed(State initialState, FSharpFunc`2<State, bool> condition, FSharpFunc`2<State, State> iterate, FSharpFunc`2<State, Result> resultMap, FSharpFunc`2<State, DateTimeOffset> timeSelector);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> generateTimedOn(IScheduler scheduler, State initialState, FSharpFunc`2<State, bool> condition, FSharpFunc`2<State, State> iterate, FSharpFunc`2<State, Result> resultMap, FSharpFunc`2<State, DateTimeOffset> timeSelector);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> generateTimeSpan(State initialState, FSharpFunc`2<State, bool> condition, FSharpFunc`2<State, State> iterate, FSharpFunc`2<State, Result> resultMap, FSharpFunc`2<State, TimeSpan> genTime);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> generateTimeSpanOn(IScheduler scheduler, State initialState, FSharpFunc`2<State, bool> condition, FSharpFunc`2<State, State> iterate, FSharpFunc`2<State, Result> resultMap, FSharpFunc`2<State, TimeSpan> genTime);
    public static IEnumerator`1<a> getEnumerator(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Source>> groupBy(FSharpFunc`2<Source, Key> keySelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<b, a>> groupByCompare(FSharpFunc`2<a, b> keySelector, IEqualityComparer`1<b> comparer, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Element>> groupByElement(FSharpFunc`2<Source, Key> keySelector, FSharpFunc`2<Source, Element> elementSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Element>> groupByCapacityElement(FSharpFunc`2<Source, Key> keySelector, int capacity, FSharpFunc`2<Source, Element> elementSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Element>> groupByCompareElement(FSharpFunc`2<Source, Key> keySelector, IEqualityComparer`1<Key> comparer, FSharpFunc`2<Source, Element> elementSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Source>> groupByUntil(FSharpFunc`2<Source, Key> keySelector, FSharpFunc`2<IGroupedObservable`2<Key, Source>, IObservable`1<TDuration>> durationSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Source>> groupByComparerUntil(FSharpFunc`2<Source, Key> keySelector, IEqualityComparer`1<Key> comparer, FSharpFunc`2<IGroupedObservable`2<Key, Source>, IObservable`1<TDuration>> durationSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Element>> groupByElementUntil(FSharpFunc`2<Source, Key> keySelector, FSharpFunc`2<Source, Element> elementSelector, FSharpFunc`2<IGroupedObservable`2<Key, Element>, IObservable`1<TDuration>> durationSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IGroupedObservable`2<Key, Element>> groupByComparerElementUntil(FSharpFunc`2<Source, Key> keySelector, IEqualityComparer`1<Key> comparer, FSharpFunc`2<Source, Element> elementSelector, FSharpFunc`2<IGroupedObservable`2<Key, Element>, IObservable`1<TDuration>> durationSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> groupJoin(IObservable`1<Left> left, IObservable`1<Right> right, FSharpFunc`2<Left, IObservable`1<a>> leftselect, FSharpFunc`2<Right, IObservable`1<b>> rightselect, FSharpFunc`2<Left, FSharpFunc`2<IObservable`1<Right>, Result>> resultselect);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Args> guard(FSharpFunc`2<Unit, Unit> f, IObservable`1<Args> source);
    public static IObservable`1<a> head(IObservable`1<a> obs);
    public static IObservable`1<long> interval(TimeSpan period);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<long> intervalOn(IScheduler scheduler, TimeSpan period);
    public static IObservable`1<bool> isEmpty(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> iter(FSharpFunc`2<Source, Unit> onNext, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> iterEnd(FSharpFunc`2<Source, Unit> onNext, FSharpFunc`2<Unit, Unit> onCompleted, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> iterError(FSharpFunc`2<Source, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> iterErrorEnd(FSharpFunc`2<Source, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, FSharpFunc`2<Unit, Unit> onCompleted, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> iterObserver(IObserver`1<Source> observer, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> join(IObservable`1<a> right, FSharpFunc`2<b, FSharpFunc`2<a, c>> f, IObservable`1<b> left);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<e> joinMap(IObservable`1<a> right, FSharpFunc`2<b, IObservable`1<c>> fLeft, FSharpFunc`2<a, IObservable`1<d>> fRight, FSharpFunc`2<b, FSharpFunc`2<a, e>> fResult, IObservable`1<b> left);
    public static IObservable`1<T> joinWhen(IEnumerable`1<Plan`1<T>> plans);
    public static IObservable`1<Source> last(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> lastIf(FSharpFunc`2<Source, bool> predicate, IObservable`1<Source> source);
    public static IEnumerable`1<a> latest(IObservable`1<a> source);
    public static IObservable`1<long> longCount(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<long> longCountSatisfy(FSharpFunc`2<a, bool> predicate, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> map(FSharpFunc`2<a, b> f, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> mapi(FSharpFunc`2<int, FSharpFunc`2<Source, Result>> f, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> map2(IObservable`1<FSharpFunc`2<a, FSharpFunc`2<b, c>>> f, IObservable`1<a> a, IObservable`1<b> b);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Tuple`2<FSharpList`1<TResult>, TState>> mapFold(FSharpFunc`2<TState, FSharpFunc`2<T, Tuple`2<TResult, TState>>> f, TState init, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> mapTo(a x, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> mapToLazy(Lazy`1<T> xLazy, IObservable`1<T> source);
    public static IObservable`1<Notification`1<a>> materialize(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> merge(IObservable`1<T> second, IObservable`1<T> first);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> mergeOn(IScheduler scheduler, IObservable`1<T> second, IObservable`1<T> first);
    public static IObservable`1<T> mergeArray(IObservable`1[] sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> mergeArrayOn(IScheduler scheduler, IObservable`1[] sources);
    public static IObservable`1<T> mergeInner(IObservable`1<IObservable`1<T>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> mergeInnerMax(int maxConcurrent, IObservable`1<IObservable`1<T>> sources);
    public static IObservable`1<T> mergeSeq(IEnumerable`1<IObservable`1<T>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> mergeSeqOn(IScheduler scheduler, IEnumerable`1<IObservable`1<T>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> mergeSeqMax(int maxConcurrent, IEnumerable`1<IObservable`1<T>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> mergeSeqMaxOn(IScheduler scheduler, int maxConcurrent, IEnumerable`1<IObservable`1<T>> sources);
    public static IObservable`1<T> mergeTasks(IObservable`1<Task`1<T>> sources);
    public static IObservable`1<T> maxOf(IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IEnumerable`1<a> mostRecent(a initialVal, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<b> multicast(ISubject`2<a, b> subject, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> multicastMap(FSharpFunc`2<Unit, ISubject`2<a, b>> subjectSelector, FSharpFunc`2<IObservable`1<b>, IObservable`1<c>> selector, IObservable`1<a> source);
    public static IObservable`1<a> infinite();
    public static IObservable`1<a> neverWitness(a witness);
    public static IEnumerable`1<a> next(IObservable`1<a> source);
    public static IObservable`1<Item> ofSeq(IEnumerable`1<Item> items);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Item> ofSeqOn(IScheduler scheduler, IEnumerable`1<Item> items);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> observeOn(IScheduler scheduler, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> observeOnContext(SynchronizationContext context, IObservable`1<a> source);
    public static IObservable`1<a> ofType(IObservable`1<object> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> onErrorConcat(IObservable`1<Source> second, IObservable`1<Source> first);
    public static IObservable`1<Source> onErrorConcatArray(IObservable`1[] sources);
    public static IObservable`1<Source> onErrorConcatSeq(IEnumerable`1<IObservable`1<Source>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> perform(FSharpFunc`2<a, Unit> f, IObservable`1<a> source);
    internal static Action`1<b> onNext@1386(string prefix, FSharpFunc`2<string, Unit> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> logTo(string prefix, FSharpFunc`2<string, Unit> f, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> log(string prefix, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> performFinally(FSharpFunc`2<Unit, Unit> f, IObservable`1<a> source);
    public static IConnectableObservable`1<a> publish(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<Source> publishInitial(Source initial, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> publishMap(FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> publishInitialMap(Source initial, FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, IObservable`1<Source> source);
    public static IConnectableObservable`1<a> publishLast(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> publishLastMap(FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<int> range(int start, int count);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<int> rangeOn(IScheduler scheduler, int start, int count);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> reduce(FSharpFunc`2<a, FSharpFunc`2<a, a>> f, IObservable`1<a> source);
    public static IObservable`1<a> refCount(IConnectableObservable`1<a> source);
    public static IObservable`1<Source> repeat(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> repeatCount(int repeatCount, Result value);
    public static IObservable`1<Result> repeatValue(Result value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> repeatWhile(FSharpFunc`2<Unit, bool> condition, IObservable`1<Source> source);
    public static IConnectableObservable`1<Source> replay(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<a> replayOn(IScheduler sch, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<Source> replayBuffer(int bufferSize, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> replayMap(FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<Source> replayWindow(TimeSpan window, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<Source> replayWindowOn(IScheduler scheduler, TimeSpan window, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<Source> replayBufferWindow(int bufferSize, TimeSpan window, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IConnectableObservable`1<Source> replayBufferWindowOn(IScheduler scheduler, int bufferSize, TimeSpan window, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> replayMapBuffer(FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, int bufferSize, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> replayMapWindow(FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, TimeSpan window, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> replayMapWindowOn(IScheduler scheduler, FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, TimeSpan window, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> replayMapBufferWindow(FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, int bufferSize, TimeSpan window, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> replayMapBufferWindowOn(IScheduler scheduler, FSharpFunc`2<IObservable`1<Source>, IObservable`1<Result>> map, int bufferSize, TimeSpan window, IObservable`1<Source> source);
    public static IObservable`1<Source> retry(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> retryCount(int count, IObservable`1<Source> source);
    public static IObservable`1<a> result(a x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> sample(TimeSpan interval, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> sampleOn(IScheduler scheduler, TimeSpan interval, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> sampleWith(IObservable`1<Sample> sampler, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> scan(FSharpFunc`2<a, FSharpFunc`2<a, a>> accumulator, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<TAccumulate> scanInit(TAccumulate init, FSharpFunc`2<TAccumulate, FSharpFunc`2<Source, TAccumulate>> accumulator, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> selectIf(FSharpFunc`2<Unit, bool> condition, IObservable`1<a> thenSource);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> selectIfOn(IScheduler scheduler, FSharpFunc`2<Unit, bool> condition, IObservable`1<a> thenSource);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> selectIfElse(FSharpFunc`2<Unit, bool> condition, IObservable`1<Result> elseSource, IObservable`1<Result> thenSource);
    public static IObservable`1<Result> single(Result value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> singleOn(IScheduler scheduler, a value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skip(int count, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skipSpan(TimeSpan duration, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> skipSpanOn(IScheduler scheduler, TimeSpan duration, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skipLast(int count, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skipLastSpan(TimeSpan duration, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> skipLastSpanOn(IScheduler scheduler, TimeSpan duration, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skipUntil(DateTimeOffset startTime, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> skipUntilOn(IScheduler scheduler, DateTimeOffset startTime, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skipUntilOther(IObservable`1<Other> other, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skipWhile(FSharpFunc`2<Source, bool> predicate, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> skipWhilei(FSharpFunc`2<Source, FSharpFunc`2<int, bool>> predicate, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> startWith(a values, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<T> startWithOn(IScheduler scheduler, a values, IObservable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribe(FSharpFunc`2<T, Unit> onNext, IObservable`1<T> observable);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeWithError(FSharpFunc`2<T, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, IObservable`1<T> observable);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeWithCompletion(FSharpFunc`2<T, Unit> onNext, FSharpFunc`2<Unit, Unit> onCompleted, IObservable`1<T> observable);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeWithCallbacks(FSharpFunc`2<T, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, FSharpFunc`2<Unit, Unit> onCompleted, IObservable`1<T> observable);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeObserver(IObserver`1<T> observer, IObservable`1<T> observable);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> subscribeOn(IScheduler scheduler, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> subscribeOnContext(SynchronizationContext context, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeSafe(FSharpFunc`2<a, Unit> onNext, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeSafeWithError(FSharpFunc`2<a, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeSafeWithCompletion(FSharpFunc`2<a, Unit> onNext, b onCompleted, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeSafeObserver(IObserver`1<a> observer, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable subscribeSafeWithCallbacks(FSharpFunc`2<a, Unit> onNext, FSharpFunc`2<Exception, Unit> onError, FSharpFunc`2<Unit, Unit> onCompleted, IObservable`1<a> source);
    public static IObservable`1<Source> switch(IObservable`1<IObservable`1<Source>> sources);
    public static IObservable`1<Source> switchTask(IObservable`1<Task`1<Source>> sources);
    public static IObservable`1<a> switchAsync(IObservable`1<FSharpAsync`1<a>> sources);
    public static IObservable`1<Source> synchronize(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> synchronizeGate(object gate, IObservable`1<Source> source);
    public static IObservable`1<a> tail(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> take(int n, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> takeOn(IScheduler scheduler, int n, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> takeSpan(TimeSpan duration, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> takeSpanOn(IScheduler scheduler, TimeSpan duration, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> takeLast(int count, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> takeLastOn(IScheduler scheduler, int count, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> takeLastSpan(TimeSpan duration, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> takeLastSpanOn(IScheduler scheduler, TimeSpan duration, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<Source>> takeLastBuffer(TimeSpan duration, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<a>> takeLastBufferOn(IScheduler scheduler, TimeSpan duration, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IList`1<Source>> takeLastBufferCount(int count, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> takeUntilOther(IObservable`1<Other> other, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> takeUntilTime(DateTimeOffset endtime, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> takeUntilTimeOn(IScheduler scheduler, DateTimeOffset endtime, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> takeWhile(FSharpFunc`2<Source, bool> predicate, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> takeWhilei(FSharpFunc`2<Source, FSharpFunc`2<int, bool>> predicate, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> throttle(TimeSpan dueTime, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> throttleOn(IScheduler scheduler, TimeSpan dueTime, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> throttleComputed(FSharpFunc`2<Source, IObservable`1<Throttle>> throttleDurationSelector, IObservable`1<Source> source);
    public static IObservable`1<Result> throw(Exception except);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> throwWitness(a witness, Exception ex);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> throwOn(IScheduler scheduler, Exception ex);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> throwWitnessOn(a scheduler, IScheduler witeness, Exception ex);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Plan`1<Result> thenMap(FSharpFunc`2<Source, Result> map, IObservable`1<Source> source);
    public static IObservable`1<TimeInterval`1<Source>> timeInterval(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<TimeInterval`1<a>> timeIntervalOn(IScheduler scheduler, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> timeout(DateTimeOffset timeout, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> timeoutOn(IScheduler scheduler, DateTimeOffset timeout, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> timeoutOther(DateTimeOffset timeout, IObservable`1<Source> other, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> timeoutOtherOn(IScheduler scheduler, DateTimeOffset timeout, IObservable`1<a> other, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> timeoutSpan(TimeSpan timeout, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> timeoutSpanOn(IScheduler scheduler, TimeSpan timeout, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> timeoutSpanOther(TimeSpan timeout, IObservable`1<Source> other, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> timeoutSpanOtherOn(IScheduler scheduler, TimeSpan timeout, IObservable`1<a> other, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> timeoutDuration(FSharpFunc`2<Source, IObservable`1<Timeout>> durationSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> timeout2Duration(IObservable`1<Timeout> timeout, FSharpFunc`2<Source, IObservable`1<Timeout>> durationSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Source> timeout2DurationOther(IObservable`1<Timeout> timeout, FSharpFunc`2<Source, IObservable`1<Timeout>> durationSelector, IObservable`1<Source> other, IObservable`1<Source> source);
    public static IObservable`1<long> timer(DateTimeOffset dueTime);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<long> timerOn(IScheduler scheduler, DateTimeOffset dueTime);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<long> timerPeriod(DateTimeOffset dueTime, TimeSpan period);
    public static IObservable`1<long> timerSpan(TimeSpan dueTime);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<long> timerSpanOn(IScheduler scheduler, TimeSpan dueTime);
    public static IObservable`1<long> timerSpanPeriod(TimeSpan dueTime, TimeSpan period);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<long> timerSpanPeriodOn(IScheduler scheduler, TimeSpan dueTime, TimeSpan period);
    public static IObservable`1<Timestamped`1<Source>> timestamp(IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Timestamped`1<Source>> timestampOn(IScheduler scheduler, IObservable`1<Source> source);
    public static IEnumerable`1<T> toEnumerable(IObservable`1<T> source);
    public static IObservable`1<a[]> toArray(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IDictionary`2<b, a>> toDictionary(FSharpFunc`2<a, b> keySelector, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IDictionary`2<Key, Source>> toDictionaryComparer(FSharpFunc`2<Source, Key> keySelector, Key comparer, Source source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IDictionary`2<Key, Elm>> toDictionaryElements(FSharpFunc`2<Source, Key> keySelector, FSharpFunc`2<Source, Elm> elementSelector, Source source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IDictionary`2<Key, Elm>> toDictionaryCompareElements(FSharpFunc`2<Source, Key> keySelector, FSharpFunc`2<Source, Elm> elementSelector, Key comparer, Source source);
    public static IEventSource`1<Unit> toEvent(IObservable`1<Unit> source);
    public static IEventSource`1<Source> toEventType(IObservable`1<Source> source);
    public static IObservable`1<IList`1<a>> toList(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<ILookup`2<Key, Source>> toLookup(FSharpFunc`2<Source, Key> keySelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<ILookup`2<Key, Source>> toLookupCompare(FSharpFunc`2<Source, Key> keySelector, IEqualityComparer`1<Key> comparer, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<ILookup`2<Key, Element>> toLookupElement(FSharpFunc`2<Source, Key> keySelector, FSharpFunc`2<Source, Element> elementSelector, IEqualityComparer`1<Key> comparer, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<ILookup`2<Key, Element>> toLookupCompareElement(FSharpFunc`2<Source, Key> keySelector, FSharpFunc`2<Source, Element> elementSelector, IObservable`1<Source> source);
    public static IObservable`1<T> toObservable(IEnumerable`1<T> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> using(FSharpFunc`2<Unit, TResource> resourceFactory, FSharpFunc`2<TResource, IObservable`1<Result>> observableFactory);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> usingAsync(FSharpFunc`2<CancellationToken, FSharpAsync`1<a>> resourceFactory, FSharpFunc`2<a, FSharpFunc`2<CancellationToken, FSharpAsync`1<IObservable`1<b>>>> observableFactory);
    public static a wait(IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> whileLoop(FSharpFunc`2<Unit, bool> condition, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> window(FSharpFunc`2<Unit, IObservable`1<WindowClosing>> windowClosingSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> windowTimeSpan(TimeSpan timeSpan, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<a>> windowTimeSpanOn(IScheduler scheduler, TimeSpan timeSpan, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> windowOpenClose(IObservable`1<WinOpen> windowOpenings, FSharpFunc`2<WinOpen, IObservable`1<WinClose>> windowClosingSelector, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> windowTimeShift(TimeSpan timeSpan, TimeSpan timeShift, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<a>> windowTimeShiftOn(IScheduler scheduler, TimeSpan timeSpan, TimeSpan timeShift, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> windowBounded(IObservable`1<WindowBoundary> windowBoundaries, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> windowCountSkip(int count, int skip, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> windowCount(int count, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<Source>> windowTimeCount(TimeSpan timeSpan, int count, IObservable`1<Source> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<IObservable`1<a>> windowTimeCountOn(IScheduler scheduler, TimeSpan timeSpan, int count, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> withLatestFrom(FSharpFunc`2<a, FSharpFunc`2<b, c>> resultSelector, IObservable`1<b> second, IObservable`1<a> first);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Tuple`2<Source1, Source2>> zip(IObservable`1<Source1> first, IObservable`1<Source2> second);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Tuple`3<Source1, Source2, Source3>> zip3(IObservable`1<Source1> first, IObservable`1<Source2> second, IObservable`1<Source3> third);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> zipWith(FSharpFunc`2<Source1, FSharpFunc`2<Source2, Result>> resultSelector, IObservable`1<Source1> first, IObservable`1<Source2> second);
    public static IObservable`1<IList`1<Source>> zipSeq(IEnumerable`1<IObservable`1<Source>> sources);
    public static IObservable`1<IList`1<Source>> zipArray(IObservable`1[] sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<R> zipSeqMap(FSharpFunc`2<IList`1<S>, R> resultSelector, IEnumerable`1<IObservable`1<S>> sources);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<Result> zipWithSeq(FSharpFunc`2<Source1, FSharpFunc`2<Source2, Result>> resultSelector, IEnumerable`1<Source2> second, IObservable`1<Source1> first);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<FSharpResult`2<a, b>> pollOn(IScheduler sch, DateTimeOffset period, IObservable`1<FSharpResult`2<a, b>> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<FSharpResult`2<a, b>> poll(DateTimeOffset period, IObservable`1<FSharpResult`2<a, b>> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> choose(FSharpFunc`2<a, FSharpOption`1<b>> f, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> switchMap(FSharpFunc`2<a, b> f, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> exhaustMap(FSharpFunc`2<a, b> f, IObservable`1<a> source);
    internal static IDisposable subscribeSource@2421(FSharpFunc`2<Exception, bool> callOnError, FSharpFunc`2<Unit, a> sourceFactory, IObserver`1<a> o, FSharpFunc`2<Unit, Unit> self);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IObservable`1<a> serveInternal(IScheduler sch, int max, FSharpFunc`2<Exception, bool> callOnError, FSharpFunc`2<Unit, a> sourceFactory);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<c> serveGateCustomOn(IScheduler sch, a gate, int max, FSharpFunc`2<Exception, bool> callOnError, FSharpFunc`2<Unit, b> sourceFactory);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> serveCustomOn(IScheduler sch, int max, FSharpFunc`2<Exception, bool> callOnError, FSharpFunc`2<Unit, a> sourceFactory);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> serveOn(IScheduler sch, int max, FSharpFunc`2<Unit, a> sourceFactory);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> serve(int max, FSharpFunc`2<Unit, a> sourceFactory);
    [CompilerGeneratedAttribute]
internal static void f@1(a value, FSharpRef`1<a> lastSkipped, FSharpRef`1<bool> hasSkipped, FSharpRef`1<bool> consuming, Unit unitVar0);
    [CompilerGeneratedAttribute]
internal static Tuple`2<bool, bool> f@1-1(FSharpRef`1<a> lastSkipped, FSharpRef`1<bool> hasSkipped, FSharpRef`1<bool> consuming, FSharpRef`1<bool> stopped, FSharpRef`1<a> additionalData, Unit unitVar0);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> consumeMap(FSharpFunc`2<a, IObservable`1<b>> f, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<a> consume(IObservable`1<a> consumer, IObservable`1<b> source);
    internal static void onNext@2646-6(FSharpFunc`2<a, FSharpOption`1<b>> f, IObserver`1<b> o, a x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> consumeNextOn(IScheduler sch, FSharpFunc`2<a, FSharpOption`1<b>> f, IObservable`1<a> source);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IObservable`1<b> consumeNext(FSharpFunc`2<a, FSharpOption`1<b>> f, IObservable`1<a> source);
}
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.Schedule : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable multiple(FSharpList`1<FSharpFunc`2<IScheduler, IDisposable>> fs, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable action(FSharpFunc`2<Unit, Unit> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionOffset(DateTimeOffset offset, FSharpFunc`2<Unit, Unit> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionLong(FSharpFunc`2<ICancelable, Unit> f, ISchedulerLongRunning sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionLongState(a state, FSharpFunc`2<a, FSharpFunc`2<ICancelable, b>> f, ISchedulerLongRunning sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable func(a state, FSharpFunc`2<IScheduler, FSharpFunc`2<a, IDisposable>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable funcSpan(a state, TimeSpan dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<a, IDisposable>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable funcOffset(a state, DateTimeOffset dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<a, IDisposable>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionRec(FSharpFunc`2<FSharpFunc`2<Unit, Unit>, Unit> ff, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionSpanRec(TimeSpan time, FSharpFunc`2<TimeSpan, FSharpFunc`2<FSharpFunc`2<TimeSpan, Unit>, Unit>> ff, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionAccRec(state state, FSharpFunc`2<state, FSharpFunc`2<FSharpFunc`2<state, Unit>, Unit>> ff, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionAccSpanRec(state state, TimeSpan dueTime, FSharpFunc`2<state, FSharpFunc`2<FSharpFunc`2<state, FSharpFunc`2<TimeSpan, Unit>>, Unit>> ff, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionOffsetRec(DateTimeOffset dueTime, FSharpFunc`2<FSharpFunc`2<Unit, Unit>, Unit> ff, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable actionAccOffsetRec(state state, DateTimeOffset dueTime, FSharpFunc`2<state, FSharpFunc`2<FSharpFunc`2<state, FSharpFunc`2<DateTimeOffset, Unit>>, Unit>> ff, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable periodicAcc(a state, TimeSpan period, FSharpFunc`2<a, a> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable periodicAccAction(a state, TimeSpan period, FSharpFunc`2<a, Unit> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable periodicAction(TimeSpan period, FSharpFunc`2<Unit, Unit> f, IScheduler sch);
    public static IScheduler disableOptimizations(IScheduler arg00);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IScheduler disableOptimizationsTypes(FSharpList`1<Type> optimizationInterfaces, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IScheduler catch(FSharpFunc`2<a, bool> f, IScheduler sch);
    public static FSharpAsync`1<Unit> asAsync(SchedulerOperation cta);
    public static FSharpAsync`1<Unit> yield_(IScheduler x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<Unit> yieldCancel(CancellationToken ct, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<Unit> sleep(TimeSpan dueTime, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<Unit> sleepCancel(TimeSpan dueTime, CancellationToken ct, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<Unit> sleepOffset(DateTimeOffset dueTime, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<Unit> sleepOffsetCancel(DateTimeOffset dueTime, CancellationToken ct, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Task`1<T> asTask(CancellationToken ct, FSharpAsync`1<T> async);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable async(FSharpFunc`2<IScheduler, FSharpFunc`2<CancellationToken, FSharpAsync`1<a>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncResult(FSharpFunc`2<IScheduler, FSharpFunc`2<CancellationToken, FSharpAsync`1<IDisposable>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncAccUnit(state state, FSharpFunc`2<IScheduler, FSharpFunc`2<state, FSharpFunc`2<CancellationToken, FSharpAsync`1<a>>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncAccResult(state state, FSharpFunc`2<IScheduler, FSharpFunc`2<state, FSharpFunc`2<CancellationToken, FSharpAsync`1<IDisposable>>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncSpanUnit(TimeSpan dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<CancellationToken, FSharpAsync`1<a>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncSpanResult(TimeSpan dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<CancellationToken, FSharpAsync`1<IDisposable>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncOffsetUnit(DateTimeOffset dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<CancellationToken, FSharpAsync`1<a>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncOffsetResult(DateTimeOffset dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<CancellationToken, FSharpAsync`1<IDisposable>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncAccSpanUnit(state state, TimeSpan dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<state, FSharpFunc`2<CancellationToken, FSharpAsync`1<a>>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncAccSpanResult(state state, TimeSpan dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<state, FSharpFunc`2<CancellationToken, FSharpAsync`1<IDisposable>>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncAccOffsetUnit(state state, DateTimeOffset dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<state, FSharpFunc`2<CancellationToken, FSharpAsync`1<a>>>> f, IScheduler sch);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IDisposable asyncAccOffsetResult(state state, DateTimeOffset dueTime, FSharpFunc`2<IScheduler, FSharpFunc`2<state, FSharpFunc`2<CancellationToken, FSharpAsync`1<IDisposable>>>> f, IScheduler sch);
}
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.Scheduler : object {
    public static FSharpOption`1<ISchedulerLongRunning> asLongRunning(IScheduler sch);
}
[CompilationMappingAttribute("3")]
public class FSharp.Control.Reactive.Subject`1 : object {
    public static Subject`1<a> broadcast { get; }
    public static AsyncSubject`1<a> async { get; }
    public static ReplaySubject`1<a> replay { get; }
    public static Subject`1<a> get_broadcast();
    public static AsyncSubject`1<a> get_async();
    public static ReplaySubject`1<a> get_replay();
    public static BehaviorSubject`1<a> behavior(a x);
}
[CompilationRepresentationAttribute("4")]
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.SubjectModule : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SubjectBase`1<a> onNext(a x, SubjectBase`1<a> s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static b onNexts(IEnumerable`1<a> xs, b s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SubjectBase`1<a> onError(Exception ex, SubjectBase`1<a> s);
    public static SubjectBase`1<a> onCompleted(SubjectBase`1<a> s);
}
[CompilationMappingAttribute("3")]
public class FSharp.Control.Reactive.WaitHandle : object {
    public static ManualResetEvent Signal { get; }
    public static ManualResetEvent get_Signal();
}
[CompilationRepresentationAttribute("4")]
[CompilationMappingAttribute("7")]
public static class FSharp.Control.Reactive.WaitHandleModule : object {
    public static void flag(EventWaitHandle s);
    public static void wait(WaitHandle s);
}
