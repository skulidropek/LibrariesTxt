public class Octokit.AbuseException : ForbiddenException {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RetryAfterSeconds>k__BackingField;
    public Nullable`1<int> RetryAfterSeconds { get; private set; }
    public string Message { get; }
    public AbuseException(IResponse response);
    public AbuseException(IResponse response, Exception innerException);
    protected AbuseException(SerializationInfo info, StreamingContext context);
    private static Nullable`1<int> ParseRetryAfterSeconds(IResponse response);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RetryAfterSeconds();
    [CompilerGeneratedAttribute]
private void set_RetryAfterSeconds(Nullable`1<int> value);
    public virtual string get_Message();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public static class Octokit.AcceptHeaders : object {
    public static string StableVersion;
    public static string StableVersionHtml;
    public static string RedirectsPreviewThenStableVersionJson;
    public static string CommitReferenceSha1MediaType;
    public static string OrganizationPermissionsPreview;
    public static string LicensesApiPreview;
    public static string ProtectedBranchesApiPreview;
    public static string StarCreationTimestamps;
    public static string IssueLockingUnlockingApiPreview;
    public static string SquashCommitPreview;
    public static string MigrationsApiPreview;
    public static string ReactionsPreview;
    public static string SignatureVerificationPreview;
    public static string GpgKeysPreview;
    public static string DeploymentApiPreview;
    public static string InvitationsApiPreview;
    public static string PagesApiPreview;
    public static string IssueTimelineApiPreview;
    public static string RepositoryTrafficApiPreview;
    public static string PullRequestReviewsApiPreview;
    public static string ProjectsApiPreview;
    public static string OrganizationMembershipPreview;
    public static string NestedTeamsPreview;
    public static string GitHubAppsPreview;
    public static string PreReceiveEnvironmentsPreview;
    public static string LabelsApiPreview;
    public static string RepositoryTransferPreview;
    public static string ChecksApiPreview;
    public static string Concat(String[] headers);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AccessToken : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresAt>k__BackingField;
    public string Token { get; protected set; }
    public DateTimeOffset ExpiresAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public AccessToken(string token, DateTimeOffset expiresAt);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
protected void set_Token(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresAt();
    [CompilerGeneratedAttribute]
protected void set_ExpiresAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public abstract class Octokit.Account : object {
    [CompilerGeneratedAttribute]
private string <AvatarUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bio>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Blog>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Collaborators>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DiskUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Followers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Following>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hireable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AccountType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OwnedPrivateRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private Plan <Plan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PrivateGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublicGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublicRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPrivateRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string AvatarUrl { get; protected set; }
    public string Bio { get; protected set; }
    public string Blog { get; protected set; }
    public Nullable`1<int> Collaborators { get; protected set; }
    public string Company { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<int> DiskUsage { get; protected set; }
    public string Email { get; protected set; }
    public int Followers { get; protected set; }
    public int Following { get; protected set; }
    public Nullable`1<bool> Hireable { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Location { get; protected set; }
    public string Login { get; protected set; }
    public string Name { get; protected set; }
    public Nullable`1<AccountType> Type { get; protected set; }
    public int OwnedPrivateRepos { get; protected set; }
    public Plan Plan { get; protected set; }
    public Nullable`1<int> PrivateGists { get; protected set; }
    public int PublicGists { get; protected set; }
    public int PublicRepos { get; protected set; }
    public int TotalPrivateRepos { get; protected set; }
    public string Url { get; protected set; }
    protected Account(string avatarUrl, string bio, string blog, int collaborators, string company, DateTimeOffset createdAt, int diskUsage, string email, int followers, int following, Nullable`1<bool> hireable, string htmlUrl, int totalPrivateRepos, int id, string location, string login, string name, string nodeId, int ownedPrivateRepos, Plan plan, int privateGists, int publicGists, int publicRepos, AccountType type, string url);
    [CompilerGeneratedAttribute]
public string get_AvatarUrl();
    [CompilerGeneratedAttribute]
protected void set_AvatarUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Bio();
    [CompilerGeneratedAttribute]
protected void set_Bio(string value);
    [CompilerGeneratedAttribute]
public string get_Blog();
    [CompilerGeneratedAttribute]
protected void set_Blog(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Collaborators();
    [CompilerGeneratedAttribute]
protected void set_Collaborators(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
protected void set_Company(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DiskUsage();
    [CompilerGeneratedAttribute]
protected void set_DiskUsage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    [CompilerGeneratedAttribute]
public int get_Followers();
    [CompilerGeneratedAttribute]
protected void set_Followers(int value);
    [CompilerGeneratedAttribute]
public int get_Following();
    [CompilerGeneratedAttribute]
protected void set_Following(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hireable();
    [CompilerGeneratedAttribute]
protected void set_Hireable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
protected void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<AccountType> get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(Nullable`1<AccountType> value);
    [CompilerGeneratedAttribute]
public int get_OwnedPrivateRepos();
    [CompilerGeneratedAttribute]
protected void set_OwnedPrivateRepos(int value);
    [CompilerGeneratedAttribute]
public Plan get_Plan();
    [CompilerGeneratedAttribute]
protected void set_Plan(Plan value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PrivateGists();
    [CompilerGeneratedAttribute]
protected void set_PrivateGists(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_PublicGists();
    [CompilerGeneratedAttribute]
protected void set_PublicGists(int value);
    [CompilerGeneratedAttribute]
public int get_PublicRepos();
    [CompilerGeneratedAttribute]
protected void set_PublicRepos(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPrivateRepos();
    [CompilerGeneratedAttribute]
protected void set_TotalPrivateRepos(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
}
public enum Octokit.AccountSearchType : Enum {
    public int value__;
    [ParameterAttribute]
public static AccountSearchType User;
    [ParameterAttribute]
public static AccountSearchType Org;
}
public enum Octokit.AccountType : Enum {
    public int value__;
    [ParameterAttribute]
public static AccountType User;
    [ParameterAttribute]
public static AccountType Organization;
    [ParameterAttribute]
public static AccountType Bot;
}
public class Octokit.ActivitiesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IEventsClient <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IStarredClient <Starring>k__BackingField;
    [CompilerGeneratedAttribute]
private IWatchedClient <Watching>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeedsClient <Feeds>k__BackingField;
    [CompilerGeneratedAttribute]
private INotificationsClient <Notifications>k__BackingField;
    public IEventsClient Events { get; private set; }
    public IStarredClient Starring { get; private set; }
    public IWatchedClient Watching { get; private set; }
    public IFeedsClient Feeds { get; private set; }
    public INotificationsClient Notifications { get; private set; }
    public ActivitiesClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IEventsClient get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IEventsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IStarredClient get_Starring();
    [CompilerGeneratedAttribute]
private void set_Starring(IStarredClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IWatchedClient get_Watching();
    [CompilerGeneratedAttribute]
private void set_Watching(IWatchedClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IFeedsClient get_Feeds();
    [CompilerGeneratedAttribute]
private void set_Feeds(IFeedsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual INotificationsClient get_Notifications();
    [CompilerGeneratedAttribute]
private void set_Notifications(INotificationsClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Activity : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Public>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repo>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private Organization <Org>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityPayload <Payload>k__BackingField;
    public string Type { get; protected set; }
    public bool Public { get; protected set; }
    public Repository Repo { get; protected set; }
    public User Actor { get; protected set; }
    public Organization Org { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public string Id { get; protected set; }
    public ActivityPayload Payload { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Activity(string type, bool public, Repository repo, User actor, Organization org, DateTimeOffset createdAt, string id, ActivityPayload payload);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_Public();
    [CompilerGeneratedAttribute]
protected void set_Public(bool value);
    [CompilerGeneratedAttribute]
public Repository get_Repo();
    [CompilerGeneratedAttribute]
protected void set_Repo(Repository value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
protected void set_Actor(User value);
    [CompilerGeneratedAttribute]
public Organization get_Org();
    [CompilerGeneratedAttribute]
protected void set_Org(Organization value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(string value);
    [CompilerGeneratedAttribute]
public ActivityPayload get_Payload();
    [CompilerGeneratedAttribute]
protected void set_Payload(ActivityPayload value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ActivityPayload : object {
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationId <Installation>k__BackingField;
    public Repository Repository { get; protected set; }
    public User Sender { get; protected set; }
    public InstallationId Installation { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ActivityPayload(Repository repository, User sender, InstallationId installation);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public User get_Sender();
    [CompilerGeneratedAttribute]
protected void set_Sender(User value);
    [CompilerGeneratedAttribute]
public InstallationId get_Installation();
    [CompilerGeneratedAttribute]
protected void set_Installation(InstallationId value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdditionsAndDeletions : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    public DateTimeOffset Timestamp { get; private set; }
    public int Additions { get; private set; }
    public int Deletions { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdditionsAndDeletions(DateTimeOffset timestamp, int additions, int deletions);
    public AdditionsAndDeletions(IList`1<long> additionsAndDeletions);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
private void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
private void set_Deletions(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStats : object {
    [CompilerGeneratedAttribute]
private AdminStatsRepos <Repos>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsHooks <Hooks>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsPages <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsOrgs <Orgs>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsUsers <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsPulls <Pulls>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsIssues <Issues>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsMilestones <Milestones>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsGists <Gists>k__BackingField;
    [CompilerGeneratedAttribute]
private AdminStatsComments <Comments>k__BackingField;
    public AdminStatsRepos Repos { get; private set; }
    public AdminStatsHooks Hooks { get; private set; }
    public AdminStatsPages Pages { get; private set; }
    public AdminStatsOrgs Orgs { get; private set; }
    public AdminStatsUsers Users { get; private set; }
    public AdminStatsPulls Pulls { get; private set; }
    public AdminStatsIssues Issues { get; private set; }
    public AdminStatsMilestones Milestones { get; private set; }
    public AdminStatsGists Gists { get; private set; }
    public AdminStatsComments Comments { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStats(AdminStatsRepos repos, AdminStatsHooks hooks, AdminStatsPages pages, AdminStatsOrgs orgs, AdminStatsUsers users, AdminStatsPulls pulls, AdminStatsIssues issues, AdminStatsMilestones milestones, AdminStatsGists gists, AdminStatsComments comments);
    [CompilerGeneratedAttribute]
public AdminStatsRepos get_Repos();
    [CompilerGeneratedAttribute]
private void set_Repos(AdminStatsRepos value);
    [CompilerGeneratedAttribute]
public AdminStatsHooks get_Hooks();
    [CompilerGeneratedAttribute]
private void set_Hooks(AdminStatsHooks value);
    [CompilerGeneratedAttribute]
public AdminStatsPages get_Pages();
    [CompilerGeneratedAttribute]
private void set_Pages(AdminStatsPages value);
    [CompilerGeneratedAttribute]
public AdminStatsOrgs get_Orgs();
    [CompilerGeneratedAttribute]
private void set_Orgs(AdminStatsOrgs value);
    [CompilerGeneratedAttribute]
public AdminStatsUsers get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(AdminStatsUsers value);
    [CompilerGeneratedAttribute]
public AdminStatsPulls get_Pulls();
    [CompilerGeneratedAttribute]
private void set_Pulls(AdminStatsPulls value);
    [CompilerGeneratedAttribute]
public AdminStatsIssues get_Issues();
    [CompilerGeneratedAttribute]
private void set_Issues(AdminStatsIssues value);
    [CompilerGeneratedAttribute]
public AdminStatsMilestones get_Milestones();
    [CompilerGeneratedAttribute]
private void set_Milestones(AdminStatsMilestones value);
    [CompilerGeneratedAttribute]
public AdminStatsGists get_Gists();
    [CompilerGeneratedAttribute]
private void set_Gists(AdminStatsGists value);
    [CompilerGeneratedAttribute]
public AdminStatsComments get_Comments();
    [CompilerGeneratedAttribute]
private void set_Comments(AdminStatsComments value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsComments : object {
    [CompilerGeneratedAttribute]
private int <TotalCommitComments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalGistComments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalIssueComments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPullRequestComments>k__BackingField;
    public int TotalCommitComments { get; private set; }
    public int TotalGistComments { get; private set; }
    public int TotalIssueComments { get; private set; }
    public int TotalPullRequestComments { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsComments(int totalCommitComments, int totalGistComments, int totalIssueComments, int totalPullRequestComments);
    [CompilerGeneratedAttribute]
public int get_TotalCommitComments();
    [CompilerGeneratedAttribute]
private void set_TotalCommitComments(int value);
    [CompilerGeneratedAttribute]
public int get_TotalGistComments();
    [CompilerGeneratedAttribute]
private void set_TotalGistComments(int value);
    [CompilerGeneratedAttribute]
public int get_TotalIssueComments();
    [CompilerGeneratedAttribute]
private void set_TotalIssueComments(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPullRequestComments();
    [CompilerGeneratedAttribute]
private void set_TotalPullRequestComments(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsGists : object {
    [CompilerGeneratedAttribute]
private int <TotalGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrivateGists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublicGists>k__BackingField;
    public int TotalGists { get; private set; }
    public int PrivateGists { get; private set; }
    public int PublicGists { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsGists(int totalGists, int privateGists, int publicGists);
    [CompilerGeneratedAttribute]
public int get_TotalGists();
    [CompilerGeneratedAttribute]
private void set_TotalGists(int value);
    [CompilerGeneratedAttribute]
public int get_PrivateGists();
    [CompilerGeneratedAttribute]
private void set_PrivateGists(int value);
    [CompilerGeneratedAttribute]
public int get_PublicGists();
    [CompilerGeneratedAttribute]
private void set_PublicGists(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsHooks : object {
    [CompilerGeneratedAttribute]
private int <TotalHooks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveHooks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InactiveHooks>k__BackingField;
    public int TotalHooks { get; private set; }
    public int ActiveHooks { get; private set; }
    public int InactiveHooks { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsHooks(int totalHooks, int activeHooks, int inactiveHooks);
    [CompilerGeneratedAttribute]
public int get_TotalHooks();
    [CompilerGeneratedAttribute]
private void set_TotalHooks(int value);
    [CompilerGeneratedAttribute]
public int get_ActiveHooks();
    [CompilerGeneratedAttribute]
private void set_ActiveHooks(int value);
    [CompilerGeneratedAttribute]
public int get_InactiveHooks();
    [CompilerGeneratedAttribute]
private void set_InactiveHooks(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsIssues : object {
    [CompilerGeneratedAttribute]
private int <TotalIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosedIssues>k__BackingField;
    public int TotalIssues { get; private set; }
    public int OpenIssues { get; private set; }
    public int ClosedIssues { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsIssues(int totalIssues, int openIssues, int closedIssues);
    [CompilerGeneratedAttribute]
public int get_TotalIssues();
    [CompilerGeneratedAttribute]
private void set_TotalIssues(int value);
    [CompilerGeneratedAttribute]
public int get_OpenIssues();
    [CompilerGeneratedAttribute]
private void set_OpenIssues(int value);
    [CompilerGeneratedAttribute]
public int get_ClosedIssues();
    [CompilerGeneratedAttribute]
private void set_ClosedIssues(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsMilestones : object {
    [CompilerGeneratedAttribute]
private int <TotalMilestones>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenMilestones>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosedMilestones>k__BackingField;
    public int TotalMilestones { get; private set; }
    public int OpenMilestones { get; private set; }
    public int ClosedMilestones { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsMilestones(int totalMilestones, int openMilestones, int closedMilestones);
    [CompilerGeneratedAttribute]
public int get_TotalMilestones();
    [CompilerGeneratedAttribute]
private void set_TotalMilestones(int value);
    [CompilerGeneratedAttribute]
public int get_OpenMilestones();
    [CompilerGeneratedAttribute]
private void set_OpenMilestones(int value);
    [CompilerGeneratedAttribute]
public int get_ClosedMilestones();
    [CompilerGeneratedAttribute]
private void set_ClosedMilestones(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsOrgs : object {
    [CompilerGeneratedAttribute]
private int <TotalOrgs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DisabledOrgs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalTeams>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalTeamMembers>k__BackingField;
    public int TotalOrgs { get; private set; }
    public int DisabledOrgs { get; private set; }
    public int TotalTeams { get; private set; }
    public int TotalTeamMembers { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsOrgs(int totalOrgs, int disabledOrgs, int totalTeams, int totalTeamMembers);
    [CompilerGeneratedAttribute]
public int get_TotalOrgs();
    [CompilerGeneratedAttribute]
private void set_TotalOrgs(int value);
    [CompilerGeneratedAttribute]
public int get_DisabledOrgs();
    [CompilerGeneratedAttribute]
private void set_DisabledOrgs(int value);
    [CompilerGeneratedAttribute]
public int get_TotalTeams();
    [CompilerGeneratedAttribute]
private void set_TotalTeams(int value);
    [CompilerGeneratedAttribute]
public int get_TotalTeamMembers();
    [CompilerGeneratedAttribute]
private void set_TotalTeamMembers(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsPages : object {
    [CompilerGeneratedAttribute]
private int <TotalPages>k__BackingField;
    public int TotalPages { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsPages(int totalPages);
    [CompilerGeneratedAttribute]
public int get_TotalPages();
    [CompilerGeneratedAttribute]
private void set_TotalPages(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsPulls : object {
    [CompilerGeneratedAttribute]
private int <TotalPulls>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MergedPulls>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MergeablePulls>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnmergeablePulls>k__BackingField;
    public int TotalPulls { get; private set; }
    public int MergedPulls { get; private set; }
    public int MergeablePulls { get; private set; }
    public int UnmergeablePulls { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsPulls(int totalPulls, int mergedPulls, int mergeablePulls, int unmergeablePulls);
    [CompilerGeneratedAttribute]
public int get_TotalPulls();
    [CompilerGeneratedAttribute]
private void set_TotalPulls(int value);
    [CompilerGeneratedAttribute]
public int get_MergedPulls();
    [CompilerGeneratedAttribute]
private void set_MergedPulls(int value);
    [CompilerGeneratedAttribute]
public int get_MergeablePulls();
    [CompilerGeneratedAttribute]
private void set_MergeablePulls(int value);
    [CompilerGeneratedAttribute]
public int get_UnmergeablePulls();
    [CompilerGeneratedAttribute]
private void set_UnmergeablePulls(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsRepos : object {
    [CompilerGeneratedAttribute]
private int <TotalRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RootRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ForkRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OrgRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPushes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalWikis>k__BackingField;
    public int TotalRepos { get; private set; }
    public int RootRepos { get; private set; }
    public int ForkRepos { get; private set; }
    public int OrgRepos { get; private set; }
    public int TotalPushes { get; private set; }
    public int TotalWikis { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsRepos(int totalRepos, int rootRepos, int forkRepos, int orgRepos, int totalPushes, int totalWikis);
    [CompilerGeneratedAttribute]
public int get_TotalRepos();
    [CompilerGeneratedAttribute]
private void set_TotalRepos(int value);
    [CompilerGeneratedAttribute]
public int get_RootRepos();
    [CompilerGeneratedAttribute]
private void set_RootRepos(int value);
    [CompilerGeneratedAttribute]
public int get_ForkRepos();
    [CompilerGeneratedAttribute]
private void set_ForkRepos(int value);
    [CompilerGeneratedAttribute]
public int get_OrgRepos();
    [CompilerGeneratedAttribute]
private void set_OrgRepos(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPushes();
    [CompilerGeneratedAttribute]
private void set_TotalPushes(int value);
    [CompilerGeneratedAttribute]
public int get_TotalWikis();
    [CompilerGeneratedAttribute]
private void set_TotalWikis(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AdminStatsUsers : object {
    [CompilerGeneratedAttribute]
private int <TotalUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AdminUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SuspendedUsers>k__BackingField;
    public int TotalUsers { get; private set; }
    public int AdminUsers { get; private set; }
    public int SuspendedUsers { get; private set; }
    internal string DebuggerDisplay { get; }
    public AdminStatsUsers(int totalUsers, int adminUsers, int suspendedUsers);
    [CompilerGeneratedAttribute]
public int get_TotalUsers();
    [CompilerGeneratedAttribute]
private void set_TotalUsers(int value);
    [CompilerGeneratedAttribute]
public int get_AdminUsers();
    [CompilerGeneratedAttribute]
private void set_AdminUsers(int value);
    [CompilerGeneratedAttribute]
public int get_SuspendedUsers();
    [CompilerGeneratedAttribute]
private void set_SuspendedUsers(int value);
    internal string get_DebuggerDisplay();
}
public abstract class Octokit.ApiClient : object {
    [CompilerGeneratedAttribute]
private IApiConnection <ApiConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    protected IApiConnection ApiConnection { get; private set; }
    protected IConnection Connection { get; private set; }
    protected ApiClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
protected IApiConnection get_ApiConnection();
    [CompilerGeneratedAttribute]
private void set_ApiConnection(IApiConnection value);
    [CompilerGeneratedAttribute]
protected IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
}
public class Octokit.ApiConnection : object {
    private IApiPagination _pagination;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    public IConnection Connection { get; private set; }
    public ApiConnection(IConnection connection);
    protected ApiConnection(IConnection connection, IApiPagination pagination);
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    public sealed virtual Task`1<T> Get(Uri uri);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Get>d__8`1")]
public sealed virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Get>d__9`1")]
public sealed virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetHtml>d__10")]
public sealed virtual Task`1<string> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, string accepts);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public sealed virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options);
    public sealed virtual Task Post(Uri uri);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__19`1")]
public sealed virtual Task`1<T> Post(Uri uri);
    public sealed virtual Task`1<T> Post(Uri uri, object data);
    public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__22`1")]
public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__23`1")]
public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, string twoFactorAuthenticationCode);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Post>d__24`1")]
public sealed virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, TimeSpan timeout);
    public sealed virtual Task Put(Uri uri);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Put>d__26`1")]
public sealed virtual Task`1<T> Put(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Put>d__27`1")]
public sealed virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Put>d__28`1")]
public sealed virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode, string accepts);
    public sealed virtual Task Patch(Uri uri);
    public sealed virtual Task Patch(Uri uri, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Patch>d__31`1")]
public sealed virtual Task`1<T> Patch(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Patch>d__32`1")]
public sealed virtual Task`1<T> Patch(Uri uri, object data, string accepts);
    public sealed virtual Task Delete(Uri uri);
    public sealed virtual Task Delete(Uri uri, string twoFactorAuthenticationCode);
    public sealed virtual Task Delete(Uri uri, object data);
    public sealed virtual Task Delete(Uri uri, object data, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Delete>d__37`1")]
public sealed virtual Task`1<T> Delete(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Delete>d__38`1")]
public sealed virtual Task`1<T> Delete(Uri uri, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<Delete>d__39`1")]
public sealed virtual Task`1<T> Delete(Uri uri, object data, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetQueuedOperation>d__40`1")]
public sealed virtual Task`1<IReadOnlyList`1<T>> GetQueuedOperation(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetPage>d__41`1")]
private Task`1<IReadOnlyPagedCollection`1<T>> GetPage(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    [AsyncStateMachineAttribute("Octokit.ApiConnection/<GetPage>d__42`1")]
private Task`1<IReadOnlyPagedCollection`1<TU>> GetPage(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApiError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiErrorDetail> <Errors>k__BackingField;
    public string Message { get; protected set; }
    public string DocumentationUrl { get; protected set; }
    public IReadOnlyList`1<ApiErrorDetail> Errors { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ApiError(string message);
    public ApiError(string message, string documentationUrl, IReadOnlyList`1<ApiErrorDetail> errors);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentationUrl();
    [CompilerGeneratedAttribute]
protected void set_DocumentationUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiErrorDetail> get_Errors();
    [CompilerGeneratedAttribute]
protected void set_Errors(IReadOnlyList`1<ApiErrorDetail> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApiErrorDetail : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    public string Message { get; protected set; }
    public string Code { get; protected set; }
    public string Field { get; protected set; }
    public string Resource { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ApiErrorDetail(string message, string code, string field, string resource);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
protected void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
protected void set_Field(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
protected void set_Resource(string value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
internal static class Octokit.ApiErrorExtensions : object {
    [ExtensionAttribute]
public static string FirstErrorMessageSafe(ApiError apiError);
}
public class Octokit.ApiException : Exception {
    private static IJsonSerializer _jsonSerializer;
    [CompilerGeneratedAttribute]
private IResponse <HttpResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiError <ApiError>k__BackingField;
    public IResponse HttpResponse { get; private set; }
    public string Message { get; }
    public HttpStatusCode StatusCode { get; private set; }
    public ApiError ApiError { get; private set; }
    protected string ApiErrorMessageSafe { get; }
    protected string HttpResponseBodySafe { get; }
    public ApiException(string message, HttpStatusCode httpStatusCode);
    public ApiException(string message, Exception innerException);
    public ApiException(IResponse response);
    public ApiException(IResponse response, Exception innerException);
    protected ApiException(ApiException innerException);
    protected ApiException(HttpStatusCode statusCode, Exception innerException);
    protected ApiException(ApiError apiError, HttpStatusCode statusCode, Exception innerException);
    protected ApiException(SerializationInfo info, StreamingContext context);
    private static ApiException();
    [CompilerGeneratedAttribute]
public IResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
private void set_HttpResponse(IResponse value);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public ApiError get_ApiError();
    [CompilerGeneratedAttribute]
private void set_ApiError(ApiError value);
    private static ApiError GetApiErrorFromExceptionMessage(IResponse response);
    private static ApiError GetApiErrorFromExceptionMessage(string responseContent);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected string get_ApiErrorMessageSafe();
    protected string get_HttpResponseBodySafe();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Octokit.ApiExtensions : object {
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> GetAll(IApiConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<string> GetHtml(IApiConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<IApiResponse`1<string>> GetHtml(IConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<IApiResponse`1<T>> GetResponse(IConnection connection, Uri uri);
    [ExtensionAttribute]
public static Task`1<IApiResponse`1<T>> GetResponse(IConnection connection, Uri uri, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsTrue(IResponse response);
}
public class Octokit.ApiInfo : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <OauthScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <AcceptedOauthScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Etag>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, Uri> <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimit <RateLimit>k__BackingField;
    public IReadOnlyList`1<string> OauthScopes { get; private set; }
    public IReadOnlyList`1<string> AcceptedOauthScopes { get; private set; }
    public string Etag { get; private set; }
    public IReadOnlyDictionary`2<string, Uri> Links { get; private set; }
    public RateLimit RateLimit { get; private set; }
    public ApiInfo(IDictionary`2<string, Uri> links, IList`1<string> oauthScopes, IList`1<string> acceptedOauthScopes, string etag, RateLimit rateLimit);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_OauthScopes();
    [CompilerGeneratedAttribute]
private void set_OauthScopes(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_AcceptedOauthScopes();
    [CompilerGeneratedAttribute]
private void set_AcceptedOauthScopes(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Etag();
    [CompilerGeneratedAttribute]
private void set_Etag(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, Uri> get_Links();
    [CompilerGeneratedAttribute]
private void set_Links(IReadOnlyDictionary`2<string, Uri> value);
    [CompilerGeneratedAttribute]
public RateLimit get_RateLimit();
    [CompilerGeneratedAttribute]
private void set_RateLimit(RateLimit value);
    public ApiInfo Clone();
}
[ExtensionAttribute]
public static class Octokit.ApiInfoExtensions : object {
    [ExtensionAttribute]
public static Uri GetPreviousPageUrl(ApiInfo info);
    [ExtensionAttribute]
public static Uri GetNextPageUrl(ApiInfo info);
    [ExtensionAttribute]
public static Uri GetFirstPageUrl(ApiInfo info);
    [ExtensionAttribute]
public static Uri GetLastPageUrl(ApiInfo info);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApiOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartPage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    public static ApiOptions None { get; }
    public Nullable`1<int> StartPage { get; public set; }
    public Nullable`1<int> PageCount { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    internal string DebuggerDisplay { get; }
    public static ApiOptions get_None();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartPage();
    [CompilerGeneratedAttribute]
public void set_StartPage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageCount();
    [CompilerGeneratedAttribute]
public void set_PageCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ApiPagination : object {
    [AsyncStateMachineAttribute("Octokit.ApiPagination/<GetAllPages>d__0`1")]
public sealed virtual Task`1<IReadOnlyList`1<T>> GetAllPages(Func`1<Task`1<IReadOnlyPagedCollection`1<T>>> getFirstPage, Uri uri);
}
public static class Octokit.ApiUrls : object {
    private static Uri _currentUserAuthorizationsEndpoint;
    private static Uri _currentUserRepositoriesUrl;
    private static Uri _currentUserOrganizationsUrl;
    private static Uri _currentUserSshKeys;
    private static Uri _currentUserGpgKeys;
    private static Uri _currentUserStars;
    private static Uri _currentUserWatched;
    private static Uri _currentUserEmailsEndpoint;
    private static Uri _currentUserNotificationsEndpoint;
    private static Uri _currentUserAllIssues;
    private static Uri _currentUserOwnedAndMemberIssues;
    private static ApiUrls();
    public static Uri Authorizations();
    public static Uri Authorizations(int id);
    public static Uri AuthorizationsForClient(string clientId);
    public static Uri ApplicationAuthorization(string clientId);
    public static Uri ApplicationAuthorization(string clientId, string accessToken);
    public static Uri AllPublicRepositories();
    public static Uri AllPublicRepositories(long since);
    public static Uri Repositories();
    public static Uri Repositories(string login);
    public static Uri OrganizationRepositories(string organization);
    public static Uri UserOrganizations();
    public static Uri UserOrganizations(string login);
    public static Uri AllOrganizations();
    public static Uri AllOrganizations(long since);
    public static Uri Organization(string organizationName);
    public static Uri SshKeys();
    public static Uri SshKeys(string login);
    public static Uri Keys();
    public static Uri Keys(string userName);
    public static Uri Keys(int id);
    public static Uri Emails();
    public static Uri Releases(string owner, string name);
    public static Uri Releases(string owner, string name, int id);
    public static Uri Releases(string owner, string name, string tag);
    public static Uri LatestRelease(string owner, string name);
    public static Uri ReleaseAssets(string owner, string name, int id);
    public static Uri Asset(string owner, string name, int id);
    public static Uri Notifications();
    public static Uri Notifications(string owner, string name);
    public static Uri Notification(int id);
    public static Uri NotificationSubscription(int id);
    public static Uri AccessTokens(long installationId);
    public static Uri App();
    public static Uri App(string slug);
    public static Uri Installations();
    public static Uri UserInstallationRepositories(long installationId);
    public static Uri RepoInstallation(string owner, string repo);
    public static Uri RepoInstallation(long repositoryId);
    public static Uri OrganizationInstallation(string organization);
    public static Uri UserInstallation(string username);
    public static Uri Installation(long installationId);
    public static Uri UserInstallations();
    public static Uri InstallationRepositories();
    public static Uri Issues();
    public static Uri IssuesForOwnedAndMember();
    public static Uri Issues(string owner, string name);
    public static Uri Issues(string organization);
    public static Uri Issue(string owner, string name, int number);
    public static Uri IssueLock(string owner, string name, int number);
    public static Uri IssueReactions(string owner, string name, int number);
    public static Uri IssueReactions(long repositoryId, int number);
    public static Uri IssueTimeline(string owner, string repo, int number);
    public static Uri IssueTimeline(long repositoryId, int number);
    public static Uri IssueComments(string owner, string name);
    public static Uri IssueComments(string owner, string name, int number);
    public static Uri IssueComment(string owner, string name, int id);
    public static Uri IssueCommentReactions(string owner, string name, int number);
    public static Uri IssueCommentReactions(long repositoryId, int number);
    public static Uri CommitComment(string owner, string name, int number);
    public static Uri CommitComments(string owner, string name, string sha);
    public static Uri CommitComments(string owner, string name);
    public static Uri CommitCommentReactions(string owner, string name, int number);
    public static Uri CommitCommentReactions(long repositoryId, int number);
    public static Uri Assignees(string owner, string name);
    public static Uri CheckAssignee(string owner, string name, string login);
    public static Uri IssueAssignees(string owner, string name, int number);
    public static Uri Members(string org);
    public static Uri Members(string org, OrganizationMembersFilter filter);
    public static Uri Members(string org, OrganizationMembersRole role);
    public static Uri Members(string org, OrganizationMembersFilter filter, OrganizationMembersRole role);
    public static Uri PublicMembers(string org);
    public static Uri CheckMember(string org, string name);
    public static Uri OrganizationMember(string org, string user);
    public static Uri CheckMemberPublic(string org, string name);
    public static Uri OrganizationMembership(string org, string name);
    public static Uri OrganizationPendingInvititations(string org);
    public static Uri OutsideCollaborators(string org);
    public static Uri OutsideCollaborators(string org, OrganizationMembersFilter filter);
    public static Uri OutsideCollaborator(string org, string user);
    public static Uri Events(string owner, string name);
    public static Uri IssuesEvents(string owner, string name, int number);
    public static Uri IssuesEvents(string owner, string name);
    public static Uri IssuesEvent(string owner, string name, int id);
    public static Uri Milestone(string owner, string name, int number);
    public static Uri Milestones(string owner, string name);
    public static Uri Label(string owner, string name, string labelName);
    public static Uri Labels(string owner, string name);
    public static Uri IssueLabel(string owner, string name, int number, string labelName);
    public static Uri IssueLabels(string owner, string name, int number);
    public static Uri MilestoneLabels(string owner, string name, int number);
    public static Uri CreateCommitStatus(string owner, string name, string reference);
    public static Uri RepositoryHooks(string owner, string name);
    public static Uri RepositoryHookById(string owner, string name, int hookId);
    public static Uri RepositoryHookTest(string owner, string name, int hookId);
    public static Uri RepositoryHookPing(string owner, string name, int hookId);
    public static Uri CommitStatuses(string owner, string name, string reference);
    public static Uri CombinedCommitStatus(string owner, string name, string reference);
    public static Uri RepositoryForks(string owner, string name);
    public static Uri Watchers(string owner, string name);
    public static Uri Watched();
    public static Uri WatchedByUser(string user);
    public static Uri Watched(string owner, string name);
    public static Uri Stargazers(string owner, string name);
    public static Uri Starred();
    public static Uri StarredByUser(string user);
    public static Uri Starred(string owner, string name);
    public static Uri Tag(string owner, string name, string reference);
    public static Uri CreateTag(string owner, string name);
    public static Uri Events();
    public static Uri Feeds();
    public static Uri Gist();
    public static Uri Gist(string id);
    public static Uri ForkGist(string id);
    public static Uri PublicGists();
    public static Uri StarredGists();
    public static Uri UsersGists(string user);
    public static Uri StarGist(string id);
    public static Uri GistComments(string gistId);
    public static Uri GistCommits(string id);
    public static Uri PullRequest(string owner, string name, int number);
    public static Uri PullRequests(string owner, string name);
    public static Uri MergePullRequest(string owner, string name, int number);
    public static Uri PullRequestCommits(string owner, string name, int number);
    public static Uri PullRequestFiles(string owner, string name, int number);
    public static Uri GistComment(string gistId, int commentId);
    public static Uri Commit(string owner, string name, string reference);
    public static Uri Reference(string owner, string name);
    public static Uri Reference(string owner, string name, string referenceName);
    public static Uri CreateCommit(string owner, string name);
    public static Uri CreateMerge(string owner, string name);
    public static Uri NetworkEvents(string owner, string name);
    public static Uri OrganizationEvents(string organization);
    public static Uri ReceivedEvents(string user);
    public static Uri ReceivedEvents(string user, bool isPublic);
    public static Uri PerformedEvents(string user);
    public static Uri PerformedEvents(string user, bool isPublic);
    public static Uri OrganizationEvents(string user, string organization);
    public static Uri PullRequestReviewComments(string owner, string name, int number);
    public static Uri PullRequestReviews(string owner, string name, int number);
    public static Uri PullRequestReviewComment(string owner, string name, int number);
    public static Uri PullRequestReview(string owner, string name, int number, long reviewId);
    public static Uri PullRequestReviewDismissal(long repositoryId, int number, long reviewId);
    public static Uri PullRequestReviewDismissal(string owner, string name, int number, long reviewId);
    public static Uri PullRequestReviewSubmit(long repositoryId, int number, long reviewId);
    public static Uri PullRequestReviewSubmit(string owner, string name, int number, long reviewId);
    public static Uri PullRequestReviewComments(long repositoryId, int number, long reviewId);
    public static Uri PullRequestReviewComments(string owner, string name, int number, long reviewId);
    public static Uri PullRequestReview(long repositoryId, int number, long reviewId);
    public static Uri PullRequestReviewCommentReaction(string owner, string name, int number);
    public static Uri PullRequestReviewCommentReaction(long repositoryId, int number);
    public static Uri PullRequestReviewCommentsRepository(string owner, string name);
    public static Uri Blobs(string owner, string name);
    public static Uri Blob(string owner, string name, string reference);
    public static Uri Tree(string owner, string name);
    public static Uri Tree(string owner, string name, string reference);
    public static Uri TreeRecursive(string owner, string name, string reference);
    public static Uri OrganizationTeams(string organization);
    public static Uri UserTeams();
    public static Uri TeamChildTeams(int id);
    public static Uri Teams(int id);
    public static Uri TeamMember(int id, string login);
    public static Uri TeamMembers(int id);
    public static Uri TeamRepositories(int id);
    public static Uri TeamRepository(int id, string organization, string repoName);
    public static Uri TeamPendingInvitations(int id);
    public static Uri RepoCollaborators(string owner, string name);
    public static Uri RepoCollaborator(string owner, string repo, string user);
    public static Uri RepoCollaborator(long repositoryId, string user);
    public static Uri RepoCollaboratorPermission(string owner, string repo, string user);
    public static Uri RepoCollaboratorPermission(long repositoryId, string user);
    public static Uri RepoBranches(string owner, string name);
    public static Uri SearchRepositories();
    public static Uri SearchUsers();
    public static Uri SearchIssues();
    public static Uri SearchCode();
    public static Uri SearchLabels();
    public static Uri RepositoryContributors(string owner, string name);
    public static Uri RepositoryLanguages(string owner, string name);
    public static Uri RepositoryTeams(string owner, string name);
    public static Uri RepositoryTags(string owner, string name);
    public static Uri RepositoryTransfer(string owner, string name);
    public static Uri RepositoryTransfer(long repositoryId);
    public static Uri RepositoryCommit(string owner, string name, string reference);
    public static Uri RepositoryCommits(string owner, string name);
    public static Uri RepoCompare(string owner, string name, string base, string head);
    public static Uri RepoBranch(string owner, string name, string branchName);
    public static Uri RepoBranchProtection(string owner, string name, string branchName);
    public static Uri RepoBranchProtection(long repositoryId, string branchName);
    public static Uri RepoRequiredStatusChecks(string owner, string name, string branchName);
    public static Uri RepoRequiredStatusChecks(long repositoryId, string branchName);
    public static Uri RepoRequiredStatusChecksContexts(string owner, string name, string branchName);
    public static Uri RepoRequiredStatusChecksContexts(long repositoryId, string branchName);
    public static Uri RepoProtectedBranchReviewEnforcement(string owner, string name, string branchName);
    public static Uri RepoProtectedBranchReviewEnforcement(long repositoryId, string branchName);
    public static Uri RepoProtectedBranchAdminEnforcement(string owner, string name, string branchName);
    public static Uri RepoProtectedBranchAdminEnforcement(long repositoryId, string branchName);
    public static Uri RepoRestrictions(string owner, string name, string branchName);
    public static Uri RepoRestrictions(long repositoryId, string branchName);
    public static Uri RepoRestrictionsTeams(string owner, string name, string branchName);
    public static Uri RepoRestrictionsTeams(long repositoryId, string branchName);
    public static Uri RepoRestrictionsUsers(string owner, string name, string branchName);
    public static Uri RepoRestrictionsUsers(long repositoryId, string branchName);
    public static Uri Repository(string owner, string name);
    public static Uri RepositoryDeployKey(string owner, string name, int number);
    public static Uri RepositoryDeployKeys(string owner, string name);
    public static Uri Deployments(string owner, string name);
    public static Uri DeploymentStatuses(string owner, string name, int deploymentId);
    public static Uri Followers();
    public static Uri Followers(string login);
    public static Uri Following();
    public static Uri Following(string login);
    public static Uri IsFollowing(string following);
    public static Uri IsFollowing(string login, string following);
    public static Uri User(string login);
    public static Uri OauthAuthorize();
    public static Uri OauthAccessToken();
    public static Uri RepositoryReadme(string owner, string name);
    public static Uri RepositoryContent(string owner, string name);
    public static Uri RepositoryContent(string owner, string name, string path);
    public static Uri RepositoryArchiveLink(string owner, string name, ArchiveFormat archiveFormat, string reference);
    public static Uri RepositoryContent(string owner, string name, string path, string reference);
    public static Uri RepositoryPage(string owner, string name);
    public static Uri RepositoryPageBuilds(string owner, string name);
    public static Uri RepositoryPageBuildsLatest(string owner, string name);
    public static Uri StatsContributors(string owner, string name);
    public static Uri StatsCommitActivity(string owner, string name);
    public static Uri StatsCodeFrequency(string owner, string name);
    public static Uri StatsParticipation(string owner, string name);
    public static Uri StatsPunchCard(string owner, string name);
    private static Uri EnterpriseAdminStats(string type);
    public static Uri EnterpriseAdminStatsIssues();
    public static Uri EnterpriseAdminStatsHooks();
    public static Uri EnterpriseAdminStatsMilestones();
    public static Uri EnterpriseAdminStatsOrgs();
    public static Uri EnterpriseAdminStatsComments();
    public static Uri EnterpriseAdminStatsPages();
    public static Uri EnterpriseAdminStatsUsers();
    public static Uri EnterpriseAdminStatsGists();
    public static Uri EnterpriseAdminStatsPulls();
    public static Uri EnterpriseAdminStatsRepos();
    public static Uri EnterpriseAdminStatsAll();
    public static Uri EnterpriseLdapTeamMapping(int teamId);
    public static Uri EnterpriseLdapTeamSync(int teamId);
    public static Uri EnterpriseLdapUserMapping(string userName);
    public static Uri EnterpriseLdapUserSync(string userName);
    public static Uri EnterpriseLicense();
    public static Uri EnterpriseMigrationById(string org, int id);
    public static Uri EnterpriseMigrations(string org);
    public static Uri EnterpriseMigrationArchive(string org, int id);
    public static Uri EnterpriseMigrationUnlockRepository(string org, int id, string repo);
    public static Uri EnterpriseOrganization();
    public static Uri EnterpriseSearchIndexing();
    public static Uri UserAdministration();
    public static Uri UserAdministration(string login);
    public static Uri UserAdministrationAuthorization(string login);
    public static Uri UserAdministrationPublicKeys();
    public static Uri UserAdministrationPublicKeys(int keyId);
    public static Uri AdminPreReceiveEnvironments();
    public static Uri AdminPreReceiveEnvironments(long environmentId);
    public static Uri AdminPreReceiveEnvironmentDownload(long environmentId);
    public static Uri AdminPreReceiveEnvironmentDownloadStatus(long environmentId);
    public static Uri UserAdministrationSiteAdmin(string login);
    public static Uri UserAdministrationSuspension(string login);
    public static Uri Asset(long repositoryId, int id);
    public static Uri Assignees(long repositoryId);
    public static Uri Blobs(long repositoryId);
    public static Uri Blob(long repositoryId, string reference);
    public static Uri CheckAssignee(long repositoryId, string login);
    public static Uri CombinedCommitStatus(long repositoryId, string reference);
    public static Uri Commit(long repositoryId, string reference);
    public static Uri CommitComment(long repositoryId, int number);
    public static Uri CommitComments(long repositoryId, string sha);
    public static Uri CommitComments(long repositoryId);
    public static Uri CommitStatuses(long repositoryId, string reference);
    public static Uri CreateCommit(long repositoryId);
    public static Uri CreateCommitStatus(long repositoryId, string reference);
    public static Uri CreateMerge(long repositoryId);
    public static Uri CreateTag(long repositoryId);
    public static Uri Deployments(long repositoryId);
    public static Uri DeploymentStatuses(long repositoryId, int deploymentId);
    public static Uri Events(long repositoryId);
    public static Uri GpgKeys();
    public static Uri GpgKeys(int id);
    public static Uri Issue(long repositoryId, int number);
    public static Uri IssueComment(long repositoryId, int id);
    public static Uri IssueComments(long repositoryId);
    public static Uri IssueComments(long repositoryId, int number);
    public static Uri IssueLabel(long repositoryId, int number, string labelName);
    public static Uri IssueLabels(long repositoryId, int number);
    public static Uri IssueLock(long repositoryId, int number);
    public static Uri Issues(long repositoryId);
    public static Uri IssuesEvent(long repositoryId, int id);
    public static Uri IssuesEvents(long repositoryId, int number);
    public static Uri IssuesEvents(long repositoryId);
    public static Uri Label(long repositoryId, string labelName);
    public static Uri Labels(long repositoryId);
    public static Uri LatestRelease(long repositoryId);
    public static Uri MergePullRequest(long repositoryId, int number);
    public static Uri Milestone(long repositoryId, int number);
    public static Uri MilestoneLabels(long repositoryId, int number);
    public static Uri Milestones(long repositoryId);
    public static Uri Notifications(long repositoryId);
    public static Uri PullRequest(long repositoryId, int number);
    public static Uri PullRequestCommits(long repositoryId, int number);
    public static Uri PullRequestFiles(long repositoryId, int number);
    public static Uri PullRequestReviewComment(long repositoryId, int number);
    public static Uri PullRequestReviewComments(long repositoryId, int number);
    public static Uri PullRequestReviews(long repositoryId, int number);
    public static Uri PullRequestReviewCommentsRepository(long repositoryId);
    public static Uri PullRequests(long repositoryId);
    public static Uri Reference(long repositoryId);
    public static Uri Reference(long repositoryId, string referenceName);
    public static Uri ReleaseAssets(long repositoryId, int id);
    public static Uri Releases(long repositoryId);
    public static Uri Releases(long repositoryId, int id);
    public static Uri Releases(long repositoryId, string tag);
    public static Uri RepoBranch(long repositoryId, string branchName);
    public static Uri RepoBranches(long repositoryId);
    public static Uri RepoCollaborators(long repositoryId);
    public static Uri RepoCompare(long repositoryId, string base, string head);
    public static Uri Repository(long repositoryId);
    public static Uri RepositoryArchiveLink(long repositoryId, ArchiveFormat archiveFormat, string reference);
    public static Uri RepositoryCommit(long repositoryId, string reference);
    public static Uri RepositoryCommits(long repositoryId);
    public static Uri RepositoryContent(long repositoryId);
    public static Uri RepositoryContent(long repositoryId, string path);
    public static Uri RepositoryContent(long repositoryId, string path, string reference);
    public static Uri RepositoryContributors(long repositoryId);
    public static Uri RepositoryDeployKey(long repositoryId, int number);
    public static Uri RepositoryDeployKeys(long repositoryId);
    public static Uri RepositoryForks(long repositoryId);
    public static Uri RepositoryHookById(long repositoryId, int hookId);
    public static Uri RepositoryHookPing(long repositoryId, int hookId);
    public static Uri RepositoryHooks(long repositoryId);
    public static Uri RepositoryHookTest(long repositoryId, int hookId);
    public static Uri RepositoryLanguages(long repositoryId);
    public static Uri RepositoryPage(long repositoryId);
    public static Uri RepositoryPageBuilds(long repositoryId);
    public static Uri RepositoryPageBuildsLatest(long repositoryId);
    public static Uri RepositoryReadme(long repositoryId);
    public static Uri RepositoryTags(long repositoryId);
    public static Uri RepositoryTeams(long repositoryId);
    public static Uri Stargazers(long repositoryId);
    public static Uri StatsCodeFrequency(long repositoryId);
    public static Uri StatsCommitActivity(long repositoryId);
    public static Uri StatsContributors(long repositoryId);
    public static Uri StatsParticipation(long repositoryId);
    public static Uri StatsPunchCard(long repositoryId);
    public static Uri Tag(long repositoryId, string reference);
    public static Uri Tree(long repositoryId);
    public static Uri Tree(long repositoryId, string reference);
    public static Uri TreeRecursive(long repositoryId, string reference);
    public static Uri Watched(long repositoryId);
    public static Uri Watchers(long repositoryId);
    public static Uri Reactions(int number);
    public static Uri RepositoryInvitations(long repositoryId);
    public static Uri RepositoryInvitations(long repositoryId, int invitationId);
    public static Uri UserInvitations();
    public static Uri UserInvitations(int invitationId);
    public static Uri RepositoryTrafficReferrers(string owner, string repo);
    public static Uri RepositoryTrafficReferrers(long repositoryId);
    public static Uri RepositoryTrafficPaths(string owner, string repo);
    public static Uri RepositoryTrafficPaths(long repositoryId);
    public static Uri RepositoryTrafficViews(string owner, string repo);
    public static Uri RepositoryTrafficViews(long repositoryId);
    public static Uri RepositoryTrafficClones(string owner, string repo);
    public static Uri RepositoryTrafficClones(long repositoryId);
    public static Uri PullRequestReviewRequests(string owner, string repo, int number);
    public static Uri PullRequestReviewRequests(long repositoryId, int number);
    public static Uri RepositoryProjects(string owner, string repo);
    public static Uri RepositoryProjects(long repositoryId);
    public static Uri OrganizationProjects(string organization);
    public static Uri Project(int id);
    public static Uri ProjectColumn(int id);
    public static Uri ProjectColumns(int projectId);
    public static Uri ProjectColumnMove(int id);
    public static Uri ProjectCard(int id);
    public static Uri ProjectCards(int columnId);
    public static Uri ProjectCardMove(int id);
    public static Uri RepositoryLicense(string owner, string repo);
    public static Uri RepositoryLicense(long repositoryId);
    public static Uri CheckRun(long repositoryId, long id);
    public static Uri CheckRun(string owner, string repo, long id);
    public static Uri CheckRuns(long repositoryId);
    public static Uri CheckRuns(string owner, string repo);
    public static Uri CheckRunsForReference(long repositoryId, string reference);
    public static Uri CheckRunsForReference(string owner, string repo, string reference);
    public static Uri CheckRunsForCheckSuite(long repositoryId, long checkSuiteId);
    public static Uri CheckRunsForCheckSuite(string owner, string repo, long checkSuiteId);
    public static Uri CheckRunAnnotations(long repositoryId, long checkRunId);
    public static Uri CheckRunAnnotations(string owner, string repo, long checkRunId);
    public static Uri CheckSuite(long repositoryId, long id);
    public static Uri CheckSuite(string owner, string repo, long id);
    public static Uri CheckSuitesForReference(long repositoryId, string reference);
    public static Uri CheckSuitesForReference(string owner, string repo, string reference);
    public static Uri CheckSuites(long repositoryId);
    public static Uri CheckSuites(string owner, string repo);
    [ObsoleteAttribute("This method has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
public static Uri CheckSuiteRequests(long repositoryId);
    [ObsoleteAttribute("This method has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
public static Uri CheckSuiteRequests(string owner, string repo);
    public static Uri CheckSuiteRerequest(long repositoryId, long checkSuiteId);
    public static Uri CheckSuiteRerequest(string owner, string repo, long checkSuiteId);
    public static Uri CheckSuitePreferences(long repositoryId);
    public static Uri CheckSuitePreferences(string owner, string repo);
}
public class Octokit.ApiValidationException : ApiException {
    public string Message { get; }
    public ApiValidationException(IResponse response);
    public ApiValidationException(IResponse response, Exception innerException);
    protected ApiValidationException(ApiException innerException);
    protected ApiValidationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Application : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Name { get; protected set; }
    public string Url { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Application(string name, string url);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ApplicationAuthorization : Authorization {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Token { get; private set; }
    public ApplicationAuthorization(int id, string url, Application application, string tokenLastEight, string hashedToken, string fingerprint, string note, string noteUrl, DateTimeOffset createdAt, DateTimeOffset updateAt, String[] scopes, string token);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(string value);
}
public enum Octokit.ArchiveFormat : Enum {
    public int value__;
    [ParameterAttribute]
public static ArchiveFormat Tarball;
    [ParameterAttribute]
public static ArchiveFormat Zipball;
}
public class Octokit.AssigneesClient : ApiClient {
    public AssigneesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.AssigneesClient/<CheckAssignee>d__5")]
public sealed virtual Task`1<bool> CheckAssignee(string owner, string name, string assignee);
    public sealed virtual Task`1<Issue> AddAssignees(string owner, string name, int number, AssigneesUpdate assignees);
    public sealed virtual Task`1<Issue> RemoveAssignees(string owner, string name, int number, AssigneesUpdate assignees);
    [AsyncStateMachineAttribute("Octokit.AssigneesClient/<CheckAssignee>d__8")]
public sealed virtual Task`1<bool> CheckAssignee(long repositoryId, string assignee);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AssigneesUpdate : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Assignees>k__BackingField;
    public IReadOnlyList`1<string> Assignees { get; private set; }
    internal string DebuggerDisplay { get; }
    public AssigneesUpdate(IReadOnlyList`1<string> assignees);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.AuthenticationType : Enum {
    public int value__;
    public static AuthenticationType Anonymous;
    public static AuthenticationType Basic;
    public static AuthenticationType Oauth;
    public static AuthenticationType Bearer;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Author : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AvatarUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FollowersUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FollowingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GistsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StarredUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReposUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceivedEventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SiteAdmin>k__BackingField;
    public string Login { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string AvatarUrl { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string FollowersUrl { get; protected set; }
    public string FollowingUrl { get; protected set; }
    public string GistsUrl { get; protected set; }
    public string StarredUrl { get; protected set; }
    public string SubscriptionsUrl { get; protected set; }
    public string OrganizationsUrl { get; protected set; }
    public string ReposUrl { get; protected set; }
    public string EventsUrl { get; protected set; }
    public string ReceivedEventsUrl { get; protected set; }
    public string Type { get; protected set; }
    public bool SiteAdmin { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Author(string login, int id, string nodeId, string avatarUrl, string url, string htmlUrl, string followersUrl, string followingUrl, string gistsUrl, string type, string starredUrl, string subscriptionsUrl, string organizationsUrl, string reposUrl, string eventsUrl, string receivedEventsUrl, bool siteAdmin);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_AvatarUrl();
    [CompilerGeneratedAttribute]
protected void set_AvatarUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FollowersUrl();
    [CompilerGeneratedAttribute]
protected void set_FollowersUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FollowingUrl();
    [CompilerGeneratedAttribute]
protected void set_FollowingUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GistsUrl();
    [CompilerGeneratedAttribute]
protected void set_GistsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StarredUrl();
    [CompilerGeneratedAttribute]
protected void set_StarredUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SubscriptionsUrl();
    [CompilerGeneratedAttribute]
protected void set_SubscriptionsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationsUrl();
    [CompilerGeneratedAttribute]
protected void set_OrganizationsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ReposUrl();
    [CompilerGeneratedAttribute]
protected void set_ReposUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EventsUrl();
    [CompilerGeneratedAttribute]
protected void set_EventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ReceivedEventsUrl();
    [CompilerGeneratedAttribute]
protected void set_ReceivedEventsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_SiteAdmin();
    [CompilerGeneratedAttribute]
protected void set_SiteAdmin(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Authorization : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Application <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenLastEight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashedToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdateAt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    public int Id { get; protected set; }
    public string Url { get; protected set; }
    public Application Application { get; protected set; }
    public string TokenLastEight { get; protected set; }
    public string HashedToken { get; protected set; }
    public string Fingerprint { get; protected set; }
    public string Note { get; protected set; }
    public string NoteUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdateAt { get; protected set; }
    public String[] Scopes { get; protected set; }
    public string ScopesDelimited { get; }
    internal string DebuggerDisplay { get; }
    public Authorization(int id, string url, Application application, string tokenLastEight, string hashedToken, string fingerprint, string note, string noteUrl, DateTimeOffset createdAt, DateTimeOffset updateAt, String[] scopes);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public Application get_Application();
    [CompilerGeneratedAttribute]
protected void set_Application(Application value);
    [CompilerGeneratedAttribute]
public string get_TokenLastEight();
    [CompilerGeneratedAttribute]
protected void set_TokenLastEight(string value);
    [CompilerGeneratedAttribute]
public string get_HashedToken();
    [CompilerGeneratedAttribute]
protected void set_HashedToken(string value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
protected void set_Fingerprint(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
protected void set_Note(string value);
    [CompilerGeneratedAttribute]
public string get_NoteUrl();
    [CompilerGeneratedAttribute]
protected void set_NoteUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdateAt();
    [CompilerGeneratedAttribute]
protected void set_UpdateAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
protected void set_Scopes(String[] value);
    public string get_ScopesDelimited();
    internal string get_DebuggerDisplay();
}
public class Octokit.AuthorizationException : ApiException {
    public AuthorizationException(IResponse response);
    public AuthorizationException(IResponse response, Exception innerException);
    public AuthorizationException(HttpStatusCode httpStatusCode, Exception innerException);
    protected AuthorizationException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Octokit.AuthorizationExtensions : object {
    [AsyncStateMachineAttribute("Octokit.AuthorizationExtensions/<GetOrCreateApplicationAuthentication>d__0")]
[ExtensionAttribute]
public static Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(IAuthorizationsClient authorizationsClient, string clientId, string clientSecret, NewAuthorization newAuthorization, Func`2<TwoFactorRequiredException, Task`1<TwoFactorChallengeResult>> twoFactorChallengeHandler);
}
public class Octokit.AuthorizationsClient : ApiClient {
    public AuthorizationsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Authorization>> GetAll();
    public sealed virtual Task`1<IReadOnlyList`1<Authorization>> GetAll(ApiOptions options);
    public sealed virtual Task`1<Authorization> Get(int id);
    public sealed virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization);
    public sealed virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public sealed virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization);
    public sealed virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public sealed virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization);
    [AsyncStateMachineAttribute("Octokit.AuthorizationsClient/<GetOrCreateApplicationAuthentication>d__9")]
public sealed virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public sealed virtual Task`1<ApplicationAuthorization> CheckApplicationAuthentication(string clientId, string accessToken);
    public sealed virtual Task`1<ApplicationAuthorization> ResetApplicationAuthentication(string clientId, string accessToken);
    public sealed virtual Task RevokeApplicationAuthentication(string clientId, string accessToken);
    public sealed virtual Task`1<Authorization> Update(int id, AuthorizationUpdate authorizationUpdate);
    public sealed virtual Task Delete(int id);
    public sealed virtual Task Delete(int id, string twoFactorAuthenticationCode);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.AuthorizationUpdate : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AddScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RemoveScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    public IEnumerable`1<string> Scopes { get; public set; }
    public IEnumerable`1<string> AddScopes { get; public set; }
    public IEnumerable`1<string> RemoveScopes { get; public set; }
    public string Note { get; public set; }
    public string NoteUrl { get; public set; }
    public string Fingerprint { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AddScopes();
    [CompilerGeneratedAttribute]
public void set_AddScopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RemoveScopes();
    [CompilerGeneratedAttribute]
public void set_RemoveScopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
    [CompilerGeneratedAttribute]
public string get_NoteUrl();
    [CompilerGeneratedAttribute]
public void set_NoteUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
public void set_Fingerprint(string value);
    internal string get_DebuggerDisplay();
}
public abstract class Octokit.BaseSearchRequest : object {
    [CompilerGeneratedAttribute]
private string <Term>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PerPage>k__BackingField;
    public string Term { get; private set; }
    public string Sort { get; }
    private string SortOrder { get; }
    public SortDirection Order { get; public set; }
    public int Page { get; public set; }
    public int PerPage { get; public set; }
    private string TermAndQualifiers { get; }
    public IDictionary`2<string, string> Parameters { get; }
    protected BaseSearchRequest(string term);
    [CompilerGeneratedAttribute]
public string get_Term();
    [CompilerGeneratedAttribute]
private void set_Term(string value);
    public abstract virtual string get_Sort();
    private string get_SortOrder();
    [CompilerGeneratedAttribute]
public SortDirection get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(SortDirection value);
    [CompilerGeneratedAttribute]
public int get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(int value);
    [CompilerGeneratedAttribute]
public int get_PerPage();
    [CompilerGeneratedAttribute]
public void set_PerPage(int value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    private string get_TermAndQualifiers();
    public virtual IDictionary`2<string, string> AdditionalParameters();
    public IDictionary`2<string, string> get_Parameters();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Blob : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EncodingType> <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public string NodeId { get; protected set; }
    public string Content { get; protected set; }
    public StringEnum`1<EncodingType> Encoding { get; protected set; }
    public string Sha { get; protected set; }
    public int Size { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Blob(string nodeId, string content, EncodingType encoding, string sha, int size);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EncodingType> get_Encoding();
    [CompilerGeneratedAttribute]
protected void set_Encoding(StringEnum`1<EncodingType> value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BlobReference : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Sha { get; protected set; }
    internal string DebuggerDisplay { get; }
    public BlobReference(string sha);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.BlobsClient : ApiClient {
    public BlobsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Blob> Get(string owner, string name, string reference);
    public sealed virtual Task`1<Blob> Get(long repositoryId, string reference);
    public sealed virtual Task`1<BlobReference> Create(string owner, string name, NewBlob newBlob);
    public sealed virtual Task`1<BlobReference> Create(long repositoryId, NewBlob newBlob);
}
public class Octokit.BodyWrapper : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Body { get; private set; }
    public BodyWrapper(string body);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Branch : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Protected>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Commit>k__BackingField;
    public string Name { get; protected set; }
    public bool Protected { get; protected set; }
    public GitReference Commit { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Branch(string name, GitReference commit, bool protected);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Protected();
    [CompilerGeneratedAttribute]
protected void set_Protected(bool value);
    [CompilerGeneratedAttribute]
public GitReference get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(GitReference value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionPushRestrictions : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Team> <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Users>k__BackingField;
    public IReadOnlyList`1<Team> Teams { get; private set; }
    public IReadOnlyList`1<User> Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionPushRestrictions(IReadOnlyList`1<Team> teams, IReadOnlyList`1<User> users);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Team> get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(IReadOnlyList`1<Team> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(IReadOnlyList`1<User> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionPushRestrictionsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionTeamCollection <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionUserCollection <Users>k__BackingField;
    public BranchProtectionTeamCollection Teams { get; private set; }
    public BranchProtectionUserCollection Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionPushRestrictionsUpdate(BranchProtectionTeamCollection teams);
    public BranchProtectionPushRestrictionsUpdate(BranchProtectionUserCollection users);
    public BranchProtectionPushRestrictionsUpdate(BranchProtectionTeamCollection teams, BranchProtectionUserCollection users);
    [CompilerGeneratedAttribute]
public BranchProtectionTeamCollection get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(BranchProtectionTeamCollection value);
    [CompilerGeneratedAttribute]
public BranchProtectionUserCollection get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(BranchProtectionUserCollection value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviews : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviewsDismissalRestrictions <DismissalRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DismissStaleReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireCodeOwnerReviews>k__BackingField;
    public BranchProtectionRequiredReviewsDismissalRestrictions DismissalRestrictions { get; protected set; }
    public bool DismissStaleReviews { get; protected set; }
    public bool RequireCodeOwnerReviews { get; protected set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviews(BranchProtectionRequiredReviewsDismissalRestrictions dismissalRestrictions, bool dismissStaleReviews, bool requireCodeOwnerReviews);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviewsDismissalRestrictions get_DismissalRestrictions();
    [CompilerGeneratedAttribute]
protected void set_DismissalRestrictions(BranchProtectionRequiredReviewsDismissalRestrictions value);
    [CompilerGeneratedAttribute]
public bool get_DismissStaleReviews();
    [CompilerGeneratedAttribute]
protected void set_DismissStaleReviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireCodeOwnerReviews();
    [CompilerGeneratedAttribute]
protected void set_RequireCodeOwnerReviews(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviewsDismissalRestrictions : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Team> <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Users>k__BackingField;
    public IReadOnlyList`1<Team> Teams { get; private set; }
    public IReadOnlyList`1<User> Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviewsDismissalRestrictions(IReadOnlyList`1<Team> teams, IReadOnlyList`1<User> users);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Team> get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(IReadOnlyList`1<Team> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(IReadOnlyList`1<User> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviewsDismissalRestrictionsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionTeamCollection <Teams>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionUserCollection <Users>k__BackingField;
    public BranchProtectionTeamCollection Teams { get; private set; }
    public BranchProtectionUserCollection Users { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(bool enabled);
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(BranchProtectionTeamCollection teams);
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(BranchProtectionUserCollection users);
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate(BranchProtectionTeamCollection teams, BranchProtectionUserCollection users);
    [CompilerGeneratedAttribute]
public BranchProtectionTeamCollection get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(BranchProtectionTeamCollection value);
    [CompilerGeneratedAttribute]
public BranchProtectionUserCollection get_Users();
    [CompilerGeneratedAttribute]
private void set_Users(BranchProtectionUserCollection value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredReviewsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviewsDismissalRestrictionsUpdate <DismissalRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DismissStaleReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireCodeOwnerReviews>k__BackingField;
    public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate DismissalRestrictions { get; protected set; }
    public bool DismissStaleReviews { get; protected set; }
    public bool RequireCodeOwnerReviews { get; protected set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredReviewsUpdate(bool dismissStaleReviews, bool requireCodeOwnerReviews);
    public BranchProtectionRequiredReviewsUpdate(BranchProtectionRequiredReviewsDismissalRestrictionsUpdate dismissalRestrictions, bool dismissStaleReviews, bool requireCodeOwnerReviews);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviewsDismissalRestrictionsUpdate get_DismissalRestrictions();
    [CompilerGeneratedAttribute]
protected void set_DismissalRestrictions(BranchProtectionRequiredReviewsDismissalRestrictionsUpdate value);
    [CompilerGeneratedAttribute]
public bool get_DismissStaleReviews();
    [CompilerGeneratedAttribute]
protected void set_DismissStaleReviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireCodeOwnerReviews();
    [CompilerGeneratedAttribute]
protected void set_RequireCodeOwnerReviews(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredStatusChecks : object {
    [CompilerGeneratedAttribute]
private bool <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Contexts>k__BackingField;
    public bool Strict { get; protected set; }
    public IReadOnlyList`1<string> Contexts { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredStatusChecks(bool strict, IReadOnlyList`1<string> contexts);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
protected void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Contexts();
    [CompilerGeneratedAttribute]
private void set_Contexts(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionRequiredStatusChecksUpdate : object {
    [CompilerGeneratedAttribute]
private bool <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Contexts>k__BackingField;
    public bool Strict { get; protected set; }
    public IReadOnlyList`1<string> Contexts { get; private set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionRequiredStatusChecksUpdate(bool strict, IReadOnlyList`1<string> contexts);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
protected void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Contexts();
    [CompilerGeneratedAttribute]
private void set_Contexts(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionSettings : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredStatusChecks <RequiredStatusChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviews <RequiredPullRequestReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionPushRestrictions <Restrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private EnforceAdmins <EnforceAdmins>k__BackingField;
    public BranchProtectionRequiredStatusChecks RequiredStatusChecks { get; protected set; }
    public BranchProtectionRequiredReviews RequiredPullRequestReviews { get; protected set; }
    public BranchProtectionPushRestrictions Restrictions { get; protected set; }
    public EnforceAdmins EnforceAdmins { get; protected set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionSettings(BranchProtectionRequiredStatusChecks requiredStatusChecks, BranchProtectionPushRestrictions restrictions, BranchProtectionRequiredReviews requiredPullRequestReviews, EnforceAdmins enforceAdmins);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredStatusChecks get_RequiredStatusChecks();
    [CompilerGeneratedAttribute]
protected void set_RequiredStatusChecks(BranchProtectionRequiredStatusChecks value);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviews get_RequiredPullRequestReviews();
    [CompilerGeneratedAttribute]
protected void set_RequiredPullRequestReviews(BranchProtectionRequiredReviews value);
    [CompilerGeneratedAttribute]
public BranchProtectionPushRestrictions get_Restrictions();
    [CompilerGeneratedAttribute]
protected void set_Restrictions(BranchProtectionPushRestrictions value);
    [CompilerGeneratedAttribute]
public EnforceAdmins get_EnforceAdmins();
    [CompilerGeneratedAttribute]
protected void set_EnforceAdmins(EnforceAdmins value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionSettingsUpdate : object {
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredStatusChecksUpdate <RequiredStatusChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionRequiredReviewsUpdate <RequiredPullRequestReviews>k__BackingField;
    [CompilerGeneratedAttribute]
private BranchProtectionPushRestrictionsUpdate <Restrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceAdmins>k__BackingField;
    [SerializeNullAttribute]
public BranchProtectionRequiredStatusChecksUpdate RequiredStatusChecks { get; protected set; }
    [SerializeNullAttribute]
public BranchProtectionRequiredReviewsUpdate RequiredPullRequestReviews { get; protected set; }
    [SerializeNullAttribute]
public BranchProtectionPushRestrictionsUpdate Restrictions { get; protected set; }
    public bool EnforceAdmins { get; public set; }
    internal string DebuggerDisplay { get; }
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredStatusChecksUpdate requiredStatusChecks);
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredReviewsUpdate requiredPullRequestReviews);
    public BranchProtectionSettingsUpdate(BranchProtectionPushRestrictionsUpdate restrictions);
    public BranchProtectionSettingsUpdate(bool enforceAdmins);
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredStatusChecksUpdate requiredStatusChecks, BranchProtectionRequiredReviewsUpdate requiredPullRequestReviews, bool enforceAdmins);
    public BranchProtectionSettingsUpdate(BranchProtectionRequiredStatusChecksUpdate requiredStatusChecks, BranchProtectionRequiredReviewsUpdate requiredPullRequestReviews, BranchProtectionPushRestrictionsUpdate restrictions, bool enforceAdmins);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredStatusChecksUpdate get_RequiredStatusChecks();
    [CompilerGeneratedAttribute]
protected void set_RequiredStatusChecks(BranchProtectionRequiredStatusChecksUpdate value);
    [CompilerGeneratedAttribute]
public BranchProtectionRequiredReviewsUpdate get_RequiredPullRequestReviews();
    [CompilerGeneratedAttribute]
protected void set_RequiredPullRequestReviews(BranchProtectionRequiredReviewsUpdate value);
    [CompilerGeneratedAttribute]
public BranchProtectionPushRestrictionsUpdate get_Restrictions();
    [CompilerGeneratedAttribute]
protected void set_Restrictions(BranchProtectionPushRestrictionsUpdate value);
    [CompilerGeneratedAttribute]
public bool get_EnforceAdmins();
    [CompilerGeneratedAttribute]
public void set_EnforceAdmins(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionTeamCollection : Collection`1<string> {
    internal string DebuggerDisplay { get; }
    public BranchProtectionTeamCollection(IList`1<string> list);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.BranchProtectionUserCollection : Collection`1<string> {
    internal string DebuggerDisplay { get; }
    public BranchProtectionUserCollection(IList`1<string> list);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CheckAnnotationLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckAnnotationLevel Notice;
    [ParameterAttribute]
public static CheckAnnotationLevel Warning;
    [ParameterAttribute]
public static CheckAnnotationLevel Failure;
}
public enum Octokit.CheckConclusion : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckConclusion Success;
    [ParameterAttribute]
public static CheckConclusion Failure;
    [ParameterAttribute]
public static CheckConclusion Neutral;
    [ParameterAttribute]
public static CheckConclusion Cancelled;
    [ParameterAttribute]
public static CheckConclusion TimedOut;
    [ParameterAttribute]
public static CheckConclusion ActionRequired;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRun : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CheckStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckRunOutputResponse <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckSuite <CheckSuite>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubApp <App>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PullRequest> <PullRequests>k__BackingField;
    public long Id { get; protected set; }
    public string HeadSha { get; protected set; }
    public string ExternalId { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public StringEnum`1<CheckStatus> Status { get; protected set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; protected set; }
    public DateTimeOffset StartedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; protected set; }
    public CheckRunOutputResponse Output { get; protected set; }
    public string Name { get; protected set; }
    public CheckSuite CheckSuite { get; protected set; }
    public GitHubApp App { get; protected set; }
    public IReadOnlyList`1<PullRequest> PullRequests { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckRun(long id, string headSha, string externalId, string url, string htmlUrl, CheckStatus status, Nullable`1<CheckConclusion> conclusion, DateTimeOffset startedAt, Nullable`1<DateTimeOffset> completedAt, CheckRunOutputResponse output, string name, CheckSuite checkSuite, GitHubApp app, IReadOnlyList`1<PullRequest> pullRequests);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalId();
    [CompilerGeneratedAttribute]
protected void set_ExternalId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CheckStatus> get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(StringEnum`1<CheckStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
protected void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartedAt();
    [CompilerGeneratedAttribute]
protected void set_StartedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
protected void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public CheckRunOutputResponse get_Output();
    [CompilerGeneratedAttribute]
protected void set_Output(CheckRunOutputResponse value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public CheckSuite get_CheckSuite();
    [CompilerGeneratedAttribute]
protected void set_CheckSuite(CheckSuite value);
    [CompilerGeneratedAttribute]
public GitHubApp get_App();
    [CompilerGeneratedAttribute]
protected void set_App(GitHubApp value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PullRequest> get_PullRequests();
    [CompilerGeneratedAttribute]
protected void set_PullRequests(IReadOnlyList`1<PullRequest> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobHref>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckWarningLevel>> <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckAnnotationLevel>> <AnnotationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawDetails>k__BackingField;
    [ObsoleteAttribute("This property is replaced with Path but may still be required on GitHub Enterprise 2.14")]
public string Filename { get; protected set; }
    public string Path { get; protected set; }
    public string BlobHref { get; protected set; }
    public int StartLine { get; protected set; }
    public int EndLine { get; protected set; }
    public Nullable`1<int> StartColumn { get; protected set; }
    public Nullable`1<int> EndColumn { get; protected set; }
    [ObsoleteAttribute("This property is replaced with AnnotationLevel but may still be required on GitHub Enterprise 2.14")]
public Nullable`1<StringEnum`1<CheckWarningLevel>> WarningLevel { get; protected set; }
    public Nullable`1<StringEnum`1<CheckAnnotationLevel>> AnnotationLevel { get; protected set; }
    public string Message { get; protected set; }
    public string Title { get; protected set; }
    public string RawDetails { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckRunAnnotation(string path, string blobHref, int startLine, int endLine, Nullable`1<int> startColumn, Nullable`1<int> endColumn, Nullable`1<CheckAnnotationLevel> annotationLevel, string message, string title, string rawDetails);
    [ObsoleteAttribute("This ctor taking Filename, BlobHref and WarningLevel is deprecated but may still be required on GitHub Enterprise 2.14")]
public CheckRunAnnotation(string filename, string path, string blobHref, int startLine, int endLine, Nullable`1<int> startColumn, Nullable`1<int> endColumn, Nullable`1<CheckWarningLevel> warningLevel, Nullable`1<CheckAnnotationLevel> annotationLevel, string message, string title, string rawDetails);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
protected void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_BlobHref();
    [CompilerGeneratedAttribute]
protected void set_BlobHref(string value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
protected void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
protected void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartColumn();
    [CompilerGeneratedAttribute]
protected void set_StartColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndColumn();
    [CompilerGeneratedAttribute]
protected void set_EndColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckWarningLevel>> get_WarningLevel();
    [CompilerGeneratedAttribute]
protected void set_WarningLevel(Nullable`1<StringEnum`1<CheckWarningLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckAnnotationLevel>> get_AnnotationLevel();
    [CompilerGeneratedAttribute]
protected void set_AnnotationLevel(Nullable`1<StringEnum`1<CheckAnnotationLevel>> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_RawDetails();
    [CompilerGeneratedAttribute]
protected void set_RawDetails(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CheckRunCompletedAtFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckRunCompletedAtFilter Latest;
    [ParameterAttribute]
public static CheckRunCompletedAtFilter All;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckRun <CheckRun>k__BackingField;
    public string Action { get; protected set; }
    public CheckRun CheckRun { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public CheckRun get_CheckRun();
    [CompilerGeneratedAttribute]
protected void set_CheckRun(CheckRun value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunOutputResponse : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AnnotationsCount>k__BackingField;
    public string Title { get; protected set; }
    public string Summary { get; protected set; }
    public string Text { get; protected set; }
    public long AnnotationsCount { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckRunOutputResponse(string title, string summary, string text, long annotationsCount);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
protected void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
protected void set_Text(string value);
    [CompilerGeneratedAttribute]
public long get_AnnotationsCount();
    [CompilerGeneratedAttribute]
protected void set_AnnotationsCount(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <CheckName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckStatusFilter>> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> <Filter>k__BackingField;
    [ParameterAttribute]
public string CheckName { get; public set; }
    [ParameterAttribute]
public Nullable`1<StringEnum`1<CheckStatusFilter>> Status { get; public set; }
    [ParameterAttribute]
public Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> Filter { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_CheckName();
    [CompilerGeneratedAttribute]
public void set_CheckName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckStatusFilter>> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<StringEnum`1<CheckStatusFilter>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Nullable`1<StringEnum`1<CheckRunCompletedAtFilter>> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CheckRunsClient : ApiClient {
    public CheckRunsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<CheckRun> Create(string owner, string name, NewCheckRun newCheckRun);
    public sealed virtual Task`1<CheckRun> Create(long repositoryId, NewCheckRun newCheckRun);
    public sealed virtual Task`1<CheckRun> Update(string owner, string name, long checkRunId, CheckRunUpdate checkRunUpdate);
    public sealed virtual Task`1<CheckRun> Update(long repositoryId, long checkRunId, CheckRunUpdate checkRunUpdate);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForReference>d__9")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForReference>d__10")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest);
    public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForCheckSuite>d__15")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.CheckRunsClient/<GetAllForCheckSuite>d__16")]
public sealed virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    public sealed virtual Task`1<CheckRun> Get(string owner, string name, long checkRunId);
    public sealed virtual Task`1<CheckRun> Get(long repositoryId, long checkRunId);
    public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId);
    public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId);
    public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId, ApiOptions options);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CheckRun> <CheckRuns>k__BackingField;
    public int TotalCount { get; protected set; }
    public IReadOnlyList`1<CheckRun> CheckRuns { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckRunsResponse(int totalCount, IReadOnlyList`1<CheckRun> checkRuns);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CheckRun> get_CheckRuns();
    [CompilerGeneratedAttribute]
protected void set_CheckRuns(IReadOnlyList`1<CheckRun> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckRunUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckStatus>> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private NewCheckRunOutput <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunAction> <Actions>k__BackingField;
    public string Name { get; public set; }
    public string DetailsUrl { get; public set; }
    public string ExternalId { get; public set; }
    public Nullable`1<StringEnum`1<CheckStatus>> Status { get; public set; }
    public Nullable`1<DateTimeOffset> StartedAt { get; public set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; public set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; public set; }
    public NewCheckRunOutput Output { get; public set; }
    public IReadOnlyList`1<NewCheckRunAction> Actions { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DetailsUrl();
    [CompilerGeneratedAttribute]
public void set_DetailsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalId();
    [CompilerGeneratedAttribute]
public void set_ExternalId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckStatus>> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<StringEnum`1<CheckStatus>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
public void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
public void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public NewCheckRunOutput get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(NewCheckRunOutput value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IReadOnlyList`1<NewCheckRunAction> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ChecksClient : object {
    [CompilerGeneratedAttribute]
private ICheckRunsClient <Run>k__BackingField;
    [CompilerGeneratedAttribute]
private ICheckSuitesClient <Suite>k__BackingField;
    public ICheckRunsClient Run { get; private set; }
    public ICheckSuitesClient Suite { get; private set; }
    public ChecksClient(ApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual ICheckRunsClient get_Run();
    [CompilerGeneratedAttribute]
private void set_Run(ICheckRunsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICheckSuitesClient get_Suite();
    [CompilerGeneratedAttribute]
private void set_Suite(ICheckSuitesClient value);
}
public enum Octokit.CheckStatus : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckStatus Queued;
    [ParameterAttribute]
public static CheckStatus InProgress;
    [ParameterAttribute]
public static CheckStatus Completed;
}
public enum Octokit.CheckStatusFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckStatusFilter Queued;
    [ParameterAttribute]
public static CheckStatusFilter InProgress;
    [ParameterAttribute]
public static CheckStatusFilter Completed;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuite : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CheckStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Before>k__BackingField;
    [CompilerGeneratedAttribute]
private string <After>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PullRequest> <PullRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubApp <App>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public long Id { get; protected set; }
    public string HeadBranch { get; protected set; }
    public string HeadSha { get; protected set; }
    public StringEnum`1<CheckStatus> Status { get; protected set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; protected set; }
    public string Url { get; protected set; }
    public string Before { get; protected set; }
    public string After { get; protected set; }
    public IReadOnlyList`1<PullRequest> PullRequests { get; protected set; }
    public GitHubApp App { get; protected set; }
    public Repository Repository { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuite(long id, string headBranch, string headSha, CheckStatus status, Nullable`1<CheckConclusion> conclusion, string url, string before, string after, IReadOnlyList`1<PullRequest> pullRequests, GitHubApp app, Repository repository);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_HeadBranch();
    [CompilerGeneratedAttribute]
protected void set_HeadBranch(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CheckStatus> get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(StringEnum`1<CheckStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
protected void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Before();
    [CompilerGeneratedAttribute]
protected void set_Before(string value);
    [CompilerGeneratedAttribute]
public string get_After();
    [CompilerGeneratedAttribute]
protected void set_After(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PullRequest> get_PullRequests();
    [CompilerGeneratedAttribute]
protected void set_PullRequests(IReadOnlyList`1<PullRequest> value);
    [CompilerGeneratedAttribute]
public GitHubApp get_App();
    [CompilerGeneratedAttribute]
protected void set_App(GitHubApp value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuiteEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckSuite <CheckSuite>k__BackingField;
    public string Action { get; protected set; }
    public CheckSuite CheckSuite { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public CheckSuite get_CheckSuite();
    [CompilerGeneratedAttribute]
protected void set_CheckSuite(CheckSuite value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitePreferenceAutoTrigger : object {
    [CompilerGeneratedAttribute]
private long <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Setting>k__BackingField;
    public long AppId { get; protected set; }
    public bool Setting { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitePreferenceAutoTrigger(long appId, bool setting);
    [CompilerGeneratedAttribute]
public long get_AppId();
    [CompilerGeneratedAttribute]
protected void set_AppId(long value);
    [CompilerGeneratedAttribute]
public bool get_Setting();
    [CompilerGeneratedAttribute]
protected void set_Setting(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitePreferences : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> <AutoTriggerChecks>k__BackingField;
    public IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> AutoTriggerChecks { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitePreferences(IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> autoTriggerChecks);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> get_AutoTriggerChecks();
    [CompilerGeneratedAttribute]
protected void set_AutoTriggerChecks(IReadOnlyList`1<CheckSuitePreferenceAutoTrigger> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitePreferencesResponse : object {
    [CompilerGeneratedAttribute]
private CheckSuitePreferences <Preferences>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public CheckSuitePreferences Preferences { get; protected set; }
    public Repository Repository { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitePreferencesResponse(CheckSuitePreferences preferences, Repository repository);
    [CompilerGeneratedAttribute]
public CheckSuitePreferences get_Preferences();
    [CompilerGeneratedAttribute]
protected void set_Preferences(CheckSuitePreferences value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuiteRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckName>k__BackingField;
    [ParameterAttribute]
public Nullable`1<long> AppId { get; public set; }
    [ParameterAttribute]
public string CheckName { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_CheckName();
    [CompilerGeneratedAttribute]
public void set_CheckName(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CheckSuitesClient : ApiClient {
    public CheckSuitesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<CheckSuite> Get(string owner, string name, long checkSuiteId);
    public sealed virtual Task`1<CheckSuite> Get(long repositoryId, long checkSuiteId);
    public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference);
    public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference);
    public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference, CheckSuiteRequest request);
    public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<GetAllForReference>d__7")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference, CheckSuiteRequest request, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<GetAllForReference>d__8")]
public sealed virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request, ApiOptions options);
    public sealed virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(string owner, string name, CheckSuitePreferences preferences);
    public sealed virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(long repositoryId, CheckSuitePreferences preferences);
    public sealed virtual Task`1<CheckSuite> Create(string owner, string name, NewCheckSuite newCheckSuite);
    public sealed virtual Task`1<CheckSuite> Create(long repositoryId, NewCheckSuite newCheckSuite);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<Request>d__13")]
[ObsoleteAttribute("This method has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
public sealed virtual Task`1<bool> Request(string owner, string name, CheckSuiteTriggerRequest request);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<Request>d__14")]
[ObsoleteAttribute("This method has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
public sealed virtual Task`1<bool> Request(long repositoryId, CheckSuiteTriggerRequest request);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<Rerequest>d__15")]
public sealed virtual Task`1<bool> Rerequest(string owner, string name, long checkSuiteId);
    [AsyncStateMachineAttribute("Octokit.CheckSuitesClient/<Rerequest>d__16")]
public sealed virtual Task`1<bool> Rerequest(long repositoryId, long checkSuiteId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuitesResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CheckSuite> <CheckSuites>k__BackingField;
    public int TotalCount { get; protected set; }
    public IReadOnlyList`1<CheckSuite> CheckSuites { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuitesResponse(int totalCount, IReadOnlyList`1<CheckSuite> checkSuites);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CheckSuite> get_CheckSuites();
    [CompilerGeneratedAttribute]
protected void set_CheckSuites(IReadOnlyList`1<CheckSuite> value);
    internal string get_DebuggerDisplay();
}
[ObsoleteAttribute("This request has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CheckSuiteTriggerRequest : object {
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    public string HeadSha { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CheckSuiteTriggerRequest(string headSha);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    internal virtual string get_DebuggerDisplay();
}
[ObsoleteAttribute("This enum is replaced with CheckAnnotationLevel but may still be required on GitHub Enterprise 2.14")]
public enum Octokit.CheckWarningLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static CheckWarningLevel Notice;
    [ParameterAttribute]
public static CheckWarningLevel Warning;
    [ParameterAttribute]
public static CheckWarningLevel Failure;
}
public class Octokit.Clients.GitHubAppInstallationsClient : ApiClient {
    public GitHubAppInstallationsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent();
    [AsyncStateMachineAttribute("Octokit.Clients.GitHubAppInstallationsClient/<GetAllRepositoriesForCurrent>d__2")]
public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent(ApiOptions options);
    public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId);
    [AsyncStateMachineAttribute("Octokit.Clients.GitHubAppInstallationsClient/<GetAllRepositoriesForCurrentUser>d__4")]
public sealed virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId, ApiOptions options);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CodeFrequency : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AdditionsAndDeletions> <AdditionsAndDeletionsByWeek>k__BackingField;
    public IReadOnlyList`1<AdditionsAndDeletions> AdditionsAndDeletionsByWeek { get; private set; }
    internal string DebuggerDisplay { get; }
    public CodeFrequency(IEnumerable`1<AdditionsAndDeletions> additionsAndDeletionsByWeek);
    public CodeFrequency(IEnumerable`1<IList`1<long>> rawFrequencies);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AdditionsAndDeletions> get_AdditionsAndDeletionsByWeek();
    [CompilerGeneratedAttribute]
private void set_AdditionsAndDeletionsByWeek(IReadOnlyList`1<AdditionsAndDeletions> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.CodeInQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static CodeInQualifier File;
    [ParameterAttribute]
public static CodeInQualifier Path;
}
public enum Octokit.CodeSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static CodeSearchSort Indexed;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CollaboratorPermission : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<PermissionLevel> <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    public StringEnum`1<PermissionLevel> Permission { get; protected set; }
    public User User { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CollaboratorPermission(PermissionLevel permission, User user);
    [CompilerGeneratedAttribute]
public StringEnum`1<PermissionLevel> get_Permission();
    [CompilerGeneratedAttribute]
protected void set_Permission(StringEnum`1<PermissionLevel> value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CollaboratorRequest : object {
    [CompilerGeneratedAttribute]
private Permission <Permission>k__BackingField;
    public Permission Permission { get; private set; }
    internal string DebuggerDisplay { get; }
    public CollaboratorRequest(Permission permissions);
    [CompilerGeneratedAttribute]
public Permission get_Permission();
    [CompilerGeneratedAttribute]
private void set_Permission(Permission value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
internal static class Octokit.CollectionExtensions : object {
    [ExtensionAttribute]
public static TValue SafeGet(IReadOnlyDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static IList`1<string> Clone(IReadOnlyList`1<string> input);
    [ExtensionAttribute]
public static IDictionary`2<string, Uri> Clone(IReadOnlyDictionary`2<string, Uri> input);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CombinedCommitStatus : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<CommitState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CommitStatus> <Statuses>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public StringEnum`1<CommitState> State { get; protected set; }
    public string Sha { get; protected set; }
    public int TotalCount { get; protected set; }
    public IReadOnlyList`1<CommitStatus> Statuses { get; protected set; }
    public Repository Repository { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CombinedCommitStatus(CommitState state, string sha, int totalCount, IReadOnlyList`1<CommitStatus> statuses, Repository repository);
    [CompilerGeneratedAttribute]
public StringEnum`1<CommitState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CommitStatus> get_Statuses();
    [CompilerGeneratedAttribute]
protected void set_Statuses(IReadOnlyList`1<CommitStatus> value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Commit : GitReference {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Verification <Verification>k__BackingField;
    public string Message { get; protected set; }
    public Committer Author { get; protected set; }
    public Committer Committer { get; protected set; }
    public GitReference Tree { get; protected set; }
    public IReadOnlyList`1<GitReference> Parents { get; protected set; }
    public int CommentCount { get; protected set; }
    public Verification Verification { get; protected set; }
    public Commit(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, string message, Committer author, Committer committer, GitReference tree, IEnumerable`1<GitReference> parents, int commentCount, Verification verification);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
protected void set_Author(Committer value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
protected void set_Committer(Committer value);
    [CompilerGeneratedAttribute]
public GitReference get_Tree();
    [CompilerGeneratedAttribute]
protected void set_Tree(GitReference value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
protected void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public int get_CommentCount();
    [CompilerGeneratedAttribute]
protected void set_CommentCount(int value);
    [CompilerGeneratedAttribute]
public Verification get_Verification();
    [CompilerGeneratedAttribute]
protected void set_Verification(Verification value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitActivity : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WeeklyCommitActivity> <Activity>k__BackingField;
    public IReadOnlyList`1<WeeklyCommitActivity> Activity { get; private set; }
    internal string DebuggerDisplay { get; }
    public CommitActivity(IEnumerable`1<WeeklyCommitActivity> activity);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WeeklyCommitActivity> get_Activity();
    [CompilerGeneratedAttribute]
private void set_Activity(IReadOnlyList`1<WeeklyCommitActivity> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitComment : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string Body { get; protected set; }
    public string Path { get; protected set; }
    public Nullable`1<int> Position { get; protected set; }
    public Nullable`1<int> Line { get; protected set; }
    public string CommitId { get; protected set; }
    public User User { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; protected set; }
    public ReactionSummary Reactions { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CommitComment(int id, string nodeId, string url, string htmlUrl, string body, string path, int position, Nullable`1<int> line, string commitId, User user, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt, ReactionSummary reactions);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
protected void set_Position(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
protected void set_Line(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
protected void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
protected void set_Reactions(ReactionSummary value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitCommentPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private CommitComment <Comment>k__BackingField;
    public CommitComment Comment { get; protected set; }
    [CompilerGeneratedAttribute]
public CommitComment get_Comment();
    [CompilerGeneratedAttribute]
protected void set_Comment(CommitComment value);
}
public class Octokit.CommitCommentReactionsClient : ApiClient {
    public CommitCommentReactionsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public sealed virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Until>k__BackingField;
    public string Sha { get; public set; }
    public string Path { get; public set; }
    public string Author { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    public Nullable`1<DateTimeOffset> Until { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Until();
    [CompilerGeneratedAttribute]
public void set_Until(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CommitsClient : ApiClient {
    public CommitsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Commit> Get(string owner, string name, string reference);
    public sealed virtual Task`1<Commit> Get(long repositoryId, string reference);
    public sealed virtual Task`1<Commit> Create(string owner, string name, NewCommit commit);
    public sealed virtual Task`1<Commit> Create(long repositoryId, NewCommit commit);
}
public enum Octokit.CommitState : Enum {
    public int value__;
    [ParameterAttribute]
public static CommitState Pending;
    [ParameterAttribute]
public static CommitState Success;
    [ParameterAttribute]
public static CommitState Error;
    [ParameterAttribute]
public static CommitState Failure;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CommitStatus : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CommitState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public StringEnum`1<CommitState> State { get; protected set; }
    public string TargetUrl { get; protected set; }
    public string Description { get; protected set; }
    public string Context { get; protected set; }
    public long Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public User Creator { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CommitStatus(DateTimeOffset createdAt, DateTimeOffset updatedAt, CommitState state, string targetUrl, string description, string context, long id, string nodeId, string url, User creator);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CommitState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
protected void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
protected void set_Creator(User value);
    internal string get_DebuggerDisplay();
}
public class Octokit.CommitStatusClient : ApiClient {
    public CommitStatusClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference);
    public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference);
    public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference, ApiOptions options);
    public sealed virtual Task`1<CombinedCommitStatus> GetCombined(string owner, string name, string reference);
    public sealed virtual Task`1<CombinedCommitStatus> GetCombined(long repositoryId, string reference);
    public sealed virtual Task`1<CommitStatus> Create(string owner, string name, string reference, NewCommitStatus newCommitStatus);
    public sealed virtual Task`1<CommitStatus> Create(long repositoryId, string reference, NewCommitStatus newCommitStatus);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Committer : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Date>k__BackingField;
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string Email { get; protected set; }
    public DateTimeOffset Date { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Committer(string name, string email, DateTimeOffset date);
    public Committer(string nodeId, string name, string email, DateTimeOffset date);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Date();
    [CompilerGeneratedAttribute]
protected void set_Date(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CompareResult : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermalinkUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiffUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatchUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommit <BaseCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommit <MergeBaseCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AheadBy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BehindBy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCommits>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitHubCommit> <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitHubCommitFile> <Files>k__BackingField;
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string PermalinkUrl { get; protected set; }
    public string DiffUrl { get; protected set; }
    public string PatchUrl { get; protected set; }
    public GitHubCommit BaseCommit { get; protected set; }
    public GitHubCommit MergeBaseCommit { get; protected set; }
    public string Status { get; protected set; }
    public int AheadBy { get; protected set; }
    public int BehindBy { get; protected set; }
    public int TotalCommits { get; protected set; }
    public IReadOnlyList`1<GitHubCommit> Commits { get; protected set; }
    public IReadOnlyList`1<GitHubCommitFile> Files { get; protected set; }
    internal string DebuggerDisplay { get; }
    public CompareResult(string url, string htmlUrl, string permalinkUrl, string diffUrl, string patchUrl, GitHubCommit baseCommit, GitHubCommit mergeBaseCommit, string status, int aheadBy, int behindBy, int totalCommits, IReadOnlyList`1<GitHubCommit> commits, IReadOnlyList`1<GitHubCommitFile> files);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PermalinkUrl();
    [CompilerGeneratedAttribute]
protected void set_PermalinkUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DiffUrl();
    [CompilerGeneratedAttribute]
protected void set_DiffUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PatchUrl();
    [CompilerGeneratedAttribute]
protected void set_PatchUrl(string value);
    [CompilerGeneratedAttribute]
public GitHubCommit get_BaseCommit();
    [CompilerGeneratedAttribute]
protected void set_BaseCommit(GitHubCommit value);
    [CompilerGeneratedAttribute]
public GitHubCommit get_MergeBaseCommit();
    [CompilerGeneratedAttribute]
protected void set_MergeBaseCommit(GitHubCommit value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    [CompilerGeneratedAttribute]
public int get_AheadBy();
    [CompilerGeneratedAttribute]
protected void set_AheadBy(int value);
    [CompilerGeneratedAttribute]
public int get_BehindBy();
    [CompilerGeneratedAttribute]
protected void set_BehindBy(int value);
    [CompilerGeneratedAttribute]
public int get_TotalCommits();
    [CompilerGeneratedAttribute]
protected void set_TotalCommits(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitHubCommit> get_Commits();
    [CompilerGeneratedAttribute]
protected void set_Commits(IReadOnlyList`1<GitHubCommit> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitHubCommitFile> get_Files();
    [CompilerGeneratedAttribute]
protected void set_Files(IReadOnlyList`1<GitHubCommitFile> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.Connection : object {
    private static Uri _defaultGitHubApiUrl;
    private static ICredentialStore _anonymousCredentials;
    private Authenticator _authenticator;
    private JsonHttpPipeline _jsonPipeline;
    private IHttpClient _httpClient;
    private ApiInfo _lastApiInfo;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    private static Dictionary`2<HttpStatusCode, Func`2<IResponse, Exception>> _httpExceptionMap;
    private static string _platformInformation;
    private static string _versionInformation;
    public Uri BaseAddress { get; private set; }
    public string UserAgent { get; private set; }
    public ICredentialStore CredentialStore { get; }
    public Credentials Credentials { get; public set; }
    public Connection(ProductHeaderValue productInformation);
    public Connection(ProductHeaderValue productInformation, IHttpClient httpClient);
    public Connection(ProductHeaderValue productInformation, Uri baseAddress);
    public Connection(ProductHeaderValue productInformation, ICredentialStore credentialStore);
    public Connection(ProductHeaderValue productInformation, Uri baseAddress, ICredentialStore credentialStore);
    public Connection(ProductHeaderValue productInformation, Uri baseAddress, ICredentialStore credentialStore, IHttpClient httpClient, IJsonSerializer serializer);
    private static Connection();
    public sealed virtual ApiInfo GetLastApiInfo();
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts, CancellationToken cancellationToken);
    public sealed virtual Task`1<IApiResponse`1<T>> Get(Uri uri, TimeSpan timeout);
    public sealed virtual Task`1<IApiResponse`1<string>> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body);
    public sealed virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body, string accepts);
    [AsyncStateMachineAttribute("Octokit.Connection/<Post>d__19")]
public sealed virtual Task`1<HttpStatusCode> Post(Uri uri);
    [AsyncStateMachineAttribute("Octokit.Connection/<Post>d__20")]
public sealed virtual Task`1<HttpStatusCode> Post(Uri uri, object body, string accepts);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri);
    public Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, IDictionary`2<string, string> parameters);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, string twoFactorAuthenticationCode);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, TimeSpan timeout);
    public sealed virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, Uri baseAddress);
    public sealed virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body);
    public sealed virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode);
    public sealed virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode, string accepts);
    private Task`1<IApiResponse`1<T>> SendData(Uri uri, HttpMethod method, object body, string accepts, string contentType, TimeSpan timeout, CancellationToken cancellationToken, string twoFactorAuthenticationCode, Uri baseAddress);
    private Task`1<IApiResponse`1<T>> SendData(Uri uri, HttpMethod method, object body, string accepts, string contentType, CancellationToken cancellationToken, string twoFactorAuthenticationCode, Uri baseAddress);
    private Task`1<IApiResponse`1<T>> SendDataInternal(object body, string accepts, string contentType, CancellationToken cancellationToken, string twoFactorAuthenticationCode, Request request);
    [AsyncStateMachineAttribute("Octokit.Connection/<Patch>d__33")]
public sealed virtual Task`1<HttpStatusCode> Patch(Uri uri);
    [AsyncStateMachineAttribute("Octokit.Connection/<Patch>d__34")]
public sealed virtual Task`1<HttpStatusCode> Patch(Uri uri, string accepts);
    [AsyncStateMachineAttribute("Octokit.Connection/<Put>d__35")]
public sealed virtual Task`1<HttpStatusCode> Put(Uri uri);
    [AsyncStateMachineAttribute("Octokit.Connection/<Put>d__36")]
public sealed virtual Task`1<HttpStatusCode> Put(Uri uri, string accepts);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__37")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__38")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri, string twoFactorAuthenticationCode);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__39")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri, object data);
    [AsyncStateMachineAttribute("Octokit.Connection/<Delete>d__40")]
public sealed virtual Task`1<HttpStatusCode> Delete(Uri uri, object data, string accepts);
    public sealed virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data);
    public sealed virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data, string accepts);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
private void set_BaseAddress(Uri value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
private void set_UserAgent(string value);
    public sealed virtual ICredentialStore get_CredentialStore();
    public sealed virtual Credentials get_Credentials();
    public sealed virtual void set_Credentials(Credentials value);
    [AsyncStateMachineAttribute("Octokit.Connection/<GetHtml>d__56")]
private Task`1<IApiResponse`1<string>> GetHtml(IRequest request);
    [AsyncStateMachineAttribute("Octokit.Connection/<Run>d__57`1")]
private Task`1<IApiResponse`1<T>> Run(IRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.Connection/<RunRequest>d__58")]
private Task`1<IResponse> RunRequest(IRequest request, CancellationToken cancellationToken);
    private static void HandleErrors(IResponse response);
    private static Exception GetExceptionForUnauthorized(IResponse response);
    private static Exception GetExceptionForForbidden(IResponse response);
    internal static TwoFactorType ParseTwoFactorType(IResponse restResponse);
    private static string FormatUserAgent(ProductHeaderValue productInformation);
    private static string GetPlatformInformation();
    private static string GetCultureInformation();
    private static string GetVersionInformation();
    public sealed virtual void SetRequestTimeout(TimeSpan timeout);
}
public abstract class Octokit.ContentRequest : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    public string Message { get; private set; }
    public string Branch { get; public set; }
    public Committer Committer { get; public set; }
    public Committer Author { get; public set; }
    protected ContentRequest(string message);
    protected ContentRequest(string message, string branch);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
public void set_Committer(Committer value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(Committer value);
}
public enum Octokit.ContentType : Enum {
    public int value__;
    [ParameterAttribute]
public static ContentType File;
    [ParameterAttribute]
public static ContentType Dir;
    [ParameterAttribute]
public static ContentType Symlink;
    [ParameterAttribute]
public static ContentType Submodule;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Contributor : object {
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<WeeklyHash> <Weeks>k__BackingField;
    public Author Author { get; protected set; }
    public int Total { get; protected set; }
    public IReadOnlyList`1<WeeklyHash> Weeks { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Contributor(Author author, int total, IReadOnlyList`1<WeeklyHash> weeks);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
protected void set_Author(Author value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
protected void set_Total(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<WeeklyHash> get_Weeks();
    [CompilerGeneratedAttribute]
protected void set_Weeks(IReadOnlyList`1<WeeklyHash> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.CreateFileRequest : ContentRequest {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Content { get; private set; }
    internal string DebuggerDisplay { get; }
    public CreateFileRequest(string message, string content);
    public CreateFileRequest(string message, string content, string branch);
    public CreateFileRequest(string message, string content, bool convertContentToBase64);
    public CreateFileRequest(string message, string content, string branch, bool convertContentToBase64);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    internal virtual string get_DebuggerDisplay();
}
public class Octokit.Credentials : object {
    public static Credentials Anonymous;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationType <AuthenticationType>k__BackingField;
    public string Login { get; private set; }
    public string Password { get; private set; }
    public AuthenticationType AuthenticationType { get; private set; }
    public Credentials(string login, string password);
    public Credentials(string login, string password, AuthenticationType authenticationType);
    public Credentials(string token);
    public Credentials(string token, AuthenticationType authenticationType);
    private static Credentials();
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
private void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    [CompilerGeneratedAttribute]
public AuthenticationType get_AuthenticationType();
    [CompilerGeneratedAttribute]
private void set_AuthenticationType(AuthenticationType value);
}
[ExtensionAttribute]
public static class Octokit.CredentialsExtensions : object {
    [ExtensionAttribute]
public static string GetToken(Credentials credentials);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DateRange : object {
    private string query;
    internal string DebuggerDisplay { get; }
    public DateRange(DateTime date, SearchQualifierOperator op);
    public DateRange(DateTime from, DateTime to);
    internal string get_DebuggerDisplay();
    public static DateRange LessThan(DateTime date);
    public static DateRange LessThanOrEquals(DateTime date);
    public static DateRange GreaterThan(DateTime date);
    public static DateRange GreaterThanOrEquals(DateTime date);
    public static DateRange Between(DateTime from, DateTime to);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DeleteFileRequest : ContentRequest {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Sha { get; private set; }
    internal string DebuggerDisplay { get; }
    public DeleteFileRequest(string message, string sha);
    public DeleteFileRequest(string message, string sha, string branch);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DeployKey : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public int Id { get; protected set; }
    public string Key { get; protected set; }
    public string Url { get; protected set; }
    public string Title { get; protected set; }
    internal string DebuggerDisplay { get; }
    public DeployKey(int id, string key, string url, string title);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
protected void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Deployment : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransientEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProductionEnvironment>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Sha { get; protected set; }
    public string Url { get; protected set; }
    public User Creator { get; protected set; }
    public IReadOnlyDictionary`2<string, string> Payload { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public string Description { get; protected set; }
    public string StatusesUrl { get; protected set; }
    public bool TransientEnvironment { get; protected set; }
    public bool ProductionEnvironment { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Deployment(int id, string nodeId, string sha, string url, User creator, IReadOnlyDictionary`2<string, string> payload, DateTimeOffset createdAt, DateTimeOffset updatedAt, string description, string statusesUrl, bool transientEnvironment, bool productionEnvironment);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
protected void set_Creator(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Payload();
    [CompilerGeneratedAttribute]
protected void set_Payload(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_StatusesUrl();
    [CompilerGeneratedAttribute]
protected void set_StatusesUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_TransientEnvironment();
    [CompilerGeneratedAttribute]
protected void set_TransientEnvironment(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProductionEnvironment();
    [CompilerGeneratedAttribute]
protected void set_ProductionEnvironment(bool value);
    internal string get_DebuggerDisplay();
}
public class Octokit.DeploymentsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IDeploymentStatusClient <Status>k__BackingField;
    public IDeploymentStatusClient Status { get; public set; }
    public DeploymentsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<Deployment> Create(string owner, string name, NewDeployment newDeployment);
    public sealed virtual Task`1<Deployment> Create(long repositoryId, NewDeployment newDeployment);
    [CompilerGeneratedAttribute]
public sealed virtual IDeploymentStatusClient get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(IDeploymentStatusClient value);
}
public enum Octokit.DeploymentState : Enum {
    public int value__;
    [ParameterAttribute]
public static DeploymentState Pending;
    [ParameterAttribute]
public static DeploymentState Success;
    [ParameterAttribute]
public static DeploymentState Error;
    [ParameterAttribute]
public static DeploymentState Failure;
    [ParameterAttribute]
public static DeploymentState Inactive;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DeploymentStatus : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<DeploymentState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public StringEnum`1<DeploymentState> State { get; protected set; }
    public User Creator { get; protected set; }
    public IReadOnlyDictionary`2<string, string> Payload { get; protected set; }
    public string TargetUrl { get; protected set; }
    public string LogUrl { get; protected set; }
    public string EnvironmentUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public string Description { get; protected set; }
    internal string DebuggerDisplay { get; }
    public DeploymentStatus(int id, string nodeId, string url, DeploymentState state, User creator, IReadOnlyDictionary`2<string, string> payload, string targetUrl, string logUrl, string environmentUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, string description);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<DeploymentState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<DeploymentState> value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
protected void set_Creator(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Payload();
    [CompilerGeneratedAttribute]
protected void set_Payload(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
protected void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LogUrl();
    [CompilerGeneratedAttribute]
protected void set_LogUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentUrl();
    [CompilerGeneratedAttribute]
protected void set_EnvironmentUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.DeploymentStatusClient : ApiClient {
    public DeploymentStatusClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, int deploymentId);
    public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, int deploymentId);
    public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, int deploymentId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, int deploymentId, ApiOptions options);
    public sealed virtual Task`1<DeploymentStatus> Create(string owner, string name, int deploymentId, NewDeploymentStatus newDeploymentStatus);
    public sealed virtual Task`1<DeploymentStatus> Create(long repositoryId, int deploymentId, NewDeploymentStatus newDeploymentStatus);
}
public enum Octokit.DeployTask : Enum {
    public int value__;
    [ParameterAttribute]
public static DeployTask Deploy;
    [ParameterAttribute]
public static DeployTask DeployMigrations;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.DraftPullRequestReviewComment : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public string Body { get; private set; }
    public string Path { get; private set; }
    public int Position { get; private set; }
    internal string DebuggerDisplay { get; }
    public DraftPullRequestReviewComment(string body, string path, int position);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EditRepositoryHook : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AddEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RemoveEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Active>k__BackingField;
    public IDictionary`2<string, string> Config { get; private set; }
    public IEnumerable`1<string> Events { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> AddEvents { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<string> RemoveEvents { get; public set; }
    public Nullable`1<bool> Active { get; public set; }
    internal string DebuggerDisplay { get; }
    public EditRepositoryHook(IDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AddEvents();
    [CompilerGeneratedAttribute]
public void set_AddEvents(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RemoveEvents();
    [CompilerGeneratedAttribute]
public void set_RemoveEvents(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EmailAddress : object {
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<EmailVisibility>> <Visibility>k__BackingField;
    public string Email { get; protected set; }
    public bool Verified { get; protected set; }
    public bool Primary { get; protected set; }
    public Nullable`1<StringEnum`1<EmailVisibility>> Visibility { get; protected set; }
    internal string DebuggerDisplay { get; }
    public EmailAddress(string email, bool verified, bool primary, EmailVisibility visibility);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    [CompilerGeneratedAttribute]
public bool get_Verified();
    [CompilerGeneratedAttribute]
protected void set_Verified(bool value);
    [CompilerGeneratedAttribute]
public bool get_Primary();
    [CompilerGeneratedAttribute]
protected void set_Primary(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<EmailVisibility>> get_Visibility();
    [CompilerGeneratedAttribute]
protected void set_Visibility(Nullable`1<StringEnum`1<EmailVisibility>> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.EmailVisibility : Enum {
    public int value__;
    [ParameterAttribute]
public static EmailVisibility Public;
    [ParameterAttribute]
public static EmailVisibility Private;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Emoji : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Name { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    public Emoji(string name, string url);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.EncodingType : Enum {
    public int value__;
    [ParameterAttribute]
public static EncodingType Utf8;
    [ParameterAttribute]
public static EncodingType Base64;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EnforceAdmins : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; protected set; }
    internal string DebuggerDisplay { get; }
    public EnforceAdmins(bool enabled);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
protected void set_Enabled(bool value);
    internal string get_DebuggerDisplay();
}
internal static class Octokit.Ensure : object {
    public static void ArgumentNotNull(object value, string name);
    public static void ArgumentNotNullOrEmptyString(string value, string name);
    public static void GreaterThanZero(TimeSpan value, string name);
    public static void ArgumentNotNullOrEmptyEnumerable(IEnumerable`1<T> value, string name);
}
public class Octokit.EnterpriseAdminStatsClient : ApiClient {
    public EnterpriseAdminStatsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<AdminStatsIssues> GetStatisticsIssues();
    public sealed virtual Task`1<AdminStatsHooks> GetStatisticsHooks();
    public sealed virtual Task`1<AdminStatsMilestones> GetStatisticsMilestones();
    public sealed virtual Task`1<AdminStatsOrgs> GetStatisticsOrgs();
    public sealed virtual Task`1<AdminStatsComments> GetStatisticsComments();
    public sealed virtual Task`1<AdminStatsPages> GetStatisticsPages();
    public sealed virtual Task`1<AdminStatsUsers> GetStatisticsUsers();
    public sealed virtual Task`1<AdminStatsGists> GetStatisticsGists();
    public sealed virtual Task`1<AdminStatsPulls> GetStatisticsPulls();
    public sealed virtual Task`1<AdminStatsRepos> GetStatisticsRepos();
    public sealed virtual Task`1<AdminStats> GetStatisticsAll();
}
public class Octokit.EnterpriseClient : ApiClient {
    [CompilerGeneratedAttribute]
private IEnterpriseAdminStatsClient <AdminStats>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseLdapClient <Ldap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseLicenseClient <License>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseOrganizationClient <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseSearchIndexingClient <SearchIndexing>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterprisePreReceiveEnvironmentsClient <PreReceiveEnvironment>k__BackingField;
    public IEnterpriseAdminStatsClient AdminStats { get; private set; }
    public IEnterpriseLdapClient Ldap { get; private set; }
    public IEnterpriseLicenseClient License { get; private set; }
    public IEnterpriseOrganizationClient Organization { get; private set; }
    public IEnterpriseSearchIndexingClient SearchIndexing { get; private set; }
    public IEnterprisePreReceiveEnvironmentsClient PreReceiveEnvironment { get; private set; }
    public EnterpriseClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseAdminStatsClient get_AdminStats();
    [CompilerGeneratedAttribute]
private void set_AdminStats(IEnterpriseAdminStatsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseLdapClient get_Ldap();
    [CompilerGeneratedAttribute]
private void set_Ldap(IEnterpriseLdapClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseLicenseClient get_License();
    [CompilerGeneratedAttribute]
private void set_License(IEnterpriseLicenseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseOrganizationClient get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(IEnterpriseOrganizationClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseSearchIndexingClient get_SearchIndexing();
    [CompilerGeneratedAttribute]
private void set_SearchIndexing(IEnterpriseSearchIndexingClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterprisePreReceiveEnvironmentsClient get_PreReceiveEnvironment();
    [CompilerGeneratedAttribute]
private void set_PreReceiveEnvironment(IEnterprisePreReceiveEnvironmentsClient value);
}
public class Octokit.EnterpriseLdapClient : ApiClient {
    public EnterpriseLdapClient(IApiConnection apiConnection);
    public sealed virtual Task`1<User> UpdateUserMapping(string userName, NewLdapMapping newLdapMapping);
    [AsyncStateMachineAttribute("Octokit.EnterpriseLdapClient/<QueueSyncUserMapping>d__2")]
public sealed virtual Task`1<LdapSyncResponse> QueueSyncUserMapping(string userName);
    public sealed virtual Task`1<Team> UpdateTeamMapping(int teamId, NewLdapMapping newLdapMapping);
    [AsyncStateMachineAttribute("Octokit.EnterpriseLdapClient/<QueueSyncTeamMapping>d__4")]
public sealed virtual Task`1<LdapSyncResponse> QueueSyncTeamMapping(int teamId);
}
public class Octokit.EnterpriseLicenseClient : ApiClient {
    public EnterpriseLicenseClient(IApiConnection apiConnection);
    public sealed virtual Task`1<LicenseInfo> Get();
}
public class Octokit.EnterpriseOrganizationClient : ApiClient {
    public EnterpriseOrganizationClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Organization> Create(NewOrganization newOrganization);
}
public class Octokit.EnterprisePreReceiveEnvironmentsClient : ApiClient {
    public EnterprisePreReceiveEnvironmentsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll();
    public sealed virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll(ApiOptions options);
    public sealed virtual Task`1<PreReceiveEnvironment> Get(long environmentId);
    public sealed virtual Task`1<PreReceiveEnvironment> Create(NewPreReceiveEnvironment newPreReceiveEnvironment);
    public sealed virtual Task`1<PreReceiveEnvironment> Edit(long environmentId, UpdatePreReceiveEnvironment updatePreReceiveEnvironment);
    public sealed virtual Task Delete(long environmentId);
    public sealed virtual Task`1<PreReceiveEnvironmentDownload> DownloadStatus(long environmentId);
    public sealed virtual Task`1<PreReceiveEnvironmentDownload> TriggerDownload(long environmentId);
}
public class Octokit.EnterpriseProbe : object {
    private static Uri endPoint;
    private ProductHeaderValue productHeader;
    private IHttpClient httpClient;
    public EnterpriseProbe(ProductHeaderValue productInformation);
    public EnterpriseProbe(ProductHeaderValue productInformation, IHttpClient httpClient);
    private static EnterpriseProbe();
    [AsyncStateMachineAttribute("Octokit.EnterpriseProbe/<Probe>d__5")]
public sealed virtual Task`1<EnterpriseProbeResult> Probe(Uri enterpriseBaseUrl);
    private static bool IsEnterpriseResponse(IResponse response);
}
public enum Octokit.EnterpriseProbeResult : Enum {
    public int value__;
    public static EnterpriseProbeResult Ok;
    public static EnterpriseProbeResult NotFound;
    public static EnterpriseProbeResult Failed;
}
public class Octokit.EnterpriseSearchIndexingClient : ApiClient {
    public EnterpriseSearchIndexingClient(IApiConnection apiConnection);
    public sealed virtual Task`1<SearchIndexingResponse> Queue(string owner);
    public sealed virtual Task`1<SearchIndexingResponse> Queue(string owner, string repository);
    public sealed virtual Task`1<SearchIndexingResponse> QueueAll(string owner);
    public sealed virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner, string repository);
    public sealed virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner);
    public sealed virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner, string repository);
    public sealed virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner);
}
[ExtensionAttribute]
internal static class Octokit.EnumExtensions : object {
    [ExtensionAttribute]
internal static string ToParameter(Enum prop);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.EventInfo : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EventInfoState> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public User Actor { get; protected set; }
    public User Assignee { get; protected set; }
    public Label Label { get; protected set; }
    public StringEnum`1<EventInfoState> Event { get; protected set; }
    public string CommitId { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public EventInfo(int id, string nodeId, string url, User actor, User assignee, Label label, EventInfoState event, string commitId, DateTimeOffset createdAt);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
protected void set_Actor(User value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
protected void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public Label get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(Label value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EventInfoState> get_Event();
    [CompilerGeneratedAttribute]
protected void set_Event(StringEnum`1<EventInfoState> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
protected void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.EventInfoState : Enum {
    public int value__;
    [ParameterAttribute]
public static EventInfoState Closed;
    [ParameterAttribute]
public static EventInfoState Reopened;
    [ParameterAttribute]
public static EventInfoState Subscribed;
    [ParameterAttribute]
public static EventInfoState Merged;
    [ParameterAttribute]
public static EventInfoState Referenced;
    [ParameterAttribute]
public static EventInfoState Mentioned;
    [ParameterAttribute]
public static EventInfoState Assigned;
    [ParameterAttribute]
public static EventInfoState Unassigned;
    [ParameterAttribute]
public static EventInfoState Labeled;
    [ParameterAttribute]
public static EventInfoState Unlabeled;
    [ParameterAttribute]
public static EventInfoState Milestoned;
    [ParameterAttribute]
public static EventInfoState Demilestoned;
    [ParameterAttribute]
public static EventInfoState Renamed;
    [ParameterAttribute]
public static EventInfoState Locked;
    [ParameterAttribute]
public static EventInfoState Unlocked;
    [ParameterAttribute]
public static EventInfoState HeadRefDeleted;
    [ParameterAttribute]
public static EventInfoState HeadRefRestored;
    [ParameterAttribute]
public static EventInfoState ReviewDismissed;
    [ParameterAttribute]
public static EventInfoState ReviewRequested;
    [ParameterAttribute]
public static EventInfoState ReviewRequestRemoved;
    [ParameterAttribute]
public static EventInfoState AddedToProject;
    [ParameterAttribute]
public static EventInfoState MovedColumnsInProject;
    [ParameterAttribute]
public static EventInfoState RemovedFromProject;
    [ParameterAttribute]
public static EventInfoState ConvertedNoteToIssue;
    [ParameterAttribute]
public static EventInfoState Unsubscribed;
    [ParameterAttribute]
public static EventInfoState Commented;
    [ParameterAttribute]
public static EventInfoState Committed;
    [ParameterAttribute]
public static EventInfoState BaseRefChanged;
    [ParameterAttribute]
public static EventInfoState Crossreferenced;
    [ParameterAttribute]
public static EventInfoState Reviewed;
    [ParameterAttribute]
public static EventInfoState LineCommented;
    [ParameterAttribute]
public static EventInfoState CommitCommented;
    [ParameterAttribute]
public static EventInfoState MarkedAsDuplicate;
    [ParameterAttribute]
public static EventInfoState UnmarkedAsDuplicate;
    [ParameterAttribute]
public static EventInfoState CommentDeleted;
}
public class Octokit.EventsClient : ApiClient {
    public EventsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAll();
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAll(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization);
    public sealed virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization, ApiOptions options);
}
[AttributeUsageAttribute("4")]
public class Octokit.ExcludeFromCtorWithAllPropertiesConventionTestAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Properties>k__BackingField;
    public String[] Properties { get; private set; }
    public ExcludeFromCtorWithAllPropertiesConventionTestAttribute(String[] properties);
    [CompilerGeneratedAttribute]
public String[] get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(String[] value);
}
[AttributeUsageAttribute("64")]
public class Octokit.ExcludeFromPaginationApiOptionsConventionTestAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    public string Note { get; private set; }
    public ExcludeFromPaginationApiOptionsConventionTestAttribute(string note);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
private void set_Note(string value);
}
[AttributeUsageAttribute("64")]
public class Octokit.ExcludeFromPaginationNamingConventionTestAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    public string Note { get; private set; }
    public ExcludeFromPaginationNamingConventionTestAttribute(string note);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
private void set_Note(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Feed : object {
    [CompilerGeneratedAttribute]
private string <TimelineUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserPublicUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserActorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserOrganizationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLinks <Links>k__BackingField;
    public string TimelineUrl { get; protected set; }
    public string UserUrl { get; protected set; }
    public string CurrentUserPublicUrl { get; protected set; }
    public string CurrentUserUrl { get; protected set; }
    public string CurrentUserActorUrl { get; protected set; }
    public string CurrentUserOrganizationUrl { get; protected set; }
    [ParameterAttribute]
public FeedLinks Links { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Feed(string timelineUrl, string userUrl, string currentUserPublicUrl, string currentUserUrl, string currentUserActorUrl, string currentUserOrganizationUrl, FeedLinks links);
    [CompilerGeneratedAttribute]
public string get_TimelineUrl();
    [CompilerGeneratedAttribute]
protected void set_TimelineUrl(string value);
    [CompilerGeneratedAttribute]
public string get_UserUrl();
    [CompilerGeneratedAttribute]
protected void set_UserUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserPublicUrl();
    [CompilerGeneratedAttribute]
protected void set_CurrentUserPublicUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserUrl();
    [CompilerGeneratedAttribute]
protected void set_CurrentUserUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserActorUrl();
    [CompilerGeneratedAttribute]
protected void set_CurrentUserActorUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUserOrganizationUrl();
    [CompilerGeneratedAttribute]
protected void set_CurrentUserOrganizationUrl(string value);
    [CompilerGeneratedAttribute]
public FeedLinks get_Links();
    [CompilerGeneratedAttribute]
protected void set_Links(FeedLinks value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.FeedLink : object {
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Href { get; protected set; }
    public string Type { get; protected set; }
    internal string DebuggerDisplay { get; }
    public FeedLink(string href, string type);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
protected void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.FeedLinks : object {
    [CompilerGeneratedAttribute]
private FeedLink <Timeline>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <User>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUserPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUser>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUserActor>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedLink <CurrentUserOrganization>k__BackingField;
    public FeedLink Timeline { get; protected set; }
    public FeedLink User { get; protected set; }
    public FeedLink CurrentUserPublic { get; protected set; }
    public FeedLink CurrentUser { get; protected set; }
    public FeedLink CurrentUserActor { get; protected set; }
    public FeedLink CurrentUserOrganization { get; protected set; }
    internal string DebuggerDisplay { get; }
    public FeedLinks(FeedLink timeline, FeedLink user, FeedLink currentUserPublic, FeedLink currentUser, FeedLink currentUserActor, FeedLink currentUserOrganization);
    [CompilerGeneratedAttribute]
public FeedLink get_Timeline();
    [CompilerGeneratedAttribute]
protected void set_Timeline(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_User();
    [CompilerGeneratedAttribute]
protected void set_User(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUserPublic();
    [CompilerGeneratedAttribute]
protected void set_CurrentUserPublic(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUser();
    [CompilerGeneratedAttribute]
protected void set_CurrentUser(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUserActor();
    [CompilerGeneratedAttribute]
protected void set_CurrentUserActor(FeedLink value);
    [CompilerGeneratedAttribute]
public FeedLink get_CurrentUserOrganization();
    [CompilerGeneratedAttribute]
protected void set_CurrentUserOrganization(FeedLink value);
    internal string get_DebuggerDisplay();
}
public class Octokit.FeedsClient : ApiClient {
    public FeedsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Feed> GetFeeds();
}
public static class Octokit.FileMode : object {
    public static string File;
    public static string Executable;
    public static string Subdirectory;
    public static string Submodule;
    public static string Symlink;
}
public class Octokit.FollowersClient : ApiClient {
    public FollowersClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string login);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string login, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.FollowersClient/<IsFollowingForCurrent>d__9")]
public sealed virtual Task`1<bool> IsFollowingForCurrent(string following);
    [AsyncStateMachineAttribute("Octokit.FollowersClient/<IsFollowing>d__10")]
public sealed virtual Task`1<bool> IsFollowing(string login, string following);
    [AsyncStateMachineAttribute("Octokit.FollowersClient/<Follow>d__11")]
public sealed virtual Task`1<bool> Follow(string login);
    public sealed virtual Task Unfollow(string login);
}
public class Octokit.ForbiddenException : ApiException {
    public string Message { get; }
    public ForbiddenException(IResponse response);
    public ForbiddenException(IResponse response, Exception innerException);
    protected ForbiddenException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ForkEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private Repository <Forkee>k__BackingField;
    public Repository Forkee { get; protected set; }
    [CompilerGeneratedAttribute]
public Repository get_Forkee();
    [CompilerGeneratedAttribute]
protected void set_Forkee(Repository value);
}
public enum Octokit.ForkQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static ForkQualifier OnlyForks;
    [ParameterAttribute]
public static ForkQualifier IncludeForks;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Gist : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Public>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, GistFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitPullUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitPushUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GistFork> <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GistHistory> <History>k__BackingField;
    public string Url { get; protected set; }
    public string Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Description { get; protected set; }
    public bool Public { get; protected set; }
    public User Owner { get; protected set; }
    public IReadOnlyDictionary`2<string, GistFile> Files { get; protected set; }
    public int Comments { get; protected set; }
    public string CommentsUrl { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string GitPullUrl { get; protected set; }
    public string GitPushUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public IReadOnlyList`1<GistFork> Forks { get; protected set; }
    public IReadOnlyList`1<GistHistory> History { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Gist(string url, string id, string nodeId, string description, bool public, User owner, IReadOnlyDictionary`2<string, GistFile> files, int comments, string commentsUrl, string htmlUrl, string gitPullUrl, string gitPushUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, IReadOnlyList`1<GistFork> forks, IReadOnlyList`1<GistHistory> history);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Public();
    [CompilerGeneratedAttribute]
protected void set_Public(bool value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
protected void set_Owner(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, GistFile> get_Files();
    [CompilerGeneratedAttribute]
protected void set_Files(IReadOnlyDictionary`2<string, GistFile> value);
    [CompilerGeneratedAttribute]
public int get_Comments();
    [CompilerGeneratedAttribute]
protected void set_Comments(int value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
protected void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitPullUrl();
    [CompilerGeneratedAttribute]
protected void set_GitPullUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitPushUrl();
    [CompilerGeneratedAttribute]
protected void set_GitPushUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GistFork> get_Forks();
    [CompilerGeneratedAttribute]
protected void set_Forks(IReadOnlyList`1<GistFork> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GistHistory> get_History();
    [CompilerGeneratedAttribute]
protected void set_History(IReadOnlyList`1<GistHistory> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistChangeStatus : object {
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public int Deletions { get; protected set; }
    public int Additions { get; protected set; }
    public int Total { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GistChangeStatus(int deletions, int additions, int total);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
protected void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
protected void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
protected void set_Total(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistComment : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string Body { get; protected set; }
    public User User { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GistComment(int id, string nodeId, string url, string body, User user, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GistCommentsClient : ApiClient {
    public GistCommentsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<GistComment> Get(string gistId, int commentId);
    public sealed virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId);
    public sealed virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId, ApiOptions options);
    public sealed virtual Task`1<GistComment> Create(string gistId, string comment);
    public sealed virtual Task`1<GistComment> Update(string gistId, int commentId, string comment);
    public sealed virtual Task Delete(string gistId, int commentId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistFile : object {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    public int Size { get; protected set; }
    public string Filename { get; protected set; }
    public string Type { get; protected set; }
    public string Language { get; protected set; }
    public string Content { get; protected set; }
    public string RawUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GistFile(int size, string filename, string type, string language, string content, string rawUrl);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(int value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
protected void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
protected void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_RawUrl();
    [CompilerGeneratedAttribute]
protected void set_RawUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistFileUpdate : object {
    [CompilerGeneratedAttribute]
private string <NewFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string NewFileName { get; public set; }
    public string Content { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_NewFileName();
    [CompilerGeneratedAttribute]
public void set_NewFileName(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistFork : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    public string NodeId { get; protected set; }
    public User User { get; protected set; }
    public string Url { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GistFork(string nodeId, User user, string url, DateTimeOffset createdAt);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistHistory : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private GistChangeStatus <ChangeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CommittedAt>k__BackingField;
    public string Url { get; protected set; }
    public string Version { get; protected set; }
    public User User { get; protected set; }
    public GistChangeStatus ChangeStatus { get; protected set; }
    public DateTimeOffset CommittedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GistHistory(string url, string version, User user, GistChangeStatus changeStatus, DateTimeOffset committedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public GistChangeStatus get_ChangeStatus();
    [CompilerGeneratedAttribute]
protected void set_ChangeStatus(GistChangeStatus value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CommittedAt();
    [CompilerGeneratedAttribute]
protected void set_CommittedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Since>k__BackingField;
    public DateTimeOffset Since { get; public set; }
    internal string DebuggerDisplay { get; }
    public GistRequest(DateTimeOffset since);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GistsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IGistCommentsClient <Comment>k__BackingField;
    public IGistCommentsClient Comment { get; public set; }
    public GistsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IGistCommentsClient get_Comment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Comment(IGistCommentsClient value);
    public sealed virtual Task`1<Gist> Get(string id);
    public sealed virtual Task`1<Gist> Create(NewGist newGist);
    public sealed virtual Task`1<Gist> Fork(string id);
    public sealed virtual Task Delete(string id);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll();
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic();
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred();
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since);
    public sealed virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string id);
    public sealed virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string id, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string id);
    public sealed virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string id, ApiOptions options);
    public sealed virtual Task`1<Gist> Edit(string id, GistUpdate gistUpdate);
    public sealed virtual Task Star(string id);
    public sealed virtual Task Unstar(string id);
    [AsyncStateMachineAttribute("Octokit.GistsClient/<IsStarred>d__32")]
public sealed virtual Task`1<bool> IsStarred(string id);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GistUpdate : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, GistFileUpdate> <Files>k__BackingField;
    public string Description { get; public set; }
    public IDictionary`2<string, GistFileUpdate> Files { get; private set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, GistFileUpdate> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IDictionary`2<string, GistFileUpdate> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GitDatabaseClient : ApiClient {
    [CompilerGeneratedAttribute]
private IBlobsClient <Blob>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreesClient <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private ITagsClient <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommitsClient <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferencesClient <Reference>k__BackingField;
    public IBlobsClient Blob { get; private set; }
    public ITreesClient Tree { get; private set; }
    public ITagsClient Tag { get; private set; }
    public ICommitsClient Commit { get; private set; }
    public IReferencesClient Reference { get; private set; }
    public GitDatabaseClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IBlobsClient get_Blob();
    [CompilerGeneratedAttribute]
private void set_Blob(IBlobsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreesClient get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(ITreesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ITagsClient get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(ITagsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommitsClient get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(ICommitsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IReferencesClient get_Reference();
    [CompilerGeneratedAttribute]
private void set_Reference(IReferencesClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubApp : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public long Id { get; protected set; }
    public string Name { get; protected set; }
    public User Owner { get; protected set; }
    public string Description { get; protected set; }
    public string ExternalUrl { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GitHubApp(long id, string name, User owner, string description, string externalUrl, string htmlUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
protected void set_Owner(User value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalUrl();
    [CompilerGeneratedAttribute]
protected void set_ExternalUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public class Octokit.GitHubAppsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IGitHubAppInstallationsClient <Installation>k__BackingField;
    public IGitHubAppInstallationsClient Installation { get; }
    public GitHubAppsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IGitHubAppInstallationsClient get_Installation();
    public sealed virtual Task`1<GitHubApp> Get(string slug);
    public sealed virtual Task`1<GitHubApp> GetCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent(ApiOptions options);
    [ObsoleteAttribute("This method will be removed in a future release.  Please use GetInstallationForCurrent() instead")]
public sealed virtual Task`1<Installation> GetInstallation(long installationId);
    public sealed virtual Task`1<Installation> GetInstallationForCurrent(long installationId);
    [AsyncStateMachineAttribute("Octokit.GitHubAppsClient/<GetAllInstallationsForCurrentUser>d__10")]
public sealed virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser();
    [AsyncStateMachineAttribute("Octokit.GitHubAppsClient/<GetAllInstallationsForCurrentUser>d__11")]
public sealed virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser(ApiOptions options);
    public sealed virtual Task`1<AccessToken> CreateInstallationToken(long installationId);
    public sealed virtual Task`1<Installation> GetOrganizationInstallationForCurrent(string organization);
    public sealed virtual Task`1<Installation> GetRepositoryInstallationForCurrent(string owner, string repo);
    public sealed virtual Task`1<Installation> GetRepositoryInstallationForCurrent(long repositoryId);
    public sealed virtual Task`1<Installation> GetUserInstallationForCurrent(string user);
}
public class Octokit.GitHubClient : object {
    public static Uri GitHubApiUrl;
    internal static Uri GitHubDotComUrl;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthorizationsClient <Authorization>k__BackingField;
    [CompilerGeneratedAttribute]
private IActivitiesClient <Activity>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssuesClient <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationClient <Migration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMiscellaneousClient <Miscellaneous>k__BackingField;
    [CompilerGeneratedAttribute]
private IOauthClient <Oauth>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationsClient <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestsClient <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoriesClient <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IGistsClient <Gist>k__BackingField;
    [CompilerGeneratedAttribute]
private IUsersClient <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitDatabaseClient <Git>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitHubAppsClient <GitHubApps>k__BackingField;
    [CompilerGeneratedAttribute]
private ISearchClient <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnterpriseClient <Enterprise>k__BackingField;
    [CompilerGeneratedAttribute]
private IReactionsClient <Reaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IChecksClient <Check>k__BackingField;
    public Credentials Credentials { get; public set; }
    public Uri BaseAddress { get; }
    public IConnection Connection { get; private set; }
    public IAuthorizationsClient Authorization { get; private set; }
    public IActivitiesClient Activity { get; private set; }
    public IIssuesClient Issue { get; private set; }
    public IMigrationClient Migration { get; private set; }
    public IMiscellaneousClient Miscellaneous { get; private set; }
    public IOauthClient Oauth { get; private set; }
    public IOrganizationsClient Organization { get; private set; }
    public IPullRequestsClient PullRequest { get; private set; }
    public IRepositoriesClient Repository { get; private set; }
    public IGistsClient Gist { get; private set; }
    public IUsersClient User { get; private set; }
    public IGitDatabaseClient Git { get; private set; }
    public IGitHubAppsClient GitHubApps { get; private set; }
    public ISearchClient Search { get; private set; }
    public IEnterpriseClient Enterprise { get; private set; }
    public IReactionsClient Reaction { get; private set; }
    public IChecksClient Check { get; private set; }
    public GitHubClient(ProductHeaderValue productInformation);
    public GitHubClient(ProductHeaderValue productInformation, ICredentialStore credentialStore);
    public GitHubClient(ProductHeaderValue productInformation, Uri baseAddress);
    public GitHubClient(ProductHeaderValue productInformation, ICredentialStore credentialStore, Uri baseAddress);
    public GitHubClient(IConnection connection);
    private static GitHubClient();
    public sealed virtual void SetRequestTimeout(TimeSpan timeout);
    public sealed virtual ApiInfo GetLastApiInfo();
    public Credentials get_Credentials();
    public void set_Credentials(Credentials value);
    public Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    [CompilerGeneratedAttribute]
public sealed virtual IAuthorizationsClient get_Authorization();
    [CompilerGeneratedAttribute]
private void set_Authorization(IAuthorizationsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IActivitiesClient get_Activity();
    [CompilerGeneratedAttribute]
private void set_Activity(IActivitiesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssuesClient get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(IIssuesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationClient get_Migration();
    [CompilerGeneratedAttribute]
private void set_Migration(IMigrationClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMiscellaneousClient get_Miscellaneous();
    [CompilerGeneratedAttribute]
private void set_Miscellaneous(IMiscellaneousClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOauthClient get_Oauth();
    [CompilerGeneratedAttribute]
private void set_Oauth(IOauthClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationsClient get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(IOrganizationsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestsClient get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(IPullRequestsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoriesClient get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(IRepositoriesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IGistsClient get_Gist();
    [CompilerGeneratedAttribute]
private void set_Gist(IGistsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUsersClient get_User();
    [CompilerGeneratedAttribute]
private void set_User(IUsersClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IGitDatabaseClient get_Git();
    [CompilerGeneratedAttribute]
private void set_Git(IGitDatabaseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IGitHubAppsClient get_GitHubApps();
    [CompilerGeneratedAttribute]
private void set_GitHubApps(IGitHubAppsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ISearchClient get_Search();
    [CompilerGeneratedAttribute]
private void set_Search(ISearchClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterpriseClient get_Enterprise();
    [CompilerGeneratedAttribute]
private void set_Enterprise(IEnterpriseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IReactionsClient get_Reaction();
    [CompilerGeneratedAttribute]
private void set_Reaction(IReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IChecksClient get_Check();
    [CompilerGeneratedAttribute]
private void set_Check(IChecksClient value);
    private static Uri FixUpBaseUri(Uri uri);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubCommit : GitReference {
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommitStats <Stats>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitHubCommitFile> <Files>k__BackingField;
    public Author Author { get; protected set; }
    public string CommentsUrl { get; protected set; }
    public Commit Commit { get; protected set; }
    public Author Committer { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public GitHubCommitStats Stats { get; protected set; }
    public IReadOnlyList`1<GitReference> Parents { get; protected set; }
    public IReadOnlyList`1<GitHubCommitFile> Files { get; protected set; }
    public GitHubCommit(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, Author author, string commentsUrl, Commit commit, Author committer, string htmlUrl, GitHubCommitStats stats, IReadOnlyList`1<GitReference> parents, IReadOnlyList`1<GitHubCommitFile> files);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
protected void set_Author(Author value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
protected void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public Author get_Committer();
    [CompilerGeneratedAttribute]
protected void set_Committer(Author value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public GitHubCommitStats get_Stats();
    [CompilerGeneratedAttribute]
protected void set_Stats(GitHubCommitStats value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
protected void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitHubCommitFile> get_Files();
    [CompilerGeneratedAttribute]
protected void set_Files(IReadOnlyList`1<GitHubCommitFile> value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubCommitFile : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousFileName>k__BackingField;
    public string Filename { get; protected set; }
    public int Additions { get; protected set; }
    public int Deletions { get; protected set; }
    public int Changes { get; protected set; }
    public string Status { get; protected set; }
    public string BlobUrl { get; protected set; }
    public string ContentsUrl { get; protected set; }
    public string RawUrl { get; protected set; }
    public string Sha { get; protected set; }
    public string Patch { get; protected set; }
    [ParameterAttribute]
public string PreviousFileName { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GitHubCommitFile(string filename, int additions, int deletions, int changes, string status, string blobUrl, string contentsUrl, string rawUrl, string sha, string patch, string previousFileName);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
protected void set_Filename(string value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
protected void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
protected void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Changes();
    [CompilerGeneratedAttribute]
protected void set_Changes(int value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    [CompilerGeneratedAttribute]
public string get_BlobUrl();
    [CompilerGeneratedAttribute]
protected void set_BlobUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContentsUrl();
    [CompilerGeneratedAttribute]
protected void set_ContentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RawUrl();
    [CompilerGeneratedAttribute]
protected void set_RawUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Patch();
    [CompilerGeneratedAttribute]
protected void set_Patch(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousFileName();
    [CompilerGeneratedAttribute]
protected void set_PreviousFileName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitHubCommitStats : object {
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public int Additions { get; protected set; }
    public int Deletions { get; protected set; }
    public int Total { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GitHubCommitStats(int additions, int deletions, int total);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
protected void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
protected void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
protected void set_Total(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitIgnoreTemplate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    public string Name { get; protected set; }
    public string Source { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GitIgnoreTemplate(string name, string source);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
protected void set_Source(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitReference : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string Label { get; protected set; }
    public string Ref { get; protected set; }
    public string Sha { get; protected set; }
    public User User { get; protected set; }
    [ParameterAttribute]
public Repository Repository { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GitReference(string nodeId, string url, string label, string ref, string sha, User user, Repository repository);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
protected void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GitTag : GitReference {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Tagger>k__BackingField;
    [CompilerGeneratedAttribute]
private TagObject <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private Verification <Verification>k__BackingField;
    public string Tag { get; protected set; }
    public string Message { get; protected set; }
    public Committer Tagger { get; protected set; }
    public TagObject Object { get; protected set; }
    public Verification Verification { get; protected set; }
    public GitTag(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, string tag, string message, Committer tagger, TagObject object, Verification verification);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
protected void set_Tag(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public Committer get_Tagger();
    [CompilerGeneratedAttribute]
protected void set_Tagger(Committer value);
    [CompilerGeneratedAttribute]
public TagObject get_Object();
    [CompilerGeneratedAttribute]
protected void set_Object(TagObject value);
    [CompilerGeneratedAttribute]
public Verification get_Verification();
    [CompilerGeneratedAttribute]
protected void set_Verification(Verification value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.GpgKey : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PrimaryKeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<EmailAddress> <Emails>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GpgKey> <Subkeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanSign>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanEncryptCommunications>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanEncryptStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCertify>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpiresAt>k__BackingField;
    public int Id { get; protected set; }
    public Nullable`1<int> PrimaryKeyId { get; protected set; }
    public string KeyId { get; protected set; }
    public string PublicKey { get; protected set; }
    public IReadOnlyList`1<EmailAddress> Emails { get; protected set; }
    public IReadOnlyList`1<GpgKey> Subkeys { get; protected set; }
    public bool CanSign { get; protected set; }
    [ParameterAttribute]
public bool CanEncryptCommunications { get; protected set; }
    public bool CanEncryptStorage { get; protected set; }
    public bool CanCertify { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> ExpiresAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public GpgKey(int id, Nullable`1<int> primaryKeyId, string keyId, string publicKey, IReadOnlyList`1<EmailAddress> emails, IReadOnlyList`1<GpgKey> subkeys, bool canSign, bool canEncryptCommunications, bool canEncryptStorage, bool canCertify, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> expiresAt);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PrimaryKeyId();
    [CompilerGeneratedAttribute]
protected void set_PrimaryKeyId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
protected void set_KeyId(string value);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
protected void set_PublicKey(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<EmailAddress> get_Emails();
    [CompilerGeneratedAttribute]
protected void set_Emails(IReadOnlyList`1<EmailAddress> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GpgKey> get_Subkeys();
    [CompilerGeneratedAttribute]
protected void set_Subkeys(IReadOnlyList`1<GpgKey> value);
    [CompilerGeneratedAttribute]
public bool get_CanSign();
    [CompilerGeneratedAttribute]
protected void set_CanSign(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanEncryptCommunications();
    [CompilerGeneratedAttribute]
protected void set_CanEncryptCommunications(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanEncryptStorage();
    [CompilerGeneratedAttribute]
protected void set_CanEncryptStorage(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanCertify();
    [CompilerGeneratedAttribute]
protected void set_CanCertify(bool value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ExpiresAt();
    [CompilerGeneratedAttribute]
protected void set_ExpiresAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
public static class Octokit.Helpers.ReferenceExtensions : object {
    [AsyncStateMachineAttribute("Octokit.Helpers.ReferenceExtensions/<CreateBranch>d__0")]
[ExtensionAttribute]
public static Task`1<Reference> CreateBranch(IReferencesClient referencesClient, string owner, string name, string branchName, Reference baseReference);
    [AsyncStateMachineAttribute("Octokit.Helpers.ReferenceExtensions/<CreateBranch>d__1")]
[ExtensionAttribute]
public static Task`1<Reference> CreateBranch(IReferencesClient referencesClient, string owner, string name, string branchName);
}
[AttributeUsageAttribute("384")]
public class Octokit.Helpers.SerializeAsBase64Attribute : Attribute {
}
[ExtensionAttribute]
public static class Octokit.Helpers.UnixTimestampExtensions : object {
    private static DateTimeOffset epoch;
    private static UnixTimestampExtensions();
    [ExtensionAttribute]
public static DateTimeOffset FromUnixTime(long unixTime);
    [ExtensionAttribute]
public static long ToUnixTime(DateTimeOffset date);
}
[ExtensionAttribute]
public static class Octokit.HttpClientExtensions : object {
    [ExtensionAttribute]
public static Task`1<IResponse> Send(IHttpClient httpClient, IRequest request);
}
public interface Octokit.IActivitiesClient {
    public IEventsClient Events { get; }
    public IStarredClient Starring { get; }
    public IWatchedClient Watching { get; }
    public IFeedsClient Feeds { get; }
    public INotificationsClient Notifications { get; }
    public abstract virtual IEventsClient get_Events();
    public abstract virtual IStarredClient get_Starring();
    public abstract virtual IWatchedClient get_Watching();
    public abstract virtual IFeedsClient get_Feeds();
    public abstract virtual INotificationsClient get_Notifications();
}
public interface Octokit.IApiConnection {
    public IConnection Connection { get; }
    public abstract virtual IConnection get_Connection();
    public abstract virtual Task`1<T> Get(Uri uri);
    public abstract virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<T> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public abstract virtual Task`1<string> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, string accepts);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAll(Uri uri, IDictionary`2<string, string> parameters, string accepts, ApiOptions options);
    public abstract virtual Task Post(Uri uri);
    public abstract virtual Task`1<T> Post(Uri uri);
    public abstract virtual Task`1<T> Post(Uri uri, object data);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<T> Post(Uri uri, object data, string accepts, string contentType, TimeSpan timeout);
    public abstract virtual Task Put(Uri uri);
    public abstract virtual Task`1<T> Put(Uri uri, object data);
    public abstract virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<T> Put(Uri uri, object data, string twoFactorAuthenticationCode, string accepts);
    public abstract virtual Task Patch(Uri uri);
    public abstract virtual Task Patch(Uri uri, string accepts);
    public abstract virtual Task`1<T> Patch(Uri uri, object data);
    public abstract virtual Task`1<T> Patch(Uri uri, object data, string accepts);
    public abstract virtual Task Delete(Uri uri);
    public abstract virtual Task Delete(Uri uri, string twoFactorAuthenticationCode);
    public abstract virtual Task Delete(Uri uri, object data);
    public abstract virtual Task Delete(Uri uri, object data, string accepts);
    public abstract virtual Task`1<T> Delete(Uri uri, object data);
    public abstract virtual Task`1<T> Delete(Uri uri, string accepts);
    public abstract virtual Task`1<T> Delete(Uri uri, object data, string accepts);
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetQueuedOperation(Uri uri, CancellationToken cancellationToken);
}
public interface Octokit.IApiInfoProvider {
    public abstract virtual ApiInfo GetLastApiInfo();
}
public interface Octokit.IApiPagination {
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetAllPages(Func`1<Task`1<IReadOnlyPagedCollection`1<T>>> getFirstPage, Uri uri);
}
public interface Octokit.IApiResponse`1 {
    public T Body { get; }
    public IResponse HttpResponse { get; }
    public abstract virtual T get_Body();
    public abstract virtual IResponse get_HttpResponse();
}
public interface Octokit.IAssigneesClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<bool> CheckAssignee(string owner, string name, string assignee);
    public abstract virtual Task`1<Issue> AddAssignees(string owner, string name, int number, AssigneesUpdate assignees);
    public abstract virtual Task`1<Issue> RemoveAssignees(string owner, string name, int number, AssigneesUpdate assignees);
    public abstract virtual Task`1<bool> CheckAssignee(long repositoryId, string assignee);
}
public interface Octokit.IAuthorizationsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Authorization>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<Authorization>> GetAll(ApiOptions options);
    public abstract virtual Task`1<Authorization> Get(int id);
    public abstract virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization);
    public abstract virtual Task`1<ApplicationAuthorization> Create(NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization);
    public abstract virtual Task`1<ApplicationAuthorization> Create(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization);
    public abstract virtual Task`1<ApplicationAuthorization> GetOrCreateApplicationAuthentication(string clientId, string clientSecret, NewAuthorization newAuthorization, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<ApplicationAuthorization> CheckApplicationAuthentication(string clientId, string accessToken);
    public abstract virtual Task`1<ApplicationAuthorization> ResetApplicationAuthentication(string clientId, string accessToken);
    public abstract virtual Task RevokeApplicationAuthentication(string clientId, string accessToken);
    public abstract virtual Task`1<Authorization> Update(int id, AuthorizationUpdate authorizationUpdate);
    public abstract virtual Task Delete(int id);
    public abstract virtual Task Delete(int id, string twoFactorAuthenticationCode);
}
public interface Octokit.IBlobsClient {
    public abstract virtual Task`1<Blob> Get(string owner, string name, string reference);
    public abstract virtual Task`1<Blob> Get(long repositoryId, string reference);
    public abstract virtual Task`1<BlobReference> Create(string owner, string name, NewBlob newBlob);
    public abstract virtual Task`1<BlobReference> Create(long repositoryId, NewBlob newBlob);
}
public interface Octokit.ICheckRunsClient {
    public abstract virtual Task`1<CheckRun> Create(string owner, string name, NewCheckRun newCheckRun);
    public abstract virtual Task`1<CheckRun> Create(long repositoryId, NewCheckRun newCheckRun);
    public abstract virtual Task`1<CheckRun> Update(string owner, string name, long checkRunId, CheckRunUpdate checkRunUpdate);
    public abstract virtual Task`1<CheckRun> Update(long repositoryId, long checkRunId, CheckRunUpdate checkRunUpdate);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(string owner, string name, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForReference(long repositoryId, string reference, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(string owner, string name, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRunsResponse> GetAllForCheckSuite(long repositoryId, long checkSuiteId, CheckRunRequest checkRunRequest, ApiOptions options);
    public abstract virtual Task`1<CheckRun> Get(string owner, string name, long checkRunId);
    public abstract virtual Task`1<CheckRun> Get(long repositoryId, long checkRunId);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(string owner, string name, long checkRunId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CheckRunAnnotation>> GetAllAnnotations(long repositoryId, long checkRunId, ApiOptions options);
}
public interface Octokit.IChecksClient {
    public ICheckRunsClient Run { get; }
    public ICheckSuitesClient Suite { get; }
    public abstract virtual ICheckRunsClient get_Run();
    public abstract virtual ICheckSuitesClient get_Suite();
}
public interface Octokit.ICheckSuitesClient {
    public abstract virtual Task`1<CheckSuite> Get(string owner, string name, long checkSuiteId);
    public abstract virtual Task`1<CheckSuite> Get(long repositoryId, long checkSuiteId);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference, CheckSuiteRequest request);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(string owner, string name, string reference, CheckSuiteRequest request, ApiOptions options);
    public abstract virtual Task`1<CheckSuitesResponse> GetAllForReference(long repositoryId, string reference, CheckSuiteRequest request, ApiOptions options);
    public abstract virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(string owner, string name, CheckSuitePreferences preferences);
    public abstract virtual Task`1<CheckSuitePreferencesResponse> UpdatePreferences(long repositoryId, CheckSuitePreferences preferences);
    public abstract virtual Task`1<CheckSuite> Create(string owner, string name, NewCheckSuite newCheckSuite);
    public abstract virtual Task`1<CheckSuite> Create(long repositoryId, NewCheckSuite newCheckSuite);
    [ObsoleteAttribute("This method has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
public abstract virtual Task`1<bool> Request(string owner, string name, CheckSuiteTriggerRequest request);
    [ObsoleteAttribute("This method has been deprecated in the GitHub Api, however can still be used on GitHub Enterprise 2.14")]
public abstract virtual Task`1<bool> Request(long repositoryId, CheckSuiteTriggerRequest request);
    public abstract virtual Task`1<bool> Rerequest(string owner, string name, long checkSuiteId);
    public abstract virtual Task`1<bool> Rerequest(long repositoryId, long checkSuiteId);
}
public interface Octokit.ICommitCommentReactionsClient {
    public abstract virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
}
public interface Octokit.ICommitsClient {
    public abstract virtual Task`1<Commit> Get(string owner, string name, string reference);
    public abstract virtual Task`1<Commit> Get(long repositoryId, string reference);
    public abstract virtual Task`1<Commit> Create(string owner, string name, NewCommit commit);
    public abstract virtual Task`1<Commit> Create(long repositoryId, NewCommit commit);
}
public interface Octokit.ICommitStatusClient {
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(string owner, string name, string reference, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitStatus>> GetAll(long repositoryId, string reference, ApiOptions options);
    public abstract virtual Task`1<CombinedCommitStatus> GetCombined(string owner, string name, string reference);
    public abstract virtual Task`1<CombinedCommitStatus> GetCombined(long repositoryId, string reference);
    public abstract virtual Task`1<CommitStatus> Create(string owner, string name, string reference, NewCommitStatus newCommitStatus);
    public abstract virtual Task`1<CommitStatus> Create(long repositoryId, string reference, NewCommitStatus newCommitStatus);
}
public interface Octokit.IConnection {
    public Uri BaseAddress { get; }
    public ICredentialStore CredentialStore { get; }
    public Credentials Credentials { get; public set; }
    public abstract virtual Task`1<IApiResponse`1<string>> GetHtml(Uri uri, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, IDictionary`2<string, string> parameters, string accepts, CancellationToken cancellationToken);
    public abstract virtual Task`1<IApiResponse`1<T>> Get(Uri uri, TimeSpan timeout);
    public abstract virtual Task`1<HttpStatusCode> Patch(Uri uri);
    public abstract virtual Task`1<HttpStatusCode> Patch(Uri uri, string accepts);
    public abstract virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body);
    public abstract virtual Task`1<IApiResponse`1<T>> Patch(Uri uri, object body, string accepts);
    public abstract virtual Task`1<HttpStatusCode> Post(Uri uri);
    public abstract virtual Task`1<HttpStatusCode> Post(Uri uri, object body, string accepts);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, IDictionary`2<string, string> parameters);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, TimeSpan timeout);
    public abstract virtual Task`1<IApiResponse`1<T>> Post(Uri uri, object body, string accepts, string contentType, Uri baseAddress);
    public abstract virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body);
    public abstract virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<IApiResponse`1<T>> Put(Uri uri, object body, string twoFactorAuthenticationCode, string accepts);
    public abstract virtual Task`1<HttpStatusCode> Put(Uri uri);
    public abstract virtual Task`1<HttpStatusCode> Put(Uri uri, string accepts);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri, string twoFactorAuthenticationCode);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri, object data);
    public abstract virtual Task`1<HttpStatusCode> Delete(Uri uri, object data, string accepts);
    public abstract virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data);
    public abstract virtual Task`1<IApiResponse`1<T>> Delete(Uri uri, object data, string accepts);
    public abstract virtual Uri get_BaseAddress();
    public abstract virtual ICredentialStore get_CredentialStore();
    public abstract virtual Credentials get_Credentials();
    public abstract virtual void set_Credentials(Credentials value);
    public abstract virtual void SetRequestTimeout(TimeSpan timeout);
}
public interface Octokit.ICredentialStore {
    public abstract virtual Task`1<Credentials> GetCredentials();
}
public interface Octokit.IDeploymentsClient {
    public IDeploymentStatusClient Status { get; }
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Deployment>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<Deployment> Create(string owner, string name, NewDeployment newDeployment);
    public abstract virtual Task`1<Deployment> Create(long repositoryId, NewDeployment newDeployment);
    public abstract virtual IDeploymentStatusClient get_Status();
}
public interface Octokit.IDeploymentStatusClient {
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, int deploymentId);
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, int deploymentId);
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(string owner, string name, int deploymentId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<DeploymentStatus>> GetAll(long repositoryId, int deploymentId, ApiOptions options);
    public abstract virtual Task`1<DeploymentStatus> Create(string owner, string name, int deploymentId, NewDeploymentStatus newDeploymentStatus);
    public abstract virtual Task`1<DeploymentStatus> Create(long repositoryId, int deploymentId, NewDeploymentStatus newDeploymentStatus);
}
public interface Octokit.IEnterpriseAdminStatsClient {
    public abstract virtual Task`1<AdminStatsIssues> GetStatisticsIssues();
    public abstract virtual Task`1<AdminStatsHooks> GetStatisticsHooks();
    public abstract virtual Task`1<AdminStatsMilestones> GetStatisticsMilestones();
    public abstract virtual Task`1<AdminStatsOrgs> GetStatisticsOrgs();
    public abstract virtual Task`1<AdminStatsComments> GetStatisticsComments();
    public abstract virtual Task`1<AdminStatsPages> GetStatisticsPages();
    public abstract virtual Task`1<AdminStatsUsers> GetStatisticsUsers();
    public abstract virtual Task`1<AdminStatsGists> GetStatisticsGists();
    public abstract virtual Task`1<AdminStatsPulls> GetStatisticsPulls();
    public abstract virtual Task`1<AdminStatsRepos> GetStatisticsRepos();
    public abstract virtual Task`1<AdminStats> GetStatisticsAll();
}
public interface Octokit.IEnterpriseClient {
    public IEnterpriseAdminStatsClient AdminStats { get; }
    public IEnterpriseLdapClient Ldap { get; }
    public IEnterpriseLicenseClient License { get; }
    public IEnterpriseOrganizationClient Organization { get; }
    public IEnterpriseSearchIndexingClient SearchIndexing { get; }
    public IEnterprisePreReceiveEnvironmentsClient PreReceiveEnvironment { get; }
    public abstract virtual IEnterpriseAdminStatsClient get_AdminStats();
    public abstract virtual IEnterpriseLdapClient get_Ldap();
    public abstract virtual IEnterpriseLicenseClient get_License();
    public abstract virtual IEnterpriseOrganizationClient get_Organization();
    public abstract virtual IEnterpriseSearchIndexingClient get_SearchIndexing();
    public abstract virtual IEnterprisePreReceiveEnvironmentsClient get_PreReceiveEnvironment();
}
public interface Octokit.IEnterpriseLdapClient {
    public abstract virtual Task`1<User> UpdateUserMapping(string userName, NewLdapMapping newLdapMapping);
    public abstract virtual Task`1<LdapSyncResponse> QueueSyncUserMapping(string userName);
    public abstract virtual Task`1<Team> UpdateTeamMapping(int teamId, NewLdapMapping newLdapMapping);
    public abstract virtual Task`1<LdapSyncResponse> QueueSyncTeamMapping(int teamId);
}
public interface Octokit.IEnterpriseLicenseClient {
    public abstract virtual Task`1<LicenseInfo> Get();
}
public interface Octokit.IEnterpriseOrganizationClient {
    public abstract virtual Task`1<Organization> Create(NewOrganization newOrganization);
}
public interface Octokit.IEnterprisePreReceiveEnvironmentsClient {
    public abstract virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<PreReceiveEnvironment>> GetAll(ApiOptions options);
    public abstract virtual Task`1<PreReceiveEnvironment> Get(long environmentId);
    public abstract virtual Task`1<PreReceiveEnvironment> Create(NewPreReceiveEnvironment newPreReceiveEnvironment);
    public abstract virtual Task`1<PreReceiveEnvironment> Edit(long environmentId, UpdatePreReceiveEnvironment updatePreReceiveEnvironment);
    public abstract virtual Task Delete(long environmentId);
    public abstract virtual Task`1<PreReceiveEnvironmentDownload> DownloadStatus(long environmentId);
    public abstract virtual Task`1<PreReceiveEnvironmentDownload> TriggerDownload(long environmentId);
}
public interface Octokit.IEnterpriseProbe {
    public abstract virtual Task`1<EnterpriseProbeResult> Probe(Uri enterpriseBaseUrl);
}
public interface Octokit.IEnterpriseSearchIndexingClient {
    public abstract virtual Task`1<SearchIndexingResponse> Queue(string owner);
    public abstract virtual Task`1<SearchIndexingResponse> Queue(string owner, string repository);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAll(string owner);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner, string repository);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllIssues(string owner);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner, string repository);
    public abstract virtual Task`1<SearchIndexingResponse> QueueAllCode(string owner);
}
public interface Octokit.IEventsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAll(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllIssuesForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForRepositoryNetwork(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceived(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserReceivedPublic(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformed(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllUserPerformedPublic(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Activity>> GetAllForAnOrganization(string user, string organization, ApiOptions options);
}
public interface Octokit.IFeedsClient {
    public abstract virtual Task`1<Feed> GetFeeds();
}
public interface Octokit.IFollowersClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string login);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string login, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowingForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllFollowing(string login, ApiOptions options);
    public abstract virtual Task`1<bool> IsFollowingForCurrent(string following);
    public abstract virtual Task`1<bool> IsFollowing(string login, string following);
    public abstract virtual Task`1<bool> Follow(string login);
    public abstract virtual Task Unfollow(string login);
}
public interface Octokit.IGistCommentsClient {
    public abstract virtual Task`1<GistComment> Get(string gistId, int commentId);
    public abstract virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId);
    public abstract virtual Task`1<IReadOnlyList`1<GistComment>> GetAllForGist(string gistId, ApiOptions options);
    public abstract virtual Task`1<GistComment> Create(string gistId, string comment);
    public abstract virtual Task`1<GistComment> Update(string gistId, int commentId, string comment);
    public abstract virtual Task Delete(string gistId, int commentId);
}
public interface Octokit.IGistsClient {
    public IGistCommentsClient Comment { get; public set; }
    public abstract virtual IGistCommentsClient get_Comment();
    public abstract virtual void set_Comment(IGistCommentsClient value);
    public abstract virtual Task`1<Gist> Get(string id);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAll(DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic();
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllPublic(DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred();
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllStarred(DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since);
    public abstract virtual Task`1<IReadOnlyList`1<Gist>> GetAllForUser(string user, DateTimeOffset since, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string id);
    public abstract virtual Task`1<IReadOnlyList`1<GistHistory>> GetAllCommits(string id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string id);
    public abstract virtual Task`1<IReadOnlyList`1<GistFork>> GetAllForks(string id, ApiOptions options);
    public abstract virtual Task`1<Gist> Create(NewGist newGist);
    public abstract virtual Task`1<Gist> Fork(string id);
    public abstract virtual Task`1<Gist> Edit(string id, GistUpdate gistUpdate);
    public abstract virtual Task Delete(string id);
    public abstract virtual Task Star(string id);
    public abstract virtual Task Unstar(string id);
    public abstract virtual Task`1<bool> IsStarred(string id);
}
public interface Octokit.IGitDatabaseClient {
    public IBlobsClient Blob { get; }
    public ITagsClient Tag { get; }
    public ITreesClient Tree { get; }
    public ICommitsClient Commit { get; }
    public IReferencesClient Reference { get; }
    public abstract virtual IBlobsClient get_Blob();
    public abstract virtual ITagsClient get_Tag();
    public abstract virtual ITreesClient get_Tree();
    public abstract virtual ICommitsClient get_Commit();
    public abstract virtual IReferencesClient get_Reference();
}
public interface Octokit.IGitHubAppInstallationsClient {
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent();
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrent(ApiOptions options);
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId);
    public abstract virtual Task`1<RepositoriesResponse> GetAllRepositoriesForCurrentUser(long installationId, ApiOptions options);
}
public interface Octokit.IGitHubAppsClient {
    public IGitHubAppInstallationsClient Installation { get; }
    public abstract virtual IGitHubAppInstallationsClient get_Installation();
    public abstract virtual Task`1<GitHubApp> Get(string slug);
    public abstract virtual Task`1<GitHubApp> GetCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Installation>> GetAllInstallationsForCurrent(ApiOptions options);
    [ObsoleteAttribute("This method will be removed in a future release.  Please use GetInstallationForCurrent() instead")]
public abstract virtual Task`1<Installation> GetInstallation(long installationId);
    public abstract virtual Task`1<Installation> GetInstallationForCurrent(long installationId);
    public abstract virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser();
    public abstract virtual Task`1<InstallationsResponse> GetAllInstallationsForCurrentUser(ApiOptions options);
    public abstract virtual Task`1<AccessToken> CreateInstallationToken(long installationId);
    public abstract virtual Task`1<Installation> GetOrganizationInstallationForCurrent(string organization);
    public abstract virtual Task`1<Installation> GetRepositoryInstallationForCurrent(string owner, string repo);
    public abstract virtual Task`1<Installation> GetRepositoryInstallationForCurrent(long repositoryId);
    public abstract virtual Task`1<Installation> GetUserInstallationForCurrent(string user);
}
public interface Octokit.IGitHubClient {
    public IConnection Connection { get; }
    public IAuthorizationsClient Authorization { get; }
    public IActivitiesClient Activity { get; }
    public IGitHubAppsClient GitHubApps { get; }
    public IIssuesClient Issue { get; }
    public IMigrationClient Migration { get; }
    public IMiscellaneousClient Miscellaneous { get; }
    public IOauthClient Oauth { get; }
    public IOrganizationsClient Organization { get; }
    public IPullRequestsClient PullRequest { get; }
    public IRepositoriesClient Repository { get; }
    public IGistsClient Gist { get; }
    public IUsersClient User { get; }
    public IGitDatabaseClient Git { get; }
    public ISearchClient Search { get; }
    public IEnterpriseClient Enterprise { get; }
    public IReactionsClient Reaction { get; }
    public IChecksClient Check { get; }
    public abstract virtual void SetRequestTimeout(TimeSpan timeout);
    public abstract virtual IConnection get_Connection();
    public abstract virtual IAuthorizationsClient get_Authorization();
    public abstract virtual IActivitiesClient get_Activity();
    public abstract virtual IGitHubAppsClient get_GitHubApps();
    public abstract virtual IIssuesClient get_Issue();
    public abstract virtual IMigrationClient get_Migration();
    public abstract virtual IMiscellaneousClient get_Miscellaneous();
    public abstract virtual IOauthClient get_Oauth();
    public abstract virtual IOrganizationsClient get_Organization();
    public abstract virtual IPullRequestsClient get_PullRequest();
    public abstract virtual IRepositoriesClient get_Repository();
    public abstract virtual IGistsClient get_Gist();
    public abstract virtual IUsersClient get_User();
    public abstract virtual IGitDatabaseClient get_Git();
    public abstract virtual ISearchClient get_Search();
    public abstract virtual IEnterpriseClient get_Enterprise();
    public abstract virtual IReactionsClient get_Reaction();
    public abstract virtual IChecksClient get_Check();
}
public interface Octokit.IIssueCommentReactionsClient {
    public abstract virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
}
public interface Octokit.IIssueCommentsClient {
    public abstract virtual Task`1<IssueComment> Get(string owner, string name, int id);
    public abstract virtual Task`1<IssueComment> Get(long repositoryId, int id);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
    public abstract virtual Task`1<IssueComment> Create(string owner, string name, int number, string newComment);
    public abstract virtual Task`1<IssueComment> Create(long repositoryId, int number, string newComment);
    public abstract virtual Task`1<IssueComment> Update(string owner, string name, int id, string commentUpdate);
    public abstract virtual Task`1<IssueComment> Update(long repositoryId, int id, string commentUpdate);
    public abstract virtual Task Delete(string owner, string name, int id);
    public abstract virtual Task Delete(long repositoryId, int id);
}
public interface Octokit.IIssueReactionsClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
    public abstract virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
}
public interface Octokit.IIssuesClient {
    public IAssigneesClient Assignee { get; }
    public IIssuesEventsClient Events { get; }
    public IMilestonesClient Milestone { get; }
    public IIssuesLabelsClient Labels { get; }
    public IIssueCommentsClient Comment { get; }
    public IIssueTimelineClient Timeline { get; }
    public abstract virtual IAssigneesClient get_Assignee();
    public abstract virtual IIssuesEventsClient get_Events();
    public abstract virtual IMilestonesClient get_Milestone();
    public abstract virtual IIssuesLabelsClient get_Labels();
    public abstract virtual IIssueCommentsClient get_Comment();
    public abstract virtual IIssueTimelineClient get_Timeline();
    public abstract virtual Task`1<Issue> Get(string owner, string name, int number);
    public abstract virtual Task`1<Issue> Get(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories();
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request, ApiOptions options);
    public abstract virtual Task`1<Issue> Create(string owner, string name, NewIssue newIssue);
    public abstract virtual Task`1<Issue> Create(long repositoryId, NewIssue newIssue);
    public abstract virtual Task`1<Issue> Update(string owner, string name, int number, IssueUpdate issueUpdate);
    public abstract virtual Task`1<Issue> Update(long repositoryId, int number, IssueUpdate issueUpdate);
    public abstract virtual Task Lock(string owner, string name, int number);
    public abstract virtual Task Lock(long repositoryId, int number);
    public abstract virtual Task Unlock(string owner, string name, int number);
    public abstract virtual Task Unlock(long repositoryId, int number);
}
public interface Octokit.IIssuesEventsClient {
    public abstract virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(string owner, string name, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IssueEvent> Get(string owner, string name, int number);
    public abstract virtual Task`1<IssueEvent> Get(long repositoryId, int number);
}
public interface Octokit.IIssuesLabelsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int number, ApiOptions options);
    public abstract virtual Task`1<Label> Get(string owner, string name, string labelName);
    public abstract virtual Task`1<Label> Get(long repositoryId, string labelName);
    public abstract virtual Task Delete(string owner, string name, string labelName);
    public abstract virtual Task Delete(long repositoryId, string labelName);
    public abstract virtual Task`1<Label> Create(string owner, string name, NewLabel newLabel);
    public abstract virtual Task`1<Label> Create(long repositoryId, NewLabel newLabel);
    public abstract virtual Task`1<Label> Update(string owner, string name, string labelName, LabelUpdate labelUpdate);
    public abstract virtual Task`1<Label> Update(long repositoryId, string labelName, LabelUpdate labelUpdate);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(string owner, string name, int number, String[] labels);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(long repositoryId, int number, String[] labels);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(string owner, string name, int number, string labelName);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(long repositoryId, int number, string labelName);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(string owner, string name, int number, String[] labels);
    public abstract virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(long repositoryId, int number, String[] labels);
    public abstract virtual Task RemoveAllFromIssue(string owner, string name, int number);
    public abstract virtual Task RemoveAllFromIssue(long repositoryId, int number);
}
public interface Octokit.IIssueTimelineClient {
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int number);
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal interface Octokit.IJsonSerializerStrategy {
    public abstract virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public abstract virtual object DeserializeObject(object value, Type type);
}
public interface Octokit.IMergingClient {
    public abstract virtual Task`1<Merge> Create(string owner, string name, NewMerge merge);
    public abstract virtual Task`1<Merge> Create(long repositoryId, NewMerge merge);
}
public interface Octokit.IMigrationClient {
    public IMigrationsClient Migrations { get; }
    public abstract virtual IMigrationsClient get_Migrations();
}
public interface Octokit.IMigrationsClient {
    public abstract virtual Task`1<Migration> Start(string org, StartMigrationRequest migration);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<List`1<Migration>> GetAll(string org);
    public abstract virtual Task`1<Migration> Get(string org, int id);
    public abstract virtual Task`1<Byte[]> GetArchive(string org, int id);
    public abstract virtual Task DeleteArchive(string org, int id);
    public abstract virtual Task UnlockRepository(string org, int id, string repo);
}
public interface Octokit.IMilestonesClient {
    public abstract virtual Task`1<Milestone> Get(string owner, string name, int number);
    public abstract virtual Task`1<Milestone> Get(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request, ApiOptions options);
    public abstract virtual Task`1<Milestone> Create(string owner, string name, NewMilestone newMilestone);
    public abstract virtual Task`1<Milestone> Create(long repositoryId, NewMilestone newMilestone);
    public abstract virtual Task`1<Milestone> Update(string owner, string name, int number, MilestoneUpdate milestoneUpdate);
    public abstract virtual Task`1<Milestone> Update(long repositoryId, int number, MilestoneUpdate milestoneUpdate);
    public abstract virtual Task Delete(string owner, string name, int number);
    public abstract virtual Task Delete(long repositoryId, int number);
}
public interface Octokit.IMiscellaneousClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<Emoji>> GetAllEmojis();
    public abstract virtual Task`1<string> RenderRawMarkdown(string markdown);
    public abstract virtual Task`1<string> RenderArbitraryMarkdown(NewArbitraryMarkdown markdown);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<string>> GetAllGitIgnoreTemplates();
    public abstract virtual Task`1<GitIgnoreTemplate> GetGitIgnoreTemplate(string templateName);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses();
    public abstract virtual Task`1<License> GetLicense(string key);
    public abstract virtual Task`1<MiscellaneousRateLimit> GetRateLimits();
    public abstract virtual Task`1<Meta> GetMetadata();
}
public interface Octokit.INotificationsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request, ApiOptions options);
    public abstract virtual Task MarkAsRead();
    public abstract virtual Task MarkAsRead(MarkAsReadRequest markAsReadRequest);
    public abstract virtual Task MarkAsReadForRepository(string owner, string name);
    public abstract virtual Task MarkAsReadForRepository(long repositoryId);
    public abstract virtual Task MarkAsReadForRepository(string owner, string name, MarkAsReadRequest markAsReadRequest);
    public abstract virtual Task MarkAsReadForRepository(long repositoryId, MarkAsReadRequest markAsReadRequest);
    public abstract virtual Task`1<Notification> Get(int id);
    public abstract virtual Task MarkAsRead(int id);
    public abstract virtual Task`1<ThreadSubscription> GetThreadSubscription(int id);
    public abstract virtual Task`1<ThreadSubscription> SetThreadSubscription(int id, NewThreadSubscription threadSubscription);
    public abstract virtual Task DeleteThreadSubscription(int id);
}
public enum Octokit.InQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static InQualifier Name;
    [ParameterAttribute]
public static InQualifier Description;
    [ParameterAttribute]
public static InQualifier Readme;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Installation : InstallationId {
    [CompilerGeneratedAttribute]
private User <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TargetId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<AccountType> <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SingleFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<InstallationRepositorySelection> <RepositorySelection>k__BackingField;
    public User Account { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public long AppId { get; protected set; }
    public long TargetId { get; protected set; }
    public StringEnum`1<AccountType> TargetType { get; protected set; }
    public InstallationPermissions Permissions { get; private set; }
    public IReadOnlyList`1<string> Events { get; private set; }
    public string SingleFileName { get; protected set; }
    public StringEnum`1<InstallationRepositorySelection> RepositorySelection { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Installation(long id, User account, string accessTokenUrl, string repositoriesUrl, string htmlUrl, long appId, long targetId, AccountType targetType, InstallationPermissions permissions, IReadOnlyList`1<string> events, string singleFileName, string repositorySelection);
    [CompilerGeneratedAttribute]
public User get_Account();
    [CompilerGeneratedAttribute]
protected void set_Account(User value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public long get_AppId();
    [CompilerGeneratedAttribute]
protected void set_AppId(long value);
    [CompilerGeneratedAttribute]
public long get_TargetId();
    [CompilerGeneratedAttribute]
protected void set_TargetId(long value);
    [CompilerGeneratedAttribute]
public StringEnum`1<AccountType> get_TargetType();
    [CompilerGeneratedAttribute]
protected void set_TargetType(StringEnum`1<AccountType> value);
    [CompilerGeneratedAttribute]
public InstallationPermissions get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(InstallationPermissions value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_SingleFileName();
    [CompilerGeneratedAttribute]
protected void set_SingleFileName(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<InstallationRepositorySelection> get_RepositorySelection();
    [CompilerGeneratedAttribute]
protected void set_RepositorySelection(StringEnum`1<InstallationRepositorySelection> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InstallationId : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public long Id { get; protected set; }
    internal string DebuggerDisplay { get; }
    public InstallationId(long id);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.InstallationPermissionLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static InstallationPermissionLevel Read;
    [ParameterAttribute]
public static InstallationPermissionLevel Write;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InstallationPermissions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Administration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Statuses>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Deployments>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Issues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <PullRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <SingleFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <RepositoryProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Checks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <OrganizationProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<InstallationPermissionLevel>> <TeamDiscussions>k__BackingField;
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Metadata { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Administration { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Statuses { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Deployments { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Issues { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Pages { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> PullRequests { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Contents { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> SingleFile { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> RepositoryProjects { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Checks { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> Members { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> OrganizationProjects { get; protected set; }
    public Nullable`1<StringEnum`1<InstallationPermissionLevel>> TeamDiscussions { get; protected set; }
    internal string DebuggerDisplay { get; }
    public InstallationPermissions(Nullable`1<InstallationPermissionLevel> metadata, Nullable`1<InstallationPermissionLevel> administration, Nullable`1<InstallationPermissionLevel> statuses, Nullable`1<InstallationPermissionLevel> deployments, Nullable`1<InstallationPermissionLevel> issues, Nullable`1<InstallationPermissionLevel> pages, Nullable`1<InstallationPermissionLevel> pullRequests, Nullable`1<InstallationPermissionLevel> contents, Nullable`1<InstallationPermissionLevel> singleFile, Nullable`1<InstallationPermissionLevel> repositoryProjects, Nullable`1<InstallationPermissionLevel> members, Nullable`1<InstallationPermissionLevel> organizationProjects, Nullable`1<InstallationPermissionLevel> teamDiscussions, Nullable`1<InstallationPermissionLevel> checks);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Metadata();
    [CompilerGeneratedAttribute]
protected void set_Metadata(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Administration();
    [CompilerGeneratedAttribute]
protected void set_Administration(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Statuses();
    [CompilerGeneratedAttribute]
protected void set_Statuses(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Deployments();
    [CompilerGeneratedAttribute]
protected void set_Deployments(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Issues();
    [CompilerGeneratedAttribute]
protected void set_Issues(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Pages();
    [CompilerGeneratedAttribute]
protected void set_Pages(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_PullRequests();
    [CompilerGeneratedAttribute]
protected void set_PullRequests(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Contents();
    [CompilerGeneratedAttribute]
protected void set_Contents(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_SingleFile();
    [CompilerGeneratedAttribute]
protected void set_SingleFile(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_RepositoryProjects();
    [CompilerGeneratedAttribute]
protected void set_RepositoryProjects(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Checks();
    [CompilerGeneratedAttribute]
protected void set_Checks(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_Members();
    [CompilerGeneratedAttribute]
protected void set_Members(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_OrganizationProjects();
    [CompilerGeneratedAttribute]
protected void set_OrganizationProjects(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<InstallationPermissionLevel>> get_TeamDiscussions();
    [CompilerGeneratedAttribute]
protected void set_TeamDiscussions(Nullable`1<StringEnum`1<InstallationPermissionLevel>> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.InstallationRepositorySelection : Enum {
    public int value__;
    [ParameterAttribute]
public static InstallationRepositorySelection All;
    [ParameterAttribute]
public static InstallationRepositorySelection Selected;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InstallationsResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Installation> <Installations>k__BackingField;
    public int TotalCount { get; protected set; }
    public IReadOnlyList`1<Installation> Installations { get; protected set; }
    internal string DebuggerDisplay { get; }
    public InstallationsResponse(int totalCount, IReadOnlyList`1<Installation> installations);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Installation> get_Installations();
    [CompilerGeneratedAttribute]
protected void set_Installations(IReadOnlyList`1<Installation> value);
    internal string get_DebuggerDisplay();
}
internal class Octokit.Internal.AnonymousAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
internal static class Octokit.Internal.ApiInfoParser : object {
    private static RegexOptions regexOptions;
    private static Regex _linkRelRegex;
    private static Regex _linkUriRegex;
    private static ApiInfoParser();
    public static ApiInfo ParseResponseHeaders(IDictionary`2<string, string> responseHeaders);
}
public class Octokit.Internal.ApiResponse`1 : object {
    [CompilerGeneratedAttribute]
private T <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IResponse <HttpResponse>k__BackingField;
    public T Body { get; private set; }
    public IResponse HttpResponse { get; private set; }
    public ApiResponse`1(IResponse response);
    public ApiResponse`1(IResponse response, T bodyAsObject);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(T value);
    [CompilerGeneratedAttribute]
public sealed virtual IResponse get_HttpResponse();
    [CompilerGeneratedAttribute]
private void set_HttpResponse(IResponse value);
    private static T GetBodyAsObject(IResponse response);
}
internal class Octokit.Internal.Authenticator : object {
    private Dictionary`2<AuthenticationType, IAuthenticationHandler> authenticators;
    [CompilerGeneratedAttribute]
private ICredentialStore <CredentialStore>k__BackingField;
    public ICredentialStore CredentialStore { get; public set; }
    public Authenticator(ICredentialStore credentialStore);
    [AsyncStateMachineAttribute("Octokit.Internal.Authenticator/<Apply>d__2")]
public Task Apply(IRequest request);
    [CompilerGeneratedAttribute]
public ICredentialStore get_CredentialStore();
    [CompilerGeneratedAttribute]
public void set_CredentialStore(ICredentialStore value);
}
internal class Octokit.Internal.BasicAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
internal class Octokit.Internal.BearerTokenAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
public class Octokit.Internal.HttpClientAdapter : object {
    private HttpClient _http;
    public static string RedirectCountKey;
    public HttpClientAdapter(Func`1<HttpMessageHandler> getHandler);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<Send>d__3")]
public sealed virtual Task`1<IResponse> Send(IRequest request, CancellationToken cancellationToken);
    private static CancellationToken GetCancellationTokenForRequest(IRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<BuildResponse>d__5")]
protected virtual Task`1<IResponse> BuildResponse(HttpResponseMessage responseMessage);
    protected virtual HttpRequestMessage BuildRequestMessage(IRequest request);
    private static string GetContentMediaType(HttpContent httpContent);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<SendAsync>d__10")]
public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.Internal.HttpClientAdapter/<CloneHttpRequestMessageAsync>d__11")]
public static Task`1<HttpRequestMessage> CloneHttpRequestMessageAsync(HttpRequestMessage oldRequest);
    public sealed virtual void SetRequestTimeout(TimeSpan timeout);
}
public static class Octokit.Internal.HttpMessageHandlerFactory : object {
    public static HttpMessageHandler CreateDefault();
    public static HttpMessageHandler CreateDefault(IWebProxy proxy);
}
internal static class Octokit.Internal.HttpVerb : object {
    private static HttpMethod patch;
    internal static HttpMethod Patch { get; }
    private static HttpVerb();
    internal static HttpMethod get_Patch();
}
internal interface Octokit.Internal.IAuthenticationHandler {
    public abstract virtual void Authenticate(IRequest request, Credentials credentials);
}
public interface Octokit.Internal.IHttpClient {
    public abstract virtual Task`1<IResponse> Send(IRequest request, CancellationToken cancellationToken);
    public abstract virtual void SetRequestTimeout(TimeSpan timeout);
}
public interface Octokit.Internal.IJsonSerializer {
    public abstract virtual string Serialize(object item);
    public abstract virtual T Deserialize(string json);
}
public class Octokit.Internal.InMemoryCredentialStore : object {
    private Credentials _credentials;
    public InMemoryCredentialStore(Credentials credentials);
    public sealed virtual Task`1<Credentials> GetCredentials();
}
public interface Octokit.Internal.IRequest {
    public object Body { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public HttpMethod Method { get; }
    public Dictionary`2<string, string> Parameters { get; }
    public Uri BaseAddress { get; }
    public Uri Endpoint { get; }
    public TimeSpan Timeout { get; }
    public string ContentType { get; }
    public abstract virtual object get_Body();
    public abstract virtual void set_Body(object value);
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual HttpMethod get_Method();
    public abstract virtual Dictionary`2<string, string> get_Parameters();
    public abstract virtual Uri get_BaseAddress();
    public abstract virtual Uri get_Endpoint();
    public abstract virtual TimeSpan get_Timeout();
    public abstract virtual string get_ContentType();
}
public class Octokit.Internal.JsonHttpPipeline : object {
    private IJsonSerializer _serializer;
    public JsonHttpPipeline(IJsonSerializer serializer);
    public void SerializeRequest(IRequest request);
    public IApiResponse`1<T> DeserializeResponse(IResponse response);
}
[AttributeUsageAttribute("384")]
public class Octokit.Internal.ParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Octokit.Internal.ReadOnlyPagedCollection`1 : ReadOnlyCollection`1<T> {
    private ApiInfo _info;
    private Func`2<Uri, Task`1<IApiResponse`1<List`1<T>>>> _nextPageFunc;
    public ReadOnlyPagedCollection`1(IApiResponse`1<List`1<T>> response, Func`2<Uri, Task`1<IApiResponse`1<List`1<T>>>> nextPageFunc);
    [AsyncStateMachineAttribute("Octokit.Internal.ReadOnlyPagedCollection`1/<GetNextPage>d__3")]
public sealed virtual Task`1<IReadOnlyPagedCollection`1<T>> GetNextPage();
}
internal class Octokit.Internal.RedirectHandler : DelegatingHandler {
}
public class Octokit.Internal.Request : object {
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public object Body { get; public set; }
    public Dictionary`2<string, string> Headers { get; private set; }
    public HttpMethod Method { get; public set; }
    public Dictionary`2<string, string> Parameters { get; private set; }
    public Uri BaseAddress { get; public set; }
    public Uri Endpoint { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public string ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual object get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseAddress();
    [CompilerGeneratedAttribute]
public void set_BaseAddress(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
}
internal class Octokit.Internal.Response : object {
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiInfo <ApiInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public object Body { get; private set; }
    public IReadOnlyDictionary`2<string, string> Headers { get; private set; }
    public ApiInfo ApiInfo { get; internal set; }
    public HttpStatusCode StatusCode { get; private set; }
    public string ContentType { get; private set; }
    public Response(IDictionary`2<string, string> headers);
    public Response(HttpStatusCode statusCode, object body, IDictionary`2<string, string> headers, string contentType);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ApiInfo get_ApiInfo();
    [CompilerGeneratedAttribute]
internal void set_ApiInfo(ApiInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
}
public abstract class Octokit.Internal.SearchResult`1 : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncompleteResults>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<T> <Items>k__BackingField;
    public int TotalCount { get; protected set; }
    public bool IncompleteResults { get; protected set; }
    public IReadOnlyList`1<T> Items { get; protected set; }
    internal string DebuggerDisplay { get; }
    protected SearchResult`1(int totalCount, bool incompleteResults, IReadOnlyList`1<T> items);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncompleteResults();
    [CompilerGeneratedAttribute]
protected void set_IncompleteResults(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<T> get_Items();
    [CompilerGeneratedAttribute]
protected void set_Items(IReadOnlyList`1<T> value);
    internal string get_DebuggerDisplay();
}
[AttributeUsageAttribute("384")]
public class Octokit.Internal.SerializeNullAttribute : Attribute {
}
public class Octokit.Internal.SimpleJsonSerializer : object {
    private static GitHubSerializerStrategy _serializationStrategy;
    private static SimpleJsonSerializer();
    public sealed virtual string Serialize(object item);
    public sealed virtual T Deserialize(string json);
    internal static string SerializeEnum(Enum value);
    internal static object DeserializeEnum(string value, Type type);
}
internal class Octokit.Internal.TokenAuthenticator : object {
    public sealed virtual void Authenticate(IRequest request, Credentials credentials);
}
public class Octokit.InvalidGitIgnoreTemplateException : ApiValidationException {
    public string Message { get; }
    public InvalidGitIgnoreTemplateException(ApiValidationException innerException);
    protected InvalidGitIgnoreTemplateException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public enum Octokit.InvitationPermissionType : Enum {
    public int value__;
    [ParameterAttribute]
public static InvitationPermissionType Read;
    [ParameterAttribute]
public static InvitationPermissionType Write;
    [ParameterAttribute]
public static InvitationPermissionType Admin;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.InvitationUpdate : object {
    [CompilerGeneratedAttribute]
private InvitationPermissionType <Permissions>k__BackingField;
    public InvitationPermissionType Permissions { get; private set; }
    internal string DebuggerDisplay { get; }
    public InvitationUpdate(InvitationPermissionType permission);
    [CompilerGeneratedAttribute]
public InvitationPermissionType get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(InvitationPermissionType value);
    internal string get_DebuggerDisplay();
}
public interface Octokit.IOauthClient {
    public abstract virtual Uri GetGitHubLoginUrl(OauthLoginRequest request);
    public abstract virtual Task`1<OauthToken> CreateAccessToken(OauthTokenRequest request);
}
public interface Octokit.IOrganizationMembersClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org, ApiOptions options);
    public abstract virtual Task`1<bool> CheckMember(string org, string user);
    public abstract virtual Task`1<bool> CheckMemberPublic(string org, string user);
    public abstract virtual Task Delete(string org, string user);
    public abstract virtual Task`1<bool> Publicize(string org, string user);
    public abstract virtual Task Conceal(string org, string user);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org, ApiOptions options);
}
public interface Octokit.IOrganizationOutsideCollaboratorsClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    public abstract virtual Task`1<bool> Delete(string org, string user);
    public abstract virtual Task`1<bool> ConvertFromMember(string org, string user);
}
public interface Octokit.IOrganizationsClient {
    public IOrganizationMembersClient Member { get; }
    public ITeamsClient Team { get; }
    public IOrganizationOutsideCollaboratorsClient OutsideCollaborator { get; }
    public abstract virtual IOrganizationMembersClient get_Member();
    public abstract virtual ITeamsClient get_Team();
    public abstract virtual IOrganizationOutsideCollaboratorsClient get_OutsideCollaborator();
    public abstract virtual Task`1<Organization> Get(string org);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user, ApiOptions options);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the OrganizationRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAll();
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the OrganizationRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Organization>> GetAll(OrganizationRequest request);
    public abstract virtual Task`1<Organization> Update(string organizationName, OrganizationUpdate updateRequest);
}
public interface Octokit.IProjectCardsClient {
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request, ApiOptions options);
    public abstract virtual Task`1<ProjectCard> Get(int id);
    public abstract virtual Task`1<ProjectCard> Create(int columnId, NewProjectCard newProjectCard);
    public abstract virtual Task`1<ProjectCard> Update(int id, ProjectCardUpdate projectCardUpdate);
    public abstract virtual Task`1<bool> Delete(int id);
    public abstract virtual Task`1<bool> Move(int id, ProjectCardMove position);
}
public interface Octokit.IProjectColumnsClient {
    public abstract virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId);
    public abstract virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId, ApiOptions options);
    public abstract virtual Task`1<ProjectColumn> Get(int id);
    public abstract virtual Task`1<ProjectColumn> Create(int projectId, NewProjectColumn newProjectColumn);
    public abstract virtual Task`1<ProjectColumn> Update(int id, ProjectColumnUpdate projectColumnUpdate);
    public abstract virtual Task`1<bool> Delete(int id);
    public abstract virtual Task`1<bool> Move(int id, ProjectColumnMove position);
}
public interface Octokit.IProjectsClient {
    public IProjectCardsClient Card { get; }
    public IProjectColumnsClient Column { get; }
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request, ApiOptions options);
    public abstract virtual Task`1<Project> Get(int id);
    public abstract virtual Task`1<Project> CreateForRepository(long repositoryId, NewProject newProject);
    public abstract virtual Task`1<Project> CreateForOrganization(string organization, NewProject newProject);
    public abstract virtual Task`1<Project> Update(int id, ProjectUpdate projectUpdate);
    public abstract virtual Task`1<bool> Delete(int id);
    public abstract virtual IProjectCardsClient get_Card();
    public abstract virtual IProjectColumnsClient get_Column();
}
public interface Octokit.IPullRequestReviewCommentReactionsClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("TODO: Implement pagination for this method")]
public abstract virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
    public abstract virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public abstract virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
}
public interface Octokit.IPullRequestReviewCommentsClient {
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request, ApiOptions options);
    public abstract virtual Task`1<PullRequestReviewComment> GetComment(string owner, string name, int number);
    public abstract virtual Task`1<PullRequestReviewComment> GetComment(long repositoryId, int number);
    public abstract virtual Task`1<PullRequestReviewComment> Create(string owner, string name, int number, PullRequestReviewCommentCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> Create(long repositoryId, int number, PullRequestReviewCommentCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> CreateReply(string owner, string name, int number, PullRequestReviewCommentReplyCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> CreateReply(long repositoryId, int number, PullRequestReviewCommentReplyCreate comment);
    public abstract virtual Task`1<PullRequestReviewComment> Edit(string owner, string name, int number, PullRequestReviewCommentEdit comment);
    public abstract virtual Task`1<PullRequestReviewComment> Edit(long repositoryId, int number, PullRequestReviewCommentEdit comment);
    public abstract virtual Task Delete(string owner, string name, int number);
    public abstract virtual Task Delete(long repositoryId, int number);
}
public interface Octokit.IPullRequestReviewRequestsClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId, int number, ApiOptions options);
    public abstract virtual Task`1<PullRequest> Create(string owner, string name, int number, PullRequestReviewRequest users);
    public abstract virtual Task`1<PullRequest> Create(long repositoryId, int number, PullRequestReviewRequest users);
    public abstract virtual Task Delete(string owner, string name, int number, PullRequestReviewRequest users);
    public abstract virtual Task Delete(long repositoryId, int number, PullRequestReviewRequest users);
}
public interface Octokit.IPullRequestReviewsClient {
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int number, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int number, ApiOptions options);
    public abstract virtual Task`1<PullRequestReview> Get(string owner, string name, int number, long reviewId);
    public abstract virtual Task`1<PullRequestReview> Get(long repositoryId, int number, long reviewId);
    public abstract virtual Task`1<PullRequestReview> Create(string owner, string name, int number, PullRequestReviewCreate review);
    public abstract virtual Task`1<PullRequestReview> Create(long repositoryId, int number, PullRequestReviewCreate review);
    public abstract virtual Task Delete(string owner, string name, int number, long reviewId);
    public abstract virtual Task Delete(long repositoryId, int number, long reviewId);
    public abstract virtual Task`1<PullRequestReview> Submit(string owner, string name, int number, long reviewId, PullRequestReviewSubmit submitMessage);
    public abstract virtual Task`1<PullRequestReview> Submit(long repositoryId, int number, long reviewId, PullRequestReviewSubmit submitMessage);
    public abstract virtual Task`1<PullRequestReview> Dismiss(string owner, string name, int number, long reviewId, PullRequestReviewDismiss dismissMessage);
    public abstract virtual Task`1<PullRequestReview> Dismiss(long repositoryId, int number, long reviewId, PullRequestReviewDismiss dismissMessage);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int number, long reviewId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int number, long reviewId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int number, long reviewId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int number, long reviewId, ApiOptions options);
}
public interface Octokit.IPullRequestsClient {
    public IPullRequestReviewsClient Review { get; }
    public IPullRequestReviewCommentsClient ReviewComment { get; }
    public IPullRequestReviewRequestsClient ReviewRequest { get; }
    public abstract virtual IPullRequestReviewsClient get_Review();
    public abstract virtual IPullRequestReviewCommentsClient get_ReviewComment();
    public abstract virtual IPullRequestReviewRequestsClient get_ReviewRequest();
    public abstract virtual Task`1<PullRequest> Get(string owner, string name, int number);
    public abstract virtual Task`1<PullRequest> Get(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request, ApiOptions options);
    public abstract virtual Task`1<PullRequest> Create(string owner, string name, NewPullRequest newPullRequest);
    public abstract virtual Task`1<PullRequest> Create(long repositoryId, NewPullRequest newPullRequest);
    public abstract virtual Task`1<PullRequest> Update(string owner, string name, int number, PullRequestUpdate pullRequestUpdate);
    public abstract virtual Task`1<PullRequest> Update(long repositoryId, int number, PullRequestUpdate pullRequestUpdate);
    public abstract virtual Task`1<PullRequestMerge> Merge(string owner, string name, int number, MergePullRequest mergePullRequest);
    public abstract virtual Task`1<PullRequestMerge> Merge(long repositoryId, int number, MergePullRequest mergePullRequest);
    public abstract virtual Task`1<bool> Merged(string owner, string name, int number);
    public abstract virtual Task`1<bool> Merged(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(string owner, string name, int number);
    public abstract virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(long repositoryId, int number);
}
public interface Octokit.IReactionsClient {
    public ICommitCommentReactionsClient CommitComment { get; }
    public IIssueReactionsClient Issue { get; }
    public IIssueCommentReactionsClient IssueComment { get; }
    public IPullRequestReviewCommentReactionsClient PullRequestReviewComment { get; }
    public abstract virtual ICommitCommentReactionsClient get_CommitComment();
    public abstract virtual IIssueReactionsClient get_Issue();
    public abstract virtual IIssueCommentReactionsClient get_IssueComment();
    public abstract virtual IPullRequestReviewCommentReactionsClient get_PullRequestReviewComment();
    public abstract virtual Task Delete(int number);
}
public interface Octokit.IReadOnlyPagedCollection`1 {
    public abstract virtual Task`1<IReadOnlyPagedCollection`1<T>> GetNextPage();
}
public interface Octokit.IReferencesClient {
    public abstract virtual Task`1<Reference> Get(string owner, string name, string reference);
    public abstract virtual Task`1<Reference> Get(long repositoryId, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace);
    public abstract virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace, ApiOptions options);
    public abstract virtual Task`1<Reference> Create(string owner, string name, NewReference reference);
    public abstract virtual Task`1<Reference> Create(long repositoryId, NewReference reference);
    public abstract virtual Task`1<Reference> Update(string owner, string name, string reference, ReferenceUpdate referenceUpdate);
    public abstract virtual Task`1<Reference> Update(long repositoryId, string reference, ReferenceUpdate referenceUpdate);
    public abstract virtual Task Delete(string owner, string name, string reference);
    public abstract virtual Task Delete(long repositoryId, string reference);
}
public interface Octokit.IReleasesClient {
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<Release> Get(string owner, string name, int id);
    public abstract virtual Task`1<Release> Get(string owner, string name, string tag);
    public abstract virtual Task`1<Release> Get(long repositoryId, int id);
    public abstract virtual Task`1<Release> Get(long repositoryId, string tag);
    public abstract virtual Task`1<Release> GetLatest(string owner, string name);
    public abstract virtual Task`1<Release> GetLatest(long repositoryId);
    public abstract virtual Task`1<Release> Create(string owner, string name, NewRelease data);
    public abstract virtual Task`1<Release> Create(long repositoryId, NewRelease data);
    public abstract virtual Task`1<Release> Edit(string owner, string name, int id, ReleaseUpdate data);
    public abstract virtual Task`1<Release> Edit(long repositoryId, int id, ReleaseUpdate data);
    public abstract virtual Task Delete(string owner, string name, int id);
    public abstract virtual Task Delete(long repositoryId, int id);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, int id);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, int id);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, int id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, int id, ApiOptions options);
    public abstract virtual Task`1<ReleaseAsset> UploadAsset(Release release, ReleaseAssetUpload data);
    public abstract virtual Task`1<ReleaseAsset> GetAsset(string owner, string name, int assetId);
    public abstract virtual Task`1<ReleaseAsset> GetAsset(long repositoryId, int assetId);
    public abstract virtual Task`1<ReleaseAsset> EditAsset(string owner, string name, int assetId, ReleaseAssetUpdate data);
    public abstract virtual Task`1<ReleaseAsset> EditAsset(long repositoryId, int assetId, ReleaseAssetUpdate data);
    public abstract virtual Task DeleteAsset(string owner, string name, int id);
    public abstract virtual Task DeleteAsset(long repositoryId, int id);
}
public interface Octokit.IRepoCollaboratorsClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<bool> IsCollaborator(string owner, string name, string user);
    public abstract virtual Task`1<bool> IsCollaborator(long repositoryId, string user);
    public abstract virtual Task`1<CollaboratorPermission> ReviewPermission(string owner, string name, string user);
    public abstract virtual Task`1<CollaboratorPermission> ReviewPermission(long repositoryId, string user);
    public abstract virtual Task Add(string owner, string name, string user);
    public abstract virtual Task`1<bool> Add(string owner, string name, string user, CollaboratorRequest permission);
    public abstract virtual Task Add(long repositoryId, string user);
    public abstract virtual Task`1<bool> Add(long repositoryId, string user, CollaboratorRequest permission);
    public abstract virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user);
    public abstract virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user, CollaboratorRequest permission);
    public abstract virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user);
    public abstract virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user, CollaboratorRequest permission);
    public abstract virtual Task Delete(string owner, string name, string user);
    public abstract virtual Task Delete(long repositoryId, string user);
}
public interface Octokit.IRepositoriesClient {
    public IPullRequestsClient PullRequest { get; }
    public IRepositoryBranchesClient Branch { get; }
    public IRepositoryCommentsClient Comment { get; }
    public IRepositoryDeployKeysClient DeployKeys { get; }
    public IRepositoryContentsClient Content { get; }
    public ICommitStatusClient Status { get; }
    public IRepositoryHooksClient Hooks { get; }
    public IRepositoryForksClient Forks { get; }
    public IRepoCollaboratorsClient Collaborator { get; }
    public IDeploymentsClient Deployment { get; }
    public IStatisticsClient Statistics { get; }
    public IRepositoryCommitsClient Commit { get; }
    public IReleasesClient Release { get; }
    public IMergingClient Merging { get; }
    public IRepositoryPagesClient Page { get; }
    public IRepositoryInvitationsClient Invitation { get; }
    public IRepositoryTrafficClient Traffic { get; }
    public IProjectsClient Project { get; }
    public abstract virtual IPullRequestsClient get_PullRequest();
    public abstract virtual IRepositoryBranchesClient get_Branch();
    public abstract virtual IRepositoryCommentsClient get_Comment();
    public abstract virtual IRepositoryDeployKeysClient get_DeployKeys();
    public abstract virtual IRepositoryContentsClient get_Content();
    public abstract virtual Task`1<Repository> Create(NewRepository newRepository);
    public abstract virtual Task`1<Repository> Create(string organizationLogin, NewRepository newRepository);
    public abstract virtual Task Delete(string owner, string name);
    public abstract virtual Task Delete(long repositoryId);
    public abstract virtual Task`1<Repository> Transfer(string owner, string name, RepositoryTransfer repositoryTransfer);
    public abstract virtual Task`1<Repository> Transfer(long repositoryId, RepositoryTransfer repositoryTransfer);
    public abstract virtual Task`1<Repository> Get(string owner, string name);
    public abstract virtual Task`1<Repository> Get(long repositoryId);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the PublicRepositoryRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic();
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("This API call uses the PublicRepositoryRequest.Since parameter for pagination")]
public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic(PublicRepositoryRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization, ApiOptions options);
    public abstract virtual ICommitStatusClient get_Status();
    public abstract virtual IRepositoryHooksClient get_Hooks();
    public abstract virtual IRepositoryForksClient get_Forks();
    public abstract virtual IRepoCollaboratorsClient get_Collaborator();
    public abstract virtual IDeploymentsClient get_Deployment();
    public abstract virtual IStatisticsClient get_Statistics();
    public abstract virtual IRepositoryCommitsClient get_Commit();
    public abstract virtual IReleasesClient get_Release();
    public abstract virtual IMergingClient get_Merging();
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous, ApiOptions options);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<RepositoryContentLicense> GetLicenseContents(string owner, string name);
    public abstract virtual Task`1<RepositoryContentLicense> GetLicenseContents(long repositoryId);
    public abstract virtual Task`1<Repository> Edit(string owner, string name, RepositoryUpdate update);
    public abstract virtual Task`1<Repository> Edit(long repositoryId, RepositoryUpdate update);
    public abstract virtual IRepositoryPagesClient get_Page();
    public abstract virtual IRepositoryInvitationsClient get_Invitation();
    public abstract virtual IRepositoryTrafficClient get_Traffic();
    public abstract virtual IProjectsClient get_Project();
}
public interface Octokit.IRepositoryBranchesClient {
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<Branch> Get(string owner, string name, string branch);
    public abstract virtual Task`1<Branch> Get(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionSettings> GetBranchProtection(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionSettings> GetBranchProtection(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(string owner, string name, string branch, BranchProtectionSettingsUpdate update);
    public abstract virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(long repositoryId, string branch, BranchProtectionSettingsUpdate update);
    public abstract virtual Task`1<bool> DeleteBranchProtection(string owner, string name, string branch);
    public abstract virtual Task`1<bool> DeleteBranchProtection(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(string owner, string name, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    public abstract virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(long repositoryId, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    public abstract virtual Task`1<bool> DeleteRequiredStatusChecks(string owner, string name, string branch);
    public abstract virtual Task`1<bool> DeleteRequiredStatusChecks(long repositoryId, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(string owner, string name, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(long repositoryId, string branch);
    public abstract virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(string owner, string name, string branch, BranchProtectionRequiredReviewsUpdate update);
    public abstract virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(long repositoryId, string branch, BranchProtectionRequiredReviewsUpdate update);
    public abstract virtual Task`1<bool> RemoveReviewEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<bool> RemoveReviewEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<EnforceAdmins> GetAdminEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<EnforceAdmins> GetAdminEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<EnforceAdmins> AddAdminEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<EnforceAdmins> AddAdminEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<bool> RemoveAdminEnforcement(string owner, string name, string branch);
    public abstract virtual Task`1<bool> RemoveAdminEnforcement(long repositoryId, string branch);
    public abstract virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(string owner, string name, string branch);
    public abstract virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(long repositoryId, string branch);
    public abstract virtual Task`1<bool> DeleteProtectedBranchRestrictions(string owner, string name, string branch);
    public abstract virtual Task`1<bool> DeleteProtectedBranchRestrictions(long repositoryId, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(string owner, string name, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(long repositoryId, string branch);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(string owner, string name, string branch);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(long repositoryId, string branch);
    public abstract virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public abstract virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
}
public interface Octokit.IRepositoryCommentsClient {
    public abstract virtual Task`1<CommitComment> Get(string owner, string name, int number);
    public abstract virtual Task`1<CommitComment> Get(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha, ApiOptions options);
    public abstract virtual Task`1<CommitComment> Create(string owner, string name, string sha, NewCommitComment newCommitComment);
    public abstract virtual Task`1<CommitComment> Create(long repositoryId, string sha, NewCommitComment newCommitComment);
    public abstract virtual Task`1<CommitComment> Update(string owner, string name, int number, string commentUpdate);
    public abstract virtual Task`1<CommitComment> Update(long repositoryId, int number, string commentUpdate);
    public abstract virtual Task Delete(string owner, string name, int number);
    public abstract virtual Task Delete(long repositoryId, int number);
}
public interface Octokit.IRepositoryCommitsClient {
    public abstract virtual Task`1<CompareResult> Compare(string owner, string name, string base, string head);
    public abstract virtual Task`1<CompareResult> Compare(long repositoryId, string base, string head);
    public abstract virtual Task`1<GitHubCommit> Get(string owner, string name, string reference);
    public abstract virtual Task`1<GitHubCommit> Get(long repositoryId, string reference);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request, ApiOptions options);
    public abstract virtual Task`1<string> GetSha1(string owner, string name, string reference);
    public abstract virtual Task`1<string> GetSha1(long repositoryId, string reference);
}
public interface Octokit.IRepositoryContentsClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name, string path);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId, string path);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string path, string reference);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string path, string reference);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string reference);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string reference);
    public abstract virtual Task`1<Readme> GetReadme(string owner, string name);
    public abstract virtual Task`1<Readme> GetReadme(long repositoryId);
    public abstract virtual Task`1<string> GetReadmeHtml(string owner, string name);
    public abstract virtual Task`1<string> GetReadmeHtml(long repositoryId);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference);
    public abstract virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    public abstract virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    public abstract virtual Task`1<RepositoryContentChangeSet> CreateFile(string owner, string name, string path, CreateFileRequest request);
    public abstract virtual Task`1<RepositoryContentChangeSet> CreateFile(long repositoryId, string path, CreateFileRequest request);
    public abstract virtual Task`1<RepositoryContentChangeSet> UpdateFile(string owner, string name, string path, UpdateFileRequest request);
    public abstract virtual Task`1<RepositoryContentChangeSet> UpdateFile(long repositoryId, string path, UpdateFileRequest request);
    public abstract virtual Task DeleteFile(string owner, string name, string path, DeleteFileRequest request);
    public abstract virtual Task DeleteFile(long repositoryId, string path, DeleteFileRequest request);
}
public interface Octokit.IRepositoryDeployKeysClient {
    public abstract virtual Task`1<DeployKey> Get(string owner, string name, int number);
    public abstract virtual Task`1<DeployKey> Get(long repositoryId, int number);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<DeployKey> Create(string owner, string name, NewDeployKey newDeployKey);
    public abstract virtual Task`1<DeployKey> Create(long repositoryId, NewDeployKey newDeployKey);
    public abstract virtual Task Delete(string owner, string name, int number);
    public abstract virtual Task Delete(long repositoryId, int number);
}
public interface Octokit.IRepositoryForksClient {
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request, ApiOptions options);
    public abstract virtual Task`1<Repository> Create(string owner, string name, NewRepositoryFork fork);
    public abstract virtual Task`1<Repository> Create(long repositoryId, NewRepositoryFork fork);
}
public interface Octokit.IRepositoryHooksClient {
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<RepositoryHook> Get(string owner, string name, int hookId);
    public abstract virtual Task`1<RepositoryHook> Get(long repositoryId, int hookId);
    public abstract virtual Task`1<RepositoryHook> Create(string owner, string name, NewRepositoryHook hook);
    public abstract virtual Task`1<RepositoryHook> Create(long repositoryId, NewRepositoryHook hook);
    public abstract virtual Task`1<RepositoryHook> Edit(string owner, string name, int hookId, EditRepositoryHook hook);
    public abstract virtual Task`1<RepositoryHook> Edit(long repositoryId, int hookId, EditRepositoryHook hook);
    public abstract virtual Task Test(string owner, string name, int hookId);
    public abstract virtual Task Test(long repositoryId, int hookId);
    public abstract virtual Task Ping(string owner, string name, int hookId);
    public abstract virtual Task Ping(long repositoryId, int hookId);
    public abstract virtual Task Delete(string owner, string name, int hookId);
    public abstract virtual Task Delete(long repositoryId, int hookId);
}
public interface Octokit.IRepositoryInvitationsClient {
    public abstract virtual Task`1<bool> Accept(int invitationId);
    public abstract virtual Task`1<bool> Decline(int invitationId);
    public abstract virtual Task`1<bool> Delete(long repositoryId, int invitationId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<RepositoryInvitation> Edit(long repositoryId, int invitationId, InvitationUpdate permissions);
}
public interface Octokit.IRepositoryPagesClient {
    public abstract virtual Task`1<Page> Get(string owner, string name);
    public abstract virtual Task`1<Page> Get(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<PagesBuild> GetLatest(string owner, string name);
    public abstract virtual Task`1<PagesBuild> GetLatest(long repositoryId);
    public abstract virtual Task`1<PagesBuild> RequestPageBuild(string owner, string name);
    public abstract virtual Task`1<PagesBuild> RequestPageBuild(long repositoryId);
}
public interface Octokit.IRepositoryTrafficClient {
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(long repositoryId);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(string owner, string name);
    [ExcludeFromPaginationApiOptionsConventionTestAttribute("Pagination not supported by GitHub API (tested 29/08/2017)")]
public abstract virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(long repositoryId);
    public abstract virtual Task`1<RepositoryTrafficViewSummary> GetViews(string owner, string name, RepositoryTrafficRequest per);
    public abstract virtual Task`1<RepositoryTrafficViewSummary> GetViews(long repositoryId, RepositoryTrafficRequest per);
    public abstract virtual Task`1<RepositoryTrafficCloneSummary> GetClones(string owner, string name, RepositoryTrafficRequest per);
    public abstract virtual Task`1<RepositoryTrafficCloneSummary> GetClones(long repositoryId, RepositoryTrafficRequest per);
}
public interface Octokit.IResponse {
    public object Body { get; }
    public IReadOnlyDictionary`2<string, string> Headers { get; }
    public ApiInfo ApiInfo { get; }
    public HttpStatusCode StatusCode { get; }
    public string ContentType { get; }
    public abstract virtual object get_Body();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_Headers();
    public abstract virtual ApiInfo get_ApiInfo();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_ContentType();
}
public interface Octokit.ISearchClient {
    public abstract virtual Task`1<SearchRepositoryResult> SearchRepo(SearchRepositoriesRequest search);
    public abstract virtual Task`1<SearchUsersResult> SearchUsers(SearchUsersRequest search);
    public abstract virtual Task`1<SearchIssuesResult> SearchIssues(SearchIssuesRequest search);
    public abstract virtual Task`1<SearchCodeResult> SearchCode(SearchCodeRequest search);
    public abstract virtual Task`1<SearchLabelsResult> SearchLabels(SearchLabelsRequest search);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Issue : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private User <ClosedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Label> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ClosedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string CommentsUrl { get; protected set; }
    public string EventsUrl { get; protected set; }
    public int Number { get; protected set; }
    public StringEnum`1<ItemState> State { get; protected set; }
    public string Title { get; protected set; }
    public string Body { get; protected set; }
    public User ClosedBy { get; protected set; }
    public User User { get; protected set; }
    public IReadOnlyList`1<Label> Labels { get; protected set; }
    public User Assignee { get; protected set; }
    public IReadOnlyList`1<User> Assignees { get; protected set; }
    public Milestone Milestone { get; protected set; }
    public int Comments { get; protected set; }
    public PullRequest PullRequest { get; protected set; }
    public Nullable`1<DateTimeOffset> ClosedAt { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; protected set; }
    public bool Locked { get; protected set; }
    public Repository Repository { get; protected set; }
    public ReactionSummary Reactions { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Issue(string url, string htmlUrl, string commentsUrl, string eventsUrl, int number, ItemState state, string title, string body, User closedBy, User user, IReadOnlyList`1<Label> labels, User assignee, IReadOnlyList`1<User> assignees, Milestone milestone, int comments, PullRequest pullRequest, Nullable`1<DateTimeOffset> closedAt, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt, int id, string nodeId, bool locked, Repository repository, ReactionSummary reactions);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
protected void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EventsUrl();
    [CompilerGeneratedAttribute]
protected void set_EventsUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
protected void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public User get_ClosedBy();
    [CompilerGeneratedAttribute]
protected void set_ClosedBy(User value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Label> get_Labels();
    [CompilerGeneratedAttribute]
protected void set_Labels(IReadOnlyList`1<Label> value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
protected void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Assignees();
    [CompilerGeneratedAttribute]
protected void set_Assignees(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
protected void set_Milestone(Milestone value);
    [CompilerGeneratedAttribute]
public int get_Comments();
    [CompilerGeneratedAttribute]
protected void set_Comments(int value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
protected void set_PullRequest(PullRequest value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ClosedAt();
    [CompilerGeneratedAttribute]
protected void set_ClosedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
protected void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
protected void set_Reactions(ReactionSummary value);
    internal string get_DebuggerDisplay();
    public IssueUpdate ToUpdate();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueComment : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string Body { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; protected set; }
    public User User { get; protected set; }
    public ReactionSummary Reactions { get; protected set; }
    internal string DebuggerDisplay { get; }
    public IssueComment(int id, string nodeId, string url, string htmlUrl, string body, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> updatedAt, User user, ReactionSummary reactions);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
protected void set_Reactions(ReactionSummary value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueCommentPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private IssueComment <Comment>k__BackingField;
    public string Action { get; protected set; }
    public Issue Issue { get; protected set; }
    public IssueComment Comment { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
protected void set_Issue(Issue value);
    [CompilerGeneratedAttribute]
public IssueComment get_Comment();
    [CompilerGeneratedAttribute]
protected void set_Comment(IssueComment value);
}
public class Octokit.IssueCommentReactionsClient : ApiClient {
    public IssueCommentReactionsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public sealed virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueCommentRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private IssueCommentSort <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    public IssueCommentSort Sort { get; public set; }
    public SortDirection Direction { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public IssueCommentSort get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(IssueCommentSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(SortDirection value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.IssueCommentsClient : ApiClient {
    public IssueCommentsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IssueComment> Get(string owner, string name, int id);
    public sealed virtual Task`1<IssueComment> Get(long repositoryId, int id);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(string owner, string name, IssueCommentRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForRepository(long repositoryId, IssueCommentRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(string owner, string name, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueComment>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
    public sealed virtual Task`1<IssueComment> Create(string owner, string name, int number, string newComment);
    public sealed virtual Task`1<IssueComment> Create(long repositoryId, int number, string newComment);
    public sealed virtual Task`1<IssueComment> Update(string owner, string name, int id, string commentUpdate);
    public sealed virtual Task`1<IssueComment> Update(long repositoryId, int id, string commentUpdate);
    public sealed virtual Task Delete(string owner, string name, int id);
    public sealed virtual Task Delete(long repositoryId, int id);
}
public enum Octokit.IssueCommentSort : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueCommentSort Created;
    [ParameterAttribute]
public static IssueCommentSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueEvent : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EventInfoState> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public User Actor { get; protected set; }
    public User Assignee { get; protected set; }
    public Label Label { get; protected set; }
    public StringEnum`1<EventInfoState> Event { get; protected set; }
    public string CommitId { get; protected set; }
    public string CommitUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Issue Issue { get; protected set; }
    internal string DebuggerDisplay { get; }
    public IssueEvent(int id, string nodeId, string url, User actor, User assignee, Label label, EventInfoState event, string commitId, DateTimeOffset createdAt, Issue issue, string commitUrl);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
protected void set_Actor(User value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
protected void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public Label get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(Label value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EventInfoState> get_Event();
    [CompilerGeneratedAttribute]
protected void set_Event(StringEnum`1<EventInfoState> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
protected void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_CommitUrl();
    [CompilerGeneratedAttribute]
protected void set_CommitUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
protected void set_Issue(Issue value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    public string Action { get; protected set; }
    public Issue Issue { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
protected void set_Issue(Issue value);
}
public enum Octokit.IssueFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueFilter Assigned;
    [ParameterAttribute]
public static IssueFilter Created;
    [ParameterAttribute]
public static IssueFilter Mentioned;
    [ParameterAttribute]
public static IssueFilter Subscribed;
    [ParameterAttribute]
public static IssueFilter All;
}
public enum Octokit.IssueInQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueInQualifier Title;
    [ParameterAttribute]
public static IssueInQualifier Body;
    [ParameterAttribute]
public static IssueInQualifier Comment;
}
public enum Octokit.IssueIsQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueIsQualifier Open;
    [ParameterAttribute]
public static IssueIsQualifier Closed;
    [ParameterAttribute]
public static IssueIsQualifier Merged;
    [ParameterAttribute]
public static IssueIsQualifier Unmerged;
    [ParameterAttribute]
public static IssueIsQualifier PullRequest;
    [ParameterAttribute]
public static IssueIsQualifier Issue;
    [ParameterAttribute]
public static IssueIsQualifier Private;
    [ParameterAttribute]
public static IssueIsQualifier Public;
}
public enum Octokit.IssueNoMetadataQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueNoMetadataQualifier Label;
    [ParameterAttribute]
public static IssueNoMetadataQualifier Milestone;
    [ParameterAttribute]
public static IssueNoMetadataQualifier Assignee;
}
public class Octokit.IssueReactionsClient : ApiClient {
    public IssueReactionsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
    public sealed virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public sealed virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private IssueFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private IssueSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    public IssueFilter Filter { get; public set; }
    public ItemStateFilter State { get; public set; }
    public Collection`1<string> Labels { get; private set; }
    [ParameterAttribute]
public IssueSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public IssueFilter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(IssueFilter value);
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemStateFilter value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public IssueSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(IssueSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.IssuesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IAssigneesClient <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssuesEventsClient <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssuesLabelsClient <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private IMilestonesClient <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueCommentsClient <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueTimelineClient <Timeline>k__BackingField;
    public IAssigneesClient Assignee { get; private set; }
    public IIssuesEventsClient Events { get; private set; }
    public IIssuesLabelsClient Labels { get; private set; }
    public IMilestonesClient Milestone { get; private set; }
    public IIssueCommentsClient Comment { get; private set; }
    public IIssueTimelineClient Timeline { get; private set; }
    public IssuesClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IAssigneesClient get_Assignee();
    [CompilerGeneratedAttribute]
private void set_Assignee(IAssigneesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssuesEventsClient get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IIssuesEventsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssuesLabelsClient get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(IIssuesLabelsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMilestonesClient get_Milestone();
    [CompilerGeneratedAttribute]
private void set_Milestone(IMilestonesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueCommentsClient get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(IIssueCommentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueTimelineClient get_Timeline();
    [CompilerGeneratedAttribute]
private void set_Timeline(IIssueTimelineClient value);
    public sealed virtual Task`1<Issue> Get(string owner, string name, int number);
    public sealed virtual Task`1<Issue> Get(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForCurrent(IssueRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories();
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOwnedAndMemberRepositories(IssueRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForOrganization(string organization, IssueRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(string owner, string name, RepositoryIssueRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Issue>> GetAllForRepository(long repositoryId, RepositoryIssueRequest request, ApiOptions options);
    public sealed virtual Task`1<Issue> Create(string owner, string name, NewIssue newIssue);
    public sealed virtual Task`1<Issue> Create(long repositoryId, NewIssue newIssue);
    public sealed virtual Task`1<Issue> Update(string owner, string name, int number, IssueUpdate issueUpdate);
    public sealed virtual Task`1<Issue> Update(long repositoryId, int number, IssueUpdate issueUpdate);
    public sealed virtual Task Lock(string owner, string name, int number);
    public sealed virtual Task Lock(long repositoryId, int number);
    public sealed virtual Task Unlock(string owner, string name, int number);
    public sealed virtual Task Unlock(long repositoryId, int number);
}
public enum Octokit.IssueSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueSearchSort Comments;
    [ParameterAttribute]
public static IssueSearchSort Created;
    [ParameterAttribute]
public static IssueSearchSort Updated;
    [ParameterAttribute]
public static IssueSearchSort Merged;
}
public class Octokit.IssuesEventsClient : ApiClient {
    public IssuesEventsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(string owner, string name, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<EventInfo>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<IssueEvent>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IssueEvent> Get(string owner, string name, int number);
    public sealed virtual Task`1<IssueEvent> Get(long repositoryId, int number);
}
public class Octokit.IssuesLabelsClient : ApiClient {
    public IssuesLabelsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(string owner, string name, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(string owner, string name, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> GetAllForMilestone(long repositoryId, int number, ApiOptions options);
    public sealed virtual Task`1<Label> Get(string owner, string name, string labelName);
    public sealed virtual Task`1<Label> Get(long repositoryId, string labelName);
    public sealed virtual Task Delete(string owner, string name, string labelName);
    public sealed virtual Task Delete(long repositoryId, string labelName);
    public sealed virtual Task`1<Label> Create(string owner, string name, NewLabel newLabel);
    public sealed virtual Task`1<Label> Create(long repositoryId, NewLabel newLabel);
    public sealed virtual Task`1<Label> Update(string owner, string name, string labelName, LabelUpdate labelUpdate);
    public sealed virtual Task`1<Label> Update(long repositoryId, string labelName, LabelUpdate labelUpdate);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(string owner, string name, int number, String[] labels);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> AddToIssue(long repositoryId, int number, String[] labels);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(string owner, string name, int number, string labelName);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> RemoveFromIssue(long repositoryId, int number, string labelName);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(string owner, string name, int number, String[] labels);
    public sealed virtual Task`1<IReadOnlyList`1<Label>> ReplaceAllForIssue(long repositoryId, int number, String[] labels);
    public sealed virtual Task RemoveAllFromIssue(string owner, string name, int number);
    public sealed virtual Task RemoveAllFromIssue(long repositoryId, int number);
}
public enum Octokit.IssueSort : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueSort Created;
    [ParameterAttribute]
public static IssueSort Updated;
    [ParameterAttribute]
public static IssueSort Comments;
}
public class Octokit.IssueTimelineClient : ApiClient {
    public IssueTimelineClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int number);
    public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(string owner, string repo, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<TimelineEventInfo>> GetAllForIssue(long repositoryId, int number, ApiOptions options);
}
public enum Octokit.IssueTypeQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static IssueTypeQualifier PullRequest;
    [ParameterAttribute]
public static IssueTypeQualifier Issue;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.IssueUpdate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    public string Title { get; public set; }
    public string Body { get; public set; }
    public ICollection`1<string> Assignees { get; private set; }
    [SerializeNullAttribute]
public Nullable`1<int> Milestone { get; public set; }
    public ICollection`1<string> Labels { get; private set; }
    public Nullable`1<ItemState> State { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    internal string get_DebuggerDisplay();
    public void AddAssignee(string name);
    public void ClearAssignees();
    public void RemoveAssignee(string name);
    public void AddLabel(string name);
    public void ClearLabels();
    public void RemoveLabel(string name);
}
public interface Octokit.IStarredClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps();
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request, ApiOptions options);
    public abstract virtual Task`1<bool> CheckStarred(string owner, string name);
    public abstract virtual Task`1<bool> StarRepo(string owner, string name);
    public abstract virtual Task`1<bool> RemoveStarFromRepo(string owner, string name);
}
public interface Octokit.IStatisticsClient {
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<Participation> GetParticipation(string owner, string name);
    public abstract virtual Task`1<Participation> GetParticipation(long repositoryId);
    public abstract virtual Task`1<Participation> GetParticipation(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<Participation> GetParticipation(long repositoryId, CancellationToken cancellationToken);
    public abstract virtual Task`1<PunchCard> GetPunchCard(string owner, string name);
    public abstract virtual Task`1<PunchCard> GetPunchCard(long repositoryId);
    public abstract virtual Task`1<PunchCard> GetPunchCard(string owner, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<PunchCard> GetPunchCard(long repositoryId, CancellationToken cancellationToken);
}
public interface Octokit.ITagsClient {
    public abstract virtual Task`1<GitTag> Get(string owner, string name, string reference);
    public abstract virtual Task`1<GitTag> Get(long repositoryId, string reference);
    public abstract virtual Task`1<GitTag> Create(string owner, string name, NewTag tag);
    public abstract virtual Task`1<GitTag> Create(long repositoryId, NewTag tag);
}
public interface Octokit.ITeamsClient {
    public abstract virtual Task`1<Team> Get(int id);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(int id);
    public abstract virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(int id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id, TeamMembersRequest request);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id, TeamMembersRequest request, ApiOptions options);
    public abstract virtual Task`1<Team> Create(string org, NewTeam team);
    public abstract virtual Task`1<Team> Update(int id, UpdateTeam team);
    public abstract virtual Task Delete(int id);
    public abstract virtual Task`1<TeamMembershipDetails> AddOrEditMembership(int id, string login, UpdateTeamMembership request);
    public abstract virtual Task`1<bool> RemoveMembership(int id, string login);
    public abstract virtual Task`1<TeamMembershipDetails> GetMembershipDetails(int id, string login);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(int id);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(int id, ApiOptions options);
    public abstract virtual Task`1<bool> AddRepository(int id, string organization, string repoName);
    public abstract virtual Task`1<bool> AddRepository(int id, string organization, string repoName, RepositoryPermissionRequest permission);
    public abstract virtual Task`1<bool> RemoveRepository(int id, string organization, string repoName);
    public abstract virtual Task`1<bool> IsRepositoryManagedByTeam(int id, string owner, string repo);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(int id);
    public abstract virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(int id, ApiOptions options);
}
public enum Octokit.ItemState : Enum {
    public int value__;
    [ParameterAttribute]
public static ItemState Open;
    [ParameterAttribute]
public static ItemState Closed;
}
public enum Octokit.ItemStateFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static ItemStateFilter Open;
    [ParameterAttribute]
public static ItemStateFilter Closed;
    [ParameterAttribute]
public static ItemStateFilter All;
}
public interface Octokit.ITreesClient {
    public abstract virtual Task`1<TreeResponse> Get(string owner, string name, string reference);
    public abstract virtual Task`1<TreeResponse> Get(long repositoryId, string reference);
    public abstract virtual Task`1<TreeResponse> GetRecursive(string owner, string name, string reference);
    public abstract virtual Task`1<TreeResponse> GetRecursive(long repositoryId, string reference);
    public abstract virtual Task`1<TreeResponse> Create(string owner, string name, NewTree newTree);
    public abstract virtual Task`1<TreeResponse> Create(long repositoryId, NewTree newTree);
}
public interface Octokit.IUserAdministrationClient {
    public abstract virtual Task`1<User> Create(NewUser newUser);
    public abstract virtual Task`1<UserRenameResponse> Rename(string login, UserRename userRename);
    public abstract virtual Task`1<Authorization> CreateImpersonationToken(string login, NewImpersonationToken newImpersonationToken);
    public abstract virtual Task DeleteImpersonationToken(string login);
    public abstract virtual Task Promote(string login);
    public abstract virtual Task Demote(string login);
    public abstract virtual Task Suspend(string login);
    public abstract virtual Task Unsuspend(string login);
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> ListAllPublicKeys();
    public abstract virtual Task Delete(string login);
    public abstract virtual Task DeletePublicKey(int keyId);
}
public interface Octokit.IUserEmailsClient {
    public abstract virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll();
    public abstract virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<EmailAddress>> Add(String[] emailAddresses);
    public abstract virtual Task Delete(String[] emailAddresses);
}
public interface Octokit.IUserGpgKeysClient {
    public abstract virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<GpgKey> Get(int id);
    public abstract virtual Task`1<GpgKey> Create(NewGpgKey newGpgKey);
    public abstract virtual Task Delete(int id);
}
public interface Octokit.IUserKeysClient {
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName);
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<PublicKey> Get(int id);
    public abstract virtual Task`1<PublicKey> Create(NewPublicKey newKey);
    public abstract virtual Task Delete(int id);
}
public interface Octokit.IUsersClient {
    public IUserEmailsClient Email { get; }
    public IUserKeysClient GitSshKey { get; }
    public IUserGpgKeysClient GpgKey { get; }
    public IFollowersClient Followers { get; }
    public IUserAdministrationClient Administration { get; }
    public abstract virtual IUserEmailsClient get_Email();
    public abstract virtual IUserKeysClient get_GitSshKey();
    public abstract virtual IUserGpgKeysClient get_GpgKey();
    public abstract virtual Task`1<User> Get(string login);
    public abstract virtual Task`1<User> Current();
    public abstract virtual Task`1<User> Update(UserUpdate user);
    public abstract virtual IFollowersClient get_Followers();
    public abstract virtual IUserAdministrationClient get_Administration();
}
public interface Octokit.IWatchedClient {
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId, ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    public abstract virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    public abstract virtual Task`1<bool> CheckWatched(string owner, string name);
    public abstract virtual Task`1<bool> CheckWatched(long repositoryId);
    public abstract virtual Task`1<Subscription> WatchRepo(string owner, string name, NewSubscription newSubscription);
    public abstract virtual Task`1<Subscription> WatchRepo(long repositoryId, NewSubscription newSubscription);
    public abstract virtual Task`1<bool> UnwatchRepo(string owner, string name);
    public abstract virtual Task`1<bool> UnwatchRepo(long repositoryId);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class Octokit.JsonArray : List`1<object> {
    public JsonArray(int capacity);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class Octokit.JsonObject : object {
    private Dictionary`2<string, object> _members;
    public object Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonObject(IEqualityComparer`1<string> comparer);
    public object get_Item(int index);
    internal static object GetAtIndex(IDictionary`2<string, object> obj, int index);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Label : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Default>k__BackingField;
    public string Url { get; protected set; }
    public string Name { get; protected set; }
    public string NodeId { get; protected set; }
    public string Color { get; protected set; }
    public string Description { get; protected set; }
    public bool Default { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Label(string url, string name, string nodeId, string color, string description, bool default);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
protected void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Default();
    [CompilerGeneratedAttribute]
protected void set_Default(bool value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.LabelSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static LabelSearchSort Created;
    [ParameterAttribute]
public static LabelSearchSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LabelUpdate : object {
    private string _color;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string Color { get; public set; }
    public string Description { get; public set; }
    internal string DebuggerDisplay { get; }
    public LabelUpdate(string name, string color);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_Color();
    public void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.Language : Enum {
    public int value__;
    public static Language Abap;
    [ParameterAttribute]
public static Language ActionScript;
    public static Language Ada;
    public static Language Apex;
    [ParameterAttribute]
public static Language AppleScript;
    public static Language Arc;
    public static Language Arduino;
    [ParameterAttribute]
public static Language ApacheConf;
    public static Language Asp;
    public static Language Assembly;
    public static Language Augeas;
    [ParameterAttribute]
public static Language AutoHotKey;
    public static Language Awk;
    public static Language Batchfile;
    public static Language Befunge;
    [ParameterAttribute]
public static Language BlitzMax;
    public static Language Boo;
    public static Language Bro;
    public static Language C;
    [ParameterAttribute]
public static Language C2hsHaskell;
    public static Language Ceylon;
    public static Language Chuck;
    public static Language Clips;
    public static Language Clojure;
    public static Language Cobol;
    public static Language Cmake;
    [ParameterAttribute]
public static Language CObjDump;
    [ParameterAttribute]
public static Language CoffeeScript;
    [ParameterAttribute]
public static Language ColdFusion;
    public static Language CommonLisp;
    public static Language Coq;
    [ParameterAttribute]
public static Language CPlusPlus;
    [ParameterAttribute]
public static Language CSharp;
    public static Language Css;
    [ParameterAttribute]
public static Language CppObjDump;
    public static Language Cucumber;
    public static Language Cython;
    public static Language D;
    [ParameterAttribute]
public static Language DObjDump;
    [ParameterAttribute]
public static Language DarcsPatch;
    public static Language Dart;
    [ParameterAttribute]
public static Language Dcpu16Asm;
    public static Language Dot;
    public static Language Dylan;
    public static Language Ec;
    [ParameterAttribute]
public static Language EcereProjects;
    public static Language Ecl;
    public static Language Edn;
    public static Language Eiffel;
    public static Language Elixir;
    public static Language Elm;
    public static Language EmacsLisp;
    public static Language Erlang;
    [ParameterAttribute]
public static Language FSharp;
    public static Language Factor;
    public static Language Fancy;
    public static Language Fantom;
    public static Language Fish;
    public static Language Forth;
    public static Language Fortran;
    public static Language Gas;
    public static Language Genshi;
    [ParameterAttribute]
public static Language GentooBuild;
    [ParameterAttribute]
public static Language GentooEclass;
    [ParameterAttribute]
public static Language GettextCatalog;
    public static Language Glsl;
    public static Language Go;
    public static Language Gosu;
    public static Language Groff;
    public static Language Groovy;
    [ParameterAttribute]
public static Language GroovyServerPages;
    public static Language Haml;
    [ParameterAttribute]
public static Language HandleBars;
    public static Language Haskell;
    public static Language Haxe;
    public static Language Http;
    public static Language Ini;
    public static Language Io;
    public static Language Ioke;
    [ParameterAttribute]
public static Language IrcLog;
    public static Language J;
    public static Language Java;
    [ParameterAttribute]
public static Language JavaServerPages;
    public static Language JavaScript;
    public static Language Json;
    public static Language Julia;
    public static Language Kotlin;
    public static Language Lasso;
    public static Language Less;
    public static Language Lfe;
    [ParameterAttribute]
public static Language LillyPond;
    [ParameterAttribute]
public static Language LiterateCoffeeScript;
    [ParameterAttribute]
public static Language LiterateHaskell;
    [ParameterAttribute]
public static Language LiveScript;
    public static Language Llvm;
    public static Language Logos;
    public static Language Logtalk;
    public static Language Lua;
    public static Language M;
    public static Language Makefile;
    public static Language Mako;
    public static Language Markdown;
    public static Language Matlab;
    public static Language Max;
    [ParameterAttribute]
public static Language MiniD;
    public static Language Mirah;
    public static Language Monkey;
    public static Language Moocode;
    public static Language Moonscript;
    public static Language Mupad;
    public static Language Myghty;
    public static Language Nemerle;
    public static Language Nginx;
    public static Language Nimrod;
    public static Language Nsis;
    public static Language Nu;
    [ParameterAttribute]
public static Language NumPY;
    [ParameterAttribute]
public static Language ObjDump;
    public static Language ObjectiveC;
    public static Language ObjectiveJ;
    [ParameterAttribute]
public static Language OCaml;
    public static Language Omgrofl;
    public static Language Ooc;
    public static Language Opa;
    [ParameterAttribute]
public static Language OpenCL;
    [ParameterAttribute]
public static Language OpenEdgeAbl;
    public static Language Parrot;
    [ParameterAttribute]
public static Language ParrotAssembly;
    [ParameterAttribute]
public static Language ParrotInternalRepresentation;
    public static Language Pascal;
    public static Language Perl;
    public static Language Php;
    public static Language Pike;
    [ParameterAttribute]
public static Language PogoScript;
    [ParameterAttribute]
public static Language PowerShell;
    public static Language Processing;
    public static Language Prolog;
    public static Language Puppet;
    [ParameterAttribute]
public static Language PureData;
    public static Language Python;
    [ParameterAttribute]
public static Language PythonTraceback;
    public static Language R;
    public static Language Racket;
    [ParameterAttribute]
public static Language RagelInRubyHost;
    [ParameterAttribute]
public static Language RawTokenData;
    public static Language Rebol;
    public static Language Redcode;
    [ParameterAttribute]
public static Language ReStructuredText;
    public static Language Rhtml;
    public static Language Rouge;
    public static Language Ruby;
    public static Language Rust;
    public static Language Scala;
    public static Language Scheme;
    public static Language Sage;
    public static Language Sass;
    public static Language Scilab;
    public static Language Scss;
    public static Language Self;
    public static Language Shell;
    public static Language Slash;
    public static Language Smalltalk;
    public static Language Smarty;
    public static Language Squirrel;
    [ParameterAttribute]
public static Language StandardML;
    [ParameterAttribute]
public static Language SuperCollider;
    public static Language Tcl;
    public static Language Tcsh;
    public static Language Tea;
    [ParameterAttribute]
public static Language TeX;
    public static Language Textile;
    public static Language Toml;
    public static Language Turing;
    public static Language Twig;
    public static Language Txl;
    [ParameterAttribute]
public static Language TypeScript;
    [ParameterAttribute]
public static Language UnifiedParallelC;
    public static Language Unknown;
    public static Language Vala;
    public static Language Verilog;
    public static Language Vhdl;
    [ParameterAttribute]
public static Language VimL;
    public static Language VisualBasic;
    public static Language Volt;
    public static Language Wisp;
    public static Language Xc;
    public static Language Xml;
    [ParameterAttribute]
public static Language XProc;
    [ParameterAttribute]
public static Language XQuery;
    public static Language Xs;
    public static Language Xslt;
    public static Language Xtend;
    public static Language Yaml;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LdapSyncResponse : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string Status { get; private set; }
    internal string DebuggerDisplay { get; }
    public LdapSyncResponse(string status);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.LegalRestrictionException : ApiException {
    public string Message { get; }
    public LegalRestrictionException(IResponse response);
    public LegalRestrictionException(string message, HttpStatusCode statusCode);
    public LegalRestrictionException(IResponse response, Exception innerException);
    protected LegalRestrictionException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.License : LicenseMetadata {
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Implementation>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Permitted>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Forbidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string HtmlUrl { get; protected set; }
    public string Description { get; protected set; }
    public string Category { get; protected set; }
    public string Implementation { get; protected set; }
    public IReadOnlyList`1<string> Required { get; protected set; }
    public IReadOnlyList`1<string> Permitted { get; protected set; }
    public IReadOnlyList`1<string> Forbidden { get; protected set; }
    public string Body { get; protected set; }
    internal string DebuggerDisplay { get; }
    public License(string key, string nodeId, string name, string spdxId, string url, string htmlUrl, bool featured, string description, string category, string implementation, string body, IEnumerable`1<string> required, IEnumerable`1<string> permitted, IEnumerable`1<string> forbidden);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
protected void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Implementation();
    [CompilerGeneratedAttribute]
protected void set_Implementation(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Required();
    [CompilerGeneratedAttribute]
protected void set_Required(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Permitted();
    [CompilerGeneratedAttribute]
protected void set_Permitted(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Forbidden();
    [CompilerGeneratedAttribute]
protected void set_Forbidden(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    internal virtual string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LicenseInfo : object {
    [CompilerGeneratedAttribute]
private int <Seats>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SeatsUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SeatsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DaysUntilExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpireAt>k__BackingField;
    public int Seats { get; private set; }
    public int SeatsUsed { get; private set; }
    public int SeatsAvailable { get; private set; }
    public string Kind { get; private set; }
    public int DaysUntilExpiration { get; private set; }
    public DateTimeOffset ExpireAt { get; private set; }
    internal string DebuggerDisplay { get; }
    public LicenseInfo(int seats, int seatsUsed, int seatsAvailable, string kind, int daysUntilExpiration, DateTimeOffset expireAt);
    [CompilerGeneratedAttribute]
public int get_Seats();
    [CompilerGeneratedAttribute]
private void set_Seats(int value);
    [CompilerGeneratedAttribute]
public int get_SeatsUsed();
    [CompilerGeneratedAttribute]
private void set_SeatsUsed(int value);
    [CompilerGeneratedAttribute]
public int get_SeatsAvailable();
    [CompilerGeneratedAttribute]
private void set_SeatsAvailable(int value);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(string value);
    [CompilerGeneratedAttribute]
public int get_DaysUntilExpiration();
    [CompilerGeneratedAttribute]
private void set_DaysUntilExpiration(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpireAt();
    [CompilerGeneratedAttribute]
private void set_ExpireAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.LicenseMetadata : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpdxId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Featured>k__BackingField;
    public string Key { get; protected set; }
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string SpdxId { get; protected set; }
    public string Url { get; protected set; }
    public bool Featured { get; protected set; }
    internal string DebuggerDisplay { get; }
    public LicenseMetadata(string key, string nodeId, string name, string spdxId, string url, bool featured);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
protected void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SpdxId();
    [CompilerGeneratedAttribute]
protected void set_SpdxId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_Featured();
    [CompilerGeneratedAttribute]
protected void set_Featured(bool value);
    internal virtual string get_DebuggerDisplay();
}
public class Octokit.LoginAttemptsExceededException : ForbiddenException {
    public string Message { get; }
    public LoginAttemptsExceededException(IResponse response);
    public LoginAttemptsExceededException(IResponse response, Exception innerException);
    protected LoginAttemptsExceededException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MarkAsReadRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastReadAt>k__BackingField;
    public Nullable`1<DateTimeOffset> LastReadAt { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_LastReadAt();
    [CompilerGeneratedAttribute]
public void set_LastReadAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.MembershipState : Enum {
    public int value__;
    [ParameterAttribute]
public static MembershipState Pending;
    [ParameterAttribute]
public static MembershipState Active;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Merge : GitReference {
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public Author Author { get; protected set; }
    public Author Committer { get; protected set; }
    public Commit Commit { get; protected set; }
    public IReadOnlyList`1<GitReference> Parents { get; protected set; }
    public string CommentsUrl { get; protected set; }
    public int CommentCount { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public Merge(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, Author author, Author committer, Commit commit, IEnumerable`1<GitReference> parents, string commentsUrl, int commentCount, string htmlUrl);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
protected void set_Author(Author value);
    [CompilerGeneratedAttribute]
public Author get_Committer();
    [CompilerGeneratedAttribute]
protected void set_Committer(Author value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
protected void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
protected void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public int get_CommentCount();
    [CompilerGeneratedAttribute]
protected void set_CommentCount(int value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
}
public enum Octokit.MergeableState : Enum {
    public int value__;
    [ParameterAttribute]
public static MergeableState Dirty;
    [ParameterAttribute]
public static MergeableState Unknown;
    [ParameterAttribute]
public static MergeableState Blocked;
    [ParameterAttribute]
public static MergeableState Behind;
    [ParameterAttribute]
public static MergeableState Unstable;
    [ParameterAttribute]
public static MergeableState HasHooks;
    [ParameterAttribute]
public static MergeableState Clean;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MergePullRequest : object {
    [CompilerGeneratedAttribute]
private string <CommitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PullRequestMergeMethod> <MergeMethod>k__BackingField;
    public string CommitMessage { get; public set; }
    public string Sha { get; public set; }
    public string CommitTitle { get; public set; }
    public Nullable`1<PullRequestMergeMethod> MergeMethod { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_CommitMessage();
    [CompilerGeneratedAttribute]
public void set_CommitMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_CommitTitle();
    [CompilerGeneratedAttribute]
public void set_CommitTitle(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<PullRequestMergeMethod> get_MergeMethod();
    [CompilerGeneratedAttribute]
public void set_MergeMethod(Nullable`1<PullRequestMergeMethod> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MergingClient : ApiClient {
    public MergingClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Merge> Create(string owner, string name, NewMerge merge);
    public sealed virtual Task`1<Merge> Create(long repositoryId, NewMerge merge);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Meta : object {
    [CompilerGeneratedAttribute]
private bool <VerifiablePasswordAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitHubServicesSha>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Hooks>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Git>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Importer>k__BackingField;
    public bool VerifiablePasswordAuthentication { get; private set; }
    [ParameterAttribute]
public string GitHubServicesSha { get; private set; }
    public IReadOnlyList`1<string> Hooks { get; private set; }
    public IReadOnlyList`1<string> Git { get; private set; }
    public IReadOnlyList`1<string> Pages { get; private set; }
    public IReadOnlyList`1<string> Importer { get; private set; }
    internal string DebuggerDisplay { get; }
    public Meta(bool verifiablePasswordAuthentication, string gitHubServicesSha, IReadOnlyList`1<string> hooks, IReadOnlyList`1<string> git, IReadOnlyList`1<string> pages, IReadOnlyList`1<string> importer);
    [CompilerGeneratedAttribute]
public bool get_VerifiablePasswordAuthentication();
    [CompilerGeneratedAttribute]
private void set_VerifiablePasswordAuthentication(bool value);
    [CompilerGeneratedAttribute]
public string get_GitHubServicesSha();
    [CompilerGeneratedAttribute]
private void set_GitHubServicesSha(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Hooks();
    [CompilerGeneratedAttribute]
private void set_Hooks(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Git();
    [CompilerGeneratedAttribute]
private void set_Git(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Pages();
    [CompilerGeneratedAttribute]
private void set_Pages(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Importer();
    [CompilerGeneratedAttribute]
private void set_Importer(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Migration : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<MigrationState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockRepositories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeAttachments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Repository> <Repositories>k__BackingField;
    public int Id { get; private set; }
    public string NodeId { get; protected set; }
    public string Guid { get; private set; }
    public StringEnum`1<MigrationState> State { get; private set; }
    public bool LockRepositories { get; private set; }
    public bool ExcludeAttachments { get; private set; }
    public string Url { get; private set; }
    public string CreatedAt { get; private set; }
    public string UpdatedAt { get; private set; }
    public IReadOnlyList`1<Repository> Repositories { get; private set; }
    internal string DebuggerDisplay { get; }
    public Migration(int id, string nodeId, string guid, MigrationState state, bool lockRepositories, bool excludeAttachments, string url, string createdAt, string updatedAt, IReadOnlyList`1<Repository> repositories);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<MigrationState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(StringEnum`1<MigrationState> value);
    [CompilerGeneratedAttribute]
public bool get_LockRepositories();
    [CompilerGeneratedAttribute]
private void set_LockRepositories(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeAttachments();
    [CompilerGeneratedAttribute]
private void set_ExcludeAttachments(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(string value);
    [CompilerGeneratedAttribute]
public string get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Repository> get_Repositories();
    [CompilerGeneratedAttribute]
private void set_Repositories(IReadOnlyList`1<Repository> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MigrationClient : ApiClient {
    [CompilerGeneratedAttribute]
private IMigrationsClient <Migrations>k__BackingField;
    public IMigrationsClient Migrations { get; private set; }
    public MigrationClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationsClient get_Migrations();
    [CompilerGeneratedAttribute]
private void set_Migrations(IMigrationsClient value);
}
public class Octokit.MigrationsClient : ApiClient {
    public MigrationsClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<Start>d__1")]
public sealed virtual Task`1<Migration> Start(string org, StartMigrationRequest migration);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<GetAll>d__2")]
public sealed virtual Task`1<List`1<Migration>> GetAll(string org);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<Get>d__3")]
public sealed virtual Task`1<Migration> Get(string org, int id);
    [AsyncStateMachineAttribute("Octokit.MigrationsClient/<GetArchive>d__4")]
public sealed virtual Task`1<Byte[]> GetArchive(string org, int id);
    public sealed virtual Task DeleteArchive(string org, int id);
    public sealed virtual Task UnlockRepository(string org, int id, string repo);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Milestone : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosedIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DueOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ClosedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <UpdatedAt>k__BackingField;
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public int Number { get; protected set; }
    public string NodeId { get; protected set; }
    public StringEnum`1<ItemState> State { get; protected set; }
    public string Title { get; protected set; }
    public string Description { get; protected set; }
    public User Creator { get; protected set; }
    public int OpenIssues { get; protected set; }
    public int ClosedIssues { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> DueOn { get; protected set; }
    public Nullable`1<DateTimeOffset> ClosedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Milestone(int number);
    public Milestone(string url, string htmlUrl, int number, string nodeId, ItemState state, string title, string description, User creator, int openIssues, int closedIssues, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> dueOn, Nullable`1<DateTimeOffset> closedAt, Nullable`1<DateTimeOffset> updatedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
protected void set_Number(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
protected void set_Creator(User value);
    [CompilerGeneratedAttribute]
public int get_OpenIssues();
    [CompilerGeneratedAttribute]
protected void set_OpenIssues(int value);
    [CompilerGeneratedAttribute]
public int get_ClosedIssues();
    [CompilerGeneratedAttribute]
protected void set_ClosedIssues(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DueOn();
    [CompilerGeneratedAttribute]
protected void set_DueOn(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ClosedAt();
    [CompilerGeneratedAttribute]
protected void set_ClosedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MilestoneRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    [CompilerGeneratedAttribute]
private MilestoneSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    public ItemStateFilter State { get; public set; }
    [ParameterAttribute]
public MilestoneSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemStateFilter value);
    [CompilerGeneratedAttribute]
public MilestoneSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(MilestoneSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MilestonesClient : ApiClient {
    public MilestonesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Milestone> Get(string owner, string name, int number);
    public sealed virtual Task`1<Milestone> Get(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(string owner, string name, MilestoneRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Milestone>> GetAllForRepository(long repositoryId, MilestoneRequest request, ApiOptions options);
    public sealed virtual Task`1<Milestone> Create(string owner, string name, NewMilestone newMilestone);
    public sealed virtual Task`1<Milestone> Create(long repositoryId, NewMilestone newMilestone);
    public sealed virtual Task`1<Milestone> Update(string owner, string name, int number, MilestoneUpdate milestoneUpdate);
    public sealed virtual Task`1<Milestone> Update(long repositoryId, int number, MilestoneUpdate milestoneUpdate);
    public sealed virtual Task Delete(string owner, string name, int number);
    public sealed virtual Task Delete(long repositoryId, int number);
}
public enum Octokit.MilestoneSort : Enum {
    public int value__;
    [ParameterAttribute]
public static MilestoneSort DueDate;
    [ParameterAttribute]
public static MilestoneSort Completeness;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MilestoneUpdate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DueOn>k__BackingField;
    public string Title { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<DateTimeOffset> DueOn { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DueOn();
    [CompilerGeneratedAttribute]
public void set_DueOn(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.MiscellaneousClient : object {
    private IConnection _connection;
    public MiscellaneousClient(IConnection connection);
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetAllEmojis>d__2")]
public sealed virtual Task`1<IReadOnlyList`1<Emoji>> GetAllEmojis();
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<RenderRawMarkdown>d__3")]
public sealed virtual Task`1<string> RenderRawMarkdown(string markdown);
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<RenderArbitraryMarkdown>d__4")]
public sealed virtual Task`1<string> RenderArbitraryMarkdown(NewArbitraryMarkdown markdown);
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetAllGitIgnoreTemplates>d__5")]
public sealed virtual Task`1<IReadOnlyList`1<string>> GetAllGitIgnoreTemplates();
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetGitIgnoreTemplate>d__6")]
public sealed virtual Task`1<GitIgnoreTemplate> GetGitIgnoreTemplate(string templateName);
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetAllLicenses>d__7")]
public sealed virtual Task`1<IReadOnlyList`1<LicenseMetadata>> GetAllLicenses();
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetLicense>d__8")]
public sealed virtual Task`1<License> GetLicense(string key);
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetRateLimits>d__9")]
public sealed virtual Task`1<MiscellaneousRateLimit> GetRateLimits();
    [AsyncStateMachineAttribute("Octokit.MiscellaneousClient/<GetMetadata>d__10")]
public sealed virtual Task`1<Meta> GetMetadata();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.MiscellaneousRateLimit : object {
    [CompilerGeneratedAttribute]
private ResourceRateLimit <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimit <Rate>k__BackingField;
    public ResourceRateLimit Resources { get; private set; }
    public RateLimit Rate { get; private set; }
    internal string DebuggerDisplay { get; }
    public MiscellaneousRateLimit(ResourceRateLimit resources, RateLimit rate);
    [CompilerGeneratedAttribute]
public ResourceRateLimit get_Resources();
    [CompilerGeneratedAttribute]
private void set_Resources(ResourceRateLimit value);
    [CompilerGeneratedAttribute]
public RateLimit get_Rate();
    [CompilerGeneratedAttribute]
private void set_Rate(RateLimit value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewArbitraryMarkdown : object {
    private static string _markdown;
    private static string _gfm;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    public string Text { get; private set; }
    public string Mode { get; private set; }
    public string Context { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewArbitraryMarkdown(string text, string mode, string context);
    public NewArbitraryMarkdown(string text);
    public NewArbitraryMarkdown(string text, string mode);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(string value);
    private static string GetMode(string mode);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewAuthorization : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fingerprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoteUrl>k__BackingField;
    public IEnumerable`1<string> Scopes { get; public set; }
    public string Fingerprint { get; public set; }
    public string Note { get; public set; }
    public string NoteUrl { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewAuthorization(string note, IEnumerable`1<string> scopes);
    public NewAuthorization(string note, IEnumerable`1<string> scopes, string fingerprint);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Fingerprint();
    [CompilerGeneratedAttribute]
public void set_Fingerprint(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
    [CompilerGeneratedAttribute]
public string get_NoteUrl();
    [CompilerGeneratedAttribute]
public void set_NoteUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewBlob : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private EncodingType <Encoding>k__BackingField;
    public string Content { get; public set; }
    public EncodingType Encoding { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public EncodingType get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(EncodingType value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRun : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetailsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckStatus>> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <StartedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckConclusion>> <Conclusion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CompletedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private NewCheckRunOutput <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunAction> <Actions>k__BackingField;
    public string Name { get; protected set; }
    public string HeadSha { get; protected set; }
    public string DetailsUrl { get; public set; }
    public string ExternalId { get; public set; }
    public Nullable`1<StringEnum`1<CheckStatus>> Status { get; public set; }
    public Nullable`1<DateTimeOffset> StartedAt { get; public set; }
    public Nullable`1<StringEnum`1<CheckConclusion>> Conclusion { get; public set; }
    public Nullable`1<DateTimeOffset> CompletedAt { get; public set; }
    public NewCheckRunOutput Output { get; public set; }
    public IReadOnlyList`1<NewCheckRunAction> Actions { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRun(string name, string headSha);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    [CompilerGeneratedAttribute]
public string get_DetailsUrl();
    [CompilerGeneratedAttribute]
public void set_DetailsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalId();
    [CompilerGeneratedAttribute]
public void set_ExternalId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckStatus>> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<StringEnum`1<CheckStatus>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckConclusion>> get_Conclusion();
    [CompilerGeneratedAttribute]
public void set_Conclusion(Nullable`1<StringEnum`1<CheckConclusion>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CompletedAt();
    [CompilerGeneratedAttribute]
public void set_CompletedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public NewCheckRunOutput get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(NewCheckRunOutput value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IReadOnlyList`1<NewCheckRunAction> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunAction : object {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Label { get; protected set; }
    public string Description { get; protected set; }
    public string Identifier { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunAction(string label, string description, string identifier);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
protected void set_Identifier(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobHref>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckWarningLevel>> <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<CheckAnnotationLevel>> <AnnotationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawDetails>k__BackingField;
    [ObsoleteAttribute("This property is replaced with Path but may still be required on GitHub Enterprise 2.14")]
public string Filename { get; protected set; }
    public string Path { get; protected set; }
    [ObsoleteAttribute("This property is deprecated but may still be required on GitHub Enterprise 2.14")]
public string BlobHref { get; protected set; }
    public int StartLine { get; protected set; }
    public int EndLine { get; protected set; }
    public Nullable`1<int> StartColumn { get; public set; }
    public Nullable`1<int> EndColumn { get; public set; }
    [ObsoleteAttribute("This property is replaced with AnnotationLevel but may still be required on GitHub Enterprise 2.14")]
public Nullable`1<StringEnum`1<CheckWarningLevel>> WarningLevel { get; protected set; }
    public Nullable`1<StringEnum`1<CheckAnnotationLevel>> AnnotationLevel { get; protected set; }
    public string Message { get; protected set; }
    public string Title { get; public set; }
    public string RawDetails { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunAnnotation(string path, int startLine, int endLine, CheckAnnotationLevel annotationLevel, string message);
    [ObsoleteAttribute("This ctor taking Filename, BlobHref and WarningLevel is deprecated but may still be required on GitHub Enterprise 2.14")]
public NewCheckRunAnnotation(string filename, string blobHref, int startLine, int endLine, CheckWarningLevel warningLevel, string message);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
protected void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_BlobHref();
    [CompilerGeneratedAttribute]
protected void set_BlobHref(string value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
protected void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
protected void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckWarningLevel>> get_WarningLevel();
    [CompilerGeneratedAttribute]
protected void set_WarningLevel(Nullable`1<StringEnum`1<CheckWarningLevel>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<CheckAnnotationLevel>> get_AnnotationLevel();
    [CompilerGeneratedAttribute]
protected void set_AnnotationLevel(Nullable`1<StringEnum`1<CheckAnnotationLevel>> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_RawDetails();
    [CompilerGeneratedAttribute]
public void set_RawDetails(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunImage : object {
    [CompilerGeneratedAttribute]
private string <Alt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    public string Alt { get; protected set; }
    public string ImageUrl { get; protected set; }
    public string Caption { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunImage(string alt, string imageUrl);
    [CompilerGeneratedAttribute]
public string get_Alt();
    [CompilerGeneratedAttribute]
protected void set_Alt(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
protected void set_ImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckRunOutput : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunAnnotation> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NewCheckRunImage> <Images>k__BackingField;
    public string Title { get; protected set; }
    public string Summary { get; protected set; }
    public string Text { get; public set; }
    public IReadOnlyList`1<NewCheckRunAnnotation> Annotations { get; public set; }
    public IReadOnlyList`1<NewCheckRunImage> Images { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCheckRunOutput(string title, string summary);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
protected void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunAnnotation> get_Annotations();
    [CompilerGeneratedAttribute]
public void set_Annotations(IReadOnlyList`1<NewCheckRunAnnotation> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NewCheckRunImage> get_Images();
    [CompilerGeneratedAttribute]
public void set_Images(IReadOnlyList`1<NewCheckRunImage> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCheckSuite : object {
    [CompilerGeneratedAttribute]
private string <HeadSha>k__BackingField;
    public string HeadSha { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewCheckSuite(string headSha);
    [CompilerGeneratedAttribute]
public string get_HeadSha();
    [CompilerGeneratedAttribute]
protected void set_HeadSha(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCommit : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    public string Message { get; private set; }
    public string Tree { get; private set; }
    public IEnumerable`1<string> Parents { get; private set; }
    public Committer Author { get; public set; }
    public Committer Committer { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCommit(string message, string tree, IEnumerable`1<string> parents);
    public NewCommit(string message, string tree);
    public NewCommit(string message, string tree, string parent);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Parents();
    [CompilerGeneratedAttribute]
private void set_Parents(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(Committer value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
public void set_Committer(Committer value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCommitComment : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    public string Body { get; private set; }
    public string Path { get; public set; }
    public Nullable`1<int> Position { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewCommitComment(string body);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<int> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewCommitStatus : object {
    [CompilerGeneratedAttribute]
private CommitState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    public CommitState State { get; public set; }
    public string TargetUrl { get; public set; }
    public string Description { get; public set; }
    public string Context { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public CommitState get_State();
    [CompilerGeneratedAttribute]
public void set_State(CommitState value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
public void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDeployKey : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    public string Title { get; public set; }
    public string Key { get; public set; }
    public bool ReadOnly { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDeployment : object {
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private DeployTask <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <RequiredContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TransientEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ProductionEnvironment>k__BackingField;
    public string Ref { get; private set; }
    public DeployTask Task { get; public set; }
    public Nullable`1<bool> AutoMerge { get; public set; }
    public Collection`1<string> RequiredContexts { get; public set; }
    public string Payload { get; public set; }
    public string Environment { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> TransientEnvironment { get; public set; }
    public Nullable`1<bool> ProductionEnvironment { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewDeployment(string ref);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public DeployTask get_Task();
    [CompilerGeneratedAttribute]
public void set_Task(DeployTask value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoMerge();
    [CompilerGeneratedAttribute]
public void set_AutoMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_RequiredContexts();
    [CompilerGeneratedAttribute]
public void set_RequiredContexts(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TransientEnvironment();
    [CompilerGeneratedAttribute]
public void set_TransientEnvironment(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ProductionEnvironment();
    [CompilerGeneratedAttribute]
public void set_ProductionEnvironment(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewDeploymentStatus : object {
    [CompilerGeneratedAttribute]
private DeploymentState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoInactive>k__BackingField;
    public DeploymentState State { get; private set; }
    public string LogUrl { get; public set; }
    public string Description { get; public set; }
    public string EnvironmentUrl { get; public set; }
    public Nullable`1<bool> AutoInactive { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewDeploymentStatus(DeploymentState deploymentState);
    [CompilerGeneratedAttribute]
public DeploymentState get_State();
    [CompilerGeneratedAttribute]
private void set_State(DeploymentState value);
    [CompilerGeneratedAttribute]
public string get_LogUrl();
    [CompilerGeneratedAttribute]
public void set_LogUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentUrl();
    [CompilerGeneratedAttribute]
public void set_EnvironmentUrl(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoInactive();
    [CompilerGeneratedAttribute]
public void set_AutoInactive(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewGist : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Public>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Files>k__BackingField;
    public string Description { get; public set; }
    public bool Public { get; public set; }
    public IDictionary`2<string, string> Files { get; private set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Public();
    [CompilerGeneratedAttribute]
public void set_Public(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IDictionary`2<string, string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewGpgKey : object {
    [CompilerGeneratedAttribute]
private string <ArmoredPublicKey>k__BackingField;
    public string ArmoredPublicKey { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewGpgKey(string publicKey);
    [CompilerGeneratedAttribute]
public string get_ArmoredPublicKey();
    [CompilerGeneratedAttribute]
public void set_ArmoredPublicKey(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewImpersonationToken : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    public IEnumerable`1<string> Scopes { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewImpersonationToken(IEnumerable`1<string> scopes);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewIssue : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Labels>k__BackingField;
    public string Title { get; private set; }
    public string Body { get; public set; }
    public Collection`1<string> Assignees { get; private set; }
    public Nullable`1<int> Milestone { get; public set; }
    public Collection`1<string> Labels { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewIssue(string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Assignees();
    [CompilerGeneratedAttribute]
private void set_Assignees(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(Collection`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewLabel : object {
    private string _color;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string Color { get; public set; }
    public string Description { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewLabel(string name, string color);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public string get_Color();
    public void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewLdapMapping : object {
    [CompilerGeneratedAttribute]
private string <LdapDistinguishedName>k__BackingField;
    [ParameterAttribute]
public string LdapDistinguishedName { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewLdapMapping(string ldapDistinguishedName);
    [CompilerGeneratedAttribute]
public string get_LdapDistinguishedName();
    [CompilerGeneratedAttribute]
private void set_LdapDistinguishedName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewMerge : object {
    [CompilerGeneratedAttribute]
private string <CommitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    public string CommitMessage { get; public set; }
    public string Base { get; private set; }
    public string Head { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewMerge(string base, string head);
    [CompilerGeneratedAttribute]
public string get_CommitMessage();
    [CompilerGeneratedAttribute]
public void set_CommitMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
private void set_Base(string value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewMilestone : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DueOn>k__BackingField;
    public string Title { get; private set; }
    public ItemState State { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<DateTimeOffset> DueOn { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewMilestone(string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public ItemState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemState value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DueOn();
    [CompilerGeneratedAttribute]
public void set_DueOn(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewOrganization : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Admin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileName>k__BackingField;
    public string Login { get; private set; }
    public string Admin { get; private set; }
    public string ProfileName { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewOrganization(string login, string admin);
    public NewOrganization(string login, string admin, string profileName);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
private void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Admin();
    [CompilerGeneratedAttribute]
private void set_Admin(string value);
    [CompilerGeneratedAttribute]
public string get_ProfileName();
    [CompilerGeneratedAttribute]
private void set_ProfileName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewPreReceiveEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    public string Name { get; public set; }
    public string ImageUrl { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewPreReceiveEnvironment(string name, string imageUrl);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
public void set_ImageUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewProject : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Name { get; private set; }
    public string Body { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewProject(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewProjectCard : object {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ProjectCardContentType> <ContentType>k__BackingField;
    public string Note { get; protected set; }
    [ParameterAttribute]
public Nullable`1<int> ContentId { get; protected set; }
    [ParameterAttribute]
public Nullable`1<ProjectCardContentType> ContentType { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewProjectCard(string note);
    public NewProjectCard(int contentId, ProjectCardContentType contentType);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
protected void set_Note(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ContentId();
    [CompilerGeneratedAttribute]
protected void set_ContentId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProjectCardContentType> get_ContentType();
    [CompilerGeneratedAttribute]
protected void set_ContentType(Nullable`1<ProjectCardContentType> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewProjectColumn : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewProjectColumn(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewPublicKey : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Title { get; public set; }
    public string Key { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewPublicKey(string title, string key);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewPullRequest : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MaintainerCanModify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Title { get; private set; }
    public string Base { get; private set; }
    public string Head { get; private set; }
    public Nullable`1<bool> MaintainerCanModify { get; public set; }
    public string Body { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewPullRequest(string title, string head, string baseRef);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
private void set_Base(string value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
private void set_Head(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MaintainerCanModify();
    [CompilerGeneratedAttribute]
public void set_MaintainerCanModify(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewReaction : object {
    [CompilerGeneratedAttribute]
private ReactionType <Content>k__BackingField;
    public ReactionType Content { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewReaction(ReactionType content);
    [CompilerGeneratedAttribute]
public ReactionType get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(ReactionType value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewReference : object {
    private static string _refsPrefix;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Ref { get; private set; }
    public string Sha { get; private set; }
    internal string DebuggerDisplay { get; }
    public NewReference(string reference, string sha);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
private void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    private static string GetReference(string reference);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRelease : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    public string TagName { get; private set; }
    public string TargetCommitish { get; public set; }
    public string Name { get; public set; }
    public string Body { get; public set; }
    public bool Draft { get; public set; }
    public bool Prerelease { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewRelease(string tagName);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
public void set_TargetCommitish(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public bool get_Draft();
    [CompilerGeneratedAttribute]
public void set_Draft(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepository : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoInit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasWiki>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitignoreTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TeamId>k__BackingField;
    public Nullable`1<bool> AutoInit { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> HasDownloads { get; public set; }
    public Nullable`1<bool> HasIssues { get; public set; }
    public Nullable`1<bool> HasWiki { get; public set; }
    public string Homepage { get; public set; }
    public string GitignoreTemplate { get; public set; }
    public string LicenseTemplate { get; public set; }
    public string Name { get; private set; }
    public Nullable`1<bool> Private { get; public set; }
    public Nullable`1<int> TeamId { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewRepository(string name);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AutoInit();
    [CompilerGeneratedAttribute]
public void set_AutoInit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasDownloads();
    [CompilerGeneratedAttribute]
public void set_HasDownloads(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasIssues();
    [CompilerGeneratedAttribute]
public void set_HasIssues(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasWiki();
    [CompilerGeneratedAttribute]
public void set_HasWiki(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public string get_GitignoreTemplate();
    [CompilerGeneratedAttribute]
public void set_GitignoreTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseTemplate();
    [CompilerGeneratedAttribute]
public void set_LicenseTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TeamId();
    [CompilerGeneratedAttribute]
public void set_TeamId(Nullable`1<int> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepositoryFork : object {
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    public string Organization { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
public void set_Organization(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepositoryHook : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    public string Name { get; private set; }
    public IReadOnlyDictionary`2<string, string> Config { get; protected set; }
    public IEnumerable`1<string> Events { get; public set; }
    public bool Active { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewRepositoryHook(string name, IReadOnlyDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
protected void set_Config(IReadOnlyDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(bool value);
    public virtual NewRepositoryHook ToRequest();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewRepositoryWebHook : NewRepositoryHook {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private WebHookContentType <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsecureSsl>k__BackingField;
    public string Url { get; protected set; }
    public WebHookContentType ContentType { get; public set; }
    public string Secret { get; public set; }
    public bool InsecureSsl { get; public set; }
    public NewRepositoryWebHook(string name, IReadOnlyDictionary`2<string, string> config, string url);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public WebHookContentType get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(WebHookContentType value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    [CompilerGeneratedAttribute]
public bool get_InsecureSsl();
    [CompilerGeneratedAttribute]
public void set_InsecureSsl(bool value);
    public virtual NewRepositoryHook ToRequest();
    private Dictionary`2<string, string> GetWebHookConfig();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewSubscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    public bool Subscribed { get; public set; }
    public bool Ignored { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
public void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTag : object {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private TaggedType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Tagger>k__BackingField;
    public string Tag { get; public set; }
    public string Message { get; public set; }
    public string Object { get; public set; }
    public TaggedType Type { get; public set; }
    public Committer Tagger { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(string value);
    [CompilerGeneratedAttribute]
public TaggedType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TaggedType value);
    [CompilerGeneratedAttribute]
public Committer get_Tagger();
    [CompilerGeneratedAttribute]
public void set_Tagger(Committer value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTeam : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Maintainers>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <RepoNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TeamPrivacy> <Privacy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Permission> <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ParentTeamId>k__BackingField;
    public string Name { get; private set; }
    public string Description { get; public set; }
    public Collection`1<string> Maintainers { get; protected set; }
    public Collection`1<string> RepoNames { get; protected set; }
    public Nullable`1<TeamPrivacy> Privacy { get; public set; }
    public Nullable`1<Permission> Permission { get; public set; }
    public Nullable`1<int> ParentTeamId { get; public set; }
    internal string DebuggerDisplay { get; }
    public NewTeam(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Maintainers();
    [CompilerGeneratedAttribute]
protected void set_Maintainers(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_RepoNames();
    [CompilerGeneratedAttribute]
protected void set_RepoNames(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TeamPrivacy> get_Privacy();
    [CompilerGeneratedAttribute]
public void set_Privacy(Nullable`1<TeamPrivacy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Permission> get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(Nullable`1<Permission> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ParentTeamId();
    [CompilerGeneratedAttribute]
public void set_ParentTeamId(Nullable`1<int> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewThreadSubscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    public bool Subscribed { get; public set; }
    public bool Ignored { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
public void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTree : object {
    [CompilerGeneratedAttribute]
private string <BaseTree>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NewTreeItem> <Tree>k__BackingField;
    public string BaseTree { get; public set; }
    public ICollection`1<NewTreeItem> Tree { get; private set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_BaseTree();
    [CompilerGeneratedAttribute]
public void set_BaseTree(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<NewTreeItem> get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(ICollection`1<NewTreeItem> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewTreeItem : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string Path { get; public set; }
    public string Mode { get; public set; }
    public TreeType Type { get; public set; }
    public string Sha { get; public set; }
    public string Content { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public TreeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TreeType value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NewUser : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public string Login { get; protected set; }
    public string Email { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NewUser(string login, string email);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.NotFoundException : ApiException {
    public NotFoundException(IResponse response);
    public NotFoundException(string message, HttpStatusCode statusCode);
    public NotFoundException(IResponse response, Exception innerException);
    protected NotFoundException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Notification : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationInfo <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unread>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastReadAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Id { get; protected set; }
    public Repository Repository { get; protected set; }
    public NotificationInfo Subject { get; protected set; }
    public string Reason { get; protected set; }
    public bool Unread { get; protected set; }
    public string UpdatedAt { get; protected set; }
    public string LastReadAt { get; protected set; }
    public string Url { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Notification(string id, Repository repository, NotificationInfo subject, string reason, bool unread, string updatedAt, string lastReadAt, string url);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(string value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public NotificationInfo get_Subject();
    [CompilerGeneratedAttribute]
protected void set_Subject(NotificationInfo value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
protected void set_Reason(string value);
    [CompilerGeneratedAttribute]
public bool get_Unread();
    [CompilerGeneratedAttribute]
protected void set_Unread(bool value);
    [CompilerGeneratedAttribute]
public string get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(string value);
    [CompilerGeneratedAttribute]
public string get_LastReadAt();
    [CompilerGeneratedAttribute]
protected void set_LastReadAt(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NotificationInfo : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LatestCommentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Title { get; protected set; }
    public string Url { get; protected set; }
    public string LatestCommentUrl { get; protected set; }
    public string Type { get; protected set; }
    internal string DebuggerDisplay { get; }
    public NotificationInfo(string title, string url, string latestCommentUrl, string type);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_LatestCommentUrl();
    [CompilerGeneratedAttribute]
protected void set_LatestCommentUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.NotificationsClient : ApiClient {
    public NotificationsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForCurrent(NotificationsRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(string owner, string name, NotificationsRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Notification>> GetAllForRepository(long repositoryId, NotificationsRequest request, ApiOptions options);
    public sealed virtual Task MarkAsRead();
    public sealed virtual Task MarkAsRead(MarkAsReadRequest markAsReadRequest);
    public sealed virtual Task MarkAsReadForRepository(string owner, string name);
    public sealed virtual Task MarkAsReadForRepository(long repositoryId);
    public sealed virtual Task MarkAsReadForRepository(string owner, string name, MarkAsReadRequest markAsReadRequest);
    public sealed virtual Task MarkAsReadForRepository(long repositoryId, MarkAsReadRequest markAsReadRequest);
    public sealed virtual Task`1<Notification> Get(int id);
    public sealed virtual Task MarkAsRead(int id);
    public sealed virtual Task`1<ThreadSubscription> GetThreadSubscription(int id);
    public sealed virtual Task`1<ThreadSubscription> SetThreadSubscription(int id, NewThreadSubscription threadSubscription);
    public sealed virtual Task DeleteThreadSubscription(int id);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.NotificationsRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Participating>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Before>k__BackingField;
    public bool All { get; public set; }
    public bool Participating { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    public Nullable`1<DateTimeOffset> Before { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    [CompilerGeneratedAttribute]
public bool get_Participating();
    [CompilerGeneratedAttribute]
public void set_Participating(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Before();
    [CompilerGeneratedAttribute]
public void set_Before(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OauthClient : object {
    private IConnection connection;
    private Uri hostAddress;
    public OauthClient(IConnection connection);
    public sealed virtual Uri GetGitHubLoginUrl(OauthLoginRequest request);
    [AsyncStateMachineAttribute("Octokit.OauthClient/<CreateAccessToken>d__4")]
public sealed virtual Task`1<OauthToken> CreateAccessToken(OauthTokenRequest request);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthLoginRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [ParameterAttribute]
public string ClientId { get; private set; }
    [ParameterAttribute]
public Uri RedirectUri { get; public set; }
    [ParameterAttribute]
public Collection`1<string> Scopes { get; private set; }
    [ParameterAttribute]
public string State { get; public set; }
    internal string DebuggerDisplay { get; }
    public OauthLoginRequest(string clientId);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(Uri value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
private void set_Scopes(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthToken : object {
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Scope>k__BackingField;
    public string TokenType { get; protected set; }
    public string AccessToken { get; protected set; }
    public IReadOnlyList`1<string> Scope { get; protected set; }
    internal string DebuggerDisplay { get; }
    public OauthToken(string tokenType, string accessToken, IReadOnlyList`1<string> scope);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
protected void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
protected void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Scope();
    [CompilerGeneratedAttribute]
protected void set_Scope(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OauthTokenRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RedirectUri>k__BackingField;
    [ParameterAttribute]
public string ClientId { get; private set; }
    [ParameterAttribute]
public string ClientSecret { get; private set; }
    [ParameterAttribute]
public string Code { get; private set; }
    [ParameterAttribute]
public Uri RedirectUri { get; public set; }
    internal string DebuggerDisplay { get; }
    public OauthTokenRequest(string clientId, string clientSecret, string code);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
private void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(Uri value);
    internal string get_DebuggerDisplay();
}
[ExcludeFromCtorWithAllPropertiesConventionTestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Organization : Account {
    [CompilerGeneratedAttribute]
private string <BillingAddress>k__BackingField;
    public string BillingAddress { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Organization(string avatarUrl, string bio, string blog, int collaborators, string company, DateTimeOffset createdAt, int diskUsage, string email, int followers, int following, Nullable`1<bool> hireable, string htmlUrl, int totalPrivateRepos, int id, string nodeId, string location, string login, string name, int ownedPrivateRepos, Plan plan, int privateGists, int publicGists, int publicRepos, string url, string billingAddress);
    [CompilerGeneratedAttribute]
public string get_BillingAddress();
    [CompilerGeneratedAttribute]
protected void set_BillingAddress(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationMembersClient : ApiClient {
    public OrganizationMembersClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersRole role, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, OrganizationMembersRole role, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllPublic(string org, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.OrganizationMembersClient/<CheckMember>d__11")]
public sealed virtual Task`1<bool> CheckMember(string org, string user);
    [AsyncStateMachineAttribute("Octokit.OrganizationMembersClient/<CheckMemberPublic>d__12")]
public sealed virtual Task`1<bool> CheckMemberPublic(string org, string user);
    public sealed virtual Task Delete(string org, string user);
    [AsyncStateMachineAttribute("Octokit.OrganizationMembersClient/<Publicize>d__14")]
public sealed virtual Task`1<bool> Publicize(string org, string user);
    public sealed virtual Task Conceal(string org, string user);
    public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org);
    public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(string org, ApiOptions options);
}
public enum Octokit.OrganizationMembersFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static OrganizationMembersFilter All;
    [ParameterAttribute]
public static OrganizationMembersFilter TwoFactorAuthenticationDisabled;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationMembershipInvitation : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<OrganizationMembershipRole> <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Inviter>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Login { get; protected set; }
    public string Email { get; protected set; }
    public StringEnum`1<OrganizationMembershipRole> Role { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public User Inviter { get; protected set; }
    internal string DebuggerDisplay { get; }
    public OrganizationMembershipInvitation(int id, string nodeId, string login, string email, OrganizationMembershipRole role, DateTimeOffset createdAt, User inviter);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
protected void set_Email(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<OrganizationMembershipRole> get_Role();
    [CompilerGeneratedAttribute]
protected void set_Role(StringEnum`1<OrganizationMembershipRole> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public User get_Inviter();
    [CompilerGeneratedAttribute]
protected void set_Inviter(User value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.OrganizationMembershipRole : Enum {
    public int value__;
    [ParameterAttribute]
public static OrganizationMembershipRole DirectMember;
    [ParameterAttribute]
public static OrganizationMembershipRole Admin;
    [ParameterAttribute]
public static OrganizationMembershipRole BillingManager;
    [ParameterAttribute]
public static OrganizationMembershipRole HiringManager;
    [ParameterAttribute]
public static OrganizationMembershipRole Reinstate;
}
public enum Octokit.OrganizationMembersRole : Enum {
    public int value__;
    [ParameterAttribute]
public static OrganizationMembersRole All;
    [ParameterAttribute]
public static OrganizationMembersRole Admin;
    [ParameterAttribute]
public static OrganizationMembersRole Member;
}
public class Octokit.OrganizationOutsideCollaboratorsClient : ApiClient {
    public OrganizationOutsideCollaboratorsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.OrganizationOutsideCollaboratorsClient/<Delete>d__5")]
public sealed virtual Task`1<bool> Delete(string org, string user);
    [AsyncStateMachineAttribute("Octokit.OrganizationOutsideCollaboratorsClient/<ConvertFromMember>d__6")]
public sealed virtual Task`1<bool> ConvertFromMember(string org, string user);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private long <Since>k__BackingField;
    public long Since { get; public set; }
    internal string DebuggerDisplay { get; }
    public OrganizationRequest(int since);
    [CompilerGeneratedAttribute]
public long get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(long value);
    internal string get_DebuggerDisplay();
}
public class Octokit.OrganizationsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IOrganizationMembersClient <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private ITeamsClient <Team>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationOutsideCollaboratorsClient <OutsideCollaborator>k__BackingField;
    public IOrganizationMembersClient Member { get; private set; }
    public ITeamsClient Team { get; private set; }
    public IOrganizationOutsideCollaboratorsClient OutsideCollaborator { get; private set; }
    public OrganizationsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationMembersClient get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(IOrganizationMembersClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ITeamsClient get_Team();
    [CompilerGeneratedAttribute]
private void set_Team(ITeamsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrganizationOutsideCollaboratorsClient get_OutsideCollaborator();
    [CompilerGeneratedAttribute]
private void set_OutsideCollaborator(IOrganizationOutsideCollaboratorsClient value);
    public sealed virtual Task`1<Organization> Get(string org);
    public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAllForUser(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAll();
    public sealed virtual Task`1<IReadOnlyList`1<Organization>> GetAll(OrganizationRequest request);
    public sealed virtual Task`1<Organization> Update(string organizationName, OrganizationUpdate updateRequest);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.OrganizationUpdate : object {
    [CompilerGeneratedAttribute]
private string <BillingEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string BillingEmail { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string Location { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_BillingEmail();
    [CompilerGeneratedAttribute]
public void set_BillingEmail(string value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Page : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PagesBuildStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Custom404>k__BackingField;
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public StringEnum`1<PagesBuildStatus> Status { get; protected set; }
    public string CName { get; protected set; }
    public bool Custom404 { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Page(string url, string htmlUrl, PagesBuildStatus status, string cname, bool custom404);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PagesBuildStatus> get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(StringEnum`1<PagesBuildStatus> value);
    [CompilerGeneratedAttribute]
public string get_CName();
    [CompilerGeneratedAttribute]
protected void set_CName(string value);
    [CompilerGeneratedAttribute]
public bool get_Custom404();
    [CompilerGeneratedAttribute]
protected void set_Custom404(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PagesBuild : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PagesBuildStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Pusher>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdatedAt>k__BackingField;
    public string Url { get; protected set; }
    public StringEnum`1<PagesBuildStatus> Status { get; protected set; }
    public ApiError Error { get; protected set; }
    public User Pusher { get; protected set; }
    public Commit Commit { get; protected set; }
    public TimeSpan Duration { get; protected set; }
    public DateTime CreatedAt { get; protected set; }
    public DateTime UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PagesBuild(string url, PagesBuildStatus status, ApiError error, User pusher, Commit commit, TimeSpan duration, DateTime createdAt, DateTime updatedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PagesBuildStatus> get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(StringEnum`1<PagesBuildStatus> value);
    [CompilerGeneratedAttribute]
public ApiError get_Error();
    [CompilerGeneratedAttribute]
protected void set_Error(ApiError value);
    [CompilerGeneratedAttribute]
public User get_Pusher();
    [CompilerGeneratedAttribute]
protected void set_Pusher(User value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
protected void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTime value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PagesBuildStatus : Enum {
    public int value__;
    [ParameterAttribute]
public static PagesBuildStatus Null;
    [ParameterAttribute]
public static PagesBuildStatus Queued;
    [ParameterAttribute]
public static PagesBuildStatus Building;
    [ParameterAttribute]
public static PagesBuildStatus Built;
    [ParameterAttribute]
public static PagesBuildStatus Errored;
}
internal static class Octokit.Pagination : object {
    internal static IDictionary`2<string, string> Setup(IDictionary`2<string, string> parameters, ApiOptions options);
    internal static bool ShouldContinue(Uri uri, ApiOptions options);
    private static Dictionary`2<string, string> ToQueryStringDictionary(Uri uri);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Participation : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <All>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <Owner>k__BackingField;
    public IReadOnlyList`1<int> All { get; protected set; }
    public IReadOnlyList`1<int> Owner { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Participation(IEnumerable`1<int> all, IEnumerable`1<int> owner);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_All();
    [CompilerGeneratedAttribute]
protected void set_All(IReadOnlyList`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_Owner();
    [CompilerGeneratedAttribute]
protected void set_Owner(IReadOnlyList`1<int> value);
    public int TotalCommitsByOwner();
    public int TotalCommitsByContributors();
    public int TotalCommits();
    internal string get_DebuggerDisplay();
}
public enum Octokit.Permission : Enum {
    public int value__;
    [ParameterAttribute]
public static Permission Admin;
    [ParameterAttribute]
public static Permission Push;
    [ParameterAttribute]
public static Permission Pull;
}
public enum Octokit.PermissionLevel : Enum {
    public int value__;
    [ParameterAttribute]
public static PermissionLevel Admin;
    [ParameterAttribute]
public static PermissionLevel Write;
    [ParameterAttribute]
public static PermissionLevel Read;
    [ParameterAttribute]
public static PermissionLevel None;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Plan : object {
    [CompilerGeneratedAttribute]
private long <Collaborators>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PrivateRepos>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Space>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BillingEmail>k__BackingField;
    public long Collaborators { get; protected set; }
    public string Name { get; protected set; }
    public long PrivateRepos { get; protected set; }
    public long Space { get; protected set; }
    public string BillingEmail { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Plan(long collaborators, string name, long privateRepos, long space, string billingEmail);
    [CompilerGeneratedAttribute]
public long get_Collaborators();
    [CompilerGeneratedAttribute]
protected void set_Collaborators(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_PrivateRepos();
    [CompilerGeneratedAttribute]
protected void set_PrivateRepos(long value);
    [CompilerGeneratedAttribute]
public long get_Space();
    [CompilerGeneratedAttribute]
protected void set_Space(long value);
    [CompilerGeneratedAttribute]
public string get_BillingEmail();
    [CompilerGeneratedAttribute]
protected void set_BillingEmail(string value);
    internal string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal class Octokit.PocoJsonSerializerStrategy : object {
    internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache;
    internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache;
    internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache;
    internal static Type[] EmptyTypes;
    internal static Type[] ArrayConstructorParameterTypes;
    private static String[] Iso8601Format;
    private static PocoJsonSerializerStrategy();
    protected virtual string MapClrMemberToJsonFieldName(MemberInfo member);
    protected virtual string MapClrMemberNameToJsonFieldName(string clrPropertyName);
    internal virtual ConstructorDelegate ContructorDelegateFactory(Type key);
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    public virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public virtual object DeserializeObject(object value, Type type);
    protected virtual object SerializeEnum(Enum p);
    protected virtual bool TrySerializeKnownTypes(object input, Object& output);
    protected virtual bool TrySerializeUnknownTypes(object input, Object& output);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PreReceiveEnvironment : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HooksCount>k__BackingField;
    [CompilerGeneratedAttribute]
private PreReceiveEnvironmentDownload <Download>k__BackingField;
    public long Id { get; protected set; }
    public string Name { get; protected set; }
    public string Url { get; protected set; }
    public string ImageUrl { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public bool DefaultEnvironment { get; protected set; }
    public Nullable`1<DateTimeOffset> CreatedAt { get; protected set; }
    public int HooksCount { get; protected set; }
    public PreReceiveEnvironmentDownload Download { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PreReceiveEnvironment(long id, string name, string url, string imageUrl, string htmlUrl, bool defaultEnvironment, Nullable`1<DateTimeOffset> createdAt, int hooksCount, PreReceiveEnvironmentDownload download);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
protected void set_ImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_DefaultEnvironment();
    [CompilerGeneratedAttribute]
protected void set_DefaultEnvironment(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public int get_HooksCount();
    [CompilerGeneratedAttribute]
protected void set_HooksCount(int value);
    [CompilerGeneratedAttribute]
public PreReceiveEnvironmentDownload get_Download();
    [CompilerGeneratedAttribute]
protected void set_Download(PreReceiveEnvironmentDownload value);
    public UpdatePreReceiveEnvironment ToUpdate();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PreReceiveEnvironmentDownload : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PreReceiveEnvironmentDownloadState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DownloadedAt>k__BackingField;
    public string Url { get; protected set; }
    public StringEnum`1<PreReceiveEnvironmentDownloadState> State { get; protected set; }
    public string Message { get; protected set; }
    public Nullable`1<DateTimeOffset> DownloadedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PreReceiveEnvironmentDownload(string url, PreReceiveEnvironmentDownloadState state, string message, Nullable`1<DateTimeOffset> downloadedAt);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PreReceiveEnvironmentDownloadState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<PreReceiveEnvironmentDownloadState> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DownloadedAt();
    [CompilerGeneratedAttribute]
protected void set_DownloadedAt(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PreReceiveEnvironmentDownloadState : Enum {
    public int value__;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState NotStarted;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState InProgress;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState Success;
    [ParameterAttribute]
public static PreReceiveEnvironmentDownloadState Failed;
}
public class Octokit.PrivateRepositoryQuotaExceededException : ApiValidationException {
    public string Message { get; }
    public PrivateRepositoryQuotaExceededException(ApiValidationException innerException);
    protected PrivateRepositoryQuotaExceededException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.ProductHeaderValue : object {
    private ProductHeaderValue _productHeaderValue;
    public string Name { get; }
    public string Version { get; }
    public ProductHeaderValue(string name);
    public ProductHeaderValue(string name, string version);
    private ProductHeaderValue(ProductHeaderValue productHeader);
    public string get_Name();
    public string get_Version();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ProductHeaderValue Parse(string input);
    public static bool TryParse(string input, ProductHeaderValue& parsedValue);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Project : object {
    [CompilerGeneratedAttribute]
private string <OwnerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public string OwnerUrl { get; protected set; }
    public string Url { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string Body { get; protected set; }
    public int Number { get; protected set; }
    public StringEnum`1<ItemState> State { get; protected set; }
    public User Creator { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Project(string ownerUrl, string url, int id, string nodeId, string name, string body, int number, ItemState state, User creator, DateTimeOffset createdAt, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public string get_OwnerUrl();
    [CompilerGeneratedAttribute]
protected void set_OwnerUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
protected void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
protected void set_Creator(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCard : object {
    [CompilerGeneratedAttribute]
private string <ColumnUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Archived>k__BackingField;
    public string ColumnUrl { get; protected set; }
    public string ContentUrl { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Note { get; protected set; }
    public User Creator { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public bool Archived { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ProjectCard(string columnUrl, string contentUrl, int id, string nodeId, string note, User creator, DateTimeOffset createdAt, DateTimeOffset updatedAt, bool archived);
    [CompilerGeneratedAttribute]
public string get_ColumnUrl();
    [CompilerGeneratedAttribute]
protected void set_ColumnUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContentUrl();
    [CompilerGeneratedAttribute]
protected void set_ContentUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
protected void set_Note(string value);
    [CompilerGeneratedAttribute]
public User get_Creator();
    [CompilerGeneratedAttribute]
protected void set_Creator(User value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_Archived();
    [CompilerGeneratedAttribute]
protected void set_Archived(bool value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ProjectCardArchivedStateFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static ProjectCardArchivedStateFilter NotArchived;
    [ParameterAttribute]
public static ProjectCardArchivedStateFilter Archived;
    [ParameterAttribute]
public static ProjectCardArchivedStateFilter All;
}
public enum Octokit.ProjectCardContentType : Enum {
    public int value__;
    [ParameterAttribute]
public static ProjectCardContentType Issue;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCardMove : object {
    [CompilerGeneratedAttribute]
private string <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnId>k__BackingField;
    public string Position { get; private set; }
    public int ColumnId { get; public set; }
    internal string DebuggerDisplay { get; }
    public ProjectCardMove(ProjectCardPosition position, int columnId, Nullable`1<int> cardId);
    [CompilerGeneratedAttribute]
public string get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(string value);
    [CompilerGeneratedAttribute]
public int get_ColumnId();
    [CompilerGeneratedAttribute]
public void set_ColumnId(int value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ProjectCardPosition : Enum {
    public int value__;
    public static ProjectCardPosition Top;
    public static ProjectCardPosition Bottom;
    public static ProjectCardPosition After;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCardRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<ProjectCardArchivedStateFilter> <ArchivedState>k__BackingField;
    [ParameterAttribute]
public Nullable`1<ProjectCardArchivedStateFilter> ArchivedState { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectCardRequest(ProjectCardArchivedStateFilter archived);
    [CompilerGeneratedAttribute]
public Nullable`1<ProjectCardArchivedStateFilter> get_ArchivedState();
    [CompilerGeneratedAttribute]
private void set_ArchivedState(Nullable`1<ProjectCardArchivedStateFilter> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ProjectCardsClient : ApiClient {
    public ProjectCardsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId);
    public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<ProjectCard>> GetAll(int columnId, ProjectCardRequest request, ApiOptions options);
    public sealed virtual Task`1<ProjectCard> Get(int id);
    public sealed virtual Task`1<ProjectCard> Create(int columnId, NewProjectCard newProjectCard);
    public sealed virtual Task`1<ProjectCard> Update(int id, ProjectCardUpdate projectCardUpdate);
    [AsyncStateMachineAttribute("Octokit.ProjectCardsClient/<Delete>d__8")]
public sealed virtual Task`1<bool> Delete(int id);
    [AsyncStateMachineAttribute("Octokit.ProjectCardsClient/<Move>d__9")]
public sealed virtual Task`1<bool> Move(int id, ProjectCardMove position);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectCardUpdate : object {
    [CompilerGeneratedAttribute]
private string <Note>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    public string Note { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    internal string DebuggerDisplay { get; }
    [ObsoleteAttribute("This constructor will be removed in a future release, due to the 'Note' parameter not being mandatory.  Use object initializer syntax instead.")]
public ProjectCardUpdate(string note);
    [CompilerGeneratedAttribute]
public string get_Note();
    [CompilerGeneratedAttribute]
public void set_Note(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectColumn : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string ProjectUrl { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ProjectColumn(int id, string nodeId, string name, string projectUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectUrl();
    [CompilerGeneratedAttribute]
protected void set_ProjectUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectColumnMove : object {
    [CompilerGeneratedAttribute]
private string <Position>k__BackingField;
    public string Position { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectColumnMove(ProjectColumnPosition position, Nullable`1<int> columnId);
    [CompilerGeneratedAttribute]
public string get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ProjectColumnPosition : Enum {
    public int value__;
    public static ProjectColumnPosition First;
    public static ProjectColumnPosition Last;
    public static ProjectColumnPosition After;
}
public class Octokit.ProjectColumnsClient : ApiClient {
    public ProjectColumnsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId);
    public sealed virtual Task`1<IReadOnlyList`1<ProjectColumn>> GetAll(int projectId, ApiOptions options);
    public sealed virtual Task`1<ProjectColumn> Get(int id);
    public sealed virtual Task`1<ProjectColumn> Create(int projectId, NewProjectColumn newProjectColumn);
    public sealed virtual Task`1<ProjectColumn> Update(int id, ProjectColumnUpdate projectColumnUpdate);
    [AsyncStateMachineAttribute("Octokit.ProjectColumnsClient/<Delete>d__6")]
public sealed virtual Task`1<bool> Delete(int id);
    [AsyncStateMachineAttribute("Octokit.ProjectColumnsClient/<Move>d__7")]
public sealed virtual Task`1<bool> Move(int id, ProjectColumnMove position);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectColumnUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectColumnUpdate(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    public ItemStateFilter State { get; private set; }
    internal string DebuggerDisplay { get; }
    public ProjectRequest(ItemStateFilter state);
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
private void set_State(ItemStateFilter value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ProjectsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IProjectCardsClient <Card>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectColumnsClient <Column>k__BackingField;
    public IProjectCardsClient Card { get; private set; }
    public IProjectColumnsClient Column { get; private set; }
    public ProjectsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(string owner, string name, ProjectRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForRepository(long repositoryId, ProjectRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Project>> GetAllForOrganization(string organization, ProjectRequest request, ApiOptions options);
    public sealed virtual Task`1<Project> Get(int id);
    public sealed virtual Task`1<Project> CreateForRepository(long repositoryId, NewProject newProject);
    public sealed virtual Task`1<Project> CreateForOrganization(string organization, NewProject newProject);
    public sealed virtual Task`1<Project> Update(int id, ProjectUpdate projectUpdate);
    [AsyncStateMachineAttribute("Octokit.ProjectsClient/<Delete>d__17")]
public sealed virtual Task`1<bool> Delete(int id);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectCardsClient get_Card();
    [CompilerGeneratedAttribute]
private void set_Card(IProjectCardsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectColumnsClient get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(IProjectColumnsClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ProjectUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    public string Name { get; public set; }
    public string Body { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    internal string get_DebuggerDisplay();
}
internal class Octokit.PropertyOrField : object {
    private PropertyInfo _propertyInfo;
    private FieldInfo _fieldInfo;
    [CompilerGeneratedAttribute]
private bool <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Base64Encoded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SerializeNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParameterAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    public bool CanRead { get; private set; }
    public bool CanWrite { get; private set; }
    public bool Base64Encoded { get; private set; }
    public bool SerializeNull { get; private set; }
    public bool IsStatic { get; private set; }
    public bool IsPublic { get; private set; }
    public bool HasParameterAttribute { get; private set; }
    public MemberInfo MemberInfo { get; private set; }
    public string JsonFieldName { get; }
    public GetDelegate GetDelegate { get; }
    public SetDelegate SetDelegate { get; }
    public Type Type { get; }
    public bool CanDeserialize { get; }
    public bool CanSerialize { get; }
    public PropertyOrField(PropertyInfo propertyInfo);
    public PropertyOrField(FieldInfo fieldInfo);
    protected PropertyOrField(MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public bool get_CanRead();
    [CompilerGeneratedAttribute]
private void set_CanRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanWrite();
    [CompilerGeneratedAttribute]
private void set_CanWrite(bool value);
    [CompilerGeneratedAttribute]
public bool get_Base64Encoded();
    [CompilerGeneratedAttribute]
private void set_Base64Encoded(bool value);
    [CompilerGeneratedAttribute]
public bool get_SerializeNull();
    [CompilerGeneratedAttribute]
private void set_SerializeNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
private void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPublic();
    [CompilerGeneratedAttribute]
private void set_IsPublic(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterAttribute();
    [CompilerGeneratedAttribute]
private void set_HasParameterAttribute(bool value);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
private void set_MemberInfo(MemberInfo value);
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public string get_JsonFieldName();
    public GetDelegate get_GetDelegate();
    public SetDelegate get_SetDelegate();
    public Type get_Type();
    public bool get_CanDeserialize();
    public bool get_CanSerialize();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PublicKey : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public int Id { get; protected set; }
    public string Key { get; protected set; }
    public string Url { get; protected set; }
    public string Title { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PublicKey(int id, string key, string url, string title);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
protected void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PublicRepositoryRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private long <Since>k__BackingField;
    public long Since { get; public set; }
    internal string DebuggerDisplay { get; }
    public PublicRepositoryRequest(long since);
    [CompilerGeneratedAttribute]
public long get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(long value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequest : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiffUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatchUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusesUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ClosedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <MergedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <Assignees>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Mergeable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringEnum`1<MergeableState>> <MergeableState>k__BackingField;
    [CompilerGeneratedAttribute]
private User <MergedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergeCommitSha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MaintainerCanModify>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<User> <RequestedReviewers>k__BackingField;
    public long Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string DiffUrl { get; protected set; }
    public string PatchUrl { get; protected set; }
    public string IssueUrl { get; protected set; }
    public string StatusesUrl { get; protected set; }
    public int Number { get; protected set; }
    public StringEnum`1<ItemState> State { get; protected set; }
    public string Title { get; protected set; }
    public string Body { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> ClosedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> MergedAt { get; protected set; }
    public GitReference Head { get; protected set; }
    public GitReference Base { get; protected set; }
    public User User { get; protected set; }
    public User Assignee { get; protected set; }
    public IReadOnlyList`1<User> Assignees { get; protected set; }
    public Milestone Milestone { get; protected set; }
    public bool Merged { get; }
    public Nullable`1<bool> Mergeable { get; protected set; }
    public Nullable`1<StringEnum`1<MergeableState>> MergeableState { get; protected set; }
    public User MergedBy { get; protected set; }
    public string MergeCommitSha { get; protected set; }
    public int Comments { get; protected set; }
    public int Commits { get; protected set; }
    public int Additions { get; protected set; }
    public int Deletions { get; protected set; }
    public int ChangedFiles { get; protected set; }
    public bool Locked { get; protected set; }
    public Nullable`1<bool> MaintainerCanModify { get; protected set; }
    public IReadOnlyList`1<User> RequestedReviewers { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PullRequest(int number);
    public PullRequest(long id, string nodeId, string url, string htmlUrl, string diffUrl, string patchUrl, string issueUrl, string statusesUrl, int number, ItemState state, string title, string body, DateTimeOffset createdAt, DateTimeOffset updatedAt, Nullable`1<DateTimeOffset> closedAt, Nullable`1<DateTimeOffset> mergedAt, GitReference head, GitReference base, User user, User assignee, IReadOnlyList`1<User> assignees, Nullable`1<bool> mergeable, Nullable`1<MergeableState> mergeableState, User mergedBy, string mergeCommitSha, int comments, int commits, int additions, int deletions, int changedFiles, Milestone milestone, bool locked, Nullable`1<bool> maintainerCanModify, IReadOnlyList`1<User> requestedReviewers);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DiffUrl();
    [CompilerGeneratedAttribute]
protected void set_DiffUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PatchUrl();
    [CompilerGeneratedAttribute]
protected void set_PatchUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssueUrl();
    [CompilerGeneratedAttribute]
protected void set_IssueUrl(string value);
    [CompilerGeneratedAttribute]
public string get_StatusesUrl();
    [CompilerGeneratedAttribute]
protected void set_StatusesUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
protected void set_Number(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ClosedAt();
    [CompilerGeneratedAttribute]
protected void set_ClosedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_MergedAt();
    [CompilerGeneratedAttribute]
protected void set_MergedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public GitReference get_Head();
    [CompilerGeneratedAttribute]
protected void set_Head(GitReference value);
    [CompilerGeneratedAttribute]
public GitReference get_Base();
    [CompilerGeneratedAttribute]
protected void set_Base(GitReference value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
protected void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_Assignees();
    [CompilerGeneratedAttribute]
protected void set_Assignees(IReadOnlyList`1<User> value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
protected void set_Milestone(Milestone value);
    public bool get_Merged();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Mergeable();
    [CompilerGeneratedAttribute]
protected void set_Mergeable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringEnum`1<MergeableState>> get_MergeableState();
    [CompilerGeneratedAttribute]
protected void set_MergeableState(Nullable`1<StringEnum`1<MergeableState>> value);
    [CompilerGeneratedAttribute]
public User get_MergedBy();
    [CompilerGeneratedAttribute]
protected void set_MergedBy(User value);
    [CompilerGeneratedAttribute]
public string get_MergeCommitSha();
    [CompilerGeneratedAttribute]
protected void set_MergeCommitSha(string value);
    [CompilerGeneratedAttribute]
public int get_Comments();
    [CompilerGeneratedAttribute]
protected void set_Comments(int value);
    [CompilerGeneratedAttribute]
public int get_Commits();
    [CompilerGeneratedAttribute]
protected void set_Commits(int value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
protected void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
protected void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_ChangedFiles();
    [CompilerGeneratedAttribute]
protected void set_ChangedFiles(int value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
protected void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MaintainerCanModify();
    [CompilerGeneratedAttribute]
protected void set_MaintainerCanModify(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<User> get_RequestedReviewers();
    [CompilerGeneratedAttribute]
protected void set_RequestedReviewers(IReadOnlyList`1<User> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestCommentPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestReviewComment <Comment>k__BackingField;
    public string Action { get; protected set; }
    public PullRequest PullRequest { get; protected set; }
    public PullRequestReviewComment Comment { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
protected void set_PullRequest(PullRequest value);
    [CompilerGeneratedAttribute]
public PullRequestReviewComment get_Comment();
    [CompilerGeneratedAttribute]
protected void set_Comment(PullRequestReviewComment value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestCommit : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private Committer <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GitReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string NodeId { get; protected set; }
    public Committer Author { get; protected set; }
    public string CommentsUrl { get; protected set; }
    public Commit Commit { get; protected set; }
    public Committer Committer { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public IReadOnlyList`1<GitReference> Parents { get; protected set; }
    public string Sha { get; protected set; }
    public string Url { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PullRequestCommit(string nodeId, Committer author, string commentsUrl, Commit commit, Committer committer, string htmlUrl, IEnumerable`1<GitReference> parents, string sha, string url);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public Committer get_Author();
    [CompilerGeneratedAttribute]
protected void set_Author(Committer value);
    [CompilerGeneratedAttribute]
public string get_CommentsUrl();
    [CompilerGeneratedAttribute]
protected void set_CommentsUrl(string value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(Commit value);
    [CompilerGeneratedAttribute]
public Committer get_Committer();
    [CompilerGeneratedAttribute]
protected void set_Committer(Committer value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<GitReference> get_Parents();
    [CompilerGeneratedAttribute]
protected void set_Parents(IReadOnlyList`1<GitReference> value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    public string Action { get; protected set; }
    public int Number { get; protected set; }
    public PullRequest PullRequest { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
protected void set_Number(int value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
protected void set_PullRequest(PullRequest value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestFile : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Additions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Deletions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousFileName>k__BackingField;
    public string Sha { get; protected set; }
    [ParameterAttribute]
public string FileName { get; protected set; }
    public string Status { get; protected set; }
    public int Additions { get; protected set; }
    public int Deletions { get; protected set; }
    public int Changes { get; protected set; }
    public string BlobUrl { get; protected set; }
    public string RawUrl { get; protected set; }
    public string ContentsUrl { get; protected set; }
    public string Patch { get; protected set; }
    [ParameterAttribute]
public string PreviousFileName { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PullRequestFile(string sha, string fileName, string status, int additions, int deletions, int changes, string blobUrl, string rawUrl, string contentsUrl, string patch, string previousFileName);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
protected void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
protected void set_Status(string value);
    [CompilerGeneratedAttribute]
public int get_Additions();
    [CompilerGeneratedAttribute]
protected void set_Additions(int value);
    [CompilerGeneratedAttribute]
public int get_Deletions();
    [CompilerGeneratedAttribute]
protected void set_Deletions(int value);
    [CompilerGeneratedAttribute]
public int get_Changes();
    [CompilerGeneratedAttribute]
protected void set_Changes(int value);
    [CompilerGeneratedAttribute]
public string get_BlobUrl();
    [CompilerGeneratedAttribute]
protected void set_BlobUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RawUrl();
    [CompilerGeneratedAttribute]
protected void set_RawUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ContentsUrl();
    [CompilerGeneratedAttribute]
protected void set_ContentsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Patch();
    [CompilerGeneratedAttribute]
protected void set_Patch(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousFileName();
    [CompilerGeneratedAttribute]
protected void set_PreviousFileName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestMerge : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Merged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Sha { get; protected set; }
    public bool Merged { get; protected set; }
    public string Message { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PullRequestMerge(string sha, bool merged, string message);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public bool get_Merged();
    [CompilerGeneratedAttribute]
protected void set_Merged(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PullRequestMergeMethod : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestMergeMethod Merge;
    [ParameterAttribute]
public static PullRequestMergeMethod Squash;
    [ParameterAttribute]
public static PullRequestMergeMethod Rebase;
}
public class Octokit.PullRequestMismatchException : ApiException {
    public string Message { get; }
    public PullRequestMismatchException(IResponse response);
    public PullRequestMismatchException(IResponse response, Exception innerException);
    protected PullRequestMismatchException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.PullRequestNotMergeableException : ApiException {
    public string Message { get; }
    public PullRequestNotMergeableException(IResponse response);
    public PullRequestNotMergeableException(IResponse response, Exception innerException);
    protected PullRequestNotMergeableException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private ItemStateFilter <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    public ItemStateFilter State { get; public set; }
    public string Head { get; public set; }
    public string Base { get; public set; }
    [ParameterAttribute]
public PullRequestSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public ItemStateFilter get_State();
    [CompilerGeneratedAttribute]
public void set_State(ItemStateFilter value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
public void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public PullRequestSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(PullRequestSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReview : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<PullRequestReviewState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PullRequestUrl>k__BackingField;
    public long Id { get; protected set; }
    public string NodeId { get; protected set; }
    public StringEnum`1<PullRequestReviewState> State { get; protected set; }
    public string CommitId { get; protected set; }
    public User User { get; protected set; }
    public string Body { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string PullRequestUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReview(long id);
    public PullRequestReview(long id, string nodeId, string commitId, User user, string body, string htmlUrl, string pullRequestUrl, PullRequestReviewState state);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<PullRequestReviewState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<PullRequestReviewState> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
protected void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PullRequestUrl();
    [CompilerGeneratedAttribute]
protected void set_PullRequestUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewComment : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiffHunk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OriginalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PullRequestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ReactionSummary <Reactions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <InReplyToId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PullRequestReviewId>k__BackingField;
    public string Url { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string DiffHunk { get; protected set; }
    public string Path { get; protected set; }
    public Nullable`1<int> Position { get; protected set; }
    public Nullable`1<int> OriginalPosition { get; protected set; }
    public string CommitId { get; protected set; }
    public string OriginalCommitId { get; protected set; }
    public User User { get; protected set; }
    public string Body { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string PullRequestUrl { get; protected set; }
    public ReactionSummary Reactions { get; protected set; }
    public Nullable`1<int> InReplyToId { get; protected set; }
    public Nullable`1<int> PullRequestReviewId { get; protected set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewComment(int id);
    public PullRequestReviewComment(string url, int id, string nodeId, string diffHunk, string path, Nullable`1<int> position, Nullable`1<int> originalPosition, string commitId, string originalCommitId, User user, string body, DateTimeOffset createdAt, DateTimeOffset updatedAt, string htmlUrl, string pullRequestUrl, ReactionSummary reactions, Nullable`1<int> inReplyToId, Nullable`1<int> pullRequestReviewId);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_DiffHunk();
    [CompilerGeneratedAttribute]
protected void set_DiffHunk(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Position();
    [CompilerGeneratedAttribute]
protected void set_Position(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OriginalPosition();
    [CompilerGeneratedAttribute]
protected void set_OriginalPosition(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
protected void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalCommitId();
    [CompilerGeneratedAttribute]
protected void set_OriginalCommitId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PullRequestUrl();
    [CompilerGeneratedAttribute]
protected void set_PullRequestUrl(string value);
    [CompilerGeneratedAttribute]
public ReactionSummary get_Reactions();
    [CompilerGeneratedAttribute]
protected void set_Reactions(ReactionSummary value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_InReplyToId();
    [CompilerGeneratedAttribute]
protected void set_InReplyToId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PullRequestReviewId();
    [CompilerGeneratedAttribute]
protected void set_PullRequestReviewId(Nullable`1<int> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentCreate : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public string Body { get; private set; }
    public string CommitId { get; private set; }
    public string Path { get; private set; }
    public int Position { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewCommentCreate(string body, string commitId, string path, int position);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
private void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentEdit : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Body { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewCommentEdit(string body);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PullRequestReviewCommentReactionsClient : ApiClient {
    public PullRequestReviewCommentReactionsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<Reaction>> GetAll(long repositoryId, int number);
    public sealed virtual Task`1<Reaction> Create(string owner, string name, int number, NewReaction reaction);
    public sealed virtual Task`1<Reaction> Create(long repositoryId, int number, NewReaction reaction);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentReplyCreate : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InReplyTo>k__BackingField;
    public string Body { get; private set; }
    public int InReplyTo { get; private set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewCommentReplyCreate(string body, int inReplyTo);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    [CompilerGeneratedAttribute]
public int get_InReplyTo();
    [CompilerGeneratedAttribute]
private void set_InReplyTo(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCommentRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private PullRequestReviewCommentSort <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Since>k__BackingField;
    public PullRequestReviewCommentSort Sort { get; public set; }
    public SortDirection Direction { get; public set; }
    public Nullable`1<DateTimeOffset> Since { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public PullRequestReviewCommentSort get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(PullRequestReviewCommentSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(SortDirection value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(Nullable`1<DateTimeOffset> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PullRequestReviewCommentsClient : ApiClient {
    public PullRequestReviewCommentsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(string owner, string name, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAll(long repositoryId, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(string owner, string name, PullRequestReviewCommentRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllForRepository(long repositoryId, PullRequestReviewCommentRequest request, ApiOptions options);
    public sealed virtual Task`1<PullRequestReviewComment> GetComment(string owner, string name, int number);
    public sealed virtual Task`1<PullRequestReviewComment> GetComment(long repositoryId, int number);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<Create>d__15")]
public sealed virtual Task`1<PullRequestReviewComment> Create(string owner, string name, int number, PullRequestReviewCommentCreate comment);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<Create>d__16")]
public sealed virtual Task`1<PullRequestReviewComment> Create(long repositoryId, int number, PullRequestReviewCommentCreate comment);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<CreateReply>d__17")]
public sealed virtual Task`1<PullRequestReviewComment> CreateReply(string owner, string name, int number, PullRequestReviewCommentReplyCreate comment);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewCommentsClient/<CreateReply>d__18")]
public sealed virtual Task`1<PullRequestReviewComment> CreateReply(long repositoryId, int number, PullRequestReviewCommentReplyCreate comment);
    public sealed virtual Task`1<PullRequestReviewComment> Edit(string owner, string name, int number, PullRequestReviewCommentEdit comment);
    public sealed virtual Task`1<PullRequestReviewComment> Edit(long repositoryId, int number, PullRequestReviewCommentEdit comment);
    public sealed virtual Task Delete(string owner, string name, int number);
    public sealed virtual Task Delete(long repositoryId, int number);
}
public enum Octokit.PullRequestReviewCommentSort : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestReviewCommentSort Created;
    [ParameterAttribute]
public static PullRequestReviewCommentSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewCreate : RequestParameters {
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PullRequestReviewEvent> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DraftPullRequestReviewComment> <Comments>k__BackingField;
    public string CommitId { get; public set; }
    public string Body { get; public set; }
    public Nullable`1<PullRequestReviewEvent> Event { get; public set; }
    public List`1<DraftPullRequestReviewComment> Comments { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<PullRequestReviewEvent> get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(Nullable`1<PullRequestReviewEvent> value);
    [CompilerGeneratedAttribute]
public List`1<DraftPullRequestReviewComment> get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(List`1<DraftPullRequestReviewComment> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewDismiss : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.PullRequestReviewEvent : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestReviewEvent Approve;
    [ParameterAttribute]
public static PullRequestReviewEvent RequestChanges;
    [ParameterAttribute]
public static PullRequestReviewEvent Comment;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequest <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestReview <Review>k__BackingField;
    public string Action { get; protected set; }
    public PullRequest PullRequest { get; protected set; }
    public PullRequestReview Review { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public PullRequest get_PullRequest();
    [CompilerGeneratedAttribute]
protected void set_PullRequest(PullRequest value);
    [CompilerGeneratedAttribute]
public PullRequestReview get_Review();
    [CompilerGeneratedAttribute]
protected void set_Review(PullRequestReview value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewRequest : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Reviewers>k__BackingField;
    public IReadOnlyList`1<string> Reviewers { get; public set; }
    internal string DebuggerDisplay { get; }
    public PullRequestReviewRequest(IReadOnlyList`1<string> reviewers);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Reviewers();
    [CompilerGeneratedAttribute]
public void set_Reviewers(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PullRequestReviewRequestsClient : ApiClient {
    public PullRequestReviewRequestsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId, int number, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewRequestsClient/<Create>d__5")]
public sealed virtual Task`1<PullRequest> Create(string owner, string name, int number, PullRequestReviewRequest users);
    [AsyncStateMachineAttribute("Octokit.PullRequestReviewRequestsClient/<Create>d__6")]
public sealed virtual Task`1<PullRequest> Create(long repositoryId, int number, PullRequestReviewRequest users);
    public sealed virtual Task Delete(string owner, string name, int number, PullRequestReviewRequest users);
    public sealed virtual Task Delete(long repositoryId, int number, PullRequestReviewRequest users);
}
public class Octokit.PullRequestReviewsClient : ApiClient {
    public PullRequestReviewsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(string owner, string name, int number, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReview>> GetAll(long repositoryId, int number, ApiOptions options);
    public sealed virtual Task`1<PullRequestReview> Get(string owner, string name, int number, long reviewId);
    public sealed virtual Task`1<PullRequestReview> Get(long repositoryId, int number, long reviewId);
    public sealed virtual Task`1<PullRequestReview> Create(string owner, string name, int number, PullRequestReviewCreate review);
    public sealed virtual Task`1<PullRequestReview> Create(long repositoryId, int number, PullRequestReviewCreate review);
    public sealed virtual Task Delete(string owner, string name, int number, long reviewId);
    public sealed virtual Task Delete(long repositoryId, int number, long reviewId);
    public sealed virtual Task`1<PullRequestReview> Dismiss(string owner, string name, int number, long reviewId, PullRequestReviewDismiss dismissMessage);
    public sealed virtual Task`1<PullRequestReview> Dismiss(long repositoryId, int number, long reviewId, PullRequestReviewDismiss dismissMessage);
    public sealed virtual Task`1<PullRequestReview> Submit(string owner, string name, int number, long reviewId, PullRequestReviewSubmit submitMessage);
    public sealed virtual Task`1<PullRequestReview> Submit(long repositoryId, int number, long reviewId, PullRequestReviewSubmit submitMessage);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int number, long reviewId);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int number, long reviewId);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(string owner, string name, int number, long reviewId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestReviewComment>> GetAllComments(long repositoryId, int number, long reviewId, ApiOptions options);
}
public enum Octokit.PullRequestReviewState : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestReviewState Approved;
    [ParameterAttribute]
public static PullRequestReviewState ChangesRequested;
    [ParameterAttribute]
public static PullRequestReviewState Commented;
    [ParameterAttribute]
public static PullRequestReviewState Dismissed;
    [ParameterAttribute]
public static PullRequestReviewState Pending;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestReviewSubmit : RequestParameters {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestReviewEvent <Event>k__BackingField;
    public string Body { get; public set; }
    public PullRequestReviewEvent Event { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public PullRequestReviewEvent get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(PullRequestReviewEvent value);
    internal string get_DebuggerDisplay();
}
public class Octokit.PullRequestsClient : ApiClient {
    [CompilerGeneratedAttribute]
private IPullRequestReviewsClient <Review>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestReviewCommentsClient <ReviewComment>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestReviewRequestsClient <ReviewRequest>k__BackingField;
    public IPullRequestReviewsClient Review { get; public set; }
    public IPullRequestReviewCommentsClient ReviewComment { get; public set; }
    public IPullRequestReviewRequestsClient ReviewRequest { get; public set; }
    public PullRequestsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewsClient get_Review();
    [CompilerGeneratedAttribute]
public void set_Review(IPullRequestReviewsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewCommentsClient get_ReviewComment();
    [CompilerGeneratedAttribute]
public void set_ReviewComment(IPullRequestReviewCommentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewRequestsClient get_ReviewRequest();
    [CompilerGeneratedAttribute]
public void set_ReviewRequest(IPullRequestReviewRequestsClient value);
    public sealed virtual Task`1<PullRequest> Get(string owner, string name, int number);
    public sealed virtual Task`1<PullRequest> Get(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(string owner, string name, PullRequestRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequest>> GetAllForRepository(long repositoryId, PullRequestRequest request, ApiOptions options);
    public sealed virtual Task`1<PullRequest> Create(string owner, string name, NewPullRequest newPullRequest);
    public sealed virtual Task`1<PullRequest> Create(long repositoryId, NewPullRequest newPullRequest);
    public sealed virtual Task`1<PullRequest> Update(string owner, string name, int number, PullRequestUpdate pullRequestUpdate);
    public sealed virtual Task`1<PullRequest> Update(long repositoryId, int number, PullRequestUpdate pullRequestUpdate);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merge>d__27")]
public sealed virtual Task`1<PullRequestMerge> Merge(string owner, string name, int number, MergePullRequest mergePullRequest);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merge>d__28")]
public sealed virtual Task`1<PullRequestMerge> Merge(long repositoryId, int number, MergePullRequest mergePullRequest);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merged>d__29")]
public sealed virtual Task`1<bool> Merged(string owner, string name, int number);
    [AsyncStateMachineAttribute("Octokit.PullRequestsClient/<Merged>d__30")]
public sealed virtual Task`1<bool> Merged(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestCommit>> Commits(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(string owner, string name, int number);
    public sealed virtual Task`1<IReadOnlyList`1<PullRequestFile>> Files(long repositoryId, int number);
}
public enum Octokit.PullRequestSort : Enum {
    public int value__;
    [ParameterAttribute]
public static PullRequestSort Created;
    [ParameterAttribute]
public static PullRequestSort Updated;
    [ParameterAttribute]
public static PullRequestSort Popularity;
    [ParameterAttribute]
public static PullRequestSort LongRunning;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PullRequestUpdate : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MaintainerCanModify>k__BackingField;
    public string Title { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public string Body { get; public set; }
    public string Base { get; public set; }
    public Nullable`1<bool> MaintainerCanModify { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MaintainerCanModify();
    [CompilerGeneratedAttribute]
public void set_MaintainerCanModify(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PunchCard : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PunchCardPoint> <PunchPoints>k__BackingField;
    public IReadOnlyList`1<PunchCardPoint> PunchPoints { get; private set; }
    internal string DebuggerDisplay { get; }
    public PunchCard(IEnumerable`1<IList`1<int>> punchCardData);
    public PunchCard(IEnumerable`1<PunchCardPoint> punchPoints);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PunchCardPoint> get_PunchPoints();
    [CompilerGeneratedAttribute]
private void set_PunchPoints(IReadOnlyList`1<PunchCardPoint> value);
    public int GetCommitCountFor(DayOfWeek dayOfWeek, int hourOfDay);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PunchCardPoint : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<DayOfWeek> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HourOfTheDay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommitCount>k__BackingField;
    public StringEnum`1<DayOfWeek> DayOfWeek { get; private set; }
    public int HourOfTheDay { get; private set; }
    public int CommitCount { get; private set; }
    internal string DebuggerDisplay { get; }
    public PunchCardPoint(IList`1<int> punchPoint);
    public PunchCardPoint(DayOfWeek dayOfWeek, int hourOfTheDay, int commitCount);
    [CompilerGeneratedAttribute]
public StringEnum`1<DayOfWeek> get_DayOfWeek();
    [CompilerGeneratedAttribute]
private void set_DayOfWeek(StringEnum`1<DayOfWeek> value);
    [CompilerGeneratedAttribute]
public int get_HourOfTheDay();
    [CompilerGeneratedAttribute]
private void set_HourOfTheDay(int value);
    [CompilerGeneratedAttribute]
public int get_CommitCount();
    [CompilerGeneratedAttribute]
private void set_CommitCount(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.PushEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Commit> <Commits>k__BackingField;
    public string Head { get; protected set; }
    public string Ref { get; protected set; }
    public int Size { get; protected set; }
    public IReadOnlyList`1<Commit> Commits { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
protected void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
protected void set_Ref(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Commit> get_Commits();
    [CompilerGeneratedAttribute]
protected void set_Commits(IReadOnlyList`1<Commit> value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Range : object {
    private string query;
    internal string DebuggerDisplay { get; }
    public Range(int size);
    public Range(int minSize, int maxSize);
    public Range(int size, SearchQualifierOperator op);
    internal string get_DebuggerDisplay();
    public static Range LessThan(int size);
    public static Range LessThanOrEquals(int size);
    public static Range GreaterThan(int size);
    public static Range GreaterThanOrEquals(int size);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RateLimit : object {
    [CompilerGeneratedAttribute]
private int <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Remaining>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ResetAsUtcEpochSeconds>k__BackingField;
    public int Limit { get; private set; }
    public int Remaining { get; private set; }
    [ParameterAttribute]
public DateTimeOffset Reset { get; }
    [ParameterAttribute]
public long ResetAsUtcEpochSeconds { get; private set; }
    internal string DebuggerDisplay { get; }
    public RateLimit(IDictionary`2<string, string> responseHeaders);
    public RateLimit(int limit, int remaining, long resetAsUtcEpochSeconds);
    protected RateLimit(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_Limit();
    [CompilerGeneratedAttribute]
private void set_Limit(int value);
    [CompilerGeneratedAttribute]
public int get_Remaining();
    [CompilerGeneratedAttribute]
private void set_Remaining(int value);
    public DateTimeOffset get_Reset();
    [CompilerGeneratedAttribute]
public long get_ResetAsUtcEpochSeconds();
    [CompilerGeneratedAttribute]
private void set_ResetAsUtcEpochSeconds(long value);
    private static long GetHeaderValueAsInt32Safe(IDictionary`2<string, string> responseHeaders, string key);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal string get_DebuggerDisplay();
    public RateLimit Clone();
}
public class Octokit.RateLimitExceededException : ForbiddenException {
    private RateLimit _rateLimit;
    public int Limit { get; }
    public int Remaining { get; }
    public DateTimeOffset Reset { get; }
    public string Message { get; }
    public RateLimitExceededException(IResponse response);
    public RateLimitExceededException(IResponse response, Exception innerException);
    protected RateLimitExceededException(SerializationInfo info, StreamingContext context);
    public int get_Limit();
    public int get_Remaining();
    public DateTimeOffset get_Reset();
    public virtual string get_Message();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Reaction : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ReactionType> <Content>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public User User { get; protected set; }
    [ParameterAttribute]
public StringEnum`1<ReactionType> Content { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Reaction(int id, string nodeId, User user, ReactionType content);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ReactionType> get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(StringEnum`1<ReactionType> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ReactionsClient : ApiClient {
    [CompilerGeneratedAttribute]
private ICommitCommentReactionsClient <CommitComment>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueReactionsClient <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueCommentReactionsClient <IssueComment>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestReviewCommentReactionsClient <PullRequestReviewComment>k__BackingField;
    public ICommitCommentReactionsClient CommitComment { get; private set; }
    public IIssueReactionsClient Issue { get; private set; }
    public IIssueCommentReactionsClient IssueComment { get; private set; }
    public IPullRequestReviewCommentReactionsClient PullRequestReviewComment { get; private set; }
    public ReactionsClient(IApiConnection apiConnection);
    [CompilerGeneratedAttribute]
public sealed virtual ICommitCommentReactionsClient get_CommitComment();
    [CompilerGeneratedAttribute]
private void set_CommitComment(ICommitCommentReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueReactionsClient get_Issue();
    [CompilerGeneratedAttribute]
private void set_Issue(IIssueReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IIssueCommentReactionsClient get_IssueComment();
    [CompilerGeneratedAttribute]
private void set_IssueComment(IIssueCommentReactionsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestReviewCommentReactionsClient get_PullRequestReviewComment();
    [CompilerGeneratedAttribute]
private void set_PullRequestReviewComment(IPullRequestReviewCommentReactionsClient value);
    public sealed virtual Task Delete(int number);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReactionSummary : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Plus1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minus1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Laugh>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Confused>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Heart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hooray>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public int TotalCount { get; protected set; }
    [ParameterAttribute]
public int Plus1 { get; protected set; }
    [ParameterAttribute]
public int Minus1 { get; protected set; }
    public int Laugh { get; protected set; }
    public int Confused { get; protected set; }
    public int Heart { get; protected set; }
    public int Hooray { get; protected set; }
    public string Url { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ReactionSummary(int totalCount, int plus1, int minus1, int laugh, int confused, int heart, int hooray, string url);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public int get_Plus1();
    [CompilerGeneratedAttribute]
protected void set_Plus1(int value);
    [CompilerGeneratedAttribute]
public int get_Minus1();
    [CompilerGeneratedAttribute]
protected void set_Minus1(int value);
    [CompilerGeneratedAttribute]
public int get_Laugh();
    [CompilerGeneratedAttribute]
protected void set_Laugh(int value);
    [CompilerGeneratedAttribute]
public int get_Confused();
    [CompilerGeneratedAttribute]
protected void set_Confused(int value);
    [CompilerGeneratedAttribute]
public int get_Heart();
    [CompilerGeneratedAttribute]
protected void set_Heart(int value);
    [CompilerGeneratedAttribute]
public int get_Hooray();
    [CompilerGeneratedAttribute]
protected void set_Hooray(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.ReactionType : Enum {
    public int value__;
    [ParameterAttribute]
public static ReactionType Plus1;
    [ParameterAttribute]
public static ReactionType Minus1;
    [ParameterAttribute]
public static ReactionType Laugh;
    [ParameterAttribute]
public static ReactionType Confused;
    [ParameterAttribute]
public static ReactionType Heart;
    [ParameterAttribute]
public static ReactionType Hooray;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Readme : object {
    private Lazy`1<Task`1<string>> htmlContent;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Content { get; private set; }
    public string Name { get; private set; }
    public string HtmlUrl { get; private set; }
    public string Url { get; private set; }
    internal string DebuggerDisplay { get; }
    internal Readme(ReadmeResponse response, IApiConnection client);
    public Readme(Lazy`1<Task`1<string>> htmlContent, string content, string name, string htmlUrl, string url);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
private void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    public Task`1<string> GetHtmlContent();
    internal string get_DebuggerDisplay();
}
internal class Octokit.ReadmeResponse : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    public string Content { get; protected set; }
    public string Name { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string Url { get; protected set; }
    public string Encoding { get; protected set; }
    public ReadmeResponse(string content, string name, string htmlUrl, string url, string encoding);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
protected void set_Encoding(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Reference : object {
    [CompilerGeneratedAttribute]
private string <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private TagObject <Object>k__BackingField;
    public string Ref { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public TagObject Object { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Reference(string ref, string nodeId, string url, TagObject object);
    [CompilerGeneratedAttribute]
public string get_Ref();
    [CompilerGeneratedAttribute]
protected void set_Ref(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public TagObject get_Object();
    [CompilerGeneratedAttribute]
protected void set_Object(TagObject value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ReferencesClient : ApiClient {
    public ReferencesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Reference> Get(string owner, string name, string reference);
    public sealed virtual Task`1<Reference> Get(long repositoryId, string reference);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(string owner, string name, string subNamespace, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace);
    public sealed virtual Task`1<IReadOnlyList`1<Reference>> GetAllForSubNamespace(long repositoryId, string subNamespace, ApiOptions options);
    public sealed virtual Task`1<Reference> Create(string owner, string name, NewReference reference);
    public sealed virtual Task`1<Reference> Create(long repositoryId, NewReference reference);
    public sealed virtual Task`1<Reference> Update(string owner, string name, string reference, ReferenceUpdate referenceUpdate);
    public sealed virtual Task`1<Reference> Update(long repositoryId, string reference, ReferenceUpdate referenceUpdate);
    public sealed virtual Task Delete(string owner, string name, string reference);
    public sealed virtual Task Delete(long repositoryId, string reference);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReferenceUpdate : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    public string Sha { get; private set; }
    public bool Force { get; private set; }
    internal string DebuggerDisplay { get; }
    public ReferenceUpdate(string sha);
    public ReferenceUpdate(string sha, bool force);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
private void set_Force(bool value);
    internal string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("reflection-utils", "1.0.0")]
internal class Octokit.Reflection.ReflectionUtils : object {
    private static Object[] EmptyObjects;
    private static ReflectionUtils();
    public static Type GetTypeInfo(Type type);
    public static Attribute GetAttribute(MemberInfo info, Type type);
    public static Type GetGenericListElementType(Type type);
    public static Attribute GetAttribute(Type objectType, Type attributeType);
    public static Type[] GetGenericTypeArguments(Type type);
    public static bool IsTypeGeneric(Type type);
    public static bool IsTypeGenericeCollectionInterface(Type type);
    public static bool IsAssignableFrom(Type type1, Type type2);
    public static bool IsStringEnumWrapper(Type type);
    public static IEnumerable`1<Type> GetInterfaces(Type type);
    public static bool IsTypeDictionary(Type type);
    public static bool IsNullableType(Type type);
    public static object ToNullableType(object obj, Type nullableType);
    public static bool IsValueType(Type type);
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static ConstructorInfo GetConstructorInfo(Type type, Type[] argsType);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static IEnumerable`1<FieldInfo> GetFields(Type type);
    public static MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo);
    public static MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo);
    public static ConstructorDelegate GetContructor(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetContructor(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByExpression(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByExpression(Type type, Type[] argsType);
    public static GetDelegate GetGetMethod(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethod(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByExpression(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByExpression(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethod(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethod(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByExpression(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByExpression(FieldInfo fieldInfo);
    public static BinaryExpression Assign(Expression left, Expression right);
}
[ExtensionAttribute]
internal static class Octokit.ReflectionExtensions : object {
    [ExtensionAttribute]
public static string GetJsonFieldName(MemberInfo memberInfo);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyOrField> GetPropertiesAndFields(Type type);
    [ExtensionAttribute]
public static bool IsDateTimeOffset(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static Type GetTypeInfo(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetAllProperties(Type type);
    [ExtensionAttribute]
public static bool IsEnumeration(Type type);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Release : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssetsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PublishedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TarballUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipballUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ReleaseAsset> <Assets>k__BackingField;
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string AssetsUrl { get; protected set; }
    public string UploadUrl { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string TagName { get; protected set; }
    public string TargetCommitish { get; protected set; }
    public string Name { get; protected set; }
    public string Body { get; protected set; }
    public bool Draft { get; protected set; }
    public bool Prerelease { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Nullable`1<DateTimeOffset> PublishedAt { get; protected set; }
    public Author Author { get; protected set; }
    public string TarballUrl { get; protected set; }
    public string ZipballUrl { get; protected set; }
    public IReadOnlyList`1<ReleaseAsset> Assets { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Release(string url, string htmlUrl, string assetsUrl, string uploadUrl, int id, string nodeId, string tagName, string targetCommitish, string name, string body, bool draft, bool prerelease, DateTimeOffset createdAt, Nullable`1<DateTimeOffset> publishedAt, Author author, string tarballUrl, string zipballUrl, IReadOnlyList`1<ReleaseAsset> assets);
    public Release(string uploadUrl);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AssetsUrl();
    [CompilerGeneratedAttribute]
protected void set_AssetsUrl(string value);
    [CompilerGeneratedAttribute]
public string get_UploadUrl();
    [CompilerGeneratedAttribute]
protected void set_UploadUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
protected void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
protected void set_TargetCommitish(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
protected void set_Body(string value);
    [CompilerGeneratedAttribute]
public bool get_Draft();
    [CompilerGeneratedAttribute]
protected void set_Draft(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
protected void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PublishedAt();
    [CompilerGeneratedAttribute]
protected void set_PublishedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Author get_Author();
    [CompilerGeneratedAttribute]
protected void set_Author(Author value);
    [CompilerGeneratedAttribute]
public string get_TarballUrl();
    [CompilerGeneratedAttribute]
protected void set_TarballUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ZipballUrl();
    [CompilerGeneratedAttribute]
protected void set_ZipballUrl(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ReleaseAsset> get_Assets();
    [CompilerGeneratedAttribute]
protected void set_Assets(IReadOnlyList`1<ReleaseAsset> value);
    internal string get_DebuggerDisplay();
    public ReleaseUpdate ToUpdate();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseAsset : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserDownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Author <Uploader>k__BackingField;
    public string Url { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string Label { get; protected set; }
    public string State { get; protected set; }
    public string ContentType { get; protected set; }
    public int Size { get; protected set; }
    public int DownloadCount { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public string BrowserDownloadUrl { get; protected set; }
    public Author Uploader { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ReleaseAsset(string url, int id, string nodeId, string name, string label, string state, string contentType, int size, int downloadCount, DateTimeOffset createdAt, DateTimeOffset updatedAt, string browserDownloadUrl, Author uploader);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
protected void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
protected void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(int value);
    [CompilerGeneratedAttribute]
public int get_DownloadCount();
    [CompilerGeneratedAttribute]
protected void set_DownloadCount(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_BrowserDownloadUrl();
    [CompilerGeneratedAttribute]
protected void set_BrowserDownloadUrl(string value);
    [CompilerGeneratedAttribute]
public Author get_Uploader();
    [CompilerGeneratedAttribute]
protected void set_Uploader(Author value);
    internal string get_DebuggerDisplay();
    public ReleaseAssetUpdate ToUpdate();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseAssetUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    public string Name { get; private set; }
    public string Label { get; public set; }
    internal string DebuggerDisplay { get; }
    public ReleaseAssetUpdate(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseAssetUpload : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    public string FileName { get; public set; }
    public string ContentType { get; public set; }
    public Stream RawData { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    internal string DebuggerDisplay { get; }
    public ReleaseAssetUpload(string fileName, string contentType, Stream rawData, Nullable`1<TimeSpan> timeout);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Stream get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(Stream value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.ReleasesClient : ApiClient {
    public ReleasesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Release>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<Release> Get(string owner, string name, int id);
    public sealed virtual Task`1<Release> Get(string owner, string name, string tag);
    public sealed virtual Task`1<Release> Get(long repositoryId, int id);
    public sealed virtual Task`1<Release> Get(long repositoryId, string tag);
    public sealed virtual Task`1<Release> GetLatest(string owner, string name);
    public sealed virtual Task`1<Release> GetLatest(long repositoryId);
    public sealed virtual Task`1<Release> Create(string owner, string name, NewRelease data);
    public sealed virtual Task`1<Release> Create(long repositoryId, NewRelease data);
    public sealed virtual Task`1<Release> Edit(string owner, string name, int id, ReleaseUpdate data);
    public sealed virtual Task`1<Release> Edit(long repositoryId, int id, ReleaseUpdate data);
    public sealed virtual Task Delete(string owner, string name, int id);
    public sealed virtual Task Delete(long repositoryId, int id);
    public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, int id);
    public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, int id);
    public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(string owner, string name, int id, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<ReleaseAsset>> GetAllAssets(long repositoryId, int id, ApiOptions options);
    public sealed virtual Task`1<ReleaseAsset> UploadAsset(Release release, ReleaseAssetUpload data);
    public sealed virtual Task`1<ReleaseAsset> GetAsset(string owner, string name, int assetId);
    public sealed virtual Task`1<ReleaseAsset> GetAsset(long repositoryId, int assetId);
    public sealed virtual Task`1<ReleaseAsset> EditAsset(string owner, string name, int assetId, ReleaseAssetUpdate data);
    public sealed virtual Task`1<ReleaseAsset> EditAsset(long repositoryId, int assetId, ReleaseAssetUpdate data);
    public sealed virtual Task DeleteAsset(string owner, string name, int id);
    public sealed virtual Task DeleteAsset(long repositoryId, int id);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ReleaseUpdate : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Draft>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Prerelease>k__BackingField;
    public string TagName { get; public set; }
    public string TargetCommitish { get; public set; }
    public string Name { get; public set; }
    public string Body { get; public set; }
    public Nullable`1<bool> Draft { get; public set; }
    public Nullable`1<bool> Prerelease { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
public void set_TargetCommitish(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Draft();
    [CompilerGeneratedAttribute]
public void set_Draft(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RenameInfo : object {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    public string From { get; protected set; }
    public string To { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RenameInfo(string from, string to);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
protected void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
protected void set_To(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepoCollaboratorsClient : ApiClient {
    public RepoCollaboratorsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAll(long repositoryId, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<IsCollaborator>d__5")]
public sealed virtual Task`1<bool> IsCollaborator(string owner, string name, string user);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<IsCollaborator>d__6")]
public sealed virtual Task`1<bool> IsCollaborator(long repositoryId, string user);
    public sealed virtual Task`1<CollaboratorPermission> ReviewPermission(string owner, string name, string user);
    public sealed virtual Task`1<CollaboratorPermission> ReviewPermission(long repositoryId, string user);
    public sealed virtual Task Add(string owner, string name, string user);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<Add>d__10")]
public sealed virtual Task`1<bool> Add(string owner, string name, string user, CollaboratorRequest permission);
    public sealed virtual Task Add(long repositoryId, string user);
    [AsyncStateMachineAttribute("Octokit.RepoCollaboratorsClient/<Add>d__12")]
public sealed virtual Task`1<bool> Add(long repositoryId, string user, CollaboratorRequest permission);
    public sealed virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user);
    public sealed virtual Task`1<RepositoryInvitation> Invite(string owner, string name, string user, CollaboratorRequest permission);
    public sealed virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user);
    public sealed virtual Task`1<RepositoryInvitation> Invite(long repositoryId, string user, CollaboratorRequest permission);
    public sealed virtual Task Delete(string owner, string name, string user);
    public sealed virtual Task Delete(long repositoryId, string user);
}
public enum Octokit.RepoSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static RepoSearchSort Stars;
    [ParameterAttribute]
public static RepoSearchSort Forks;
    [ParameterAttribute]
public static RepoSearchSort Updated;
}
public class Octokit.RepositoriesClient : ApiClient {
    [CompilerGeneratedAttribute]
private IRepositoryBranchesClient <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommitStatusClient <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryHooksClient <Hooks>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryForksClient <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepoCollaboratorsClient <Collaborator>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeploymentsClient <Deployment>k__BackingField;
    [CompilerGeneratedAttribute]
private IStatisticsClient <Statistics>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryCommitsClient <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private IReleasesClient <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private IMergingClient <Merging>k__BackingField;
    [CompilerGeneratedAttribute]
private IPullRequestsClient <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryCommentsClient <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryDeployKeysClient <DeployKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryContentsClient <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryPagesClient <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryInvitationsClient <Invitation>k__BackingField;
    [CompilerGeneratedAttribute]
private IRepositoryTrafficClient <Traffic>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectsClient <Project>k__BackingField;
    public IRepositoryBranchesClient Branch { get; private set; }
    public ICommitStatusClient Status { get; private set; }
    public IRepositoryHooksClient Hooks { get; private set; }
    public IRepositoryForksClient Forks { get; private set; }
    public IRepoCollaboratorsClient Collaborator { get; private set; }
    public IDeploymentsClient Deployment { get; private set; }
    public IStatisticsClient Statistics { get; private set; }
    public IRepositoryCommitsClient Commit { get; private set; }
    public IReleasesClient Release { get; private set; }
    public IMergingClient Merging { get; private set; }
    public IPullRequestsClient PullRequest { get; private set; }
    public IRepositoryCommentsClient Comment { get; private set; }
    public IRepositoryDeployKeysClient DeployKeys { get; private set; }
    public IRepositoryContentsClient Content { get; private set; }
    public IRepositoryPagesClient Page { get; private set; }
    public IRepositoryInvitationsClient Invitation { get; private set; }
    public IRepositoryTrafficClient Traffic { get; private set; }
    public IProjectsClient Project { get; private set; }
    public RepositoriesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Repository> Create(NewRepository newRepository);
    public sealed virtual Task`1<Repository> Create(string organizationLogin, NewRepository newRepository);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<Create>d__3")]
private Task`1<Repository> Create(Uri url, string organizationLogin, NewRepository newRepository);
    public sealed virtual Task Delete(string owner, string name);
    public sealed virtual Task Delete(long repositoryId);
    public sealed virtual Task`1<Repository> Transfer(string owner, string name, RepositoryTransfer repositoryTransfer);
    public sealed virtual Task`1<Repository> Transfer(long repositoryId, RepositoryTransfer repositoryTransfer);
    public sealed virtual Task`1<Repository> Edit(string owner, string name, RepositoryUpdate update);
    public sealed virtual Task`1<Repository> Edit(long repositoryId, RepositoryUpdate update);
    public sealed virtual Task`1<Repository> Get(string owner, string name);
    public sealed virtual Task`1<Repository> Get(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic();
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllPublic(PublicRepositoryRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(RepositoryRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string login, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForOrg(string organization, ApiOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryBranchesClient get_Branch();
    [CompilerGeneratedAttribute]
private void set_Branch(IRepositoryBranchesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommitStatusClient get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ICommitStatusClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryHooksClient get_Hooks();
    [CompilerGeneratedAttribute]
private void set_Hooks(IRepositoryHooksClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryForksClient get_Forks();
    [CompilerGeneratedAttribute]
private void set_Forks(IRepositoryForksClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepoCollaboratorsClient get_Collaborator();
    [CompilerGeneratedAttribute]
private void set_Collaborator(IRepoCollaboratorsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IDeploymentsClient get_Deployment();
    [CompilerGeneratedAttribute]
private void set_Deployment(IDeploymentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IStatisticsClient get_Statistics();
    [CompilerGeneratedAttribute]
private void set_Statistics(IStatisticsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryCommitsClient get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(IRepositoryCommitsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IReleasesClient get_Release();
    [CompilerGeneratedAttribute]
private void set_Release(IReleasesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IMergingClient get_Merging();
    [CompilerGeneratedAttribute]
private void set_Merging(IMergingClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IPullRequestsClient get_PullRequest();
    [CompilerGeneratedAttribute]
private void set_PullRequest(IPullRequestsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryCommentsClient get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(IRepositoryCommentsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryDeployKeysClient get_DeployKeys();
    [CompilerGeneratedAttribute]
private void set_DeployKeys(IRepositoryDeployKeysClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryContentsClient get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(IRepositoryContentsClient value);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(string owner, string name, bool includeAnonymous, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContributor>> GetAllContributors(long repositoryId, bool includeAnonymous, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<GetAllLanguages>d__86")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.RepositoriesClient/<GetAllLanguages>d__87")]
public sealed virtual Task`1<IReadOnlyList`1<RepositoryLanguage>> GetAllLanguages(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllTeams(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTag>> GetAllTags(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<RepositoryContentLicense> GetLicenseContents(string owner, string name);
    public sealed virtual Task`1<RepositoryContentLicense> GetLicenseContents(long repositoryId);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryPagesClient get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(IRepositoryPagesClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryInvitationsClient get_Invitation();
    [CompilerGeneratedAttribute]
private void set_Invitation(IRepositoryInvitationsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IRepositoryTrafficClient get_Traffic();
    [CompilerGeneratedAttribute]
private void set_Traffic(IRepositoryTrafficClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectsClient get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(IProjectsClient value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoriesResponse : object {
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Repository> <Repositories>k__BackingField;
    public int TotalCount { get; protected set; }
    public IReadOnlyList`1<Repository> Repositories { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoriesResponse(int totalCount, IReadOnlyList`1<Repository> repositories);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
protected void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Repository> get_Repositories();
    [CompilerGeneratedAttribute]
protected void set_Repositories(IReadOnlyList`1<Repository> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Repository : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloneUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SshUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SvnUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MirrorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fork>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ForksCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StargazersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OpenIssuesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PushedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseMetadata <License>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWiki>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowRebaseMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSquashMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowMergeCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubscribersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Archived>k__BackingField;
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public string CloneUrl { get; protected set; }
    public string GitUrl { get; protected set; }
    public string SshUrl { get; protected set; }
    public string SvnUrl { get; protected set; }
    public string MirrorUrl { get; protected set; }
    public long Id { get; protected set; }
    public string NodeId { get; protected set; }
    public User Owner { get; protected set; }
    public string Name { get; protected set; }
    public string FullName { get; protected set; }
    public string Description { get; protected set; }
    public string Homepage { get; protected set; }
    public string Language { get; protected set; }
    public bool Private { get; protected set; }
    public bool Fork { get; protected set; }
    public int ForksCount { get; protected set; }
    public int StargazersCount { get; protected set; }
    public string DefaultBranch { get; protected set; }
    public int OpenIssuesCount { get; protected set; }
    public Nullable`1<DateTimeOffset> PushedAt { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public RepositoryPermissions Permissions { get; protected set; }
    public Repository Parent { get; protected set; }
    public Repository Source { get; protected set; }
    public LicenseMetadata License { get; protected set; }
    public bool HasIssues { get; protected set; }
    public bool HasWiki { get; protected set; }
    public bool HasDownloads { get; protected set; }
    public Nullable`1<bool> AllowRebaseMerge { get; protected set; }
    public Nullable`1<bool> AllowSquashMerge { get; protected set; }
    public Nullable`1<bool> AllowMergeCommit { get; protected set; }
    public bool HasPages { get; protected set; }
    public int SubscribersCount { get; protected set; }
    public long Size { get; protected set; }
    public bool Archived { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Repository(long id);
    public Repository(string url, string htmlUrl, string cloneUrl, string gitUrl, string sshUrl, string svnUrl, string mirrorUrl, long id, string nodeId, User owner, string name, string fullName, string description, string homepage, string language, bool private, bool fork, int forksCount, int stargazersCount, string defaultBranch, int openIssuesCount, Nullable`1<DateTimeOffset> pushedAt, DateTimeOffset createdAt, DateTimeOffset updatedAt, RepositoryPermissions permissions, Repository parent, Repository source, LicenseMetadata license, bool hasIssues, bool hasWiki, bool hasDownloads, bool hasPages, int subscribersCount, long size, Nullable`1<bool> allowRebaseMerge, Nullable`1<bool> allowSquashMerge, Nullable`1<bool> allowMergeCommit, bool archived);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CloneUrl();
    [CompilerGeneratedAttribute]
protected void set_CloneUrl(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
protected void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SshUrl();
    [CompilerGeneratedAttribute]
protected void set_SshUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SvnUrl();
    [CompilerGeneratedAttribute]
protected void set_SvnUrl(string value);
    [CompilerGeneratedAttribute]
public string get_MirrorUrl();
    [CompilerGeneratedAttribute]
protected void set_MirrorUrl(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public User get_Owner();
    [CompilerGeneratedAttribute]
protected void set_Owner(User value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
protected void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
protected void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
protected void set_Language(string value);
    [CompilerGeneratedAttribute]
public bool get_Private();
    [CompilerGeneratedAttribute]
protected void set_Private(bool value);
    [CompilerGeneratedAttribute]
public bool get_Fork();
    [CompilerGeneratedAttribute]
protected void set_Fork(bool value);
    [CompilerGeneratedAttribute]
public int get_ForksCount();
    [CompilerGeneratedAttribute]
protected void set_ForksCount(int value);
    [CompilerGeneratedAttribute]
public int get_StargazersCount();
    [CompilerGeneratedAttribute]
protected void set_StargazersCount(int value);
    [CompilerGeneratedAttribute]
public string get_DefaultBranch();
    [CompilerGeneratedAttribute]
protected void set_DefaultBranch(string value);
    [CompilerGeneratedAttribute]
public int get_OpenIssuesCount();
    [CompilerGeneratedAttribute]
protected void set_OpenIssuesCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PushedAt();
    [CompilerGeneratedAttribute]
protected void set_PushedAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public RepositoryPermissions get_Permissions();
    [CompilerGeneratedAttribute]
protected void set_Permissions(RepositoryPermissions value);
    [CompilerGeneratedAttribute]
public Repository get_Parent();
    [CompilerGeneratedAttribute]
protected void set_Parent(Repository value);
    [CompilerGeneratedAttribute]
public Repository get_Source();
    [CompilerGeneratedAttribute]
protected void set_Source(Repository value);
    [CompilerGeneratedAttribute]
public LicenseMetadata get_License();
    [CompilerGeneratedAttribute]
protected void set_License(LicenseMetadata value);
    [CompilerGeneratedAttribute]
public bool get_HasIssues();
    [CompilerGeneratedAttribute]
protected void set_HasIssues(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasWiki();
    [CompilerGeneratedAttribute]
protected void set_HasWiki(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasDownloads();
    [CompilerGeneratedAttribute]
protected void set_HasDownloads(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowRebaseMerge();
    [CompilerGeneratedAttribute]
protected void set_AllowRebaseMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSquashMerge();
    [CompilerGeneratedAttribute]
protected void set_AllowSquashMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowMergeCommit();
    [CompilerGeneratedAttribute]
protected void set_AllowMergeCommit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_HasPages();
    [CompilerGeneratedAttribute]
protected void set_HasPages(bool value);
    [CompilerGeneratedAttribute]
public int get_SubscribersCount();
    [CompilerGeneratedAttribute]
protected void set_SubscribersCount(int value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(long value);
    [CompilerGeneratedAttribute]
public bool get_Archived();
    [CompilerGeneratedAttribute]
protected void set_Archived(bool value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositoryAffiliation : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositoryAffiliation Owner;
    [ParameterAttribute]
public static RepositoryAffiliation Collaborator;
    [ParameterAttribute]
public static RepositoryAffiliation OrganizationMember;
    [ParameterAttribute]
public static RepositoryAffiliation OwnerAndCollaborator;
    [ParameterAttribute]
public static RepositoryAffiliation OwnerAndOrganizationMember;
    [ParameterAttribute]
public static RepositoryAffiliation CollaboratorAndOrganizationMember;
    [ParameterAttribute]
public static RepositoryAffiliation All;
}
public class Octokit.RepositoryBranchesClient : ApiClient {
    public RepositoryBranchesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Branch>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<Branch> Get(string owner, string name, string branch);
    public sealed virtual Task`1<Branch> Get(long repositoryId, string branch);
    public sealed virtual Task`1<BranchProtectionSettings> GetBranchProtection(string owner, string name, string branch);
    public sealed virtual Task`1<BranchProtectionSettings> GetBranchProtection(long repositoryId, string branch);
    public sealed virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(string owner, string name, string branch, BranchProtectionSettingsUpdate update);
    public sealed virtual Task`1<BranchProtectionSettings> UpdateBranchProtection(long repositoryId, string branch, BranchProtectionSettingsUpdate update);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteBranchProtection>d__11")]
public sealed virtual Task`1<bool> DeleteBranchProtection(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteBranchProtection>d__12")]
public sealed virtual Task`1<bool> DeleteBranchProtection(long repositoryId, string branch);
    public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(string owner, string name, string branch);
    public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> GetRequiredStatusChecks(long repositoryId, string branch);
    public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(string owner, string name, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    public sealed virtual Task`1<BranchProtectionRequiredStatusChecks> UpdateRequiredStatusChecks(long repositoryId, string branch, BranchProtectionRequiredStatusChecksUpdate update);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteRequiredStatusChecks>d__17")]
public sealed virtual Task`1<bool> DeleteRequiredStatusChecks(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteRequiredStatusChecks>d__18")]
public sealed virtual Task`1<bool> DeleteRequiredStatusChecks(long repositoryId, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(string owner, string name, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<string>> GetAllRequiredStatusChecksContexts(long repositoryId, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public sealed virtual Task`1<IReadOnlyList`1<string>> UpdateRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public sealed virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public sealed virtual Task`1<IReadOnlyList`1<string>> AddRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public sealed virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(string owner, string name, string branch, IReadOnlyList`1<string> contexts);
    public sealed virtual Task`1<IReadOnlyList`1<string>> DeleteRequiredStatusChecksContexts(long repositoryId, string branch, IReadOnlyList`1<string> contexts);
    public sealed virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(string owner, string name, string branch);
    public sealed virtual Task`1<BranchProtectionRequiredReviews> GetReviewEnforcement(long repositoryId, string branch);
    public sealed virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(string owner, string name, string branch, BranchProtectionRequiredReviewsUpdate update);
    public sealed virtual Task`1<BranchProtectionRequiredReviews> UpdateReviewEnforcement(long repositoryId, string branch, BranchProtectionRequiredReviewsUpdate update);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveReviewEnforcement>d__31")]
public sealed virtual Task`1<bool> RemoveReviewEnforcement(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveReviewEnforcement>d__32")]
public sealed virtual Task`1<bool> RemoveReviewEnforcement(long repositoryId, string branch);
    public sealed virtual Task`1<EnforceAdmins> GetAdminEnforcement(string owner, string name, string branch);
    public sealed virtual Task`1<EnforceAdmins> GetAdminEnforcement(long repositoryId, string branch);
    public sealed virtual Task`1<EnforceAdmins> AddAdminEnforcement(string owner, string name, string branch);
    public sealed virtual Task`1<EnforceAdmins> AddAdminEnforcement(long repositoryId, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveAdminEnforcement>d__37")]
public sealed virtual Task`1<bool> RemoveAdminEnforcement(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<RemoveAdminEnforcement>d__38")]
public sealed virtual Task`1<bool> RemoveAdminEnforcement(long repositoryId, string branch);
    public sealed virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(string owner, string name, string branch);
    public sealed virtual Task`1<BranchProtectionPushRestrictions> GetProtectedBranchRestrictions(long repositoryId, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteProtectedBranchRestrictions>d__41")]
public sealed virtual Task`1<bool> DeleteProtectedBranchRestrictions(string owner, string name, string branch);
    [AsyncStateMachineAttribute("Octokit.RepositoryBranchesClient/<DeleteProtectedBranchRestrictions>d__42")]
public sealed virtual Task`1<bool> DeleteProtectedBranchRestrictions(long repositoryId, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(string owner, string name, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllProtectedBranchTeamRestrictions(long repositoryId, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> UpdateProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> AddProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(string owner, string name, string branch, BranchProtectionTeamCollection teams);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> DeleteProtectedBranchTeamRestrictions(long repositoryId, string branch, BranchProtectionTeamCollection teams);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(string owner, string name, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllProtectedBranchUserRestrictions(long repositoryId, string branch);
    public sealed virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public sealed virtual Task`1<IReadOnlyList`1<User>> UpdateProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    public sealed virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public sealed virtual Task`1<IReadOnlyList`1<User>> AddProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
    public sealed virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(string owner, string name, string branch, BranchProtectionUserCollection users);
    public sealed virtual Task`1<IReadOnlyList`1<User>> DeleteProtectedBranchUserRestrictions(long repositoryId, string branch, BranchProtectionUserCollection users);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryCollection : Collection`1<string> {
    internal string DebuggerDisplay { get; }
    public void Add(string owner, string name);
    public bool Contains(string owner, string name);
    public bool Remove(string owner, string name);
    private static string GetRepositoryName(string owner, string name);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryCommentsClient : ApiClient {
    public RepositoryCommentsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<CommitComment> Get(string owner, string name, int number);
    public sealed virtual Task`1<CommitComment> Get(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(string owner, string name, string sha, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<CommitComment>> GetAllForCommit(long repositoryId, string sha, ApiOptions options);
    public sealed virtual Task`1<CommitComment> Create(string owner, string name, string sha, NewCommitComment newCommitComment);
    public sealed virtual Task`1<CommitComment> Create(long repositoryId, string sha, NewCommitComment newCommitComment);
    public sealed virtual Task`1<CommitComment> Update(string owner, string name, int number, string commentUpdate);
    public sealed virtual Task`1<CommitComment> Update(long repositoryId, int number, string commentUpdate);
    public sealed virtual Task Delete(string owner, string name, int number);
    public sealed virtual Task Delete(long repositoryId, int number);
}
public class Octokit.RepositoryCommitsClient : ApiClient {
    public RepositoryCommitsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<CompareResult> Compare(string owner, string name, string base, string head);
    public sealed virtual Task`1<CompareResult> Compare(long repositoryId, string base, string head);
    public sealed virtual Task`1<GitHubCommit> Get(string owner, string name, string reference);
    public sealed virtual Task`1<GitHubCommit> Get(long repositoryId, string reference);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(string owner, string name, CommitRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<GitHubCommit>> GetAll(long repositoryId, CommitRequest request, ApiOptions options);
    public sealed virtual Task`1<string> GetSha1(string owner, string name, string reference);
    public sealed virtual Task`1<string> GetSha1(long repositoryId, string reference);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContent : RepositoryContentInfo {
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubmoduleGitUrl>k__BackingField;
    public string Encoding { get; protected set; }
    [ParameterAttribute]
public string EncodedContent { get; private set; }
    public string Content { get; }
    public string Target { get; protected set; }
    public string SubmoduleGitUrl { get; protected set; }
    public RepositoryContent(string name, string path, string sha, int size, ContentType type, string downloadUrl, string url, string gitUrl, string htmlUrl, string encoding, string encodedContent, string target, string submoduleGitUrl);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
protected void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedContent();
    [CompilerGeneratedAttribute]
private void set_EncodedContent(string value);
    public string get_Content();
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_SubmoduleGitUrl();
    [CompilerGeneratedAttribute]
protected void set_SubmoduleGitUrl(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContentChangeSet : object {
    [CompilerGeneratedAttribute]
private RepositoryContentInfo <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    public RepositoryContentInfo Content { get; protected set; }
    public Commit Commit { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryContentChangeSet(RepositoryContentInfo content, Commit commit);
    [CompilerGeneratedAttribute]
public RepositoryContentInfo get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(RepositoryContentInfo value);
    [CompilerGeneratedAttribute]
public Commit get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(Commit value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContentInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<ContentType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public string Name { get; protected set; }
    public string Path { get; protected set; }
    public string Sha { get; protected set; }
    public int Size { get; protected set; }
    public StringEnum`1<ContentType> Type { get; protected set; }
    public string DownloadUrl { get; protected set; }
    public string Url { get; protected set; }
    public string GitUrl { get; protected set; }
    public string HtmlUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryContentInfo(string name, string path, string sha, int size, ContentType type, string downloadUrl, string url, string gitUrl, string htmlUrl);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(int value);
    [CompilerGeneratedAttribute]
public StringEnum`1<ContentType> get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(StringEnum`1<ContentType> value);
    [CompilerGeneratedAttribute]
public string get_DownloadUrl();
    [CompilerGeneratedAttribute]
protected void set_DownloadUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
protected void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContentLicense : RepositoryContentInfo {
    [CompilerGeneratedAttribute]
private LicenseMetadata <License>k__BackingField;
    public LicenseMetadata License { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryContentLicense(LicenseMetadata license, string name, string path, string sha, int size, ContentType type, string downloadUrl, string url, string gitUrl, string htmlUrl);
    [CompilerGeneratedAttribute]
public LicenseMetadata get_License();
    [CompilerGeneratedAttribute]
protected void set_License(LicenseMetadata value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryContentsClient : ApiClient {
    public RepositoryContentsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name, string path);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId, string path);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContents(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string path, string reference);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string path, string reference);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(string owner, string name, string reference);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryContent>> GetAllContentsByRef(long repositoryId, string reference);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetReadme>d__9")]
public sealed virtual Task`1<Readme> GetReadme(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetReadme>d__10")]
public sealed virtual Task`1<Readme> GetReadme(long repositoryId);
    public sealed virtual Task`1<string> GetReadmeHtml(string owner, string name);
    public sealed virtual Task`1<string> GetReadmeHtml(long repositoryId);
    public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name);
    public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId);
    public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat);
    public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat);
    public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference);
    public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetArchive>d__19")]
public sealed virtual Task`1<Byte[]> GetArchive(string owner, string name, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    [AsyncStateMachineAttribute("Octokit.RepositoryContentsClient/<GetArchive>d__20")]
public sealed virtual Task`1<Byte[]> GetArchive(long repositoryId, ArchiveFormat archiveFormat, string reference, TimeSpan timeout);
    public sealed virtual Task`1<RepositoryContentChangeSet> CreateFile(string owner, string name, string path, CreateFileRequest request);
    public sealed virtual Task`1<RepositoryContentChangeSet> CreateFile(long repositoryId, string path, CreateFileRequest request);
    public sealed virtual Task`1<RepositoryContentChangeSet> UpdateFile(string owner, string name, string path, UpdateFileRequest request);
    public sealed virtual Task`1<RepositoryContentChangeSet> UpdateFile(long repositoryId, string path, UpdateFileRequest request);
    public sealed virtual Task DeleteFile(string owner, string name, string path, DeleteFileRequest request);
    public sealed virtual Task DeleteFile(long repositoryId, string path, DeleteFileRequest request);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryContributor : Author {
    [CompilerGeneratedAttribute]
private int <Contributions>k__BackingField;
    public int Contributions { get; protected set; }
    public RepositoryContributor(string login, int id, string nodeId, string avatarUrl, string url, string htmlUrl, string followersUrl, string followingUrl, string gistsUrl, string type, string starredUrl, string subscriptionsUrl, string organizationsUrl, string reposUrl, string eventsUrl, string receivedEventsUrl, bool siteAdmin, int contributions);
    [CompilerGeneratedAttribute]
public int get_Contributions();
    [CompilerGeneratedAttribute]
protected void set_Contributions(int value);
}
public class Octokit.RepositoryDeployKeysClient : ApiClient {
    public RepositoryDeployKeysClient(IApiConnection apiConnection);
    public sealed virtual Task`1<DeployKey> Get(string owner, string name, int number);
    public sealed virtual Task`1<DeployKey> Get(long repositoryId, int number);
    public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<DeployKey>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<DeployKey> Create(string owner, string name, NewDeployKey newDeployKey);
    public sealed virtual Task`1<DeployKey> Create(long repositoryId, NewDeployKey newDeployKey);
    public sealed virtual Task Delete(string owner, string name, int number);
    public sealed virtual Task Delete(long repositoryId, int number);
}
public class Octokit.RepositoryExistsException : ApiValidationException {
    private string _message;
    [CompilerGeneratedAttribute]
private string <RepositoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ExistingRepositoryWebUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnerIsOrganization>k__BackingField;
    public string RepositoryName { get; private set; }
    public Uri ExistingRepositoryWebUrl { get; public set; }
    public string Message { get; }
    public string Organization { get; private set; }
    public bool OwnerIsOrganization { get; private set; }
    public RepositoryExistsException(string organization, string name, Uri baseAddress, ApiValidationException innerException);
    public RepositoryExistsException(string name, ApiValidationException innerException);
    protected RepositoryExistsException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_RepositoryName();
    [CompilerGeneratedAttribute]
private void set_RepositoryName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ExistingRepositoryWebUrl();
    [CompilerGeneratedAttribute]
public void set_ExistingRepositoryWebUrl(Uri value);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
private void set_Organization(string value);
    [CompilerGeneratedAttribute]
public bool get_OwnerIsOrganization();
    [CompilerGeneratedAttribute]
private void set_OwnerIsOrganization(bool value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Octokit.RepositoryForksClient : ApiClient {
    public RepositoryForksClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(string owner, string name, RepositoryForksListRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAll(long repositoryId, RepositoryForksListRequest request, ApiOptions options);
    public sealed virtual Task`1<Repository> Create(string owner, string name, NewRepositoryFork fork);
    public sealed virtual Task`1<Repository> Create(long repositoryId, NewRepositoryFork fork);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryForksListRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Sort <Sort>k__BackingField;
    public Sort Sort { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Sort get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(Sort value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryFormatException : Exception {
    private string message;
    public string Message { get; }
    public RepositoryFormatException(IEnumerable`1<string> invalidRepositories);
    protected RepositoryFormatException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryHook : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Config>k__BackingField;
    public int Id { get; private set; }
    public string Url { get; private set; }
    [ParameterAttribute]
public string TestUrl { get; private set; }
    [ParameterAttribute]
public string PingUrl { get; private set; }
    public DateTimeOffset CreatedAt { get; private set; }
    public DateTimeOffset UpdatedAt { get; private set; }
    public string Name { get; private set; }
    public IReadOnlyList`1<string> Events { get; private set; }
    public bool Active { get; private set; }
    public IReadOnlyDictionary`2<string, string> Config { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryHook(int id, string url, string testUrl, string pingUrl, DateTimeOffset createdAt, DateTimeOffset updatedAt, string name, IReadOnlyList`1<string> events, bool active, IReadOnlyDictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_TestUrl();
    [CompilerGeneratedAttribute]
private void set_TestUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PingUrl();
    [CompilerGeneratedAttribute]
private void set_PingUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
private void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
private void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IReadOnlyDictionary`2<string, string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryHooksClient : ApiClient {
    public RepositoryHooksClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryHook>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<RepositoryHook> Get(string owner, string name, int hookId);
    public sealed virtual Task`1<RepositoryHook> Get(long repositoryId, int hookId);
    public sealed virtual Task`1<RepositoryHook> Create(string owner, string name, NewRepositoryHook hook);
    public sealed virtual Task`1<RepositoryHook> Create(long repositoryId, NewRepositoryHook hook);
    public sealed virtual Task`1<RepositoryHook> Edit(string owner, string name, int hookId, EditRepositoryHook hook);
    public sealed virtual Task`1<RepositoryHook> Edit(long repositoryId, int hookId, EditRepositoryHook hook);
    public sealed virtual Task Test(string owner, string name, int hookId);
    public sealed virtual Task Test(long repositoryId, int hookId);
    public sealed virtual Task Ping(string owner, string name, int hookId);
    public sealed virtual Task Ping(long repositoryId, int hookId);
    public sealed virtual Task Delete(string owner, string name, int hookId);
    public sealed virtual Task Delete(long repositoryId, int hookId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryInvitation : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Invitee>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Inviter>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<InvitationPermissionType> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public Repository Repository { get; protected set; }
    public User Invitee { get; protected set; }
    public User Inviter { get; protected set; }
    public StringEnum`1<InvitationPermissionType> Permissions { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public string Url { get; protected set; }
    public string HtmlUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryInvitation(int id, string nodeId, Repository repository, User invitee, User inviter, InvitationPermissionType permissions, DateTimeOffset createdAt, string url, string htmlUrl);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    [CompilerGeneratedAttribute]
public User get_Invitee();
    [CompilerGeneratedAttribute]
protected void set_Invitee(User value);
    [CompilerGeneratedAttribute]
public User get_Inviter();
    [CompilerGeneratedAttribute]
protected void set_Inviter(User value);
    [CompilerGeneratedAttribute]
public StringEnum`1<InvitationPermissionType> get_Permissions();
    [CompilerGeneratedAttribute]
protected void set_Permissions(StringEnum`1<InvitationPermissionType> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryInvitationsClient : ApiClient {
    public RepositoryInvitationsClient(IApiConnection apiConnection);
    [AsyncStateMachineAttribute("Octokit.RepositoryInvitationsClient/<Accept>d__1")]
public sealed virtual Task`1<bool> Accept(int invitationId);
    [AsyncStateMachineAttribute("Octokit.RepositoryInvitationsClient/<Decline>d__2")]
public sealed virtual Task`1<bool> Decline(int invitationId);
    [AsyncStateMachineAttribute("Octokit.RepositoryInvitationsClient/<Delete>d__3")]
public sealed virtual Task`1<bool> Delete(long repositoryId, int invitationId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryInvitation>> GetAllForRepository(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<RepositoryInvitation> Edit(long repositoryId, int invitationId, InvitationUpdate permissions);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryIssueRequest : IssueRequest {
    [CompilerGeneratedAttribute]
private string <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mentioned>k__BackingField;
    public string Milestone { get; public set; }
    public string Assignee { get; public set; }
    public string Creator { get; public set; }
    public string Mentioned { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(string value);
    [CompilerGeneratedAttribute]
public string get_Assignee();
    [CompilerGeneratedAttribute]
public void set_Assignee(string value);
    [CompilerGeneratedAttribute]
public string get_Creator();
    [CompilerGeneratedAttribute]
public void set_Creator(string value);
    [CompilerGeneratedAttribute]
public string get_Mentioned();
    [CompilerGeneratedAttribute]
public void set_Mentioned(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryLanguage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NumberOfBytes>k__BackingField;
    public string Name { get; protected set; }
    public long NumberOfBytes { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryLanguage(string name, long numberOfBytes);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_NumberOfBytes();
    [CompilerGeneratedAttribute]
protected void set_NumberOfBytes(long value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryPagesClient : ApiClient {
    public RepositoryPagesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Page> Get(string owner, string name);
    public sealed virtual Task`1<Page> Get(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PagesBuild>> GetAll(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<PagesBuild> GetLatest(string owner, string name);
    public sealed virtual Task`1<PagesBuild> GetLatest(long repositoryId);
    public sealed virtual Task`1<PagesBuild> RequestPageBuild(string owner, string name);
    public sealed virtual Task`1<PagesBuild> RequestPageBuild(long repositoryId);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryPermissionRequest : object {
    [CompilerGeneratedAttribute]
private Permission <Permission>k__BackingField;
    public Permission Permission { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryPermissionRequest(Permission permission);
    [CompilerGeneratedAttribute]
public Permission get_Permission();
    [CompilerGeneratedAttribute]
private void set_Permission(Permission value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryPermissions : object {
    [CompilerGeneratedAttribute]
private bool <Admin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pull>k__BackingField;
    public bool Admin { get; protected set; }
    public bool Push { get; protected set; }
    public bool Pull { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryPermissions(bool admin, bool push, bool pull);
    [CompilerGeneratedAttribute]
public bool get_Admin();
    [CompilerGeneratedAttribute]
protected void set_Admin(bool value);
    [CompilerGeneratedAttribute]
public bool get_Push();
    [CompilerGeneratedAttribute]
protected void set_Push(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pull();
    [CompilerGeneratedAttribute]
protected void set_Pull(bool value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositorySort> <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SortDirection> <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryVisibility> <Visibility>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RepositoryAffiliation> <Affiliation>k__BackingField;
    public Nullable`1<RepositoryType> Type { get; public set; }
    public Nullable`1<RepositorySort> Sort { get; public set; }
    public Nullable`1<SortDirection> Direction { get; public set; }
    public Nullable`1<RepositoryVisibility> Visibility { get; public set; }
    public Nullable`1<RepositoryAffiliation> Affiliation { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<RepositoryType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositorySort> get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(Nullable`1<RepositorySort> value);
    [CompilerGeneratedAttribute]
public Nullable`1<SortDirection> get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(Nullable`1<SortDirection> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryVisibility> get_Visibility();
    [CompilerGeneratedAttribute]
public void set_Visibility(Nullable`1<RepositoryVisibility> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RepositoryAffiliation> get_Affiliation();
    [CompilerGeneratedAttribute]
public void set_Affiliation(Nullable`1<RepositoryAffiliation> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositorySort : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositorySort Created;
    [ParameterAttribute]
public static RepositorySort Updated;
    [ParameterAttribute]
public static RepositorySort Pushed;
    [ParameterAttribute]
public static RepositorySort FullName;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryStar : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StarredAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repo>k__BackingField;
    public DateTimeOffset StarredAt { get; protected set; }
    public Repository Repo { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryStar(DateTimeOffset starredAt, Repository repo);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StarredAt();
    [CompilerGeneratedAttribute]
protected void set_StarredAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Repository get_Repo();
    [CompilerGeneratedAttribute]
protected void set_Repo(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTag : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitReference <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipballUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TarballUrl>k__BackingField;
    public string Name { get; protected set; }
    public string NodeId { get; protected set; }
    public GitReference Commit { get; protected set; }
    public string ZipballUrl { get; protected set; }
    public string TarballUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTag(string name, string nodeId, GitReference commit, string zipballUrl, string tarballUrl);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public GitReference get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(GitReference value);
    [CompilerGeneratedAttribute]
public string get_ZipballUrl();
    [CompilerGeneratedAttribute]
protected void set_ZipballUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TarballUrl();
    [CompilerGeneratedAttribute]
protected void set_TarballUrl(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.RepositoryTrafficClient : ApiClient {
    public RepositoryTrafficClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficPath>> GetAllPaths(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryTrafficReferrer>> GetAllReferrers(string owner, string name);
    public sealed virtual Task`1<RepositoryTrafficCloneSummary> GetClones(long repositoryId, RepositoryTrafficRequest per);
    public sealed virtual Task`1<RepositoryTrafficCloneSummary> GetClones(string owner, string name, RepositoryTrafficRequest per);
    public sealed virtual Task`1<RepositoryTrafficViewSummary> GetViews(long repositoryId, RepositoryTrafficRequest per);
    public sealed virtual Task`1<RepositoryTrafficViewSummary> GetViews(string owner, string name, RepositoryTrafficRequest per);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficClone : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public DateTimeOffset Timestamp { get; protected set; }
    public int Count { get; protected set; }
    public int Uniques { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficClone(DateTimeOffset timestamp, int count, int uniques);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
protected void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
protected void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
protected void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficCloneSummary : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RepositoryTrafficClone> <Clones>k__BackingField;
    public int Count { get; protected set; }
    public int Uniques { get; protected set; }
    public IReadOnlyList`1<RepositoryTrafficClone> Clones { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficCloneSummary(int count, int uniques, IReadOnlyList`1<RepositoryTrafficClone> clones);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
protected void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
protected void set_Uniques(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RepositoryTrafficClone> get_Clones();
    [CompilerGeneratedAttribute]
protected void set_Clones(IReadOnlyList`1<RepositoryTrafficClone> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public string Path { get; protected set; }
    public string Title { get; protected set; }
    public int Count { get; protected set; }
    public int Uniques { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficPath(string path, string title, int count, int uniques);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
protected void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
protected void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficReferrer : object {
    [CompilerGeneratedAttribute]
private string <Referrer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public string Referrer { get; protected set; }
    public int Count { get; protected set; }
    public int Uniques { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficReferrer(string referrer, int count, int uniques);
    [CompilerGeneratedAttribute]
public string get_Referrer();
    [CompilerGeneratedAttribute]
protected void set_Referrer(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
protected void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
protected void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private TrafficDayOrWeek <Per>k__BackingField;
    public TrafficDayOrWeek Per { get; private set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficRequest(TrafficDayOrWeek per);
    [CompilerGeneratedAttribute]
public TrafficDayOrWeek get_Per();
    [CompilerGeneratedAttribute]
private void set_Per(TrafficDayOrWeek value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficView : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    public DateTimeOffset Timestamp { get; protected set; }
    public int Count { get; protected set; }
    public int Uniques { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficView(DateTimeOffset timestamp, int count, int uniques);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
protected void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
protected void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
protected void set_Uniques(int value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTrafficViewSummary : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Uniques>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RepositoryTrafficView> <Views>k__BackingField;
    public int Count { get; protected set; }
    public int Uniques { get; protected set; }
    public IReadOnlyList`1<RepositoryTrafficView> Views { get; protected set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTrafficViewSummary(int count, int uniques, IReadOnlyList`1<RepositoryTrafficView> views);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
protected void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Uniques();
    [CompilerGeneratedAttribute]
protected void set_Uniques(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RepositoryTrafficView> get_Views();
    [CompilerGeneratedAttribute]
protected void set_Views(IReadOnlyList`1<RepositoryTrafficView> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryTransfer : object {
    [CompilerGeneratedAttribute]
private string <NewOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <TeamIds>k__BackingField;
    public string NewOwner { get; public set; }
    public IReadOnlyList`1<int> TeamIds { get; public set; }
    internal string DebuggerDisplay { get; }
    public RepositoryTransfer(string newOwner);
    public RepositoryTransfer(string newOwner, IReadOnlyList`1<int> teamIds);
    [CompilerGeneratedAttribute]
public string get_NewOwner();
    [CompilerGeneratedAttribute]
public void set_NewOwner(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_TeamIds();
    [CompilerGeneratedAttribute]
public void set_TeamIds(IReadOnlyList`1<int> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositoryType : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositoryType All;
    [ParameterAttribute]
public static RepositoryType Owner;
    [ParameterAttribute]
public static RepositoryType Public;
    [ParameterAttribute]
public static RepositoryType Private;
    [ParameterAttribute]
public static RepositoryType Member;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.RepositoryUpdate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasWiki>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasDownloads>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowRebaseMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSquashMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowMergeCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string Homepage { get; public set; }
    public Nullable`1<bool> Private { get; public set; }
    public Nullable`1<bool> HasIssues { get; public set; }
    public Nullable`1<bool> HasWiki { get; public set; }
    public Nullable`1<bool> HasDownloads { get; public set; }
    public string DefaultBranch { get; public set; }
    public Nullable`1<bool> AllowRebaseMerge { get; public set; }
    public Nullable`1<bool> AllowSquashMerge { get; public set; }
    public Nullable`1<bool> AllowMergeCommit { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    internal string DebuggerDisplay { get; }
    public RepositoryUpdate(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasIssues();
    [CompilerGeneratedAttribute]
public void set_HasIssues(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasWiki();
    [CompilerGeneratedAttribute]
public void set_HasWiki(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasDownloads();
    [CompilerGeneratedAttribute]
public void set_HasDownloads(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DefaultBranch();
    [CompilerGeneratedAttribute]
public void set_DefaultBranch(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowRebaseMerge();
    [CompilerGeneratedAttribute]
public void set_AllowRebaseMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSquashMerge();
    [CompilerGeneratedAttribute]
public void set_AllowSquashMerge(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowMergeCommit();
    [CompilerGeneratedAttribute]
public void set_AllowMergeCommit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.RepositoryVisibility : Enum {
    public int value__;
    [ParameterAttribute]
public static RepositoryVisibility Public;
    [ParameterAttribute]
public static RepositoryVisibility Private;
    [ParameterAttribute]
public static RepositoryVisibility All;
}
public static class Octokit.RequestBody : object {
    public static object Empty;
    private static RequestBody();
}
public abstract class Octokit.RequestParameters : object {
    private static ConcurrentDictionary`2<Type, List`1<PropertyParameter>> _propertiesMap;
    private static RequestParameters();
    public virtual IDictionary`2<string, string> ToParametersDictionary();
    private static List`1<PropertyParameter> GetPropertyParametersForType(Type type);
    private static Func`3<PropertyInfo, object, string> GetValueFunc(Type propertyType);
    private static string GetParameterAttributeValueForEnumName(Type enumType, string name);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType9`2<PropertyParameter, string> <ToParametersDictionary>b__1_0(PropertyParameter property);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ResourceRateLimit : object {
    [CompilerGeneratedAttribute]
private RateLimit <Core>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimit <Search>k__BackingField;
    public RateLimit Core { get; private set; }
    public RateLimit Search { get; private set; }
    internal string DebuggerDisplay { get; }
    public ResourceRateLimit(RateLimit core, RateLimit search);
    [CompilerGeneratedAttribute]
public RateLimit get_Core();
    [CompilerGeneratedAttribute]
private void set_Core(RateLimit value);
    [CompilerGeneratedAttribute]
public RateLimit get_Search();
    [CompilerGeneratedAttribute]
private void set_Search(RateLimit value);
    internal string get_DebuggerDisplay();
}
public class Octokit.SearchClient : ApiClient {
    public SearchClient(IApiConnection apiConnection);
    public sealed virtual Task`1<SearchRepositoryResult> SearchRepo(SearchRepositoriesRequest search);
    public sealed virtual Task`1<SearchUsersResult> SearchUsers(SearchUsersRequest search);
    public sealed virtual Task`1<SearchIssuesResult> SearchIssues(SearchIssuesRequest search);
    public sealed virtual Task`1<SearchCodeResult> SearchCode(SearchCodeRequest search);
    public sealed virtual Task`1<SearchLabelsResult> SearchLabels(SearchLabelsRequest search);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchCode : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    public string Name { get; protected set; }
    public string Path { get; protected set; }
    public string Sha { get; protected set; }
    public string Url { get; protected set; }
    public string GitUrl { get; protected set; }
    public string HtmlUrl { get; protected set; }
    public Repository Repository { get; protected set; }
    internal string DebuggerDisplay { get; }
    public SearchCode(string name, string path, string sha, string url, string gitUrl, string htmlUrl, Repository repository);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_GitUrl();
    [CompilerGeneratedAttribute]
protected void set_GitUrl(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlUrl();
    [CompilerGeneratedAttribute]
protected void set_HtmlUrl(string value);
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [CompilerGeneratedAttribute]
protected void set_Repository(Repository value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchCodeRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<CodeSearchSort> <SortField>k__BackingField;
    private IEnumerable`1<CodeInQualifier> _inQualifier;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryCollection <Repos>k__BackingField;
    public Nullable`1<CodeSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public IEnumerable`1<CodeInQualifier> In { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Nullable`1<bool> Forks { get; public set; }
    public Range Size { get; public set; }
    public string Path { get; public set; }
    public string Extension { get; public set; }
    public string FileName { get; public set; }
    public string User { get; public set; }
    public string Organization { get; public set; }
    public RepositoryCollection Repos { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchCodeRequest(string term);
    public SearchCodeRequest(string term, string owner, string name);
    [CompilerGeneratedAttribute]
public Nullable`1<CodeSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<CodeSearchSort> value);
    public virtual string get_Sort();
    public IEnumerable`1<CodeInQualifier> get_In();
    public void set_In(IEnumerable`1<CodeInQualifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Forks();
    [CompilerGeneratedAttribute]
public void set_Forks(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Range get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Range value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
public void set_Organization(string value);
    [CompilerGeneratedAttribute]
public RepositoryCollection get_Repos();
    [CompilerGeneratedAttribute]
public void set_Repos(RepositoryCollection value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchCodeResult : SearchResult`1<SearchCode> {
    public SearchCodeResult(int totalCount, bool incompleteResults, IReadOnlyList`1<SearchCode> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIndexingResponse : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Message>k__BackingField;
    public IReadOnlyList`1<string> Message { get; private set; }
    internal string DebuggerDisplay { get; }
    public SearchIndexingResponse(IReadOnlyList`1<string> message);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(IReadOnlyList`1<string> value);
    internal string get_DebuggerDisplay();
}
public class Octokit.SearchIndexTarget : object {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public string Target { get; protected set; }
    public SearchIndexTarget(string target);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIssuesRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<IssueSearchSort> <SortField>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IssueTypeQualifier> <Type>k__BackingField;
    private IEnumerable`1<IssueInQualifier> _inQualifier;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mentions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Involves>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Team>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    private IEnumerable`1<string> _labels;
    [CompilerGeneratedAttribute]
private Nullable`1<IssueNoMetadataQualifier> <No>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    private IEnumerable`1<IssueIsQualifier> _is;
    [CompilerGeneratedAttribute]
private DateRange <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Updated>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Merged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CommitState> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    [CompilerGeneratedAttribute]
private RepositoryCollection <Repos>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchIssuesRequestExclusions <Exclusions>k__BackingField;
    public Nullable`1<IssueSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public Nullable`1<IssueTypeQualifier> Type { get; public set; }
    public IEnumerable`1<IssueInQualifier> In { get; public set; }
    public string Author { get; public set; }
    public string Assignee { get; public set; }
    public string Mentions { get; public set; }
    public string Commenter { get; public set; }
    public string Involves { get; public set; }
    public string Team { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public IEnumerable`1<string> Labels { get; public set; }
    public Nullable`1<IssueNoMetadataQualifier> No { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public IEnumerable`1<IssueIsQualifier> Is { get; public set; }
    public DateRange Created { get; public set; }
    public DateRange Updated { get; public set; }
    public DateRange Merged { get; public set; }
    public Nullable`1<CommitState> Status { get; public set; }
    public string Head { get; public set; }
    public string Base { get; public set; }
    public DateRange Closed { get; public set; }
    public Range Comments { get; public set; }
    public string User { get; public set; }
    public string Milestone { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    public RepositoryCollection Repos { get; public set; }
    public SearchIssuesRequestExclusions Exclusions { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchIssuesRequest(string term);
    [CompilerGeneratedAttribute]
public Nullable`1<IssueSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<IssueSearchSort> value);
    public virtual string get_Sort();
    [CompilerGeneratedAttribute]
public Nullable`1<IssueTypeQualifier> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<IssueTypeQualifier> value);
    public IEnumerable`1<IssueInQualifier> get_In();
    public void set_In(IEnumerable`1<IssueInQualifier> value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Assignee();
    [CompilerGeneratedAttribute]
public void set_Assignee(string value);
    [CompilerGeneratedAttribute]
public string get_Mentions();
    [CompilerGeneratedAttribute]
public void set_Mentions(string value);
    [CompilerGeneratedAttribute]
public string get_Commenter();
    [CompilerGeneratedAttribute]
public void set_Commenter(string value);
    [CompilerGeneratedAttribute]
public string get_Involves();
    [CompilerGeneratedAttribute]
public void set_Involves(string value);
    [CompilerGeneratedAttribute]
public string get_Team();
    [CompilerGeneratedAttribute]
public void set_Team(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    public IEnumerable`1<string> get_Labels();
    public void set_Labels(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<IssueNoMetadataQualifier> get_No();
    [CompilerGeneratedAttribute]
public void set_No(Nullable`1<IssueNoMetadataQualifier> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    public IEnumerable`1<IssueIsQualifier> get_Is();
    public void set_Is(IEnumerable`1<IssueIsQualifier> value);
    [CompilerGeneratedAttribute]
public DateRange get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateRange value);
    [CompilerGeneratedAttribute]
public DateRange get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(DateRange value);
    [CompilerGeneratedAttribute]
public DateRange get_Merged();
    [CompilerGeneratedAttribute]
public void set_Merged(DateRange value);
    [CompilerGeneratedAttribute]
public Nullable`1<CommitState> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
public void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public DateRange get_Closed();
    [CompilerGeneratedAttribute]
public void set_Closed(DateRange value);
    [CompilerGeneratedAttribute]
public Range get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(Range value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RepositoryCollection get_Repos();
    [CompilerGeneratedAttribute]
public void set_Repos(RepositoryCollection value);
    [CompilerGeneratedAttribute]
public SearchIssuesRequestExclusions get_Exclusions();
    [CompilerGeneratedAttribute]
public void set_Exclusions(SearchIssuesRequestExclusions value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIssuesRequestExclusions : object {
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mentions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Involves>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ItemState> <State>k__BackingField;
    private IEnumerable`1<string> _labels;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CommitState> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Head>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Milestone>k__BackingField;
    public string Author { get; public set; }
    public string Assignee { get; public set; }
    public string Mentions { get; public set; }
    public string Commenter { get; public set; }
    public string Involves { get; public set; }
    public Nullable`1<ItemState> State { get; public set; }
    public IEnumerable`1<string> Labels { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Nullable`1<CommitState> Status { get; public set; }
    public string Head { get; public set; }
    public string Base { get; public set; }
    public string Milestone { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Assignee();
    [CompilerGeneratedAttribute]
public void set_Assignee(string value);
    [CompilerGeneratedAttribute]
public string get_Mentions();
    [CompilerGeneratedAttribute]
public void set_Mentions(string value);
    [CompilerGeneratedAttribute]
public string get_Commenter();
    [CompilerGeneratedAttribute]
public void set_Commenter(string value);
    [CompilerGeneratedAttribute]
public string get_Involves();
    [CompilerGeneratedAttribute]
public void set_Involves(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ItemState> get_State();
    [CompilerGeneratedAttribute]
public void set_State(Nullable`1<ItemState> value);
    public IEnumerable`1<string> get_Labels();
    public void set_Labels(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CommitState> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_Head();
    [CompilerGeneratedAttribute]
public void set_Head(string value);
    [CompilerGeneratedAttribute]
public string get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(string value);
    [CompilerGeneratedAttribute]
public string get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(string value);
    public IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchIssuesResult : SearchResult`1<Issue> {
    public SearchIssuesResult(int totalCount, bool incompleteResults, IReadOnlyList`1<Issue> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchLabelsRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<LabelSearchSort> <SortField>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RepositoryId>k__BackingField;
    public Nullable`1<LabelSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public long RepositoryId { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchLabelsRequest(string term, long repositoryId);
    [CompilerGeneratedAttribute]
public Nullable`1<LabelSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<LabelSearchSort> value);
    public virtual string get_Sort();
    [CompilerGeneratedAttribute]
public long get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(long value);
    public virtual IDictionary`2<string, string> AdditionalParameters();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchLabelsResult : SearchResult`1<Label> {
    public SearchLabelsResult(int totalCount, bool incompleteResults, IReadOnlyList`1<Label> items);
}
public enum Octokit.SearchQualifierOperator : Enum {
    public int value__;
    public static SearchQualifierOperator GreaterThan;
    public static SearchQualifierOperator LessThan;
    public static SearchQualifierOperator LessThanOrEqualTo;
    public static SearchQualifierOperator GreaterThanOrEqualTo;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchRepositoriesRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<RepoSearchSort> <SortField>k__BackingField;
    private IEnumerable`1<InQualifier> _inQualifier;
    [CompilerGeneratedAttribute]
private Range <Forks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ForkQualifier> <Fork>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Stars>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Updated>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archived>k__BackingField;
    public Nullable`1<RepoSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public IEnumerable`1<InQualifier> In { get; public set; }
    public Range Forks { get; public set; }
    public Nullable`1<ForkQualifier> Fork { get; public set; }
    public Range Size { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Range Stars { get; public set; }
    public string User { get; public set; }
    public DateRange Created { get; public set; }
    public DateRange Updated { get; public set; }
    public Nullable`1<bool> Archived { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchRepositoriesRequest(string term);
    [CompilerGeneratedAttribute]
public Nullable`1<RepoSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<RepoSearchSort> value);
    public virtual string get_Sort();
    public IEnumerable`1<InQualifier> get_In();
    public void set_In(IEnumerable`1<InQualifier> value);
    [CompilerGeneratedAttribute]
public Range get_Forks();
    [CompilerGeneratedAttribute]
public void set_Forks(Range value);
    [CompilerGeneratedAttribute]
public Nullable`1<ForkQualifier> get_Fork();
    [CompilerGeneratedAttribute]
public void set_Fork(Nullable`1<ForkQualifier> value);
    [CompilerGeneratedAttribute]
public Range get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Range value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Range get_Stars();
    [CompilerGeneratedAttribute]
public void set_Stars(Range value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public DateRange get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateRange value);
    [CompilerGeneratedAttribute]
public DateRange get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(DateRange value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archived();
    [CompilerGeneratedAttribute]
public void set_Archived(Nullable`1<bool> value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchRepositoryResult : SearchResult`1<Repository> {
    public SearchRepositoryResult(int totalCount, bool incompleteResults, IReadOnlyList`1<Repository> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchUsersRequest : BaseSearchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<UsersSearchSort> <SortField>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Followers>k__BackingField;
    [CompilerGeneratedAttribute]
private DateRange <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Range <Repositories>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Language> <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AccountSearchType> <AccountType>k__BackingField;
    private IEnumerable`1<UserInQualifier> _inQualifier;
    public Nullable`1<UsersSearchSort> SortField { get; public set; }
    public string Sort { get; }
    public Range Followers { get; public set; }
    public DateRange Created { get; public set; }
    public string Location { get; public set; }
    public Range Repositories { get; public set; }
    public Nullable`1<Language> Language { get; public set; }
    public Nullable`1<AccountSearchType> AccountType { get; public set; }
    public IEnumerable`1<UserInQualifier> In { get; public set; }
    internal string DebuggerDisplay { get; }
    public SearchUsersRequest(string term);
    [CompilerGeneratedAttribute]
public Nullable`1<UsersSearchSort> get_SortField();
    [CompilerGeneratedAttribute]
public void set_SortField(Nullable`1<UsersSearchSort> value);
    public virtual string get_Sort();
    [CompilerGeneratedAttribute]
public Range get_Followers();
    [CompilerGeneratedAttribute]
public void set_Followers(Range value);
    [CompilerGeneratedAttribute]
public DateRange get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateRange value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public Range get_Repositories();
    [CompilerGeneratedAttribute]
public void set_Repositories(Range value);
    [CompilerGeneratedAttribute]
public Nullable`1<Language> get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Nullable`1<Language> value);
    [CompilerGeneratedAttribute]
public Nullable`1<AccountSearchType> get_AccountType();
    [CompilerGeneratedAttribute]
public void set_AccountType(Nullable`1<AccountSearchType> value);
    public IEnumerable`1<UserInQualifier> get_In();
    public void set_In(IEnumerable`1<UserInQualifier> value);
    public virtual IReadOnlyList`1<string> MergedQualifiers();
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SearchUsersResult : SearchResult`1<User> {
    public SearchUsersResult(int totalCount, bool incompleteResults, IReadOnlyList`1<User> items);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Signature : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public string Name { get; private set; }
    public string Email { get; private set; }
    internal string DebuggerDisplay { get; }
    public Signature(string name, string email);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(string value);
    internal string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal static class Octokit.SimpleJson : object {
    private static int TOKEN_NONE;
    private static int TOKEN_CURLY_OPEN;
    private static int TOKEN_CURLY_CLOSE;
    private static int TOKEN_SQUARED_OPEN;
    private static int TOKEN_SQUARED_CLOSE;
    private static int TOKEN_COLON;
    private static int TOKEN_COMMA;
    private static int TOKEN_STRING;
    private static int TOKEN_NUMBER;
    private static int TOKEN_TRUE;
    private static int TOKEN_FALSE;
    private static int TOKEN_NULL;
    private static int BUILDER_CAPACITY;
    private static Char[] EscapeTable;
    private static Char[] EscapeCharacters;
    private static IJsonSerializerStrategy _currentJsonSerializerStrategy;
    private static PocoJsonSerializerStrategy _pocoJsonSerializerStrategy;
    public static IJsonSerializerStrategy CurrentJsonSerializerStrategy { get; public set; }
    [EditorBrowsableAttribute("2")]
public static PocoJsonSerializerStrategy PocoJsonSerializerStrategy { get; }
    private static SimpleJson();
    public static object DeserializeObject(string json);
    public static bool TryDeserializeObject(string json, Object& obj);
    public static object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(string json, Type type);
    public static T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static T DeserializeObject(string json);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static string SerializeObject(object json);
    public static string EscapeToJavascriptString(string jsonString);
    private static IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success);
    private static JsonArray ParseArray(Char[] json, Int32& index, Boolean& success);
    private static object ParseValue(Char[] json, Int32& index, Boolean& success);
    private static string ParseString(Char[] json, Int32& index, Boolean& success);
    private static string ConvertFromUtf32(int utf32);
    private static object ParseNumber(Char[] json, Int32& index, Boolean& success);
    private static int GetLastIndexOfNumber(Char[] json, int index);
    private static void EatWhitespace(Char[] json, Int32& index);
    private static int LookAhead(Char[] json, int index);
    private static int NextToken(Char[] json, Int32& index);
    private static bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder);
    private static bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder);
    private static bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder);
    private static bool SerializeString(string aString, StringBuilder builder);
    private static bool SerializeNumber(object number, StringBuilder builder);
    private static bool IsNumeric(object value);
    public static IJsonSerializerStrategy get_CurrentJsonSerializerStrategy();
    public static void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value);
    public static PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy();
}
public enum Octokit.Sort : Enum {
    public int value__;
    [ParameterAttribute]
public static Sort Newest;
    [ParameterAttribute]
public static Sort Oldest;
    [ParameterAttribute]
public static Sort Stargazers;
}
public enum Octokit.SortDirection : Enum {
    public int value__;
    [ParameterAttribute]
public static SortDirection Ascending;
    [ParameterAttribute]
public static SortDirection Descending;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.SourceInfo : object {
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Issue <Issue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public User Actor { get; protected set; }
    public int Id { get; protected set; }
    public Issue Issue { get; protected set; }
    public string Url { get; protected set; }
    internal string DebuggerDisplay { get; }
    public SourceInfo(User actor, int id, Issue issue, string url);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
protected void set_Actor(User value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public Issue get_Issue();
    [CompilerGeneratedAttribute]
protected void set_Issue(Issue value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.StarredClient : ApiClient {
    public StarredClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllStargazers(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<UserStar>> GetAllStargazersWithTimestamps(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps();
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(StarredRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForCurrentWithTimestamps(StarredRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, StarredRequest request, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<RepositoryStar>> GetAllForUserWithTimestamps(string user, StarredRequest request, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.StarredClient/<CheckStarred>d__25")]
public sealed virtual Task`1<bool> CheckStarred(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.StarredClient/<StarRepo>d__26")]
public sealed virtual Task`1<bool> StarRepo(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.StarredClient/<RemoveStarFromRepo>d__27")]
public sealed virtual Task`1<bool> RemoveStarFromRepo(string owner, string name);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StarredEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    public string Action { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StarredRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private StarredSort <SortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    [ParameterAttribute]
public StarredSort SortProperty { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public StarredSort get_SortProperty();
    [CompilerGeneratedAttribute]
public void set_SortProperty(StarredSort value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.StarredSort : Enum {
    public int value__;
    [ParameterAttribute]
public static StarredSort Created;
    [ParameterAttribute]
public static StarredSort Updated;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StartMigrationRequest : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Repositories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockRepositories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeAttachments>k__BackingField;
    public IReadOnlyList`1<string> Repositories { get; private set; }
    public bool LockRepositories { get; private set; }
    public bool ExcludeAttachments { get; private set; }
    internal string DebuggerDisplay { get; }
    public StartMigrationRequest(IReadOnlyList`1<string> repositories);
    public StartMigrationRequest(IReadOnlyList`1<string> repositories, bool lockRepositories, bool excludeAttachments);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Repositories();
    [CompilerGeneratedAttribute]
private void set_Repositories(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_LockRepositories();
    [CompilerGeneratedAttribute]
private void set_LockRepositories(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeAttachments();
    [CompilerGeneratedAttribute]
private void set_ExcludeAttachments(bool value);
    internal string get_DebuggerDisplay();
}
public class Octokit.StatisticsClient : ApiClient {
    public StatisticsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(string owner, string name, CancellationToken cancellationToken);
    public sealed virtual Task`1<IReadOnlyList`1<Contributor>> GetContributors(long repositoryId, CancellationToken cancellationToken);
    public sealed virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name);
    public sealed virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCommitActivity>d__7")]
public sealed virtual Task`1<CommitActivity> GetCommitActivity(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCommitActivity>d__8")]
public sealed virtual Task`1<CommitActivity> GetCommitActivity(long repositoryId, CancellationToken cancellationToken);
    public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name);
    public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCodeFrequency>d__11")]
public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetCodeFrequency>d__12")]
public sealed virtual Task`1<CodeFrequency> GetCodeFrequency(long repositoryId, CancellationToken cancellationToken);
    public sealed virtual Task`1<Participation> GetParticipation(string owner, string name);
    public sealed virtual Task`1<Participation> GetParticipation(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetParticipation>d__15")]
public sealed virtual Task`1<Participation> GetParticipation(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetParticipation>d__16")]
public sealed virtual Task`1<Participation> GetParticipation(long repositoryId, CancellationToken cancellationToken);
    public sealed virtual Task`1<PunchCard> GetPunchCard(string owner, string name);
    public sealed virtual Task`1<PunchCard> GetPunchCard(long repositoryId);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetPunchCard>d__19")]
public sealed virtual Task`1<PunchCard> GetPunchCard(string owner, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Octokit.StatisticsClient/<GetPunchCard>d__20")]
public sealed virtual Task`1<PunchCard> GetPunchCard(long repositoryId, CancellationToken cancellationToken);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StatusEventPayload : ActivityPayload {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<CommitState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubCommit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private Organization <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Branch> <Branches>k__BackingField;
    public string Name { get; protected set; }
    public string Sha { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    public StringEnum`1<CommitState> State { get; protected set; }
    public string TargetUrl { get; protected set; }
    public string Description { get; protected set; }
    public string Context { get; protected set; }
    public long Id { get; protected set; }
    public GitHubCommit Commit { get; protected set; }
    public Organization Organization { get; protected set; }
    public IReadOnlyList`1<Branch> Branches { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public StringEnum`1<CommitState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<CommitState> value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
protected void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(string value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(long value);
    [CompilerGeneratedAttribute]
public GitHubCommit get_Commit();
    [CompilerGeneratedAttribute]
protected void set_Commit(GitHubCommit value);
    [CompilerGeneratedAttribute]
public Organization get_Organization();
    [CompilerGeneratedAttribute]
protected void set_Organization(Organization value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Branch> get_Branches();
    [CompilerGeneratedAttribute]
protected void set_Branches(IReadOnlyList`1<Branch> value);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.StringEnum`1 : ValueType {
    private string _stringValue;
    private Nullable`1<TEnum> _parsedValue;
    public string StringValue { get; }
    public TEnum Value { get; }
    internal string DebuggerDisplay { get; }
    public StringEnum`1(TEnum parsedValue);
    public StringEnum`1(string stringValue);
    public string get_StringValue();
    public TEnum get_Value();
    internal string get_DebuggerDisplay();
    public bool TryParse(TEnum& value);
    public sealed virtual bool Equals(StringEnum`1<TEnum> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(StringEnum`1<TEnum> left, StringEnum`1<TEnum> right);
    public static bool op_Inequality(StringEnum`1<TEnum> left, StringEnum`1<TEnum> right);
    public static StringEnum`1<TEnum> op_Implicit(string value);
    public static StringEnum`1<TEnum> op_Implicit(TEnum parsedValue);
    public virtual string ToString();
    private TEnum ParseValue();
    private static ArgumentException GetArgumentException(string value);
}
[ExtensionAttribute]
internal static class Octokit.StringExtensions : object {
    private static Regex _optionalQueryStringRegex;
    private static Regex nameWithOwner;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool IsBlank(string value);
    [ExtensionAttribute]
public static bool IsNotBlank(string value);
    [ExtensionAttribute]
public static Uri FormatUri(string pattern, Object[] args);
    [ExtensionAttribute]
public static string UriEncode(string input);
    [ExtensionAttribute]
public static string ToBase64String(string input);
    [ExtensionAttribute]
public static string FromBase64String(string encoded);
    [ExtensionAttribute]
public static Uri ExpandUriTemplate(string template, object values);
    [ExtensionAttribute]
public static string ToRubyCase(string propertyName);
    [ExtensionAttribute]
public static string FromRubyCase(string propertyName);
    [ExtensionAttribute]
public static string ToCapitalizedInvariant(string value);
    [ExtensionAttribute]
internal static string EscapeDoubleQuotes(string value);
    [IteratorStateMachineAttribute("Octokit.StringExtensions/<SplitUpperCase>d__12")]
[ExtensionAttribute]
private static IEnumerable`1<string> SplitUpperCase(string source);
    [ExtensionAttribute]
internal static bool IsNameWithOwnerFormat(string input);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Subscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    public bool Subscribed { get; protected set; }
    public bool Ignored { get; protected set; }
    public string Reason { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public string Url { get; protected set; }
    public string RepositoryUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Subscription(bool subscribed, bool ignored, string reason, DateTimeOffset createdAt, string url, string repositoryUrl);
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
protected void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
protected void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
protected void set_Reason(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
protected void set_RepositoryUrl(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.TaggedType : Enum {
    public int value__;
    [ParameterAttribute]
public static TaggedType Commit;
    [ParameterAttribute]
public static TaggedType Blob;
    [ParameterAttribute]
public static TaggedType Tree;
    [ParameterAttribute]
public static TaggedType Tag;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TagObject : GitReference {
    [CompilerGeneratedAttribute]
private StringEnum`1<TaggedType> <Type>k__BackingField;
    public StringEnum`1<TaggedType> Type { get; protected set; }
    public TagObject(string nodeId, string url, string label, string ref, string sha, User user, Repository repository, TaggedType type);
    [CompilerGeneratedAttribute]
public StringEnum`1<TaggedType> get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(StringEnum`1<TaggedType> value);
}
public class Octokit.TagsClient : ApiClient {
    public TagsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<GitTag> Get(string owner, string name, string reference);
    public sealed virtual Task`1<GitTag> Get(long repositoryId, string reference);
    public sealed virtual Task`1<GitTag> Create(string owner, string name, NewTag tag);
    public sealed virtual Task`1<GitTag> Create(long repositoryId, NewTag tag);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Team : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<TeamPrivacy> <Privacy>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<Permission> <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MembersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReposCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Organization <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private Team <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LdapDistinguishedName>k__BackingField;
    public string Url { get; protected set; }
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Name { get; protected set; }
    public string Description { get; protected set; }
    public StringEnum`1<TeamPrivacy> Privacy { get; protected set; }
    public StringEnum`1<Permission> Permission { get; protected set; }
    public int MembersCount { get; protected set; }
    public int ReposCount { get; protected set; }
    public Organization Organization { get; protected set; }
    public Team Parent { get; protected set; }
    [ParameterAttribute]
public string LdapDistinguishedName { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Team(string url, int id, string nodeId, string name, string description, TeamPrivacy privacy, Permission permission, int membersCount, int reposCount, Organization organization, Team parent, string ldapDistinguishedName);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<TeamPrivacy> get_Privacy();
    [CompilerGeneratedAttribute]
protected void set_Privacy(StringEnum`1<TeamPrivacy> value);
    [CompilerGeneratedAttribute]
public StringEnum`1<Permission> get_Permission();
    [CompilerGeneratedAttribute]
protected void set_Permission(StringEnum`1<Permission> value);
    [CompilerGeneratedAttribute]
public int get_MembersCount();
    [CompilerGeneratedAttribute]
protected void set_MembersCount(int value);
    [CompilerGeneratedAttribute]
public int get_ReposCount();
    [CompilerGeneratedAttribute]
protected void set_ReposCount(int value);
    [CompilerGeneratedAttribute]
public Organization get_Organization();
    [CompilerGeneratedAttribute]
protected void set_Organization(Organization value);
    [CompilerGeneratedAttribute]
public Team get_Parent();
    [CompilerGeneratedAttribute]
protected void set_Parent(Team value);
    [CompilerGeneratedAttribute]
public string get_LdapDistinguishedName();
    [CompilerGeneratedAttribute]
protected void set_LdapDistinguishedName(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TeamMembershipDetails : object {
    [CompilerGeneratedAttribute]
private StringEnum`1<TeamRole> <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<MembershipState> <State>k__BackingField;
    public StringEnum`1<TeamRole> Role { get; protected set; }
    public StringEnum`1<MembershipState> State { get; protected set; }
    internal string DebuggerDisplay { get; }
    public TeamMembershipDetails(TeamRole role, MembershipState state);
    [CompilerGeneratedAttribute]
public StringEnum`1<TeamRole> get_Role();
    [CompilerGeneratedAttribute]
protected void set_Role(StringEnum`1<TeamRole> value);
    [CompilerGeneratedAttribute]
public StringEnum`1<MembershipState> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StringEnum`1<MembershipState> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TeamMembersRequest : RequestParameters {
    [CompilerGeneratedAttribute]
private TeamRoleFilter <Role>k__BackingField;
    public TeamRoleFilter Role { get; private set; }
    internal string DebuggerDisplay { get; }
    public TeamMembersRequest(TeamRoleFilter role);
    [CompilerGeneratedAttribute]
public TeamRoleFilter get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(TeamRoleFilter value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.TeamPrivacy : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamPrivacy Secret;
    [ParameterAttribute]
public static TeamPrivacy Closed;
}
public enum Octokit.TeamRole : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamRole Member;
    [ParameterAttribute]
public static TeamRole Maintainer;
}
public enum Octokit.TeamRoleFilter : Enum {
    public int value__;
    [ParameterAttribute]
public static TeamRoleFilter Member;
    [ParameterAttribute]
public static TeamRoleFilter Maintainer;
    [ParameterAttribute]
public static TeamRoleFilter All;
}
public class Octokit.TeamsClient : ApiClient {
    public TeamsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<Team> Get(int id);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAll(string org, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(int id);
    public sealed virtual Task`1<IReadOnlyList`1<Team>> GetAllChildTeams(int id, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id, TeamMembersRequest request);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllMembers(int id, TeamMembersRequest request, ApiOptions options);
    public sealed virtual Task`1<TeamMembershipDetails> GetMembershipDetails(int id, string login);
    public sealed virtual Task`1<Team> Create(string org, NewTeam team);
    public sealed virtual Task`1<Team> Update(int id, UpdateTeam team);
    public sealed virtual Task Delete(int id);
    public sealed virtual Task`1<TeamMembershipDetails> AddOrEditMembership(int id, string login, UpdateTeamMembership request);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<RemoveMembership>d__17")]
public sealed virtual Task`1<bool> RemoveMembership(int id, string login);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(int id);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllRepositories(int id, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<AddRepository>d__20")]
public sealed virtual Task`1<bool> AddRepository(int id, string organization, string repoName);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<AddRepository>d__21")]
public sealed virtual Task`1<bool> AddRepository(int id, string organization, string repoName, RepositoryPermissionRequest permission);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<RemoveRepository>d__22")]
public sealed virtual Task`1<bool> RemoveRepository(int id, string organization, string repoName);
    [AsyncStateMachineAttribute("Octokit.TeamsClient/<IsRepositoryManagedByTeam>d__23")]
public sealed virtual Task`1<bool> IsRepositoryManagedByTeam(int id, string owner, string repo);
    public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(int id);
    public sealed virtual Task`1<IReadOnlyList`1<OrganizationMembershipInvitation>> GetAllPendingInvitations(int id, ApiOptions options);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.ThreadSubscription : object {
    [CompilerGeneratedAttribute]
private bool <Subscribed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadUrl>k__BackingField;
    public bool Subscribed { get; protected set; }
    public bool Ignored { get; protected set; }
    public string Reason { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public string Url { get; protected set; }
    public string ThreadUrl { get; protected set; }
    internal string DebuggerDisplay { get; }
    public ThreadSubscription(bool subscribed, bool ignored, string reason, DateTimeOffset createdAt, string url, string threadUrl);
    [CompilerGeneratedAttribute]
public bool get_Subscribed();
    [CompilerGeneratedAttribute]
protected void set_Subscribed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
protected void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
protected void set_Reason(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ThreadUrl();
    [CompilerGeneratedAttribute]
protected void set_ThreadUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TimelineEventInfo : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Actor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<EventInfoState> <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private User <Assignee>k__BackingField;
    [CompilerGeneratedAttribute]
private Milestone <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceInfo <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private RenameInfo <Rename>k__BackingField;
    public int Id { get; protected set; }
    public string NodeId { get; protected set; }
    public string Url { get; protected set; }
    public User Actor { get; protected set; }
    public string CommitId { get; protected set; }
    public StringEnum`1<EventInfoState> Event { get; protected set; }
    public DateTimeOffset CreatedAt { get; protected set; }
    public Label Label { get; protected set; }
    public User Assignee { get; protected set; }
    public Milestone Milestone { get; protected set; }
    public SourceInfo Source { get; protected set; }
    public RenameInfo Rename { get; protected set; }
    internal string DebuggerDisplay { get; }
    public TimelineEventInfo(int id, string nodeId, string url, User actor, string commitId, EventInfoState event, DateTimeOffset createdAt, Label label, User assignee, Milestone milestone, SourceInfo source, RenameInfo rename);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
protected void set_NodeId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public User get_Actor();
    [CompilerGeneratedAttribute]
protected void set_Actor(User value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
protected void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<EventInfoState> get_Event();
    [CompilerGeneratedAttribute]
protected void set_Event(StringEnum`1<EventInfoState> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
protected void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Label get_Label();
    [CompilerGeneratedAttribute]
protected void set_Label(Label value);
    [CompilerGeneratedAttribute]
public User get_Assignee();
    [CompilerGeneratedAttribute]
protected void set_Assignee(User value);
    [CompilerGeneratedAttribute]
public Milestone get_Milestone();
    [CompilerGeneratedAttribute]
protected void set_Milestone(Milestone value);
    [CompilerGeneratedAttribute]
public SourceInfo get_Source();
    [CompilerGeneratedAttribute]
protected void set_Source(SourceInfo value);
    [CompilerGeneratedAttribute]
public RenameInfo get_Rename();
    [CompilerGeneratedAttribute]
protected void set_Rename(RenameInfo value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.TrafficDayOrWeek : Enum {
    public int value__;
    [ParameterAttribute]
public static TrafficDayOrWeek Day;
    [ParameterAttribute]
public static TrafficDayOrWeek Week;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TreeItem : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<TreeType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Path { get; protected set; }
    public string Mode { get; protected set; }
    public StringEnum`1<TreeType> Type { get; protected set; }
    public int Size { get; protected set; }
    public string Sha { get; protected set; }
    public string Url { get; protected set; }
    internal string DebuggerDisplay { get; }
    public TreeItem(string path, string mode, TreeType type, int size, string sha, string url);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
protected void set_Mode(string value);
    [CompilerGeneratedAttribute]
public StringEnum`1<TreeType> get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(StringEnum`1<TreeType> value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
protected void set_Size(int value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.TreeResponse : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TreeItem> <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Truncated>k__BackingField;
    public string Sha { get; protected set; }
    public string Url { get; protected set; }
    public IReadOnlyList`1<TreeItem> Tree { get; protected set; }
    public bool Truncated { get; protected set; }
    internal string DebuggerDisplay { get; }
    public TreeResponse(string sha, string url, IReadOnlyList`1<TreeItem> tree, bool truncated);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
protected void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TreeItem> get_Tree();
    [CompilerGeneratedAttribute]
protected void set_Tree(IReadOnlyList`1<TreeItem> value);
    [CompilerGeneratedAttribute]
public bool get_Truncated();
    [CompilerGeneratedAttribute]
protected void set_Truncated(bool value);
    internal string get_DebuggerDisplay();
}
public class Octokit.TreesClient : ApiClient {
    public TreesClient(IApiConnection apiConnection);
    public sealed virtual Task`1<TreeResponse> Get(string owner, string name, string reference);
    public sealed virtual Task`1<TreeResponse> Get(long repositoryId, string reference);
    public sealed virtual Task`1<TreeResponse> GetRecursive(string owner, string name, string reference);
    public sealed virtual Task`1<TreeResponse> GetRecursive(long repositoryId, string reference);
    public sealed virtual Task`1<TreeResponse> Create(string owner, string name, NewTree newTree);
    public sealed virtual Task`1<TreeResponse> Create(long repositoryId, NewTree newTree);
}
public enum Octokit.TreeType : Enum {
    public int value__;
    [ParameterAttribute]
public static TreeType Blob;
    [ParameterAttribute]
public static TreeType Tree;
    [ParameterAttribute]
public static TreeType Commit;
}
public abstract class Octokit.TwoFactorAuthorizationException : AuthorizationException {
    [CompilerGeneratedAttribute]
private TwoFactorType <TwoFactorType>k__BackingField;
    public TwoFactorType TwoFactorType { get; private set; }
    protected TwoFactorAuthorizationException(TwoFactorType twoFactorType, Exception innerException);
    protected TwoFactorAuthorizationException(IResponse response, TwoFactorType twoFactorType);
    protected TwoFactorAuthorizationException(IResponse response, TwoFactorType twoFactorType, Exception innerException);
    protected TwoFactorAuthorizationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public TwoFactorType get_TwoFactorType();
    [CompilerGeneratedAttribute]
private void set_TwoFactorType(TwoFactorType value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Octokit.TwoFactorChallengeFailedException : TwoFactorAuthorizationException {
    [CompilerGeneratedAttribute]
private string <AuthorizationCode>k__BackingField;
    public string Message { get; }
    public string AuthorizationCode { get; private set; }
    public TwoFactorChallengeFailedException(string authorizationCode, ApiException innerException);
    protected TwoFactorChallengeFailedException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public string get_AuthorizationCode();
    [CompilerGeneratedAttribute]
private void set_AuthorizationCode(string value);
    private static TwoFactorType ParseTwoFactorType(ApiException exception);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Octokit.TwoFactorChallengeResult : object {
    public static TwoFactorChallengeResult RequestResendCode;
    [CompilerGeneratedAttribute]
private bool <ResendCodeRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationCode>k__BackingField;
    public bool ResendCodeRequested { get; private set; }
    public string AuthenticationCode { get; private set; }
    public TwoFactorChallengeResult(string authenticationCode);
    private TwoFactorChallengeResult(string authenticationCode, bool resendCodeRequested);
    private static TwoFactorChallengeResult();
    [CompilerGeneratedAttribute]
public bool get_ResendCodeRequested();
    [CompilerGeneratedAttribute]
private void set_ResendCodeRequested(bool value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationCode();
    [CompilerGeneratedAttribute]
private void set_AuthenticationCode(string value);
}
public class Octokit.TwoFactorRequiredException : TwoFactorAuthorizationException {
    public string Message { get; }
    public TwoFactorRequiredException(TwoFactorType twoFactorType);
    public TwoFactorRequiredException(IResponse response, TwoFactorType twoFactorType);
    protected TwoFactorRequiredException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public enum Octokit.TwoFactorType : Enum {
    public int value__;
    public static TwoFactorType None;
    public static TwoFactorType Unknown;
    public static TwoFactorType Sms;
    public static TwoFactorType AuthenticatorApp;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateFileRequest : CreateFileRequest {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public string Sha { get; private set; }
    internal string DebuggerDisplay { get; }
    public UpdateFileRequest(string message, string content, string sha);
    public UpdateFileRequest(string message, string content, string sha, string branch);
    public UpdateFileRequest(string message, string content, string sha, bool convertContentToBase64);
    public UpdateFileRequest(string message, string content, string sha, string branch, bool convertContentToBase64);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
private void set_Sha(string value);
    internal virtual string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdatePreReceiveEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    public string Name { get; public set; }
    public string ImageUrl { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
public void set_ImageUrl(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateTeam : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TeamPrivacy> <Privacy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Permission> <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ParentTeamId>k__BackingField;
    public string Name { get; private set; }
    public string Description { get; public set; }
    public Nullable`1<TeamPrivacy> Privacy { get; public set; }
    public Nullable`1<Permission> Permission { get; public set; }
    public Nullable`1<long> ParentTeamId { get; public set; }
    internal string DebuggerDisplay { get; }
    public UpdateTeam(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TeamPrivacy> get_Privacy();
    [CompilerGeneratedAttribute]
public void set_Privacy(Nullable`1<TeamPrivacy> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Permission> get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(Nullable`1<Permission> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ParentTeamId();
    [CompilerGeneratedAttribute]
public void set_ParentTeamId(Nullable`1<long> value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UpdateTeamMembership : object {
    [CompilerGeneratedAttribute]
private TeamRole <Role>k__BackingField;
    public TeamRole Role { get; private set; }
    internal string DebuggerDisplay { get; }
    public UpdateTeamMembership(TeamRole role);
    [CompilerGeneratedAttribute]
public TeamRole get_Role();
    [CompilerGeneratedAttribute]
private void set_Role(TeamRole value);
    internal string get_DebuggerDisplay();
}
[ExtensionAttribute]
public static class Octokit.UriExtensions : object {
    [ExtensionAttribute]
public static Uri StripRelativeUri(Uri uri);
    [ExtensionAttribute]
public static Uri ReplaceRelativeUri(Uri uri, Uri relativeUri);
    [ExtensionAttribute]
public static Uri ApplyParameters(Uri uri, IDictionary`2<string, string> parameters);
}
[ExcludeFromCtorWithAllPropertiesConventionTestAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.User : Account {
    [CompilerGeneratedAttribute]
private RepositoryPermissions <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SiteAdmin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SuspendedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LdapDistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public RepositoryPermissions Permissions { get; protected set; }
    public bool SiteAdmin { get; protected set; }
    public Nullable`1<DateTimeOffset> SuspendedAt { get; protected set; }
    public bool Suspended { get; }
    [ParameterAttribute]
public string LdapDistinguishedName { get; protected set; }
    public DateTimeOffset UpdatedAt { get; protected set; }
    internal string DebuggerDisplay { get; }
    public User(string avatarUrl, string bio, string blog, int collaborators, string company, DateTimeOffset createdAt, DateTimeOffset updatedAt, int diskUsage, string email, int followers, int following, Nullable`1<bool> hireable, string htmlUrl, int totalPrivateRepos, int id, string location, string login, string name, string nodeId, int ownedPrivateRepos, Plan plan, int privateGists, int publicGists, int publicRepos, string url, RepositoryPermissions permissions, bool siteAdmin, string ldapDistinguishedName, Nullable`1<DateTimeOffset> suspendedAt);
    [CompilerGeneratedAttribute]
public RepositoryPermissions get_Permissions();
    [CompilerGeneratedAttribute]
protected void set_Permissions(RepositoryPermissions value);
    [CompilerGeneratedAttribute]
public bool get_SiteAdmin();
    [CompilerGeneratedAttribute]
protected void set_SiteAdmin(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SuspendedAt();
    [CompilerGeneratedAttribute]
protected void set_SuspendedAt(Nullable`1<DateTimeOffset> value);
    public bool get_Suspended();
    [CompilerGeneratedAttribute]
public string get_LdapDistinguishedName();
    [CompilerGeneratedAttribute]
protected void set_LdapDistinguishedName(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
protected void set_UpdatedAt(DateTimeOffset value);
    internal string get_DebuggerDisplay();
}
public class Octokit.UserAdministrationClient : ApiClient {
    public UserAdministrationClient(IApiConnection apiConnection);
    public sealed virtual Task`1<User> Create(NewUser newUser);
    public sealed virtual Task`1<UserRenameResponse> Rename(string login, UserRename userRename);
    public sealed virtual Task`1<Authorization> CreateImpersonationToken(string login, NewImpersonationToken newImpersonationToken);
    [AsyncStateMachineAttribute("Octokit.UserAdministrationClient/<DeleteImpersonationToken>d__4")]
public sealed virtual Task DeleteImpersonationToken(string login);
    public sealed virtual Task Promote(string login);
    public sealed virtual Task Demote(string login);
    public sealed virtual Task Suspend(string login);
    public sealed virtual Task Unsuspend(string login);
    public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> ListAllPublicKeys();
    [AsyncStateMachineAttribute("Octokit.UserAdministrationClient/<Delete>d__10")]
public sealed virtual Task Delete(string login);
    [AsyncStateMachineAttribute("Octokit.UserAdministrationClient/<DeletePublicKey>d__11")]
public sealed virtual Task DeletePublicKey(int keyId);
}
public class Octokit.UserEmailsClient : ApiClient {
    public UserEmailsClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll();
    public sealed virtual Task`1<IReadOnlyList`1<EmailAddress>> GetAll(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<EmailAddress>> Add(String[] emailAddresses);
    public sealed virtual Task Delete(String[] emailAddresses);
}
public class Octokit.UserGpgKeysClient : ApiClient {
    public UserGpgKeysClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<GpgKey>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<GpgKey> Get(int id);
    public sealed virtual Task`1<GpgKey> Create(NewGpgKey newGpgKey);
    public sealed virtual Task Delete(int id);
}
public enum Octokit.UserInQualifier : Enum {
    public int value__;
    [ParameterAttribute]
public static UserInQualifier Username;
    [ParameterAttribute]
public static UserInQualifier Email;
    [ParameterAttribute]
public static UserInQualifier Fullname;
}
public class Octokit.UserIsLastOwnerOfOrganizationException : ApiException {
    public string Message { get; }
    public UserIsLastOwnerOfOrganizationException(IResponse response);
    public UserIsLastOwnerOfOrganizationException(IResponse response, ApiException innerException);
    protected UserIsLastOwnerOfOrganizationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.UserIsNotMemberOfOrganizationException : ApiException {
    public string Message { get; }
    public UserIsNotMemberOfOrganizationException(IResponse response);
    public UserIsNotMemberOfOrganizationException(IResponse response, ApiException innerException);
    protected UserIsNotMemberOfOrganizationException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.UserIsOrganizationMemberException : ApiException {
    public string Message { get; }
    public UserIsOrganizationMemberException(IResponse response);
    public UserIsOrganizationMemberException(IResponse response, ApiException innerException);
    protected UserIsOrganizationMemberException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Octokit.UserKeysClient : ApiClient {
    public UserKeysClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName);
    public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAll(string userName, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<PublicKey>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<PublicKey> Get(int id);
    public sealed virtual Task`1<PublicKey> Create(NewPublicKey newKey);
    public sealed virtual Task Delete(int id);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserRename : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    public string Login { get; protected set; }
    internal string DebuggerDisplay { get; }
    public UserRename(string login);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
protected void set_Login(string value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserRenameResponse : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; protected set; }
    public string Url { get; protected set; }
    internal string DebuggerDisplay { get; }
    public UserRenameResponse(string message, string url);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    internal string get_DebuggerDisplay();
}
public class Octokit.UsersClient : ApiClient {
    private static Uri _userEndpoint;
    [CompilerGeneratedAttribute]
private IUserEmailsClient <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserKeysClient <GitSshKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserGpgKeysClient <GpgKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IFollowersClient <Followers>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserAdministrationClient <Administration>k__BackingField;
    public IUserEmailsClient Email { get; private set; }
    public IUserKeysClient GitSshKey { get; private set; }
    public IUserGpgKeysClient GpgKey { get; private set; }
    public IFollowersClient Followers { get; private set; }
    public IUserAdministrationClient Administration { get; private set; }
    public UsersClient(IApiConnection apiConnection);
    private static UsersClient();
    [CompilerGeneratedAttribute]
public sealed virtual IUserEmailsClient get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(IUserEmailsClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUserKeysClient get_GitSshKey();
    [CompilerGeneratedAttribute]
private void set_GitSshKey(IUserKeysClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUserGpgKeysClient get_GpgKey();
    [CompilerGeneratedAttribute]
private void set_GpgKey(IUserGpgKeysClient value);
    public sealed virtual Task`1<User> Get(string login);
    public sealed virtual Task`1<User> Current();
    public sealed virtual Task`1<User> Update(UserUpdate user);
    [CompilerGeneratedAttribute]
public sealed virtual IFollowersClient get_Followers();
    [CompilerGeneratedAttribute]
private void set_Followers(IFollowersClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IUserAdministrationClient get_Administration();
    [CompilerGeneratedAttribute]
private void set_Administration(IUserAdministrationClient value);
}
public enum Octokit.UsersSearchSort : Enum {
    public int value__;
    [ParameterAttribute]
public static UsersSearchSort Followers;
    [ParameterAttribute]
public static UsersSearchSort Repositories;
    [ParameterAttribute]
public static UsersSearchSort Joined;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserStar : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StarredAt>k__BackingField;
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    public DateTimeOffset StarredAt { get; protected set; }
    public User User { get; protected set; }
    internal string DebuggerDisplay { get; }
    public UserStar(DateTimeOffset starredAt, User user);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StarredAt();
    [CompilerGeneratedAttribute]
protected void set_StarredAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
protected void set_User(User value);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.UserUpdate : object {
    [CompilerGeneratedAttribute]
private string <Bio>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Blog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hireable>k__BackingField;
    public string Bio { get; public set; }
    public string Blog { get; public set; }
    public string Company { get; public set; }
    public string Email { get; public set; }
    public string Location { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> Hireable { get; public set; }
    internal string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public string get_Bio();
    [CompilerGeneratedAttribute]
public void set_Bio(string value);
    [CompilerGeneratedAttribute]
public string get_Blog();
    [CompilerGeneratedAttribute]
public void set_Blog(string value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hireable();
    [CompilerGeneratedAttribute]
public void set_Hireable(Nullable`1<bool> value);
    internal string get_DebuggerDisplay();
}
[AttributeUsageAttribute("2048")]
internal class Octokit.ValidatedNotNullAttribute : Attribute {
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.Verification : object {
    [CompilerGeneratedAttribute]
private bool <Verified>k__BackingField;
    [CompilerGeneratedAttribute]
private StringEnum`1<VerificationReason> <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public bool Verified { get; protected set; }
    [ParameterAttribute]
public StringEnum`1<VerificationReason> Reason { get; protected set; }
    public string Signature { get; protected set; }
    public string Payload { get; protected set; }
    internal string DebuggerDisplay { get; }
    public Verification(bool verified, VerificationReason reason, string signature, string payload);
    [CompilerGeneratedAttribute]
public bool get_Verified();
    [CompilerGeneratedAttribute]
protected void set_Verified(bool value);
    [CompilerGeneratedAttribute]
public StringEnum`1<VerificationReason> get_Reason();
    [CompilerGeneratedAttribute]
protected void set_Reason(StringEnum`1<VerificationReason> value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
protected void set_Signature(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
protected void set_Payload(string value);
    internal string get_DebuggerDisplay();
}
public enum Octokit.VerificationReason : Enum {
    public int value__;
    [ParameterAttribute]
public static VerificationReason ExpiredKey;
    [ParameterAttribute]
public static VerificationReason NotSigningKey;
    [ParameterAttribute]
public static VerificationReason GpgVerifyError;
    [ParameterAttribute]
public static VerificationReason GpgVerifyUnavailable;
    [ParameterAttribute]
public static VerificationReason Unsigned;
    [ParameterAttribute]
public static VerificationReason UnknownSignatureType;
    [ParameterAttribute]
public static VerificationReason NoUser;
    [ParameterAttribute]
public static VerificationReason UnverifiedEmail;
    [ParameterAttribute]
public static VerificationReason BadEmail;
    [ParameterAttribute]
public static VerificationReason UnknownKey;
    [ParameterAttribute]
public static VerificationReason MalformedSignature;
    [ParameterAttribute]
public static VerificationReason Invalid;
    [ParameterAttribute]
public static VerificationReason Valid;
}
public class Octokit.WatchedClient : ApiClient {
    public WatchedClient(IApiConnection apiConnection);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(string owner, string name, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<User>> GetAllWatchers(long repositoryId, ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent();
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForCurrent(ApiOptions options);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user);
    public sealed virtual Task`1<IReadOnlyList`1<Repository>> GetAllForUser(string user, ApiOptions options);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<CheckWatched>d__9")]
public sealed virtual Task`1<bool> CheckWatched(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<CheckWatched>d__10")]
public sealed virtual Task`1<bool> CheckWatched(long repositoryId);
    public sealed virtual Task`1<Subscription> WatchRepo(string owner, string name, NewSubscription newSubscription);
    public sealed virtual Task`1<Subscription> WatchRepo(long repositoryId, NewSubscription newSubscription);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<UnwatchRepo>d__13")]
public sealed virtual Task`1<bool> UnwatchRepo(string owner, string name);
    [AsyncStateMachineAttribute("Octokit.WatchedClient/<UnwatchRepo>d__14")]
public sealed virtual Task`1<bool> UnwatchRepo(long repositoryId);
}
public class Octokit.WebHookConfigComparer : object {
    public sealed virtual bool Equals(KeyValuePair`2<string, string> x, KeyValuePair`2<string, string> y);
    public sealed virtual int GetHashCode(KeyValuePair`2<string, string> obj);
}
public enum Octokit.WebHookContentType : Enum {
    public int value__;
    public static WebHookContentType Form;
    public static WebHookContentType Json;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WeeklyCommitActivity : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Week>k__BackingField;
    public IReadOnlyList`1<int> Days { get; protected set; }
    public int Total { get; protected set; }
    public long Week { get; protected set; }
    public DateTimeOffset WeekTimestamp { get; }
    internal string DebuggerDisplay { get; }
    public WeeklyCommitActivity(IEnumerable`1<int> days, int total, long week);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_Days();
    [CompilerGeneratedAttribute]
protected void set_Days(IReadOnlyList`1<int> value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
protected void set_Total(int value);
    [CompilerGeneratedAttribute]
public long get_Week();
    [CompilerGeneratedAttribute]
protected void set_Week(long value);
    public DateTimeOffset get_WeekTimestamp();
    public int GetCommitCountOn(DayOfWeek dayOfWeek);
    internal string get_DebuggerDisplay();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Octokit.WeeklyHash : object {
    [CompilerGeneratedAttribute]
private long <W>k__BackingField;
    [CompilerGeneratedAttribute]
private int <A>k__BackingField;
    [CompilerGeneratedAttribute]
private int <D>k__BackingField;
    [CompilerGeneratedAttribute]
private int <C>k__BackingField;
    public long W { get; protected set; }
    public int A { get; protected set; }
    public int D { get; protected set; }
    public int C { get; protected set; }
    public DateTimeOffset Week { get; }
    public int Additions { get; }
    public int Deletions { get; }
    public int Commits { get; }
    internal string DebuggerDisplay { get; }
    public WeeklyHash(long w, int a, int d, int c);
    [CompilerGeneratedAttribute]
public long get_W();
    [CompilerGeneratedAttribute]
protected void set_W(long value);
    [CompilerGeneratedAttribute]
public int get_A();
    [CompilerGeneratedAttribute]
protected void set_A(int value);
    [CompilerGeneratedAttribute]
public int get_D();
    [CompilerGeneratedAttribute]
protected void set_D(int value);
    [CompilerGeneratedAttribute]
public int get_C();
    [CompilerGeneratedAttribute]
protected void set_C(int value);
    public DateTimeOffset get_Week();
    public int get_Additions();
    public int get_Deletions();
    public int get_Commits();
    internal string get_DebuggerDisplay();
}
