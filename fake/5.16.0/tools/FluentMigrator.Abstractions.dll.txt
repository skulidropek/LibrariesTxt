public enum FluentMigrator.AutoNameContext : Enum {
    public int value__;
    public static AutoNameContext EmbeddedResource;
}
public interface FluentMigrator.Builders.Alter.Column.IAlterColumnAsTypeOrInSchemaSyntax {
    public abstract virtual IAlterColumnAsTypeSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Alter.Column.IAlterColumnAsTypeSyntax {
}
public interface FluentMigrator.Builders.Alter.Column.IAlterColumnOnTableSyntax {
    public abstract virtual IAlterColumnAsTypeOrInSchemaSyntax OnTable(string name);
}
public interface FluentMigrator.Builders.Alter.Column.IAlterColumnOptionOrForeignKeyCascadeSyntax {
}
public interface FluentMigrator.Builders.Alter.Column.IAlterColumnOptionSyntax {
}
public interface FluentMigrator.Builders.Alter.IAlterExpressionRoot {
    public abstract virtual IAlterTableAddColumnOrAlterColumnOrSchemaOrDescriptionSyntax Table(string tableName);
    public abstract virtual IAlterColumnOnTableSyntax Column(string columnName);
}
public interface FluentMigrator.Builders.Alter.Table.IAlterTableAddColumnOrAlterColumnOrSchemaOrDescriptionSyntax {
    public abstract virtual IAlterTableAddColumnOrAlterColumnOrSchemaSyntax WithDescription(string description);
}
public interface FluentMigrator.Builders.Alter.Table.IAlterTableAddColumnOrAlterColumnOrSchemaSyntax {
    public abstract virtual IAlterTableAddColumnOrAlterColumnSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Alter.Table.IAlterTableAddColumnOrAlterColumnSyntax {
    public abstract virtual IAlterTableColumnAsTypeSyntax AddColumn(string name);
    public abstract virtual IAlterTableColumnAsTypeSyntax AlterColumn(string name);
    public abstract virtual void ToSchema(string name);
}
public interface FluentMigrator.Builders.Alter.Table.IAlterTableColumnAsTypeSyntax {
}
public interface FluentMigrator.Builders.Alter.Table.IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax {
}
public interface FluentMigrator.Builders.Alter.Table.IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax {
    public abstract virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax SetExistingRowsTo(object value);
}
public interface FluentMigrator.Builders.Create.Column.ICreateColumnAsTypeOrInSchemaSyntax {
    public abstract virtual ICreateColumnAsTypeSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Create.Column.ICreateColumnAsTypeSyntax {
}
public interface FluentMigrator.Builders.Create.Column.ICreateColumnOnTableSyntax {
    public abstract virtual ICreateColumnAsTypeOrInSchemaSyntax OnTable(string name);
}
public interface FluentMigrator.Builders.Create.Column.ICreateColumnOptionOrForeignKeyCascadeSyntax {
}
public interface FluentMigrator.Builders.Create.Column.ICreateColumnOptionSyntax {
    public abstract virtual ICreateColumnOptionSyntax SetExistingRowsTo(object value);
}
public interface FluentMigrator.Builders.Create.Constraint.ICreateConstraintColumnsSyntax {
    public abstract virtual ICreateConstraintOptionsSyntax Column(string columnName);
    public abstract virtual ICreateConstraintOptionsSyntax Columns(String[] columnNames);
}
public interface FluentMigrator.Builders.Create.Constraint.ICreateConstraintOnTableSyntax {
    public abstract virtual ICreateConstraintWithSchemaOrColumnSyntax OnTable(string tableName);
}
public interface FluentMigrator.Builders.Create.Constraint.ICreateConstraintOptionsSyntax {
}
public interface FluentMigrator.Builders.Create.Constraint.ICreateConstraintWithSchemaOrColumnSyntax {
}
public interface FluentMigrator.Builders.Create.Constraint.ICreateConstraintWithSchemaSyntax {
    public abstract virtual ICreateConstraintColumnsSyntax WithSchema(string schemaName);
}
public interface FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyCascadeSyntax {
    public abstract virtual ICreateForeignKeyCascadeSyntax OnDelete(Rule rule);
    public abstract virtual ICreateForeignKeyCascadeSyntax OnUpdate(Rule rule);
    public abstract virtual void OnDeleteOrUpdate(Rule rule);
}
public interface FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyForeignColumnOrInSchemaSyntax {
    public abstract virtual ICreateForeignKeyForeignColumnSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyForeignColumnSyntax {
    public abstract virtual ICreateForeignKeyToTableSyntax ForeignColumn(string column);
    public abstract virtual ICreateForeignKeyToTableSyntax ForeignColumns(String[] columns);
}
public interface FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyFromTableSyntax {
    public abstract virtual ICreateForeignKeyForeignColumnOrInSchemaSyntax FromTable(string table);
}
public interface FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyPrimaryColumnOrInSchemaSyntax {
    public abstract virtual ICreateForeignKeyPrimaryColumnSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyPrimaryColumnSyntax {
    public abstract virtual ICreateForeignKeyCascadeSyntax PrimaryColumn(string column);
    public abstract virtual ICreateForeignKeyCascadeSyntax PrimaryColumns(String[] columns);
}
public interface FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyToTableSyntax {
    public abstract virtual ICreateForeignKeyPrimaryColumnOrInSchemaSyntax ToTable(string table);
}
public interface FluentMigrator.Builders.Create.ICreateExpressionRoot {
    public abstract virtual ICreateSchemaOptionsSyntax Schema(string schemaName);
    public abstract virtual ICreateTableWithColumnOrSchemaOrDescriptionSyntax Table(string tableName);
    public abstract virtual ICreateColumnOnTableSyntax Column(string columnName);
    public abstract virtual ICreateForeignKeyFromTableSyntax ForeignKey();
    public abstract virtual ICreateForeignKeyFromTableSyntax ForeignKey(string foreignKeyName);
    public abstract virtual ICreateIndexForTableSyntax Index();
    public abstract virtual ICreateIndexForTableSyntax Index(string indexName);
    public abstract virtual ICreateSequenceInSchemaSyntax Sequence(string sequenceName);
    public abstract virtual ICreateConstraintOnTableSyntax PrimaryKey();
    public abstract virtual ICreateConstraintOnTableSyntax PrimaryKey(string primaryKeyName);
    public abstract virtual ICreateConstraintOnTableSyntax UniqueConstraint();
    public abstract virtual ICreateConstraintOnTableSyntax UniqueConstraint(string constraintName);
}
public interface FluentMigrator.Builders.Create.Index.ICreateIndexColumnOptionsSyntax {
    public abstract virtual ICreateIndexMoreColumnOptionsSyntax Ascending();
    public abstract virtual ICreateIndexMoreColumnOptionsSyntax Descending();
    public abstract virtual ICreateIndexColumnUniqueOptionsSyntax Unique();
}
public interface FluentMigrator.Builders.Create.Index.ICreateIndexColumnUniqueOptionsSyntax {
    public IndexColumnDefinition CurrentColumn { get; }
    public abstract virtual IndexColumnDefinition get_CurrentColumn();
}
public interface FluentMigrator.Builders.Create.Index.ICreateIndexForTableSyntax {
    public abstract virtual ICreateIndexOnColumnOrInSchemaSyntax OnTable(string tableName);
}
public interface FluentMigrator.Builders.Create.Index.ICreateIndexMoreColumnOptionsSyntax {
    public IndexColumnDefinition CurrentColumn { get; }
    public abstract virtual IndexColumnDefinition get_CurrentColumn();
}
public interface FluentMigrator.Builders.Create.Index.ICreateIndexOnColumnOrInSchemaSyntax {
    public abstract virtual ICreateIndexOnColumnSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Create.Index.ICreateIndexOnColumnSyntax {
    public abstract virtual ICreateIndexColumnOptionsSyntax OnColumn(string columnName);
    public abstract virtual ICreateIndexOptionsSyntax WithOptions();
}
public interface FluentMigrator.Builders.Create.Index.ICreateIndexOptionsSyntax {
    public abstract virtual ICreateIndexOnColumnSyntax Unique();
    public abstract virtual ICreateIndexOnColumnSyntax NonClustered();
    public abstract virtual ICreateIndexOnColumnSyntax Clustered();
}
public interface FluentMigrator.Builders.Create.Schema.ICreateSchemaOptionsSyntax {
}
public interface FluentMigrator.Builders.Create.Sequence.ICreateSequenceInSchemaSyntax {
    public abstract virtual ICreateSequenceSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Create.Sequence.ICreateSequenceSyntax {
    public abstract virtual ICreateSequenceSyntax IncrementBy(long increment);
    public abstract virtual ICreateSequenceSyntax MinValue(long minValue);
    public abstract virtual ICreateSequenceSyntax MaxValue(long maxValue);
    public abstract virtual ICreateSequenceSyntax StartWith(long startwith);
    public abstract virtual ICreateSequenceSyntax Cache(long value);
    public abstract virtual ICreateSequenceSyntax Cycle();
}
public interface FluentMigrator.Builders.Create.Table.ICreateTableColumnAsTypeSyntax {
}
public interface FluentMigrator.Builders.Create.Table.ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax {
}
public interface FluentMigrator.Builders.Create.Table.ICreateTableColumnOptionOrWithColumnSyntax {
}
public interface FluentMigrator.Builders.Create.Table.ICreateTableWithColumnOrSchemaOrDescriptionSyntax {
    public abstract virtual ICreateTableWithColumnOrSchemaSyntax WithDescription(string description);
}
public interface FluentMigrator.Builders.Create.Table.ICreateTableWithColumnOrSchemaSyntax {
    public abstract virtual ICreateTableWithColumnSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Create.Table.ICreateTableWithColumnSyntax {
    public abstract virtual ICreateTableColumnAsTypeSyntax WithColumn(string name);
}
public interface FluentMigrator.Builders.Delete.Column.IDeleteColumnFromTableSyntax {
    public abstract virtual IInSchemaSyntax FromTable(string tableName);
    public abstract virtual IDeleteColumnFromTableSyntax Column(string columnName);
}
public interface FluentMigrator.Builders.Delete.Constraint.IDeleteConstraintColumnSyntax {
    public abstract virtual void Column(string columnName);
    public abstract virtual void Columns(String[] columnNames);
}
public interface FluentMigrator.Builders.Delete.Constraint.IDeleteConstraintInSchemaOptionsSyntax {
    public abstract virtual IDeleteConstraintInSchemaOptionsSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Delete.Constraint.IDeleteConstraintOnTableSyntax {
    public abstract virtual IDeleteConstraintInSchemaOptionsSyntax FromTable(string tableName);
}
public interface FluentMigrator.Builders.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnOrInSchemaSyntax {
    public abstract virtual IDeleteDefaultConstraintOnColumnSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnSyntax {
    public abstract virtual void OnColumn(string columnName);
}
public interface FluentMigrator.Builders.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableSyntax {
    public abstract virtual IDeleteDefaultConstraintOnColumnOrInSchemaSyntax OnTable(string tableName);
}
public interface FluentMigrator.Builders.Delete.ForeignKey.IDeleteForeignKeyForeignColumnOrInSchemaSyntax {
    public abstract virtual IDeleteForeignKeyForeignColumnSyntax InSchema(string foreignSchemaName);
}
public interface FluentMigrator.Builders.Delete.ForeignKey.IDeleteForeignKeyForeignColumnSyntax {
    public abstract virtual IDeleteForeignKeyToTableSyntax ForeignColumn(string column);
    public abstract virtual IDeleteForeignKeyToTableSyntax ForeignColumns(String[] columns);
}
public interface FluentMigrator.Builders.Delete.ForeignKey.IDeleteForeignKeyFromTableSyntax {
    public abstract virtual IDeleteForeignKeyForeignColumnOrInSchemaSyntax FromTable(string foreignTableName);
}
public interface FluentMigrator.Builders.Delete.ForeignKey.IDeleteForeignKeyOnTableSyntax {
    public abstract virtual IInSchemaSyntax OnTable(string foreignTableName);
}
public interface FluentMigrator.Builders.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnSyntax {
    public abstract virtual void PrimaryColumn(string column);
    public abstract virtual void PrimaryColumns(String[] columns);
}
public interface FluentMigrator.Builders.Delete.ForeignKey.IDeleteForeignKeyToTableSyntax {
    public abstract virtual IDeleteForeignKeyPrimaryColumnSyntax ToTable(string table);
}
public interface FluentMigrator.Builders.Delete.IDeleteDataOrInSchemaSyntax {
    public abstract virtual IDeleteDataSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Delete.IDeleteDataSyntax {
    public abstract virtual IDeleteDataSyntax Row(object dataAsAnonymousType);
    public abstract virtual void AllRows();
    public abstract virtual void IsNull(string columnName);
}
public interface FluentMigrator.Builders.Delete.IDeleteExpressionRoot {
    public abstract virtual void Schema(string schemaName);
    public abstract virtual IInSchemaSyntax Table(string tableName);
    public abstract virtual IDeleteColumnFromTableSyntax Column(string columnName);
    public abstract virtual IDeleteForeignKeyFromTableSyntax ForeignKey();
    public abstract virtual IDeleteForeignKeyOnTableSyntax ForeignKey(string foreignKeyName);
    public abstract virtual IDeleteDataOrInSchemaSyntax FromTable(string tableName);
    public abstract virtual IDeleteIndexForTableSyntax Index(string indexName);
    public abstract virtual IDeleteIndexForTableSyntax Index();
    public abstract virtual IInSchemaSyntax Sequence(string sequenceName);
    public abstract virtual IDeleteConstraintOnTableSyntax PrimaryKey(string primaryKeyName);
    public abstract virtual IDeleteConstraintOnTableSyntax UniqueConstraint(string constraintName);
    public abstract virtual IDeleteConstraintOnTableSyntax UniqueConstraint();
    public abstract virtual IDeleteDefaultConstraintOnTableSyntax DefaultConstraint();
}
public interface FluentMigrator.Builders.Delete.Index.IDeleteIndexForTableSyntax {
    public abstract virtual IDeleteIndexOnColumnOrInSchemaSyntax OnTable(string tableName);
    public abstract virtual IDeleteIndexOptionsSyntax WithOptions();
}
public interface FluentMigrator.Builders.Delete.Index.IDeleteIndexOnColumnOrInSchemaSyntax {
    public abstract virtual IDeleteIndexOnColumnSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Delete.Index.IDeleteIndexOnColumnSyntax {
    public abstract virtual IDeleteIndexOptionsSyntax OnColumn(string columnName);
    public abstract virtual IDeleteIndexOptionsSyntax OnColumns(String[] columnNames);
    public abstract virtual IDeleteIndexOptionsSyntax WithOptions();
}
public interface FluentMigrator.Builders.Delete.Index.IDeleteIndexOptionsSyntax {
}
public interface FluentMigrator.Builders.Execute.IExecuteExpressionRoot {
    public abstract virtual void Sql(string sqlStatement);
    public abstract virtual void Script(string pathToSqlScript);
    public abstract virtual void Script(string pathToSqlScript, IDictionary`2<string, string> parameters);
    public abstract virtual void WithConnection(Action`2<IDbConnection, IDbTransaction> operation);
    public abstract virtual void EmbeddedScript(string embeddedSqlScriptName);
    public abstract virtual void EmbeddedScript(string embeddedSqlScriptName, IDictionary`2<string, string> parameters);
}
public interface FluentMigrator.Builders.IColumnExpressionBuilder {
    public string SchemaName { get; }
    public string TableName { get; }
    public ColumnDefinition Column { get; }
    public abstract virtual string get_SchemaName();
    public abstract virtual string get_TableName();
    public abstract virtual ColumnDefinition get_Column();
}
public interface FluentMigrator.Builders.IColumnOptionSyntax`2 {
    public abstract virtual TNext WithDefault(SystemMethods method);
    public abstract virtual TNext WithDefaultValue(object value);
    public abstract virtual TNext WithColumnDescription(string description);
    public abstract virtual TNext Identity();
    public abstract virtual TNext Indexed();
    public abstract virtual TNext Indexed(string indexName);
    public abstract virtual TNext PrimaryKey();
    public abstract virtual TNext PrimaryKey(string primaryKeyName);
    public abstract virtual TNext Nullable();
    public abstract virtual TNext NotNullable();
    public abstract virtual TNext Unique();
    public abstract virtual TNext Unique(string indexName);
    public abstract virtual TNextFk ForeignKey(string primaryTableName, string primaryColumnName);
    public abstract virtual TNextFk ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public abstract virtual TNextFk ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public abstract virtual TNextFk ForeignKey();
    public abstract virtual TNextFk ReferencedBy(string foreignTableName, string foreignColumnName);
    public abstract virtual TNextFk ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public abstract virtual TNextFk ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
}
public interface FluentMigrator.Builders.IColumnTypeSyntax`1 {
    public abstract virtual TNext AsAnsiString();
    public abstract virtual TNext AsAnsiString(string collationName);
    public abstract virtual TNext AsAnsiString(int size);
    public abstract virtual TNext AsAnsiString(int size, string collationName);
    public abstract virtual TNext AsBinary();
    public abstract virtual TNext AsBinary(int size);
    public abstract virtual TNext AsBoolean();
    public abstract virtual TNext AsByte();
    public abstract virtual TNext AsCurrency();
    public abstract virtual TNext AsDate();
    public abstract virtual TNext AsDateTime();
    public abstract virtual TNext AsDateTime2();
    public abstract virtual TNext AsDateTimeOffset();
    public abstract virtual TNext AsDecimal();
    public abstract virtual TNext AsDecimal(int size, int precision);
    public abstract virtual TNext AsDouble();
    public abstract virtual TNext AsGuid();
    public abstract virtual TNext AsFixedLengthString(int size);
    public abstract virtual TNext AsFixedLengthString(int size, string collationName);
    public abstract virtual TNext AsFixedLengthAnsiString(int size);
    public abstract virtual TNext AsFixedLengthAnsiString(int size, string collationName);
    public abstract virtual TNext AsFloat();
    public abstract virtual TNext AsInt16();
    public abstract virtual TNext AsInt32();
    public abstract virtual TNext AsInt64();
    public abstract virtual TNext AsString();
    public abstract virtual TNext AsString(string collationName);
    public abstract virtual TNext AsString(int size);
    public abstract virtual TNext AsString(int size, string collationName);
    public abstract virtual TNext AsTime();
    public abstract virtual TNext AsXml();
    public abstract virtual TNext AsXml(int size);
    public abstract virtual TNext AsCustom(string customType);
}
public interface FluentMigrator.Builders.IfDatabase.IIfDatabaseExpressionRoot {
    public IAlterExpressionRoot Alter { get; }
    public ICreateExpressionRoot Create { get; }
    public IDeleteExpressionRoot Delete { get; }
    public IRenameExpressionRoot Rename { get; }
    public IInsertExpressionRoot Insert { get; }
    public IExecuteExpressionRoot Execute { get; }
    public ISchemaExpressionRoot Schema { get; }
    public IUpdateExpressionRoot Update { get; }
    public abstract virtual IAlterExpressionRoot get_Alter();
    public abstract virtual ICreateExpressionRoot get_Create();
    public abstract virtual IDeleteExpressionRoot get_Delete();
    public abstract virtual IRenameExpressionRoot get_Rename();
    public abstract virtual IInsertExpressionRoot get_Insert();
    public abstract virtual IExecuteExpressionRoot get_Execute();
    public abstract virtual ISchemaExpressionRoot get_Schema();
    public abstract virtual IUpdateExpressionRoot get_Update();
    public abstract virtual void Delegate(Action delegation);
}
public interface FluentMigrator.Builders.IForeignKeyCascadeSyntax`2 {
    public abstract virtual TNextFk OnDelete(Rule rule);
    public abstract virtual TNextFk OnUpdate(Rule rule);
    public abstract virtual TNext OnDeleteOrUpdate(Rule rule);
}
public interface FluentMigrator.Builders.IInSchemaSyntax {
    public abstract virtual void InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Insert.IInsertDataOrInSchemaSyntax {
    public abstract virtual IInsertDataSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Insert.IInsertDataSyntax {
    public abstract virtual IInsertDataSyntax Row(object dataAsAnonymousType);
    public abstract virtual IInsertDataSyntax Row(IDictionary`2<string, object> data);
}
public interface FluentMigrator.Builders.Insert.IInsertExpressionRoot {
    public abstract virtual IInsertDataOrInSchemaSyntax IntoTable(string tableName);
}
public interface FluentMigrator.Builders.Rename.Column.IRenameColumnToOrInSchemaSyntax {
    public abstract virtual IRenameColumnToSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Rename.Column.IRenameColumnToSyntax {
    public abstract virtual void To(string name);
}
public interface FluentMigrator.Builders.Rename.IRenameColumnTableSyntax {
    public abstract virtual IRenameColumnToOrInSchemaSyntax OnTable(string tableName);
}
public interface FluentMigrator.Builders.Rename.IRenameExpressionRoot {
    public abstract virtual IRenameTableToOrInSchemaSyntax Table(string oldName);
    public abstract virtual IRenameColumnTableSyntax Column(string oldName);
}
public interface FluentMigrator.Builders.Rename.Table.IRenameTableToOrInSchemaSyntax {
    public abstract virtual IRenameTableToSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Rename.Table.IRenameTableToSyntax {
    public abstract virtual IInSchemaSyntax To(string name);
}
public interface FluentMigrator.Builders.Schema.Column.ISchemaColumnSyntax {
    public abstract virtual bool Exists();
}
public interface FluentMigrator.Builders.Schema.Constraint.ISchemaConstraintSyntax {
    public abstract virtual bool Exists();
}
public interface FluentMigrator.Builders.Schema.Index.ISchemaIndexSyntax {
    public abstract virtual bool Exists();
}
public interface FluentMigrator.Builders.Schema.ISchemaExpressionRoot {
    public abstract virtual ISchemaTableSyntax Table(string tableName);
    public abstract virtual ISchemaSchemaSyntax Schema(string schemaName);
}
public interface FluentMigrator.Builders.Schema.Schema.ISchemaSchemaSyntax {
    public abstract virtual bool Exists();
    public abstract virtual ISchemaTableSyntax Table(string tableName);
}
public interface FluentMigrator.Builders.Schema.Table.ISchemaTableSyntax {
    public abstract virtual bool Exists();
    public abstract virtual ISchemaColumnSyntax Column(string column);
    public abstract virtual ISchemaIndexSyntax Index(string indexName);
    public abstract virtual ISchemaConstraintSyntax Constraint(string constraintName);
}
public interface FluentMigrator.Builders.Update.IUpdateExpressionRoot {
    public abstract virtual IUpdateSetOrInSchemaSyntax Table(string tableName);
}
public interface FluentMigrator.Builders.Update.IUpdateSetOrInSchemaSyntax {
    public abstract virtual IUpdateSetSyntax InSchema(string schemaName);
}
public interface FluentMigrator.Builders.Update.IUpdateSetSyntax {
    public abstract virtual IUpdateWhereSyntax Set(object dataAsAnonymousType);
}
public interface FluentMigrator.Builders.Update.IUpdateWhereSyntax {
    public abstract virtual void Where(object dataAsAnonymousType);
    public abstract virtual void AllRows();
}
public class FluentMigrator.Exceptions.DatabaseOperationNotSupportedException : FluentMigratorException {
    public DatabaseOperationNotSupportedException(string message);
    public DatabaseOperationNotSupportedException(string message, Exception innerException);
    public DatabaseOperationNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class FluentMigrator.Exceptions.DuplicateMigrationException : FluentMigratorException {
    public DuplicateMigrationException(string message);
    public DuplicateMigrationException(string message, Exception innerException);
    public DuplicateMigrationException(SerializationInfo info, StreamingContext context);
}
public abstract class FluentMigrator.Exceptions.FluentMigratorException : Exception {
    protected FluentMigratorException(string message);
    protected FluentMigratorException(string message, Exception innerException);
    protected FluentMigratorException(SerializationInfo info, StreamingContext context);
}
public class FluentMigrator.Exceptions.ProcessorFactoryNotFoundException : FluentMigratorException {
    public ProcessorFactoryNotFoundException(string message);
    public ProcessorFactoryNotFoundException(string message, Exception innerException);
    public ProcessorFactoryNotFoundException(SerializationInfo info, StreamingContext context);
}
public class FluentMigrator.Exceptions.UndeterminableConnectionException : FluentMigratorException {
    public UndeterminableConnectionException(string message);
    public UndeterminableConnectionException(string message, Exception innerException);
    public UndeterminableConnectionException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("Use normal CLR strings instead, as they will be formatted to SQL Server Unicode strings")]
public class FluentMigrator.ExplicitUnicodeString : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    public ExplicitUnicodeString(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.AlterColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnDefinition <Column>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public ColumnDefinition Column { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual ColumnDefinition get_Column();
    [CompilerGeneratedAttribute]
public virtual void set_Column(ColumnDefinition value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.AlterDefaultConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    public object DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.AlterSchemaExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SourceSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationSchemaName>k__BackingField;
    public string SourceSchemaName { get; public set; }
    public string TableName { get; public set; }
    public string DestinationSchemaName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SourceSchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SourceSchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DestinationSchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_DestinationSchemaName(string value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.AlterTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableDescription>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string TableDescription { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableDescription();
    [CompilerGeneratedAttribute]
public virtual void set_TableDescription(string value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.CreateColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnDefinition <Column>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public ColumnDefinition Column { get; public set; }
    private IEnumerable`1<ColumnDefinition> FluentMigrator.Expressions.IColumnsExpression.Columns { get; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual ColumnDefinition get_Column();
    [CompilerGeneratedAttribute]
public virtual void set_Column(ColumnDefinition value);
    private sealed virtual override IEnumerable`1<ColumnDefinition> FluentMigrator.Expressions.IColumnsExpression.get_Columns();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.CreateConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ConstraintDefinition <Constraint>k__BackingField;
    public ConstraintDefinition Constraint { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public CreateConstraintExpression(ConstraintType type);
    [CompilerGeneratedAttribute]
public virtual ConstraintDefinition get_Constraint();
    [CompilerGeneratedAttribute]
public virtual void set_Constraint(ConstraintDefinition value);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.CreateForeignKeyExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <ForeignKey>k__BackingField;
    public ForeignKeyDefinition ForeignKey { get; public set; }
    [CompilerGeneratedAttribute]
public virtual ForeignKeyDefinition get_ForeignKey();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignKey(ForeignKeyDefinition value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.CreateIndexExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private IndexDefinition <Index>k__BackingField;
    public IndexDefinition Index { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    [CompilerGeneratedAttribute]
public virtual IndexDefinition get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(IndexDefinition value);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.CreateSchemaExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalFeatures>k__BackingField;
    public string SchemaName { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.CreateSequenceExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private SequenceDefinition <Sequence>k__BackingField;
    public SequenceDefinition Sequence { get; public set; }
    [CompilerGeneratedAttribute]
public virtual SequenceDefinition get_Sequence();
    [CompilerGeneratedAttribute]
public virtual void set_Sequence(SequenceDefinition value);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.CreateTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ColumnDefinition> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableDescription>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public IList`1<ColumnDefinition> Columns { get; public set; }
    public string TableDescription { get; public set; }
    private IEnumerable`1<ColumnDefinition> FluentMigrator.Expressions.IColumnsExpression.Columns { get; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ColumnDefinition> get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(IList`1<ColumnDefinition> value);
    [CompilerGeneratedAttribute]
public virtual string get_TableDescription();
    [CompilerGeneratedAttribute]
public virtual void set_TableDescription(string value);
    private sealed virtual override IEnumerable`1<ColumnDefinition> FluentMigrator.Expressions.IColumnsExpression.get_Columns();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.DeleteColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ColumnNames>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public ICollection`1<string> ColumnNames { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ColumnNames();
    [CompilerGeneratedAttribute]
public void set_ColumnNames(ICollection`1<string> value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.DeleteConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ConstraintDefinition <Constraint>k__BackingField;
    public ConstraintDefinition Constraint { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public DeleteConstraintExpression(ConstraintType type);
    [CompilerGeneratedAttribute]
public sealed virtual ConstraintDefinition get_Constraint();
    [CompilerGeneratedAttribute]
public void set_Constraint(ConstraintDefinition value);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
}
public class FluentMigrator.Expressions.DeleteDataExpression : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllRows>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DeletionDataDefinition> <Rows>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public bool IsAllRows { get; public set; }
    public List`1<DeletionDataDefinition> Rows { get; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAllRows();
    [CompilerGeneratedAttribute]
public virtual void set_IsAllRows(bool value);
    [CompilerGeneratedAttribute]
public List`1<DeletionDataDefinition> get_Rows();
    public sealed virtual void CollectValidationErrors(ICollection`1<string> errors);
    public sealed virtual void ExecuteWith(IMigrationProcessor processor);
    public sealed virtual IMigrationExpression Reverse();
}
public class FluentMigrator.Expressions.DeleteDefaultConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnName(string value);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.DeleteForeignKeyExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <ForeignKey>k__BackingField;
    public ForeignKeyDefinition ForeignKey { get; public set; }
    [CompilerGeneratedAttribute]
public virtual ForeignKeyDefinition get_ForeignKey();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignKey(ForeignKeyDefinition value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.DeleteIndexExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private IndexDefinition <Index>k__BackingField;
    public IndexDefinition Index { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    [CompilerGeneratedAttribute]
public virtual IndexDefinition get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(IndexDefinition value);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.DeleteSchemaExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    public string SchemaName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.DeleteSequenceExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SequenceName>k__BackingField;
    public string SchemaName { get; public set; }
    public string SequenceName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SequenceName();
    [CompilerGeneratedAttribute]
public virtual void set_SequenceName(string value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.DeleteTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual string ToString();
}
public class FluentMigrator.Expressions.ExecuteEmbeddedSqlScriptExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SqlScript>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <MigrationAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Parameters>k__BackingField;
    public string SqlScript { get; public set; }
    public IAssemblyCollection MigrationAssemblies { get; public set; }
    public IDictionary`2<string, string> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SqlScript();
    [CompilerGeneratedAttribute]
public void set_SqlScript(string value);
    [CompilerGeneratedAttribute]
public IAssemblyCollection get_MigrationAssemblies();
    [CompilerGeneratedAttribute]
public void set_MigrationAssemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IDictionary`2<string, string> value);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual string ToString();
    protected Exception NewNotFoundException(string sqlScript);
    protected Exception NewNoUniqueResourceException(string sqlScript, IEnumerable`1<ManifestResourceNameWithAssembly> foundResources);
    protected virtual ManifestResourceNameWithAssembly GetQualifiedResourcePath();
    protected virtual ManifestResourceNameWithAssembly[] FindResourceName(string sqlScript);
}
public class FluentMigrator.Expressions.ExecuteSqlScriptExpression : MigrationExpressionBase {
    private string _rootPath;
    private string _sqlScript;
    private string _unchangedSqlScript;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Parameters>k__BackingField;
    public string SqlScript { get; public set; }
    public string RootPath { get; public set; }
    public IDictionary`2<string, string> Parameters { get; public set; }
    public string get_SqlScript();
    public void set_SqlScript(string value);
    public sealed virtual string get_RootPath();
    public sealed virtual void set_RootPath(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IDictionary`2<string, string> value);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual string ToString();
    private void UpdateSqlScript();
}
public class FluentMigrator.Expressions.ExecuteSqlStatementExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SqlStatement>k__BackingField;
    public string SqlStatement { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SqlStatement();
    [CompilerGeneratedAttribute]
public virtual void set_SqlStatement(string value);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual string ToString();
}
public interface FluentMigrator.Expressions.IAutoNameExpression {
    public IList`1<string> AutoNames { get; public set; }
    public AutoNameContext AutoNameContext { get; }
    public Type MigrationType { get; }
    public IList`1<string> DatabaseNames { get; }
    public MigrationDirection Direction { get; }
    public abstract virtual IList`1<string> get_AutoNames();
    public abstract virtual void set_AutoNames(IList`1<string> value);
    public abstract virtual AutoNameContext get_AutoNameContext();
    public abstract virtual Type get_MigrationType();
    public abstract virtual IList`1<string> get_DatabaseNames();
    public abstract virtual MigrationDirection get_Direction();
}
public interface FluentMigrator.Expressions.IColumnsExpression {
    public string TableName { get; }
    public IEnumerable`1<ColumnDefinition> Columns { get; }
    public abstract virtual string get_TableName();
    public abstract virtual IEnumerable`1<ColumnDefinition> get_Columns();
}
public interface FluentMigrator.Expressions.IConstraintExpression {
    public ConstraintDefinition Constraint { get; }
    public abstract virtual ConstraintDefinition get_Constraint();
}
public interface FluentMigrator.Expressions.IFileSystemExpression {
    public string RootPath { get; public set; }
    public abstract virtual string get_RootPath();
    public abstract virtual void set_RootPath(string value);
}
public interface FluentMigrator.Expressions.IForeignKeyExpression {
    public ForeignKeyDefinition ForeignKey { get; }
    public abstract virtual ForeignKeyDefinition get_ForeignKey();
}
public interface FluentMigrator.Expressions.IIndexExpression {
    public IndexDefinition Index { get; }
    public abstract virtual IndexDefinition get_Index();
}
public interface FluentMigrator.Expressions.IMigrationExpression {
    public abstract virtual void ExecuteWith(IMigrationProcessor processor);
    public abstract virtual IMigrationExpression Reverse();
}
public class FluentMigrator.Expressions.InsertDataExpression : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InsertionDataDefinition> <Rows>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public List`1<InsertionDataDefinition> Rows { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    [CompilerGeneratedAttribute]
public List`1<InsertionDataDefinition> get_Rows();
    public sealed virtual void CollectValidationErrors(ICollection`1<string> errors);
    public sealed virtual void ExecuteWith(IMigrationProcessor processor);
    public sealed virtual IMigrationExpression Reverse();
}
public interface FluentMigrator.Expressions.ISchemaExpression {
    public string SchemaName { get; public set; }
    public abstract virtual string get_SchemaName();
    public abstract virtual void set_SchemaName(string value);
}
public interface FluentMigrator.Expressions.ISequenceExpression {
    public SequenceDefinition Sequence { get; }
    public abstract virtual SequenceDefinition get_Sequence();
}
public abstract class FluentMigrator.Expressions.MigrationExpressionBase : object {
    public abstract virtual void ExecuteWith(IMigrationProcessor processor);
    public abstract virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.PerformDBOperationExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private Action`2<IDbConnection, IDbTransaction> <Operation>k__BackingField;
    public Action`2<IDbConnection, IDbTransaction> Operation { get; public set; }
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    [CompilerGeneratedAttribute]
public Action`2<IDbConnection, IDbTransaction> get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(Action`2<IDbConnection, IDbTransaction> value);
}
public class FluentMigrator.Expressions.RenameColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string OldName { get; public set; }
    public string NewName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual void set_OldName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.RenameTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string SchemaName { get; public set; }
    public string OldName { get; public set; }
    public string NewName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual void set_OldName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
    public virtual IMigrationExpression Reverse();
    public virtual string ToString();
}
public class FluentMigrator.Expressions.UpdateDataExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, object>> <Set>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, object>> <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllRows>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public List`1<KeyValuePair`2<string, object>> Set { get; public set; }
    public List`1<KeyValuePair`2<string, object>> Where { get; public set; }
    public bool IsAllRows { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, object>> get_Set();
    [CompilerGeneratedAttribute]
public void set_Set(List`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, object>> get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(List`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public bool get_IsAllRows();
    [CompilerGeneratedAttribute]
public void set_IsAllRows(bool value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual void ExecuteWith(IMigrationProcessor processor);
}
public interface FluentMigrator.IMigration {
    public object ApplicationContext { get; }
    public string ConnectionString { get; }
    public abstract virtual object get_ApplicationContext();
    public abstract virtual string get_ConnectionString();
    public abstract virtual void GetUpExpressions(IMigrationContext context);
    public abstract virtual void GetDownExpressions(IMigrationContext context);
}
public interface FluentMigrator.IMigrationGenerator {
    public abstract virtual string Generate(CreateSchemaExpression expression);
    public abstract virtual string Generate(DeleteSchemaExpression expression);
    public abstract virtual string Generate(CreateTableExpression expression);
    public abstract virtual string Generate(AlterTableExpression expression);
    public abstract virtual string Generate(AlterColumnExpression expression);
    public abstract virtual string Generate(CreateColumnExpression expression);
    public abstract virtual string Generate(DeleteTableExpression expression);
    public abstract virtual string Generate(DeleteColumnExpression expression);
    public abstract virtual string Generate(CreateForeignKeyExpression expression);
    public abstract virtual string Generate(DeleteForeignKeyExpression expression);
    public abstract virtual string Generate(CreateIndexExpression expression);
    public abstract virtual string Generate(DeleteIndexExpression expression);
    public abstract virtual string Generate(RenameTableExpression expression);
    public abstract virtual string Generate(RenameColumnExpression expression);
    public abstract virtual string Generate(InsertDataExpression expression);
    public abstract virtual string Generate(AlterDefaultConstraintExpression expression);
    public abstract virtual string Generate(DeleteDataExpression expression);
    public abstract virtual string Generate(UpdateDataExpression expression);
    public abstract virtual string Generate(AlterSchemaExpression expression);
    public abstract virtual string Generate(CreateSequenceExpression expression);
    public abstract virtual string Generate(DeleteSequenceExpression expression);
    public abstract virtual string Generate(CreateConstraintExpression expression);
    public abstract virtual string Generate(DeleteConstraintExpression expression);
    public abstract virtual string Generate(DeleteDefaultConstraintExpression expression);
}
public interface FluentMigrator.IMigrationProcessor {
    public IMigrationProcessorOptions Options { get; }
    public string ConnectionString { get; }
    public abstract virtual IMigrationProcessorOptions get_Options();
    public abstract virtual string get_ConnectionString();
    public abstract virtual void Execute(string template, Object[] args);
    public abstract virtual DataSet ReadTableData(string schemaName, string tableName);
    public abstract virtual DataSet Read(string template, Object[] args);
    public abstract virtual bool Exists(string template, Object[] args);
    public abstract virtual void BeginTransaction();
    public abstract virtual void CommitTransaction();
    public abstract virtual void RollbackTransaction();
    public abstract virtual void Process(CreateSchemaExpression expression);
    public abstract virtual void Process(DeleteSchemaExpression expression);
    public abstract virtual void Process(AlterTableExpression expression);
    public abstract virtual void Process(AlterColumnExpression expression);
    public abstract virtual void Process(CreateTableExpression expression);
    public abstract virtual void Process(CreateColumnExpression expression);
    public abstract virtual void Process(DeleteTableExpression expression);
    public abstract virtual void Process(DeleteColumnExpression expression);
    public abstract virtual void Process(CreateForeignKeyExpression expression);
    public abstract virtual void Process(DeleteForeignKeyExpression expression);
    public abstract virtual void Process(CreateIndexExpression expression);
    public abstract virtual void Process(DeleteIndexExpression expression);
    public abstract virtual void Process(RenameTableExpression expression);
    public abstract virtual void Process(RenameColumnExpression expression);
    public abstract virtual void Process(InsertDataExpression expression);
    public abstract virtual void Process(AlterDefaultConstraintExpression expression);
    public abstract virtual void Process(PerformDBOperationExpression expression);
    public abstract virtual void Process(DeleteDataExpression expression);
    public abstract virtual void Process(UpdateDataExpression expression);
    public abstract virtual void Process(AlterSchemaExpression expression);
    public abstract virtual void Process(CreateSequenceExpression expression);
    public abstract virtual void Process(DeleteSequenceExpression expression);
    public abstract virtual void Process(CreateConstraintExpression expression);
    public abstract virtual void Process(DeleteConstraintExpression expression);
    public abstract virtual void Process(DeleteDefaultConstraintExpression expression);
}
public interface FluentMigrator.IMigrationProcessorOptions {
    public bool PreviewOnly { get; }
    public Nullable`1<int> Timeout { get; }
    public string ProviderSwitches { get; }
    public abstract virtual bool get_PreviewOnly();
    public abstract virtual Nullable`1<int> get_Timeout();
    public abstract virtual string get_ProviderSwitches();
}
public class FluentMigrator.Infrastructure.AssemblyCollection : object {
    private IEnumerable`1<Assembly> _assemblies;
    public Assembly[] Assemblies { get; }
    public AssemblyCollection(IEnumerable`1<Assembly> assemblies);
    public sealed virtual Type[] GetExportedTypes();
    public sealed virtual Assembly[] get_Assemblies();
    public sealed virtual ManifestResourceNameWithAssembly[] GetManifestResourceNames();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class FluentMigrator.Infrastructure.ErrorMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ColumnNameCannotBeNullOrEmpty { get; }
    internal static string ColumnNamesMustBeUnique { get; }
    internal static string ColumnTypeMustBeDefined { get; }
    internal static string ConstraintMustHaveAtLeastOneColumn { get; }
    internal static string DefaultValueCannotBeNull { get; }
    internal static string DestinationSchemaCannotBeNull { get; }
    internal static string ForeignKeyMustHaveOneOrMoreForeignColumns { get; }
    internal static string ForeignKeyMustHaveOneOrMorePrimaryColumns { get; }
    internal static string ForeignKeyNameCannotBeNullOrEmpty { get; }
    internal static string ForeignTableNameCannotBeNullOrEmpty { get; }
    internal static string IndexMustHaveOneOrMoreColumns { get; }
    internal static string IndexNameCannotBeNullOrEmpty { get; }
    internal static string MethodXMustBeCalledOnObjectImplementingY { get; }
    internal static string NewColumnNameCannotBeNullOrEmpty { get; }
    internal static string NewTableNameCannotBeNullOrEmpty { get; }
    internal static string OldColumnNameCannotBeNullOrEmpty { get; }
    internal static string OldTableNameCannotBeNullOrEmpty { get; }
    internal static string OperationCannotBeNull { get; }
    internal static string PrimaryTableNameCannotBeNullOrEmpty { get; }
    internal static string SchemaNameCannotBeNullOrEmpty { get; }
    internal static string SequenceNameCannotBeNullOrEmpty { get; }
    internal static string SqlScriptCannotBeNullOrEmpty { get; }
    internal static string SqlStatementCannotBeNullOrEmpty { get; }
    internal static string TableNameCannotBeNullOrEmpty { get; }
    internal static string UpdateDataExpressionMustNotSpecifyBothWhereClauseAndAllRows { get; }
    internal static string UpdateDataExpressionMustSpecifyWhereClauseOrAllRows { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ColumnNameCannotBeNullOrEmpty();
    internal static string get_ColumnNamesMustBeUnique();
    internal static string get_ColumnTypeMustBeDefined();
    internal static string get_ConstraintMustHaveAtLeastOneColumn();
    internal static string get_DefaultValueCannotBeNull();
    internal static string get_DestinationSchemaCannotBeNull();
    internal static string get_ForeignKeyMustHaveOneOrMoreForeignColumns();
    internal static string get_ForeignKeyMustHaveOneOrMorePrimaryColumns();
    internal static string get_ForeignKeyNameCannotBeNullOrEmpty();
    internal static string get_ForeignTableNameCannotBeNullOrEmpty();
    internal static string get_IndexMustHaveOneOrMoreColumns();
    internal static string get_IndexNameCannotBeNullOrEmpty();
    internal static string get_MethodXMustBeCalledOnObjectImplementingY();
    internal static string get_NewColumnNameCannotBeNullOrEmpty();
    internal static string get_NewTableNameCannotBeNullOrEmpty();
    internal static string get_OldColumnNameCannotBeNullOrEmpty();
    internal static string get_OldTableNameCannotBeNullOrEmpty();
    internal static string get_OperationCannotBeNull();
    internal static string get_PrimaryTableNameCannotBeNullOrEmpty();
    internal static string get_SchemaNameCannotBeNullOrEmpty();
    internal static string get_SequenceNameCannotBeNullOrEmpty();
    internal static string get_SqlScriptCannotBeNullOrEmpty();
    internal static string get_SqlStatementCannotBeNullOrEmpty();
    internal static string get_TableNameCannotBeNullOrEmpty();
    internal static string get_UpdateDataExpressionMustNotSpecifyBothWhereClauseAndAllRows();
    internal static string get_UpdateDataExpressionMustSpecifyWhereClauseOrAllRows();
}
[ExtensionAttribute]
public static class FluentMigrator.Infrastructure.Extensions.AdditionalFeaturesExtensions : object {
    [ExtensionAttribute]
public static T GetAdditionalFeature(ISupportAdditionalFeatures additionalFeatures, string key, T defaultValue);
    [ExtensionAttribute]
public static T GetAdditionalFeature(ISupportAdditionalFeatures additionalFeatures, string key, Func`1<T> createDefaultValue);
    [ExtensionAttribute]
public static void SetAdditionalFeature(ISupportAdditionalFeatures additionalFeatures, string key, T value);
}
[ExtensionAttribute]
public static class FluentMigrator.Infrastructure.Extensions.CloneExtensions : object {
    [IteratorStateMachineAttribute("FluentMigrator.Infrastructure.Extensions.CloneExtensions/<CloneAll>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> CloneAll(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static Dictionary`2<string, object> Clone(IEnumerable`1<KeyValuePair`2<string, object>> dict);
    [ExtensionAttribute]
public static void CloneTo(IEnumerable`1<KeyValuePair`2<string, object>> dict, IDictionary`2<string, object> target);
}
public interface FluentMigrator.Infrastructure.IAssemblyCollection {
    public Assembly[] Assemblies { get; }
    public abstract virtual Assembly[] get_Assemblies();
    public abstract virtual Type[] GetExportedTypes();
    public abstract virtual ManifestResourceNameWithAssembly[] GetManifestResourceNames();
}
public interface FluentMigrator.Infrastructure.ICanBeValidated {
    public abstract virtual void CollectValidationErrors(ICollection`1<string> errors);
}
[EditorBrowsableAttribute("1")]
public interface FluentMigrator.Infrastructure.IFluentSyntax {
    [EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object other);
}
public interface FluentMigrator.Infrastructure.IMigrationContext {
    public ICollection`1<IMigrationExpression> Expressions { get; public set; }
    public IQuerySchema QuerySchema { get; }
    public IAssemblyCollection MigrationAssemblies { get; public set; }
    public object ApplicationContext { get; public set; }
    public string Connection { get; public set; }
    public abstract virtual ICollection`1<IMigrationExpression> get_Expressions();
    public abstract virtual void set_Expressions(ICollection`1<IMigrationExpression> value);
    public abstract virtual IQuerySchema get_QuerySchema();
    public abstract virtual IAssemblyCollection get_MigrationAssemblies();
    public abstract virtual void set_MigrationAssemblies(IAssemblyCollection value);
    public abstract virtual object get_ApplicationContext();
    public abstract virtual void set_ApplicationContext(object value);
    public abstract virtual string get_Connection();
    public abstract virtual void set_Connection(string value);
}
public interface FluentMigrator.Infrastructure.IMigrationInfo {
    public long Version { get; }
    public string Description { get; }
    public TransactionBehavior TransactionBehavior { get; }
    public IMigration Migration { get; }
    public bool IsBreakingChange { get; }
    public abstract virtual long get_Version();
    public abstract virtual string get_Description();
    public abstract virtual TransactionBehavior get_TransactionBehavior();
    public abstract virtual IMigration get_Migration();
    public abstract virtual bool get_IsBreakingChange();
    public abstract virtual object Trait(string name);
    public abstract virtual bool HasTrait(string name);
    public abstract virtual string GetName();
}
public interface FluentMigrator.Infrastructure.ISupportAdditionalFeatures {
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public abstract virtual IDictionary`2<string, object> get_AdditionalFeatures();
}
public class FluentMigrator.Infrastructure.ManifestResourceNameWithAssembly : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Assembly Assembly { get; public set; }
    public string Name { get; public set; }
    public ManifestResourceNameWithAssembly(string name, Assembly assembly);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(Assembly value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class FluentMigrator.Infrastructure.SingleAssembly : object {
    private Assembly _assembly;
    public Assembly[] Assemblies { get; }
    public SingleAssembly(Assembly assembly);
    public sealed virtual Type[] GetExportedTypes();
    public sealed virtual Assembly[] get_Assemblies();
    public sealed virtual ManifestResourceNameWithAssembly[] GetManifestResourceNames();
    [CompilerGeneratedAttribute]
private ManifestResourceNameWithAssembly <GetManifestResourceNames>b__5_0(string name);
}
public interface FluentMigrator.IQuerySchema {
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public abstract virtual bool SchemaExists(string schemaName);
    public abstract virtual bool TableExists(string schemaName, string tableName);
    public abstract virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public abstract virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public abstract virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public abstract virtual bool SequenceExists(string schemaName, string sequenceName);
    public abstract virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public abstract virtual string get_DatabaseType();
    public abstract virtual IList`1<string> get_DatabaseTypeAliases();
}
[AttributeUsageAttribute("4")]
public class FluentMigrator.MaintenanceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private MigrationStage <Stage>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionBehavior <TransactionBehavior>k__BackingField;
    public MigrationStage Stage { get; private set; }
    public TransactionBehavior TransactionBehavior { get; private set; }
    public MaintenanceAttribute(MigrationStage stage);
    public MaintenanceAttribute(MigrationStage stage, TransactionBehavior transactionBehavior);
    [CompilerGeneratedAttribute]
public MigrationStage get_Stage();
    [CompilerGeneratedAttribute]
private void set_Stage(MigrationStage value);
    [CompilerGeneratedAttribute]
public TransactionBehavior get_TransactionBehavior();
    [CompilerGeneratedAttribute]
private void set_TransactionBehavior(TransactionBehavior value);
}
[AttributeUsageAttribute("4")]
public class FluentMigrator.MigrationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionBehavior <TransactionBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BreakingChange>k__BackingField;
    public long Version { get; }
    public TransactionBehavior TransactionBehavior { get; }
    public string Description { get; }
    public bool BreakingChange { get; public set; }
    public MigrationAttribute(long version, string description);
    public MigrationAttribute(long version, TransactionBehavior transactionBehavior, string description);
    [CompilerGeneratedAttribute]
public long get_Version();
    [CompilerGeneratedAttribute]
public TransactionBehavior get_TransactionBehavior();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public bool get_BreakingChange();
    [CompilerGeneratedAttribute]
public void set_BreakingChange(bool value);
}
public enum FluentMigrator.MigrationDirection : Enum {
    public int value__;
    public static MigrationDirection Up;
    public static MigrationDirection Down;
}
public enum FluentMigrator.MigrationStage : Enum {
    public int value__;
    public static MigrationStage BeforeAll;
    public static MigrationStage BeforeEach;
    public static MigrationStage AfterEach;
    public static MigrationStage BeforeProfiles;
    public static MigrationStage AfterAll;
}
[AttributeUsageAttribute("4")]
public class FluentMigrator.MigrationTraitAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; private set; }
    public object Value { get; private set; }
    public MigrationTraitAttribute(string name);
    public MigrationTraitAttribute(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
public class FluentMigrator.Model.ColumnDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnModificationType <ModificationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <ForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalFeatures>k__BackingField;
    public string Name { get; public set; }
    public Nullable`1<DbType> Type { get; public set; }
    public int Size { get; public set; }
    public int Precision { get; public set; }
    public string CustomType { get; public set; }
    public object DefaultValue { get; public set; }
    public bool IsForeignKey { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsIndexed { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public string PrimaryKeyName { get; public set; }
    public Nullable`1<bool> IsNullable { get; public set; }
    public bool IsUnique { get; public set; }
    public string TableName { get; public set; }
    public ColumnModificationType ModificationType { get; public set; }
    public string ColumnDescription { get; public set; }
    public string CollationName { get; public set; }
    public ForeignKeyDefinition ForeignKey { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DbType> get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(Nullable`1<DbType> value);
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual void set_Size(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Precision();
    [CompilerGeneratedAttribute]
public virtual void set_Precision(int value);
    [CompilerGeneratedAttribute]
public virtual string get_CustomType();
    [CompilerGeneratedAttribute]
public virtual void set_CustomType(string value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsForeignKey();
    [CompilerGeneratedAttribute]
public virtual void set_IsForeignKey(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public virtual void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIndexed();
    [CompilerGeneratedAttribute]
public virtual void set_IsIndexed(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public virtual void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryKeyName();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKeyName(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual ColumnModificationType get_ModificationType();
    [CompilerGeneratedAttribute]
public virtual void set_ModificationType(ColumnModificationType value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnDescription();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnDescription(string value);
    [CompilerGeneratedAttribute]
public virtual string get_CollationName();
    [CompilerGeneratedAttribute]
public virtual void set_CollationName(string value);
    [CompilerGeneratedAttribute]
public virtual ForeignKeyDefinition get_ForeignKey();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignKey(ForeignKeyDefinition value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public virtual object Clone();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
}
public enum FluentMigrator.Model.ColumnModificationType : Enum {
    public int value__;
    public static ColumnModificationType Create;
    public static ColumnModificationType Alter;
}
public class FluentMigrator.Model.ConstraintDefinition : object {
    private ConstraintType constraintType;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalFeatures>k__BackingField;
    public bool IsPrimaryKeyConstraint { get; }
    public bool IsUniqueConstraint { get; }
    public string SchemaName { get; public set; }
    public string ConstraintName { get; public set; }
    public string TableName { get; public set; }
    public ICollection`1<string> Columns { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public ConstraintDefinition(ConstraintType type);
    public bool get_IsPrimaryKeyConstraint();
    public bool get_IsUniqueConstraint();
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConstraintName();
    [CompilerGeneratedAttribute]
public virtual void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public sealed virtual object Clone();
    public sealed virtual void CollectValidationErrors(ICollection`1<string> errors);
}
public enum FluentMigrator.Model.ConstraintType : Enum {
    public int value__;
    public static ConstraintType PrimaryKey;
    public static ConstraintType Unique;
}
public class FluentMigrator.Model.DeletionDataDefinition : List`1<KeyValuePair`2<string, object>> {
}
public enum FluentMigrator.Model.Direction : Enum {
    public int value__;
    public static Direction Ascending;
    public static Direction Descending;
}
public class FluentMigrator.Model.ForeignKeyDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignTableSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryTableSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <OnDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ForeignColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <PrimaryColumns>k__BackingField;
    public string Name { get; public set; }
    public string ForeignTable { get; public set; }
    public string ForeignTableSchema { get; public set; }
    public string PrimaryTable { get; public set; }
    public string PrimaryTableSchema { get; public set; }
    public Rule OnDelete { get; public set; }
    public Rule OnUpdate { get; public set; }
    public ICollection`1<string> ForeignColumns { get; public set; }
    public ICollection`1<string> PrimaryColumns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ForeignTable();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignTable(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ForeignTableSchema();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignTableSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryTable(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryTableSchema();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryTableSchema(string value);
    [CompilerGeneratedAttribute]
public virtual Rule get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(Rule value);
    [CompilerGeneratedAttribute]
public virtual Rule get_OnUpdate();
    [CompilerGeneratedAttribute]
public virtual void set_OnUpdate(Rule value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<string> get_ForeignColumns();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignColumns(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<string> get_PrimaryColumns();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryColumns(ICollection`1<string> value);
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public sealed virtual object Clone();
    public bool HasForeignAndPrimaryColumnsDefined();
}
public class FluentMigrator.Model.IndexColumnDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Direction <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalFeatures>k__BackingField;
    public string Name { get; public set; }
    public Direction Direction { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Direction get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(Direction value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public sealed virtual object Clone();
}
public class FluentMigrator.Model.IndexDefinition : object {
    private IDictionary`2<string, object> _additionalFeatures;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClustered>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IndexColumnDefinition> <Columns>k__BackingField;
    public string Name { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public bool IsUnique { get; public set; }
    public bool IsClustered { get; public set; }
    public ICollection`1<IndexColumnDefinition> Columns { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsClustered();
    [CompilerGeneratedAttribute]
public void set_IsClustered(bool value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IndexColumnDefinition> get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(ICollection`1<IndexColumnDefinition> value);
    public virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public virtual void CollectValidationErrors(ICollection`1<string> errors);
    public sealed virtual object Clone();
}
public class FluentMigrator.Model.InsertionDataDefinition : List`1<KeyValuePair`2<string, object>> {
}
public class FluentMigrator.Model.SequenceDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Increment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <StartWith>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cycle>k__BackingField;
    public string Name { get; public set; }
    public string SchemaName { get; public set; }
    public Nullable`1<long> Increment { get; public set; }
    public Nullable`1<long> MinValue { get; public set; }
    public Nullable`1<long> MaxValue { get; public set; }
    public Nullable`1<long> StartWith { get; public set; }
    public Nullable`1<long> Cache { get; public set; }
    public bool Cycle { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_Increment();
    [CompilerGeneratedAttribute]
public virtual void set_Increment(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MinValue();
    [CompilerGeneratedAttribute]
public virtual void set_MinValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_MaxValue();
    [CompilerGeneratedAttribute]
public virtual void set_MaxValue(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_StartWith();
    [CompilerGeneratedAttribute]
public virtual void set_StartWith(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_Cache();
    [CompilerGeneratedAttribute]
public virtual void set_Cache(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public virtual bool get_Cycle();
    [CompilerGeneratedAttribute]
public virtual void set_Cycle(bool value);
    public sealed virtual object Clone();
    public sealed virtual void CollectValidationErrors(ICollection`1<string> errors);
}
public class FluentMigrator.NonUnicodeString : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public NonUnicodeString(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
public class FluentMigrator.ProfileAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ProfileName>k__BackingField;
    public string ProfileName { get; private set; }
    public ProfileAttribute(string profileName);
    [CompilerGeneratedAttribute]
public string get_ProfileName();
    [CompilerGeneratedAttribute]
private void set_ProfileName(string value);
}
public class FluentMigrator.RawSql : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    private RawSql(string underlyingSql);
    [CompilerGeneratedAttribute]
public string get_Value();
    public static RawSql Insert(string sqlToRun);
}
public static class FluentMigrator.SqlScriptTokenReplacer : object {
    public static string ReplaceSqlScriptTokens(string sqlText, IDictionary`2<string, string> parameters);
}
public enum FluentMigrator.SystemMethods : Enum {
    public int value__;
    public static SystemMethods NewGuid;
    public static SystemMethods NewSequentialId;
    public static SystemMethods CurrentDateTime;
    public static SystemMethods CurrentDateTimeOffset;
    public static SystemMethods CurrentUTCDateTime;
    public static SystemMethods CurrentUser;
}
public enum FluentMigrator.TagBehavior : Enum {
    public int value__;
    public static TagBehavior RequireAll;
    public static TagBehavior RequireAny;
}
[AttributeUsageAttribute("4")]
[CLSCompliantAttribute("False")]
public class FluentMigrator.TagsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TagBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TagNames>k__BackingField;
    public TagBehavior Behavior { get; private set; }
    public String[] TagNames { get; private set; }
    [CLSCompliantAttribute("False")]
public TagsAttribute(TagBehavior behavior, String[] tagNames);
    [CLSCompliantAttribute("False")]
public TagsAttribute(String[] tagNames);
    public TagsAttribute(string tagName1);
    public TagsAttribute(string tagName1, string tagName2);
    public TagsAttribute(string tagName1, string tagName2, string tagName3);
    public TagsAttribute(string tagName1, string tagName2, string tagName3, string tagName4);
    [CompilerGeneratedAttribute]
public TagBehavior get_Behavior();
    [CompilerGeneratedAttribute]
private void set_Behavior(TagBehavior value);
    [CompilerGeneratedAttribute]
public String[] get_TagNames();
    [CompilerGeneratedAttribute]
private void set_TagNames(String[] value);
}
[CLSCompliantAttribute("False")]
public class FluentMigrator.TimestampedMigrationAttribute : MigrationAttribute {
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute, ushort second);
    public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute);
    public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute, string description);
    public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute, ushort second, string description);
    [CLSCompliantAttribute("False")]
public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute, TransactionBehavior transactionBehavior);
    public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute, ushort second, TransactionBehavior transactionBehavior);
    public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute, TransactionBehavior transactionBehavior, string description);
    public TimestampedMigrationAttribute(ushort year, ushort month, ushort day, ushort hour, ushort minute, ushort second, TransactionBehavior transactionBehavior, string description);
    private static TimestampedMigrationAttribute();
    private static long DateTimeToFormattedInt(int year, int month, int day, int hour, int minute, int second);
    private static Int32[] GetDaysToMonth(int year);
    private static bool IsValidDate(int year, int month, int day);
    private static bool IsValidHour(int hour);
    private static bool IsValidMinute(int minute);
    private static bool IsValidMonth(int month);
    private static bool IsValidSecond(int second);
    private static bool IsValidTime(int hour, int minute, int second);
    private static bool IsValidYear(int year);
}
public enum FluentMigrator.TransactionBehavior : Enum {
    public int value__;
    public static TransactionBehavior Default;
    public static TransactionBehavior None;
}
