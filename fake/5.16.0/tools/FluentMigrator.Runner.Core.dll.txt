[ExtensionAttribute]
public static class FluentMigrator.Runner.AnnouncerExtensions : object {
    [ExtensionAttribute]
public static void Heading(IAnnouncer announcer, string message, Object[] args);
    [ExtensionAttribute]
public static void Say(IAnnouncer announcer, string message, Object[] args);
    [ExtensionAttribute]
public static void Error(IAnnouncer announcer, string message, Object[] args);
}
public class FluentMigrator.Runner.BatchParser.EndCodeSearchResult : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeSearcher <NestedRangeSearcher>k__BackingField;
    public bool IsNestedStart { get; }
    public int Index { get; }
    public IRangeSearcher NestedRangeSearcher { get; }
    public EndCodeSearchResult(int index);
    public EndCodeSearchResult(int index, IRangeSearcher nestedRangeSearcher);
    public bool get_IsNestedStart();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public IRangeSearcher get_NestedRangeSearcher();
    public static EndCodeSearchResult op_Implicit(int index);
}
public interface FluentMigrator.Runner.BatchParser.ILineReader {
    public string Line { get; }
    public int Index { get; }
    public int Length { get; }
    public abstract virtual string get_Line();
    public abstract virtual int get_Index();
    public abstract virtual int get_Length();
    public abstract virtual string ReadString(int length);
    public abstract virtual ILineReader Advance(int length);
}
public interface FluentMigrator.Runner.BatchParser.IRangeSearcher {
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public abstract virtual int get_StartCodeLength();
    public abstract virtual int get_EndCodeLength();
    public abstract virtual bool get_IsComment();
    public abstract virtual int FindStartCode(ILineReader reader);
    public abstract virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public interface FluentMigrator.Runner.BatchParser.ISpecialTokenSearcher {
    public abstract virtual SpecialTokenInfo Find(ILineReader reader);
}
public interface FluentMigrator.Runner.BatchParser.ITextSource {
    public abstract virtual ILineReader CreateReader();
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.AnsiSqlIdentifier : StringWithNoEscape {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.CharWithEscapeByDuplication : object {
    private char _endChar;
    private Regex _startCodeRegex;
    private Regex _endCodeRegex;
    [CompilerGeneratedAttribute]
private bool <IsComment>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public CharWithEscapeByDuplication(char startAndEndChar, bool isComment);
    public CharWithEscapeByDuplication(char startChar, char endChar, bool isComment);
    public sealed virtual int get_StartCodeLength();
    public sealed virtual int get_EndCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.DoubleDashSingleLineComment : SingleLineComment {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.MultiLineComment : StringWithNoEscape {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.MySqlIdentifier : CharWithEscapeByDuplication {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.NestingMultiLineComment : object {
    private Regex _startCodeRegex;
    private Regex _endCodeRegex;
    [CompilerGeneratedAttribute]
private int <StartCodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndCodeLength>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndCodeLength();
    public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.PoundSignSingleLineComment : SingleLineComment {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.SingleLineComment : object {
    private bool _onlyAtBeginningOfLine;
    private Regex _startCodeRegex;
    [CompilerGeneratedAttribute]
private int <StartCodeLength>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public SingleLineComment(string startCode);
    public SingleLineComment(string startCode, bool onlyAtBeginningOfLine);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartCodeLength();
    public sealed virtual int get_EndCodeLength();
    public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.SqlServerIdentifier : CharWithEscapeByDuplication {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.SqlString : CharWithEscapeByDuplication {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.StringWithNoEscape : object {
    private Regex _startCodeRegex;
    private Regex _endCodeRegex;
    [CompilerGeneratedAttribute]
private int <StartCodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndCodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComment>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public StringWithNoEscape(string startAndEndCode, bool isComment);
    public StringWithNoEscape(string startCode, string endCode, bool isComment);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
internal class FluentMigrator.Runner.BatchParser.SearchContext : object {
    [CompilerGeneratedAttribute]
private IList`1<ISpecialTokenSearcher> <SpecialTokenSearchers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRangeSearcher> <RangeSearchers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripComments>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SqlBatchCollectorEventArgs> BatchSql;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpecialTokenEventArgs> SpecialToken;
    public IList`1<ISpecialTokenSearcher> SpecialTokenSearchers { get; }
    public IList`1<IRangeSearcher> RangeSearchers { get; }
    public bool StripComments { get; }
    public SearchContext(IEnumerable`1<IRangeSearcher> rangeSearchers, IEnumerable`1<ISpecialTokenSearcher> specialTokenSearchers, bool stripComments);
    [CompilerGeneratedAttribute]
public IList`1<ISpecialTokenSearcher> get_SpecialTokenSearchers();
    [CompilerGeneratedAttribute]
public IList`1<IRangeSearcher> get_RangeSearchers();
    [CompilerGeneratedAttribute]
public bool get_StripComments();
    [CompilerGeneratedAttribute]
public void add_BatchSql(EventHandler`1<SqlBatchCollectorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BatchSql(EventHandler`1<SqlBatchCollectorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    internal void OnBatchSql(SqlBatchCollectorEventArgs e);
    internal void OnSpecialToken(SpecialTokenEventArgs e);
}
internal class FluentMigrator.Runner.BatchParser.SearchStatus : object {
    private SearchContext _context;
    private ILineReader _reader;
    private Stack`1<IRangeSearcher> _activeRanges;
    private SpecialTokenInfo _foundToken;
    public SearchStatus(SearchContext context, ILineReader reader);
    private SearchStatus(SearchContext context, ILineReader reader, Stack`1<IRangeSearcher> activeRanges, SpecialTokenInfo foundToken);
    public SearchStatus Process();
    private static SpecialTokenInfo FindToken(ILineReader reader, IEnumerable`1<ISpecialTokenSearcher> searchers);
    private static RangeStart FindRangeStart(ILineReader reader, IEnumerable`1<IRangeSearcher> searchers);
    private SearchStatus FindRangeEnd();
    private SearchStatus FindTokenOrRangeStart();
    private SearchStatus UseNewRange(ILineReader reader, RangeStart info);
    private ILineReader WriteSql(ILineReader reader);
    private ILineReader WriteSql(ILineReader reader, RangeStart info);
    private ILineReader WriteSql(ILineReader reader, IRangeSearcher searcher, EndCodeSearchResult info);
    private ILineReader WriteSql(ILineReader reader, int itemIndex, int skipLength);
}
public class FluentMigrator.Runner.BatchParser.Sources.LinesSource : object {
    private IEnumerable`1<string> _batchSource;
    public LinesSource(IEnumerable`1<string> batchSource);
    public sealed virtual ILineReader CreateReader();
}
public class FluentMigrator.Runner.BatchParser.Sources.TextReaderSource : object {
    private TextReader _reader;
    private bool _isOwner;
    public TextReaderSource(TextReader reader);
    public TextReaderSource(TextReader reader, bool takeOwnership);
    public sealed virtual ILineReader CreateReader();
    public sealed virtual void Dispose();
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Opaque>k__BackingField;
    public string Token { get; }
    public object Opaque { get; }
    public SpecialTokenEventArgs(string token, object opaque);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public object get_Opaque();
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenInfo : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Opaque>k__BackingField;
    public int Index { get; }
    public int Length { get; }
    public string Token { get; }
    public object Opaque { get; }
    public SpecialTokenInfo(int index, int length, string token, object opaque);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public object get_Opaque();
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenSearchers.GoSearcher : object {
    private static Regex _regex;
    private static GoSearcher();
    public sealed virtual SpecialTokenInfo Find(ILineReader reader);
    public static Nullable`1<int> GetGoCount(string sql);
    private static Nullable`1<int> GetGoCount(Match match);
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenSearchers.SemicolonSearcher : object {
    private static Regex _regex;
    private static SemicolonSearcher();
    public sealed virtual SpecialTokenInfo Find(ILineReader reader);
}
internal class FluentMigrator.Runner.BatchParser.SqlBatchCollectorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <SqlContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEndOfLine>k__BackingField;
    public string SqlContent { get; }
    public bool IsEndOfLine { get; }
    public SqlBatchCollectorEventArgs(string sqlContent, bool isEndOfLine);
    [CompilerGeneratedAttribute]
public string get_SqlContent();
    [CompilerGeneratedAttribute]
public bool get_IsEndOfLine();
}
public class FluentMigrator.Runner.BatchParser.SqlBatchParser : object {
    private IEnumerable`1<IRangeSearcher> _rangeSearchers;
    private IEnumerable`1<ISpecialTokenSearcher> _specialTokenSearchers;
    private string _newLine;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpecialTokenEventArgs> SpecialToken;
    [CompilerGeneratedAttribute]
private EventHandler`1<SqlTextEventArgs> SqlText;
    public SqlBatchParser(IEnumerable`1<IRangeSearcher> rangeSearchers, IEnumerable`1<ISpecialTokenSearcher> specialTokenSearchers, string newLine);
    [CompilerGeneratedAttribute]
public void add_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SqlText(EventHandler`1<SqlTextEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SqlText(EventHandler`1<SqlTextEventArgs> value);
    public void Process(ITextSource source, bool stripComments);
    protected virtual void OnSpecialToken(SpecialTokenEventArgs e);
    protected virtual void OnSqlText(SqlTextEventArgs e);
}
public class FluentMigrator.Runner.BatchParser.SqlTextEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <SqlText>k__BackingField;
    public string SqlText { get; }
    public SqlTextEventArgs(string sqlText);
    [CompilerGeneratedAttribute]
public string get_SqlText();
}
public enum FluentMigrator.Runner.CompatabilityMode : Enum {
    public int value__;
    public static CompatabilityMode STRICT;
    public static CompatabilityMode LOOSE;
}
public class FluentMigrator.Runner.Conventions.ConventionSet : object {
    [CompilerGeneratedAttribute]
private IRootPathConvention <RootPathConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultSchemaConvention <SchemaConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IColumnsConvention> <ColumnsConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IConstraintConvention> <ConstraintConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyConvention> <ForeignKeyConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexConvention> <IndexConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISequenceConvention> <SequenceConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAutoNameConvention> <AutoNameConventions>k__BackingField;
    public IRootPathConvention RootPathConvention { get; public set; }
    public DefaultSchemaConvention SchemaConvention { get; public set; }
    public IList`1<IColumnsConvention> ColumnsConventions { get; }
    public IList`1<IConstraintConvention> ConstraintConventions { get; }
    public IList`1<IForeignKeyConvention> ForeignKeyConventions { get; }
    public IList`1<IIndexConvention> IndexConventions { get; }
    public IList`1<ISequenceConvention> SequenceConventions { get; }
    public IList`1<IAutoNameConvention> AutoNameConventions { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IRootPathConvention get_RootPathConvention();
    [CompilerGeneratedAttribute]
public void set_RootPathConvention(IRootPathConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual DefaultSchemaConvention get_SchemaConvention();
    [CompilerGeneratedAttribute]
public void set_SchemaConvention(DefaultSchemaConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IColumnsConvention> get_ColumnsConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IConstraintConvention> get_ConstraintConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IForeignKeyConvention> get_ForeignKeyConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IIndexConvention> get_IndexConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ISequenceConvention> get_SequenceConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAutoNameConvention> get_AutoNameConventions();
}
public class FluentMigrator.Runner.Conventions.DefaultAutoNameConvention : object {
    public sealed virtual IAutoNameExpression Apply(IAutoNameExpression expression);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Conventions.DefaultAutoNameConvention/<GetAutoScriptUpNameImpl>d__1")]
private static IEnumerable`1<string> GetAutoScriptUpNameImpl(Type type, IEnumerable`1<string> databaseTypes);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Conventions.DefaultAutoNameConvention/<GetAutoScriptDownNameImpl>d__2")]
private static IEnumerable`1<string> GetAutoScriptDownNameImpl(Type type, IEnumerable`1<string> databaseTypes);
}
public class FluentMigrator.Runner.Conventions.DefaultConstraintNameConvention : object {
    public sealed virtual IConstraintExpression Apply(IConstraintExpression expression);
    private static string GetConstraintName(ConstraintDefinition expression);
}
public class FluentMigrator.Runner.Conventions.DefaultForeignKeyNameConvention : object {
    public sealed virtual IForeignKeyExpression Apply(IForeignKeyExpression expression);
    private static string GetForeignKeyName(ForeignKeyDefinition foreignKey);
}
public class FluentMigrator.Runner.Conventions.DefaultIndexNameConvention : object {
    public sealed virtual IIndexExpression Apply(IIndexExpression expression);
    private static string GetIndexName(IndexDefinition index);
}
public class FluentMigrator.Runner.Conventions.DefaultPrimaryKeyNameConvention : object {
    public sealed virtual IColumnsExpression Apply(IColumnsExpression expression);
    private static string GetPrimaryKeyName(string tableName);
}
public class FluentMigrator.Runner.Conventions.DefaultRootPathConvention : object {
    private string _rootPath;
    public DefaultRootPathConvention(string rootPath);
    public sealed virtual IFileSystemExpression Apply(IFileSystemExpression expression);
}
public class FluentMigrator.Runner.Conventions.DefaultSchemaConvention : object {
    private IDefaultSchemaNameConvention _defaultSchemaNameConvention;
    public DefaultSchemaConvention(string defaultSchemaName);
    public DefaultSchemaConvention(IDefaultSchemaNameConvention defaultSchemaNameConvention);
    private string GetSchemaName(string originalSchemaName);
    public ISchemaExpression Apply(ISchemaExpression expression);
    public sealed virtual IForeignKeyExpression Apply(IForeignKeyExpression expression);
    public sealed virtual IConstraintExpression Apply(IConstraintExpression expression);
    public sealed virtual IIndexExpression Apply(IIndexExpression expression);
    public sealed virtual ISequenceExpression Apply(ISequenceExpression expression);
}
public class FluentMigrator.Runner.Conventions.DefaultSchemaNameConvention : object {
    private string _defaultSchemaName;
    private bool _isActive;
    public DefaultSchemaNameConvention(string defaultSchemaName);
    public sealed virtual string GetSchemaName(string originalSchemaName);
}
public interface FluentMigrator.Runner.Conventions.IAutoNameConvention {
    public abstract virtual IAutoNameExpression Apply(IAutoNameExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IColumnsConvention {
    public abstract virtual IColumnsExpression Apply(IColumnsExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IConstraintConvention {
    public abstract virtual IConstraintExpression Apply(IConstraintExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IConventionSet {
    public IRootPathConvention RootPathConvention { get; }
    public DefaultSchemaConvention SchemaConvention { get; }
    public IList`1<IColumnsConvention> ColumnsConventions { get; }
    public IList`1<IConstraintConvention> ConstraintConventions { get; }
    public IList`1<IForeignKeyConvention> ForeignKeyConventions { get; }
    public IList`1<IIndexConvention> IndexConventions { get; }
    public IList`1<ISequenceConvention> SequenceConventions { get; }
    public IList`1<IAutoNameConvention> AutoNameConventions { get; }
    public abstract virtual IRootPathConvention get_RootPathConvention();
    public abstract virtual DefaultSchemaConvention get_SchemaConvention();
    public abstract virtual IList`1<IColumnsConvention> get_ColumnsConventions();
    public abstract virtual IList`1<IConstraintConvention> get_ConstraintConventions();
    public abstract virtual IList`1<IForeignKeyConvention> get_ForeignKeyConventions();
    public abstract virtual IList`1<IIndexConvention> get_IndexConventions();
    public abstract virtual IList`1<ISequenceConvention> get_SequenceConventions();
    public abstract virtual IList`1<IAutoNameConvention> get_AutoNameConventions();
}
public interface FluentMigrator.Runner.Conventions.IDefaultSchemaNameConvention {
    public abstract virtual string GetSchemaName(string originalSchemaName);
}
public interface FluentMigrator.Runner.Conventions.IForeignKeyConvention {
    public abstract virtual IForeignKeyExpression Apply(IForeignKeyExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IIndexConvention {
    public abstract virtual IIndexExpression Apply(IIndexExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IRootPathConvention {
    public abstract virtual IFileSystemExpression Apply(IFileSystemExpression expression);
}
public interface FluentMigrator.Runner.Conventions.ISequenceConvention {
    public abstract virtual ISequenceExpression Apply(ISequenceExpression expression);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.ConventionSetExtensions : object {
    [IteratorStateMachineAttribute("FluentMigrator.Runner.ConventionSetExtensions/<Apply>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IMigrationExpression> Apply(IEnumerable`1<IMigrationExpression> expressions, IConventionSet conventionSet);
    [ExtensionAttribute]
public static T Apply(T expression, IConventionSet conventionSet);
}
public abstract class FluentMigrator.Runner.Generators.Base.ColumnBase : object {
    private ITypeMap _typeMap;
    [CompilerGeneratedAttribute]
private IList`1<Func`2<ColumnDefinition, string>> <ClauseOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuoter <Quoter>k__BackingField;
    protected IList`1<Func`2<ColumnDefinition, string>> ClauseOrder { get; protected set; }
    public string ForeignKeyConstraint { get; }
    protected IQuoter Quoter { get; }
    public ColumnBase(ITypeMap typeMap, IQuoter quoter);
    [CompilerGeneratedAttribute]
protected IList`1<Func`2<ColumnDefinition, string>> get_ClauseOrder();
    [CompilerGeneratedAttribute]
protected void set_ClauseOrder(IList`1<Func`2<ColumnDefinition, string>> value);
    public virtual string get_ForeignKeyConstraint();
    [CompilerGeneratedAttribute]
protected IQuoter get_Quoter();
    protected string GetTypeMap(DbType value, int size, int precision);
    public virtual string FormatString(ColumnDefinition column);
    protected virtual string FormatType(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string FormatDefaultValue(ColumnDefinition column);
    protected abstract virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatPrimaryKey(ColumnDefinition column);
    protected virtual string FormatCollation(ColumnDefinition column);
    public virtual string FormatCascade(string onWhat, Rule rule);
    public virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey);
    public virtual string FormatForeignKey(ForeignKeyDefinition foreignKey, Func`2<ForeignKeyDefinition, string> fkNameGeneration);
    public virtual string Generate(ColumnDefinition column);
    public virtual string Generate(IEnumerable`1<ColumnDefinition> columns, string tableName);
    public virtual bool ShouldPrimaryKeysBeAddedSeparately(IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    public virtual string AddPrimaryKeyConstraint(string tableName, IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    protected virtual string GetPrimaryKeyConstraintName(IEnumerable`1<ColumnDefinition> primaryKeyColumns, string tableName);
    [CompilerGeneratedAttribute]
private string <Generate>b__23_1(ColumnDefinition x);
    [CompilerGeneratedAttribute]
private string <AddPrimaryKeyConstraint>b__25_0(ColumnDefinition x);
}
public abstract class FluentMigrator.Runner.Generators.Base.GeneratorBase : object {
    private IColumn _column;
    private IQuoter _quoter;
    private IDescriptionGenerator _descriptionGenerator;
    protected IColumn Column { get; }
    public IQuoter Quoter { get; }
    protected IDescriptionGenerator DescriptionGenerator { get; }
    public GeneratorBase(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    public abstract virtual string Generate(CreateSchemaExpression expression);
    public abstract virtual string Generate(DeleteSchemaExpression expression);
    public abstract virtual string Generate(CreateTableExpression expression);
    public abstract virtual string Generate(AlterColumnExpression expression);
    public abstract virtual string Generate(CreateColumnExpression expression);
    public abstract virtual string Generate(DeleteTableExpression expression);
    public abstract virtual string Generate(DeleteColumnExpression expression);
    public abstract virtual string Generate(CreateForeignKeyExpression expression);
    public abstract virtual string Generate(DeleteForeignKeyExpression expression);
    public abstract virtual string Generate(CreateIndexExpression expression);
    public abstract virtual string Generate(DeleteIndexExpression expression);
    public abstract virtual string Generate(RenameTableExpression expression);
    public abstract virtual string Generate(RenameColumnExpression expression);
    public abstract virtual string Generate(InsertDataExpression expression);
    public abstract virtual string Generate(AlterDefaultConstraintExpression expression);
    public abstract virtual string Generate(DeleteDataExpression expression);
    public abstract virtual string Generate(UpdateDataExpression expression);
    public abstract virtual string Generate(AlterSchemaExpression expression);
    public abstract virtual string Generate(CreateSequenceExpression expression);
    public abstract virtual string Generate(DeleteSequenceExpression expression);
    public abstract virtual string Generate(CreateConstraintExpression expression);
    public abstract virtual string Generate(DeleteConstraintExpression expression);
    public abstract virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual bool IsAdditionalFeatureSupported(string feature);
    public virtual string Generate(AlterTableExpression expression);
    protected IColumn get_Column();
    public IQuoter get_Quoter();
    protected IDescriptionGenerator get_DescriptionGenerator();
}
public abstract class FluentMigrator.Runner.Generators.Base.TypeMapBase : object {
    private Dictionary`2<DbType, SortedList`2<int, string>> _templates;
    private static string SizePlaceholder;
    protected static string PrecisionPlaceholder;
    protected abstract virtual void SetupTypeMaps();
    protected void SetTypeMap(DbType type, string template);
    protected void SetTypeMap(DbType type, string template, int maxSize);
    public virtual string GetTypeMap(DbType type, int size, int precision);
    private void EnsureHasList(DbType type);
    private string ReplacePlaceholders(string value, int size, int precision);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Generators.CompatabilityModeExtension : object {
    [ExtensionAttribute]
public static string HandleCompatabilty(CompatabilityMode mode, string message);
}
public class FluentMigrator.Runner.Generators.EmptyDescriptionGenerator : object {
    public sealed virtual IEnumerable`1<string> GenerateDescriptionStatements(CreateTableExpression expression);
    public sealed virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public sealed virtual string GenerateDescriptionStatement(CreateColumnExpression expression);
    public sealed virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
}
public abstract class FluentMigrator.Runner.Generators.Generic.GenericDescriptionGenerator : object {
    protected abstract virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected abstract virtual string GenerateColumnDescription(string schemaName, string tableName, string columnName, string columnDescription);
    public virtual IEnumerable`1<string> GenerateDescriptionStatements(CreateTableExpression expression);
    public virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public virtual string GenerateDescriptionStatement(CreateColumnExpression expression);
    public virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
}
public abstract class FluentMigrator.Runner.Generators.Generic.GenericGenerator : GeneratorBase {
    public CompatabilityMode compatabilityMode;
    public string CreateTable { get; }
    public string DropTable { get; }
    public string AddColumn { get; }
    public string DropColumn { get; }
    public string AlterColumn { get; }
    public string RenameColumn { get; }
    public string RenameTable { get; }
    public string CreateSchema { get; }
    public string AlterSchema { get; }
    public string DropSchema { get; }
    public string CreateIndex { get; }
    public string DropIndex { get; }
    public string InsertData { get; }
    public string UpdateData { get; }
    public string DeleteData { get; }
    public string CreateConstraint { get; }
    public string DeleteConstraint { get; }
    public string CreateForeignKeyConstraint { get; }
    public GenericGenerator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    public virtual string get_CreateTable();
    public virtual string get_DropTable();
    public virtual string get_AddColumn();
    public virtual string get_DropColumn();
    public virtual string get_AlterColumn();
    public virtual string get_RenameColumn();
    public virtual string get_RenameTable();
    public virtual string get_CreateSchema();
    public virtual string get_AlterSchema();
    public virtual string get_DropSchema();
    public virtual string get_CreateIndex();
    public virtual string get_DropIndex();
    public virtual string get_InsertData();
    public virtual string get_UpdateData();
    public virtual string get_DeleteData();
    public virtual string get_CreateConstraint();
    public virtual string get_DeleteConstraint();
    public virtual string get_CreateForeignKeyConstraint();
    public virtual string GetUniqueString(CreateIndexExpression column);
    public virtual string GetClusterTypeString(CreateIndexExpression column);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    protected virtual StringBuilder AppendSqlStatementEndToken(StringBuilder stringBuilder);
    protected List`1<KeyValuePair`2<string, string>> GenerateColumnNamesAndValues(InsertDataExpression expression);
    protected string ValidateAdditionalFeatureCompatibility(IEnumerable`1<KeyValuePair`2<string, object>> features);
    public virtual string Generate(UpdateDataExpression expression);
    public virtual string Generate(DeleteDataExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    [CompilerGeneratedAttribute]
private bool <ValidateAdditionalFeatureCompatibility>b__57_0(KeyValuePair`2<string, object> x);
}
public class FluentMigrator.Runner.Generators.Generic.GenericQuoter : object {
    [CompilerGeneratedAttribute]
private string <IdentifierSeparator>k__BackingField;
    public string ValueQuote { get; }
    public string EscapeValueQuote { get; }
    public string IdentifierSeparator { get; }
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public string OpenQuoteEscapeString { get; }
    public string CloseQuoteEscapeString { get; }
    public virtual string QuoteValue(object value);
    public virtual string FromTimeSpan(TimeSpan value);
    protected virtual string FormatByteArray(Byte[] value);
    private string FormatDecimal(decimal value);
    private string FormatFloat(float value);
    private string FormatDouble(double value);
    public virtual string FormatNull();
    public virtual string FormatAnsiString(string value);
    public virtual string FormatNationalString(string value);
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string FormatChar(char value);
    public virtual string FormatBool(bool value);
    public virtual string FormatGuid(Guid value);
    public virtual string FormatDateTime(DateTime value);
    public virtual string FormatDateTimeOffset(DateTimeOffset value);
    public virtual string FormatEnum(object value);
    public virtual string get_ValueQuote();
    public virtual string get_EscapeValueQuote();
    [CompilerGeneratedAttribute]
public virtual string get_IdentifierSeparator();
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string get_OpenQuoteEscapeString();
    public virtual string get_CloseQuoteEscapeString();
    public virtual bool IsQuoted(string name);
    protected virtual bool ShouldQuote(string name);
    public virtual string Quote(string name);
    public virtual string QuoteColumnName(string columnName);
    public virtual string QuoteConstraintName(string constraintName, string schemaName);
    public virtual string QuoteIndexName(string indexName, string schemaName);
    public virtual string QuoteTableName(string tableName, string schemaName);
    public virtual string QuoteSequenceName(string sequenceName, string schemaName);
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string UnQuote(string quoted);
    protected virtual string CreateSchemaPrefixedQuotedIdentifier(string quotedSchemaName, string quotedIdentifier);
}
public interface FluentMigrator.Runner.Generators.IColumn {
    public abstract virtual string Generate(ColumnDefinition column);
    public abstract virtual string Generate(IEnumerable`1<ColumnDefinition> columns, string tableName);
    public abstract virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey);
    public abstract virtual string FormatForeignKey(ForeignKeyDefinition foreignKey, Func`2<ForeignKeyDefinition, string> fkNameGeneration);
    public abstract virtual string FormatCascade(string onWhat, Rule rule);
}
public interface FluentMigrator.Runner.Generators.IDescriptionGenerator {
    public abstract virtual IEnumerable`1<string> GenerateDescriptionStatements(CreateTableExpression expression);
    public abstract virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public abstract virtual string GenerateDescriptionStatement(CreateColumnExpression expression);
    public abstract virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
}
public interface FluentMigrator.Runner.Generators.IQuoter {
    public abstract virtual string Quote(string value);
    public abstract virtual string UnQuote(string value);
    public abstract virtual string QuoteValue(object value);
    public abstract virtual bool IsQuoted(string value);
    public abstract virtual string QuoteColumnName(string columnName);
    public abstract virtual string QuoteTableName(string tableName, string schemaName);
    public abstract virtual string QuoteIndexName(string indexName, string schemaName);
    public abstract virtual string QuoteConstraintName(string contraintName, string schemaName);
    public abstract virtual string QuoteSequenceName(string sequenceName, string schemaName);
    public abstract virtual string QuoteSchemaName(string schemaName);
}
public interface FluentMigrator.Runner.Generators.ITypeMap {
    public abstract virtual string GetTypeMap(DbType type, int size, int precision);
}
public class FluentMigrator.Runner.Helpers.FormatHelper : object {
    public static string FormatSqlEscape(string sql);
}
public interface FluentMigrator.Runner.IAnnouncer {
    public abstract virtual void Heading(string message);
    public abstract virtual void Say(string message);
    public abstract virtual void Emphasize(string message);
    public abstract virtual void Sql(string sql);
    public abstract virtual void ElapsedTime(TimeSpan timeSpan);
    public abstract virtual void Error(string message);
    public abstract virtual void Error(Exception exception);
    [ObsoleteAttribute]
public abstract virtual void Write(string message, bool isNotSql);
}
internal class FluentMigrator.Runner.Infrastructure.Hosts.NetFrameworkHost : object {
    public string BaseDirectory { get; }
    public sealed virtual string get_BaseDirectory();
    public sealed virtual object CreateInstance(IServiceProvider serviceProvider, string assemblyName, string typeName);
    public sealed virtual IEnumerable`1<Assembly> GetLoadedAssemblies();
}
public interface FluentMigrator.Runner.Infrastructure.IHostAbstraction {
    public string BaseDirectory { get; }
    public abstract virtual string get_BaseDirectory();
    public abstract virtual object CreateInstance(IServiceProvider serviceProvider, string assemblyName, string typeName);
    public abstract virtual IEnumerable`1<Assembly> GetLoadedAssemblies();
}
public static class FluentMigrator.Runner.Infrastructure.RuntimeHost : object {
    private static String[] _noNames;
    private static IHostAbstraction _currentHost;
    public static IHostAbstraction Current { get; }
    private static RuntimeHost();
    public static IHostAbstraction get_Current();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<FindAssemblies>d__4")]
public static IEnumerable`1<AssemblyName> FindAssemblies();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<FindAssemblies>d__5")]
public static IEnumerable`1<AssemblyName> FindAssemblies(string name);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<GetAssemblyNames>d__6")]
private static IEnumerable`1<AssemblyName> GetAssemblyNames(string fullGacDirectory, string assemblyName);
    private static IEnumerable`1<string> GetFullGacDirectories();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<GetFullGacDirectoriesOnWindows>d__8")]
private static IEnumerable`1<string> GetFullGacDirectoriesOnWindows(string winDir);
    private static String[] GetGacDirectories();
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Processors.DataReaderExtensions : object {
    [ExtensionAttribute]
public static DataSet ReadDataSet(IDataReader reader);
    [ExtensionAttribute]
public static DataTable ReadTable(IDataReader reader);
    [ExtensionAttribute]
private static void CreateColumns(IDataReader reader, DataTable table);
    [ExtensionAttribute]
private static DataColumn CreateColumn(IDataReader reader, int fieldIndex);
}
public abstract class FluentMigrator.Runner.Processors.DbFactoryBase : object {
    private object lock;
    private DbProviderFactory modreq(System.Runtime.CompilerServices.IsVolatile) factory;
    protected DbProviderFactory Factory { get; }
    protected DbFactoryBase(DbProviderFactory factory);
    protected DbProviderFactory get_Factory();
    protected abstract virtual DbProviderFactory CreateFactory();
    public sealed virtual IDbConnection CreateConnection(string connectionString);
    public virtual IDbCommand CreateCommand(string commandText, IDbConnection connection, IDbTransaction transaction, IMigrationProcessorOptions options);
}
public abstract class FluentMigrator.Runner.Processors.GenericProcessorBase : ProcessorBase {
    private string connectionString;
    [CompilerGeneratedAttribute]
private IDbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbFactory <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbTransaction <Transaction>k__BackingField;
    public string ConnectionString { get; }
    public IDbConnection Connection { get; protected set; }
    public IDbFactory Factory { get; protected set; }
    public IDbTransaction Transaction { get; protected set; }
    protected GenericProcessorBase(IDbConnection connection, IDbFactory factory, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options);
    public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(IDbConnection value);
    [CompilerGeneratedAttribute]
public IDbFactory get_Factory();
    [CompilerGeneratedAttribute]
protected void set_Factory(IDbFactory value);
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
protected void set_Transaction(IDbTransaction value);
    protected virtual void EnsureConnectionIsOpen();
    protected virtual void EnsureConnectionIsClosed();
    public virtual void BeginTransaction();
    public virtual void RollbackTransaction();
    public virtual void CommitTransaction();
    protected virtual void Dispose(bool isDisposing);
}
public interface FluentMigrator.Runner.Processors.IDbFactory {
    public abstract virtual IDbConnection CreateConnection(string connectionString);
    public abstract virtual IDbCommand CreateCommand(string commandText, IDbConnection connection, IDbTransaction transaction, IMigrationProcessorOptions options);
}
public interface FluentMigrator.Runner.Processors.IMigrationProcessorFactory {
    public string Name { get; }
    public abstract virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    public abstract virtual bool IsForProvider(string provider);
    public abstract virtual string get_Name();
}
public abstract class FluentMigrator.Runner.Processors.MigrationProcessorFactory : object {
    public string Name { get; }
    public abstract virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    public virtual bool IsForProvider(string provider);
    public virtual string get_Name();
}
public abstract class FluentMigrator.Runner.Processors.ProcessorBase : object {
    protected IMigrationGenerator Generator;
    protected IAnnouncer Announcer;
    [CompilerGeneratedAttribute]
private IMigrationProcessorOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasCommitted>k__BackingField;
    public IMigrationProcessorOptions Options { get; }
    public string ConnectionString { get; }
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public bool WasCommitted { get; protected set; }
    protected ProcessorBase(IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationProcessorOptions get_Options();
    public abstract virtual string get_ConnectionString();
    public abstract virtual string get_DatabaseType();
    public abstract virtual IList`1<string> get_DatabaseTypeAliases();
    [CompilerGeneratedAttribute]
public bool get_WasCommitted();
    [CompilerGeneratedAttribute]
protected void set_WasCommitted(bool value);
    public virtual void Process(CreateSchemaExpression expression);
    public virtual void Process(DeleteSchemaExpression expression);
    public virtual void Process(CreateTableExpression expression);
    public virtual void Process(AlterTableExpression expression);
    public virtual void Process(AlterColumnExpression expression);
    public virtual void Process(CreateColumnExpression expression);
    public virtual void Process(DeleteTableExpression expression);
    public virtual void Process(DeleteColumnExpression expression);
    public virtual void Process(CreateForeignKeyExpression expression);
    public virtual void Process(DeleteForeignKeyExpression expression);
    public virtual void Process(CreateIndexExpression expression);
    public virtual void Process(DeleteIndexExpression expression);
    public virtual void Process(RenameTableExpression expression);
    public virtual void Process(RenameColumnExpression expression);
    public virtual void Process(InsertDataExpression expression);
    public virtual void Process(DeleteDataExpression expression);
    public virtual void Process(AlterDefaultConstraintExpression expression);
    public virtual void Process(UpdateDataExpression expression);
    public abstract virtual void Process(PerformDBOperationExpression expression);
    public virtual void Process(AlterSchemaExpression expression);
    public virtual void Process(CreateSequenceExpression expression);
    public virtual void Process(DeleteSequenceExpression expression);
    public virtual void Process(CreateConstraintExpression expression);
    public virtual void Process(DeleteConstraintExpression expression);
    public virtual void Process(DeleteDefaultConstraintExpression expression);
    protected abstract virtual void Process(string sql);
    public virtual void BeginTransaction();
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public abstract virtual DataSet ReadTableData(string schemaName, string tableName);
    public abstract virtual DataSet Read(string template, Object[] args);
    public abstract virtual bool Exists(string template, Object[] args);
    public abstract virtual void Execute(string template, Object[] args);
    public abstract virtual bool SchemaExists(string schemaName);
    public abstract virtual bool TableExists(string schemaName, string tableName);
    public abstract virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public abstract virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public abstract virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public abstract virtual bool SequenceExists(string schemaName, string sequenceName);
    public abstract virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool isDisposing);
}
public class FluentMigrator.Runner.Processors.ProcessorOptions : object {
    [CompilerGeneratedAttribute]
private bool <PreviewOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderSwitches>k__BackingField;
    public bool PreviewOnly { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public string ProviderSwitches { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreviewOnly();
    [CompilerGeneratedAttribute]
public void set_PreviewOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderSwitches();
    [CompilerGeneratedAttribute]
public void set_ProviderSwitches(string value);
}
public class FluentMigrator.Runner.Processors.ReflectionBasedDbFactory : DbFactoryBase {
    private TestEntry[] _testEntries;
    private DbProviderFactory _instance;
    public ReflectionBasedDbFactory(string assemblyName, string dbProviderFactoryTypeName);
    protected ReflectionBasedDbFactory(TestEntry[] testEntries);
    protected virtual DbProviderFactory CreateFactory();
    protected static bool TryCreateFactory(IEnumerable`1<TestEntry> entries, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    protected static bool TryCreateFromAppDomainPaths(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    protected static bool TryCreateFactoryFromRuntimeHost(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    private static bool TryCreateFromGac(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    private static bool TryCreateFromCurrentDomain(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    private static bool TryLoadAssemblyFromCurrentDomain(string assemblyName, ICollection`1<Exception> exceptions, Assembly& assembly);
    protected static bool TryLoadAssemblyFromAppDomainDirectories(string assemblyName, ICollection`1<Exception> exceptions, Assembly& assembly);
    protected static bool TryLoadAssemblyFromDirectories(IEnumerable`1<string> directories, string assemblyName, ICollection`1<Exception> exceptions, Assembly& assembly);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Processors.ReflectionBasedDbFactory/<FindAssembliesInGac>d__13")]
private static IEnumerable`1<AssemblyName> FindAssembliesInGac(String[] names);
    private static bool TryGetInstance(Type factoryType, DbProviderFactory& factory);
    private static bool TryCastInstance(object value, DbProviderFactory& factory);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Processors.ReflectionBasedDbFactory/<GetPathsFromAppDomain>d__16")]
private static IEnumerable`1<string> GetPathsFromAppDomain();
}
