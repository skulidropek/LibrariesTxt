internal class FluentMigrator.Runner.Generators.Firebird.FirebirdColumn : ColumnBase {
    [CompilerGeneratedAttribute]
private FirebirdOptions <FBOptions>k__BackingField;
    protected FirebirdOptions FBOptions { get; private set; }
    public FirebirdColumn(FirebirdOptions fbOptions);
    [CompilerGeneratedAttribute]
protected FirebirdOptions get_FBOptions();
    [CompilerGeneratedAttribute]
private void set_FBOptions(FirebirdOptions value);
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string GetPrimaryKeyConstraintName(IEnumerable`1<ColumnDefinition> primaryKeyColumns, string tableName);
    public virtual string GenerateForTypeAlter(ColumnDefinition column);
    public virtual string GenerateForDefaultAlter(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.Firebird.FirebirdGenerator : GenericGenerator {
    protected FirebirdTruncator truncator;
    [CompilerGeneratedAttribute]
private FirebirdOptions <FBOptions>k__BackingField;
    protected FirebirdOptions FBOptions { get; private set; }
    public string AlterColumnSetNullablePre3 { get; }
    public string AlterColumnSetNullable3 { get; }
    public string AlterColumnSetType { get; }
    public string AddColumn { get; }
    public string DropColumn { get; }
    public string RenameColumn { get; }
    public FirebirdGenerator(FirebirdOptions fbOptions);
    [CompilerGeneratedAttribute]
protected FirebirdOptions get_FBOptions();
    [CompilerGeneratedAttribute]
private void set_FBOptions(FirebirdOptions value);
    public string get_AlterColumnSetNullablePre3();
    public string get_AlterColumnSetNullable3();
    public string get_AlterColumnSetType();
    public virtual string get_AddColumn();
    public virtual string get_DropColumn();
    public virtual string get_RenameColumn();
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public string GenerateAlterSequence(SequenceDefinition sequence);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    public virtual string Generate(UpdateDataExpression expression);
    public virtual string Generate(DeleteDataExpression expression);
    public virtual string GenerateSetNullPre3(string tableName, ColumnDefinition column);
    public virtual string GenerateSetNull3(string tableName, ColumnDefinition column);
    public virtual string GenerateSetType(string tableName, ColumnDefinition column);
    public static bool ColumnTypesMatch(ColumnDefinition col1, ColumnDefinition col2);
    public static bool DefaultValuesMatch(ColumnDefinition col1, ColumnDefinition col2);
}
public class FluentMigrator.Runner.Generators.Firebird.FirebirdQuoter : GenericQuoter {
    private static HashSet`1<string> _keywords;
    private bool _forceQuote;
    public FirebirdQuoter(bool forceQuote);
    private static FirebirdQuoter();
    protected virtual bool ShouldQuote(string name);
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string FormatDateTime(DateTime value);
    public string ToFbObjectName(string objName);
    public virtual string QuoteSchemaName(string schemaName);
}
public class FluentMigrator.Runner.Generators.Firebird.FirebirdTruncator : object {
    private bool enabled;
    private bool packKeyNames;
    public FirebirdTruncator(bool enabled, bool packKeyNames);
    public void Truncate(CreateSchemaExpression expression);
    public void Truncate(AlterSchemaExpression expression);
    public void Truncate(DeleteSchemaExpression expression);
    public void Truncate(CreateTableExpression expression);
    public void Truncate(AlterTableExpression expression);
    public void Truncate(DeleteTableExpression expression);
    public void Truncate(RenameTableExpression expression);
    public void Truncate(ColumnDefinition column);
    public void Truncate(CreateColumnExpression expression);
    public void Truncate(AlterColumnExpression expression);
    public void Truncate(DeleteColumnExpression expression);
    public void Truncate(RenameColumnExpression expression);
    public void Truncate(IndexDefinition index);
    public void Truncate(CreateIndexExpression expression);
    public void Truncate(DeleteIndexExpression expression);
    public void Truncate(ConstraintDefinition constraint);
    public void Truncate(CreateConstraintExpression expression);
    public void Truncate(DeleteConstraintExpression expression);
    public void Truncate(ForeignKeyDefinition foreignKey);
    public void Truncate(CreateForeignKeyExpression expression);
    public void Truncate(DeleteForeignKeyExpression expression);
    public void Truncate(AlterDefaultConstraintExpression expression);
    public void Truncate(DeleteDefaultConstraintExpression expression);
    public void Truncate(SequenceDefinition sequence);
    public void Truncate(CreateSequenceExpression expression);
    public void Truncate(DeleteSequenceExpression expression);
    public void Truncate(InsertDataExpression expression);
    public void Truncate(DeleteDataExpression expression);
    public void Truncate(UpdateDataExpression expression);
    public ICollection`1<string> TruncateNames(ICollection`1<string> names);
    public void TruncateColumns(ICollection`1<ColumnDefinition> columns);
    public string Truncate(string name);
    public string Pack(string name);
    [CompilerGeneratedAttribute]
private void <Truncate>b__15_0(IndexColumnDefinition x);
}
internal class FluentMigrator.Runner.Generators.Firebird.FirebirdTypeMap : TypeMapBase {
    private static int DecimalCapacity;
    private static int FirebirdMaxVarcharSize;
    private static int FirebirdMaxCharSize;
    private static int FirebirdMaxUnicodeCharSize;
    private static int FirebirdMaxTextSize;
    protected virtual void SetupTypeMaps();
}
internal class FluentMigrator.Runner.Models.FirebirdTableDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ColumnDefinition> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ForeignKeyDefinition> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IndexDefinition> <Indexes>k__BackingField;
    public string Name { get; public set; }
    public string SchemaName { get; public set; }
    public ICollection`1<ColumnDefinition> Columns { get; public set; }
    public ICollection`1<ForeignKeyDefinition> ForeignKeys { get; public set; }
    public ICollection`1<IndexDefinition> Indexes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<ColumnDefinition> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(ICollection`1<ColumnDefinition> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ForeignKeyDefinition> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public void set_ForeignKeys(ICollection`1<ForeignKeyDefinition> value);
    [CompilerGeneratedAttribute]
public ICollection`1<IndexDefinition> get_Indexes();
    [CompilerGeneratedAttribute]
public void set_Indexes(ICollection`1<IndexDefinition> value);
}
public static class FluentMigrator.Runner.Processors.Firebird.AdoHelper : object {
    public static Nullable`1<int> GetIntValue(object val);
    public static string GetStringValue(object val);
    public static string FormatValue(string value);
}
public class FluentMigrator.Runner.Processors.Firebird.ColumnInfo : object {
    private static string query;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CharacterLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FieldSubType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldTypeName>k__BackingField;
    public string Name { get; private set; }
    public string TableName { get; private set; }
    public object DefaultValue { get; private set; }
    public int Position { get; private set; }
    public Nullable`1<DbType> DBType { get; }
    public string CustomType { get; }
    public bool IsNullable { get; private set; }
    public Nullable`1<int> Size { get; private set; }
    public Nullable`1<int> Precision { get; private set; }
    public Nullable`1<int> CharacterLength { get; private set; }
    public Nullable`1<int> FieldType { get; private set; }
    public Nullable`1<int> FieldSubType { get; private set; }
    public string FieldTypeName { get; private set; }
    private ColumnInfo(DataRow drColumn, FirebirdProcessor processor);
    private static ColumnInfo();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    public Nullable`1<DbType> get_DBType();
    public string get_CustomType();
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
private void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
private void set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CharacterLength();
    [CompilerGeneratedAttribute]
private void set_CharacterLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FieldType();
    [CompilerGeneratedAttribute]
private void set_FieldType(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FieldSubType();
    [CompilerGeneratedAttribute]
private void set_FieldSubType(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_FieldTypeName();
    [CompilerGeneratedAttribute]
private void set_FieldTypeName(string value);
    public static List`1<ColumnInfo> Read(FirebirdProcessor processor, TableInfo table);
    private Nullable`1<DbType> GetDBType();
    private string GetCustomDBType();
    private object GetDefaultValue(object val);
}
public class FluentMigrator.Runner.Processors.Firebird.ConstraintInfo : object {
    private static string query;
    private static string colQuery;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexInfo <ForeignIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <UpdateRule>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <DeleteRule>k__BackingField;
    public string Name { get; private set; }
    public bool IsPrimaryKey { get; private set; }
    public bool IsUnique { get; private set; }
    public bool IsNotNull { get; private set; }
    public bool IsForeignKey { get; private set; }
    public string IndexName { get; private set; }
    public IndexInfo ForeignIndex { get; private set; }
    public Rule UpdateRule { get; private set; }
    public Rule DeleteRule { get; private set; }
    private ConstraintInfo(DataRow drConstraint, FirebirdProcessor processor);
    private static ConstraintInfo();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
private void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
private void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNotNull();
    [CompilerGeneratedAttribute]
private void set_IsNotNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsForeignKey();
    [CompilerGeneratedAttribute]
private void set_IsForeignKey(bool value);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
private void set_IndexName(string value);
    [CompilerGeneratedAttribute]
public IndexInfo get_ForeignIndex();
    [CompilerGeneratedAttribute]
private void set_ForeignIndex(IndexInfo value);
    [CompilerGeneratedAttribute]
public Rule get_UpdateRule();
    [CompilerGeneratedAttribute]
private void set_UpdateRule(Rule value);
    [CompilerGeneratedAttribute]
public Rule get_DeleteRule();
    [CompilerGeneratedAttribute]
private void set_DeleteRule(Rule value);
    private Rule GetForeignRule(object val);
    public static List`1<ConstraintInfo> Read(FirebirdProcessor processor, TableInfo table);
}
public class FluentMigrator.Runner.Processors.Firebird.FirebirdDbFactory : ReflectionBasedDbFactory {
    protected virtual DbProviderFactory CreateFactory();
}
public class FluentMigrator.Runner.Processors.Firebird.FirebirdOptions : object {
    public static int MaxNameLength;
    [CompilerGeneratedAttribute]
private bool <TruncateLongNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PackKeyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VirtualLock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceQuote>k__BackingField;
    [CompilerGeneratedAttribute]
private FirebirdTransactionModel <TransactionModel>k__BackingField;
    public bool TruncateLongNames { get; public set; }
    public bool PackKeyNames { get; public set; }
    public bool VirtualLock { get; public set; }
    public bool ForceQuote { get; public set; }
    public FirebirdTransactionModel TransactionModel { get; public set; }
    private static FirebirdOptions();
    [CompilerGeneratedAttribute]
public bool get_TruncateLongNames();
    [CompilerGeneratedAttribute]
public void set_TruncateLongNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_PackKeyNames();
    [CompilerGeneratedAttribute]
public void set_PackKeyNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_VirtualLock();
    [CompilerGeneratedAttribute]
public void set_VirtualLock(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceQuote();
    [CompilerGeneratedAttribute]
public void set_ForceQuote(bool value);
    [CompilerGeneratedAttribute]
public FirebirdTransactionModel get_TransactionModel();
    [CompilerGeneratedAttribute]
public void set_TransactionModel(FirebirdTransactionModel value);
    public static FirebirdOptions StandardBehaviour();
    public static FirebirdOptions CommitOnCheckFailBehaviour();
    public static FirebirdOptions AutoCommitBehaviour();
    public FirebirdOptions ApplyProviderSwitches(string providerSwitches);
    public sealed virtual object Clone();
    private static bool ConvertToBoolean(object value);
    private static bool ConvertToBoolean(string value);
}
public class FluentMigrator.Runner.Processors.Firebird.FirebirdProcessedExpression : FirebirdProcessedExpressionBase {
    public FirebirdProcessedExpression(IMigrationExpression expression, Type expressionType, FirebirdProcessor processor);
}
public class FluentMigrator.Runner.Processors.Firebird.FirebirdProcessedExpression`1 : FirebirdProcessedExpressionBase {
    public FirebirdProcessedExpression`1(T expression, FirebirdProcessor processor);
}
public abstract class FluentMigrator.Runner.Processors.Firebird.FirebirdProcessedExpressionBase : object {
    protected Type expressionType;
    [CompilerGeneratedAttribute]
private FirebirdProcessor <Processor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationExpression <Expression>k__BackingField;
    public FirebirdProcessor Processor { get; private set; }
    public IMigrationExpression Expression { get; private set; }
    protected FirebirdProcessedExpressionBase(IMigrationExpression expression, Type expressionType, FirebirdProcessor processor);
    [CompilerGeneratedAttribute]
public FirebirdProcessor get_Processor();
    [CompilerGeneratedAttribute]
private void set_Processor(FirebirdProcessor value);
    [CompilerGeneratedAttribute]
public IMigrationExpression get_Expression();
    [CompilerGeneratedAttribute]
private void set_Expression(IMigrationExpression value);
    protected string GenerateSql(IMigrationExpression expression);
    protected void Run(IMigrationExpression expression, IDbConnection connection, IDbTransaction transaction);
    public virtual string ToString();
}
public class FluentMigrator.Runner.Processors.Firebird.FirebirdProcessor : GenericProcessorBase {
    private Lazy`1<Version> _firebirdVersionFunc;
    protected FirebirdTruncator truncator;
    private FirebirdQuoter quoter;
    [CompilerGeneratedAttribute]
private FirebirdOptions <FBOptions>k__BackingField;
    protected List`1<string> DDLCreatedTables;
    protected Dictionary`2<string, List`1<string>> DDLCreatedColumns;
    protected List`1<string> DDLTouchedTables;
    protected Dictionary`2<string, List`1<string>> DDLTouchedColumns;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public FirebirdOptions FBOptions { get; private set; }
    public bool IsFirebird3 { get; }
    public IMigrationGenerator Generator { get; }
    public IAnnouncer Announcer { get; }
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public FirebirdProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory, FirebirdOptions fbOptions);
    [CompilerGeneratedAttribute]
public FirebirdOptions get_FBOptions();
    [CompilerGeneratedAttribute]
private void set_FBOptions(FirebirdOptions value);
    public bool get_IsFirebird3();
    public IMigrationGenerator get_Generator();
    public IAnnouncer get_Announcer();
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    private Version GetFirebirdVersion();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool TriggerExists(string schemaName, string tableName, string triggerName);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual bool Exists(string template, Object[] args);
    public virtual void BeginTransaction();
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual void CommitRetaining();
    public virtual void AutoCommit();
    public bool IsRunningOutOfMigrationScope();
    protected void ClearDDLFollowers();
    protected void RegisterTableCreation(string tableName);
    protected void RegisterColumnCreation(string tableName, string columnName);
    protected bool IsTableCreated(string tableName);
    protected bool IsColumnCreated(string tableName, string columnName);
    protected void ClearLocks();
    public void LockTable(string tableName);
    public void LockColumn(string tableName, IEnumerable`1<string> columns);
    public void LockColumn(string tableName, string columnName);
    public void CheckTable(string tableName);
    public void CheckColumn(string tableName, IEnumerable`1<string> columns);
    public void CheckColumn(string tableName, string columnName);
    public virtual void Process(CreateColumnExpression expression);
    public virtual void Process(AlterColumnExpression expression);
    public virtual void Process(RenameColumnExpression expression);
    public virtual void Process(DeleteColumnExpression expression);
    public virtual void Process(CreateTableExpression expression);
    public virtual void Process(AlterTableExpression expression);
    public virtual void Process(RenameTableExpression expression);
    public virtual void Process(DeleteTableExpression expression);
    public virtual void Process(AlterDefaultConstraintExpression expression);
    public virtual void Process(DeleteDefaultConstraintExpression expression);
    public virtual void Process(CreateIndexExpression expression);
    public virtual void Process(DeleteIndexExpression expression);
    public virtual void Process(CreateSchemaExpression expression);
    public virtual void Process(AlterSchemaExpression expression);
    public virtual void Process(DeleteSchemaExpression expression);
    public virtual void Process(CreateConstraintExpression expression);
    public virtual void Process(DeleteConstraintExpression expression);
    public virtual void Process(CreateForeignKeyExpression expression);
    public virtual void Process(DeleteForeignKeyExpression expression);
    public virtual void Process(CreateSequenceExpression expression);
    public virtual void Process(DeleteSequenceExpression expression);
    public virtual void Process(InsertDataExpression expression);
    public virtual void Process(DeleteDataExpression expression);
    public virtual void Process(UpdateDataExpression expression);
    public virtual void Execute(string template, Object[] args);
    public virtual void Process(PerformDBOperationExpression expression);
    protected void InternalProcess(string sql);
    protected virtual void Process(string sql);
    private string FormatToSafeName(string sqlName);
    private string GetSequenceName(string tableName, string columnName);
    private string GetIdentityTriggerName(string tableName, string columnName);
    private void CreateSequenceForIdentity(string tableName, string columnName);
    private void DeleteSequenceForIdentity(string tableName, string columnName);
    public PerformDBOperationExpression CreateTriggerExpression(string tableName, TriggerInfo trigger);
    public PerformDBOperationExpression CreateTriggerExpression(string tableName, string triggerName, bool onBefore, TriggerEvent onEvent, string triggerBody);
    public PerformDBOperationExpression DeleteTriggerExpression(string tableName, string triggerName);
}
public class FluentMigrator.Runner.Processors.Firebird.FirebirdProcessorFactory : MigrationProcessorFactory {
    [CompilerGeneratedAttribute]
private FirebirdOptions <FbOptions>k__BackingField;
    public FirebirdOptions FbOptions { get; public set; }
    public FirebirdProcessorFactory(FirebirdOptions fbOptions);
    [CompilerGeneratedAttribute]
public FirebirdOptions get_FbOptions();
    [CompilerGeneratedAttribute]
public void set_FbOptions(FirebirdOptions value);
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.Firebird.FirebirdSchemaProvider : object {
    private FirebirdQuoter _quoter;
    internal Dictionary`2<string, FirebirdTableSchema> TableSchemas;
    [CompilerGeneratedAttribute]
private FirebirdProcessor <Processor>k__BackingField;
    public FirebirdProcessor Processor { get; protected set; }
    public FirebirdSchemaProvider(FirebirdProcessor processor, FirebirdQuoter quoter);
    [CompilerGeneratedAttribute]
public FirebirdProcessor get_Processor();
    [CompilerGeneratedAttribute]
protected void set_Processor(FirebirdProcessor value);
    public ColumnDefinition GetColumnDefinition(string tableName, string columnName);
    internal FirebirdTableDefinition GetTableDefinition(string tableName);
    internal FirebirdTableSchema GetTableSchema(string tableName);
    internal FirebirdTableSchema LoadTableSchema(string tableName);
    public IndexDefinition GetIndex(string tableName, string indexName);
    public SequenceInfo GetSequence(string sequenceName);
}
internal class FluentMigrator.Runner.Processors.Firebird.FirebirdTableSchema : object {
    private FirebirdQuoter _quoter;
    [CompilerGeneratedAttribute]
private TableInfo <TableMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IndexInfo> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ConstraintInfo> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TriggerInfo> <Triggers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private FirebirdProcessor <Processor>k__BackingField;
    [CompilerGeneratedAttribute]
private FirebirdTableDefinition <Definition>k__BackingField;
    public TableInfo TableMeta { get; private set; }
    public List`1<ColumnInfo> Columns { get; private set; }
    public List`1<IndexInfo> Indexes { get; private set; }
    public List`1<ConstraintInfo> Constraints { get; private set; }
    public List`1<TriggerInfo> Triggers { get; private set; }
    public string TableName { get; private set; }
    public bool Exists { get; }
    public FirebirdProcessor Processor { get; private set; }
    public FirebirdTableDefinition Definition { get; private set; }
    public bool HasPrimaryKey { get; }
    public FirebirdTableSchema(string tableName, FirebirdProcessor processor, FirebirdQuoter quoter);
    [CompilerGeneratedAttribute]
public TableInfo get_TableMeta();
    [CompilerGeneratedAttribute]
private void set_TableMeta(TableInfo value);
    [CompilerGeneratedAttribute]
public List`1<ColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(List`1<ColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<IndexInfo> get_Indexes();
    [CompilerGeneratedAttribute]
private void set_Indexes(List`1<IndexInfo> value);
    [CompilerGeneratedAttribute]
public List`1<ConstraintInfo> get_Constraints();
    [CompilerGeneratedAttribute]
private void set_Constraints(List`1<ConstraintInfo> value);
    [CompilerGeneratedAttribute]
public List`1<TriggerInfo> get_Triggers();
    [CompilerGeneratedAttribute]
private void set_Triggers(List`1<TriggerInfo> value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    public bool get_Exists();
    [CompilerGeneratedAttribute]
public FirebirdProcessor get_Processor();
    [CompilerGeneratedAttribute]
private void set_Processor(FirebirdProcessor value);
    [CompilerGeneratedAttribute]
public FirebirdTableDefinition get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(FirebirdTableDefinition value);
    public bool get_HasPrimaryKey();
    public void Load();
    private void LoadMeta();
    private void LoadColumns();
    private void LoadIndexes();
    private void RemoveIndex(string indexName);
    private void LoadConstraints();
    private void LoadTriggers();
}
public enum FluentMigrator.Runner.Processors.Firebird.FirebirdTransactionModel : Enum {
    public int value__;
    public static FirebirdTransactionModel AutoCommitOnCheckFail;
    public static FirebirdTransactionModel AutoCommit;
    public static FirebirdTransactionModel None;
}
public class FluentMigrator.Runner.Processors.Firebird.IndexInfo : object {
    private static string query;
    private static string singleQuery;
    private static string indexFieldQuery;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAscending>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    public string Name { get; private set; }
    public string TableName { get; private set; }
    public bool IsUnique { get; private set; }
    public bool IsAscending { get; private set; }
    public List`1<string> Columns { get; private set; }
    private IndexInfo(DataRow drIndex, FirebirdProcessor processor);
    private static IndexInfo();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
private void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAscending();
    [CompilerGeneratedAttribute]
private void set_IsAscending(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(List`1<string> value);
    public static List`1<IndexInfo> Read(FirebirdProcessor processor, TableInfo table);
    public static IndexInfo Read(FirebirdProcessor processor, string indexName);
}
public class FluentMigrator.Runner.Processors.Firebird.SequenceInfo : object {
    private static string query;
    private static string queryValue;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentValue>k__BackingField;
    public string Name { get; private set; }
    public int CurrentValue { get; private set; }
    private SequenceInfo(DataRow drSequence, FirebirdProcessor processor);
    private static SequenceInfo();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_CurrentValue();
    [CompilerGeneratedAttribute]
private void set_CurrentValue(int value);
    public static SequenceInfo Read(FirebirdProcessor processor, string sequenceName, FirebirdQuoter quoter);
}
public class FluentMigrator.Runner.Processors.Firebird.TableInfo : object {
    private static string query;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exists>k__BackingField;
    public string Name { get; }
    public bool Exists { get; }
    public TableInfo(DataRow drMeta);
    public TableInfo(string name, bool exists);
    private static TableInfo();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_Exists();
    public static TableInfo Read(FirebirdProcessor processor, string tableName, FirebirdQuoter quoter);
}
public enum FluentMigrator.Runner.Processors.Firebird.TriggerEvent : Enum {
    public int value__;
    public static TriggerEvent Insert;
    public static TriggerEvent Update;
    public static TriggerEvent Delete;
}
public class FluentMigrator.Runner.Processors.Firebird.TriggerInfo : object {
    private static string query;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Name { get; private set; }
    public int Sequence { get; private set; }
    public int Type { get; private set; }
    public string Body { get; private set; }
    public bool Before { get; }
    public bool OnInsert { get; }
    public bool OnUpdate { get; }
    public bool OnDelete { get; }
    public TriggerEvent Event { get; }
    private TriggerInfo(DataRow drTrigger, FirebirdProcessor processor);
    private static TriggerInfo();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Sequence();
    [CompilerGeneratedAttribute]
private void set_Sequence(int value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(int value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    public bool get_Before();
    public bool get_OnInsert();
    public bool get_OnUpdate();
    public bool get_OnDelete();
    public TriggerEvent get_Event();
    public static List`1<TriggerInfo> Read(FirebirdProcessor processor, TableInfo table);
}
