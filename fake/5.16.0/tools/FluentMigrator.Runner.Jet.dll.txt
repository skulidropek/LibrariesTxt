internal class FluentMigrator.Runner.Generators.Jet.JetColumn : ColumnBase {
    protected virtual string FormatType(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.Jet.JetGenerator : GenericGenerator {
    public string DropIndex { get; }
    public virtual string get_DropIndex();
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
}
public class FluentMigrator.Runner.Generators.Jet.JetQuoter : GenericQuoter {
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public string CloseQuoteEscapeString { get; }
    public string OpenQuoteEscapeString { get; }
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string get_CloseQuoteEscapeString();
    public virtual string get_OpenQuoteEscapeString();
    public virtual string FormatDateTime(DateTime value);
    public virtual string QuoteSchemaName(string schemaName);
}
internal class FluentMigrator.Runner.Generators.Jet.JetTypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    public static int ImageCapacity;
    public static int DecimalCapacity;
    protected virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Processors.Jet.JetProcessor : ProcessorBase {
    private string connectionString;
    private IDbConnection _connection;
    private IDbTransaction _transaction;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public OleDbConnection Connection { get; }
    public OleDbTransaction Transaction { get; }
    public string ConnectionString { get; }
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public JetProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options);
    public OleDbConnection get_Connection();
    public OleDbTransaction get_Transaction();
    public virtual string get_ConnectionString();
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    protected void EnsureConnectionIsOpen();
    protected void EnsureConnectionIsClosed();
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual void Execute(string template, Object[] args);
    public virtual bool SchemaExists(string tableName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void BeginTransaction();
    public virtual void RollbackTransaction();
    public virtual void CommitTransaction();
    protected virtual void Dispose(bool isDisposing);
}
public class FluentMigrator.Runner.Processors.Jet.JetProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
