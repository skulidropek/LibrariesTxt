public class FluentMigrator.Runner.Generators.MySql.MySql4Generator : GenericGenerator {
    public string AlterColumn { get; }
    public string DeleteConstraint { get; }
    protected MySql4Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    public virtual string get_AlterColumn();
    public virtual string get_DeleteConstraint();
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
}
internal class FluentMigrator.Runner.Generators.MySql.MySql4TypeMap : TypeMapBase {
    public static int AnsiTinyStringCapacity;
    public static int StringCapacity;
    public static int VarcharCapacity;
    public static int TextCapacity;
    public static int MediumTextCapacity;
    public static int LongTextCapacity;
    public static int DecimalCapacity;
    protected virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Generators.MySql.MySql5Generator : MySql4Generator {
    protected MySql5Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
}
internal class FluentMigrator.Runner.Generators.MySql.MySql5TypeMap : MySql4TypeMap {
    public static int DecimalCapacity;
    protected virtual void SetupTypeMaps();
}
internal class FluentMigrator.Runner.Generators.MySql.MySqlColumn : ColumnBase {
    public MySqlColumn(ITypeMap typeMap, IQuoter quoter);
    internal string FormatDefaultValue(object defaultValue);
    protected string FormatDescription(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.MySql.MySqlQuoter : GenericQuoter {
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string QuoteValue(object value);
    public virtual string FromTimeSpan(TimeSpan value);
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string QuoteSchemaName(string schemaName);
}
public class FluentMigrator.Runner.Processors.MySql.MySql4ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.MySql.MySql5ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.MySql.MySqlDbFactory : ReflectionBasedDbFactory {
}
public class FluentMigrator.Runner.Processors.MySql.MySqlProcessor : GenericProcessorBase {
    private MySqlQuoter _quoter;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public MySqlProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    protected virtual void Process(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
    public virtual void Process(RenameColumnExpression expression);
}
