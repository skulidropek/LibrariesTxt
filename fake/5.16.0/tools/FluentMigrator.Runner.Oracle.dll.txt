internal class FluentMigrator.Runner.Generators.Oracle.OracleColumn : ColumnBase {
    private static int OracleObjectNameMaxLength;
    public OracleColumn(IQuoter quoter);
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string GetPrimaryKeyConstraintName(IEnumerable`1<ColumnDefinition> primaryKeyColumns, string tableName);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleDescriptionGenerator : GenericDescriptionGenerator {
    private static string TableDescriptionTemplate;
    private static string ColumnDescriptionTemplate;
    private string GetFullTableName(string schemaName, string tableName);
    protected virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected virtual string GenerateColumnDescription(string schemaName, string tableName, string columnName, string columnDescription);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleGenerator : GenericGenerator {
    public string DropTable { get; }
    public string AddColumn { get; }
    public string AlterColumn { get; }
    public string RenameTable { get; }
    public string InsertData { get; }
    public OracleGenerator(bool useQuotedIdentifiers);
    private static IQuoter GetQuoter(bool useQuotedIdentifiers);
    public virtual string get_DropTable();
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string get_AddColumn();
    public virtual string get_AlterColumn();
    public virtual string get_RenameTable();
    public virtual string get_InsertData();
    private string ExpandTableName(string schema, string table);
    private string innerGenerate(CreateTableExpression expression);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    protected virtual StringBuilder AppendSqlStatementEndToken(StringBuilder stringBuilder);
    private string WrapStatementInExecuteImmediateBlock(string statement);
    private string WrapInBlock(string sql);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleQuoter : OracleQuoterQuotedIdentifier {
    public virtual string Quote(string name);
    public virtual string QuoteConstraintName(string constraintName, string schemaName);
    public virtual string QuoteIndexName(string indexName, string schemaName);
    public virtual string QuoteTableName(string tableName, string schemaName);
    public virtual string QuoteSequenceName(string sequenceName, string schemaName);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleQuoterQuotedIdentifier : GenericQuoter {
    public virtual string FormatDateTime(DateTime value);
    public virtual string FromTimeSpan(TimeSpan value);
    public virtual string FormatGuid(Guid value);
    public virtual string FormatSystemMethods(SystemMethods value);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleTypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int BlobCapacity;
    public static int CharStringCapacity;
    public static int DecimalCapacity;
    public static int RawCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    protected virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Processors.DotConnectOracle.DotConnectOracleDbFactory : ReflectionBasedDbFactory {
}
public class FluentMigrator.Runner.Processors.DotConnectOracle.DotConnectOracleProcessor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public DotConnectOracleProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, DotConnectOracleDbFactory factory);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
}
public class FluentMigrator.Runner.Processors.DotConnectOracle.DotConnectOracleProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.Oracle.OracleDbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _testEntries;
    private static OracleDbFactory();
}
public class FluentMigrator.Runner.Processors.Oracle.OracleManagedDbFactory : ReflectionBasedDbFactory {
}
public class FluentMigrator.Runner.Processors.Oracle.OracleManagedProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    private bool Quoted(string options);
}
public class FluentMigrator.Runner.Processors.Oracle.OracleProcessor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public IQuoter Quoter { get; }
    public OracleProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public IQuoter get_Quoter();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
}
public class FluentMigrator.Runner.Processors.Oracle.OracleProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    private bool Quoted(string options);
}
