internal class FluentMigrator.Runner.Generators.Redshift.RedshiftColumn : ColumnBase {
    [CompilerGeneratedAttribute]
private IList`1<Func`2<ColumnDefinition, string>> <AlterClauseOrder>k__BackingField;
    protected IList`1<Func`2<ColumnDefinition, string>> AlterClauseOrder { get; protected set; }
    public string FormatAlterDefaultValue(string column, object defaultValue);
    private string FormatAlterNullable(ColumnDefinition column);
    private string FormatAlterType(ColumnDefinition column);
    [CompilerGeneratedAttribute]
protected IList`1<Func`2<ColumnDefinition, string>> get_AlterClauseOrder();
    [CompilerGeneratedAttribute]
protected void set_AlterClauseOrder(IList`1<Func`2<ColumnDefinition, string>> value);
    public string GenerateAlterClauses(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
    public virtual string AddPrimaryKeyConstraint(string tableName, IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    public string GetColumnType(ColumnDefinition column);
    [CompilerGeneratedAttribute]
private string <AddPrimaryKeyConstraint>b__10_0(ColumnDefinition c);
}
public class FluentMigrator.Runner.Generators.Redshift.RedshiftDescriptionGenerator : GenericDescriptionGenerator {
    private IQuoter _quoter;
    private static string TableDescriptionTemplate;
    private static string ColumnDescriptionTemplate;
    protected IQuoter Quoter { get; }
    protected IQuoter get_Quoter();
    private string GetFullTableName(string schemaName, string tableName);
    protected virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected virtual string GenerateColumnDescription(string schemaName, string tableName, string columnName, string columnDescription);
}
public class FluentMigrator.Runner.Generators.Redshift.RedshiftGenerator : GenericGenerator {
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDataExpression expression);
    public virtual string Generate(UpdateDataExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    protected string GetColumnList(IEnumerable`1<string> columns);
    protected string GetDataList(List`1<object> data);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
}
public class FluentMigrator.Runner.Generators.Redshift.RedshiftQuoter : GenericQuoter {
    public virtual string FormatBool(bool value);
    public virtual string QuoteSchemaName(string schemaName);
    protected virtual string FormatByteArray(Byte[] array);
    public string UnQuoteSchemaName(string quoted);
    public virtual string FormatSystemMethods(SystemMethods value);
}
internal class FluentMigrator.Runner.Generators.Redshift.RedshiftTypeMap : TypeMapBase {
    private static int DecimalCapacity;
    private static int RedshiftMaxVarcharSize;
    protected virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Processors.Redshift.RedshiftDbFactory : ReflectionBasedDbFactory {
    protected virtual DbProviderFactory CreateFactory();
}
public class FluentMigrator.Runner.Processors.Redshift.RedshiftProcessor : GenericProcessorBase {
    private RedshiftQuoter quoter;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public RedshiftProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual void Execute(string template, Object[] args);
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual DataSet Read(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    protected virtual void Process(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
    private string FormatToSafeSchemaName(string schemaName);
    private string FormatToSafeName(string sqlName);
}
public class FluentMigrator.Runner.Processors.Redshift.RedshiftProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
