public class FluentMigrator.Runner.BatchParser.SQLiteBatchParser : SqlBatchParser {
    private static IEnumerable`1<IRangeSearcher> _rangeSearchers;
    private static IEnumerable`1<ISpecialTokenSearcher> _specialTokenSearchers;
    public SQLiteBatchParser(string newLine);
    private static SQLiteBatchParser();
}
internal class FluentMigrator.Runner.Generators.SQLite.SQLiteColumn : ColumnBase {
    public virtual string Generate(IEnumerable`1<ColumnDefinition> columns, string tableName);
    protected virtual string FormatIdentity(ColumnDefinition column);
    public virtual bool ShouldPrimaryKeysBeAddedSeparately(IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    protected virtual string FormatPrimaryKey(ColumnDefinition column);
    [CompilerGeneratedAttribute]
private string <Generate>b__1_1(ColumnDefinition x);
}
public class FluentMigrator.Runner.Generators.SQLite.SQLiteGenerator : GenericGenerator {
    public string RenameTable { get; }
    public virtual string get_RenameTable();
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
}
public class FluentMigrator.Runner.Generators.SQLite.SQLiteQuoter : GenericQuoter {
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string QuoteSchemaName(string schemaName);
}
internal class FluentMigrator.Runner.Generators.SQLite.SQLiteTypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    public static int ImageCapacity;
    public static int DecimalCapacity;
    public static int XmlCapacity;
    protected virtual void SetupTypeMaps();
    public virtual string GetTypeMap(DbType type, int size, int precision);
}
public class FluentMigrator.Runner.Processors.SQLite.SQLiteDbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _testEntries;
    private static SQLiteDbFactory();
}
public class FluentMigrator.Runner.Processors.SQLite.SQLiteProcessor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public SQLiteProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
    private static bool ContainsGo(string sql);
    private void ExecuteNonQuery(string sql);
    private void ExecuteBatchNonQuery(string sql);
    public virtual DataSet Read(string template, Object[] args);
}
public class FluentMigrator.Runner.Processors.SQLite.SQLiteProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
