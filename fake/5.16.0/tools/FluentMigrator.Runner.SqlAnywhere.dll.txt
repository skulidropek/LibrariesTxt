public class FluentMigrator.Runner.BatchParser.SqlAnywhereBatchParser : SqlBatchParser {
    private static IEnumerable`1<IRangeSearcher> _rangeSearchers;
    private static IEnumerable`1<ISpecialTokenSearcher> _specialTokenSearchers;
    public SqlAnywhereBatchParser(string newLine);
    private static SqlAnywhereBatchParser();
}
public class FluentMigrator.Runner.Generators.SqlAnywhere.SqlAnywhere16Generator : GenericGenerator {
    private IEnumerable`1<string> _supportedAdditionalFeatures;
    public string CreateSchema { get; }
    public string DropSchema { get; }
    public string RenameTable { get; }
    public string CreateIndex { get; }
    public string DropIndex { get; }
    public string AddColumn { get; }
    public string DropColumn { get; }
    public string AlterColumn { get; }
    public string RenameColumn { get; }
    public string CreateForeignKeyConstraint { get; }
    public string CreateConstraint { get; }
    protected SqlAnywhere16Generator(IColumn column, IDescriptionGenerator descriptionGenerator);
    public virtual string get_CreateSchema();
    public virtual string get_DropSchema();
    public virtual string get_RenameTable();
    public virtual string get_CreateIndex();
    public virtual string get_DropIndex();
    public virtual string get_AddColumn();
    public virtual string get_DropColumn();
    public virtual string get_AlterColumn();
    public virtual string get_RenameColumn();
    public virtual string get_CreateForeignKeyConstraint();
    public virtual string get_CreateConstraint();
    public virtual string GetClusterTypeString(CreateIndexExpression column);
    protected string GetConstraintClusteringString(CreateConstraintExpression constraint);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual bool IsAdditionalFeatureSupported(string feature);
    protected virtual string GetWithNullsDistinctString(IndexDefinition index);
    private string ComposeStatements(string ddlStatement, IEnumerable`1<string> otherStatements);
    [CompilerGeneratedAttribute]
private string <Generate>b__29_0(string x);
}
public class FluentMigrator.Runner.Generators.SqlAnywhere.SqlAnywhere16TypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    public static int ImageCapacity;
    public static int DecimalCapacity;
    protected virtual void SetupTypeMaps();
}
internal class FluentMigrator.Runner.Generators.SqlAnywhere.SqlAnywhereColumn : ColumnBase {
    public SqlAnywhereColumn(ITypeMap typeMap);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string FormatDefaultValue(ColumnDefinition column);
    private static bool DefaultValueIsSqlFunction(object defaultValue);
    protected virtual string FormatUniqueConstraint(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
    private static string GetIdentityString();
    public string FormatDefaultValue(object defaultValue);
    public static string GetDefaultConstraintName(string tableName, string columnName);
}
public class FluentMigrator.Runner.Generators.SqlAnywhere.SqlAnywhereQuoter : GenericQuoter {
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public string CloseQuoteEscapeString { get; }
    public string OpenQuoteEscapeString { get; }
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string get_CloseQuoteEscapeString();
    public virtual string get_OpenQuoteEscapeString();
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string FormatNationalString(string value);
    public virtual string FormatSystemMethods(SystemMethods value);
}
public class FluentMigrator.Runner.Processors.SqlAnywhere.SqlAnywhere16ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    public virtual bool IsForProvider(string provider);
}
public class FluentMigrator.Runner.Processors.SqlAnywhere.SqlAnywhereDbFactory : DbFactoryBase {
    private static String[] _assemblyNames;
    private static SqlAnywhereDbFactory();
    protected virtual DbProviderFactory CreateFactory();
    private Assembly GetLatestSqlAnywhereAssembly();
    private static bool TryLoadAssemblyFromCurrentDomain(string assemblyName, Assembly& assembly);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Processors.SqlAnywhere.SqlAnywhereDbFactory/<FindAssembliesInGac>d__4")]
private static IEnumerable`1<AssemblyName> FindAssembliesInGac(String[] names);
}
public class FluentMigrator.Runner.Processors.SqlAnywhere.SqlAnywhereProcessor : GenericProcessorBase {
    private static string SCHEMA_EXISTS;
    private static string TABLE_EXISTS;
    private static string COLUMN_EXISTS;
    private static string CONSTRAINT_EXISTS;
    private static string INDEX_EXISTS;
    private static string SEQUENCES_EXISTS;
    private static string DEFAULTVALUE_EXISTS;
    [CompilerGeneratedAttribute]
private string <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public SqlAnywhereProcessor(string databaseType, IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    private static string SafeSchemaName(string schemaName);
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Process(CreateSchemaExpression expression);
    private string ReplaceUserIdAndPasswordInConnectionString(string userId, string password);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    protected virtual void Process(string sql);
    private static bool ContainsGo(string sql);
    private void EnsureConnectionIsOpen(IDbConnection connection);
    private void ExecuteNonQuery(IDbConnection connection, IDbTransaction transaction, string sql);
    private void ExecuteBatchNonQuery(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
}
