public class FluentMigrator.Runner.BatchParser.SqlServerBatchParser : SqlBatchParser {
    private static IEnumerable`1<IRangeSearcher> _rangeSearchers;
    private static IEnumerable`1<ISpecialTokenSearcher> _specialTokenSearchers;
    public SqlServerBatchParser(string newLine);
    private static SqlServerBatchParser();
}
internal class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000Column : ColumnBase {
    public SqlServer2000Column(ITypeMap typeMap, IQuoter quoter);
    protected virtual string FormatDefaultValue(ColumnDefinition column);
    private static bool DefaultValueIsSqlFunction(object defaultValue);
    protected virtual string FormatIdentity(ColumnDefinition column);
    private static string GetIdentityString(ColumnDefinition column);
    public static string FormatDefaultValue(object defaultValue, IQuoter quoter);
    public static string GetDefaultConstraintName(string tableName, string columnName);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000Generator : GenericGenerator {
    private static SqlServer2000Quoter _quoter;
    private IEnumerable`1<string> _supportedAdditionalFeatures;
    public string RenameTable { get; }
    public string RenameColumn { get; }
    public string DropIndex { get; }
    public string AddColumn { get; }
    public string IdentityInsert { get; }
    public string CreateConstraint { get; }
    protected SqlServer2000Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    private static SqlServer2000Generator();
    public virtual string get_RenameTable();
    public virtual string get_RenameColumn();
    public virtual string get_DropIndex();
    public virtual string get_AddColumn();
    public virtual string get_IdentityInsert();
    public virtual string get_CreateConstraint();
    public virtual string GetClusterTypeString(CreateIndexExpression column);
    protected virtual string GetConstraintClusteringString(CreateConstraintExpression constraint);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    protected virtual void BuildDelete(DeleteColumnExpression expression, string columnName, StringBuilder builder);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    protected static bool IsUsingIdentityInsert(InsertDataExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual bool IsAdditionalFeatureSupported(string feature);
    [CompilerGeneratedAttribute]
private string <Generate>b__17_0(string x);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000Quoter : GenericQuoter {
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public string CloseQuoteEscapeString { get; }
    public string OpenQuoteEscapeString { get; }
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string get_CloseQuoteEscapeString();
    public virtual string get_OpenQuoteEscapeString();
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string FormatNationalString(string value);
    public virtual string FormatSystemMethods(SystemMethods value);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000TypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    public static int ImageCapacity;
    public static int DecimalCapacity;
    protected virtual void SetupTypeMaps();
}
internal class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005Column : SqlServer2000Column {
    public SqlServer2005Column(ITypeMap typeMap, IQuoter quoter);
    protected virtual string FormatRowGuid(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005DescriptionGenerator : GenericDescriptionGenerator {
    private static string TableDescriptionTemplate;
    private static string ColumnDescriptionTemplate;
    private static string RemoveTableDescriptionTemplate;
    private static string RemoveColumnDescriptionTemplate;
    private static string TableDescriptionVerificationTemplate;
    private static string ColumnDescriptionVerificationTemplate;
    public virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
    protected virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected virtual string GenerateColumnDescription(string schemaName, string tableName, string columnName, string columnDescription);
    private string GenerateTableDescriptionRemoval(string schemaName, string tableName);
    private string GenerateColumnDescriptionRemoval(string schemaName, string tableName, string columnName);
    private string FormatSchemaName(string schemaName);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005Generator : SqlServer2000Generator {
    private static HashSet`1<string> _supportedAdditionalFeatures;
    private static IQuoter _quoter;
    public string AddColumn { get; }
    public string CreateIndex { get; }
    public string DropIndex { get; }
    public string IdentityInsert { get; }
    public string CreateForeignKeyConstraint { get; }
    protected SqlServer2005Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    private static SqlServer2005Generator();
    public virtual string get_AddColumn();
    public virtual string get_CreateIndex();
    public virtual string get_DropIndex();
    public virtual string get_IdentityInsert();
    public virtual string get_CreateForeignKeyConstraint();
    public virtual string GetIncludeString(CreateIndexExpression column);
    public virtual string GetWithOptions(ISupportAdditionalFeatures expression);
    public virtual bool IsAdditionalFeatureSupported(string feature);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    private string ComposeStatements(string ddlStatement, IEnumerable`1<string> otherStatements);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005Quoter : SqlServer2000Quoter {
    public virtual string QuoteSchemaName(string schemaName);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005TypeMap : SqlServer2000TypeMap {
    protected virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2008Generator : SqlServer2005Generator {
    private static HashSet`1<string> _supportedAdditionalFeatures;
    private static IQuoter _quoter;
    protected SqlServer2008Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    private static SqlServer2008Generator();
    public virtual bool IsAdditionalFeatureSupported(string feature);
    public virtual string GetWithNullsDistinctString(IndexDefinition index);
    public virtual string Generate(CreateIndexExpression expression);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> <GetWithNullsDistinctString>g__GetNullsDistinct|5_0(IndexColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2008Quoter : SqlServer2005Quoter {
    public virtual string FormatSystemMethods(SystemMethods value);
}
internal class FluentMigrator.Runner.Generators.SqlServer.SqlServer2008TypeMap : SqlServer2005TypeMap {
    protected virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2012Generator : SqlServer2008Generator {
    protected SqlServer2012Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2014Generator : SqlServer2012Generator {
    protected SqlServer2014Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2016Generator : SqlServer2014Generator {
    protected SqlServer2016Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2000Processor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public SqlServer2000Processor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual void BeginTransaction();
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual void Execute(string template, Object[] args);
    protected virtual void Process(string sql);
    private static bool ContainsGo(string sql);
    private void ExecuteNonQuery(string sql);
    private void ExecuteBatchNonQuery(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2000ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2005ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2008ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2012ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2014ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2016ProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerDbFactory : DbFactoryBase {
    protected virtual DbProviderFactory CreateFactory();
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor : GenericProcessorBase {
    private static string SqlSchemaExists;
    private static string TABLE_EXISTS;
    private static string COLUMN_EXISTS;
    private static string CONSTRAINT_EXISTS;
    private static string INDEX_EXISTS;
    private static string SEQUENCES_EXISTS;
    private static string DEFAULTVALUE_EXISTS;
    [CompilerGeneratedAttribute]
private string <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuoter <Quoter>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public IQuoter Quoter { get; }
    public SqlServerProcessor(IEnumerable`1<string> databaseTypes, IDbConnection connection, GenericGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    [CompilerGeneratedAttribute]
public IQuoter get_Quoter();
    private static string SafeSchemaName(string schemaName);
    public virtual void BeginTransaction();
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    protected virtual void Process(string sql);
    private static bool ContainsGo(string sql);
    private void ExecuteNonQuery(string sql);
    private void ExecuteBatchNonQuery(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    public virtual bool IsForProvider(string provider);
}
