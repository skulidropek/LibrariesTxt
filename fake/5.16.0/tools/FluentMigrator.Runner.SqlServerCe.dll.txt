internal class FluentMigrator.Runner.Generators.SqlServer.SqlServerCeColumn : SqlServer2000Column {
    public SqlServerCeColumn(ITypeMap typeMap, IQuoter quoter);
    protected virtual string FormatNullable(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServerCeGenerator : SqlServer2000Generator {
    private static IQuoter _quoter;
    public string InsertData { get; }
    private static SqlServerCeGenerator();
    public virtual string get_InsertData();
    public virtual string GetClusterTypeString(CreateIndexExpression column);
    protected virtual string GetConstraintClusteringString(CreateConstraintExpression constraint);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(InsertDataExpression expression);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServerCeTypeMap : TypeMapBase {
    public static int UnicodeStringCapacity;
    public static int ImageCapacity;
    public static int BinaryCapacity;
    public static int DecimalCapacity;
    protected virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerCeDbFactory : ReflectionBasedDbFactory {
    public virtual IDbCommand CreateCommand(string commandText, IDbConnection connection, IDbTransaction transaction, IMigrationProcessorOptions options);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerCeProcessor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public SqlServerCeProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    protected virtual void Process(string sql);
    private IEnumerable`1<string> SplitIntoSingleStatements(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerCeProcessorFactory : MigrationProcessorFactory {
    public virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
}
