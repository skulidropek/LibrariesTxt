public abstract class FluentMigrator.Runner.Announcers.Announcer : object {
    [CompilerGeneratedAttribute]
private bool <ShowSql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowElapsedTime>k__BackingField;
    public bool ShowSql { get; public set; }
    public bool ShowElapsedTime { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_ShowSql();
    [CompilerGeneratedAttribute]
public virtual void set_ShowSql(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ShowElapsedTime();
    [CompilerGeneratedAttribute]
public virtual void set_ShowElapsedTime(bool value);
    public virtual void Heading(string message);
    public virtual void Say(string message);
    public virtual void Emphasize(string message);
    public virtual void Sql(string sql);
    public virtual void ElapsedTime(TimeSpan timeSpan);
    public virtual void Error(Exception exception);
    public virtual void Error(string message);
    public abstract virtual void Write(string message, bool isNotSql);
}
public class FluentMigrator.Runner.Announcers.CompositeAnnouncer : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAnnouncer> <Announcers>k__BackingField;
    public IEnumerable`1<IAnnouncer> Announcers { get; }
    public CompositeAnnouncer(IAnnouncer[] announcers);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IAnnouncer> get_Announcers();
    public sealed virtual void Heading(string message);
    public sealed virtual void Say(string message);
    public sealed virtual void Emphasize(string message);
    public sealed virtual void Sql(string sql);
    public sealed virtual void ElapsedTime(TimeSpan timeSpan);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(Exception exception);
    [ObsoleteAttribute]
public sealed virtual void Write(string message, bool isNotSql);
    private void Each(Action`1<IAnnouncer> action);
}
public class FluentMigrator.Runner.Announcers.ConsoleAnnouncer : Announcer {
    public void Header();
    public void HorizontalRule();
    public virtual void Heading(string message);
    public virtual void Say(string message);
    public virtual void Emphasize(string message);
    public virtual void ElapsedTime(TimeSpan timeSpan);
    public virtual void Error(string message);
    public virtual void Write(string message, bool isNotSql);
}
public class FluentMigrator.Runner.Announcers.NullAnnouncer : Announcer {
    public virtual void Write(string message, bool isNotSql);
}
public class FluentMigrator.Runner.Announcers.TextWriterAnnouncer : Announcer {
    private Action`1<string> write;
    public TextWriterAnnouncer(TextWriter writer);
    public TextWriterAnnouncer(Action`1<string> write);
    public virtual void Heading(string message);
    public virtual void ElapsedTime(TimeSpan timeSpan);
    public virtual void Write(string message, bool isNotSql);
}
public class FluentMigrator.Runner.Announcers.TextWriterWithGoAnnouncer : TextWriterAnnouncer {
    public TextWriterWithGoAnnouncer(TextWriter writer);
    public TextWriterWithGoAnnouncer(Action`1<string> write);
    public virtual void Sql(string sql);
}
public class FluentMigrator.Runner.ConnectionlessVersionLoader : object {
    private IConventionSet _conventionSet;
    private bool _versionsLoaded;
    [CompilerGeneratedAttribute]
private IMigrationProcessor <Processor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionSchemaMigration <VersionSchemaMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionUniqueMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionDescriptionMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionInfo <VersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionTableMetaData <VersionTableMetaData>k__BackingField;
    private IMigrationProcessor Processor { get; private set; }
    protected IAssemblyCollection Assemblies { get; protected set; }
    public IMigrationRunnerConventions Conventions { get; public set; }
    public long StartVersion { get; public set; }
    public long TargetVersion { get; public set; }
    public VersionSchemaMigration VersionSchemaMigration { get; }
    public IMigration VersionMigration { get; }
    public IMigration VersionUniqueMigration { get; }
    public IMigration VersionDescriptionMigration { get; }
    public IMigrationRunner Runner { get; public set; }
    public IVersionInfo VersionInfo { get; public set; }
    public IVersionTableMetaData VersionTableMetaData { get; public set; }
    public bool AlreadyCreatedVersionSchema { get; }
    public bool AlreadyCreatedVersionTable { get; }
    public ConnectionlessVersionLoader(IMigrationRunner runner, IAssemblyCollection assemblies, IConventionSet conventionSet, IMigrationRunnerConventions conventions, long startVersion, long targetVersion, IVersionTableMetaData versionTableMetaData);
    [CompilerGeneratedAttribute]
private IMigrationProcessor get_Processor();
    [CompilerGeneratedAttribute]
private void set_Processor(IMigrationProcessor value);
    [CompilerGeneratedAttribute]
protected IAssemblyCollection get_Assemblies();
    [CompilerGeneratedAttribute]
protected void set_Assemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
public void set_Conventions(IMigrationRunnerConventions value);
    [CompilerGeneratedAttribute]
public long get_StartVersion();
    [CompilerGeneratedAttribute]
public void set_StartVersion(long value);
    [CompilerGeneratedAttribute]
public long get_TargetVersion();
    [CompilerGeneratedAttribute]
public void set_TargetVersion(long value);
    [CompilerGeneratedAttribute]
public VersionSchemaMigration get_VersionSchemaMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionUniqueMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionDescriptionMigration();
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationRunner get_Runner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Runner(IMigrationRunner value);
    [CompilerGeneratedAttribute]
public sealed virtual IVersionInfo get_VersionInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VersionInfo(IVersionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IVersionTableMetaData get_VersionTableMetaData();
    [CompilerGeneratedAttribute]
public void set_VersionTableMetaData(IVersionTableMetaData value);
    public sealed virtual bool get_AlreadyCreatedVersionSchema();
    public sealed virtual bool get_AlreadyCreatedVersionTable();
    public sealed virtual void DeleteVersion(long version);
    public sealed virtual IVersionTableMetaData GetVersionTableMetaData();
    public sealed virtual void LoadVersionInfo();
    public sealed virtual void RemoveVersionTable();
    public sealed virtual void UpdateVersionInfo(long version);
    public sealed virtual void UpdateVersionInfo(long version, string description);
    protected virtual InsertionDataDefinition CreateVersionInfoInsertionData(long version, string description);
    [CompilerGeneratedAttribute]
private bool <GetVersionTableMetaData>b__52_0(Type t);
}
public class FluentMigrator.Runner.DefaultConventionSet : object {
    [CompilerGeneratedAttribute]
private IRootPathConvention <RootPathConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultSchemaConvention <SchemaConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IColumnsConvention> <ColumnsConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IConstraintConvention> <ConstraintConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyConvention> <ForeignKeyConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexConvention> <IndexConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISequenceConvention> <SequenceConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAutoNameConvention> <AutoNameConventions>k__BackingField;
    public IRootPathConvention RootPathConvention { get; }
    public DefaultSchemaConvention SchemaConvention { get; }
    public IList`1<IColumnsConvention> ColumnsConventions { get; }
    public IList`1<IConstraintConvention> ConstraintConventions { get; }
    public IList`1<IForeignKeyConvention> ForeignKeyConventions { get; }
    public IList`1<IIndexConvention> IndexConventions { get; }
    public IList`1<ISequenceConvention> SequenceConventions { get; }
    public IList`1<IAutoNameConvention> AutoNameConventions { get; }
    public DefaultConventionSet(IRunnerContext runnerContext);
    [CompilerGeneratedAttribute]
public sealed virtual IRootPathConvention get_RootPathConvention();
    [CompilerGeneratedAttribute]
public sealed virtual DefaultSchemaConvention get_SchemaConvention();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IColumnsConvention> get_ColumnsConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IConstraintConvention> get_ConstraintConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IForeignKeyConvention> get_ForeignKeyConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IIndexConvention> get_IndexConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ISequenceConvention> get_SequenceConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAutoNameConvention> get_AutoNameConventions();
}
public class FluentMigrator.Runner.DefaultMigrationInformationLoader : object {
    private SortedList`2<long, IMigrationInfo> _migrationInfos;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadNestedNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TagsToMatch>k__BackingField;
    public IMigrationRunnerConventions Conventions { get; private set; }
    public IAssemblyCollection Assemblies { get; private set; }
    public string Namespace { get; private set; }
    public bool LoadNestedNamespaces { get; private set; }
    public IEnumerable`1<string> TagsToMatch { get; private set; }
    public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, Assembly assembly, string namespace, IEnumerable`1<string> tagsToMatch);
    public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, IAssemblyCollection assemblies, string namespace, IEnumerable`1<string> tagsToMatch);
    public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, Assembly assembly, string namespace, bool loadNestedNamespaces, IEnumerable`1<string> tagsToMatch);
    public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, IAssemblyCollection assemblies, string namespace, bool loadNestedNamespaces, IEnumerable`1<string> tagsToMatch);
    [CompilerGeneratedAttribute]
public IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
private void set_Conventions(IMigrationRunnerConventions value);
    [CompilerGeneratedAttribute]
public IAssemblyCollection get_Assemblies();
    [CompilerGeneratedAttribute]
private void set_Assemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public bool get_LoadNestedNamespaces();
    [CompilerGeneratedAttribute]
private void set_LoadNestedNamespaces(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TagsToMatch();
    [CompilerGeneratedAttribute]
private void set_TagsToMatch(IEnumerable`1<string> value);
    public sealed virtual SortedList`2<long, IMigrationInfo> LoadMigrations();
    private IEnumerable`1<Type> FindMigrationTypes();
    [CompilerGeneratedAttribute]
private bool <FindMigrationTypes>b__26_0(Type t);
    [CompilerGeneratedAttribute]
private bool <FindMigrationTypes>b__26_1(Type t);
}
public class FluentMigrator.Runner.Exceptions.InvalidMigrationException : RunnerException {
    private IMigration _migration;
    private string _errors;
    public string Message { get; }
    public InvalidMigrationException(IMigration migration, string errors);
    public virtual string get_Message();
}
public class FluentMigrator.Runner.Exceptions.MissingMigrationsException : RunnerException {
    public MissingMigrationsException(string message);
    public MissingMigrationsException(string message, Exception innerException);
    public MissingMigrationsException(SerializationInfo info, StreamingContext context);
}
public class FluentMigrator.Runner.Exceptions.RunnerException : FluentMigratorException {
    protected RunnerException(string message);
    protected RunnerException(string message, Exception innerException);
    protected RunnerException(SerializationInfo info, StreamingContext context);
}
public class FluentMigrator.Runner.Exceptions.VersionOrderInvalidException : RunnerException {
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> <InvalidMigrations>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<long> <InvalidVersions>k__BackingField;
    public IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> InvalidMigrations { get; public set; }
    public IEnumerable`1<long> InvalidVersions { get; private set; }
    public string Message { get; }
    public VersionOrderInvalidException(IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> invalidMigrations);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> get_InvalidMigrations();
    [CompilerGeneratedAttribute]
public void set_InvalidMigrations(IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<long> get_InvalidVersions();
    [CompilerGeneratedAttribute]
private void set_InvalidVersions(IEnumerable`1<long> value);
    public virtual string get_Message();
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Extensions.TagsExtensions : object {
    [ExtensionAttribute]
public static List`1<string> ToTags(string tags);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool Is(Type type);
    [ExtensionAttribute]
public static bool IsConcrete(Type type);
}
public class FluentMigrator.Runner.Generators.MigrationGeneratorFactory : object {
    private static IDictionary`2<string, IMigrationGenerator> _migrationGenerators;
    private static MigrationGeneratorFactory();
    public virtual IMigrationGenerator GetGenerator(string name);
    public string ListAvailableGeneratorTypes();
}
public interface FluentMigrator.Runner.IMaintenanceLoader {
    public abstract virtual IList`1<IMigrationInfo> LoadMaintenance(MigrationStage stage);
}
public interface FluentMigrator.Runner.IMigrationInformationLoader {
    public abstract virtual SortedList`2<long, IMigrationInfo> LoadMigrations();
}
public interface FluentMigrator.Runner.IMigrationRunner {
    public IMigrationProcessor Processor { get; }
    public IMigrationInformationLoader MigrationLoader { get; public set; }
    public IAssemblyCollection MigrationAssemblies { get; }
    public IRunnerContext RunnerContext { get; }
    public abstract virtual IMigrationProcessor get_Processor();
    public abstract virtual IMigrationInformationLoader get_MigrationLoader();
    public abstract virtual void set_MigrationLoader(IMigrationInformationLoader value);
    public abstract virtual IAssemblyCollection get_MigrationAssemblies();
    public abstract virtual IRunnerContext get_RunnerContext();
    public abstract virtual void Up(IMigration migration);
    public abstract virtual void Down(IMigration migration);
    public abstract virtual void MigrateUp();
    public abstract virtual void MigrateUp(long version);
    public abstract virtual void Rollback(int steps);
    public abstract virtual void RollbackToVersion(long version);
    public abstract virtual void MigrateDown(long version);
    public abstract virtual void ValidateVersionOrder();
    public abstract virtual void ListMigrations();
    public abstract virtual bool HasMigrationsToApplyUp(Nullable`1<long> version);
    public abstract virtual bool HasMigrationsToApplyDown(long version);
    public abstract virtual bool HasMigrationsToApplyRollback();
}
public interface FluentMigrator.Runner.IMigrationRunnerConventions {
    public Func`2<Type, bool> TypeIsMigration { get; }
    public Func`2<Type, bool> TypeIsProfile { get; }
    public Func`2<Type, Nullable`1<MigrationStage>> GetMaintenanceStage { get; }
    public Func`2<Type, bool> TypeIsVersionTableMetaData { get; }
    public Func`2<Type, IMigrationInfo> GetMigrationInfo { get; }
    public Func`2<Type, bool> TypeHasTags { get; }
    public Func`3<Type, IEnumerable`1<string>, bool> TypeHasMatchingTags { get; }
    public abstract virtual Func`2<Type, bool> get_TypeIsMigration();
    public abstract virtual Func`2<Type, bool> get_TypeIsProfile();
    public abstract virtual Func`2<Type, Nullable`1<MigrationStage>> get_GetMaintenanceStage();
    public abstract virtual Func`2<Type, bool> get_TypeIsVersionTableMetaData();
    public abstract virtual Func`2<Type, IMigrationInfo> get_GetMigrationInfo();
    public abstract virtual Func`2<Type, bool> get_TypeHasTags();
    public abstract virtual Func`3<Type, IEnumerable`1<string>, bool> get_TypeHasMatchingTags();
}
public interface FluentMigrator.Runner.IMigrationScope {
    public bool IsActive { get; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void Complete();
    public abstract virtual void Cancel();
}
public interface FluentMigrator.Runner.IMigrationScopeStarter {
    public abstract virtual IMigrationScope BeginScope();
}
public class FluentMigrator.Runner.Infrastructure.DefaultMigrationRunnerConventions : object {
    [CompilerGeneratedAttribute]
private static DefaultMigrationRunnerConventions <Instance>k__BackingField;
    public static DefaultMigrationRunnerConventions Instance { get; }
    public Func`2<Type, bool> TypeIsMigration { get; }
    public Func`2<Type, bool> TypeIsProfile { get; }
    public Func`2<Type, Nullable`1<MigrationStage>> GetMaintenanceStage { get; }
    public Func`2<Type, bool> TypeIsVersionTableMetaData { get; }
    public Func`2<Type, IMigrationInfo> GetMigrationInfo { get; }
    public Func`2<Type, bool> TypeHasTags { get; }
    public Func`3<Type, IEnumerable`1<string>, bool> TypeHasMatchingTags { get; }
    private static DefaultMigrationRunnerConventions();
    [CompilerGeneratedAttribute]
public static DefaultMigrationRunnerConventions get_Instance();
    public sealed virtual Func`2<Type, bool> get_TypeIsMigration();
    public sealed virtual Func`2<Type, bool> get_TypeIsProfile();
    public sealed virtual Func`2<Type, Nullable`1<MigrationStage>> get_GetMaintenanceStage();
    public sealed virtual Func`2<Type, bool> get_TypeIsVersionTableMetaData();
    public sealed virtual Func`2<Type, IMigrationInfo> get_GetMigrationInfo();
    public sealed virtual Func`2<Type, bool> get_TypeHasTags();
    public sealed virtual Func`3<Type, IEnumerable`1<string>, bool> get_TypeHasMatchingTags();
    private static bool TypeIsMigrationImpl(Type type);
    private static Nullable`1<MigrationStage> GetMaintenanceStageImpl(Type type);
    private static bool TypeIsProfileImpl(Type type);
    private static bool TypeIsVersionTableMetaDataImpl(Type type);
    private static IMigrationInfo GetMigrationInfoForImpl(Type migrationType);
    private static bool TypeHasTagsImpl(Type type);
    private static bool TypeHasMatchingTagsImpl(Type type, IEnumerable`1<string> tagsToMatch);
}
public class FluentMigrator.Runner.Initialization.AssemblyLoader.AssemblyLoaderFactory : object {
    public virtual IAssemblyLoader GetAssemblyLoader(string name);
}
public class FluentMigrator.Runner.Initialization.AssemblyLoader.AssemblyLoaderFromFile : object {
    private string name;
    public AssemblyLoaderFromFile(string name);
    public sealed virtual Assembly Load();
}
public class FluentMigrator.Runner.Initialization.AssemblyLoader.AssemblyLoaderFromName : object {
    private string name;
    public AssemblyLoaderFromName(string name);
    public sealed virtual Assembly Load();
}
public interface FluentMigrator.Runner.Initialization.AssemblyLoader.IAssemblyLoader {
    public abstract virtual Assembly Load();
}
public class FluentMigrator.Runner.Initialization.DefaultConnectionStringProvider : object {
    private object _syncRoot;
    private string _connectionString;
    public sealed virtual string GetConnectionString(IAnnouncer announcer, string connection, string configPath, string assemblyLocation, string database);
    private static string GetConnectionStringFromManager(IAnnouncer announcer, string connection, string configPath, string assemblyLocation, string database);
}
public interface FluentMigrator.Runner.Initialization.IConnectionStringProvider {
    public abstract virtual string GetConnectionString(IAnnouncer announcer, string connection, string configPath, string assemblyLocation, string database);
}
public interface FluentMigrator.Runner.Initialization.IRunnerContext {
    public string Database { get; public set; }
    public string Connection { get; public set; }
    public String[] Targets { get; public set; }
    public bool PreviewOnly { get; public set; }
    public string Namespace { get; public set; }
    public bool NestedNamespaces { get; public set; }
    public string Task { get; public set; }
    public long Version { get; public set; }
    public long StartVersion { get; public set; }
    public bool NoConnection { get; public set; }
    public int Steps { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string Profile { get; public set; }
    public IAnnouncer Announcer { get; }
    public IStopWatch StopWatch { get; }
    public Nullable`1<int> Timeout { get; public set; }
    public string ConnectionStringConfigPath { get; public set; }
    public IEnumerable`1<string> Tags { get; public set; }
    public string ProviderSwitches { get; public set; }
    public bool TransactionPerSession { get; public set; }
    public bool AllowBreakingChange { get; public set; }
    public object ApplicationContext { get; public set; }
    public string DefaultSchemaName { get; public set; }
    public abstract virtual string get_Database();
    public abstract virtual void set_Database(string value);
    public abstract virtual string get_Connection();
    public abstract virtual void set_Connection(string value);
    public abstract virtual String[] get_Targets();
    public abstract virtual void set_Targets(String[] value);
    public abstract virtual bool get_PreviewOnly();
    public abstract virtual void set_PreviewOnly(bool value);
    public abstract virtual string get_Namespace();
    public abstract virtual void set_Namespace(string value);
    public abstract virtual bool get_NestedNamespaces();
    public abstract virtual void set_NestedNamespaces(bool value);
    public abstract virtual string get_Task();
    public abstract virtual void set_Task(string value);
    public abstract virtual long get_Version();
    public abstract virtual void set_Version(long value);
    public abstract virtual long get_StartVersion();
    public abstract virtual void set_StartVersion(long value);
    public abstract virtual bool get_NoConnection();
    public abstract virtual void set_NoConnection(bool value);
    public abstract virtual int get_Steps();
    public abstract virtual void set_Steps(int value);
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual void set_WorkingDirectory(string value);
    public abstract virtual string get_Profile();
    public abstract virtual void set_Profile(string value);
    public abstract virtual IAnnouncer get_Announcer();
    public abstract virtual IStopWatch get_StopWatch();
    public abstract virtual Nullable`1<int> get_Timeout();
    public abstract virtual void set_Timeout(Nullable`1<int> value);
    public abstract virtual string get_ConnectionStringConfigPath();
    public abstract virtual void set_ConnectionStringConfigPath(string value);
    public abstract virtual IEnumerable`1<string> get_Tags();
    public abstract virtual void set_Tags(IEnumerable`1<string> value);
    public abstract virtual string get_ProviderSwitches();
    public abstract virtual void set_ProviderSwitches(string value);
    public abstract virtual bool get_TransactionPerSession();
    public abstract virtual void set_TransactionPerSession(bool value);
    public abstract virtual bool get_AllowBreakingChange();
    public abstract virtual void set_AllowBreakingChange(bool value);
    public abstract virtual object get_ApplicationContext();
    public abstract virtual void set_ApplicationContext(object value);
    public abstract virtual string get_DefaultSchemaName();
    public abstract virtual void set_DefaultSchemaName(string value);
}
internal class FluentMigrator.Runner.Initialization.NetFramework.ConnectionStringManager : object {
    private IAnnouncer announcer;
    private string assemblyLocation;
    private INetConfigManager configManager;
    private string configPath;
    private string database;
    private string configFile;
    private string connection;
    private Func`1<string> machineNameProvider;
    private bool notUsingConfig;
    private static Regex matchPwd;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    public string ConnectionString { get; private set; }
    public Func`1<string> MachineNameProvider { get; public set; }
    public ConnectionStringManager(INetConfigManager configManager, IAnnouncer announcer, string connection, string configPath, string assemblyLocation, string database);
    private static ConnectionStringManager();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    public Func`1<string> get_MachineNameProvider();
    public void set_MachineNameProvider(Func`1<string> value);
    public void LoadConnectionString();
    private void LoadConnectionStringFromConfigurationFile(Configuration configurationFile);
    private void ReadConnectionString(ConnectionStringSettings connectionSetting, string configurationFile);
    private void OutputResults();
}
internal interface FluentMigrator.Runner.Initialization.NetFramework.INetConfigManager {
    public abstract virtual Configuration LoadFromFile(string path);
    public abstract virtual Configuration LoadFromMachineConfiguration();
}
internal class FluentMigrator.Runner.Initialization.NetFramework.NetConfigManager : object {
    public sealed virtual Configuration LoadFromFile(string path);
    public sealed virtual Configuration LoadFromMachineConfiguration();
}
public class FluentMigrator.Runner.Initialization.RunnerContext : object {
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreviewOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NestedNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionStringConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransactionPerSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBreakingChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderSwitches>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnnouncer <Announcer>k__BackingField;
    [CompilerGeneratedAttribute]
private IStopWatch <StopWatch>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ApplicationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSchemaName>k__BackingField;
    public string Database { get; public set; }
    public string Connection { get; public set; }
    public String[] Targets { get; public set; }
    public bool PreviewOnly { get; public set; }
    public string Namespace { get; public set; }
    public bool NestedNamespaces { get; public set; }
    public string Task { get; public set; }
    public long Version { get; public set; }
    public long StartVersion { get; public set; }
    public bool NoConnection { get; public set; }
    public int Steps { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string Profile { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public string ConnectionStringConfigPath { get; public set; }
    public IEnumerable`1<string> Tags { get; public set; }
    public bool TransactionPerSession { get; public set; }
    public bool AllowBreakingChange { get; public set; }
    public string ProviderSwitches { get; public set; }
    public IAnnouncer Announcer { get; }
    public IStopWatch StopWatch { get; }
    public object ApplicationContext { get; public set; }
    public string DefaultSchemaName { get; public set; }
    public RunnerContext(IAnnouncer announcer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Database();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Database(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connection(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Targets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Targets(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreviewOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreviewOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NestedNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NestedNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Task();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Task(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_StartVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartVersion(long value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoConnection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoConnection(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Steps();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Steps(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Profile();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Profile(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionStringConfigPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionStringConfigPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TransactionPerSession();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionPerSession(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowBreakingChange();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowBreakingChange(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderSwitches();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProviderSwitches(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IAnnouncer get_Announcer();
    [CompilerGeneratedAttribute]
public sealed virtual IStopWatch get_StopWatch();
    [CompilerGeneratedAttribute]
public sealed virtual object get_ApplicationContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationContext(object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultSchemaName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultSchemaName(string value);
}
public class FluentMigrator.Runner.Initialization.TaskExecutor : object {
    [CompilerGeneratedAttribute]
private IMigrationRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunnerContext <RunnerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyLoaderFactory <AssemblyLoaderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationProcessorFactoryProvider <ProcessorFactoryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionStringProvider <ConnectionStringProvider>k__BackingField;
    protected IMigrationRunner Runner { get; protected set; }
    private IRunnerContext RunnerContext { get; private set; }
    private AssemblyLoaderFactory AssemblyLoaderFactory { get; private set; }
    private MigrationProcessorFactoryProvider ProcessorFactoryProvider { get; private set; }
    protected IConnectionStringProvider ConnectionStringProvider { get; }
    public TaskExecutor(IRunnerContext runnerContext);
    public TaskExecutor(IRunnerContext runnerContext, IConnectionStringProvider connectionStringProvider, AssemblyLoaderFactory assemblyLoaderFactory, MigrationProcessorFactoryProvider processorFactoryProvider);
    [CompilerGeneratedAttribute]
protected IMigrationRunner get_Runner();
    [CompilerGeneratedAttribute]
protected void set_Runner(IMigrationRunner value);
    [CompilerGeneratedAttribute]
private IRunnerContext get_RunnerContext();
    [CompilerGeneratedAttribute]
private void set_RunnerContext(IRunnerContext value);
    [CompilerGeneratedAttribute]
private AssemblyLoaderFactory get_AssemblyLoaderFactory();
    [CompilerGeneratedAttribute]
private void set_AssemblyLoaderFactory(AssemblyLoaderFactory value);
    [CompilerGeneratedAttribute]
private MigrationProcessorFactoryProvider get_ProcessorFactoryProvider();
    [CompilerGeneratedAttribute]
private void set_ProcessorFactoryProvider(MigrationProcessorFactoryProvider value);
    [CompilerGeneratedAttribute]
protected IConnectionStringProvider get_ConnectionStringProvider();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Initialization.TaskExecutor/<GetTargetAssemblies>d__21")]
protected virtual IEnumerable`1<Assembly> GetTargetAssemblies();
    protected virtual void Initialize();
    public void Execute();
    public bool HasMigrationsToApply();
    private IMigrationProcessor InitializeConnectionlessProcessor();
    private IMigrationProcessor InitializeProcessor(IAssemblyCollection assemblyCollection);
    private string LoadConnectionString(IAssemblyCollection assemblyCollection);
}
public interface FluentMigrator.Runner.IProfileLoader {
    public abstract virtual void ApplyProfiles();
    public abstract virtual IEnumerable`1<IMigration> FindProfilesIn(IAssemblyCollection assemblies, string profile);
}
public interface FluentMigrator.Runner.IStopWatch {
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual TimeSpan ElapsedTime();
    public abstract virtual TimeSpan Time(Action action);
}
public interface FluentMigrator.Runner.IVersionLoader {
    public bool AlreadyCreatedVersionSchema { get; }
    public bool AlreadyCreatedVersionTable { get; }
    public IMigrationRunner Runner { get; public set; }
    public IVersionInfo VersionInfo { get; public set; }
    public IVersionTableMetaData VersionTableMetaData { get; }
    public abstract virtual bool get_AlreadyCreatedVersionSchema();
    public abstract virtual bool get_AlreadyCreatedVersionTable();
    public abstract virtual void DeleteVersion(long version);
    public abstract virtual IVersionTableMetaData GetVersionTableMetaData();
    public abstract virtual void LoadVersionInfo();
    public abstract virtual void RemoveVersionTable();
    public abstract virtual IMigrationRunner get_Runner();
    public abstract virtual void set_Runner(IMigrationRunner value);
    public abstract virtual void UpdateVersionInfo(long version);
    public abstract virtual void UpdateVersionInfo(long version, string description);
    public abstract virtual IVersionInfo get_VersionInfo();
    public abstract virtual void set_VersionInfo(IVersionInfo value);
    public abstract virtual IVersionTableMetaData get_VersionTableMetaData();
}
public class FluentMigrator.Runner.MaintenanceLoader : object {
    private IDictionary`2<MigrationStage, IList`1<IMigration>> _maintenance;
    public MaintenanceLoader(IAssemblyCollection assemblyCollection, IEnumerable`1<string> tags, IMigrationRunnerConventions conventions);
    public sealed virtual IList`1<IMigrationInfo> LoadMaintenance(MigrationStage stage);
}
public class FluentMigrator.Runner.MigrationRunner : object {
    private IAssemblyCollection _migrationAssemblies;
    private IAnnouncer _announcer;
    private IStopWatch _stopWatch;
    private bool _alreadyOutputPreviewOnlyModeWarning;
    private MigrationValidator _migrationValidator;
    private MigrationScopeHandler _migrationScopeHandler;
    [CompilerGeneratedAttribute]
private bool <SilentlyFail>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationProcessor <Processor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationInformationLoader <MigrationLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IProfileLoader <ProfileLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IMaintenanceLoader <MaintenanceLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Exception> <CaughtExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunnerContext <RunnerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionLoader <VersionLoader>k__BackingField;
    public bool TransactionPerSession { get; }
    public bool SilentlyFail { get; public set; }
    public IMigrationProcessor Processor { get; private set; }
    public IMigrationInformationLoader MigrationLoader { get; public set; }
    public IProfileLoader ProfileLoader { get; public set; }
    public IMaintenanceLoader MaintenanceLoader { get; public set; }
    public IMigrationRunnerConventions Conventions { get; private set; }
    public IList`1<Exception> CaughtExceptions { get; private set; }
    public IMigrationScope CurrentScope { get; public set; }
    public IRunnerContext RunnerContext { get; private set; }
    public IVersionLoader VersionLoader { get; public set; }
    public IAssemblyCollection MigrationAssemblies { get; }
    public MigrationRunner(Assembly assembly, IRunnerContext runnerContext, IMigrationProcessor processor);
    public MigrationRunner(IAssemblyCollection assemblies, IRunnerContext runnerContext, IMigrationProcessor processor, IVersionTableMetaData versionTableMetaData, IMigrationRunnerConventions migrationRunnerConventions);
    public bool get_TransactionPerSession();
    [CompilerGeneratedAttribute]
public bool get_SilentlyFail();
    [CompilerGeneratedAttribute]
public void set_SilentlyFail(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationProcessor get_Processor();
    [CompilerGeneratedAttribute]
private void set_Processor(IMigrationProcessor value);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationInformationLoader get_MigrationLoader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MigrationLoader(IMigrationInformationLoader value);
    [CompilerGeneratedAttribute]
public IProfileLoader get_ProfileLoader();
    [CompilerGeneratedAttribute]
public void set_ProfileLoader(IProfileLoader value);
    [CompilerGeneratedAttribute]
public IMaintenanceLoader get_MaintenanceLoader();
    [CompilerGeneratedAttribute]
public void set_MaintenanceLoader(IMaintenanceLoader value);
    [CompilerGeneratedAttribute]
public IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
private void set_Conventions(IMigrationRunnerConventions value);
    [CompilerGeneratedAttribute]
public IList`1<Exception> get_CaughtExceptions();
    [CompilerGeneratedAttribute]
private void set_CaughtExceptions(IList`1<Exception> value);
    public IMigrationScope get_CurrentScope();
    public void set_CurrentScope(IMigrationScope value);
    [CompilerGeneratedAttribute]
public sealed virtual IRunnerContext get_RunnerContext();
    [CompilerGeneratedAttribute]
private void set_RunnerContext(IRunnerContext value);
    [CompilerGeneratedAttribute]
public IVersionLoader get_VersionLoader();
    [CompilerGeneratedAttribute]
public void set_VersionLoader(IVersionLoader value);
    public void ApplyProfiles();
    public void ApplyMaintenance(MigrationStage stage, bool useAutomaticTransactionManagement);
    public sealed virtual void MigrateUp();
    public void MigrateUp(bool useAutomaticTransactionManagement);
    public sealed virtual void MigrateUp(long targetVersion);
    public void MigrateUp(long targetVersion, bool useAutomaticTransactionManagement);
    private IMigrationRunnerConventions GetMigrationRunnerConventions(IRunnerContext runnerContext);
    private IEnumerable`1<IMigrationInfo> GetUpMigrationsToApply(long version);
    private bool IsMigrationStepNeededForUpMigration(long versionOfMigration, long targetVersion);
    public sealed virtual void MigrateDown(long targetVersion);
    public void MigrateDown(long targetVersion, bool useAutomaticTransactionManagement);
    private IEnumerable`1<IMigrationInfo> GetDownMigrationsToApply(long targetVersion);
    private bool IsMigrationStepNeededForDownMigration(long versionOfMigration, long targetVersion);
    public sealed virtual bool HasMigrationsToApplyUp(Nullable`1<long> version);
    public sealed virtual bool HasMigrationsToApplyDown(long version);
    public sealed virtual bool HasMigrationsToApplyRollback();
    public virtual void ApplyMigrationUp(IMigrationInfo migrationInfo, bool useTransaction);
    public virtual void ApplyMigrationDown(IMigrationInfo migrationInfo, bool useTransaction);
    public sealed virtual void Rollback(int steps);
    public void Rollback(int steps, bool useAutomaticTransactionManagement);
    public sealed virtual void RollbackToVersion(long version);
    public void RollbackToVersion(long version, bool useAutomaticTransactionManagement);
    public sealed virtual IAssemblyCollection get_MigrationAssemblies();
    public sealed virtual void Up(IMigration migration);
    private void ExecuteMigration(IMigration migration, Action`2<IMigration, IMigrationContext> getExpressions);
    public sealed virtual void Down(IMigration migration);
    protected void ExecuteExpressions(ICollection`1<IMigrationExpression> expressions);
    private void AnnounceTime(string message, Action action);
    public sealed virtual void ValidateVersionOrder();
    public sealed virtual void ListMigrations();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.MigrationRunner/<GetStatusStrings>d__80")]
private IEnumerable`1<string> GetStatusStrings(MigrationStatus status);
    private MigrationStatus GetStatus(KeyValuePair`2<long, IMigrationInfo> migration, long currentVersion);
    private bool MigrationVersionLessThanGreatestAppliedMigration(long version);
    public sealed virtual IMigrationScope BeginScope();
    [CompilerGeneratedAttribute]
private bool <HasMigrationsToApplyUp>b__62_0(KeyValuePair`2<long, IMigrationInfo> mi);
    [CompilerGeneratedAttribute]
private bool <ValidateVersionOrder>b__78_0(KeyValuePair`2<long, IMigrationInfo> kvp);
}
public class FluentMigrator.Runner.MigrationRunnerConventions : object {
    private static IMigrationRunnerConventions _default;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeIsMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeIsProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, Nullable`1<MigrationStage>> <GetMaintenanceStage>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeIsVersionTableMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, IMigrationInfo> <GetMigrationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeHasTags>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Type, IEnumerable`1<string>, bool> <TypeHasMatchingTags>k__BackingField;
    public Func`2<Type, bool> TypeIsMigration { get; public set; }
    public Func`2<Type, bool> TypeIsProfile { get; public set; }
    public Func`2<Type, Nullable`1<MigrationStage>> GetMaintenanceStage { get; public set; }
    public Func`2<Type, bool> TypeIsVersionTableMetaData { get; public set; }
    public Func`2<Type, IMigrationInfo> GetMigrationInfo { get; public set; }
    public Func`2<Type, bool> TypeHasTags { get; public set; }
    public Func`3<Type, IEnumerable`1<string>, bool> TypeHasMatchingTags { get; public set; }
    private static MigrationRunnerConventions();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeIsMigration();
    [CompilerGeneratedAttribute]
public void set_TypeIsMigration(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeIsProfile();
    [CompilerGeneratedAttribute]
public void set_TypeIsProfile(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, Nullable`1<MigrationStage>> get_GetMaintenanceStage();
    [CompilerGeneratedAttribute]
public void set_GetMaintenanceStage(Func`2<Type, Nullable`1<MigrationStage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeIsVersionTableMetaData();
    [CompilerGeneratedAttribute]
public void set_TypeIsVersionTableMetaData(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, IMigrationInfo> get_GetMigrationInfo();
    [CompilerGeneratedAttribute]
public void set_GetMigrationInfo(Func`2<Type, IMigrationInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeHasTags();
    [CompilerGeneratedAttribute]
public void set_TypeHasTags(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<Type, IEnumerable`1<string>, bool> get_TypeHasMatchingTags();
    [CompilerGeneratedAttribute]
public void set_TypeHasMatchingTags(Func`3<Type, IEnumerable`1<string>, bool> value);
}
public class FluentMigrator.Runner.MigrationScopeHandler : object {
    private IMigrationProcessor _processor;
    [CompilerGeneratedAttribute]
private IMigrationScope <CurrentScope>k__BackingField;
    public IMigrationScope CurrentScope { get; public set; }
    private bool HasActiveMigrationScope { get; }
    public MigrationScopeHandler(IMigrationProcessor processor);
    [CompilerGeneratedAttribute]
public IMigrationScope get_CurrentScope();
    [CompilerGeneratedAttribute]
public void set_CurrentScope(IMigrationScope value);
    public IMigrationScope BeginScope();
    public IMigrationScope CreateOrWrapMigrationScope(bool transactional);
    private void GuardAgainstActiveMigrationScope();
    private bool get_HasActiveMigrationScope();
    [CompilerGeneratedAttribute]
private void <BeginScope>b__6_0();
}
public class FluentMigrator.Runner.MigrationValidator : object {
    private IAnnouncer _announcer;
    private IConventionSet _conventions;
    public MigrationValidator(IAnnouncer announcer, IConventionSet conventions);
    public void ApplyConventionsToAndValidateExpressions(IMigration migration, IEnumerable`1<IMigrationExpression> expressions);
    private void AppendError(StringBuilder builder, string expressionType, string errors);
}
public class FluentMigrator.Runner.NoOpMigrationScope : object {
    public bool IsActive { get; }
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsActive();
    public sealed virtual void Complete();
    public sealed virtual void Cancel();
}
public class FluentMigrator.Runner.Processors.ConnectionlessProcessor : object {
    [CompilerGeneratedAttribute]
private IMigrationGenerator <Generator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunnerContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnnouncer <Announcer>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationProcessorOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public IMigrationGenerator Generator { get; public set; }
    public IRunnerContext Context { get; public set; }
    public IAnnouncer Announcer { get; public set; }
    public IMigrationProcessorOptions Options { get; public set; }
    public string ConnectionString { get; }
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public ConnectionlessProcessor(IMigrationGenerator generator, IRunnerContext context, IMigrationProcessorOptions options);
    [CompilerGeneratedAttribute]
public IMigrationGenerator get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(IMigrationGenerator value);
    [CompilerGeneratedAttribute]
public IRunnerContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IRunnerContext value);
    [CompilerGeneratedAttribute]
public IAnnouncer get_Announcer();
    [CompilerGeneratedAttribute]
public void set_Announcer(IAnnouncer value);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationProcessorOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IMigrationProcessorOptions value);
    public sealed virtual string get_ConnectionString();
    public sealed virtual void Execute(string template, Object[] args);
    public sealed virtual DataSet ReadTableData(string schemaName, string tableName);
    public sealed virtual DataSet Read(string template, Object[] args);
    public sealed virtual bool Exists(string template, Object[] args);
    public sealed virtual void BeginTransaction();
    public sealed virtual void CommitTransaction();
    public sealed virtual void RollbackTransaction();
    protected void Process(string sql);
    public sealed virtual void Process(CreateSchemaExpression expression);
    public sealed virtual void Process(DeleteSchemaExpression expression);
    public sealed virtual void Process(AlterTableExpression expression);
    public sealed virtual void Process(AlterColumnExpression expression);
    public sealed virtual void Process(CreateTableExpression expression);
    public sealed virtual void Process(CreateColumnExpression expression);
    public sealed virtual void Process(DeleteTableExpression expression);
    public sealed virtual void Process(DeleteColumnExpression expression);
    public sealed virtual void Process(CreateForeignKeyExpression expression);
    public sealed virtual void Process(DeleteForeignKeyExpression expression);
    public sealed virtual void Process(CreateIndexExpression expression);
    public sealed virtual void Process(DeleteIndexExpression expression);
    public sealed virtual void Process(RenameTableExpression expression);
    public sealed virtual void Process(RenameColumnExpression expression);
    public sealed virtual void Process(InsertDataExpression expression);
    public sealed virtual void Process(AlterDefaultConstraintExpression expression);
    public sealed virtual void Process(PerformDBOperationExpression expression);
    public sealed virtual void Process(DeleteDataExpression expression);
    public sealed virtual void Process(UpdateDataExpression expression);
    public sealed virtual void Process(AlterSchemaExpression expression);
    public sealed virtual void Process(CreateSequenceExpression expression);
    public sealed virtual void Process(DeleteSequenceExpression expression);
    public sealed virtual void Process(CreateConstraintExpression expression);
    public sealed virtual void Process(DeleteConstraintExpression expression);
    public sealed virtual void Process(DeleteDefaultConstraintExpression expression);
    public sealed virtual bool SchemaExists(string schemaName);
    public sealed virtual bool TableExists(string schemaName, string tableName);
    public sealed virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public sealed virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public sealed virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public sealed virtual bool SequenceExists(string schemaName, string sequenceName);
    public sealed virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public sealed virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_DatabaseTypeAliases();
    public sealed virtual void Dispose();
}
public class FluentMigrator.Runner.Processors.MigrationProcessorFactoryProvider : object {
    private static object _lock;
    private static IDictionary`2<string, IMigrationProcessorFactory> _migrationProcessorFactories;
    private static IDictionary`2<string, IMigrationProcessorFactory> MigrationProcessorFactories { get; }
    public static IEnumerable`1<IMigrationProcessorFactory> RegisteredFactories { get; }
    public static IEnumerable`1<string> ProcessorTypes { get; }
    private static MigrationProcessorFactoryProvider();
    private static IDictionary`2<string, IMigrationProcessorFactory> get_MigrationProcessorFactories();
    public static IEnumerable`1<IMigrationProcessorFactory> get_RegisteredFactories();
    public static void Register(IMigrationProcessorFactory factory);
    public static IEnumerable`1<string> get_ProcessorTypes();
    public virtual IMigrationProcessorFactory GetFactory(string name);
    public string ListAvailableProcessorTypes();
    private static IDictionary`2<string, IMigrationProcessorFactory> FindProcessorFactories();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Processors.MigrationProcessorFactoryProvider/<GetAssemblies>d__13")]
private static IEnumerable`1<Assembly> GetAssemblies();
}
public class FluentMigrator.Runner.ProfileLoader : object {
    [CompilerGeneratedAttribute]
private IAssemblyCollection <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunner <Runner>k__BackingField;
    private IEnumerable`1<IMigration> _profiles;
    private IAssemblyCollection Assemblies { get; private set; }
    private string Profile { get; private set; }
    protected IMigrationRunnerConventions Conventions { get; protected set; }
    private IMigrationRunner Runner { get; private set; }
    public IEnumerable`1<IMigration> Profiles { get; }
    public ProfileLoader(IRunnerContext runnerContext, IMigrationRunner runner, IMigrationRunnerConventions conventions);
    [CompilerGeneratedAttribute]
private IAssemblyCollection get_Assemblies();
    [CompilerGeneratedAttribute]
private void set_Assemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
private string get_Profile();
    [CompilerGeneratedAttribute]
private void set_Profile(string value);
    [CompilerGeneratedAttribute]
protected IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
protected void set_Conventions(IMigrationRunnerConventions value);
    [CompilerGeneratedAttribute]
private IMigrationRunner get_Runner();
    [CompilerGeneratedAttribute]
private void set_Runner(IMigrationRunner value);
    private void Initialize();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.ProfileLoader/<FindProfilesIn>d__19")]
public sealed virtual IEnumerable`1<IMigration> FindProfilesIn(IAssemblyCollection assemblies, string profile);
    public IEnumerable`1<IMigration> get_Profiles();
    public sealed virtual void ApplyProfiles();
}
public class FluentMigrator.Runner.StopWatch : object {
    public static Func`1<DateTime> TimeNow;
    private DateTime _startTime;
    private DateTime _endTime;
    private static StopWatch();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual TimeSpan ElapsedTime();
    public sealed virtual TimeSpan Time(Action action);
}
public class FluentMigrator.Runner.TrackingMigrationScope : object {
    private Action _disposalAction;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    public bool IsActive { get; private set; }
    public TrackingMigrationScope(Action disposalAction);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
    public sealed virtual void Complete();
    public sealed virtual void Cancel();
    protected virtual void DoComplete();
    protected virtual void DoCancel();
}
public class FluentMigrator.Runner.TransactionalMigrationScope : TrackingMigrationScope {
    private IMigrationProcessor _migrationProcessor;
    public TransactionalMigrationScope(IMigrationProcessor migrationProcessor, Action disposalAction);
    protected virtual void DoComplete();
    protected virtual void DoCancel();
}
[ExtensionAttribute]
internal static class FluentMigrator.Runner.TypeFinder : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> FilterByNamespace(IEnumerable`1<Type> types, string namespace, bool loadNestedNamespaces);
}
[ExtensionAttribute]
internal static class FluentMigrator.Runner.Versioning.DateTimeExtensions : object {
    [ExtensionAttribute]
public static string ToISO8601(DateTime dateTime);
}
public interface FluentMigrator.Runner.Versioning.IVersionInfo {
    public abstract virtual void AddAppliedMigration(long migration);
    public abstract virtual IEnumerable`1<long> AppliedMigrations();
    public abstract virtual bool HasAppliedMigration(long migration);
    public abstract virtual long Latest();
}
public class FluentMigrator.Runner.Versioning.VersionDescriptionMigration : Migration {
    private IVersionTableMetaData versionTableMeta;
    public VersionDescriptionMigration(IVersionTableMetaData versionTableMeta);
    public virtual void Up();
    public virtual void Down();
}
public class FluentMigrator.Runner.Versioning.VersionInfo : object {
    private IList`1<long> _versionsApplied;
    public sealed virtual long Latest();
    public sealed virtual void AddAppliedMigration(long migration);
    public sealed virtual bool HasAppliedMigration(long migration);
    public sealed virtual IEnumerable`1<long> AppliedMigrations();
}
public class FluentMigrator.Runner.Versioning.VersionMigration : Migration {
    private IVersionTableMetaData _versionTableMetaData;
    public VersionMigration(IVersionTableMetaData versionTableMetaData);
    public virtual void Up();
    public virtual void Down();
}
public class FluentMigrator.Runner.Versioning.VersionSchemaMigration : Migration {
    private IVersionTableMetaData _versionTableMetaData;
    public VersionSchemaMigration(IVersionTableMetaData versionTableMetaData);
    public virtual void Up();
    public virtual void Down();
}
public class FluentMigrator.Runner.Versioning.VersionUniqueMigration : ForwardOnlyMigration {
    private IVersionTableMetaData versionTableMeta;
    public VersionUniqueMigration(IVersionTableMetaData versionTableMeta);
    public virtual void Up();
}
public class FluentMigrator.Runner.VersionLoader : object {
    private IConventionSet _conventionSet;
    private bool _versionSchemaMigrationAlreadyRun;
    private bool _versionMigrationAlreadyRun;
    private bool _versionUniqueMigrationAlreadyRun;
    private bool _versionDescriptionMigrationAlreadyRun;
    private IVersionInfo _versionInfo;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationProcessor <Processor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionTableMetaData <VersionTableMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionSchemaMigration <VersionSchemaMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionUniqueMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionDescriptionMigration>k__BackingField;
    private IMigrationRunnerConventions Conventions { get; private set; }
    private IMigrationProcessor Processor { get; private set; }
    protected IAssemblyCollection Assemblies { get; protected set; }
    public IVersionTableMetaData VersionTableMetaData { get; }
    public IMigrationRunner Runner { get; public set; }
    public VersionSchemaMigration VersionSchemaMigration { get; }
    public IMigration VersionMigration { get; }
    public IMigration VersionUniqueMigration { get; }
    public IMigration VersionDescriptionMigration { get; }
    public IVersionInfo VersionInfo { get; public set; }
    public bool AlreadyCreatedVersionSchema { get; }
    public bool AlreadyCreatedVersionTable { get; }
    public bool AlreadyMadeVersionUnique { get; }
    public bool AlreadyMadeVersionDescription { get; }
    public bool OwnsVersionSchema { get; }
    public VersionLoader(IMigrationRunner runner, Assembly assembly, IConventionSet conventionSet, IMigrationRunnerConventions conventions);
    public VersionLoader(IMigrationRunner runner, IAssemblyCollection assemblies, IConventionSet conventionSet, IMigrationRunnerConventions conventions, IVersionTableMetaData versionTableMetaData);
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
private void set_Conventions(IMigrationRunnerConventions value);
    [CompilerGeneratedAttribute]
private IMigrationProcessor get_Processor();
    [CompilerGeneratedAttribute]
private void set_Processor(IMigrationProcessor value);
    [CompilerGeneratedAttribute]
protected IAssemblyCollection get_Assemblies();
    [CompilerGeneratedAttribute]
protected void set_Assemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual IVersionTableMetaData get_VersionTableMetaData();
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationRunner get_Runner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Runner(IMigrationRunner value);
    [CompilerGeneratedAttribute]
public VersionSchemaMigration get_VersionSchemaMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionUniqueMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionDescriptionMigration();
    public sealed virtual void UpdateVersionInfo(long version);
    public sealed virtual void UpdateVersionInfo(long version, string description);
    public sealed virtual IVersionTableMetaData GetVersionTableMetaData();
    protected virtual InsertionDataDefinition CreateVersionInfoInsertionData(long version, string description);
    public sealed virtual IVersionInfo get_VersionInfo();
    public sealed virtual void set_VersionInfo(IVersionInfo value);
    public sealed virtual bool get_AlreadyCreatedVersionSchema();
    public sealed virtual bool get_AlreadyCreatedVersionTable();
    public bool get_AlreadyMadeVersionUnique();
    public bool get_AlreadyMadeVersionDescription();
    public bool get_OwnsVersionSchema();
    public sealed virtual void LoadVersionInfo();
    public sealed virtual void RemoveVersionTable();
    public sealed virtual void DeleteVersion(long version);
    [CompilerGeneratedAttribute]
private bool <GetVersionTableMetaData>b__41_0(Type t);
}
public class FluentMigrator.Runner.VersionTableInfo.DefaultVersionTableMetaData : object {
    [CompilerGeneratedAttribute]
private object <ApplicationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    public object ApplicationContext { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string UniqueIndexName { get; }
    public string AppliedOnColumnName { get; }
    public string DescriptionColumnName { get; }
    public bool OwnsSchema { get; }
    public DefaultVersionTableMetaData(string schemaName);
    [CompilerGeneratedAttribute]
public sealed virtual object get_ApplicationContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationContext(object value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    public virtual string get_TableName();
    public virtual string get_ColumnName();
    public virtual string get_UniqueIndexName();
    public virtual string get_AppliedOnColumnName();
    public virtual string get_DescriptionColumnName();
    public virtual bool get_OwnsSchema();
}
public interface FluentMigrator.Runner.VersionTableInfo.IVersionTableMetaData {
    public object ApplicationContext { get; public set; }
    public bool OwnsSchema { get; }
    public string SchemaName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string DescriptionColumnName { get; }
    public string UniqueIndexName { get; }
    public string AppliedOnColumnName { get; }
    public abstract virtual object get_ApplicationContext();
    public abstract virtual void set_ApplicationContext(object value);
    public abstract virtual bool get_OwnsSchema();
    public abstract virtual string get_SchemaName();
    public abstract virtual string get_TableName();
    public abstract virtual string get_ColumnName();
    public abstract virtual string get_DescriptionColumnName();
    public abstract virtual string get_UniqueIndexName();
    public abstract virtual string get_AppliedOnColumnName();
}
[AttributeUsageAttribute("4")]
public class FluentMigrator.Runner.VersionTableInfo.VersionTableMetaDataAttribute : Attribute {
}
