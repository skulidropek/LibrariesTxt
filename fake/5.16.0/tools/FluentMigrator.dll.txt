public abstract class FluentMigrator.AutoReversingMigration : MigrationBase {
    public sealed virtual void Down();
    public virtual void GetDownExpressions(IMigrationContext context);
}
public abstract class FluentMigrator.AutoScriptMigration : MigrationBase {
    public sealed virtual void Up();
    public sealed virtual void Down();
    private IList`1<string> GetDatabaseNames();
}
public class FluentMigrator.Builders.Alter.AlterExpressionRoot : object {
    private IMigrationContext _context;
    public AlterExpressionRoot(IMigrationContext context);
    public sealed virtual IAlterTableAddColumnOrAlterColumnOrSchemaOrDescriptionSyntax Table(string tableName);
    public sealed virtual IAlterColumnOnTableSyntax Column(string columnName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Alter.Column.AlterColumnExpressionBuilder : ExpressionBuilderWithColumnTypesBase`2<AlterColumnExpression, IAlterColumnOptionSyntax> {
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <CurrentForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnExpressionBuilderHelper <ColumnHelper>k__BackingField;
    public ForeignKeyDefinition CurrentForeignKey { get; public set; }
    public ColumnExpressionBuilderHelper ColumnHelper { get; public set; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.SchemaName { get; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.TableName { get; }
    private ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.Column { get; }
    public AlterColumnExpressionBuilder(AlterColumnExpression expression, IMigrationContext context);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_CurrentForeignKey();
    [CompilerGeneratedAttribute]
public void set_CurrentForeignKey(ForeignKeyDefinition value);
    [CompilerGeneratedAttribute]
public ColumnExpressionBuilderHelper get_ColumnHelper();
    [CompilerGeneratedAttribute]
public void set_ColumnHelper(ColumnExpressionBuilderHelper value);
    public sealed virtual IAlterColumnAsTypeOrInSchemaSyntax OnTable(string name);
    public sealed virtual IAlterColumnAsTypeSyntax InSchema(string schemaName);
    public sealed virtual IAlterColumnOptionSyntax WithDefault(SystemMethods method);
    public sealed virtual IAlterColumnOptionSyntax WithDefaultValue(object value);
    public sealed virtual IAlterColumnOptionSyntax WithColumnDescription(string description);
    public sealed virtual IAlterColumnOptionSyntax Identity();
    public sealed virtual IAlterColumnOptionSyntax Indexed();
    public sealed virtual IAlterColumnOptionSyntax Indexed(string indexName);
    public sealed virtual IAlterColumnOptionSyntax PrimaryKey();
    public sealed virtual IAlterColumnOptionSyntax PrimaryKey(string primaryKeyName);
    public sealed virtual IAlterColumnOptionSyntax Nullable();
    public sealed virtual IAlterColumnOptionSyntax NotNullable();
    public sealed virtual IAlterColumnOptionSyntax Unique();
    public sealed virtual IAlterColumnOptionSyntax Unique(string indexName);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax ForeignKey(string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax ReferencedBy(string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax ForeignKey();
    public virtual ColumnDefinition GetColumnForType();
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax OnDelete(Rule rule);
    public sealed virtual IAlterColumnOptionOrForeignKeyCascadeSyntax OnUpdate(Rule rule);
    public sealed virtual IAlterColumnOptionSyntax OnDeleteOrUpdate(Rule rule);
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_SchemaName();
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_TableName();
    private sealed virtual override ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.get_Column();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Alter.Table.AlterTableExpressionBuilder : ExpressionBuilderWithColumnTypesBase`2<AlterTableExpression, IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax> {
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private ColumnDefinition <CurrentColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <CurrentForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnExpressionBuilderHelper <ColumnHelper>k__BackingField;
    public ColumnDefinition CurrentColumn { get; public set; }
    public ForeignKeyDefinition CurrentForeignKey { get; public set; }
    public ColumnExpressionBuilderHelper ColumnHelper { get; public set; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.SchemaName { get; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.TableName { get; }
    private ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.Column { get; }
    public AlterTableExpressionBuilder(AlterTableExpression expression, IMigrationContext context);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_CurrentForeignKey();
    [CompilerGeneratedAttribute]
public void set_CurrentForeignKey(ForeignKeyDefinition value);
    [CompilerGeneratedAttribute]
public ColumnExpressionBuilderHelper get_ColumnHelper();
    [CompilerGeneratedAttribute]
public void set_ColumnHelper(ColumnExpressionBuilderHelper value);
    public sealed virtual IAlterTableAddColumnOrAlterColumnSyntax InSchema(string schemaName);
    public sealed virtual void ToSchema(string schemaName);
    public sealed virtual IAlterTableAddColumnOrAlterColumnOrSchemaSyntax WithDescription(string description);
    public sealed virtual IAlterTableColumnAsTypeSyntax AddColumn(string name);
    public sealed virtual IAlterTableColumnAsTypeSyntax AlterColumn(string name);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax WithDefault(SystemMethods method);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax WithDefaultValue(object value);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax SetExistingRowsTo(object value);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax WithColumnDescription(string description);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax Identity();
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax Indexed();
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax Indexed(string indexName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax PrimaryKey();
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax PrimaryKey(string primaryKeyName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax Nullable();
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax NotNullable();
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax Unique();
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax Unique(string indexName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax ForeignKey(string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax ReferencedBy(string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax ForeignKey();
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax OnDelete(Rule rule);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnOrForeignKeyCascadeSyntax OnUpdate(Rule rule);
    public sealed virtual IAlterTableColumnOptionOrAddColumnOrAlterColumnSyntax OnDeleteOrUpdate(Rule rule);
    public virtual ColumnDefinition GetColumnForType();
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_SchemaName();
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_TableName();
    private sealed virtual override ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.get_Column();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.ColumnExpressionBuilderHelper : object {
    private IColumnExpressionBuilder _builder;
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private Dictionary`2<ColumnDefinition, ExistingRowsData> <_existingRowsDataByColumn>k__BackingField;
    private Dictionary`2<ColumnDefinition, ExistingRowsData> _existingRowsDataByColumn { get; private set; }
    public ColumnExpressionBuilderHelper(IColumnExpressionBuilder builder, IMigrationContext context);
    [CompilerGeneratedAttribute]
private Dictionary`2<ColumnDefinition, ExistingRowsData> get__existingRowsDataByColumn();
    [CompilerGeneratedAttribute]
private void set__existingRowsDataByColumn(Dictionary`2<ColumnDefinition, ExistingRowsData> value);
    public virtual void SetNullable(bool isNullable);
    public virtual void SetExistingRowsTo(object existingRowValue);
    public virtual void Unique(string indexName);
    public virtual void Indexed(string indexName);
}
public class FluentMigrator.Builders.Create.Column.CreateColumnExpressionBuilder : ExpressionBuilderWithColumnTypesBase`2<CreateColumnExpression, ICreateColumnOptionSyntax> {
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <CurrentForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnExpressionBuilderHelper <ColumnHelper>k__BackingField;
    public ForeignKeyDefinition CurrentForeignKey { get; public set; }
    public ColumnExpressionBuilderHelper ColumnHelper { get; public set; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.SchemaName { get; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.TableName { get; }
    private ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.Column { get; }
    public CreateColumnExpressionBuilder(CreateColumnExpression expression, IMigrationContext context);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_CurrentForeignKey();
    [CompilerGeneratedAttribute]
public void set_CurrentForeignKey(ForeignKeyDefinition value);
    [CompilerGeneratedAttribute]
public ColumnExpressionBuilderHelper get_ColumnHelper();
    [CompilerGeneratedAttribute]
public void set_ColumnHelper(ColumnExpressionBuilderHelper value);
    public sealed virtual ICreateColumnAsTypeOrInSchemaSyntax OnTable(string name);
    public sealed virtual ICreateColumnAsTypeSyntax InSchema(string schemaName);
    public sealed virtual ICreateColumnOptionSyntax WithDefault(SystemMethods method);
    public sealed virtual ICreateColumnOptionSyntax WithDefaultValue(object value);
    public sealed virtual ICreateColumnOptionSyntax SetExistingRowsTo(object value);
    public sealed virtual ICreateColumnOptionSyntax WithColumnDescription(string description);
    public sealed virtual ICreateColumnOptionSyntax Identity();
    public sealed virtual ICreateColumnOptionSyntax Indexed();
    public sealed virtual ICreateColumnOptionSyntax Indexed(string indexName);
    public sealed virtual ICreateColumnOptionSyntax PrimaryKey();
    public sealed virtual ICreateColumnOptionSyntax PrimaryKey(string primaryKeyName);
    public sealed virtual ICreateColumnOptionSyntax Nullable();
    public sealed virtual ICreateColumnOptionSyntax NotNullable();
    public sealed virtual ICreateColumnOptionSyntax Unique();
    public sealed virtual ICreateColumnOptionSyntax Unique(string indexName);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax ForeignKey(string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax ReferencedBy(string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax ForeignKey();
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax OnDelete(Rule rule);
    public sealed virtual ICreateColumnOptionOrForeignKeyCascadeSyntax OnUpdate(Rule rule);
    public sealed virtual ICreateColumnOptionSyntax OnDeleteOrUpdate(Rule rule);
    public virtual ColumnDefinition GetColumnForType();
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_SchemaName();
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_TableName();
    private sealed virtual override ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.get_Column();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Create.Constraint.CreateConstraintExpressionBuilder : ExpressionBuilderBase`1<CreateConstraintExpression> {
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public CreateConstraintExpressionBuilder(CreateConstraintExpression expression);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public sealed virtual ICreateConstraintWithSchemaOrColumnSyntax OnTable(string tableName);
    public sealed virtual ICreateConstraintOptionsSyntax Column(string columnName);
    public sealed virtual ICreateConstraintOptionsSyntax Columns(String[] columnNames);
    public sealed virtual ICreateConstraintColumnsSyntax WithSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Create.CreateExpressionRoot : object {
    private IMigrationContext _context;
    public CreateExpressionRoot(IMigrationContext context);
    public sealed virtual ICreateSchemaOptionsSyntax Schema(string schemaName);
    public sealed virtual ICreateTableWithColumnOrSchemaOrDescriptionSyntax Table(string tableName);
    public sealed virtual ICreateColumnOnTableSyntax Column(string columnName);
    public sealed virtual ICreateForeignKeyFromTableSyntax ForeignKey();
    public sealed virtual ICreateForeignKeyFromTableSyntax ForeignKey(string foreignKeyName);
    public sealed virtual ICreateIndexForTableSyntax Index();
    public sealed virtual ICreateIndexForTableSyntax Index(string indexName);
    public sealed virtual ICreateSequenceInSchemaSyntax Sequence(string sequenceName);
    public sealed virtual ICreateConstraintOnTableSyntax UniqueConstraint();
    public sealed virtual ICreateConstraintOnTableSyntax UniqueConstraint(string constraintName);
    public sealed virtual ICreateConstraintOnTableSyntax PrimaryKey();
    public sealed virtual ICreateConstraintOnTableSyntax PrimaryKey(string primaryKeyName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Create.ForeignKey.CreateForeignKeyExpressionBuilder : ExpressionBuilderBase`1<CreateForeignKeyExpression> {
    public CreateForeignKeyExpressionBuilder(CreateForeignKeyExpression expression);
    public sealed virtual ICreateForeignKeyForeignColumnOrInSchemaSyntax FromTable(string table);
    public sealed virtual ICreateForeignKeyToTableSyntax ForeignColumn(string column);
    public sealed virtual ICreateForeignKeyToTableSyntax ForeignColumns(String[] columns);
    private sealed virtual override ICreateForeignKeyForeignColumnSyntax FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyForeignColumnOrInSchemaSyntax.InSchema(string schemaName);
    public sealed virtual ICreateForeignKeyPrimaryColumnOrInSchemaSyntax ToTable(string table);
    public sealed virtual ICreateForeignKeyCascadeSyntax PrimaryColumn(string column);
    public sealed virtual ICreateForeignKeyCascadeSyntax PrimaryColumns(String[] columns);
    public sealed virtual ICreateForeignKeyCascadeSyntax OnDelete(Rule rule);
    public sealed virtual ICreateForeignKeyCascadeSyntax OnUpdate(Rule rule);
    public sealed virtual void OnDeleteOrUpdate(Rule rule);
    private sealed virtual override ICreateForeignKeyPrimaryColumnSyntax FluentMigrator.Builders.Create.ForeignKey.ICreateForeignKeyPrimaryColumnOrInSchemaSyntax.InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Create.Index.CreateIndexExpressionBuilder : ExpressionBuilderBase`1<CreateIndexExpression> {
    [CompilerGeneratedAttribute]
private IndexColumnDefinition <CurrentColumn>k__BackingField;
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public IndexColumnDefinition CurrentColumn { get; public set; }
    public CreateIndexExpressionBuilder(CreateIndexExpression expression);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    [CompilerGeneratedAttribute]
public sealed virtual IndexColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(IndexColumnDefinition value);
    public sealed virtual ICreateIndexOnColumnOrInSchemaSyntax OnTable(string tableName);
    public sealed virtual ICreateIndexColumnOptionsSyntax OnColumn(string columnName);
    public sealed virtual ICreateIndexOptionsSyntax WithOptions();
    public sealed virtual ICreateIndexOnColumnSyntax InSchema(string schemaName);
    public sealed virtual ICreateIndexMoreColumnOptionsSyntax Ascending();
    public sealed virtual ICreateIndexMoreColumnOptionsSyntax Descending();
    public sealed virtual ICreateIndexColumnUniqueOptionsSyntax Unique();
    private sealed virtual override ICreateIndexOnColumnSyntax FluentMigrator.Builders.Create.Index.ICreateIndexOptionsSyntax.Unique();
    public sealed virtual ICreateIndexOnColumnSyntax NonClustered();
    public sealed virtual ICreateIndexOnColumnSyntax Clustered();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Create.Schema.CreateSchemaExpressionBuilder : ExpressionBuilderBase`1<CreateSchemaExpression> {
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public CreateSchemaExpressionBuilder(CreateSchemaExpression expression);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Create.Sequence.CreateSequenceExpressionBuilder : ExpressionBuilderBase`1<CreateSequenceExpression> {
    public CreateSequenceExpressionBuilder(CreateSequenceExpression expression);
    public sealed virtual ICreateSequenceSyntax IncrementBy(long increment);
    public sealed virtual ICreateSequenceSyntax MinValue(long minValue);
    public sealed virtual ICreateSequenceSyntax MaxValue(long maxValue);
    public sealed virtual ICreateSequenceSyntax StartWith(long startwith);
    public sealed virtual ICreateSequenceSyntax Cache(long value);
    public sealed virtual ICreateSequenceSyntax Cycle();
    public sealed virtual ICreateSequenceSyntax InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Create.Table.CreateTableExpressionBuilder : ExpressionBuilderWithColumnTypesBase`2<CreateTableExpression, ICreateTableColumnOptionOrWithColumnSyntax> {
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private ColumnDefinition <CurrentColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <CurrentForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnExpressionBuilderHelper <ColumnHelper>k__BackingField;
    public ColumnDefinition CurrentColumn { get; public set; }
    public ForeignKeyDefinition CurrentForeignKey { get; public set; }
    public ColumnExpressionBuilderHelper ColumnHelper { get; public set; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.SchemaName { get; }
    private string FluentMigrator.Builders.IColumnExpressionBuilder.TableName { get; }
    private ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.Column { get; }
    public CreateTableExpressionBuilder(CreateTableExpression expression, IMigrationContext context);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_CurrentForeignKey();
    [CompilerGeneratedAttribute]
public void set_CurrentForeignKey(ForeignKeyDefinition value);
    [CompilerGeneratedAttribute]
public ColumnExpressionBuilderHelper get_ColumnHelper();
    [CompilerGeneratedAttribute]
public void set_ColumnHelper(ColumnExpressionBuilderHelper value);
    public sealed virtual ICreateTableWithColumnSyntax InSchema(string schemaName);
    public sealed virtual ICreateTableColumnAsTypeSyntax WithColumn(string name);
    public sealed virtual ICreateTableWithColumnOrSchemaSyntax WithDescription(string description);
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax WithDefault(SystemMethods method);
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax WithDefaultValue(object value);
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax WithColumnDescription(string description);
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax Identity();
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax Indexed();
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax Indexed(string indexName);
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax PrimaryKey();
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax PrimaryKey(string primaryKeyName);
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax Nullable();
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax NotNullable();
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax Unique();
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax Unique(string indexName);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax ForeignKey(string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax ReferencedBy(string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax ForeignKey();
    public virtual ColumnDefinition GetColumnForType();
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax OnDelete(Rule rule);
    public sealed virtual ICreateTableColumnOptionOrForeignKeyCascadeOrWithColumnSyntax OnUpdate(Rule rule);
    public sealed virtual ICreateTableColumnOptionOrWithColumnSyntax OnDeleteOrUpdate(Rule rule);
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_SchemaName();
    private sealed virtual override string FluentMigrator.Builders.IColumnExpressionBuilder.get_TableName();
    private sealed virtual override ColumnDefinition FluentMigrator.Builders.IColumnExpressionBuilder.get_Column();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.Column.DeleteColumnExpressionBuilder : ExpressionBuilderBase`1<DeleteColumnExpression> {
    public DeleteColumnExpressionBuilder(DeleteColumnExpression expression);
    public sealed virtual IInSchemaSyntax FromTable(string tableName);
    public sealed virtual IDeleteColumnFromTableSyntax Column(string columnName);
    public sealed virtual void InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.Constraint.DeleteConstraintExpressionBuilder : ExpressionBuilderBase`1<DeleteConstraintExpression> {
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public DeleteConstraintExpressionBuilder(DeleteConstraintExpression expression);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public sealed virtual IDeleteConstraintInSchemaOptionsSyntax FromTable(string tableName);
    public sealed virtual IDeleteConstraintInSchemaOptionsSyntax InSchema(string schemaName);
    public sealed virtual void Column(string columnName);
    public sealed virtual void Columns(String[] columnNames);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.DefaultConstraint.DeleteDefaultConstraintExpressionBuilder : ExpressionBuilderBase`1<DeleteDefaultConstraintExpression> {
    public DeleteDefaultConstraintExpressionBuilder(DeleteDefaultConstraintExpression expression);
    public sealed virtual IDeleteDefaultConstraintOnColumnOrInSchemaSyntax OnTable(string tableName);
    public sealed virtual void OnColumn(string columnName);
    public sealed virtual IDeleteDefaultConstraintOnColumnSyntax InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.DeleteDataExpressionBuilder : object {
    private DeleteDataExpression _expression;
    public DeleteDataExpressionBuilder(DeleteDataExpression expression);
    public sealed virtual void IsNull(string columnName);
    public sealed virtual IDeleteDataSyntax Row(object dataAsAnonymousType);
    public sealed virtual IDeleteDataSyntax InSchema(string schemaName);
    public sealed virtual void AllRows();
    private static DeletionDataDefinition GetData(object dataAsAnonymousType);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.DeleteExpressionRoot : object {
    private IMigrationContext _context;
    public DeleteExpressionRoot(IMigrationContext context);
    public sealed virtual void Schema(string schemaName);
    public sealed virtual IInSchemaSyntax Table(string tableName);
    public sealed virtual IDeleteColumnFromTableSyntax Column(string columnName);
    public sealed virtual IDeleteForeignKeyFromTableSyntax ForeignKey();
    public sealed virtual IDeleteForeignKeyOnTableSyntax ForeignKey(string foreignKeyName);
    public sealed virtual IDeleteDataOrInSchemaSyntax FromTable(string tableName);
    public sealed virtual IDeleteIndexForTableSyntax Index(string indexName);
    public sealed virtual IDeleteIndexForTableSyntax Index();
    public sealed virtual IInSchemaSyntax Sequence(string sequenceName);
    public sealed virtual IDeleteConstraintOnTableSyntax PrimaryKey(string primaryKeyName);
    public sealed virtual IDeleteConstraintOnTableSyntax UniqueConstraint(string constraintName);
    public sealed virtual IDeleteConstraintOnTableSyntax UniqueConstraint();
    public sealed virtual IDeleteDefaultConstraintOnTableSyntax DefaultConstraint();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.ForeignKey.DeleteForeignKeyExpressionBuilder : ExpressionBuilderBase`1<DeleteForeignKeyExpression> {
    public DeleteForeignKeyExpressionBuilder(DeleteForeignKeyExpression expression);
    public sealed virtual IDeleteForeignKeyForeignColumnOrInSchemaSyntax FromTable(string foreignTableName);
    public sealed virtual IDeleteForeignKeyForeignColumnSyntax InSchema(string foreignSchemaName);
    public sealed virtual IDeleteForeignKeyToTableSyntax ForeignColumn(string column);
    public sealed virtual IDeleteForeignKeyToTableSyntax ForeignColumns(String[] columns);
    public sealed virtual IDeleteForeignKeyPrimaryColumnSyntax ToTable(string table);
    public sealed virtual void PrimaryColumn(string column);
    public sealed virtual void PrimaryColumns(String[] columns);
    private sealed virtual override IInSchemaSyntax FluentMigrator.Builders.Delete.ForeignKey.IDeleteForeignKeyOnTableSyntax.OnTable(string foreignTableName);
    private sealed virtual override void FluentMigrator.Builders.IInSchemaSyntax.InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.Index.DeleteIndexExpressionBuilder : ExpressionBuilderBase`1<DeleteIndexExpression> {
    [CompilerGeneratedAttribute]
private IndexColumnDefinition <CurrentColumn>k__BackingField;
    public IndexColumnDefinition CurrentColumn { get; public set; }
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public DeleteIndexExpressionBuilder(DeleteIndexExpression expression);
    [CompilerGeneratedAttribute]
public IndexColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(IndexColumnDefinition value);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public sealed virtual IDeleteIndexOnColumnOrInSchemaSyntax OnTable(string tableName);
    public sealed virtual IDeleteIndexOnColumnSyntax InSchema(string schemaName);
    public void OnColumn(string columnName);
    public void OnColumns(String[] columnNames);
    private sealed virtual override IDeleteIndexOptionsSyntax FluentMigrator.Builders.Delete.Index.IDeleteIndexOnColumnSyntax.OnColumns(String[] columnNames);
    private sealed virtual override IDeleteIndexOptionsSyntax FluentMigrator.Builders.Delete.Index.IDeleteIndexOnColumnSyntax.OnColumn(string columnName);
    public sealed virtual IDeleteIndexOptionsSyntax WithOptions();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.Sequence.DeleteSequenceExpressionBuilder : ExpressionBuilderBase`1<DeleteSequenceExpression> {
    public DeleteSequenceExpressionBuilder(DeleteSequenceExpression expression);
    public sealed virtual void InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Delete.Table.DeleteTableExpressionBuilder : ExpressionBuilderBase`1<DeleteTableExpression> {
    public DeleteTableExpressionBuilder(DeleteTableExpression expression);
    public sealed virtual void InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Execute.ExecuteExpressionRoot : object {
    private IMigrationContext _context;
    public ExecuteExpressionRoot(IMigrationContext context);
    public sealed virtual void Sql(string sqlStatement);
    public sealed virtual void Script(string pathToSqlScript, IDictionary`2<string, string> parameters);
    public sealed virtual void Script(string pathToSqlScript);
    public sealed virtual void WithConnection(Action`2<IDbConnection, IDbTransaction> operation);
    public sealed virtual void EmbeddedScript(string embeddedSqlScriptName);
    public sealed virtual void EmbeddedScript(string embeddedSqlScriptName, IDictionary`2<string, string> parameters);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public abstract class FluentMigrator.Builders.ExpressionBuilderBase`1 : object {
    [CompilerGeneratedAttribute]
private T <Expression>k__BackingField;
    public T Expression { get; private set; }
    protected ExpressionBuilderBase`1(T expression);
    [CompilerGeneratedAttribute]
public T get_Expression();
    [CompilerGeneratedAttribute]
private void set_Expression(T value);
}
public abstract class FluentMigrator.Builders.ExpressionBuilderWithColumnTypesBase`2 : ExpressionBuilderBase`1<ExpressionT> {
    private ColumnDefinition Column { get; }
    protected ExpressionBuilderWithColumnTypesBase`2(ExpressionT expression);
    public abstract virtual ColumnDefinition GetColumnForType();
    private ColumnDefinition get_Column();
    public sealed virtual NextT AsAnsiString();
    public sealed virtual NextT AsAnsiString(string collationName);
    public sealed virtual NextT AsAnsiString(int size);
    public sealed virtual NextT AsAnsiString(int size, string collationName);
    public sealed virtual NextT AsBinary();
    public sealed virtual NextT AsBinary(int size);
    public sealed virtual NextT AsBoolean();
    public sealed virtual NextT AsByte();
    public sealed virtual NextT AsCurrency();
    public sealed virtual NextT AsDate();
    public sealed virtual NextT AsDateTime();
    public sealed virtual NextT AsDateTime2();
    public sealed virtual NextT AsDateTimeOffset();
    public sealed virtual NextT AsDecimal();
    public sealed virtual NextT AsDecimal(int size, int precision);
    public sealed virtual NextT AsDouble();
    public sealed virtual NextT AsFixedLengthString(int size);
    public sealed virtual NextT AsFixedLengthString(int size, string collationName);
    public sealed virtual NextT AsFixedLengthAnsiString(int size);
    public sealed virtual NextT AsFixedLengthAnsiString(int size, string collationName);
    public sealed virtual NextT AsFloat();
    public sealed virtual NextT AsGuid();
    public sealed virtual NextT AsInt16();
    public sealed virtual NextT AsInt32();
    public sealed virtual NextT AsInt64();
    public sealed virtual NextT AsString();
    public sealed virtual NextT AsString(string collationName);
    public sealed virtual NextT AsString(int size);
    public sealed virtual NextT AsString(int size, string collationName);
    public sealed virtual NextT AsTime();
    public sealed virtual NextT AsXml();
    public sealed virtual NextT AsXml(int size);
    public sealed virtual NextT AsCustom(string customType);
    private void SetColumnAsString(DbType dbType, int size, string collationName);
}
public class FluentMigrator.Builders.IfDatabase.IfDatabaseExpressionRoot : object {
    private IMigrationContext _context;
    public IAlterExpressionRoot Alter { get; }
    public ICreateExpressionRoot Create { get; }
    public IDeleteExpressionRoot Delete { get; }
    public IRenameExpressionRoot Rename { get; }
    public IInsertExpressionRoot Insert { get; }
    public IExecuteExpressionRoot Execute { get; }
    public ISchemaExpressionRoot Schema { get; }
    public IUpdateExpressionRoot Update { get; }
    public IfDatabaseExpressionRoot(IMigrationContext context, String[] databaseType);
    public IfDatabaseExpressionRoot(IMigrationContext context, Predicate`1<string> databaseTypePredicate);
    public sealed virtual IAlterExpressionRoot get_Alter();
    public sealed virtual ICreateExpressionRoot get_Create();
    public sealed virtual IDeleteExpressionRoot get_Delete();
    public sealed virtual IRenameExpressionRoot get_Rename();
    public sealed virtual IInsertExpressionRoot get_Insert();
    public sealed virtual IExecuteExpressionRoot get_Execute();
    public sealed virtual ISchemaExpressionRoot get_Schema();
    public sealed virtual IUpdateExpressionRoot get_Update();
    public sealed virtual void Delegate(Action delegation);
    private static bool DatabaseTypeApplies(IMigrationContext context, String[] databaseTypes);
    private static bool DatabaseTypeApplies(IMigrationContext context, Predicate`1<string> databaseTypePredicate);
    private static IMigrationContext CreateEmptyMigrationContext(IMigrationContext originalContext);
}
public class FluentMigrator.Builders.IfDatabase.NullIfDatabaseProcessor : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public sealed virtual bool SequenceExists(string schemaName, string sequenceName);
    public sealed virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public sealed virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_DatabaseTypeAliases();
    public sealed virtual bool SchemaExists(string schemaName);
    public sealed virtual bool TableExists(string schemaName, string tableName);
    public sealed virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public sealed virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public sealed virtual bool IndexExists(string schemaName, string tableName, string indexName);
}
public class FluentMigrator.Builders.Insert.InsertDataExpressionBuilder : object {
    private InsertDataExpression _expression;
    public IDictionary`2<string, object> AdditionalFeatures { get; }
    public InsertDataExpressionBuilder(InsertDataExpression expression);
    public sealed virtual IDictionary`2<string, object> get_AdditionalFeatures();
    public sealed virtual IInsertDataSyntax Row(object dataAsAnonymousType);
    public sealed virtual IInsertDataSyntax Row(IDictionary`2<string, object> data);
    public sealed virtual IInsertDataSyntax InSchema(string schemaName);
    private static IDictionary`2<string, object> ExtractData(object dataAsAnonymousType);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Insert.InsertExpressionRoot : object {
    private IMigrationContext _context;
    public InsertExpressionRoot(IMigrationContext context);
    public sealed virtual IInsertDataOrInSchemaSyntax IntoTable(string tableName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Rename.Column.RenameColumnExpressionBuilder : ExpressionBuilderBase`1<RenameColumnExpression> {
    public RenameColumnExpressionBuilder(RenameColumnExpression expression);
    public sealed virtual void To(string name);
    public sealed virtual IRenameColumnToOrInSchemaSyntax OnTable(string tableName);
    public sealed virtual IRenameColumnToSyntax InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Rename.RenameExpressionRoot : object {
    private IMigrationContext _context;
    public RenameExpressionRoot(IMigrationContext context);
    public sealed virtual IRenameTableToOrInSchemaSyntax Table(string oldName);
    public sealed virtual IRenameColumnTableSyntax Column(string oldName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Rename.Table.RenameTableExpressionBuilder : ExpressionBuilderBase`1<RenameTableExpression> {
    public RenameTableExpressionBuilder(RenameTableExpression expression);
    public sealed virtual IInSchemaSyntax To(string name);
    private sealed virtual override IRenameTableToSyntax FluentMigrator.Builders.Rename.Table.IRenameTableToOrInSchemaSyntax.InSchema(string schemaName);
    public sealed virtual void InSchema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Schema.Column.SchemaColumnQuery : object {
    private string _schemaName;
    private string _tableName;
    private string _columnName;
    private IMigrationContext _context;
    public SchemaColumnQuery(string schemaName, string tableName, string columnName, IMigrationContext context);
    public sealed virtual bool Exists();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Schema.Constraint.SchemaConstraintQuery : object {
    private string _schemaName;
    private string _tableName;
    private string _constraintName;
    private IMigrationContext _context;
    public SchemaConstraintQuery(string schemaName, string tableName, string constraintName, IMigrationContext context);
    public sealed virtual bool Exists();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Schema.Index.SchemaIndexQuery : object {
    private string _schemaName;
    private string _tableName;
    private string _indexName;
    private IMigrationContext _context;
    public SchemaIndexQuery(string schemaName, string tableName, string indexName, IMigrationContext context);
    public sealed virtual bool Exists();
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Schema.Schema.SchemaSchemaQuery : object {
    private IMigrationContext _context;
    private string _schemaName;
    public SchemaSchemaQuery(IMigrationContext context, string schemaName);
    public sealed virtual bool Exists();
    public sealed virtual ISchemaTableSyntax Table(string tableName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Schema.SchemaExpressionRoot : object {
    private IMigrationContext _context;
    public SchemaExpressionRoot(IMigrationContext context);
    public sealed virtual ISchemaTableSyntax Table(string tableName);
    public sealed virtual ISchemaSchemaSyntax Schema(string schemaName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Schema.Table.SchemaTableQuery : object {
    private IMigrationContext _context;
    private string _schemaName;
    private string _tableName;
    public SchemaTableQuery(IMigrationContext context, string schemaName, string tableName);
    public sealed virtual bool Exists();
    public sealed virtual ISchemaColumnSyntax Column(string columnName);
    public sealed virtual ISchemaIndexSyntax Index(string indexName);
    public sealed virtual ISchemaConstraintSyntax Constraint(string constraintName);
}
public class FluentMigrator.Builders.Update.UpdateDataExpressionBuilder : object {
    private UpdateDataExpression _expression;
    private IMigrationContext _context;
    public UpdateDataExpressionBuilder(UpdateDataExpression expression, IMigrationContext context);
    public sealed virtual IUpdateSetSyntax InSchema(string schemaName);
    public sealed virtual IUpdateWhereSyntax Set(object dataAsAnonymousType);
    public sealed virtual void Where(object dataAsAnonymousType);
    public sealed virtual void AllRows();
    private static List`1<KeyValuePair`2<string, object>> GetData(object dataAsAnonymousType);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public class FluentMigrator.Builders.Update.UpdateExpressionRoot : object {
    private IMigrationContext _context;
    public UpdateExpressionRoot(IMigrationContext context);
    public sealed virtual IUpdateSetOrInSchemaSyntax Table(string tableName);
    private sealed virtual override Type FluentMigrator.Infrastructure.IFluentSyntax.GetType();
}
public abstract class FluentMigrator.ForwardOnlyMigration : Migration {
    public sealed virtual void Down();
}
[ExtensionAttribute]
public static class FluentMigrator.Infrastructure.Extensions.ExtensionsForICustomAttributeProvider : object {
    [ExtensionAttribute]
public static T GetOneAttribute(ICustomAttributeProvider member);
    [ExtensionAttribute]
public static T GetOneAttribute(ICustomAttributeProvider member, bool inherit);
    [ExtensionAttribute]
public static T[] GetAllAttributes(ICustomAttributeProvider member);
    [ExtensionAttribute]
public static T[] GetAllAttributes(ICustomAttributeProvider member, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider member);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider member, bool inherit);
}
[ExtensionAttribute]
public static class FluentMigrator.Infrastructure.Extensions.ExtensionsForIMigrationInfo : object {
    [ExtensionAttribute]
public static bool IsAttributed(IMigrationInfo migrationInfo);
}
public class FluentMigrator.Infrastructure.MigrationContext : object {
    [CompilerGeneratedAttribute]
private ICollection`1<IMigrationExpression> <Expressions>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuerySchema <QuerySchema>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <MigrationAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ApplicationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    public ICollection`1<IMigrationExpression> Expressions { get; public set; }
    public IQuerySchema QuerySchema { get; public set; }
    public IAssemblyCollection MigrationAssemblies { get; public set; }
    public object ApplicationContext { get; public set; }
    public string Connection { get; public set; }
    public MigrationContext(IQuerySchema querySchema, IAssemblyCollection migrationAssemblies, object context, string connection);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IMigrationExpression> get_Expressions();
    [CompilerGeneratedAttribute]
public virtual void set_Expressions(ICollection`1<IMigrationExpression> value);
    [CompilerGeneratedAttribute]
public virtual IQuerySchema get_QuerySchema();
    [CompilerGeneratedAttribute]
public virtual void set_QuerySchema(IQuerySchema value);
    [CompilerGeneratedAttribute]
public virtual IAssemblyCollection get_MigrationAssemblies();
    [CompilerGeneratedAttribute]
public virtual void set_MigrationAssemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public virtual object get_ApplicationContext();
    [CompilerGeneratedAttribute]
public virtual void set_ApplicationContext(object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connection(string value);
}
public class FluentMigrator.Infrastructure.MigrationInfo : object {
    private Dictionary`2<string, object> _traits;
    private Lazy`1<IMigration> _lazyMigration;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionBehavior <TransactionBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBreakingChange>k__BackingField;
    public long Version { get; private set; }
    public string Description { get; private set; }
    public TransactionBehavior TransactionBehavior { get; private set; }
    public IMigration Migration { get; }
    public bool IsBreakingChange { get; }
    public MigrationInfo(long version, TransactionBehavior transactionBehavior, IMigration migration);
    public MigrationInfo(long version, TransactionBehavior transactionBehavior, bool isBreakingChange, IMigration migration);
    public MigrationInfo(long version, string description, TransactionBehavior transactionBehavior, bool isBreakingChange, Func`1<IMigration> migrationFunc);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TransactionBehavior get_TransactionBehavior();
    [CompilerGeneratedAttribute]
private void set_TransactionBehavior(TransactionBehavior value);
    public sealed virtual IMigration get_Migration();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBreakingChange();
    public sealed virtual object Trait(string name);
    public sealed virtual bool HasTrait(string name);
    public sealed virtual string GetName();
    public void AddTrait(string name, object value);
    public virtual string ToString();
}
public class FluentMigrator.Infrastructure.NonAttributedMigrationToMigrationInfoAdapter : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionBehavior <TransactionBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <Migration>k__BackingField;
    public string Description { get; }
    public long Version { get; }
    public TransactionBehavior TransactionBehavior { get; private set; }
    public IMigration Migration { get; private set; }
    public bool IsBreakingChange { get; }
    public NonAttributedMigrationToMigrationInfoAdapter(IMigration migration);
    public NonAttributedMigrationToMigrationInfoAdapter(IMigration migration, TransactionBehavior transactionBehavior);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual long get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual TransactionBehavior get_TransactionBehavior();
    [CompilerGeneratedAttribute]
private void set_TransactionBehavior(TransactionBehavior value);
    [CompilerGeneratedAttribute]
public sealed virtual IMigration get_Migration();
    [CompilerGeneratedAttribute]
private void set_Migration(IMigration value);
    public sealed virtual bool get_IsBreakingChange();
    public sealed virtual object Trait(string name);
    public sealed virtual bool HasTrait(string name);
    public sealed virtual string GetName();
}
public abstract class FluentMigrator.Migration : MigrationBase {
    public IDeleteExpressionRoot Delete { get; }
    public IExecuteExpressionRoot Execute { get; }
    public IUpdateExpressionRoot Update { get; }
    public IDeleteExpressionRoot get_Delete();
    public IExecuteExpressionRoot get_Execute();
    public IUpdateExpressionRoot get_Update();
}
public abstract class FluentMigrator.MigrationBase : object {
    internal IMigrationContext _context;
    private object _mutex;
    [CompilerGeneratedAttribute]
private object <ApplicationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    public object ApplicationContext { get; protected set; }
    public string ConnectionString { get; protected set; }
    public IAlterExpressionRoot Alter { get; }
    public ICreateExpressionRoot Create { get; }
    public IRenameExpressionRoot Rename { get; }
    public IInsertExpressionRoot Insert { get; }
    public ISchemaExpressionRoot Schema { get; }
    [CompilerGeneratedAttribute]
public sealed virtual object get_ApplicationContext();
    [CompilerGeneratedAttribute]
protected void set_ApplicationContext(object value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
protected void set_ConnectionString(string value);
    public abstract virtual void Up();
    public abstract virtual void Down();
    public virtual void GetUpExpressions(IMigrationContext context);
    public virtual void GetDownExpressions(IMigrationContext context);
    public IAlterExpressionRoot get_Alter();
    public ICreateExpressionRoot get_Create();
    public IRenameExpressionRoot get_Rename();
    public IInsertExpressionRoot get_Insert();
    public ISchemaExpressionRoot get_Schema();
    public IIfDatabaseExpressionRoot IfDatabase(String[] databaseType);
    public IIfDatabaseExpressionRoot IfDatabase(Predicate`1<string> databaseTypeFunc);
}
