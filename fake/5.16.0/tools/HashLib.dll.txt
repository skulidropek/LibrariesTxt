[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static class HashLib.ArrayExtensions : object {
    [ExtensionAttribute]
public static void Clear(Array a_array);
    [ExtensionAttribute]
public static T[] SubArray(T[] a_array, int a_index, int a_count);
}
internal class HashLib.Checksum.Adler32 : Hash {
    private static UInt32 MOD_ADLER;
    private UInt32 m_a;
    private UInt32 m_b;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Checksum.CRC32 : Hash {
    private UInt32[] m_crc_tab;
    private UInt32 m_hash;
    private UInt32 m_initial_value;
    private UInt32 m_final_xor;
    public CRC32(UInt32 a_polynomial, UInt32 a_initial_value, UInt32 a_final_xor);
    private void GenerateCRCTable(UInt32 a_poly32);
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Checksum.CRC32a : CRC32 {
}
internal class HashLib.Checksum.CRC32b : CRC32 {
}
internal class HashLib.Checksum.CRC32c : CRC32 {
}
internal class HashLib.Checksum.CRC32d : CRC32 {
}
public static class HashLib.Checksum.CRC32Polynomials : object {
    public static UInt32 IEEE_802_3;
    public static UInt32 Castagnoli;
    public static UInt32 Koopman;
    public static UInt32 CRC_32Q;
    private static CRC32Polynomials();
}
internal class HashLib.Checksum.CRC64 : Hash {
    private UInt64[] m_crc_tab;
    private ulong m_hash;
    private ulong m_initial_value;
    private ulong m_final_xor;
    public CRC64(ulong a_polynomial, ulong a_initial_value, ulong a_final_xor);
    private void GenerateCRCTable(ulong a_poly64);
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Checksum.CRC64a : CRC64 {
}
internal class HashLib.Checksum.CRC64b : CRC64 {
}
public static class HashLib.Checksum.CRC64Polynomials : object {
    public static ulong ISO;
    public static ulong ECMA_182;
    private static CRC64Polynomials();
}
public static class HashLib.Converters : object {
    public static Byte[] ConvertToBytes(object a_in);
    public static UInt32[] ConvertBytesToUInts(Byte[] a_in);
    public static void ConvertBytesToUInts(Byte[] a_in, UInt32[] a_result);
    public static UInt32[] ConvertBytesToUInts(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToUInts(Byte[] a_in, int a_index, int a_length, UInt32[] a_result);
    public static void ConvertBytesToUInts(Byte[] a_in, int a_index_in, int a_length, UInt32[] a_result, int a_index_out);
    public static Int32[] ConvertBytesToInts(Byte[] a_in);
    public static void ConvertBytesToInts(Byte[] a_in, Int32[] a_result);
    public static Int32[] ConvertBytesToInts(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToInts(Byte[] a_in, int a_index, int a_length, Int32[] a_result);
    public static void ConvertBytesToInts(Byte[] a_in, int a_index_in, int a_length, Int32[] a_result, int a_index_out);
    public static UInt64[] ConvertBytesToULongs(Byte[] a_in);
    public static void ConvertBytesToULongs(Byte[] a_in, UInt64[] a_result);
    public static UInt64[] ConvertBytesToULongs(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToULongs(Byte[] a_in, int a_index, int a_length, UInt64[] a_result);
    public static void ConvertBytesToULongs(Byte[] a_in, int a_index_in, int a_length, UInt64[] a_result, int a_index_out);
    public static Int64[] ConvertBytesToLongs(Byte[] a_in);
    public static void ConvertBytesToLongs(Byte[] a_in, Int64[] a_result);
    public static Int64[] ConvertBytesToLongs(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToLongs(Byte[] a_in, int a_index, int a_length, Int64[] a_result);
    public static void ConvertBytesToLongs(Byte[] a_in, int a_index_in, int a_length, Int64[] a_result, int a_index_out);
    public static UInt32[] ConvertBytesToUIntsSwapOrder(Byte[] a_in);
    public static void ConvertBytesToUIntsSwapOrder(Byte[] a_in, UInt32[] a_result);
    public static UInt32[] ConvertBytesToUIntsSwapOrder(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToUIntsSwapOrder(Byte[] a_in, int a_index, int a_length, UInt32[] a_result);
    public static void ConvertBytesToUIntsSwapOrder(Byte[] a_in, int a_index, int a_length, UInt32[] a_result, int a_index_out);
    public static Int32[] ConvertBytesToIntsSwapOrder(Byte[] a_in);
    public static void ConvertBytesToIntsSwapOrder(Byte[] a_in, Int32[] a_result);
    public static Int32[] ConvertBytesToIntsSwapOrder(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToIntsSwapOrder(Byte[] a_in, int a_index, int a_length, Int32[] a_result);
    public static void ConvertBytesToIntsSwapOrder(Byte[] a_in, int a_index, int a_length, Int32[] a_result, int a_index_out);
    public static UInt64[] ConvertBytesToULongsSwapOrder(Byte[] a_in);
    public static ulong ConvertBytesToULongSwapOrder(Byte[] a_in, int a_index);
    public static ulong ConvertBytesToULong(Byte[] a_in, int a_index);
    public static UInt32 ConvertBytesToUIntSwapOrder(Byte[] a_in, int a_index);
    public static UInt32 ConvertBytesToUInt(Byte[] a_in, int a_index);
    public static void ConvertBytesToULongsSwapOrder(Byte[] a_in, UInt64[] a_result);
    public static UInt64[] ConvertBytesToULongsSwapOrder(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToULongsSwapOrder(Byte[] a_in, int a_index, int a_length, UInt64[] a_result);
    public static void ConvertBytesToULongsSwapOrder(Byte[] a_in, int a_index_in, int a_length, UInt64[] a_result, int a_index_out);
    public static Int64[] ConvertBytesToLongsSwapOrder(Byte[] a_in);
    public static void ConvertBytesToLongsSwapOrder(Byte[] a_in, Int64[] a_result);
    public static Int64[] ConvertBytesToLongsSwapOrder(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToLongsSwapOrder(Byte[] a_in, int a_index, int a_length, Int64[] a_result);
    public static void ConvertBytesToLongsSwapOrder(Byte[] a_in, int a_index_in, int a_length, Int64[] a_result, int a_index_out);
    public static Byte[] ConvertStringToBytes(string a_in);
    public static Byte[] ConvertStringToBytes(string a_in, Encoding a_encoding);
    public static Byte[] ConvertCharsToBytes(Char[] a_in);
    public static Byte[] ConvertCharsToBytes(Char[] a_in, Encoding a_encoding);
    public static Byte[] ConvertShortsToBytes(Int16[] a_in);
    public static Byte[] ConvertUShortsToBytes(UInt16[] a_in);
    public static Byte[] ConvertIntsToBytes(Int32[] a_in);
    public static Byte[] ConvertIntsToBytes(Int32[] a_in, int a_index, int a_length);
    public static Byte[] ConvertIntsToBytesSwapOrder(Int32[] a_in);
    public static Byte[] ConvertIntsToBytesSwapOrder(Int32[] a_in, int a_index, int a_length);
    public static Byte[] ConvertUIntsToBytes(UInt32[] a_in);
    public static Byte[] ConvertUIntsToBytes(UInt32[] a_in, int a_index, int a_length);
    public static Byte[] ConvertUIntsToBytesSwapOrder(UInt32[] a_in);
    public static Byte[] ConvertUIntsToBytesSwapOrder(UInt32[] a_in, int a_index, int a_length);
    public static Byte[] ConvertLongsToBytes(Int64[] a_in);
    public static Byte[] ConvertLongsToBytes(Int64[] a_in, int a_index, int a_length);
    public static Byte[] ConvertLongsToBytesSwapOrder(Int64[] a_in);
    public static ulong SwapOrder(ulong a_ulong);
    public static long SwapOrder(long a_long);
    public static UInt32 SwapOrder(UInt32 a_int);
    public static int SwapOrder(int a_int);
    public static Byte[] ConvertLongsToBytesSwapOrder(Int64[] a_in, int a_index, int a_length);
    public static Byte[] ConvertULongsToBytes(UInt64[] a_in);
    public static Byte[] ConvertULongsToBytes(UInt64[] a_in, int a_index, int a_length);
    public static void ConvertULongsToBytes(UInt64[] a_in, int a_index, int a_length, Byte[] a_result);
    public static Byte[] ConvertULongsToBytesSwapOrder(UInt64[] a_in);
    public static Byte[] ConvertULongsToBytesSwapOrder(UInt64[] a_in, int a_index, int a_length);
    public static Byte[] ConvertDoublesToBytes(Double[] a_in);
    public static Byte[] ConvertDoublesToBytes(Double[] a_in, int a_index, int a_length);
    public static Byte[] ConvertFloatsToBytes(Single[] a_in);
    public static Byte[] ConvertFloatsToBytes(Single[] a_in, int a_index, int a_length);
    public static string ConvertBytesToHexString(Byte[] a_in, bool a_group);
    public static Byte[] ConvertHexStringToBytes(string a_in);
    public static Char[] ConvertBytesToChars(Byte[] a_in);
    public static Int16[] ConvertBytesToShorts(Byte[] a_in);
    public static UInt16[] ConvertBytesToUShorts(Byte[] a_in);
    public static Single[] ConvertBytesToFloats(Byte[] a_in);
    public static void ConvertBytesToFloats(Byte[] a_in, Single[] a_result);
    public static Single[] ConvertBytesToFloats(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToFloats(Byte[] a_in, int a_index, int a_length, Single[] a_result);
    public static void ConvertBytesToFloats(Byte[] a_in, int a_index_in, int a_length, Single[] a_result, int a_index_out);
    public static double ConvertBytesToDouble(Byte[] a_in, int a_index);
    public static Double[] ConvertBytesToDoubles(Byte[] a_in);
    public static void ConvertBytesToDoubles(Byte[] a_in, Double[] a_result);
    public static Double[] ConvertBytesToDoubles(Byte[] a_in, int a_index, int a_length);
    public static void ConvertBytesToDoubles(Byte[] a_in, int a_index, int a_length, Double[] a_result);
    public static void ConvertBytesToDoubles(Byte[] a_in, int a_index_in, int a_length, Double[] a_result, int a_index_out);
    [ConditionalAttribute("DEBUG")]
private static void Check(I[] a_in, int a_in_size, int a_out_size);
    [ConditionalAttribute("DEBUG")]
private static void Check(I[] a_in, int a_in_size, O[] a_result, int a_out_size);
    [ConditionalAttribute("DEBUG")]
private static void Check(I[] a_in, int a_in_size, int a_out_size, int a_index, int a_length);
    [ConditionalAttribute("DEBUG")]
private static void Check(I[] a_in, int a_in_size, O[] a_result, int a_out_size, int a_index, int a_length);
    [ConditionalAttribute("DEBUG")]
private static void Check(I[] a_in, int a_in_size, O[] a_result, int a_out_size, int a_index_in, int a_length, int a_index_out);
    public static float ConvertBytesToFloat(Byte[] a_in, int a_index);
    public static Byte[] ConvertFloatToBytes(float a_in);
    public static void ConvertFloatToBytes(float a_in, Byte[] a_result, int a_index);
    public static void ConvertCharToBytes(char a_in, Byte[] a_result, int a_index);
    public static void ConvertShortToBytes(short a_in, Byte[] a_result, int a_index);
    public static void ConvertUShortToBytes(ushort a_in, Byte[] a_result, int a_index);
    public static void ConvertIntToBytes(int a_in, Byte[] a_result, int a_index);
    public static void ConvertUIntToBytes(UInt32 a_in, Byte[] a_result, int a_index);
    public static void ConvertLongToBytes(long a_in, Byte[] a_out, int a_index);
    public static void ConvertULongToBytes(ulong a_in, Byte[] a_out, int a_index);
    public static void ConvertULongToBytesSwapOrder(ulong a_in, Byte[] a_out, int a_index);
    public static Byte[] ConvertDoubleToBytes(double a_in);
    public static void ConvertDoubleToBytes(double a_in, Byte[] a_result, int a_index);
}
internal class HashLib.Crypto.BuildIn.MD5CryptoServiceProvider : HashCryptoBuildIn {
    public virtual HMAC GetBuildHMAC();
}
internal class HashLib.Crypto.BuildIn.RIPEMD160Managed : HashCryptoBuildIn {
    public virtual HMAC GetBuildHMAC();
}
internal class HashLib.Crypto.BuildIn.SHA1Cng : HashCryptoBuildIn {
}
internal class HashLib.Crypto.BuildIn.SHA1CryptoServiceProvider : HashCryptoBuildIn {
    public virtual HMAC GetBuildHMAC();
}
internal class HashLib.Crypto.BuildIn.SHA1Managed : HashCryptoBuildIn {
    public virtual HMAC GetBuildHMAC();
}
internal class HashLib.Crypto.BuildIn.SHA256Cng : HashCryptoBuildIn {
}
internal class HashLib.Crypto.BuildIn.SHA256CryptoServiceProvider : HashCryptoBuildIn {
}
internal class HashLib.Crypto.BuildIn.SHA256Managed : HashCryptoBuildIn {
    public virtual HMAC GetBuildHMAC();
}
internal class HashLib.Crypto.BuildIn.SHA384Cng : HashCryptoBuildIn {
}
internal class HashLib.Crypto.BuildIn.SHA384CryptoServiceProvider : HashCryptoBuildIn {
}
internal class HashLib.Crypto.BuildIn.SHA384Managed : HashCryptoBuildIn {
    public virtual HMAC GetBuildHMAC();
}
internal class HashLib.Crypto.BuildIn.SHA512Cng : HashCryptoBuildIn {
}
internal class HashLib.Crypto.BuildIn.SHA512CryptoServiceProvider : HashCryptoBuildIn {
}
internal class HashLib.Crypto.BuildIn.SHA512Managed : HashCryptoBuildIn {
    public virtual HMAC GetBuildHMAC();
}
internal class HashLib.Crypto.Gost : HashCryptoNotBuildIn {
    private static UInt32[] s_sbox1;
    private static UInt32[] s_sbox2;
    private static UInt32[] s_sbox3;
    private static UInt32[] s_sbox4;
    private UInt32[] m_state;
    private UInt32[] m_hash;
    private static Gost();
    private void Compress(UInt32[] m);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    public virtual void Initialize();
}
internal class HashLib.Crypto.HAS160 : HashCryptoNotBuildIn {
    private static Int32[] s_rot;
    private static Int32[] s_tor;
    private static Int32[] s_index;
    private UInt32[] m_hash;
    private static HAS160();
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.Haval : HashCryptoNotBuildIn {
    public static int HAVAL_VERSION;
    protected int m_rounds;
    protected UInt32[] m_hash;
    internal Haval(HashRounds a_rounds, HashSize a_hashSize);
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
    private void TailorDigestBits();
}
internal class HashLib.Crypto.Haval_3_128 : Haval3 {
}
internal class HashLib.Crypto.Haval_3_160 : Haval3 {
}
internal class HashLib.Crypto.Haval_3_192 : Haval3 {
}
internal class HashLib.Crypto.Haval_3_224 : Haval3 {
}
internal class HashLib.Crypto.Haval_3_256 : Haval3 {
}
internal class HashLib.Crypto.Haval_4_128 : Haval4 {
}
internal class HashLib.Crypto.Haval_4_160 : Haval4 {
}
internal class HashLib.Crypto.Haval_4_192 : Haval4 {
}
internal class HashLib.Crypto.Haval_4_224 : Haval4 {
}
internal class HashLib.Crypto.Haval_4_256 : Haval4 {
}
internal class HashLib.Crypto.Haval_5_128 : Haval5 {
}
internal class HashLib.Crypto.Haval_5_160 : Haval5 {
}
internal class HashLib.Crypto.Haval_5_192 : Haval5 {
}
internal class HashLib.Crypto.Haval_5_224 : Haval5 {
}
internal class HashLib.Crypto.Haval_5_256 : Haval5 {
}
internal abstract class HashLib.Crypto.Haval3 : Haval {
    internal Haval3(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal abstract class HashLib.Crypto.Haval4 : Haval {
    internal Haval4(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    private void TransformBlockRounds5(Byte[] a_data, int a_index);
}
internal abstract class HashLib.Crypto.Haval5 : Haval {
    internal Haval5(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.MD2 : HashCryptoNotBuildIn {
    private Byte[] m_state;
    private Byte[] m_checksum;
    private static Byte[] s_pi;
    private static MD2();
    public virtual void Initialize();
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.MD4 : MDBase {
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.MD5 : MDBase {
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal abstract class HashLib.Crypto.MDBase : HashCryptoNotBuildIn {
    protected static UInt32 C1;
    protected static UInt32 C2;
    protected static UInt32 C3;
    protected static UInt32 C4;
    protected static UInt32 C5;
    protected static UInt32 C6;
    protected static UInt32 C7;
    protected static UInt32 C8;
    protected UInt32[] m_state;
    protected MDBase(int a_stateLength, int a_hashSize);
    public virtual void Initialize();
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
}
internal class HashLib.Crypto.RIPEMD128 : MDBase {
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.RIPEMD160 : MDBase {
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.RIPEMD256 : MDBase {
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.RIPEMD320 : MDBase {
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA1 : HashCryptoNotBuildIn {
    private UInt32[] m_state;
    public virtual void Initialize();
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA224 : SHA256Base {
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA256 : SHA256Base {
    public virtual void Initialize();
    protected virtual Byte[] GetResult();
}
internal abstract class HashLib.Crypto.SHA256Base : HashCryptoNotBuildIn {
    protected UInt32[] m_state;
    private static UInt32[] s_K;
    public SHA256Base(int a_hashSize);
    private static SHA256Base();
    protected virtual void Finish();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA3.Blake224 : Blake256Base {
}
internal class HashLib.Crypto.SHA3.Blake256 : Blake256Base {
}
internal abstract class HashLib.Crypto.SHA3.Blake256Base : BlakeBase {
    private static UInt32[] m_initial_state_256;
    private static UInt32[] m_initial_state_224;
    private UInt32[] m_state;
    public Blake256Base(HashSize a_hashSize);
    private static Blake256Base();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Blake384 : Blake512Base {
}
internal class HashLib.Crypto.SHA3.Blake512 : Blake512Base {
}
internal abstract class HashLib.Crypto.SHA3.Blake512Base : BlakeBase {
    private static UInt64[] m_initial_state_384;
    private static UInt64[] m_initial_state_512;
    private UInt64[] m_state;
    public Blake512Base(HashSize a_hashSize);
    private static Blake512Base();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.BlakeBase : HashCryptoNotBuildIn {
    protected bool m_nullt;
    public BlakeBase(HashSize a_hashSize, int a_blockSize);
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.BlueMidnightWish224 : BlueMidnightWish256Base {
}
internal class HashLib.Crypto.SHA3.BlueMidnightWish256 : BlueMidnightWish256Base {
}
internal abstract class HashLib.Crypto.SHA3.BlueMidnightWish256Base : BlueMidnightWishBase {
    private static UInt32[] s_initial_state_224;
    private static UInt32[] s_initial_state_256;
    private UInt32[] m_state;
    public BlueMidnightWish256Base(HashSize a_hashSize);
    private static BlueMidnightWish256Base();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void FinalCompression();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.BlueMidnightWish384 : BlueMidnightWish512Base {
}
internal class HashLib.Crypto.SHA3.BlueMidnightWish512 : BlueMidnightWish512Base {
}
internal abstract class HashLib.Crypto.SHA3.BlueMidnightWish512Base : BlueMidnightWishBase {
    private static UInt64[] s_initial_state_384;
    private static UInt64[] s_initial_state_512;
    private UInt64[] m_state;
    public BlueMidnightWish512Base(HashSize a_hashSize);
    private static BlueMidnightWish512Base();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void FinalCompression();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.BlueMidnightWishBase : HashCryptoNotBuildIn {
    public BlueMidnightWishBase(int a_blockSize, HashSize a_hashSize);
    public virtual void Initialize();
    protected virtual void Finish();
    protected abstract virtual void FinalCompression();
}
internal abstract class HashLib.Crypto.SHA3.CubeHash : HashCryptoNotBuildIn {
    private static int ROUNDS;
    private UInt32[] m_state;
    private static UInt32[][] m_inits;
    private static CubeHash();
    public CubeHash(HashSize a_hashSize);
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA3.CubeHash224 : CubeHash {
}
internal class HashLib.Crypto.SHA3.CubeHash256 : CubeHash {
}
internal class HashLib.Crypto.SHA3.CubeHash384 : CubeHash {
}
internal class HashLib.Crypto.SHA3.CubeHash512 : CubeHash {
}
internal class HashLib.Crypto.SHA3.Echo224 : Echo256Base {
}
internal class HashLib.Crypto.SHA3.Echo256 : Echo256Base {
}
internal abstract class HashLib.Crypto.SHA3.Echo256Base : EchoBase {
    public Echo256Base(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Echo384 : Echo512Base {
}
internal class HashLib.Crypto.SHA3.Echo512 : Echo512Base {
}
internal abstract class HashLib.Crypto.SHA3.Echo512Base : EchoBase {
    public Echo512Base(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.EchoBase : HashCryptoNotBuildIn {
    protected UInt32[] s_T0;
    protected UInt32[] s_T1;
    protected UInt32[] s_T2;
    protected UInt32[] s_T3;
    protected UInt64[] m_state;
    protected bool m_last_block;
    public EchoBase(HashSize a_hashSize, int a_blockSize);
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Fugue224 : Fugue256Base {
    private static UInt32[] s_IV224;
    private static Fugue224();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Fugue256 : Fugue256Base {
    private static UInt32[] s_IV256;
    private static Fugue256();
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.Fugue256Base : FugueBase {
    protected static UInt64[] s_aes_style_table0;
    protected static UInt64[] s_aes_style_table1;
    protected static UInt64[] s_aes_style_table2;
    protected static UInt64[] s_aes_style_table3;
    protected Fugue256Base(HashSize a_hashSize, int a_blockSize);
    private static Fugue256Base();
    protected virtual Byte[] GetResult();
    protected virtual void TransformBlocks(Byte[] a_data, int a_index, int a_length);
}
internal class HashLib.Crypto.SHA3.Fugue384 : Fugue512Base {
    private static UInt32[] s_IV384;
    private static Fugue384();
    protected virtual Byte[] GetResult();
    protected virtual void TransformBlocks(Byte[] a_data, int a_index, int a_length);
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Fugue512 : Fugue512Base {
    private static UInt32[] s_IV512;
    private static Fugue512();
    protected virtual Byte[] GetResult();
    protected virtual void TransformBlocks(Byte[] a_data, int a_index, int a_length);
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.Fugue512Base : FugueBase {
    protected static UInt32[] s_aes_style_table0;
    protected static UInt32[] s_aes_style_table1;
    protected static UInt32[] s_aes_style_table2;
    protected static UInt32[] s_aes_style_table3;
    protected Fugue512Base(HashSize a_hashSize, int a_blockSize);
    private static Fugue512Base();
}
internal abstract class HashLib.Crypto.SHA3.FugueBase : HashCryptoNotBuildIn {
    protected int m_base;
    protected UInt32[] m_state;
    public FugueBase(HashSize a_hashSize, int a_blockSize);
    protected virtual void Finish();
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
    public virtual HashResult ComputeBytes(Byte[] a_data);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected abstract virtual void TransformBlocks(Byte[] a_data, int a_index, int a_length);
}
internal class HashLib.Crypto.SHA3.Groestl224 : Groestl256Base {
}
internal class HashLib.Crypto.SHA3.Groestl256 : Groestl256Base {
}
internal abstract class HashLib.Crypto.SHA3.Groestl256Base : GroestlBase {
    public Groestl256Base(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void OutputTransformation();
}
internal class HashLib.Crypto.SHA3.Groestl384 : Groestl512Base {
}
internal class HashLib.Crypto.SHA3.Groestl512 : Groestl512Base {
}
internal abstract class HashLib.Crypto.SHA3.Groestl512Base : GroestlBase {
    public Groestl512Base(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void OutputTransformation();
}
internal abstract class HashLib.Crypto.SHA3.GroestlBase : HashCryptoNotBuildIn {
    protected static UInt64[] s_T;
    protected UInt64[] m_state;
    public GroestlBase(HashSize a_hashSize, int a_blockSize);
    private static GroestlBase();
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    protected abstract virtual void OutputTransformation();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Hamsi224 : Hamsi256Base {
}
internal class HashLib.Crypto.SHA3.Hamsi256 : Hamsi256Base {
}
internal abstract class HashLib.Crypto.SHA3.Hamsi256Base : HamsiBase {
    public Hamsi256Base(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA3.Hamsi384 : Hamsi512Base {
}
internal class HashLib.Crypto.SHA3.Hamsi512 : Hamsi512Base {
}
internal abstract class HashLib.Crypto.SHA3.Hamsi512Base : HamsiBase {
    public Hamsi512Base(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal abstract class HashLib.Crypto.SHA3.HamsiBase : HashCryptoNotBuildIn {
    protected static UInt32[] s_alpha1;
    protected static UInt32[] s_alpha2;
    protected static UInt32[] s_IV224;
    protected static UInt32[] s_IV256;
    protected static UInt32[] s_IV384;
    protected static UInt32[] s_IV512;
    protected static UInt32[0...,0...] s_T256;
    protected static UInt32[0...,0...] s_T512;
    protected UInt32[] m_state;
    protected int m_rounds;
    protected UInt32[] m_alpha;
    public HamsiBase(HashSize a_hashSize, int a_blockSize);
    private static HamsiBase();
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.JH224 : JHBase {
}
internal class HashLib.Crypto.SHA3.JH256 : JHBase {
}
internal class HashLib.Crypto.SHA3.JH384 : JHBase {
}
internal class HashLib.Crypto.SHA3.JH512 : JHBase {
}
internal abstract class HashLib.Crypto.SHA3.JHBase : HashCryptoNotBuildIn {
    private static UInt64[] s_bitslices;
    private static UInt64[][] initial_states;
    protected UInt64[] m_state;
    public JHBase(HashSize a_hashSize);
    private static JHBase();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.Keccak : HashCryptoNotBuildIn {
    private UInt64[] m_state;
    public Keccak(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Keccak224 : Keccak {
}
internal class HashLib.Crypto.SHA3.Keccak256 : Keccak {
}
internal class HashLib.Crypto.SHA3.Keccak384 : Keccak {
}
internal class HashLib.Crypto.SHA3.Keccak512 : Keccak {
}
internal class HashLib.Crypto.SHA3.Luffa224 : Luffa256Base {
}
internal class HashLib.Crypto.SHA3.Luffa256 : Luffa256Base {
}
internal abstract class HashLib.Crypto.SHA3.Luffa256Base : LuffaBase {
    public Luffa256Base(HashSize a_hashSize);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA3.Luffa384 : LuffaBase {
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA3.Luffa512 : LuffaBase {
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal abstract class HashLib.Crypto.SHA3.LuffaBase : HashCryptoNotBuildIn {
    private static UInt32[] s_IV;
    protected static UInt32[] s_CNS;
    protected UInt32[] m_state;
    protected int m_result_blocks;
    protected int m_iv_length;
    public LuffaBase(HashSize a_hashSize);
    private static LuffaBase();
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.Shabal : HashCryptoNotBuildIn {
    private static UInt32[] s_A_init_224;
    private static UInt32[] s_B_init_224;
    private static UInt32[] s_C_init_224;
    private static UInt32[] s_A_init_256;
    private static UInt32[] s_B_init_256;
    private static UInt32[] s_C_init_256;
    private static UInt32[] s_A_init_384;
    private static UInt32[] s_B_init_384;
    private static UInt32[] s_C_init_384;
    private static UInt32[] s_A_init_512;
    private static UInt32[] s_B_init_512;
    private static UInt32[] s_C_init_512;
    private UInt32[] m_A;
    private UInt32[] m_B;
    private UInt32[] m_C;
    public Shabal(HashSize a_hashSize);
    private static Shabal();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.Shabal224 : Shabal {
}
internal class HashLib.Crypto.SHA3.Shabal256 : Shabal {
}
internal class HashLib.Crypto.SHA3.Shabal384 : Shabal {
}
internal class HashLib.Crypto.SHA3.Shabal512 : Shabal {
}
internal class HashLib.Crypto.SHA3.SHAvite3_224 : SHAvite3_256Base {
}
internal class HashLib.Crypto.SHA3.SHAvite3_256 : SHAvite3_256Base {
}
internal abstract class HashLib.Crypto.SHA3.SHAvite3_256Base : SHAvite3Base {
    private static UInt32[] IV_224;
    private static UInt32[] IV_256;
    public SHAvite3_256Base(HashSize a_hashSize);
    private static SHAvite3_256Base();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void Finish();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.SHAvite3_384 : SHAvite3_512Base {
}
internal class HashLib.Crypto.SHA3.SHAvite3_512 : SHAvite3_512Base {
}
internal abstract class HashLib.Crypto.SHA3.SHAvite3_512Base : SHAvite3Base {
    private static UInt32[] IV_384;
    private static UInt32[] IV_512;
    public SHAvite3_512Base(HashSize a_hashSize);
    private static SHAvite3_512Base();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual void Finish();
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.SHAvite3Base : HashCryptoNotBuildIn {
    protected static UInt32[] Table0;
    protected static UInt32[] Table1;
    protected static UInt32[] Table2;
    protected static UInt32[] Table3;
    protected UInt32[] m_state;
    public SHAvite3Base(HashSize a_hashSize, int a_blockSize);
    private static SHAvite3Base();
    protected virtual Byte[] GetResult();
}
internal class HashLib.Crypto.SHA3.SIMD224 : SIMD256Base {
}
internal class HashLib.Crypto.SHA3.SIMD256 : SIMD256Base {
}
internal abstract class HashLib.Crypto.SHA3.SIMD256Base : SIMDBase {
    private static UInt32[] IV_224;
    private static UInt32[] IV_256;
    private static UInt32[] P4;
    private static UInt32[] Q4;
    private static Int32[] FFT64_8_8_Twiddle;
    private static Int32[] FFT128_2_64_Twiddle;
    public SIMD256Base(HashSize a_hashSize);
    private static SIMD256Base();
    private void Round4(Int32[] a_y, int a_i, int a_r, int a_s, int a_t, int a_u);
    private void FFT64(Int32[] a_y, int a_index);
    protected virtual void TransformBlock(Byte[] a_data, int a_index, bool a_final);
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA3.SIMD384 : SIMD512Base {
}
internal class HashLib.Crypto.SHA3.SIMD512 : SIMD512Base {
}
internal abstract class HashLib.Crypto.SHA3.SIMD512Base : SIMDBase {
    private static UInt32[] IV_384;
    private static UInt32[] IV_512;
    private static UInt32[] P8;
    private static UInt32[] Q8;
    private static Int32[] FFT128_8_16_Twiddle;
    private static Int32[] FFT256_2_128_Twiddle;
    private static Int32[] p8_xor;
    public SIMD512Base(HashSize a_hashSize);
    private static SIMD512Base();
    private void Round8(Int32[] a_y, int a_i, int a_r, int a_s, int a_t, int a_u);
    private void FFT16(Int32[] a_y, int a_index, int stripe);
    private void FFT128(Int32[] a_y, int a_index);
    protected virtual void TransformBlock(Byte[] a_data, int a_index, bool a_final);
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA3.SIMDBase : HashCryptoNotBuildIn {
    protected UInt32[] m_state;
    public SIMDBase(HashSize a_hashSize, int a_blockSize);
    protected void FFT8(Int32[] a_y, int a_index, int a_stripe);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    protected abstract virtual void TransformBlock(Byte[] a_data, int a_index, bool a_final);
}
internal class HashLib.Crypto.SHA3.Skein224 : SkeinBase {
}
internal class HashLib.Crypto.SHA3.Skein256 : SkeinBase {
}
internal class HashLib.Crypto.SHA3.Skein384 : SkeinBase {
}
internal class HashLib.Crypto.SHA3.Skein512 : SkeinBase {
}
internal abstract class HashLib.Crypto.SHA3.SkeinBase : HashCryptoNotBuildIn {
    private static UInt64[] SKEIN_IV_224;
    private static UInt64[] SKEIN_IV_256;
    private static UInt64[] SKEIN_IV_384;
    private static UInt64[] SKEIN_IV_512;
    protected ulong m_temp2;
    protected UInt64[] m_state;
    public SkeinBase(HashSize a_hashSize);
    private static SkeinBase();
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.SHA384 : SHA512Base {
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal class HashLib.Crypto.SHA512 : SHA512Base {
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
}
internal abstract class HashLib.Crypto.SHA512Base : HashCryptoNotBuildIn {
    protected static UInt64[] s_K;
    protected UInt64[] m_state;
    protected SHA512Base(int a_hashSize);
    private static SHA512Base();
    public virtual void Initialize();
    protected virtual void Finish();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal abstract class HashLib.Crypto.Snefru : HashCryptoNotBuildIn {
    private static Int32[] s_shifts;
    private static UInt32[][] s_boxes;
    private UInt32[] m_state;
    private int m_rounds;
    protected Snefru(HashRounds a_rounds, HashSize a_hashSize);
    private static Snefru();
    public virtual void Initialize();
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.Snefru_4_128 : Snefru {
}
internal class HashLib.Crypto.Snefru_4_256 : Snefru {
}
internal class HashLib.Crypto.Snefru_8_128 : Snefru {
}
internal class HashLib.Crypto.Snefru_8_256 : Snefru {
}
internal abstract class HashLib.Crypto.Tiger : HashCryptoNotBuildIn {
    private static UInt64[] s_T1;
    private static UInt64[] s_T2;
    private static UInt64[] s_T3;
    private static UInt64[] s_T4;
    protected UInt64[] m_hash;
    private int m_rounds;
    public Tiger(HashRounds a_rounds);
    private static Tiger();
    protected virtual Byte[] GetResult();
    protected virtual void Finish();
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.Tiger_3_192 : Tiger {
}
internal class HashLib.Crypto.Tiger_4_192 : Tiger {
}
internal class HashLib.Crypto.Tiger2 : HashCryptoNotBuildIn {
    private static UInt64[] s_T1;
    private static UInt64[] s_T2;
    private static UInt64[] s_T3;
    private static UInt64[] s_T4;
    private UInt64[] m_hash;
    private static Tiger2();
    protected virtual void Finish();
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal class HashLib.Crypto.Whirlpool : HashCryptoNotBuildIn {
    private static int ROUNDS;
    private static UInt32 REDUCTION_POLYNOMIAL;
    private static UInt32[] s_SBOX;
    private static UInt64[] s_C0;
    private static UInt64[] s_C1;
    private static UInt64[] s_C2;
    private static UInt64[] s_C3;
    private static UInt64[] s_C4;
    private static UInt64[] s_C5;
    private static UInt64[] s_C6;
    private static UInt64[] s_C7;
    private static UInt64[] s_rc;
    private UInt64[] m_hash;
    private static Whirlpool();
    private static ulong packIntoULong(UInt32 b7, UInt32 b6, UInt32 b5, UInt32 b4, UInt32 b3, UInt32 b2, UInt32 b1, UInt32 b0);
    private static UInt32 maskWithReductionPolynomial(UInt32 input);
    protected virtual Byte[] GetResult();
    public virtual void Initialize();
    protected virtual void Finish();
    protected virtual void TransformBlock(Byte[] a_data, int a_index);
}
internal abstract class HashLib.Hash : object {
    private int m_blockSize;
    private int m_hashSize;
    internal static int BUFFER_SIZE;
    public string Name { get; }
    public int BlockSize { get; }
    public int HashSize { get; }
    protected Hash(int a_hashSize, int a_blockSize);
    private static Hash();
    public virtual string get_Name();
    public virtual int get_BlockSize();
    public virtual int get_HashSize();
    public virtual HashResult ComputeObject(object a_data);
    public virtual HashResult ComputeByte(byte a_data);
    public virtual HashResult ComputeChar(char a_data);
    public virtual HashResult ComputeShort(short a_data);
    public virtual HashResult ComputeUShort(ushort a_data);
    public virtual HashResult ComputeInt(int a_data);
    public virtual HashResult ComputeUInt(UInt32 a_data);
    public virtual HashResult ComputeLong(long a_data);
    public virtual HashResult ComputeULong(ulong a_data);
    public virtual HashResult ComputeFloat(float a_data);
    public virtual HashResult ComputeDouble(double a_data);
    public virtual HashResult ComputeString(string a_data);
    public virtual HashResult ComputeChars(Char[] a_data);
    public virtual HashResult ComputeShorts(Int16[] a_data);
    public virtual HashResult ComputeUShorts(UInt16[] a_data);
    public virtual HashResult ComputeInts(Int32[] a_data);
    public virtual HashResult ComputeUInts(UInt32[] a_data);
    public virtual HashResult ComputeLongs(Int64[] a_data);
    public virtual HashResult ComputeULongs(UInt64[] a_data);
    public virtual HashResult ComputeDoubles(Double[] a_data);
    public virtual HashResult ComputeFloats(Single[] a_data);
    public virtual HashResult ComputeChar(char a_data, Encoding a_encoding);
    public virtual HashResult ComputeString(string a_data, Encoding a_encoding);
    public virtual HashResult ComputeChars(Char[] a_data, Encoding a_encoding);
    public virtual HashResult ComputeBytes(Byte[] a_data);
    public sealed virtual void TransformObject(object a_data);
    public sealed virtual void TransformByte(byte a_data);
    public sealed virtual void TransformChar(char a_data);
    public sealed virtual void TransformShort(short a_data);
    public sealed virtual void TransformUShort(ushort a_data);
    public sealed virtual void TransformInt(int a_data);
    public sealed virtual void TransformUInt(UInt32 a_data);
    public sealed virtual void TransformLong(long a_data);
    public sealed virtual void TransformULong(ulong a_data);
    public sealed virtual void TransformFloat(float a_data);
    public sealed virtual void TransformDouble(double a_data);
    public sealed virtual void TransformString(string a_data);
    public sealed virtual void TransformChars(Char[] a_data);
    public sealed virtual void TransformShorts(Int16[] a_data);
    public sealed virtual void TransformUShorts(UInt16[] a_data);
    public sealed virtual void TransformInts(Int32[] a_data);
    public sealed virtual void TransformUInts(UInt32[] a_data);
    public sealed virtual void TransformLongs(Int64[] a_data);
    public sealed virtual void TransformULongs(UInt64[] a_data);
    public sealed virtual void TransformDoubles(Double[] a_data);
    public sealed virtual void TransformFloats(Single[] a_data);
    public sealed virtual void TransformChar(char a_data, Encoding a_encoding);
    public sealed virtual void TransformString(string a_data, Encoding a_encoding);
    public sealed virtual void TransformChars(Char[] a_data, Encoding a_encoding);
    public sealed virtual void TransformStream(Stream a_stream, long a_length);
    public sealed virtual HashResult ComputeStream(Stream a_stream, long a_length);
    public sealed virtual void TransformFile(string a_fileName, long a_from, long a_length);
    public sealed virtual void TransformBytes(Byte[] a_data);
    public sealed virtual void TransformBytes(Byte[] a_data, int a_index);
    public sealed virtual HashResult ComputeFile(string a_fileName, long a_from, long a_length);
    public abstract virtual void Initialize();
    public abstract virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public abstract virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.AP : Hash {
    private UInt32 m_hash;
    private int m_index;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.Bernstein : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.Bernstein1 : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.BKDR : Hash {
    private static int SEED;
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.DEK : MultipleTransformNonBlock {
    public virtual HashResult ComputeBytes(Byte[] a_data);
}
internal class HashLib.Hash32.DJB : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.DotNet : MultipleTransformNonBlock {
    public virtual HashResult ComputeBytes(Byte[] a_data);
    public virtual HashResult ComputeByte(byte a_data);
    public virtual HashResult ComputeChar(char a_data);
    public virtual HashResult ComputeShort(short a_data);
    public virtual HashResult ComputeUShort(ushort a_data);
    public virtual HashResult ComputeInt(int a_data);
    public virtual HashResult ComputeUInt(UInt32 a_data);
    public virtual HashResult ComputeLong(long a_data);
    public virtual HashResult ComputeULong(ulong a_data);
    public virtual HashResult ComputeFloat(float a_data);
    public virtual HashResult ComputeDouble(double a_data);
    public virtual HashResult ComputeString(string a_data);
    public virtual HashResult ComputeChars(Char[] a_data);
    public virtual HashResult ComputeShorts(Int16[] a_data);
    public virtual HashResult ComputeUShorts(UInt16[] a_data);
    public virtual HashResult ComputeInts(Int32[] a_data);
    public virtual HashResult ComputeUInts(UInt32[] a_data);
    public virtual HashResult ComputeLongs(Int64[] a_data);
    public virtual HashResult ComputeULongs(UInt64[] a_data);
    public virtual HashResult ComputeDoubles(Double[] a_data);
    public virtual HashResult ComputeFloats(Single[] a_data);
    public virtual HashResult ComputeChar(char a_data, Encoding a_encoding);
    public virtual HashResult ComputeString(string a_data, Encoding a_encoding);
    public virtual HashResult ComputeChars(Char[] a_data, Encoding a_encoding);
}
internal class HashLib.Hash32.ELF : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.FNV : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.FNV1a : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.Jenkins3 : MultipleTransformNonBlock {
    public virtual HashResult ComputeBytes(Byte[] a_data);
}
internal class HashLib.Hash32.JS : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.Murmur2 : MultipleTransformNonBlock {
    private static UInt32 M;
    private static int R;
    private static UInt32 SEED;
    public virtual HashResult ComputeBytes(Byte[] a_data);
    public virtual HashResult ComputeByte(byte a_data);
    public virtual HashResult ComputeChar(char a_data);
    public virtual HashResult ComputeShort(short a_data);
    public virtual HashResult ComputeUShort(ushort a_data);
    public virtual HashResult ComputeInt(int a_data);
    public virtual HashResult ComputeUInt(UInt32 a_data);
    public virtual HashResult ComputeLong(long a_data);
    public virtual HashResult ComputeULong(ulong a_data);
    public virtual HashResult ComputeFloat(float a_data);
    public virtual HashResult ComputeDouble(double a_data);
    public virtual HashResult ComputeString(string a_data);
    public virtual HashResult ComputeChars(Char[] a_data);
    public virtual HashResult ComputeShorts(Int16[] a_data);
    public virtual HashResult ComputeUShorts(UInt16[] a_data);
    public virtual HashResult ComputeInts(Int32[] a_data);
    public virtual HashResult ComputeUInts(UInt32[] a_data);
    public virtual HashResult ComputeLongs(Int64[] a_data);
    public virtual HashResult ComputeULongs(UInt64[] a_data);
    public virtual HashResult ComputeDoubles(Double[] a_data);
    public virtual HashResult ComputeFloats(Single[] a_data);
    public virtual HashResult ComputeChar(char a_data, Encoding a_encoding);
    public virtual HashResult ComputeString(string a_data, Encoding a_encoding);
    public virtual HashResult ComputeChars(Char[] a_data, Encoding a_encoding);
}
internal class HashLib.Hash32.OneAtTime : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.PJW : Hash {
    private static int BitsInUnsignedInt;
    private static int ThreeQuarters;
    private static int OneEighth;
    private static UInt32 HighBits;
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.Rotating : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.RS : Hash {
    private static UInt32 B;
    private UInt32 m_a;
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.SDBM : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.ShiftAndXor : Hash {
    private UInt32 m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash32.SuperFast : MultipleTransformNonBlock {
    public virtual HashResult ComputeBytes(Byte[] a_data);
}
internal class HashLib.Hash64.FNV1a64 : Hash {
    private ulong m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash64.FNV64 : Hash {
    private ulong m_hash;
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
}
internal class HashLib.Hash64.Murmur2_64 : MultipleTransformNonBlock {
    protected static ulong M;
    protected static int R;
    protected static UInt32 SEED;
    public virtual HashResult ComputeBytes(Byte[] a_data);
}
internal class HashLib.HashAlgorithmWrapper : HashAlgorithm {
    private IHash m_hash;
    public HashAlgorithmWrapper(IHash a_hash);
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
internal class HashLib.HashBuffer : object {
    private Byte[] m_data;
    private int m_pos;
    public bool IsEmpty { get; }
    public int Pos { get; }
    public int Length { get; }
    public bool IsFull { get; }
    public HashBuffer(int a_length);
    public void Initialize();
    public Byte[] GetBytes();
    public Byte[] GetBytesZeroPadded();
    public bool Feed(Byte[] a_data, Int32& a_startIndex, Int32& a_length, UInt64& a_processedBytes);
    public bool Feed(Byte[] a_data, Int32& a_startIndex, Int32& a_length);
    public bool Feed(Byte[] a_data, int a_length);
    public bool Feed(byte a_data);
    public bool get_IsEmpty();
    public int get_Pos();
    public int get_Length();
    public bool get_IsFull();
}
internal abstract class HashLib.HashCrypto : Hash {
    protected HashCrypto(int a_hashSize, int a_blockSize);
}
internal class HashLib.HashCryptoBuildIn : HashCrypto {
    protected static Byte[] EMPTY;
    protected HashAlgorithm m_hashAlgorithm;
    public HashCryptoBuildIn(HashAlgorithm a_hashAlgorithm, int a_blockSize);
    private static HashCryptoBuildIn();
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
    public virtual HMAC GetBuildHMAC();
}
internal abstract class HashLib.HashCryptoNotBuildIn : HashCrypto {
    protected HashBuffer m_buffer;
    protected ulong m_processedBytes;
    protected HashCryptoNotBuildIn(int a_hashSize, int a_blockSize, int a_bufferSize);
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual void Initialize();
    public virtual HashResult TransformFinal();
    protected void TransformBuffer();
    protected abstract virtual void Finish();
    protected abstract virtual void TransformBlock(Byte[] a_data, int a_index);
    protected abstract virtual Byte[] GetResult();
}
public static class HashLib.Hashes : object {
    public static ReadOnlyCollection`1<Type> All;
    public static ReadOnlyCollection`1<Type> AllUnique;
    public static ReadOnlyCollection`1<Type> Hash32;
    public static ReadOnlyCollection`1<Type> Hash64;
    public static ReadOnlyCollection`1<Type> CryptoAll;
    public static ReadOnlyCollection`1<Type> CryptoNotBuildIn;
    public static ReadOnlyCollection`1<Type> CryptoBuildIn;
    public static ReadOnlyCollection`1<Type> HMACCryptoBuildIn;
    public static ReadOnlyCollection`1<Type> NonBlock;
    public static ReadOnlyCollection`1<Type> FastComputes;
    public static ReadOnlyCollection`1<Type> Checksums;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate2a;
    private static Hashes();
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__0(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__1(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__2(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__3(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__4(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__5(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__6(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__7(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__8(Type hf);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__9(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__a(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__c(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__d(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__e(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__f(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__10(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__11(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__12(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__13(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__14(Type hf);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__15(Type hf);
}
public static class HashLib.HashFactory : object {
}
public class HashLib.HashResult : object {
    private Byte[] m_hash;
    public HashResult(UInt32 a_hash);
    internal HashResult(int a_hash);
    public HashResult(ulong a_hash);
    internal HashResult(long a_hash);
    public HashResult(Byte[] a_hash);
    public HashResult(string a_hash);
    public Byte[] GetBytes();
    public UInt32 GetUInt();
    public ulong GetULong();
    public virtual string ToString();
    public virtual bool Equals(object a_obj);
    public bool Equals(HashResult a_hashResult);
    public virtual int GetHashCode();
    public static bool op_Equality(HashResult a_left, HashResult a_right);
    public static bool op_Inequality(HashResult a_left, HashResult a_right);
    private static bool SameArrays(Byte[] a_ar1, Byte[] a_ar2);
}
public enum HashLib.HashRounds : Enum {
    public int value__;
    public static HashRounds Rounds3;
    public static HashRounds Rounds4;
    public static HashRounds Rounds5;
    public static HashRounds Rounds8;
}
public enum HashLib.HashSize : Enum {
    public int value__;
    public static HashSize HashSize128;
    public static HashSize HashSize160;
    public static HashSize HashSize192;
    public static HashSize HashSize224;
    public static HashSize HashSize256;
    public static HashSize HashSize384;
    public static HashSize HashSize512;
}
internal abstract class HashLib.HMACBase : Hash {
    private Byte[] m_key;
    protected bool m_bTransforming;
    public Byte[] Key { get; public set; }
    public HMACBase(int a_hashSize, int a_blockSize);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
}
internal class HashLib.HMACBuildInAdapter : HMACBase {
    protected static Byte[] EMPTY;
    protected HMAC m_hmac;
    public string Name { get; }
    public HMACBuildInAdapter(HMAC a_hmac, int a_blockSize);
    private static HMACBuildInAdapter();
    public virtual void Initialize();
    public virtual HashResult TransformFinal();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual string get_Name();
}
internal class HashLib.HMACNotBuildInAdapter : HMACBase {
    private Byte[] m_opad;
    private Byte[] m_ipad;
    private IHash m_hash;
    public string Name { get; }
    internal HMACNotBuildInAdapter(IHash a_underlyingHash);
    private void UpdatePads();
    public virtual void Initialize();
    public virtual HashResult TransformFinal();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual string get_Name();
}
public interface HashLib.IBlockHash {
}
public interface HashLib.IChecksum {
}
public interface HashLib.ICrypto {
}
public interface HashLib.ICryptoBuildIn {
}
public interface HashLib.ICryptoNotBuildIn {
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static class HashLib.IEnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Take(IEnumerable`1<T> a_enumerable, int a_from, int a_count);
}
public interface HashLib.IFastHashCodes {
}
public interface HashLib.IHash {
    public string Name { get; }
    public int BlockSize { get; }
    public int HashSize { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_BlockSize();
    public abstract virtual int get_HashSize();
    public abstract virtual HashResult ComputeObject(object a_data);
    public abstract virtual HashResult ComputeByte(byte a_data);
    public abstract virtual HashResult ComputeChar(char a_data);
    public abstract virtual HashResult ComputeChar(char a_data, Encoding a_encoding);
    public abstract virtual HashResult ComputeShort(short a_data);
    public abstract virtual HashResult ComputeUShort(ushort a_data);
    public abstract virtual HashResult ComputeInt(int a_data);
    public abstract virtual HashResult ComputeUInt(UInt32 a_data);
    public abstract virtual HashResult ComputeLong(long a_data);
    public abstract virtual HashResult ComputeULong(ulong a_data);
    public abstract virtual HashResult ComputeFloat(float a_data);
    public abstract virtual HashResult ComputeDouble(double a_data);
    public abstract virtual HashResult ComputeString(string a_data);
    public abstract virtual HashResult ComputeString(string a_data, Encoding a_encoding);
    public abstract virtual HashResult ComputeBytes(Byte[] a_data);
    public abstract virtual HashResult ComputeChars(Char[] a_data);
    public abstract virtual HashResult ComputeChars(Char[] a_data, Encoding a_encoding);
    public abstract virtual HashResult ComputeShorts(Int16[] a_data);
    public abstract virtual HashResult ComputeUShorts(UInt16[] a_data);
    public abstract virtual HashResult ComputeInts(Int32[] a_data);
    public abstract virtual HashResult ComputeUInts(UInt32[] a_data);
    public abstract virtual HashResult ComputeLongs(Int64[] a_data);
    public abstract virtual HashResult ComputeULongs(UInt64[] a_data);
    public abstract virtual HashResult ComputeDoubles(Double[] a_data);
    public abstract virtual HashResult ComputeFloats(Single[] a_data);
    public abstract virtual HashResult ComputeStream(Stream a_stream, long a_length);
    public abstract virtual HashResult ComputeFile(string a_fileName, long a_from, long a_length);
    public abstract virtual void Initialize();
    public abstract virtual void TransformBytes(Byte[] a_data);
    public abstract virtual void TransformBytes(Byte[] a_data, int a_index);
    public abstract virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public abstract virtual HashResult TransformFinal();
    public abstract virtual void TransformObject(object a_data);
    public abstract virtual void TransformByte(byte a_data);
    public abstract virtual void TransformChar(char a_data);
    public abstract virtual void TransformChar(char a_data, Encoding a_encoding);
    public abstract virtual void TransformShort(short a_data);
    public abstract virtual void TransformUShort(ushort a_data);
    public abstract virtual void TransformInt(int a_data);
    public abstract virtual void TransformUInt(UInt32 a_data);
    public abstract virtual void TransformLong(long a_data);
    public abstract virtual void TransformULong(ulong a_data);
    public abstract virtual void TransformFloat(float a_data);
    public abstract virtual void TransformDouble(double a_data);
    public abstract virtual void TransformString(string a_data);
    public abstract virtual void TransformString(string a_data, Encoding a_encoding);
    public abstract virtual void TransformChars(Char[] a_data);
    public abstract virtual void TransformChars(Char[] a_data, Encoding a_encoding);
    public abstract virtual void TransformShorts(Int16[] a_data);
    public abstract virtual void TransformUShorts(UInt16[] a_data);
    public abstract virtual void TransformInts(Int32[] a_data);
    public abstract virtual void TransformUInts(UInt32[] a_data);
    public abstract virtual void TransformLongs(Int64[] a_data);
    public abstract virtual void TransformULongs(UInt64[] a_data);
    public abstract virtual void TransformDoubles(Double[] a_data);
    public abstract virtual void TransformFloats(Single[] a_data);
    public abstract virtual void TransformStream(Stream a_stream, long a_length);
    public abstract virtual void TransformFile(string a_fileName, long a_from, long a_length);
}
public interface HashLib.IHash32 {
}
public interface HashLib.IHash64 {
}
public interface HashLib.IHasHMACBuildIn {
}
public interface HashLib.IHMAC {
    public Byte[] Key { get; public set; }
    public abstract virtual Byte[] get_Key();
    public abstract virtual void set_Key(Byte[] value);
}
public interface HashLib.INonBlockHash {
}
internal abstract class HashLib.MultipleTransformNonBlock : Hash {
    private List`1<ArraySegment`1<byte>> m_list;
    public MultipleTransformNonBlock(int a_hashSize, int a_blockSize);
    public virtual void Initialize();
    public virtual void TransformBytes(Byte[] a_data, int a_index, int a_length);
    public virtual HashResult TransformFinal();
    private Byte[] Aggregate();
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static class HashLib.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsDerivedFrom(Type a_type, Type a_baseType);
    [ExtensionAttribute]
public static bool IsImplementingInterface(Type a_type, Type a_interfaceType);
}
