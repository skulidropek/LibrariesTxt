internal static class FX20Assembly : object {
    internal static string Version;
}
internal static class FX35Assembly : object {
    internal static string Version;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal static class Microsoft.Build.Shared.AssemblyResources : object {
    private static ResourceManager resources;
    private static ResourceManager sharedResources;
    internal static ResourceManager PrimaryResources { get; }
    internal static ResourceManager SharedResources { get; }
    private static AssemblyResources();
    internal static string GetString(string name);
    internal static ResourceManager get_PrimaryResources();
    internal static ResourceManager get_SharedResources();
}
internal static class Microsoft.Build.Shared.EncodingUtilities : object {
    private static Encoding currentOemEncoding;
    internal static Encoding CurrentSystemOemEncoding { get; }
    internal static Encoding get_CurrentSystemOemEncoding();
}
internal static class Microsoft.Build.Shared.ErrorUtilities : object {
    internal static void LaunchMsBuildDebuggerOnFatalError();
    private static void ThrowInternalError(bool showAssert, string unformattedMessage, Object[] args);
    internal static void ThrowInternalError(string message);
    internal static void VerifyThrowNoAssert(bool condition, string unformattedMessage);
    internal static void VerifyThrow(bool condition, string unformattedMessage);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0);
    internal static void VerifyThrowNoAssert(bool condition, string unformattedMessage, object arg0, object arg1);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1, object arg2);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1, object arg2, object arg3);
    private static void ThrowInvalidOperation(string resourceName, Object[] args);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0, object arg1, object arg2);
    private static void ThrowArgument(Exception innerException, string resourceName, Object[] args);
    internal static void VerifyThrowArgument(bool condition, string resourceName);
    internal static void VerifyThrowArgument(bool condition, string resourceName, object arg0);
    internal static void VerifyThrowArgument(bool condition, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName, object arg0);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowArgumentOutOfRange(bool condition, string parameterName);
    internal static void VerifyThrowArgumentLength(string parameter, string parameterName);
    internal static void VerifyThrowArgumentNull(object parameter, string parameterName);
    internal static void VerifyThrowArgumentNull(object parameter, string parameterName, string resourceName);
    internal static void VerifyThrowArgumentArraysSameLength(Array parameter1, Array parameter2, string parameter1Name, string parameter2Name);
}
internal static class Microsoft.Build.Shared.EscapingUtilities : object {
    private static Char[] charsToEscape;
    private static EscapingUtilities();
    internal static string UnescapeAll(string escapedString);
    internal static string UnescapeAll(string escapedString, Boolean& escapingWasNecessary);
    internal static string Escape(string unescapedString);
    private static bool ContainsReservedCharacters(string unescapedString);
    internal static bool ContainsEscapedWildcards(string escapedString);
}
internal static class Microsoft.Build.Shared.EventArgsFormatting : object {
    private static String[] newLines;
    private static EventArgsFormatting();
    internal static string EscapeCarriageReturn(string stringWithCarriageReturn);
    internal static string FormatEventMessage(BuildErrorEventArgs e);
    internal static string FormatEventMessage(BuildErrorEventArgs e, bool removeCarriageReturn);
    internal static string FormatEventMessage(BuildWarningEventArgs e);
    internal static string FormatEventMessage(BuildWarningEventArgs e, bool removeCarriageReturn);
    internal static string FormatEventMessage(string category, string subcategory, string message, string code, string file, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, int threadId);
    private static String[] SplitStringOnNewLines(string s);
}
internal static class Microsoft.Build.Shared.ExceptionHandling : object {
    internal static bool IsCriticalException(Exception e);
    internal static bool NotExpectedException(Exception e);
    internal static bool NotExpectedReflectionException(Exception e);
}
internal static class Microsoft.Build.Shared.FileUtilities : object {
    internal static string FileTimeFormat;
    private static string executablePath;
    internal static string CurrentExecutablePath { get; }
    internal static string CurrentExecutableDirectory { get; }
    internal static string CurrentExecutableConfigurationFilePath { get; }
    internal static bool IsItemSpecModifier(string name);
    internal static bool IsDerivableItemSpecModifier(string name);
    internal static string GetItemSpecModifier(string currentDirectory, string itemSpec, string modifier, Hashtable& cachedModifiers);
    internal static string EnsureTrailingSlash(string fileSpec);
    internal static string EnsureNoLeadingSlash(string path);
    internal static string EnsureNoTrailingSlash(string path);
    internal static bool EndsWithSlash(string fileSpec);
    internal static bool IsSlash(char c);
    internal static string TrimAndStripAnyQuotes(string path);
    private static string GetFullPath(string fileSpec, string currentDirectory);
    internal static string GetDirectory(string fileSpec);
    internal static bool HasExtension(string fileName, String[] allowedExtensions);
    internal static string get_CurrentExecutablePath();
    internal static string get_CurrentExecutableDirectory();
    internal static string get_CurrentExecutableConfigurationFilePath();
    internal static FileInfo GetFileInfoNoThrow(string filePath);
    internal static string GetCurrentDirectoryStaticBuffer(StringBuilder buffer);
}
internal static class Microsoft.Build.Shared.FileUtilitiesRegex : object {
    internal static Regex DrivePattern;
    internal static Regex UNCPattern;
    private static FileUtilitiesRegex();
}
internal static class Microsoft.Build.Shared.FrameworkLocationHelper : object {
    private static string dotNetFrameworkRegistryPath;
    internal static string fullDotNetFrameworkRegistryKey;
    private static string dotNetFrameworkAssemblyFoldersRegistryPath;
    private static string referenceAssembliesRegistryValueName;
    internal static string dotNetFrameworkSdkInstallKeyValueV11;
    internal static string dotNetFrameworkVersionFolderPrefixV11;
    private static string dotNetFrameworkVersionV11;
    internal static string dotNetFrameworkSdkInstallKeyValueV20;
    internal static string dotNetFrameworkVersionFolderPrefixV20;
    private static string dotNetFrameworkVersionV20;
    internal static string dotNetFrameworkVersionFolderPrefixV30;
    private static string dotNetFrameworkVersionV30;
    private static string dotNetFrameworkAssemblyFoldersRegistryKeyV30;
    private static string dotNetFrameworkSdkRegistryPathV35;
    internal static string fullDotNetFrameworkSdkRegistryKeyV35;
    internal static string dotNetFrameworkSdkInstallKeyValueV35;
    internal static string dotNetFrameworkVersionFolderPrefixV35;
    private static string dotNetFrameworkAssemblyFoldersRegistryKeyV35;
    private static string secondaryDotNetFrameworkSdkRegistryPathV35;
    internal static string secondaryDotNetFrameworkSdkInstallKeyValueV35;
    private static string thisAssemblyFrameworkVersion;
    private static GetDirectories getDirectories;
    private static string pathToDotNetFrameworkV11;
    private static string pathToDotNetFrameworkV20;
    private static string pathToDotNetFrameworkV30;
    private static string pathToDotNetFrameworkV35;
    private static string pathToDotNetFrameworkSdkV11;
    private static string pathToDotNetFrameworkSdkV20;
    private static string pathToDotNetFrameworkSdkV35;
    private static string pathToDotNetFrameworkReferenceAssembliesV30;
    private static string pathToDotNetFrameworkReferenceAssembliesV35;
    internal static string PathToDotNetFrameworkV11 { get; }
    internal static string PathToDotNetFrameworkV20 { get; }
    internal static string PathToDotNetFrameworkV30 { get; }
    internal static string PathToDotNetFrameworkV35 { get; }
    internal static string PathToDotNetFrameworkSdkV11 { get; }
    internal static string PathToDotNetFrameworkSdkV20 { get; }
    internal static string PathToDotNetFrameworkSdkV35 { get; }
    internal static string PathToDotNetFrameworkReferenceAssembliesV30 { get; }
    internal static string PathToDotNetFrameworkReferenceAssembliesV35 { get; }
    private static FrameworkLocationHelper();
    internal static string get_PathToDotNetFrameworkV11();
    internal static string get_PathToDotNetFrameworkV20();
    internal static string get_PathToDotNetFrameworkV30();
    internal static string get_PathToDotNetFrameworkV35();
    internal static string get_PathToDotNetFrameworkSdkV11();
    internal static string get_PathToDotNetFrameworkSdkV20();
    internal static string get_PathToDotNetFrameworkSdkV35();
    internal static string get_PathToDotNetFrameworkReferenceAssembliesV30();
    internal static string get_PathToDotNetFrameworkReferenceAssembliesV35();
    private static string ConvertAssemblyVersionInfoToFxDirectoryFormat(string assemblyVersionInfo);
    private static string FindRegistryValueUnderKey(string registryBaseKeyName, string registryKeyName);
    internal static string FindDotNetFrameworkPath(string currentRuntimePath, string prefix, string frameworkVersion, GetDirectories getDirectories, bool useHeuristic);
    internal static string ConstructDotNetFrameworkPathFromRuntimeInfo(string requestedVersion);
}
internal class Microsoft.Build.Shared.GetDirectories : MulticastDelegate {
    public GetDirectories(object object, IntPtr method);
    public virtual String[] Invoke(string path, string pattern);
    public virtual IAsyncResult BeginInvoke(string path, string pattern, AsyncCallback callback, object object);
    public virtual String[] EndInvoke(IAsyncResult result);
}
internal class Microsoft.Build.Shared.InternalErrorException : Exception {
    internal InternalErrorException(string message);
    internal InternalErrorException(string message, bool showAssert);
    internal InternalErrorException(string message, Exception innerException);
    private InternalErrorException(SerializationInfo info, StreamingContext context);
    private void ShowAssertDialog(bool showAssert);
}
internal static class Microsoft.Build.Shared.NativeMethods : object {
    internal static UInt32 ERROR_INSUFFICIENT_BUFFER;
    internal static UInt32 STARTUP_LOADER_SAFEMODE;
    internal static UInt32 S_OK;
    internal static UInt32 RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG;
    internal static UInt32 FILE_TYPE_CHAR;
    internal static int STD_OUTPUT_HANDLE;
    private static string kernel32Dll;
    private static string mscoreeDLL;
    internal static HandleRef NullHandleRef;
    internal static IntPtr NullIntPtr;
    internal static int MAX_PATH;
    private static NativeMethods();
    internal static string FindOnPath(string filename);
    internal static int GetOEMCP();
    private static UInt32 SearchPath(string path, string fileName, string extension, int numBufferChars, StringBuilder buffer, Int32[] filePart);
    internal static bool FreeLibrary(IntPtr module);
    internal static IntPtr GetProcAddress(IntPtr module, string procName);
    internal static IntPtr LoadLibrary(string fileName);
    internal static UInt32 GetRequestedRuntimeInfo(string pExe, string pwszVersion, string pConfigurationFile, UInt32 startupFlags, UInt32 runtimeInfoFlags, StringBuilder pDirectory, int dwDirectory, UInt32& dwDirectoryLength, StringBuilder pVersion, int cchBuffer, UInt32& dwlength);
    internal static int GetModuleFileName(HandleRef hModule, StringBuilder buffer, int length);
    internal static IntPtr GetStdHandle(int nStdHandle);
    internal static UInt32 GetFileType(IntPtr hFile);
    internal static int GetCurrentDirectory(int nBufferLength, StringBuilder lpBuffer);
}
internal static class Microsoft.Build.Shared.ResourceUtilities : object {
    private static Regex msbuildMessageCodePattern;
    private static ResourceUtilities();
    internal static string ExtractMessageCode(Regex messageCodePattern, string messageWithCode, String& code);
    private static string GetHelpKeyword(string resourceName);
    internal static string FormatResourceString(String& code, String& helpKeyword, string resourceName, Object[] args);
    internal static string FormatResourceString(string resourceName, Object[] args);
    internal static string FormatString(string unformatted, Object[] args);
}
[LoadInSeparateAppDomainAttribute]
public abstract class Microsoft.Build.Utilities.AppDomainIsolatedTask : MarshalByRefObject {
    private IBuildEngine buildEngine;
    private ITaskHost hostObject;
    private TaskLoggingHelper log;
    public IBuildEngine BuildEngine { get; public set; }
    public ITaskHost HostObject { get; public set; }
    public TaskLoggingHelper Log { get; }
    protected ResourceManager TaskResources { get; protected set; }
    protected string HelpKeywordPrefix { get; protected set; }
    protected AppDomainIsolatedTask(ResourceManager taskResources);
    protected AppDomainIsolatedTask(ResourceManager taskResources, string helpKeywordPrefix);
    public sealed virtual IBuildEngine get_BuildEngine();
    public sealed virtual void set_BuildEngine(IBuildEngine value);
    public sealed virtual ITaskHost get_HostObject();
    public sealed virtual void set_HostObject(ITaskHost value);
    public TaskLoggingHelper get_Log();
    protected ResourceManager get_TaskResources();
    protected void set_TaskResources(ResourceManager value);
    protected string get_HelpKeywordPrefix();
    protected void set_HelpKeywordPrefix(string value);
    public abstract virtual bool Execute();
    public virtual object InitializeLifetimeService();
}
internal static class Microsoft.Build.Utilities.CanonicalError : object {
    private static Regex originCategoryCodeTextExpression;
    private static Regex filenameLocationFromOrigin;
    private static Regex lineFromLocation;
    private static Regex lineLineFromLocation;
    private static Regex lineColFromLocation;
    private static Regex lineColColFromLocation;
    private static Regex lineColLineColFromLocation;
    private static CanonicalError();
    private static int ConvertToIntWithDefault(string value);
    internal static Parts Parse(string message);
}
public class Microsoft.Build.Utilities.CommandLineBuilder : object {
    private StringBuilder commandLine;
    private static string allowedUnquotedRegexNoHyphen;
    private static string definitelyNeedQuotesRegexWithHyphen;
    private static string allowedUnquotedRegexWithHyphen;
    private static string definitelyNeedQuotesRegexNoHyphen;
    private bool quoteHyphens;
    private Regex allowedUnquoted;
    private Regex definitelyNeedQuotes;
    protected StringBuilder CommandLine { get; }
    private Regex DefinitelyNeedQuotes { get; }
    private Regex AllowedUnquoted { get; }
    public CommandLineBuilder(bool quoteHyphensOnCommandLine);
    private static CommandLineBuilder();
    protected StringBuilder get_CommandLine();
    public virtual string ToString();
    private Regex get_DefinitelyNeedQuotes();
    private Regex get_AllowedUnquoted();
    protected virtual bool IsQuotingRequired(string parameter);
    protected void AppendSpaceIfNotEmpty();
    protected void AppendTextWithQuoting(string textToAppend);
    protected void AppendQuotedTextToBuffer(StringBuilder buffer, string unquotedTextToAppend);
    protected void AppendTextUnquoted(string textToAppend);
    protected void AppendFileNameWithQuoting(string fileName);
    public void AppendFileNameIfNotNull(string fileName);
    public void AppendFileNameIfNotNull(ITaskItem fileItem);
    public void AppendFileNamesIfNotNull(String[] fileNames, string delimiter);
    public void AppendFileNamesIfNotNull(ITaskItem[] fileItems, string delimiter);
    public void AppendSwitch(string switchName);
    public void AppendSwitchIfNotNull(string switchName, string parameter);
    protected virtual void VerifyThrowNoEmbeddedDoubleQuotes(string switchName, string parameter);
    public void AppendSwitchIfNotNull(string switchName, ITaskItem parameter);
    public void AppendSwitchIfNotNull(string switchName, String[] parameters, string delimiter);
    public void AppendSwitchIfNotNull(string switchName, ITaskItem[] parameters, string delimiter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, string parameter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, ITaskItem parameter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, String[] parameters, string delimiter);
    public void AppendSwitchUnquotedIfNotNull(string switchName, ITaskItem[] parameters, string delimiter);
}
public enum Microsoft.Build.Utilities.HostObjectInitializationStatus : Enum {
    public int value__;
    public static HostObjectInitializationStatus UseHostObjectToExecute;
    public static HostObjectInitializationStatus UseAlternateToolToExecute;
    public static HostObjectInitializationStatus NoActionReturnSuccess;
    public static HostObjectInitializationStatus NoActionReturnFailure;
}
public abstract class Microsoft.Build.Utilities.Logger : object {
    private LoggerVerbosity verbosity;
    private string parameters;
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    public virtual LoggerVerbosity get_Verbosity();
    public virtual void set_Verbosity(LoggerVerbosity value);
    public virtual string get_Parameters();
    public virtual void set_Parameters(string value);
    public abstract virtual void Initialize(IEventSource eventSource);
    public virtual void Shutdown();
    public virtual string FormatErrorEvent(BuildErrorEventArgs args);
    public virtual string FormatWarningEvent(BuildWarningEventArgs args);
    public bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity);
}
internal static class Microsoft.Build.Utilities.NativeMethods : object {
    internal static short PROCESSOR_ARCHITECTURE_INTEL;
    internal static short PROCESSOR_ARCHITECTURE_IA64;
    internal static short PROCESSOR_ARCHITECTURE_AMD64;
    internal static void GetSystemInfo(SYSTEM_INFO& lpSystemInfo);
}
public static class Microsoft.Build.Utilities.ProcessorArchitecture : object {
    public static string X86;
    public static string IA64;
    public static string AMD64;
    public static string MSIL;
    private static string currentProcessArchitecture;
    private static bool currentProcessArchitectureInitialized;
    public static string CurrentProcessArchitecture { get; }
    private static ProcessorArchitecture();
    public static string get_CurrentProcessArchitecture();
    private static string GetCurrentProcessArchitecture();
}
public enum Microsoft.Build.Utilities.TargetDotNetFrameworkVersion : Enum {
    public int value__;
    public static TargetDotNetFrameworkVersion Version11;
    public static TargetDotNetFrameworkVersion Version20;
    public static TargetDotNetFrameworkVersion Version30;
    public static TargetDotNetFrameworkVersion Version35;
    public static TargetDotNetFrameworkVersion VersionLatest;
}
public abstract class Microsoft.Build.Utilities.Task : object {
    private IBuildEngine buildEngine;
    private ITaskHost hostObject;
    private TaskLoggingHelper log;
    public IBuildEngine BuildEngine { get; public set; }
    public IBuildEngine2 BuildEngine2 { get; }
    public ITaskHost HostObject { get; public set; }
    public TaskLoggingHelper Log { get; }
    protected ResourceManager TaskResources { get; protected set; }
    protected string HelpKeywordPrefix { get; protected set; }
    protected Task(ResourceManager taskResources);
    protected Task(ResourceManager taskResources, string helpKeywordPrefix);
    public sealed virtual IBuildEngine get_BuildEngine();
    public sealed virtual void set_BuildEngine(IBuildEngine value);
    public IBuildEngine2 get_BuildEngine2();
    public sealed virtual ITaskHost get_HostObject();
    public sealed virtual void set_HostObject(ITaskHost value);
    public TaskLoggingHelper get_Log();
    protected ResourceManager get_TaskResources();
    protected void set_TaskResources(ResourceManager value);
    protected string get_HelpKeywordPrefix();
    protected void set_HelpKeywordPrefix(string value);
    public abstract virtual bool Execute();
}
public class Microsoft.Build.Utilities.TaskItem : MarshalByRefObject {
    private string itemSpec;
    private Hashtable metadata;
    private Hashtable itemSpecModifiers;
    public string ItemSpec { get; public set; }
    public ICollection MetadataNames { get; }
    public int MetadataCount { get; }
    public TaskItem(string itemSpec);
    public TaskItem(string itemSpec, IDictionary itemMetadata);
    public TaskItem(ITaskItem sourceItem);
    public sealed virtual string get_ItemSpec();
    public sealed virtual void set_ItemSpec(string value);
    public sealed virtual ICollection get_MetadataNames();
    public sealed virtual int get_MetadataCount();
    public sealed virtual void RemoveMetadata(string metadataName);
    public sealed virtual void SetMetadata(string metadataName, string metadataValue);
    public sealed virtual string GetMetadata(string metadataName);
    public sealed virtual void CopyMetadataTo(ITaskItem destinationItem);
    public sealed virtual IDictionary CloneCustomMetadata();
    public virtual string ToString();
    public virtual object InitializeLifetimeService();
    public static string op_Explicit(TaskItem taskItemToCast);
}
public class Microsoft.Build.Utilities.TaskLoggingHelper : MarshalByRefObject {
    private ITask taskInstance;
    private string taskName;
    private string taskNameUpperCase;
    private ResourceManager taskResources;
    private string helpKeywordPrefix;
    private bool hasLoggedErrors;
    private static Regex messageCodePattern;
    protected string TaskName { get; }
    private string TaskNameUpperCase { get; }
    protected IBuildEngine BuildEngine { get; }
    public ResourceManager TaskResources { get; public set; }
    public string HelpKeywordPrefix { get; public set; }
    public bool HasLoggedErrors { get; }
    public TaskLoggingHelper(ITask taskInstance);
    private static TaskLoggingHelper();
    protected string get_TaskName();
    private string get_TaskNameUpperCase();
    protected IBuildEngine get_BuildEngine();
    public ResourceManager get_TaskResources();
    public void set_TaskResources(ResourceManager value);
    public string get_HelpKeywordPrefix();
    public void set_HelpKeywordPrefix(string value);
    public bool get_HasLoggedErrors();
    public string ExtractMessageCode(string message, String& messageWithoutCodePrefix);
    internal string ExtractMessageCode(string message, bool filterMSBuildOnlyMessages, String& messageWithoutCodePrefix);
    public virtual string FormatResourceString(string resourceName, Object[] args);
    public virtual string FormatString(string unformatted, Object[] args);
    public void LogMessage(string message, Object[] messageArgs);
    public void LogMessage(MessageImportance importance, string message, Object[] messageArgs);
    public void LogMessageFromResources(string messageResourceName, Object[] messageArgs);
    public void LogMessageFromResources(MessageImportance importance, string messageResourceName, Object[] messageArgs);
    public void LogExternalProjectStarted(string message, string helpKeyword, string projectFile, string targetNames);
    public void LogExternalProjectFinished(string message, string helpKeyword, string projectFile, bool succeeded);
    public void LogCommandLine(string commandLine);
    public void LogCommandLine(MessageImportance importance, string commandLine);
    public void LogError(string message, Object[] messageArgs);
    public void LogError(string subcategory, string errorCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, Object[] messageArgs);
    public void LogErrorFromResources(string messageResourceName, Object[] messageArgs);
    public void LogErrorFromResources(string subcategoryResourceName, string errorCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, Object[] messageArgs);
    public void LogErrorWithCodeFromResources(string messageResourceName, Object[] messageArgs);
    public void LogErrorWithCodeFromResources(string subcategoryResourceName, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, Object[] messageArgs);
    public void LogErrorFromException(Exception exception);
    public void LogErrorFromException(Exception exception, bool showStackTrace);
    public void LogErrorFromException(Exception exception, bool showStackTrace, bool showDetail, string file);
    public void LogWarning(string message, Object[] messageArgs);
    public void LogWarning(string subcategory, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, Object[] messageArgs);
    public void LogWarningFromResources(string messageResourceName, Object[] messageArgs);
    public void LogWarningFromResources(string subcategoryResourceName, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, Object[] messageArgs);
    public void LogWarningWithCodeFromResources(string messageResourceName, Object[] messageArgs);
    public void LogWarningWithCodeFromResources(string subcategoryResourceName, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string messageResourceName, Object[] messageArgs);
    public void LogWarningFromException(Exception exception);
    public void LogWarningFromException(Exception exception, bool showStackTrace);
    public bool LogMessagesFromFile(string fileName);
    public bool LogMessagesFromFile(string fileName, MessageImportance messageImportance);
    public bool LogMessagesFromStream(TextReader stream, MessageImportance messageImportance);
    public bool LogMessageFromText(string lineOfText, MessageImportance messageImportance);
}
public static class Microsoft.Build.Utilities.ToolLocationHelper : object {
    public static string PathToSystem { get; }
    public static string get_PathToSystem();
    public static string GetDotNetFrameworkVersionFolderPrefix(TargetDotNetFrameworkVersion version);
    public static string GetDotNetFrameworkRootRegistryKey(TargetDotNetFrameworkVersion version);
    public static string GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion version);
    public static string GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion version);
    public static string GetPathToDotNetFramework(TargetDotNetFrameworkVersion version);
    public static string GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion version);
    public static string GetPathToDotNetFrameworkReferenceAssemblies(TargetDotNetFrameworkVersion version);
    public static string GetPathToDotNetFrameworkSdkFile(string fileName, TargetDotNetFrameworkVersion version);
    private static string GetPathToDotNetFrameworkSdkFile(string fileName, TargetDotNetFrameworkVersion version, string processorArchitecture);
    public static string GetPathToDotNetFrameworkFile(string fileName, TargetDotNetFrameworkVersion version);
    public static string GetPathToSystemFile(string fileName);
}
public abstract class Microsoft.Build.Utilities.ToolTask : Task {
    private int exitCode;
    private string toolPath;
    private int timeout;
    private TaskLoggingHelper logPrivate;
    private TaskLoggingHelper logShared;
    private string standardOutputImportance;
    private string standardErrorImportance;
    private MessageImportance standardOutputImportanceToUse;
    private MessageImportance standardErrorImportanceToUse;
    private Queue standardErrorData;
    private Queue standardOutputData;
    private ManualResetEvent standardErrorDataAvailable;
    private ManualResetEvent standardOutputDataAvailable;
    private ManualResetEvent toolExited;
    private ManualResetEvent toolTimeoutExpired;
    private Timer toolTimer;
    private string toolExe;
    private static bool eventsDisposed;
    [OutputAttribute]
public int ExitCode { get; }
    protected string ToolName { get; }
    public string ToolExe { get; public set; }
    public string ToolPath { get; public set; }
    public int Timeout { get; public set; }
    protected Encoding ResponseFileEncoding { get; }
    protected Encoding StandardOutputEncoding { get; }
    protected Encoding StandardErrorEncoding { get; }
    protected StringDictionary EnvironmentOverride { get; }
    protected MessageImportance StandardErrorLoggingImportance { get; }
    protected bool HasLoggedErrors { get; }
    public string StandardOutputImportance { get; public set; }
    public string StandardErrorImportance { get; public set; }
    protected MessageImportance StandardOutputLoggingImportance { get; }
    private TaskLoggingHelper LogPrivate { get; }
    private TaskLoggingHelper LogShared { get; }
    protected ToolTask(ResourceManager taskResources);
    protected ToolTask(ResourceManager taskResources, string helpKeywordPrefix);
    public int get_ExitCode();
    protected abstract virtual string get_ToolName();
    public virtual string get_ToolExe();
    public virtual void set_ToolExe(string value);
    public void set_ToolPath(string value);
    public string get_ToolPath();
    public virtual void set_Timeout(int value);
    public virtual int get_Timeout();
    protected virtual Encoding get_ResponseFileEncoding();
    protected virtual Encoding get_StandardOutputEncoding();
    protected virtual Encoding get_StandardErrorEncoding();
    protected virtual StringDictionary get_EnvironmentOverride();
    protected virtual MessageImportance get_StandardErrorLoggingImportance();
    protected virtual bool get_HasLoggedErrors();
    public string get_StandardOutputImportance();
    public void set_StandardOutputImportance(string value);
    public string get_StandardErrorImportance();
    public void set_StandardErrorImportance(string value);
    protected virtual MessageImportance get_StandardOutputLoggingImportance();
    private TaskLoggingHelper get_LogPrivate();
    private TaskLoggingHelper get_LogShared();
    protected abstract virtual string GenerateFullPathToTool();
    protected virtual string GetWorkingDirectory();
    protected internal virtual bool ValidateParameters();
    protected virtual bool SkipTaskExecution();
    protected virtual string GenerateResponseFileCommands();
    protected virtual string GenerateCommandLineCommands();
    protected virtual string GetResponseFileSwitch(string responseFilePath);
    protected virtual bool HandleTaskExecutionErrors();
    protected virtual bool CallHostObjectToExecute();
    protected virtual HostObjectInitializationStatus InitializeHostObject();
    protected virtual void LogToolCommand(string message);
    protected virtual void LogPathToTool(string toolName, string pathToTool);
    private string ComputePathToTool();
    private string GetTemporaryResponseFile(string responseFileCommands, String& responseFileSwitch);
    private ProcessStartInfo GetProcessStartInfo(string pathToTool, string commandLineCommands, string responseFileSwitch);
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    protected void DeleteTempFile(string fileName);
    private void HandleToolNotifications(Process proc);
    private void KillToolProcessOnTimeout(Process proc);
    private void ConfirmProcessExit(Process proc);
    private void LogMessagesFromStandardError();
    private void LogMessagesFromStandardOutput();
    private void LogMessagesFromStandardErrorOrOutput(Queue dataQueue, ManualResetEvent dataAvailableSignal, MessageImportance messageImportance);
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    private void ReceiveTimeoutNotification(object unused);
    private void ReceiveExitNotification(object sender, EventArgs e);
    private void ReceiveStandardErrorData(object sender, DataReceivedEventArgs e);
    private void ReceiveStandardOutputData(object sender, DataReceivedEventArgs e);
    private static void ReceiveStandardErrorOrOutputData(DataReceivedEventArgs e, Queue dataQueue, ManualResetEvent dataAvailableSignal);
    private bool AssignStandardStreamLoggingImportance();
    public virtual bool Execute();
    private string GetErrorMessageWithDiagnosticsCheck(Exception e);
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static int DailyBuildNumber;
}
