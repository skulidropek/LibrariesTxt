public class NuGet.Packaging.Core.ContentFilesEntry : object {
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CopyToOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Flatten>k__BackingField;
    public string Include { get; }
    public string Exclude { get; }
    public string BuildAction { get; }
    public Nullable`1<bool> CopyToOutput { get; }
    public Nullable`1<bool> Flatten { get; }
    public ContentFilesEntry(string include, string exclude, string buildAction, Nullable`1<bool> copyToOutput, Nullable`1<bool> flatten);
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
public string get_BuildAction();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CopyToOutput();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Flatten();
}
public class NuGet.Packaging.Core.ExtractPackageFileDelegate : MulticastDelegate {
    public ExtractPackageFileDelegate(object object, IntPtr method);
    public virtual string Invoke(string sourceFile, string targetPath, Stream fileStream);
    public virtual IAsyncResult BeginInvoke(string sourceFile, string targetPath, Stream fileStream, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class NuGet.Packaging.Core.Fingerprints : object {
    private IDictionary`2<string, string> _keyValuePairs;
    public string Item { get; }
    public Fingerprints(IDictionary`2<string, string> fingerPrints);
    public string get_Item(string key);
    public IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
}
public interface NuGet.Packaging.Core.IAsyncPackageCoreReader {
    public abstract virtual Task`1<PackageIdentity> GetIdentityAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<NuGetVersion> GetMinClientVersionAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<PackageType>> GetPackageTypesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> GetStreamAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> GetFilesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> GetFilesAsync(string folder, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> GetNuspecAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetNuspecFileAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> CopyFilesAsync(string destination, IEnumerable`1<string> packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken cancellationToken);
}
public interface NuGet.Packaging.Core.INuspecCoreReader {
    public abstract virtual string GetId();
    public abstract virtual NuGetVersion GetVersion();
    public abstract virtual NuGetVersion GetMinClientVersion();
    public abstract virtual IReadOnlyList`1<PackageType> GetPackageTypes();
    public abstract virtual PackageIdentity GetIdentity();
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> GetMetadata();
}
public interface NuGet.Packaging.Core.IPackageCoreReader {
    public abstract virtual PackageIdentity GetIdentity();
    public abstract virtual NuGetVersion GetMinClientVersion();
    public abstract virtual IReadOnlyList`1<PackageType> GetPackageTypes();
    public abstract virtual Stream GetStream(string path);
    public abstract virtual IEnumerable`1<string> GetFiles();
    public abstract virtual IEnumerable`1<string> GetFiles(string folder);
    public abstract virtual Stream GetNuspec();
    public abstract virtual string GetNuspecFile();
    public abstract virtual IEnumerable`1<string> CopyFiles(string destination, IEnumerable`1<string> packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken token);
}
public interface NuGet.Packaging.Core.IPackageIdentityComparer {
}
public interface NuGet.Packaging.Core.IRepositoryCertificateInfo {
    public string ContentUrl { get; }
    public Fingerprints Fingerprints { get; }
    public string Issuer { get; }
    public DateTimeOffset NotAfter { get; }
    public DateTimeOffset NotBefore { get; }
    public string Subject { get; }
    public abstract virtual string get_ContentUrl();
    public abstract virtual Fingerprints get_Fingerprints();
    public abstract virtual string get_Issuer();
    public abstract virtual DateTimeOffset get_NotAfter();
    public abstract virtual DateTimeOffset get_NotBefore();
    public abstract virtual string get_Subject();
}
public class NuGet.Packaging.Core.NuspecCoreReader : NuspecCoreReaderBase {
    public NuspecCoreReader(Stream stream);
    public NuspecCoreReader(XDocument xml);
    [IteratorStateMachineAttribute("NuGet.Packaging.Core.NuspecCoreReader/<GetDependencies>d__2")]
public virtual IEnumerable`1<PackageDependency> GetDependencies();
}
public abstract class NuGet.Packaging.Core.NuspecCoreReaderBase : object {
    private XDocument _xml;
    private XElement _metadataNode;
    private Dictionary`2<string, string> _metadataValues;
    protected static string Metadata;
    protected static string Id;
    protected static string Version;
    protected static string MinClientVersion;
    protected static string DevelopmentDependency;
    protected Dictionary`2<string, string> MetadataValues { get; }
    protected XElement MetadataNode { get; }
    public XDocument Xml { get; }
    public NuspecCoreReaderBase(string path);
    public NuspecCoreReaderBase(Stream stream);
    public NuspecCoreReaderBase(Stream stream, bool leaveStreamOpen);
    public NuspecCoreReaderBase(XDocument xml);
    public virtual string GetId();
    public virtual NuGetVersion GetVersion();
    public virtual NuGetVersion GetMinClientVersion();
    public virtual IReadOnlyList`1<PackageType> GetPackageTypes();
    public virtual bool IsServiceable();
    public virtual bool GetDevelopmentDependency();
    public virtual IEnumerable`1<KeyValuePair`2<string, string>> GetMetadata();
    public virtual string GetMetadataValue(string name);
    protected Dictionary`2<string, string> get_MetadataValues();
    protected XElement get_MetadataNode();
    public XDocument get_Xml();
    public virtual PackageIdentity GetIdentity();
    private static XDocument LoadXml(Stream stream, bool leaveStreamOpen);
}
public static class NuGet.Packaging.Core.NuspecUtility : object {
    public static string PackageTypes;
    public static string PackageType;
    public static string PackageTypeName;
    public static string Version;
    public static string Serviceable;
    public static string Repository;
    public static string Type;
    public static string RepositoryUrl;
    public static string RepositoryBranch;
    public static string RepositoryCommit;
    public static string License;
    private static NuspecUtility();
    public static IReadOnlyList`1<PackageType> GetPackageTypes(XElement metadataNode, bool useMetadataNamespace);
    public static bool IsServiceable(XElement metadataNode);
}
public class NuGet.Packaging.Core.PackageDependency : object {
    private VersionRange _versionRange;
    private static List`1<string> EmptyList;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Exclude>k__BackingField;
    public string Id { get; }
    public IReadOnlyList`1<string> Include { get; }
    public IReadOnlyList`1<string> Exclude { get; }
    public VersionRange VersionRange { get; }
    public PackageDependency(string id);
    public PackageDependency(string id, VersionRange versionRange);
    public PackageDependency(string id, VersionRange versionRange, IReadOnlyList`1<string> include, IReadOnlyList`1<string> exclude);
    private static PackageDependency();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Include();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Exclude();
    public VersionRange get_VersionRange();
    public sealed virtual bool Equals(PackageDependency other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class NuGet.Packaging.Core.PackageDependencyComparer : object {
    private IVersionRangeComparer _versionRangeComparer;
    public static PackageDependencyComparer Default;
    public PackageDependencyComparer(IVersionRangeComparer versionRangeComparer);
    private static PackageDependencyComparer();
    public sealed virtual bool Equals(PackageDependency x, PackageDependency y);
    public sealed virtual int GetHashCode(PackageDependency obj);
}
public class NuGet.Packaging.Core.PackageDependencyInfo : PackageIdentity {
    private static PackageDependency[] EmptyDependencies;
    private PackageDependency[] _dependencies;
    public IEnumerable`1<PackageDependency> Dependencies { get; }
    public PackageDependencyInfo(string id, NuGetVersion version);
    public PackageDependencyInfo(PackageIdentity identity, IEnumerable`1<PackageDependency> dependencies);
    public PackageDependencyInfo(string id, NuGetVersion version, IEnumerable`1<PackageDependency> dependencies);
    private static PackageDependencyInfo();
    public IEnumerable`1<PackageDependency> get_Dependencies();
    public sealed virtual bool Equals(PackageDependencyInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class NuGet.Packaging.Core.PackageDependencyInfoComparer : object {
    private IPackageIdentityComparer _identityComparer;
    private PackageDependencyComparer _dependencyComparer;
    public static PackageDependencyInfoComparer Default { get; }
    public PackageDependencyInfoComparer(IPackageIdentityComparer identityComparer, PackageDependencyComparer dependencyComparer);
    public static PackageDependencyInfoComparer get_Default();
    public sealed virtual bool Equals(PackageDependencyInfo x, PackageDependencyInfo y);
    public sealed virtual int GetHashCode(PackageDependencyInfo obj);
    [CompilerGeneratedAttribute]
private int <GetHashCode>b__7_0(PackageDependency e);
}
public class NuGet.Packaging.Core.PackageIdentity : object {
    private string _id;
    private NuGetVersion _version;
    private static string ToStringFormat;
    public string Id { get; }
    public NuGetVersion Version { get; }
    public bool HasVersion { get; }
    public static PackageIdentityComparer Comparer { get; }
    public PackageIdentity(string id, NuGetVersion version);
    public string get_Id();
    public NuGetVersion get_Version();
    public bool get_HasVersion();
    public sealed virtual bool Equals(PackageIdentity other);
    public virtual bool Equals(PackageIdentity other, VersionComparison versionComparison);
    public sealed virtual int CompareTo(PackageIdentity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static PackageIdentityComparer get_Comparer();
    public virtual string ToString();
}
public class NuGet.Packaging.Core.PackageIdentityComparer : object {
    private IVersionComparer _versionComparer;
    public static PackageIdentityComparer Default { get; }
    public PackageIdentityComparer(VersionComparison versionComparison);
    public PackageIdentityComparer(IVersionComparer versionComparer);
    public static PackageIdentityComparer get_Default();
    public sealed virtual bool Equals(PackageIdentity x, PackageIdentity y);
    public sealed virtual int GetHashCode(PackageIdentity obj);
    public sealed virtual int Compare(PackageIdentity x, PackageIdentity y);
}
public class NuGet.Packaging.Core.PackageType : object {
    public static Version EmptyVersion;
    public static PackageType Legacy;
    public static PackageType DotnetCliTool;
    public static PackageType Dependency;
    public static PackageType DotnetTool;
    public static PackageType SymbolsPackage;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public string Name { get; }
    public Version Version { get; }
    public PackageType(string name, Version version);
    private static PackageType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public virtual bool Equals(object obj);
    public static bool op_Equality(PackageType a, PackageType b);
    public static bool op_Inequality(PackageType a, PackageType b);
    public sealed virtual bool Equals(PackageType other);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(PackageType other);
}
public static class NuGet.Packaging.Core.PackagingCoreConstants : object {
    public static string HashFileExtension;
    public static string NupkgExtension;
    public static string NuspecExtension;
    public static string PackageDownloadMarkerFileExtension;
    public static string NupkgMetadataFileExtension;
    public static string EmptyFolder;
    public static string ForwardSlashEmptyFolder;
    private static PackagingCoreConstants();
}
public class NuGet.Packaging.Core.PackagingException : Exception {
    private IPackLogMessage _logMessage;
    public PackagingException(string message);
    public PackagingException(NuGetLogCode logCode, string message);
    public PackagingException(NuGetLogCode logCode, string message, Exception innerException);
    public PackagingException(string message, Exception innerException);
    public virtual ILogMessage AsLogMessage();
}
public class NuGet.Packaging.Core.RepositoryMetadata : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commit>k__BackingField;
    public string Type { get; public set; }
    public string Url { get; public set; }
    public string Branch { get; public set; }
    public string Commit { get; public set; }
    public RepositoryMetadata(string type, string url, string branch, string commit);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public string get_Commit();
    [CompilerGeneratedAttribute]
public void set_Commit(string value);
    public virtual bool Equals(object obj);
    public static bool op_Equality(RepositoryMetadata a, RepositoryMetadata b);
    public static bool op_Inequality(RepositoryMetadata a, RepositoryMetadata b);
    public sealed virtual bool Equals(RepositoryMetadata other);
    public virtual int GetHashCode();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.Packaging.Core.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidPackageTypeVersion { get; }
    internal static string MissingMetadataNode { get; }
    internal static string MissingNuspec { get; }
    internal static string MissingPackageTypeName { get; }
    internal static string MultipleNuspecFiles { get; }
    internal static string MultiplePackageTypes { get; }
    internal static string StringCannotBeNullOrEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidPackageTypeVersion();
    internal static string get_MissingMetadataNode();
    internal static string get_MissingNuspec();
    internal static string get_MissingPackageTypeName();
    internal static string get_MultipleNuspecFiles();
    internal static string get_MultiplePackageTypes();
    internal static string get_StringCannotBeNullOrEmpty();
}
public class NuGet.Packaging.FrameworkSpecificGroup : object {
    private NuGetFramework _targetFramework;
    private String[] _items;
    [CompilerGeneratedAttribute]
private bool <HasEmptyFolder>k__BackingField;
    public NuGetFramework TargetFramework { get; }
    public IEnumerable`1<string> Items { get; }
    public bool HasEmptyFolder { get; }
    public FrameworkSpecificGroup(NuGetFramework targetFramework, IEnumerable`1<string> items);
    public sealed virtual NuGetFramework get_TargetFramework();
    public IEnumerable`1<string> get_Items();
    [CompilerGeneratedAttribute]
public bool get_HasEmptyFolder();
    public sealed virtual bool Equals(FrameworkSpecificGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class NuGet.Packaging.PackageDependencyGroup : object {
    private NuGetFramework _targetFramework;
    private IEnumerable`1<PackageDependency> _packages;
    public NuGetFramework TargetFramework { get; }
    public IEnumerable`1<PackageDependency> Packages { get; }
    public PackageDependencyGroup(NuGetFramework targetFramework, IEnumerable`1<PackageDependency> packages);
    public sealed virtual NuGetFramework get_TargetFramework();
    public IEnumerable`1<PackageDependency> get_Packages();
    public sealed virtual bool Equals(PackageDependencyGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(T o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
    private void CheckInitialized();
}
