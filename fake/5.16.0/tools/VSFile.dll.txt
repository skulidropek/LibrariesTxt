public class VSFile.Project.BasicProjectFile : ProjectFile`1<BasicSourceFile> {
    public static string ProjectFileExtension;
    public BasicProjectFile(string filePath);
    public BasicProjectFile(string projectName, string filePath);
    protected virtual BasicSourceFile CreateSourceFile(string filePath);
}
public class VSFile.Project.CSharpProjectFile : ProjectFile`1<CSharpSourceFile> {
    public static string ProjectFileExtension;
    public CSharpProjectFile(string filePath);
    public CSharpProjectFile(string projectName, string filePath);
    protected virtual CSharpSourceFile CreateSourceFile(string filePath);
}
public class VSFile.Project.FSharpProjectFile : ProjectFile`1<FSharpSourceFile> {
    public static string ProjectFileExtension;
    public FSharpProjectFile(string filePath);
    public FSharpProjectFile(string projectName, string filePath);
    protected virtual FSharpSourceFile CreateSourceFile(string filePath);
}
public abstract class VSFile.Project.ProjectFile`1 : VisualStudioFile {
    private static string Namespace;
    private static string NamespacePrefix;
    private string m_projectName;
    private string m_sourceFileExtension;
    private List`1<T> m_sourceFiles;
    public string ProjectName { get; }
    public string SourceFileExtension { get; }
    public IEnumerable`1<T> SourceFiles { get; }
    protected ProjectFile`1(string fileExtension, string filePath, string sourceFileExtension);
    protected ProjectFile`1(string projectName, string fileExtension, string filePath, string sourceFileExtension);
    protected abstract virtual T CreateSourceFile(string filePath);
    protected virtual void ReadFile();
    private void AddSourceFile(XmlNode node, XmlNamespaceManager namespaceManager);
    private void ClearFiles();
    public string get_ProjectName();
    public string get_SourceFileExtension();
    public IEnumerable`1<T> get_SourceFiles();
}
public class VSFile.Project.WebSiteDirectory : object {
    private static String[] SupportedExtensions;
    private List`1<BasicSourceFile> m_basicSourceFiles;
    private List`1<CSharpSourceFile> m_cSharpSourceFiles;
    private string m_directoryPath;
    private string m_name;
    public IEnumerable`1<BasicSourceFile> BasicSourceFiles { get; }
    public IEnumerable`1<CSharpSourceFile> CSharpSourceFiles { get; }
    public string DirectoryPath { get; }
    public string Name { get; }
    public WebSiteDirectory(string name, string directoryPath);
    private static WebSiteDirectory();
    public void Load();
    private void CheckDirectoryPath();
    private void ClearFiles();
    private void LoadFiles();
    public IEnumerable`1<BasicSourceFile> get_BasicSourceFiles();
    public IEnumerable`1<CSharpSourceFile> get_CSharpSourceFiles();
    public string get_DirectoryPath();
    public string get_Name();
}
public class VSFile.SolutionFile : VisualStudioFile {
    public static string SolutionFileExtension;
    private List`1<BasicProjectFile> m_basicProjectFiles;
    private List`1<CSharpProjectFile> m_cSharpProjectFiles;
    private List`1<FSharpProjectFile> m_fSharpProjectFiles;
    private List`1<WebSiteDirectory> m_webSiteDirectories;
    public IEnumerable`1<BasicProjectFile> BasicProjectFiles { get; }
    public IEnumerable`1<CSharpProjectFile> CSharpProjectFiles { get; }
    public IEnumerable`1<FSharpProjectFile> FSharpProjectFiles { get; }
    public IEnumerable`1<WebSiteDirectory> WebSiteDirectories { get; }
    public SolutionFile(string filePath);
    protected virtual void ReadFile();
    private void AddProject(string inputLine);
    private void ClearFiles();
    private static string GetMatchValue(Match match, string groupName);
    public IEnumerable`1<BasicProjectFile> get_BasicProjectFiles();
    public IEnumerable`1<CSharpProjectFile> get_CSharpProjectFiles();
    public IEnumerable`1<FSharpProjectFile> get_FSharpProjectFiles();
    public IEnumerable`1<WebSiteDirectory> get_WebSiteDirectories();
}
public class VSFile.Source.BasicSourceFile : SourceFile {
    public static string SourceFileExtension;
    public BasicSourceFile(string filePath);
}
public class VSFile.Source.CSharpSourceFile : SourceFile {
    public static string SourceFileExtension;
    public CSharpSourceFile(string filePath);
}
public class VSFile.Source.FSharpSourceFile : SourceFile {
    public static string SourceFileExtension;
    public FSharpSourceFile(string filePath);
}
public abstract class VSFile.Source.SourceFile : VisualStudioFile {
    protected SourceFile(string fileExtension, string filePath);
    protected virtual void ReadFile();
}
public abstract class VSFile.VisualStudioFile : object {
    private string m_fileExtension;
    private string m_filePath;
    public string DirectoryPath { get; }
    public string FileExtension { get; }
    public string FileName { get; }
    public string FileNameNoExtension { get; }
    public string FilePath { get; }
    protected VisualStudioFile(string fileExtension, string filePath);
    public void Load();
    protected string GetFullPath(string relativePath);
    protected abstract virtual void ReadFile();
    private void CheckFileExtension();
    private void CheckFilePath();
    public string get_DirectoryPath();
    public string get_FileExtension();
    public string get_FileName();
    public string get_FileNameNoExtension();
    public string get_FilePath();
}
public class VSFile.VisualStudioFiles : object {
    private static String[] SupportedExtensions;
    private List`1<BasicProjectFile> m_basicProjectFiles;
    private List`1<BasicSourceFile> m_basicSourceFiles;
    private List`1<CSharpProjectFile> m_cSharpProjectFiles;
    private List`1<CSharpSourceFile> m_cSharpSourceFiles;
    private List`1<FSharpProjectFile> m_fSharpProjectFiles;
    private List`1<FSharpSourceFile> m_fSharpSourceFiles;
    private SearchOption m_fileSearchOption;
    private List`1<SolutionFile> m_solutionFiles;
    public IEnumerable`1<BasicProjectFile> BasicProjectFiles { get; }
    public IEnumerable`1<BasicSourceFile> BasicSourceFiles { get; }
    public IEnumerable`1<CSharpProjectFile> CSharpProjectFiles { get; }
    public IEnumerable`1<CSharpSourceFile> CSharpSourceFiles { get; }
    public IEnumerable`1<FSharpProjectFile> FSharpProjectFiles { get; }
    public IEnumerable`1<FSharpSourceFile> FSharpSourceFiles { get; }
    public IEnumerable`1<SolutionFile> SolutionFiles { get; }
    private SearchOption FileSearchOption { get; }
    public VisualStudioFiles(IEnumerable`1<string> filePaths);
    public VisualStudioFiles(IEnumerable`1<string> filePaths, bool recursiveSearch);
    private static VisualStudioFiles();
    private void Initialize(IEnumerable`1<string> filePaths);
    private void Initialize(string filePath);
    private void Initialize(string filePath, string fileExtension);
    private static bool IsSupportedExtension(string fileExtension);
    public IEnumerable`1<BasicProjectFile> get_BasicProjectFiles();
    public IEnumerable`1<BasicSourceFile> get_BasicSourceFiles();
    public IEnumerable`1<CSharpProjectFile> get_CSharpProjectFiles();
    public IEnumerable`1<CSharpSourceFile> get_CSharpSourceFiles();
    public IEnumerable`1<FSharpProjectFile> get_FSharpProjectFiles();
    public IEnumerable`1<FSharpSourceFile> get_FSharpSourceFiles();
    public IEnumerable`1<SolutionFile> get_SolutionFiles();
    private SearchOption get_FileSearchOption();
}
internal static class VSFile.Wildcard : object {
    public static string Asterisk;
    public static string Question;
    private static String[] Wildcards;
    private static Wildcard();
    public static string AddAsterisk(string fileExtension);
    public static bool HasWildcard(string filePath);
}
