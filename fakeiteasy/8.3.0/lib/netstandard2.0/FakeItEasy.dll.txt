[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class FakeItEasy.A : object {
    private static FakeAndDummyManager FakeAndDummyManager { get; }
    private static IFakeConfigurationManager ConfigurationManager { get; }
    private static FakeAndDummyManager get_FakeAndDummyManager();
    private static IFakeConfigurationManager get_ConfigurationManager();
    public static T Fake();
    public static T Fake(Action`1<IFakeOptions`1<T>> optionsBuilder);
    public static IList`1<T> CollectionOfFake(int numberOfFakes);
    public static IList`1<T> CollectionOfFake(int numberOfFakes, Action`1<IFakeOptions`1<T>> optionsBuilder);
    public static IList`1<T> CollectionOfFake(int numberOfFakes, Action`2<IFakeOptions`1<T>, int> optionsBuilder);
    [EditorBrowsableAttribute("2")]
public static T Dummy();
    [EditorBrowsableAttribute("2")]
public static IList`1<T> CollectionOfDummy(int numberOfDummies);
    public static IVoidArgumentValidationConfiguration CallTo(Expression`1<Action> callSpecification);
    public static IAnyCallConfigurationWithNoReturnTypeSpecified CallTo(object fake);
    public static IReturnValueArgumentValidationConfiguration`1<T> CallTo(Expression`1<Func`1<T>> callSpecification);
    public static IPropertySetterAnyValueConfiguration`1<TValue> CallToSet(Expression`1<Func`1<TValue>> propertySpecification);
    public static IAnyCallConfigurationWithVoidReturnType CallTo(object fake, EventAction action);
    public static Captured`1<TArgument> Captured();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class FakeItEasy.A`1 : object {
    public static INegatableArgumentConstraintManager`1<T> That { get; }
    [EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public static T _ { get; }
    public static T Ignored { get; }
    public static INegatableArgumentConstraintManager`1<T> get_That();
    public static T get__();
    public static T get_Ignored();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class FakeItEasy.An`1 : object {
    public static INegatableArgumentConstraintManager`1<T> That { get; }
    [EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public static T _ { get; }
    public static T Ignored { get; }
    public static INegatableArgumentConstraintManager`1<T> get_That();
    public static T get__();
    public static T get_Ignored();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FakeItEasy.ArgumentConstraintManagerExtensions : object {
    [ExtensionAttribute]
public static T IsNull(IArgumentConstraintManager`1<T> manager);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> IsNull(IArgumentConstraintManager`1<Nullable`1<T>> manager);
    [ExtensionAttribute]
public static T IsNotNull(INegatableArgumentConstraintManager`1<T> manager);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> IsNotNull(INegatableArgumentConstraintManager`1<Nullable`1<T>> manager);
    [ExtensionAttribute]
public static string Contains(IArgumentConstraintManager`1<string> manager, string value);
    [ExtensionAttribute]
public static string Contains(IArgumentConstraintManager`1<string> manager, string value, StringComparison comparisonType);
    [ExtensionAttribute]
public static T Contains(IArgumentConstraintManager`1<T> manager, object value);
    [ExtensionAttribute]
public static string StartsWith(IArgumentConstraintManager`1<string> manager, string value);
    [ExtensionAttribute]
public static string StartsWith(IArgumentConstraintManager`1<string> manager, string value, StringComparison comparisonType);
    [ExtensionAttribute]
public static string EndsWith(IArgumentConstraintManager`1<string> manager, string value);
    [ExtensionAttribute]
public static string EndsWith(IArgumentConstraintManager`1<string> manager, string value, StringComparison comparisonType);
    [ExtensionAttribute]
public static string IsNullOrEmpty(IArgumentConstraintManager`1<string> manager);
    [ExtensionAttribute]
public static T IsGreaterThan(IArgumentConstraintManager`1<T> manager, T value);
    [ExtensionAttribute]
public static T IsSameSequenceAs(IArgumentConstraintManager`1<T> manager, IEnumerable values);
    [ExtensionAttribute]
public static T IsSameSequenceAs(IArgumentConstraintManager`1<T> manager, Object[] values);
    [ExtensionAttribute]
public static T IsEmpty(IArgumentConstraintManager`1<T> manager);
    [ExtensionAttribute]
public static T IsEqualTo(IArgumentConstraintManager`1<T> manager, T value);
    [ExtensionAttribute]
public static T IsEqualTo(IArgumentConstraintManager`1<T> manager, T value, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static T IsSameAs(IArgumentConstraintManager`1<T> manager, T value);
    [ExtensionAttribute]
public static T IsInstanceOf(IArgumentConstraintManager`1<T> manager, Type type);
    [ExtensionAttribute]
public static T Matches(IArgumentConstraintManager`1<T> manager, Func`2<T, bool> predicate, string description);
    [ExtensionAttribute]
public static T Matches(IArgumentConstraintManager`1<T> manager, Func`2<T, bool> predicate, string descriptionFormat, Object[] args);
    [ExtensionAttribute]
public static T Matches(IArgumentConstraintManager`1<T> manager, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static T NullCheckedMatches(IArgumentConstraintManager`1<T> manager, Func`2<T, bool> predicate, Action`1<IOutputWriter> descriptionWriter);
    [ExtensionAttribute]
public static CancellationToken IsCanceled(IArgumentConstraintManager`1<CancellationToken> manager);
    [ExtensionAttribute]
public static CancellationToken IsNotCanceled(INegatableArgumentConstraintManager`1<CancellationToken> manager);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FakeItEasy.ArgumentEqualityComparer`1 : object {
    public Priority Priority { get; }
    public virtual Priority get_Priority();
    public virtual bool CanCompare(Type type);
    public sealed virtual bool AreEqual(object expectedValue, object argumentValue);
    protected abstract virtual bool AreEqual(T expectedValue, T argumentValue);
}
[ExtensionAttribute]
public static class FakeItEasy.ArgumentValidationConfigurationExtensions : object {
    [NullableAttribute("1")]
private static string NameOfWhenArgumentsMatchFeature;
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TInterface WithAnyArguments(IArgumentValidationConfiguration`1<TInterface> configuration);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`2<T1, bool> argumentsPredicate);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`3<T1, T2, bool> argumentsPredicate);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`4<T1, T2, T3, bool> argumentsPredicate);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`5<T1, T2, T3, T4, bool> argumentsPredicate);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`6<T1, T2, T3, T4, T5, bool> argumentsPredicate);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`7<T1, T2, T3, T4, T5, T6, bool> argumentsPredicate);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`8<T1, T2, T3, T4, T5, T6, T7, bool> argumentsPredicate);
    [ExtensionAttribute]
public static TInterface WhenArgumentsMatch(IArgumentValidationConfiguration`1<TInterface> configuration, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool> argumentsPredicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FakeItEasy.ArgumentValueFormatter`1 : object {
    public Type ForType { get; }
    public Priority Priority { get; }
    public sealed virtual Type get_ForType();
    public virtual Priority get_Priority();
    public sealed virtual string GetArgumentValueAsString(object argumentValue);
    protected abstract virtual string GetStringValue(T argumentValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FakeItEasy.AssertConfigurationExtensions : object {
    [ExtensionAttribute]
public static UnorderedCallAssertion MustHaveHappened(IAssertConfiguration configuration);
    [ExtensionAttribute]
public static void MustNotHaveHappened(IAssertConfiguration configuration);
    [ExtensionAttribute]
public static UnorderedCallAssertion MustHaveHappenedOnceExactly(IAssertConfiguration configuration);
    [ExtensionAttribute]
public static UnorderedCallAssertion MustHaveHappenedOnceOrMore(IAssertConfiguration configuration);
    [ExtensionAttribute]
public static UnorderedCallAssertion MustHaveHappenedOnceOrLess(IAssertConfiguration configuration);
    [ExtensionAttribute]
public static UnorderedCallAssertion MustHaveHappenedTwiceExactly(IAssertConfiguration configuration);
    [ExtensionAttribute]
public static UnorderedCallAssertion MustHaveHappenedTwiceOrMore(IAssertConfiguration configuration);
    [ExtensionAttribute]
public static UnorderedCallAssertion MustHaveHappenedTwiceOrLess(IAssertConfiguration configuration);
}
[ExtensionAttribute]
public static class FakeItEasy.AsyncReturnValueConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Exception exception);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`2<IFakeObjectCall, Exception> exceptionFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`1<Exception> exceptionFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Exception exception);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`2<IFakeObjectCall, Exception> exceptionFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`1<Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`2<T1, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`2<T1, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`3<T1, T2, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`3<T1, T2, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`4<T1, T2, T3, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`4<T1, T2, T3, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`5<T1, T2, T3, T4, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`5<T1, T2, T3, T4, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`6<T1, T2, T3, T4, T5, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`6<T1, T2, T3, T4, T5, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`7<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`7<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`8<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`8<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> ThrowsAsync(IReturnValueConfiguration`1<Task> configuration, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ThrowsAsync(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FakeItEasy.BehaviorLifetimeConfigurationExtensions : object {
    [ExtensionAttribute]
public static IThenConfiguration`1<TInterface> Once(IBehaviorLifetimeConfiguration`1<TInterface> configuration);
    [ExtensionAttribute]
public static IThenConfiguration`1<TInterface> Twice(IBehaviorLifetimeConfiguration`1<TInterface> configuration);
}
[ExtensionAttribute]
public static class FakeItEasy.CallbackConfigurationExtensions : object {
    [NullableAttribute("1")]
private static string NameOfInvokesFeature;
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`1<T1> actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`2<T1, T2> actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`3<T1, T2, T3> actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`4<T1, T2, T3, T4> actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`5<T1, T2, T3, T4, T5> actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`6<T1, T2, T3, T4, T5, T6> actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`7<T1, T2, T3, T4, T5, T6, T7> actionToInvoke);
    [ExtensionAttribute]
public static TInterface Invokes(ICallbackConfiguration`1<TInterface> configuration, Action`8<T1, T2, T3, T4, T5, T6, T7, T8> actionToInvoke);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class FakeItEasy.Captured`1 : Captured`2<TArgument, TArgument> {
    private static Func`2<TArgument, TArgument> Identity;
    private static Captured`1();
    public Captured`2<TArgument, TCapture> FrozenBy(Func`2<TArgument, TCapture> freezer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Captured`2 : object {
    private List`1<TCapture> values;
    private Func`2<TArgument, TCapture> freezer;
    public INegatableArgumentConstraintManager`1<TArgument> That { get; }
    [EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public TArgument _ { get; }
    public TArgument Ignored { get; }
    public IReadOnlyList`1<TCapture> Values { get; }
    internal Captured`2(Func`2<TArgument, TCapture> freezer);
    public INegatableArgumentConstraintManager`1<TArgument> get_That();
    public TArgument get__();
    public TArgument get_Ignored();
    public IReadOnlyList`1<TCapture> get_Values();
    public TCapture GetLastValue();
    internal void Add(TArgument value);
}
internal static class FakeItEasy.Compatibility.ArrayHelper : object {
    [NullableContextAttribute("1")]
public static T[] Empty();
}
[ExtensionAttribute]
public static class FakeItEasy.CompletedFakeObjectCallExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<ICompletedFakeObjectCall> Matching(IEnumerable`1<ICompletedFakeObjectCall> calls, Expression`1<Action`1<TFake>> callSpecification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Configuration.AnyCallCallRule : BuildableCallRule {
    private FakeManager manager;
    private Func`2<ArgumentCollection, bool> argumentsPredicate;
    private Type applicableToMembersWithReturnType;
    public AnyCallCallRule(FakeManager manager);
    public void MakeApplicableToMembersWithReturnType(Type type);
    public void MakeApplicableToAllNonVoidReturnTypes();
    public virtual void DescribeCallOn(IOutputWriter writer);
    public virtual void UsePredicateToValidateArguments(Func`2<ArgumentCollection, bool> predicate);
    protected virtual bool OnIsApplicableTo(IFakeObjectCall fakeObjectCall);
    protected virtual BuildableCallRule CloneCallSpecificationCore();
    private void AppendCall(IOutputWriter writer);
    private void AppendTargetObject(IOutputWriter writer);
    [CompilerGeneratedAttribute]
private string <AppendCall>g__GetCallDescription|10_0();
    [CompilerGeneratedAttribute]
private string <AppendTargetObject>g__GetTargetObjectName|11_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Configuration.AnyCallConfiguration : object {
    private IConfigurationFactory configurationFactory;
    private AnyCallCallRule configuredRule;
    private FakeManager manager;
    private static string NameOfOutRefLazilyFeature;
    private IVoidArgumentValidationConfiguration VoidConfiguration { get; }
    public AnyCallConfiguration(FakeManager manager, AnyCallCallRule configuredRule, IConfigurationFactory configurationFactory);
    private IVoidArgumentValidationConfiguration get_VoidConfiguration();
    public sealed virtual IAnyCallConfigurationWithReturnTypeSpecified`1<TMember> WithReturnType();
    public sealed virtual IAnyCallConfigurationWithReturnTypeSpecified`1<object> WithNonVoidReturnType();
    public sealed virtual IAnyCallConfigurationWithVoidReturnType WithVoidReturnType();
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> DoesNothing();
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`2<IFakeObjectCall, Exception> exceptionFactory);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws();
    public sealed virtual IVoidAfterCallbackConfiguredConfiguration Invokes(Action`1<IFakeObjectCall> action);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> CallsBaseMethod();
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> CallsWrappedMethod();
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`2<IFakeObjectCall, ICollection`1<object>> valueProducer);
    public sealed virtual UnorderedCallAssertion MustHaveHappened(int numberOfTimes, Times timesOption);
    public sealed virtual UnorderedCallAssertion MustHaveHappenedANumberOfTimesMatching(Expression`1<Func`2<int, bool>> predicate);
    public sealed virtual IAnyCallConfigurationWithNoReturnTypeSpecified Where(Func`2<IFakeObjectCall, bool> predicate, Action`1<IOutputWriter> descriptionWriter);
    public sealed virtual IVoidConfiguration WhenArgumentsMatch(Func`2<ArgumentCollection, bool> argumentsPredicate);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`2<T1, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`3<T1, T2, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`4<T1, T2, T3, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`5<T1, T2, T3, T4, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`6<T1, T2, T3, T4, T5, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`7<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`8<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`2<T1, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`3<T1, T2, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`4<T1, T2, T3, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`5<T1, T2, T3, T4, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`6<T1, T2, T3, T4, T5, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`7<T1, T2, T3, T4, T5, T6, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`8<T1, T2, T3, T4, T5, T6, T7, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Object[]> valueProducer);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[ExtensionAttribute]
internal static class FakeItEasy.Configuration.AnyCallConfigurationWithNoReturnTypeSpecifiedExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAnyCallConfigurationWithVoidReturnType MatchingEventAction(IAnyCallConfigurationWithNoReturnTypeSpecified configuration, object fake, EventAction action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class FakeItEasy.Configuration.ArgumentCollection : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] arguments;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<String[]> argumentNames;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public int Count { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> ArgumentNames { get; }
    internal MethodInfo Method { get; }
    [NullableAttribute("2")]
public object Item { get; }
    [DebuggerStepThroughAttribute]
internal ArgumentCollection(Object[] arguments, MethodInfo method);
    [DebuggerStepThroughAttribute]
public int get_Count();
    public IEnumerable`1<string> get_ArgumentNames();
    [CompilerGeneratedAttribute]
internal MethodInfo get_Method();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public object get_Item(int argumentIndex);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T Get(int index);
    public T Get(string argumentName);
    internal Object[] GetUnderlyingArgumentsArray();
    private String[] GetArgumentNames();
    private int GetArgumentIndex(string argumentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class FakeItEasy.Configuration.BuildableCallRule : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`2<IFakeObjectCall, ICollection`1<object>> DefaultOutAndRefParametersValueProducer;
    private static Action`1<IInterceptedFakeObjectCall> DefaultApplicator;
    private List`1<WherePredicate> wherePredicates;
    private ICollection`1<Action`1<IFakeObjectCall>> actions;
    private Action`1<IInterceptedFakeObjectCall> applicator;
    private bool wasApplicatorSet;
    private bool canSetOutAndRefParametersValueProducer;
    [CompilerGeneratedAttribute]
private bool <CallBaseMethod>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <CallWrappedMethodOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumberOfTimesToCall>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IFakeObjectCall, ICollection`1<object>> <OutAndRefParametersValueProducer>k__BackingField;
    public bool CallBaseMethod { get; public set; }
    [NullableAttribute("2")]
public object CallWrappedMethodOn { get; public set; }
    public Nullable`1<int> NumberOfTimesToCall { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IFakeObjectCall, ICollection`1<object>> OutAndRefParametersValueProducer { get; protected set; }
    private static BuildableCallRule();
    [CompilerGeneratedAttribute]
public bool get_CallBaseMethod();
    [CompilerGeneratedAttribute]
public void set_CallBaseMethod(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_CallWrappedMethodOn();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CallWrappedMethodOn(object value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_NumberOfTimesToCall();
    [CompilerGeneratedAttribute]
public virtual void set_NumberOfTimesToCall(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private Func`2<IFakeObjectCall, ICollection`1<object>> get_OutAndRefParametersValueProducer();
    [CompilerGeneratedAttribute]
protected void set_OutAndRefParametersValueProducer(Func`2<IFakeObjectCall, ICollection`1<object>> value);
    public void AddAction(Action`1<IFakeObjectCall> action);
    public abstract virtual void DescribeCallOn(IOutputWriter writer);
    public void UseApplicator(Action`1<IInterceptedFakeObjectCall> newApplicator);
    public void UseDefaultApplicator();
    public virtual void Apply(IInterceptedFakeObjectCall fakeObjectCall);
    public virtual bool IsApplicableTo(IFakeObjectCall fakeObjectCall);
    public void WriteDescriptionOfValidCall(IOutputWriter writer);
    public virtual void ApplyWherePredicate(Func`2<IFakeObjectCall, bool> predicate, Action`1<IOutputWriter> descriptionWriter);
    public abstract virtual void UsePredicateToValidateArguments(Func`2<ArgumentCollection, bool> predicate);
    public BuildableCallRule CloneCallSpecification();
    public void SetOutAndRefParametersValueProducer(Func`2<IFakeObjectCall, ICollection`1<object>> producer);
    protected abstract virtual BuildableCallRule CloneCallSpecificationCore();
    protected abstract virtual bool OnIsApplicableTo(IFakeObjectCall fakeObjectCall);
    private static List`1<int> GetIndexesOfOutAndRefParameters(IInterceptedFakeObjectCall fakeObjectCall);
    private void ApplyOutAndRefParametersValueProducer(IInterceptedFakeObjectCall fakeObjectCall);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Configuration.DefaultInterceptionAsserter : object {
    private IMethodInterceptionValidator methodInterceptionValidator;
    public DefaultInterceptionAsserter(IMethodInterceptionValidator methodInterceptionValidator);
    public sealed virtual void AssertThatMethodCanBeInterceptedOnInstance(MethodInfo method, object callTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Configuration.FakeConfigurationException : Exception {
    public FakeConfigurationException(string message);
    public FakeConfigurationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Configuration.FakeConfigurationManager : object {
    private IConfigurationFactory configurationFactory;
    private ICallExpressionParser callExpressionParser;
    private IInterceptionAsserter interceptionAsserter;
    private Factory ruleFactory;
    public FakeConfigurationManager(IConfigurationFactory configurationFactory, Factory callRuleFactory, ICallExpressionParser callExpressionParser, IInterceptionAsserter interceptionAsserter);
    public sealed virtual IVoidArgumentValidationConfiguration CallTo(Expression`1<Action> callSpecification);
    public sealed virtual IReturnValueArgumentValidationConfiguration`1<T> CallTo(Expression`1<Func`1<T>> callSpecification);
    public sealed virtual IAnyCallConfigurationWithNoReturnTypeSpecified CallTo(object fakeObject);
    public sealed virtual IPropertySetterAnyValueConfiguration`1<TValue> CallToSet(Expression`1<Func`1<TValue>> propertySpecification);
    [NullableContextAttribute("2")]
private static void GuardAgainstNonFake(object target);
    private IVoidArgumentValidationConfiguration CreateVoidArgumentValidationConfiguration(FakeManager fake, ParsedCallExpression parsedCallExpression);
    private void AssertThatMemberCanBeIntercepted(ParsedCallExpression parsed);
}
public interface FakeItEasy.Configuration.IAfterCallConfiguredConfiguration`1 {
}
public interface FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration`1 {
}
public interface FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified {
    [NullableContextAttribute("1")]
public abstract virtual IAnyCallConfigurationWithReturnTypeSpecified`1<TMember> WithReturnType();
    public abstract virtual IAnyCallConfigurationWithReturnTypeSpecified`1<object> WithNonVoidReturnType();
    [NullableContextAttribute("1")]
public abstract virtual IAnyCallConfigurationWithVoidReturnType WithVoidReturnType();
}
public interface FakeItEasy.Configuration.IAnyCallConfigurationWithReturnTypeSpecified`1 {
}
public interface FakeItEasy.Configuration.IAnyCallConfigurationWithVoidReturnType {
}
public interface FakeItEasy.Configuration.IArgumentValidationConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual TInterface WhenArgumentsMatch(Func`2<ArgumentCollection, bool> argumentsPredicate);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Configuration.IAssertConfiguration {
    public abstract virtual UnorderedCallAssertion MustHaveHappened(int numberOfTimes, Times timesOption);
    public abstract virtual UnorderedCallAssertion MustHaveHappenedANumberOfTimesMatching(Expression`1<Func`2<int, bool>> predicate);
}
public interface FakeItEasy.Configuration.IBehaviorLifetimeConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IThenConfiguration`1<TInterface> NumberOfTimes(int numberOfTimes);
}
public interface FakeItEasy.Configuration.ICallbackConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual TInterface Invokes(Action`1<IFakeObjectCall> action);
}
public interface FakeItEasy.Configuration.ICallBaseConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> CallsBaseMethod();
}
public interface FakeItEasy.Configuration.ICallWrappedMethodConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> CallsWrappedMethod();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Configuration.IConfigurationFactory {
    public abstract virtual IAnyCallConfigurationWithVoidReturnType CreateConfiguration(FakeManager fakeObject, BuildableCallRule callRule);
    public abstract virtual IAnyCallConfigurationWithReturnTypeSpecified`1<TMember> CreateConfiguration(FakeManager fakeObject, BuildableCallRule callRule);
    public abstract virtual IAnyCallConfigurationWithNoReturnTypeSpecified CreateAnyCallConfiguration(FakeManager fakeObject, AnyCallCallRule callRule);
}
public interface FakeItEasy.Configuration.IDoNothingConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> DoesNothing();
}
public interface FakeItEasy.Configuration.IExceptionThrowerConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`2<IFakeObjectCall, Exception> exceptionFactory);
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws();
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`2<T1, Exception> exceptionFactory);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`3<T1, T2, Exception> exceptionFactory);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`4<T1, T2, T3, Exception> exceptionFactory);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`5<T1, T2, T3, T4, Exception> exceptionFactory);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`6<T1, T2, T3, T4, T5, Exception> exceptionFactory);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`7<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`8<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> Throws(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Configuration.IFakeConfigurationManager {
    public abstract virtual IVoidArgumentValidationConfiguration CallTo(Expression`1<Action> callSpecification);
    public abstract virtual IReturnValueArgumentValidationConfiguration`1<T> CallTo(Expression`1<Func`1<T>> callSpecification);
    public abstract virtual IAnyCallConfigurationWithNoReturnTypeSpecified CallTo(object fakeObject);
    public abstract virtual IPropertySetterAnyValueConfiguration`1<TValue> CallToSet(Expression`1<Func`1<TValue>> propertySpecification);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Configuration.IInterceptionAsserter {
    public abstract virtual void AssertThatMethodCanBeInterceptedOnInstance(MethodInfo method, object callTarget);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Configuration.IManageEventConfiguration {
    public abstract virtual void Of(object fake);
}
public interface FakeItEasy.Configuration.IOrderableCallAssertion {
    [NullableContextAttribute("1")]
public abstract virtual IOrderableCallAssertion Then(UnorderedCallAssertion nextAssertion);
}
[NullableContextAttribute("2")]
public interface FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`2<IFakeObjectCall, ICollection`1<object>> valueProducer);
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`2<T1, Object[]> valueProducer);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`3<T1, T2, Object[]> valueProducer);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`4<T1, T2, T3, Object[]> valueProducer);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`5<T1, T2, T3, T4, Object[]> valueProducer);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`6<T1, T2, T3, T4, T5, Object[]> valueProducer);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`7<T1, T2, T3, T4, T5, T6, Object[]> valueProducer);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`8<T1, T2, T3, T4, T5, T6, T7, Object[]> valueProducer);
    public abstract virtual IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParametersLazily(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Object[]> valueProducer);
}
public interface FakeItEasy.Configuration.IPropertySetterAfterCallbackConfiguredConfiguration {
}
public interface FakeItEasy.Configuration.IPropertySetterAnyValueConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IPropertySetterConfiguration To(TValue value);
    [NullableContextAttribute("1")]
public abstract virtual IPropertySetterConfiguration To(Expression`1<Func`1<TValue>> valueConstraint);
}
public interface FakeItEasy.Configuration.IPropertySetterConfiguration {
}
public interface FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration`1 {
}
public interface FakeItEasy.Configuration.IReturnValueConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TMember>> ReturnsLazily(Func`2<IFakeObjectCall, TMember> valueProducer);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Configuration.IStartConfiguration`1 {
    public abstract virtual IReturnValueArgumentValidationConfiguration`1<TMember> CallsTo(Expression`1<Func`2<TFake, TMember>> callSpecification);
    public abstract virtual IVoidArgumentValidationConfiguration CallsTo(Expression`1<Action`1<TFake>> callSpecification);
    public abstract virtual IPropertySetterAnyValueConfiguration`1<TValue> CallsToSet(Expression`1<Func`2<TFake, TValue>> propertySpecification);
    public abstract virtual IAnyCallConfigurationWithNoReturnTypeSpecified AnyCall();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Configuration.IStartConfigurationFactory {
    public abstract virtual IStartConfiguration`1<TFake> CreateConfiguration(FakeManager fakeObject);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Configuration.IThenConfiguration`1 {
    public TInterface Then { get; }
    public abstract virtual TInterface get_Then();
}
public interface FakeItEasy.Configuration.IVoidAfterCallbackConfiguredConfiguration {
}
public interface FakeItEasy.Configuration.IVoidArgumentValidationConfiguration {
}
public interface FakeItEasy.Configuration.IVoidConfiguration {
}
public interface FakeItEasy.Configuration.IWhereConfiguration`1 {
    [NullableContextAttribute("1")]
public abstract virtual TInterface Where(Func`2<IFakeObjectCall, bool> predicate, Action`1<IOutputWriter> descriptionWriter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.Configuration.PropertyExpressionHelper : object {
    public static ParsedCallExpression BuildSetterFromGetter(ParsedCallExpression parsedCallExpression);
    private static string GetExpressionDescription(ParsedCallExpression parsedCallExpression);
    private static string GetPropertyName(ParsedCallExpression parsedCallExpression);
    private static bool HasThis(MethodInfo methodCall);
    private static Expression BuildArgumentThatMatchesAnything();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Configuration.PropertySetterConfiguration`1 : object {
    private ParsedCallExpression parsedSetterExpression;
    private Func`2<ParsedCallExpression, IVoidArgumentValidationConfiguration> voidArgumentValidationConfigurationFactory;
    public PropertySetterConfiguration`1(ParsedCallExpression parsedCallExpression, Func`2<ParsedCallExpression, IVoidArgumentValidationConfiguration> voidArgumentValidationConfigurationFactory);
    public sealed virtual IPropertySetterConfiguration To(TValue value);
    public sealed virtual IPropertySetterConfiguration To(Expression`1<Func`1<TValue>> valueConstraint);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`2<IFakeObjectCall, Exception> exceptionFactory);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws();
    public sealed virtual IPropertySetterAfterCallbackConfiguredConfiguration Invokes(Action`1<IFakeObjectCall> action);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> CallsBaseMethod();
    public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> CallsWrappedMethod();
    public sealed virtual UnorderedCallAssertion MustHaveHappened(int numberOfTimes, Times timesOption);
    public sealed virtual UnorderedCallAssertion MustHaveHappenedANumberOfTimesMatching(Expression`1<Func`2<int, bool>> predicate);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> DoesNothing();
    public sealed virtual IPropertySetterConfiguration WhenArgumentsMatch(Func`2<ArgumentCollection, bool> argumentsPredicate);
    private static PropertySetterAdapter<TValue> AsPropertySetterConfiguration(IVoidConfiguration voidArgumentValidationConfiguration);
    private static PropertySetterAfterCallbackConfiguredAdapter<TValue> AsPropertySetterAfterCallbackConfiguredConfiguration(IVoidAfterCallbackConfiguredConfiguration voidArgumentValidationConfiguration);
    private ParsedCallExpression CreateSetterExpressionWithNewValue(Expression`1<Func`1<TValue>> valueExpression);
    private IVoidArgumentValidationConfiguration CreateArgumentValidationConfiguration(ParsedCallExpression parsedSetter);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`2<T1, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`3<T1, T2, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`4<T1, T2, T3, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`5<T1, T2, T3, T4, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`6<T1, T2, T3, T4, T5, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`7<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`8<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IPropertySetterConfiguration> Throws(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Configuration.RuleBuilder : object {
    private Factory asserterFactory;
    private FakeManager manager;
    private bool wasRuleAdded;
    [CompilerGeneratedAttribute]
private BuildableCallRule <RuleBeingBuilt>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BuildableCallRule <PreviousRule>k__BackingField;
    private static string NameOfOutRefLazilyFeature;
    public BuildableCallRule RuleBeingBuilt { get; }
    private IVoidConfiguration FakeItEasy.Configuration.IThenConfiguration<FakeItEasy.Configuration.IVoidConfiguration>.Then { get; }
    public IEnumerable`1<CompletedFakeObjectCall> Calls { get; }
    public ICallMatcher Matcher { get; }
    private RuleBuilder Then { get; }
    [NullableAttribute("2")]
private BuildableCallRule PreviousRule { get; private set; }
    internal RuleBuilder(BuildableCallRule ruleBeingBuilt, FakeManager manager, Factory asserterFactory);
    [CompilerGeneratedAttribute]
public BuildableCallRule get_RuleBeingBuilt();
    private sealed virtual override IVoidConfiguration FakeItEasy.Configuration.IThenConfiguration<FakeItEasy.Configuration.IVoidConfiguration>.get_Then();
    public IEnumerable`1<CompletedFakeObjectCall> get_Calls();
    public ICallMatcher get_Matcher();
    private RuleBuilder get_Then();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private BuildableCallRule get_PreviousRule();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_PreviousRule(BuildableCallRule value);
    public sealed virtual IThenConfiguration`1<IVoidConfiguration> NumberOfTimes(int numberOfTimes);
    public virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`2<IFakeObjectCall, Exception> exceptionFactory);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws();
    public sealed virtual IVoidConfiguration WhenArgumentsMatch(Func`2<ArgumentCollection, bool> argumentsPredicate);
    public virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> DoesNothing();
    public virtual IVoidAfterCallbackConfiguredConfiguration Invokes(Action`1<IFakeObjectCall> action);
    public virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> CallsBaseMethod();
    public virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> CallsWrappedMethod();
    public virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`2<IFakeObjectCall, ICollection`1<object>> valueProducer);
    public sealed virtual UnorderedCallAssertion MustHaveHappened(int numberOfTimes, Times timesOption);
    public sealed virtual UnorderedCallAssertion MustHaveHappenedANumberOfTimesMatching(Expression`1<Func`2<int, bool>> predicate);
    public sealed virtual IAnyCallConfigurationWithVoidReturnType Where(Func`2<IFakeObjectCall, bool> predicate, Action`1<IOutputWriter> descriptionWriter);
    private UnorderedCallAssertion MustHaveHappened(CallCountConstraint callCountConstraint);
    private void AddRuleIfNeeded();
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`2<T1, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`3<T1, T2, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`4<T1, T2, T3, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`5<T1, T2, T3, T4, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`6<T1, T2, T3, T4, T5, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`7<T1, T2, T3, T4, T5, T6, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`8<T1, T2, T3, T4, T5, T6, T7, Exception> exceptionFactory);
    [NullableContextAttribute("0")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> Throws(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Exception> exceptionFactory);
    public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`2<T1, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`3<T1, T2, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`4<T1, T2, T3, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`5<T1, T2, T3, T4, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`6<T1, T2, T3, T4, T5, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`7<T1, T2, T3, T4, T5, T6, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`8<T1, T2, T3, T4, T5, T6, T7, Object[]> valueProducer);
    [NullableContextAttribute("2")]
public sealed virtual IAfterCallConfiguredConfiguration`1<IVoidConfiguration> AssignsOutAndRefParametersLazily(Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Object[]> valueProducer);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Configuration.StartConfiguration`1 : object {
    private Factory callRuleFactory;
    private IConfigurationFactory configurationFactory;
    private FakeManager manager;
    private ICallExpressionParser expressionParser;
    private IInterceptionAsserter interceptionAsserter;
    internal StartConfiguration`1(FakeManager manager, Factory callRuleFactory, IConfigurationFactory configurationFactory, ICallExpressionParser expressionParser, IInterceptionAsserter interceptionAsserter);
    public sealed virtual IReturnValueArgumentValidationConfiguration`1<TMember> CallsTo(Expression`1<Func`2<TFake, TMember>> callSpecification);
    public sealed virtual IVoidArgumentValidationConfiguration CallsTo(Expression`1<Action`1<TFake>> callSpecification);
    public sealed virtual IPropertySetterAnyValueConfiguration`1<TValue> CallsToSet(Expression`1<Func`2<TFake, TValue>> propertySpecification);
    public sealed virtual IAnyCallConfigurationWithNoReturnTypeSpecified AnyCall();
    private void AssertThatMemberCanBeIntercepted(ParsedCallExpression parsedCall);
    [NullableContextAttribute("2")]
private void GuardAgainstWrongFake(object callTarget);
    private IVoidArgumentValidationConfiguration CreateVoidArgumentValidationConfiguration(ParsedCallExpression parsedCallExpression);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Configuration.UnorderedCallAssertion : object {
    private FakeManager fakeManager;
    private ICallMatcher matcher;
    private Action`1<IOutputWriter> callDescriber;
    private CallCountConstraint callCountConstraint;
    internal UnorderedCallAssertion(FakeManager fakeManager, ICallMatcher matcher, Action`1<IOutputWriter> callDescriber, CallCountConstraint callCountConstraint);
    public sealed virtual IOrderableCallAssertion Then(UnorderedCallAssertion nextAssertion);
    private void CheckCallHappenedInOrder(SequentialCallContext context);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.ArgumentConstraintTrap : object {
    private static Action`1<IArgumentConstraint> ThrowWhenUnpreparedToTrapConstraint;
    private static ThreadLocal`1<Action`1<IArgumentConstraint>> saveTrappedConstraintAction;
    private static ArgumentConstraintTrap();
    public static void ReportTrappedConstraint(IArgumentConstraint constraint);
    public sealed virtual IArgumentConstraint TrapConstraintOrCreate(Action actionThatProducesConstraint, Func`1<IArgumentConstraint> defaultConstraintFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.ArgumentEqualityComparer : object {
    private IEnumerable`1<IArgumentEqualityComparer> argumentEqualityComparers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, IArgumentEqualityComparer> cachedComparers;
    public ArgumentEqualityComparer(IEnumerable`1<IArgumentEqualityComparer> argumentEqualityComparers);
    public bool AreEqual(object expectedValue, object argumentValue);
    private IArgumentEqualityComparer FindHighestPriorityComparer(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.ArgumentValueFormatter : object {
    private IEnumerable`1<IArgumentValueFormatter> typeFormatters;
    public ArgumentValueFormatter(IEnumerable`1<IArgumentValueFormatter> typeFormatters);
    public virtual string GetArgumentValueAsString(object argumentValue);
    private static int GetDistanceFromKnownType(Type comparedType, Type knownType);
    private IEnumerable`1<IArgumentValueFormatter> GetTypeFormatterCandidates(Type forType);
}
[ExtensionAttribute]
internal static class FakeItEasy.Core.AssemblyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool ReferencesFakeItEasy(Assembly assembly);
}
internal static class FakeItEasy.Core.BootstrapperLocator : object {
    [NullableContextAttribute("1")]
public static IBootstrapper FindBootstrapper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.CallCountConstraint : object {
    private Func`2<int, bool> predicate;
    private string description;
    public CallCountConstraint(Func`2<int, bool> predicate, string description);
    public bool Matches(int callCount);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.CallRuleMetadata : object {
    [CompilerGeneratedAttribute]
private int <CalledNumberOfTimes>k__BackingField;
    [CompilerGeneratedAttribute]
private IFakeObjectCallRule <Rule>k__BackingField;
    public int CalledNumberOfTimes { get; private set; }
    internal IFakeObjectCallRule Rule { get; }
    private CallRuleMetadata(IFakeObjectCallRule rule, int calledNumberOfTimes);
    [CompilerGeneratedAttribute]
public int get_CalledNumberOfTimes();
    [CompilerGeneratedAttribute]
private void set_CalledNumberOfTimes(int value);
    [CompilerGeneratedAttribute]
internal IFakeObjectCallRule get_Rule();
    public static CallRuleMetadata CalledOnce(IFakeObjectCallRule rule);
    public static CallRuleMetadata NeverCalled(IFakeObjectCallRule rule);
    public bool HasNotBeenCalledSpecifiedNumberOfTimes();
    public void RecordCall();
    [NullableContextAttribute("2")]
public virtual string ToString();
    public CallRuleMetadata GetSnapshot();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.CallWriter : object {
    private static int MaxNumberOfCallsToWrite;
    private IEqualityComparer`1<IFakeObjectCall> callComparer;
    private IFakeObjectCallFormatter callFormatter;
    public CallWriter(IFakeObjectCallFormatter callFormatter, IEqualityComparer`1<IFakeObjectCall> callComparer);
    public virtual void WriteCalls(IEnumerable`1<T> calls, IOutputWriter writer);
    private static void WriteCalls(List`1<CallInfo> callInfos, IOutputWriter writer);
    private static void WriteSpaces(IOutputWriter writer, int numberOfSpaces);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.CompletedFakeObjectCall : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentCollection <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentCollection <ArgumentsAfterCall>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FakedObject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SequenceNumber>k__BackingField;
    [NullableAttribute("2")]
public object ReturnValue { get; public set; }
    public MethodInfo Method { get; }
    public ArgumentCollection Arguments { get; }
    public ArgumentCollection ArgumentsAfterCall { get; }
    public object FakedObject { get; }
    public int SequenceNumber { get; }
    public CompletedFakeObjectCall(IInterceptedFakeObjectCall interceptedCall, Object[] arguments);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_ReturnValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ReturnValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual ArgumentCollection get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual ArgumentCollection get_ArgumentsAfterCall();
    [CompilerGeneratedAttribute]
public sealed virtual object get_FakedObject();
    [CompilerGeneratedAttribute]
public int get_SequenceNumber();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.DefaultArgumentConstraintManager`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<MatchesConstraint<T>> onConstraintCreated;
    public IArgumentConstraintManager`1<T> Not { get; }
    public DefaultArgumentConstraintManager`1(Action`1<IArgumentConstraint> onConstraintCreated);
    private DefaultArgumentConstraintManager`1(Action`1<MatchesConstraint<T>> onConstraintCreated);
    public sealed virtual IArgumentConstraintManager`1<T> get_Not();
    public sealed virtual INegatableArgumentConstraintManager`1<T> IsCapturedTo(Captured`2<T, TCapture> capturedArgument);
    public sealed virtual T Matches(Func`2<T, bool> predicate, Action`1<IOutputWriter> descriptionWriter);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
    [CompilerGeneratedAttribute]
private void <get_Not>b__4_0(MatchesConstraint<T> constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.DefaultFakeManagerAccessor : object {
    private static ConditionalWeakTable`2<object, FakeManager> FakeManagers;
    private static DefaultFakeManagerAccessor();
    public sealed virtual FakeManager GetFakeManager(object proxy);
    public sealed virtual FakeManager TryGetFakeManager(object proxy);
    public sealed virtual void SetFakeManager(object proxy, FakeManager manager);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.DefaultFakeObjectCallFormatter : object {
    private ArgumentValueFormatter argumentValueFormatter;
    private IFakeManagerAccessor fakeManagerAccessor;
    public DefaultFakeObjectCallFormatter(ArgumentValueFormatter argumentValueFormatter, IFakeManagerAccessor fakeManagerAccessor);
    public sealed virtual string GetDescription(IFakeObjectCall call);
    private static void AppendObjectType(StringBuilder builder, Type type);
    private static ArgumentValueInfo[] GetArgumentsForArgumentsList(ArgumentValueInfo[] allArguments, MethodInfo method);
    private static void AppendArgumentListPrefix(StringBuilder builder, MethodInfo method);
    private static void AppendArgumentListSuffix(StringBuilder builder, MethodInfo method);
    private static void AppendMethodName(StringBuilder builder, MethodInfo method);
    private static void AppendObjectName(StringBuilder builder, string objectName);
    private static void AppendArgumentSeparator(StringBuilder builder, int argumentIndex, int totalNumberOfArguments);
    private static ArgumentValueInfo[] GetArgumentValueInfos(IFakeObjectCall call);
    private void AppendArgumentsList(StringBuilder builder, IFakeObjectCall call);
    private void AppendArgumentValue(StringBuilder builder, ArgumentValueInfo argument);
    private string GetArgumentValueAsString(object argumentValue);
    private void AppendArguments(StringBuilder builder, ArgumentValueInfo[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.DelegateRaiser`1 : object {
    [CompilerGeneratedAttribute]
private TEventHandler <EventHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <EventArguments>k__BackingField;
    private TEventHandler EventHandler { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] EventArguments { get; }
    public DelegateRaiser`1(Object[] arguments, EventHandlerArgumentProviderMap argumentProviderMap);
    [CompilerGeneratedAttribute]
private TEventHandler get_EventHandler();
    [CompilerGeneratedAttribute]
private Object[] get_EventArguments();
    public static TEventHandler op_Implicit(DelegateRaiser`1<TEventHandler> raiser);
    private sealed virtual override Object[] FakeItEasy.Core.IEventRaiserArgumentProvider.GetEventArguments(object fake);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Core.DummyCreationException : Exception {
    public DummyCreationException(string message);
    public DummyCreationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.DynamicDummyFactory : object {
    private IEnumerable`1<IDummyFactory> allDummyFactories;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, IDummyFactory> cachedDummyFactories;
    public DynamicDummyFactory(IEnumerable`1<IDummyFactory> dummyFactories);
    public bool TryCreateDummyObject(Type typeOfDummy, Object& dummy);
    [CompilerGeneratedAttribute]
private IDummyFactory <TryCreateDummyObject>b__3_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.DynamicRaiser : DynamicObject {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] arguments;
    private EventHandlerArgumentProviderMap argumentProviderMap;
    public DynamicRaiser(Object[] arguments, EventHandlerArgumentProviderMap argumentProviderMap);
    private sealed virtual override Object[] FakeItEasy.Core.IEventRaiserArgumentProvider.GetEventArguments(object fake);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.EventCall : object {
    private static Func`2<EventInfo, MethodInfo> GetAddMethod;
    private static Func`2<EventInfo, MethodInfo> GetRemoveMethod;
    private static EventHandlerArgumentProviderMap EventHandlerArgumentProviderMap;
    [CompilerGeneratedAttribute]
private EventInfo <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <EventHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <CallingMethod>k__BackingField;
    public EventInfo Event { get; }
    public Delegate EventHandler { get; }
    private MethodInfo CallingMethod { get; }
    private EventCall(EventInfo event, MethodInfo callingMethod, Delegate eventHandler);
    private static EventCall();
    [CompilerGeneratedAttribute]
public EventInfo get_Event();
    [CompilerGeneratedAttribute]
public Delegate get_EventHandler();
    [CompilerGeneratedAttribute]
private MethodInfo get_CallingMethod();
    public static bool TryGetEventCall(IFakeObjectCall fakeObjectCall, EventCall& eventCall);
    public bool IsEventSubscription();
    public bool IsEventUnsubscription();
    [NullableContextAttribute("2")]
public bool TryTakeEventRaiserArgumentProvider(IEventRaiserArgumentProvider& argumentProvider);
    public bool IsEventRaiser();
    private static EventInfo GetEvent(MethodInfo eventAdderOrRemover);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.EventCallHandler : object {
    private FakeManager fakeManager;
    private Dictionary`2<object, Delegate> registeredEventHandlers;
    public EventCallHandler(FakeManager fakeManager);
    private EventCallHandler(FakeManager fakeManager, Dictionary`2<object, Delegate> registeredEventHandlers);
    public void HandleEventCall(EventCall eventCall);
    public EventCallHandler GetSnapshot();
    private void RemoveEventListener(EventCall call);
    private void AddEventListener(EventCall call);
    private void AddHandler(object key, Delegate handler);
    private void RemoveHandler(object key, Delegate handler);
    private void RaiseEvent(EventCall call, IEventRaiserArgumentProvider argumentProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.EventHandlerArgumentProviderMap : object {
    private ConcurrentDictionary`2<Delegate, IEventRaiserArgumentProvider> map;
    public void AddArgumentProvider(Delegate eventHandler, IEventRaiserArgumentProvider argumentProvider);
    public bool TryTakeArgumentProviderFor(Delegate eventHandler, IEventRaiserArgumentProvider& argumentProvider);
    public bool HasArgumentProvider(Delegate eventHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.FakeAsserter : object {
    private CallWriter callWriter;
    private Factory outputWriterFactory;
    private IEnumerable`1<CompletedFakeObjectCall> calls;
    private int lastSequenceNumber;
    public FakeAsserter(IEnumerable`1<CompletedFakeObjectCall> calls, int lastSequenceNumber, CallWriter callWriter, Factory outputWriterFactory);
    public virtual void AssertWasCalled(Func`2<ICompletedFakeObjectCall, bool> callPredicate, Action`1<IOutputWriter> callDescriber, CallCountConstraint callCountConstraint);
    private static void AppendCallDescription(string callDescription, StringBuilderOutputWriter writer);
    private static void AppendExpectation(IEnumerable`1<IFakeObjectCall> calls, string callCountDescription, int matchedCallCount, StringBuilderOutputWriter writer);
    private static void AppendCallList(IEnumerable`1<IFakeObjectCall> calls, CallWriter callWriter, StringBuilderOutputWriter writer);
    private string CreateExceptionMessage(IEnumerable`1<IFakeObjectCall> calls, string callDescription, string callCountDescription, int matchedCallCount);
}
internal class FakeItEasy.Core.FakeCallEqualityComparer : object {
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IFakeObjectCall x, IFakeObjectCall y);
    [NullableContextAttribute("1")]
public sealed virtual int GetHashCode(IFakeObjectCall obj);
}
internal static class FakeItEasy.Core.FakeCallProcessorProvider : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Core.FakeCreationException : Exception {
    public FakeCreationException(string message);
    public FakeCreationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Core.FakeManager : object {
    private static SharedFakeObjectCallRule[] SharedPostUserRules;
    private WeakReference objectReference;
    private LinkedList`1<CallRuleMetadata> allUserRules;
    private LinkedList`1<IInterceptionListener> interceptionListeners;
    [NullableAttribute("2")]
private EventCallHandler eventCallHandler;
    private ConcurrentQueue`1<CompletedFakeObjectCall> recordedCalls;
    private int lastSequenceNumber;
    [NullableAttribute("2")]
private FakeSnapshot initialState;
    [CompilerGeneratedAttribute]
private Type <FakeObjectType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FakeObjectName>k__BackingField;
    [NullableAttribute("2")]
public object Object { get; }
    public Type FakeObjectType { get; }
    [NullableAttribute("2")]
public string FakeObjectName { get; }
    public IEnumerable`1<IFakeObjectCallRule> Rules { get; }
    internal string FakeObjectDisplayName { get; }
    internal EventCallHandler EventCallHandler { get; }
    internal FakeManager(Type fakeObjectType, object proxy, string fakeObjectName);
    private static FakeManager();
    [NullableContextAttribute("2")]
public virtual object get_Object();
    [CompilerGeneratedAttribute]
public virtual Type get_FakeObjectType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FakeObjectName();
    public virtual IEnumerable`1<IFakeObjectCallRule> get_Rules();
    internal string get_FakeObjectDisplayName();
    internal EventCallHandler get_EventCallHandler();
    public virtual void AddRuleFirst(IFakeObjectCallRule rule);
    public virtual void AddRuleLast(IFakeObjectCallRule rule);
    public virtual void RemoveRule(IFakeObjectCallRule rule);
    public void AddInterceptionListener(IInterceptionListener listener);
    private sealed virtual override void FakeItEasy.Core.IFakeCallProcessor.Process(InterceptedFakeObjectCall fakeObjectCall);
    internal void CaptureInitialState();
    internal void RestoreInitialState();
    internal int GetLastRecordedSequenceNumber();
    internal IEnumerable`1<CompletedFakeObjectCall> GetRecordedCalls();
    internal virtual void ClearUserRules();
    internal virtual void ClearRecordedCalls();
    internal void AddRuleAfter(IFakeObjectCallRule previousRule, IFakeObjectCallRule newRule);
    private void ApplyBestRule(IInterceptedFakeObjectCall fakeObjectCall);
    private void MutateUserRules(Action`1<LinkedList`1<CallRuleMetadata>> action);
    private void RecordCall(CompletedFakeObjectCall call);
    private void UpdateLastSequenceNumber(int sequenceNumber);
    private void ReplaceUserRules(IEnumerable`1<CallRuleMetadata> rules);
    private void ReplaceRecordedCalls(CompletedFakeObjectCall[] calls);
    private void ReplaceInterceptionListeners(IInterceptionListener[] listeners);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.FakeManagerProvider : object {
    private Factory fakeManagerFactory;
    private IFakeManagerAccessor fakeManagerAccessor;
    private Type typeOfFake;
    private IProxyOptions proxyOptions;
    private object initializedFakeManagerLock;
    [NullableAttribute("2")]
private FakeManager initializedFakeManager;
    public FakeManagerProvider(Factory fakeManagerFactory, IFakeManagerAccessor fakeManagerAccessor, Type typeOfFake, IProxyOptions proxyOptions);
    public sealed virtual IFakeCallProcessor Fetch(object proxy);
    public sealed virtual void EnsureInitialized(object proxy);
    private void ApplyInitialConfiguration(object proxy);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IArgumentConstraint {
    public abstract virtual void WriteDescription(IOutputWriter writer);
    [NullableContextAttribute("2")]
public abstract virtual bool IsValid(object argument);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IArgumentConstraintTrapper {
    public abstract virtual IArgumentConstraint TrapConstraintOrCreate(Action actionThatProducesConstraint, Func`1<IArgumentConstraint> constraintFactory);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.ICallMatcher {
    public abstract virtual bool Matches(IFakeObjectCall fakeObjectCall);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Core.ICompletedFakeObjectCall {
    [NullableAttribute("2")]
public object ReturnValue { get; }
    public ArgumentCollection ArgumentsAfterCall { get; }
    [NullableContextAttribute("2")]
public abstract virtual object get_ReturnValue();
    public abstract virtual ArgumentCollection get_ArgumentsAfterCall();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IEventRaiserArgumentProvider {
    public abstract virtual Object[] GetEventArguments(object fake);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IFakeAsserter {
    public abstract virtual void AssertWasCalled(Func`2<ICompletedFakeObjectCall, bool> callPredicate, Action`1<IOutputWriter> callDescriber, CallCountConstraint callCountConstraint);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IFakeCallProcessor {
    public abstract virtual void Process(InterceptedFakeObjectCall fakeObjectCall);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IFakeCallProcessorProvider {
    public abstract virtual IFakeCallProcessor Fetch(object proxy);
    public abstract virtual void EnsureInitialized(object proxy);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IFakeManagerAccessor {
    public abstract virtual FakeManager GetFakeManager(object proxy);
    public abstract virtual FakeManager TryGetFakeManager(object proxy);
    public abstract virtual void SetFakeManager(object proxy, FakeManager manager);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Core.IFakeObjectCall {
    public MethodInfo Method { get; }
    public ArgumentCollection Arguments { get; }
    public object FakedObject { get; }
    public abstract virtual MethodInfo get_Method();
    public abstract virtual ArgumentCollection get_Arguments();
    public abstract virtual object get_FakedObject();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.IFakeObjectCallFormatter {
    public abstract virtual string GetDescription(IFakeObjectCall call);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Core.IFakeObjectCallRule {
    public Nullable`1<int> NumberOfTimesToCall { get; }
    public abstract virtual Nullable`1<int> get_NumberOfTimesToCall();
    public abstract virtual bool IsApplicableTo(IFakeObjectCall fakeObjectCall);
    public abstract virtual void Apply(IInterceptedFakeObjectCall fakeObjectCall);
}
[NullableContextAttribute("2")]
internal interface FakeItEasy.Core.IHaveASideEffect {
    public abstract virtual void ApplySideEffect(object input);
}
[NullableContextAttribute("2")]
public interface FakeItEasy.Core.IInterceptedFakeObjectCall {
    public abstract virtual void SetReturnValue(object value);
    public abstract virtual void CallBaseMethod();
    public abstract virtual void SetArgumentValue(int index, object value);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Core.IInterceptionListener {
    public abstract virtual void OnBeforeCallIntercepted(IFakeObjectCall interceptedCall);
    public abstract virtual void OnAfterCallIntercepted(ICompletedFakeObjectCall interceptedCall);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.ImplicitOptionsBuilderCatalogue : object {
    private IEnumerable`1<IFakeOptionsBuilder> allFakeOptionsBuilders;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, IFakeOptionsBuilder> cachedFakeOptionsBuilders;
    public ImplicitOptionsBuilderCatalogue(IEnumerable`1<IFakeOptionsBuilder> fakeOptionsBuilders);
    public IFakeOptionsBuilder GetImplicitOptionsBuilder(Type typeOfFake);
    [CompilerGeneratedAttribute]
private IFakeOptionsBuilder <GetImplicitOptionsBuilder>b__3_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class FakeItEasy.Core.InterceptedFakeObjectCall : object {
    public ArgumentCollection Arguments { get; }
    public object FakedObject { get; }
    public MethodInfo Method { get; }
    [NullableAttribute("2")]
public object ReturnValue { get; public set; }
    public abstract virtual ArgumentCollection get_Arguments();
    public abstract virtual object get_FakedObject();
    public abstract virtual MethodInfo get_Method();
    [NullableContextAttribute("2")]
public abstract virtual object get_ReturnValue();
    [NullableContextAttribute("2")]
public abstract virtual void set_ReturnValue(object value);
    public abstract virtual CompletedFakeObjectCall ToCompletedCall();
    public abstract virtual void CallBaseMethod();
    [NullableContextAttribute("2")]
public abstract virtual void SetArgumentValue(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override void FakeItEasy.Core.IInterceptedFakeObjectCall.SetReturnValue(object returnValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class FakeItEasy.Core.InterceptedFakeObjectCallExtensions : object {
    private static FakeAndDummyManager DummyManager { get; }
    private static FakeAndDummyManager get_DummyManager();
    [ExtensionAttribute]
public static object GetDefaultReturnValue(IInterceptedFakeObjectCall call);
    [ExtensionAttribute]
public static void CallWrappedMethod(IInterceptedFakeObjectCall fakeObjectCall, object wrappedObject);
}
public interface FakeItEasy.Core.IStatefulFakeObjectCallRule {
    [NullableContextAttribute("1")]
public abstract virtual IFakeObjectCallRule GetSnapshot();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.ITypeCatalogue {
    public abstract virtual IEnumerable`1<Type> GetAvailableTypes();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Core.ITypedArgumentConstraint {
    public Type Type { get; }
    public abstract virtual Type get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.MethodInfoManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<TypeMethodInfoPair, MethodInfo> MethodCache;
    private static MethodInfoManager();
    public virtual bool WillInvokeSameMethodOnTarget(Type target, MethodInfo first, MethodInfo second);
    public virtual MethodInfo GetMethodOnTypeThatWillBeInvokedByMethodInfo(Type type, MethodInfo method);
    private static MethodInfo FindMethodOnTypeThatWillBeInvokedByMethodInfo(Type type, MethodInfo method);
    private static MethodInfo GetMethodOnInterfaceTypeImplementedByMethod(Type type, MethodInfo method);
    private static MethodInfo GetMethodOnTypeThatImplementsInterfaceMethod(Type type, MethodInfo method);
    private static MethodInfo MakeGeneric(MethodInfo methodToMakeGeneric, MethodInfo originalMethod);
    private static bool TypeImplementsInterface(Type type, Type interfaceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Core.Raise`1 : object {
    private TEventArgs eventArguments;
    [NullableAttribute("2")]
private object eventSender;
    private bool hasSender;
    internal Raise`1(object sender, TEventArgs e, EventHandlerArgumentProviderMap argumentProviderMap);
    internal Raise`1(TEventArgs e, EventHandlerArgumentProviderMap argumentProviderMap);
    public static EventHandler`1<TEventArgs> op_Implicit(Raise`1<TEventArgs> raiser);
    public static EventHandler op_Implicit(Raise`1<TEventArgs> raiser);
    private sealed virtual override Object[] FakeItEasy.Core.IEventRaiserArgumentProvider.GetEventArguments(object fake);
    private void Now(object sender, TEventArgs e);
    private void Now(object sender, EventArgs e);
}
internal static class FakeItEasy.Core.SequenceNumberManager : object {
    private static int lastSequenceNumber;
    public static int GetNextSequenceNumber();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.SequentialCallContext : object {
    private CallWriter callWriter;
    private Factory outputWriterFactory;
    private HashSet`1<FakeManager> fakeManagers;
    private List`1<AssertedCall> assertedCalls;
    private int currentSequenceNumber;
    public SequentialCallContext(CallWriter callWriter, Factory outputWriterFactory);
    public void CheckNextCall(FakeManager fakeManager, Func`2<IFakeObjectCall, bool> callPredicate, Action`1<IOutputWriter> callDescriber, CallCountConstraint callCountConstraint);
    private void ThrowExceptionWhenAssertionFailed(List`1<CompletedFakeObjectCall> originalCallList);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <CheckNextCall>b__7_2(CompletedFakeObjectCall c);
}
internal class FakeItEasy.Core.StrictFakeRule : object {
    private StrictFakeOptions options;
    public Nullable`1<int> NumberOfTimesToCall { get; }
    public StrictFakeRule(StrictFakeOptions options);
    public sealed virtual Nullable`1<int> get_NumberOfTimesToCall();
    [NullableContextAttribute("1")]
public sealed virtual bool IsApplicableTo(IFakeObjectCall fakeObjectCall);
    [NullableContextAttribute("1")]
public sealed virtual void Apply(IInterceptedFakeObjectCall fakeObjectCall);
    private bool HasOption(StrictFakeOptions flag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.TypeCatalogue : object {
    private List`1<Type> availableTypes;
    [CompilerGeneratedAttribute]
private static Assembly <FakeItEasyAssembly>k__BackingField;
    public static Assembly FakeItEasyAssembly { get; }
    private static TypeCatalogue();
    [CompilerGeneratedAttribute]
public static Assembly get_FakeItEasyAssembly();
    public void Load(IEnumerable`1<string> extraAssemblyFiles);
    public sealed virtual IEnumerable`1<Type> GetAvailableTypes();
    private static HashSet`1<Assembly> GetAllAssemblies(IEnumerable`1<string> extraAssemblyFiles);
    [IteratorStateMachineAttribute("FakeItEasy.Core.TypeCatalogue/<GetAssemblies>d__7")]
private static IEnumerable`1<Assembly> GetAssemblies(IEnumerable`1<string> files);
    private static bool TryLoadAssemblyIfItReferencesFakeItEasy(string file, Assembly& assembly);
    private static bool TryLoadAssemblyIfItReferencesFakeItEasy(AssemblyName assemblyName, Assembly& assembly);
    private static void WarnFailedToLoadAssembly(string pathOrName, Exception ex);
    private static void WarnFailedToGetTypes(Assembly assembly, Exception ex);
    private static void WarnFailedToGetSomeTypes(Assembly assembly, ReflectionTypeLoadException ex);
    private static void Write(Exception ex, string message);
    private static void Write(DefaultOutputWriter writer, Exception ex, string message);
    private static DefaultOutputWriter CreateConsoleWriter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.TypeCatalogueInstanceProvider : object {
    private ITypeCatalogue catalogue;
    public TypeCatalogueInstanceProvider(ITypeCatalogue catalogue);
    public IEnumerable`1<T> InstantiateAllOfType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Core.WrappedObjectRule : object {
    [CompilerGeneratedAttribute]
private object <WrappedObject>k__BackingField;
    public Nullable`1<int> NumberOfTimesToCall { get; }
    public object WrappedObject { get; }
    public WrappedObjectRule(object wrappedInstance);
    public sealed virtual Nullable`1<int> get_NumberOfTimesToCall();
    [CompilerGeneratedAttribute]
public object get_WrappedObject();
    public sealed virtual bool IsApplicableTo(IFakeObjectCall fakeObjectCall);
    public sealed virtual void Apply(IInterceptedFakeObjectCall fakeObjectCall);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.Creation.CastleDynamicProxy.CastleDynamicProxyGenerator : object {
    private static IProxyGenerationHook ProxyGenerationHook;
    private static ProxyGenerator ProxyGenerator;
    private static CastleDynamicProxyGenerator();
    public static ProxyGeneratorResult GenerateInterfaceProxy(Type typeOfProxy, ReadOnlyCollection`1<Type> additionalInterfacesToImplement, IEnumerable`1<Expression`1<Func`1<Attribute>>> attributes, IFakeCallProcessorProvider fakeCallProcessorProvider);
    public static ProxyGeneratorResult GenerateClassProxy(Type typeOfProxy, ReadOnlyCollection`1<Type> additionalInterfacesToImplement, IEnumerable`1<object> argumentsForConstructor, IEnumerable`1<Expression`1<Func`1<Attribute>>> attributes, IFakeCallProcessorProvider fakeCallProcessorProvider);
    public static bool CanGenerateProxy(Type typeOfProxy, String& failReason);
    private static ProxyGenerationOptions CreateProxyGenerationOptions();
    private static ProxyGeneratorResult GetResultForFailedProxyGeneration(Type typeOfProxy, IEnumerable`1<object> argumentsForConstructor, Exception e);
    private static ProxyGeneratorResult GetProxyResultForNoDefaultConstructor(Type typeOfProxy, Exception e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.CastleDynamicProxy.CastleDynamicProxyInterceptionValidator : object {
    private MethodInfoManager methodInfoManager;
    public CastleDynamicProxyInterceptionValidator(MethodInfoManager methodInfoManager);
    [NullableContextAttribute("2")]
public sealed virtual bool MethodCanBeInterceptedOnInstance(MethodInfo method, object callTarget, String& failReason);
    private static string GetReasonForWhyMethodCanNotBeIntercepted(MethodInfo method);
    private MethodInfo GetInvokedMethod(MethodInfo method, object callTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter : InterceptedFakeObjectCall {
    private IInvocation invocation;
    private Object[] originalArguments;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentCollection <Arguments>k__BackingField;
    public MethodInfo Method { get; }
    public ArgumentCollection Arguments { get; }
    public object FakedObject { get; }
    [NullableAttribute("2")]
public object ReturnValue { get; public set; }
    [DebuggerStepThroughAttribute]
public CastleInvocationCallAdapter(IInvocation invocation);
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public virtual ArgumentCollection get_Arguments();
    public virtual object get_FakedObject();
    [NullableContextAttribute("2")]
public virtual object get_ReturnValue();
    [NullableContextAttribute("2")]
public virtual void set_ReturnValue(object value);
    public virtual CompletedFakeObjectCall ToCompletedCall();
    public virtual void CallBaseMethod();
    [NullableContextAttribute("2")]
public virtual void SetArgumentValue(int index, object value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.Creation.CastleDynamicProxy.DynamicProxyMessages : object {
    public static string ArgumentsForConstructorOnInterfaceType { get; }
    public static string get_ArgumentsForConstructorOnInterfaceType();
    public static string ProxyIsSealedType(Type type);
    public static string ProxyTypeWithNoDefaultConstructor(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class FakeItEasy.Creation.CreationResult : object {
    [CompilerGeneratedAttribute]
private static CreationResult <Untried>k__BackingField;
    public static CreationResult Untried { get; }
    public bool WasSuccessful { get; }
    [NullableAttribute("2")]
public object Result { get; }
    private static CreationResult();
    [CompilerGeneratedAttribute]
public static CreationResult get_Untried();
    public abstract virtual bool get_WasSuccessful();
    [NullableContextAttribute("2")]
public abstract virtual object get_Result();
    public static CreationResult SuccessfullyCreated(object result);
    public static CreationResult FailedToCreateDummy(Type type, string reasonForFailure);
    public static CreationResult FailedToCreateDummy(Type type, List`1<ResolvedConstructor> consideredConstructors);
    public static CreationResult FailedToCreateFake(Type type, string reasonForFailure);
    public static CreationResult FailedToCreateFake(Type type, List`1<ResolvedConstructor> consideredConstructors);
    public abstract virtual CreationResult MergeIntoDummyResult(CreationResult other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.DelegateProxies.CastleInvocationDelegateCallAdapter : InterceptedFakeObjectCall {
    private IInvocation invocation;
    private Delegate theDelegate;
    private Object[] originalArguments;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentCollection <Arguments>k__BackingField;
    public MethodInfo Method { get; }
    public ArgumentCollection Arguments { get; }
    public object FakedObject { get; }
    [NullableAttribute("2")]
public object ReturnValue { get; public set; }
    [DebuggerStepThroughAttribute]
public CastleInvocationDelegateCallAdapter(IInvocation invocation, Delegate theDelegate);
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public virtual ArgumentCollection get_Arguments();
    public virtual object get_FakedObject();
    [NullableContextAttribute("2")]
public virtual object get_ReturnValue();
    [NullableContextAttribute("2")]
public virtual void set_ReturnValue(object value);
    public virtual CompletedFakeObjectCall ToCompletedCall();
    public virtual void CallBaseMethod();
    [NullableContextAttribute("2")]
public virtual void SetArgumentValue(int index, object value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.Creation.DelegateProxies.DelegateProxyGenerator : object {
    private static ProxyGenerator ProxyGenerator;
    private static ConcurrentDictionary`2<Type, bool> AccessibleToDynamicProxyCache;
    private static DelegateProxyGenerator();
    public static ProxyGeneratorResult GenerateProxy(Type typeOfProxy, IFakeCallProcessorProvider fakeCallProcessorProvider);
    private static bool IsAccessibleToDynamicProxy(Type type);
}
internal class FakeItEasy.Creation.DelegateProxies.DelegateProxyInterceptionValidator : object {
    [NullableContextAttribute("2")]
public virtual bool MethodCanBeInterceptedOnInstance(MethodInfo method, object callTarget, String& failReason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.DummyValueResolver : object {
    private ResolveStrategy[] strategies;
    private ConcurrentDictionary`2<Type, ResolveStrategy> strategyCache;
    public DummyValueResolver(DynamicDummyFactory dummyFactory, IFakeObjectCreator fakeObjectCreator, IProxyOptionsFactory proxyOptionsFactory);
    public sealed virtual CreationResult TryResolveDummyValue(Type typeOfDummy, LoopDetectingResolutionContext resolutionContext);
    private CreationResult TryResolveDummyValueWithAllAvailableStrategies(Type typeOfDummy, LoopDetectingResolutionContext resolutionContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.FakeAndDummyManager : object {
    private IFakeObjectCreator fakeCreator;
    private IProxyOptionsFactory proxyOptionsFactory;
    private IDummyValueResolver dummyValueResolver;
    public FakeAndDummyManager(IDummyValueResolver dummyValueResolver, IFakeObjectCreator fakeCreator, IProxyOptionsFactory proxyOptionsFactory);
    public object CreateDummy(Type typeOfDummy, LoopDetectingResolutionContext resolutionContext);
    public object CreateFake(Type typeOfFake, LoopDetectingResolutionContext resolutionContext);
    public object CreateFake(Type typeOfFake, Action`1<IFakeOptions> optionsBuilder, LoopDetectingResolutionContext resolutionContext);
    public bool TryCreateDummy(Type typeOfDummy, LoopDetectingResolutionContext resolutionContext, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.FakeObjectCreator : object {
    private DefaultCreationStrategy defaultCreationStrategy;
    private DelegateCreationStrategy delegateCreationStrategy;
    public FakeObjectCreator(Factory fakeCallProcessorProviderFactory, IMethodInterceptionValidator castleMethodInterceptionValidator, IMethodInterceptionValidator delegateMethodInterceptionValidator);
    public sealed virtual CreationResult CreateFake(Type typeOfFake, IProxyOptions proxyOptions, IDummyValueResolver resolver, LoopDetectingResolutionContext resolutionContext);
    public sealed virtual CreationResult CreateFakeWithoutLoopDetection(Type typeOfFake, IProxyOptions proxyOptions, IDummyValueResolver resolver, LoopDetectingResolutionContext resolutionContext);
    [NullableContextAttribute("2")]
public sealed virtual bool MethodCanBeInterceptedOnInstance(MethodInfo method, object callTarget, String& failReason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.FakeOptions`1 : object {
    private ProxyOptions proxyOptions;
    public FakeOptions`1(ProxyOptions proxyOptions);
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.ConfigureFake(Action`1<object> action);
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.WithAttributes(Expression`1[] attributes);
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.Implements(Type interfaceType);
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.Implements();
    public sealed virtual IFakeOptions`1<T> Implements();
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.Wrapping(object wrappedInstance);
    public sealed virtual IFakeOptions`1<T> WithArgumentsForConstructor(Expression`1<Func`1<T>> constructorCall);
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.WithArgumentsForConstructor(Expression`1<Func`1<TConstructor>> constructorCall);
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.WithArgumentsForConstructor(IEnumerable`1<object> argumentsForConstructor);
    public sealed virtual IFakeOptions`1<T> WithArgumentsForConstructor(IEnumerable`1<object> argumentsForConstructor);
    public sealed virtual IFakeOptions`1<T> WithAttributes(Expression`1[] attributes);
    public sealed virtual IFakeOptions`1<T> Wrapping(T wrappedInstance);
    public sealed virtual IFakeOptions`1<T> Implements(Type interfaceType);
    public sealed virtual IFakeOptions`1<T> ConfigureFake(Action`1<T> action);
    public sealed virtual IFakeOptions`1<T> Named(string name);
    private sealed virtual override IFakeOptions FakeItEasy.Creation.IFakeOptions.Named(string name);
    private static void ConfigureFakeToWrap(object fakedObject, object wrappedObject);
    private static IEnumerable`1<object> GetConstructorArgumentsFromExpression(Expression`1<Func`1<TConstructor>> constructorCall);
    private static void AssertThatExpressionRepresentConstructorCall(Expression`1<Func`1<TConstructor>> constructorCall);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Creation.IDummyValueResolver {
    public abstract virtual CreationResult TryResolveDummyValue(Type typeOfDummy, LoopDetectingResolutionContext resolutionContext);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Creation.IFakeObjectCreator {
    public abstract virtual CreationResult CreateFake(Type typeOfFake, IProxyOptions proxyOptions, IDummyValueResolver resolver, LoopDetectingResolutionContext resolutionContext);
    public abstract virtual CreationResult CreateFakeWithoutLoopDetection(Type typeOfFake, IProxyOptions proxyOptions, IDummyValueResolver resolver, LoopDetectingResolutionContext resolutionContext);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Creation.IFakeOptions {
    public abstract virtual IFakeOptions WithArgumentsForConstructor(IEnumerable`1<object> argumentsForConstructor);
    public abstract virtual IFakeOptions WithArgumentsForConstructor(Expression`1<Func`1<TConstructor>> constructorCall);
    public abstract virtual IFakeOptions WithAttributes(Expression`1[] attributes);
    public abstract virtual IFakeOptions ConfigureFake(Action`1<object> action);
    public abstract virtual IFakeOptions Implements(Type interfaceType);
    public abstract virtual IFakeOptions Implements();
    public abstract virtual IFakeOptions Wrapping(object wrappedInstance);
    public abstract virtual IFakeOptions Named(string name);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.Creation.IFakeOptions`1 {
    public abstract virtual IFakeOptions`1<T> WithArgumentsForConstructor(IEnumerable`1<object> argumentsForConstructor);
    public abstract virtual IFakeOptions`1<T> WithArgumentsForConstructor(Expression`1<Func`1<T>> constructorCall);
    public abstract virtual IFakeOptions`1<T> Wrapping(T wrappedInstance);
    public abstract virtual IFakeOptions`1<T> WithAttributes(Expression`1[] attributes);
    public abstract virtual IFakeOptions`1<T> Implements(Type interfaceType);
    public abstract virtual IFakeOptions`1<T> Implements();
    public abstract virtual IFakeOptions`1<T> ConfigureFake(Action`1<T> action);
    public abstract virtual IFakeOptions`1<T> Named(string name);
}
[NullableContextAttribute("2")]
internal interface FakeItEasy.Creation.IMethodInterceptionValidator {
    public abstract virtual bool MethodCanBeInterceptedOnInstance(MethodInfo method, object callTarget, String& failReason);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Creation.IProxyOptions {
    [NullableAttribute("2")]
public IEnumerable`1<object> ArgumentsForConstructor { get; }
    public ReadOnlyCollection`1<Type> AdditionalInterfacesToImplement { get; }
    public IEnumerable`1<Action`1<object>> ProxyConfigurationActions { get; }
    public IEnumerable`1<Expression`1<Func`1<Attribute>>> Attributes { get; }
    [NullableAttribute("2")]
public string Name { get; }
    [NullableContextAttribute("2")]
public abstract virtual IEnumerable`1<object> get_ArgumentsForConstructor();
    public abstract virtual ReadOnlyCollection`1<Type> get_AdditionalInterfacesToImplement();
    public abstract virtual IEnumerable`1<Action`1<object>> get_ProxyConfigurationActions();
    public abstract virtual IEnumerable`1<Expression`1<Func`1<Attribute>>> get_Attributes();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Creation.IProxyOptionsFactory {
    public abstract virtual IProxyOptions BuildProxyOptions(Type typeOfFake, Action`1<IFakeOptions> optionsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.LoopDetectingResolutionContext : object {
    private HashSet`1<Type> typesCurrentlyBeingResolved;
    public bool TryBeginToResolve(Type type);
    public void EndResolve(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.ProxyGeneratorResult : object {
    [CompilerGeneratedAttribute]
private object <GeneratedProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonForFailure>k__BackingField;
    public bool ProxyWasSuccessfullyGenerated { get; }
    public object GeneratedProxy { get; }
    public string ReasonForFailure { get; }
    [NullableContextAttribute("1")]
public ProxyGeneratorResult(string reasonForFailure);
    [NullableContextAttribute("1")]
public ProxyGeneratorResult(Exception exception);
    [NullableContextAttribute("1")]
public ProxyGeneratorResult(string reasonForFailure, Exception exception);
    [NullableContextAttribute("1")]
public ProxyGeneratorResult(object generatedProxy);
    public bool get_ProxyWasSuccessfullyGenerated();
    [CompilerGeneratedAttribute]
public object get_GeneratedProxy();
    [CompilerGeneratedAttribute]
public string get_ReasonForFailure();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.ProxyOptions : object {
    private List`1<Type> additionalInterfacesToImplement;
    private List`1<Action`1<object>> proxyConfigurationActions;
    private List`1<Expression`1<Func`1<Attribute>>> attributes;
    [CompilerGeneratedAttribute]
private static IProxyOptions <Default>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IEnumerable`1<object> <ArgumentsForConstructor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static IProxyOptions Default { get; }
    [NullableAttribute("2")]
public IEnumerable`1<object> ArgumentsForConstructor { get; public set; }
    public ReadOnlyCollection`1<Type> AdditionalInterfacesToImplement { get; }
    public IEnumerable`1<Action`1<object>> ProxyConfigurationActions { get; }
    public IEnumerable`1<Expression`1<Func`1<Attribute>>> Attributes { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    private static ProxyOptions();
    [CompilerGeneratedAttribute]
public static IProxyOptions get_Default();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<object> get_ArgumentsForConstructor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ArgumentsForConstructor(IEnumerable`1<object> value);
    public sealed virtual ReadOnlyCollection`1<Type> get_AdditionalInterfacesToImplement();
    public sealed virtual IEnumerable`1<Action`1<object>> get_ProxyConfigurationActions();
    public sealed virtual IEnumerable`1<Expression`1<Func`1<Attribute>>> get_Attributes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    public void AddInterfaceToImplement(Type interfaceType);
    public void AddProxyConfigurationAction(Action`1<object> action);
    public void AddAttribute(Expression`1<Func`1<Attribute>> attribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.ProxyOptionsFactory : object {
    private static ConcurrentDictionary`2<Type, Func`2<ProxyOptions, IFakeOptions>> FakeOptionsFactoryCache;
    private ImplicitOptionsBuilderCatalogue implicitOptionsBuilderCatalogue;
    public ProxyOptionsFactory(ImplicitOptionsBuilderCatalogue implicitOptionsBuilderCatalogue);
    private static ProxyOptionsFactory();
    public sealed virtual IProxyOptions BuildProxyOptions(Type typeOfFake, Action`1<IFakeOptions> optionsBuilder);
    private static FakeOptions`1<T> CreateFakeOptions(ProxyOptions proxyOptions);
    private static Func`2<ProxyOptions, IFakeOptions> GetFakeOptionsFactory(Type typeOfFake);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.ResolvedArgument : object {
    [CompilerGeneratedAttribute]
private Type <ArgumentType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <ResolvedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasResolved>k__BackingField;
    public Type ArgumentType { get; }
    [NullableAttribute("2")]
public object ResolvedValue { get; public set; }
    public bool WasResolved { get; public set; }
    public ResolvedArgument(Type argumentType);
    [CompilerGeneratedAttribute]
public Type get_ArgumentType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_ResolvedValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResolvedValue(object value);
    [CompilerGeneratedAttribute]
public bool get_WasResolved();
    [CompilerGeneratedAttribute]
public void set_WasResolved(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Creation.ResolvedConstructor : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ResolvedArgument> <Arguments>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ReasonForFailure>k__BackingField;
    public bool WasSuccessfullyResolved { get; }
    public IEnumerable`1<ResolvedArgument> Arguments { get; }
    [NullableAttribute("2")]
public string ReasonForFailure { get; public set; }
    public ResolvedConstructor(IEnumerable`1<Type> parameterTypes, IDummyValueResolver resolver, LoopDetectingResolutionContext resolutionContext);
    public bool get_WasSuccessfullyResolved();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ResolvedArgument> get_Arguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ReasonForFailure();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ReasonForFailure(string value);
    private static List`1<ResolvedArgument> ResolveArguments(IEnumerable`1<Type> parameterTypes, IDummyValueResolver resolver, LoopDetectingResolutionContext resolutionContext);
}
public class FakeItEasy.DefaultBootstrapper : object {
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<string> GetAssemblyFileNamesToScanForExtensions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.DefaultOutputWriter : object {
    private static string IndentString;
    private Action`1<char> output;
    private ArgumentValueFormatter argumentValueFormatter;
    private string currentIndent;
    private WriteState writerState;
    public DefaultOutputWriter(Action`1<char> output, ArgumentValueFormatter argumentValueFormatter);
    public sealed virtual IOutputWriter Write(string value);
    public sealed virtual IOutputWriter WriteArgumentValue(object value);
    public sealed virtual IDisposable Indent();
    private void AppendIndent();
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FakeItEasy.DummyFactory`1 : object {
    public Priority Priority { get; }
    public virtual Priority get_Priority();
    public sealed virtual bool CanCreate(Type type);
    public sealed virtual object Create(Type type);
    protected abstract virtual T Create();
    private void AssertThatFakeIsOfCorrectType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class FakeItEasy.EnumerableExtensions : object {
    [ExtensionAttribute]
public static string ToCollectionString(IEnumerable`1<T> items, Func`2<T, string> stringConverter, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> source, T item);
    [ExtensionAttribute]
public static IList`1<T> AsList(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IList`1<object> AsList(IEnumerable source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FakeItEasy.EventAction : object {
    public static EventAction Add(string eventName);
    public static EventAction Remove(string eventName);
    public static EventAction Add();
    public static EventAction Remove();
    internal bool Matches(IFakeObjectCall call);
    internal void WriteDescription(object fake, IOutputWriter writer);
    private protected abstract virtual bool Matches(EventCall eventCall);
    private protected abstract virtual void WriteDescription(string fakeDisplayName, IOutputWriter writer);
}
[ExtensionAttribute]
internal static class FakeItEasy.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Rethrow(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.ExceptionMessages : object {
    public static string ArgumentNameDoesNotExist { get; }
    public static string NonConstructorExpression { get; }
    public static string NowCalledDirectly { get; }
    public static string NumberOfOutAndRefParametersDoesNotMatchCall { get; }
    public static string WrongNumberOfArguments { get; }
    public static string DummyCreationExceptionDefault { get; }
    public static string FakeCreationExceptionDefault { get; }
    public static string ArgumentConstraintCannotBeNestedInArgument { get; }
    public static string DelegateCannotCallBaseMethod { get; }
    public static string NotAWrappingFake { get; }
    public static string CallBehaviorAlreadyDefined { get; }
    public static string OutAndRefBehaviorAlreadyDefined { get; }
    public static string NumberOfTimesNotGreaterThanZero { get; }
    public static string CallTargetIsNotFakeBeingConfigured { get; }
    public static string CannotFindPreviousRule { get; }
    public static string NotAMethodCallOrPropertyGetter { get; }
    public static string ArgumentConstraintCanOnlyBeUsedInCallSpecification { get; }
    public static string GetAssemblyFileNamesToScanForExtensionsShouldntReturnNull { get; }
    public static string WrappingFakeCannotRaiseEvent { get; }
    public static string CannotRaiseEventWhenCallingBaseMethod { get; }
    public static string HandleEventsOnStrictFakes { get; }
    public static string NoCapturedValues { get; }
    public static string get_ArgumentNameDoesNotExist();
    public static string get_NonConstructorExpression();
    public static string get_NowCalledDirectly();
    public static string get_NumberOfOutAndRefParametersDoesNotMatchCall();
    public static string get_WrongNumberOfArguments();
    public static string get_DummyCreationExceptionDefault();
    public static string get_FakeCreationExceptionDefault();
    public static string get_ArgumentConstraintCannotBeNestedInArgument();
    public static string get_DelegateCannotCallBaseMethod();
    public static string get_NotAWrappingFake();
    public static string get_CallBehaviorAlreadyDefined();
    public static string get_OutAndRefBehaviorAlreadyDefined();
    public static string get_NumberOfTimesNotGreaterThanZero();
    public static string get_CallTargetIsNotFakeBeingConfigured();
    public static string get_CannotFindPreviousRule();
    public static string get_NotAMethodCallOrPropertyGetter();
    public static string get_ArgumentConstraintCanOnlyBeUsedInCallSpecification();
    public static string get_GetAssemblyFileNamesToScanForExtensionsShouldntReturnNull();
    public static string get_WrappingFakeCannotRaiseEvent();
    public static string get_CannotRaiseEventWhenCallingBaseMethod();
    public static string get_HandleEventsOnStrictFakes();
    public static string get_NoCapturedValues();
    public static string WrongConstructorExpressionType(Type actualConstructorType, Type expectedConstructorType);
    public static string NotRecognizedAsAFake(object proxy, Type type);
    public static string CallToUnconfiguredMethodOfStrictFake(IFakeObjectCall call);
    public static string ArgumentConstraintHasWrongType(Type constraintType, Type parameterType);
    public static string TooManyArgumentConstraints(IArgumentConstraint constraint);
    public static string UserCallbackThrewAnException(string callbackDescription);
    public static string CannotInterceptMember(string failReason, string memberType, string description);
    public static string ServiceNotRegistered();
    public static string CallSignatureDoesNotMatchValueProducer(string nameOfFeature, string fakeSignature, string actionSignature);
    public static string CallSignatureDoesNotMatchArguments(string fakeSignature, string actionSignature);
    public static string PropertyHasNoSetter(string propertyName);
    public static string ExpressionIsIndexedPropertyWithoutSetter(string expressionDescription);
    public static string IsNotAGetter(string expressionDescription);
    public static string UnableToCast(Type originalType, Type targetType);
    public static string NotAnInterface(Type interfaceType);
    public static string FailedToFakeValueType(Type fakeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FakeItEasy.ExceptionThrowerConfigurationExtensions : object {
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<TInterface> Throws(IExceptionThrowerConfiguration`1<TInterface> configuration, Exception exception);
    [ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<TInterface> Throws(IExceptionThrowerConfiguration`1<TInterface> configuration, Func`1<Exception> exceptionFactory);
    [ExtensionAttribute]
internal static IAfterCallConfiguredConfiguration`1<TInterface> Throws(IExceptionThrowerConfiguration`1<TInterface> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.ExpectationException : Exception {
    public ExpectationException(string message);
    public ExpectationException(string message, Exception innerException);
}
[ExtensionAttribute]
internal static class FakeItEasy.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static object Evaluate(Expression expression);
    [NullableContextAttribute("2")]
private static bool TryFastEvaluate(Expression expression, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ArgumentConstraints.AggregateArgumentConstraint : object {
    private IArgumentConstraint[] constraintsField;
    public IEnumerable`1<IArgumentConstraint> Constraints { get; }
    public AggregateArgumentConstraint(IEnumerable`1<IArgumentConstraint> constraints);
    public IEnumerable`1<IArgumentConstraint> get_Constraints();
    public sealed virtual void WriteDescription(IOutputWriter writer);
    [NullableContextAttribute("2")]
public sealed virtual bool IsValid(object argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ArgumentConstraints.EqualityArgumentConstraint : object {
    private object expectedValue;
    public string ConstraintDescription { get; }
    private EqualityArgumentConstraint(object expectedValue);
    public string get_ConstraintDescription();
    public static IArgumentConstraint FromExpectedValue(object expectedValue);
    [NullableContextAttribute("2")]
public sealed virtual bool IsValid(object argument);
    public virtual string ToString();
    public sealed virtual void WriteDescription(IOutputWriter writer);
}
[NullableContextAttribute("2")]
internal interface FakeItEasy.Expressions.ArgumentConstraints.IArgumentValueProvider {
    public object Value { get; }
    public abstract virtual object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ArgumentConstraints.NullArgumentConstraint : object {
    [CompilerGeneratedAttribute]
private static NullArgumentConstraint <Instance>k__BackingField;
    public static NullArgumentConstraint Instance { get; }
    public string ConstraintDescription { get; }
    private static NullArgumentConstraint();
    [CompilerGeneratedAttribute]
public static NullArgumentConstraint get_Instance();
    public string get_ConstraintDescription();
    [NullableContextAttribute("2")]
public sealed virtual bool IsValid(object argument);
    public virtual string ToString();
    public sealed virtual void WriteDescription(IOutputWriter writer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ArgumentConstraints.OutArgumentConstraint : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; }
    public OutArgumentConstraint(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [NullableContextAttribute("1")]
public sealed virtual void WriteDescription(IOutputWriter writer);
    public sealed virtual bool IsValid(object argument);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ArgumentConstraints.RefArgumentConstraint : object {
    [NullableAttribute("1")]
private IArgumentConstraint baseConstraint;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; }
    [NullableContextAttribute("1")]
public RefArgumentConstraint(IArgumentConstraint baseConstraint, object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [NullableContextAttribute("1")]
public sealed virtual void WriteDescription(IOutputWriter writer);
    public sealed virtual bool IsValid(object argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.Expressions.CallConstraintDescriber : object {
    public static void DescribeCallOn(IOutputWriter writer, object callTarget, MethodInfo method, IEnumerable`1<IArgumentConstraint> argumentConstraints);
    private static void WriteObjectType(IOutputWriter writer, Type type);
    private static void WriteMethodName(IOutputWriter writer, MethodInfo method);
    private static List`1<IArgumentConstraint> GetArgumentConstraintsForArgumentsList(MethodInfo method, IEnumerable`1<IArgumentConstraint> argumentConstraints);
    private static void WriteArgumentListPrefix(IOutputWriter writer, MethodInfo method);
    private static void WriteArgumentListSuffix(IOutputWriter writer, MethodInfo method);
    private static void WriteArgumentsListString(IOutputWriter writer, MethodInfo method, IEnumerable`1<IArgumentConstraint> argumentConstraints);
    private static void WriteObjectName(IOutputWriter writer, object callTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.CallExpressionParser : object {
    public sealed virtual ParsedCallExpression Parse(LambdaExpression callExpression);
    public sealed virtual ParsedCallExpression Parse(LambdaExpression callExpression, object fake);
    private static ParsedCallExpression ParseInvocationExpression(InvocationExpression expression);
    private static ParsedCallExpression ParseMethodCallExpression(MethodCallExpression expression);
    private static ParsedCallExpression ParsePropertyCallExpression(MemberExpression expression);
    private static ParsedArgumentExpression[] CreateParsedArgumentExpressions(IList`1<Expression> expressionArguments, ParameterInfo[] parameters);
    private static LambdaExpression ReplaceParameterWithFake(LambdaExpression callExpression, object fake);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ExpressionArgumentConstraintFactory : object {
    private IArgumentConstraintTrapper argumentConstraintTrapper;
    public ExpressionArgumentConstraintFactory(IArgumentConstraintTrapper argumentConstraintTrapper);
    public virtual IArgumentConstraint GetArgumentConstraint(ParsedArgumentExpression argument);
    private static bool IsParamArrayExpression(ParsedArgumentExpression argument);
    private static bool IsTaggedWithParamArrayAttribute(ParsedArgumentExpression argument);
    private static bool IsOutArgument(ParsedArgumentExpression argument);
    private static void CheckArgumentExpressionIsValid(Expression expression);
    private static bool IsArgumentConstraintManagerExtensionMethod(MethodCallExpression methodCallExpression);
    private static Expression GetExpressionWithoutConversion(Expression expression);
    private static bool IsBuiltInConstraintDefiningMember(MemberExpression node);
    private static Type GetGenericTypeDefinition(Type type);
    private static void CheckConstraintIsCompatibleWithParameterType(ITypedArgumentConstraint constraint, Type parameterType);
    private IArgumentConstraint GetArgumentConstraintFromExpression(Expression expression, Type parameterType, Object& value);
    private AggregateArgumentConstraint CreateParamArrayConstraint(NewArrayExpression expression, Type parameterType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ExpressionCallMatcher : object {
    private MethodInfoManager methodInfoManager;
    private ParsedCallExpression parsedExpression;
    private IArgumentConstraint[] argumentConstraints;
    private Func`2<ArgumentCollection, bool> argumentsPredicate;
    private bool useExplicitArgumentsPredicate;
    private MethodInfo Method { get; }
    [NullableAttribute("2")]
private object CallTarget { get; }
    public ExpressionCallMatcher(ParsedCallExpression parsedExpression, ExpressionArgumentConstraintFactory constraintFactory, MethodInfoManager methodInfoManager);
    private MethodInfo get_Method();
    [NullableContextAttribute("2")]
private object get_CallTarget();
    public virtual void DescribeCallOn(IOutputWriter writer);
    public virtual bool Matches(IFakeObjectCall call);
    public virtual void UsePredicateToValidateArguments(Func`2<ArgumentCollection, bool> predicate);
    public Func`2<IFakeObjectCall, ICollection`1<object>> GetOutAndRefParametersValueProducer();
    public void PerformConstraintMatcherSideEffects(IFakeObjectCall fakeObjectCall);
    private bool InvokesSameMethodOnTarget(Type type, MethodInfo first, MethodInfo second);
    private bool ArgumentsMatches(ArgumentCollection argumentCollection);
    private bool ArgumentsMatchesArgumentConstraints(ArgumentCollection argumentCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ExpressionCallRule : BuildableCallRule {
    [CompilerGeneratedAttribute]
private ExpressionCallMatcher <ExpressionMatcher>k__BackingField;
    private ExpressionCallMatcher ExpressionMatcher { get; }
    public ExpressionCallRule(ExpressionCallMatcher expressionMatcher);
    [CompilerGeneratedAttribute]
private ExpressionCallMatcher get_ExpressionMatcher();
    public virtual void DescribeCallOn(IOutputWriter writer);
    public virtual void UsePredicateToValidateArguments(Func`2<ArgumentCollection, bool> argumentsPredicate);
    protected virtual bool OnIsApplicableTo(IFakeObjectCall fakeObjectCall);
    protected virtual BuildableCallRule CloneCallSpecificationCore();
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Expressions.ICallExpressionParser {
    public abstract virtual ParsedCallExpression Parse(LambdaExpression callExpression);
    public abstract virtual ParsedCallExpression Parse(LambdaExpression callExpression, object fake);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.Expressions.IExpressionCallMatcherFactory {
    public abstract virtual ICallMatcher CreateCallMatcher(ParsedCallExpression callSpecification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ParsedArgumentExpression : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <ArgumentInformation>k__BackingField;
    public Expression Expression { get; }
    public ParameterInfo ArgumentInformation { get; }
    public ParsedArgumentExpression(Expression expression, ParameterInfo argumentInformation);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public ParameterInfo get_ArgumentInformation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.Expressions.ParsedCallExpression : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<object> callTarget;
    [CompilerGeneratedAttribute]
private MethodInfo <CalledMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsedArgumentExpression[] <ArgumentsExpressions>k__BackingField;
    public MethodInfo CalledMethod { get; }
    public ParsedArgumentExpression[] ArgumentsExpressions { get; }
    [NullableAttribute("2")]
public object CallTarget { get; }
    public ParsedCallExpression(MethodInfo calledMethod, Expression callTargetExpression, ParsedArgumentExpression[] argumentsExpressions);
    public ParsedCallExpression(MethodInfo calledMethod, object callTarget, ParsedArgumentExpression[] argumentsExpressions);
    [CompilerGeneratedAttribute]
public MethodInfo get_CalledMethod();
    [CompilerGeneratedAttribute]
public ParsedArgumentExpression[] get_ArgumentsExpressions();
    [NullableContextAttribute("2")]
public object get_CallTarget();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class FakeItEasy.Fake : object {
    private static IFakeManagerAccessor FakeManagerAccessor;
    private static Fake();
    [DebuggerStepThroughAttribute]
public static FakeManager GetFakeManager(object fakedObject);
    public static IEnumerable`1<ICompletedFakeObjectCall> GetCalls(object fakedObject);
    [ObsoleteAttribute("ClearConfiguration will be removed in version 9.0.0. Use Fake.Reset, or discard the fake and create a new one.")]
public static void ClearConfiguration(object fakedObject);
    public static void ClearRecordedCalls(object fakedObject);
    [DebuggerStepThroughAttribute]
public static bool TryGetFakeManager(object potentialFake, FakeManager& fakeManager);
    [DebuggerStepThroughAttribute]
public static bool IsFake(object potentialFake);
    public static void Reset(object fake);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.Fake`1 : object {
    [CompilerGeneratedAttribute]
private T <FakedObject>k__BackingField;
    public T FakedObject { get; }
    public IEnumerable`1<ICompletedFakeObjectCall> RecordedCalls { get; }
    private static FakeAndDummyManager FakeAndDummyManager { get; }
    private IStartConfiguration`1<T> StartConfiguration { get; }
    public Fake`1(Action`1<IFakeOptions`1<T>> optionsBuilder);
    [CompilerGeneratedAttribute]
public T get_FakedObject();
    public IEnumerable`1<ICompletedFakeObjectCall> get_RecordedCalls();
    private static FakeAndDummyManager get_FakeAndDummyManager();
    private IStartConfiguration`1<T> get_StartConfiguration();
    public IVoidArgumentValidationConfiguration CallsTo(Expression`1<Action`1<T>> callSpecification);
    public IReturnValueArgumentValidationConfiguration`1<TMember> CallsTo(Expression`1<Func`2<T, TMember>> callSpecification);
    public IPropertySetterAnyValueConfiguration`1<TValue> CallsToSet(Expression`1<Func`2<T, TValue>> propertySpecification);
    public IAnyCallConfigurationWithNoReturnTypeSpecified AnyCall();
    public IAnyCallConfigurationWithVoidReturnType CallsTo(EventAction action);
    private static T CreateFake(Action`1<IFakeOptions`1<T>> optionsBuilder);
    private sealed virtual override Type FakeItEasy.IHideObjectMembers.GetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FakeItEasy.FakeObjectCallExtensions : object {
    [ExtensionAttribute]
public static T GetArgument(IFakeObjectCall call, int argumentIndex);
    [ExtensionAttribute]
public static T GetArgument(IFakeObjectCall call, string argumentName);
    [ExtensionAttribute]
internal static string GetDescription(IFakeObjectCall fakeObjectCall);
    private static string GetParametersString(IFakeObjectCall fakeObjectCall);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FakeItEasy.FakeOptionsBuilder`1 : object {
    public Priority Priority { get; }
    public virtual Priority get_Priority();
    private sealed virtual override bool FakeItEasy.IFakeOptionsBuilder.CanBuildOptionsForFakeOfType(Type type);
    private sealed virtual override void FakeItEasy.IFakeOptionsBuilder.BuildOptions(Type typeOfFake, IFakeOptions options);
    protected abstract virtual void BuildOptions(IFakeOptions`1<TFake> options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FakeItEasy.FakeOptionsExtensions : object {
    [ExtensionAttribute]
public static IFakeOptions`1<T> Strict(IFakeOptions`1<T> options);
    [ExtensionAttribute]
public static IFakeOptions`1<T> Strict(IFakeOptions`1<T> options, StrictFakeOptions strictOptions);
    [ExtensionAttribute]
public static IFakeOptions Strict(IFakeOptions options);
    [ExtensionAttribute]
public static IFakeOptions Strict(IFakeOptions options, StrictFakeOptions strictOptions);
    [ExtensionAttribute]
public static IFakeOptions`1<T> CallsBaseMethods(IFakeOptions`1<T> options);
    [ExtensionAttribute]
public static IFakeOptions CallsBaseMethods(IFakeOptions options);
}
internal static class FakeItEasy.Guard : object {
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public static T AgainstNull(T argument, string argumentName);
}
public interface FakeItEasy.IArgumentConstraintManager`1 {
    [NullableContextAttribute("1")]
public abstract virtual T Matches(Func`2<T, bool> predicate, Action`1<IOutputWriter> descriptionWriter);
}
[NullableContextAttribute("1")]
internal interface FakeItEasy.IArgumentConstraintManagerFactory {
    public abstract virtual ICapturableArgumentConstraintManager`1<T> Create();
}
[NullableContextAttribute("1")]
public interface FakeItEasy.IArgumentEqualityComparer {
    public Priority Priority { get; }
    public abstract virtual Priority get_Priority();
    public abstract virtual bool CanCompare(Type type);
    public abstract virtual bool AreEqual(object expectedValue, object argumentValue);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.IArgumentValueFormatter {
    public Type ForType { get; }
    public Priority Priority { get; }
    public abstract virtual Type get_ForType();
    public abstract virtual Priority get_Priority();
    public abstract virtual string GetArgumentValueAsString(object argumentValue);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.IBootstrapper {
    public abstract virtual IEnumerable`1<string> GetAssemblyFileNamesToScanForExtensions();
}
internal interface FakeItEasy.ICapturableArgumentConstraintManager`1 {
    [NullableContextAttribute("1")]
public abstract virtual INegatableArgumentConstraintManager`1<T> IsCapturedTo(Captured`2<T, TCapture> capturedArgument);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.IDummyFactory {
    public Priority Priority { get; }
    public abstract virtual Priority get_Priority();
    public abstract virtual bool CanCreate(Type type);
    public abstract virtual object Create(Type type);
}
[NullableContextAttribute("1")]
public interface FakeItEasy.IFakeOptionsBuilder {
    public Priority Priority { get; }
    public abstract virtual Priority get_Priority();
    public abstract virtual bool CanBuildOptionsForFakeOfType(Type type);
    public abstract virtual void BuildOptions(Type typeOfFake, IFakeOptions options);
}
[NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public interface FakeItEasy.IHideObjectMembers {
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object o);
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
}
[NullableContextAttribute("1")]
public interface FakeItEasy.INegatableArgumentConstraintManager`1 {
    public IArgumentConstraintManager`1<T> Not { get; }
    public abstract virtual IArgumentConstraintManager`1<T> get_Not();
}
[NullableContextAttribute("1")]
public interface FakeItEasy.IOutputWriter {
    public abstract virtual IOutputWriter Write(string value);
    public abstract virtual IOutputWriter WriteArgumentValue(object value);
    public abstract virtual IDisposable Indent();
}
[ExtensionAttribute]
internal static class FakeItEasy.LinkedListExtensions : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("FakeItEasy.LinkedListExtensions/<Nodes>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<LinkedListNode`1<T>> Nodes(LinkedList`1<T> linkedList);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class FakeItEasy.Manage : object {
    public static IManageEventConfiguration AllEvents { get; }
    public static IManageEventConfiguration get_AllEvents();
    public static IManageEventConfiguration Event(string eventName);
    private static void ManageEvents(object fake, Func`2<EventCall, bool> eventCallPredicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class FakeItEasy.MethodInfoExtensions : object {
    private static ConcurrentDictionary`2<MethodInfo, ObjectMethod> ObjectMethodMap;
    private static MethodInfoExtensions();
    [ExtensionAttribute]
public static string GetGenericArgumentsString(MethodInfo method);
    [ExtensionAttribute]
public static bool IsPropertyGetterOrSetter(MethodInfo method);
    [ExtensionAttribute]
public static bool IsPropertySetter(MethodInfo method);
    [ExtensionAttribute]
public static bool IsPropertyGetter(MethodInfo method);
    [ExtensionAttribute]
public static string GetDescription(MethodInfo method);
    [ExtensionAttribute]
public static bool HasSameBaseMethodAs(MethodInfo first, MethodInfo second);
    [ExtensionAttribute]
public static ObjectMethod GetObjectMethod(MethodInfo method);
    [ExtensionAttribute]
private static bool IsSameMethodAs(MethodInfo method, MethodInfo otherMethod);
    private static MethodInfo GetBaseDefinition(MethodInfo method);
    private static void AppendMethodName(StringBuilder builder, MethodInfo method);
    private static void AppendParameterList(StringBuilder builder, MethodInfo method);
    private static void AppendParameterListPrefix(StringBuilder builder, MethodInfo method);
    private static void AppendParameterListSuffix(StringBuilder builder, MethodInfo method);
    private static void AppendParameters(StringBuilder builder, ParameterInfo[] parameters);
    private static void AppendParameterSeparator(StringBuilder builder, int argumentIndex);
    [CompilerGeneratedAttribute]
internal static ObjectMethod <GetObjectMethod>g__CalculateObjectMethod|7_0(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.ObjectMembers : object {
    public static MethodInfo EqualsMethod;
    public static MethodInfo ToStringMethod;
    public static MethodInfo GetHashCodeMethod;
    private static ObjectMembers();
}
internal enum FakeItEasy.ObjectMethod : Enum {
    public int value__;
    public static ObjectMethod None;
    public static ObjectMethod EqualsMethod;
    public static ObjectMethod ToStringMethod;
    public static ObjectMethod GetHashCodeMethod;
}
[ExtensionAttribute]
public static class FakeItEasy.OutAndRefParametersConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<TInterface> AssignsOutAndRefParameters(IOutAndRefParametersConfiguration`1<TInterface> configuration, Object[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FakeItEasy.OutputWriterExtensions : object {
    [ExtensionAttribute]
public static IOutputWriter WriteLine(IOutputWriter writer);
    [ExtensionAttribute]
public static IOutputWriter Write(IOutputWriter writer, string format, Object[] args);
    [ExtensionAttribute]
public static IOutputWriter Write(IOutputWriter writer, object value);
    [ExtensionAttribute]
internal static IOutputWriter WriteArgumentValues(IOutputWriter writer, IEnumerable values);
    [ExtensionAttribute]
private static IOutputWriter WriteArgumentValuesImpl(IOutputWriter writer, IEnumerable values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class FakeItEasy.ParameterInfoExtensions : object {
    private static string IsReadOnlyAttributeFullName;
    [ExtensionAttribute]
public static bool IsOutOrRef(ParameterInfo parameterInfo);
}
public class FakeItEasy.Priority : ValueType {
    private int value;
    [CompilerGeneratedAttribute]
private static Priority <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static Priority <Internal>k__BackingField;
    public static Priority Default { get; }
    internal static Priority Internal { get; }
    public Priority(byte value);
    private Priority(int value);
    private static Priority();
    [CompilerGeneratedAttribute]
public static Priority get_Default();
    [CompilerGeneratedAttribute]
internal static Priority get_Internal();
    public static bool op_LessThan(Priority left, Priority right);
    public static bool op_GreaterThan(Priority left, Priority right);
    public static bool op_LessThanOrEqual(Priority left, Priority right);
    public static bool op_GreaterThanOrEqual(Priority left, Priority right);
    public static bool op_Equality(Priority left, Priority right);
    public static bool op_Inequality(Priority left, Priority right);
    public sealed virtual int CompareTo(Priority other);
    public sealed virtual bool Equals(Priority other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class FakeItEasy.Raise : object {
    private static EventHandlerArgumentProviderMap ArgumentProviderMap;
    private static Raise();
    public static Raise`1<TEventArgs> With(object sender, TEventArgs e);
    public static Raise`1<TEventArgs> With(TEventArgs e);
    public static Raise`1<EventArgs> WithEmpty();
}
[ExtensionAttribute]
public static class FakeItEasy.ReturnValueConfigurationExtensions : object {
    [NullableAttribute("1")]
private static string NameOfReturnsLazilyFeature;
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<T>> Returns(IReturnValueConfiguration`1<T> configuration, T value);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> Returns(IReturnValueConfiguration`1<Task`1<T>> configuration, T value);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<T>> ReturnsLazily(IReturnValueConfiguration`1<T> configuration, Func`1<T> valueProducer);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<T>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<T>> configuration, Func`1<T> valueProducer);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ReturnsNextFromSequence(IReturnValueConfiguration`1<T> configuration, T[] values);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ReturnsNextFromSequence(IReturnValueConfiguration`1<Task`1<T>> configuration, T[] values);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IAfterCallConfiguredConfiguration`1<IReturnValueConfiguration`1<Task>> DoesNothing(IReturnValueConfiguration`1<Task> configuration);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void ReturnsNextFromQueue(IReturnValueConfiguration`1<T> configuration, ConcurrentQueue`1<T> queue);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`2<T1, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`2<T1, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`3<T1, T2, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`3<T1, T2, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`4<T1, T2, T3, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`4<T1, T2, T3, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`5<T1, T2, T3, T4, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`5<T1, T2, T3, T4, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`6<T1, T2, T3, T4, T5, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`6<T1, T2, T3, T4, T5, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`7<T1, T2, T3, T4, T5, T6, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`7<T1, T2, T3, T4, T5, T6, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`8<T1, T2, T3, T4, T5, T6, T7, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`8<T1, T2, T3, T4, T5, T6, T7, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<TReturnType>> ReturnsLazily(IReturnValueConfiguration`1<TReturnType> configuration, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturnType> valueProducer);
    [ExtensionAttribute]
public static IAfterCallConfiguredWithOutAndRefParametersConfiguration`1<IReturnValueConfiguration`1<Task`1<TReturnType>>> ReturnsLazily(IReturnValueConfiguration`1<Task`1<TReturnType>> configuration, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturnType> valueProducer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.RootModule : object {
    public static void RegisterDependencies(IServiceRegistrar registrar);
    [CompilerGeneratedAttribute]
internal static FakeManager <RegisterDependencies>g__FakeManagerFactory|1_1(Type fakeObjectType, object proxy, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class FakeItEasy.Sdk.Create : object {
    private static FakeAndDummyManager FakeAndDummyManager { get; }
    private static FakeAndDummyManager get_FakeAndDummyManager();
    public static object Fake(Type typeOfFake);
    public static object Fake(Type typeOfFake, Action`1<IFakeOptions> optionsBuilder);
    public static IList`1<object> CollectionOfFake(Type typeOfFake, int numberOfFakes);
    public static IList`1<object> CollectionOfFake(Type typeOfFake, int numberOfFakes, Action`1<IFakeOptions> optionsBuilder);
    public static IList`1<object> CollectionOfFake(Type typeOfFake, int numberOfFakes, Action`2<IFakeOptions, int> optionsBuilder);
    [EditorBrowsableAttribute("2")]
public static object Dummy(Type typeOfDummy);
    [EditorBrowsableAttribute("2")]
public static IList`1<object> CollectionOfDummy(Type typeOfDummy, int numberOfDummies);
}
internal static class FakeItEasy.ServiceLocator : object {
    private static ServiceLocator();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
internal static T Resolve();
}
[FlagsAttribute]
public enum FakeItEasy.StrictFakeOptions : Enum {
    public int value__;
    public static StrictFakeOptions None;
    public static StrictFakeOptions AllowEquals;
    public static StrictFakeOptions AllowGetHashCode;
    public static StrictFakeOptions AllowToString;
    public static StrictFakeOptions AllowObjectMethods;
    public static StrictFakeOptions AllowEvents;
}
[ExtensionAttribute]
internal static class FakeItEasy.StringBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static StringBuilder AppendIndented(StringBuilder builder, string indentString, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FakeItEasy.StringBuilderOutputWriter : DefaultOutputWriter {
    [CompilerGeneratedAttribute]
private StringBuilder <Builder>k__BackingField;
    public StringBuilder Builder { get; }
    public StringBuilderOutputWriter(ArgumentValueFormatter argumentValueFormatter);
    private StringBuilderOutputWriter(StringBuilder builder, ArgumentValueFormatter argumentValueFormatter);
    [CompilerGeneratedAttribute]
public StringBuilder get_Builder();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class FakeItEasy.StringDummyFactory : DummyFactory`1<string> {
    public Priority Priority { get; }
    public virtual Priority get_Priority();
    protected virtual string Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.TaskHelper : object {
    private static ConcurrentDictionary`2<Type, Task> CachedCanceledTasks;
    private static MethodInfo CreateGenericCanceledTaskGenericDefinition;
    [CompilerGeneratedAttribute]
private static Task <CompletedTask>k__BackingField;
    public static Task CompletedTask { get; }
    private static TaskHelper();
    [CompilerGeneratedAttribute]
public static Task get_CompletedTask();
    public static Task`1<T> FromResult(T result);
    public static Task FromException(Exception exception);
    public static Task`1<T> FromException(Exception exception);
    public static Task Canceled();
    public static Task Canceled(Type resultType);
    private static Task`1<T> CreateGenericCanceledTask();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FakeItEasy.Times : object {
    [CompilerGeneratedAttribute]
private static Times <Exactly>k__BackingField;
    [CompilerGeneratedAttribute]
private static Times <OrMore>k__BackingField;
    [CompilerGeneratedAttribute]
private static Times <OrLess>k__BackingField;
    public static Times Exactly { get; }
    public static Times OrMore { get; }
    public static Times OrLess { get; }
    private static Times();
    [CompilerGeneratedAttribute]
public static Times get_Exactly();
    [CompilerGeneratedAttribute]
public static Times get_OrMore();
    [CompilerGeneratedAttribute]
public static Times get_OrLess();
    internal abstract virtual CallCountConstraint ToCallCountConstraint(int numberOfTimes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class FakeItEasy.TypeExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool CanBeInstantiatedAs(Type type, Type targetType);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsByRefLike(Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
private static bool HasDefaultConstructor(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FakeItEasy.UserCallbackException : Exception {
    public UserCallbackException(string message);
    public UserCallbackException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class FakeItEasy.ValueProducerSignatureHelper : object {
    internal static void AssertThatValueProducerSignatureSatisfiesCallSignature(MethodInfo callMethod, MethodInfo valueProducerMethod, string nameOfFeature);
    internal static void AssertThatValuesSatisfyCallSignature(MethodInfo callMethod, Object[] values);
    private static bool IsCallSignatureSatisfiedByValueProducerSignature(MethodInfo callMethod, MethodInfo valueProducerMethod);
    private static bool IsCallSignatureSatisfiedByValues(MethodInfo callMethod, Object[] values);
    private static string BuildSignatureDescription(MethodInfo method);
    private static string BuildSignatureDescription(Object[] values);
}
[ExtensionAttribute]
public static class FakeItEasy.WhereConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T Where(IWhereConfiguration`1<T> configuration, Expression`1<Func`2<IFakeObjectCall, bool>> predicate);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
