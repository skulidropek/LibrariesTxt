public class Fare.Automaton : object {
    public static int MinimizeHuffman;
    public static int MinimizeBrzozowski;
    public static int MinimizeHopcroft;
    private static bool allowMutation;
    private static bool minimizeAlways;
    private int hashCode;
    private State initial;
    [CompilerGeneratedAttribute]
private static bool <AllowMutation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeterministic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Singleton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    public static int Minimization { get; }
    public static bool AllowMutation { get; public set; }
    public bool IsDeterministic { get; public set; }
    public State Initial { get; public set; }
    public string Singleton { get; public set; }
    public bool IsSingleton { get; }
    public bool IsDebug { get; public set; }
    public bool IsEmpty { get; public set; }
    public int NumberOfStates { get; }
    public int NumberOfTransitions { get; }
    public static int get_Minimization();
    [CompilerGeneratedAttribute]
public static bool get_AllowMutation();
    [CompilerGeneratedAttribute]
public static void set_AllowMutation(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDeterministic();
    [CompilerGeneratedAttribute]
public void set_IsDeterministic(bool value);
    public State get_Initial();
    public void set_Initial(State value);
    [CompilerGeneratedAttribute]
public string get_Singleton();
    [CompilerGeneratedAttribute]
public void set_Singleton(string value);
    public bool get_IsSingleton();
    [CompilerGeneratedAttribute]
public bool get_IsDebug();
    [CompilerGeneratedAttribute]
public void set_IsDebug(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public void set_IsEmpty(bool value);
    public int get_NumberOfStates();
    public int get_NumberOfTransitions();
    public static Transition[][] GetSortedTransitions(HashSet`1<State> states);
    public static Automaton MakeChar(char c);
    public static Automaton MakeCharSet(string set);
    public static Automaton MakeString(string s);
    public static Automaton Minimize(Automaton a);
    public static bool SetAllowMutate(bool flag);
    public static void SetMinimizeAlways(bool flag);
    public static void SetStateNumbers(IEnumerable`1<State> states);
    public virtual int GetHashCode();
    public void AddEpsilons(ICollection`1<StatePair> pairs);
    public void CheckMinimizeAlways();
    public void ClearHashCode();
    public Automaton Clone();
    public Automaton CloneExpanded();
    public Automaton CloneExpandedIfRequired();
    public Automaton CloneIfRequired();
    public Automaton Complement();
    public Automaton Concatenate(Automaton a);
    public void Determinize();
    public void ExpandSingleton();
    public HashSet`1<State> GetAcceptStates();
    public HashSet`1<State> GetLiveStates();
    public Char[] GetStartPoints();
    public HashSet`1<State> GetStates();
    public Automaton Intersection(Automaton a);
    public bool IsEmptyString();
    public void Minimize();
    public Automaton Optional();
    public void RecomputeHashCode();
    public void Reduce();
    public void RemoveDeadTransitions();
    public Automaton Repeat(int min, int max);
    public Automaton Repeat();
    public Automaton Repeat(int min);
    public bool Run(string s);
    public void Totalize();
    private HashSet`1<State> GetLiveStates(HashSet`1<State> states);
}
public static class Fare.BasicAutomata : object {
    public static Automaton MakeAnyChar();
    public static Automaton MakeAnyString();
    public static Automaton MakeChar(char c);
    public static Automaton MakeCharRange(char min, char max);
    public static Automaton MakeEmpty();
    public static Automaton MakeEmptyString();
    public static Automaton MakeInterval(int min, int max, int digits);
    public static Automaton MakeString(string s);
    private static State AnyOfRightLength(string x, int n);
    private static State AtLeast(string x, int n, ICollection`1<State> initials, bool zeros);
    private static State AtMost(string x, int n);
    private static State Between(string x, string y, int n, ICollection`1<State> initials, bool zeros);
    public static Automaton MakeCharSet(string set);
    public static Automaton MakeStringUnion(Char[][] strings);
    public static Automaton MakeMaxInteger(string n);
    private static void MaxInteger(string n, int i, StringBuilder b);
    public static Automaton MakeMinInteger(string n);
    private static void MinInteger(string n, int i, StringBuilder b);
    public static Automaton MakeTotalDigits(int i);
    public static Automaton MakeFractionDigits(int i);
    public static Automaton MakeIntegerValue(string value);
    public static Automaton MakeDecimalValue(string value);
    public static Automaton MakeStringMatcher(string s);
}
public static class Fare.BasicOperations : object {
    public static void AddEpsilons(Automaton a, ICollection`1<StatePair> pairs);
    public static Automaton Union(IList`1<Automaton> automatons);
    public static Automaton Complement(Automaton a);
    public static Automaton Concatenate(Automaton a1, Automaton a2);
    public static Automaton Concatenate(IList`1<Automaton> l);
    public static void Determinize(Automaton a);
    public static void Determinize(Automaton a, List`1<State> initialset);
    public static bool IsEmpty(Automaton a);
    public static bool IsEmptyString(Automaton a);
    public static Automaton Intersection(Automaton a1, Automaton a2);
    public static Automaton Optional(Automaton a);
    public static Automaton Repeat(Automaton a);
    public static Automaton Repeat(Automaton a, int min);
    public static Automaton Repeat(Automaton a, int min, int max);
    public static bool Run(Automaton a, string s);
}
public static class Fare.Datatypes : object {
    private static Automaton ws;
    public static Automaton WhitespaceAutomaton { get; }
    private static Datatypes();
    public static Automaton get_WhitespaceAutomaton();
}
public interface Fare.IAutomatonProvider {
    public abstract virtual Automaton GetAutomaton(string name);
}
[ExtensionAttribute]
internal static class Fare.LinkedListExtensions : object {
    [ExtensionAttribute]
public static T RemoveAndReturnFirst(LinkedList`1<T> linkedList);
}
internal class Fare.ListEqualityComparer`1 : object {
    public static bool op_Equality(ListEqualityComparer`1<T> left, ListEqualityComparer`1<T> right);
    public static bool op_Inequality(ListEqualityComparer`1<T> left, ListEqualityComparer`1<T> right);
    public sealed virtual bool Equals(List`1<T> x, List`1<T> y);
    public sealed virtual int GetHashCode(List`1<T> obj);
    public sealed virtual bool Equals(ListEqualityComparer`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class Fare.MinimizationOperations : object {
    public static void Minimize(Automaton a);
    public static void MinimizeBrzozowski(Automaton a);
    public static void MinimizeHopcroft(Automaton a);
    public static void MinimizeHuffman(Automaton a);
    private static void Initialize(List`1& list, int size);
    private static void AddTriggers(Transition[][] transitions, IList`1<List`1<HashSet`1<IntPair>>> triggers, int n1, int n2);
    private static void MarkPair(List`1<List`1<bool>> mark, IList`1<List`1<HashSet`1<IntPair>>> triggers, int n1, int n2);
    private static bool StatesAgree(Transition[][] transitions, List`1<List`1<bool>> mark, int n1, int n2);
}
public class Fare.RegExp : object {
    private string b;
    private RegExpSyntaxOptions flags;
    private static bool allowMutation;
    private char c;
    private int digits;
    private RegExp exp1;
    private RegExp exp2;
    private char from;
    private Kind kind;
    private int max;
    private int min;
    private int pos;
    private string s;
    private char to;
    public RegExp(string s);
    public RegExp(string s, RegExpSyntaxOptions syntaxFlags);
    public Automaton ToAutomaton();
    public Automaton ToAutomaton(bool minimize);
    public Automaton ToAutomaton(IAutomatonProvider automatonProvider);
    public Automaton ToAutomaton(IAutomatonProvider automatonProvider, bool minimize);
    public Automaton ToAutomaton(IDictionary`2<string, Automaton> automata);
    public Automaton ToAutomaton(IDictionary`2<string, Automaton> automata, bool minimize);
    public bool SetAllowMutate(bool flag);
    public virtual string ToString();
    public HashSet`1<string> GetIdentifiers();
    private static RegExp MakeUnion(RegExp exp1, RegExp exp2);
    private static RegExp MakeIntersection(RegExp exp1, RegExp exp2);
    private static RegExp MakeConcatenation(RegExp exp1, RegExp exp2);
    private static RegExp MakeRepeat(RegExp exp);
    private static RegExp MakeRepeat(RegExp exp, int min);
    private static RegExp MakeRepeat(RegExp exp, int min, int max);
    private static RegExp MakeOptional(RegExp exp);
    private static RegExp MakeChar(char char);
    private static RegExp MakeInterval(int min, int max, int digits);
    private static RegExp MakeAutomaton(string s);
    private static RegExp MakeAnyString();
    private static RegExp MakeEmpty();
    private static RegExp MakeAnyChar();
    private static RegExp MakeAnyPrintableASCIIChar();
    private static RegExp MakeCharRange(char from, char to);
    private static RegExp MakeComplement(RegExp exp);
    private static RegExp MakeString(string string);
    private static RegExp MakeString(RegExp exp1, RegExp exp2);
    private Automaton ToAutomatonAllowMutate(IDictionary`2<string, Automaton> automata, IAutomatonProvider automatonProvider, bool minimize);
    private Automaton ToAutomaton(IDictionary`2<string, Automaton> automata, IAutomatonProvider automatonProvider, bool minimize);
    private void FindLeaves(RegExp exp, Kind regExpKind, IList`1<Automaton> list, IDictionary`2<string, Automaton> automata, IAutomatonProvider automatonProvider, bool minimize);
    private StringBuilder ToStringBuilder(StringBuilder sb);
    private void GetIdentifiers(HashSet`1<string> set);
    private RegExp ParseUnionExp();
    private bool Match(char char);
    private RegExp ParseInterExp();
    private bool Check(RegExpSyntaxOptions flag);
    private RegExp ParseConcatExp();
    private bool More();
    private bool Peek(string string);
    private RegExp ParseRepeatExp();
    private char Next();
    private RegExp ParseComplExp();
    private RegExp ParseCharClassExp();
    private RegExp ParseSimpleExp();
    private void SkipNonCapturingSubpatternExp();
    private char ParseCharExp();
    private RegExp ParseCharClasses();
    private RegExp ParseCharClass();
    private static RegExp ExcludeChars(RegExp exclusion, RegExp allChars);
}
public static class Fare.RegExpMatchingOptions : object {
    public static char IgnoreCase;
    public static char Singleline;
    public static char Multiline;
    public static char ExplicitCapture;
    public static char IgnorePatternWhitespace;
    public static IEnumerable`1<char> All();
}
[FlagsAttribute]
public enum Fare.RegExpSyntaxOptions : Enum {
    public int value__;
    public static RegExpSyntaxOptions Intersection;
    public static RegExpSyntaxOptions Complement;
    public static RegExpSyntaxOptions Empty;
    public static RegExpSyntaxOptions Anystring;
    public static RegExpSyntaxOptions Automaton;
    public static RegExpSyntaxOptions Interval;
    public static RegExpSyntaxOptions All;
}
public static class Fare.SpecialOperations : object {
    public static HashSet`1<State> Reverse(Automaton a);
    public static Automaton Overlap(Automaton a1, Automaton a2);
    private static void AcceptToAccept(Automaton a);
    public static Automaton SingleChars(Automaton a);
    public static Automaton Trim(Automaton a, string set, char c);
    private static void AddSetTransitions(State s, string set, State p);
    public static Automaton Compress(Automaton a, string set, char c);
    public static Automaton Subst(Automaton a, IDictionary`2<char, HashSet`1<char>> dictionary);
    private static int FindIndex(char c, Char[] points);
    public static Automaton Subst(Automaton a, char c, string s);
    public static Automaton Homomorph(Automaton a, Char[] source, Char[] dest);
    public static Automaton ProjectChars(Automaton a, HashSet`1<char> chars);
    public static bool IsFinite(Automaton a);
    private static bool IsFinite(State s, HashSet`1<State> path, HashSet`1<State> visited);
    public static HashSet`1<string> GetStrings(Automaton a, int length);
    private static void GetStrings(State s, HashSet`1<string> strings, StringBuilder path, int length);
    public static HashSet`1<string> GetFiniteStrings(Automaton a);
    public static HashSet`1<string> GetFiniteStrings(Automaton a, int limit);
    private static bool GetFiniteStrings(State s, HashSet`1<State> pathStates, HashSet`1<string> strings, StringBuilder path, int limit);
    public static string GetCommonPrefix(Automaton a);
    public static void PrefixClose(Automaton a);
    public static Automaton HexCases(Automaton a);
    public static Automaton ReplaceWhitespace(Automaton a);
}
public class Fare.State : object {
    private int id;
    private static int nextId;
    [CompilerGeneratedAttribute]
private bool <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Transition> <Transitions>k__BackingField;
    public int Id { get; }
    public bool Accept { get; public set; }
    public int Number { get; public set; }
    public IList`1<Transition> Transitions { get; public set; }
    public int get_Id();
    [CompilerGeneratedAttribute]
public bool get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(bool value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(int value);
    [CompilerGeneratedAttribute]
public IList`1<Transition> get_Transitions();
    [CompilerGeneratedAttribute]
public void set_Transitions(IList`1<Transition> value);
    public static bool op_Equality(State left, State right);
    public static bool op_Inequality(State left, State right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object other);
    public sealed virtual bool Equals(State other);
    public sealed virtual int CompareTo(State other);
    public virtual string ToString();
    public void AddTransition(Transition t);
    public State Step(char c);
    public void Step(char c, List`1<State> dest);
    public IList`1<Transition> GetSortedTransitions(bool toFirst);
    internal void AddEpsilon(State to);
    internal void ResetTransitions();
}
internal class Fare.StateEqualityComparer : object {
    public sealed virtual bool Equals(State x, State y);
    public sealed virtual int GetHashCode(State obj);
}
public class Fare.StatePair : object {
    [CompilerGeneratedAttribute]
private State <S>k__BackingField;
    [CompilerGeneratedAttribute]
private State <FirstState>k__BackingField;
    [CompilerGeneratedAttribute]
private State <SecondState>k__BackingField;
    public State S { get; public set; }
    public State FirstState { get; public set; }
    public State SecondState { get; public set; }
    public StatePair(State s, State s1, State s2);
    public StatePair(State s1, State s2);
    [CompilerGeneratedAttribute]
public State get_S();
    [CompilerGeneratedAttribute]
public void set_S(State value);
    [CompilerGeneratedAttribute]
public State get_FirstState();
    [CompilerGeneratedAttribute]
public void set_FirstState(State value);
    [CompilerGeneratedAttribute]
public State get_SecondState();
    [CompilerGeneratedAttribute]
public void set_SecondState(State value);
    public static bool op_Equality(StatePair left, StatePair right);
    public static bool op_Inequality(StatePair left, StatePair right);
    public sealed virtual bool Equals(StatePair other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Fare.StringUnionOperations : object {
    private static IComparer`1<Char[]> lexicographicOrder;
    private State root;
    private StringBuilder previous;
    private IDictionary`2<State, State> register;
    public static IComparer`1<Char[]> LexicographicOrderComparer { get; }
    private static StringUnionOperations();
    public static IComparer`1<Char[]> get_LexicographicOrderComparer();
    public static State Build(IEnumerable`1<Char[]> input);
    public void Add(Char[] current);
    private static void AddSuffix(State state, Char[] current, int fromIndex);
    private static State Convert(State s, IDictionary`2<State, State> visited);
    private State Complete();
    private void ReplaceOrRegister(State state);
    private bool SetPrevious(Char[] current);
}
public class Fare.Transition : object {
    private char max;
    private char min;
    private State to;
    public char Min { get; }
    public char Max { get; }
    public State To { get; }
    public Transition(char c, State to);
    public Transition(char min, char max, State to);
    public char get_Min();
    public char get_Max();
    public State get_To();
    public static bool op_Equality(Transition left, Transition right);
    public static bool op_Inequality(Transition left, Transition right);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Transition other);
    private static void AppendCharString(char c, StringBuilder sb);
    private void AppendDot(StringBuilder sb);
}
internal class Fare.TransitionComparer : object {
    private bool toFirst;
    public TransitionComparer(bool toFirst);
    public sealed virtual int Compare(Transition t1, Transition t2);
}
public class Fare.Xeger : object {
    private static RegExpSyntaxOptions AllExceptAnyString;
    private Automaton automaton;
    private Random random;
    public Xeger(string regex, Random random);
    public Xeger(string regex);
    public string Generate();
    private static int GetRandomInt(int min, int max, Random random);
    private void Generate(StringBuilder builder, State state);
    private void AppendChoice(StringBuilder builder, Transition transition);
    private string RemoveStartEndMarkers(string regExp);
}
