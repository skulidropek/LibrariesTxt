public class Fasterflect.ArrayElementGetter : MulticastDelegate {
    public ArrayElementGetter(object object, IntPtr method);
    public virtual object Invoke(object array, int index);
    public virtual IAsyncResult BeginInvoke(object array, int index, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Fasterflect.ArrayElementSetter : MulticastDelegate {
    public ArrayElementSetter(object object, IntPtr method);
    public virtual void Invoke(object array, int index, object value);
    public virtual IAsyncResult BeginInvoke(object array, int index, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Fasterflect.ArrayExtensions : object {
    [ExtensionAttribute]
public static object SetElement(object array, long index, object value);
    [ExtensionAttribute]
public static object GetElement(object array, long index);
    [ExtensionAttribute]
public static ArrayElementSetter DelegateForSetElement(Type arrayType);
    [ExtensionAttribute]
public static ArrayElementGetter DelegateForGetElement(Type arrayType);
}
[ExtensionAttribute]
public static class Fasterflect.AssemblyExtensions : object {
    [ExtensionAttribute]
public static IList`1<Type> Types(Assembly assembly, String[] names);
    [ExtensionAttribute]
public static IList`1<Type> Types(Assembly assembly, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static IList`1<Type> TypesImplementing(Assembly assembly);
    [ExtensionAttribute]
public static IList`1<Type> TypesWith(Assembly assembly, Type attributeType);
    [ExtensionAttribute]
public static IList`1<Type> TypesWith(Assembly assembly);
}
[ExtensionAttribute]
public static class Fasterflect.AttributeExtensions : object {
    [ExtensionAttribute]
public static Attribute Attribute(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static Attribute Attribute(ICustomAttributeProvider provider, Type attributeType);
    [ExtensionAttribute]
public static T Attribute(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static T Attribute(Enum provider);
    [ExtensionAttribute]
public static Attribute Attribute(Enum provider, Type attributeType);
    [ExtensionAttribute]
public static IList`1<Attribute> Attributes(ICustomAttributeProvider provider, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<T> Attributes(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static IList`1<T> Attributes(Enum provider);
    [ExtensionAttribute]
public static IList`1<Attribute> Attributes(Enum provider, Type[] attributeTypes);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider, Type attributeType);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static bool HasAnyAttribute(ICustomAttributeProvider provider, Type[] attributeTypes);
    [ExtensionAttribute]
public static bool HasAllAttributes(ICustomAttributeProvider provider, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<MemberInfo> MembersWith(Type type, MemberTypes memberTypes, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<MemberInfo> MembersWith(Type type, MemberTypes memberTypes, Flags bindingFlags);
    [ExtensionAttribute]
public static IList`1<MemberInfo> MembersWith(Type type, MemberTypes memberTypes, Flags bindingFlags, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<MemberInfo> FieldsAndPropertiesWith(Type type, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<MemberInfo> FieldsAndPropertiesWith(Type type, Flags bindingFlags, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<FieldInfo> FieldsWith(Type type, Flags bindingFlags, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<PropertyInfo> PropertiesWith(Type type, Flags bindingFlags, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<MethodInfo> MethodsWith(Type type, Flags bindingFlags, Type[] attributeTypes);
    [ExtensionAttribute]
public static IList`1<ConstructorInfo> ConstructorsWith(Type type, Flags bindingFlags, Type[] attributeTypes);
    [ExtensionAttribute]
public static IDictionary`2<MemberInfo, List`1<Attribute>> MembersAndAttributes(Type type, MemberTypes memberTypes, Type[] attributeTypes);
    [ExtensionAttribute]
public static IDictionary`2<MemberInfo, List`1<Attribute>> MembersAndAttributes(Type type, MemberTypes memberTypes, Flags bindingFlags, Type[] attributeTypes);
}
[DefaultMemberAttribute("Item")]
[DebuggerStepThroughAttribute]
internal class Fasterflect.Caching.Cache`2 : object {
    private IDictionary`2<TKey, object> entries;
    public int Count { get; }
    public TValue Item { get; public set; }
    unknown TValue Item {public set; }
    public Cache`2(IEqualityComparer`1<TKey> equalityComparer);
    public int get_Count();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public void set_Item(TKey key, CacheStrategy strategy, TValue value);
    public void Insert(TKey key, TValue value);
    public void Insert(TKey key, TValue value, CacheStrategy strategy);
    public TValue Get(TKey key);
    public bool Remove(TKey key);
    public void Clear();
    private int ClearCollected();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <ClearCollected>b__15_2(TKey k);
}
internal enum Fasterflect.Caching.CacheStrategy : Enum {
    public int value__;
    public static CacheStrategy None;
    public static CacheStrategy Temporary;
    public static CacheStrategy Permanent;
}
[ExtensionAttribute]
public static class Fasterflect.CloneExtensions : object {
    [ExtensionAttribute]
public static T DeepClone(T source);
    [ExtensionAttribute]
private static T DeepClone(T source, Dictionary`2<object, object> map);
    [ExtensionAttribute]
private static T CloneObject(T source, Dictionary`2<object, object> map);
    [ExtensionAttribute]
private static T CloneArray(T source, Dictionary`2<object, object> map);
    private static object CloneField(FieldInfo field, object source, Dictionary`2<object, object> map);
    [ExtensionAttribute]
private static bool ShouldClone(object obj);
    [ExtensionAttribute]
private static bool IsCalculated(FieldInfo field, Type ownerType);
}
internal static class Fasterflect.Constants : object {
    public static string IndexerSetterName;
    public static string IndexerGetterName;
    public static string ArraySetterName;
    public static string ArrayGetterName;
    public static Type ObjectType;
    public static Type IntType;
    public static Type StructType;
    public static Type VoidType;
    public static Type[] ArrayOfObjectType;
    public static Object[] EmptyObjectArray;
    public static String[] EmptyStringArray;
    public static PropertyInfo[] EmptyPropertyInfoArray;
    private static Constants();
}
[ExtensionAttribute]
public static class Fasterflect.ConstructorExtensions : object {
    [ExtensionAttribute]
public static object CreateInstance(Type type, Object[] parameters);
    [ExtensionAttribute]
public static object CreateInstance(Type type, Type[] parameterTypes, Object[] parameters);
    [ExtensionAttribute]
public static object CreateInstance(Type type, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static object CreateInstance(Type type, Type[] parameterTypes, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static ConstructorInvoker DelegateForCreateInstance(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static ConstructorInvoker DelegateForCreateInstance(Type type, Flags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
public static IList`1<T> CreateInstances(Assembly assembly);
    [ExtensionAttribute]
public static ConstructorInfo Constructor(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static ConstructorInfo Constructor(Type type, Flags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
public static IList`1<ConstructorInfo> Constructors(Type type);
    [ExtensionAttribute]
public static IList`1<ConstructorInfo> Constructors(Type type, Flags bindingFlags);
}
[ExtensionAttribute]
public static class Fasterflect.ConstructorInfoExtensions : object {
    [ExtensionAttribute]
public static object CreateInstance(ConstructorInfo ctorInfo, Object[] parameters);
    [ExtensionAttribute]
public static ConstructorInvoker DelegateForCreateInstance(ConstructorInfo ctorInfo);
}
public class Fasterflect.ConstructorInvoker : MulticastDelegate {
    public ConstructorInvoker(object object, IntPtr method);
    public virtual object Invoke(Object[] parameters);
    public virtual IAsyncResult BeginInvoke(Object[] parameters, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Fasterflect.DynamicBuilder : DynamicObject {
    private Dictionary`2<string, object> members;
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
[ExtensionAttribute]
public static class Fasterflect.DynamicHandler : object {
    [ExtensionAttribute]
public static object InvokeDelegate(Type targetType, string delegateName, Object[] parameters);
    [ExtensionAttribute]
public static object InvokeDelegate(object target, string delegateName, Object[] parameters);
    [ExtensionAttribute]
public static Type AddHandler(Type targetType, string fieldName, Func`2<Object[], object> func);
    [ExtensionAttribute]
public static Type AddHandler(object target, string fieldName, Func`2<Object[], object> func);
    [ExtensionAttribute]
public static Type AssignHandler(Type targetType, string fieldName, Func`2<Object[], object> func);
    [ExtensionAttribute]
public static Type AssignHandler(object target, string fieldName, Func`2<Object[], object> func);
    private static Type InternalAddHandler(Type targetType, string fieldName, Func`2<Object[], object> func, object target, bool assignHandler);
    [ExtensionAttribute]
public static Delegate BuildDynamicHandler(Type delegateType, Func`2<Object[], object> func);
}
internal class Fasterflect.DynamicWrapper : DynamicObject {
    private object target;
    public DynamicWrapper(object target);
    public DynamicWrapper(ValueType& target);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
internal class Fasterflect.Emitter.ArrayGetEmitter : BaseEmitter {
    public ArrayGetEmitter(Type targetType);
    protected internal virtual DynamicMethod CreateDynamicMethod();
    protected internal virtual Delegate CreateDelegate();
}
internal class Fasterflect.Emitter.ArraySetEmitter : BaseEmitter {
    public ArraySetEmitter(Type targetType);
    protected internal virtual DynamicMethod CreateDynamicMethod();
    protected internal virtual Delegate CreateDelegate();
}
internal abstract class Fasterflect.Emitter.BaseEmitter : object {
    private static Cache`2<CallInfo, Delegate> cache;
    protected static MethodInfo StructGetMethod;
    protected static MethodInfo StructSetMethod;
    protected CallInfo CallInfo;
    protected DynamicMethod Method;
    protected EmitHelper Generator;
    protected BaseEmitter(CallInfo callInfo);
    private static BaseEmitter();
    internal Delegate GetDelegate();
    protected internal abstract virtual DynamicMethod CreateDynamicMethod();
    protected internal abstract virtual Delegate CreateDelegate();
    protected internal static DynamicMethod CreateDynamicMethod(string name, Type targetType, Type returnType, Type[] paramTypes);
    protected void LoadInnerStructToLocal(byte localPosition);
    protected void StoreLocalToInnerStruct(byte localPosition);
    protected void StoreLocalToInnerStruct(byte argPosition, byte localPosition);
}
[DebuggerStepThroughAttribute]
internal class Fasterflect.Emitter.CallInfo : object {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private Flags <BindingFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ParamTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <GenericTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <MethodParamTypes>k__BackingField;
    public Type TargetType { get; private set; }
    public Flags BindingFlags { get; internal set; }
    public MemberTypes MemberTypes { get; public set; }
    public Type[] ParamTypes { get; internal set; }
    public Type[] GenericTypes { get; private set; }
    public string Name { get; private set; }
    public bool IsReadOperation { get; public set; }
    public bool IsStatic { get; internal set; }
    public MemberInfo MemberInfo { get; internal set; }
    public Type[] MethodParamTypes { get; internal set; }
    public bool ShouldHandleInnerStruct { get; }
    public bool IsTargetTypeStruct { get; }
    public bool HasNoParam { get; }
    public bool IsGeneric { get; }
    public bool HasRefParam { get; }
    public CallInfo(Type targetType, Type[] genericTypes, Flags bindingFlags, MemberTypes memberTypes, string name, Type[] parameterTypes, MemberInfo memberInfo, bool isReadOperation);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
private void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public Flags get_BindingFlags();
    [CompilerGeneratedAttribute]
internal void set_BindingFlags(Flags value);
    [CompilerGeneratedAttribute]
public MemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public void set_MemberTypes(MemberTypes value);
    [CompilerGeneratedAttribute]
public Type[] get_ParamTypes();
    [CompilerGeneratedAttribute]
internal void set_ParamTypes(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_GenericTypes();
    [CompilerGeneratedAttribute]
private void set_GenericTypes(Type[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsReadOperation();
    [CompilerGeneratedAttribute]
public void set_IsReadOperation(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
internal void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
internal void set_MemberInfo(MemberInfo value);
    [CompilerGeneratedAttribute]
public Type[] get_MethodParamTypes();
    [CompilerGeneratedAttribute]
internal void set_MethodParamTypes(Type[] value);
    public bool get_ShouldHandleInnerStruct();
    public bool get_IsTargetTypeStruct();
    public bool get_HasNoParam();
    public bool get_IsGeneric();
    public bool get_HasRefParam();
    public sealed virtual bool Equals(CallInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CallInfo left, CallInfo right);
    public static bool op_Inequality(CallInfo left, CallInfo right);
}
internal class Fasterflect.Emitter.CtorInvocationEmitter : InvocationEmitter {
    public CtorInvocationEmitter(ConstructorInfo ctorInfo, Flags bindingFlags);
    public CtorInvocationEmitter(Type targetType, Flags bindingFlags, Type[] paramTypes);
    private CtorInvocationEmitter(Type targetType, Flags flags, Type[] parameterTypes, ConstructorInfo ctorInfo);
    protected internal virtual DynamicMethod CreateDynamicMethod();
    protected internal virtual Delegate CreateDelegate();
}
internal class Fasterflect.Emitter.EmitHelper : object {
    private ILGenerator _ilGenerator;
    public ILGenerator ILGenerator { get; }
    public EmitHelper add { get; }
    public EmitHelper add_ovf { get; }
    public EmitHelper add_ovf_un { get; }
    public EmitHelper and { get; }
    public EmitHelper arglist { get; }
    public EmitHelper break { get; }
    public EmitHelper ceq { get; }
    public EmitHelper cgt { get; }
    public EmitHelper cgt_un { get; }
    public EmitHelper ckfinite { get; }
    public EmitHelper clt { get; }
    public EmitHelper clt_un { get; }
    public EmitHelper conv_i { get; }
    public EmitHelper conv_i1 { get; }
    public EmitHelper conv_i2 { get; }
    public EmitHelper conv_i4 { get; }
    public EmitHelper conv_i8 { get; }
    public EmitHelper conv_ovf_i { get; }
    public EmitHelper conv_ovf_i1 { get; }
    public EmitHelper conv_ovf_i1_un { get; }
    public EmitHelper conv_ovf_i2 { get; }
    public EmitHelper conv_ovf_i2_un { get; }
    public EmitHelper conv_ovf_i4 { get; }
    public EmitHelper conv_ovf_i4_un { get; }
    public EmitHelper conv_ovf_i8 { get; }
    public EmitHelper conv_ovf_i8_un { get; }
    public EmitHelper conv_ovf_i_un { get; }
    public EmitHelper conv_ovf_u { get; }
    public EmitHelper conv_ovf_u1 { get; }
    public EmitHelper conv_ovf_u1_un { get; }
    public EmitHelper conv_ovf_u2 { get; }
    public EmitHelper conv_ovf_u2_un { get; }
    public EmitHelper conv_ovf_u4 { get; }
    public EmitHelper conv_ovf_u4_un { get; }
    public EmitHelper conv_ovf_u8 { get; }
    public EmitHelper conv_ovf_u8_un { get; }
    public EmitHelper conv_ovf_u_un { get; }
    public EmitHelper conv_r4 { get; }
    public EmitHelper conv_r8 { get; }
    public EmitHelper conv_r_un { get; }
    public EmitHelper conv_u { get; }
    public EmitHelper conv_u1 { get; }
    public EmitHelper conv_u2 { get; }
    public EmitHelper conv_u4 { get; }
    public EmitHelper conv_u8 { get; }
    public EmitHelper cpblk { get; }
    public EmitHelper div { get; }
    public EmitHelper div_un { get; }
    public EmitHelper dup { get; }
    public EmitHelper endfilter { get; }
    public EmitHelper endfinally { get; }
    public EmitHelper initblk { get; }
    public EmitHelper ldarg_0 { get; }
    public EmitHelper ldarg_1 { get; }
    public EmitHelper ldarg_2 { get; }
    public EmitHelper ldarg_3 { get; }
    public EmitHelper ldc_i4_0 { get; }
    public EmitHelper ldc_i4_1 { get; }
    public EmitHelper ldc_i4_2 { get; }
    public EmitHelper ldc_i4_3 { get; }
    public EmitHelper ldc_i4_4 { get; }
    public EmitHelper ldc_i4_5 { get; }
    public EmitHelper ldc_i4_6 { get; }
    public EmitHelper ldc_i4_7 { get; }
    public EmitHelper ldc_i4_8 { get; }
    public EmitHelper ldc_i4_m1 { get; }
    public EmitHelper ldelem_i { get; }
    public EmitHelper ldelem_i1 { get; }
    public EmitHelper ldelem_i2 { get; }
    public EmitHelper ldelem_i4 { get; }
    public EmitHelper ldelem_i8 { get; }
    public EmitHelper ldelem_r4 { get; }
    public EmitHelper ldelem_r8 { get; }
    public EmitHelper ldelem_ref { get; }
    public EmitHelper ldelem_u1 { get; }
    public EmitHelper ldelem_u2 { get; }
    public EmitHelper ldelem_u4 { get; }
    public EmitHelper ldind_i { get; }
    public EmitHelper ldind_i1 { get; }
    public EmitHelper ldind_i2 { get; }
    public EmitHelper ldind_i4 { get; }
    public EmitHelper ldind_i8 { get; }
    public EmitHelper ldind_r4 { get; }
    public EmitHelper ldind_r8 { get; }
    public EmitHelper ldind_ref { get; }
    public EmitHelper ldind_u1 { get; }
    public EmitHelper ldind_u2 { get; }
    public EmitHelper ldind_u4 { get; }
    public EmitHelper ldlen { get; }
    public EmitHelper ldloc_0 { get; }
    public EmitHelper ldloc_1 { get; }
    public EmitHelper ldloc_2 { get; }
    public EmitHelper ldloc_3 { get; }
    public EmitHelper ldnull { get; }
    public EmitHelper localloc { get; }
    public EmitHelper mul { get; }
    public EmitHelper mul_ovf { get; }
    public EmitHelper mul_ovf_un { get; }
    public EmitHelper neg { get; }
    public EmitHelper nop { get; }
    public EmitHelper not { get; }
    public EmitHelper or { get; }
    public EmitHelper pop { get; }
    public EmitHelper readonly { get; }
    public EmitHelper refanytype { get; }
    public EmitHelper rem { get; }
    public EmitHelper rem_un { get; }
    public EmitHelper rethrow { get; }
    public EmitHelper shl { get; }
    public EmitHelper shr { get; }
    public EmitHelper shr_un { get; }
    public EmitHelper stelem_i { get; }
    public EmitHelper stelem_i1 { get; }
    public EmitHelper stelem_i2 { get; }
    public EmitHelper stelem_i4 { get; }
    public EmitHelper stelem_i8 { get; }
    public EmitHelper stelem_r4 { get; }
    public EmitHelper stelem_r8 { get; }
    public EmitHelper stelem_ref { get; }
    public EmitHelper stind_i { get; }
    public EmitHelper stind_i1 { get; }
    public EmitHelper stind_i2 { get; }
    public EmitHelper stind_i4 { get; }
    public EmitHelper stind_i8 { get; }
    public EmitHelper stind_r4 { get; }
    public EmitHelper stind_r8 { get; }
    public EmitHelper stind_ref { get; }
    public EmitHelper stloc_0 { get; }
    public EmitHelper stloc_1 { get; }
    public EmitHelper stloc_2 { get; }
    public EmitHelper stloc_3 { get; }
    public EmitHelper sub { get; }
    public EmitHelper sub_ovf { get; }
    public EmitHelper sub_ovf_un { get; }
    public EmitHelper tailcall { get; }
    public EmitHelper throw { get; }
    public EmitHelper volatile { get; }
    public EmitHelper xor { get; }
    public EmitHelper(ILGenerator ilGenerator);
    public ILGenerator get_ILGenerator();
    public static ILGenerator op_Implicit(EmitHelper emitHelper);
    public EmitHelper BeginCatchBlock(Type exceptionType);
    public EmitHelper BeginExceptFilterBlock();
    public Label BeginExceptionBlock();
    public EmitHelper BeginFaultBlock();
    public EmitHelper BeginFinallyBlock();
    public EmitHelper BeginScope();
    public LocalBuilder DeclareLocal(Type localType);
    public LocalBuilder DeclareLocal(Type localType, bool pinned);
    public Label DefineLabel();
    public EmitHelper EndExceptionBlock();
    public EmitHelper EndScope();
    public EmitHelper MarkLabel(Label loc);
    public EmitHelper ThrowException(Type exceptionType);
    public EmitHelper UsingNamespace(string namespaceName);
    public EmitHelper ldelem(Type type);
    public EmitHelper stelem(Type type);
    public EmitHelper call(bool isStatic, MethodInfo methodInfo);
    public EmitHelper ldfld(bool isStatic, FieldInfo fieldInfo);
    public EmitHelper stfld(bool isStatic, FieldInfo fieldInfo);
    public EmitHelper get_add();
    public EmitHelper get_add_ovf();
    public EmitHelper get_add_ovf_un();
    public EmitHelper get_and();
    public EmitHelper get_arglist();
    public EmitHelper beq(Label label);
    public EmitHelper beq_s(Label label);
    public EmitHelper bge(Label label);
    public EmitHelper bge_s(Label label);
    public EmitHelper bge_un(Label label);
    public EmitHelper bge_un_s(Label label);
    public EmitHelper bgt(Label label);
    public EmitHelper bgt_s(Label label);
    public EmitHelper bgt_un(Label label);
    public EmitHelper bgt_un_s(Label label);
    public EmitHelper ble(Label label);
    public EmitHelper ble_s(Label label);
    public EmitHelper ble_un(Label label);
    public EmitHelper ble_un_s(Label label);
    public EmitHelper blt(Label label);
    public EmitHelper blt_s(Label label);
    public EmitHelper blt_un(Label label);
    public EmitHelper blt_un_s(Label label);
    public EmitHelper bne_un(Label label);
    public EmitHelper bne_un_s(Label label);
    public EmitHelper box(Type type);
    public EmitHelper boxIfValueType(Type type);
    public EmitHelper br(Label label);
    public EmitHelper get_break();
    public EmitHelper brfalse(Label label);
    public EmitHelper brfalse_s(Label label);
    public EmitHelper brtrue(Label label);
    public EmitHelper brtrue_s(Label label);
    public EmitHelper br_s(Label label);
    public EmitHelper call(MethodInfo methodInfo);
    public EmitHelper call(ConstructorInfo constructorInfo);
    public EmitHelper call(MethodInfo methodInfo, Type[] optionalParameterTypes);
    public EmitHelper call(Type type, string methodName, Type[] optionalParameterTypes);
    public EmitHelper call(Type type, string methodName, BindingFlags bindingFlags, Type[] optionalParameterTypes);
    public EmitHelper calli(CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);
    public EmitHelper callvirt(MethodInfo methodInfo);
    public EmitHelper callvirt(MethodInfo methodInfo, Type[] optionalParameterTypes);
    public EmitHelper callvirt(Type type, string methodName, Type[] optionalParameterTypes);
    public EmitHelper callvirt(Type type, string methodName, BindingFlags bindingFlags, Type[] optionalParameterTypes);
    public EmitHelper callvirt(Type type, string methodName, BindingFlags bindingFlags);
    public EmitHelper castclass(Type type);
    public EmitHelper castType(Type type);
    public EmitHelper get_ceq();
    public EmitHelper get_cgt();
    public EmitHelper get_cgt_un();
    public EmitHelper constrained(Type type);
    public EmitHelper get_ckfinite();
    public EmitHelper get_clt();
    public EmitHelper get_clt_un();
    public EmitHelper get_conv_i();
    public EmitHelper get_conv_i1();
    public EmitHelper get_conv_i2();
    public EmitHelper get_conv_i4();
    public EmitHelper get_conv_i8();
    public EmitHelper conv(Type type);
    public EmitHelper get_conv_ovf_i();
    public EmitHelper get_conv_ovf_i1();
    public EmitHelper get_conv_ovf_i1_un();
    public EmitHelper get_conv_ovf_i2();
    public EmitHelper get_conv_ovf_i2_un();
    public EmitHelper get_conv_ovf_i4();
    public EmitHelper get_conv_ovf_i4_un();
    public EmitHelper get_conv_ovf_i8();
    public EmitHelper get_conv_ovf_i8_un();
    public EmitHelper get_conv_ovf_i_un();
    public EmitHelper get_conv_ovf_u();
    public EmitHelper get_conv_ovf_u1();
    public EmitHelper get_conv_ovf_u1_un();
    public EmitHelper get_conv_ovf_u2();
    public EmitHelper get_conv_ovf_u2_un();
    public EmitHelper get_conv_ovf_u4();
    public EmitHelper get_conv_ovf_u4_un();
    public EmitHelper get_conv_ovf_u8();
    public EmitHelper get_conv_ovf_u8_un();
    public EmitHelper get_conv_ovf_u_un();
    public EmitHelper get_conv_r4();
    public EmitHelper get_conv_r8();
    public EmitHelper get_conv_r_un();
    public EmitHelper get_conv_u();
    public EmitHelper get_conv_u1();
    public EmitHelper get_conv_u2();
    public EmitHelper get_conv_u4();
    public EmitHelper get_conv_u8();
    public EmitHelper get_cpblk();
    public EmitHelper cpobj(Type type);
    public EmitHelper get_div();
    public EmitHelper get_div_un();
    public EmitHelper get_dup();
    public EmitHelper get_endfilter();
    public EmitHelper get_endfinally();
    public EmitHelper get_initblk();
    public EmitHelper initobj(Type type);
    public EmitHelper isinst(Type type);
    public EmitHelper jmp(MethodInfo methodInfo);
    public EmitHelper ldarg(short index);
    public EmitHelper ldarg(int index);
    public EmitHelper ldarga(short index);
    public EmitHelper ldarga_s(byte index);
    public EmitHelper ldarga(int index);
    public EmitHelper get_ldarg_0();
    public EmitHelper get_ldarg_1();
    public EmitHelper get_ldarg_2();
    public EmitHelper get_ldarg_3();
    public EmitHelper ldarg_s(byte index);
    public EmitHelper ldc_bool(bool b);
    public EmitHelper ldc_i4(int num);
    public EmitHelper get_ldc_i4_0();
    public EmitHelper get_ldc_i4_1();
    public EmitHelper get_ldc_i4_2();
    public EmitHelper get_ldc_i4_3();
    public EmitHelper get_ldc_i4_4();
    public EmitHelper get_ldc_i4_5();
    public EmitHelper get_ldc_i4_6();
    public EmitHelper get_ldc_i4_7();
    public EmitHelper get_ldc_i4_8();
    public EmitHelper get_ldc_i4_m1();
    public EmitHelper ldc_i4_(int num);
    public EmitHelper ldc_i4_s(sbyte num);
    public EmitHelper ldc_i8(long num);
    public EmitHelper ldc_r4(float num);
    public EmitHelper ldc_r8(double num);
    public EmitHelper ldelema(Type type);
    public EmitHelper get_ldelem_i();
    public EmitHelper get_ldelem_i1();
    public EmitHelper get_ldelem_i2();
    public EmitHelper get_ldelem_i4();
    public EmitHelper get_ldelem_i8();
    public EmitHelper get_ldelem_r4();
    public EmitHelper get_ldelem_r8();
    public EmitHelper get_ldelem_ref();
    public EmitHelper get_ldelem_u1();
    public EmitHelper get_ldelem_u2();
    public EmitHelper get_ldelem_u4();
    public EmitHelper ldfld(FieldInfo fieldInfo);
    public EmitHelper ldflda(FieldInfo fieldInfo);
    public EmitHelper ldftn(MethodInfo methodInfo);
    public EmitHelper get_ldind_i();
    public EmitHelper get_ldind_i1();
    public EmitHelper get_ldind_i2();
    public EmitHelper get_ldind_i4();
    public EmitHelper get_ldind_i8();
    public EmitHelper get_ldind_r4();
    public EmitHelper get_ldind_r8();
    public EmitHelper get_ldind_ref();
    public EmitHelper get_ldind_u1();
    public EmitHelper get_ldind_u2();
    public EmitHelper get_ldind_u4();
    public EmitHelper ldind(Type type);
    public EmitHelper get_ldlen();
    public EmitHelper ldloc(short index);
    public EmitHelper ldloc(LocalBuilder localBuilder);
    public EmitHelper ldloca(short index);
    public EmitHelper ldloca_s(byte index);
    public EmitHelper ldloca(LocalBuilder local);
    public EmitHelper get_ldloc_0();
    public EmitHelper get_ldloc_1();
    public EmitHelper get_ldloc_2();
    public EmitHelper get_ldloc_3();
    public EmitHelper ldloc_s(byte index);
    public EmitHelper get_ldnull();
    public EmitHelper ldobj(Type type);
    public EmitHelper ldsfld(FieldInfo fieldInfo);
    public EmitHelper ldsflda(FieldInfo fieldInfo);
    public EmitHelper ldstrEx(string str);
    public EmitHelper ldstr(string str);
    public EmitHelper ldtoken(MethodInfo methodInfo);
    public EmitHelper ldtoken(FieldInfo fieldInfo);
    public EmitHelper ldtoken(Type type);
    public EmitHelper ldvirtftn(MethodInfo methodInfo);
    public EmitHelper leave(Label label);
    public EmitHelper leave_s(Label label);
    public EmitHelper get_localloc();
    public EmitHelper mkrefany(Type type);
    public EmitHelper get_mul();
    public EmitHelper get_mul_ovf();
    public EmitHelper get_mul_ovf_un();
    public EmitHelper get_neg();
    public EmitHelper newarr(Type type);
    public EmitHelper newobj(ConstructorInfo constructorInfo);
    public EmitHelper newobj(Type type, Type[] parameters);
    public EmitHelper get_nop();
    public EmitHelper get_not();
    public EmitHelper get_or();
    public EmitHelper get_pop();
    public EmitHelper get_readonly();
    public EmitHelper get_refanytype();
    public EmitHelper refanyval(Type type);
    public EmitHelper get_rem();
    public EmitHelper get_rem_un();
    public EmitHelper ret();
    public EmitHelper get_rethrow();
    public EmitHelper get_shl();
    public EmitHelper get_shr();
    public EmitHelper get_shr_un();
    public EmitHelper sizeof(Type type);
    public EmitHelper starg(short index);
    public EmitHelper starg_s(byte index);
    public EmitHelper starg(int index);
    public EmitHelper get_stelem_i();
    public EmitHelper get_stelem_i1();
    public EmitHelper get_stelem_i2();
    public EmitHelper get_stelem_i4();
    public EmitHelper get_stelem_i8();
    public EmitHelper get_stelem_r4();
    public EmitHelper get_stelem_r8();
    public EmitHelper get_stelem_ref();
    public EmitHelper stfld(FieldInfo fieldInfo);
    public EmitHelper get_stind_i();
    public EmitHelper get_stind_i1();
    public EmitHelper get_stind_i2();
    public EmitHelper get_stind_i4();
    public EmitHelper get_stind_i8();
    public EmitHelper get_stind_r4();
    public EmitHelper get_stind_r8();
    public EmitHelper get_stind_ref();
    public EmitHelper stind(Type type);
    public EmitHelper stloc(LocalBuilder local);
    public EmitHelper stloc(short index);
    public EmitHelper get_stloc_0();
    public EmitHelper get_stloc_1();
    public EmitHelper get_stloc_2();
    public EmitHelper get_stloc_3();
    public EmitHelper stloc_s(LocalBuilder local);
    public EmitHelper stloc_s(byte index);
    public EmitHelper stobj(Type type);
    public EmitHelper stsfld(FieldInfo fieldInfo);
    public EmitHelper get_sub();
    public EmitHelper get_sub_ovf();
    public EmitHelper get_sub_ovf_un();
    public EmitHelper switch(Label[] labels);
    public EmitHelper get_tailcall();
    public EmitHelper get_throw();
    public EmitHelper unaligned(Label label);
    public EmitHelper unaligned(long addr);
    public EmitHelper unbox(Type type);
    public EmitHelper unbox_any(Type type);
    public EmitHelper unboxIfValueType(Type type);
    public EmitHelper get_volatile();
    public EmitHelper get_xor();
    public void end();
    public EmitHelper LoadInitValue(Type type);
    public bool LoadWellKnownValue(object o);
    public EmitHelper Init(LocalBuilder localBuilder);
    public EmitHelper LoadType(Type type);
    public EmitHelper LoadField(FieldInfo fieldInfo);
    public EmitHelper CastFromObject(Type type);
    public void AddMaxStackSize(int size);
    private static Exception CreateNoSuchMethodException(Type type, string methodName);
    private static Exception CreateNotExpectedTypeException(Type type);
}
internal abstract class Fasterflect.Emitter.InvocationEmitter : BaseEmitter {
    protected InvocationEmitter(CallInfo callInfo);
    protected byte CreateLocalsForByRefParams(byte paramArrayIndex, MethodBase invocationInfo);
    protected void AssignByRefParamsToArray(int paramArrayIndex);
    protected void PushParamsOrLocalsToStack(int paramArrayIndex);
}
internal class Fasterflect.Emitter.LookupUtils : object {
    public static ConstructorInfo GetConstructor(CallInfo callInfo);
    public static MethodInfo GetMethod(CallInfo callInfo);
    public static MemberInfo GetMember(CallInfo callInfo);
    public static FieldInfo GetField(CallInfo callInfo);
    public static PropertyInfo GetProperty(CallInfo callInfo);
    public static MethodInfo GetPropertyGetMethod(PropertyInfo propInfo, CallInfo callInfo);
    public static MethodInfo GetPropertySetMethod(PropertyInfo propInfo, CallInfo callInfo);
    private static MethodInfo GetPropertyMethod(string infoPrefix, string propertyMethod, CallInfo callInfo);
}
[DebuggerStepThroughAttribute]
internal class Fasterflect.Emitter.MapCallInfo : CallInfo {
    [CompilerGeneratedAttribute]
private Type <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberTypes <SourceMemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberTypes <TargetMemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    public Type SourceType { get; private set; }
    public MemberTypes SourceMemberTypes { get; private set; }
    public MemberTypes TargetMemberTypes { get; private set; }
    public String[] Names { get; private set; }
    public MapCallInfo(Type targetType, Type[] genericTypes, Flags bindingFlags, MemberTypes memberTypes, string name, Type[] parameterTypes, MemberInfo memberInfo, bool isReadOperation, Type sourceType, MemberTypes sourceMemberTypes, MemberTypes targetMemberTypes, String[] names);
    [CompilerGeneratedAttribute]
public Type get_SourceType();
    [CompilerGeneratedAttribute]
private void set_SourceType(Type value);
    [CompilerGeneratedAttribute]
public MemberTypes get_SourceMemberTypes();
    [CompilerGeneratedAttribute]
private void set_SourceMemberTypes(MemberTypes value);
    [CompilerGeneratedAttribute]
public MemberTypes get_TargetMemberTypes();
    [CompilerGeneratedAttribute]
private void set_TargetMemberTypes(MemberTypes value);
    [CompilerGeneratedAttribute]
public String[] get_Names();
    [CompilerGeneratedAttribute]
private void set_Names(String[] value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Fasterflect.Emitter.MapEmitter : BaseEmitter {
    private Type sourceType;
    private MemberTypes sourceMemberTypes;
    private MemberTypes targetMemberTypes;
    private String[] names;
    public MapEmitter(Type sourceType, Type targetType, MemberTypes sourceMemberTypes, MemberTypes targetMemberTypes, Flags bindingFlags, String[] names);
    protected internal virtual DynamicMethod CreateDynamicMethod();
    protected internal virtual Delegate CreateDelegate();
    private void GenerateGetMemberValue(MemberInfo member);
    private void GenerateSetMemberValue(MemberInfo member);
    private IEnumerable`1<KeyValuePair`2<MemberInfo, MemberInfo>> GetMatchingMembers();
}
internal class Fasterflect.Emitter.MemberGetEmitter : BaseEmitter {
    public MemberGetEmitter(MemberInfo memberInfo, Flags bindingFlags);
    public MemberGetEmitter(Type targetType, Flags bindingFlags, MemberTypes memberType, string fieldOrPropertyName);
    private MemberGetEmitter(Type targetType, Flags bindingFlags, MemberTypes memberType, string fieldOrPropertyName, MemberInfo memberInfo);
    internal MemberGetEmitter(CallInfo callInfo);
    protected internal virtual DynamicMethod CreateDynamicMethod();
    protected internal virtual Delegate CreateDelegate();
}
internal class Fasterflect.Emitter.MemberSetEmitter : BaseEmitter {
    public MemberSetEmitter(MemberInfo memberInfo, Flags bindingFlags);
    public MemberSetEmitter(Type targetType, Flags bindingFlags, MemberTypes memberType, string fieldOrProperty);
    private MemberSetEmitter(Type targetType, Flags bindingFlags, MemberTypes memberType, string fieldOrProperty, MemberInfo memberInfo);
    internal MemberSetEmitter(CallInfo callInfo);
    protected internal virtual DynamicMethod CreateDynamicMethod();
    protected internal virtual Delegate CreateDelegate();
}
internal class Fasterflect.Emitter.MethodInvocationEmitter : InvocationEmitter {
    public MethodInvocationEmitter(MethodInfo methodInfo, Flags bindingFlags);
    public MethodInvocationEmitter(Type targetType, Flags bindingFlags, string name, Type[] parameterTypes);
    private MethodInvocationEmitter(Type targetType, Flags bindingFlags, string name, Type[] parameterTypes, MemberInfo methodInfo);
    public MethodInvocationEmitter(CallInfo callInfo);
    protected internal virtual DynamicMethod CreateDynamicMethod();
    protected internal virtual Delegate CreateDelegate();
    private void GenerateInvocation(MethodInfo methodInfo, byte paramArrayIndex, byte structLocalPosition);
}
internal class Fasterflect.Emitter.ValueTypeHolder : object {
    [CompilerGeneratedAttribute]
private ValueType <Value>k__BackingField;
    public ValueType Value { get; public set; }
    public ValueTypeHolder(object value);
    [CompilerGeneratedAttribute]
public ValueType get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ValueType value);
}
[ExtensionAttribute]
public static class Fasterflect.FieldExtensions : object {
    [ExtensionAttribute]
public static object SetFieldValue(object obj, string name, object value);
    [ExtensionAttribute]
public static object GetFieldValue(object obj, string name);
    [ExtensionAttribute]
public static object SetFieldValue(object obj, string name, object value, Flags bindingFlags);
    [ExtensionAttribute]
public static object GetFieldValue(object obj, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static MemberSetter DelegateForSetFieldValue(Type type, string name);
    [ExtensionAttribute]
public static MemberGetter DelegateForGetFieldValue(Type type, string name);
    [ExtensionAttribute]
public static MemberSetter DelegateForSetFieldValue(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static MemberGetter DelegateForGetFieldValue(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static FieldInfo Field(Type type, string name);
    [ExtensionAttribute]
public static FieldInfo Field(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static IList`1<FieldInfo> Fields(Type type, String[] names);
    [ExtensionAttribute]
public static IList`1<FieldInfo> Fields(Type type, Flags bindingFlags, String[] names);
    private static IList`1<FieldInfo> GetFields(Type type, Flags bindingFlags);
    [ExtensionAttribute]
public static object TryGetFieldValue(object obj, string name);
    [ExtensionAttribute]
public static object TryGetFieldValue(object obj, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static bool TrySetFieldValue(object obj, string name, object value);
    [ExtensionAttribute]
public static bool TrySetFieldValue(object obj, string name, object value, Flags bindingFlags);
}
[ExtensionAttribute]
public static class Fasterflect.FieldInfoExtensions : object {
    [ExtensionAttribute]
public static void Set(FieldInfo fieldInfo, object value);
    [ExtensionAttribute]
public static void Set(FieldInfo fieldInfo, object obj, object value);
    [ExtensionAttribute]
public static object Get(FieldInfo fieldInfo);
    [ExtensionAttribute]
public static object Get(FieldInfo fieldInfo, object obj);
    [ExtensionAttribute]
public static MemberSetter DelegateForSetFieldValue(FieldInfo fieldInfo);
    [ExtensionAttribute]
public static MemberGetter DelegateForGetFieldValue(FieldInfo fieldInfo);
}
public class Fasterflect.Flags : ValueType {
    private long flags;
    private static Dictionary`2<Flags, string> flagNames;
    public static Flags None;
    public static Flags IgnoreCase;
    public static Flags DeclaredOnly;
    public static Flags ExactBinding;
    public static Flags Public;
    public static Flags NonPublic;
    public static Flags Instance;
    public static Flags Static;
    public static Flags PartialNameMatch;
    public static Flags TrimExplicitlyImplemented;
    public static Flags ExcludeExplicitlyImplemented;
    public static Flags ExcludeBackingMembers;
    public static Flags IgnoreParameterModifiers;
    public static Flags ExcludeHiddenMembers;
    public static Flags AnyVisibility;
    public static Flags InstancePublic;
    public static Flags InstancePrivate;
    public static Flags InstanceAnyVisibility;
    public static Flags StaticPublic;
    public static Flags StaticPrivate;
    public static Flags StaticAnyVisibility;
    public static Flags InstancePublicDeclaredOnly;
    public static Flags InstancePrivateDeclaredOnly;
    public static Flags InstanceAnyDeclaredOnly;
    public static Flags StaticPublicDeclaredOnly;
    public static Flags StaticPrivateDeclaredOnly;
    public static Flags StaticAnyDeclaredOnly;
    public static Flags StaticInstanceAnyVisibility;
    public static Flags Default;
    public static Flags AllMembers;
    private Flags(long flags);
    private static Flags();
    public bool IsSet(BindingFlags mask);
    public bool IsSet(Flags mask);
    public bool IsAnySet(BindingFlags mask);
    public bool IsAnySet(Flags mask);
    public bool IsNotSet(BindingFlags mask);
    public bool IsNotSet(Flags mask);
    public static Flags SetIf(Flags flags, Flags mask, bool condition);
    public static Flags SetOnlyIf(Flags flags, Flags mask, bool condition);
    public static Flags ClearIf(Flags flags, Flags mask, bool condition);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Flags op_Subtraction(Flags f1, Flags f2);
    public static Flags op_BitwiseOr(Flags f1, Flags f2);
    public static Flags op_BitwiseAnd(Flags f1, Flags f2);
    public static bool op_Equality(Flags f1, Flags f2);
    public static bool op_Inequality(Flags f1, Flags f2);
    public static Flags op_Implicit(BindingFlags m);
    public static Flags op_Explicit(long m);
    public static BindingFlags op_Implicit(Flags m);
    public static long op_Implicit(Flags m);
    public virtual string ToString();
}
[FlagsAttribute]
public enum Fasterflect.FormatOptions : Enum {
    public int value__;
    public static FormatOptions None;
    public static FormatOptions AddHeader;
    public static FormatOptions NewLineAfterElement;
    public static FormatOptions Indent;
    public static FormatOptions UseSpaces;
    public static FormatOptions Default;
}
[ExtensionAttribute]
public static class Fasterflect.MapExtensions : object {
    [ExtensionAttribute]
public static void Map(object source, object target, String[] names);
    [ExtensionAttribute]
public static void Map(object source, object target, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static void Map(object source, object target, MemberTypes sourceTypes, MemberTypes targetTypes, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static ObjectMapper DelegateForMap(Type sourceType, Type targetType, String[] names);
    [ExtensionAttribute]
public static ObjectMapper DelegateForMap(Type sourceType, Type targetType, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static ObjectMapper DelegateForMap(Type sourceType, Type targetType, MemberTypes sourceTypes, MemberTypes targetTypes, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static void MapFields(object source, object target, String[] names);
    [ExtensionAttribute]
public static void MapProperties(object source, object target, String[] names);
    [ExtensionAttribute]
public static void MapFieldsToProperties(object source, object target, String[] names);
    [ExtensionAttribute]
public static void MapPropertiesToFields(object source, object target, String[] names);
}
[ExtensionAttribute]
public static class Fasterflect.MemberExtensions : object {
    [ExtensionAttribute]
public static MemberInfo Member(Type type, string name);
    [ExtensionAttribute]
public static MemberInfo Member(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static IList`1<MemberInfo> FieldsAndProperties(Type type);
    [ExtensionAttribute]
public static IList`1<MemberInfo> FieldsAndProperties(Type type, Flags bindingFlags);
    [ExtensionAttribute]
public static IList`1<MemberInfo> Members(Type type);
    [ExtensionAttribute]
public static IList`1<MemberInfo> Members(Type type, Flags bindingFlags);
    [ExtensionAttribute]
public static IList`1<MemberInfo> Members(Type type, MemberTypes memberTypes, String[] names);
    [ExtensionAttribute]
public static IList`1<MemberInfo> Members(Type type, MemberTypes memberTypes, Flags bindingFlags, String[] names);
    private static IList`1<MemberInfo> GetMembers(Type type, MemberTypes memberTypes, Flags bindingFlags);
    [ExtensionAttribute]
public static object TryGetValue(object obj, string name);
    [ExtensionAttribute]
public static object TryGetValue(object obj, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static bool TrySetValue(object obj, string name, object value);
    [ExtensionAttribute]
public static bool TrySetValue(object obj, string name, object value, Flags bindingFlags);
}
[ExtensionAttribute]
internal static class Fasterflect.MemberFilter : object {
    [ExtensionAttribute]
public static bool IsReservedName(string name);
    [ExtensionAttribute]
public static string TrimExplicitlyImplementedName(string name);
    [ExtensionAttribute]
public static IList`1<T> Filter(IList`1<T> members, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static IList`1<T> Filter(IList`1<T> methods, Type[] genericTypes);
    [ExtensionAttribute]
public static IList`1<T> Filter(IList`1<T> methods, Flags bindingFlags, Type[] paramTypes);
    [ExtensionAttribute]
public static IList`1<T> Filter(IList`1<T> members, Flags bindingFlags, MemberTypes memberTypes);
    [ExtensionAttribute]
public static IList`1<T> Filter(IList`1<T> members, Flags bindingFlags);
    [ExtensionAttribute]
private static bool ContainsOverride(IList`1<T> candidates, MethodInfo method);
}
public class Fasterflect.MemberGetter : MulticastDelegate {
    public MemberGetter(object object, IntPtr method);
    public virtual object Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Fasterflect.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static object Get(MemberInfo memberInfo);
    [ExtensionAttribute]
public static void Set(MemberInfo memberInfo, object value);
    [ExtensionAttribute]
public static object Get(MemberInfo memberInfo, object obj);
    [ExtensionAttribute]
public static void Set(MemberInfo memberInfo, object obj, object value);
    [ExtensionAttribute]
public static Type Type(MemberInfo member);
    [ExtensionAttribute]
public static bool IsReadable(MemberInfo member);
    [ExtensionAttribute]
public static bool IsWritable(MemberInfo member);
    [ExtensionAttribute]
public static bool IsInvokable(MemberInfo member);
    [ExtensionAttribute]
public static bool IsStatic(MemberInfo member);
    [ExtensionAttribute]
public static bool IsInstance(MemberInfo member);
    [ExtensionAttribute]
public static bool HasName(MemberInfo member, string name);
}
public class Fasterflect.MemberSetter : MulticastDelegate {
    public MemberSetter(object object, IntPtr method);
    public virtual void Invoke(object obj, object value);
    public virtual IAsyncResult BeginInvoke(object obj, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class Fasterflect.MethodExtensions : object {
    [ExtensionAttribute]
public static object CallMethod(object obj, string name, Object[] parameters);
    [ExtensionAttribute]
public static object CallMethod(object obj, Type[] genericTypes, string name, Object[] parameters);
    [ExtensionAttribute]
public static object CallMethod(object obj, string name, Type[] parameterTypes, Object[] parameters);
    [ExtensionAttribute]
public static object CallMethod(object obj, Type[] genericTypes, string name, Type[] parameterTypes, Object[] parameters);
    [ExtensionAttribute]
public static object CallMethod(object obj, string name, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static object CallMethod(object obj, Type[] genericTypes, string name, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static object CallMethod(object obj, string name, Type[] parameterTypes, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static object CallMethod(object obj, Type[] genericTypes, string name, Type[] parameterTypes, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static MethodInvoker DelegateForCallMethod(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInvoker DelegateForCallMethod(Type type, Type[] genericTypes, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInvoker DelegateForCallMethod(Type type, string name, Flags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInvoker DelegateForCallMethod(Type type, Type[] genericTypes, string name, Flags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, Type[] genericTypes, string name);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, Type[] genericTypes, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, Type[] genericTypes, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, string name, Type[] parameterTypes, Flags bindingFlags);
    [ExtensionAttribute]
public static MethodInfo Method(Type type, Type[] genericTypes, string name, Type[] parameterTypes, Flags bindingFlags);
    [ExtensionAttribute]
internal static MethodInfo MakeGeneric(MethodInfo methodInfo, Type[] genericTypes);
    [ExtensionAttribute]
public static IList`1<MethodInfo> Methods(Type type, String[] names);
    [ExtensionAttribute]
public static IList`1<MethodInfo> Methods(Type type, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static IList`1<MethodInfo> Methods(Type type, Type[] parameterTypes, String[] names);
    [ExtensionAttribute]
public static IList`1<MethodInfo> Methods(Type type, Type[] parameterTypes, Flags bindingFlags, String[] names);
    [ExtensionAttribute]
public static IList`1<MethodInfo> Methods(Type type, Type[] genericTypes, Type[] parameterTypes, Flags bindingFlags, String[] names);
    private static IList`1<MethodInfo> GetMethods(Type type, Flags bindingFlags);
}
[ExtensionAttribute]
public static class Fasterflect.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static object Call(MethodInfo methodInfo, Object[] parameters);
    [ExtensionAttribute]
public static object Call(MethodInfo methodInfo, object obj, Object[] parameters);
    [ExtensionAttribute]
public static MethodInvoker DelegateForCallMethod(MethodInfo methodInfo);
    [ExtensionAttribute]
public static IList`1<ParameterInfo> Parameters(MethodBase method);
    [ExtensionAttribute]
public static bool HasParameterSignature(MethodBase method, Type[] parameters);
    [ExtensionAttribute]
public static bool HasParameterSignature(MethodBase method, ParameterInfo[] parameters);
}
public class Fasterflect.MethodInvoker : MulticastDelegate {
    public MethodInvoker(object object, IntPtr method);
    public virtual object Invoke(object obj, Object[] parameters);
    public virtual IAsyncResult BeginInvoke(object obj, Object[] parameters, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Fasterflect.ObjectMapper : MulticastDelegate {
    public ObjectMapper(object object, IntPtr method);
    public virtual void Invoke(object source, object target);
    public virtual IAsyncResult BeginInvoke(object source, object target, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Fasterflect.ParameterConverter : MulticastDelegate {
    public ParameterConverter(object object, IntPtr method);
    public virtual bool Invoke(Type parameterType, object target, Object& value);
    public virtual IAsyncResult BeginInvoke(Type parameterType, object target, Object& value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Object& value, IAsyncResult result);
}
[ExtensionAttribute]
public static class Fasterflect.ParameterInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsNullable(ParameterInfo parameter);
    [ExtensionAttribute]
public static bool HasName(ParameterInfo parameter, string name);
    [ExtensionAttribute]
public static bool HasDefaultValue(ParameterInfo parameter);
    [ExtensionAttribute]
public static object DefaultValue(ParameterInfo parameter);
}
internal class Fasterflect.Probing.ConstructorMap : MethodMap {
    private ConstructorInvoker invoker;
    public ConstructorMap(ConstructorInfo constructor, String[] paramNames, Type[] parameterTypes, Object[] sampleParamValues, bool mustUseAllParameters);
    private void UpdateMembers(object target, Object[] row);
    public virtual object Invoke(Object[] row);
    internal virtual void InitializeInvoker();
}
internal static class Fasterflect.Probing.MapFactory : object {
    private static Cache`2<SourceInfo, MethodMap> ctorMapCache;
    private static MapFactory();
    public static MethodMap PrepareInvoke(Type type, String[] paramNames, Type[] parameterTypes, Object[] sampleParamValues);
    internal static MethodMap DetermineBestConstructorMatch(Type type, String[] paramNames, Type[] parameterTypes, Object[] sampleParamValues);
    internal static MethodMap DetermineBestMethodMatch(IEnumerable`1<MethodBase> methods, bool mustUseAllParameters, String[] paramNames, Type[] parameterTypes, Object[] sampleParamValues);
    private static MethodMap DetermineBestMatch(IEnumerable`1<MethodBase> methods, bool mustUseAllParameters, String[] paramNames, Type[] parameterTypes, Object[] sampleParamValues);
    private static MethodMap CreateMap(MethodBase method, String[] paramNames, Type[] parameterTypes, Object[] sampleParamValues, bool mustUseAllParameters);
}
public class Fasterflect.Probing.MethodDispatcher : object {
    private List`1<MethodBase> methodPool;
    private Cache`2<SourceInfo, MethodMap> mapCache;
    public MethodDispatcher(Type type);
    public void AddMethod(MethodInfo method);
    public object Invoke(object obj, bool mustUseAllParameters, object sample);
    public object Invoke(object obj, bool mustUseAllParameters, Dictionary`2<string, object> parameters);
}
internal class Fasterflect.Probing.MethodMap : object {
    private bool mustUseAllParameters;
    protected long cost;
    protected bool isPerfectMatch;
    protected bool isValid;
    protected MemberInfo[] members;
    protected MethodBase method;
    protected BitArray methodParameterUsageMask;
    protected String[] paramNames;
    protected Type[] paramTypes;
    protected BitArray parameterDefaultValueMask;
    protected IDictionary`2<string, object> parameterDefaultValues;
    protected Int32[] parameterOrderMap;
    protected Int32[] parameterOrderMapReverse;
    protected BitArray parameterReflectionMask;
    protected BitArray parameterTypeConvertMask;
    protected BitArray parameterUnusedMask;
    protected long parameterUsageCount;
    protected BitArray parameterUsageMask;
    protected IList`1<ParameterInfo> parameters;
    protected int requiredFoundCount;
    protected int requiredParameterCount;
    protected Type type;
    private MethodInvoker invoker;
    public IDictionary`2<string, object> ParameterDefaultValues { get; public set; }
    public int ParameterCount { get; }
    public int RequiredParameterCount { get; }
    public long Cost { get; }
    public bool IsValid { get; }
    public bool IsPerfectMatch { get; }
    public MethodMap(MethodBase method, String[] paramNames, Type[] paramTypes, Object[] sampleParamValues, bool mustUseAllParameters);
    private void InitializeBitArrays(int length);
    private void InitializeMethodMap(Object[] sampleParamValues);
    private bool IsConvertible(Type sourceType, Type targetType, object sampleValue);
    private void SaveDefaultValue(string parameterName, object parameterValue);
    private bool HasExternalDefaultValue(ParameterInfo parameter);
    private object GetExternalDefaultValue(ParameterInfo parameter);
    protected Object[] PrepareParameters(Object[] row);
    public virtual object Invoke(Object[] row);
    public virtual object Invoke(object target, Object[] row);
    internal Type[] GetParamTypes();
    protected bool AnySet(BitArray bits);
    protected bool AllUnset(BitArray bits);
    protected bool AllSet(BitArray bits);
    public IDictionary`2<string, object> get_ParameterDefaultValues();
    public void set_ParameterDefaultValues(IDictionary`2<string, object> value);
    public int get_ParameterCount();
    public int get_RequiredParameterCount();
    public virtual long get_Cost();
    public bool get_IsValid();
    public bool get_IsPerfectMatch();
    internal virtual void InitializeInvoker();
}
internal class Fasterflect.Probing.SourceInfo : object {
    private Type type;
    private Boolean[] paramKinds;
    private String[] paramNames;
    private Type[] paramTypes;
    private MemberGetter[] paramValueReaders;
    public Type Type { get; }
    public String[] ParamNames { get; }
    public Type[] ParamTypes { get; }
    public Boolean[] ParamKinds { get; }
    public MemberGetter[] ParamValueReaders { get; }
    public SourceInfo(Type type, String[] names, Type[] types);
    public SourceInfo(Type type, String[] names, Type[] types, Boolean[] kinds);
    public static SourceInfo CreateFromType(Type type);
    public Type get_Type();
    public String[] get_ParamNames();
    public Type[] get_ParamTypes();
    public Boolean[] get_ParamKinds();
    public MemberGetter[] get_ParamValueReaders();
    public Object[] GetParameterValues(object source);
    internal MemberGetter GetReader(string memberName);
    private void InitializeParameterValueReaders();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class Fasterflect.Probing.TypeConverter : object {
    public static object Get(Type targetType, XmlNode node);
    public static object Get(Type targetType, XAttribute attribute);
    public static object Get(Type targetType, XElement element);
    public static object Get(Type targetType, string value);
    public static object Get(Type targetType, object value);
    public static object ConvertTypes(Type targetType, Type sourceType, object value);
    private static object ConvertEnums(Type targetType, Type sourceType, object value);
    public static Guid StringToGuid(string guid);
    public static string GuidToBinaryString(Guid guid);
    private static object ConvertGuids(Type targetType, Type sourceType, object sourceObj);
}
[ExtensionAttribute]
public static class Fasterflect.PropertyExtensions : object {
    [ExtensionAttribute]
public static object SetPropertyValue(object obj, string name, object value);
    [ExtensionAttribute]
public static object GetPropertyValue(object obj, string name);
    [ExtensionAttribute]
public static object SetPropertyValue(object obj, string name, object value, Flags bindingFlags);
    [ExtensionAttribute]
public static object GetPropertyValue(object obj, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static object SetPropertyValue(object obj, Expression`1<Func`1<object>> memberExpression, object value);
    [ExtensionAttribute]
public static object GetPropertyValue(object obj, Expression`1<Func`1<object>> memberExpression);
    [ExtensionAttribute]
public static MemberSetter DelegateForSetPropertyValue(Type type, string name);
    [ExtensionAttribute]
public static MemberGetter DelegateForGetPropertyValue(Type type, string name);
    [ExtensionAttribute]
public static MemberSetter DelegateForSetPropertyValue(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static MemberGetter DelegateForGetPropertyValue(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static object SetIndexer(object obj, Object[] parameters);
    [ExtensionAttribute]
public static object SetIndexer(object obj, Type[] parameterTypes, Object[] parameters);
    [ExtensionAttribute]
public static object GetIndexer(object obj, Object[] parameters);
    [ExtensionAttribute]
public static object GetIndexer(object obj, Type[] parameterTypes, Object[] parameters);
    [ExtensionAttribute]
public static object SetIndexer(object obj, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static object SetIndexer(object obj, Type[] parameterTypes, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static object GetIndexer(object obj, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static object GetIndexer(object obj, Type[] parameterTypes, Flags bindingFlags, Object[] parameters);
    [ExtensionAttribute]
public static MethodInvoker DelegateForSetIndexer(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInvoker DelegateForGetIndexer(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInvoker DelegateForSetIndexer(Type type, Flags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInvoker DelegateForGetIndexer(Type type, Flags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
public static PropertyInfo Property(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo Property(Type type, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static IList`1<PropertyInfo> Properties(Type type, String[] names);
    [ExtensionAttribute]
public static IList`1<PropertyInfo> Properties(Type type, Flags bindingFlags, String[] names);
    private static IList`1<PropertyInfo> GetProperties(Type type, Flags bindingFlags);
    [ExtensionAttribute]
public static object TryGetPropertyValue(object obj, string name);
    [ExtensionAttribute]
public static object TryGetPropertyValue(object obj, string name, Flags bindingFlags);
    [ExtensionAttribute]
public static bool TrySetPropertyValue(object obj, string name, object value);
    [ExtensionAttribute]
public static bool TrySetPropertyValue(object obj, string name, object value, Flags bindingFlags);
}
[ExtensionAttribute]
public static class Fasterflect.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static void Set(PropertyInfo propInfo, object value);
    [ExtensionAttribute]
public static void Set(PropertyInfo propInfo, object obj, object value);
    [ExtensionAttribute]
public static object Get(PropertyInfo propInfo);
    [ExtensionAttribute]
public static object Get(PropertyInfo propInfo, object obj);
    [ExtensionAttribute]
public static MemberSetter DelegateForSetPropertyValue(PropertyInfo propInfo);
    [ExtensionAttribute]
public static MemberSetter DelegateForSetPropertyValue(PropertyInfo propInfo, Flags bindingFlags);
    [ExtensionAttribute]
public static MemberGetter DelegateForGetPropertyValue(PropertyInfo propInfo);
    [ExtensionAttribute]
public static MemberGetter DelegateForGetPropertyValue(PropertyInfo propInfo, Flags bindingFlags);
}
[ExtensionAttribute]
public static class Fasterflect.TryCallMethodExtensions : object {
    [ExtensionAttribute]
public static object TryCallMethod(object obj, string methodName, bool mustUseAllParameters, object sample);
    [ExtensionAttribute]
public static object TryCallMethod(object obj, string methodName, bool mustUseAllParameters, IDictionary`2<string, object> parameters);
    [ExtensionAttribute]
public static object TryCallMethod(object obj, string methodName, bool mustUseAllParameters, String[] parameterNames, Type[] parameterTypes, Object[] parameterValues);
}
[ExtensionAttribute]
public static class Fasterflect.TryCreateInstanceExtensions : object {
    private static Cache`2<Type, SourceInfo> sourceInfoCache;
    private static TryCreateInstanceExtensions();
    [ExtensionAttribute]
public static object TryCreateInstance(Type type, object sample);
    [ExtensionAttribute]
public static object TryCreateInstance(Type type, IDictionary`2<string, object> parameters);
    [ExtensionAttribute]
public static object TryCreateInstance(Type type, String[] parameterNames, Object[] parameterValues);
    [ExtensionAttribute]
public static object TryCreateInstance(Type type, String[] parameterNames, Type[] parameterTypes, Object[] parameterValues);
}
[ExtensionAttribute]
public static class Fasterflect.TryInvokeWithValuesExtensions : object {
    [ExtensionAttribute]
public static object TryCreateInstanceWithValues(Type type, Object[] parameterValues);
    [ExtensionAttribute]
public static object TryCreateInstanceWithValues(Type type, ParameterConverter converter, BindingFlags flags, Object[] parameterValues);
    [ExtensionAttribute]
public static object TryCallMethodWithValues(object obj, string methodName, Object[] parameterValues);
    [ExtensionAttribute]
public static object TryCallMethodWithValues(object obj, ParameterConverter converter, string methodName, BindingFlags flags, Object[] parameterValues);
    [ExtensionAttribute]
public static object TryCallMethodWithValues(object obj, ParameterConverter converter, string methodName, Type[] genericTypes, BindingFlags flags, Object[] parameterValues);
    public static object TryCall(ParameterConverter converter, IEnumerable`1<MethodBase> methodBases, object obj, Object[] parameterValues);
    private static IEnumerable`1<MethodBase> GetCandidates(Object[] parameterValues, IEnumerable`1<MethodBase> methodBases);
    private static bool StandardConvert(Type targetType, object owner, Object& value);
    private static bool IsParams(ParameterInfo param);
}
[ExtensionAttribute]
public static class Fasterflect.TypeExtensions : object {
    private static List`1<Byte[]> tokens;
    private static TypeExtensions();
    [ExtensionAttribute]
public static bool Implements(Type type);
    [ExtensionAttribute]
public static bool Implements(Type type, Type interfaceType);
    [ExtensionAttribute]
public static bool Inherits(Type type);
    [ExtensionAttribute]
public static bool Inherits(Type type, Type baseType);
    [ExtensionAttribute]
public static bool InheritsOrImplements(Type type);
    [ExtensionAttribute]
public static bool InheritsOrImplements(Type type, Type baseType);
    [ExtensionAttribute]
public static bool IsFrameworkType(Type type);
    [ExtensionAttribute]
public static string Name(Type type);
    private static string GetCSharpTypeName(string typeName);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Fasterflect.Utils : object {
    [ExtensionAttribute]
public static Type GetTypeAdjusted(object obj);
    [ExtensionAttribute]
public static Type[] ToTypeArray(ParameterInfo[] parameters);
    [ExtensionAttribute]
public static Type[] ToTypeArray(Object[] objects);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`1<T> action);
}
[ExtensionAttribute]
public static class Fasterflect.ValueTypeExtensions : object {
    [ExtensionAttribute]
public static object WrapIfValueType(object obj);
    [ExtensionAttribute]
public static object UnwrapIfWrapped(object obj);
    [ExtensionAttribute]
public static bool IsWrapped(object obj);
}
[ExtensionAttribute]
public static class Fasterflect.XmlTransformerExtensions : object {
    [ExtensionAttribute]
public static string ToXml(object obj);
    [ExtensionAttribute]
public static string ToXml(object obj, FormatOptions options);
    private static string ToXml(object obj, string header, string afterElementDecoration, string indentDecoration, string currentIndent);
    private static string Indent(string indent, string currentIndent);
    private static string Unindent(string indent, string currentIndent);
}
