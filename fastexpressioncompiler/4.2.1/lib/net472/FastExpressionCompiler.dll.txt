[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
public static class FastExpressionCompiler.CodePrinter : object {
    public static Func`3<Type, string, string> PrintTypeStripOuterClasses;
    private static string _nonPubStatMethods;
    private static string _nonPubInstMethods;
    private static Char[] _enumValueSeparators;
    public static ObjectToCode DefaultNotRecognizedToCode;
    private static Type[] TypesImplementedByArray;
    private static CodePrinter();
    [ExtensionAttribute]
public static StringBuilder AppendTypeOf(StringBuilder sb, Type type, bool stripNamespace, Func`3<Type, string, string> printType, bool printGenericTypeArgs);
    [ExtensionAttribute]
public static StringBuilder AppendTypeOfList(StringBuilder sb, Type[] types, bool stripNamespace, Func`3<Type, string, string> printType, bool printGenericTypeArgs);
    [ExtensionAttribute]
internal static StringBuilder AppendMember(StringBuilder sb, MemberInfo member, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
internal static StringBuilder AppendField(StringBuilder sb, FieldInfo field, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
internal static StringBuilder AppendProperty(StringBuilder sb, PropertyInfo property, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
internal static StringBuilder AppendEnum(StringBuilder sb, TEnum value, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
public static StringBuilder AppendMethod(StringBuilder sb, MethodInfo method, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
internal static StringBuilder AppendName(StringBuilder sb, string name, string typeCode, T identity, string suffix);
    [ExtensionAttribute]
internal static StringBuilder AppendName(StringBuilder sb, string name, Type type, T identity, string suffix);
    [ExtensionAttribute]
public static string ToCode(Type type, bool stripNamespace, Func`3<Type, string, string> printType, bool printGenericTypeArgs);
    [ExtensionAttribute]
public static string ToCode(bool x);
    [ExtensionAttribute]
public static string ToCode(string x);
    [ExtensionAttribute]
public static string ToEnumValueCode(Type enumType, object x, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
private static Type[] GetGenericTypeParametersOrArguments(TypeInfo typeInfo);
    [ExtensionAttribute]
public static string ToCommaSeparatedCode(IEnumerable items, ObjectToCode notRecognizedToCode, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
public static string ToArrayInitializerCode(IEnumerable items, Type itemType, ObjectToCode notRecognizedToCode, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
public static string ToCode(object x, ObjectToCode notRecognizedToCode, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
internal static StringBuilder NewLineIdent(StringBuilder sb, int lineIdent);
    [ExtensionAttribute]
internal static StringBuilder NewLine(StringBuilder sb, int lineIdent, int identSpaces);
    [ExtensionAttribute]
internal static StringBuilder NewLineIdentExpr(StringBuilder sb, Expression expr, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder NewLineIdentArgumentExprs(StringBuilder sb, IReadOnlyList`1<T> exprs, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder NewLineIdentArgumentExprs(StringBuilder sb, SmallList2`1<T> exprs, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder NewLineIdentCs(StringBuilder sb, Expression expr, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder NewLineIdentCs(StringBuilder sb, Expression expr, EnclosedIn enclosedIn, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    public static int CountLambdas(string code);
}
[FlagsAttribute]
public enum FastExpressionCompiler.CompilerFlags : Enum {
    public byte value__;
    public static CompilerFlags Default;
    public static CompilerFlags NoInvocationLambdaInlining;
    public static CompilerFlags EnableDelegateDebugInfo;
    public static CompilerFlags ThrowOnNotSupportedExpression;
}
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
public static class FastExpressionCompiler.ExpressionCompiler : object {
    private static Type[] _closureAsASingleParamType;
    private static Type[][] _closureTypePlusParamTypesPool;
    public static ArrayClosure EmptyArrayClosure;
    public static FieldInfo ArrayClosureArrayField;
    public static FieldInfo ArrayClosureWithNonPassedParamsField;
    private static ConstructorInfo[] _nonPassedParamsArrayClosureCtors;
    public static ConstructorInfo ArrayClosureWithNonPassedParamsConstructor;
    public static ConstructorInfo ArrayClosureWithNonPassedParamsConstructorWithoutConstants;
    [CompilerGeneratedAttribute]
private static Result <NotSupported_RuntimeVariables>k__BackingField;
    public static Result NotSupported_RuntimeVariables { get; private set; }
    private static ExpressionCompiler();
    [ExtensionAttribute]
public static TDelegate CompileFast(LambdaExpression lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static bool CompileFastToIL(LambdaExpression lambdaExpr, ILGenerator il, CompilerFlags flags);
    [ExtensionAttribute]
public static Delegate CompileFast(LambdaExpression lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static TDelegate CompileSys(Expression`1<TDelegate> lambdaExpr);
    [ExtensionAttribute]
public static Delegate CompileSys(LambdaExpression lambdaExpr);
    [ExtensionAttribute]
public static TDelegate CompileFast(Expression`1<TDelegate> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Func`1<R> CompileFast(Expression`1<Func`1<R>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Func`2<T1, R> CompileFast(Expression`1<Func`2<T1, R>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Func`3<T1, T2, R> CompileFast(Expression`1<Func`3<T1, T2, R>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Func`4<T1, T2, T3, R> CompileFast(Expression`1<Func`4<T1, T2, T3, R>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Func`5<T1, T2, T3, T4, R> CompileFast(Expression`1<Func`5<T1, T2, T3, T4, R>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Func`6<T1, T2, T3, T4, T5, R> CompileFast(Expression`1<Func`6<T1, T2, T3, T4, T5, R>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Func`7<T1, T2, T3, T4, T5, T6, R> CompileFast(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, R>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Action CompileFast(Expression`1<Action> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Action`1<T1> CompileFast(Expression`1<Action`1<T1>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Action`2<T1, T2> CompileFast(Expression`1<Action`2<T1, T2>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Action`3<T1, T2, T3> CompileFast(Expression`1<Action`3<T1, T2, T3>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Action`4<T1, T2, T3, T4> CompileFast(Expression`1<Action`4<T1, T2, T3, T4>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Action`5<T1, T2, T3, T4, T5> CompileFast(Expression`1<Action`5<T1, T2, T3, T4, T5>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static Action`6<T1, T2, T3, T4, T5, T6> CompileFast(Expression`1<Action`6<T1, T2, T3, T4, T5, T6>> lambdaExpr, bool ifFastFailedReturnNull, CompilerFlags flags);
    [ExtensionAttribute]
public static TDelegate TryCompile(LambdaExpression lambdaExpr, CompilerFlags flags);
    [ExtensionAttribute]
public static TDelegate TryCompileWithPreCreatedClosure(LambdaExpression lambdaExpr, ConstantExpression[] closureConstantsExprs);
    [ExtensionAttribute]
public static TDelegate TryCompileWithPreCreatedClosure(LambdaExpression lambdaExpr, ConstantExpression[] closureConstantsExprs, CompilerFlags flags);
    [ExtensionAttribute]
internal static TDelegate TryCompileWithPreCreatedClosure(LambdaExpression lambdaExpr, ClosureInfo& closureInfo, CompilerFlags flags);
    [ExtensionAttribute]
public static TDelegate TryCompileWithoutClosure(LambdaExpression lambdaExpr, CompilerFlags flags);
    private static Delegate CompileNoArgsNew(ConstructorInfo ctor, Type delegateType, Type[] closurePlusParamTypes, Type returnType);
    internal static object TryCompileBoundToFirstClosureParam(Type delegateType, Expression bodyExpr, IReadOnlyList`1<ParameterExpression> paramExprs, Type[] closurePlusParamTypes, Type returnType, CompilerFlags flags);
    private static Type[] RentOrNewClosureTypeToParamTypes(IReadOnlyList`1<ParameterExpression> paramExprs);
    private static void ReturnClosureTypeToParamTypesToPool(Type[] closurePlusParamTypes);
    [ExtensionAttribute]
internal static LabelInfo& GetLabelOrInvokeIndexByTarget(SmallList4`1& labels, object labelTarget, Boolean& found);
    [ExtensionAttribute]
private static Label GetOrDefineLabel(LabelInfo& label, ILGenerator il);
    [CompilerGeneratedAttribute]
public static Result get_NotSupported_RuntimeVariables();
    [CompilerGeneratedAttribute]
private static void set_NotSupported_RuntimeVariables(Result value);
    [ExtensionAttribute]
public static bool TryGetDebugClosureNestedLambdaOrConstant(Delegate parentLambda, Object& item, int itemIndex);
    [ExtensionAttribute]
public static bool TryGetDebugClosureNestedLambda(Delegate parentLambda, int itemIndex, Delegate& d);
    public static bool IsClosureBoundConstant(object value, Type type);
    public static bool TryCollectBoundConstants(ClosureInfo& closure, Expression expr, IReadOnlyList`1<ParameterExpression> paramExprs, NestedLambdaInfo nestedLambda, SmallList`1& rootNestedLambdas, CompilerFlags flags);
    public static Result TryCollectInfo(ClosureInfo& closure, Expression expr, IReadOnlyList`1<ParameterExpression> paramExprs, NestedLambdaInfo nestedLambda, SmallList`1& rootNestedLambdas, CompilerFlags flags);
    private static Expression CreateInlinedLambdaInvocationExpression(IReadOnlyList`1<Expression> invokeArgs, int invokeArgCount, LambdaExpression lambdaExpr);
    private static bool PropagateNonPassedParamsToOuterLambda(ClosureInfo& closure, NestedLambdaInfo nestedLambda, IReadOnlyList`1<ParameterExpression> paramExprs, IReadOnlyList`1<ParameterExpression> nestedLambdaParamExprs, SmallList`1& nestedNonPassedParams);
    private static bool FindAlreadyCompiledNestedLambdaInfoInLambdas(SmallList`1& nestedLambdas, LambdaExpression lambdaExpr, NestedLambdaInfo& found);
    private static bool TryCompileNestedLambda(ClosureInfo& nestedClosureInfo, NestedLambdaInfo nestedLambdaInfo, CompilerFlags setup);
    [ExtensionAttribute]
public static IDelegateDebugInfo TryGetDebugInfo(D d);
    private static Result TryCollectMemberInitExprConstants(ClosureInfo& closure, MemberInitExpression expr, IReadOnlyList`1<ParameterExpression> paramExprs, NestedLambdaInfo nestedLambda, SmallList`1& rootNestedLambdas, CompilerFlags flags);
    private static Result TryCollectListInitExprConstants(ClosureInfo& closure, ListInitExpression expr, IReadOnlyList`1<ParameterExpression> paramExprs, NestedLambdaInfo nestedLambda, SmallList`1& rootNestedLambdas, CompilerFlags flags);
    private static Result TryCollectTryExprConstants(ClosureInfo& closure, TryExpression tryExpr, IReadOnlyList`1<ParameterExpression> paramExprs, NestedLambdaInfo nestedLambda, SmallList`1& rootNestedLambdas, CompilerFlags flags);
    [ExtensionAttribute]
public static bool IgnoresResult(ParentFlags parent);
    [ExtensionAttribute]
internal static bool EmitPopIfIgnoreResult(ILGenerator il, ParentFlags parent);
    [ExtensionAttribute]
internal static bool TryEmitBoxOf(ILGenerator il, Type sourceType);
}
[ExtensionAttribute]
internal static class FastExpressionCompiler.FecHelpers : object {
    [ExtensionAttribute]
public static int GetFirstIndex(IReadOnlyList`1<T> source, T item, TEq eq);
    [ExtensionAttribute]
public static T GetArgument(IReadOnlyList`1<T> source, int index);
    [ExtensionAttribute]
public static ParameterExpression GetParameter(IReadOnlyList`1<ParameterExpression> source, int index);
    [ExtensionAttribute]
public static IReadOnlyList`1<ParameterExpression> ToReadOnlyList(IReadOnlyList`1<ParameterExpression> source);
    [ExtensionAttribute]
public static int GetCount(IReadOnlyList`1<ParameterExpression> p);
    [ExtensionAttribute]
public static int GetCount(IReadOnlyList`1<Expression> p);
}
public interface FastExpressionCompiler.IDelegateDebugInfo {
    public LambdaExpression Expression { get; }
    public string ExpressionString { get; }
    public string CSharpString { get; }
    public abstract virtual LambdaExpression get_Expression();
    public abstract virtual string get_ExpressionString();
    public abstract virtual string get_CSharpString();
}
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
public static class FastExpressionCompiler.ILGeneratorHacks : object {
    private static Func`3<ILGenerator, Type, int> _getNextLocalVarIndex;
    private static ILGeneratorHacks();
    internal static int PostInc(Int32& i);
    [ExtensionAttribute]
public static int GetNextLocalVarIndex(ILGenerator il, Type t);
}
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static class FastExpressionCompiler.ILGeneratorTools : object {
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, Type value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, FieldInfo value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, MethodInfo value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, ConstructorInfo value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, Label value);
    [ExtensionAttribute]
public static void DmarkLabel(ILGenerator il, Label value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, byte value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, sbyte value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, short value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, int value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, long value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, float value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, OpCode opcode, double value);
    [ExtensionAttribute]
public static void Demit(ILGenerator il, string value, OpCode opcode);
}
public class FastExpressionCompiler.ImTools.DefaultEq`1 : ValueType {
    public sealed virtual K GetTombstone();
    public sealed virtual bool Equals(K x, K y);
    public sealed virtual int GetHashCode(K key);
}
internal static class FastExpressionCompiler.ImTools.Hasher : object {
    public static int Combine(int h1, int h2);
}
public interface FastExpressionCompiler.ImTools.IEq`1 {
    public abstract virtual K GetTombstone();
    public abstract virtual bool Equals(K x, K y);
    public abstract virtual int GetHashCode(K key);
}
public class FastExpressionCompiler.ImTools.RefEq`1 : ValueType {
    public sealed virtual K GetTombstone();
    public sealed virtual bool Equals(K x, K y);
    public sealed virtual int GetHashCode(K key);
}
public class FastExpressionCompiler.ImTools.RefEq`2 : ValueType {
    public sealed virtual ValueTuple`2<A, B> GetTombstone();
    public sealed virtual bool Equals(ValueTuple`2<A, B> x, ValueTuple`2<A, B> y);
    public sealed virtual int GetHashCode(ValueTuple`2<A, B> key);
}
public class FastExpressionCompiler.ImTools.RefEq`3 : ValueType {
    public sealed virtual ValueTuple`3<A, B, C> GetTombstone();
    public sealed virtual bool Equals(ValueTuple`3<A, B, C> x, ValueTuple`3<A, B, C> y);
    public sealed virtual int GetHashCode(ValueTuple`3<A, B, C> key);
}
[ExtensionAttribute]
public static class FastExpressionCompiler.ImTools.SmallList : object {
    internal static int ForLoopCopyCount;
    internal static int DefaultInitialCapacity;
    internal static void Expand(TItem[]& items);
    public static TItem& AddDefaultToNotNullItemsAndGetRef(TItem[]& items, int index);
    public static TItem& AddDefaultAndGetRef(TItem[]& items, int index, int initialCapacity);
    [ExtensionAttribute]
public static TItem& GetSurePresentItemRef(SmallList`1& source, int index);
    [ExtensionAttribute]
public static TItem& Add(SmallList`1& source, int initialCapacity);
    [ExtensionAttribute]
public static void Add(SmallList`1& source, TItem& item, int initialCapacity);
    [ExtensionAttribute]
public static int TryGetIndex(TItem[] items, TItem& it, int startIndex, int count, TEq eq, int notFoundResult);
    [ExtensionAttribute]
public static int TryGetIndex(SmallList`1& source, TItem it, TEq eq);
    [ExtensionAttribute]
public static int GetIndexOrAdd(SmallList`1& source, TItem& item, TEq eq);
    [ExtensionAttribute]
public static TItem& GetSurePresentItemRef(SmallList4`1& source, int index);
    [ExtensionAttribute]
public static TItem& GetLastSurePresentItem(SmallList4`1& source);
    [ExtensionAttribute]
public static TItem& NotFound(SmallList4`1& _);
    [ExtensionAttribute]
public static TItem& AddDefaultAndGetRef(SmallList4`1& source);
    [ExtensionAttribute]
public static int TryGetIndex(SmallList4`1& source, TItem it, TEq eq);
    [ExtensionAttribute]
public static int GetIndexOrAdd(SmallList4`1& source, TItem& item, TEq eq);
    [ExtensionAttribute]
public static TItem& GetSurePresentItemRef(SmallList2`1& source, int index);
    [ExtensionAttribute]
public static TItem& GetLastSurePresentItem(SmallList2`1& source);
    [ExtensionAttribute]
public static TItem& NotFound(SmallList2`1& _);
    [ExtensionAttribute]
public static TItem& AddDefaultAndGetRef(SmallList2`1& source);
    [ExtensionAttribute]
public static int TryGetIndex(SmallList2`1& source, TItem it, TEq eq);
    [ExtensionAttribute]
public static int GetIndexOrAdd(SmallList2`1& source, TItem item, TEq eq);
}
public class FastExpressionCompiler.ImTools.SmallList`1 : ValueType {
    public T[] Items;
    public int Count;
    public SmallList`1(T[] items, int count);
    public SmallList`1(T[] items);
    public void Pop();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{Count} of {_it0?.ToString()}, {_it1?.ToString()}, ...")]
public class FastExpressionCompiler.ImTools.SmallList2`1 : ValueType {
    public static int StackCapacity;
    internal static TItem Missing;
    internal int _count;
    internal TItem _it0;
    internal TItem _it1;
    internal TItem[] _rest;
    public int Count { get; }
    public TItem Item { get; }
    public void InitCount(int count);
    public void Populate1(TItem it0);
    public void Populate2(TItem it0, TItem it1);
    public void Populate(TItem it0, TItem it1, TItem[] rest);
    public void Populate(TList items);
    public int get_Count();
    public TItem get_Item(int index);
    public void Add(TItem& item);
    public void AddDefault();
    public void RemoveLastSurePresentItem();
    public TItem[] ToArray();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{Count} of {_it0?.ToString()}, {_it1?.ToString()}, {_it2?.ToString()}, {_it3?.ToString()}, ...")]
public class FastExpressionCompiler.ImTools.SmallList4`1 : ValueType {
    public static int StackCapacity;
    internal static TItem Missing;
    internal int _count;
    internal TItem _it0;
    internal TItem _it1;
    internal TItem _it2;
    internal TItem _it3;
    internal TItem[] _rest;
    public int Count { get; }
    public TItem Item { get; }
    public int get_Count();
    public void Populate1(TItem it0);
    public void Populate2(TItem it0, TItem it1);
    public void Populate3(TItem it0, TItem it1, TItem it2);
    public void Populate4(TItem it0, TItem it1, TItem it2, TItem it3);
    public void Populate(TItem it0, TItem it1, TItem it2, TItem it3, TItem[] rest);
    public void Populate(TList items);
    public TItem get_Item(int index);
    public void Add(TItem& item);
    public void AddDefault();
    public void RemoveLastSurePresentItem();
    public TItem[] ToArray();
}
[ExtensionAttribute]
public static class FastExpressionCompiler.ImTools.SmallMap4 : object {
    internal static byte MinFreeCapacityShift;
    internal static byte MinHashesCapacityBitShift;
    public static byte MaxProbeBits;
    internal static byte MaxProbeCount;
    internal static byte ProbeCountShift;
    internal static int HashAndIndexMask;
    public static int StackEntriesCount;
    internal static int MinEntriesCapacity;
    public static SmallMap4`4<K, V, TEq, SingleArrayEntries`3<K, V, TEq>> New(byte capacityBitShift);
    public static string ToB(int x);
    internal static Int32& GetHashRef(Int32[]& start, int distance);
    internal static int GetHash(Int32[]& start, int distance);
    [ExtensionAttribute]
public static V& TryGetValueRef(SmallMap4`4& map, K key, Boolean& found);
    [ExtensionAttribute]
public static bool ContainsKey(SmallMap4`4& map, K key);
    [ExtensionAttribute]
public static V& AddOrGetValueRef(SmallMap4`4& map, K key, Boolean& found);
    [ExtensionAttribute]
private static void AddInitialHashWithoutResizing(SmallMap4`4& map, K key, int index, int indexMask);
    [ExtensionAttribute]
public static V& AddSureAbsentDefaultAndGetRef(SmallMap4`4& map, K key);
    [ExtensionAttribute]
private static V& AddSureAbsentDefaultAndGetRefByHash(SmallMap4`4& map, K key);
    [ExtensionAttribute]
public static Entry`2& GetSurePresentEntryRef(SmallMap4`4& map, int index);
    [ExtensionAttribute]
internal static V& TryGetValueRefByHash(SmallMap4`4& map, K key, Boolean& found);
    [ExtensionAttribute]
private static V& AddOrGetValueRefByHash(SmallMap4`4& map, K key, Boolean& found);
}
[DebuggerDisplayAttribute("{Count} of {_e0}, {_e1}, {_e2}, {_e3}, ...")]
public class FastExpressionCompiler.ImTools.SmallMap4`4 : ValueType {
    internal static Entry`2<K, V> _missing;
    internal byte _capacityBitShift;
    internal int _count;
    internal Int32[] _packedHashesAndIndexes;
    internal TEntries _entries;
    internal Entry`2<K, V> _e0;
    internal Entry`2<K, V> _e1;
    internal Entry`2<K, V> _e2;
    internal Entry`2<K, V> _e3;
    public int CapacityBitShift { get; }
    public Int32[] PackedHashesAndIndexes { get; }
    public int Count { get; }
    public TEntries Entries { get; }
    public SmallMap4`4(byte capacityBitShift);
    public int get_CapacityBitShift();
    public Int32[] get_PackedHashesAndIndexes();
    public int get_Count();
    public TEntries get_Entries();
    internal int ResizeHashes(int indexMask);
}
public class FastExpressionCompiler.NotSupportedExpressionException : InvalidOperationException {
    public Result Reason;
    public NotSupportedExpressionException(Result reason);
    public NotSupportedExpressionException(Result reason, string message);
}
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
public static class FastExpressionCompiler.ToCSharpPrinter : object {
    private static string NotSupportedExpression;
    [ExtensionAttribute]
public static string ToCSharpString(Expression expr);
    [ExtensionAttribute]
public static string ToCSharpString(Expression expr, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
public static StringBuilder ToCSharpString(Expression e, StringBuilder sb, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    private static StringBuilder NullConstantOrDefaultToCSharpString(Type exprType, StringBuilder sb, EnclosedIn encloseIn, bool stripNamespace, Func`3<Type, string, string> printType);
    private static StringBuilder InsertTopFFuncDefinitionOnce(StringBuilder sb);
    [ExtensionAttribute]
internal static StringBuilder ToCSharpString(Expression e, StringBuilder sb, EnclosedIn enclosedIn, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode, bool isReturnByRef);
    [ExtensionAttribute]
private static StringBuilder ToCSharpBlock(Expression expr, StringBuilder sb, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
private static StringBuilder ToCSharpExpression(Expression expr, StringBuilder sb, EnclosedIn enclosedIn, bool newLineExpr, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder AppendSemicolonOnce(StringBuilder sb);
    [ExtensionAttribute]
internal static StringBuilder AppendLineOnce(StringBuilder sb);
    [ExtensionAttribute]
internal static StringBuilder ToCSharpString(LabelTarget target, StringBuilder sb);
    [ExtensionAttribute]
private static StringBuilder ToCSharpString(IReadOnlyList`1<MemberBinding> bindings, StringBuilder sb, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
private static StringBuilder BlockToCSharpString(BlockExpression b, StringBuilder sb, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode, bool inTheLastBlock, BinaryExpression blockResultAssignment, bool containerIgnoresResult);
    private static string OperatorToCSharpString(ExpressionType nodeType);
    [CompilerGeneratedAttribute]
internal static void <ToCSharpString>g__PrintPart|6_0(Expression part, <>c__DisplayClass6_0& , <>c__DisplayClass6_1& );
}
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
public static class FastExpressionCompiler.ToExpressionPrinter : object {
    private static string NotSupportedExpression;
    [ExtensionAttribute]
public static string ToExpressionString(Expression expr, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
public static string ToExpressionString(Expression expr, List`1& paramsExprs, List`1& uniqueExprs, List`1& lts, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder ToExpressionString(Expression expr, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder ToExpressionString(ParameterExpression pe, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder ToExpressionString(LabelTarget lt, StringBuilder sb, List`1<LabelTarget> labelTargets, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType);
    [ExtensionAttribute]
private static StringBuilder ToExpressionString(IReadOnlyList`1<CatchBlock> bs, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
private static StringBuilder ToExpressionString(CatchBlock b, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
private static StringBuilder ToExpressionString(IReadOnlyList`1<SwitchCase> items, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
private static StringBuilder ToExpressionString(SwitchCase s, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
private static StringBuilder ToExpressionString(MemberBinding mb, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
private static StringBuilder ToExpressionString(ElementInit ei, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
    [ExtensionAttribute]
internal static StringBuilder CreateExpressionString(Expression e, StringBuilder sb, List`1<ParameterExpression> paramsExprs, List`1<Expression> uniqueExprs, List`1<LabelTarget> lts, int lineIdent, bool stripNamespace, Func`3<Type, string, string> printType, int identSpaces, ObjectToCode notRecognizedToCode);
}
[ExtensionAttribute]
public static class FastExpressionCompiler.Tools : object {
    internal static MethodInfo DelegateTargetGetterMethod;
    private static Tools();
    [ExtensionAttribute]
public static Expression AsExpr(object obj);
    [ExtensionAttribute]
public static Expression[] AsExprs(Object[] obj);
    [ExtensionAttribute]
internal static bool IsUnsigned(Type type);
    [ExtensionAttribute]
internal static bool IsPrimitiveWithZeroDefault(Type type);
    [ExtensionAttribute]
internal static bool IsNullable(Type type);
    [ExtensionAttribute]
internal static Type GetUnderlyingNullableTypeOrNull(Type type);
    [ExtensionAttribute]
internal static Type GetUnderlyingNullableTypeUnsafe(Type type);
    [ExtensionAttribute]
public static string GetArithmeticBinaryOperatorMethodName(ExpressionType nodeType);
    [ExtensionAttribute]
internal static bool IsAssignNodeType(ExpressionType nodeType);
    [ExtensionAttribute]
internal static bool IsBlockLike(ExpressionType nodeType);
    [ExtensionAttribute]
internal static bool IsReturnable(ExpressionType nodeType);
    [ExtensionAttribute]
internal static bool IsBlockLikeOrConditional(ExpressionType nodeType);
    [ExtensionAttribute]
internal static Expression StripConvertRecursively(Expression expr);
    [ExtensionAttribute]
internal static bool IsComplexExpression(Expression expr);
    [ExtensionAttribute]
internal static bool IsConstantOrDefault(Expression expr);
    [ExtensionAttribute]
internal static bool IsParamOrConstantOrDefault(Expression expr);
    [ExtensionAttribute]
internal static string GetCSharpName(MemberInfo m);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static MethodInfo FindMethod(Type type, string methodName);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static MethodInfo FindDelegateInvokeMethod(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static MethodInfo FindNullableValueGetterMethod(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static MethodInfo GetNullableHasValueGetterMethod(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static FieldInfo GetNullableValueUnsafeAkaGetValueOrDefaultMethod(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static ConstructorInfo GetNullableConstructor(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static MethodInfo FindConvertOperator(Type type, Type sourceType, Type targetType);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("FastExpressionCompiler is not supported in trimming scenarios.")]
internal static ConstructorInfo FindSingleParamConstructor(Type type, Type paramType);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> xs);
    [ExtensionAttribute]
internal static IList`1<T> AsList(IEnumerable`1<T> source);
    [ExtensionAttribute]
internal static bool TryGetIndex(IList`1<T> items, Int32& index, T item, int count, TEq eq);
    public static T[] Empty();
    public static Type[] GetParamTypes(IReadOnlyList`1<ParameterExpression> paramExprs);
    public static Type GetFuncOrActionType(Type returnType);
    public static Type GetFuncOrActionType(Type p, Type returnType);
    public static Type GetFuncOrActionType(Type p0, Type p1, Type returnType);
    public static Type GetFuncOrActionType(Type p0, Type p1, Type p2, Type returnType);
    public static Type GetFuncOrActionType(Type p0, Type p1, Type p2, Type p3, Type returnType);
    public static Type GetFuncOrActionType(Type p0, Type p1, Type p2, Type p3, Type p4, Type returnType);
    public static Type GetFuncOrActionType(Type p0, Type p1, Type p2, Type p3, Type p4, Type p5, Type returnType);
    public static Type GetFuncOrActionType(Type[] paramTypes, Type returnType);
    [ExtensionAttribute]
public static T GetFirst(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static T GetFirst(T[] source);
    [CompilerGeneratedAttribute]
internal static Type <GetFuncOrActionType>g__GetAction|40_0(int length);
    [CompilerGeneratedAttribute]
internal static Type <GetFuncOrActionType>g__GetFunc|40_1(int length);
}
internal static class FastExpressionCompiler.Trimming : object {
    public static string Message;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
