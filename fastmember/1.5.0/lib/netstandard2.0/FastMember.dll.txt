internal static class FastMember.CallSiteCache : object {
    private static Hashtable getters;
    private static Hashtable setters;
    private static CallSiteCache();
    internal static object GetValue(string name, object target);
    internal static void SetValue(string name, object target, object value);
}
public class FastMember.Member : object {
    private MemberInfo member;
    public int Ordinal { get; }
    public string Name { get; }
    public Type Type { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    internal Member(MemberInfo member);
    public int get_Ordinal();
    public string get_Name();
    public Type get_Type();
    public bool IsDefined(Type attributeType);
    public Attribute GetAttribute(Type attributeType, bool inherit);
    public bool get_CanWrite();
    public bool get_CanRead();
}
[DefaultMemberAttribute("Item")]
public class FastMember.MemberSet : object {
    private Member[] members;
    public Member Item { get; }
    public int Count { get; }
    private Member System.Collections.Generic.IList<FastMember.Member>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<FastMember.Member>.IsReadOnly { get; }
    internal MemberSet(Type type);
    [IteratorStateMachineAttribute("FastMember.MemberSet/<GetEnumerator>d__2")]
public sealed virtual IEnumerator`1<Member> GetEnumerator();
    public Member get_Item(int index);
    public sealed virtual int get_Count();
    private sealed virtual override Member System.Collections.Generic.IList<FastMember.Member>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<FastMember.Member>.set_Item(int index, Member value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<FastMember.Member>.Remove(Member item);
    private sealed virtual override void System.Collections.Generic.ICollection<FastMember.Member>.Add(Member item);
    private sealed virtual override void System.Collections.Generic.ICollection<FastMember.Member>.Clear();
    private sealed virtual override void System.Collections.Generic.IList<FastMember.Member>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.IList<FastMember.Member>.Insert(int index, Member item);
    private sealed virtual override bool System.Collections.Generic.ICollection<FastMember.Member>.Contains(Member item);
    private sealed virtual override void System.Collections.Generic.ICollection<FastMember.Member>.CopyTo(Member[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<FastMember.Member>.get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.IList<FastMember.Member>.IndexOf(Member member);
}
[DefaultMemberAttribute("Item")]
public abstract class FastMember.ObjectAccessor : object {
    public object Item { get; public set; }
    public object Target { get; }
    public abstract virtual object get_Item(string name);
    public abstract virtual void set_Item(string name, object value);
    public abstract virtual object get_Target();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ObjectAccessor Create(object target);
    public static ObjectAccessor Create(object target, bool allowNonPublicAccessors);
}
[DefaultMemberAttribute("Item")]
public class FastMember.ObjectReader : DbDataReader {
    private IEnumerator source;
    private TypeAccessor accessor;
    private String[] memberNames;
    private Type[] effectiveTypes;
    private BitArray allowNull;
    private object current;
    private bool active;
    public int Depth { get; }
    public bool HasRows { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public object Item { get; }
    public object Item { get; }
    public ObjectReader(Type type, IEnumerable source, String[] members);
    public static ObjectReader Create(IEnumerable`1<T> source, String[] members);
    public virtual int get_Depth();
    public virtual DataTable GetSchemaTable();
    public virtual void Close();
    public virtual bool get_HasRows();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_RecordsAffected();
    protected virtual void Dispose(bool disposing);
    private void Shutdown();
    public virtual int get_FieldCount();
    public virtual bool get_IsClosed();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    protected virtual DbDataReader GetDbDataReader(int i);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
}
[AttributeUsageAttribute("384")]
public class FastMember.OrdinalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ushort <Ordinal>k__BackingField;
    public ushort Ordinal { get; private set; }
    public OrdinalAttribute(ushort ordinal);
    [CompilerGeneratedAttribute]
public ushort get_Ordinal();
    [CompilerGeneratedAttribute]
private void set_Ordinal(ushort value);
}
[DefaultMemberAttribute("Item")]
public abstract class FastMember.TypeAccessor : object {
    private static Hashtable publicAccessorsOnly;
    private static Hashtable nonPublicAccessors;
    private static AssemblyBuilder assembly;
    private static ModuleBuilder module;
    private static int counter;
    private static MethodInfo tryGetValue;
    private static MethodInfo strinqEquals;
    public bool CreateNewSupported { get; }
    public bool GetMembersSupported { get; }
    public object Item { get; public set; }
    private static TypeAccessor();
    public virtual bool get_CreateNewSupported();
    public virtual object CreateNew();
    public virtual bool get_GetMembersSupported();
    public virtual MemberSet GetMembers();
    public static TypeAccessor Create(Type type);
    public static TypeAccessor Create(Type type, bool allowNonPublicAccessors);
    private static int GetNextCounterValue();
    private static void WriteMapImpl(ILGenerator il, Type type, List`1<MemberInfo> members, FieldBuilder mapField, bool allowNonPublicAccessors, bool isGet);
    private static bool IsFullyPublic(Type type, PropertyInfo[] props, bool allowNonPublicAccessors);
    private static TypeAccessor CreateNew(Type type, bool allowNonPublicAccessors);
    private static void Cast(ILGenerator il, Type type, bool valueAsPointer);
    public abstract virtual object get_Item(object target, string name);
    public abstract virtual void set_Item(object target, string name, object value);
    [CompilerGeneratedAttribute]
internal static void <WriteMapImpl>g__WriteField|16_0(FieldInfo fieldToWrite, <>c__DisplayClass16_0& , <>c__DisplayClass16_1& );
}
[ExtensionAttribute]
internal static class FastMember.TypeHelpers : object {
    public static int Min(int x, int y);
    [ExtensionAttribute]
public static PropertyInfo[] GetTypeAndInterfaceProperties(Type type, BindingFlags flags);
}
