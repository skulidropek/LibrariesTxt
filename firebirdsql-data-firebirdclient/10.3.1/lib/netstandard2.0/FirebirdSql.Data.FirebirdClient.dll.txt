internal static class FirebirdSql.Data.Client.ClientFactory : object {
    public static DatabaseBase CreateDatabase(ConnectionString options);
    public static ValueTask`1<DatabaseBase> CreateDatabaseAsync(ConnectionString options, CancellationToken cancellationToken);
    public static ServiceManagerBase CreateServiceManager(ConnectionString options);
    public static ValueTask`1<ServiceManagerBase> CreateServiceManagerAsync(ConnectionString options, CancellationToken cancellationToken);
    private static DatabaseBase CreateManagedDatabase(ConnectionString options);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.ClientFactory/<CreateManagedDatabaseAsync>d__5")]
private static ValueTask`1<DatabaseBase> CreateManagedDatabaseAsync(ConnectionString options, CancellationToken cancellationToken);
    private static DatabaseBase CreateNativeDatabase(ConnectionString options);
    private static ValueTask`1<DatabaseBase> CreateNativeDatabaseAsync(ConnectionString options);
    private static ServiceManagerBase CreateManagedServiceManager(ConnectionString options);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.ClientFactory/<CreateManagedServiceManagerAsync>d__9")]
private static ValueTask`1<ServiceManagerBase> CreateManagedServiceManagerAsync(ConnectionString options, CancellationToken cancellationToken);
    private static ServiceManagerBase CreateNativeServiceManager(ConnectionString options);
    private static ValueTask`1<ServiceManagerBase> CreateNativeServiceManagerAsync(ConnectionString options);
    private static Exception UnsupportedProtocolException();
    private static Exception IncorrectServerTypeException();
    private static Exception InvalidCharsetException();
    private static Charset GetCharset(ConnectionString options);
    private static WireCryptOption FbWireCryptToWireCryptOption(FbWireCrypt wireCrypt);
}
internal class FirebirdSql.Data.Client.Managed.AuthBlock : object {
    private Srp256Client _srp256;
    private SrpClient _srp;
    private SspiHelper _sspi;
    [CompilerGeneratedAttribute]
private GdsConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private WireCryptOption <WireCrypt>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AcceptPluginName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PublicClientData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ClientData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SessionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WireCryptInitialized>k__BackingField;
    public GdsConnection Connection { get; }
    public string User { get; }
    public string Password { get; }
    public WireCryptOption WireCrypt { get; }
    public Byte[] ServerData { get; private set; }
    public string AcceptPluginName { get; private set; }
    public bool IsAuthenticated { get; private set; }
    public Byte[] ServerKeys { get; private set; }
    public Byte[] PublicClientData { get; private set; }
    public bool HasClientData { get; }
    public Byte[] ClientData { get; private set; }
    public Byte[] SessionKey { get; private set; }
    public string SessionKeyName { get; private set; }
    public bool WireCryptInitialized { get; private set; }
    public AuthBlock(GdsConnection connection, string user, string password, WireCryptOption wireCrypt);
    [CompilerGeneratedAttribute]
public GdsConnection get_Connection();
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public WireCryptOption get_WireCrypt();
    [CompilerGeneratedAttribute]
public Byte[] get_ServerData();
    [CompilerGeneratedAttribute]
private void set_ServerData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AcceptPluginName();
    [CompilerGeneratedAttribute]
private void set_AcceptPluginName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
private void set_IsAuthenticated(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerKeys();
    [CompilerGeneratedAttribute]
private void set_ServerKeys(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PublicClientData();
    [CompilerGeneratedAttribute]
private void set_PublicClientData(Byte[] value);
    public bool get_HasClientData();
    [CompilerGeneratedAttribute]
public Byte[] get_ClientData();
    [CompilerGeneratedAttribute]
private void set_ClientData(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_SessionKey();
    [CompilerGeneratedAttribute]
private void set_SessionKey(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_SessionKeyName();
    [CompilerGeneratedAttribute]
private void set_SessionKeyName(string value);
    [CompilerGeneratedAttribute]
public bool get_WireCryptInitialized();
    [CompilerGeneratedAttribute]
private void set_WireCryptInitialized(bool value);
    public Byte[] UserIdentificationData();
    public void SendContAuthToBuffer();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.AuthBlock/<SendContAuthToBufferAsync>d__56")]
public ValueTask SendContAuthToBufferAsync(CancellationToken cancellationToken);
    public IResponse ProcessContAuthResponse();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.AuthBlock/<ProcessContAuthResponseAsync>d__58")]
public ValueTask`1<IResponse> ProcessContAuthResponseAsync(CancellationToken cancellationToken);
    public void SendWireCryptToBuffer();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.AuthBlock/<SendWireCryptToBufferAsync>d__60")]
public ValueTask SendWireCryptToBufferAsync(CancellationToken cancellationToken);
    public void ProcessWireCryptResponse();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.AuthBlock/<ProcessWireCryptResponseAsync>d__62")]
public ValueTask ProcessWireCryptResponseAsync(CancellationToken cancellationToken);
    public void WireCryptValidate(int protocolVersion);
    public void Start(Byte[] serverData, string acceptPluginName, bool isAuthenticated, Byte[] serverKeys);
    public void Complete();
    private void ReleaseAuth();
    private static void WriteMultiPartHelper(Stream stream, byte code, Byte[] data);
    private static int WireCryptOptionValue(WireCryptOption wireCrypt);
    internal static string NormalizeLogin(string login);
}
internal class FirebirdSql.Data.Client.Managed.DataProviderStreamWrapper : object {
    private Stream _stream;
    public DataProviderStreamWrapper(Stream stream);
    public sealed virtual int Read(Byte[] buffer, int offset, int count);
    public sealed virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Write(Byte[] buffer, int offset, int count);
    public sealed virtual ValueTask WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Flush();
    public sealed virtual ValueTask FlushAsync(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.FetchResponse : object {
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Status { get; }
    public int Count { get; }
    public FetchResponse(int status, int count);
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public int get_Count();
}
internal class FirebirdSql.Data.Client.Managed.FirebirdNetworkHandlingWrapper : object {
    public static string CompressionName;
    public static string EncryptionName;
    private static int PreferredBufferSize;
    private IDataProvider _dataProvider;
    private Queue`1<byte> _outputBuffer;
    private Queue`1<byte> _inputBuffer;
    private Byte[] _readBuffer;
    private Byte[] _compressionBuffer;
    private ZlibCodec _compressor;
    private ZlibCodec _decompressor;
    private RC4Engine _decryptor;
    private RC4Engine _encryptor;
    [CompilerGeneratedAttribute]
private bool <IOFailed>k__BackingField;
    public bool IOFailed { get; public set; }
    public FirebirdNetworkHandlingWrapper(IDataProvider dataProvider);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IOFailed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IOFailed(bool value);
    public sealed virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.FirebirdNetworkHandlingWrapper/<ReadAsync>d__18")]
public sealed virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Write(Byte[] buffer, int offset, int count);
    public sealed virtual ValueTask WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public sealed virtual void Flush();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.FirebirdNetworkHandlingWrapper/<FlushAsync>d__22")]
public sealed virtual ValueTask FlushAsync(CancellationToken cancellationToken);
    public void StartCompression();
    public void StartEncryption(Byte[] key);
    private int ReadFromInputBuffer(Byte[] buffer, int offset, int count);
    private void WriteToInputBuffer(Byte[] data, int count);
    private int HandleDecompression(Byte[] buffer, int count);
    private int HandleCompression(Byte[] buffer, int count);
    private static void ResizeBuffer(Byte[]& buffer);
    private static RC4Engine CreateCipher(Byte[] key);
}
internal class FirebirdSql.Data.Client.Managed.GdsConnection : object {
    private NetworkStream _networkStream;
    private FirebirdNetworkHandlingWrapper _firebirdNetworkHandlingWrapper;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PortNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Charset <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Dialect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compression>k__BackingField;
    [CompilerGeneratedAttribute]
private WireCryptOption <WireCrypt>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CryptKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolMinimunType>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private XdrReaderWriter <Xdr>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthBlock <AuthBlock>k__BackingField;
    public string User { get; private set; }
    public string Password { get; private set; }
    public string DataSource { get; private set; }
    public int PortNumber { get; private set; }
    public int Timeout { get; private set; }
    public int PacketSize { get; private set; }
    public Charset Charset { get; private set; }
    public short Dialect { get; private set; }
    public bool Compression { get; private set; }
    public WireCryptOption WireCrypt { get; private set; }
    public Byte[] CryptKey { get; private set; }
    public int ProtocolVersion { get; private set; }
    public int ProtocolArchitecture { get; private set; }
    public int ProtocolMinimunType { get; private set; }
    public bool ConnectionBroken { get; }
    internal IPAddress IPAddress { get; private set; }
    internal XdrReaderWriter Xdr { get; private set; }
    internal AuthBlock AuthBlock { get; private set; }
    public GdsConnection(string dataSource, int port, int timeout);
    public GdsConnection(string user, string password, string dataSource, int portNumber, int timeout, int packetSize, Charset charset, short dialect, bool compression, WireCryptOption wireCrypt, Byte[] cryptKey);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
private void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(string value);
    [CompilerGeneratedAttribute]
public int get_PortNumber();
    [CompilerGeneratedAttribute]
private void set_PortNumber(int value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
private void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public int get_PacketSize();
    [CompilerGeneratedAttribute]
private void set_PacketSize(int value);
    [CompilerGeneratedAttribute]
public Charset get_Charset();
    [CompilerGeneratedAttribute]
private void set_Charset(Charset value);
    [CompilerGeneratedAttribute]
public short get_Dialect();
    [CompilerGeneratedAttribute]
private void set_Dialect(short value);
    [CompilerGeneratedAttribute]
public bool get_Compression();
    [CompilerGeneratedAttribute]
private void set_Compression(bool value);
    [CompilerGeneratedAttribute]
public WireCryptOption get_WireCrypt();
    [CompilerGeneratedAttribute]
private void set_WireCrypt(WireCryptOption value);
    [CompilerGeneratedAttribute]
public Byte[] get_CryptKey();
    [CompilerGeneratedAttribute]
private void set_CryptKey(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_ProtocolVersion();
    [CompilerGeneratedAttribute]
private void set_ProtocolVersion(int value);
    [CompilerGeneratedAttribute]
public int get_ProtocolArchitecture();
    [CompilerGeneratedAttribute]
private void set_ProtocolArchitecture(int value);
    [CompilerGeneratedAttribute]
public int get_ProtocolMinimunType();
    [CompilerGeneratedAttribute]
private void set_ProtocolMinimunType(int value);
    public bool get_ConnectionBroken();
    [CompilerGeneratedAttribute]
internal IPAddress get_IPAddress();
    [CompilerGeneratedAttribute]
private void set_IPAddress(IPAddress value);
    [CompilerGeneratedAttribute]
internal XdrReaderWriter get_Xdr();
    [CompilerGeneratedAttribute]
private void set_Xdr(XdrReaderWriter value);
    [CompilerGeneratedAttribute]
internal AuthBlock get_AuthBlock();
    [CompilerGeneratedAttribute]
private void set_AuthBlock(AuthBlock value);
    public void Connect();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.GdsConnection/<ConnectAsync>d__75")]
public ValueTask ConnectAsync(CancellationToken cancellationToken);
    public void Identify(string database);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.GdsConnection/<IdentifyAsync>d__77")]
public ValueTask IdentifyAsync(string database, CancellationToken cancellationToken);
    public void Disconnect();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.GdsConnection/<DisconnectAsync>d__79")]
public ValueTask DisconnectAsync(CancellationToken cancellationToken);
    internal IResponse ProcessOperation(int operation);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.GdsConnection/<ProcessOperationAsync>d__81")]
internal ValueTask`1<IResponse> ProcessOperationAsync(int operation, CancellationToken cancellationToken);
    internal void StartCompression();
    internal void StartEncryption();
    private static IPAddress GetIPAddress(string dataSource);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.GdsConnection/<GetIPAddressAsync>d__85")]
private static ValueTask`1<IPAddress> GetIPAddressAsync(string dataSource, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Func`3<IPEndPoint, CancellationToken, Task> <ConnectAsync>g__ConnectAsyncHelper|75_0(Socket socket);
}
internal class FirebirdSql.Data.Client.Managed.GenericResponse : object {
    [CompilerGeneratedAttribute]
private int <ObjectHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BlobId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IscException <Exception>k__BackingField;
    public int ObjectHandle { get; }
    public long BlobId { get; }
    public Byte[] Data { get; }
    public IscException Exception { get; }
    public GenericResponse(int objectHandle, long blobId, Byte[] data, IscException exception);
    [CompilerGeneratedAttribute]
public int get_ObjectHandle();
    [CompilerGeneratedAttribute]
public long get_BlobId();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public IscException get_Exception();
}
internal interface FirebirdSql.Data.Client.Managed.IDataProvider {
    public abstract virtual int Read(Byte[] buffer, int offset, int count);
    public abstract virtual ValueTask`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public abstract virtual void Write(Byte[] buffer, int offset, int count);
    public abstract virtual ValueTask WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public abstract virtual void Flush();
    public abstract virtual ValueTask FlushAsync(CancellationToken cancellationToken);
}
internal interface FirebirdSql.Data.Client.Managed.IResponse {
}
[ExtensionAttribute]
internal static class FirebirdSql.Data.Client.Managed.IResponseExtensions : object {
    [ExtensionAttribute]
public static void HandleResponseException(IResponse response);
    [ExtensionAttribute]
public static void HandleResponseWarning(IResponse response, Action`1<IscException> onWarning);
}
internal interface FirebirdSql.Data.Client.Managed.ITracksIOFailure {
    public bool IOFailed { get; public set; }
    public abstract virtual bool get_IOFailed();
    public abstract virtual void set_IOFailed(bool value);
}
internal interface FirebirdSql.Data.Client.Managed.IXdrReader {
    public abstract virtual Byte[] ReadBytes(Byte[] buffer, int count);
    public abstract virtual ValueTask`1<Byte[]> ReadBytesAsync(Byte[] buffer, int count, CancellationToken cancellationToken);
    public abstract virtual Byte[] ReadOpaque(int length);
    public abstract virtual ValueTask`1<Byte[]> ReadOpaqueAsync(int length, CancellationToken cancellationToken);
    public abstract virtual Byte[] ReadBuffer();
    public abstract virtual ValueTask`1<Byte[]> ReadBufferAsync(CancellationToken cancellationToken);
    public abstract virtual string ReadString();
    public abstract virtual ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    public abstract virtual string ReadString(int length);
    public abstract virtual ValueTask`1<string> ReadStringAsync(int length, CancellationToken cancellationToken);
    public abstract virtual string ReadString(Charset charset);
    public abstract virtual ValueTask`1<string> ReadStringAsync(Charset charset, CancellationToken cancellationToken);
    public abstract virtual string ReadString(Charset charset, int length);
    public abstract virtual ValueTask`1<string> ReadStringAsync(Charset charset, int length, CancellationToken cancellationToken);
    public abstract virtual short ReadInt16();
    public abstract virtual ValueTask`1<short> ReadInt16Async(CancellationToken cancellationToken);
    public abstract virtual int ReadInt32();
    public abstract virtual ValueTask`1<int> ReadInt32Async(CancellationToken cancellationToken);
    public abstract virtual long ReadInt64();
    public abstract virtual ValueTask`1<long> ReadInt64Async(CancellationToken cancellationToken);
    public abstract virtual Guid ReadGuid(int sqlType);
    public abstract virtual ValueTask`1<Guid> ReadGuidAsync(int sqlType, CancellationToken cancellationToken);
    public abstract virtual float ReadSingle();
    public abstract virtual ValueTask`1<float> ReadSingleAsync(CancellationToken cancellationToken);
    public abstract virtual double ReadDouble();
    public abstract virtual ValueTask`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    public abstract virtual DateTime ReadDateTime();
    public abstract virtual ValueTask`1<DateTime> ReadDateTimeAsync(CancellationToken cancellationToken);
    public abstract virtual DateTime ReadDate();
    public abstract virtual ValueTask`1<DateTime> ReadDateAsync(CancellationToken cancellationToken);
    public abstract virtual TimeSpan ReadTime();
    public abstract virtual ValueTask`1<TimeSpan> ReadTimeAsync(CancellationToken cancellationToken);
    public abstract virtual decimal ReadDecimal(int type, int scale);
    public abstract virtual ValueTask`1<decimal> ReadDecimalAsync(int type, int scale, CancellationToken cancellationToken);
    public abstract virtual bool ReadBoolean();
    public abstract virtual ValueTask`1<bool> ReadBooleanAsync(CancellationToken cancellationToken);
    public abstract virtual FbZonedDateTime ReadZonedDateTime(bool isExtended);
    public abstract virtual ValueTask`1<FbZonedDateTime> ReadZonedDateTimeAsync(bool isExtended, CancellationToken cancellationToken);
    public abstract virtual FbZonedTime ReadZonedTime(bool isExtended);
    public abstract virtual ValueTask`1<FbZonedTime> ReadZonedTimeAsync(bool isExtended, CancellationToken cancellationToken);
    public abstract virtual FbDecFloat ReadDec16();
    public abstract virtual ValueTask`1<FbDecFloat> ReadDec16Async(CancellationToken cancellationToken);
    public abstract virtual FbDecFloat ReadDec34();
    public abstract virtual ValueTask`1<FbDecFloat> ReadDec34Async(CancellationToken cancellationToken);
    public abstract virtual BigInteger ReadInt128();
    public abstract virtual ValueTask`1<BigInteger> ReadInt128Async(CancellationToken cancellationToken);
    public abstract virtual IscException ReadStatusVector();
    public abstract virtual ValueTask`1<IscException> ReadStatusVectorAsync(CancellationToken cancellationToken);
    public abstract virtual int ReadOperation();
    public abstract virtual ValueTask`1<int> ReadOperationAsync(CancellationToken cancellationToken);
}
internal interface FirebirdSql.Data.Client.Managed.IXdrWriter {
    public abstract virtual void Flush();
    public abstract virtual ValueTask FlushAsync(CancellationToken cancellationToken);
    public abstract virtual void WriteBytes(Byte[] buffer, int count);
    public abstract virtual ValueTask WriteBytesAsync(Byte[] buffer, int count, CancellationToken cancellationToken);
    public abstract virtual void WriteOpaque(Byte[] buffer);
    public abstract virtual ValueTask WriteOpaqueAsync(Byte[] buffer, CancellationToken cancellationToken);
    public abstract virtual void WriteOpaque(Byte[] buffer, int length);
    public abstract virtual ValueTask WriteOpaqueAsync(Byte[] buffer, int length, CancellationToken cancellationToken);
    public abstract virtual void WriteBuffer(Byte[] buffer);
    public abstract virtual ValueTask WriteBufferAsync(Byte[] buffer, CancellationToken cancellationToken);
    public abstract virtual void WriteBuffer(Byte[] buffer, int length);
    public abstract virtual ValueTask WriteBufferAsync(Byte[] buffer, int length, CancellationToken cancellationToken);
    public abstract virtual void WriteBlobBuffer(Byte[] buffer);
    public abstract virtual ValueTask WriteBlobBufferAsync(Byte[] buffer, CancellationToken cancellationToken);
    public abstract virtual void WriteTyped(int type, Byte[] buffer);
    public abstract virtual ValueTask WriteTypedAsync(int type, Byte[] buffer, CancellationToken cancellationToken);
    public abstract virtual void Write(string value);
    public abstract virtual ValueTask WriteAsync(string value, CancellationToken cancellationToken);
    public abstract virtual void Write(short value);
    public abstract virtual ValueTask WriteAsync(short value, CancellationToken cancellationToken);
    public abstract virtual void Write(int value);
    public abstract virtual ValueTask WriteAsync(int value, CancellationToken cancellationToken);
    public abstract virtual void Write(long value);
    public abstract virtual ValueTask WriteAsync(long value, CancellationToken cancellationToken);
    public abstract virtual void Write(float value);
    public abstract virtual ValueTask WriteAsync(float value, CancellationToken cancellationToken);
    public abstract virtual void Write(double value);
    public abstract virtual ValueTask WriteAsync(double value, CancellationToken cancellationToken);
    public abstract virtual void Write(decimal value, int type, int scale);
    public abstract virtual ValueTask WriteAsync(decimal value, int type, int scale, CancellationToken cancellationToken);
    public abstract virtual void Write(bool value);
    public abstract virtual ValueTask WriteAsync(bool value, CancellationToken cancellationToken);
    public abstract virtual void Write(DateTime value);
    public abstract virtual ValueTask WriteAsync(DateTime value, CancellationToken cancellationToken);
    public abstract virtual void Write(Guid value, int sqlType);
    public abstract virtual ValueTask WriteAsync(Guid value, int sqlType, CancellationToken cancellationToken);
    public abstract virtual void Write(FbDecFloat value, int size);
    public abstract virtual ValueTask WriteAsync(FbDecFloat value, int size, CancellationToken cancellationToken);
    public abstract virtual void Write(BigInteger value);
    public abstract virtual ValueTask WriteAsync(BigInteger value, CancellationToken cancellationToken);
    public abstract virtual void WriteDate(DateTime value);
    public abstract virtual ValueTask WriteDateAsync(DateTime value, CancellationToken cancellationToken);
    public abstract virtual void WriteTime(TimeSpan value);
    public abstract virtual ValueTask WriteTimeAsync(TimeSpan value, CancellationToken cancellationToken);
}
internal static class FirebirdSql.Data.Client.Managed.ProtocolsSupported : object {
    public static ICollection`1<Protocol> Get(bool compression);
}
internal class FirebirdSql.Data.Client.Managed.SqlResponse : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; }
    public SqlResponse(int count);
    [CompilerGeneratedAttribute]
public int get_Count();
}
internal class FirebirdSql.Data.Client.Managed.Srp.Srp256Client : SrpClientBase {
    public string Name { get; }
    public virtual string get_Name();
    protected virtual Byte[] ComputeHash(Byte[][] ba);
}
internal class FirebirdSql.Data.Client.Managed.Srp.SrpClient : SrpClientBase {
    public string Name { get; }
    public virtual string get_Name();
    protected virtual Byte[] ComputeHash(Byte[][] ba);
}
internal abstract class FirebirdSql.Data.Client.Managed.Srp.SrpClientBase : object {
    [CompilerGeneratedAttribute]
private string <SessionKeyName>k__BackingField;
    private static int SRP_KEY_SIZE;
    private static int SRP_SALT_SIZE;
    private static BigInteger N;
    private static BigInteger g;
    private static BigInteger k;
    private static Byte[] SEPARATOR_BYTES;
    [CompilerGeneratedAttribute]
private BigInteger <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <PrivateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Proof>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SessionKey>k__BackingField;
    public string Name { get; }
    public string SessionKeyName { get; }
    public BigInteger PublicKey { get; }
    public string PublicKeyHex { get; }
    public BigInteger PrivateKey { get; }
    public Byte[] Proof { get; private set; }
    public Byte[] SessionKey { get; private set; }
    private static SrpClientBase();
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_SessionKeyName();
    [CompilerGeneratedAttribute]
public BigInteger get_PublicKey();
    public string get_PublicKeyHex();
    [CompilerGeneratedAttribute]
public BigInteger get_PrivateKey();
    [CompilerGeneratedAttribute]
public Byte[] get_Proof();
    [CompilerGeneratedAttribute]
private void set_Proof(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_SessionKey();
    [CompilerGeneratedAttribute]
private void set_SessionKey(Byte[] value);
    public Byte[] ClientProof(string user, string password, Byte[] salt, BigInteger serverPublicKey);
    public Byte[] ClientProof(string user, string password, Byte[] authData);
    public ValueTuple`2<BigInteger, BigInteger> ServerSeed(string user, string password, Byte[] salt);
    public Byte[] GetServerSessionKey(string user, string password, Byte[] salt, BigInteger A, BigInteger B, BigInteger b);
    public Byte[] GetSalt();
    private BigInteger GetSecret();
    private Byte[] GetClientSessionKey(string user, string password, Byte[] salt, BigInteger serverPublicKey);
    protected abstract virtual Byte[] ComputeHash(Byte[][] ba);
    private static BigInteger GetUserHash(string user, string password, Byte[] salt);
    private static BigInteger BigIntegerFromByteArray(Byte[] b);
    private static Byte[] BigIntegerToByteArray(BigInteger n);
    private static Byte[] ComputeSHA1Hash(Byte[][] ba);
    private static Byte[] Pad(BigInteger n);
    private static BigInteger GetScramble(BigInteger x, BigInteger y);
    private static Byte[] GetRandomBytes(int count);
}
internal class FirebirdSql.Data.Client.Managed.Sspi.SspiHelper : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static int SECBUFFER_VERSION;
    private static int TOKEN_QUERY;
    private static int SEC_E_OK;
    private static int SEC_I_CONTINUE_NEEDED;
    private static int SECPKG_CRED_INBOUND;
    private static int SECPKG_CRED_OUTBOUND;
    private static int SECURITY_NATIVE_DREP;
    private static int MAX_TOKEN_SIZE;
    private static int ISC_REQ_DELEGATE;
    private static int ISC_REQ_MUTUAL_AUTH;
    private static int ISC_REQ_REPLAY_DETECT;
    private static int ISC_REQ_SEQUENCE_DETECT;
    private static int ISC_REQ_CONFIDENTIALITY;
    private static int ISC_REQ_USE_SESSION_KEY;
    private static int ISC_REQ_PROMPT_FOR_CREDS;
    private static int ISC_REQ_USE_SUPPLIED_CREDS;
    private static int ISC_REQ_ALLOCATE_MEMORY;
    private static int ISC_REQ_USE_DCE_STYLE;
    private static int ISC_REQ_DATAGRAM;
    private static int ISC_REQ_CONNECTION;
    private static int ISC_REQ_CALL_LEVEL;
    private static int ISC_REQ_FRAGMENT_SUPPLIED;
    private static int ISC_REQ_EXTENDED_ERROR;
    private static int ISC_REQ_STREAM;
    private static int ISC_REQ_INTEGRITY;
    private static int ISC_REQ_IDENTIFY;
    private static int ISC_REQ_NULL_SESSION;
    private static int ISC_REQ_MANUAL_CRED_VALIDATION;
    private static int ISC_REQ_RESERVED1;
    private static int ISC_REQ_FRAGMENT_TO_FIT;
    private static int SECPKG_ATTR_SIZES;
    private static int STANDARD_CONTEXT_ATTRIBUTES;
    private SecHandle _clientCredentials;
    private SecHandle _clientContext;
    private bool _disposed;
    private string _securityPackage;
    private string _remotePrincipal;
    public string Name { get; }
    public SspiHelper(string securityPackage);
    public SspiHelper(string securityPackage, string remotePrincipal);
    [CompilerGeneratedAttribute]
public string get_Name();
    private static int AcquireCredentialsHandle(string pszPrincipal, string pszPackage, int fCredentialUse, IntPtr PAuthenticationID, IntPtr pAuthData, int pGetKeyFn, IntPtr pvGetKeyArgument, SecHandle& phCredential, SecInteger& ptsExpiry);
    private static int InitializeSecurityContext(SecHandle& phCredential, IntPtr phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, IntPtr pInput, int Reserved2, SecHandle& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SecInteger& ptsExpiry);
    private static int InitializeSecurityContext(SecHandle& phCredential, SecHandle& phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, SecBufferDesc& SecBufferDesc, int Reserved2, SecHandle& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SecInteger& ptsExpiry);
    private static int FreeCredentialsHandle(SecHandle& phCredential);
    private static int DeleteSecurityContext(SecHandle& phContext);
    public Byte[] InitializeClientSecurity();
    public Byte[] GetClientSecurity(Byte[] serverToken);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void InitializeClientCredentials();
    private void CloseClientContext();
    private void CloseClientCredentials();
    private void EnsureDisposed();
}
internal class FirebirdSql.Data.Client.Managed.Version10.GdsArray : ArrayBase {
    private static long ArrayHandle;
    private long _handle;
    private GdsDatabase _database;
    private GdsTransaction _transaction;
    public long Handle { get; public set; }
    public DatabaseBase Database { get; public set; }
    public TransactionBase Transaction { get; public set; }
    public GdsArray(ArrayDesc descriptor);
    public GdsArray(GdsDatabase database, GdsTransaction transaction, string tableName, string fieldName);
    public GdsArray(GdsDatabase database, GdsTransaction transaction, long handle, string tableName, string fieldName);
    public virtual long get_Handle();
    public virtual void set_Handle(long value);
    public virtual DatabaseBase get_Database();
    public virtual void set_Database(DatabaseBase value);
    public virtual TransactionBase get_Transaction();
    public virtual void set_Transaction(TransactionBase value);
    public virtual Byte[] GetSlice(int sliceLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsArray/<GetSliceAsync>d__17")]
public virtual ValueTask`1<Byte[]> GetSliceAsync(int sliceLength, CancellationToken cancellationToken);
    public virtual void PutSlice(Array sourceArray, int sliceLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsArray/<PutSliceAsync>d__19")]
public virtual ValueTask PutSliceAsync(Array sourceArray, int sliceLength, CancellationToken cancellationToken);
    protected virtual Array DecodeSlice(Byte[] slice);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsArray/<DecodeSliceAsync>d__21")]
protected virtual ValueTask`1<Array> DecodeSliceAsync(Byte[] slice, CancellationToken cancellationToken);
    private Byte[] ReceiveSliceResponse(ArrayDesc desc);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsArray/<ReceiveSliceResponseAsync>d__23")]
private ValueTask`1<Byte[]> ReceiveSliceResponseAsync(ArrayDesc desc, CancellationToken cancellationToken);
    private Byte[] EncodeSliceArray(Array sourceArray);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsArray/<EncodeSliceArrayAsync>d__25")]
private ValueTask`1<Byte[]> EncodeSliceArrayAsync(Array sourceArray, CancellationToken cancellationToken);
    private Byte[] GenerateSDL(ArrayDesc desc);
    private void Stuff(BinaryWriter sdl, short count, Object[] args);
    private void Stuff(BinaryWriter sdl, Byte[] args);
    private void StuffSdl(BinaryWriter sdl, byte sdl_byte);
    private void StuffWord(BinaryWriter sdl, short word);
    private void StuffLong(BinaryWriter sdl, int word);
    private void StuffLiteral(BinaryWriter sdl, int literal);
    private void StuffString(BinaryWriter sdl, int constant, string value);
}
internal class FirebirdSql.Data.Client.Managed.Version10.GdsBlob : BlobBase {
    private static int DataSegment;
    private static int SeekMode;
    private GdsDatabase _database;
    private int _blobHandle;
    public DatabaseBase Database { get; }
    public int Handle { get; }
    public GdsBlob(GdsDatabase database, GdsTransaction transaction);
    public GdsBlob(GdsDatabase database, GdsTransaction transaction, long blobId);
    public virtual DatabaseBase get_Database();
    public virtual int get_Handle();
    protected virtual void Create();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsBlob/<CreateAsync>d__11")]
protected virtual ValueTask CreateAsync(CancellationToken cancellationToken);
    protected virtual void Open();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsBlob/<OpenAsync>d__13")]
protected virtual ValueTask OpenAsync(CancellationToken cancellationToken);
    protected virtual void GetSegment(Stream stream);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsBlob/<GetSegmentAsync>d__15")]
protected virtual ValueTask GetSegmentAsync(Stream stream, CancellationToken cancellationToken);
    protected virtual void PutSegment(Byte[] buffer);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsBlob/<PutSegmentAsync>d__17")]
protected virtual ValueTask PutSegmentAsync(Byte[] buffer, CancellationToken cancellationToken);
    protected virtual void Seek(int position);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsBlob/<SeekAsync>d__19")]
protected virtual ValueTask SeekAsync(int position, CancellationToken cancellationToken);
    protected virtual void Close();
    protected virtual ValueTask CloseAsync(CancellationToken cancellationToken);
    protected virtual void Cancel();
    protected virtual ValueTask CancelAsync(CancellationToken cancellationToken);
    private void CreateOrOpen(int op, BlobParameterBuffer bpb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsBlob/<CreateOrOpenAsync>d__25")]
private ValueTask CreateOrOpenAsync(int op, BlobParameterBuffer bpb, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version10.GdsDatabase : DatabaseBase {
    protected static int PartnerIdentification;
    protected static int AddressOfAstRoutine;
    protected static int ArgumentToAstRoutine;
    protected internal static int DatabaseObjectId;
    protected internal static int Incarnation;
    protected GdsConnection _connection;
    protected GdsEventManager _eventManager;
    protected int _handle;
    public bool UseUtf8ParameterBuffer { get; }
    public int Handle { get; }
    public bool HasRemoteEventSupport { get; }
    public bool ConnectionBroken { get; }
    public XdrReaderWriter Xdr { get; }
    public AuthBlock AuthBlock { get; }
    public GdsDatabase(GdsConnection connection);
    public virtual bool get_UseUtf8ParameterBuffer();
    public virtual int get_Handle();
    public virtual bool get_HasRemoteEventSupport();
    public virtual bool get_ConnectionBroken();
    public XdrReaderWriter get_Xdr();
    public AuthBlock get_AuthBlock();
    public virtual void Attach(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<AttachAsync>d__22")]
public virtual ValueTask AttachAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    protected virtual void SendAttachToBuffer(DatabaseParameterBufferBase dpb, string database);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<SendAttachToBufferAsync>d__24")]
protected virtual ValueTask SendAttachToBufferAsync(DatabaseParameterBufferBase dpb, string database, CancellationToken cancellationToken);
    protected virtual void ProcessAttachResponse(GenericResponse response);
    protected virtual ValueTask ProcessAttachResponseAsync(GenericResponse response, CancellationToken cancellationToken);
    protected void AfterAttachActions();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<AfterAttachActionsAsync>d__28")]
protected ValueTask AfterAttachActionsAsync(CancellationToken cancellationToken);
    public virtual void AttachWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public virtual ValueTask AttachWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void Detach();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<DetachAsync>d__32")]
public virtual ValueTask DetachAsync(CancellationToken cancellationToken);
    protected internal void SafelyDetach();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<SafelyDetachAsync>d__34")]
protected internal ValueTask SafelyDetachAsync(CancellationToken cancellationToken);
    public virtual void CreateDatabase(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<CreateDatabaseAsync>d__36")]
public virtual ValueTask CreateDatabaseAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    protected virtual void SendCreateToBuffer(DatabaseParameterBufferBase dpb, string database);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<SendCreateToBufferAsync>d__38")]
protected virtual ValueTask SendCreateToBufferAsync(DatabaseParameterBufferBase dpb, string database, CancellationToken cancellationToken);
    protected void ProcessCreateResponse(GenericResponse response);
    protected ValueTask ProcessCreateResponseAsync(GenericResponse response, CancellationToken cancellationToken);
    public virtual void CreateDatabaseWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public virtual ValueTask CreateDatabaseWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void DropDatabase();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<DropDatabaseAsync>d__44")]
public virtual ValueTask DropDatabaseAsync(CancellationToken cancellationToken);
    public virtual ValueTuple`4<int, string, int, int> ConnectionRequest();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<ConnectionRequestAsync>d__46")]
public virtual ValueTask`1<ValueTuple`4<int, string, int, int>> ConnectionRequestAsync(CancellationToken cancellationToken);
    public void CloseConnection();
    public ValueTask CloseConnectionAsync(CancellationToken cancellationToken);
    public virtual void CloseEventManager();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<CloseEventManagerAsync>d__50")]
public virtual ValueTask CloseEventManagerAsync(CancellationToken cancellationToken);
    public virtual void QueueEvents(RemoteEvent remoteEvent);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<QueueEventsAsync>d__52")]
public virtual ValueTask QueueEventsAsync(RemoteEvent remoteEvent, CancellationToken cancellationToken);
    public virtual void CancelEvents(RemoteEvent events);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<CancelEventsAsync>d__54")]
public virtual ValueTask CancelEventsAsync(RemoteEvent events, CancellationToken cancellationToken);
    public virtual TransactionBase BeginTransaction(TransactionParameterBuffer tpb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<BeginTransactionAsync>d__56")]
public virtual ValueTask`1<TransactionBase> BeginTransactionAsync(TransactionParameterBuffer tpb, CancellationToken cancellationToken);
    public virtual void CancelOperation(short kind);
    public virtual ValueTask CancelOperationAsync(short kind, CancellationToken cancellationToken);
    public virtual StatementBase CreateStatement();
    public virtual StatementBase CreateStatement(TransactionBase transaction);
    public virtual DatabaseParameterBufferBase CreateDatabaseParameterBuffer();
    public virtual EventParameterBuffer CreateEventParameterBuffer();
    public virtual TransactionParameterBuffer CreateTransactionParameterBuffer();
    public virtual List`1<object> GetDatabaseInfo(Byte[] items);
    public virtual ValueTask`1<List`1<object>> GetDatabaseInfoAsync(Byte[] items, CancellationToken cancellationToken);
    public virtual List`1<object> GetDatabaseInfo(Byte[] items, int bufferLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<GetDatabaseInfoAsync>d__67")]
public virtual ValueTask`1<List`1<object>> GetDatabaseInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    public virtual void ReleaseObject(int op, int id);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<ReleaseObjectAsync>d__69")]
public virtual ValueTask ReleaseObjectAsync(int op, int id, CancellationToken cancellationToken);
    protected virtual void SendReleaseObjectToBuffer(int op, int id);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<SendReleaseObjectToBufferAsync>d__71")]
protected virtual ValueTask SendReleaseObjectToBufferAsync(int op, int id, CancellationToken cancellationToken);
    protected virtual void ProcessReleaseObjectResponse(IResponse response);
    protected virtual ValueTask ProcessReleaseObjectResponseAsync(IResponse response, CancellationToken cancellationToken);
    public virtual int ReadOperation();
    public virtual ValueTask`1<int> ReadOperationAsync(CancellationToken cancellationToken);
    public virtual IResponse ReadResponse();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<ReadResponseAsync>d__77")]
public virtual ValueTask`1<IResponse> ReadResponseAsync(CancellationToken cancellationToken);
    public virtual IResponse ReadResponse(int operation);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<ReadResponseAsync>d__79")]
public virtual ValueTask`1<IResponse> ReadResponseAsync(int operation, CancellationToken cancellationToken);
    public void SafeFinishFetching(int numberOfResponses);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<SafeFinishFetchingAsync>d__81")]
public ValueTask SafeFinishFetchingAsync(int numberOfResponses, CancellationToken cancellationToken);
    protected IResponse ReadSingleResponse();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<ReadSingleResponseAsync>d__83")]
protected ValueTask`1<IResponse> ReadSingleResponseAsync(CancellationToken cancellationToken);
    protected virtual IResponse ReadSingleResponse(int operation);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<ReadSingleResponseAsync>d__85")]
protected virtual ValueTask`1<IResponse> ReadSingleResponseAsync(int operation, CancellationToken cancellationToken);
    private void DatabaseInfo(Byte[] items, Byte[] buffer, int bufferLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsDatabase/<DatabaseInfoAsync>d__87")]
private ValueTask DatabaseInfoAsync(Byte[] items, Byte[] buffer, int bufferLength, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version10.GdsEventManager : object {
    private bool _closing;
    private int _handle;
    private string _ipAddress;
    private int _portNumber;
    private int _timeout;
    private GdsDatabase _database;
    public GdsEventManager(int handle, string ipAddress, int portNumber, int timeout);
    public void Open();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsEventManager/<OpenAsync>d__8")]
public ValueTask OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsEventManager/<StartWaitingForEvents>d__9")]
public Task StartWaitingForEvents(RemoteEvent remoteEvent);
    public void Close();
    public ValueTask CloseAsync(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version10.GdsServiceManager : ServiceManagerBase {
    private GdsConnection _connection;
    private GdsDatabase _database;
    public bool UseUtf8ParameterBuffer { get; }
    public GdsConnection Connection { get; }
    public GdsDatabase Database { get; }
    public GdsServiceManager(GdsConnection connection);
    public virtual bool get_UseUtf8ParameterBuffer();
    public GdsConnection get_Connection();
    public GdsDatabase get_Database();
    public virtual void Attach(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsServiceManager/<AttachAsync>d__10")]
public virtual ValueTask AttachAsync(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey, CancellationToken cancellationToken);
    protected virtual void SendAttachToBuffer(ServiceParameterBufferBase spb, string service);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsServiceManager/<SendAttachToBufferAsync>d__12")]
protected virtual ValueTask SendAttachToBufferAsync(ServiceParameterBufferBase spb, string service, CancellationToken cancellationToken);
    protected virtual void ProcessAttachResponse(GenericResponse response);
    protected virtual ValueTask ProcessAttachResponseAsync(GenericResponse response, CancellationToken cancellationToken);
    public virtual void Detach();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsServiceManager/<DetachAsync>d__16")]
public virtual ValueTask DetachAsync(CancellationToken cancellationToken);
    public virtual void Start(ServiceParameterBufferBase spb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsServiceManager/<StartAsync>d__18")]
public virtual ValueTask StartAsync(ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    public virtual void Query(ServiceParameterBufferBase spb, int requestLength, Byte[] requestBuffer, int bufferLength, Byte[] buffer);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsServiceManager/<QueryAsync>d__20")]
public virtual ValueTask QueryAsync(ServiceParameterBufferBase spb, int requestLength, Byte[] requestBuffer, int bufferLength, Byte[] buffer, CancellationToken cancellationToken);
    public virtual ServiceParameterBufferBase CreateServiceParameterBuffer();
    protected virtual GdsDatabase CreateDatabase(GdsConnection connection);
    private void RewireWarningMessage();
    [CompilerGeneratedAttribute]
private void <RewireWarningMessage>b__23_0(IscException ex);
}
internal class FirebirdSql.Data.Client.Managed.Version10.GdsStatement : StatementBase {
    protected int _handle;
    private bool _disposed;
    protected GdsDatabase _database;
    private GdsTransaction _transaction;
    protected Descriptor _parameters;
    protected Descriptor _fields;
    protected bool _allRowsFetched;
    private Queue`1<DbValue[]> _rows;
    private int _fetchSize;
    public DatabaseBase Database { get; }
    public TransactionBase Transaction { get; public set; }
    public Descriptor Parameters { get; public set; }
    public Descriptor Fields { get; }
    public int FetchSize { get; public set; }
    public int Handle { get; }
    public GdsStatement(GdsDatabase database);
    public GdsStatement(GdsDatabase database, GdsTransaction transaction);
    public virtual DatabaseBase get_Database();
    public virtual TransactionBase get_Transaction();
    public virtual void set_Transaction(TransactionBase value);
    public virtual Descriptor get_Parameters();
    public virtual void set_Parameters(Descriptor value);
    public virtual Descriptor get_Fields();
    public virtual int get_FetchSize();
    public virtual void set_FetchSize(int value);
    public int get_Handle();
    public virtual void Dispose2();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<Dispose2Async>d__27")]
public virtual ValueTask Dispose2Async(CancellationToken cancellationToken);
    public virtual BlobBase CreateBlob();
    public virtual BlobBase CreateBlob(long blobId);
    public virtual ArrayBase CreateArray(ArrayDesc descriptor);
    public virtual ValueTask`1<ArrayBase> CreateArrayAsync(ArrayDesc descriptor, CancellationToken cancellationToken);
    public virtual ArrayBase CreateArray(string tableName, string fieldName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<CreateArrayAsync>d__33")]
public virtual ValueTask`1<ArrayBase> CreateArrayAsync(string tableName, string fieldName, CancellationToken cancellationToken);
    public virtual ArrayBase CreateArray(long handle, string tableName, string fieldName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<CreateArrayAsync>d__35")]
public virtual ValueTask`1<ArrayBase> CreateArrayAsync(long handle, string tableName, string fieldName, CancellationToken cancellationToken);
    public virtual BatchBase CreateBatch();
    public virtual BatchParameterBuffer CreateBatchParameterBuffer();
    public virtual void Prepare(string commandText);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<PrepareAsync>d__39")]
public virtual ValueTask PrepareAsync(string commandText, CancellationToken cancellationToken);
    public virtual void Execute(int timeout, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<ExecuteAsync>d__41")]
public virtual ValueTask ExecuteAsync(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public virtual DbValue[] Fetch();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<FetchAsync>d__43")]
public virtual ValueTask`1<DbValue[]> FetchAsync(CancellationToken cancellationToken);
    protected void SendPrepareToBuffer(string commandText);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<SendPrepareToBufferAsync>d__45")]
protected ValueTask SendPrepareToBufferAsync(string commandText, CancellationToken cancellationToken);
    protected void ProcessPrepareResponse(GenericResponse response);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<ProcessPrepareResponseAsync>d__47")]
protected ValueTask ProcessPrepareResponseAsync(GenericResponse response, CancellationToken cancellationToken);
    protected virtual Byte[] GetSqlInfo(Byte[] items, int bufferLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<GetSqlInfoAsync>d__49")]
protected virtual ValueTask`1<Byte[]> GetSqlInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    protected void DoInfoSqlPacket(Byte[] items, int bufferLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<DoInfoSqlPacketAsync>d__51")]
protected ValueTask DoInfoSqlPacketAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    protected void SendInfoSqlToBuffer(Byte[] items, int bufferLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<SendInfoSqlToBufferAsync>d__53")]
protected ValueTask SendInfoSqlToBufferAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    protected Byte[] ProcessInfoSqlResponse(GenericResponse response);
    protected ValueTask`1<Byte[]> ProcessInfoSqlResponseAsync(GenericResponse response, CancellationToken cancellationToken);
    protected virtual void Free(int option);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<FreeAsync>d__57")]
protected virtual ValueTask FreeAsync(int option, CancellationToken cancellationToken);
    protected bool FreeNotNeeded(int option);
    protected void DoFreePacket(int option);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<DoFreePacketAsync>d__60")]
protected ValueTask DoFreePacketAsync(int option, CancellationToken cancellationToken);
    protected void ProcessFreeResponse(IResponse response);
    protected ValueTask ProcessFreeResponseAsync(IResponse response, CancellationToken cancellationToken);
    protected void SendAllocateToBuffer();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<SendAllocateToBufferAsync>d__64")]
protected ValueTask SendAllocateToBufferAsync(CancellationToken cancellationToken);
    protected void ProcessAllocateResponse(GenericResponse response);
    protected ValueTask ProcessAllocateResponseAsync(GenericResponse response, CancellationToken cancellationToken);
    protected virtual void SendExecuteToBuffer(int timeout, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<SendExecuteToBufferAsync>d__68")]
protected virtual ValueTask SendExecuteToBufferAsync(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    protected void ProcessExecuteResponse(GenericResponse response);
    protected ValueTask ProcessExecuteResponseAsync(GenericResponse response, CancellationToken cancellationToken);
    protected void ProcessStoredProcedureExecuteResponse(SqlResponse response);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<ProcessStoredProcedureExecuteResponseAsync>d__72")]
protected ValueTask ProcessStoredProcedureExecuteResponseAsync(SqlResponse response, CancellationToken cancellationToken);
    protected virtual void TransactionUpdated(object sender, EventArgs e);
    protected Descriptor[] ParseSqlInfo(Byte[] info, Byte[] items, Descriptor[] rowDescs);
    protected ValueTask`1<Descriptor[]> ParseSqlInfoAsync(Byte[] info, Byte[] items, Descriptor[] rowDescs, CancellationToken cancellationToken);
    protected Descriptor[] ParseTruncSqlInfo(Byte[] info, Byte[] items, Descriptor[] rowDescs);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<ParseTruncSqlInfoAsync>d__77")]
protected ValueTask`1<Descriptor[]> ParseTruncSqlInfoAsync(Byte[] info, Byte[] items, Descriptor[] rowDescs, CancellationToken cancellationToken);
    protected virtual Byte[] WriteParameters();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<WriteParametersAsync>d__79")]
protected virtual ValueTask`1<Byte[]> WriteParametersAsync(CancellationToken cancellationToken);
    protected void WriteRawParameter(IXdrWriter xdr, DbField field);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<WriteRawParameterAsync>d__81")]
protected ValueTask WriteRawParameterAsync(IXdrWriter xdr, DbField field, CancellationToken cancellationToken);
    protected object ReadRawValue(IXdrReader xdr, DbField field);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<ReadRawValueAsync>d__83")]
protected ValueTask`1<object> ReadRawValueAsync(IXdrReader xdr, DbField field, CancellationToken cancellationToken);
    protected void Clear();
    protected void ClearAll();
    protected virtual DbValue[] ReadRow();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<ReadRowAsync>d__87")]
protected virtual ValueTask`1<DbValue[]> ReadRowAsync(CancellationToken cancellationToken);
    protected internal Byte[] GetParameterData(IDescriptorFiller descriptorFiller, int index);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsStatement/<GetParameterDataAsync>d__89")]
protected internal ValueTask`1<Byte[]> GetParameterDataAsync(IDescriptorFiller descriptorFiller, int index, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version10.GdsTransaction : TransactionBase {
    private int _handle;
    private bool _disposed;
    private GdsDatabase _database;
    public int Handle { get; }
    public GdsTransaction(GdsDatabase database);
    public virtual int get_Handle();
    public virtual void Dispose2();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<Dispose2Async>d__7")]
public virtual ValueTask Dispose2Async(CancellationToken cancellationToken);
    public virtual void BeginTransaction(TransactionParameterBuffer tpb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<BeginTransactionAsync>d__9")]
public virtual ValueTask BeginTransactionAsync(TransactionParameterBuffer tpb, CancellationToken cancellationToken);
    public virtual void Commit();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<CommitAsync>d__11")]
public virtual ValueTask CommitAsync(CancellationToken cancellationToken);
    public virtual void Rollback();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<RollbackAsync>d__13")]
public virtual ValueTask RollbackAsync(CancellationToken cancellationToken);
    public virtual void CommitRetaining();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<CommitRetainingAsync>d__15")]
public virtual ValueTask CommitRetainingAsync(CancellationToken cancellationToken);
    public virtual void RollbackRetaining();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<RollbackRetainingAsync>d__17")]
public virtual ValueTask RollbackRetainingAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<PrepareAsync>d__19")]
public virtual ValueTask PrepareAsync(CancellationToken cancellationToken);
    public virtual void Prepare(Byte[] buffer);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<PrepareAsync>d__21")]
public virtual ValueTask PrepareAsync(Byte[] buffer, CancellationToken cancellationToken);
    public virtual List`1<object> GetTransactionInfo(Byte[] items);
    public virtual ValueTask`1<List`1<object>> GetTransactionInfoAsync(Byte[] items, CancellationToken cancellationToken);
    public virtual List`1<object> GetTransactionInfo(Byte[] items, int bufferLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<GetTransactionInfoAsync>d__25")]
public virtual ValueTask`1<List`1<object>> GetTransactionInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    private void DatabaseInfo(Byte[] items, Byte[] buffer, int bufferLength);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version10.GdsTransaction/<DatabaseInfoAsync>d__27")]
private ValueTask DatabaseInfoAsync(Byte[] items, Byte[] buffer, int bufferLength, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version11.AuthResponse : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public AuthResponse(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
}
internal class FirebirdSql.Data.Client.Managed.Version11.GdsDatabase : GdsDatabase {
    private Queue`1<ValueTuple`2<Action`1<IResponse>, Func`3<IResponse, CancellationToken, ValueTask>>> _deferredPackets;
    public GdsDatabase(GdsConnection connection);
    public virtual StatementBase CreateStatement();
    public virtual StatementBase CreateStatement(TransactionBase transaction);
    public virtual void AttachWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsDatabase/<AttachWithTrustedAuthAsync>d__5")]
public virtual ValueTask AttachWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    protected virtual void SendTrustedAuthToBuffer(DatabaseParameterBufferBase dpb, Byte[] authData);
    protected virtual ValueTask SendTrustedAuthToBufferAsync(DatabaseParameterBufferBase dpb, Byte[] authData, CancellationToken cancellationToken);
    protected IResponse ProcessTrustedAuthResponse(SspiHelper sspiHelper, IResponse response);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsDatabase/<ProcessTrustedAuthResponseAsync>d__9")]
protected ValueTask`1<IResponse> ProcessTrustedAuthResponseAsync(SspiHelper sspiHelper, IResponse response, CancellationToken cancellationToken);
    public virtual void CreateDatabaseWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsDatabase/<CreateDatabaseWithTrustedAuthAsync>d__11")]
public virtual ValueTask CreateDatabaseWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void ReleaseObject(int op, int id);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsDatabase/<ReleaseObjectAsync>d__13")]
public virtual ValueTask ReleaseObjectAsync(int op, int id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsDatabase/<ReadOperationAsync>d__14")]
public virtual ValueTask`1<int> ReadOperationAsync(CancellationToken cancellationToken);
    public virtual int ReadOperation();
    public void AppendDeferredPacket(Action`1<IResponse> packet);
    public void AppendDeferredPacket(Func`3<IResponse, CancellationToken, ValueTask> packet);
    private void ProcessDeferredPackets();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsDatabase/<ProcessDeferredPacketsAsync>d__19")]
private ValueTask ProcessDeferredPacketsAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<int> <>n__0(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version11.GdsServiceManager : GdsServiceManager {
    public GdsServiceManager(GdsConnection connection);
    protected virtual GdsDatabase CreateDatabase(GdsConnection connection);
}
internal class FirebirdSql.Data.Client.Managed.Version11.GdsStatement : GdsStatement {
    public GdsStatement(GdsDatabase database);
    public GdsStatement(GdsDatabase database, GdsTransaction transaction);
    public virtual void Prepare(string commandText);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsStatement/<PrepareAsync>d__3")]
public virtual ValueTask PrepareAsync(string commandText, CancellationToken cancellationToken);
    public virtual void Execute(int timeout, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsStatement/<ExecuteAsync>d__5")]
public virtual ValueTask ExecuteAsync(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    protected virtual void Free(int option);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version11.GdsStatement/<FreeAsync>d__7")]
protected virtual ValueTask FreeAsync(int option, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version12.GdsDatabase : GdsDatabase {
    public bool UseUtf8ParameterBuffer { get; }
    public GdsDatabase(GdsConnection connection);
    public virtual bool get_UseUtf8ParameterBuffer();
    public virtual StatementBase CreateStatement();
    public virtual StatementBase CreateStatement(TransactionBase transaction);
    public virtual void CancelOperation(short kind);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version12.GdsDatabase/<CancelOperationAsync>d__6")]
public virtual ValueTask CancelOperationAsync(short kind, CancellationToken cancellationToken);
    protected void SendCancelOperationToBuffer(short kind);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version12.GdsDatabase/<SendCancelOperationToBufferAsync>d__8")]
protected ValueTask SendCancelOperationToBufferAsync(int kind, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version12.GdsServiceManager : GdsServiceManager {
    public GdsServiceManager(GdsConnection connection);
    protected virtual GdsDatabase CreateDatabase(GdsConnection connection);
}
internal class FirebirdSql.Data.Client.Managed.Version12.GdsStatement : GdsStatement {
    public GdsStatement(GdsDatabase database);
    public GdsStatement(GdsDatabase database, GdsTransaction transaction);
    public virtual void Execute(int timeout, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version12.GdsStatement/<ExecuteAsync>d__3")]
public virtual ValueTask ExecuteAsync(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version13.ContAuthResponse : object {
    [CompilerGeneratedAttribute]
private Byte[] <ServerData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AcceptPluginName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAuthenticated>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerKeys>k__BackingField;
    public Byte[] ServerData { get; }
    public string AcceptPluginName { get; }
    public bool IsAuthenticated { get; }
    public Byte[] ServerKeys { get; }
    public ContAuthResponse(Byte[] serverData, string acceptPluginName, bool isAuthenticated, Byte[] serverKeys);
    [CompilerGeneratedAttribute]
public Byte[] get_ServerData();
    [CompilerGeneratedAttribute]
public string get_AcceptPluginName();
    [CompilerGeneratedAttribute]
public bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public Byte[] get_ServerKeys();
}
internal class FirebirdSql.Data.Client.Managed.Version13.CryptKeyCallbackResponse : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public CryptKeyCallbackResponse(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
}
internal class FirebirdSql.Data.Client.Managed.Version13.GdsDatabase : GdsDatabase {
    public GdsDatabase(GdsConnection connection);
    public virtual void Attach(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsDatabase/<AttachAsync>d__2")]
public virtual ValueTask AttachAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    protected virtual void SendAttachToBuffer(DatabaseParameterBufferBase dpb, string database);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsDatabase/<SendAttachToBufferAsync>d__4")]
protected virtual ValueTask SendAttachToBufferAsync(DatabaseParameterBufferBase dpb, string database, CancellationToken cancellationToken);
    public virtual void CreateDatabase(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsDatabase/<CreateDatabaseAsync>d__6")]
public virtual ValueTask CreateDatabaseAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    protected virtual void SendCreateToBuffer(DatabaseParameterBufferBase dpb, string database);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsDatabase/<SendCreateToBufferAsync>d__8")]
protected virtual ValueTask SendCreateToBufferAsync(DatabaseParameterBufferBase dpb, string database, CancellationToken cancellationToken);
    public virtual void AttachWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public virtual ValueTask AttachWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void CreateDatabaseWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public virtual ValueTask CreateDatabaseWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    protected internal virtual IResponse ProcessCryptCallbackResponseIfNeeded(IResponse response, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsDatabase/<ProcessCryptCallbackResponseIfNeededAsync>d__14")]
protected internal virtual ValueTask`1<IResponse> ProcessCryptCallbackResponseIfNeededAsync(IResponse response, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual StatementBase CreateStatement();
    public virtual StatementBase CreateStatement(TransactionBase transaction);
    public virtual DatabaseParameterBufferBase CreateDatabaseParameterBuffer();
}
internal class FirebirdSql.Data.Client.Managed.Version13.GdsServiceManager : GdsServiceManager {
    public bool UseUtf8ParameterBuffer { get; }
    public GdsServiceManager(GdsConnection connection);
    public virtual bool get_UseUtf8ParameterBuffer();
    public virtual void Attach(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsServiceManager/<AttachAsync>d__4")]
public virtual ValueTask AttachAsync(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual ServiceParameterBufferBase CreateServiceParameterBuffer();
    protected virtual GdsDatabase CreateDatabase(GdsConnection connection);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(GenericResponse response, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version13.GdsStatement : GdsStatement {
    public GdsStatement(GdsDatabase database);
    public GdsStatement(GdsDatabase database, GdsTransaction transaction);
    protected virtual Byte[] WriteParameters();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsStatement/<WriteParametersAsync>d__3")]
protected virtual ValueTask`1<Byte[]> WriteParametersAsync(CancellationToken cancellationToken);
    protected virtual DbValue[] ReadRow();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version13.GdsStatement/<ReadRowAsync>d__5")]
protected virtual ValueTask`1<DbValue[]> ReadRowAsync(CancellationToken cancellationToken);
}
internal enum FirebirdSql.Data.Client.Managed.Version13.WireCryptOption : Enum {
    public int value__;
    public static WireCryptOption Disabled;
    public static WireCryptOption Enabled;
    public static WireCryptOption Required;
}
internal class FirebirdSql.Data.Client.Managed.Version15.CryptKeyCallbackResponse : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public Byte[] Data { get; }
    public int Size { get; }
    public CryptKeyCallbackResponse(Byte[] data, int size);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public int get_Size();
}
internal class FirebirdSql.Data.Client.Managed.Version15.GdsDatabase : GdsDatabase {
    public GdsDatabase(GdsConnection connection);
    protected internal virtual IResponse ProcessCryptCallbackResponseIfNeeded(IResponse response, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version15.GdsDatabase/<ProcessCryptCallbackResponseIfNeededAsync>d__2")]
protected internal virtual ValueTask`1<IResponse> ProcessCryptCallbackResponseIfNeededAsync(IResponse response, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual StatementBase CreateStatement();
    public virtual StatementBase CreateStatement(TransactionBase transaction);
}
internal class FirebirdSql.Data.Client.Managed.Version15.GdsServiceManager : GdsServiceManager {
    public GdsServiceManager(GdsConnection connection);
    protected virtual GdsDatabase CreateDatabase(GdsConnection connection);
}
internal class FirebirdSql.Data.Client.Managed.Version15.GdsStatement : GdsStatement {
    public GdsStatement(GdsDatabase database);
    public GdsStatement(GdsDatabase database, GdsTransaction transaction);
}
internal class FirebirdSql.Data.Client.Managed.Version16.BatchCompletionStateResponse : object {
    [CompilerGeneratedAttribute]
private short <StatementHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessedMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <UpdatedRecordsPerMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTuple`2[] <DetailedErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <AdditionalErrorsPerMessage>k__BackingField;
    public short StatementHandle { get; }
    public int ProcessedMessages { get; }
    public Int32[] UpdatedRecordsPerMessage { get; }
    public ValueTuple`2[] DetailedErrors { get; }
    public Int32[] AdditionalErrorsPerMessage { get; }
    public BatchCompletionStateResponse(short statementHandle, int processedMessages, Int32[] updatedRecordsPerMessage, ValueTuple`2[] detailedErrors, Int32[] errorsPerMessage);
    [CompilerGeneratedAttribute]
public short get_StatementHandle();
    [CompilerGeneratedAttribute]
public int get_ProcessedMessages();
    [CompilerGeneratedAttribute]
public Int32[] get_UpdatedRecordsPerMessage();
    [CompilerGeneratedAttribute]
public ValueTuple`2[] get_DetailedErrors();
    [CompilerGeneratedAttribute]
public Int32[] get_AdditionalErrorsPerMessage();
}
internal class FirebirdSql.Data.Client.Managed.Version16.GdsBatch : BatchBase {
    protected GdsStatement _statement;
    public StatementBase Statement { get; }
    public GdsDatabase Database { get; }
    public GdsBatch(GdsStatement statement);
    public virtual StatementBase get_Statement();
    public GdsDatabase get_Database();
    public virtual ExecuteResultItem[] Execute(int count, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version16.GdsBatch/<ExecuteAsync>d__7")]
public virtual ValueTask`1<ExecuteResultItem[]> ExecuteAsync(int count, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public virtual int ComputeBatchSize(int count, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version16.GdsBatch/<ComputeBatchSizeAsync>d__9")]
public virtual ValueTask`1<int> ComputeBatchSizeAsync(int count, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public virtual void Release();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version16.GdsBatch/<ReleaseAsync>d__11")]
public virtual ValueTask ReleaseAsync(CancellationToken cancellationToken);
    protected void ProcessReleaseResponse(IResponse response);
    protected ValueTask ProcessReleaseResponseAsync(IResponse response, CancellationToken cancellationToken);
    protected ExecuteResultItem[] BuildResult(BatchCompletionStateResponse response);
    protected Byte[][] GetParametersData(int count, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version16.GdsBatch/<GetParametersDataAsync>d__16")]
protected ValueTask`1<Byte[][]> GetParametersDataAsync(int count, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.Version16.GdsDatabase : GdsDatabase {
    public GdsDatabase(GdsConnection connection);
    protected internal virtual IResponse ProcessCryptCallbackResponseIfNeeded(IResponse response, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version16.GdsDatabase/<ProcessCryptCallbackResponseIfNeededAsync>d__2")]
protected internal virtual ValueTask`1<IResponse> ProcessCryptCallbackResponseIfNeededAsync(IResponse response, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual StatementBase CreateStatement();
    public virtual StatementBase CreateStatement(TransactionBase transaction);
}
internal class FirebirdSql.Data.Client.Managed.Version16.GdsServiceManager : GdsServiceManager {
    public GdsServiceManager(GdsConnection connection);
    protected virtual GdsDatabase CreateDatabase(GdsConnection connection);
}
internal class FirebirdSql.Data.Client.Managed.Version16.GdsStatement : GdsStatement {
    public GdsStatement(GdsDatabase database);
    public GdsStatement(GdsDatabase database, GdsTransaction transaction);
    protected virtual void SendExecuteToBuffer(int timeout, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.Version16.GdsStatement/<SendExecuteToBufferAsync>d__3")]
protected virtual ValueTask SendExecuteToBufferAsync(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public virtual BatchBase CreateBatch();
    public virtual BatchParameterBuffer CreateBatchParameterBuffer();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Managed.XdrReaderWriter : object {
    private IDataProvider _dataProvider;
    private Charset _charset;
    private Byte[] _smallBuffer;
    private static Byte[] PadArray;
    private static Byte[] FillArray;
    public XdrReaderWriter(IDataProvider dataProvider, Charset charset);
    public XdrReaderWriter(IDataProvider dataProvider);
    private static XdrReaderWriter();
    public sealed virtual Byte[] ReadBytes(Byte[] buffer, int count);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadBytesAsync>d__6")]
public sealed virtual ValueTask`1<Byte[]> ReadBytesAsync(Byte[] buffer, int count, CancellationToken cancellationToken);
    public sealed virtual Byte[] ReadOpaque(int length);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadOpaqueAsync>d__8")]
public sealed virtual ValueTask`1<Byte[]> ReadOpaqueAsync(int length, CancellationToken cancellationToken);
    public sealed virtual Byte[] ReadBuffer();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadBufferAsync>d__10")]
public sealed virtual ValueTask`1<Byte[]> ReadBufferAsync(CancellationToken cancellationToken);
    public sealed virtual string ReadString();
    public sealed virtual ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    public sealed virtual string ReadString(int length);
    public sealed virtual ValueTask`1<string> ReadStringAsync(int length, CancellationToken cancellationToken);
    public sealed virtual string ReadString(Charset charset);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadStringAsync>d__16")]
public sealed virtual ValueTask`1<string> ReadStringAsync(Charset charset, CancellationToken cancellationToken);
    public sealed virtual string ReadString(Charset charset, int length);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadStringAsync>d__18")]
public sealed virtual ValueTask`1<string> ReadStringAsync(Charset charset, int length, CancellationToken cancellationToken);
    public sealed virtual short ReadInt16();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadInt16Async>d__20")]
public sealed virtual ValueTask`1<short> ReadInt16Async(CancellationToken cancellationToken);
    public sealed virtual int ReadInt32();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadInt32Async>d__22")]
public sealed virtual ValueTask`1<int> ReadInt32Async(CancellationToken cancellationToken);
    public sealed virtual long ReadInt64();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadInt64Async>d__24")]
public sealed virtual ValueTask`1<long> ReadInt64Async(CancellationToken cancellationToken);
    public sealed virtual Guid ReadGuid(int sqlType);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadGuidAsync>d__26")]
public sealed virtual ValueTask`1<Guid> ReadGuidAsync(int sqlType, CancellationToken cancellationToken);
    public sealed virtual float ReadSingle();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadSingleAsync>d__28")]
public sealed virtual ValueTask`1<float> ReadSingleAsync(CancellationToken cancellationToken);
    public sealed virtual double ReadDouble();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadDoubleAsync>d__30")]
public sealed virtual ValueTask`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    public sealed virtual DateTime ReadDateTime();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadDateTimeAsync>d__32")]
public sealed virtual ValueTask`1<DateTime> ReadDateTimeAsync(CancellationToken cancellationToken);
    public sealed virtual DateTime ReadDate();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadDateAsync>d__34")]
public sealed virtual ValueTask`1<DateTime> ReadDateAsync(CancellationToken cancellationToken);
    public sealed virtual TimeSpan ReadTime();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadTimeAsync>d__36")]
public sealed virtual ValueTask`1<TimeSpan> ReadTimeAsync(CancellationToken cancellationToken);
    public sealed virtual decimal ReadDecimal(int type, int scale);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadDecimalAsync>d__38")]
public sealed virtual ValueTask`1<decimal> ReadDecimalAsync(int type, int scale, CancellationToken cancellationToken);
    public sealed virtual bool ReadBoolean();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadBooleanAsync>d__40")]
public sealed virtual ValueTask`1<bool> ReadBooleanAsync(CancellationToken cancellationToken);
    public sealed virtual FbZonedDateTime ReadZonedDateTime(bool isExtended);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadZonedDateTimeAsync>d__42")]
public sealed virtual ValueTask`1<FbZonedDateTime> ReadZonedDateTimeAsync(bool isExtended, CancellationToken cancellationToken);
    public sealed virtual FbZonedTime ReadZonedTime(bool isExtended);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadZonedTimeAsync>d__44")]
public sealed virtual ValueTask`1<FbZonedTime> ReadZonedTimeAsync(bool isExtended, CancellationToken cancellationToken);
    public sealed virtual FbDecFloat ReadDec16();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadDec16Async>d__46")]
public sealed virtual ValueTask`1<FbDecFloat> ReadDec16Async(CancellationToken cancellationToken);
    public sealed virtual FbDecFloat ReadDec34();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadDec34Async>d__48")]
public sealed virtual ValueTask`1<FbDecFloat> ReadDec34Async(CancellationToken cancellationToken);
    public sealed virtual BigInteger ReadInt128();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadInt128Async>d__50")]
public sealed virtual ValueTask`1<BigInteger> ReadInt128Async(CancellationToken cancellationToken);
    public sealed virtual IscException ReadStatusVector();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadStatusVectorAsync>d__52")]
public sealed virtual ValueTask`1<IscException> ReadStatusVectorAsync(CancellationToken cancellationToken);
    public sealed virtual int ReadOperation();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadOperationAsync>d__54")]
public sealed virtual ValueTask`1<int> ReadOperationAsync(CancellationToken cancellationToken);
    public sealed virtual void Flush();
    public sealed virtual ValueTask FlushAsync(CancellationToken cancellationToken);
    public sealed virtual void WriteBytes(Byte[] buffer, int count);
    public sealed virtual ValueTask WriteBytesAsync(Byte[] buffer, int count, CancellationToken cancellationToken);
    public sealed virtual void WriteOpaque(Byte[] buffer);
    public sealed virtual ValueTask WriteOpaqueAsync(Byte[] buffer, CancellationToken cancellationToken);
    public sealed virtual void WriteOpaque(Byte[] buffer, int length);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<WriteOpaqueAsync>d__62")]
public sealed virtual ValueTask WriteOpaqueAsync(Byte[] buffer, int length, CancellationToken cancellationToken);
    public sealed virtual void WriteBuffer(Byte[] buffer);
    public sealed virtual ValueTask WriteBufferAsync(Byte[] buffer, CancellationToken cancellationToken);
    public sealed virtual void WriteBuffer(Byte[] buffer, int length);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<WriteBufferAsync>d__66")]
public sealed virtual ValueTask WriteBufferAsync(Byte[] buffer, int length, CancellationToken cancellationToken);
    public sealed virtual void WriteBlobBuffer(Byte[] buffer);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<WriteBlobBufferAsync>d__68")]
public sealed virtual ValueTask WriteBlobBufferAsync(Byte[] buffer, CancellationToken cancellationToken);
    public sealed virtual void WriteTyped(int type, Byte[] buffer);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<WriteTypedAsync>d__70")]
public sealed virtual ValueTask WriteTypedAsync(int type, Byte[] buffer, CancellationToken cancellationToken);
    public sealed virtual void Write(string value);
    public sealed virtual ValueTask WriteAsync(string value, CancellationToken cancellationToken);
    public sealed virtual void Write(short value);
    public sealed virtual ValueTask WriteAsync(short value, CancellationToken cancellationToken);
    public sealed virtual void Write(int value);
    public sealed virtual ValueTask WriteAsync(int value, CancellationToken cancellationToken);
    public sealed virtual void Write(long value);
    public sealed virtual ValueTask WriteAsync(long value, CancellationToken cancellationToken);
    public sealed virtual void Write(float value);
    public sealed virtual ValueTask WriteAsync(float value, CancellationToken cancellationToken);
    public sealed virtual void Write(double value);
    public sealed virtual ValueTask WriteAsync(double value, CancellationToken cancellationToken);
    public sealed virtual void Write(decimal value, int type, int scale);
    public sealed virtual ValueTask WriteAsync(decimal value, int type, int scale, CancellationToken cancellationToken);
    public sealed virtual void Write(bool value);
    public sealed virtual ValueTask WriteAsync(bool value, CancellationToken cancellationToken);
    public sealed virtual void Write(DateTime value);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<WriteAsync>d__88")]
public sealed virtual ValueTask WriteAsync(DateTime value, CancellationToken cancellationToken);
    public sealed virtual void Write(Guid value, int sqlType);
    public sealed virtual ValueTask WriteAsync(Guid value, int sqlType, CancellationToken cancellationToken);
    public sealed virtual void Write(FbDecFloat value, int size);
    public sealed virtual ValueTask WriteAsync(FbDecFloat value, int size, CancellationToken cancellationToken);
    public sealed virtual void Write(BigInteger value);
    public sealed virtual ValueTask WriteAsync(BigInteger value, CancellationToken cancellationToken);
    public sealed virtual void WriteDate(DateTime value);
    public sealed virtual ValueTask WriteDateAsync(DateTime value, CancellationToken cancellationToken);
    public sealed virtual void WriteTime(TimeSpan value);
    public sealed virtual ValueTask WriteTimeAsync(TimeSpan value, CancellationToken cancellationToken);
    private void WritePad(int length);
    private ValueTask WritePadAsync(int length, CancellationToken cancellationToken);
    private void ReadPad(int length);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Managed.XdrReaderWriter/<ReadPadAsync>d__103")]
private ValueTask ReadPadAsync(int length, CancellationToken cancellationToken);
    private void WriteFill(int length);
    private ValueTask WriteFillAsync(int length, CancellationToken cancellationToken);
}
internal static class FirebirdSql.Data.Client.Native.FbClientFactory : object {
    private static string DefaultDllName;
    private static Dictionary`2<string, IFbClient> cache;
    private static ReaderWriterLockSlim cacheLock;
    private static HashSet`1<Type> injectionTypes;
    private static FbClientFactory();
    public static IFbClient Create(string dllName);
    private static IFbClient BuildFbClient(string dllName);
    private static void GenerateMethod(TypeBuilder tb, MethodInfo mi, string dllName);
    private static void EmitClientInjectionToFirebirdHandleOjects(Type returnType, List`1<ParameterInfo> pis, ILGenerator il);
    private static void EmitLdarg(ILGenerator il, int i);
    private static IFbClient CreateInstance(TypeBuilder tb);
    private static TypeBuilder CreateTypeBuilder(string baseName);
    private static string SanitizeBaseName(string baseName);
}
internal class FirebirdSql.Data.Client.Native.FesArray : ArrayBase {
    private long _handle;
    private FesDatabase _database;
    private FesTransaction _transaction;
    private IntPtr[] _statusVector;
    public long Handle { get; public set; }
    public DatabaseBase Database { get; public set; }
    public TransactionBase Transaction { get; public set; }
    public FesArray(ArrayDesc descriptor);
    public FesArray(FesDatabase database, FesTransaction transaction, string tableName, string fieldName);
    public FesArray(FesDatabase database, FesTransaction transaction, long handle, string tableName, string fieldName);
    public virtual long get_Handle();
    public virtual void set_Handle(long value);
    public virtual DatabaseBase get_Database();
    public virtual void set_Database(DatabaseBase value);
    public virtual TransactionBase get_Transaction();
    public virtual void set_Transaction(TransactionBase value);
    public virtual Byte[] GetSlice(int sliceLength);
    public virtual ValueTask`1<Byte[]> GetSliceAsync(int sliceLength, CancellationToken cancellationToken);
    public virtual void PutSlice(Array sourceArray, int sliceLength);
    public virtual ValueTask PutSliceAsync(Array sourceArray, int sliceLength, CancellationToken cancellationToken);
    protected virtual Array DecodeSlice(Byte[] slice);
    protected virtual ValueTask`1<Array> DecodeSliceAsync(Byte[] slice, CancellationToken cancellationToken);
    private void ClearStatusVector();
    private Byte[] EncodeSlice(ArrayDesc desc, Array sourceArray, int length);
}
internal class FirebirdSql.Data.Client.Native.FesBlob : BlobBase {
    private FesDatabase _database;
    private IntPtr[] _statusVector;
    private BlobHandle _blobHandle;
    public DatabaseBase Database { get; }
    public int Handle { get; }
    public FesBlob(FesDatabase database, FesTransaction transaction);
    public FesBlob(FesDatabase database, FesTransaction transaction, long blobId);
    public virtual DatabaseBase get_Database();
    public virtual int get_Handle();
    protected virtual void Create();
    protected virtual ValueTask CreateAsync(CancellationToken cancellationToken);
    protected virtual void Open();
    protected virtual ValueTask OpenAsync(CancellationToken cancellationToken);
    protected virtual void GetSegment(Stream stream);
    protected virtual ValueTask GetSegmentAsync(Stream stream, CancellationToken cancellationToken);
    protected virtual void PutSegment(Byte[] buffer);
    protected virtual ValueTask PutSegmentAsync(Byte[] buffer, CancellationToken cancellationToken);
    protected virtual void Seek(int position);
    protected virtual ValueTask SeekAsync(int position, CancellationToken cancellationToken);
    protected virtual void Close();
    protected virtual ValueTask CloseAsync(CancellationToken cancellationToken);
    protected virtual void Cancel();
    protected virtual ValueTask CancelAsync(CancellationToken cancellationToken);
    private void ClearStatusVector();
}
internal class FirebirdSql.Data.Client.Native.FesConnection : object {
    public static Version GetClientVersion(IFbClient fbClient);
}
internal class FirebirdSql.Data.Client.Native.FesDatabase : DatabaseBase {
    private static Version Version25;
    private IFbClient _fbClient;
    private Version _fbClientVersion;
    private DatabaseHandle _handle;
    private IntPtr[] _statusVector;
    public bool UseUtf8ParameterBuffer { get; }
    public int Handle { get; }
    public bool HasRemoteEventSupport { get; }
    public bool ConnectionBroken { get; }
    public IFbClient FbClient { get; }
    public Version FbClientVersion { get; }
    public DatabaseHandle HandlePtr { get; }
    public FesDatabase(string dllName, Charset charset, int packetSize, short dialect);
    private static FesDatabase();
    public virtual bool get_UseUtf8ParameterBuffer();
    public virtual int get_Handle();
    public virtual bool get_HasRemoteEventSupport();
    public virtual bool get_ConnectionBroken();
    public IFbClient get_FbClient();
    public Version get_FbClientVersion();
    public DatabaseHandle get_HandlePtr();
    public virtual void CreateDatabase(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public virtual ValueTask CreateDatabaseAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void CreateDatabaseWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public virtual ValueTask CreateDatabaseWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void DropDatabase();
    public virtual ValueTask DropDatabaseAsync(CancellationToken cancellationToken);
    public virtual void CloseEventManager();
    public virtual ValueTask CloseEventManagerAsync(CancellationToken cancellationToken);
    public virtual void QueueEvents(RemoteEvent events);
    public virtual ValueTask QueueEventsAsync(RemoteEvent events, CancellationToken cancellationToken);
    public virtual void CancelEvents(RemoteEvent events);
    public virtual ValueTask CancelEventsAsync(RemoteEvent events, CancellationToken cancellationToken);
    public virtual void Attach(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesDatabase/<AttachAsync>d__33")]
public virtual ValueTask AttachAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void AttachWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public virtual ValueTask AttachWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void Detach();
    public virtual ValueTask DetachAsync(CancellationToken cancellationToken);
    public virtual TransactionBase BeginTransaction(TransactionParameterBuffer tpb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesDatabase/<BeginTransactionAsync>d__39")]
public virtual ValueTask`1<TransactionBase> BeginTransactionAsync(TransactionParameterBuffer tpb, CancellationToken cancellationToken);
    public virtual void CancelOperation(short kind);
    public virtual ValueTask CancelOperationAsync(short kind, CancellationToken cancellationToken);
    public virtual StatementBase CreateStatement();
    public virtual StatementBase CreateStatement(TransactionBase transaction);
    public virtual DatabaseParameterBufferBase CreateDatabaseParameterBuffer();
    public virtual EventParameterBuffer CreateEventParameterBuffer();
    public virtual TransactionParameterBuffer CreateTransactionParameterBuffer();
    public virtual List`1<object> GetDatabaseInfo(Byte[] items);
    public virtual ValueTask`1<List`1<object>> GetDatabaseInfoAsync(Byte[] items, CancellationToken cancellationToken);
    public virtual List`1<object> GetDatabaseInfo(Byte[] items, int bufferLength);
    public virtual ValueTask`1<List`1<object>> GetDatabaseInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    internal void ProcessStatusVector(IntPtr[] statusVector);
    private void DatabaseInfo(Byte[] items, Byte[] buffer, int bufferLength);
    private void ProcessStatusVector();
    private void ProcessStatusVector(Charset charset);
    internal static void CheckCryptKeyForSupport(Byte[] cryptKey);
}
internal class FirebirdSql.Data.Client.Native.FesServiceManager : ServiceManagerBase {
    private static Version Version30;
    private IFbClient _fbClient;
    private Version _fbClientVersion;
    private IntPtr[] _statusVector;
    public bool UseUtf8ParameterBuffer { get; }
    public FesServiceManager(string dllName, Charset charset);
    private static FesServiceManager();
    public virtual bool get_UseUtf8ParameterBuffer();
    public virtual void Attach(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey);
    public virtual ValueTask AttachAsync(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey, CancellationToken cancellationToken);
    public virtual void Detach();
    public virtual ValueTask DetachAsync(CancellationToken cancellationToken);
    public virtual void Start(ServiceParameterBufferBase spb);
    public virtual ValueTask StartAsync(ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    public virtual void Query(ServiceParameterBufferBase spb, int requestLength, Byte[] requestBuffer, int bufferLength, Byte[] buffer);
    public virtual ValueTask QueryAsync(ServiceParameterBufferBase spb, int requestLength, Byte[] requestBuffer, int bufferLength, Byte[] buffer, CancellationToken cancellationToken);
    public virtual ServiceParameterBufferBase CreateServiceParameterBuffer();
    private void ProcessStatusVector();
    private void ProcessStatusVector(Charset charset);
}
internal class FirebirdSql.Data.Client.Native.FesStatement : StatementBase {
    private StatementHandle _handle;
    private bool _disposed;
    private FesDatabase _database;
    private FesTransaction _transaction;
    private Descriptor _parameters;
    private Descriptor _fields;
    private bool _allRowsFetched;
    private IntPtr[] _statusVector;
    private IntPtr _fetchSqlDa;
    public DatabaseBase Database { get; }
    public TransactionBase Transaction { get; public set; }
    public Descriptor Parameters { get; public set; }
    public Descriptor Fields { get; }
    public int FetchSize { get; public set; }
    public FesStatement(FesDatabase database);
    public FesStatement(FesDatabase database, FesTransaction transaction);
    public virtual DatabaseBase get_Database();
    public virtual TransactionBase get_Transaction();
    public virtual void set_Transaction(TransactionBase value);
    public virtual Descriptor get_Parameters();
    public virtual void set_Parameters(Descriptor value);
    public virtual Descriptor get_Fields();
    public virtual int get_FetchSize();
    public virtual void set_FetchSize(int value);
    public virtual void Dispose2();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesStatement/<Dispose2Async>d__25")]
public virtual ValueTask Dispose2Async(CancellationToken cancellationToken);
    public virtual BlobBase CreateBlob();
    public virtual BlobBase CreateBlob(long blobId);
    public virtual ArrayBase CreateArray(ArrayDesc descriptor);
    public virtual ValueTask`1<ArrayBase> CreateArrayAsync(ArrayDesc descriptor, CancellationToken cancellationToken);
    public virtual ArrayBase CreateArray(string tableName, string fieldName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesStatement/<CreateArrayAsync>d__31")]
public virtual ValueTask`1<ArrayBase> CreateArrayAsync(string tableName, string fieldName, CancellationToken cancellationToken);
    public virtual ArrayBase CreateArray(long handle, string tableName, string fieldName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesStatement/<CreateArrayAsync>d__33")]
public virtual ValueTask`1<ArrayBase> CreateArrayAsync(long handle, string tableName, string fieldName, CancellationToken cancellationToken);
    public virtual BatchBase CreateBatch();
    public virtual BatchParameterBuffer CreateBatchParameterBuffer();
    public virtual void Release();
    public virtual ValueTask ReleaseAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public virtual ValueTask CloseAsync(CancellationToken cancellationToken);
    public virtual void Prepare(string commandText);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesStatement/<PrepareAsync>d__41")]
public virtual ValueTask PrepareAsync(string commandText, CancellationToken cancellationToken);
    public virtual void Execute(int timeout, IDescriptorFiller descriptorFiller);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesStatement/<ExecuteAsync>d__43")]
public virtual ValueTask ExecuteAsync(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public virtual DbValue[] Fetch();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesStatement/<FetchAsync>d__45")]
public virtual ValueTask`1<DbValue[]> FetchAsync(CancellationToken cancellationToken);
    protected virtual void Free(int option);
    protected virtual ValueTask FreeAsync(int option, CancellationToken cancellationToken);
    protected virtual void TransactionUpdated(object sender, EventArgs e);
    protected virtual Byte[] GetSqlInfo(Byte[] items, int bufferLength);
    protected virtual ValueTask`1<Byte[]> GetSqlInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    private void ClearStatusVector();
    private void Clear();
    private void ClearAll();
    private void Allocate();
    private void Describe();
    private void DescribeParameters();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Client.Native.FesTransaction : TransactionBase {
    private TransactionHandle _handle;
    private FesDatabase _database;
    private bool _disposed;
    private IntPtr[] _statusVector;
    public int Handle { get; }
    public TransactionHandle HandlePtr { get; }
    public FesTransaction(FesDatabase database);
    public virtual int get_Handle();
    public TransactionHandle get_HandlePtr();
    public virtual void Dispose2();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Client.Native.FesTransaction/<Dispose2Async>d__11")]
public virtual ValueTask Dispose2Async(CancellationToken cancellationToken);
    public virtual void BeginTransaction(TransactionParameterBuffer tpb);
    public virtual ValueTask BeginTransactionAsync(TransactionParameterBuffer tpb, CancellationToken cancellationToken);
    public virtual void Commit();
    public virtual ValueTask CommitAsync(CancellationToken cancellationToken);
    public virtual void Rollback();
    public virtual ValueTask RollbackAsync(CancellationToken cancellationToken);
    public virtual void CommitRetaining();
    public virtual ValueTask CommitRetainingAsync(CancellationToken cancellationToken);
    public virtual void RollbackRetaining();
    public virtual ValueTask RollbackRetainingAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    public virtual ValueTask PrepareAsync(CancellationToken cancellationToken);
    public virtual void Prepare(Byte[] buffer);
    public virtual ValueTask PrepareAsync(Byte[] buffer, CancellationToken cancellationToken);
    public virtual List`1<object> GetTransactionInfo(Byte[] items);
    public virtual ValueTask`1<List`1<object>> GetTransactionInfoAsync(Byte[] items, CancellationToken cancellationToken);
    public virtual List`1<object> GetTransactionInfo(Byte[] items, int bufferLength);
    public virtual ValueTask`1<List`1<object>> GetTransactionInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    private void TransactionInfo(Byte[] items, Byte[] buffer, int bufferLength);
    private void ClearStatusVector();
    private void ProcessStatusVector();
    private void ProcessStatusVector(Charset charset);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Client.Native.Handles.BlobHandle : FirebirdHandle {
    protected virtual bool ReleaseHandle();
}
public class FirebirdSql.Data.Client.Native.Handles.DatabaseHandle : FirebirdHandle {
    protected virtual bool ReleaseHandle();
}
public abstract class FirebirdSql.Data.Client.Native.Handles.FirebirdHandle : SafeHandle {
    private IFbClient _fbClient;
    public IFbClient FbClient { get; }
    public bool IsInvalid { get; }
    public sealed virtual void SetClient(IFbClient fbClient);
    public IFbClient get_FbClient();
    public virtual bool get_IsInvalid();
}
public interface FirebirdSql.Data.Client.Native.Handles.IFirebirdHandle {
    public abstract virtual void SetClient(IFbClient fbClient);
}
public class FirebirdSql.Data.Client.Native.Handles.StatementHandle : FirebirdHandle {
    protected virtual bool ReleaseHandle();
}
public class FirebirdSql.Data.Client.Native.Handles.TransactionHandle : FirebirdHandle {
    protected virtual bool ReleaseHandle();
}
public interface FirebirdSql.Data.Client.Native.IFbClient {
    public abstract virtual IntPtr isc_array_get_slice(IntPtr[] statusVector, DatabaseHandle& dbHandle, TransactionHandle& trHandle, Int64& arrayId, IntPtr desc, Byte[] destArray, Int32& sliceLength);
    public abstract virtual IntPtr isc_array_put_slice(IntPtr[] statusVector, DatabaseHandle& dbHandle, TransactionHandle& trHandle, Int64& arrayId, IntPtr desc, Byte[] sourceArray, Int32& sliceLength);
    public abstract virtual IntPtr isc_create_blob2(IntPtr[] statusVector, DatabaseHandle& dbHandle, TransactionHandle& trHandle, BlobHandle& blobHandle, Int64& blobId, short bpbLength, Byte[] bpbAddress);
    public abstract virtual IntPtr isc_open_blob2(IntPtr[] statusVector, DatabaseHandle& dbHandle, TransactionHandle& trHandle, BlobHandle& blobHandle, Int64& blobId, short bpbLength, Byte[] bpbAddress);
    public abstract virtual IntPtr isc_get_segment(IntPtr[] statusVector, BlobHandle& blobHandle, Int16& actualSegLength, short segBufferLength, Byte[] segBuffer);
    public abstract virtual IntPtr isc_put_segment(IntPtr[] statusVector, BlobHandle& blobHandle, short segBufferLength, Byte[] segBuffer);
    public abstract virtual IntPtr isc_cancel_blob(IntPtr[] statusVector, BlobHandle& blobHandle);
    public abstract virtual IntPtr isc_close_blob(IntPtr[] statusVector, BlobHandle& blobHandle);
    public abstract virtual IntPtr isc_attach_database(IntPtr[] statusVector, short dbNameLength, Byte[] dbName, DatabaseHandle& dbHandle, short parmBufferLength, Byte[] parmBuffer);
    public abstract virtual IntPtr isc_detach_database(IntPtr[] statusVector, DatabaseHandle& dbHandle);
    public abstract virtual IntPtr isc_database_info(IntPtr[] statusVector, DatabaseHandle& dbHandle, short itemListBufferLength, Byte[] itemListBuffer, short resultBufferLength, Byte[] resultBuffer);
    public abstract virtual IntPtr isc_create_database(IntPtr[] statusVector, short dbNameLength, Byte[] dbName, DatabaseHandle& dbHandle, short parmBufferLength, Byte[] parmBuffer, short dbType);
    public abstract virtual IntPtr isc_drop_database(IntPtr[] statusVector, DatabaseHandle& dbHandle);
    public abstract virtual IntPtr isc_start_multiple(IntPtr[] statusVector, TransactionHandle& trHandle, short dbHandleCount, IntPtr tebVectorAddress);
    public abstract virtual IntPtr isc_commit_transaction(IntPtr[] statusVector, TransactionHandle& trHandle);
    public abstract virtual IntPtr isc_commit_retaining(IntPtr[] statusVector, TransactionHandle& trHandle);
    public abstract virtual IntPtr isc_rollback_transaction(IntPtr[] statusVector, TransactionHandle& trHandle);
    public abstract virtual IntPtr isc_rollback_retaining(IntPtr[] statusVector, TransactionHandle& trHandle);
    public abstract virtual IntPtr fb_shutdown(UInt32 timeout, int reason);
    public abstract virtual IntPtr fb_cancel_operation(IntPtr[] statusVector, DatabaseHandle& dbHandle, ushort option);
    public abstract virtual IntPtr isc_dsql_allocate_statement(IntPtr[] statusVector, DatabaseHandle& dbHandle, StatementHandle& stmtHandle);
    public abstract virtual IntPtr isc_dsql_describe(IntPtr[] statusVector, StatementHandle& stmtHandle, short daVersion, IntPtr xsqlda);
    public abstract virtual IntPtr isc_dsql_describe_bind(IntPtr[] statusVector, StatementHandle& stmtHandle, short daVersion, IntPtr xsqlda);
    public abstract virtual IntPtr isc_dsql_prepare(IntPtr[] statusVector, TransactionHandle& trHandle, StatementHandle& stmtHandle, short length, Byte[] statement, short dialect, IntPtr xsqlda);
    public abstract virtual IntPtr isc_dsql_execute(IntPtr[] statusVector, TransactionHandle& trHandle, StatementHandle& stmtHandle, short daVersion, IntPtr xsqlda);
    public abstract virtual IntPtr isc_dsql_execute2(IntPtr[] statusVector, TransactionHandle& trHandle, StatementHandle& stmtHandle, short da_version, IntPtr inXsqlda, IntPtr outXsqlda);
    public abstract virtual IntPtr isc_dsql_fetch(IntPtr[] statusVector, StatementHandle& stmtHandle, short daVersion, IntPtr xsqlda);
    public abstract virtual IntPtr isc_dsql_free_statement(IntPtr[] statusVector, StatementHandle& stmtHandle, short option);
    public abstract virtual IntPtr isc_dsql_sql_info(IntPtr[] statusVector, StatementHandle& stmtHandle, short itemsLength, Byte[] items, short bufferLength, Byte[] buffer);
    public abstract virtual IntPtr isc_service_attach(IntPtr[] statusVector, short serviceLength, string service, Int32& svcHandle, short spbLength, Byte[] spb);
    public abstract virtual IntPtr isc_service_start(IntPtr[] statusVector, Int32& svcHandle, Int32& reserved, short spbLength, Byte[] spb);
    public abstract virtual IntPtr isc_service_detach(IntPtr[] statusVector, Int32& svcHandle);
    public abstract virtual IntPtr isc_service_query(IntPtr[] statusVector, Int32& svcHandle, Int32& reserved, short sendSpbLength, Byte[] sendSpb, short requestSpbLength, Byte[] requestSpb, short bufferLength, Byte[] buffer);
    public abstract virtual IntPtr fb_dsql_set_timeout(IntPtr[] statusVector, StatementHandle& stmtHandle, UInt32 timeout);
    public abstract virtual void isc_get_client_version(StringBuilder version);
    public abstract virtual IntPtr isc_transaction_info(IntPtr[] statusVector, TransactionHandle& trHandle, short itemListBufferLength, Byte[] itemListBuffer, short resultBufferLength, Byte[] resultBuffer);
}
internal class FirebirdSql.Data.Client.Native.Marshalers.ArrayBoundMarshal : ValueType {
    public short LowerBound;
    public short UpperBound;
}
internal class FirebirdSql.Data.Client.Native.Marshalers.ArrayDescMarshal : ValueType {
    public byte DataType;
    public byte Scale;
    public short Length;
    public string FieldName;
    public string RelationName;
    public short Dimensions;
    public short Flags;
    public static int ComputeLength(int n);
}
internal static class FirebirdSql.Data.Client.Native.Marshalers.ArrayDescMarshaler : object {
    public static void CleanUpNativeData(IntPtr& pNativeData);
    public static IntPtr MarshalManagedToNative(ArrayDesc descriptor);
    public static IntPtr MarshalManagedToNative(ArrayDescMarshal arrayDesc, ArrayBoundMarshal[] arrayBounds);
}
internal class FirebirdSql.Data.Client.Native.Marshalers.XSQLDA : ValueType {
    public short version;
    public string sqldaid;
    public int sqldabc;
    public short sqln;
    public short sqld;
}
internal static class FirebirdSql.Data.Client.Native.Marshalers.XsqldaMarshaler : object {
    private static int SizeOfXSQLDA;
    private static int SizeOfXSQLVAR;
    private static XsqldaMarshaler();
    public static void CleanUpNativeData(IntPtr& pNativeData);
    public static IntPtr MarshalManagedToNative(Charset charset, Descriptor descriptor);
    public static IntPtr MarshalManagedToNative(XSQLDA xsqlda, XSQLVAR[] xsqlvar);
    public static Descriptor MarshalNativeToManaged(Charset charset, IntPtr pNativeData);
    public static Descriptor MarshalNativeToManaged(Charset charset, IntPtr pNativeData, bool fetching);
    private static void MarshalXSQLVARNativeToManaged(IntPtr ptr, XSQLVAR xsqlvar, bool onlyPointers);
    private static int ComputeLength(int n);
    private static Byte[] GetBytes(XSQLVAR xsqlvar);
    private static Byte[] GetStringBuffer(Charset charset, string value);
    private static string GetString(Charset charset, Byte[] buffer);
    private static string GetString(Charset charset, Byte[] buffer, short bufferLength);
}
internal class FirebirdSql.Data.Client.Native.Marshalers.XSQLVAR : object {
    public short sqltype;
    public short sqlscale;
    public short sqlsubtype;
    public short sqllen;
    public IntPtr sqldata;
    public IntPtr sqlind;
    public short sqlname_length;
    public Byte[] sqlname;
    public short relname_length;
    public Byte[] relname;
    public short ownername_length;
    public Byte[] ownername;
    public short aliasname_length;
    public Byte[] aliasname;
}
internal static class FirebirdSql.Data.Client.Native.StatusVectorHelper : object {
    public static void ProcessStatusVector(IntPtr[] statusVector, Charset charset, Action`1<IscException> warningMessage);
    public static void ClearStatusVector(IntPtr[] statusVector);
    public static IscException ParseStatusVector(IntPtr[] statusVector, Charset charset);
    private static Byte[] ReadStringData(IntPtr ptr);
}
internal abstract class FirebirdSql.Data.Common.ArrayBase : object {
    private ArrayDesc _descriptor;
    private string _tableName;
    private string _fieldName;
    private string _rdbFieldName;
    public ArrayDesc Descriptor { get; }
    public long Handle { get; public set; }
    public DatabaseBase Database { get; public set; }
    public TransactionBase Transaction { get; public set; }
    protected ArrayBase(ArrayDesc descriptor);
    protected ArrayBase(string tableName, string fieldName);
    public ArrayDesc get_Descriptor();
    public abstract virtual long get_Handle();
    public abstract virtual void set_Handle(long value);
    public abstract virtual DatabaseBase get_Database();
    public abstract virtual void set_Database(DatabaseBase value);
    public abstract virtual TransactionBase get_Transaction();
    public abstract virtual void set_Transaction(TransactionBase value);
    public void Initialize();
    public ValueTask InitializeAsync(CancellationToken cancellationToken);
    public Array Read();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.ArrayBase/<ReadAsync>d__20")]
public ValueTask`1<Array> ReadAsync(CancellationToken cancellationToken);
    public void Write(Array sourceArray);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.ArrayBase/<WriteAsync>d__22")]
public ValueTask WriteAsync(Array sourceArray, CancellationToken cancellationToken);
    public void SetDesc(Array sourceArray);
    private void LookupBounds();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.ArrayBase/<LookupBoundsAsync>d__25")]
private ValueTask LookupBoundsAsync(CancellationToken cancellationToken);
    private void LookupDesc();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.ArrayBase/<LookupDescAsync>d__27")]
private ValueTask LookupDescAsync(CancellationToken cancellationToken);
    protected int GetSliceLength(bool read);
    protected Type GetSystemType();
    public abstract virtual Byte[] GetSlice(int slice_length);
    public abstract virtual ValueTask`1<Byte[]> GetSliceAsync(int slice_length, CancellationToken cancellationToken);
    public abstract virtual void PutSlice(Array source_array, int slice_length);
    public abstract virtual ValueTask PutSliceAsync(Array source_array, int slice_length, CancellationToken cancellationToken);
    protected abstract virtual Array DecodeSlice(Byte[] slice);
    protected abstract virtual ValueTask`1<Array> DecodeSliceAsync(Byte[] slice, CancellationToken cancellationToken);
    private string GetArrayDesc();
    private string GetArrayBounds();
}
internal class FirebirdSql.Data.Common.ArrayBound : ValueType {
    [CompilerGeneratedAttribute]
private int <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UpperBound>k__BackingField;
    public int LowerBound { get; public set; }
    public int UpperBound { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_LowerBound();
    [CompilerGeneratedAttribute]
public void set_LowerBound(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_UpperBound();
    [CompilerGeneratedAttribute]
public void set_UpperBound(int value);
}
internal class FirebirdSql.Data.Common.ArrayDesc : ValueType {
    [CompilerGeneratedAttribute]
private byte <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationName>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Dimensions>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayBound[] <Bounds>k__BackingField;
    public byte DataType { get; public set; }
    public short Scale { get; public set; }
    public short Length { get; public set; }
    public string FieldName { get; public set; }
    public string RelationName { get; public set; }
    public short Dimensions { get; public set; }
    public short Flags { get; public set; }
    public ArrayBound[] Bounds { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(byte value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public short get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(short value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public short get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(short value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_RelationName();
    [CompilerGeneratedAttribute]
public void set_RelationName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public short get_Dimensions();
    [CompilerGeneratedAttribute]
public void set_Dimensions(short value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public short get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(short value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ArrayBound[] get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(ArrayBound[] value);
}
internal abstract class FirebirdSql.Data.Common.BatchBase : object {
    [CompilerGeneratedAttribute]
private bool <MultiError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchBufferSize>k__BackingField;
    public StatementBase Statement { get; }
    public bool MultiError { get; public set; }
    public int BatchBufferSize { get; public set; }
    public abstract virtual StatementBase get_Statement();
    [CompilerGeneratedAttribute]
public bool get_MultiError();
    [CompilerGeneratedAttribute]
public void set_MultiError(bool value);
    [CompilerGeneratedAttribute]
public int get_BatchBufferSize();
    [CompilerGeneratedAttribute]
public void set_BatchBufferSize(int value);
    public abstract virtual ExecuteResultItem[] Execute(int count, IDescriptorFiller descriptorFiller);
    public abstract virtual ValueTask`1<ExecuteResultItem[]> ExecuteAsync(int count, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public abstract virtual int ComputeBatchSize(int count, IDescriptorFiller descriptorFiller);
    public abstract virtual ValueTask`1<int> ComputeBatchSizeAsync(int count, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public abstract virtual void Release();
    public abstract virtual ValueTask ReleaseAsync(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Common.BatchParameterBuffer : DatabaseParameterBufferBase {
    public BatchParameterBuffer(Encoding encoding);
    public virtual void Append(int type, byte value);
    public virtual void Append(int type, short value);
    public virtual void Append(int type, int value);
    public virtual void Append(int type, Byte[] buffer);
}
internal class FirebirdSql.Data.Common.BinaryEncoding : Encoding {
    public static string BytesToString(Byte[] byteArray);
    private static void Validate(object data, int dataLength, int index, int count);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string chars);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int index);
    public virtual int GetBytes(string chars, int charIndex, int charCount, Byte[] bytes, int index);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int index, int count, Char[] chars, int charIndex);
    public virtual string GetString(Byte[] bytes);
    public virtual string GetString(Byte[] bytes, int index, int count);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int count);
}
internal abstract class FirebirdSql.Data.Common.BlobBase : object {
    private int _rblFlags;
    private Charset _charset;
    private int _segmentSize;
    protected long _blobId;
    protected int _position;
    protected TransactionBase _transaction;
    public int Handle { get; }
    public long Id { get; }
    public bool EOF { get; }
    protected int SegmentSize { get; }
    public DatabaseBase Database { get; }
    protected BlobBase(DatabaseBase db);
    public abstract virtual int get_Handle();
    public long get_Id();
    public bool get_EOF();
    protected int get_SegmentSize();
    public abstract virtual DatabaseBase get_Database();
    public string ReadString();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.BlobBase/<ReadStringAsync>d__18")]
public ValueTask`1<string> ReadStringAsync(CancellationToken cancellationToken);
    public Byte[] Read();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.BlobBase/<ReadAsync>d__20")]
public ValueTask`1<Byte[]> ReadAsync(CancellationToken cancellationToken);
    public void Write(string data);
    public ValueTask WriteAsync(string data, CancellationToken cancellationToken);
    public void Write(Byte[] buffer);
    public ValueTask WriteAsync(Byte[] buffer, CancellationToken cancellationToken);
    public void Write(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.BlobBase/<WriteAsync>d__26")]
public ValueTask WriteAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    protected abstract virtual void Create();
    protected abstract virtual ValueTask CreateAsync(CancellationToken cancellationToken);
    protected abstract virtual void Open();
    protected abstract virtual ValueTask OpenAsync(CancellationToken cancellationToken);
    protected abstract virtual void GetSegment(Stream stream);
    protected abstract virtual ValueTask GetSegmentAsync(Stream stream, CancellationToken cancellationToken);
    protected abstract virtual void PutSegment(Byte[] buffer);
    protected abstract virtual ValueTask PutSegmentAsync(Byte[] buffer, CancellationToken cancellationToken);
    protected abstract virtual void Seek(int position);
    protected abstract virtual ValueTask SeekAsync(int position, CancellationToken cancellationToken);
    protected abstract virtual void Close();
    protected abstract virtual ValueTask CloseAsync(CancellationToken cancellationToken);
    protected abstract virtual void Cancel();
    protected abstract virtual ValueTask CancelAsync(CancellationToken cancellationToken);
    protected void RblAddValue(int rblValue);
    protected void RblRemoveValue(int rblValue);
}
internal class FirebirdSql.Data.Common.BlobParameterBuffer : ParameterBuffer {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public BlobParameterBuffer(Encoding encoding);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
}
internal class FirebirdSql.Data.Common.Charset : object {
    internal static string Octets;
    internal static string None;
    private static Dictionary`2<int, Charset> charsetsById;
    private static Dictionary`2<string, Charset> charsetsByName;
    [CompilerGeneratedAttribute]
private int <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BytesPerCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOctetsCharset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNoneCharset>k__BackingField;
    public static Charset DefaultCharset { get; }
    public int Identifier { get; }
    public string Name { get; }
    public string SystemName { get; private set; }
    public int BytesPerCharacter { get; }
    public Encoding Encoding { get; }
    public bool IsOctetsCharset { get; }
    public bool IsNoneCharset { get; }
    private static Charset();
    public Charset(int id, string name, int bytesPerCharacter, string systemName);
    public static Charset get_DefaultCharset();
    public static bool TryGetById(int id, Charset& charset);
    public static bool TryGetByName(string name, Charset& charset);
    private static List`1<Charset> GetSupportedCharsets();
    private static void TryAddCharset(List`1<Charset> charsets, Func`1<Charset> charsetCreator);
    [CompilerGeneratedAttribute]
public int get_Identifier();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_SystemName();
    [CompilerGeneratedAttribute]
private void set_SystemName(string value);
    [CompilerGeneratedAttribute]
public int get_BytesPerCharacter();
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public bool get_IsOctetsCharset();
    [CompilerGeneratedAttribute]
public bool get_IsNoneCharset();
    public Byte[] GetBytes(string s);
    public int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public string GetString(Byte[] buffer);
    public string GetString(Byte[] buffer, int index, int count);
}
internal static class FirebirdSql.Data.Common.ConnectionPoolLifetimeHelper : object {
    internal static bool IsAlive(long connectionLifetime, long created, long now);
}
internal class FirebirdSql.Data.Common.ConnectionString : object {
    internal static string DefaultValueDataSource;
    internal static int DefaultValuePortNumber;
    internal static string DefaultValueUserId;
    internal static string DefaultValuePassword;
    internal static string DefaultValueRoleName;
    internal static string DefaultValueCatalog;
    internal static string DefaultValueCharacterSet;
    internal static int DefaultValueDialect;
    internal static int DefaultValuePacketSize;
    internal static bool DefaultValuePooling;
    internal static int DefaultValueConnectionLifetime;
    internal static int DefaultValueMinPoolSize;
    internal static int DefaultValueMaxPoolSize;
    internal static int DefaultValueConnectionTimeout;
    internal static int DefaultValueFetchSize;
    internal static FbServerType DefaultValueServerType;
    internal static IsolationLevel DefaultValueIsolationLevel;
    internal static bool DefaultValueRecordsAffected;
    internal static bool DefaultValueEnlist;
    internal static string DefaultValueClientLibrary;
    internal static int DefaultValueDbCachePages;
    internal static bool DefaultValueNoDbTriggers;
    internal static bool DefaultValueNoGarbageCollect;
    internal static bool DefaultValueCompression;
    internal static Byte[] DefaultValueCryptKey;
    internal static FbWireCrypt DefaultValueWireCrypt;
    internal static string DefaultValueApplicationName;
    internal static int DefaultValueCommandTimeout;
    internal static int DefaultValueParallelWorkers;
    internal static string DefaultKeyUserId;
    internal static string DefaultKeyPortNumber;
    internal static string DefaultKeyDataSource;
    internal static string DefaultKeyPassword;
    internal static string DefaultKeyRoleName;
    internal static string DefaultKeyCatalog;
    internal static string DefaultKeyCharacterSet;
    internal static string DefaultKeyDialect;
    internal static string DefaultKeyPacketSize;
    internal static string DefaultKeyPooling;
    internal static string DefaultKeyConnectionLifetime;
    internal static string DefaultKeyMinPoolSize;
    internal static string DefaultKeyMaxPoolSize;
    internal static string DefaultKeyConnectionTimeout;
    internal static string DefaultKeyFetchSize;
    internal static string DefaultKeyServerType;
    internal static string DefaultKeyIsolationLevel;
    internal static string DefaultKeyRecordsAffected;
    internal static string DefaultKeyEnlist;
    internal static string DefaultKeyClientLibrary;
    internal static string DefaultKeyDbCachePages;
    internal static string DefaultKeyNoDbTriggers;
    internal static string DefaultKeyNoGarbageCollect;
    internal static string DefaultKeyCompression;
    internal static string DefaultKeyCryptKey;
    internal static string DefaultKeyWireCrypt;
    internal static string DefaultKeyApplicationName;
    internal static string DefaultKeyCommandTimeout;
    internal static string DefaultKeyParallelWorkers;
    internal static IDictionary`2<string, string> Synonyms;
    internal static IDictionary`2<string, object> DefaultValues;
    private Dictionary`2<string, object> _options;
    public string UserID { get; }
    public string Password { get; }
    public string DataSource { get; }
    public int Port { get; }
    public string Database { get; }
    public int PacketSize { get; }
    public string Role { get; }
    public short Dialect { get; }
    public string Charset { get; }
    public int ConnectionTimeout { get; }
    public bool Pooling { get; }
    public long ConnectionLifetime { get; }
    public int MinPoolSize { get; }
    public int MaxPoolSize { get; }
    public int FetchSize { get; }
    public FbServerType ServerType { get; }
    public IsolationLevel IsolationLevel { get; }
    public bool ReturnRecordsAffected { get; }
    public bool Enlist { get; }
    public string ClientLibrary { get; }
    public int DbCachePages { get; }
    public bool NoDatabaseTriggers { get; }
    public bool NoGarbageCollect { get; }
    public bool Compression { get; }
    public Byte[] CryptKey { get; }
    public FbWireCrypt WireCrypt { get; }
    public string ApplicationName { get; }
    public int CommandTimeout { get; }
    public int ParallelWorkers { get; }
    internal string NormalizedConnectionString { get; }
    public ConnectionString(string connectionString);
    private static ConnectionString();
    public string get_UserID();
    public string get_Password();
    public string get_DataSource();
    public int get_Port();
    public string get_Database();
    public int get_PacketSize();
    public string get_Role();
    public short get_Dialect();
    public string get_Charset();
    public int get_ConnectionTimeout();
    public bool get_Pooling();
    public long get_ConnectionLifetime();
    public int get_MinPoolSize();
    public int get_MaxPoolSize();
    public int get_FetchSize();
    public FbServerType get_ServerType();
    public IsolationLevel get_IsolationLevel();
    public bool get_ReturnRecordsAffected();
    public bool get_Enlist();
    public string get_ClientLibrary();
    public int get_DbCachePages();
    public bool get_NoDatabaseTriggers();
    public bool get_NoGarbageCollect();
    public bool get_Compression();
    public Byte[] get_CryptKey();
    public FbWireCrypt get_WireCrypt();
    public string get_ApplicationName();
    public int get_CommandTimeout();
    public int get_ParallelWorkers();
    internal string get_NormalizedConnectionString();
    public void Validate();
    private void Load(string connectionString);
    private void SetDefaultOptions();
    private void ParseConnectionInfo(string connectionInfo);
    internal static short GetInt16(string key, TryGetValueDelegate tryGetValue, short defaultValue);
    internal static int GetInt32(string key, TryGetValueDelegate tryGetValue, int defaultValue);
    internal static long GetInt64(string key, TryGetValueDelegate tryGetValue, long defaultValue);
    internal static string GetString(string key, TryGetValueDelegate tryGetValue, string defaultValue);
    internal static bool GetBoolean(string key, TryGetValueDelegate tryGetValue, bool defaultValue);
    internal static Byte[] GetBytes(string key, TryGetValueDelegate tryGetValue, Byte[] defaultValue);
    internal static FbServerType GetServerType(string key, TryGetValueDelegate tryGetValue, FbServerType defaultValue);
    internal static IsolationLevel GetIsolationLevel(string key, TryGetValueDelegate tryGetValue, IsolationLevel defaultValue);
    internal static FbWireCrypt GetWireCrypt(string key, TryGetValueDelegate tryGetValue, FbWireCrypt defaultValue);
    private static string ExpandDataDirectory(string s);
    private static T ParseEnum(string value, string name);
    private static Exception NotSupported(string name);
    private static string WrapValueIfNeeded(string value);
}
internal abstract class FirebirdSql.Data.Common.DatabaseBase : object {
    [CompilerGeneratedAttribute]
private Action`1<IscException> <WarningMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Charset <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Dialect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransactionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVersion>k__BackingField;
    public Action`1<IscException> WarningMessage { get; public set; }
    public bool UseUtf8ParameterBuffer { get; }
    public Encoding ParameterBufferEncoding { get; }
    public int Handle { get; }
    public Charset Charset { get; }
    public int PacketSize { get; }
    public short Dialect { get; }
    public int TransactionCount { get; public set; }
    public string ServerVersion { get; protected set; }
    public bool HasRemoteEventSupport { get; }
    public bool ConnectionBroken { get; }
    public DatabaseBase(Charset charset, int packetSize, short dialect);
    [CompilerGeneratedAttribute]
public Action`1<IscException> get_WarningMessage();
    [CompilerGeneratedAttribute]
public void set_WarningMessage(Action`1<IscException> value);
    public abstract virtual bool get_UseUtf8ParameterBuffer();
    public Encoding get_ParameterBufferEncoding();
    public abstract virtual int get_Handle();
    [CompilerGeneratedAttribute]
public Charset get_Charset();
    [CompilerGeneratedAttribute]
public int get_PacketSize();
    [CompilerGeneratedAttribute]
public short get_Dialect();
    [CompilerGeneratedAttribute]
public int get_TransactionCount();
    [CompilerGeneratedAttribute]
public void set_TransactionCount(int value);
    [CompilerGeneratedAttribute]
public string get_ServerVersion();
    [CompilerGeneratedAttribute]
protected void set_ServerVersion(string value);
    public abstract virtual bool get_HasRemoteEventSupport();
    public abstract virtual bool get_ConnectionBroken();
    public abstract virtual void Attach(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public abstract virtual ValueTask AttachAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public abstract virtual void AttachWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public abstract virtual ValueTask AttachWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public abstract virtual void Detach();
    public abstract virtual ValueTask DetachAsync(CancellationToken cancellationToken);
    public abstract virtual void CreateDatabase(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public abstract virtual ValueTask CreateDatabaseAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public abstract virtual void CreateDatabaseWithTrustedAuth(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey);
    public abstract virtual ValueTask CreateDatabaseWithTrustedAuthAsync(DatabaseParameterBufferBase dpb, string database, Byte[] cryptKey, CancellationToken cancellationToken);
    public abstract virtual void DropDatabase();
    public abstract virtual ValueTask DropDatabaseAsync(CancellationToken cancellationToken);
    public abstract virtual TransactionBase BeginTransaction(TransactionParameterBuffer tpb);
    public abstract virtual ValueTask`1<TransactionBase> BeginTransactionAsync(TransactionParameterBuffer tpb, CancellationToken cancellationToken);
    public abstract virtual StatementBase CreateStatement();
    public abstract virtual StatementBase CreateStatement(TransactionBase transaction);
    public abstract virtual DatabaseParameterBufferBase CreateDatabaseParameterBuffer();
    public abstract virtual EventParameterBuffer CreateEventParameterBuffer();
    public abstract virtual TransactionParameterBuffer CreateTransactionParameterBuffer();
    public abstract virtual List`1<object> GetDatabaseInfo(Byte[] items);
    public abstract virtual ValueTask`1<List`1<object>> GetDatabaseInfoAsync(Byte[] items, CancellationToken cancellationToken);
    public abstract virtual List`1<object> GetDatabaseInfo(Byte[] items, int bufferLength);
    public abstract virtual ValueTask`1<List`1<object>> GetDatabaseInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    public abstract virtual void CloseEventManager();
    public abstract virtual ValueTask CloseEventManagerAsync(CancellationToken cancellationToken);
    public abstract virtual void QueueEvents(RemoteEvent events);
    public abstract virtual ValueTask QueueEventsAsync(RemoteEvent events, CancellationToken cancellationToken);
    public abstract virtual void CancelEvents(RemoteEvent events);
    public abstract virtual ValueTask CancelEventsAsync(RemoteEvent events, CancellationToken cancellationToken);
    public abstract virtual void CancelOperation(short kind);
    public abstract virtual ValueTask CancelOperationAsync(short kind, CancellationToken cancellationToken);
    public string GetServerVersion();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.DatabaseBase/<GetServerVersionAsync>d__64")]
public ValueTask`1<string> GetServerVersionAsync(CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Common.DatabaseParameterBuffer1 : DatabaseParameterBufferBase {
    public DatabaseParameterBuffer1(Encoding encoding);
    public virtual void Append(int type, byte value);
    public virtual void Append(int type, short value);
    public virtual void Append(int type, int value);
    public virtual void Append(int type, Byte[] buffer);
}
internal class FirebirdSql.Data.Common.DatabaseParameterBuffer2 : DatabaseParameterBufferBase {
    public DatabaseParameterBuffer2(Encoding encoding);
    public virtual void Append(int type, byte value);
    public virtual void Append(int type, short value);
    public virtual void Append(int type, int value);
    public virtual void Append(int type, Byte[] buffer);
}
internal abstract class FirebirdSql.Data.Common.DatabaseParameterBufferBase : ParameterBuffer {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public DatabaseParameterBufferBase(int version, Encoding encoding);
    public abstract virtual void Append(int type, byte value);
    public abstract virtual void Append(int type, short value);
    public abstract virtual void Append(int type, int value);
    public abstract virtual void Append(int type, Byte[] buffer);
    public void Append(int type, string content);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
}
internal static class FirebirdSql.Data.Common.DateTime2 : object {
    public static DateTime UnixEpoch { get; }
    public static DateTime get_UnixEpoch();
}
internal enum FirebirdSql.Data.Common.DbDataType : Enum {
    public int value__;
    public static DbDataType Array;
    public static DbDataType BigInt;
    public static DbDataType Binary;
    public static DbDataType Boolean;
    public static DbDataType Char;
    public static DbDataType Date;
    public static DbDataType Decimal;
    public static DbDataType Double;
    public static DbDataType Float;
    public static DbDataType Guid;
    public static DbDataType Integer;
    public static DbDataType Numeric;
    public static DbDataType SmallInt;
    public static DbDataType Text;
    public static DbDataType Time;
    public static DbDataType TimeStamp;
    public static DbDataType VarChar;
    public static DbDataType TimeStampTZ;
    public static DbDataType TimeStampTZEx;
    public static DbDataType TimeTZ;
    public static DbDataType TimeTZEx;
    public static DbDataType Dec16;
    public static DbDataType Dec34;
    public static DbDataType Int128;
    public static DbDataType Null;
}
internal class FirebirdSql.Data.Common.DbField : object {
    private short _dataType;
    private short _numericScale;
    private short _subType;
    private short _length;
    private short _nullFlag;
    private string _name;
    private string _relation;
    private string _owner;
    private string _alias;
    private int _charCount;
    private DbValue _dbValue;
    private Charset _charset;
    private ArrayBase _arrayHandle;
    public DbDataType DbDataType { get; }
    public int SqlType { get; }
    public short DataType { get; public set; }
    public short NumericScale { get; public set; }
    public short SubType { get; public set; }
    public short Length { get; public set; }
    public short NullFlag { get; public set; }
    public string Name { get; public set; }
    public string Relation { get; public set; }
    public string Owner { get; public set; }
    public string Alias { get; public set; }
    public Charset Charset { get; }
    public int CharCount { get; }
    public ArrayBase ArrayHandle { get; public set; }
    public DbValue DbValue { get; }
    public DbDataType get_DbDataType();
    public int get_SqlType();
    public short get_DataType();
    public void set_DataType(short value);
    public short get_NumericScale();
    public void set_NumericScale(short value);
    public short get_SubType();
    public void set_SubType(short value);
    public short get_Length();
    public void set_Length(short value);
    public short get_NullFlag();
    public void set_NullFlag(short value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Relation();
    public void set_Relation(string value);
    public string get_Owner();
    public void set_Owner(string value);
    public string get_Alias();
    public void set_Alias(string value);
    public Charset get_Charset();
    public int get_CharCount();
    public ArrayBase get_ArrayHandle();
    public void set_ArrayHandle(ArrayBase value);
    public DbValue get_DbValue();
    public bool IsNumeric();
    public bool IsDecimal();
    public bool IsLong();
    public bool IsCharacter();
    public bool IsArray();
    public bool IsAliased();
    public int GetSize();
    public bool AllowDBNull();
    public void SetValue(Byte[] buffer);
    public void FixNull();
    public Type GetSystemType();
    public bool HasDataType();
    private void EnsureArray();
}
internal enum FirebirdSql.Data.Common.DbStatementType : Enum {
    public int value__;
    public static DbStatementType None;
    public static DbStatementType Select;
    public static DbStatementType Insert;
    public static DbStatementType Update;
    public static DbStatementType Delete;
    public static DbStatementType DDL;
    public static DbStatementType GetSegment;
    public static DbStatementType PutSegment;
    public static DbStatementType StoredProcedure;
    public static DbStatementType StartTrans;
    public static DbStatementType Commit;
    public static DbStatementType Rollback;
    public static DbStatementType SelectForUpdate;
    public static DbStatementType SetGenerator;
    public static DbStatementType SavePoint;
}
internal class FirebirdSql.Data.Common.DbValue : object {
    private StatementBase _statement;
    private DbField _field;
    private object _value;
    public DbField Field { get; }
    public DbValue(DbField field, object value);
    public DbValue(StatementBase statement, DbField field, object value);
    public DbField get_Field();
    public bool IsDBNull();
    public object GetValue();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.DbValue/<GetValueAsync>d__9")]
public ValueTask`1<object> GetValueAsync(CancellationToken cancellationToken);
    public void SetValue(object value);
    public string GetString();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.DbValue/<GetStringAsync>d__12")]
public ValueTask`1<string> GetStringAsync(CancellationToken cancellationToken);
    public char GetChar();
    public bool GetBoolean();
    public byte GetByte();
    public short GetInt16();
    public int GetInt32();
    public long GetInt64();
    public decimal GetDecimal();
    public float GetFloat();
    public Guid GetGuid();
    public double GetDouble();
    public DateTime GetDateTime();
    public TimeSpan GetTimeSpan();
    public FbDecFloat GetDecFloat();
    public BigInteger GetInt128();
    public FbZonedDateTime GetZonedDateTime();
    public FbZonedTime GetZonedTime();
    public Array GetArray();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.DbValue/<GetArrayAsync>d__30")]
public ValueTask`1<Array> GetArrayAsync(CancellationToken cancellationToken);
    public Byte[] GetBinary();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.DbValue/<GetBinaryAsync>d__32")]
public ValueTask`1<Byte[]> GetBinaryAsync(CancellationToken cancellationToken);
    public int GetDate();
    public int GetTime();
    public ushort GetTimeZoneId();
    public Byte[] GetBytes();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.DbValue/<GetBytesAsync>d__37")]
public ValueTask`1<Byte[]> GetBytesAsync(CancellationToken cancellationToken);
    private Byte[] GetNumericBytes();
    private string GetClobData(long blobId);
    private ValueTask`1<string> GetClobDataAsync(long blobId, CancellationToken cancellationToken);
    private Byte[] GetBlobData(long blobId);
    private ValueTask`1<Byte[]> GetBlobDataAsync(long blobId, CancellationToken cancellationToken);
    private Array GetArrayData(long handle);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.DbValue/<GetArrayDataAsync>d__44")]
private ValueTask`1<Array> GetArrayDataAsync(long handle, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Common.DecimalCodec : object {
    private static int Combination2;
    private static int NegativeBit;
    private static int NegativeSignum;
    private static byte TypeMask;
    private static byte Infinity0;
    private static byte Infinity2;
    private static byte NaNQuiet;
    private static byte NaNSignal;
    private DecimalFormat _decimalFormat;
    private DenselyPackedDecimalCodec _coefficientCoder;
    [CompilerGeneratedAttribute]
private static DecimalCodec <DecFloat16>k__BackingField;
    [CompilerGeneratedAttribute]
private static DecimalCodec <DecFloat34>k__BackingField;
    public static DecimalCodec DecFloat16 { get; }
    public static DecimalCodec DecFloat34 { get; }
    public DecimalCodec(int formatBitLength, int coefficientDigits);
    private static DecimalCodec();
    [CompilerGeneratedAttribute]
public static DecimalCodec get_DecFloat16();
    [CompilerGeneratedAttribute]
public static DecimalCodec get_DecFloat34();
    public FbDecFloat ParseBytes(Byte[] decBytes);
    public Byte[] EncodeDecimal(FbDecFloat decimal);
    private void EncodeFinite(FbDecFloat decimal, Byte[] decBytes);
    private static void EncodeExponentContinuation(Byte[] decBytes, int expAndBias, int expBitsRemaining);
    private static int DecodeExponent(Byte[] decBytes, int exponentMSB, int exponentBitsRemaining);
    private static DecimalType DecimalTypeFromFirstByte(int firstByte);
    private static byte GetSpecialBits(DecimalType decimalType);
}
internal static class FirebirdSql.Data.Common.DecimalShiftHelper : object {
    public static decimal ShiftDecimalLeft(decimal d, int shift);
    public static decimal ShiftDecimalRight(decimal d, int shift);
}
public enum FirebirdSql.Data.Common.DecimalType : Enum {
    public int value__;
    public static DecimalType Finite;
    public static DecimalType Infinity;
    public static DecimalType NaN;
    public static DecimalType SignalingNaN;
}
internal class FirebirdSql.Data.Common.DenselyPackedDecimalCodec : object {
    internal static int DigitsPerGroup;
    internal static int BitsPerGroup;
    internal static int NegativeSignum;
    private static int BitPerByte;
    private static BigInteger OneThousand;
    private static Char[] DPDGroupBits2Digits;
    private static Int32[] Bin2DPD;
    private int _numberOfDigits;
    private int _digitGroups;
    public DenselyPackedDecimalCodec(int numberOfDigits);
    private static DenselyPackedDecimalCodec();
    public BigInteger DecodeValue(int signum, int firstDigit, Byte[] decBytes);
    public BigInteger DecodeValue(int signum, int firstDigit, Byte[] decBytes, int lsbIndex);
    public int EncodeValue(BigInteger value, Byte[] decBytes);
    public int EncodeValue(BigInteger value, Byte[] decBytes, int lsbIndex);
    private BigInteger DecodeValue0(int signum, int firstDigit, Byte[] decBytes, int lsbIndex);
    private int EncodeValue0(BigInteger value, Byte[] decBytes, int lsbIndex);
    private Char[] CreateZeroedCharArray();
    private void ValidateLsbIndex(int lsbIndex, int decBytesLength);
    private static BigInteger ToBigInteger(int signum, Char[] digitChars);
    private static int FindFirstNonZero(Char[] digitChars);
}
[DefaultMemberAttribute("Item")]
internal class FirebirdSql.Data.Common.Descriptor : object {
    private short _version;
    private short _count;
    private short _actualCount;
    private DbField[] _fields;
    public short Version { get; }
    public short Count { get; }
    public short ActualCount { get; public set; }
    public DbField Item { get; }
    public Descriptor(short n);
    public short get_Version();
    public short get_Count();
    public short get_ActualCount();
    public void set_ActualCount(short value);
    public DbField get_Item(int index);
    public void ResetValues();
    public BlrData ToBlr();
}
internal class FirebirdSql.Data.Common.EmptyDescriptorFiller : object {
    public static EmptyDescriptorFiller Instance;
    private static EmptyDescriptorFiller();
    public sealed virtual void Fill(Descriptor descriptor, int index);
    public sealed virtual ValueTask FillAsync(Descriptor descriptor, int index, CancellationToken cancellationToken);
}
internal static class FirebirdSql.Data.Common.Encoding2 : object {
    [CompilerGeneratedAttribute]
private static Encoding <Default>k__BackingField;
    public static Encoding Default { get; }
    private static Encoding2();
    [CompilerGeneratedAttribute]
public static Encoding get_Default();
    private static Encoding GetANSIEncoding();
}
internal class FirebirdSql.Data.Common.EventParameterBuffer : ParameterBuffer {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public EventParameterBuffer(Encoding encoding);
    public void Append(Byte[] content, int actualCount);
    public void Append(string content, int actualCount);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
}
internal static class FirebirdSql.Data.Common.ExplicitCancellation : object {
    public static ExplicitCancel Enter(CancellationToken cancellationToken, Action explicitCancel);
    private static void ExitExplicitCancel(CancellationTokenRegistration cancellationTokenRegistration);
}
[ExtensionAttribute]
internal static class FirebirdSql.Data.Common.Extensions : object {
    [ExtensionAttribute]
public static int AsInt(IntPtr ptr);
    [ExtensionAttribute]
public static IntPtr ReadIntPtr(BinaryReader self);
    [ExtensionAttribute]
public static string ToHexString(Byte[] b);
    [IteratorStateMachineAttribute("FirebirdSql.Data.Common.Extensions/<Split>d__3`1")]
[ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Split(T[] array, int size);
    [ExtensionAttribute]
public static HashSet`1<T> ToHashSet(IEnumerable`1<T> source);
}
internal interface FirebirdSql.Data.Common.IDescriptorFiller {
    public abstract virtual void Fill(Descriptor descriptor, int index);
    public abstract virtual ValueTask FillAsync(Descriptor descriptor, int index, CancellationToken cancellationToken);
}
internal static class FirebirdSql.Data.Common.InfoValuesHelper : object {
    public static T ConvertValue(object value);
}
internal static class FirebirdSql.Data.Common.Int128Helper : object {
    public static BigInteger GetInt128(Byte[] value);
    public static Byte[] GetBytes(BigInteger value);
}
internal static class FirebirdSql.Data.Common.IscCodes : object {
    public static int SQLDA_VERSION1;
    public static int SQL_DIALECT_V5;
    public static int SQL_DIALECT_V6_TRANSITION;
    public static int SQL_DIALECT_V6;
    public static int SQL_DIALECT_CURRENT;
    public static int DSQL_close;
    public static int DSQL_drop;
    public static int ARRAY_DESC_COLUMN_MAJOR;
    public static int ISC_STATUS_LENGTH;
    public static ushort INVALID_OBJECT;
    public static int BUFFER_SIZE_128;
    public static int BUFFER_SIZE_256;
    public static int BUFFER_SIZE_32K;
    public static int DEFAULT_MAX_BUFFER_SIZE;
    public static int ROWS_AFFECTED_BUFFER_SIZE;
    public static int STATEMENT_TYPE_BUFFER_SIZE;
    public static int PREPARE_INFO_BUFFER_SIZE;
    public static int GenericAchitectureClient;
    public static int CONNECT_VERSION2;
    public static int CONNECT_VERSION3;
    public static int PROTOCOL_VERSION3;
    public static int PROTOCOL_VERSION4;
    public static int PROTOCOL_VERSION5;
    public static int PROTOCOL_VERSION6;
    public static int PROTOCOL_VERSION7;
    public static int PROTOCOL_VERSION8;
    public static int PROTOCOL_VERSION9;
    public static int PROTOCOL_VERSION10;
    public static int FB_PROTOCOL_FLAG;
    public static int FB_PROTOCOL_MASK;
    public static int PROTOCOL_VERSION11;
    public static int PROTOCOL_VERSION12;
    public static int PROTOCOL_VERSION13;
    public static int PROTOCOL_VERSION15;
    public static int PROTOCOL_VERSION16;
    public static int p_cnct_min_type;
    public static int ptype_rpc;
    public static int ptype_batch_send;
    public static int ptype_out_of_band;
    public static int ptype_lazy_send;
    public static int pflag_compress;
    public static int WIRE_CRYPT_DISABLED;
    public static int WIRE_CRYPT_ENABLED;
    public static int WIRE_CRYPT_REQUIRED;
    public static int STMT_DEFER_EXECUTE;
    public static int isc_info_db_class_classic_access;
    public static int isc_info_db_class_server_access;
    public static int op_void;
    public static int op_connect;
    public static int op_exit;
    public static int op_accept;
    public static int op_reject;
    public static int op_protocol;
    public static int op_disconnect;
    public static int op_credit;
    public static int op_continuation;
    public static int op_response;
    public static int op_open_file;
    public static int op_create_file;
    public static int op_close_file;
    public static int op_read_page;
    public static int op_write_page;
    public static int op_lock;
    public static int op_convert_lock;
    public static int op_release_lock;
    public static int op_blocking;
    public static int op_attach;
    public static int op_create;
    public static int op_detach;
    public static int op_compile;
    public static int op_start;
    public static int op_start_and_send;
    public static int op_send;
    public static int op_receive;
    public static int op_unwind;
    public static int op_release;
    public static int op_transaction;
    public static int op_commit;
    public static int op_rollback;
    public static int op_prepare;
    public static int op_reconnect;
    public static int op_create_blob;
    public static int op_open_blob;
    public static int op_get_segment;
    public static int op_put_segment;
    public static int op_cancel_blob;
    public static int op_close_blob;
    public static int op_info_database;
    public static int op_info_request;
    public static int op_info_transaction;
    public static int op_info_blob;
    public static int op_batch_segments;
    public static int op_mgr_set_affinity;
    public static int op_mgr_clear_affinity;
    public static int op_mgr_report;
    public static int op_que_events;
    public static int op_cancel_events;
    public static int op_commit_retaining;
    public static int op_prepare2;
    public static int op_event;
    public static int op_connect_request;
    public static int op_aux_connect;
    public static int op_ddl;
    public static int op_open_blob2;
    public static int op_create_blob2;
    public static int op_get_slice;
    public static int op_put_slice;
    public static int op_slice;
    public static int op_seek_blob;
    public static int op_allocate_statement;
    public static int op_execute;
    public static int op_exec_immediate;
    public static int op_fetch;
    public static int op_fetch_response;
    public static int op_free_statement;
    public static int op_prepare_statement;
    public static int op_set_cursor;
    public static int op_info_sql;
    public static int op_dummy;
    public static int op_response_piggyback;
    public static int op_start_and_receive;
    public static int op_start_send_and_receive;
    public static int op_exec_immediate2;
    public static int op_execute2;
    public static int op_insert;
    public static int op_sql_response;
    public static int op_transact;
    public static int op_transact_response;
    public static int op_drop_database;
    public static int op_service_attach;
    public static int op_service_detach;
    public static int op_service_info;
    public static int op_service_start;
    public static int op_rollback_retaining;
    public static int op_update_account_info;
    public static int op_authenticate_user;
    public static int op_partial;
    public static int op_trusted_auth;
    public static int op_cancel;
    public static int op_cont_auth;
    public static int op_ping;
    public static int op_accept_data;
    public static int op_abort_aux_connection;
    public static int op_crypt;
    public static int op_crypt_key_callback;
    public static int op_cond_accept;
    public static int op_batch_create;
    public static int op_batch_msg;
    public static int op_batch_exec;
    public static int op_batch_rls;
    public static int op_batch_cs;
    public static int op_batch_regblob;
    public static int op_batch_blob_stream;
    public static int op_batch_set_bpb;
    public static int op_repl_data;
    public static int op_repl_req;
    public static int op_batch_cancel;
    public static int isc_dpb_version1;
    public static int isc_dpb_version2;
    public static int isc_dpb_cdd_pathname;
    public static int isc_dpb_allocation;
    public static int isc_dpb_journal;
    public static int isc_dpb_page_size;
    public static int isc_dpb_num_buffers;
    public static int isc_dpb_buffer_length;
    public static int isc_dpb_debug;
    public static int isc_dpb_garbage_collect;
    public static int isc_dpb_verify;
    public static int isc_dpb_sweep;
    public static int isc_dpb_enable_journal;
    public static int isc_dpb_disable_journal;
    public static int isc_dpb_dbkey_scope;
    public static int isc_dpb_number_of_users;
    public static int isc_dpb_trace;
    public static int isc_dpb_no_garbage_collect;
    public static int isc_dpb_damaged;
    public static int isc_dpb_license;
    public static int isc_dpb_sys_user_name;
    public static int isc_dpb_encrypt_key;
    public static int isc_dpb_activate_shadow;
    public static int isc_dpb_sweep_interval;
    public static int isc_dpb_delete_shadow;
    public static int isc_dpb_force_write;
    public static int isc_dpb_begin_log;
    public static int isc_dpb_quit_log;
    public static int isc_dpb_no_reserve;
    public static int isc_dpb_user_name;
    public static int isc_dpb_password;
    public static int isc_dpb_password_enc;
    public static int isc_dpb_sys_user_name_enc;
    public static int isc_dpb_interp;
    public static int isc_dpb_online_dump;
    public static int isc_dpb_old_file_size;
    public static int isc_dpb_old_num_files;
    public static int isc_dpb_old_file;
    public static int isc_dpb_old_start_page;
    public static int isc_dpb_old_start_seqno;
    public static int isc_dpb_old_start_file;
    public static int isc_dpb_drop_walfile;
    public static int isc_dpb_old_dump_id;
    public static int isc_dpb_wal_backup_dir;
    public static int isc_dpb_wal_chkptlen;
    public static int isc_dpb_wal_numbufs;
    public static int isc_dpb_wal_bufsize;
    public static int isc_dpb_wal_grp_cmt_wait;
    public static int isc_dpb_lc_messages;
    public static int isc_dpb_lc_ctype;
    public static int isc_dpb_cache_manager;
    public static int isc_dpb_shutdown;
    public static int isc_dpb_online;
    public static int isc_dpb_shutdown_delay;
    public static int isc_dpb_reserved;
    public static int isc_dpb_overwrite;
    public static int isc_dpb_sec_attach;
    public static int isc_dpb_disable_wal;
    public static int isc_dpb_connect_timeout;
    public static int isc_dpb_dummy_packet_interval;
    public static int isc_dpb_gbak_attach;
    public static int isc_dpb_sql_role_name;
    public static int isc_dpb_set_page_buffers;
    public static int isc_dpb_working_directory;
    public static int isc_dpb_sql_dialect;
    public static int isc_dpb_set_db_readonly;
    public static int isc_dpb_set_db_sql_dialect;
    public static int isc_dpb_gfix_attach;
    public static int isc_dpb_gstat_attach;
    public static int isc_dpb_set_db_charset;
    public static int isc_dpb_gsec_attach;
    public static int isc_dpb_address_path;
    public static int isc_dpb_process_id;
    public static int isc_dpb_no_db_triggers;
    public static int isc_dpb_trusted_auth;
    public static int isc_dpb_process_name;
    public static int isc_dpb_trusted_role;
    public static int isc_dpb_org_filename;
    public static int isc_dpb_utf8_filename;
    public static int isc_dpb_ext_call_depth;
    public static int isc_dpb_auth_block;
    public static int isc_dpb_client_version;
    public static int isc_dpb_remote_protocol;
    public static int isc_dpb_host_name;
    public static int isc_dpb_os_user;
    public static int isc_dpb_specific_auth_data;
    public static int isc_dpb_auth_plugin_list;
    public static int isc_dpb_auth_plugin_name;
    public static int isc_dpb_config;
    public static int isc_dpb_nolinger;
    public static int isc_dpb_reset_icu;
    public static int isc_dpb_map_attach;
    public static int isc_dpb_session_time_zone;
    public static int isc_dpb_set_db_replica;
    public static int isc_dpb_set_bind;
    public static int isc_dpb_decfloat_round;
    public static int isc_dpb_decfloat_traps;
    public static int isc_dpb_clear_map;
    public static int isc_dpb_parallel_workers;
    public static int isc_dpb_worker_attach;
    public static int isc_tpb_version1;
    public static int isc_tpb_version3;
    public static int isc_tpb_consistency;
    public static int isc_tpb_concurrency;
    public static int isc_tpb_shared;
    public static int isc_tpb_protected;
    public static int isc_tpb_exclusive;
    public static int isc_tpb_wait;
    public static int isc_tpb_nowait;
    public static int isc_tpb_read;
    public static int isc_tpb_write;
    public static int isc_tpb_lock_read;
    public static int isc_tpb_lock_write;
    public static int isc_tpb_verb_time;
    public static int isc_tpb_commit_time;
    public static int isc_tpb_ignore_limbo;
    public static int isc_tpb_read_committed;
    public static int isc_tpb_autocommit;
    public static int isc_tpb_rec_version;
    public static int isc_tpb_no_rec_version;
    public static int isc_tpb_restart_requests;
    public static int isc_tpb_no_auto_undo;
    public static int isc_tpb_lock_timeout;
    public static int isc_tpb_read_consistency;
    public static int isc_tpb_at_snapshot_number;
    public static int isc_spb_version1;
    public static int isc_spb_current_version;
    public static int isc_spb_version;
    public static int isc_spb_version3;
    public static int isc_spb_user_name;
    public static int isc_spb_sys_user_name;
    public static int isc_spb_sys_user_name_enc;
    public static int isc_spb_password;
    public static int isc_spb_password_enc;
    public static int isc_spb_command_line;
    public static int isc_spb_dbname;
    public static int isc_spb_verbose;
    public static int isc_spb_options;
    public static int isc_spb_address_path;
    public static int isc_spb_process_id;
    public static int isc_spb_trusted_auth;
    public static int isc_spb_process_name;
    public static int isc_spb_trusted_role;
    public static int isc_spb_verbint;
    public static int isc_spb_auth_block;
    public static int isc_spb_auth_plugin_name;
    public static int isc_spb_auth_plugin_list;
    public static int isc_spb_utf8_filename;
    public static int isc_spb_client_version;
    public static int isc_spb_remote_protocol;
    public static int isc_spb_host_name;
    public static int isc_spb_os_user;
    public static int isc_spb_config;
    public static int isc_spb_expected_db;
    public static int isc_spb_connect_timeout;
    public static int isc_spb_dummy_packet_interval;
    public static int isc_spb_sql_role_name;
    public static int isc_spb_specific_auth_data;
    public static int isc_spb_num_att;
    public static int isc_spb_num_db;
    public static int isc_action_svc_backup;
    public static int isc_action_svc_restore;
    public static int isc_action_svc_repair;
    public static int isc_action_svc_add_user;
    public static int isc_action_svc_delete_user;
    public static int isc_action_svc_modify_user;
    public static int isc_action_svc_display_user;
    public static int isc_action_svc_properties;
    public static int isc_action_svc_add_license;
    public static int isc_action_svc_remove_license;
    public static int isc_action_svc_db_stats;
    public static int isc_action_svc_get_ib_log;
    public static int isc_action_svc_get_fb_log;
    public static int isc_action_svc_nbak;
    public static int isc_action_svc_nrest;
    public static int isc_action_svc_trace_start;
    public static int isc_action_svc_trace_stop;
    public static int isc_action_svc_trace_suspend;
    public static int isc_action_svc_trace_resume;
    public static int isc_action_svc_trace_list;
    public static int isc_action_svc_set_mapping;
    public static int isc_action_svc_drop_mapping;
    public static int isc_action_svc_display_user_adm;
    public static int isc_action_svc_validate;
    public static int isc_action_svc_nfix;
    public static int isc_info_svc_svr_db_info;
    public static int isc_info_svc_get_license;
    public static int isc_info_svc_get_license_mask;
    public static int isc_info_svc_get_config;
    public static int isc_info_svc_version;
    public static int isc_info_svc_server_version;
    public static int isc_info_svc_implementation;
    public static int isc_info_svc_capabilities;
    public static int isc_info_svc_user_dbpath;
    public static int isc_info_svc_get_env;
    public static int isc_info_svc_get_env_lock;
    public static int isc_info_svc_get_env_msg;
    public static int isc_info_svc_line;
    public static int isc_info_svc_to_eof;
    public static int isc_info_svc_timeout;
    public static int isc_info_svc_get_licensed_users;
    public static int isc_info_svc_limbo_trans;
    public static int isc_info_svc_running;
    public static int isc_info_svc_get_users;
    public static int isc_info_svc_stdin;
    public static int isc_spb_prp_page_buffers;
    public static int isc_spb_prp_sweep_interval;
    public static int isc_spb_prp_shutdown_db;
    public static int isc_spb_prp_deny_new_attachments;
    public static int isc_spb_prp_deny_new_transactions;
    public static int isc_spb_prp_reserve_space;
    public static int isc_spb_prp_write_mode;
    public static int isc_spb_prp_access_mode;
    public static int isc_spb_prp_set_sql_dialect;
    public static int isc_spb_prp_force_shutdown;
    public static int isc_spb_prp_attachments_shutdown;
    public static int isc_spb_prp_transactions_shutdown;
    public static int isc_spb_prp_shutdown_mode;
    public static int isc_spb_prp_online_mode;
    public static int isc_spb_prp_sm_normal;
    public static int isc_spb_prp_sm_multi;
    public static int isc_spb_prp_sm_single;
    public static int isc_spb_prp_sm_full;
    public static int isc_spb_prp_res_use_full;
    public static int isc_spb_prp_res;
    public static int isc_spb_prp_wm_async;
    public static int isc_spb_prp_wm_sync;
    public static int isc_spb_prp_am_readonly;
    public static int isc_spb_prp_am_readwrite;
    public static int isc_spb_prp_activate;
    public static int isc_spb_prp_db_online;
    public static int isc_spb_prp_nolinger;
    public static int isc_spb_bkp_file;
    public static int isc_spb_bkp_factor;
    public static int isc_spb_bkp_length;
    public static int isc_spb_bkp_skip_data;
    public static int isc_spb_bkp_stat;
    public static int isc_spb_bkp_keyholder;
    public static int isc_spb_bkp_keyname;
    public static int isc_spb_bkp_crypt;
    public static int isc_spb_bkp_include_data;
    public static int isc_spb_bkp_parallel_workers;
    public static int isc_spb_bkp_ignore_checksums;
    public static int isc_spb_bkp_ignore_limbo;
    public static int isc_spb_bkp_metadata_only;
    public static int isc_spb_bkp_no_garbage_collect;
    public static int isc_spb_bkp_old_descriptions;
    public static int isc_spb_bkp_non_transportable;
    public static int isc_spb_bkp_convert;
    public static int isc_spb_bkp_expand;
    public static int isc_spb_bkp_no_triggers;
    public static int isc_spb_bkp_zip;
    public static int isc_spb_bkp_direct_io;
    public static int isc_spb_res_skip_data;
    public static int isc_spb_res_include_data;
    public static int isc_spb_res_buffers;
    public static int isc_spb_res_page_size;
    public static int isc_spb_res_length;
    public static int isc_spb_res_access_mode;
    public static int isc_spb_res_fix_fss_data;
    public static int isc_spb_res_fix_fss_metadata;
    public static int isc_spb_res_keyholder;
    public static int isc_spb_res_keyname;
    public static int isc_spb_res_crypt;
    public static int isc_spb_res_stat;
    public static int isc_spb_res_parallel_workers;
    public static int isc_spb_res_metadata_only;
    public static int isc_spb_res_deactivate_idx;
    public static int isc_spb_res_no_shadow;
    public static int isc_spb_res_no_validity;
    public static int isc_spb_res_one_at_a_time;
    public static int isc_spb_res_replace;
    public static int isc_spb_res_create;
    public static int isc_spb_res_use_all_space;
    public static int isc_spb_res_direct_io;
    public static int isc_spb_res_replica_mode;
    public static int isc_spb_res_am_readonly;
    public static int isc_spb_res_am_readwrite;
    public static int isc_spb_val_tab_incl;
    public static int isc_spb_val_tab_excl;
    public static int isc_spb_val_idx_incl;
    public static int isc_spb_val_idx_excl;
    public static int isc_spb_val_lock_timeout;
    public static int isc_spb_rpr_commit_trans;
    public static int isc_spb_rpr_rollback_trans;
    public static int isc_spb_rpr_recover_two_phase;
    public static int isc_spb_tra_id;
    public static int isc_spb_single_tra_id;
    public static int isc_spb_multi_tra_id;
    public static int isc_spb_tra_state;
    public static int isc_spb_tra_state_limbo;
    public static int isc_spb_tra_state_commit;
    public static int isc_spb_tra_state_rollback;
    public static int isc_spb_tra_state_unknown;
    public static int isc_spb_tra_host_site;
    public static int isc_spb_tra_remote_site;
    public static int isc_spb_tra_db_path;
    public static int isc_spb_tra_advise;
    public static int isc_spb_tra_advise_commit;
    public static int isc_spb_tra_advise_rollback;
    public static int isc_spb_tra_advise_unknown;
    public static int isc_spb_tra_id_64;
    public static int isc_spb_single_tra_id_64;
    public static int isc_spb_multi_tra_id_64;
    public static int isc_spb_rpr_commit_trans_64;
    public static int isc_spb_rpr_rollback_trans_64;
    public static int isc_spb_rpr_recover_two_phase_64;
    public static int isc_spb_rpr_par_workers;
    public static int isc_spb_rpr_validate_db;
    public static int isc_spb_rpr_sweep_db;
    public static int isc_spb_rpr_mend_db;
    public static int isc_spb_rpr_list_limbo_trans;
    public static int isc_spb_rpr_check_db;
    public static int isc_spb_rpr_ignore_checksum;
    public static int isc_spb_rpr_kill_shadows;
    public static int isc_spb_rpr_full;
    public static int isc_spb_rpr_icu;
    public static int isc_spb_sec_userid;
    public static int isc_spb_sec_groupid;
    public static int isc_spb_sec_username;
    public static int isc_spb_sec_password;
    public static int isc_spb_sec_groupname;
    public static int isc_spb_sec_firstname;
    public static int isc_spb_sec_middlename;
    public static int isc_spb_sec_lastname;
    public static int isc_spb_nbk_level;
    public static int isc_spb_nbk_file;
    public static int isc_spb_nbk_direct;
    public static int isc_spb_nbk_no_triggers;
    public static int isc_spb_trc_id;
    public static int isc_spb_trc_name;
    public static int isc_spb_trc_cfg;
    public static int ISCCFG_LOCKMEM_KEY;
    public static int ISCCFG_LOCKSEM_KEY;
    public static int ISCCFG_LOCKSIG_KEY;
    public static int ISCCFG_EVNTMEM_KEY;
    public static int ISCCFG_DBCACHE_KEY;
    public static int ISCCFG_PRIORITY_KEY;
    public static int ISCCFG_IPCMAP_KEY;
    public static int ISCCFG_MEMMIN_KEY;
    public static int ISCCFG_MEMMAX_KEY;
    public static int ISCCFG_LOCKORDER_KEY;
    public static int ISCCFG_ANYLOCKMEM_KEY;
    public static int ISCCFG_ANYLOCKSEM_KEY;
    public static int ISCCFG_ANYLOCKSIG_KEY;
    public static int ISCCFG_ANYEVNTMEM_KEY;
    public static int ISCCFG_LOCKHASH_KEY;
    public static int ISCCFG_DEADLOCK_KEY;
    public static int ISCCFG_LOCKSPIN_KEY;
    public static int ISCCFG_CONN_TIMEOUT_KEY;
    public static int ISCCFG_DUMMY_INTRVL_KEY;
    public static int ISCCFG_TRACE_POOLS_KEY;
    public static int ISCCFG_REMOTE_BUFFER_KEY;
    public static int isc_info_end;
    public static int isc_info_truncated;
    public static int isc_info_error;
    public static int isc_info_data_not_ready;
    public static int isc_info_flag_end;
    public static int isc_info_sql_select;
    public static int isc_info_sql_bind;
    public static int isc_info_sql_num_variables;
    public static int isc_info_sql_describe_vars;
    public static int isc_info_sql_describe_end;
    public static int isc_info_sql_sqlda_seq;
    public static int isc_info_sql_message_seq;
    public static int isc_info_sql_type;
    public static int isc_info_sql_sub_type;
    public static int isc_info_sql_scale;
    public static int isc_info_sql_length;
    public static int isc_info_sql_null_ind;
    public static int isc_info_sql_field;
    public static int isc_info_sql_relation;
    public static int isc_info_sql_owner;
    public static int isc_info_sql_alias;
    public static int isc_info_sql_sqlda_start;
    public static int isc_info_sql_stmt_type;
    public static int isc_info_sql_get_plan;
    public static int isc_info_sql_records;
    public static int isc_info_sql_batch_fetch;
    public static int isc_info_sql_relation_alias;
    public static int isc_info_sql_explain_plan;
    public static int isc_info_sql_stmt_flags;
    public static int isc_info_sql_stmt_select;
    public static int isc_info_sql_stmt_insert;
    public static int isc_info_sql_stmt_update;
    public static int isc_info_sql_stmt_delete;
    public static int isc_info_sql_stmt_ddl;
    public static int isc_info_sql_stmt_get_segment;
    public static int isc_info_sql_stmt_put_segment;
    public static int isc_info_sql_stmt_exec_procedure;
    public static int isc_info_sql_stmt_start_trans;
    public static int isc_info_sql_stmt_commit;
    public static int isc_info_sql_stmt_rollback;
    public static int isc_info_sql_stmt_select_for_upd;
    public static int isc_info_sql_stmt_set_generator;
    public static int isc_info_sql_stmt_savepoint;
    public static int isc_info_db_id;
    public static int isc_info_reads;
    public static int isc_info_writes;
    public static int isc_info_fetches;
    public static int isc_info_marks;
    public static int isc_info_implementation;
    public static int isc_info_isc_version;
    public static int isc_info_base_level;
    public static int isc_info_page_size;
    public static int isc_info_num_buffers;
    public static int isc_info_limbo;
    public static int isc_info_current_memory;
    public static int isc_info_max_memory;
    public static int isc_info_window_turns;
    public static int isc_info_license;
    public static int isc_info_allocation;
    public static int isc_info_attachment_id;
    public static int isc_info_read_seq_count;
    public static int isc_info_read_idx_count;
    public static int isc_info_insert_count;
    public static int isc_info_update_count;
    public static int isc_info_delete_count;
    public static int isc_info_backout_count;
    public static int isc_info_purge_count;
    public static int isc_info_expunge_count;
    public static int isc_info_sweep_interval;
    public static int isc_info_ods_version;
    public static int isc_info_ods_minor_version;
    public static int isc_info_no_reserve;
    public static int isc_info_logfile;
    public static int isc_info_cur_logfile_name;
    public static int isc_info_cur_log_part_offset;
    public static int isc_info_num_wal_buffers;
    public static int isc_info_wal_buffer_size;
    public static int isc_info_wal_ckpt_length;
    public static int isc_info_wal_cur_ckpt_interval;
    public static int isc_info_wal_prv_ckpt_fname;
    public static int isc_info_wal_prv_ckpt_poffset;
    public static int isc_info_wal_recv_ckpt_fname;
    public static int isc_info_wal_recv_ckpt_poffset;
    public static int isc_info_wal_grpc_wait_usecs;
    public static int isc_info_wal_num_io;
    public static int isc_info_wal_avg_io_size;
    public static int isc_info_wal_num_commits;
    public static int isc_info_wal_avg_grpc_size;
    public static int isc_info_forced_writes;
    public static int isc_info_user_names;
    public static int isc_info_page_errors;
    public static int isc_info_record_errors;
    public static int isc_info_bpage_errors;
    public static int isc_info_dpage_errors;
    public static int isc_info_ipage_errors;
    public static int isc_info_ppage_errors;
    public static int isc_info_tpage_errors;
    public static int isc_info_set_page_buffers;
    public static int isc_info_db_sql_dialect;
    public static int isc_info_db_read_only;
    public static int isc_info_db_size_in_pages;
    public static int frb_info_att_charset;
    public static int isc_info_db_class;
    public static int isc_info_firebird_version;
    public static int isc_info_oldest_transaction;
    public static int isc_info_oldest_active;
    public static int isc_info_oldest_snapshot;
    public static int isc_info_next_transaction;
    public static int isc_info_db_provider;
    public static int isc_info_active_transactions;
    public static int isc_info_active_tran_count;
    public static int isc_info_creation_date;
    public static int isc_info_db_file_size;
    public static int fb_info_page_contents;
    public static int fb_info_implementation;
    public static int fb_info_page_warns;
    public static int fb_info_record_warns;
    public static int fb_info_bpage_warns;
    public static int fb_info_dpage_warns;
    public static int fb_info_ipage_warns;
    public static int fb_info_ppage_warns;
    public static int fb_info_tpage_warns;
    public static int fb_info_pip_errors;
    public static int fb_info_pip_warns;
    public static int fb_info_pages_used;
    public static int fb_info_pages_free;
    public static int fb_info_ses_idle_timeout_db;
    public static int fb_info_ses_idle_timeout_att;
    public static int fb_info_ses_idle_timeout_run;
    public static int fb_info_conn_flags;
    public static int fb_info_crypt_key;
    public static int fb_info_crypt_state;
    public static int fb_info_statement_timeout_db;
    public static int fb_info_statement_timeout_att;
    public static int fb_info_protocol_version;
    public static int fb_info_crypt_plugin;
    public static int fb_info_creation_timestamp_tz;
    public static int fb_info_wire_crypt;
    public static int fb_info_features;
    public static int fb_info_next_attachment;
    public static int fb_info_next_statement;
    public static int fb_info_db_guid;
    public static int fb_info_db_file_id;
    public static int fb_info_replica_mode;
    public static int fb_info_username;
    public static int fb_info_sqlrole;
    public static int isc_info_number_messages;
    public static int isc_info_max_message;
    public static int isc_info_max_send;
    public static int isc_info_max_receive;
    public static int isc_info_state;
    public static int isc_info_message_number;
    public static int isc_info_message_size;
    public static int isc_info_request_cost;
    public static int isc_info_access_path;
    public static int isc_info_req_select_count;
    public static int isc_info_req_insert_count;
    public static int isc_info_req_update_count;
    public static int isc_info_req_delete_count;
    public static int isc_sdl_version1;
    public static int isc_sdl_eoc;
    public static int isc_sdl_relation;
    public static int isc_sdl_rid;
    public static int isc_sdl_field;
    public static int isc_sdl_fid;
    public static int isc_sdl_struct;
    public static int isc_sdl_variable;
    public static int isc_sdl_scalar;
    public static int isc_sdl_tiny_integer;
    public static int isc_sdl_short_integer;
    public static int isc_sdl_long_integer;
    public static int isc_sdl_literal;
    public static int isc_sdl_add;
    public static int isc_sdl_subtract;
    public static int isc_sdl_multiply;
    public static int isc_sdl_divide;
    public static int isc_sdl_negate;
    public static int isc_sdl_eql;
    public static int isc_sdl_neq;
    public static int isc_sdl_gtr;
    public static int isc_sdl_geq;
    public static int isc_sdl_lss;
    public static int isc_sdl_leq;
    public static int isc_sdl_and;
    public static int isc_sdl_or;
    public static int isc_sdl_not;
    public static int isc_sdl_while;
    public static int isc_sdl_assignment;
    public static int isc_sdl_label;
    public static int isc_sdl_leave;
    public static int isc_sdl_begin;
    public static int isc_sdl_end;
    public static int isc_sdl_do3;
    public static int isc_sdl_do2;
    public static int isc_sdl_do1;
    public static int isc_sdl_element;
    public static int isc_bpb_version1;
    public static int isc_bpb_source_type;
    public static int isc_bpb_target_type;
    public static int isc_bpb_type;
    public static int isc_bpb_source_interp;
    public static int isc_bpb_target_interp;
    public static int isc_bpb_filter_parameter;
    public static int isc_bpb_type_segmented;
    public static int isc_bpb_type_stream;
    public static int RBL_eof;
    public static int RBL_segment;
    public static int RBL_eof_pending;
    public static int RBL_create;
    public static int isc_info_blob_num_segments;
    public static int isc_info_blob_max_segment;
    public static int isc_info_blob_total_length;
    public static int isc_info_blob_type;
    public static int P_REQ_async;
    public static int EPB_version1;
    public static int isc_facility;
    public static int isc_err_base;
    public static int isc_err_factor;
    public static int isc_arg_end;
    public static int isc_arg_gds;
    public static int isc_arg_string;
    public static int isc_arg_cstring;
    public static int isc_arg_number;
    public static int isc_arg_interpreted;
    public static int isc_arg_vms;
    public static int isc_arg_unix;
    public static int isc_arg_domain;
    public static int isc_arg_dos;
    public static int isc_arg_mpexl;
    public static int isc_arg_mpexl_ipc;
    public static int isc_arg_next_mach;
    public static int isc_arg_netware;
    public static int isc_arg_win32;
    public static int isc_arg_warning;
    public static int isc_arg_sql_state;
    public static int isc_open_trans;
    public static int isc_segment;
    public static int isc_segstr_eof;
    public static int isc_connect_reject;
    public static int isc_invalid_dimension;
    public static int isc_tra_state;
    public static int isc_except;
    public static int isc_dsql_sqlda_err;
    public static int isc_network_error;
    public static int isc_net_read_err;
    public static int isc_net_write_err;
    public static int isc_stack_trace;
    public static int isc_except2;
    public static int isc_arith_except;
    public static int isc_string_truncation;
    public static int isc_formatted_exception;
    public static int isc_wirecrypt_incompatible;
    public static int isc_cancelled;
    public static int isc_nothing_to_cancel;
    public static int blr_version5;
    public static int blr_begin;
    public static int blr_message;
    public static int blr_eoc;
    public static int blr_end;
    public static int blr_text;
    public static int blr_text2;
    public static int blr_short;
    public static int blr_long;
    public static int blr_quad;
    public static int blr_int64;
    public static int blr_float;
    public static int blr_double;
    public static int blr_d_float;
    public static int blr_timestamp;
    public static int blr_varying;
    public static int blr_varying2;
    public static int blr_blob;
    public static int blr_cstring;
    public static int blr_cstring2;
    public static int blr_blob_id;
    public static int blr_sql_date;
    public static int blr_sql_time;
    public static int blr_bool;
    public static int blr_dec64;
    public static int blr_dec128;
    public static int blr_int128;
    public static int blr_sql_time_tz;
    public static int blr_timestamp_tz;
    public static int blr_ex_time_tz;
    public static int blr_ex_timestamp_tz;
    public static int blr_null;
    public static int SQL_TEXT;
    public static int SQL_VARYING;
    public static int SQL_SHORT;
    public static int SQL_LONG;
    public static int SQL_FLOAT;
    public static int SQL_DOUBLE;
    public static int SQL_D_FLOAT;
    public static int SQL_TIMESTAMP;
    public static int SQL_BLOB;
    public static int SQL_ARRAY;
    public static int SQL_QUAD;
    public static int SQL_TYPE_TIME;
    public static int SQL_TYPE_DATE;
    public static int SQL_INT64;
    public static int SQL_TIMESTAMP_TZ_EX;
    public static int SQL_TIME_TZ_EX;
    public static int SQL_INT128;
    public static int SQL_TIMESTAMP_TZ;
    public static int SQL_TIME_TZ;
    public static int SQL_DEC16;
    public static int SQL_DEC34;
    public static int SQL_BOOLEAN;
    public static int SQL_NULL;
    public static int SQL_DATE;
    public static int fb_cancel_disable;
    public static int fb_cancel_enable;
    public static int fb_cancel_raise;
    public static int fb_cancel_abort;
    public static int CNCT_user;
    public static int CNCT_passwd;
    public static int CNCT_host;
    public static int CNCT_group;
    public static int CNCT_user_verification;
    public static int CNCT_specific_data;
    public static int CNCT_plugin_name;
    public static int CNCT_login;
    public static int CNCT_plugin_list;
    public static int CNCT_client_crypt;
    public static int isc_info_tra_id;
    public static int isc_info_tra_oldest_interesting;
    public static int isc_info_tra_oldest_snapshot;
    public static int isc_info_tra_oldest_active;
    public static int isc_info_tra_isolation;
    public static int isc_info_tra_access;
    public static int isc_info_tra_lock_timeout;
    public static int fb_info_tra_dbpath;
    public static int fb_info_tra_snapshot_number;
    public static int isc_info_tra_consistency;
    public static int isc_info_tra_concurrency;
    public static int isc_info_tra_read_committed;
    public static int isc_info_tra_no_rec_version;
    public static int isc_info_tra_rec_version;
    public static int isc_info_tra_read_consistency;
    public static int isc_info_tra_readonly;
    public static int isc_info_tra_readwrite;
}
internal class FirebirdSql.Data.Common.IscError : object {
    private string _strParam;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    public string Message { get; public set; }
    public int ErrorCode { get; }
    public int Type { get; }
    public string StrParam { get; }
    public bool IsArgument { get; }
    public bool IsWarning { get; }
    internal IscError(int errorCode);
    internal IscError(int type, string strParam);
    internal IscError(int type, int errorCode);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public int get_Type();
    public string get_StrParam();
    public bool get_IsArgument();
    public bool get_IsWarning();
}
internal static class FirebirdSql.Data.Common.IscErrorMessages : object {
    private static Dictionary`2<int, string> _messages;
    private static IscErrorMessages();
    public static bool TryGet(int key, String& value);
}
internal class FirebirdSql.Data.Common.IscException : Exception {
    private string _message;
    [CompilerGeneratedAttribute]
private List`1<IscError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SQLSTATE>k__BackingField;
    public List`1<IscError> Errors { get; private set; }
    public int ErrorCode { get; private set; }
    public string SQLSTATE { get; private set; }
    public string Message { get; }
    public bool IsWarning { get; }
    private IscException(Exception innerException);
    [CompilerGeneratedAttribute]
public List`1<IscError> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(List`1<IscError> value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public string get_SQLSTATE();
    [CompilerGeneratedAttribute]
private void set_SQLSTATE(string value);
    public virtual string get_Message();
    public bool get_IsWarning();
    public static IscException ForBuilding();
    public static IscException ForErrorCode(int errorCode, Exception innerException);
    public static IscException ForErrorCodes(IEnumerable`1<int> errorCodes, Exception innerException);
    public static IscException ForSQLSTATE(string sqlState, Exception innerException);
    public static IscException ForStrParam(string strParam, Exception innerException);
    public static IscException ForErrorCodeIntParam(int errorCode, int intParam, Exception innerException);
    public static IscException ForTypeErrorCodeStrParam(int type, int errorCode, string strParam, Exception innerException);
    public static IscException ForTypeErrorCodeIntParamStrParam(int type, int errorCode, int intParam, string strParam, Exception innerException);
    public static IscException ForIOException(IOException exception);
    public void BuildExceptionData();
    private void BuildErrorCode();
    private void BuildSqlState();
    private void BuildExceptionMessage();
    private string BuildDefaultErrorMessage(int code);
    private static void AppendMessage(StringBuilder builder, string message, List`1<string> args);
}
internal static class FirebirdSql.Data.Common.IscHelper : object {
    public static List`1<object> ParseDatabaseInfo(Byte[] buffer, Charset charset);
    public static List`1<object> ParseTransactionInfo(Byte[] buffer, Charset charset);
    public static long VaxInteger(Byte[] buffer, int index, int length);
}
internal static class FirebirdSql.Data.Common.NamedParametersParser : object {
    public static ValueTuple`2<string, IReadOnlyList`1<string>> Parse(string sql);
}
internal static class FirebirdSql.Data.Common.NativeHelpers : object {
    public static void CallIfExists(Action action);
}
internal abstract class FirebirdSql.Data.Common.ParameterBuffer : object {
    private List`1<byte> _data;
    public short Length { get; }
    public short get_Length();
    public Byte[] ToArray();
    public void Append(int type);
    protected void WriteByte(int value);
    protected void WriteByte(byte value);
    protected void Write(byte value);
    protected void Write(short value);
    protected void Write(int value);
    protected void Write(long value);
    protected void Write(Byte[] buffer);
    protected void Write(Byte[] buffer, int offset, int count);
}
internal class FirebirdSql.Data.Common.RemoteEvent : object {
    private static int MaxEventNameLength;
    private static int MaxEpbLength;
    private List`1<string> _events;
    private DatabaseBase _database;
    private Int32[] _previousCounts;
    private Int32[] _currentCounts;
    private int _running;
    [CompilerGeneratedAttribute]
private int <LocalId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemoteId>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, int> <EventCountsCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <EventErrorCallback>k__BackingField;
    public int LocalId { get; public set; }
    public int RemoteId { get; public set; }
    public Action`2<string, int> EventCountsCallback { get; public set; }
    public Action`1<Exception> EventErrorCallback { get; public set; }
    public List`1<string> Events { get; }
    public DatabaseBase Database { get; }
    public RemoteEvent(DatabaseBase database);
    [CompilerGeneratedAttribute]
public int get_LocalId();
    [CompilerGeneratedAttribute]
public void set_LocalId(int value);
    [CompilerGeneratedAttribute]
public int get_RemoteId();
    [CompilerGeneratedAttribute]
public void set_RemoteId(int value);
    [CompilerGeneratedAttribute]
public Action`2<string, int> get_EventCountsCallback();
    [CompilerGeneratedAttribute]
public void set_EventCountsCallback(Action`2<string, int> value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_EventErrorCallback();
    [CompilerGeneratedAttribute]
public void set_EventErrorCallback(Action`1<Exception> value);
    public List`1<string> get_Events();
    public DatabaseBase get_Database();
    public void QueueEvents(ICollection`1<string> events);
    public ValueTask QueueEventsAsync(ICollection`1<string> events, CancellationToken cancellationToken);
    public void CancelEvents();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.RemoteEvent/<CancelEventsAsync>d__31")]
public ValueTask CancelEventsAsync(CancellationToken cancellationToken);
    internal void EventCounts(Byte[] buffer);
    internal void EventError(Exception error);
    internal EventParameterBuffer BuildEpb();
    private void EnsureNotRunning();
    private EventParameterBuffer BuildEpb(IList`1<string> events, Func`2<int, int> countFactory);
    private void EnsureEventsCollection(ICollection`1<string> events);
    [CompilerGeneratedAttribute]
private int <BuildEpb>b__34_0(int i);
}
internal abstract class FirebirdSql.Data.Common.ServiceManagerBase : object {
    [CompilerGeneratedAttribute]
private Action`1<IscException> <WarningMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private Charset <Charset>k__BackingField;
    public Action`1<IscException> WarningMessage { get; public set; }
    public bool UseUtf8ParameterBuffer { get; }
    public Encoding ParameterBufferEncoding { get; }
    public int Handle { get; protected set; }
    public Charset Charset { get; }
    public ServiceManagerBase(Charset charset);
    [CompilerGeneratedAttribute]
public Action`1<IscException> get_WarningMessage();
    [CompilerGeneratedAttribute]
public void set_WarningMessage(Action`1<IscException> value);
    public abstract virtual bool get_UseUtf8ParameterBuffer();
    public Encoding get_ParameterBufferEncoding();
    [CompilerGeneratedAttribute]
public int get_Handle();
    [CompilerGeneratedAttribute]
protected void set_Handle(int value);
    [CompilerGeneratedAttribute]
public Charset get_Charset();
    public abstract virtual void Attach(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey);
    public abstract virtual ValueTask AttachAsync(ServiceParameterBufferBase spb, string dataSource, int port, string service, Byte[] cryptKey, CancellationToken cancellationToken);
    public abstract virtual void Detach();
    public abstract virtual ValueTask DetachAsync(CancellationToken cancellationToken);
    public abstract virtual void Start(ServiceParameterBufferBase spb);
    public abstract virtual ValueTask StartAsync(ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    public abstract virtual void Query(ServiceParameterBufferBase spb, int requestLength, Byte[] requestBuffer, int bufferLength, Byte[] buffer);
    public abstract virtual ValueTask QueryAsync(ServiceParameterBufferBase spb, int requestLength, Byte[] requestBuffer, int bufferLength, Byte[] buffer, CancellationToken cancellationToken);
    public abstract virtual ServiceParameterBufferBase CreateServiceParameterBuffer();
}
internal class FirebirdSql.Data.Common.ServiceParameterBuffer2 : ServiceParameterBufferBase {
    public ServiceParameterBuffer2(Encoding encoding);
    public virtual void AppendPreamble();
    public virtual void Append1(int type, Byte[] value);
    public virtual void Append2(int type, Byte[] value);
    public virtual void Append(int type, byte value);
    public virtual void Append(int type, int value);
}
internal class FirebirdSql.Data.Common.ServiceParameterBuffer3 : ServiceParameterBufferBase {
    public ServiceParameterBuffer3(Encoding encoding);
    public virtual void AppendPreamble();
    public virtual void Append1(int type, Byte[] value);
    public virtual void Append2(int type, Byte[] value);
    public virtual void Append(int type, byte value);
    public virtual void Append(int type, int value);
}
internal abstract class FirebirdSql.Data.Common.ServiceParameterBufferBase : ParameterBuffer {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public ServiceParameterBufferBase(Encoding encoding);
    public abstract virtual void AppendPreamble();
    public abstract virtual void Append1(int type, Byte[] value);
    public abstract virtual void Append2(int type, Byte[] value);
    public abstract virtual void Append(int type, byte value);
    public abstract virtual void Append(int type, int value);
    public void Append1(int type, string value);
    public void Append2(int type, string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
}
internal static class FirebirdSql.Data.Common.ShutdownHelper : object {
    private static ConcurrentBag`1<Action> _pools;
    private static ConcurrentBag`1<Action> _fbClients;
    private static ShutdownHelper();
    internal static void RegisterPoolCleanup(Action item);
    internal static void RegisterFbClientShutdown(Action item);
    private static void HandleDomainUnload();
    private static void HandleProcessShutdown();
}
internal static class FirebirdSql.Data.Common.SizeHelper : object {
    public static bool IsValidPageSize(int value);
    public static bool IsValidBatchBufferSize(int value);
    public static Exception InvalidSizeException(string what);
}
internal static class FirebirdSql.Data.Common.SqlStateMapping : object {
    private static Dictionary`2<int, string> _mapping;
    private static SqlStateMapping();
    public static bool TryGet(int key, String& value);
}
internal abstract class FirebirdSql.Data.Common.StatementBase : object {
    protected static Byte[] DescribePlanInfoItems;
    protected static Byte[] DescribeExplaindPlanInfoItems;
    protected static Byte[] RowsAffectedInfoItems;
    protected static Byte[] DescribeInfoAndBindInfoItems;
    protected static Byte[] StatementTypeInfoItems;
    protected EventHandler TransactionUpdate;
    [CompilerGeneratedAttribute]
private Queue`1<DbValue[]> <OutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private DbStatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private StatementState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecordsAffected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnRecordsAffected>k__BackingField;
    public DatabaseBase Database { get; }
    public TransactionBase Transaction { get; public set; }
    public Descriptor Parameters { get; public set; }
    public Descriptor Fields { get; }
    public int FetchSize { get; public set; }
    protected Queue`1<DbValue[]> OutputParameters { get; protected set; }
    public DbStatementType StatementType { get; protected set; }
    public StatementState State { get; protected set; }
    public int RecordsAffected { get; protected set; }
    public bool ReturnRecordsAffected { get; public set; }
    public bool IsPrepared { get; }
    public bool DoRecordsAffected { get; }
    private static StatementBase();
    public abstract virtual DatabaseBase get_Database();
    public abstract virtual TransactionBase get_Transaction();
    public abstract virtual void set_Transaction(TransactionBase value);
    public abstract virtual Descriptor get_Parameters();
    public abstract virtual void set_Parameters(Descriptor value);
    public abstract virtual Descriptor get_Fields();
    public abstract virtual int get_FetchSize();
    public abstract virtual void set_FetchSize(int value);
    [CompilerGeneratedAttribute]
protected Queue`1<DbValue[]> get_OutputParameters();
    [CompilerGeneratedAttribute]
protected void set_OutputParameters(Queue`1<DbValue[]> value);
    [CompilerGeneratedAttribute]
public DbStatementType get_StatementType();
    [CompilerGeneratedAttribute]
protected void set_StatementType(DbStatementType value);
    [CompilerGeneratedAttribute]
public StatementState get_State();
    [CompilerGeneratedAttribute]
protected void set_State(StatementState value);
    [CompilerGeneratedAttribute]
public int get_RecordsAffected();
    [CompilerGeneratedAttribute]
protected void set_RecordsAffected(int value);
    [CompilerGeneratedAttribute]
public bool get_ReturnRecordsAffected();
    [CompilerGeneratedAttribute]
public void set_ReturnRecordsAffected(bool value);
    public bool get_IsPrepared();
    public bool get_DoRecordsAffected();
    public virtual void Dispose2();
    public virtual ValueTask Dispose2Async(CancellationToken cancellationToken);
    public string GetExecutionPlan();
    public ValueTask`1<string> GetExecutionPlanAsync(CancellationToken cancellationToken);
    public string GetExecutionExplainedPlan();
    public ValueTask`1<string> GetExecutionExplainedPlanAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.StatementBase/<CloseAsync>d__50")]
public virtual ValueTask CloseAsync(CancellationToken cancellationToken);
    public virtual void Release();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.StatementBase/<ReleaseAsync>d__52")]
public virtual ValueTask ReleaseAsync(CancellationToken cancellationToken);
    public abstract virtual void Prepare(string commandText);
    public abstract virtual ValueTask PrepareAsync(string commandText, CancellationToken cancellationToken);
    public abstract virtual void Execute(int timeout, IDescriptorFiller descriptorFiller);
    public abstract virtual ValueTask ExecuteAsync(int timeout, IDescriptorFiller descriptorFiller, CancellationToken cancellationToken);
    public abstract virtual DbValue[] Fetch();
    public abstract virtual ValueTask`1<DbValue[]> FetchAsync(CancellationToken cancellationToken);
    public abstract virtual BlobBase CreateBlob();
    public abstract virtual BlobBase CreateBlob(long handle);
    public abstract virtual ArrayBase CreateArray(ArrayDesc descriptor);
    public abstract virtual ValueTask`1<ArrayBase> CreateArrayAsync(ArrayDesc descriptor, CancellationToken cancellationToken);
    public abstract virtual ArrayBase CreateArray(string tableName, string fieldName);
    public abstract virtual ValueTask`1<ArrayBase> CreateArrayAsync(string tableName, string fieldName, CancellationToken cancellationToken);
    public abstract virtual ArrayBase CreateArray(long handle, string tableName, string fieldName);
    public abstract virtual ValueTask`1<ArrayBase> CreateArrayAsync(long handle, string tableName, string fieldName, CancellationToken cancellationToken);
    public abstract virtual BatchBase CreateBatch();
    public abstract virtual BatchParameterBuffer CreateBatchParameterBuffer();
    protected abstract virtual void TransactionUpdated(object sender, EventArgs e);
    protected abstract virtual Byte[] GetSqlInfo(Byte[] items, int bufferLength);
    protected abstract virtual ValueTask`1<Byte[]> GetSqlInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    protected abstract virtual void Free(int option);
    protected abstract virtual ValueTask FreeAsync(int option, CancellationToken cancellationToken);
    public DbValue[] GetOutputParameters();
    protected Byte[] GetSqlInfo(Byte[] items);
    protected ValueTask`1<Byte[]> GetSqlInfoAsync(Byte[] items, CancellationToken cancellationToken);
    protected int GetRecordsAffected();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.StatementBase/<GetRecordsAffectedAsync>d__78")]
protected ValueTask`1<int> GetRecordsAffectedAsync(CancellationToken cancellationToken);
    protected int ProcessRecordsAffectedBuffer(Byte[] buffer);
    protected DbStatementType GetStatementType();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.StatementBase/<GetStatementTypeAsync>d__81")]
protected ValueTask`1<DbStatementType> GetStatementTypeAsync(CancellationToken cancellationToken);
    protected DbStatementType ProcessStatementTypeInfoBuffer(Byte[] buffer);
    protected void ClearArrayHandles();
    protected string GetPlanInfo(Byte[] planInfoItems);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Common.StatementBase/<GetPlanInfoAsync>d__85")]
protected ValueTask`1<string> GetPlanInfoAsync(Byte[] planInfoItems, CancellationToken cancellationToken);
    protected void EnsureNotDeallocated();
}
internal enum FirebirdSql.Data.Common.StatementState : Enum {
    public int value__;
    public static StatementState Deallocated;
    public static StatementState Allocated;
    public static StatementState Prepared;
    public static StatementState Executed;
    public static StatementState Closed;
    public static StatementState Error;
}
internal class FirebirdSql.Data.Common.TimeZoneMapping : object {
    private static Dictionary`2<ushort, string> _idToName;
    private static Dictionary`2<string, ushort> _nameToId;
    public static string DefaultTimeZoneName;
    private static TimeZoneMapping();
    public static bool TryGetByName(string name, UInt16& id);
    public static bool TryGetById(ushort id, String& name);
}
internal abstract class FirebirdSql.Data.Common.TransactionBase : object {
    [CompilerGeneratedAttribute]
private TransactionState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Update;
    public int Handle { get; }
    public TransactionState State { get; protected set; }
    public abstract virtual int get_Handle();
    [CompilerGeneratedAttribute]
public TransactionState get_State();
    [CompilerGeneratedAttribute]
protected void set_State(TransactionState value);
    [CompilerGeneratedAttribute]
public void add_Update(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Update(EventHandler value);
    public abstract virtual void BeginTransaction(TransactionParameterBuffer tpb);
    public abstract virtual ValueTask BeginTransactionAsync(TransactionParameterBuffer tpb, CancellationToken cancellationToken);
    public abstract virtual void Commit();
    public abstract virtual ValueTask CommitAsync(CancellationToken cancellationToken);
    public abstract virtual void CommitRetaining();
    public abstract virtual ValueTask CommitRetainingAsync(CancellationToken cancellationToken);
    public abstract virtual void Rollback();
    public abstract virtual ValueTask RollbackAsync(CancellationToken cancellationToken);
    public abstract virtual void RollbackRetaining();
    public abstract virtual ValueTask RollbackRetainingAsync(CancellationToken cancellationToken);
    public abstract virtual void Prepare();
    public abstract virtual ValueTask PrepareAsync(CancellationToken cancellationToken);
    public abstract virtual void Prepare(Byte[] buffer);
    public abstract virtual ValueTask PrepareAsync(Byte[] buffer, CancellationToken cancellationToken);
    public abstract virtual List`1<object> GetTransactionInfo(Byte[] items);
    public abstract virtual ValueTask`1<List`1<object>> GetTransactionInfoAsync(Byte[] items, CancellationToken cancellationToken);
    public abstract virtual List`1<object> GetTransactionInfo(Byte[] items, int bufferLength);
    public abstract virtual ValueTask`1<List`1<object>> GetTransactionInfoAsync(Byte[] items, int bufferLength, CancellationToken cancellationToken);
    public virtual void Dispose2();
    public virtual ValueTask Dispose2Async(CancellationToken cancellationToken);
    protected void EnsureActiveTransactionState();
    protected void OnUpdate(EventArgs e);
}
internal class FirebirdSql.Data.Common.TransactionParameterBuffer : ParameterBuffer {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public TransactionParameterBuffer(Encoding encoding);
    public void Append(int type, short value);
    public void Append(int type, int value);
    public void Append(int type, long value);
    public void Append(int type, Byte[] buffer);
    public void Append(int type, string content);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
}
internal enum FirebirdSql.Data.Common.TransactionState : Enum {
    public int value__;
    public static TransactionState NoTransaction;
    public static TransactionState Active;
    public static TransactionState Prepared;
}
internal static class FirebirdSql.Data.Common.TypeDecoder : object {
    public static decimal DecodeDecimal(object value, int scale, int type);
    public static TimeSpan DecodeTime(int sqlTime);
    public static DateTime DecodeDate(int sqlDate);
    private static ValueTuple`3<int, int, int> DecodeDateImpl(int sqlDate);
    public static bool DecodeBoolean(Byte[] value);
    public static Guid DecodeGuid(Byte[] value);
    public static int DecodeInt32(Byte[] value);
    public static long DecodeInt64(Byte[] value);
    public static FbDecFloat DecodeDec16(Byte[] value);
    public static FbDecFloat DecodeDec34(Byte[] value);
    public static BigInteger DecodeInt128(Byte[] value);
}
internal static class FirebirdSql.Data.Common.TypeEncoder : object {
    public static object EncodeDecimal(decimal d, int scale, int type);
    public static int EncodeTime(TimeSpan t);
    public static int EncodeDate(DateTime d);
    private static int EncodeDateImpl(int year, int month, int day);
    public static Byte[] EncodeBoolean(bool value);
    public static Byte[] EncodeGuid(Guid value);
    public static Byte[] EncodeInt32(int value);
    public static Byte[] EncodeInt64(long value);
    public static Byte[] EncodeDec16(FbDecFloat value);
    public static Byte[] EncodeDec34(FbDecFloat value);
    public static Byte[] EncodeInt128(BigInteger value);
}
internal static class FirebirdSql.Data.Common.TypeHelper : object {
    public static bool IsDBNull(object value);
    public static Nullable`1<short> GetSize(DbDataType type);
    public static int GetSqlTypeFromDbDataType(DbDataType type, bool isNullable);
    public static int GetSqlTypeFromBlrType(int type);
    public static string GetDataTypeName(DbDataType type);
    public static Type GetTypeFromDbDataType(DbDataType type);
    public static FbDbType GetFbDataTypeFromType(Type type);
    public static Type GetTypeFromBlrType(int type, int subType, int scale);
    public static DbType GetDbTypeFromDbDataType(DbDataType type);
    public static DbDataType GetDbDataTypeFromDbType(DbType type);
    public static DbDataType GetDbDataTypeFromBlrType(int type, int subType, int scale);
    public static DbDataType GetDbDataTypeFromSqlType(int type, int subType, int scale, Nullable`1<int> length, Charset charset);
    public static DbDataType GetDbDataTypeFromFbDbType(FbDbType type);
    public static TimeSpan DateTimeTimeToTimeSpan(DateTime d);
    public static FbZonedDateTime CreateZonedDateTime(DateTime dateTime, ushort tzId, Nullable`1<short> offset);
    public static FbZonedTime CreateZonedTime(TimeSpan time, ushort tzId, Nullable`1<short> offset);
    public static Exception InvalidDataType(int type);
    public static int BlrAlign(int current, int alignment);
}
internal static class FirebirdSql.Data.Common.ValueTask2 : object {
    public static ValueTask CompletedTask { get; }
    public static ValueTask`1<TResult> FromResult(TResult result);
    public static ValueTask get_CompletedTask();
}
public class FirebirdSql.Data.FirebirdClient.FbBatchCommand : object {
    private static IFbLogger Log;
    private static int DefaultBatchBufferSize;
    private FbConnection _connection;
    private FbTransaction _transaction;
    private FbBatchParameterCollection _batchParameters;
    private StatementBase _statement;
    private BatchBase _batch;
    private IReadOnlyList`1<string> _namedParameters;
    private string _commandText;
    private bool _disposed;
    private bool _implicitTransaction;
    private bool _multiError;
    private int _batchBufferSize;
    public string CommandText { get; public set; }
    public FbConnection Connection { get; public set; }
    public FbBatchParameterCollection BatchParameters { get; }
    public FbTransaction Transaction { get; public set; }
    public bool MultiError { get; public set; }
    public int BatchBufferSize { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IReadOnlyList`1<string> NamedParameters { get; }
    internal bool IsDisposed { get; }
    internal FbTransaction ActiveTransaction { get; }
    internal bool HasImplicitTransaction { get; }
    internal bool HasParameters { get; }
    public FbBatchCommand(string cmdText);
    public FbBatchCommand(string cmdText, FbConnection connection);
    public FbBatchCommand(string cmdText, FbConnection connection, FbTransaction transaction);
    private static FbBatchCommand();
    public string get_CommandText();
    public void set_CommandText(string value);
    public FbConnection get_Connection();
    public void set_Connection(FbConnection value);
    public FbBatchParameterCollection get_BatchParameters();
    public FbTransaction get_Transaction();
    public void set_Transaction(FbTransaction value);
    public bool get_MultiError();
    public void set_MultiError(bool value);
    public int get_BatchBufferSize();
    public void set_BatchBufferSize(int value);
    public IReadOnlyList`1<string> get_NamedParameters();
    internal bool get_IsDisposed();
    internal FbTransaction get_ActiveTransaction();
    internal bool get_HasImplicitTransaction();
    internal bool get_HasParameters();
    public sealed virtual void Dispose();
    public void Cancel();
    public FbParameter CreateParameter();
    public FbParameterCollection AddBatchParameters();
    public void Prepare();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<PrepareAsync>d__49")]
public Task PrepareAsync(CancellationToken cancellationToken);
    public FbBatchNonQueryResult ExecuteNonQuery();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<ExecuteNonQueryAsync>d__51")]
public Task`1<FbBatchNonQueryResult> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public string GetCommandPlan();
    public Task`1<string> GetCommandPlanAsync(CancellationToken cancellationToken);
    public string GetCommandExplainedPlan();
    public Task`1<string> GetCommandExplainedPlanAsync(CancellationToken cancellationToken);
    public int ComputeCurrentBatchSize();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<ComputeCurrentBatchSizeAsync>d__57")]
public Task`1<int> ComputeCurrentBatchSizeAsync(CancellationToken cancellationToken);
    internal void CommitImplicitTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<CommitImplicitTransactionAsync>d__59")]
internal Task CommitImplicitTransactionAsync(CancellationToken cancellationToken);
    internal void RollbackImplicitTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<RollbackImplicitTransactionAsync>d__61")]
internal Task RollbackImplicitTransactionAsync(CancellationToken cancellationToken);
    internal void Close();
    internal Task CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.Release();
    internal void Release();
    private sealed virtual override Task FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.ReleaseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<ReleaseAsync>d__67")]
internal Task ReleaseAsync(CancellationToken cancellationToken);
    private sealed virtual override void FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.TransactionCompleted();
    internal void TransactionCompleted();
    private sealed virtual override Task FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.TransactionCompletedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<TransactionCompletedAsync>d__71")]
internal Task TransactionCompletedAsync(CancellationToken cancellationToken);
    private sealed virtual override void FirebirdSql.Data.Common.IDescriptorFiller.Fill(Descriptor descriptor, int index);
    private void UpdateParameterValues(Descriptor descriptor, int batchIndex);
    private sealed virtual override ValueTask FirebirdSql.Data.Common.IDescriptorFiller.FillAsync(Descriptor descriptor, int index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<UpdateParameterValuesAsync>d__75")]
private ValueTask UpdateParameterValuesAsync(Descriptor descriptor, int batchIndex, CancellationToken cancellationToken);
    private void Prepare(bool returnsSet);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<PrepareAsync>d__77")]
private Task PrepareAsync(bool returnsSet, CancellationToken cancellationToken);
    private FbBatchNonQueryResult ExecuteCommand(bool returnsSet);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbBatchCommand/<ExecuteCommandAsync>d__79")]
private Task`1<FbBatchNonQueryResult> ExecuteCommandAsync(bool returnsSet, CancellationToken cancellationToken);
    private void CheckCommand();
}
[DefaultMemberAttribute("Item")]
public class FirebirdSql.Data.FirebirdClient.FbBatchNonQueryResult : object {
    private List`1<FbBatchNonQueryResultItem> _items;
    public bool AllSuccess { get; }
    public int Count { get; }
    public FbBatchNonQueryResultItem Item { get; }
    internal FbBatchNonQueryResult(ExecuteResultItem[] result);
    public bool get_AllSuccess();
    public int get_Count();
    public FbBatchNonQueryResultItem get_Item(int index);
    public void EnsureSuccess();
    public sealed virtual IEnumerator`1<FbBatchNonQueryResultItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class FirebirdSql.Data.FirebirdClient.FbBatchParameterCollection : object {
    private List`1<FbParameterCollection> _inner;
    public FbParameterCollection Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual FbParameterCollection get_Item(int index);
    public sealed virtual void set_Item(int index, FbParameterCollection value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(FbParameterCollection item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(FbParameterCollection item);
    public sealed virtual void CopyTo(FbParameterCollection[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<FbParameterCollection> GetEnumerator();
    public sealed virtual int IndexOf(FbParameterCollection item);
    public sealed virtual void Insert(int index, FbParameterCollection item);
    public sealed virtual bool Remove(FbParameterCollection item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum FirebirdSql.Data.FirebirdClient.FbCharset : Enum {
    public int value__;
    public static FbCharset Default;
    public static FbCharset None;
    public static FbCharset Octets;
    public static FbCharset Ascii;
    public static FbCharset UnicodeFss;
    public static FbCharset Utf8;
    public static FbCharset ShiftJis0208;
    public static FbCharset EucJapanese0208;
    public static FbCharset Iso2022Japanese;
    public static FbCharset Dos437;
    public static FbCharset Dos850;
    public static FbCharset Dos865;
    public static FbCharset Dos860;
    public static FbCharset Dos863;
    public static FbCharset Iso8859_1;
    public static FbCharset Iso8859_2;
    public static FbCharset Ksc5601;
    public static FbCharset Dos861;
    public static FbCharset Windows1250;
    public static FbCharset Windows1251;
    public static FbCharset Windows1252;
    public static FbCharset Windows1253;
    public static FbCharset Windows1254;
    public static FbCharset Big5;
    public static FbCharset Gb2312;
    public static FbCharset Windows1255;
    public static FbCharset Windows1256;
    public static FbCharset Windows1257;
    public static FbCharset Koi8R;
    public static FbCharset Koi8U;
    public static FbCharset TIS620;
}
public class FirebirdSql.Data.FirebirdClient.FbCommand : DbCommand {
    private static IFbLogger Log;
    private CommandType _commandType;
    private UpdateRowSource _updatedRowSource;
    private FbConnection _connection;
    private FbTransaction _transaction;
    private FbParameterCollection _parameters;
    private StatementBase _statement;
    private FbDataReader _activeReader;
    private IReadOnlyList`1<string> _namedParameters;
    private string _commandText;
    private bool _disposed;
    private bool _designTimeVisible;
    private bool _implicitTransaction;
    private Nullable`1<int> _commandTimeout;
    private int _fetchSize;
    private Type[] _expectedColumnTypes;
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string CommandText { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public CommandType CommandType { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("0")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
public FbConnection Connection { get; public set; }
    [CategoryAttribute("Data")]
[DesignerSerializationVisibilityAttribute("2")]
public FbParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FbTransaction Transaction { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("200")]
public int FetchSize { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IReadOnlyList`1<string> NamedParameters { get; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbTransaction DbTransaction { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    [BrowsableAttribute("False")]
[DesignOnlyAttribute("True")]
[DefaultValueAttribute("True")]
public bool DesignTimeVisible { get; public set; }
    internal int RecordsAffected { get; }
    internal bool IsDisposed { get; }
    internal FbDataReader ActiveReader { get; internal set; }
    internal FbTransaction ActiveTransaction { get; }
    internal bool HasImplicitTransaction { get; }
    internal bool HasFields { get; }
    internal bool HasParameters { get; }
    internal bool IsDDLCommand { get; }
    internal Type[] ExpectedColumnTypes { get; }
    public FbCommand(string cmdText);
    public FbCommand(string cmdText, FbConnection connection);
    public FbCommand(string cmdText, FbConnection connection, FbTransaction transaction);
    private static FbCommand();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public FbConnection get_Connection();
    public void set_Connection(FbConnection value);
    public FbParameterCollection get_Parameters();
    public FbTransaction get_Transaction();
    public void set_Transaction(FbTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public int get_FetchSize();
    public void set_FetchSize(int value);
    public IReadOnlyList`1<string> get_NamedParameters();
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    internal int get_RecordsAffected();
    internal bool get_IsDisposed();
    internal FbDataReader get_ActiveReader();
    internal void set_ActiveReader(FbDataReader value);
    internal FbTransaction get_ActiveTransaction();
    internal bool get_HasImplicitTransaction();
    internal bool get_HasFields();
    internal bool get_HasParameters();
    internal bool get_IsDDLCommand();
    internal Type[] get_ExpectedColumnTypes();
    public static FbCommand CreateWithTypeCoercions(Type[] expectedColumnTypes);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual void Cancel();
    public FbParameter CreateParameter();
    public virtual void Prepare();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<PrepareAsync>d__81")]
public Task PrepareAsync(CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<ExecuteNonQueryAsync>d__83")]
public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public FbDataReader ExecuteReader();
    public Task`1<FbDataReader> ExecuteReaderAsync();
    public Task`1<FbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public FbDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<FbDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<ExecuteReaderAsync>d__89")]
public Task`1<FbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<ExecuteScalarAsync>d__91")]
public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public string GetCommandPlan();
    public Task`1<string> GetCommandPlanAsync(CancellationToken cancellationToken);
    public string GetCommandExplainedPlan();
    public Task`1<string> GetCommandExplainedPlanAsync(CancellationToken cancellationToken);
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<ExecuteDbDataReaderAsync>d__98")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    internal void DisposeReader();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<DisposeReaderAsync>d__100")]
internal Task DisposeReaderAsync(CancellationToken cancellationToken);
    internal DbValue[] Fetch();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<FetchAsync>d__102")]
internal Task`1<DbValue[]> FetchAsync(CancellationToken cancellationToken);
    internal Descriptor GetFieldsDescriptor();
    internal void SetOutputParameters();
    internal Task SetOutputParametersAsync(CancellationToken cancellationToken);
    internal void SetOutputParameters(DbValue[] outputParameterValues);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<SetOutputParametersAsync>d__107")]
internal Task SetOutputParametersAsync(DbValue[] outputParameterValues, CancellationToken cancellationToken);
    internal void CommitImplicitTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<CommitImplicitTransactionAsync>d__109")]
internal Task CommitImplicitTransactionAsync(CancellationToken cancellationToken);
    internal void RollbackImplicitTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<RollbackImplicitTransactionAsync>d__111")]
internal Task RollbackImplicitTransactionAsync(CancellationToken cancellationToken);
    internal void Close();
    internal Task CloseAsync(CancellationToken cancellationToken);
    private sealed virtual override void FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.Release();
    internal void Release();
    private sealed virtual override Task FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.ReleaseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<ReleaseAsync>d__117")]
internal Task ReleaseAsync(CancellationToken cancellationToken);
    private sealed virtual override void FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.TransactionCompleted();
    internal void TransactionCompleted();
    private sealed virtual override Task FirebirdSql.Data.FirebirdClient.IFbPreparedCommand.TransactionCompletedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<TransactionCompletedAsync>d__121")]
internal Task TransactionCompletedAsync(CancellationToken cancellationToken);
    private sealed virtual override void FirebirdSql.Data.Common.IDescriptorFiller.Fill(Descriptor descriptor, int index);
    private void UpdateParameterValues(Descriptor descriptor);
    private sealed virtual override ValueTask FirebirdSql.Data.Common.IDescriptorFiller.FillAsync(Descriptor descriptor, int index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<UpdateParameterValuesAsync>d__125")]
private ValueTask UpdateParameterValuesAsync(Descriptor descriptor, CancellationToken cancellationToken);
    private void Prepare(bool returnsSet);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<PrepareAsync>d__127")]
private Task PrepareAsync(bool returnsSet, CancellationToken cancellationToken);
    private void ExecuteCommand(CommandBehavior behavior, bool returnsSet);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbCommand/<ExecuteCommandAsync>d__129")]
private Task ExecuteCommandAsync(CommandBehavior behavior, bool returnsSet, CancellationToken cancellationToken);
    private string BuildStoredProcedureSql(string spName, bool returnsSet);
    private void CheckCommand();
}
public class FirebirdSql.Data.FirebirdClient.FbCommandBuilder : DbCommandBuilder {
    private EventHandler`1<FbRowUpdatingEventArgs> _rowUpdatingHandler;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string QuotePrefix { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string QuoteSuffix { get; public set; }
    [DefaultValueAttribute("")]
public FbDataAdapter DataAdapter { get; public set; }
    public FbCommandBuilder(FbDataAdapter adapter);
    public static void DeriveParameters(FbCommand command);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public FbDataAdapter get_DataAdapter();
    public void set_DataAdapter(FbDataAdapter value);
    public FbCommand GetInsertCommand();
    public FbCommand GetInsertCommand(bool useColumnsForParameterNames);
    public FbCommand GetUpdateCommand();
    public FbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public FbCommand GetDeleteCommand();
    public FbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    protected virtual void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdatingHandler(object sender, FbRowUpdatingEventArgs e);
}
[DefaultEventAttribute("InfoMessage")]
public class FirebirdSql.Data.FirebirdClient.FbConnection : DbConnection {
    private static IFbLogger Log;
    [CompilerGeneratedAttribute]
private StateChangeEventHandler StateChange;
    [CompilerGeneratedAttribute]
private EventHandler`1<FbInfoMessageEventArgs> InfoMessage;
    private FbConnectionInternal _innerConnection;
    private ConnectionState _state;
    private ConnectionString _options;
    private bool _disposed;
    private string _connectionString;
    [CategoryAttribute("Data")]
[SettingsBindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public int ConnectionTimeout { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public string DataSource { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public int PacketSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public int CommandTimeout { get; }
    internal FbConnectionInternal InnerConnection { get; }
    internal ConnectionString ConnectionOptions { get; }
    internal bool IsClosed { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    public FbConnection(string connectionString);
    private static FbConnection();
    public static void ClearAllPools();
    public static void ClearPool(FbConnection connection);
    public static void ClearPool(string connectionString);
    public static void CreateDatabase(string connectionString, int pageSize, bool forcedWrites, bool overwrite);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnection/<CreateDatabaseAsync>d__5")]
public static Task CreateDatabaseAsync(string connectionString, int pageSize, bool forcedWrites, bool overwrite, CancellationToken cancellationToken);
    public static void DropDatabase(string connectionString);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnection/<DropDatabaseAsync>d__7")]
public static Task DropDatabaseAsync(string connectionString, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public virtual void add_StateChange(StateChangeEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_StateChange(StateChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_InfoMessage(EventHandler`1<FbInfoMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InfoMessage(EventHandler`1<FbInfoMessageEventArgs> value);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    public int get_PacketSize();
    public int get_CommandTimeout();
    internal FbConnectionInternal get_InnerConnection();
    internal ConnectionString get_ConnectionOptions();
    internal bool get_IsClosed();
    protected virtual DbProviderFactory get_DbProviderFactory();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object System.ICloneable.Clone();
    public FbTransaction BeginTransaction();
    public Task`1<FbTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public FbTransaction BeginTransaction(IsolationLevel level);
    public Task`1<FbTransaction> BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken);
    public FbTransaction BeginTransaction(string transactionName);
    public Task`1<FbTransaction> BeginTransactionAsync(string transactionName, CancellationToken cancellationToken);
    public FbTransaction BeginTransaction(IsolationLevel level, string transactionName);
    public Task`1<FbTransaction> BeginTransactionAsync(IsolationLevel level, string transactionName, CancellationToken cancellationToken);
    public FbTransaction BeginTransaction(FbTransactionOptions options);
    public Task`1<FbTransaction> BeginTransactionAsync(FbTransactionOptions options, CancellationToken cancellationToken);
    public FbTransaction BeginTransaction(FbTransactionOptions options, string transactionName);
    public Task`1<FbTransaction> BeginTransactionAsync(FbTransactionOptions options, string transactionName, CancellationToken cancellationToken);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public Task`1<DataTable> GetSchemaAsync(CancellationToken cancellationToken);
    public virtual DataTable GetSchema(string collectionName);
    public Task`1<DataTable> GetSchemaAsync(string collectionName, CancellationToken cancellationToken);
    public virtual DataTable GetSchema(string collectionName, String[] restrictions);
    public Task`1<DataTable> GetSchemaAsync(string collectionName, String[] restrictions, CancellationToken cancellationToken);
    public FbCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    public FbBatchCommand CreateBatchCommand();
    public virtual void ChangeDatabase(string databaseName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnection/<ChangeDatabaseAsync>d__72")]
public Task ChangeDatabaseAsync(string databaseName, CancellationToken cancellationToken);
    public virtual void Open();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnection/<OpenAsync>d__74")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnection/<CloseAsync>d__76")]
public Task CloseAsync();
    private void CheckClosed();
    private void OnWarningMessage(IscException warning);
    private void OnStateChange(ConnectionState originalState, ConnectionState currentState);
    public void EnableCancel();
    public Task EnableCancelAsync(CancellationToken cancellationToken);
    public void DisableCancel();
    public Task DisableCancelAsync(CancellationToken cancellationToken);
    public void CancelCommand();
    public Task CancelCommandAsync(CancellationToken cancellationToken);
    internal static void EnsureOpen(FbConnection connection);
    [CompilerGeneratedAttribute]
private void <Close>g__DisconnectEnlistedHelper|75_0();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnection/<<CloseAsync>g__DisconnectEnlistedHelper|76_0>d")]
[CompilerGeneratedAttribute]
private Task <CloseAsync>g__DisconnectEnlistedHelper|76_0();
}
internal class FirebirdSql.Data.FirebirdClient.FbConnectionInternal : object {
    private DatabaseBase _db;
    private FbTransaction _activeTransaction;
    private HashSet`1<IFbPreparedCommand> _preparedCommands;
    private ConnectionString _connectionStringOptions;
    private FbConnection _owningConnection;
    private FbEnlistmentNotification _enlistmentNotification;
    [CompilerGeneratedAttribute]
private bool <CancelDisabled>k__BackingField;
    public DatabaseBase Database { get; }
    public bool HasActiveTransaction { get; }
    public FbTransaction ActiveTransaction { get; }
    public FbConnection OwningConnection { get; }
    public bool IsEnlisted { get; }
    public ConnectionString ConnectionStringOptions { get; }
    public bool CancelDisabled { get; private set; }
    public FbConnectionInternal(ConnectionString options);
    public DatabaseBase get_Database();
    public bool get_HasActiveTransaction();
    public FbTransaction get_ActiveTransaction();
    public FbConnection get_OwningConnection();
    public bool get_IsEnlisted();
    public ConnectionString get_ConnectionStringOptions();
    [CompilerGeneratedAttribute]
public bool get_CancelDisabled();
    [CompilerGeneratedAttribute]
private void set_CancelDisabled(bool value);
    public void CreateDatabase(int pageSize, bool forcedWrites, bool overwrite);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<CreateDatabaseAsync>d__24")]
public Task CreateDatabaseAsync(int pageSize, bool forcedWrites, bool overwrite, CancellationToken cancellationToken);
    public void DropDatabase();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<DropDatabaseAsync>d__26")]
public Task DropDatabaseAsync(CancellationToken cancellationToken);
    public void Connect();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<ConnectAsync>d__28")]
public Task ConnectAsync(CancellationToken cancellationToken);
    public void Disconnect();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<DisconnectAsync>d__30")]
public Task DisconnectAsync(CancellationToken cancellationToken);
    public FbTransaction BeginTransaction(IsolationLevel level, string transactionName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<BeginTransactionAsync>d__32")]
public Task`1<FbTransaction> BeginTransactionAsync(IsolationLevel level, string transactionName, CancellationToken cancellationToken);
    public FbTransaction BeginTransaction(FbTransactionOptions options, string transactionName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<BeginTransactionAsync>d__34")]
public Task`1<FbTransaction> BeginTransactionAsync(FbTransactionOptions options, string transactionName, CancellationToken cancellationToken);
    public void DisposeTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<DisposeTransactionAsync>d__36")]
public Task DisposeTransactionAsync(CancellationToken cancellationToken);
    public void TransactionCompleted();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<TransactionCompletedAsync>d__38")]
public Task TransactionCompletedAsync(CancellationToken cancellationToken);
    public void EnlistTransaction(Transaction transaction);
    private void EnlistmentCompleted(object sender, EventArgs e);
    public FbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public Task`1<FbTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public DataTable GetSchema(string collectionName, String[] restrictions);
    public Task`1<DataTable> GetSchemaAsync(string collectionName, String[] restrictions, CancellationToken cancellationToken);
    public void AddPreparedCommand(IFbPreparedCommand command);
    public void RemovePreparedCommand(IFbPreparedCommand command);
    public void ReleasePreparedCommands();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<ReleasePreparedCommandsAsync>d__48")]
public Task ReleasePreparedCommandsAsync(CancellationToken cancellationToken);
    public void CloseEventManager();
    public Task CloseEventManagerAsync(CancellationToken cancellationToken);
    private void EnsureNoActiveTransaction();
    private static DatabaseParameterBufferBase BuildDpb(DatabaseBase db, ConnectionString options);
    private static string GetProcessName(ConnectionString options);
    private static string GetSystemWebHostingPath();
    private static string GetRealProcessName();
    private static int GetProcessId();
    private static string GetClientVersion();
    public void EnableCancel();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<EnableCancelAsync>d__59")]
public Task EnableCancelAsync(CancellationToken cancellationToken);
    public void DisableCancel();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbConnectionInternal/<DisableCancelAsync>d__61")]
public Task DisableCancelAsync(CancellationToken cancellationToken);
    public void CancelCommand();
    public Task CancelCommandAsync(CancellationToken cancellationToken);
    public FbConnectionInternal SetOwningConnection(FbConnection owningConnection);
    [CompilerGeneratedAttribute]
internal static string <GetRealProcessName>g__FromProcess|55_0();
}
internal class FirebirdSql.Data.FirebirdClient.FbConnectionPoolManager : object {
    [CompilerGeneratedAttribute]
private static FbConnectionPoolManager <Instance>k__BackingField;
    private int _disposed;
    private ConcurrentDictionary`2<string, Pool> _pools;
    private Timer _cleanupTimer;
    internal static FbConnectionPoolManager Instance { get; private set; }
    private static FbConnectionPoolManager();
    [CompilerGeneratedAttribute]
internal static FbConnectionPoolManager get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(FbConnectionPoolManager value);
    internal FbConnectionInternal Get(ConnectionString connectionString, Boolean& createdNew);
    internal void Release(FbConnectionInternal connection, bool returnToAvailable);
    internal void ClearAllPools();
    internal void ClearPool(ConnectionString connectionString);
    public sealed virtual void Dispose();
    private void CleanupCallback(object o);
    private void CheckDisposed();
}
public class FirebirdSql.Data.FirebirdClient.FbConnectionStringBuilder : DbConnectionStringBuilder {
    [CategoryAttribute("Security")]
[DisplayNameAttribute("User ID")]
[DescriptionAttribute("Indicates the User ID to be used when connecting to the data source.")]
[DefaultValueAttribute("")]
public string UserID { get; public set; }
    [CategoryAttribute("Security")]
[DisplayNameAttribute("Password")]
[DescriptionAttribute("Indicates the password to be used when connecting to the data source.")]
[PasswordPropertyTextAttribute("True")]
[DefaultValueAttribute("")]
public string Password { get; public set; }
    [CategoryAttribute("Source")]
[DisplayNameAttribute("DataSource")]
[DescriptionAttribute("The name of the Firebird server to which to connect.")]
[DefaultValueAttribute("")]
public string DataSource { get; public set; }
    [CategoryAttribute("Source")]
[DisplayNameAttribute("Database")]
[DescriptionAttribute("The name of the actual database or the database to be used when a connection is open. It is normally the path to an .FDB file or an alias.")]
[DefaultValueAttribute("")]
public string Database { get; public set; }
    [CategoryAttribute("Source")]
[DisplayNameAttribute("Port")]
[DescriptionAttribute("Port to use for TCP/IP connections")]
[DefaultValueAttribute("3050")]
public int Port { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("PacketSize")]
[DescriptionAttribute("The size (in bytes) of network packets. PacketSize may be in the range 512-32767 bytes.")]
[DefaultValueAttribute("8192")]
public int PacketSize { get; public set; }
    [CategoryAttribute("Security")]
[DisplayNameAttribute("Role")]
[DescriptionAttribute("The user role.")]
[DefaultValueAttribute("")]
public string Role { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Dialect")]
[DescriptionAttribute("The database SQL dialect.")]
[DefaultValueAttribute("3")]
public int Dialect { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Character Set")]
[DescriptionAttribute("The connection character set encoding.")]
[DefaultValueAttribute("UTF8")]
public string Charset { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Connection Timeout")]
[DescriptionAttribute("The time (in seconds) to wait for a connection to open.")]
[DefaultValueAttribute("15")]
public int ConnectionTimeout { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Pooling")]
[DescriptionAttribute("When true the connection is grabbed from a pool or, if necessary, created and added to the appropriate pool.")]
[DefaultValueAttribute("True")]
public bool Pooling { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Connection LifeTime")]
[DescriptionAttribute("When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by connection lifetime.")]
[DefaultValueAttribute("0")]
public int ConnectionLifeTime { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("MinPoolSize")]
[DescriptionAttribute("The minimun number of connections allowed in the pool.")]
[DefaultValueAttribute("0")]
public int MinPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("MaxPoolSize")]
[DescriptionAttribute("The maximum number of connections allowed in the pool.")]
[DefaultValueAttribute("100")]
public int MaxPoolSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("FetchSize")]
[DescriptionAttribute("The maximum number of rows to be fetched in a single call to read into the internal row buffer.")]
[DefaultValueAttribute("200")]
public int FetchSize { get; public set; }
    [CategoryAttribute("Source")]
[DisplayNameAttribute("ServerType")]
[DescriptionAttribute("The type of server used.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FbServerType ServerType { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("IsolationLevel")]
[DescriptionAttribute("The default Isolation Level for implicit transactions.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public IsolationLevel IsolationLevel { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Records Affected")]
[DescriptionAttribute("Get the number of rows affected by a command when true.")]
[DefaultValueAttribute("True")]
public bool ReturnRecordsAffected { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Enlist")]
[DescriptionAttribute("If true, enlists the connections in the current transaction.")]
[DefaultValueAttribute("True")]
public bool Enlist { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Client Library")]
[DescriptionAttribute("Client library for Firebird Embedded.")]
[DefaultValueAttribute("fbembed")]
public string ClientLibrary { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("DB Cache Pages")]
[DescriptionAttribute("How many cache buffers to use for this session.")]
[DefaultValueAttribute("0")]
public int DbCachePages { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("No Triggers")]
[DescriptionAttribute("Disables database triggers for this connection.")]
[DefaultValueAttribute("False")]
public bool NoDatabaseTriggers { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("No Garbage Collect")]
[DescriptionAttribute("If true, disables sweeping the database upon attachment.")]
[DefaultValueAttribute("False")]
public bool NoGarbageCollect { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Compression")]
[DescriptionAttribute("Enables or disables wire compression.")]
[DefaultValueAttribute("False")]
public bool Compression { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Crypt Key")]
[DescriptionAttribute("Key used for database decryption.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Byte[] CryptKey { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Wire Crypt")]
[DescriptionAttribute("Selection for wire encryption.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FbWireCrypt WireCrypt { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Application Name")]
[DescriptionAttribute("The name of the application making the connection.")]
[DefaultValueAttribute("")]
public string ApplicationName { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Command Timeout")]
[DescriptionAttribute("The time (in seconds) for command execution.")]
[DefaultValueAttribute("0")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Parallel Workers")]
[DescriptionAttribute("Number of parallel workers to use for certain operations in Firebird.")]
[DefaultValueAttribute("0")]
public int ParallelWorkers { get; public set; }
    public FbConnectionStringBuilder(string connectionString);
    public string get_UserID();
    public void set_UserID(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_Database();
    public void set_Database(string value);
    public int get_Port();
    public void set_Port(int value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public string get_Role();
    public void set_Role(string value);
    public int get_Dialect();
    public void set_Dialect(int value);
    public string get_Charset();
    public void set_Charset(string value);
    public int get_ConnectionTimeout();
    public void set_ConnectionTimeout(int value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public int get_ConnectionLifeTime();
    public void set_ConnectionLifeTime(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_FetchSize();
    public void set_FetchSize(int value);
    public FbServerType get_ServerType();
    public void set_ServerType(FbServerType value);
    public IsolationLevel get_IsolationLevel();
    public void set_IsolationLevel(IsolationLevel value);
    public bool get_ReturnRecordsAffected();
    public void set_ReturnRecordsAffected(bool value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_ClientLibrary();
    public void set_ClientLibrary(string value);
    public int get_DbCachePages();
    public void set_DbCachePages(int value);
    public bool get_NoDatabaseTriggers();
    public void set_NoDatabaseTriggers(bool value);
    public bool get_NoGarbageCollect();
    public void set_NoGarbageCollect(bool value);
    public bool get_Compression();
    public void set_Compression(bool value);
    public Byte[] get_CryptKey();
    public void set_CryptKey(Byte[] value);
    public FbWireCrypt get_WireCrypt();
    public void set_WireCrypt(FbWireCrypt value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public int get_ParallelWorkers();
    public void set_ParallelWorkers(int value);
    private FbServerType GetServerType(string keyword, FbServerType defaultValue);
    private IsolationLevel GetIsolationLevel(string keyword, IsolationLevel defaultValue);
    private FbWireCrypt GetWireCrypt(string keyword, FbWireCrypt defaultValue);
    private Byte[] GetBytes(string keyword, Byte[] defaultValue);
    private void SetValue(string keyword, T value);
    private string GetKey(string keyword);
}
[DefaultEventAttribute("RowUpdated")]
public class FirebirdSql.Data.FirebirdClient.FbDataAdapter : DbDataAdapter {
    private static object EventRowUpdated;
    private static object EventRowUpdating;
    private bool _disposed;
    private bool _shouldDisposeSelectCommand;
    [CategoryAttribute("Fill")]
[DefaultValueAttribute("")]
public FbCommand SelectCommand { get; public set; }
    [CategoryAttribute("Update")]
[DefaultValueAttribute("")]
public FbCommand InsertCommand { get; public set; }
    [CategoryAttribute("Update")]
[DefaultValueAttribute("")]
public FbCommand UpdateCommand { get; public set; }
    [CategoryAttribute("Update")]
[DefaultValueAttribute("")]
public FbCommand DeleteCommand { get; public set; }
    public FbDataAdapter(FbCommand selectCommand);
    public FbDataAdapter(string selectCommandText, string selectConnectionString);
    public FbDataAdapter(string selectCommandText, FbConnection selectConnection);
    private static FbDataAdapter();
    public void add_RowUpdated(EventHandler`1<FbRowUpdatedEventArgs> value);
    public void remove_RowUpdated(EventHandler`1<FbRowUpdatedEventArgs> value);
    public void add_RowUpdating(EventHandler`1<FbRowUpdatingEventArgs> value);
    public void remove_RowUpdating(EventHandler`1<FbRowUpdatingEventArgs> value);
    public FbCommand get_SelectCommand();
    public void set_SelectCommand(FbCommand value);
    public FbCommand get_InsertCommand();
    public void set_InsertCommand(FbCommand value);
    public FbCommand get_UpdateCommand();
    public void set_UpdateCommand(FbCommand value);
    public FbCommand get_DeleteCommand();
    public void set_DeleteCommand(FbCommand value);
    protected virtual void Dispose(bool disposing);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
    private string CreateExceptionMessage(StatementType statementType);
    private void UpdateParameterValues(IDbCommand command, StatementType statementType, DataRow row, DataTableMapping tableMapping);
    private void CloseConnections(ICollection`1<IDbConnection> connections);
    private bool IsNull(object value);
}
public class FirebirdSql.Data.FirebirdClient.FbDatabaseInfo : object {
    [CompilerGeneratedAttribute]
private FbConnection <Connection>k__BackingField;
    public FbConnection Connection { get; public set; }
    public FbDatabaseInfo(FbConnection connection);
    [CompilerGeneratedAttribute]
public FbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(FbConnection value);
    public string GetIscVersion();
    public Task`1<string> GetIscVersionAsync(CancellationToken cancellationToken);
    public string GetServerVersion();
    public Task`1<string> GetServerVersionAsync(CancellationToken cancellationToken);
    public string GetServerClass();
    public Task`1<string> GetServerClassAsync(CancellationToken cancellationToken);
    public int GetPageSize();
    public Task`1<int> GetPageSizeAsync(CancellationToken cancellationToken);
    public int GetAllocationPages();
    public Task`1<int> GetAllocationPagesAsync(CancellationToken cancellationToken);
    public string GetBaseLevel();
    public Task`1<string> GetBaseLevelAsync(CancellationToken cancellationToken);
    public string GetDbId();
    public Task`1<string> GetDbIdAsync(CancellationToken cancellationToken);
    public string GetImplementation();
    public Task`1<string> GetImplementationAsync(CancellationToken cancellationToken);
    public bool GetNoReserve();
    public Task`1<bool> GetNoReserveAsync(CancellationToken cancellationToken);
    public int GetOdsVersion();
    public Task`1<int> GetOdsVersionAsync(CancellationToken cancellationToken);
    public int GetOdsMinorVersion();
    public Task`1<int> GetOdsMinorVersionAsync(CancellationToken cancellationToken);
    public int GetMaxMemory();
    public Task`1<int> GetMaxMemoryAsync(CancellationToken cancellationToken);
    public int GetCurrentMemory();
    public Task`1<int> GetCurrentMemoryAsync(CancellationToken cancellationToken);
    public bool GetForcedWrites();
    public Task`1<bool> GetForcedWritesAsync(CancellationToken cancellationToken);
    public int GetNumBuffers();
    public Task`1<int> GetNumBuffersAsync(CancellationToken cancellationToken);
    public int GetSweepInterval();
    public Task`1<int> GetSweepIntervalAsync(CancellationToken cancellationToken);
    public bool GetReadOnly();
    public Task`1<bool> GetReadOnlyAsync(CancellationToken cancellationToken);
    public int GetFetches();
    public Task`1<int> GetFetchesAsync(CancellationToken cancellationToken);
    public int GetMarks();
    public Task`1<int> GetMarksAsync(CancellationToken cancellationToken);
    public int GetReads();
    public Task`1<int> GetReadsAsync(CancellationToken cancellationToken);
    public int GetWrites();
    public Task`1<int> GetWritesAsync(CancellationToken cancellationToken);
    public int GetBackoutCount();
    public Task`1<int> GetBackoutCountAsync(CancellationToken cancellationToken);
    public int GetDeleteCount();
    public Task`1<int> GetDeleteCountAsync(CancellationToken cancellationToken);
    public int GetExpungeCount();
    public Task`1<int> GetExpungeCountAsync(CancellationToken cancellationToken);
    public int GetInsertCount();
    public Task`1<int> GetInsertCountAsync(CancellationToken cancellationToken);
    public int GetPurgeCount();
    public Task`1<int> GetPurgeCountAsync(CancellationToken cancellationToken);
    public long GetReadIdxCount();
    public Task`1<long> GetReadIdxCountAsync(CancellationToken cancellationToken);
    public long GetReadSeqCount();
    public Task`1<long> GetReadSeqCountAsync(CancellationToken cancellationToken);
    public long GetUpdateCount();
    public Task`1<long> GetUpdateCountAsync(CancellationToken cancellationToken);
    public int GetDatabaseSizeInPages();
    public Task`1<int> GetDatabaseSizeInPagesAsync(CancellationToken cancellationToken);
    public long GetOldestTransaction();
    public Task`1<long> GetOldestTransactionAsync(CancellationToken cancellationToken);
    public long GetOldestActiveTransaction();
    public Task`1<long> GetOldestActiveTransactionAsync(CancellationToken cancellationToken);
    public long GetOldestActiveSnapshot();
    public Task`1<long> GetOldestActiveSnapshotAsync(CancellationToken cancellationToken);
    public long GetNextTransaction();
    public Task`1<long> GetNextTransactionAsync(CancellationToken cancellationToken);
    public List`1<long> GetActiveTransactions();
    public Task`1<List`1<long>> GetActiveTransactionsAsync(CancellationToken cancellationToken);
    public int GetActiveTransactionsCount();
    public Task`1<int> GetActiveTransactionsCountAsync(CancellationToken cancellationToken);
    public List`1<string> GetActiveUsers();
    public Task`1<List`1<string>> GetActiveUsersAsync(CancellationToken cancellationToken);
    public string GetWireCrypt();
    public Task`1<string> GetWireCryptAsync(CancellationToken cancellationToken);
    public string GetCryptPlugin();
    public Task`1<string> GetCryptPluginAsync(CancellationToken cancellationToken);
    public DateTime GetCreationDate();
    public Task`1<DateTime> GetCreationDateAsync(CancellationToken cancellationToken);
    public long GetNextAttachment();
    public Task`1<long> GetNextAttachmentAsync(CancellationToken cancellationToken);
    public long GetNextStatement();
    public Task`1<long> GetNextStatementAsync(CancellationToken cancellationToken);
    public string GetReplicaMode();
    public Task`1<string> GetReplicaModeAsync(CancellationToken cancellationToken);
    public string GetDbFileId();
    public Task`1<string> GetDbFileIdAsync(CancellationToken cancellationToken);
    public Guid GetDbGuid();
    public Task`1<Guid> GetDbGuidAsync(CancellationToken cancellationToken);
    public FbZonedDateTime GetCreationTimestamp();
    public Task`1<FbZonedDateTime> GetCreationTimestampAsync(CancellationToken cancellationToken);
    public int GetProtocolVersion();
    public Task`1<int> GetProtocolVersionAsync(CancellationToken cancellationToken);
    public int GetStatementTimeoutDatabase();
    public Task`1<int> GetStatementTimeoutDatabaseAsync(CancellationToken cancellationToken);
    public int GetStatementTimeoutAttachment();
    public Task`1<int> GetStatementTimeoutAttachmentAsync(CancellationToken cancellationToken);
    private T GetValue(byte item);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbDatabaseInfo/<GetValueAsync>d__104`1")]
private Task`1<T> GetValueAsync(byte item, CancellationToken cancellationToken);
    private List`1<T> GetList(byte item);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbDatabaseInfo/<GetListAsync>d__106`1")]
private Task`1<List`1<T>> GetListAsync(byte item, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class FirebirdSql.Data.FirebirdClient.FbDataReader : DbDataReader {
    private static int StartPosition;
    private DataTable _schemaTable;
    private FbCommand _command;
    private FbConnection _connection;
    private DbValue[] _row;
    private Descriptor _fields;
    private CommandBehavior _commandBehavior;
    private bool _eof;
    private bool _isClosed;
    private int _position;
    private int _recordsAffected;
    private Dictionary`2<string, int> _columnsIndexesOrdinal;
    private Dictionary`2<string, int> _columnsIndexesOrdinalCI;
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int FieldCount { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    internal FbDataReader(FbCommand command, FbConnection connection, CommandBehavior commandBehavior);
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual int get_Depth();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_FieldCount();
    public virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public virtual void Close();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbDataReader/<CloseAsync>d__32")]
public Task CloseAsync();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbDataReader/<ReadAsync>d__35")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual DataTable GetSchemaTable();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbDataReader/<GetSchemaTableAsync>d__37")]
public Task`1<DataTable> GetSchemaTableAsync(CancellationToken cancellationToken);
    public virtual int GetOrdinal(string name);
    public virtual string GetName(int i);
    public virtual string GetDataTypeName(int i);
    public virtual Type GetFieldType(int i);
    public virtual Type GetProviderSpecificFieldType(int i);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual T GetFieldValue(int i);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbDataReader/<GetFieldValueAsync>d__48`1")]
public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual float GetFloat(int i);
    public virtual double GetDouble(int i);
    public virtual string GetString(int i);
    public virtual decimal GetDecimal(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual bool IsDBNull(int i);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    public virtual IEnumerator GetEnumerator();
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    private void CheckPosition();
    private void CheckState();
    private void CheckIndex(int i);
    private FbDbType GetProviderType(int i);
    private void UpdateRecordsAffected();
    private bool IsCommandBehavior(CommandBehavior behavior);
    private void InitializeColumnsIndexes();
    private int GetColumnIndex(string name);
    private static bool IsReadOnly(FbDataReader r);
    public static bool IsExpression(FbDataReader r);
    private static DataTable GetSchemaTableStructure();
    private static string GetSchemaCommandText();
    private static T CheckedGetValue2(Func`1<T> getter);
}
public enum FirebirdSql.Data.FirebirdClient.FbDbType : Enum {
    public int value__;
    public static FbDbType Array;
    public static FbDbType BigInt;
    public static FbDbType Binary;
    public static FbDbType Boolean;
    public static FbDbType Char;
    public static FbDbType Date;
    public static FbDbType Decimal;
    public static FbDbType Double;
    public static FbDbType Float;
    public static FbDbType Guid;
    public static FbDbType Integer;
    public static FbDbType Numeric;
    public static FbDbType SmallInt;
    public static FbDbType Text;
    public static FbDbType Time;
    public static FbDbType TimeStamp;
    public static FbDbType VarChar;
    public static FbDbType TimeStampTZ;
    public static FbDbType TimeStampTZEx;
    public static FbDbType TimeTZ;
    public static FbDbType TimeTZEx;
    public static FbDbType Dec16;
    public static FbDbType Dec34;
    public static FbDbType Int128;
}
internal class FirebirdSql.Data.FirebirdClient.FbEnlistmentNotification : object {
    [CompilerGeneratedAttribute]
private EventHandler Completed;
    private FbConnectionInternal _connection;
    private FbTransaction _transaction;
    private Transaction _systemTransaction;
    public bool IsCompleted { get; }
    public Transaction SystemTransaction { get; }
    public FbEnlistmentNotification(FbConnectionInternal connection, Transaction systemTransaction);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler value);
    public bool get_IsCompleted();
    public Transaction get_SystemTransaction();
    public sealed virtual void Commit(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
}
public class FirebirdSql.Data.FirebirdClient.FbError : object {
    private byte _classError;
    private int _lineNumber;
    private string _message;
    private int _number;
    public byte Class { get; }
    public int LineNumber { get; }
    public string Message { get; }
    public int Number { get; }
    internal FbError(string message, int number);
    internal FbError(byte classError, string message, int number);
    internal FbError(byte classError, int line, string message, int number);
    public byte get_Class();
    public int get_LineNumber();
    public string get_Message();
    public int get_Number();
}
[ListBindableAttribute("False")]
public class FirebirdSql.Data.FirebirdClient.FbErrorCollection : object {
    private List`1<FbError> _errors;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    internal int IndexOf(string errorMessage);
    internal FbError Add(FbError error);
    internal FbError Add(string errorMessage, int number);
    private sealed virtual override void System.Collections.Generic.ICollection<FirebirdSql.Data.FirebirdClient.FbError>.Add(FbError item);
    private sealed virtual override void System.Collections.Generic.ICollection<FirebirdSql.Data.FirebirdClient.FbError>.Clear();
    public sealed virtual bool Contains(FbError item);
    public sealed virtual void CopyTo(FbError[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<FirebirdSql.Data.FirebirdClient.FbError>.Remove(FbError item);
    public sealed virtual IEnumerator`1<FbError> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class FirebirdSql.Data.FirebirdClient.FbException : DbException {
    private FbErrorCollection _errors;
    [DesignerSerializationVisibilityAttribute("2")]
public FbErrorCollection Errors { get; }
    public int ErrorCode { get; }
    public string SQLSTATE { get; }
    private FbException(string message, Exception innerException);
    private FbException(SerializationInfo info, StreamingContext context);
    public FbErrorCollection get_Errors();
    public virtual int get_ErrorCode();
    public string get_SQLSTATE();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void ProcessIscExceptionErrors(IscException innerException);
    internal static Exception Create(string message);
    internal static Exception Create(Exception innerException);
    internal static Exception Create(string message, Exception innerException);
}
public class FirebirdSql.Data.FirebirdClient.FbInfoMessageEventArgs : EventArgs {
    private FbErrorCollection _errors;
    private string _message;
    public FbErrorCollection Errors { get; }
    public string Message { get; }
    internal FbInfoMessageEventArgs(IscException ex);
    public FbErrorCollection get_Errors();
    public string get_Message();
}
[ParenthesizePropertyNameAttribute("True")]
public class FirebirdSql.Data.FirebirdClient.FbParameter : DbParameter {
    private FbParameterCollection _parent;
    private FbDbType _fbDbType;
    private ParameterDirection _direction;
    private DataRowVersion _sourceVersion;
    private FbCharset _charset;
    private bool _isNullable;
    private bool _sourceColumnNullMapping;
    private byte _precision;
    private byte _scale;
    private int _size;
    private object _value;
    private string _parameterName;
    private string _sourceColumn;
    private string _internalParameterName;
    private bool _isUnicodeParameterName;
    [CompilerGeneratedAttribute]
private bool <IsTypeSet>k__BackingField;
    [DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("0")]
public int Size { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ParameterDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
[DesignOnlyAttribute("True")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsNullable { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
public string SourceColumn { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataRowVersion SourceVersion { get; public set; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Data")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public DbType DbType { get; public set; }
    [RefreshPropertiesAttribute("1")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FbDbType FbDbType { get; public set; }
    [CategoryAttribute("Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public object Value { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FbCharset Charset { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("0")]
public byte Precision { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    internal FbParameterCollection Parent { get; internal set; }
    internal string InternalParameterName { get; }
    internal bool IsTypeSet { get; private set; }
    internal object InternalValue { get; }
    internal bool HasSize { get; }
    private Nullable`1<int> RealValueSize { get; }
    internal bool IsUnicodeParameterName { get; }
    public FbParameter(string parameterName, object value);
    public FbParameter(string parameterName, FbDbType fbType);
    public FbParameter(string parameterName, FbDbType fbType, int size);
    public FbParameter(string parameterName, FbDbType fbType, int size, string sourceColumn);
    [EditorBrowsableAttribute("2")]
public FbParameter(string parameterName, FbDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public FbDbType get_FbDbType();
    public void set_FbDbType(FbDbType value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public FbCharset get_Charset();
    public void set_Charset(FbCharset value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    internal FbParameterCollection get_Parent();
    internal void set_Parent(FbParameterCollection value);
    internal string get_InternalParameterName();
    [CompilerGeneratedAttribute]
internal bool get_IsTypeSet();
    [CompilerGeneratedAttribute]
private void set_IsTypeSet(bool value);
    internal object get_InternalValue();
    internal bool get_HasSize();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    public virtual void ResetDbType();
    private void SetFbDbType(object value);
    private Nullable`1<int> get_RealValueSize();
    internal bool get_IsUnicodeParameterName();
    internal static string NormalizeParameterName(string parameterName);
    internal static bool IsNonAsciiParameterName(string parameterName);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class FirebirdSql.Data.FirebirdClient.FbParameterCollection : DbParameterCollection {
    private List`1<FbParameter> _parameters;
    private Nullable`1<bool> _hasParameterWithNonAsciiName;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FbParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FbParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal bool HasParameterWithNonAsciiName { get; }
    public FbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, FbParameter value);
    public FbParameter get_Item(int index);
    public void set_Item(int index, FbParameter value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    internal bool get_HasParameterWithNonAsciiName();
    public void AddRange(IEnumerable`1<FbParameter> values);
    public virtual void AddRange(Array values);
    public FbParameter AddWithValue(string parameterName, object value);
    public FbParameter Add(string parameterName, object value);
    public FbParameter Add(string parameterName, FbDbType type);
    public FbParameter Add(string parameterName, FbDbType fbType, int size);
    public FbParameter Add(string parameterName, FbDbType fbType, int size, string sourceColumn);
    public FbParameter Add(FbParameter value);
    public virtual int Add(object value);
    public bool Contains(FbParameter value);
    public virtual bool Contains(object value);
    public virtual bool Contains(string parameterName);
    public int IndexOf(FbParameter value);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    internal int IndexOf(string parameterName, int luckyIndex);
    public void Insert(int index, FbParameter value);
    public virtual void Insert(int index, object value);
    public void Remove(FbParameter value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    public void CopyTo(FbParameter[] array, int index);
    public virtual void CopyTo(Array array, int index);
    public virtual void Clear();
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    internal void ParameterNameChanged();
    private string GenerateParameterName();
    private void EnsureFbParameterType(object value);
    private void EnsureFbParameterAddOrInsert(FbParameter value);
    private void AttachParameter(FbParameter parameter);
    private void ReleaseParameter(FbParameter parameter);
    [CompilerGeneratedAttribute]
private FbParameter <AddRange>b__22_0(object x);
}
[DefaultMemberAttribute("Item")]
public class FirebirdSql.Data.FirebirdClient.FbRemoteEvent : object {
    private FbConnectionInternal _connection;
    private RemoteEvent _revent;
    private SynchronizationContext _synchronizationContext;
    [CompilerGeneratedAttribute]
private EventHandler`1<FbRemoteEventCountsEventArgs> RemoteEventCounts;
    [CompilerGeneratedAttribute]
private EventHandler`1<FbRemoteEventErrorEventArgs> RemoteEventError;
    public string Item { get; }
    public int RemoteEventId { get; }
    public FbRemoteEvent(string connectionString);
    [CompilerGeneratedAttribute]
public void add_RemoteEventCounts(EventHandler`1<FbRemoteEventCountsEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RemoteEventCounts(EventHandler`1<FbRemoteEventCountsEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RemoteEventError(EventHandler`1<FbRemoteEventErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RemoteEventError(EventHandler`1<FbRemoteEventErrorEventArgs> value);
    public string get_Item(int index);
    public int get_RemoteEventId();
    public void Open();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbRemoteEvent/<OpenAsync>d__15")]
public Task OpenAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    public void QueueEvents(ICollection`1<string> events);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbRemoteEvent/<QueueEventsAsync>d__18")]
public Task QueueEventsAsync(ICollection`1<string> events, CancellationToken cancellationToken);
    public void CancelEvents();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbRemoteEvent/<CancelEventsAsync>d__20")]
public Task CancelEventsAsync(CancellationToken cancellationToken);
    private void OnRemoteEventCounts(string name, int count);
    private void OnRemoteEventError(Exception error);
}
public class FirebirdSql.Data.FirebirdClient.FbRemoteEventCountsEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Counts>k__BackingField;
    public string Name { get; }
    public int Counts { get; }
    public FbRemoteEventCountsEventArgs(string name, int counts);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Counts();
}
public class FirebirdSql.Data.FirebirdClient.FbRemoteEventErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public Exception Error { get; }
    public FbRemoteEventErrorEventArgs(Exception error);
    [CompilerGeneratedAttribute]
public Exception get_Error();
}
public class FirebirdSql.Data.FirebirdClient.FbRowUpdatedEventArgs : RowUpdatedEventArgs {
    public FbCommand Command { get; }
    public FbRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public FbCommand get_Command();
}
public class FirebirdSql.Data.FirebirdClient.FbRowUpdatingEventArgs : RowUpdatingEventArgs {
    public FbCommand Command { get; public set; }
    public FbRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public FbCommand get_Command();
    public void set_Command(FbCommand value);
}
public enum FirebirdSql.Data.FirebirdClient.FbServerType : Enum {
    public int value__;
    public static FbServerType Default;
    public static FbServerType Embedded;
}
public class FirebirdSql.Data.FirebirdClient.FbTransaction : DbTransaction {
    private static IFbLogger Log;
    internal static IsolationLevel DefaultIsolationLevel;
    private FbConnection _connection;
    private TransactionBase _transaction;
    private bool _disposed;
    private bool _isCompleted;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    public FbConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal TransactionBase Transaction { get; }
    internal bool IsCompleted { get; }
    protected DbConnection DbConnection { get; }
    internal FbTransaction(FbConnection connection);
    internal FbTransaction(FbConnection connection, IsolationLevel il);
    private static FbTransaction();
    public FbConnection get_Connection();
    [CompilerGeneratedAttribute]
public virtual IsolationLevel get_IsolationLevel();
    internal TransactionBase get_Transaction();
    internal bool get_IsCompleted();
    protected virtual DbConnection get_DbConnection();
    protected virtual void Dispose(bool disposing);
    public virtual void Commit();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<CommitAsync>d__21")]
public Task CommitAsync(CancellationToken cancellationToken);
    public virtual void Rollback();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<RollbackAsync>d__23")]
public Task RollbackAsync(CancellationToken cancellationToken);
    public void Save(string savePointName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<SaveAsync>d__25")]
public Task SaveAsync(string savePointName, CancellationToken cancellationToken);
    public void Release(string savePointName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<ReleaseAsync>d__27")]
public Task ReleaseAsync(string savePointName, CancellationToken cancellationToken);
    public void Rollback(string savePointName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<RollbackAsync>d__29")]
public Task RollbackAsync(string savePointName, CancellationToken cancellationToken);
    public void CommitRetaining();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<CommitRetainingAsync>d__31")]
public Task CommitRetainingAsync(CancellationToken cancellationToken);
    public void RollbackRetaining();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<RollbackRetainingAsync>d__33")]
public Task RollbackRetainingAsync(CancellationToken cancellationToken);
    internal void BeginTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<BeginTransactionAsync>d__35")]
internal Task BeginTransactionAsync(CancellationToken cancellationToken);
    internal void BeginTransaction(FbTransactionOptions options);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<BeginTransactionAsync>d__37")]
internal Task BeginTransactionAsync(FbTransactionOptions options, CancellationToken cancellationToken);
    internal static void EnsureActive(FbTransaction transaction);
    private void CompleteTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransaction/<CompleteTransactionAsync>d__40")]
private Task CompleteTransactionAsync(CancellationToken cancellationToken);
    private TransactionParameterBuffer BuildTpb();
    private void EnsureCompleted();
    private TransactionParameterBuffer BuildTpb(FbTransactionOptions options);
    private static void EnsureSavePointName(string savePointName);
}
[FlagsAttribute]
public enum FirebirdSql.Data.FirebirdClient.FbTransactionBehavior : Enum {
    public int value__;
    public static FbTransactionBehavior Consistency;
    public static FbTransactionBehavior Concurrency;
    public static FbTransactionBehavior Shared;
    public static FbTransactionBehavior Protected;
    public static FbTransactionBehavior Exclusive;
    public static FbTransactionBehavior Wait;
    public static FbTransactionBehavior NoWait;
    public static FbTransactionBehavior Read;
    public static FbTransactionBehavior Write;
    public static FbTransactionBehavior LockRead;
    public static FbTransactionBehavior LockWrite;
    public static FbTransactionBehavior ReadCommitted;
    public static FbTransactionBehavior Autocommit;
    public static FbTransactionBehavior RecVersion;
    public static FbTransactionBehavior NoRecVersion;
    public static FbTransactionBehavior RestartRequests;
    public static FbTransactionBehavior NoAutoUndo;
    public static FbTransactionBehavior ReadConsistency;
}
public class FirebirdSql.Data.FirebirdClient.FbTransactionInfo : object {
    [CompilerGeneratedAttribute]
private FbTransaction <Transaction>k__BackingField;
    public FbTransaction Transaction { get; public set; }
    public FbTransactionInfo(FbTransaction transaction);
    [CompilerGeneratedAttribute]
public FbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(FbTransaction value);
    public long GetTransactionSnapshotNumber();
    public Task`1<long> GetTransactionSnapshotNumberAsync(CancellationToken cancellationToken);
    private T GetValue(byte item);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransactionInfo/<GetValueAsync>d__8`1")]
private Task`1<T> GetValueAsync(byte item, CancellationToken cancellationToken);
    private List`1<T> GetList(byte item);
    [AsyncStateMachineAttribute("FirebirdSql.Data.FirebirdClient.FbTransactionInfo/<GetListAsync>d__10`1")]
private Task`1<List`1<T>> GetListAsync(byte item, CancellationToken cancellationToken);
}
public class FirebirdSql.Data.FirebirdClient.FbTransactionOptions : object {
    private Nullable`1<TimeSpan> _waitTimeout;
    [CompilerGeneratedAttribute]
private FbTransactionBehavior <TransactionBehavior>k__BackingField;
    private IDictionary`2<string, FbTransactionBehavior> _lockTables;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <SnapshotAtNumber>k__BackingField;
    public Nullable`1<TimeSpan> WaitTimeout { get; public set; }
    internal Nullable`1<short> WaitTimeoutTPBValue { get; }
    public FbTransactionBehavior TransactionBehavior { get; public set; }
    public IDictionary`2<string, FbTransactionBehavior> LockTables { get; public set; }
    public Nullable`1<long> SnapshotAtNumber { get; public set; }
    public Nullable`1<TimeSpan> get_WaitTimeout();
    public void set_WaitTimeout(Nullable`1<TimeSpan> value);
    internal Nullable`1<short> get_WaitTimeoutTPBValue();
    [CompilerGeneratedAttribute]
public FbTransactionBehavior get_TransactionBehavior();
    [CompilerGeneratedAttribute]
public void set_TransactionBehavior(FbTransactionBehavior value);
    public IDictionary`2<string, FbTransactionBehavior> get_LockTables();
    public void set_LockTables(IDictionary`2<string, FbTransactionBehavior> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_SnapshotAtNumber();
    [CompilerGeneratedAttribute]
public void set_SnapshotAtNumber(Nullable`1<long> value);
}
public enum FirebirdSql.Data.FirebirdClient.FbWireCrypt : Enum {
    public int value__;
    public static FbWireCrypt Disabled;
    public static FbWireCrypt Enabled;
    public static FbWireCrypt Required;
}
public class FirebirdSql.Data.FirebirdClient.FirebirdClientFactory : DbProviderFactory {
    public static FirebirdClientFactory Instance;
    public bool CanCreateDataSourceEnumerator { get; }
    private static FirebirdClientFactory();
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
internal interface FirebirdSql.Data.FirebirdClient.IFbPreparedCommand {
    public abstract virtual void Release();
    public abstract virtual Task ReleaseAsync(CancellationToken cancellationToken);
    public abstract virtual void TransactionCompleted();
    public abstract virtual Task TransactionCompletedAsync(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Isql.CommandExecutedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private FbDataReader <DataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlStatementType <StatementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowsAffected>k__BackingField;
    public FbDataReader DataReader { get; private set; }
    public string CommandText { get; private set; }
    public SqlStatementType StatementType { get; private set; }
    public int RowsAffected { get; private set; }
    public CommandExecutedEventArgs(FbDataReader dataReader, string commandText, SqlStatementType statementType, int rowsAffected);
    [CompilerGeneratedAttribute]
public FbDataReader get_DataReader();
    [CompilerGeneratedAttribute]
private void set_DataReader(FbDataReader value);
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
private void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public SqlStatementType get_StatementType();
    [CompilerGeneratedAttribute]
private void set_StatementType(SqlStatementType value);
    [CompilerGeneratedAttribute]
public int get_RowsAffected();
    [CompilerGeneratedAttribute]
private void set_RowsAffected(int value);
}
public class FirebirdSql.Data.Isql.CommandExecutingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private FbCommand <SqlCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlStatementType <StatementType>k__BackingField;
    public FbCommand SqlCommand { get; private set; }
    public SqlStatementType StatementType { get; private set; }
    public CommandExecutingEventArgs(FbCommand sqlCommand, SqlStatementType statementType);
    [CompilerGeneratedAttribute]
public FbCommand get_SqlCommand();
    [CompilerGeneratedAttribute]
private void set_SqlCommand(FbCommand value);
    [CompilerGeneratedAttribute]
public SqlStatementType get_StatementType();
    [CompilerGeneratedAttribute]
private void set_StatementType(SqlStatementType value);
}
public class FirebirdSql.Data.Isql.FbBatchExecution : object {
    private static String[] StandardParseTokens;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommandExecutingEventArgs> CommandExecuting;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommandExecutedEventArgs> CommandExecuted;
    private FbStatementCollection _statements;
    private FbConnection _sqlConnection;
    private FbTransaction _sqlTransaction;
    private FbConnectionStringBuilder _connectionString;
    private FbCommand _sqlCommand;
    private bool _requiresNewConnection;
    private bool _shouldClose;
    public FbStatementCollection Statements { get; }
    public FbBatchExecution(FbConnection sqlConnection);
    private static FbBatchExecution();
    [CompilerGeneratedAttribute]
public void add_CommandExecuting(EventHandler`1<CommandExecutingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CommandExecuting(EventHandler`1<CommandExecutingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_CommandExecuted(EventHandler`1<CommandExecutedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CommandExecuted(EventHandler`1<CommandExecutedEventArgs> value);
    public FbStatementCollection get_Statements();
    public void AppendSqlStatements(FbScript isqlScript);
    public void Execute(bool autoCommit);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<ExecuteAsync>d__19")]
public Task ExecuteAsync(bool autoCommit, CancellationToken cancellationToken);
    private void ConnectToDatabase(string connectDbStatement);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<ConnectToDatabaseAsync>d__21")]
private Task ConnectToDatabaseAsync(string connectDbStatement, CancellationToken cancellationToken);
    private void CreateDatabase(string createDatabaseStatement);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<CreateDatabaseAsync>d__23")]
private Task CreateDatabaseAsync(string createDatabaseStatement, CancellationToken cancellationToken);
    private void SetAutoDdl(string setAutoDdlStatement, Boolean& autoCommit);
    private void SetNames(string setNamesStatement);
    private void SetSqlDialect(string setSqlDialectStatement);
    private FbCommand ProvideCommand();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<ProvideCommandAsync>d__28")]
private Task`1<FbCommand> ProvideCommandAsync(CancellationToken cancellationToken);
    private FbConnection ProvideConnection();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<ProvideConnectionAsync>d__30")]
private Task`1<FbConnection> ProvideConnectionAsync(CancellationToken cancellationToken);
    private int ExecuteCommand(bool autoCommit);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<ExecuteCommandAsync>d__32")]
private Task`1<int> ExecuteCommandAsync(bool autoCommit, CancellationToken cancellationToken);
    private void CommitTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<CommitTransactionAsync>d__34")]
private Task CommitTransactionAsync(CancellationToken cancellationToken);
    private void RollbackTransaction();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<RollbackTransactionAsync>d__36")]
private Task RollbackTransactionAsync(CancellationToken cancellationToken);
    private void CloseConnection();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<CloseConnectionAsync>d__38")]
private Task CloseConnectionAsync(CancellationToken cancellationToken);
    private void DisposeCommand();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Isql.FbBatchExecution/<DisposeCommandAsync>d__40")]
private Task DisposeCommandAsync(CancellationToken cancellationToken);
    private void OnCommandExecuting(FbCommand sqlCommand, SqlStatementType statementType);
    private void OnCommandExecuted(FbDataReader dataReader, string commandText, SqlStatementType statementType, int rowsAffected);
}
public class FirebirdSql.Data.Isql.FbScript : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<UnknownStatementEventArgs> UnknownStatement;
    private SqlStringParser _parser;
    private FbStatementCollection _results;
    public FbStatementCollection Results { get; }
    public FbScript(string script);
    [CompilerGeneratedAttribute]
public void add_UnknownStatement(EventHandler`1<UnknownStatementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UnknownStatement(EventHandler`1<UnknownStatementEventArgs> value);
    public FbStatementCollection get_Results();
    public static FbScript LoadFromFile(string fileName);
    public int Parse();
    private static bool IsSetTermStatement(string statement, String& newTerm);
    private static Nullable`1<SqlStatementType> GetStatementType(string sqlStatement);
}
public class FirebirdSql.Data.Isql.FbStatement : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CleanText>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlStatementType <StatementType>k__BackingField;
    public string Text { get; private set; }
    internal string CleanText { get; private set; }
    public SqlStatementType StatementType { get; private set; }
    internal FbStatement(string text, string cleanText);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
internal string get_CleanText();
    [CompilerGeneratedAttribute]
private void set_CleanText(string value);
    [CompilerGeneratedAttribute]
public SqlStatementType get_StatementType();
    [CompilerGeneratedAttribute]
private void set_StatementType(SqlStatementType value);
    internal void SetStatementType(SqlStatementType statementType);
}
public class FirebirdSql.Data.Isql.FbStatementCollection : List`1<FbStatement> {
}
public enum FirebirdSql.Data.Isql.SqlStatementType : Enum {
    public int value__;
    public static SqlStatementType AlterCharacterSet;
    public static SqlStatementType AlterDatabase;
    public static SqlStatementType AlterDomain;
    public static SqlStatementType AlterException;
    public static SqlStatementType AlterExternalFunction;
    public static SqlStatementType AlterFunction;
    public static SqlStatementType AlterIndex;
    public static SqlStatementType AlterPackage;
    public static SqlStatementType AlterProcedure;
    public static SqlStatementType AlterRole;
    public static SqlStatementType AlterSequence;
    public static SqlStatementType AlterTable;
    public static SqlStatementType AlterTrigger;
    public static SqlStatementType AlterView;
    public static SqlStatementType Close;
    public static SqlStatementType CommentOn;
    public static SqlStatementType Commit;
    public static SqlStatementType Connect;
    public static SqlStatementType CreateCollation;
    public static SqlStatementType CreateDatabase;
    public static SqlStatementType CreateDomain;
    public static SqlStatementType CreateException;
    public static SqlStatementType CreateFunction;
    public static SqlStatementType CreateGenerator;
    public static SqlStatementType CreateIndex;
    public static SqlStatementType CreatePackage;
    public static SqlStatementType CreatePackageBody;
    public static SqlStatementType CreateProcedure;
    public static SqlStatementType CreateRole;
    public static SqlStatementType CreateSequence;
    public static SqlStatementType CreateShadow;
    public static SqlStatementType CreateTable;
    public static SqlStatementType CreateTrigger;
    public static SqlStatementType CreateView;
    public static SqlStatementType DeclareCursor;
    public static SqlStatementType DeclareExternalFunction;
    public static SqlStatementType DeclareFilter;
    public static SqlStatementType DeclareStatement;
    public static SqlStatementType DeclareTable;
    public static SqlStatementType Delete;
    public static SqlStatementType Describe;
    public static SqlStatementType Disconnect;
    public static SqlStatementType DropCollation;
    public static SqlStatementType DropDatabase;
    public static SqlStatementType DropDomain;
    public static SqlStatementType DropException;
    public static SqlStatementType DropExternalFunction;
    public static SqlStatementType DropFunction;
    public static SqlStatementType DropFilter;
    public static SqlStatementType DropGenerator;
    public static SqlStatementType DropIndex;
    public static SqlStatementType DropPackage;
    public static SqlStatementType DropPackageBody;
    public static SqlStatementType DropProcedure;
    public static SqlStatementType DropSequence;
    public static SqlStatementType DropRole;
    public static SqlStatementType DropShadow;
    public static SqlStatementType DropTable;
    public static SqlStatementType DropTrigger;
    public static SqlStatementType DropView;
    public static SqlStatementType EndDeclareSection;
    public static SqlStatementType EventInit;
    public static SqlStatementType EventWait;
    public static SqlStatementType Execute;
    public static SqlStatementType ExecuteBlock;
    public static SqlStatementType ExecuteImmediate;
    public static SqlStatementType ExecuteProcedure;
    public static SqlStatementType Fetch;
    public static SqlStatementType Grant;
    public static SqlStatementType Insert;
    public static SqlStatementType InsertCursor;
    public static SqlStatementType Merge;
    public static SqlStatementType Open;
    public static SqlStatementType Prepare;
    public static SqlStatementType RecreateFunction;
    public static SqlStatementType RecreatePackage;
    public static SqlStatementType RecreatePackageBody;
    public static SqlStatementType RecreateProcedure;
    public static SqlStatementType RecreateTable;
    public static SqlStatementType RecreateTrigger;
    public static SqlStatementType RecreateView;
    public static SqlStatementType Revoke;
    public static SqlStatementType Rollback;
    public static SqlStatementType Select;
    public static SqlStatementType SetAutoDDL;
    public static SqlStatementType SetDatabase;
    public static SqlStatementType SetGenerator;
    public static SqlStatementType SetNames;
    public static SqlStatementType SetSQLDialect;
    public static SqlStatementType SetStatistics;
    public static SqlStatementType SetTransaction;
    public static SqlStatementType ShowSQLDialect;
    public static SqlStatementType Update;
    public static SqlStatementType Whenever;
}
internal class FirebirdSql.Data.Isql.SqlStringParser : object {
    private string _source;
    private int _sourceLength;
    private String[] _tokens;
    public String[] Tokens { get; public set; }
    public SqlStringParser(string targetString);
    public String[] get_Tokens();
    public void set_Tokens(String[] value);
    [IteratorStateMachineAttribute("FirebirdSql.Data.Isql.SqlStringParser/<Parse>d__7")]
public IEnumerable`1<FbStatement> Parse();
    private string ProcessLiteral(Int32& index);
    private void ProcessMultilineComment(Int32& index);
    private void ProcessSinglelineComment(Int32& index);
    private char GetChar(int index);
    private Nullable`1<char> GetNextChar(int index);
}
public class FirebirdSql.Data.Isql.UnknownStatementEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private FbStatement <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlStatementType <NewStatementType>k__BackingField;
    public FbStatement Statement { get; private set; }
    public bool Handled { get; public set; }
    public bool Ignore { get; public set; }
    public SqlStatementType NewStatementType { get; public set; }
    public UnknownStatementEventArgs(FbStatement statement);
    [CompilerGeneratedAttribute]
public FbStatement get_Statement();
    [CompilerGeneratedAttribute]
private void set_Statement(FbStatement value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public SqlStatementType get_NewStatementType();
    [CompilerGeneratedAttribute]
public void set_NewStatementType(SqlStatementType value);
}
[ObsoleteAttribute("Use ConsoleLoggingProvider instead.")]
public class FirebirdSql.Data.Logging.ConsoleLoggerProvider : ConsoleLoggingProvider {
    public ConsoleLoggerProvider(FbLogLevel minimumLevel);
}
public class FirebirdSql.Data.Logging.ConsoleLoggingProvider : object {
    private FbLogLevel _minimumLevel;
    public ConsoleLoggingProvider(FbLogLevel minimumLevel);
    public sealed virtual IFbLogger CreateLogger(string name);
}
public enum FirebirdSql.Data.Logging.FbLogLevel : Enum {
    public int value__;
    public static FbLogLevel Trace;
    public static FbLogLevel Debug;
    public static FbLogLevel Info;
    public static FbLogLevel Warn;
    public static FbLogLevel Error;
    public static FbLogLevel Fatal;
}
public static class FirebirdSql.Data.Logging.FbLogManager : object {
    [CompilerGeneratedAttribute]
private static bool <IsParameterLoggingEnabled>k__BackingField;
    private static IFbLoggingProvider _provider;
    private static bool _providerRetrieved;
    public static IFbLoggingProvider Provider { get; public set; }
    public static bool IsParameterLoggingEnabled { get; public set; }
    private static FbLogManager();
    public static IFbLoggingProvider get_Provider();
    public static void set_Provider(IFbLoggingProvider value);
    [CompilerGeneratedAttribute]
public static bool get_IsParameterLoggingEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsParameterLoggingEnabled(bool value);
    internal static IFbLogger CreateLogger(string name);
}
public interface FirebirdSql.Data.Logging.IFbLogger {
    public abstract virtual bool IsEnabled(FbLogLevel level);
    public abstract virtual void Log(FbLogLevel level, string msg, Exception exception);
}
[ExtensionAttribute]
public static class FirebirdSql.Data.Logging.IFbLoggerExtensions : object {
    [ExtensionAttribute]
public static void Trace(IFbLogger logger, string msg);
    [ExtensionAttribute]
public static void Debug(IFbLogger logger, string msg);
    [ExtensionAttribute]
public static void Info(IFbLogger logger, string msg);
    [ExtensionAttribute]
public static void Warn(IFbLogger logger, string msg);
    [ExtensionAttribute]
public static void Error(IFbLogger logger, string msg);
    [ExtensionAttribute]
public static void Fatal(IFbLogger logger, string msg);
    [ExtensionAttribute]
public static void Trace(IFbLogger logger, string msg, Exception ex);
    [ExtensionAttribute]
public static void Debug(IFbLogger logger, string msg, Exception ex);
    [ExtensionAttribute]
public static void Info(IFbLogger logger, string msg, Exception ex);
    [ExtensionAttribute]
public static void Warn(IFbLogger logger, string msg, Exception ex);
    [ExtensionAttribute]
public static void Error(IFbLogger logger, string msg, Exception ex);
    [ExtensionAttribute]
public static void Fatal(IFbLogger logger, string msg, Exception ex);
}
public interface FirebirdSql.Data.Logging.IFbLoggingProvider {
    public abstract virtual IFbLogger CreateLogger(string name);
}
internal static class FirebirdSql.Data.Logging.LogMessages : object {
    public static void CommandExecution(IFbLogger log, FbCommand command);
    public static void CommandExecution(IFbLogger log, FbBatchCommand command);
    public static void ConnectionOpening(IFbLogger log, FbConnection connection);
    public static void ConnectionOpened(IFbLogger log, FbConnection connection);
    public static void ConnectionClosing(IFbLogger log, FbConnection connection);
    public static void ConnectionClosed(IFbLogger log, FbConnection connection);
    public static void TransactionBeginning(IFbLogger log, FbTransaction transaction);
    public static void TransactionBegan(IFbLogger log, FbTransaction transaction);
    public static void TransactionCommitting(IFbLogger log, FbTransaction transaction);
    public static void TransactionCommitted(IFbLogger log, FbTransaction transaction);
    public static void TransactionRollingBack(IFbLogger log, FbTransaction transaction);
    public static void TransactionRolledBack(IFbLogger log, FbTransaction transaction);
    public static void TransactionSaving(IFbLogger log, FbTransaction transaction);
    public static void TransactionSaved(IFbLogger log, FbTransaction transaction);
    public static void TransactionReleasingSavepoint(IFbLogger log, FbTransaction transaction);
    public static void TransactionReleasedSavepoint(IFbLogger log, FbTransaction transaction);
    public static void TransactionRollingBackSavepoint(IFbLogger log, FbTransaction transaction);
    public static void TransactionRolledBackSavepoint(IFbLogger log, FbTransaction transaction);
    public static void TransactionCommittingRetaining(IFbLogger log, FbTransaction transaction);
    public static void TransactionCommittedRetaining(IFbLogger log, FbTransaction transaction);
    public static void TransactionRollingBackRetaining(IFbLogger log, FbTransaction transaction);
    public static void TransactionRolledBackRetaining(IFbLogger log, FbTransaction transaction);
    private static bool IsNullParameterValue(object value);
}
internal class FirebirdSql.Data.Logging.NullLoggingProvider : object {
    public sealed virtual IFbLogger CreateLogger(string name);
}
internal class FirebirdSql.Data.Schema.FbCharacterSets : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbCheckConstraints : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbChecksByTable : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbCollations : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbColumnPrivileges : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbColumns : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbDomains : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbForeignKeyColumns : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbForeignKeys : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbFunctionArguments : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbFunctionPrivileges : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbFunctions : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbGenerators : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbIndexColumns : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbIndexes : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbPrimaryKeys : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbProcedureParameters : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbProcedurePrivileges : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbProcedures : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbRoles : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal abstract class FirebirdSql.Data.Schema.FbSchema : object {
    [CompilerGeneratedAttribute]
private int <MajorVersionNumber>k__BackingField;
    protected int MajorVersionNumber { get; private set; }
    protected abstract virtual StringBuilder GetCommandText(String[] restrictions);
    public DataTable GetSchema(FbConnection connection, string collectionName, String[] restrictions);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Schema.FbSchema/<GetSchemaAsync>d__2")]
public Task`1<DataTable> GetSchemaAsync(FbConnection connection, string collectionName, String[] restrictions, CancellationToken cancellationToken);
    protected FbCommand BuildCommand(FbConnection connection, string collectionName, String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
    protected virtual String[] ParseRestrictions(String[] restrictions);
    private void SetMajorVersionNumber(FbConnection connection);
    private static void TrimStringFields(DataTable schema);
    [CompilerGeneratedAttribute]
protected int get_MajorVersionNumber();
    [CompilerGeneratedAttribute]
private void set_MajorVersionNumber(int value);
}
internal class FirebirdSql.Data.Schema.FbSchemaFactory : object {
    private static string ResourceName;
    private static FbSchemaFactory();
    public static DataTable GetSchema(FbConnection connection, string collectionName, String[] restrictions);
    public static Task`1<DataTable> GetSchemaAsync(FbConnection connection, string collectionName, String[] restrictions, CancellationToken cancellationToken);
    private static DataTable PrepareCollection(FbConnection connection, string collectionName, String[] restrictions);
    private static Task`1<DataTable> PrepareCollectionAsync(FbConnection connection, string collectionName, String[] restrictions, CancellationToken cancellationToken);
    private static DataTable SqlCommandSchema(FbConnection connection, string collectionName, String[] restrictions);
    private static Task`1<DataTable> SqlCommandSchemaAsync(FbConnection connection, string collectionName, String[] restrictions, CancellationToken cancellationToken);
}
internal class FirebirdSql.Data.Schema.FbTableConstraints : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual String[] ParseRestrictions(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbTablePrivileges : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbTables : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbTriggers : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbUniqueKeys : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbViewColumns : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
internal class FirebirdSql.Data.Schema.FbViewPrivileges : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
}
internal class FirebirdSql.Data.Schema.FbViews : FbSchema {
    protected virtual StringBuilder GetCommandText(String[] restrictions);
    protected virtual void ProcessResult(DataTable schema);
}
public class FirebirdSql.Data.Services.FbBackup : FbService {
    [CompilerGeneratedAttribute]
private FbBackupFileCollection <BackupFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <VerboseInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Factor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipData>k__BackingField;
    [CompilerGeneratedAttribute]
private FbBackupFlags <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private FbBackupRestoreStatistics <Statistics>k__BackingField;
    public FbBackupFileCollection BackupFiles { get; }
    public bool Verbose { get; public set; }
    public Nullable`1<int> VerboseInterval { get; public set; }
    public int Factor { get; public set; }
    public string SkipData { get; public set; }
    public FbBackupFlags Options { get; public set; }
    public FbBackupRestoreStatistics Statistics { get; public set; }
    public FbBackup(string connectionString);
    [CompilerGeneratedAttribute]
public FbBackupFileCollection get_BackupFiles();
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_VerboseInterval();
    [CompilerGeneratedAttribute]
public void set_VerboseInterval(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_Factor();
    [CompilerGeneratedAttribute]
public void set_Factor(int value);
    [CompilerGeneratedAttribute]
public string get_SkipData();
    [CompilerGeneratedAttribute]
public void set_SkipData(string value);
    [CompilerGeneratedAttribute]
public FbBackupFlags get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FbBackupFlags value);
    [CompilerGeneratedAttribute]
public FbBackupRestoreStatistics get_Statistics();
    [CompilerGeneratedAttribute]
public void set_Statistics(FbBackupRestoreStatistics value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbBackup/<ExecuteAsync>d__29")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Services.FbBackupFile : object {
    [CompilerGeneratedAttribute]
private string <BackupFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BackupLength>k__BackingField;
    public string BackupFile { get; public set; }
    public Nullable`1<int> BackupLength { get; public set; }
    public FbBackupFile(string fileName, Nullable`1<int> fileLength);
    [CompilerGeneratedAttribute]
public string get_BackupFile();
    [CompilerGeneratedAttribute]
public void set_BackupFile(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BackupLength();
    [CompilerGeneratedAttribute]
public void set_BackupLength(Nullable`1<int> value);
}
public class FirebirdSql.Data.Services.FbBackupFileCollection : List`1<FbBackupFile> {
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbBackupFlags : Enum {
    public int value__;
    public static FbBackupFlags IgnoreChecksums;
    public static FbBackupFlags IgnoreLimbo;
    public static FbBackupFlags MetaDataOnly;
    public static FbBackupFlags NoGarbageCollect;
    public static FbBackupFlags OldDescriptions;
    public static FbBackupFlags NonTransportable;
    public static FbBackupFlags Convert;
    public static FbBackupFlags Expand;
    public static FbBackupFlags NoDatabaseTriggers;
    public static FbBackupFlags Zip;
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbBackupRestoreStatistics : Enum {
    public int value__;
    public static FbBackupRestoreStatistics TotalTime;
    public static FbBackupRestoreStatistics TimeDelta;
    public static FbBackupRestoreStatistics PageReads;
    public static FbBackupRestoreStatistics PageWrites;
}
[ExtensionAttribute]
internal static class FirebirdSql.Data.Services.FbBackupRestoreStatisticsExtensions : object {
    [ExtensionAttribute]
public static string BuildConfiguration(FbBackupRestoreStatistics statistics);
}
public class FirebirdSql.Data.Services.FbConfiguration : FbService {
    public FbConfiguration(string connectionString);
    public void SetSqlDialect(int sqlDialect);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<SetSqlDialectAsync>d__2")]
public Task SetSqlDialectAsync(int sqlDialect, CancellationToken cancellationToken);
    public void SetSweepInterval(int sweepInterval);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<SetSweepIntervalAsync>d__4")]
public Task SetSweepIntervalAsync(int sweepInterval, CancellationToken cancellationToken);
    public void SetPageBuffers(int pageBuffers);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<SetPageBuffersAsync>d__6")]
public Task SetPageBuffersAsync(int pageBuffers, CancellationToken cancellationToken);
    public void DatabaseShutdown(FbShutdownMode mode, int seconds);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<DatabaseShutdownAsync>d__8")]
public Task DatabaseShutdownAsync(FbShutdownMode mode, int seconds, CancellationToken cancellationToken);
    public void DatabaseShutdown2(FbShutdownOnlineMode mode, FbShutdownType type, int seconds);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<DatabaseShutdown2Async>d__10")]
public Task DatabaseShutdown2Async(FbShutdownOnlineMode mode, FbShutdownType type, int seconds, CancellationToken cancellationToken);
    public void DatabaseOnline();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<DatabaseOnlineAsync>d__12")]
public Task DatabaseOnlineAsync(CancellationToken cancellationToken);
    public void DatabaseOnline2(FbShutdownOnlineMode mode);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<DatabaseOnline2Async>d__14")]
public Task DatabaseOnline2Async(FbShutdownOnlineMode mode, CancellationToken cancellationToken);
    public void ActivateShadows();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<ActivateShadowsAsync>d__16")]
public Task ActivateShadowsAsync(CancellationToken cancellationToken);
    public void SetForcedWrites(bool forcedWrites);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<SetForcedWritesAsync>d__18")]
public Task SetForcedWritesAsync(bool forcedWrites, CancellationToken cancellationToken);
    public void SetReserveSpace(bool reserveSpace);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<SetReserveSpaceAsync>d__20")]
public Task SetReserveSpaceAsync(bool reserveSpace, CancellationToken cancellationToken);
    public void SetAccessMode(bool readOnly);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<SetAccessModeAsync>d__22")]
public Task SetAccessModeAsync(bool readOnly, CancellationToken cancellationToken);
    public void NoLinger();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbConfiguration/<NoLingerAsync>d__24")]
public Task NoLingerAsync(CancellationToken cancellationToken);
    private static byte FbShutdownOnlineModeToIscCode(FbShutdownOnlineMode mode);
}
public class FirebirdSql.Data.Services.FbDatabasesInfo : object {
    [CompilerGeneratedAttribute]
private int <ConnectionCount>k__BackingField;
    private List`1<string> _databases;
    public int ConnectionCount { get; internal set; }
    public IReadOnlyList`1<string> Databases { get; }
    [CompilerGeneratedAttribute]
public int get_ConnectionCount();
    [CompilerGeneratedAttribute]
internal void set_ConnectionCount(int value);
    public IReadOnlyList`1<string> get_Databases();
    internal void AddDatabase(string database);
}
public class FirebirdSql.Data.Services.FbDatabaseTraceConfiguration : FbTraceConfiguration {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private FbDatabaseTraceEvents <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionID>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSQLLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBLRLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDYNLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxArgumentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxArgumentsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeGdsCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeGdsCodes>k__BackingField;
    public string DatabaseName { get; public set; }
    public bool Enabled { get; public set; }
    public FbDatabaseTraceEvents Events { get; public set; }
    public int ConnectionID { get; public set; }
    public TimeSpan TimeThreshold { get; public set; }
    public int MaxSQLLength { get; public set; }
    public int MaxBLRLength { get; public set; }
    public int MaxDYNLength { get; public set; }
    public int MaxArgumentLength { get; public set; }
    public int MaxArgumentsCount { get; public set; }
    public string IncludeFilter { get; public set; }
    public string ExcludeFilter { get; public set; }
    public string IncludeGdsCodes { get; public set; }
    public string ExcludeGdsCodes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public FbDatabaseTraceEvents get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(FbDatabaseTraceEvents value);
    [CompilerGeneratedAttribute]
public int get_ConnectionID();
    [CompilerGeneratedAttribute]
public void set_ConnectionID(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeThreshold();
    [CompilerGeneratedAttribute]
public void set_TimeThreshold(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxSQLLength();
    [CompilerGeneratedAttribute]
public void set_MaxSQLLength(int value);
    [CompilerGeneratedAttribute]
public int get_MaxBLRLength();
    [CompilerGeneratedAttribute]
public void set_MaxBLRLength(int value);
    [CompilerGeneratedAttribute]
public int get_MaxDYNLength();
    [CompilerGeneratedAttribute]
public void set_MaxDYNLength(int value);
    [CompilerGeneratedAttribute]
public int get_MaxArgumentLength();
    [CompilerGeneratedAttribute]
public void set_MaxArgumentLength(int value);
    [CompilerGeneratedAttribute]
public int get_MaxArgumentsCount();
    [CompilerGeneratedAttribute]
public void set_MaxArgumentsCount(int value);
    [CompilerGeneratedAttribute]
public string get_IncludeFilter();
    [CompilerGeneratedAttribute]
public void set_IncludeFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeFilter();
    [CompilerGeneratedAttribute]
public void set_ExcludeFilter(string value);
    [CompilerGeneratedAttribute]
public string get_IncludeGdsCodes();
    [CompilerGeneratedAttribute]
public void set_IncludeGdsCodes(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeGdsCodes();
    [CompilerGeneratedAttribute]
public void set_ExcludeGdsCodes(string value);
    public string BuildConfiguration(FbTraceVersion version);
    private string BuildConfiguration1();
    private string BuildConfiguration2();
}
public class FirebirdSql.Data.Services.FbDatabaseTraceConfigurationCollection : List`1<FbDatabaseTraceConfiguration> {
    public string BuildConfiguration(FbTraceVersion version);
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbDatabaseTraceEvents : Enum {
    public int value__;
    public static FbDatabaseTraceEvents Connections;
    public static FbDatabaseTraceEvents Transactions;
    public static FbDatabaseTraceEvents StatementPrepare;
    public static FbDatabaseTraceEvents StatementFree;
    public static FbDatabaseTraceEvents StatementStart;
    public static FbDatabaseTraceEvents StatementFinish;
    public static FbDatabaseTraceEvents ProcedureStart;
    public static FbDatabaseTraceEvents ProcedureFinish;
    public static FbDatabaseTraceEvents FunctionStart;
    public static FbDatabaseTraceEvents FunctionFinish;
    public static FbDatabaseTraceEvents TriggerStart;
    public static FbDatabaseTraceEvents TriggerFinish;
    public static FbDatabaseTraceEvents Context;
    public static FbDatabaseTraceEvents Errors;
    public static FbDatabaseTraceEvents Warnings;
    public static FbDatabaseTraceEvents InitFini;
    public static FbDatabaseTraceEvents Sweep;
    public static FbDatabaseTraceEvents PrintPlan;
    public static FbDatabaseTraceEvents ExplainPlan;
    public static FbDatabaseTraceEvents PrintPerf;
    public static FbDatabaseTraceEvents BLRRequests;
    public static FbDatabaseTraceEvents PrintBLR;
    public static FbDatabaseTraceEvents DYNRequests;
    public static FbDatabaseTraceEvents PrintDYN;
}
public class FirebirdSql.Data.Services.FbLog : FbService {
    public FbLog(string connectionString);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbLog/<ExecuteAsync>d__2")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Services.FbNBackup : FbService {
    private int _level;
    [CompilerGeneratedAttribute]
private string <BackupFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectIO>k__BackingField;
    [CompilerGeneratedAttribute]
private FbNBackupFlags <Options>k__BackingField;
    public int Level { get; public set; }
    public string BackupFile { get; public set; }
    public bool DirectIO { get; public set; }
    public FbNBackupFlags Options { get; public set; }
    public FbNBackup(string connectionString);
    public int get_Level();
    public void set_Level(int value);
    [CompilerGeneratedAttribute]
public string get_BackupFile();
    [CompilerGeneratedAttribute]
public void set_BackupFile(string value);
    [CompilerGeneratedAttribute]
public bool get_DirectIO();
    [CompilerGeneratedAttribute]
public void set_DirectIO(bool value);
    [CompilerGeneratedAttribute]
public FbNBackupFlags get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FbNBackupFlags value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbNBackup/<ExecuteAsync>d__18")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbNBackupFlags : Enum {
    public int value__;
    public static FbNBackupFlags NoDatabaseTriggers;
}
public class FirebirdSql.Data.Services.FbNFixup : FbService {
    public FbNFixup(string connectionString);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbNFixup/<ExecuteAsync>d__2")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Services.FbNRestore : FbService {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <BackupFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DirectIO>k__BackingField;
    public IEnumerable`1<string> BackupFiles { get; public set; }
    public bool DirectIO { get; public set; }
    public FbNRestore(string connectionString);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_BackupFiles();
    [CompilerGeneratedAttribute]
public void set_BackupFiles(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DirectIO();
    [CompilerGeneratedAttribute]
public void set_DirectIO(bool value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbNRestore/<ExecuteAsync>d__10")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Services.FbRestore : FbService {
    private Nullable`1<int> _pageSize;
    [CompilerGeneratedAttribute]
private FbBackupFileCollection <BackupFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <VerboseInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageBuffers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipData>k__BackingField;
    [CompilerGeneratedAttribute]
private FbRestoreFlags <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private FbBackupRestoreStatistics <Statistics>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public FbBackupFileCollection BackupFiles { get; }
    public bool Verbose { get; public set; }
    public Nullable`1<int> VerboseInterval { get; public set; }
    public Nullable`1<int> PageBuffers { get; public set; }
    public bool ReadOnly { get; public set; }
    public string SkipData { get; public set; }
    public FbRestoreFlags Options { get; public set; }
    public FbBackupRestoreStatistics Statistics { get; public set; }
    public FbRestore(string connectionString);
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public FbBackupFileCollection get_BackupFiles();
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_VerboseInterval();
    [CompilerGeneratedAttribute]
public void set_VerboseInterval(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageBuffers();
    [CompilerGeneratedAttribute]
public void set_PageBuffers(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_SkipData();
    [CompilerGeneratedAttribute]
public void set_SkipData(string value);
    [CompilerGeneratedAttribute]
public FbRestoreFlags get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FbRestoreFlags value);
    [CompilerGeneratedAttribute]
public FbBackupRestoreStatistics get_Statistics();
    [CompilerGeneratedAttribute]
public void set_Statistics(FbBackupRestoreStatistics value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbRestore/<ExecuteAsync>d__37")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbRestoreFlags : Enum {
    public int value__;
    public static FbRestoreFlags DeactivateIndexes;
    public static FbRestoreFlags NoShadow;
    public static FbRestoreFlags NoValidity;
    public static FbRestoreFlags IndividualCommit;
    public static FbRestoreFlags Replace;
    public static FbRestoreFlags Create;
    public static FbRestoreFlags UseAllSpace;
    public static FbRestoreFlags MetaDataOnly;
}
public class FirebirdSql.Data.Services.FbSecurity : FbService {
    public FbSecurity(string connectionString);
    public void AddUser(FbUserData user);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbSecurity/<AddUserAsync>d__2")]
public Task AddUserAsync(FbUserData user, CancellationToken cancellationToken);
    public void DeleteUser(FbUserData user);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbSecurity/<DeleteUserAsync>d__4")]
public Task DeleteUserAsync(FbUserData user, CancellationToken cancellationToken);
    public void ModifyUser(FbUserData user);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbSecurity/<ModifyUserAsync>d__6")]
public Task ModifyUserAsync(FbUserData user, CancellationToken cancellationToken);
    public FbUserData DisplayUser(string userName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbSecurity/<DisplayUserAsync>d__8")]
public Task`1<FbUserData> DisplayUserAsync(string userName, CancellationToken cancellationToken);
    public FbUserData[] DisplayUsers();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbSecurity/<DisplayUsersAsync>d__10")]
public Task`1<FbUserData[]> DisplayUsersAsync(CancellationToken cancellationToken);
    public string GetUsersDbPath();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbSecurity/<GetUsersDbPathAsync>d__12")]
public Task`1<string> GetUsersDbPathAsync(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Services.FbServerConfig : object {
    [CompilerGeneratedAttribute]
private int <LockMemSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockSemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrioritySwitchDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockGrantOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnyLockMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnyLockSemaphore>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnyLockSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnyEventMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockHashSlots>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeadlockTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LockRequireSpins>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DummyPacketInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IpcMapSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultDbCachePages>k__BackingField;
    public int LockMemSize { get; internal set; }
    public int LockSemCount { get; internal set; }
    public int LockSignal { get; internal set; }
    public int EventMemorySize { get; internal set; }
    public int PrioritySwitchDelay { get; internal set; }
    public int MinMemory { get; internal set; }
    public int MaxMemory { get; internal set; }
    public int LockGrantOrder { get; internal set; }
    public int AnyLockMemory { get; internal set; }
    public int AnyLockSemaphore { get; internal set; }
    public int AnyLockSignal { get; internal set; }
    public int AnyEventMemory { get; internal set; }
    public int LockHashSlots { get; internal set; }
    public int DeadlockTimeout { get; internal set; }
    public int LockRequireSpins { get; internal set; }
    public int ConnectionTimeout { get; internal set; }
    public int DummyPacketInterval { get; internal set; }
    public int IpcMapSize { get; internal set; }
    public int DefaultDbCachePages { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_LockMemSize();
    [CompilerGeneratedAttribute]
internal void set_LockMemSize(int value);
    [CompilerGeneratedAttribute]
public int get_LockSemCount();
    [CompilerGeneratedAttribute]
internal void set_LockSemCount(int value);
    [CompilerGeneratedAttribute]
public int get_LockSignal();
    [CompilerGeneratedAttribute]
internal void set_LockSignal(int value);
    [CompilerGeneratedAttribute]
public int get_EventMemorySize();
    [CompilerGeneratedAttribute]
internal void set_EventMemorySize(int value);
    [CompilerGeneratedAttribute]
public int get_PrioritySwitchDelay();
    [CompilerGeneratedAttribute]
internal void set_PrioritySwitchDelay(int value);
    [CompilerGeneratedAttribute]
public int get_MinMemory();
    [CompilerGeneratedAttribute]
internal void set_MinMemory(int value);
    [CompilerGeneratedAttribute]
public int get_MaxMemory();
    [CompilerGeneratedAttribute]
internal void set_MaxMemory(int value);
    [CompilerGeneratedAttribute]
public int get_LockGrantOrder();
    [CompilerGeneratedAttribute]
internal void set_LockGrantOrder(int value);
    [CompilerGeneratedAttribute]
public int get_AnyLockMemory();
    [CompilerGeneratedAttribute]
internal void set_AnyLockMemory(int value);
    [CompilerGeneratedAttribute]
public int get_AnyLockSemaphore();
    [CompilerGeneratedAttribute]
internal void set_AnyLockSemaphore(int value);
    [CompilerGeneratedAttribute]
public int get_AnyLockSignal();
    [CompilerGeneratedAttribute]
internal void set_AnyLockSignal(int value);
    [CompilerGeneratedAttribute]
public int get_AnyEventMemory();
    [CompilerGeneratedAttribute]
internal void set_AnyEventMemory(int value);
    [CompilerGeneratedAttribute]
public int get_LockHashSlots();
    [CompilerGeneratedAttribute]
internal void set_LockHashSlots(int value);
    [CompilerGeneratedAttribute]
public int get_DeadlockTimeout();
    [CompilerGeneratedAttribute]
internal void set_DeadlockTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_LockRequireSpins();
    [CompilerGeneratedAttribute]
internal void set_LockRequireSpins(int value);
    [CompilerGeneratedAttribute]
public int get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
internal void set_ConnectionTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_DummyPacketInterval();
    [CompilerGeneratedAttribute]
internal void set_DummyPacketInterval(int value);
    [CompilerGeneratedAttribute]
public int get_IpcMapSize();
    [CompilerGeneratedAttribute]
internal void set_IpcMapSize(int value);
    [CompilerGeneratedAttribute]
public int get_DefaultDbCachePages();
    [CompilerGeneratedAttribute]
internal void set_DefaultDbCachePages(int value);
}
public class FirebirdSql.Data.Services.FbServerProperties : FbService {
    public FbServerProperties(string connectionString);
    public int GetVersion();
    public Task`1<int> GetVersionAsync(CancellationToken cancellationToken);
    public string GetServerVersion();
    public Task`1<string> GetServerVersionAsync(CancellationToken cancellationToken);
    public string GetImplementation();
    public Task`1<string> GetImplementationAsync(CancellationToken cancellationToken);
    public string GetRootDirectory();
    public Task`1<string> GetRootDirectoryAsync(CancellationToken cancellationToken);
    public string GetLockManager();
    public Task`1<string> GetLockManagerAsync(CancellationToken cancellationToken);
    public string GetMessageFile();
    public Task`1<string> GetMessageFileAsync(CancellationToken cancellationToken);
    public FbDatabasesInfo GetDatabasesInfo();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbServerProperties/<GetDatabasesInfoAsync>d__14")]
public Task`1<FbDatabasesInfo> GetDatabasesInfoAsync(CancellationToken cancellationToken);
    public FbServerConfig GetServerConfig();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbServerProperties/<GetServerConfigAsync>d__16")]
public Task`1<FbServerConfig> GetServerConfigAsync(CancellationToken cancellationToken);
    private string GetString(int item);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbServerProperties/<GetStringAsync>d__18")]
private Task`1<string> GetStringAsync(int item, CancellationToken cancellationToken);
    private int GetInt32(int item);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbServerProperties/<GetInt32Async>d__20")]
private Task`1<int> GetInt32Async(int item, CancellationToken cancellationToken);
    private List`1<object> GetInfo(int item);
    private Task`1<List`1<object>> GetInfoAsync(int item, CancellationToken cancellationToken);
    private List`1<object> GetInfo(Byte[] items);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbServerProperties/<GetInfoAsync>d__24")]
private Task`1<List`1<object>> GetInfoAsync(Byte[] items, CancellationToken cancellationToken);
    public static Version ParseServerVersion(string version);
}
public abstract class FirebirdSql.Data.Services.FbService : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ServiceOutputEventArgs> ServiceOutput;
    [CompilerGeneratedAttribute]
private EventHandler`1<FbInfoMessageEventArgs> InfoMessage;
    private static string ServiceName;
    private ServiceManagerBase _svc;
    private ConnectionString _connectionStringOptions;
    [CompilerGeneratedAttribute]
private FbServiceState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueryBufferSize>k__BackingField;
    private string _connectionString;
    private protected ServiceManagerBase Service { get; }
    private protected ConnectionString ConnectionStringOptions { get; }
    public FbServiceState State { get; private set; }
    public int QueryBufferSize { get; public set; }
    public string ConnectionString { get; public set; }
    private protected FbService(string connectionString);
    [CompilerGeneratedAttribute]
public void add_ServiceOutput(EventHandler`1<ServiceOutputEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ServiceOutput(EventHandler`1<ServiceOutputEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InfoMessage(EventHandler`1<FbInfoMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InfoMessage(EventHandler`1<FbInfoMessageEventArgs> value);
    private protected ServiceManagerBase get_Service();
    private protected ConnectionString get_ConnectionStringOptions();
    [CompilerGeneratedAttribute]
public FbServiceState get_State();
    [CompilerGeneratedAttribute]
private void set_State(FbServiceState value);
    [CompilerGeneratedAttribute]
public int get_QueryBufferSize();
    [CompilerGeneratedAttribute]
public void set_QueryBufferSize(int value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    private ServiceParameterBufferBase BuildSpb();
    private protected void Open();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<OpenAsync>d__28")]
private protected Task OpenAsync(CancellationToken cancellationToken);
    private protected void Close();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<CloseAsync>d__30")]
private protected Task CloseAsync(CancellationToken cancellationToken);
    private protected void StartTask(ServiceParameterBufferBase spb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<StartTaskAsync>d__32")]
private protected Task StartTaskAsync(ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    private protected List`1<object> Query(Byte[] items, ServiceParameterBufferBase spb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<QueryAsync>d__34")]
private protected Task`1<List`1<object>> QueryAsync(Byte[] items, ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    private protected void Query(Byte[] items, ServiceParameterBufferBase spb, Action`2<bool, object> queryResponseAction);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<QueryAsync>d__36")]
private protected Task QueryAsync(Byte[] items, ServiceParameterBufferBase spb, Func`3<bool, object, Task> queryResponseAction, CancellationToken cancellationToken);
    private protected void ProcessServiceOutput(ServiceParameterBufferBase spb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<ProcessServiceOutputAsync>d__38")]
private protected Task ProcessServiceOutputAsync(ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    private protected string GetNextLine(ServiceParameterBufferBase spb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<GetNextLineAsync>d__40")]
private protected Task`1<string> GetNextLineAsync(ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    private protected void OnServiceOutput(string message);
    private protected void EnsureDatabase();
    private Byte[] QueryService(Byte[] items, ServiceParameterBufferBase spb);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbService/<QueryServiceAsync>d__44")]
private Task`1<Byte[]> QueryServiceAsync(Byte[] items, ServiceParameterBufferBase spb, CancellationToken cancellationToken);
    private void OnWarningMessage(IscException warning);
    private static FbServerConfig ParseServerConfig(Byte[] buffer, Int32& pos, Charset charset);
    private static FbDatabasesInfo ParseDatabasesInfo(Byte[] buffer, Int32& pos, Charset charset);
    private static FbUserData[] ParseUserData(Byte[] buffer, Int32& pos, Charset charset);
    private static int GetLength(Byte[] buffer, int size, Int32& pos);
}
public enum FirebirdSql.Data.Services.FbServiceState : Enum {
    public int value__;
    public static FbServiceState Closed;
    public static FbServiceState Open;
}
public class FirebirdSql.Data.Services.FbServiceTraceConfiguration : FbTraceConfiguration {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private FbServiceTraceEvents <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeGdsCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeGdsCodes>k__BackingField;
    public bool Enabled { get; public set; }
    public FbServiceTraceEvents Events { get; public set; }
    public string IncludeFilter { get; public set; }
    public string ExcludeFilter { get; public set; }
    public string IncludeGdsCodes { get; public set; }
    public string ExcludeGdsCodes { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public FbServiceTraceEvents get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(FbServiceTraceEvents value);
    [CompilerGeneratedAttribute]
public string get_IncludeFilter();
    [CompilerGeneratedAttribute]
public void set_IncludeFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeFilter();
    [CompilerGeneratedAttribute]
public void set_ExcludeFilter(string value);
    [CompilerGeneratedAttribute]
public string get_IncludeGdsCodes();
    [CompilerGeneratedAttribute]
public void set_IncludeGdsCodes(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeGdsCodes();
    [CompilerGeneratedAttribute]
public void set_ExcludeGdsCodes(string value);
    public string BuildConfiguration(FbTraceVersion version);
    private string BuildConfiguration1();
    private string BuildConfiguration2();
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbServiceTraceEvents : Enum {
    public int value__;
    public static FbServiceTraceEvents Services;
    public static FbServiceTraceEvents ServiceQuery;
    public static FbServiceTraceEvents Errors;
    public static FbServiceTraceEvents Warnings;
    public static FbServiceTraceEvents InitFini;
}
public enum FirebirdSql.Data.Services.FbShutdownMode : Enum {
    public int value__;
    public static FbShutdownMode Forced;
    public static FbShutdownMode DenyTransaction;
    public static FbShutdownMode DenyConnection;
}
public enum FirebirdSql.Data.Services.FbShutdownOnlineMode : Enum {
    public int value__;
    public static FbShutdownOnlineMode Normal;
    public static FbShutdownOnlineMode Multi;
    public static FbShutdownOnlineMode Single;
    public static FbShutdownOnlineMode Full;
}
public enum FirebirdSql.Data.Services.FbShutdownType : Enum {
    public int value__;
    public static FbShutdownType ForceShutdown;
    public static FbShutdownType AttachmentsShutdown;
    public static FbShutdownType TransactionsShutdown;
}
public class FirebirdSql.Data.Services.FbStatistical : FbService {
    [CompilerGeneratedAttribute]
private FbStatisticalFlags <Options>k__BackingField;
    public FbStatisticalFlags Options { get; public set; }
    public FbStatistical(string connectionString);
    [CompilerGeneratedAttribute]
public FbStatisticalFlags get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FbStatisticalFlags value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbStatistical/<ExecuteAsync>d__6")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbStatisticalFlags : Enum {
    public int value__;
    public static FbStatisticalFlags DataPages;
    public static FbStatisticalFlags DatabaseLog;
    public static FbStatisticalFlags HeaderPages;
    public static FbStatisticalFlags IndexPages;
    public static FbStatisticalFlags SystemTablesRelations;
    public static FbStatisticalFlags RecordVersionStatistics;
}
public class FirebirdSql.Data.Services.FbStreamingBackup : FbService {
    [CompilerGeneratedAttribute]
private string <SkipData>k__BackingField;
    [CompilerGeneratedAttribute]
private FbBackupFlags <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    public string SkipData { get; public set; }
    public FbBackupFlags Options { get; public set; }
    public Stream OutputStream { get; public set; }
    public FbStreamingBackup(string connectionString);
    [CompilerGeneratedAttribute]
public string get_SkipData();
    [CompilerGeneratedAttribute]
public void set_SkipData(string value);
    [CompilerGeneratedAttribute]
public FbBackupFlags get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FbBackupFlags value);
    [CompilerGeneratedAttribute]
public Stream get_OutputStream();
    [CompilerGeneratedAttribute]
public void set_OutputStream(Stream value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbStreamingBackup/<ExecuteAsync>d__14")]
public Task ExecuteAsync(CancellationToken cancellationToken);
    private void ReadOutput();
    private Task ReadOutputAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <ReadOutput>b__15_0(bool _, object x);
}
public class FirebirdSql.Data.Services.FbStreamingRestore : FbService {
    private Nullable`1<int> _pageSize;
    [CompilerGeneratedAttribute]
private Stream <InputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <VerboseInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageBuffers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipData>k__BackingField;
    [CompilerGeneratedAttribute]
private FbRestoreFlags <Options>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public Stream InputStream { get; public set; }
    public bool Verbose { get; public set; }
    public Nullable`1<int> VerboseInterval { get; public set; }
    public Nullable`1<int> PageBuffers { get; public set; }
    public bool ReadOnly { get; public set; }
    public string SkipData { get; public set; }
    public FbRestoreFlags Options { get; public set; }
    public FbStreamingRestore(string connectionString);
    public Nullable`1<int> get_PageSize();
    public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Stream get_InputStream();
    [CompilerGeneratedAttribute]
public void set_InputStream(Stream value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_VerboseInterval();
    [CompilerGeneratedAttribute]
public void set_VerboseInterval(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageBuffers();
    [CompilerGeneratedAttribute]
public void set_PageBuffers(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_SkipData();
    [CompilerGeneratedAttribute]
public void set_SkipData(string value);
    [CompilerGeneratedAttribute]
public FbRestoreFlags get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FbRestoreFlags value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbStreamingRestore/<ExecuteAsync>d__34")]
public Task ExecuteAsync(CancellationToken cancellationToken);
    private void ReadInput();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbStreamingRestore/<ReadInputAsync>d__36")]
private Task ReadInputAsync(CancellationToken cancellationToken);
    private static int GetLength(IList`1<object> items);
}
public class FirebirdSql.Data.Services.FbTrace : FbService {
    private FbTraceVersion _version;
    [CompilerGeneratedAttribute]
private FbDatabaseTraceConfigurationCollection <DatabasesConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private FbServiceTraceConfiguration <ServiceConfiguration>k__BackingField;
    public FbDatabaseTraceConfigurationCollection DatabasesConfigurations { get; }
    public FbServiceTraceConfiguration ServiceConfiguration { get; public set; }
    public FbTrace(FbTraceVersion version, string connectionString);
    [CompilerGeneratedAttribute]
public FbDatabaseTraceConfigurationCollection get_DatabasesConfigurations();
    [CompilerGeneratedAttribute]
public FbServiceTraceConfiguration get_ServiceConfiguration();
    [CompilerGeneratedAttribute]
public void set_ServiceConfiguration(FbServiceTraceConfiguration value);
    public void Start(string sessionName);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbTrace/<StartAsync>d__10")]
public Task StartAsync(string sessionName, CancellationToken cancellationToken);
    public void Stop(int sessionID);
    public Task StopAsync(int sessionID, CancellationToken cancellationToken);
    public void Suspend(int sessionID);
    public Task SuspendAsync(int sessionID, CancellationToken cancellationToken);
    public void Resume(int sessionID);
    public Task ResumeAsync(int sessionID, CancellationToken cancellationToken);
    public void List();
    public Task ListAsync(CancellationToken cancellationToken);
    private void DoSimpleAction(int action, Nullable`1<int> sessionID);
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbTrace/<DoSimpleActionAsync>d__20")]
private Task DoSimpleActionAsync(int action, Nullable`1<int> sessionID, CancellationToken cancellationToken);
    private FbTraceVersion DetectVersion();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbTrace/<DetectVersionAsync>d__22")]
private Task`1<FbTraceVersion> DetectVersionAsync(CancellationToken cancellationToken);
}
public abstract class FirebirdSql.Data.Services.FbTraceConfiguration : object {
    protected static string WriteBoolValue(bool b);
    protected static string WriteString(string s);
    protected static string WriteNumber(int i);
    protected static string WriteRegEx(string re);
}
public enum FirebirdSql.Data.Services.FbTraceVersion : Enum {
    public int value__;
    public static FbTraceVersion Detect;
    public static FbTraceVersion Version1;
    public static FbTraceVersion Version2;
}
public class FirebirdSql.Data.Services.FbUserData : object {
    private string _userName;
    private string _userPassword;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MiddleName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GroupID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    public string UserName { get; public set; }
    public string UserPassword { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string MiddleName { get; public set; }
    public int UserID { get; public set; }
    public int GroupID { get; public set; }
    public string GroupName { get; public set; }
    public string RoleName { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    public string get_UserPassword();
    public void set_UserPassword(string value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
public void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
public void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_MiddleName();
    [CompilerGeneratedAttribute]
public void set_MiddleName(string value);
    [CompilerGeneratedAttribute]
public int get_UserID();
    [CompilerGeneratedAttribute]
public void set_UserID(int value);
    [CompilerGeneratedAttribute]
public int get_GroupID();
    [CompilerGeneratedAttribute]
public void set_GroupID(int value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public void set_RoleName(string value);
}
public class FirebirdSql.Data.Services.FbValidation : FbService {
    [CompilerGeneratedAttribute]
private FbValidationFlags <Options>k__BackingField;
    public FbValidationFlags Options { get; public set; }
    public FbValidation(string connectionString);
    [CompilerGeneratedAttribute]
public FbValidationFlags get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FbValidationFlags value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbValidation/<ExecuteAsync>d__6")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
public class FirebirdSql.Data.Services.FbValidation2 : FbService {
    [CompilerGeneratedAttribute]
private string <TablesInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TablesExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndicesInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndicesExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LockTimeout>k__BackingField;
    public string TablesInclude { get; public set; }
    public string TablesExclude { get; public set; }
    public string IndicesInclude { get; public set; }
    public string IndicesExclude { get; public set; }
    public Nullable`1<int> LockTimeout { get; public set; }
    public FbValidation2(string connectionString);
    [CompilerGeneratedAttribute]
public string get_TablesInclude();
    [CompilerGeneratedAttribute]
public void set_TablesInclude(string value);
    [CompilerGeneratedAttribute]
public string get_TablesExclude();
    [CompilerGeneratedAttribute]
public void set_TablesExclude(string value);
    [CompilerGeneratedAttribute]
public string get_IndicesInclude();
    [CompilerGeneratedAttribute]
public void set_IndicesInclude(string value);
    [CompilerGeneratedAttribute]
public string get_IndicesExclude();
    [CompilerGeneratedAttribute]
public void set_IndicesExclude(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LockTimeout();
    [CompilerGeneratedAttribute]
public void set_LockTimeout(Nullable`1<int> value);
    public void Execute();
    [AsyncStateMachineAttribute("FirebirdSql.Data.Services.FbValidation2/<ExecuteAsync>d__22")]
public Task ExecuteAsync(CancellationToken cancellationToken);
}
[FlagsAttribute]
public enum FirebirdSql.Data.Services.FbValidationFlags : Enum {
    public int value__;
    public static FbValidationFlags ValidateDatabase;
    public static FbValidationFlags SweepDatabase;
    public static FbValidationFlags MendDatabase;
    public static FbValidationFlags CheckDatabase;
    public static FbValidationFlags IgnoreChecksum;
    public static FbValidationFlags KillShadows;
    public static FbValidationFlags Full;
}
public class FirebirdSql.Data.Services.ServiceOutputEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    public ServiceOutputEventArgs(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[IsReadOnlyAttribute]
public class FirebirdSql.Data.Types.FbDecFloat : ValueType {
    [CompilerGeneratedAttribute]
private DecimalType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Negative>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Coefficient>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Exponent>k__BackingField;
    [CompilerGeneratedAttribute]
private static FbDecFloat <NegativeZero>k__BackingField;
    [CompilerGeneratedAttribute]
private static FbDecFloat <PositiveInfinity>k__BackingField;
    [CompilerGeneratedAttribute]
private static FbDecFloat <NegativeInfinity>k__BackingField;
    [CompilerGeneratedAttribute]
private static FbDecFloat <PositiveNaN>k__BackingField;
    [CompilerGeneratedAttribute]
private static FbDecFloat <NegativeNaN>k__BackingField;
    [CompilerGeneratedAttribute]
private static FbDecFloat <PositiveSignalingNaN>k__BackingField;
    [CompilerGeneratedAttribute]
private static FbDecFloat <NegativeSignalingNaN>k__BackingField;
    internal DecimalType Type { get; }
    internal bool Negative { get; }
    public BigInteger Coefficient { get; }
    public int Exponent { get; }
    public static FbDecFloat NegativeZero { get; }
    public static FbDecFloat PositiveInfinity { get; }
    public static FbDecFloat NegativeInfinity { get; }
    public static FbDecFloat PositiveNaN { get; }
    public static FbDecFloat NegativeNaN { get; }
    public static FbDecFloat PositiveSignalingNaN { get; }
    public static FbDecFloat NegativeSignalingNaN { get; }
    internal FbDecFloat(DecimalType type, bool negative, BigInteger coefficient, int exponent);
    public FbDecFloat(BigInteger coefficient, int exponent);
    private static FbDecFloat();
    [CompilerGeneratedAttribute]
internal DecimalType get_Type();
    [CompilerGeneratedAttribute]
internal bool get_Negative();
    [CompilerGeneratedAttribute]
public BigInteger get_Coefficient();
    [CompilerGeneratedAttribute]
public int get_Exponent();
    [CompilerGeneratedAttribute]
public static FbDecFloat get_NegativeZero();
    [CompilerGeneratedAttribute]
public static FbDecFloat get_PositiveInfinity();
    [CompilerGeneratedAttribute]
public static FbDecFloat get_NegativeInfinity();
    [CompilerGeneratedAttribute]
public static FbDecFloat get_PositiveNaN();
    [CompilerGeneratedAttribute]
public static FbDecFloat get_NegativeNaN();
    [CompilerGeneratedAttribute]
public static FbDecFloat get_PositiveSignalingNaN();
    [CompilerGeneratedAttribute]
public static FbDecFloat get_NegativeSignalingNaN();
    public static FbDecFloat op_Implicit(byte value);
    public static FbDecFloat op_Implicit(sbyte value);
    public static FbDecFloat op_Implicit(short value);
    public static FbDecFloat op_Implicit(ushort value);
    public static FbDecFloat op_Implicit(int value);
    public static FbDecFloat op_Implicit(UInt32 value);
    public static FbDecFloat op_Implicit(long value);
    public static FbDecFloat op_Implicit(ulong value);
    public static FbDecFloat op_Explicit(float value);
    public static FbDecFloat op_Explicit(double value);
    public static FbDecFloat op_Explicit(decimal value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(FbDecFloat other);
    public static bool op_Equality(FbDecFloat lhs, FbDecFloat rhs);
    public static bool op_Inequality(FbDecFloat lhs, FbDecFloat rhs);
    private static FbDecFloat ParseNumber(IFormattable formattable, string format);
}
[IsReadOnlyAttribute]
public class FirebirdSql.Data.Types.FbZonedDateTime : ValueType {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Offset>k__BackingField;
    public DateTime DateTime { get; }
    public string TimeZone { get; }
    public Nullable`1<TimeSpan> Offset { get; }
    internal FbZonedDateTime(DateTime dateTime, string timeZone, Nullable`1<TimeSpan> offset);
    public FbZonedDateTime(DateTime dateTime, string timeZone);
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Offset();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(FbZonedDateTime other);
    public static bool op_Equality(FbZonedDateTime lhs, FbZonedDateTime rhs);
    public static bool op_Inequality(FbZonedDateTime lhs, FbZonedDateTime rhs);
}
[IsReadOnlyAttribute]
public class FirebirdSql.Data.Types.FbZonedTime : ValueType {
    [CompilerGeneratedAttribute]
private TimeSpan <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Offset>k__BackingField;
    public TimeSpan Time { get; }
    public string TimeZone { get; }
    public Nullable`1<TimeSpan> Offset { get; }
    internal FbZonedTime(TimeSpan time, string timeZone, Nullable`1<TimeSpan> offset);
    public FbZonedTime(TimeSpan time, string timeZone);
    [CompilerGeneratedAttribute]
public TimeSpan get_Time();
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Offset();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(FbZonedTime other);
    public static bool op_Equality(FbZonedTime lhs, FbZonedTime rhs);
    public static bool op_Inequality(FbZonedTime lhs, FbZonedTime rhs);
}
internal class Ionic.Zlib.Adler : object {
    private static UInt32 BASE;
    private static int NMAX;
    private static Adler();
    public static UInt32 Adler32(UInt32 adler, Byte[] buf, int index, int len);
}
internal enum Ionic.Zlib.BlockState : Enum {
    public int value__;
    public static BlockState NeedMore;
    public static BlockState BlockDone;
    public static BlockState FinishStarted;
    public static BlockState FinishDone;
}
internal enum Ionic.Zlib.CompressionLevel : Enum {
    public int value__;
    public static CompressionLevel None;
    public static CompressionLevel Level0;
    public static CompressionLevel BestSpeed;
    public static CompressionLevel Level1;
    public static CompressionLevel Level2;
    public static CompressionLevel Level3;
    public static CompressionLevel Level4;
    public static CompressionLevel Level5;
    public static CompressionLevel Default;
    public static CompressionLevel Level6;
    public static CompressionLevel Level7;
    public static CompressionLevel Level8;
    public static CompressionLevel BestCompression;
    public static CompressionLevel Level9;
}
internal enum Ionic.Zlib.CompressionMode : Enum {
    public int value__;
    public static CompressionMode Compress;
    public static CompressionMode Decompress;
}
internal enum Ionic.Zlib.CompressionStrategy : Enum {
    public int value__;
    public static CompressionStrategy Default;
    public static CompressionStrategy Filtered;
    public static CompressionStrategy HuffmanOnly;
}
internal enum Ionic.Zlib.DeflateFlavor : Enum {
    public int value__;
    public static DeflateFlavor Store;
    public static DeflateFlavor Fast;
    public static DeflateFlavor Slow;
}
internal class Ionic.Zlib.DeflateManager : object {
    private static int MEM_LEVEL_MAX;
    private static int MEM_LEVEL_DEFAULT;
    private CompressFunc DeflateFunction;
    private static String[] _ErrorMessage;
    private static int PRESET_DICT;
    private static int INIT_STATE;
    private static int BUSY_STATE;
    private static int FINISH_STATE;
    private static int Z_DEFLATED;
    private static int STORED_BLOCK;
    private static int STATIC_TREES;
    private static int DYN_TREES;
    private static int Z_BINARY;
    private static int Z_ASCII;
    private static int Z_UNKNOWN;
    private static int Buf_size;
    private static int MIN_MATCH;
    private static int MAX_MATCH;
    private static int MIN_LOOKAHEAD;
    private static int HEAP_SIZE;
    private static int END_BLOCK;
    internal ZlibCodec _codec;
    internal int status;
    internal Byte[] pending;
    internal int nextPending;
    internal int pendingCount;
    internal sbyte data_type;
    internal int last_flush;
    internal int w_size;
    internal int w_bits;
    internal int w_mask;
    internal Byte[] window;
    internal int window_size;
    internal Int16[] prev;
    internal Int16[] head;
    internal int ins_h;
    internal int hash_size;
    internal int hash_bits;
    internal int hash_mask;
    internal int hash_shift;
    internal int block_start;
    private Config config;
    internal int match_length;
    internal int prev_match;
    internal int match_available;
    internal int strstart;
    internal int match_start;
    internal int lookahead;
    internal int prev_length;
    internal CompressionLevel compressionLevel;
    internal CompressionStrategy compressionStrategy;
    internal Int16[] dyn_ltree;
    internal Int16[] dyn_dtree;
    internal Int16[] bl_tree;
    internal Tree treeLiterals;
    internal Tree treeDistances;
    internal Tree treeBitLengths;
    internal Int16[] bl_count;
    internal Int32[] heap;
    internal int heap_len;
    internal int heap_max;
    internal SByte[] depth;
    internal int _lengthOffset;
    internal int lit_bufsize;
    internal int last_lit;
    internal int _distanceOffset;
    internal int opt_len;
    internal int static_len;
    internal int matches;
    internal int last_eob_len;
    internal short bi_buf;
    internal int bi_valid;
    private bool Rfc1950BytesEmitted;
    private bool _WantRfc1950HeaderBytes;
    internal bool WantRfc1950HeaderBytes { get; internal set; }
    private static DeflateManager();
    private void _InitializeLazyMatch();
    private void _InitializeTreeData();
    internal void _InitializeBlocks();
    internal void pqdownheap(Int16[] tree, int k);
    internal static bool _IsSmaller(Int16[] tree, int n, int m, SByte[] depth);
    internal void scan_tree(Int16[] tree, int max_code);
    internal int build_bl_tree();
    internal void send_all_trees(int lcodes, int dcodes, int blcodes);
    internal void send_tree(Int16[] tree, int max_code);
    private void put_bytes(Byte[] p, int start, int len);
    internal void send_code(int c, Int16[] tree);
    internal void send_bits(int value, int length);
    internal void _tr_align();
    internal bool _tr_tally(int dist, int lc);
    internal void send_compressed_block(Int16[] ltree, Int16[] dtree);
    internal void set_data_type();
    internal void bi_flush();
    internal void bi_windup();
    internal void copy_block(int buf, int len, bool header);
    internal void flush_block_only(bool eof);
    internal BlockState DeflateNone(FlushType flush);
    internal void _tr_stored_block(int buf, int stored_len, bool eof);
    internal void _tr_flush_block(int buf, int stored_len, bool eof);
    private void _fillWindow();
    internal BlockState DeflateFast(FlushType flush);
    internal BlockState DeflateSlow(FlushType flush);
    internal int longest_match(int cur_match);
    internal bool get_WantRfc1950HeaderBytes();
    internal void set_WantRfc1950HeaderBytes(bool value);
    internal int Initialize(ZlibCodec codec, CompressionLevel level);
    internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits);
    internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits, CompressionStrategy compressionStrategy);
    internal int Initialize(ZlibCodec codec, CompressionLevel level, int windowBits, int memLevel, CompressionStrategy strategy);
    internal void Reset();
    internal int End();
    private void SetDeflater();
    internal int SetParams(CompressionLevel level, CompressionStrategy strategy);
    internal int SetDictionary(Byte[] dictionary);
    internal int Deflate(FlushType flush);
}
internal enum Ionic.Zlib.FlushType : Enum {
    public int value__;
    public static FlushType None;
    public static FlushType Partial;
    public static FlushType Sync;
    public static FlushType Full;
    public static FlushType Finish;
}
internal class Ionic.Zlib.InflateBlocks : object {
    private static int MANY;
    internal static Int32[] border;
    private InflateBlockMode mode;
    internal int left;
    internal int table;
    internal int index;
    internal Int32[] blens;
    internal Int32[] bb;
    internal Int32[] tb;
    internal InflateCodes codes;
    internal int last;
    internal ZlibCodec _codec;
    internal int bitk;
    internal int bitb;
    internal Int32[] hufts;
    internal Byte[] window;
    internal int end;
    internal int readAt;
    internal int writeAt;
    internal object checkfn;
    internal UInt32 check;
    internal InfTree inftree;
    internal InflateBlocks(ZlibCodec codec, object checkfn, int w);
    private static InflateBlocks();
    internal UInt32 Reset();
    internal int Process(int r);
    internal void Free();
    internal void SetDictionary(Byte[] d, int start, int n);
    internal int SyncPoint();
    internal int Flush(int r);
}
internal class Ionic.Zlib.InflateCodes : object {
    private static int START;
    private static int LEN;
    private static int LENEXT;
    private static int DIST;
    private static int DISTEXT;
    private static int COPY;
    private static int LIT;
    private static int WASH;
    private static int END;
    private static int BADCODE;
    internal int mode;
    internal int len;
    internal Int32[] tree;
    internal int tree_index;
    internal int need;
    internal int lit;
    internal int bitsToGet;
    internal int dist;
    internal byte lbits;
    internal byte dbits;
    internal Int32[] ltree;
    internal int ltree_index;
    internal Int32[] dtree;
    internal int dtree_index;
    internal void Init(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index);
    internal int Process(InflateBlocks blocks, int r);
    internal int InflateFast(int bl, int bd, Int32[] tl, int tl_index, Int32[] td, int td_index, InflateBlocks s, ZlibCodec z);
}
internal class Ionic.Zlib.InflateManager : object {
    private static int PRESET_DICT;
    private static int Z_DEFLATED;
    private InflateManagerMode mode;
    internal ZlibCodec _codec;
    internal int method;
    internal UInt32 computedCheck;
    internal UInt32 expectedCheck;
    internal int marker;
    private bool _handleRfc1950HeaderBytes;
    internal int wbits;
    internal InflateBlocks blocks;
    private static Byte[] mark;
    internal bool HandleRfc1950HeaderBytes { get; internal set; }
    public InflateManager(bool expectRfc1950HeaderBytes);
    private static InflateManager();
    internal bool get_HandleRfc1950HeaderBytes();
    internal void set_HandleRfc1950HeaderBytes(bool value);
    internal int Reset();
    internal int End();
    internal int Initialize(ZlibCodec codec, int w);
    internal int Inflate(FlushType flush);
    internal int SetDictionary(Byte[] dictionary);
    internal int Sync();
    internal int SyncPoint(ZlibCodec z);
}
internal class Ionic.Zlib.InfTree : object {
    private static int MANY;
    private static int Z_OK;
    private static int Z_STREAM_END;
    private static int Z_NEED_DICT;
    private static int Z_ERRNO;
    private static int Z_STREAM_ERROR;
    private static int Z_DATA_ERROR;
    private static int Z_MEM_ERROR;
    private static int Z_BUF_ERROR;
    private static int Z_VERSION_ERROR;
    internal static int fixed_bl;
    internal static int fixed_bd;
    internal static Int32[] fixed_tl;
    internal static Int32[] fixed_td;
    internal static Int32[] cplens;
    internal static Int32[] cplext;
    internal static Int32[] cpdist;
    internal static Int32[] cpdext;
    internal static int BMAX;
    internal Int32[] hn;
    internal Int32[] v;
    internal Int32[] c;
    internal Int32[] r;
    internal Int32[] u;
    internal Int32[] x;
    private static InfTree();
    private int huft_build(Int32[] b, int bindex, int n, int s, Int32[] d, Int32[] e, Int32[] t, Int32[] m, Int32[] hp, Int32[] hn, Int32[] v);
    internal int inflate_trees_bits(Int32[] c, Int32[] bb, Int32[] tb, Int32[] hp, ZlibCodec z);
    internal int inflate_trees_dynamic(int nl, int nd, Int32[] c, Int32[] bl, Int32[] bd, Int32[] tl, Int32[] td, Int32[] hp, ZlibCodec z);
    internal static int inflate_trees_fixed(Int32[] bl, Int32[] bd, Int32[][] tl, Int32[][] td, ZlibCodec z);
    private void initWorkArea(int vsize);
}
internal static class Ionic.Zlib.InternalConstants : object {
    internal static int MAX_BITS;
    internal static int BL_CODES;
    internal static int D_CODES;
    internal static int LITERALS;
    internal static int LENGTH_CODES;
    internal static int L_CODES;
    internal static int MAX_BL_BITS;
    internal static int REP_3_6;
    internal static int REPZ_3_10;
    internal static int REPZ_11_138;
    private static InternalConstants();
}
internal static class Ionic.Zlib.InternalInflateConstants : object {
    internal static Int32[] InflateMask;
    private static InternalInflateConstants();
}
internal class Ionic.Zlib.SharedUtils : object {
    public static int URShift(int number, int bits);
    public static int ReadInput(TextReader sourceTextReader, Byte[] target, int start, int count);
    internal static Byte[] ToByteArray(string sourceString);
    internal static Char[] ToCharArray(Byte[] byteArray);
}
internal class Ionic.Zlib.StaticTree : object {
    internal static Int16[] lengthAndLiteralsTreeCodes;
    internal static Int16[] distTreeCodes;
    internal static StaticTree Literals;
    internal static StaticTree Distances;
    internal static StaticTree BitLengths;
    internal Int16[] treeCodes;
    internal Int32[] extraBits;
    internal int extraBase;
    internal int elems;
    internal int maxLength;
    private StaticTree(Int16[] treeCodes, Int32[] extraBits, int extraBase, int elems, int maxLength);
    private static StaticTree();
}
internal class Ionic.Zlib.Tree : object {
    private static int HEAP_SIZE;
    internal static Int32[] ExtraLengthBits;
    internal static Int32[] ExtraDistanceBits;
    internal static Int32[] extra_blbits;
    internal static SByte[] bl_order;
    internal static int Buf_size;
    private static SByte[] _dist_code;
    internal static SByte[] LengthCode;
    internal static Int32[] LengthBase;
    internal static Int32[] DistanceBase;
    internal Int16[] dyn_tree;
    internal int max_code;
    internal StaticTree staticTree;
    private static Tree();
    internal static int DistanceCode(int dist);
    internal void gen_bitlen(DeflateManager s);
    internal void build_tree(DeflateManager s);
    internal static void gen_codes(Int16[] tree, int max_code, Int16[] bl_count);
    internal static int bi_reverse(int code, int len);
}
[GuidAttribute("ebc25cf6-9120-4283-b972-0e5520d0000D")]
[ComVisibleAttribute("True")]
internal class Ionic.Zlib.ZlibCodec : object {
    public Byte[] InputBuffer;
    public int NextIn;
    public int AvailableBytesIn;
    public long TotalBytesIn;
    public Byte[] OutputBuffer;
    public int NextOut;
    public int AvailableBytesOut;
    public long TotalBytesOut;
    public string Message;
    internal DeflateManager dstate;
    internal InflateManager istate;
    internal UInt32 _Adler32;
    public CompressionLevel CompressLevel;
    public int WindowBits;
    public CompressionStrategy Strategy;
    public int Adler32 { get; }
    public ZlibCodec(CompressionMode mode);
    public int get_Adler32();
    public int InitializeInflate();
    public int InitializeInflate(bool expectRfc1950Header);
    public int InitializeInflate(int windowBits);
    public int InitializeInflate(int windowBits, bool expectRfc1950Header);
    public int Inflate(FlushType flush);
    public int EndInflate();
    public int SyncInflate();
    public int InitializeDeflate();
    public int InitializeDeflate(CompressionLevel level);
    public int InitializeDeflate(CompressionLevel level, bool wantRfc1950Header);
    public int InitializeDeflate(CompressionLevel level, int bits);
    public int InitializeDeflate(CompressionLevel level, int bits, bool wantRfc1950Header);
    private int _InternalInitializeDeflate(bool wantRfc1950Header);
    public int Deflate(FlushType flush);
    public int EndDeflate();
    public void ResetDeflate();
    public int SetDeflateParams(CompressionLevel level, CompressionStrategy strategy);
    public int SetDictionary(Byte[] dictionary);
    internal void flush_pending();
    internal int read_buf(Byte[] buf, int start, int size);
}
internal static class Ionic.Zlib.ZlibConstants : object {
    public static int WindowBitsMax;
    public static int WindowBitsDefault;
    public static int Z_OK;
    public static int Z_STREAM_END;
    public static int Z_NEED_DICT;
    public static int Z_STREAM_ERROR;
    public static int Z_DATA_ERROR;
    public static int Z_BUF_ERROR;
    public static int WorkingBufferSizeDefault;
    public static int WorkingBufferSizeMin;
}
[GuidAttribute("ebc25cf6-9120-4283-b972-0e5520d0000E")]
internal class Ionic.Zlib.ZlibException : Exception {
    public ZlibException(string s);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Org.BouncyCastle.Crypto.Engines.RC4Engine : object {
    private static int STATE_LENGTH;
    private Byte[] engineState;
    private int x;
    private int y;
    private Byte[] workingKey;
    public string AlgorithmName { get; }
    private static RC4Engine();
    public virtual void Init(bool forEncryption, ICipherParameters parameters);
    public virtual string get_AlgorithmName();
    public virtual byte ReturnByte(byte input);
    public virtual void ProcessBytes(Byte[] input, int inOff, int length, Byte[] output, int outOff);
    public virtual void Reset();
    private void SetKey(Byte[] keyBytes);
}
internal interface Org.BouncyCastle.Crypto.ICipherParameters {
}
internal class Org.BouncyCastle.Crypto.Parameters.KeyParameter : object {
    private Byte[] key;
    public KeyParameter(Byte[] key);
    public KeyParameter(Byte[] key, int keyOff, int keyLen);
    public Byte[] GetKey();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
