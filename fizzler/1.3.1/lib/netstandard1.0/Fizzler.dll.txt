internal abstract class Fizzler.Either`2 : object {
    public static Either`2<TA, TB> A(TA value);
    public static Either`2<TA, TB> B(TB value);
    public abstract virtual bool Equals(object obj);
    public abstract virtual bool Equals(Either`2<TA, TB> obj);
    public abstract virtual int GetHashCode();
    public abstract virtual string ToString();
    public abstract virtual TResult Fold(Func`2<TA, TResult> a, Func`2<TB, TResult> b);
    public abstract virtual TResult Fold(T arg, Func`3<T, TA, TResult> a, Func`3<T, TB, TResult> b);
}
public class Fizzler.HumanReadableSelectorGenerator : object {
    private int _chainCount;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; private set; }
    public virtual void OnInit();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    public virtual void OnSelector();
    public virtual void OnClose();
    protected void Add(string selector);
    public sealed virtual void Type(NamespacePrefix prefix, string type);
    public sealed virtual void Universal(NamespacePrefix prefix);
    public sealed virtual void Id(string id);
    private sealed virtual override void Fizzler.ISelectorGenerator.Class(string clazz);
    public sealed virtual void AttributeExists(NamespacePrefix prefix, string name);
    public sealed virtual void AttributeExact(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeIncludes(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeDashMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributePrefixMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeSuffixMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeSubstring(NamespacePrefix prefix, string name, string value);
    public sealed virtual void FirstChild();
    public sealed virtual void LastChild();
    public sealed virtual void NthChild(int a, int b);
    public sealed virtual void OnlyChild();
    public sealed virtual void Empty();
    public sealed virtual void Child();
    public sealed virtual void Descendant();
    public sealed virtual void Adjacent();
    public sealed virtual void GeneralSibling();
    public sealed virtual void NthLastChild(int a, int b);
}
public interface Fizzler.IElementOps`1 {
    public abstract virtual Selector`1<TElement> Type(NamespacePrefix prefix, string name);
    public abstract virtual Selector`1<TElement> Universal(NamespacePrefix prefix);
    public abstract virtual Selector`1<TElement> Id(string id);
    public abstract virtual Selector`1<TElement> Class(string clazz);
    public abstract virtual Selector`1<TElement> AttributeExists(NamespacePrefix prefix, string name);
    public abstract virtual Selector`1<TElement> AttributeExact(NamespacePrefix prefix, string name, string value);
    public abstract virtual Selector`1<TElement> AttributeIncludes(NamespacePrefix prefix, string name, string value);
    public abstract virtual Selector`1<TElement> AttributeDashMatch(NamespacePrefix prefix, string name, string value);
    public abstract virtual Selector`1<TElement> AttributePrefixMatch(NamespacePrefix prefix, string name, string value);
    public abstract virtual Selector`1<TElement> AttributeSuffixMatch(NamespacePrefix prefix, string name, string value);
    public abstract virtual Selector`1<TElement> AttributeSubstring(NamespacePrefix prefix, string name, string value);
    public abstract virtual Selector`1<TElement> FirstChild();
    public abstract virtual Selector`1<TElement> LastChild();
    public abstract virtual Selector`1<TElement> NthChild(int a, int b);
    public abstract virtual Selector`1<TElement> OnlyChild();
    public abstract virtual Selector`1<TElement> Empty();
    public abstract virtual Selector`1<TElement> Child();
    public abstract virtual Selector`1<TElement> Descendant();
    public abstract virtual Selector`1<TElement> Adjacent();
    public abstract virtual Selector`1<TElement> GeneralSibling();
    public abstract virtual Selector`1<TElement> NthLastChild(int a, int b);
}
public interface Fizzler.INegationSelectorGenerator {
    public abstract virtual void BeginNegation();
    public abstract virtual void EndNegation();
}
public interface Fizzler.ISelectorGenerator {
    public abstract virtual void OnInit();
    public abstract virtual void OnClose();
    public abstract virtual void OnSelector();
    public abstract virtual void Type(NamespacePrefix prefix, string name);
    public abstract virtual void Universal(NamespacePrefix prefix);
    public abstract virtual void Id(string id);
    public abstract virtual void Class(string clazz);
    public abstract virtual void AttributeExists(NamespacePrefix prefix, string name);
    public abstract virtual void AttributeExact(NamespacePrefix prefix, string name, string value);
    public abstract virtual void AttributeIncludes(NamespacePrefix prefix, string name, string value);
    public abstract virtual void AttributeDashMatch(NamespacePrefix prefix, string name, string value);
    public abstract virtual void AttributePrefixMatch(NamespacePrefix prefix, string name, string value);
    public abstract virtual void AttributeSuffixMatch(NamespacePrefix prefix, string name, string value);
    public abstract virtual void AttributeSubstring(NamespacePrefix prefix, string name, string value);
    public abstract virtual void FirstChild();
    public abstract virtual void LastChild();
    public abstract virtual void NthChild(int a, int b);
    public abstract virtual void OnlyChild();
    public abstract virtual void Empty();
    public abstract virtual void Child();
    public abstract virtual void Descendant();
    public abstract virtual void Adjacent();
    public abstract virtual void GeneralSibling();
    public abstract virtual void NthLastChild(int a, int b);
}
[SerializableAttribute]
public class Fizzler.NamespacePrefix : ValueType {
    public static NamespacePrefix None;
    public static NamespacePrefix Empty;
    public static NamespacePrefix Any;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public bool IsNone { get; }
    public bool IsAny { get; }
    public bool IsEmpty { get; }
    public bool IsSpecific { get; }
    public NamespacePrefix(string text);
    private static NamespacePrefix();
    [CompilerGeneratedAttribute]
public string get_Text();
    public bool get_IsNone();
    public bool get_IsAny();
    public bool get_IsEmpty();
    public bool get_IsSpecific();
    public virtual bool Equals(object obj);
    public bool Equals(NamespacePrefix other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string Format(string name);
}
public class Fizzler.Parser : object {
    private Reader`1<Token> _reader;
    private ISelectorGenerator _generator;
    private Parser(Reader`1<Token> reader, ISelectorGenerator generator);
    public static TGenerator Parse(string selectors, TGenerator generator);
    public static T Parse(string selectors, TGenerator generator, Func`2<TGenerator, T> resultor);
    public static TGenerator Parse(IEnumerable`1<Token> tokens, TGenerator generator);
    public static T Parse(IEnumerable`1<Token> tokens, TGenerator generator, Func`2<TGenerator, T> resultor);
    private void Parse();
    private void SelectorGroup();
    private void Selector();
    private bool TryCombinator();
    private void SimpleSelectorSequence();
    private void Negation();
    private void Pseudo();
    private void PseudoClass();
    private bool TryFunctionalPseudo();
    private void Nth();
    private void NthLast();
    private int NthB();
    private void Attrib();
    private void Class();
    private Nullable`1<NamespacePrefix> TryNamespacePrefix();
    private void TypeSelectorOrUniversal();
    private Token Peek();
    private Token Read(Either`2<TokenKind, Token> spec);
    private Token Read(Either`2[] specs);
    private Nullable`1<Token> TryRead(Either`2[] specs);
    private Nullable`1<Token> TryRead(Either`2<TokenKind, Token> spec);
    private void Unread(Token token);
    private static Either`2<TokenKind, Token> ToTokenSpec(TokenKind kind);
    private static Either`2<TokenKind, Token> ToTokenSpec(Token token);
}
public class Fizzler.Reader`1 : object {
    private IEnumerator`1<T> _enumerator;
    private Stack`1<T> _buffer;
    public bool HasMore { get; }
    public Reader`1(IEnumerable`1<T> e);
    public Reader`1(IEnumerator`1<T> e);
    public bool get_HasMore();
    public void Unread(T value);
    public T Read();
    public T Peek();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [IteratorStateMachineAttribute("Fizzler.Reader`1/<GetEnumeratorImpl>d__11")]
private IEnumerator`1<T> GetEnumeratorImpl();
    private void RealRead();
    public void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose();
    private void EnsureAlive();
}
public class Fizzler.Selector`1 : MulticastDelegate {
    public Selector`1(object object, IntPtr method);
    public virtual IEnumerable`1<TElement> Invoke(IEnumerable`1<TElement> elements);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<TElement> elements, AsyncCallback callback, object object);
    public virtual IEnumerable`1<TElement> EndInvoke(IAsyncResult result);
}
public class Fizzler.SelectorGenerator`1 : object {
    private IEqualityComparer`1<TElement> _equalityComparer;
    private Stack`1<Selector`1<TElement>> _selectors;
    private Selector`1<TElement> _negationSourceSelector;
    [CompilerGeneratedAttribute]
private Selector`1<TElement> <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private IElementOps`1<TElement> <Ops>k__BackingField;
    public Selector`1<TElement> Selector { get; private set; }
    public IElementOps`1<TElement> Ops { get; }
    public SelectorGenerator`1(IElementOps`1<TElement> ops);
    public SelectorGenerator`1(IElementOps`1<TElement> ops, IEqualityComparer`1<TElement> equalityComparer);
    [CompilerGeneratedAttribute]
public Selector`1<TElement> get_Selector();
    [CompilerGeneratedAttribute]
private void set_Selector(Selector`1<TElement> value);
    [CompilerGeneratedAttribute]
public IElementOps`1<TElement> get_Ops();
    public IEnumerable`1<Selector`1<TElement>> GetSelectors();
    protected void Add(Selector`1<TElement> selector);
    public virtual void OnInit();
    public virtual void OnSelector();
    public virtual void OnClose();
    public virtual void Id(string id);
    public virtual void Class(string clazz);
    public virtual void Type(NamespacePrefix prefix, string type);
    public virtual void Universal(NamespacePrefix prefix);
    public virtual void AttributeExists(NamespacePrefix prefix, string name);
    public virtual void AttributeExact(NamespacePrefix prefix, string name, string value);
    public virtual void AttributeIncludes(NamespacePrefix prefix, string name, string value);
    public virtual void AttributeDashMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributePrefixMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeSuffixMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeSubstring(NamespacePrefix prefix, string name, string value);
    public virtual void FirstChild();
    public virtual void LastChild();
    public virtual void NthChild(int a, int b);
    public virtual void OnlyChild();
    public virtual void Empty();
    public virtual void Child();
    public virtual void Descendant();
    public virtual void Adjacent();
    public virtual void GeneralSibling();
    public sealed virtual void NthLastChild(int a, int b);
    public sealed virtual void BeginNegation();
    public sealed virtual void EndNegation();
}
public class Fizzler.SelectorGeneratorTee : object {
    [CompilerGeneratedAttribute]
private ISelectorGenerator <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelectorGenerator <Secondary>k__BackingField;
    public ISelectorGenerator Primary { get; }
    public ISelectorGenerator Secondary { get; }
    public SelectorGeneratorTee(ISelectorGenerator primary, ISelectorGenerator secondary);
    [CompilerGeneratedAttribute]
public ISelectorGenerator get_Primary();
    [CompilerGeneratedAttribute]
public ISelectorGenerator get_Secondary();
    public sealed virtual void OnInit();
    public sealed virtual void OnClose();
    public sealed virtual void OnSelector();
    public sealed virtual void Type(NamespacePrefix prefix, string type);
    public sealed virtual void Universal(NamespacePrefix prefix);
    public sealed virtual void Id(string id);
    public sealed virtual void Class(string clazz);
    public sealed virtual void AttributeExists(NamespacePrefix prefix, string name);
    public sealed virtual void AttributeExact(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeIncludes(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeDashMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributePrefixMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeSuffixMatch(NamespacePrefix prefix, string name, string value);
    public sealed virtual void AttributeSubstring(NamespacePrefix prefix, string name, string value);
    public sealed virtual void FirstChild();
    public sealed virtual void LastChild();
    public sealed virtual void NthChild(int a, int b);
    public sealed virtual void OnlyChild();
    public sealed virtual void Empty();
    public sealed virtual void BeginNegation();
    public sealed virtual void EndNegation();
    public sealed virtual void Child();
    public sealed virtual void Descendant();
    public sealed virtual void Adjacent();
    public sealed virtual void GeneralSibling();
    public sealed virtual void NthLastChild(int a, int b);
}
public static class Fizzler.SelectorsCachingCompiler : object {
    public static Func`2<string, T> Create(Func`2<string, T> compiler);
    public static Func`2<string, T> Create(Func`2<string, T> compiler, IDictionary`2<string, T> cache);
    private static Func`2<string, T> CreateImpl(Func`2<string, T> compiler, IDictionary`2<string, T> cache);
}
[AttributeUsageAttribute("4124")]
internal class Fizzler.SerializableAttribute : Attribute {
}
public class Fizzler.Token : ValueType {
    [CompilerGeneratedAttribute]
private TokenKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    private static Token StarToken;
    private static Token DotToken;
    private static Token ColonToken;
    private static Token CommaToken;
    private static Token RightParenthesisToken;
    private static Token EqualsToken;
    private static Token PipeToken;
    private static Token LeftBracketToken;
    private static Token RightBracketToken;
    public TokenKind Kind { get; }
    public string Text { get; }
    private Token(TokenKind kind, string text);
    private static Token();
    [CompilerGeneratedAttribute]
public TokenKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Text();
    public static Token Eoi();
    public static Token Star();
    public static Token Dot();
    public static Token Colon();
    public static Token Comma();
    public static Token RightParenthesis();
    public static Token Equals();
    public static Token LeftBracket();
    public static Token RightBracket();
    public static Token Pipe();
    public static Token Plus();
    public static Token Greater();
    public static Token Includes();
    public static Token DashMatch();
    public static Token PrefixMatch();
    public static Token SuffixMatch();
    public static Token SubstringMatch();
    public static Token Tilde();
    public static Token Ident(string text);
    public static Token Integer(string text);
    public static Token Hash(string text);
    public static Token WhiteSpace(string space);
    public static Token String(string text);
    public static Token Function(string text);
    public static Token Not();
    public static Token Char(char ch);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Token other);
    public virtual string ToString();
    public static bool op_Equality(Token a, Token b);
    public static bool op_Inequality(Token a, Token b);
    private static void ValidateTextArgument(string text);
}
public static class Fizzler.Tokener : object {
    public static IEnumerable`1<Token> Tokenize(TextReader reader);
    [IteratorStateMachineAttribute("Fizzler.Tokener/<Tokenize>d__1")]
public static IEnumerable`1<Token> Tokenize(string input);
    private static string ParseWhiteSpace(Reader reader);
    private static string ParseHash(Reader reader);
    private static Token ParseString(Reader reader, char quote, StringBuilder& sb);
    private static bool IsDigit(char ch);
    private static bool IsS(char ch);
    private static bool IsNmStart(char ch);
    private static bool IsNmChar(char ch);
}
public enum Fizzler.TokenKind : Enum {
    public int value__;
    public static TokenKind Eoi;
    public static TokenKind Ident;
    public static TokenKind Hash;
    public static TokenKind Includes;
    public static TokenKind DashMatch;
    public static TokenKind PrefixMatch;
    public static TokenKind SuffixMatch;
    public static TokenKind SubstringMatch;
    public static TokenKind String;
    public static TokenKind Plus;
    public static TokenKind Greater;
    public static TokenKind WhiteSpace;
    public static TokenKind Function;
    public static TokenKind Not;
    public static TokenKind Integer;
    public static TokenKind Tilde;
    public static TokenKind Char;
}
