[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FlexLabs.EntityFrameworkCore.Upsert.HelpLinks : object {
    internal static string Sqlite3Instructions;
    internal static string IdentityKeyMatchError;
    internal static string SupportedExpressions;
    internal static string MySQLConditionalUpdate;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Internal.ConstantValue : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArgumentIndex>k__BackingField;
    public object Value { get; }
    public IProperty Property { get; }
    public MemberInfo MemberInfo { get; }
    public int ArgumentIndex { get; public set; }
    public ConstantValue(object value, IProperty property, MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public IProperty get_Property();
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public int get_ArgumentIndex();
    [CompilerGeneratedAttribute]
public void set_ArgumentIndex(int value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("FlexLabs.EntityFrameworkCore.Upsert.Internal.ConstantValue/<GetConstantValues>d__14")]
public sealed virtual IEnumerable`1<ConstantValue> GetConstantValues();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<PropertyValue> GetPropertyValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class FlexLabs.EntityFrameworkCore.Upsert.Internal.ExpressionHelpers : object {
    [ExtensionAttribute]
public static object GetValue(Expression expression, LambdaExpression container, Func`2<string, IProperty> propertyFinder, bool useExpressionCompiler);
    [ExtensionAttribute]
private static object GetValueInternal(Expression expression, LambdaExpression container, Func`2<string, IProperty> propertyFinder, bool useExpressionCompiler, bool nested);
}
[NullableContextAttribute("1")]
public interface FlexLabs.EntityFrameworkCore.Upsert.Internal.IKnownValue {
    public abstract virtual IEnumerable`1<ConstantValue> GetConstantValues();
    public abstract virtual IEnumerable`1<PropertyValue> GetPropertyValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Internal.KnownExpression : object {
    [CompilerGeneratedAttribute]
private ExpressionType <ExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private IKnownValue <Value1>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IKnownValue <Value2>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IKnownValue <Value3>k__BackingField;
    public ExpressionType ExpressionType { get; }
    public IKnownValue Value1 { get; }
    [NullableAttribute("2")]
public IKnownValue Value2 { get; }
    [NullableAttribute("2")]
public IKnownValue Value3 { get; }
    public KnownExpression(ExpressionType expressionType, IKnownValue value);
    public KnownExpression(ExpressionType expressionType, IKnownValue value1, IKnownValue value2);
    public KnownExpression(ExpressionType expressionType, IKnownValue value1, IKnownValue value2, IKnownValue value3);
    [CompilerGeneratedAttribute]
public ExpressionType get_ExpressionType();
    [CompilerGeneratedAttribute]
public IKnownValue get_Value1();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IKnownValue get_Value2();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IKnownValue get_Value3();
    [IteratorStateMachineAttribute("FlexLabs.EntityFrameworkCore.Upsert.Internal.KnownExpression/<GetValues>d__15")]
internal IEnumerable`1<IKnownValue> GetValues();
    public sealed virtual IEnumerable`1<ConstantValue> GetConstantValues();
    public sealed virtual IEnumerable`1<PropertyValue> GetPropertyValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Internal.PropertyValue : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLeftParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    public string PropertyName { get; }
    public bool IsLeftParameter { get; }
    public IProperty Property { get; }
    public PropertyValue(string propertyName, bool isLeftParameter, IProperty property);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public bool get_IsLeftParameter();
    [CompilerGeneratedAttribute]
public IProperty get_Property();
    public sealed virtual IEnumerable`1<ConstantValue> GetConstantValues();
    [IteratorStateMachineAttribute("FlexLabs.EntityFrameworkCore.Upsert.Internal.PropertyValue/<GetPropertyValues>d__11")]
public sealed virtual IEnumerable`1<PropertyValue> GetPropertyValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class FlexLabs.EntityFrameworkCore.Upsert.Internal.UpsertContextOptionsExtension`1 : object {
    [CompilerGeneratedAttribute]
private DbContextOptionsExtensionInfo <Info>k__BackingField;
    public DbContextOptionsExtensionInfo Info { get; }
    [CompilerGeneratedAttribute]
public sealed virtual DbContextOptionsExtensionInfo get_Info();
    public sealed virtual void ApplyServices(IServiceCollection services);
    public sealed virtual void Validate(IDbContextOptions options);
}
public class FlexLabs.EntityFrameworkCore.Upsert.InvalidMatchColumnsException : Exception {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class FlexLabs.EntityFrameworkCore.Upsert.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentMustBeAnAnonymousObjectInitialiser { get; }
    internal static string ArgumentMustBeAnInitialiserOfTheTEntityType { get; }
    internal static string CantCallMethodTwice { get; }
    internal static string CantCallMethodWhenMethodHasBeenCalledAsTheyAreMutuallyExclusive { get; }
    internal static string CouldNotGetTableNameForEntityType { get; }
    internal static string DatabaseProviderNotSupportedYet { get; }
    internal static string EntityTypeMustBeMappedInDbContext { get; }
    internal static string MatchColumnsHaveToBePropertiesOfTheTEntityClass { get; }
    internal static string SeeLinkForMoreDetails { get; }
    internal static string SimplifyTheExpressionOrTryADifferentOne { get; }
    internal static string TheUpdateConditionMustBeAComparisonExpression { get; }
    internal static string ThisTypeOfExpressionIsNotCurrentlySupported { get; }
    internal static string UnknownProperty { get; }
    internal static string UpdaterMustBeAnInitialiserOfTheTEntityType { get; }
    internal static string UsingAutogeneratedIdentityKeysAsTheUpsertMatchExpressionIsNotSupportedPickANonGeneratedUniqueKey { get; }
    internal static string UsingConditionalUpdatesIsNotSupportedInMySQLDueToDatabaseSyntaxLimitations { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentMustBeAnAnonymousObjectInitialiser();
    internal static string get_ArgumentMustBeAnInitialiserOfTheTEntityType();
    internal static string get_CantCallMethodTwice();
    internal static string get_CantCallMethodWhenMethodHasBeenCalledAsTheyAreMutuallyExclusive();
    internal static string get_CouldNotGetTableNameForEntityType();
    internal static string get_DatabaseProviderNotSupportedYet();
    internal static string get_EntityTypeMustBeMappedInDbContext();
    internal static string get_MatchColumnsHaveToBePropertiesOfTheTEntityClass();
    internal static string get_SeeLinkForMoreDetails();
    internal static string get_SimplifyTheExpressionOrTryADifferentOne();
    internal static string get_TheUpdateConditionMustBeAComparisonExpression();
    internal static string get_ThisTypeOfExpressionIsNotCurrentlySupported();
    internal static string get_UnknownProperty();
    internal static string get_UpdaterMustBeAnInitialiserOfTheTEntityType();
    internal static string get_UsingAutogeneratedIdentityKeysAsTheUpsertMatchExpressionIsNotSupportedPickANonGeneratedUniqueKey();
    internal static string get_UsingConditionalUpdatesIsNotSupportedInMySQLDueToDatabaseSyntaxLimitations();
}
internal static class FlexLabs.EntityFrameworkCore.Upsert.Runners.DefaultRunners : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IUpsertCommandRunner[] Runners;
    [NullableContextAttribute("1")]
public static IUpsertCommandRunner[] GetRunners();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Runners.InMemoryUpsertCommandRunner : UpsertCommandRunnerBase {
    public virtual bool Supports(string providerName);
    private static void RunCore(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions);
    private static ICollection`1<EntityMatch`1<TEntity>> FindMatches(IEntityType entityType, IEnumerable`1<TEntity> entities, DbContext dbContext, Expression`1<Func`2<TEntity, object>> matchExpression);
    public virtual int Run(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions);
    public virtual Task`1<int> RunAsync(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface FlexLabs.EntityFrameworkCore.Upsert.Runners.IUpsertCommandRunner {
    public abstract virtual bool Supports(string providerName);
    public abstract virtual int Run(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions);
    public abstract virtual Task`1<int> RunAsync(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Runners.MySqlUpsertCommandRunner : RelationalUpsertCommandRunner {
    protected string SourcePrefix { get; }
    protected string SourceSuffix { get; }
    protected string TargetPrefix { get; }
    protected Nullable`1<int> MaxQueryParams { get; }
    [NullableContextAttribute("1")]
public virtual bool Supports(string providerName);
    [NullableContextAttribute("1")]
protected virtual string EscapeName(string name);
    protected virtual string get_SourcePrefix();
    protected virtual string get_SourceSuffix();
    protected virtual string get_TargetPrefix();
    protected virtual Nullable`1<int> get_MaxQueryParams();
    [NullableContextAttribute("1")]
public virtual string GenerateCommand(string tableName, ICollection`1<ICollection`1<ValueTuple`4<string, ConstantValue, string, bool>>> entities, ICollection`1<ValueTuple`2<string, bool>> joinColumns, ICollection`1<ValueTuple`2<string, IKnownValue>> updateExpressions, KnownExpression updateCondition);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Runners.PostgreSqlUpsertCommandRunner : RelationalUpsertCommandRunner {
    protected string SourcePrefix { get; }
    protected string TargetPrefix { get; }
    protected Nullable`1<int> MaxQueryParams { get; }
    [NullableContextAttribute("1")]
public virtual bool Supports(string providerName);
    [NullableContextAttribute("1")]
protected virtual string EscapeName(string name);
    protected virtual string get_SourcePrefix();
    protected virtual string get_TargetPrefix();
    protected virtual Nullable`1<int> get_MaxQueryParams();
    [NullableContextAttribute("1")]
public virtual string GenerateCommand(string tableName, ICollection`1<ICollection`1<ValueTuple`4<string, ConstantValue, string, bool>>> entities, ICollection`1<ValueTuple`2<string, bool>> joinColumns, ICollection`1<ValueTuple`2<string, IKnownValue>> updateExpressions, KnownExpression updateCondition);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_0(ValueTuple`4<string, ConstantValue, string, bool> e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_1(ICollection`1<ValueTuple`4<string, ConstantValue, string, bool>> ec);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_4(ValueTuple`4<string, ConstantValue, string, bool> e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_2(ValueTuple`2<string, bool> c);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_3(ValueTuple`2<string, IKnownValue> e, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FlexLabs.EntityFrameworkCore.Upsert.Runners.RelationalUpsertCommandRunner : UpsertCommandRunnerBase {
    [NullableAttribute("2")]
protected string SourcePrefix { get; }
    [NullableAttribute("2")]
protected string SourceSuffix { get; }
    [NullableAttribute("2")]
protected string TargetPrefix { get; }
    [NullableAttribute("2")]
protected string TargetSuffix { get; }
    protected Nullable`1<int> MaxQueryParams { get; }
    public abstract virtual string GenerateCommand(string tableName, ICollection`1<ICollection`1<ValueTuple`4<string, ConstantValue, string, bool>>> entities, ICollection`1<ValueTuple`2<string, bool>> joinColumns, ICollection`1<ValueTuple`2<string, IKnownValue>> updateExpressions, KnownExpression updateCondition);
    protected abstract virtual string EscapeName(string name);
    protected virtual string Parameter(int index);
    protected virtual string Variable(string name);
    protected virtual string GetSchema(IEntityType entityType);
    protected virtual string GetTableName(IEntityType entityType);
    [NullableContextAttribute("2")]
protected abstract virtual string get_SourcePrefix();
    [NullableContextAttribute("2")]
protected virtual string get_SourceSuffix();
    [NullableContextAttribute("2")]
protected abstract virtual string get_TargetPrefix();
    [NullableContextAttribute("2")]
protected virtual string get_TargetSuffix();
    protected virtual Nullable`1<int> get_MaxQueryParams();
    [IteratorStateMachineAttribute("FlexLabs.EntityFrameworkCore.Upsert.Runners.RelationalUpsertCommandRunner/<PrepareCommand>d__16`1")]
private IEnumerable`1<ValueTuple`2<string, IEnumerable`1<ConstantValue>>> PrepareCommand(IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> match, Expression`1<Func`3<TEntity, TEntity, TEntity>> updater, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions);
    protected virtual string ExpandValue(IKnownValue value, Func`2<string, string> expandLeftColumn);
    protected virtual string ExpandExpression(KnownExpression expression, Func`2<string, string> expandLeftColumn);
    protected virtual string IsNullExpression(IKnownValue value, bool notNull);
    protected virtual string GetSimpleOperator(ExpressionType expressionType);
    public virtual int Run(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions);
    [AsyncStateMachineAttribute("FlexLabs.EntityFrameworkCore.Upsert.Runners.RelationalUpsertCommandRunner/<RunAsync>d__22`1")]
public virtual Task`1<int> RunAsync(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions, CancellationToken cancellationToken);
    private object PrepareDbCommandArgument(DbCommand dbCommand, IRelationalTypeMappingSource relationalTypeMappingSource, ConstantValue constantValue);
}
public class FlexLabs.EntityFrameworkCore.Upsert.Runners.RunnerQueryOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <NoUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseExpressionCompiler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowIdentityMatch>k__BackingField;
    public bool NoUpdate { get; internal set; }
    public bool UseExpressionCompiler { get; internal set; }
    public bool AllowIdentityMatch { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_NoUpdate();
    [CompilerGeneratedAttribute]
internal void set_NoUpdate(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_UseExpressionCompiler();
    [CompilerGeneratedAttribute]
internal void set_UseExpressionCompiler(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_AllowIdentityMatch();
    [CompilerGeneratedAttribute]
internal void set_AllowIdentityMatch(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Runners.SqliteUpsertCommandRunner : PostgreSqlUpsertCommandRunner {
    protected Nullable`1<int> MaxQueryParams { get; }
    public virtual bool Supports(string providerName);
    protected virtual Nullable`1<int> get_MaxQueryParams();
    protected virtual string GetSchema(IEntityType entityType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.Runners.SqlServerUpsertCommandRunner : RelationalUpsertCommandRunner {
    protected string SourcePrefix { get; }
    protected string TargetPrefix { get; }
    protected Nullable`1<int> MaxQueryParams { get; }
    [NullableContextAttribute("1")]
public virtual bool Supports(string providerName);
    [NullableContextAttribute("1")]
protected virtual string EscapeName(string name);
    protected virtual string get_SourcePrefix();
    protected virtual string get_TargetPrefix();
    protected virtual Nullable`1<int> get_MaxQueryParams();
    [NullableContextAttribute("1")]
public virtual string GenerateCommand(string tableName, ICollection`1<ICollection`1<ValueTuple`4<string, ConstantValue, string, bool>>> entities, ICollection`1<ValueTuple`2<string, bool>> joinColumns, ICollection`1<ValueTuple`2<string, IKnownValue>> updateExpressions, KnownExpression updateCondition);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_0(ICollection`1<ValueTuple`4<string, ConstantValue, string, bool>> ec);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_8(ValueTuple`4<string, ConstantValue, string, bool> e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_1(ValueTuple`4<string, ConstantValue, string, bool> e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_4(ValueTuple`4<string, ConstantValue, string, bool> e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_6(ValueTuple`4<string, ConstantValue, string, bool> e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateCommand>b__8_7(ValueTuple`2<string, IKnownValue> e, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class FlexLabs.EntityFrameworkCore.Upsert.Runners.UpsertCommandRunnerBase : object {
    public abstract virtual bool Supports(string providerName);
    public abstract virtual int Run(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions);
    public abstract virtual Task`1<int> RunAsync(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities, Expression`1<Func`2<TEntity, object>> matchExpression, Expression`1<Func`3<TEntity, TEntity, TEntity>> updateExpression, Expression`1<Func`3<TEntity, TEntity, bool>> updateCondition, RunnerQueryOptions queryOptions, CancellationToken cancellationToken);
    protected static ICollection`1<IProperty> ProcessMatchExpression(IEntityType entityType, Expression`1<Func`2<TEntity, object>> matchExpression, RunnerQueryOptions queryOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.UnsupportedExpressionException : Exception {
    private UnsupportedExpressionException(string message, string helpLink);
    internal UnsupportedExpressionException(Expression expression);
    internal static UnsupportedExpressionException MySQLConditionalUpdate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FlexLabs.EntityFrameworkCore.Upsert.UpsertCommandBuilder`1 : object {
    private DbContext _dbContext;
    private IEntityType _entityType;
    private ICollection`1<TEntity> _entities;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1<Func`2<TEntity, object>> _matchExpression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1<Func`3<TEntity, TEntity, TEntity>> _updateExpression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1<Func`3<TEntity, TEntity, bool>> _updateCondition;
    private RunnerQueryOptions _queryOptions;
    internal UpsertCommandBuilder`1(DbContext dbContext, IEntityType entityType, ICollection`1<TEntity> entities);
    public UpsertCommandBuilder`1<TEntity> On(Expression`1<Func`2<TEntity, object>> match);
    public UpsertCommandBuilder`1<TEntity> AllowIdentityMatch();
    public UpsertCommandBuilder`1<TEntity> WhenMatched(Expression`1<Func`2<TEntity, TEntity>> updater);
    public UpsertCommandBuilder`1<TEntity> WhenMatched(Expression`1<Func`3<TEntity, TEntity, TEntity>> updater);
    public UpsertCommandBuilder`1<TEntity> UpdateIf(Expression`1<Func`2<TEntity, bool>> condition);
    public UpsertCommandBuilder`1<TEntity> UpdateIf(Expression`1<Func`3<TEntity, TEntity, bool>> condition);
    public UpsertCommandBuilder`1<TEntity> WithFallbackExpressionCompiler();
    public UpsertCommandBuilder`1<TEntity> NoUpdate();
    private IUpsertCommandRunner GetCommandRunner();
    public int Run();
    public Task`1<int> RunAsync(CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.UpsertExtensions : object {
    [ExtensionAttribute]
public static UpsertCommandBuilder`1<TEntity> Upsert(DbContext dbContext, TEntity entity);
    [ExtensionAttribute]
public static UpsertCommandBuilder`1<TEntity> UpsertRange(DbContext dbContext, TEntity[] entities);
    [ExtensionAttribute]
public static UpsertCommandBuilder`1<TEntity> UpsertRange(DbContext dbContext, IEnumerable`1<TEntity> entities);
    [ExtensionAttribute]
public static UpsertCommandBuilder`1<TEntity> Upsert(DbSet`1<TEntity> dbSet, TEntity entity);
    [ExtensionAttribute]
public static UpsertCommandBuilder`1<TEntity> UpsertRange(DbSet`1<TEntity> dbSet, TEntity[] entities);
    [ExtensionAttribute]
public static UpsertCommandBuilder`1<TEntity> UpsertRange(DbSet`1<TEntity> dbSet, IEnumerable`1<TEntity> entities);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.UpsertServiceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static DbContextOptionsBuilder ReplaceUpsertCommandRunner(DbContextOptionsBuilder builder);
}
