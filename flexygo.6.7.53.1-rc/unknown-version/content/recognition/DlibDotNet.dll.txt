[DefaultMemberAttribute("Item")]
public class DlibDotNet.Array`1 : DlibObject {
    private Array2DType _Array2DType;
    private static Dictionary`2<Type, ItemTypes<T>> SupportItemTypes;
    private static Dictionary`2<Type, ImageTypes> SupportArray2DElementTypes;
    private static Dictionary`2<Type, MatrixElementTypes> SupportMatrixElementTypes;
    private ItemTypes<T> _ItemType;
    private ImageTypes _ArrayElementType;
    private MatrixElementTypes _MatrixElementType;
    public ImageTypes ImageType { get; }
    public MatrixElementTypes MatrixElementTypes { get; }
    public T Item { get; }
    public int Size { get; }
    private static Array`1();
    public Array`1(UInt32 size);
    private Array`1(bool specifySize, UInt32 size);
    public ImageTypes get_ImageType();
    public MatrixElementTypes get_MatrixElementTypes();
    public T get_Item(int index);
    public int get_Size();
    public void PushBack(T item);
    protected virtual void DisposeUnmanaged();
    private object GetPixelItem(ImageTypes type, UInt32 index);
    private object GetArray2DItem(Array2DType type, UInt32 index);
    private object GetMatrixItem(MatrixElementTypes type, UInt32 index);
    private void PushBackArray2DItem(Array2DType type, IDlibObject item);
    private void PushBackMatrixItem(MatrixElementType type, IDlibObject item);
    private void PushBackPixelItem(ImageTypes type, object item);
    [IteratorStateMachineAttribute("DlibDotNet.Array`1/<GetEnumerator>d__28")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.Array2D`1 : Array2DBase {
    private Array2DType _Array2DType;
    private static IDictionary`2<ImageTypes, int> ElementSizeDictionary;
    private static Dictionary`2<Type, ImageTypes> SupportTypes;
    [CompilerGeneratedAttribute]
private ImageTypes <ImageType>k__BackingField;
    public int Columns { get; }
    public ImageTypes ImageType { get; }
    public Rectangle Rect { get; }
    public int Rows { get; }
    public int Size { get; }
    public IntPtr Data { get; }
    public Row`1<TElement, TElement> Item { get; }
    private static Array2D`1();
    public Array2D`1(int rows, int columns);
    internal Array2D`1(IntPtr ptr, ImageTypes type, bool isEnabledDispose);
    public virtual int get_Columns();
    [CompilerGeneratedAttribute]
public virtual ImageTypes get_ImageType();
    public virtual Rectangle get_Rect();
    public virtual int get_Rows();
    public virtual int get_Size();
    public virtual IntPtr get_Data();
    public Row`1<TElement, TElement> get_Item(int row);
    public void SetSize(int rows, int columns);
    public Byte[] ToBytes();
    internal static bool TryParse(ImageTypes& type);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.Array2DBase : TwoDimensionObjectBase {
    public ImageTypes ImageType { get; }
    public Rectangle Rect { get; }
    public IntPtr Data { get; }
    public int Size { get; }
    protected Array2DBase(bool isEnabledDispose);
    public abstract virtual ImageTypes get_ImageType();
    public abstract virtual Rectangle get_Rect();
    public abstract virtual IntPtr get_Data();
    public abstract virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.Array2DMatrix`1 : Array2DMatrixBase {
    private MatrixElementType _MatrixElementType;
    private static Dictionary`2<Type, MatrixElementTypes> SupportMatrixTypes;
    [CompilerGeneratedAttribute]
private MatrixElementTypes <MatrixElementType>k__BackingField;
    public int Columns { get; }
    public MatrixElementTypes MatrixElementType { get; }
    public Rectangle Rect { get; }
    public int Rows { get; }
    public int Size { get; }
    public Row`1<TElement, TElement> Item { get; }
    private static Array2DMatrix`1();
    public Array2DMatrix`1(int rows, int columns, int templateRows, int templateColumns);
    public virtual int get_Columns();
    [CompilerGeneratedAttribute]
public virtual MatrixElementTypes get_MatrixElementType();
    public virtual Rectangle get_Rect();
    public virtual int get_Rows();
    public virtual int get_Size();
    public Row`1<TElement, TElement> get_Item(int row);
    public void SetSize(int rows, int columns);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.Array2DMatrixBase : TwoDimensionObjectBase {
    [CompilerGeneratedAttribute]
private int <TemplateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateRows>k__BackingField;
    public MatrixElementTypes MatrixElementType { get; }
    public Rectangle Rect { get; }
    public int Size { get; }
    internal int TemplateColumns { get; }
    internal int TemplateRows { get; }
    protected Array2DMatrixBase(int templateRows, int templateColumns, bool isEnabledDispose);
    public abstract virtual MatrixElementTypes get_MatrixElementType();
    public abstract virtual Rectangle get_Rect();
    public abstract virtual int get_Size();
    [CompilerGeneratedAttribute]
internal int get_TemplateColumns();
    [CompilerGeneratedAttribute]
internal int get_TemplateRows();
}
public abstract class DlibDotNet.BaseWindow : DlibObject {
    unknown string Title {public set; }
    protected BaseWindow(bool isEnabledDispose);
    public void set_Title(string value);
    public void CloseWindow();
    public void GetDisplaySize(UInt32& width, UInt32& height);
    public void GetSize(UInt32& width, UInt32& height);
    public void SetPos(int x, int y);
    public void SetSize(int width, int height);
    public void Show();
    public void WaitUntilClosed();
}
public class DlibDotNet.BatchTrainer`3 : Trainer`1<TScalar> {
    private KernelBaseParameter _Parameter;
    private SvmBatchTrainerType _SvmTrainerType;
    private Bridge`1<TScalar, TKernel, TTrainer, TScalar> _Bridge;
    public TScalar MinLearningRate { get; }
    public BatchTrainer`3(TTrainer trainer, TScalar minLearningRate, bool verbose, bool useCache, int cacheSize);
    internal BatchTrainer`3(IntPtr ptr, bool isEnabledDispose);
    public TScalar get_MinLearningRate();
    public DecisionFunction`2<TScalar, TKernel> Train(IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y);
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<TScalar, TKernel, TTrainer, TScalar> CreateBridge(KernelBaseParameter parameter, SvmBatchTrainerType trainerType);
}
internal static class DlibDotNet.BatchTrainerHelper : object {
    public static void GetTypes(Type& trainerType, SvmBatchTrainerType& svmTrainerType, SvmKernelType& svmKernelType, MatrixElementTypes& sampleType);
}
internal static class DlibDotNet.BatchTrainerTypesRepository : object {
    public static Dictionary`2<Type, SvmBatchTrainerType> Types;
    private static BatchTrainerTypesRepository();
}
public class DlibDotNet.BgrPixel : ValueType {
    public byte Blue;
    public byte Green;
    public byte Red;
    public BgrPixel(byte blue, byte red, byte green);
    public sealed virtual bool Equals(BgrPixel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BgrPixel left, BgrPixel right);
    public static bool op_Inequality(BgrPixel left, BgrPixel right);
}
public class DlibDotNet.ChipDetails : DlibObject {
    public double Angle { get; }
    public UInt32 Columns { get; }
    public DRectangle Rect { get; }
    public UInt32 Rows { get; }
    public ChipDetails(DRectangle rect, ChipDims dims);
    public ChipDetails(Rectangle rect, ChipDims dims);
    public ChipDetails(DRectangle rect, UInt32 size);
    public ChipDetails(DRectangle rect, UInt32 size, double angle);
    internal ChipDetails(IntPtr ptr);
    public double get_Angle();
    public UInt32 get_Columns();
    public DRectangle get_Rect();
    public UInt32 get_Rows();
    internal bool IsValid();
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ChipDims : DlibObject {
    public UInt32 Columns { get; public set; }
    public UInt32 Rows { get; public set; }
    public ChipDims(UInt32 rows, UInt32 cols);
    internal ChipDims(IntPtr ptr);
    public UInt32 get_Columns();
    public void set_Columns(UInt32 value);
    public UInt32 get_Rows();
    public void set_Rows(UInt32 value);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ClickActionMediator : DlibObject {
    private IntPtr _Handle;
    private Action`3<Point, bool, UInt32> _Callback;
    public ClickActionMediator(Action`3<Point, bool, UInt32> callback);
    protected virtual void DisposeUnmanaged();
    private void NativeCallback(IntPtr point, bool isDoubleClick, UInt32 button);
}
public abstract class DlibDotNet.ContainerBridge`1 : object {
    public abstract virtual T Create(IntPtr ptr, IParameter parameter);
    public abstract virtual IntPtr GetPtr(T item);
}
public class DlibDotNet.ContainerBridgeRepository : object {
    private static ConcurrentDictionary`2<Type, IContainerBridge> SupportTypes;
    private static ContainerBridgeRepository();
    public static void Add(ContainerBridge`1<T> bridge);
    public static ContainerBridge`1<T> Get();
}
public class DlibDotNet.CorrelationTracker : DlibObject {
    public CorrelationTracker(UInt32 filterSize, UInt32 numScaleLevels, UInt32 scaleWindowSize, double regularizerSpace, double nuSpace, double regularizerScale, double nuScale, double scalePyramidAlpha);
    public DRectangle GetPosition();
    public void StartTrack(Array2DBase image, DRectangle rect);
    public double Update(Array2DBase image, DRectangle guess);
    public double Update(Array2DBase image);
    public double UpdateNoscale(Array2DBase image, DRectangle guess);
    public double UpdateNoscale(Array2DBase image);
    protected virtual void DisposeUnmanaged();
}
public static class DlibDotNet.Cuda : object {
    public static bool TryGetDriverVersion(Int32& version);
    public static bool TryGetRuntimeVersion(Int32& version);
}
public class DlibDotNet.CudaException : Exception {
    [CompilerGeneratedAttribute]
private string <DllName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DriverVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RuntimeVersion>k__BackingField;
    public string DllName { get; }
    public int DriverVersion { get; }
    public int ErrorCode { get; }
    public string ErrorName { get; }
    public string ErrorMessage { get; }
    public int RuntimeVersion { get; }
    internal CudaException(int errorCode, string dllName, int driverVersion, int runtimeVersion, string errorName, string errorMessage);
    [CompilerGeneratedAttribute]
public string get_DllName();
    [CompilerGeneratedAttribute]
public int get_DriverVersion();
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public string get_ErrorName();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public int get_RuntimeVersion();
    public virtual string ToString();
}
public abstract class DlibDotNet.CustomDrawableWindow : DrawableWindow {
    private DelegateHandler`1<OnConstructorDelegate> _Constructor;
    private DelegateHandler`1<OnDestructorDelegate> _Destructor;
    private DelegateHandler`1<OnWindowResizedDelegate> _OnWindowResized;
    private DelegateHandler`1<OnKeyDownDelegate> _OnKeyDown;
    protected CustomDrawableWindow(bool resizable, bool undecorated);
    protected virtual void OnConstructor(IntPtr window);
    protected virtual void OnDestructor();
    protected virtual void OnWindowResized();
    protected virtual void OnKeyDown(UInt32 key, bool isPrintable, UInt32 state);
    protected virtual void DisposeUnmanaged();
    private void Constructor(IntPtr window);
    private void Destructor();
    private void WindowResized();
    private void KeyDown(UInt32 key, bool isPrintable, UInt32 state);
}
public abstract class DlibDotNet.CustomLogger : DlibObject {
    private DelegateHandler`1<LogDelegate> _Log;
    public abstract virtual void Log(string logName, LogLevel logLevel, string levelName, ulong threadId, string message);
    protected virtual void DisposeUnmanaged();
    private void LogNative(IntPtr logName, LogLevel logLevel, IntPtr levelName, ulong threadId, IntPtr message);
}
public abstract class DlibDotNet.CustomMultithreadedObject : MultithreadedObject {
    public virtual void RegisterThread(VoidActionMediator mediator);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.DecisionFunction`2 : FunctionBase {
    private KernelBaseParameter _Parameter;
    private Bridge`1<TScalar, TKernel, TScalar> _Bridge;
    internal DecisionFunction`2(IntPtr ptr, KernelBaseParameter parameter, bool isEnabledDispose);
    public static DecisionFunction`2<TScalar, TKernel> Deserialize(string path, int templateRows, int templateColumns);
    public TScalar Operator(Matrix`1<TScalar> sample);
    public static void Serialize(DecisionFunction`2<TScalar, TKernel> function, string path);
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<TScalar, TKernel, TScalar> CreateBridge(KernelBaseParameter parameter);
}
public class DlibDotNet.DefaultFHogFeatureExtractor : object {
}
internal class DlibDotNet.DelegateHandler`1 : object {
    private T _Delegate;
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    public IntPtr Handle { get; }
    public DelegateHandler`1(T delegate);
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
}
public static class DlibDotNet.Dlib : object {
    private static Encoding _Encoding;
    public static Encoding Encoding { get; public set; }
    public static bool IsSupportGui { get; }
    public static bool IsDnnSupportGui { get; }
    public static bool IsSupportCuda { get; }
    public static bool IsDnnSupportCuda { get; }
    private static Dlib();
    public static void ChineseWhispers(IEnumerable`1<SamplePair> edges, UInt32 iterations, UInt32& clusters, UInt32[]& labels);
    public static IEnumerable`1<UInt32> SpectralCluster(TKernel kernel, IEnumerable`1<Matrix`1<TScalar>> samples, UInt32 clusters);
    public static void LoadImageDataset(string path, Array`1& images, IList`1& boxes);
    public static void LoadImageDataset(string path, IList`1& images, IList`1& boxes);
    public static void LoadImageDataset(string path, IList`1& images, IList`1& boxes);
    public static void LoadMNISTDataset(string folderPath, IList`1& trainingImages, IList`1& trainingLabels, IList`1& testingImages, IList`1& testingLabels);
    public static string GetNativeVersion();
    public static string GetNativeDnnVersion();
    public static void AssignPixel(RgbPixel& dest, RgbAlphaPixel src);
    public static void AssignPixel(RgbAlphaPixel& dest, RgbPixel src);
    public static void AssignPixel(RgbPixel& dest, HsiPixel src);
    public static void AssignPixel(RgbAlphaPixel& dest, HsiPixel src);
    public static Array2D`1<T> ExtractImage4Points(Array2D`1<T> image, DPoint[] points, int width, int height);
    public static Matrix`1<T> ExtractImage4Points(Matrix`1<T> matrix, DPoint[] points, int width, int height);
    public static FrontalFaceDetector GetFrontalFaceDetector();
    public static Rectangle GetRect(HoughTransform houghTransform);
    public static Rectangle GetRect(MatrixBase matrix);
    public static Matrix`1<float> ImagePlane(Tensor tensor, int sample, int k);
    public static Array2D`1<T> LoadBmp(string path);
    public static Array2D`1<T> LoadDng(string path);
    public static Array2D`1<T> LoadImage(string path);
    public static Matrix`1<T> LoadImageAsMatrix(string path);
    public static Array2D`1<T> LoadJpeg(string path);
    public static Array2D`1<T> LoadPng(string path);
    public static Array2D`1<T> LoadImageData(Byte[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(ImagePixelFormat format, Byte[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(UInt16[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(Int16[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(Int32[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(Single[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(Double[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(RgbPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(BgrPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(RgbAlphaPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static Array2D`1<T> LoadImageData(HsiPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static void SaveBmp(Array2DBase image, string path);
    public static void SaveBmp(MatrixBase matrix, string path);
    public static void SaveDng(Array2DBase image, string path);
    public static void SaveDng(MatrixBase matrix, string path);
    public static void SaveJpeg(Array2DBase image, string path, int quality);
    public static void SaveJpeg(MatrixBase matrix, string path, int quality);
    public static void SavePng(Array2DBase image, string path);
    public static void SavePng(MatrixBase matrix, string path);
    public static Encoding get_Encoding();
    public static void set_Encoding(Encoding value);
    public static bool get_IsSupportGui();
    public static bool get_IsDnnSupportGui();
    public static bool get_IsSupportCuda();
    public static bool get_IsDnnSupportCuda();
    public static void SetAllBnRunningStatsWindowSizes(LossMetric net, UInt32 newWindowSize);
    public static void SetAllBnRunningStatsWindowSizes(LossMmod net, UInt32 newWindowSize);
    public static void SetAllBnRunningStatsWindowSizes(LossMulticlassLog net, UInt32 newWindowSize);
    public static void SetAllBnRunningStatsWindowSizes(LossMulticlassLogPerPixel net, UInt32 newWindowSize);
    public static Matrix`1<double> TestObjectDetectionFunction(LossMmod detector, IEnumerable`1<Matrix`1<T>> images, IEnumerable`1<IEnumerable`1<MModRect>> truthDets, TestBoxOverlap overlapTester, double adjustThreshold, TestBoxOverlap overlapIgnoreTester);
    public static DPoint InputTensorToOutputTensor(Net net, DPoint point);
    public static void NetToXml(Net net, string filename);
    public static PointTransformAffine FindSimilarityTransform(IEnumerable`1<Point> fromPoints, IEnumerable`1<Point> toPoints);
    public static PointTransformAffine FindSimilarityTransform(IEnumerable`1<DPoint> fromPoints, IEnumerable`1<DPoint> toPoints);
    public static Matrix`1<double> RotationMatrix(double angle);
    public static Point Center(Rectangle rectangle);
    public static DPoint Center(DRectangle rectangle);
    public static Rectangle CenteredRect(int x, int y, UInt32 width, UInt32 height);
    public static Rectangle CenteredRect(Point p, UInt32 width, UInt32 height);
    public static Rectangle CenteredRect(Rectangle rect, UInt32 width, UInt32 height);
    public static Rectangle MoveRect(Rectangle rect, Point point);
    public static Rectangle MoveRect(Rectangle rect, int x, int y);
    public static void MessageBox(string title, string message);
    public static void SaveFileBox(StringActionMediator mediator);
    public static void DrawSurfPoints(ImageWindow window, IEnumerable`1<SurfPoint> surfPoints);
    public static IEnumerable`1<SurfPoint> GetSurfPoints(Array2DBase image, long maxPoints, double detectionThreshold);
    public static Rectangle ComputeBoxDimensions(double widthToHeightRatio, double area);
    public static IEnumerable`1<Rectangle> CreateGridDetectionTemplate(Rectangle objectBox, UInt32 cellsX, UInt32 cellsY);
    public static IEnumerable`1<Rectangle> EvaluateDetectors(IEnumerable`1<ObjectDetector`1<ScanFHogPyramid`2<T, U>>> detectors, MatrixBase matrix, double adjustThreshold);
    public static PointTransformAffine NormalizingTForm(Rectangle rectangle);
    public static UInt32 NumSeparableFilters(ObjectDetector`1<ScanFHogPyramid`2<T, U>> detector, UInt32 weightIndex);
    public static double TestShapePredictor(ShapePredictor predictor, Array`1<Array2D`1<T>> images, IEnumerable`1<IList`1<FullObjectDetection>> objects, IEnumerable`1<IList`1<double>> scales);
    public static ObjectDetector`1<ScanFHogPyramid`2<T, U>> ThresholdFilterSingularValues(ObjectDetector`1<ScanFHogPyramid`2<T, U>> detector, double threshold, UInt32 weightIndex);
    public static OverlayLine[] RenderFaceDetections(FullObjectDetection detection);
    public static OverlayLine[] RenderFaceDetections(FullObjectDetection detection, RgbPixel color);
    public static OverlayLine[] RenderFaceDetections(IEnumerable`1<FullObjectDetection> shapes);
    public static OverlayLine[] RenderFaceDetections(IEnumerable`1<FullObjectDetection> detection, RgbPixel color);
    public static void AssignAllPpixels(Array2D`1<byte> dest, byte pixel);
    public static void AssignAllPpixels(Array2D`1<ushort> dest, ushort pixel);
    public static void AssignAllPpixels(Array2D`1<UInt32> dest, UInt32 pixel);
    public static void AssignAllPpixels(Array2D`1<sbyte> dest, sbyte pixel);
    public static void AssignAllPpixels(Array2D`1<short> dest, short pixel);
    public static void AssignAllPpixels(Array2D`1<int> dest, int pixel);
    public static void AssignAllPpixels(Array2D`1<float> dest, float pixel);
    public static void AssignAllPpixels(Array2D`1<double> dest, double pixel);
    public static void AssignAllPpixels(Array2D`1<BgrPixel> dest, BgrPixel pixel);
    public static void AssignAllPpixels(Array2D`1<RgbPixel> dest, RgbPixel pixel);
    public static void AssignAllPpixels(Array2D`1<RgbAlphaPixel> dest, RgbAlphaPixel pixel);
    public static void AssignAllPpixels(Array2D`1<HsiPixel> dest, HsiPixel pixel);
    public static void AssignImage(Array2DBase src, Array2DBase dest);
    public static void AssignImage(MatrixBase src, MatrixBase dest);
    public static RgbPixel ColormapHeat(double value, double minVal, double maxVal);
    public static RgbPixel ColormapJet(double value, double minVal, double maxVal);
    public static MatrixOp Heatmap(Array2DBase image);
    public static MatrixOp Heatmap(MatrixBase image);
    public static MatrixOp Heatmap(Array2DBase image, double maxValue, double minValue);
    public static MatrixOp Heatmap(MatrixBase image, double maxValue, double minValue);
    public static MatrixOp Jet(Array2DBase image);
    public static MatrixOp Jet(MatrixBase image);
    public static MatrixOp Jet(Array2DBase image, double maxValue, double minValue);
    public static MatrixOp Jet(MatrixBase image, double maxValue, double minValue);
    public static void EqualizeHistogram(Array2DBase image);
    public static void EqualizeHistogram(Array2DBase image, Array2D`1& outImage);
    public static void DrawLine(Array2D`1<RgbPixel> image, Point p1, Point p2);
    public static void DrawLine(Array2D`1<byte> image, Point p1, Point p2, byte color);
    public static void DrawLine(Array2D`1<ushort> image, Point p1, Point p2, ushort color);
    public static void DrawLine(Array2D`1<UInt32> image, Point p1, Point p2, UInt32 color);
    public static void DrawLine(Array2D`1<sbyte> image, Point p1, Point p2, sbyte color);
    public static void DrawLine(Array2D`1<short> image, Point p1, Point p2, short color);
    public static void DrawLine(Array2D`1<int> image, Point p1, Point p2, int color);
    public static void DrawLine(Array2D`1<float> image, Point p1, Point p2, float color);
    public static void DrawLine(Array2D`1<double> image, Point p1, Point p2, double color);
    public static void DrawLine(Array2D`1<RgbPixel> image, Point p1, Point p2, RgbPixel color);
    public static void DrawLine(Array2D`1<RgbAlphaPixel> image, Point p1, Point p2, RgbAlphaPixel color);
    public static void DrawLine(Array2D`1<HsiPixel> image, Point p1, Point p2, HsiPixel color);
    public static void DrawLine(Matrix`1<RgbPixel> image, Point p1, Point p2);
    public static void DrawLine(Matrix`1<byte> image, Point p1, Point p2, byte color);
    public static void DrawLine(Matrix`1<ushort> image, Point p1, Point p2, ushort color);
    public static void DrawLine(Matrix`1<UInt32> image, Point p1, Point p2, UInt32 color);
    public static void DrawLine(Matrix`1<sbyte> image, Point p1, Point p2, sbyte color);
    public static void DrawLine(Matrix`1<short> image, Point p1, Point p2, short color);
    public static void DrawLine(Matrix`1<int> image, Point p1, Point p2, int color);
    public static void DrawLine(Matrix`1<float> image, Point p1, Point p2, float color);
    public static void DrawLine(Matrix`1<double> image, Point p1, Point p2, double color);
    public static void DrawLine(Matrix`1<RgbPixel> image, Point p1, Point p2, RgbPixel color);
    public static void DrawLine(Matrix`1<RgbAlphaPixel> image, Point p1, Point p2, RgbAlphaPixel color);
    public static void DrawLine(Matrix`1<HsiPixel> image, Point p1, Point p2, HsiPixel color);
    public static void DrawRectangle(Array2D`1<byte> image, Rectangle rect, byte color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<ushort> image, Rectangle rect, ushort color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<UInt32> image, Rectangle rect, UInt32 color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<sbyte> image, Rectangle rect, sbyte color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<short> image, Rectangle rect, short color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<int> image, Rectangle rect, int color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<float> image, Rectangle rect, float color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<double> image, Rectangle rect, double color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<RgbPixel> image, Rectangle rect, RgbPixel color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<RgbAlphaPixel> image, Rectangle rect, RgbAlphaPixel color, UInt32 thickness);
    public static void DrawRectangle(Array2D`1<HsiPixel> image, Rectangle rect, HsiPixel color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<byte> image, Rectangle rect, byte color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<ushort> image, Rectangle rect, ushort color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<UInt32> image, Rectangle rect, UInt32 color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<sbyte> image, Rectangle rect, sbyte color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<short> image, Rectangle rect, short color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<int> image, Rectangle rect, int color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<float> image, Rectangle rect, float color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<double> image, Rectangle rect, double color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<RgbPixel> image, Rectangle rect, RgbPixel color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<RgbAlphaPixel> image, Rectangle rect, RgbAlphaPixel color, UInt32 thickness);
    public static void DrawRectangle(Matrix`1<HsiPixel> image, Rectangle rect, HsiPixel color, UInt32 thickness);
    public static void FillRect(Array2D`1<byte> image, Rectangle rect, byte color);
    public static void FillRect(Array2D`1<ushort> image, Rectangle rect, ushort color);
    public static void FillRect(Array2D`1<UInt32> image, Rectangle rect, UInt32 color);
    public static void FillRect(Array2D`1<sbyte> image, Rectangle rect, sbyte color);
    public static void FillRect(Array2D`1<short> image, Rectangle rect, short color);
    public static void FillRect(Array2D`1<int> image, Rectangle rect, int color);
    public static void FillRect(Array2D`1<float> image, Rectangle rect, float color);
    public static void FillRect(Array2D`1<double> image, Rectangle rect, double color);
    public static void FillRect(Array2D`1<RgbPixel> image, Rectangle rect, RgbPixel color);
    public static void FillRect(Array2D`1<RgbAlphaPixel> image, Rectangle rect, RgbAlphaPixel color);
    public static void FillRect(Array2D`1<HsiPixel> image, Rectangle rect, HsiPixel color);
    public static void FillRect(Matrix`1<byte> image, Rectangle rect, byte color);
    public static void FillRect(Matrix`1<ushort> image, Rectangle rect, ushort color);
    public static void FillRect(Matrix`1<UInt32> image, Rectangle rect, UInt32 color);
    public static void FillRect(Matrix`1<sbyte> image, Rectangle rect, sbyte color);
    public static void FillRect(Matrix`1<short> image, Rectangle rect, short color);
    public static void FillRect(Matrix`1<int> image, Rectangle rect, int color);
    public static void FillRect(Matrix`1<float> image, Rectangle rect, float color);
    public static void FillRect(Matrix`1<double> image, Rectangle rect, double color);
    public static void FillRect(Matrix`1<RgbPixel> image, Rectangle rect, RgbPixel color);
    public static void FillRect(Matrix`1<RgbAlphaPixel> image, Rectangle rect, RgbAlphaPixel color);
    public static void FillRect(Matrix`1<HsiPixel> image, Rectangle rect, HsiPixel color);
    public static Matrix`1<T> TileImages(Array`1<Array2D`1<T>> array);
    public static Matrix`1<T> TileImages(IEnumerable`1<Matrix`1<T>> images);
    public static void SobelEdgeDetector(Array2DBase image, Array2DBase horizontalGradient, Array2DBase verticalGradient);
    public static void SuppressNonMaximumEdges(Array2DBase horizontalGradient, Array2DBase verticalGradient, Array2DBase outImage);
    public static Matrix`1<byte> DrawFHog(Array2DMatrixBase hogImage, int cellDrawSize, float minResponseThreshold);
    public static Matrix`1<byte> DrawFHog(ObjectDetector`1<T> hogImage, UInt32 weightIndex, int cellDrawSize);
    public static Array2DMatrix`1<T> ExtractFHogFeatures(Array2DBase inImage, int cellSize, int filterRowsPadding, int filterColsPadding);
    public static void ExtractFHogFeatures(Array2DBase inImage, Matrix`1& feature, int cellSize, int filterRowsPadding, int filterColsPadding);
    public static Array`1<Array2D`1<T>> ExtractFHogFeaturesArray(Array2DBase inImage, int cellSize, int filterRowsPadding, int filterColsPadding);
    public static Point ImageToFHog(Point point, int cellSize, int filterRowsPadding, int filterColsPadding);
    public static IEnumerable`1<Rectangle> FindCandidateObjectLocations(Array2DBase image);
    public static IEnumerable`1<Rectangle> FindCandidateObjectLocations(Array2DBase image, Matrix`1<T> kvals, UInt32 minSize, UInt32 maxMergingIterations);
    public static void CreateTiledPyramid(Matrix`1<T> image, UInt32 padding, UInt32 outerPadding, UInt32 pyramidRate, Matrix`1& outImage, IEnumerable`1& rects);
    public static void AddImageLeftRightFlips(IList`1<Matrix`1<T>> images, IList`1<IList`1<Rectangle>> objects);
    public static Array`1<Array2D`1<T>> ExtractImageChips(Array2DBase image, IEnumerable`1<ChipDetails> chipLocations);
    public static Array`1<Matrix`1<T>> ExtractImageChips(MatrixBase image, IEnumerable`1<ChipDetails> chipLocations);
    public static Array2D`1<T> ExtractImageChip(Array2DBase image, ChipDetails chipLocation, InterpolationTypes type);
    public static Matrix`1<T> ExtractImageChip(MatrixBase image, ChipDetails chipLocation, InterpolationTypes type);
    public static void FlipImageLeftRight(Array2DBase image);
    public static void FlipImageLeftRight(Array2DBase inputImage, Array2DBase outputImage);
    public static void FlipImageUpDown(Array2DBase inputImage, Array2DBase outputImage);
    public static Rectangle FlipRectLeftRight(Rectangle rect, Rectangle window);
    public static ChipDetails[] GetFaceChipDetails(IEnumerable`1<FullObjectDetection> dets, UInt32 size, double padding);
    public static ChipDetails GetFaceChipDetails(FullObjectDetection det, UInt32 size, double padding);
    public static Matrix`1<T> JitterImage(Matrix`1<T> image, Rand random);
    public static void PyramidUp(Array2DBase image);
    public static void PyramidUp(MatrixBase image);
    public static void PyramidUp(Matrix`1<T> image, PyramidDown pyramid, Matrix`1& matrix);
    public static void PyramidUp(MatrixBase image, UInt32 pyramidRate);
    public static void ResizeImage(Array2DBase inputImage, double scale);
    public static Matrix`1<T> ResizeImage(Matrix`1<T> matrix, UInt32 row, UInt32 column, InterpolationTypes interpolationTypes);
    public static void ResizeImage(Matrix`1<T> src, Matrix`1<T> dst, InterpolationTypes interpolationTypes);
    public static void ResizeImage(MatrixBase matrix, double scale);
    public static void ResizeImage(Array2DBase inputImage, Array2DBase outputImage, InterpolationTypes interpolationTypes);
    public static void RotateImage(Array2DBase inputImage, Array2DBase outputImage, double radian, InterpolationTypes interpolationTypes);
    public static void TransformImage(Array2DBase inputImage, Array2DBase outputImage, PointTransformBase pointTransform, InterpolationTypes interpolationTypes);
    public static void UpsampleImageDataset(UInt32 pyramidRate, IList`1<Matrix`1<T>> images, IList`1<IList`1<Rectangle>> objects, UInt32 maxImageSize);
    public static void UpsampleImageDataset(UInt32 pyramidRate, IList`1<Matrix`1<T>> images, IList`1<IList`1<MModRect>> objects, UInt32 maxImageSize);
    public static void ApplyRandomColorOffset(MatrixBase image, Rand rand);
    public static void DisturbColors(MatrixBase image, Rand rand, double gammaMagnitude, double colorMagnitude);
    public static void GaussianBlur(Array2DBase inImage, Array2DBase outImage, double sigma, int maxSize);
    public static void SumFilter(Array2DBase inImage, Array2DBase outImage, Rectangle rect);
    public static void SetAllLoggingOutputHooks(CustomLogger logger);
    public static MatrixOp Mat(Array2DBase array);
    public static MatrixOp Mat(IEnumerable`1<T> collection);
    public static MatrixOp Mat(OutputLabels`1<Matrix`1<T>> collection);
    public static MatrixOp Mat(NetResult`1<Matrix`1<T>> results);
    public static Matrix`1<T> Round(Matrix`1<T> matrix);
    public static MatrixOp JoinRows(MatrixBase matrix1, MatrixBase matrix2);
    public static byte Length(Matrix`1<byte> matrix);
    public static ushort Length(Matrix`1<ushort> matrix);
    public static UInt32 Length(Matrix`1<UInt32> matrix);
    public static sbyte Length(Matrix`1<sbyte> matrix);
    public static short Length(Matrix`1<short> matrix);
    public static int Length(Matrix`1<int> matrix);
    public static float Length(Matrix`1<float> matrix);
    public static double Length(Matrix`1<double> matrix);
    public static double Length(DPoint point);
    public static double Length(Point point);
    public static byte LengthSquared(Matrix`1<byte> matrix);
    public static ushort LengthSquared(Matrix`1<ushort> matrix);
    public static UInt32 LengthSquared(Matrix`1<UInt32> matrix);
    public static sbyte LengthSquared(Matrix`1<sbyte> matrix);
    public static short LengthSquared(Matrix`1<short> matrix);
    public static int LengthSquared(Matrix`1<int> matrix);
    public static float LengthSquared(Matrix`1<float> matrix);
    public static double LengthSquared(Matrix`1<double> matrix);
    public static Matrix`1<double> Linspace(double start, double end, int num);
    public static Matrix`1<T> MatrixCast(MatrixBase matrix);
    public static byte Max(Matrix`1<byte> matrix);
    public static ushort Max(Matrix`1<ushort> matrix);
    public static UInt32 Max(Matrix`1<UInt32> matrix);
    public static sbyte Max(Matrix`1<sbyte> matrix);
    public static short Max(Matrix`1<short> matrix);
    public static int Max(Matrix`1<int> matrix);
    public static float Max(Matrix`1<float> matrix);
    public static double Max(Matrix`1<double> matrix);
    public static byte Min(Matrix`1<byte> matrix);
    public static ushort Min(Matrix`1<ushort> matrix);
    public static UInt32 Min(Matrix`1<UInt32> matrix);
    public static sbyte Min(Matrix`1<sbyte> matrix);
    public static short Min(Matrix`1<short> matrix);
    public static int Min(Matrix`1<int> matrix);
    public static float Min(Matrix`1<float> matrix);
    public static double Min(Matrix`1<double> matrix);
    public static Point MaxPoint(MatrixOp matrix);
    public static Matrix`1<T> MaxPointWise(Matrix`1<T> matrix1, Matrix`1<T> matrix2);
    public static Matrix`1<T> Mean(MatrixOp matrix);
    public static Matrix`1<double> RandM(int row, int column);
    public static MatrixOp Trans(MatrixBase matrix);
    public static Matrix`1<T> FlipLR(Matrix`1<T> matrix);
    public static void Sleep(UInt32 milliseconds);
    public static byte AssignmentCost(Matrix`1<byte> cost, IEnumerable`1<long> assignment);
    public static ushort AssignmentCost(Matrix`1<ushort> cost, IEnumerable`1<long> assignment);
    public static UInt32 AssignmentCost(Matrix`1<UInt32> cost, IEnumerable`1<long> assignment);
    public static sbyte AssignmentCost(Matrix`1<sbyte> cost, IEnumerable`1<long> assignment);
    public static short AssignmentCost(Matrix`1<short> cost, IEnumerable`1<long> assignment);
    public static int AssignmentCost(Matrix`1<int> cost, IEnumerable`1<long> assignment);
    public static double AssignmentCost(Matrix`1<double> cost, IEnumerable`1<long> assignment);
    public static float AssignmentCost(Matrix`1<float> cost, IEnumerable`1<long> assignment);
    public static IEnumerable`1<long> MaxCostAssignment(Matrix`1<T> cost);
    public static double MaximumNu(IEnumerable`1<double> y);
    public static float MaximumNu(IEnumerable`1<float> y);
    public static void SRand(UInt32 seed);
    public static string WrapString(string text, UInt32 firstPad, UInt32 restPad, UInt32 maxPerLine);
    public static Matrix`1<double> TestObjectDetectionFunction(ObjectDetector`1<T> detector, IEnumerable`1<Matrix`1<U>> images, IEnumerable`1<IEnumerable`1<Rectangle>> objects);
    public static BatchTrainer`3<TScalar, TKernel, TTrainer> BatchCached(TTrainer trainer, TScalar minLearningRate, int cacheSize);
    public static Matrix`1<double> CrossValidateTrainer(TTrainer trainer, IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y, int folds);
    public static Matrix`1<double> CrossValidateTrainer(BatchTrainer`3<TScalar, TKernel, TTrainer> trainer, IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y, int folds);
    public static Matrix`1<double> CrossValidateTrainer(ReducedDecisionFunctionTrainer2`3<TScalar, TKernel, TTrainer> trainer, IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y, int folds);
    [IteratorStateMachineAttribute("DlibDotNet.Dlib/<FindClustersUsingAngularKMeans>d__292`1")]
public static IEnumerable`1<Matrix`1<T>> FindClustersUsingAngularKMeans(IEnumerable`1<Matrix`1<T>> samples, IEnumerable`1<Matrix`1<T>> centers, UInt32 maxIteration);
    public static UInt32 NearestCenter(IEnumerable`1<Matrix`1<T>> centers, Matrix`1<T> sample);
    public static IEnumerable`1<Matrix`1<TScalar>> PickInitialCenters(int numberCenters, IEnumerable`1<Matrix`1<TScalar>> samples, TKernel kernel, double percentile);
    public static void RandomizeSamples(IList`1<T> samples);
    public static void RandomizeSamples(IList`1<T1> samples1, IList`1<T2> samples2);
    public static ReducedDecisionFunctionTrainer2`3<TScalar, TKernel, TTrainer> Reduced2(TTrainer trainer, UInt32 numBaseVector, double eps);
    public static Matrix`1<TScalar> RankFeatures(KCentroid`2<TScalar, TKernel> kcentroid, IEnumerable`1<Matrix`1<TScalar>> samples, IEnumerable`1<TScalar> labels);
    public static ProbabilisticDecisionFunction`2<TScalar, TKernel> TrainProbabilisticDecisionFunction(TTrainer trainer, IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y, int folds);
    public static ProbabilisticDecisionFunction`2<TScalar, TKernel> TrainProbabilisticDecisionFunction(ReducedDecisionFunctionTrainer2`3<TScalar, TKernel, TTrainer> trainer, IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y, int folds);
    public static BatchTrainer`3<TScalar, TKernel, TTrainer> VerboseBatchCached(TTrainer trainer, TScalar minLearningRate, int cacheSize);
    public static bool CreateNewThread(ThreadAction action, IntPtr param);
}
public abstract class DlibDotNet.DlibObject : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnableDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <NativePtr>k__BackingField;
    public bool IsDisposed { get; private set; }
    public bool IsEnableDispose { get; }
    public IntPtr NativePtr { get; internal set; }
    protected DlibObject(bool isEnabledDispose);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnableDispose();
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_NativePtr();
    [CompilerGeneratedAttribute]
internal void set_NativePtr(IntPtr value);
    public sealed virtual void ThrowIfDisposed();
    internal void ThrowIfDisposed(string objectName);
    protected bool Equals(DlibObject other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual void DisposeManaged();
    protected virtual void DisposingManaged();
    protected virtual void DisposeUnmanaged();
    protected virtual void DisposingUnmanaged();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class DlibDotNet.Dnn.Adam : DlibObject {
    public Adam(float weightDecay, float momentum1, float momentum2);
    protected virtual void DisposeUnmanaged();
}
public static class DlibDotNet.Dnn.Cuda : object {
    public static bool TryGetDriverVersion(Int32& version);
    public static bool TryGetRuntimeVersion(Int32& version);
    internal static void ThrowCudaException(ErrorType error);
}
public class DlibDotNet.Dnn.DnnTrainer`1 : DlibObject {
    private TrainerImp`1<T, T> _Imp;
    internal int Type { get; }
    public DnnTrainer`1(T net);
    public DnnTrainer`1(T net, Sgd sgd);
    internal int get_Type();
    public void BeVerbose();
    public double GetLearningRate();
    public double GetAverageLoss();
    public double GetAverageTestLoss();
    public T GetNet();
    public void SetLearningRate(double learningRate);
    public void SetMinLearningRate(double learningRate);
    public void SetMiniBatchSize(UInt32 size);
    public void SetSynchronizationFile(string filename, UInt32 second);
    public void SetIterationsWithoutProgressThreshold(UInt32 threshold);
    public void SetTestIterationsWithoutProgressThreshold(UInt32 threshold);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
    private static TrainerImp`1<T, T> CreateImp(T net);
    private static TrainerImp`1<T, T> CreateImp(T net, Sgd sgd);
}
public abstract class DlibDotNet.Dnn.Input : DlibObject {
}
public class DlibDotNet.Dnn.InputRgbImagePyramid`1 : Input {
    private UInt32 _PyramidRate;
    private PyramidType _PyramidType;
    public InputRgbImagePyramid`1(UInt32 pyramidRate);
    public UInt32 GetPyramidPadding();
    public UInt32 GetPyramidOuterPadding();
    public DRectangle ImageSpaceToTensorSpace(Tensor data, double scale, DRectangle rectangle);
    public void ToTensor(MatrixBase matrix, UInt32 count, T tensor);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.Dnn.LossMetric : Net {
    public int NumLayers { get; }
    public LossMetric(int networkType);
    internal LossMetric(IntPtr ptr, int networkType, bool isEnabledDispose);
    public virtual int get_NumLayers();
    public virtual void Clean();
    public static LossMetric Deserialize(string path, int networkType);
    public static LossMetric Deserialize(ProxyDeserialize deserialize, int networkType);
    public LossDetails GetLossDetails();
    public Subnet GetSubnet();
    internal virtual DPoint InputTensorToOutputTensor(DPoint p);
    internal virtual void NetToXml(string filename);
    public OutputLabels`1<Matrix`1<float>> Operator(Matrix`1<T> image, ulong batchSize);
    public OutputLabels`1<Matrix`1<float>> Operator(IEnumerable`1<Matrix`1<T>> images, ulong batchSize);
    public static void Serialize(LossMetric net, string path);
    public static void Serialize(ProxySerialize serialize, LossMetric net);
    public static void TestOneStep(DnnTrainer`1<LossMetric> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<UInt32> label);
    public static void Train(DnnTrainer`1<LossMetric> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<UInt32> label);
    public static void TrainOneStep(DnnTrainer`1<LossMetric> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<UInt32> label);
    public virtual bool TryGetInputLayer(T layer);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
}
public static class DlibDotNet.Dnn.LossMetricRegistry : object {
    public static bool Add(IntPtr builder);
    public static void Remove(IntPtr builder);
    public static bool Contains(int id);
    public static int GetId(IntPtr builder);
}
public class DlibDotNet.Dnn.LossMmod : Net {
    public int NumLayers { get; }
    public LossMmod(int networkType);
    public LossMmod(MModOptions options, int networkType);
    internal LossMmod(IntPtr ptr, int networkType, bool isEnabledDispose);
    public virtual int get_NumLayers();
    public virtual void Clean();
    public static LossMmod Deserialize(string path, int networkType);
    public static LossMmod Deserialize(ProxyDeserialize deserialize, int networkType);
    public LossDetails GetLossDetails();
    public Subnet GetSubnet();
    internal virtual DPoint InputTensorToOutputTensor(DPoint p);
    internal virtual void NetToXml(string filename);
    public OutputLabels`1<IEnumerable`1<MModRect>> Operator(Matrix`1<T> image, ulong batchSize);
    public OutputLabels`1<IEnumerable`1<MModRect>> Operator(IEnumerable`1<Matrix`1<T>> images, ulong batchSize);
    public static void Serialize(LossMmod net, string path);
    public static void Serialize(ProxySerialize serialize, LossMmod net);
    public static void TestOneStep(DnnTrainer`1<LossMmod> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<IEnumerable`1<MModRect>> label);
    public static void Train(DnnTrainer`1<LossMmod> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<IEnumerable`1<MModRect>> label);
    public static void TrainOneStep(DnnTrainer`1<LossMmod> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<IEnumerable`1<MModRect>> label);
    public virtual bool TryGetInputLayer(T layer);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
}
public static class DlibDotNet.Dnn.LossMmodRegistry : object {
    public static bool Add(IntPtr builder);
    public static void Remove(IntPtr builder);
    public static bool Contains(int id);
    public static int GetId(IntPtr builder);
}
public class DlibDotNet.Dnn.LossMulticlassLog : Net {
    public int NumLayers { get; }
    public LossMulticlassLog(int networkType);
    internal LossMulticlassLog(IntPtr ptr, int networkType, bool isEnabledDispose);
    public virtual int get_NumLayers();
    public virtual void Clean();
    public static LossMulticlassLog Deserialize(string path, int networkType);
    public static LossMulticlassLog Deserialize(ProxyDeserialize deserialize, int networkType);
    public String[] GetLabels();
    public LossDetails GetLossDetails();
    public Subnet GetSubnet();
    internal virtual DPoint InputTensorToOutputTensor(DPoint p);
    internal virtual void NetToXml(string filename);
    public OutputLabels`1<UInt32> Operator(Matrix`1<T> image, ulong batchSize);
    public OutputLabels`1<UInt32> Operator(IEnumerable`1<Matrix`1<T>> images, ulong batchSize);
    public IEnumerable`1<Single[]> Probability(Matrix`1<T> image, ulong batchSize);
    public IEnumerable`1<Single[]> Probability(IEnumerable`1<Matrix`1<T>> images, ulong batchSize);
    public static void Serialize(LossMulticlassLog net, string path);
    public static void Serialize(ProxySerialize serialize, LossMulticlassLog net);
    public virtual bool TryGetInputLayer(T layer);
    public static void TestOneStep(DnnTrainer`1<LossMulticlassLog> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<UInt32> label);
    public static void Train(DnnTrainer`1<LossMulticlassLog> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<UInt32> label);
    public static void TrainOneStep(DnnTrainer`1<LossMulticlassLog> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<UInt32> label);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
}
public class DlibDotNet.Dnn.LossMulticlassLogPerPixel : Net {
    public static ushort LabelToIgnore { get; }
    public int NumLayers { get; }
    public LossMulticlassLogPerPixel(int networkType);
    internal LossMulticlassLogPerPixel(IntPtr ptr, int networkType, bool isEnabledDispose);
    public static ushort get_LabelToIgnore();
    public virtual int get_NumLayers();
    public virtual void Clean();
    public LossMulticlassLogPerPixel CloneAs(int networkType);
    public static LossMulticlassLogPerPixel Deserialize(string path, int networkType);
    public static LossMulticlassLogPerPixel Deserialize(ProxyDeserialize deserialize, int networkType);
    public LossDetails GetLossDetails();
    public Subnet GetSubnet();
    internal virtual DPoint InputTensorToOutputTensor(DPoint p);
    internal virtual void NetToXml(string filename);
    public OutputLabels`1<Matrix`1<ushort>> Operator(Matrix`1<T> image, ulong batchSize);
    public OutputLabels`1<Matrix`1<ushort>> Operator(IEnumerable`1<Matrix`1<T>> images, ulong batchSize);
    public static void Serialize(LossMulticlassLogPerPixel net, string path);
    public static void Serialize(ProxySerialize serialize, LossMulticlassLogPerPixel net);
    public static void TestOneStep(DnnTrainer`1<LossMulticlassLogPerPixel> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<Matrix`1<ushort>> label);
    public static void Train(DnnTrainer`1<LossMulticlassLogPerPixel> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<Matrix`1<ushort>> label);
    public static void TrainOneStep(DnnTrainer`1<LossMulticlassLogPerPixel> trainer, IEnumerable`1<Matrix`1<T>> data, IEnumerable`1<Matrix`1<ushort>> label);
    public virtual bool TryGetInputLayer(T layer);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
}
public static class DlibDotNet.Dnn.LossMulticlassLogPerPixelRegistry : object {
    public static bool Add(IntPtr builder);
    public static void Remove(IntPtr builder);
    public static bool Contains(int id);
    public static int GetId(IntPtr builder);
}
public static class DlibDotNet.Dnn.LossMulticlassLogRegistry : object {
    public static bool Add(IntPtr builder);
    public static void Remove(IntPtr builder);
    public static bool Contains(int id);
    public static int GetId(IntPtr builder);
}
public class DlibDotNet.Dnn.MModOptions : DlibObject {
    public IEnumerable`1<DetectorWindowDetails> DetectorWindows { get; public set; }
    public double LossPerFalseAlarm { get; public set; }
    public double LossPerMissedTarget { get; public set; }
    public double TruthMatchIouThreshold { get; public set; }
    public TestBoxOverlap OverlapsNms { get; public set; }
    public TestBoxOverlap OverlapsIgnore { get; public set; }
    public bool UseBoundingBoxRegression { get; public set; }
    public double bbrLambda { get; public set; }
    public MModOptions(IEnumerable`1<IEnumerable`1<MModRect>> boxes, UInt32 targetSize, UInt32 minTargetSize, double minDetectorWindowOverlapIou);
    public IEnumerable`1<DetectorWindowDetails> get_DetectorWindows();
    public void set_DetectorWindows(IEnumerable`1<DetectorWindowDetails> value);
    public double get_LossPerFalseAlarm();
    public void set_LossPerFalseAlarm(double value);
    public double get_LossPerMissedTarget();
    public void set_LossPerMissedTarget(double value);
    public double get_TruthMatchIouThreshold();
    public void set_TruthMatchIouThreshold(double value);
    public TestBoxOverlap get_OverlapsNms();
    public void set_OverlapsNms(TestBoxOverlap value);
    public TestBoxOverlap get_OverlapsIgnore();
    public void set_OverlapsIgnore(TestBoxOverlap value);
    public bool get_UseBoundingBoxRegression();
    public void set_UseBoundingBoxRegression(bool value);
    public double get_bbrLambda();
    public void set_bbrLambda(double value);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.Dnn.Net : DlibObject {
    [CompilerGeneratedAttribute]
private int <NetworkType>k__BackingField;
    public int NumLayers { get; }
    internal int NetworkType { get; private set; }
    protected Net(int networkType, bool isEnabledDispose);
    public abstract virtual int get_NumLayers();
    [CompilerGeneratedAttribute]
internal int get_NetworkType();
    [CompilerGeneratedAttribute]
private void set_NetworkType(int value);
    public abstract virtual void Clean();
    internal abstract virtual DPoint InputTensorToOutputTensor(DPoint p);
    internal abstract virtual void NetToXml(string filename);
    public abstract virtual bool TryGetInputLayer(T layer);
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.Dnn.NetResult`1 : DlibObject {
    private TItem[] _Array;
    private StdVector`1<TItem> _Vector;
    public int Length { get; }
    public TItem Item { get; }
    public TItem Item { get; }
    internal NetResult`1(StdVector`1<TItem> vector);
    public int get_Length();
    public TItem get_Item(int index);
    public TItem get_Item(UInt32 index);
    protected virtual void DisposeUnmanaged();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DlibDotNet.Dnn.NotSupportNetworkTypeException : Exception {
    [CompilerGeneratedAttribute]
private int <NetworkType>k__BackingField;
    public int NetworkType { get; }
    public NotSupportNetworkTypeException(int networkType);
    public NotSupportNetworkTypeException(int networkType, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_NetworkType();
}
[DefaultMemberAttribute("Item")]
public abstract class DlibDotNet.Dnn.OutputLabels`1 : DlibObject {
    public int Count { get; }
    public T Item { get; }
    public T Item { get; }
    protected OutputLabels`1(IntPtr vector);
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(int index);
    public abstract virtual T get_Item(UInt32 index);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DlibDotNet.Dnn.PropagateException : Exception {
}
public class DlibDotNet.Dnn.ResizableTensor : Tensor {
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.Dnn.Sgd : DlibObject {
    public Sgd(float weightDecay, float momentum);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.Dnn.Tensor : DlibObject {
    public int K { get; }
    internal Tensor(IntPtr ptr);
    public int get_K();
}
public class DlibDotNet.DPoint : ValueType {
    private double _X;
    private double _Y;
    public double Length { get; }
    public double LengthSquared { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public DPoint(double x, double y);
    internal DPoint(IntPtr ptr, bool isEnabledDispose);
    public double get_Length();
    public double get_LengthSquared();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public sealed virtual bool Equals(DPoint other);
    public DPoint Rotate(DPoint point, double angle);
    public static DPoint Rotate(DPoint center, DPoint point, double angle);
    internal NativeDPoint ToNative();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static DPoint op_Addition(DPoint point, DPoint rhs);
    public static DPoint op_Addition(DPoint point, Point rhs);
    public static DPoint op_Subtraction(DPoint point, DPoint rhs);
    public static DPoint op_Subtraction(DPoint point, Point rhs);
    public static DPoint op_Multiply(DPoint point, double rhs);
    public static DPoint op_Multiply(int lhs, DPoint point);
    public static DPoint op_Multiply(double lhs, DPoint point);
    public static DPoint op_Division(DPoint point, double rhs);
    public static bool op_Equality(DPoint left, DPoint right);
    public static bool op_Inequality(DPoint left, DPoint right);
    public static Point op_Explicit(DPoint point);
}
public abstract class DlibDotNet.Drawable : DlibObject {
    private DrawableWindow _Window;
    public int Bottom { get; }
    public UInt32 Height { get; }
    public int Left { get; }
    public int Right { get; }
    public int Top { get; }
    public UInt32 Width { get; }
    protected Drawable(DrawableWindow window);
    public int get_Bottom();
    public UInt32 get_Height();
    public int get_Left();
    public int get_Right();
    public int get_Top();
    public UInt32 get_Width();
    public void SetPos(int x, int y);
}
public abstract class DlibDotNet.DrawableWindow : BaseWindow {
}
public class DlibDotNet.DRectangle : ValueType {
    private double _Bottom;
    private double _Left;
    private double _Right;
    private double _Top;
    public double Area { get; }
    public double Bottom { get; public set; }
    public DPoint BottomLeft { get; }
    public DPoint BottomRight { get; }
    public DPoint Center { get; }
    public DPoint DCenter { get; }
    public double Height { get; }
    public bool IsEmpty { get; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Top { get; public set; }
    public DPoint TopLeft { get; }
    public DPoint TopRight { get; }
    public double Width { get; }
    public DRectangle(Rectangle rect);
    public DRectangle(double left, double top, double right, double bottom);
    public DRectangle(DPoint point);
    public DRectangle(DPoint p1, DPoint p2);
    public DRectangle(DRectangle drect);
    internal DRectangle(IntPtr ptr);
    public double get_Area();
    public double get_Bottom();
    public void set_Bottom(double value);
    public DPoint get_BottomLeft();
    public DPoint get_BottomRight();
    public DPoint get_Center();
    public DPoint get_DCenter();
    public double get_Height();
    public bool get_IsEmpty();
    public double get_Left();
    public void set_Left(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Top();
    public void set_Top(double value);
    public DPoint get_TopLeft();
    public DPoint get_TopRight();
    public double get_Width();
    public static DRectangle CenteredRect(double x, double y, double width, double height);
    public static DRectangle CenteredRect(DPoint p, double width, double height);
    public static DRectangle CenteredRect(DRectangle drect, double width, double height);
    public bool Contains(DPoint point);
    public bool Contains(DRectangle drect);
    public sealed virtual bool Equals(DRectangle other);
    public static DRectangle SetAspectRatio(DRectangle rect, double ratio);
    public DRectangle Intersect(DRectangle drect);
    public DRectangle Translate(Point point);
    public static DRectangle Translate(DRectangle drect, Point point);
    public DRectangle Translate(DPoint point);
    public static DRectangle Translate(DRectangle drect, DPoint point);
    internal NativeDRectangle ToNative();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Rectangle op_Explicit(DRectangle drect);
    public static DRectangle op_Addition(DRectangle drect, DRectangle rhs);
    public static DRectangle op_Multiply(DRectangle drect, double rhs);
    public static DRectangle op_Division(DRectangle drect, double rhs);
    public static bool op_Equality(DRectangle rect, DRectangle rhs);
    public static bool op_Inequality(DRectangle rect, DRectangle rhs);
}
public class DlibDotNet.EnumerableDisposer`1 : object {
    private bool _DisposeElement;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Collection>k__BackingField;
    public bool IsDisposed { get; private set; }
    public IEnumerable`1<T> Collection { get; }
    public EnumerableDisposer`1(IEnumerable`1<T> collection, bool disposeElement);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Collection();
    private static void RecursiveDispose(IEnumerable elements, bool disposeElement);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class DlibDotNet.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
internal static void ThrowIfDisposed(IEnumerable`1<T> items);
    [ExtensionAttribute]
internal static void ThrowIfDisposed(IEnumerable`1<IEnumerable`1<T>> items);
    [ExtensionAttribute]
internal static void ThrowIfDisposed(IEnumerable`1<IList`1<T>> items);
    [ExtensionAttribute]
public static void DisposeElement(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static void DisposeElement(IEnumerable`1<IEnumerable`1<T>> items);
}
[ExtensionAttribute]
internal static class DlibDotNet.Extensions.EnumExtensions : object {
    [ExtensionAttribute]
internal static Array2DType ToNativeArray2DType(ImageTypes imageType);
    [ExtensionAttribute]
internal static MatrixElementType ToNativeMatrixElementType(MatrixElementTypes matrixElementTypes);
    [ExtensionAttribute]
internal static VectorElementType ToNativeVectorElementType(VectorElementTypes types);
    [ExtensionAttribute]
internal static ImageTypes ToImageTypes(MatrixElementTypes matrixElementTypes);
    [ExtensionAttribute]
internal static InterpolationTypes ToNativeInterpolationTypes(InterpolationTypes interpolationTypes);
    [ExtensionAttribute]
internal static PointMappingTypes GetNativePointMappingTypes(PointTransformBase pointTransform);
    [ExtensionAttribute]
internal static MlpKernelType ToNativeMlpKernelType(MultilayerPerceptronKernelType type);
    [ExtensionAttribute]
internal static RunningStatsType ToRunningStatsType(RunningStatsType type);
    [ExtensionAttribute]
internal static ImagePixelType ToImagePixelType(ImagePixelFormat type);
    [ExtensionAttribute]
internal static SvmKernelType ToNativeKernelType(SvmKernelType kernelType);
    [ExtensionAttribute]
internal static NormalizerType ToNativeNormalizerType(NormalizerType normalizerType);
}
[ExtensionAttribute]
public static class DlibDotNet.Extensions.ProxyDeserializeExtensions : object {
    [ExtensionAttribute]
public static void Deserialize(IDictionary`2<string, LossMulticlassLogPerPixel> maps, ProxyDeserialize deserialize, int networkType);
}
[ExtensionAttribute]
public static class DlibDotNet.Extensions.ProxySerializeExtensions : object {
    [ExtensionAttribute]
public static void Serialize(IDictionary`2<string, LossMulticlassLogPerPixel> maps, ProxySerialize serialize, int networkType);
}
public class DlibDotNet.FrontalFaceDetector : DlibObject {
    internal FrontalFaceDetector(IntPtr ptr);
    public Rectangle[] Operator(Array2DBase image, double threshold);
    public Rectangle[] Operator(MatrixBase image, double threshold);
    public void Operator(MatrixBase image, IEnumerable`1& detections, double threshold);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.FullDetection : DlibObject {
    public double DetectionConfidence { get; public set; }
    public FullObjectDetection Rect { get; public set; }
    public ulong WeightIndex { get; public set; }
    internal FullDetection(IntPtr ptr);
    public double get_DetectionConfidence();
    public void set_DetectionConfidence(double value);
    public FullObjectDetection get_Rect();
    public void set_Rect(FullObjectDetection value);
    public ulong get_WeightIndex();
    public void set_WeightIndex(ulong value);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.FullObjectDetection : DlibObject {
    private UInt32 _Parts;
    public UInt32 Parts { get; }
    public Rectangle Rect { get; }
    public FullObjectDetection(Rectangle rectangle);
    public FullObjectDetection(Rectangle rectangle, IEnumerable`1<Point> points);
    internal FullObjectDetection(IntPtr ptr);
    public UInt32 get_Parts();
    public Rectangle get_Rect();
    public Point GetPart(UInt32 index);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.FunctionBase : DlibObject {
    protected FunctionBase(bool isEnabledDispose);
}
internal static class DlibDotNet.FunctionTypesRepository : object {
    public static Dictionary`2<Type, SvmFunctionType> Types;
    private static FunctionTypesRepository();
}
public class DlibDotNet.HistogramIntersectionKernel`2 : KernelBase {
    private MatrixElementType _ElementType;
    public HistogramIntersectionKernel`2(int templateRow, int templateColumn);
    internal HistogramIntersectionKernel`2(IntPtr ptr, int templateRow, int templateColumn, bool isEnabledDispose);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.HoughTransform : DlibObject {
    public int Columns { get; }
    public int Rows { get; }
    public UInt32 Size { get; }
    public HoughTransform(UInt32 size);
    public int get_Columns();
    public int get_Rows();
    public UInt32 get_Size();
    public Point GetBestHoughPoint(Array2DBase image, Point point);
    public Tuple`2<Point, Point> GetLine(Point point);
    public void Operator(Array2DBase inImage, Rectangle rect, Array2DBase outImage);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.HsiPixel : ValueType {
    public byte H;
    public byte S;
    public byte I;
    public HsiPixel(byte hue, byte saturation, byte intensity);
    public sealed virtual bool Equals(HsiPixel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HsiPixel left, HsiPixel right);
    public static bool op_Inequality(HsiPixel left, HsiPixel right);
}
public interface DlibDotNet.IContainerBridge {
}
public interface DlibDotNet.IDlibObject {
    public IntPtr NativePtr { get; }
    public abstract virtual IntPtr get_NativePtr();
    public abstract virtual void ThrowIfDisposed();
}
public class DlibDotNet.ImageDatasetMetadata.Box : DlibObject {
    public double Age { get; public set; }
    public double Angle { get; public set; }
    public double DetectionScore { get; public set; }
    public bool Difficult { get; public set; }
    public Gender Gender { get; public set; }
    public bool HasLabel { get; }
    public bool Ignore { get; public set; }
    public string Label { get; public set; }
    public bool Occluded { get; public set; }
    public PartCollection Parts { get; public set; }
    public double Pose { get; public set; }
    public Rectangle Rect { get; public set; }
    public bool Truncated { get; public set; }
    internal Box(IntPtr ptr, bool isDisposable);
    public double get_Age();
    public void set_Age(double value);
    public double get_Angle();
    public void set_Angle(double value);
    public double get_DetectionScore();
    public void set_DetectionScore(double value);
    public bool get_Difficult();
    public void set_Difficult(bool value);
    public Gender get_Gender();
    public void set_Gender(Gender value);
    public bool get_HasLabel();
    public bool get_Ignore();
    public void set_Ignore(bool value);
    public string get_Label();
    public void set_Label(string value);
    public bool get_Occluded();
    public void set_Occluded(bool value);
    public PartCollection get_Parts();
    public void set_Parts(PartCollection value);
    public double get_Pose();
    public void set_Pose(double value);
    public Rectangle get_Rect();
    public void set_Rect(Rectangle value);
    public bool get_Truncated();
    public void set_Truncated(bool value);
    protected virtual void DisposeUnmanaged();
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.ImageDatasetMetadata.BoxCollection : object {
    private Image _Parent;
    public Box Item { get; }
    public int Count { get; }
    internal BoxCollection(Image parent);
    public Box get_Item(int index);
    public int get_Count();
    public void Add(Box box);
    public void Clear();
    [IteratorStateMachineAttribute("DlibDotNet.ImageDatasetMetadata.BoxCollection/<GetEnumerator>d__8")]
public sealed virtual IEnumerator`1<Box> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DlibDotNet.ImageDatasetMetadata.Dataset : DlibObject {
    public string Comment { get; public set; }
    public ImageCollection Images { get; }
    public string Name { get; public set; }
    public string get_Comment();
    public void set_Comment(string value);
    public ImageCollection get_Images();
    public string get_Name();
    public void set_Name(string value);
    protected virtual void DisposeUnmanaged();
}
public enum DlibDotNet.ImageDatasetMetadata.Gender : Enum {
    public int value__;
    public static Gender Unknown;
    public static Gender Male;
    public static Gender Female;
}
public class DlibDotNet.ImageDatasetMetadata.Image : DlibObject {
    public BoxCollection Boxes { get; }
    public string FileName { get; public set; }
    public Image(string filename);
    internal Image(IntPtr ptr, bool isDisposable);
    public BoxCollection get_Boxes();
    public string get_FileName();
    public void set_FileName(string value);
    protected virtual void DisposeUnmanaged();
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.ImageDatasetMetadata.ImageCollection : object {
    private Dataset _Parent;
    public Image Item { get; }
    public int Count { get; }
    internal ImageCollection(Dataset parent);
    public Image get_Item(int index);
    public int get_Count();
    public void Add(Image image);
    public void Clear();
    public void RemoveAt(int index);
    [IteratorStateMachineAttribute("DlibDotNet.ImageDatasetMetadata.ImageCollection/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<Image> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.ImageDatasetMetadata.PartCollection : object {
    private PartCollectionBridge _Bridge;
    public int Count { get; }
    public Point Item { get; public set; }
    internal PartCollection(PartCollectionBridge bridge);
    public int get_Count();
    public Point get_Item(string key);
    public void set_Item(string key, Point value);
    public void Clear();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, Point>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DlibDotNet.ImageDisplay : ScrollableRegion {
    public ImageDisplay(DrawableWindow window);
    public void AddLabelablePartName(string name);
    public void AddOverlay(IEnumerable`1<OverlayRect> rects);
    public void ClearOverlay();
    public string GetDefaultOverlayRectLabel();
    public IEnumerable`1<OverlayRect> GetOverlayRects();
    public void SetImage(Array2D`1<T> image);
    public void SetImageClickedHandler(ClickActionMediator mediator);
    public void SetOverlayRectsChangedHandler(VoidActionMediator mediator);
    public void SetOverlayRectSelectedHandler(ImageDisplayOverlayRectActionMediator mediator);
    public void SetDefaultOverlayRectColor(RgbAlphaPixel color);
    public void SetDefaultOverlayRectLabel(string label);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ImageDisplayOverlayRectActionMediator : DlibObject {
    private IntPtr _Handle;
    private Action`1<OverlayRect> _Callback;
    public ImageDisplayOverlayRectActionMediator(Action`1<OverlayRect> callback);
    protected virtual void DisposeUnmanaged();
    private void NativeCallback(IntPtr rect);
}
public class DlibDotNet.ImageLoadException : Exception {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public string FilePath { get; }
    internal ImageLoadException(string filepath, string message);
    [CompilerGeneratedAttribute]
public string get_FilePath();
}
public enum DlibDotNet.ImagePixelFormat : Enum {
    public int value__;
    public static ImagePixelFormat Bgr;
    public static ImagePixelFormat Bgra;
    public static ImagePixelFormat Rgb;
    public static ImagePixelFormat Rgba;
}
public abstract class DlibDotNet.ImageScanner : DlibObject {
    public ImageScannerType ScannerType { get; }
    public abstract virtual ImageScannerType get_ScannerType();
    internal virtual FHogPyramidParameter GetFHogPyramidParameter();
}
public enum DlibDotNet.ImageScannerType : Enum {
    public int value__;
    public static ImageScannerType FHogPyramid;
}
public class DlibDotNet.ImageTransforms.RandomCropper : DlibObject {
    public double BackgroundCropsFraction { get; public set; }
    public ChipDims ChipDims { get; public set; }
    public double MaxObjectSize { get; public set; }
    public double MaxRotationDegrees { get; public set; }
    public int MinObjectLengthLongDim { get; public set; }
    public int MinObjectLengthShortDim { get; public set; }
    public bool RandomlyFlip { get; public set; }
    public double TranslateAmount { get; public set; }
    public double get_BackgroundCropsFraction();
    public void set_BackgroundCropsFraction(double value);
    public ChipDims get_ChipDims();
    public void set_ChipDims(ChipDims value);
    public double get_MaxObjectSize();
    public void set_MaxObjectSize(double value);
    public double get_MaxRotationDegrees();
    public void set_MaxRotationDegrees(double value);
    public int get_MinObjectLengthLongDim();
    public void set_MinObjectLengthLongDim(int value);
    public int get_MinObjectLengthShortDim();
    public void set_MinObjectLengthShortDim(int value);
    public bool get_RandomlyFlip();
    public void set_RandomlyFlip(bool value);
    public double get_TranslateAmount();
    public void set_TranslateAmount(double value);
    public void Operator(UInt32 numCrops, IEnumerable`1<Matrix`1<T>> images, IEnumerable`1<IEnumerable`1<MModRect>> rects, IEnumerable`1& crops, IEnumerable`1& cropRects);
    public void Operator(Matrix`1<T> image, IEnumerable`1<MModRect> rects, Matrix`1& crop, IEnumerable`1& cropRects);
    public void SetChipDims(UInt32 rows, UInt32 cols);
    public void SetMinObjectSize(int longDim, int shortDim);
    public void SetSeed(long seed);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
}
public enum DlibDotNet.ImageTypes : Enum {
    public int value__;
    public static ImageTypes UInt8;
    public static ImageTypes UInt16;
    public static ImageTypes UInt32;
    public static ImageTypes Int8;
    public static ImageTypes Int16;
    public static ImageTypes Int32;
    public static ImageTypes Float;
    public static ImageTypes Double;
    public static ImageTypes RgbPixel;
    public static ImageTypes BgrPixel;
    public static ImageTypes HsiPixel;
    public static ImageTypes RgbAlphaPixel;
    public static ImageTypes Matrix;
}
public class DlibDotNet.ImageWindow : BaseWindow {
    public ImageWindow(Array2DBase image);
    public ImageWindow(Array2DBase image, string title);
    public ImageWindow(MatrixBase matrix);
    public ImageWindow(MatrixBase matrix, string title);
    public ImageWindow(MatrixOp matrix);
    public ImageWindow(MatrixOp matrix, string title);
    public void AddOverlay(Rectangle rect);
    public void AddOverlay(Rectangle rect, byte color);
    public void AddOverlay(Rectangle rect, ushort color);
    public void AddOverlay(Rectangle rect, UInt32 color);
    public void AddOverlay(Rectangle rect, sbyte color);
    public void AddOverlay(Rectangle rect, short color);
    public void AddOverlay(Rectangle rect, int color);
    public void AddOverlay(Rectangle rect, float color);
    public void AddOverlay(Rectangle rect, double color);
    public void AddOverlay(Rectangle rect, RgbPixel color);
    public void AddOverlay(Rectangle rect, RgbAlphaPixel color);
    public void AddOverlay(Rectangle rect, HsiPixel color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, byte color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, ushort color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, UInt32 color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, sbyte color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, short color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, int color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, float color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, double color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, RgbPixel color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, RgbAlphaPixel color);
    public void AddOverlay(IEnumerable`1<Rectangle> rects, HsiPixel color);
    public void AddOverlay(DRectangle rect);
    public void AddOverlay(DRectangle rect, byte color);
    public void AddOverlay(DRectangle rect, ushort color);
    public void AddOverlay(DRectangle rect, UInt32 color);
    public void AddOverlay(DRectangle rect, sbyte color);
    public void AddOverlay(DRectangle rect, short color);
    public void AddOverlay(DRectangle rect, int color);
    public void AddOverlay(DRectangle rect, float color);
    public void AddOverlay(DRectangle rect, double color);
    public void AddOverlay(DRectangle rect, RgbPixel color);
    public void AddOverlay(DRectangle rect, RgbAlphaPixel color);
    public void AddOverlay(DRectangle rect, HsiPixel color);
    public void AddOverlay(Rectangle rect, string str);
    public void AddOverlay(Rectangle rect, sbyte color, string str);
    public void AddOverlay(Rectangle rect, short color, string str);
    public void AddOverlay(Rectangle rect, int color, string str);
    public void AddOverlay(Rectangle rect, byte color, string str);
    public void AddOverlay(Rectangle rect, ushort color, string str);
    public void AddOverlay(Rectangle rect, UInt32 color, string str);
    public void AddOverlay(Rectangle rect, float color, string str);
    public void AddOverlay(Rectangle rect, double color, string str);
    public void AddOverlay(Rectangle rect, RgbPixel color, string str);
    public void AddOverlay(Rectangle rect, RgbAlphaPixel color, string str);
    public void AddOverlay(Rectangle rect, HsiPixel color, string str);
    public void AddOverlay(OverlayLine line);
    public void AddOverlay(IEnumerable`1<OverlayLine> lines);
    public void ClearOverlay();
    public bool GetNextDoubleClick(Point& p);
    public bool GetNextDoubleClick(Point& p, UInt32& mouseButton);
    public bool IsClosed();
    public void SetImage(Array2DBase image);
    public void SetImage(MatrixBase matrix);
    public void SetImage(MatrixOp matrix);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.InterestPoint : DlibObject {
    public Vector`1<double> Center { get; }
    public double Laplacian { get; }
    public double Scale { get; }
    public double Score { get; }
    internal InterestPoint(IntPtr ptr);
    internal InterestPoint(IntPtr ptr, bool isEnabledDispose);
    public Vector`1<double> get_Center();
    public double get_Laplacian();
    public double get_Scale();
    public double get_Score();
    protected virtual void DisposeUnmanaged();
}
internal static class DlibDotNet.Interop.InteropHelper : object {
    public static void Copy(IntPtr ptrSource, UInt32[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, UInt32[] dest, int startIndex, UInt32 elements);
    public static void Copy(IntPtr ptrSource, UInt16[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, UInt16[] dest, int startIndex, UInt32 elements);
    public static void Copy(IntPtr ptrSource, SByte[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, SByte[] dest, int startIndex, UInt32 elements);
    public static void Copy(IntPtr ptrSource, UInt64[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, UInt64[] dest, int startIndex, UInt32 elements);
    public static void Copy(IntPtr ptrSource, RgbPixel[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, RgbPixel[] dest, int startIndex, UInt32 elements);
    public static void Copy(IntPtr ptrSource, BgrPixel[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, BgrPixel[] dest, int startIndex, UInt32 elements);
    public static void Copy(IntPtr ptrSource, RgbAlphaPixel[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, RgbAlphaPixel[] dest, int startIndex, UInt32 elements);
    public static void Copy(IntPtr ptrSource, HsiPixel[] dest, UInt32 elements);
    public static void Copy(IntPtr ptrSource, HsiPixel[] dest, int startIndex, UInt32 elements);
    public static void Copy(UInt32[] source, IntPtr ptrDest, UInt32 elements);
    public static void Copy(UInt16[] source, IntPtr ptrDest, UInt32 elements);
    public static void Copy(SByte[] source, IntPtr ptrDest, UInt32 elements);
    public static void Copy(UInt64[] source, IntPtr ptrDest, UInt32 elements);
    public static void Copy(RgbPixel[] source, IntPtr ptrDest, UInt32 elements);
    public static void Copy(RgbAlphaPixel[] source, IntPtr ptrDest, UInt32 elements);
    public static void Copy(HsiPixel[] source, IntPtr ptrDest, UInt32 elements);
}
public enum DlibDotNet.InterpolationTypes : Enum {
    public int value__;
    public static InterpolationTypes NearestNeighbor;
    public static InterpolationTypes Bilinear;
    public static InterpolationTypes Quadratic;
}
public interface DlibDotNet.IParameter {
}
public class DlibDotNet.KCentroid`2 : DlibObject {
    private KernelBaseParameter _Parameter;
    private Bridge`1<TScalar, TKernel, TScalar> _Bridge;
    public UInt32 DictionarySize { get; }
    internal KernelBaseParameter Parameter { get; }
    public TKernel Kernel { get; }
    public KCentroid`2(TKernel kernelBase, double tolerance, UInt32 maxDictionarySize, bool removeOldestFirst);
    internal KCentroid`2(IntPtr ptr, KernelBaseParameter parameter, bool isEnabledDispose);
    public UInt32 get_DictionarySize();
    internal KernelBaseParameter get_Parameter();
    public TKernel get_Kernel();
    public TScalar Operator(Matrix`1<TScalar> sample);
    public void Train(Matrix`1<TScalar> sample);
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<TScalar, TKernel, TScalar> CreateBridge(KernelBaseParameter parameter);
}
public class DlibDotNet.Kernel1 : MultilayerPerceptronKernelBase {
}
public abstract class DlibDotNet.KernelBase : DlibObject {
    [CompilerGeneratedAttribute]
private SvmKernelType <KernelType>k__BackingField;
    [CompilerGeneratedAttribute]
private MatrixElementTypes <SampleType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateRows>k__BackingField;
    public SvmKernelType KernelType { get; }
    public MatrixElementTypes SampleType { get; protected set; }
    internal int TemplateColumns { get; }
    internal int TemplateRows { get; }
    protected KernelBase(SvmKernelType kernelType, int templateRow, int templateColumn, bool isEnabledDispose);
    [CompilerGeneratedAttribute]
public SvmKernelType get_KernelType();
    [CompilerGeneratedAttribute]
public MatrixElementTypes get_SampleType();
    [CompilerGeneratedAttribute]
protected void set_SampleType(MatrixElementTypes value);
    [CompilerGeneratedAttribute]
internal int get_TemplateColumns();
    [CompilerGeneratedAttribute]
internal int get_TemplateRows();
}
internal class DlibDotNet.KernelBaseParameter : object {
    [CompilerGeneratedAttribute]
private SvmKernelType <KernelType>k__BackingField;
    [CompilerGeneratedAttribute]
private MatrixElementTypes <SampleType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateRows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateColumns>k__BackingField;
    public SvmKernelType KernelType { get; }
    public MatrixElementTypes SampleType { get; }
    public int TemplateRows { get; }
    public int TemplateColumns { get; }
    public KernelBaseParameter(KernelBase kernelBase);
    public KernelBaseParameter(SvmKernelType kernelType, MatrixElementTypes sampleType, int templateRows, int templateColumns);
    [CompilerGeneratedAttribute]
public SvmKernelType get_KernelType();
    [CompilerGeneratedAttribute]
public MatrixElementTypes get_SampleType();
    [CompilerGeneratedAttribute]
public int get_TemplateRows();
    [CompilerGeneratedAttribute]
public int get_TemplateColumns();
}
internal static class DlibDotNet.KernelFactory : object {
    private static Dictionary`2<Type, SvmKernelType> SupportKernelTypes;
    private static Dictionary`2<Type, MatrixElementTypes> SupportMatrixElementTypes;
    private static KernelFactory();
    public static TKernel Create(IntPtr ptr, SvmKernelType kernelType, int templateRow, int templateColumn, bool isEnabledDispose);
    public static bool TryParse(MatrixElementTypes& result);
    public static bool TryParse(Type type, MatrixElementTypes& result);
    public static bool TryParse(SvmKernelType& result);
    public static bool TryParse(Type type, SvmKernelType& result);
}
internal static class DlibDotNet.KernelTypesRepository : object {
    public static Dictionary`2<Type, MatrixElementTypes> ElementTypes;
    public static Dictionary`2<Type, SvmKernelType> KernelTypes;
    private static KernelTypesRepository();
}
public enum DlibDotNet.KeyboardStateMasks : Enum {
    public UInt32 value__;
    public static KeyboardStateMasks KBD_MOD_NONE;
    public static KeyboardStateMasks KBD_MOD_SHIFT;
    public static KeyboardStateMasks KBD_MOD_CONTROL;
    public static KeyboardStateMasks KBD_MOD_ALT;
    public static KeyboardStateMasks KBD_MOD_META;
    public static KeyboardStateMasks KBD_MOD_CAPS_LOCK;
    public static KeyboardStateMasks KBD_MOD_NUM_LOCK;
    public static KeyboardStateMasks KBD_MOD_SCROLL_LOCK;
}
public class DlibDotNet.KKMeans`2 : DlibObject {
    private KCentroid`2<TScalar, TKernel> _KCentroid;
    public UInt32 NumberOfCenters { get; public set; }
    public TKernel Kernel { get; }
    public KKMeans`2(KCentroid`2<TScalar, TKernel> kcentroid);
    public UInt32 get_NumberOfCenters();
    public void set_NumberOfCenters(UInt32 value);
    public TKernel get_Kernel();
    public KCentroid`2<TScalar, TKernel> GetKCentroid(int index);
    public UInt32 Operator(Matrix`1<TScalar> sample);
    public void SetKCentroid(KCentroid`2<TScalar, TKernel> kcentroid);
    public void Train(IEnumerable`1<Matrix`1<TScalar>> samples, IEnumerable`1<Matrix`1<TScalar>> initialCenters, int maxIterator);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.Krls`2 : DlibObject {
    private KernelBaseParameter _Parameter;
    private Bridge`1<TScalar, TKernel, TScalar> _Bridge;
    public UInt32 DictionarySize { get; }
    internal KernelBaseParameter Parameter { get; }
    public TKernel Kernel { get; }
    public Krls`2(TKernel kernelBase, double tolerance, UInt32 maxDictionarySize);
    internal Krls`2(IntPtr ptr, KernelBaseParameter parameter, bool isEnabledDispose);
    public UInt32 get_DictionarySize();
    internal KernelBaseParameter get_Parameter();
    public TKernel get_Kernel();
    public static void Deserialize(string path, Krls`2& krls);
    public DecisionFunction`2<TScalar, TKernel> GetDecisionFunction();
    public TScalar Operator(Matrix`1<TScalar> sample);
    public static void Serialize(Krls`2<TScalar, TKernel> krls, string path);
    public void Train(Matrix`1<TScalar> x, TScalar y);
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<TScalar, TKernel, TScalar> CreateBridge(KernelBaseParameter parameter);
}
public class DlibDotNet.Label : Drawable {
    public Label(DrawableWindow window);
    public void SetText(string name);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.LabPixel : ValueType {
    public byte L;
    public byte A;
    public byte B;
}
public class DlibDotNet.LinearKernel`2 : KernelBase {
    private MatrixElementType _ElementType;
    public LinearKernel`2(int templateRow, int templateColumn);
    internal LinearKernel`2(IntPtr ptr, int templateRow, int templateColumn, bool isEnabledDispose);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ListBox : ScrollableRegion {
    public bool MultipleSelectEnabled { get; public set; }
    public ulong Size { get; }
    public ListBox(DrawableWindow window);
    public bool get_MultipleSelectEnabled();
    public void set_MultipleSelectEnabled(bool value);
    public ulong get_Size();
    public Kernel1A<UInt32> GetSelected();
    public void Load(IEnumerable`1<string> list);
    public void Select(UInt32 index);
    public void SetClickHandler(SelectIndexedActionMediator mediator);
    public void Unselect(UInt32 index);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.Logger : DlibObject {
    public Logger(string name);
    public void SetLevel(LogLevel level);
    public void WriteLine(LogLevel level, string message);
    protected virtual void DisposeUnmanaged();
}
public enum DlibDotNet.LogLevel : Enum {
    public int value__;
    public static LogLevel All;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Fatal;
    public static LogLevel None;
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.Matrix`1 : MatrixBase {
    private MatrixElementTypes _MatrixElementTypes;
    private MatrixElementType _ElementType;
    private Indexer`1<TElement, TElement> _Indexer;
    public int Columns { get; }
    public MatrixElementTypes MatrixElementType { get; }
    public int Rows { get; }
    public int Size { get; }
    public TElement Item { get; public set; }
    public TElement Item { get; public set; }
    private static Matrix`1();
    public Matrix`1(Array2D`1<TElement> array);
    public Matrix`1(MatrixTemplateSizeParameter parameter);
    public Matrix`1(MatrixTemplateSizeParameter parameter, TElement[] array);
    public Matrix`1(int row, int column);
    public Matrix`1(TElement[] array, int row, int column);
    public Matrix`1(IntPtr array, int row, int column, int stride);
    public Matrix`1(Byte[] array, int row, int column, int elementSize);
    internal Matrix`1(IntPtr ptr, int templateRows, int templateColumns, bool isEnabledDispose);
    public virtual int get_Columns();
    public virtual MatrixElementTypes get_MatrixElementType();
    public virtual int get_Rows();
    public int get_Size();
    public TElement get_Item(int index);
    public void set_Item(int index, TElement value);
    public TElement get_Item(int row, int column);
    public void set_Item(int row, int column, TElement value);
    public void Assign(TElement[] array);
    public Matrix`1<TElement> Clone();
    [ObsoleteAttribute("Use Matrix<TElement>(MatrixTemplateSizeParameter) constructor instead of this method")]
public static Matrix`1<TElement> CreateTemplateParameterizeMatrix(UInt32 templateRows, UInt32 templateColumns);
    public static Matrix`1<TElement> Deserialize(ProxyDeserialize deserialize, UInt32 templateRows, UInt32 templateColumns);
    public void SetSize(int length);
    public void SetSize(int rows, int cols);
    public TElement[] ToArray();
    internal static bool TryParse(MatrixElementTypes& result);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
    private Indexer`1<TElement, TElement> CreateIndexer(MatrixElementTypes types);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static Matrix`1<TElement> op_Addition(Matrix`1<TElement> lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_UnaryNegation(Matrix`1<TElement> matrix);
    public Matrix`1<TElement> Inverse();
    public static Matrix`1<TElement> op_Subtraction(Matrix`1<TElement> lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Subtraction(Matrix`1<TElement> lhs, DPoint rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, DPoint rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, byte rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, ushort rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, UInt32 rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, ulong rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, sbyte rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, short rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, int rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, long rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, float rhs);
    public static Matrix`1<TElement> op_Multiply(Matrix`1<TElement> lhs, double rhs);
    public static Matrix`1<TElement> op_Multiply(byte lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(ushort lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(UInt32 lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(ulong lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(sbyte lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(short lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(int lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(long lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(float lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Multiply(double lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Division(Matrix`1<TElement> lhs, Matrix`1<TElement> rhs);
    public static Matrix`1<TElement> op_Division(Matrix`1<TElement> lhs, double rhs);
}
public abstract class DlibDotNet.MatrixBase : TwoDimensionObjectBase {
    private static Dictionary`2<Type, MatrixElementTypes> SupportTypes;
    internal static IDictionary`2<MatrixElementType, int> ElementSizeDictionary;
    [CompilerGeneratedAttribute]
private int <TemplateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateRows>k__BackingField;
    public MatrixElementTypes MatrixElementType { get; }
    internal int TemplateColumns { get; }
    internal int TemplateRows { get; }
    private static MatrixBase();
    protected MatrixBase(int templateRows, int templateColumns, bool isEnabledDispose);
    public abstract virtual MatrixElementTypes get_MatrixElementType();
    [CompilerGeneratedAttribute]
internal int get_TemplateColumns();
    [CompilerGeneratedAttribute]
internal int get_TemplateRows();
    internal static bool TryParse(Type type, MatrixElementTypes& result);
}
public enum DlibDotNet.MatrixElementTypes : Enum {
    public int value__;
    public static MatrixElementTypes UInt8;
    public static MatrixElementTypes UInt16;
    public static MatrixElementTypes UInt32;
    public static MatrixElementTypes UInt64;
    public static MatrixElementTypes Int8;
    public static MatrixElementTypes Int16;
    public static MatrixElementTypes Int32;
    public static MatrixElementTypes Int64;
    public static MatrixElementTypes Float;
    public static MatrixElementTypes Double;
    public static MatrixElementTypes RgbPixel;
    public static MatrixElementTypes BgrPixel;
    public static MatrixElementTypes RgbAlphaPixel;
    public static MatrixElementTypes HsiPixel;
}
public class DlibDotNet.MatrixOp : TwoDimensionObjectBase {
    private ImageTypes _ImageType;
    private Array2DType _Array2DType;
    private ElementType _ElementType;
    private MatrixElementType _MatrixElementType;
    private IntPtr _Ref;
    [CompilerGeneratedAttribute]
private int <TemplateColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateRows>k__BackingField;
    internal Array2DType Array2DType { get; }
    public int Columns { get; }
    internal ElementType ElementType { get; }
    internal MatrixElementType MatrixElementType { get; }
    public int Rows { get; }
    internal int TemplateColumns { get; }
    internal int TemplateRows { get; }
    internal MatrixOp(ElementType elementType, ImageTypes type, IntPtr ptr);
    internal MatrixOp(ElementType elementType, ImageTypes type, IntPtr ptr, IntPtr ref);
    internal MatrixOp(ElementType elementType, MatrixElementTypes type, IntPtr ptr, int templateRows, int templateColumns);
    internal Array2DType get_Array2DType();
    public virtual int get_Columns();
    internal ElementType get_ElementType();
    internal MatrixElementType get_MatrixElementType();
    public virtual int get_Rows();
    [CompilerGeneratedAttribute]
internal int get_TemplateColumns();
    [CompilerGeneratedAttribute]
internal int get_TemplateRows();
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
}
[ObsoleteAttribute]
public class DlibDotNet.MatrixRangeExp`1 : MatrixBase {
    private MatrixElementTypes _MatrixElementType;
    private MatrixElementType _NativeMatrixElementType;
    private Bridge`1<T, T> _Bridge;
    public int Columns { get; }
    public MatrixElementTypes MatrixElementType { get; }
    public int Rows { get; }
    public MatrixRangeExp`1(T start, T end);
    public MatrixRangeExp`1(T start, T inc, T end);
    public MatrixRangeExp`1(T start, T end, int num);
    internal MatrixRangeExp`1(IntPtr ptr);
    public virtual int get_Columns();
    public virtual MatrixElementTypes get_MatrixElementType();
    public virtual int get_Rows();
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<T, T> CreateBridge(MatrixElementTypes types);
}
public class DlibDotNet.MatrixTemplateSizeParameter : object {
    [CompilerGeneratedAttribute]
private int <TemplateRows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateColumns>k__BackingField;
    public int TemplateRows { get; }
    public int TemplateColumns { get; }
    public MatrixTemplateSizeParameter(int templateRows, int templateColumns);
    [CompilerGeneratedAttribute]
public int get_TemplateRows();
    [CompilerGeneratedAttribute]
public int get_TemplateColumns();
}
public class DlibDotNet.MenuBar : Drawable {
    public MenuBar(DrawableWindow window);
    public PopupMenu Menu(UInt32 index);
    public void SetNumberOfMenus(UInt32 num);
    public void SetMenuName(UInt32 index, string name, char underline);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.MenuItem : DlibObject {
}
public class DlibDotNet.MenuItemSeparator : MenuItem {
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.MenuItemText : MenuItem {
    public MenuItemText(string str, VoidActionMediator mediator, char hk);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.MModRect : DlibObject {
    public double DetectionConfidence { get; public set; }
    public bool Ignore { get; public set; }
    public string Label { get; public set; }
    public Rectangle Rect { get; public set; }
    public MModRect(Rectangle rectangle);
    internal MModRect(IntPtr ptr, bool isEnabledDispose);
    public double get_DetectionConfidence();
    public void set_DetectionConfidence(double value);
    public bool get_Ignore();
    public void set_Ignore(bool value);
    public string get_Label();
    public void set_Label(string value);
    public Rectangle get_Rect();
    public void set_Rect(Rectangle value);
    protected virtual void DisposeUnmanaged();
    public static Rectangle op_Implicit(MModRect val);
}
public enum DlibDotNet.MouseStateMasks : Enum {
    public UInt32 value__;
    public static MouseStateMasks NONE;
    public static MouseStateMasks LEFT;
    public static MouseStateMasks RIGHT;
    public static MouseStateMasks MIDDLE;
    public static MouseStateMasks SHIFT;
    public static MouseStateMasks CONTROL;
}
public class DlibDotNet.MultilayerPerceptron`1 : DlibObject {
    private MultilayerPerceptronKernelType _MultilayerPerceptronKernelType;
    private static Dictionary`2<Type, MultilayerPerceptronKernelType> SupportTypes;
    private static MultilayerPerceptron`1();
    public MultilayerPerceptron`1(int nodesInInputLayer, int nodesInFirstHiddenLayer, int nodesInSecondHiddenLayer, int nodesInOutputLayer, double alpha, double momentum);
    public Matrix`1<double> Operator(MatrixBase data);
    public void Train(Matrix`1<double> exampleIn, Matrix`1<double> exampleOut);
    public void Train(Matrix`1<double> exampleIn, double exampleOut);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.MultilayerPerceptronKernelBase : DlibObject {
}
public enum DlibDotNet.MultilayerPerceptronKernelType : Enum {
    public int value__;
    public static MultilayerPerceptronKernelType Kernel1;
}
public class DlibDotNet.MultithreadedObject : DlibObject {
    public void Pause();
    public virtual void RegisterThread(VoidActionMediator mediator);
    public void Start();
    public void Stop();
    public void Wait();
    protected virtual void DisposeUnmanaged();
}
internal class DlibDotNet.NativeMethods : object {
    public static string NativeLibrary;
    public static string NativeDnnLibrary;
    public static CallingConvention CallingConvention;
    private static WindowsLibraryLoader WindowsLibraryLoader;
    private static NativeMethods();
    public static IntPtr array2d_new(Array2DType type);
    public static IntPtr array2d_new1(Array2DType type, int rows, int cols);
    public static void array2d_delete(Array2DType type, IntPtr array);
    public static bool array2d_nc(Array2DType type, IntPtr array, Int32& ret);
    public static bool array2d_nr(Array2DType type, IntPtr array, Int32& ret);
    public static bool array2d_size(Array2DType type, IntPtr array, Int32& ret);
    public static IntPtr array2d_data_raw(Array2DType type, IntPtr array);
    public static bool array2d_set_size(Array2DType type, IntPtr array, int rows, int cols);
    public static ErrorType rectangle_get_rect(Array2DType type, IntPtr array, IntPtr& rect);
    public static ErrorType rectangle_get_rect_matrix(MatrixElementType type, IntPtr img, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType array2d_row(Array2DType type, IntPtr array, int row, IntPtr& ret);
    public static void array2d_get_row_column_uint8_t(IntPtr row, int column, Byte& value);
    public static void array2d_get_row_column_uint16_t(IntPtr row, int column, UInt16& value);
    public static void array2d_get_row_column_uint32_t(IntPtr row, int column, UInt32& value);
    public static void array2d_get_row_column_int8_t(IntPtr row, int column, SByte& value);
    public static void array2d_get_row_column_int16_t(IntPtr row, int column, Int16& value);
    public static void array2d_get_row_column_int32_t(IntPtr row, int column, Int32& value);
    public static void array2d_get_row_column_double(IntPtr row, int column, Double& value);
    public static void array2d_get_row_column_float(IntPtr row, int column, Single& value);
    public static void array2d_get_row_column_rgb_pixel(IntPtr row, int column, RgbPixel& value);
    public static void array2d_get_row_column_bgr_pixel(IntPtr row, int column, BgrPixel& value);
    public static void array2d_get_row_column_rgb_alpha_pixel(IntPtr row, int column, RgbAlphaPixel& value);
    public static void array2d_get_row_column_hsi_pixel(IntPtr row, int column, HsiPixel& value);
    public static void array2d_set_row_column_uint8_t(IntPtr row, int column, byte value);
    public static void array2d_set_row_column_uint16_t(IntPtr row, int column, ushort value);
    public static void array2d_set_row_column_uint32_t(IntPtr row, int column, UInt32 value);
    public static void array2d_set_row_column_int8_t(IntPtr row, int column, sbyte value);
    public static void array2d_set_row_column_int16_t(IntPtr row, int column, short value);
    public static void array2d_set_row_column_int32_t(IntPtr row, int column, int value);
    public static void array2d_set_row_column_double(IntPtr row, int column, double value);
    public static void array2d_set_row_column_float(IntPtr row, int column, float value);
    public static void array2d_set_row_column_rgb_pixel(IntPtr row, int column, RgbPixel value);
    public static void array2d_set_row_column_bgr_pixel(IntPtr row, int column, BgrPixel value);
    public static void array2d_set_row_column_rgb_alpha_pixel(IntPtr row, int column, RgbAlphaPixel value);
    public static void array2d_set_row_column_hsi_pixel(IntPtr row, int column, HsiPixel value);
    public static void array2d_row_delete(Array2DType type, IntPtr row);
    public static IntPtr array2d_matrix_new(MatrixElementType type, int templateRows, int templateColumns);
    public static IntPtr array2d_matrix_new1(MatrixElementType type, int rows, int cols, int templateRows, int templateColumns);
    public static void array2d_matrix_delete(MatrixElementType type, IntPtr array, int templateRows, int templateColumns);
    public static bool array2d_matrix_nc(MatrixElementType type, IntPtr array, int templateRows, int templateColumns, Int32& ret);
    public static bool array2d_matrix_nr(MatrixElementType type, IntPtr array, int templateRows, int templateColumns, Int32& ret);
    public static bool array2d_matrix_size(MatrixElementType type, IntPtr array, int templateRows, int templateColumns, Int32& ret);
    public static bool array2d_matrix_set_size(MatrixElementType type, IntPtr array, int templateRows, int templateColumns, int rows, int cols);
    public static ErrorType array2d_matrix_get_rect(MatrixElementType type, IntPtr array, int templateRows, int templateColumns, IntPtr& rect);
    public static ErrorType array2d_matrix_row(MatrixElementType type, IntPtr array, int templateRows, int templateColumns, int row, IntPtr& ret);
    public static void array2d_matrix_get_row_column_uint8_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_uint16_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_uint32_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_int8_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_int16_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_int32_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_double(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_float(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_rgb_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_bgr_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_rgb_alpha_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_get_row_column_hsi_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr& value);
    public static void array2d_matrix_set_row_column_uint8_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_uint16_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_uint32_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_int8_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_int16_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_int32_t(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_double(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_float(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_rgb_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_bgr_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_rgb_alpha_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_set_row_column_hsi_pixel(IntPtr row, int templateRows, int templateColumns, int column, IntPtr value);
    public static void array2d_matrix_row_delete(MatrixElementType type, IntPtr row, int templateRows, int templateColumns);
    public static IntPtr array_new(Array2DType type);
    public static IntPtr array_new1(Array2DType type, UInt32 newSize);
    public static void array_delete_pixel(Array2DType type, IntPtr array);
    public static ErrorType array_pixel_size(Array2DType type, IntPtr array, UInt32& size);
    public static ErrorType array_pixel_getitem_uint8(Array2DType type, IntPtr array, UInt32 index, Byte& item);
    public static ErrorType array_pixel_getitem_uint16(Array2DType type, IntPtr array, UInt32 index, UInt16& item);
    public static ErrorType array_pixel_getitem_uint32(Array2DType type, IntPtr array, UInt32 index, UInt32& item);
    public static ErrorType array_pixel_getitem_int8(Array2DType type, IntPtr array, UInt32 index, SByte& item);
    public static ErrorType array_pixel_getitem_int16(Array2DType type, IntPtr array, UInt32 index, Int16& item);
    public static ErrorType array_pixel_getitem_int32(Array2DType type, IntPtr array, UInt32 index, Int32& item);
    public static ErrorType array_pixel_getitem_float(Array2DType type, IntPtr array, UInt32 index, Single& item);
    public static ErrorType array_pixel_getitem_double(Array2DType type, IntPtr array, UInt32 index, Double& item);
    public static ErrorType array_pixel_getitem_rgb_pixel(Array2DType type, IntPtr array, UInt32 index, RgbPixel& item);
    public static ErrorType array_pixel_getitem_bgr_pixel(Array2DType type, IntPtr array, UInt32 index, BgrPixel& item);
    public static ErrorType array_pixel_getitem_hsi_pixel(Array2DType type, IntPtr array, UInt32 index, HsiPixel& item);
    public static ErrorType array_pixel_getitem_rgb_alpha_pixel(Array2DType type, IntPtr array, UInt32 index, RgbAlphaPixel& item);
    public static ErrorType array_pixel_pushback_uint8(Array2DType type, IntPtr array, byte item);
    public static ErrorType array_pixel_pushback_uint16(Array2DType type, IntPtr array, ushort item);
    public static ErrorType array_pixel_pushback_uint32(Array2DType type, IntPtr array, UInt32 item);
    public static ErrorType array_pixel_pushback_int8(Array2DType type, IntPtr array, sbyte item);
    public static ErrorType array_pixel_pushback_int16(Array2DType type, IntPtr array, short item);
    public static ErrorType array_pixel_pushback_int32(Array2DType type, IntPtr array, int item);
    public static ErrorType array_pixel_pushback_float(Array2DType type, IntPtr array, float item);
    public static ErrorType array_pixel_pushback_double(Array2DType type, IntPtr array, double item);
    public static ErrorType array_pixel_pushback_rgb_pixel(Array2DType type, IntPtr array, RgbPixel item);
    public static ErrorType array_pixel_pushback_bgr_pixel(Array2DType type, IntPtr array, BgrPixel item);
    public static ErrorType array_pixel_pushback_hsi_pixel(Array2DType type, IntPtr array, HsiPixel item);
    public static ErrorType array_pixel_pushback_rgb_alpha_pixel(Array2DType type, IntPtr array, RgbAlphaPixel item);
    public static IntPtr array_array2d_new(Array2DType type);
    public static IntPtr array_array2d_new1(Array2DType type, UInt32 newSize);
    public static void array_delete_array2d(Array2DType type, IntPtr array);
    public static ErrorType array_array2d_size(Array2DType type, IntPtr array, UInt32& size);
    public static ErrorType array_array2d_getitem(Array2DType type, IntPtr array, UInt32 index, IntPtr& item);
    public static ErrorType array_array2d_pushback(Array2DType type, IntPtr array, IntPtr item);
    public static IntPtr array_matrix_new(MatrixElementType type);
    public static IntPtr array_matrix_new1(MatrixElementType type, UInt32 newSize);
    public static void array_delete_matrix(MatrixElementType type, IntPtr array);
    public static ErrorType array_matrix_size(MatrixElementType type, IntPtr array, UInt32& size);
    public static ErrorType array_matrix_getitem(MatrixElementType type, IntPtr array, UInt32 index, IntPtr& item);
    public static ErrorType array_matrix_pushback(MatrixElementType type, IntPtr array, IntPtr item);
    public static UInt32 clustering_chinese_whispers(IntPtr edges, IntPtr labels, UInt32 num_iterations);
    public static ErrorType spectral_cluster(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kernel, IntPtr samples, UInt32 numClusters, IntPtr& ret);
    public static IntPtr cstd_memcpy(IntPtr dest, IntPtr src, int count);
    public static bool cuda_cudaRuntimeGetVersion(Int32& version);
    public static bool cuda_cudaDriverGetVersion(Int32& version);
    public static IntPtr cuda_cudaGetErrorName(int code);
    public static IntPtr cuda_cudaGetErrorString(int code);
    public static IntPtr image_dataset_metadata_box_new();
    public static double image_dataset_metadata_box_get_age(IntPtr dataset);
    public static void image_dataset_metadata_box_set_age(IntPtr dataset, double age);
    public static double image_dataset_metadata_box_get_angle(IntPtr dataset);
    public static void image_dataset_metadata_box_set_angle(IntPtr dataset, double angle);
    public static double image_dataset_metadata_box_get_detection_score(IntPtr dataset);
    public static void image_dataset_metadata_box_set_detection_score(IntPtr dataset, double detectionScore);
    public static bool image_dataset_metadata_box_get_difficult(IntPtr dataset);
    public static void image_dataset_metadata_box_set_difficult(IntPtr dataset, bool difficult);
    public static Gender image_dataset_metadata_box_get_gender(IntPtr dataset);
    public static void image_dataset_metadata_box_set_gender(IntPtr dataset, Gender gender);
    public static bool image_dataset_metadata_box_has_label(IntPtr dataset);
    public static bool image_dataset_metadata_box_get_ignore(IntPtr dataset);
    public static void image_dataset_metadata_box_set_ignore(IntPtr dataset, bool ignore);
    public static IntPtr image_dataset_metadata_box_get_label(IntPtr dataset);
    public static void image_dataset_metadata_box_set_label(IntPtr dataset, Byte[] label, int labelLength);
    public static bool image_dataset_metadata_box_get_occluded(IntPtr dataset);
    public static void image_dataset_metadata_box_set_occluded(IntPtr dataset, bool occluded);
    public static void image_dataset_metadata_box_get_parts_get_all(IntPtr box, IntPtr strings, IntPtr points);
    public static bool image_dataset_metadata_box_get_parts_get_value(IntPtr box, Byte[] key, int keyLength, IntPtr& result);
    public static void image_dataset_metadata_box_get_parts_set_value(IntPtr box, Byte[] key, int keyLength, IntPtr value);
    public static int image_dataset_metadata_box_get_parts_get_size(IntPtr overlayRect);
    public static void image_dataset_metadata_box_parts_clear(IntPtr box);
    public static double image_dataset_metadata_box_get_pose(IntPtr dataset);
    public static IntPtr image_dataset_metadata_box_get_rect(IntPtr dataset);
    public static void image_dataset_metadata_box_set_rect(IntPtr dataset, IntPtr rect);
    public static void image_dataset_metadata_box_set_pose(IntPtr dataset, double pose);
    public static bool image_dataset_metadata_box_get_truncated(IntPtr dataset);
    public static void image_dataset_metadata_box_set_truncated(IntPtr dataset, bool truncated);
    public static void image_dataset_metadata_box_delete(IntPtr dataset);
    public static IntPtr image_dataset_metadata_dataset_new();
    public static IntPtr image_dataset_metadata_dataset_get_comment(IntPtr dataset);
    public static void image_dataset_metadata_dataset_set_comment(IntPtr dataset, Byte[] comment, int commentLength);
    public static IntPtr image_dataset_metadata_dataset_get_images(IntPtr dataset);
    public static IntPtr image_dataset_metadata_dataset_get_images_at(IntPtr dataset, int index);
    public static int image_dataset_metadata_dataset_get_images_get_size(IntPtr dataset);
    public static void image_dataset_metadata_dataset_get_images_clear(IntPtr dataset);
    public static void image_dataset_metadata_dataset_get_images_remove_at(IntPtr dataset, int index);
    public static void image_dataset_metadata_dataset_get_images_push_back(IntPtr dataset, IntPtr image);
    public static IntPtr image_dataset_metadata_dataset_get_name(IntPtr dataset);
    public static void image_dataset_metadata_dataset_set_name(IntPtr dataset, Byte[] name, int nameLength);
    public static void image_dataset_metadata_dataset_delete(IntPtr dataset);
    public static IntPtr image_dataset_metadata_image_new(Byte[] filename, int filenameLength);
    public static IntPtr image_dataset_metadata_image_new2();
    public static IntPtr image_dataset_metadata_dataset_get_boxes(IntPtr image);
    public static IntPtr image_dataset_metadata_dataset_get_boxes_at(IntPtr image, int index);
    public static int image_dataset_metadata_dataset_get_boxes_get_size(IntPtr image);
    public static void image_dataset_metadata_dataset_get_boxes_clear(IntPtr image);
    public static void image_dataset_metadata_dataset_get_boxes_push_back(IntPtr image, IntPtr box);
    public static IntPtr image_dataset_metadata_image_get_filename(IntPtr image);
    public static void image_dataset_metadata_image_set_filename(IntPtr image, Byte[] filename, int filenameLength);
    public static void image_dataset_metadata_image_delete(IntPtr image);
    public static ErrorType load_image_dataset_metadata(IntPtr dataset, Byte[] filename, int filenameLength);
    public static ErrorType save_image_dataset_metadata(IntPtr dataset, Byte[] filename, int filenameLength);
    public static ErrorType load_image_dataset_array_full_object_detection(Array2DType type, IntPtr array_array2d, IntPtr boxes, Byte[] path, int pathLength);
    public static ErrorType load_image_dataset_mmod_rect(MatrixElementType type, IntPtr images, IntPtr boxes, Byte[] path, int pathLength);
    public static ErrorType load_image_dataset_rectangle(MatrixElementType type, IntPtr images, IntPtr boxes, Byte[] path, int pathLength);
    public static void load_mnist_dataset(Byte[] folderPath, int folderPathLength, IntPtr& training_images, IntPtr& training_labels, IntPtr& testing_images, IntPtr& testing_labels);
    public static IntPtr get_version();
    public static bool is_support_gui();
    public static bool is_support_cuda();
    public static void assign_pixel_rgb_rgbalpha(RgbPixel& dest, RgbAlphaPixel& src);
    public static void assign_pixel_rgbalpha_rgb(RgbAlphaPixel& dest, RgbPixel& src);
    public static void assign_pixel_rgb_hsi(RgbPixel& dest, HsiPixel& src);
    public static void assign_pixel_rgbalpha_hsi(RgbAlphaPixel& dest, HsiPixel& src);
    public static IntPtr normalizing_tform(IntPtr rect);
    public static ErrorType object_detector_scan_fhog_pyramid_new(PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr& detector);
    public static void object_detector_scan_fhog_pyramid_delete(PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr detector);
    public static ErrorType object_detector_scan_fhog_pyramid_deserialize(Byte[] fileName, int filepathLength, PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr obj, IntPtr& errorMessage);
    public static ErrorType object_detector_scan_fhog_pyramid_operator(PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr detector, MatrixElementType elementType, IntPtr matrix, IntPtr& dets);
    public static ErrorType object_detector_scan_fhog_pyramid_serialize(Byte[] fileName, int filepathLength, PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr obj, IntPtr& errorMessage);
    public static IntPtr matrix_range_exp_create_int8_t_new1(sbyte start, sbyte inc, sbyte end);
    public static IntPtr matrix_range_exp_create_int8_t_new2(sbyte start, sbyte end, int num);
    public static IntPtr matrix_range_exp_create_int8_t_new3(sbyte start, sbyte end);
    public static IntPtr matrix_range_exp_create_int16_t_new1(short start, short inc, short end);
    public static IntPtr matrix_range_exp_create_int16_t_new2(short start, short end, int num);
    public static IntPtr matrix_range_exp_create_int16_t_new3(short start, short end);
    public static IntPtr matrix_range_exp_create_int32_t_new1(int start, int inc, int end);
    public static IntPtr matrix_range_exp_create_int32_t_new2(int start, int end, int num);
    public static IntPtr matrix_range_exp_create_int32_t_new3(int start, int end);
    public static IntPtr matrix_range_exp_create_int64_t_new1(long start, long inc, long end);
    public static IntPtr matrix_range_exp_create_int64_t_new2(long start, long end, int num);
    public static IntPtr matrix_range_exp_create_int64_t_new3(long start, long end);
    public static IntPtr matrix_range_exp_create_uint8_t_new1(byte start, byte inc, byte end);
    public static IntPtr matrix_range_exp_create_uint8_t_new2(byte start, byte end, int num);
    public static IntPtr matrix_range_exp_create_uint8_t_new3(byte start, byte end);
    public static IntPtr matrix_range_exp_create_uint16_t_new1(ushort start, ushort inc, ushort end);
    public static IntPtr matrix_range_exp_create_uint16_t_new2(ushort start, ushort end, int num);
    public static IntPtr matrix_range_exp_create_uint16_t_new3(ushort start, ushort end);
    public static IntPtr matrix_range_exp_create_float_new1(float start, float inc, float end);
    public static IntPtr matrix_range_exp_create_float_new2(float start, float end, int num);
    public static IntPtr matrix_range_exp_create_float_new3(float start, float end);
    public static IntPtr matrix_range_exp_create_double_new1(double start, double inc, double end);
    public static IntPtr matrix_range_exp_create_double_new2(double start, double end, int num);
    public static IntPtr matrix_range_exp_create_double_new3(double start, double end);
    public static void matrix_range_exp_delete(MatrixElementType matrixElementType, IntPtr array);
    public static bool matrix_range_exp_nc(MatrixElementType matrixElementType, IntPtr matrix, Int32& ret);
    public static bool matrix_range_exp_nr(MatrixElementType matrixElementType, IntPtr matrix, Int32& ret);
    public static IntPtr find_similarity_transform_dpoint(IntPtr from_points, IntPtr to_points);
    public static IntPtr find_similarity_transform_point(IntPtr from_points, IntPtr to_points);
    public static IntPtr rotation_matrix(double angle);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, Byte[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data2(Array2DType dst_type, Array2DType src_type, ImagePixelType pixel_type, Byte[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, UInt16[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, UInt32[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, SByte[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, Int16[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, Int32[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, Single[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, Double[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, RgbPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, BgrPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, RgbAlphaPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static IntPtr extensions_load_image_data(Array2DType dst_type, Array2DType src_type, HsiPixel[] data, UInt32 rows, UInt32 columns, UInt32 steps);
    public static ErrorType extensions_matrix_to_array(IntPtr src, MatrixElementType type, int templateRows, int templateColumns, IntPtr dst);
    public static ErrorType extensions_convert_array_to_bytes(Array2DType src_type, IntPtr src, Byte[] dst, UInt32 rows, UInt32 columns);
    public static bool dnn_cuda_cudaRuntimeGetVersion(Int32& version);
    public static bool dnn_cuda_cudaDriverGetVersion(Int32& version);
    public static IntPtr dnn_cuda_cudaGetErrorName(int code);
    public static IntPtr dnn_cuda_cudaGetErrorString(int code);
    public static IntPtr dnn_get_version();
    public static bool dnn_is_support_gui();
    public static bool dnn_is_support_cuda();
    public static ErrorType input_rgb_image_pyramid_new(PyramidType pyramidType, UInt32 pyramidRate, IntPtr& ret);
    public static void input_rgb_image_pyramid_delete(IntPtr input, PyramidType pyramidType, UInt32 pyramidRate);
    public static ErrorType input_rgb_image_pyramid_to_tensor(IntPtr input, PyramidType pyramidType, UInt32 pyramidRate, MatrixElementType elementType, IntPtr matrix, int templateRows, int templateColumns, UInt32 iteratorCount, IntPtr tensor);
    public static ErrorType input_rgb_image_pyramid_get_pyramid_padding(IntPtr input, PyramidType pyramidType, UInt32 pyramidRate, UInt32& pyramidPadding);
    public static ErrorType input_rgb_image_pyramid_get_pyramid_outer_padding(IntPtr input, PyramidType pyramidType, UInt32 pyramidRate, UInt32& pyramidOuterPadding);
    public static ErrorType input_rgb_image_pyramid_image_space_to_tensor_space(IntPtr input, PyramidType pyramidType, UInt32 pyramidRate, IntPtr data, double scale, IntPtr r, IntPtr& rect);
    public static ErrorType test_object_detection_function_net(int type, IntPtr detector, MatrixElementType elementType, IntPtr matrixVector, int templateRows, int templateColumns, IntPtr truthDets, IntPtr overlapTester, double adjustThreshold, IntPtr overlapsIgnoreTester, IntPtr& ret);
    public static int LossBase_get_id(IntPtr builder);
    public static MatrixElementType LossBase_get_data_type(IntPtr builder);
    public static MatrixElementType LossBase_get_label_type();
    public static bool LossMetricRegistry_add(IntPtr builder);
    public static void LossMetricRegistry_remove(IntPtr builder);
    public static bool LossMetricRegistry_contains(int id);
    public static IntPtr LossMetric_anet_type_create();
    public static IntPtr LossMetric_metric_net_type_create();
    public static ErrorType LossMetric_new(int id, IntPtr& net);
    public static void LossMetric_delete(int id, IntPtr obj);
    public static ErrorType LossMetric_operator_matrixs(int id, IntPtr obj, MatrixElementType element_type, IntPtr[] matrix_array, int matrix_array_len, int templateRows, int templateColumns, UInt32 batch_size, IntPtr& ret);
    public static ErrorType LossMetric_deserialize(int id, Byte[] file_name, int file_name_length, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMetric_deserialize_proxy(int id, IntPtr proxy, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMetric_serialize(int id, IntPtr obj, Byte[] file_name, int file_name_length, IntPtr& error_message);
    public static ErrorType LossMetric_serialize_proxy(int id, IntPtr proxy, IntPtr obj, IntPtr& error_message);
    public static int LossMetric_get_num_layers(int id);
    public static ErrorType LossMetric_clean(int id, IntPtr obj);
    public static ErrorType LossMetric_input_tensor_to_output_tensor(int id, IntPtr obj, IntPtr p, IntPtr& ret);
    public static ErrorType LossMetric_net_to_xml(int id, IntPtr obj, Byte[] filename, int filenameLength);
    public static ErrorType LossMetric_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMetric_set_all_bn_running_stats_window_sizes(int id, IntPtr obj, UInt32 new_window_size);
    public static ErrorType LossMetric_get_loss_details(int id, IntPtr obj, IntPtr& loss_details);
    public static IntPtr LossMetric_trainer_new(int id, IntPtr net);
    public static IntPtr LossMetric_trainer_new2(int id, IntPtr net, IntPtr sgd);
    public static void LossMetric_trainer_delete(int id, IntPtr trainer);
    public static ErrorType LossMetric_trainer_set_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMetric_trainer_get_learning_rate(int id, IntPtr trainer, Double& lr);
    public static ErrorType LossMetric_trainer_get_average_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMetric_trainer_get_average_test_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMetric_trainer_set_min_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMetric_trainer_set_mini_batch_size(int id, IntPtr trainer, UInt32 size);
    public static ErrorType LossMetric_trainer_be_verbose(int id, IntPtr trainer);
    public static ErrorType LossMetric_trainer_set_synchronization_file(int id, IntPtr trainer, Byte[] filename, int filenameLength, UInt32 second);
    public static ErrorType LossMetric_trainer_set_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMetric_trainer_set_test_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMetric_trainer_get_net(int id, IntPtr trainer, IntPtr& ret);
    public static ErrorType LossMetric_trainer_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMetric_trainer_test_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMetric_trainer_train(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMetric_trainer_train_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMetric_subnet(int id, IntPtr obj, IntPtr& subnet);
    public static ErrorType LossMetric_subnet_get_layer_details(int id, IntPtr subnet, IntPtr& ret);
    public static IntPtr LossMetric_subnet_get_output(int id, IntPtr subnet, Int32& ret);
    public static ErrorType LossMetric_subnet_delete(int id, IntPtr subnet);
    public static ErrorType LossMetric_layer_details_set_num_filters(int id, IntPtr layer, long num);
    public static ErrorType LossMetric_loss_details_get_distance_threshold(int id, IntPtr layer, Single& distance_threshold);
    public static void dnn_output_stdvector_float_1_1_delete(IntPtr vector);
    public static IntPtr dnn_output_stdvector_float_1_1_getItem(IntPtr vector, int index);
    public static int dnn_output_stdvector_float_1_1_getSize(IntPtr vector);
    public static bool LossMmodRegistry_add(IntPtr builder);
    public static void LossMmodRegistry_remove(IntPtr builder);
    public static bool LossMmodRegistry_contains(int id);
    public static IntPtr LossMmod_net_type_create();
    public static IntPtr LossMmod_net_type_1_create();
    public static IntPtr LossMmod_net_type_2_create();
    public static IntPtr LossMmod_net_type_3_create();
    public static IntPtr LossMmod_det_bnet_type_create();
    public static IntPtr LossMmod_det_anet_type_create();
    public static IntPtr dnn_output_stdvector_mmod_rect_getItem(IntPtr vector, int index);
    public static int dnn_output_stdvector_mmod_rect_getSize(IntPtr vector);
    public static ErrorType LossMmod_new(int id, IntPtr& net);
    public static ErrorType LossMmod_new2(int id, IntPtr option, IntPtr& net);
    public static void LossMmod_delete(int id, IntPtr obj);
    public static ErrorType LossMmod_operator_matrixs(int id, IntPtr obj, MatrixElementType element_type, IntPtr[] matrix_array, int matrix_array_len, int templateRows, int templateColumns, UInt32 batch_size, IntPtr& ret);
    public static ErrorType LossMmod_deserialize(int id, Byte[] file_name, int file_name_length, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMmod_deserialize_proxy(int id, IntPtr proxy, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMmod_serialize(int id, IntPtr obj, Byte[] file_name, int file_name_length, IntPtr& error_message);
    public static ErrorType LossMmod_serialize_proxy(int id, IntPtr proxy, IntPtr obj, IntPtr& error_message);
    public static ErrorType LossMmod_get_input_layer(int id, IntPtr obj, IntPtr& ret);
    public static int LossMmod_get_num_layers(int id);
    public static ErrorType LossMmod_clean(int id, IntPtr obj);
    public static ErrorType LossMmod_input_tensor_to_output_tensor(int id, IntPtr obj, IntPtr p, IntPtr& ret);
    public static ErrorType LossMmod_net_to_xml(int id, IntPtr obj, Byte[] filename, int filenameLength);
    public static ErrorType LossMmod_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMmod_set_all_bn_running_stats_window_sizes(int id, IntPtr obj, UInt32 new_window_size);
    public static ErrorType LossMmod_get_loss_details(int id, IntPtr obj, IntPtr& loss_details);
    public static IntPtr LossMmod_trainer_new(int id, IntPtr net);
    public static IntPtr LossMmod_trainer_new2(int id, IntPtr net, IntPtr sgd);
    public static void LossMmod_trainer_delete(int id, IntPtr trainer);
    public static ErrorType LossMmod_trainer_set_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMmod_trainer_get_learning_rate(int id, IntPtr trainer, Double& lr);
    public static ErrorType LossMmod_trainer_get_average_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMmod_trainer_get_average_test_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMmod_trainer_set_min_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMmod_trainer_set_mini_batch_size(int id, IntPtr trainer, UInt32 size);
    public static ErrorType LossMmod_trainer_be_verbose(int id, IntPtr trainer);
    public static ErrorType LossMmod_trainer_set_synchronization_file(int id, IntPtr trainer, Byte[] filename, int filenameLength, UInt32 second);
    public static ErrorType LossMmod_trainer_set_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMmod_trainer_set_test_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMmod_trainer_get_net(int id, IntPtr trainer, IntPtr& ret);
    public static ErrorType LossMmod_trainer_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMmod_trainer_test_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMmod_trainer_train(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMmod_trainer_train_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMmod_subnet(int id, IntPtr obj, IntPtr& subnet);
    public static ErrorType LossMmod_subnet_get_layer_details(int id, IntPtr subnet, IntPtr& ret);
    public static IntPtr LossMmod_subnet_get_output(int id, IntPtr subnet, Int32& ret);
    public static ErrorType LossMmod_subnet_delete(int id, IntPtr subnet);
    public static ErrorType LossMmod_layer_details_set_num_filters(int id, IntPtr layer, long num);
    public static void dnn_output_stdvector_stdvector_mmod_rect_delete(IntPtr vector);
    public static IntPtr dnn_output_stdvector_stdvector_mmod_rect_getItem(IntPtr vector, int index);
    public static int dnn_output_stdvector_stdvector_mmod_rect_getSize(IntPtr vector);
    public static void dnn_output_stdvector_mmod_rect_delete(IntPtr vector);
    public static bool LossMulticlassLogRegistry_add(IntPtr builder);
    public static void LossMulticlassLogRegistry_remove(IntPtr builder);
    public static bool LossMulticlassLogRegistry_contains(int id);
    public static IntPtr LossMulticlassLog_anet_1000_type_create();
    public static IntPtr LossMulticlassLog_net_type2_create();
    public static IntPtr LossMulticlassLog_net_type_create();
    public static IntPtr LossMulticlassLog_net_1000_type_create();
    public static ErrorType LossMulticlassLog_new(int id, IntPtr& net);
    public static void LossMulticlassLog_delete(int id, IntPtr obj);
    public static ErrorType LossMulticlassLog_get_label(int id, IntPtr obj, IntPtr& label);
    public static ErrorType LossMulticlassLog_operator_matrixs(int id, IntPtr obj, MatrixElementType element_type, IntPtr[] matrix_array, int matrix_array_len, int templateRows, int templateColumns, UInt32 batch_size, IntPtr& ret);
    public static ErrorType LossMulticlassLog_probability(int id, IntPtr obj, MatrixElementType element_type, IntPtr[] matrix_array, int matrix_array_len, int templateRows, int templateColumns, UInt32 batch_size, IntPtr& ret);
    public static ErrorType LossMulticlassLog_deserialize(int id, Byte[] file_name, int file_name_length, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMulticlassLog_deserialize_proxy(int id, IntPtr proxy, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMulticlassLog_serialize(int id, IntPtr obj, Byte[] file_name, int file_name_length, IntPtr& error_message);
    public static ErrorType LossMulticlassLog_serialize_proxy(int id, IntPtr proxy, IntPtr obj, IntPtr& error_message);
    public static int LossMulticlassLog_get_num_layers(int id);
    public static ErrorType LossMulticlassLog_clean(int id, IntPtr obj);
    public static ErrorType LossMulticlassLog_input_tensor_to_output_tensor(int id, IntPtr obj, IntPtr p, IntPtr& ret);
    public static ErrorType LossMulticlassLog_net_to_xml(int id, IntPtr obj, Byte[] filename, int filenameLength);
    public static ErrorType LossMulticlassLog_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMulticlassLog_set_all_bn_running_stats_window_sizes(int id, IntPtr obj, UInt32 new_window_size);
    public static ErrorType LossMulticlassLog_get_loss_details(int id, IntPtr obj, IntPtr& loss_details);
    public static IntPtr LossMulticlassLog_trainer_new(int id, IntPtr net);
    public static IntPtr LossMulticlassLog_trainer_new2(int id, IntPtr net, IntPtr sgd);
    public static void LossMulticlassLog_trainer_delete(int id, IntPtr trainer);
    public static ErrorType LossMulticlassLog_trainer_set_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMulticlassLog_trainer_get_learning_rate(int id, IntPtr trainer, Double& lr);
    public static ErrorType LossMulticlassLog_trainer_get_average_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMulticlassLog_trainer_get_average_test_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMulticlassLog_trainer_set_min_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMulticlassLog_trainer_set_mini_batch_size(int id, IntPtr trainer, UInt32 size);
    public static ErrorType LossMulticlassLog_trainer_be_verbose(int id, IntPtr trainer);
    public static ErrorType LossMulticlassLog_trainer_set_synchronization_file(int id, IntPtr trainer, Byte[] filename, int filenameLength, UInt32 second);
    public static ErrorType LossMulticlassLog_trainer_set_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMulticlassLog_trainer_set_test_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMulticlassLog_trainer_get_net(int id, IntPtr trainer, IntPtr& ret);
    public static ErrorType LossMulticlassLog_trainer_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMulticlassLog_trainer_test_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMulticlassLog_trainer_train(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMulticlassLog_trainer_train_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMulticlassLog_subnet(int id, IntPtr obj, IntPtr& subnet);
    public static ErrorType LossMulticlassLog_subnet_get_layer_details(int id, IntPtr subnet, IntPtr& ret);
    public static IntPtr LossMulticlassLog_subnet_get_output(int id, IntPtr subnet, Int32& ret);
    public static ErrorType LossMulticlassLog_subnet_delete(int id, IntPtr subnet);
    public static ErrorType LossMulticlassLog_layer_details_set_num_filters(int id, IntPtr layer, long num);
    public static void dnn_output_uint32_t_delete(IntPtr vector);
    public static UInt32 dnn_output_uint32_t_getItem(IntPtr vector, int index);
    public static int dnn_output_uint32_t_getSize(IntPtr vector);
    public static bool LossMulticlassLogPerPixelRegistry_add(IntPtr builder);
    public static void LossMulticlassLogPerPixelRegistry_remove(IntPtr builder);
    public static bool LossMulticlassLogPerPixelRegistry_contains(int id);
    public static IntPtr LossMulticlassLogPerPixel_net_type_create();
    public static IntPtr LossMulticlassLogPerPixel_anet_type_create();
    public static IntPtr LossMulticlassLogPerPixel_uanet_type_create();
    public static IntPtr LossMulticlassLogPerPixel_ubnet_type_create();
    public static IntPtr LossMulticlassLogPerPixel_seg_bnet_type_create();
    public static IntPtr LossMulticlassLogPerPixel_seg_anet_type_create();
    public static ErrorType LossMulticlassLogPerPixel_new(int id, IntPtr& net);
    public static void LossMulticlassLogPerPixel_delete(int id, IntPtr obj);
    public static ushort LossMulticlassLogPerPixel_get_label_to_ignore();
    public static ErrorType LossMulticlassLogPerPixel_operator_matrixs(int id, IntPtr obj, MatrixElementType element_type, IntPtr[] matrix_array, int matrix_array_len, int templateRows, int templateColumns, UInt32 batch_size, IntPtr& ret);
    public static ErrorType LossMulticlassLogPerPixel_deserialize(int id, Byte[] file_name, int file_name_length, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMulticlassLogPerPixel_deserialize_proxy(int id, IntPtr proxy, IntPtr& ret, IntPtr& error_message);
    public static ErrorType LossMulticlassLogPerPixel_deserialize_proxy_map(int id, IntPtr proxy, IntPtr& keys, IntPtr& values, Int32& size, IntPtr& error_message);
    public static ErrorType LossMulticlassLogPerPixel_serialize(int id, IntPtr obj, Byte[] file_name, int file_name_length, IntPtr& error_message);
    public static ErrorType LossMulticlassLogPerPixel_serialize_proxy(int id, IntPtr proxy, IntPtr obj, IntPtr& error_message);
    public static ErrorType LossMulticlassLogPerPixel_serialize_proxy_map(int id, IntPtr proxy, IntPtr[] keys, IntPtr[] values, int size, IntPtr& error_message);
    public static int LossMulticlassLogPerPixel_get_num_layers(int id);
    public static ErrorType LossMulticlassLogPerPixel_clean(int id, IntPtr obj);
    public static ErrorType LossMulticlassLogPerPixel_input_tensor_to_output_tensor(int id, IntPtr obj, IntPtr p, IntPtr& ret);
    public static ErrorType LossMulticlassLogPerPixel_net_to_xml(int id, IntPtr obj, Byte[] filename, int filenameLength);
    public static ErrorType LossMulticlassLogPerPixel_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMulticlassLogPerPixel_set_all_bn_running_stats_window_sizes(int id, IntPtr obj, UInt32 new_window_size);
    public static ErrorType LossMulticlassLogPerPixel_get_loss_details(int id, IntPtr obj, IntPtr& loss_details);
    public static ErrorType LossMulticlassLogPerPixel_cloneAs(int id, IntPtr obj, int dst_id, IntPtr& ret);
    public static IntPtr LossMulticlassLogPerPixel_trainer_new(int id, IntPtr net);
    public static IntPtr LossMulticlassLogPerPixel_trainer_new2(int id, IntPtr net, IntPtr sgd);
    public static void LossMulticlassLogPerPixel_trainer_delete(int id, IntPtr trainer);
    public static ErrorType LossMulticlassLogPerPixel_trainer_set_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMulticlassLogPerPixel_trainer_get_learning_rate(int id, IntPtr trainer, Double& lr);
    public static ErrorType LossMulticlassLogPerPixel_trainer_get_average_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMulticlassLogPerPixel_trainer_get_average_test_loss(int id, IntPtr trainer, Double& loss);
    public static ErrorType LossMulticlassLogPerPixel_trainer_set_min_learning_rate(int id, IntPtr trainer, double lr);
    public static ErrorType LossMulticlassLogPerPixel_trainer_set_mini_batch_size(int id, IntPtr trainer, UInt32 size);
    public static ErrorType LossMulticlassLogPerPixel_trainer_be_verbose(int id, IntPtr trainer);
    public static ErrorType LossMulticlassLogPerPixel_trainer_set_synchronization_file(int id, IntPtr trainer, Byte[] filename, int filenameLength, UInt32 second);
    public static ErrorType LossMulticlassLogPerPixel_trainer_set_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMulticlassLogPerPixel_trainer_set_test_iterations_without_progress_threshold(int id, IntPtr trainer, UInt32 thresh);
    public static ErrorType LossMulticlassLogPerPixel_trainer_get_net(int id, IntPtr trainer, IntPtr& ret);
    public static ErrorType LossMulticlassLogPerPixel_trainer_operator_left_shift(int id, IntPtr trainer, IntPtr stream);
    public static ErrorType LossMulticlassLogPerPixel_trainer_test_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMulticlassLogPerPixel_trainer_train(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMulticlassLogPerPixel_trainer_train_one_step(int id, IntPtr trainer, MatrixElementType data_element_type, IntPtr data, MatrixElementType label_element_type, IntPtr labels);
    public static ErrorType LossMulticlassLogPerPixel_subnet(int id, IntPtr obj, IntPtr& subnet);
    public static ErrorType LossMulticlassLogPerPixel_subnet_get_layer_details(int id, IntPtr subnet, IntPtr& ret);
    public static IntPtr LossMulticlassLogPerPixel_subnet_get_output(int id, IntPtr subnet, Int32& ret);
    public static ErrorType LossMulticlassLogPerPixel_subnet_delete(int id, IntPtr subnet);
    public static ErrorType LossMulticlassLogPerPixel_layer_details_set_num_filters(int id, IntPtr layer, long num);
    public static void dnn_output_stdvector_uint16_delete(IntPtr vector);
    public static IntPtr dnn_output_stdvector_uint16_getItem(IntPtr vector, int index);
    public static int dnn_output_stdvector_uint16_getSize(IntPtr vector);
    public static IntPtr mmod_options_new(IntPtr boxes, UInt32 target_size, UInt32 min_target_size, double min_detector_window_overlap_iou);
    public static void mmod_options_delete(IntPtr options);
    public static IntPtr mmod_options_get_detector_windows(IntPtr options);
    public static void mmod_options_set_detector_windows(IntPtr options, IntPtr value);
    public static double mmod_options_get_loss_per_false_alarm(IntPtr options);
    public static void mmod_options_set_loss_per_false_alarm(IntPtr options, double value);
    public static double mmod_options_get_loss_per_missed_target(IntPtr options);
    public static void mmod_options_set_loss_per_missed_target(IntPtr options, double value);
    public static double mmod_options_get_truth_match_iou_threshold(IntPtr options);
    public static void mmod_options_set_truth_match_iou_threshold(IntPtr options, double value);
    public static IntPtr mmod_options_get_overlaps_nms(IntPtr options);
    public static void mmod_options_set_overlaps_nms(IntPtr options, IntPtr value);
    public static IntPtr mmod_options_get_overlaps_ignore(IntPtr options);
    public static void mmod_options_set_overlaps_ignore(IntPtr options, IntPtr value);
    public static bool mmod_options_get_use_bounding_box_regression(IntPtr options);
    public static void mmod_options_set_use_bounding_box_regression(IntPtr options, bool value);
    public static double mmod_options_get_bbr_lambda(IntPtr options);
    public static void mmod_options_set_vbbr_lambda(IntPtr options, double value);
    public static IntPtr detector_window_details_new(UInt32 w, UInt32 h, Byte[] label, int labelLength);
    public static void detector_window_details_delete(IntPtr details);
    public static UInt32 detector_window_details_width(IntPtr details);
    public static UInt32 detector_window_details_height(IntPtr details);
    public static IntPtr detector_window_details_label(IntPtr details);
    public static IntPtr resizable_tensor_new();
    public static void resizable_tensor_delete(IntPtr tensor);
    public static IntPtr adam_new(float weight_decay, float momentum1, float momentum2);
    public static void adam_delete(IntPtr adam);
    public static IntPtr sgd_new(float weight_decay, float momentum);
    public static void sgd_delete(IntPtr adam);
    public static int tensor_k(IntPtr tensor);
    public static IntPtr image_plane(IntPtr tensor, int sample, int k);
    public static IntPtr dpoint_new();
    public static IntPtr dpoint_new1(double x, double y);
    public static void dpoint_delete(IntPtr point);
    public static double dpoint_length(IntPtr dpoint);
    public static double dpoint_length_squared(IntPtr dpoint);
    public static double dpoint_x(IntPtr dpoint);
    public static double dpoint_y(IntPtr dpoint);
    public static IntPtr dpoint_operator_add(IntPtr point, IntPtr rhs);
    public static IntPtr dpoint_operator_add2(IntPtr point, IntPtr rhs);
    public static IntPtr dpoint_operator_sub(IntPtr point, IntPtr rhs);
    public static IntPtr dpoint_operator_sub2(IntPtr point, IntPtr rhs);
    public static IntPtr dpoint_operator_mul_dpoint_double(IntPtr point, double rhs);
    public static IntPtr dpoint_operator_mul_int32_dpoint(int lhs, IntPtr point);
    public static IntPtr dpoint_operator_mul_double_dpoint(double rhs, IntPtr point);
    public static IntPtr dpoint_operator_div(IntPtr point, double rhs);
    public static bool dpoint_operator_equal(IntPtr point, IntPtr rhs);
    public static IntPtr rotate_dpoint(IntPtr center, IntPtr p, double rhs);
    public static IntPtr drectangle_new();
    public static IntPtr drectangle_new1(double left, double top, double right, double bottom);
    public static IntPtr drectangle_new2(IntPtr p);
    public static IntPtr drectangle_new3(IntPtr p1, IntPtr p2);
    public static IntPtr drectangle_new4(IntPtr drect);
    public static IntPtr drectangle_operator(IntPtr rect);
    public static void drectangle_delete(IntPtr rect);
    public static double drectangle_bottom(IntPtr rect);
    public static double drectangle_left(IntPtr rect);
    public static double drectangle_right(IntPtr rect);
    public static double drectangle_top(IntPtr rect);
    public static bool drectangle_is_empty(IntPtr rect);
    public static IntPtr drectangle_bl_corner(IntPtr rect);
    public static IntPtr drectangle_br_corner(IntPtr rect);
    public static IntPtr drectangle_tl_corner(IntPtr rect);
    public static IntPtr drectangle_tr_corner(IntPtr rect);
    public static double drectangle_area(IntPtr rect);
    public static double drectangle_height(IntPtr rect);
    public static double drectangle_width(IntPtr rect);
    public static IntPtr drectangle_intersect(IntPtr rect, IntPtr target);
    public static bool drectangle_contains(IntPtr rect, IntPtr point);
    public static bool drectangle_contains2(IntPtr rect, IntPtr rhs);
    public static IntPtr drectangle_center(IntPtr rect);
    public static IntPtr drectangle_dcenter(IntPtr rect);
    public static IntPtr drectangle_centered_rect(IntPtr dpoint, double width, double height);
    public static IntPtr drectangle_centered_rect1(IntPtr drect, double width, double height);
    public static IntPtr drectangle_set_aspect_ratio(IntPtr rect, double ratio);
    public static IntPtr drectangle_translate_rect(IntPtr rect, IntPtr p);
    public static IntPtr drectangle_translate_rect_d(IntPtr rect, IntPtr p);
    public static IntPtr drectangle_operator_add(IntPtr drect, IntPtr rhs);
    public static IntPtr drectangle_operator_mul(IntPtr drect, double rhs);
    public static IntPtr drectangle_operator_div(IntPtr drect, double rhs);
    public static bool drectangle_operator_equal(IntPtr drect, IntPtr rhs);
    public static IntPtr point_new();
    public static IntPtr point_new1(int x, int y);
    public static void point_delete(IntPtr point);
    public static void point_operator_left_shift(IntPtr point, IntPtr ofstream);
    public static double point_length(IntPtr point);
    public static double point_length_squared(IntPtr point);
    public static int point_x(IntPtr point);
    public static int point_y(IntPtr point);
    public static IntPtr point_operator_add(IntPtr point, IntPtr rhs);
    public static IntPtr point_operator_sub(IntPtr point, IntPtr rhs);
    public static IntPtr point_operator_mul_point_int32(IntPtr point, int rhs);
    public static IntPtr point_operator_mul_int32_point(int lhs, IntPtr point);
    public static IntPtr point_operator_mul_double_point(double lhs, IntPtr point);
    public static IntPtr point_operator_div(IntPtr point, int rhs);
    public static bool point_operator_equal(IntPtr point, IntPtr rhs);
    public static IntPtr rotate_point(IntPtr center, IntPtr p, double rhs);
    public static IntPtr point_rotator_new();
    public static IntPtr point_rotator_new1(double angle);
    public static IntPtr point_rotator_get_m(IntPtr obj);
    public static IntPtr point_rotator_operator(IntPtr obj, IntPtr vector);
    public static void point_rotator_delete(IntPtr obj);
    public static IntPtr point_transform_new();
    public static IntPtr point_transform_new1(double angle, IntPtr vector);
    public static IntPtr point_transform_get_b(IntPtr obj);
    public static IntPtr point_transform_get_m(IntPtr obj);
    public static IntPtr point_transform_operator(IntPtr obj, IntPtr vector);
    public static void point_transform_delete(IntPtr obj);
    public static IntPtr point_transform_affine_new();
    public static IntPtr point_transform_affine_new1(IntPtr matrix, IntPtr vector);
    public static IntPtr point_transform_affine_get_b(IntPtr obj);
    public static IntPtr point_transform_affine_get_m(IntPtr obj);
    public static IntPtr point_transform_affine_operator(IntPtr obj, IntPtr vector);
    public static void point_transform_affine_delete(IntPtr obj);
    public static IntPtr point_transform_projective_new();
    public static IntPtr point_transform_projective_new1(IntPtr matrix);
    public static IntPtr point_transform_projective_get_m(IntPtr obj);
    public static IntPtr point_transform_projective_operator(IntPtr obj, IntPtr vector);
    public static void point_transform_projective_delete(IntPtr obj);
    public static IntPtr rectangle_new();
    public static IntPtr rectangle_new1(int left, int top, int right, int bottom);
    public static IntPtr rectangle_new2(UInt32 width, UInt32 height);
    public static IntPtr rectangle_new3(IntPtr p);
    public static IntPtr rectangle_new4(IntPtr p1, IntPtr p2);
    public static void rectangle_delete(IntPtr rect);
    public static int rectangle_bottom(IntPtr rect);
    public static int rectangle_left(IntPtr rect);
    public static int rectangle_right(IntPtr rect);
    public static int rectangle_top(IntPtr rect);
    public static void rectangle_set_bottom(IntPtr rect, int value);
    public static void rectangle_set_left(IntPtr rect, int value);
    public static void rectangle_set_right(IntPtr rect, int value);
    public static void rectangle_set_top(IntPtr rect, int value);
    public static bool rectangle_is_empty(IntPtr rect);
    public static IntPtr rectangle_bl_corner(IntPtr rect);
    public static IntPtr rectangle_br_corner(IntPtr rect);
    public static IntPtr rectangle_tl_corner(IntPtr rect);
    public static IntPtr rectangle_tr_corner(IntPtr rect);
    public static UInt32 rectangle_area(IntPtr rect);
    public static UInt32 rectangle_height(IntPtr rect);
    public static UInt32 rectangle_width(IntPtr rect);
    public static bool rectangle_contains(IntPtr rect, IntPtr point);
    public static bool rectangle_contains1(IntPtr rect, int x, int y);
    public static IntPtr rectangle_centered_rect(int x, int y, UInt32 width, UInt32 height);
    public static IntPtr rectangle_centered_rect1(IntPtr point, UInt32 width, UInt32 height);
    public static IntPtr rectangle_centered_rect2(IntPtr rect, UInt32 width, UInt32 height);
    public static IntPtr rectangle_intersect(IntPtr rect, IntPtr target);
    public static IntPtr rectangle_move_rect(IntPtr rect, IntPtr point);
    public static IntPtr rectangle_move_rect2(IntPtr rect, int x, int y);
    public static IntPtr rectangle_center(IntPtr rect);
    public static IntPtr rectangle_dcenter(IntPtr rect);
    public static IntPtr rectangle_set_aspect_ratio(IntPtr rect, double ratio);
    public static IntPtr rectangle_translate_rect(IntPtr rect, IntPtr p);
    public static IntPtr rectangle_translate_rect_xy(IntPtr rect, int x, int y);
    public static IntPtr rectangle_operator_add(IntPtr rect, IntPtr rhs);
    public static IntPtr rectangle_operator_add_point(IntPtr rect, IntPtr rhs);
    public static bool rectangle_operator_equal(IntPtr drect, IntPtr rhs);
    public static IntPtr rectangle_transform_new();
    public static IntPtr rectangle_transform_new1(IntPtr tform);
    public static IntPtr rectangle_transform_get_tform(IntPtr obj);
    public static IntPtr rectangle_transform_operator(IntPtr obj, IntPtr vector);
    public static IntPtr rectangle_transform_operator_d(IntPtr obj, IntPtr vector);
    public static void rectangle_transform_delete(IntPtr obj);
    public static IntPtr vector_new(VectorElementType type);
    public static void vector_delete(VectorElementType type, IntPtr vector);
    public static ErrorType vector_operator_left_shift(VectorElementType type, IntPtr vector, IntPtr ofstream);
    public static void vector_get_xyz_uint8_t(IntPtr vector, Byte& x, Byte& y, Byte& z);
    public static void vector_get_xyz_uint16_t(IntPtr vector, UInt16& x, UInt16& y, UInt16& z);
    public static void vector_get_xyz_uint32_t(IntPtr vector, UInt32& x, UInt32& y, UInt32& z);
    public static void vector_get_xyz_int8_t(IntPtr vector, SByte& x, SByte& y, SByte& z);
    public static void vector_get_xyz_int16_t(IntPtr vector, Int16& x, Int16& y, Int16& z);
    public static void vector_get_xyz_int32_t(IntPtr vector, Int32& x, Int32& y, Int32& z);
    public static void vector_get_xyz_float(IntPtr vector, Single& x, Single& y, Single& z);
    public static void vector_get_xyz_double(IntPtr vector, Double& x, Double& y, Double& z);
    public static void vector_set_xyz_uint8_t(IntPtr vector, byte x, byte y, byte z);
    public static void vector_set_xyz_uint16_t(IntPtr vector, ushort x, ushort y, ushort z);
    public static void vector_set_xyz_uint32_t(IntPtr vector, UInt32 x, UInt32 y, UInt32 z);
    public static void vector_set_xyz_int8_t(IntPtr vector, sbyte x, sbyte y, sbyte z);
    public static void vector_set_xyz_int16_t(IntPtr vector, short x, short y, short z);
    public static void vector_set_xyz_int32_t(IntPtr vector, int x, int y, int z);
    public static void vector_set_xyz_float(IntPtr vector, float x, float y, float z);
    public static void vector_set_xyz_double(IntPtr vector, double x, double y, double z);
    public static IntPtr vector_operator_add_uint8_t(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_add_uint16_t(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_add_uint32_t(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_add_int8_t(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_add_int16_t(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_add_int32_t(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_add_float(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_add_double(IntPtr left, IntPtr right, IntPtr& ret);
    public static IntPtr vector_operator_div_uint8_t(IntPtr vector, byte value, IntPtr& ret);
    public static IntPtr vector_operator_div_uint16_t(IntPtr vector, ushort value, IntPtr& ret);
    public static IntPtr vector_operator_div_uint32_t(IntPtr vector, UInt32 value, IntPtr& ret);
    public static IntPtr vector_operator_div_int8_t(IntPtr vector, sbyte value, IntPtr& ret);
    public static IntPtr vector_operator_div_int16_t(IntPtr vector, short value, IntPtr& ret);
    public static IntPtr vector_operator_div_int32_t(IntPtr vector, int value, IntPtr& ret);
    public static IntPtr vector_operator_div_float(IntPtr vector, float value, IntPtr& ret);
    public static IntPtr vector_operator_div_double(IntPtr vector, double value, IntPtr& ret);
    public static IntPtr sample_pair_new(UInt32 idx1, UInt32 idx2, double distance);
    public static UInt32 sample_pair_get_index1(IntPtr obj);
    public static UInt32 sample_pair_get_index2(IntPtr obj);
    public static double sample_pair_get_distance(IntPtr obj);
    public static void sample_pair_delete(IntPtr obj);
    public static void base_window_close_window(IntPtr window);
    public static void base_window_get_size(IntPtr window, UInt32& width, UInt32& height);
    public static void base_window_get_display_size(IntPtr window, UInt32& width, UInt32& height);
    public static void base_window_set_pos(IntPtr window, int x, int y);
    public static void base_window_set_size(IntPtr window, int width, int height);
    public static void base_window_set_title(IntPtr window, Byte[] title, int titleLength);
    public static void base_window_wait_until_closed(IntPtr window);
    public static void base_window_show(IntPtr window);
    public static IntPtr menu_item_separator_new();
    public static void menu_item_separator_delete(IntPtr ptr);
    public static IntPtr menu_item_text_new(Byte[] str, int strLength, IntPtr drawable_window, IntPtr event_handler, char hk);
    public static IntPtr menu_item_text_new(Byte[] str, int strLength, IntPtr mediator, char hk);
    public static void menu_item_text_delete(IntPtr ptr);
    public static UInt32 popup_menu_add_menu_item_menu_item_text(IntPtr popup_menu, IntPtr new_item);
    public static UInt32 popup_menu_add_menu_item_menu_item_separator(IntPtr popup_menu, IntPtr new_item);
    public static void scrollable_region_set_pos(IntPtr region, int x, int y);
    public static void scrollable_region_set_size(IntPtr region, UInt32 width, UInt32 height);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, Byte& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, UInt16& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, UInt32& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, SByte& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, Int16& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, Int32& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, Single& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, Double& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, RgbPixel& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, RgbAlphaPixel& color);
    public static ErrorType draw_line_canvas(IntPtr canvas, IntPtr p1, IntPtr p2, IntPtr area, Array2DType pixelType, HsiPixel& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, Byte& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, UInt16& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, UInt32& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, SByte& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, Int16& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, Int32& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, Single& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, Double& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, RgbPixel& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, RgbAlphaPixel& color);
    public static ErrorType draw_line_canvas_infinity(IntPtr canvas, IntPtr p1, IntPtr p2, Array2DType pixelType, HsiPixel& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, Byte& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, UInt16& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, UInt32& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, SByte& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, Int16& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, Int32& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, Single& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, Double& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, RgbPixel& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, RgbAlphaPixel& color);
    public static ErrorType draw_rectangle_canvas(IntPtr canvas, IntPtr rect, IntPtr area, Array2DType pixelType, HsiPixel& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, Byte& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, UInt16& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, UInt32& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, SByte& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, Int16& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, Int32& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, Single& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, Double& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, RgbPixel& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, RgbAlphaPixel& color);
    public static ErrorType draw_rectangle_canvas_infinity(IntPtr canvas, IntPtr rect, Array2DType pixelType, HsiPixel& color);
    public static IntPtr custom_drawable_window_new(bool resizable, bool undecorated, IntPtr constructor_function, IntPtr destructor_function, IntPtr on_window_resized_function, IntPtr on_keydown_function);
    public static void custom_drawable_window_delete(IntPtr window);
    public static int drawable_get_bottom(IntPtr drawable);
    public static int drawable_get_top(IntPtr drawable);
    public static int drawable_get_left(IntPtr drawable);
    public static int drawable_get_right(IntPtr drawable);
    public static UInt32 drawable_get_width(IntPtr drawable);
    public static UInt32 drawable_get_height(IntPtr drawable);
    public static void drawable_set_pos(IntPtr region, int x, int y);
    public static IntPtr perspective_window_overlay_dot_new(IntPtr v);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, Byte& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, UInt16& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, Int16& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, Int32& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, Single& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, Double& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, RgbPixel& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, RgbAlphaPixel& color);
    public static IntPtr perspective_window_overlay_dot_new2(IntPtr v, Array2DType type, HsiPixel& color);
    public static bool perspective_window_overlay_dot_p(IntPtr dot, IntPtr& vector);
    public static bool perspective_window_overlay_dot_color(IntPtr dot, RgbPixel& color);
    public static void perspective_window_overlay_dot_delete(IntPtr dot);
    public static IntPtr image_window_overlay_line_new();
    public static IntPtr image_window_overlay_line_new_rgb(IntPtr p1, IntPtr p2, RgbPixel pixel);
    public static IntPtr image_window_overlay_line_new_bgr(IntPtr p1, IntPtr p2, BgrPixel pixel);
    public static bool image_window_overlay_line_p1(IntPtr line, IntPtr& point);
    public static bool image_window_overlay_line_p2(IntPtr line, IntPtr& point);
    public static bool image_window_overlay_line_color(IntPtr line, RgbAlphaPixel& color);
    public static void image_window_overlay_line_delete(IntPtr line);
    public static void message_box(Byte[] title, int titleLength, Byte[] message, int messageLength);
    public static void save_file_box(IntPtr stringActionMediator);
    public static IntPtr void_action_mediator_new(IntPtr callback);
    public static void void_action_mediator_delete(IntPtr mediator);
    public static IntPtr string_action_mediator_new(IntPtr callback);
    public static void string_action_mediator_delete(IntPtr mediator);
    public static IntPtr click_action_mediator_new(IntPtr callback);
    public static void click_action_mediator_delete(IntPtr mediator);
    public static IntPtr uint32t_action_mediator_new(IntPtr callback);
    public static void uint32t_action_mediator_delete(IntPtr mediator);
    public static IntPtr image_display_overlay_rect_action_mediator_new(IntPtr callback);
    public static void image_display_overlay_rect_action_mediator_delete(IntPtr mediator);
    public static IntPtr image_display_new(IntPtr drawable_window);
    public static void image_display_delete(IntPtr display);
    public static void image_display_set_image_clicked_handler(IntPtr display, IntPtr mediator);
    public static void image_display_set_overlay_rects_changed_handler(IntPtr display, IntPtr mediator);
    public static void image_display_set_overlay_rect_selected_handler(IntPtr display, IntPtr mediator);
    public static void image_display_set_default_overlay_rect_color(IntPtr display, RgbAlphaPixel color);
    public static void image_display_set_default_overlay_rect_label(IntPtr display, Byte[] label, int labelLength);
    public static void image_display_clear_overlay(IntPtr display);
    public static ErrorType image_display_set_image(IntPtr detector, Array2DType imgType, IntPtr img);
    public static ErrorType image_display_add_overlay(IntPtr display, IntPtr vectorOfRect);
    public static IntPtr image_display_get_overlay_rects(IntPtr display);
    public static IntPtr image_display_get_default_overlay_rect_label(IntPtr display);
    public static void image_display_add_labelable_part_name(IntPtr display, Byte[] name, int labelLength);
    public static IntPtr image_display_overlay_rect_new();
    public static IntPtr image_display_overlay_rect_delete(IntPtr overlayRect);
    public static bool image_display_overlay_rect_get_crossed_out(IntPtr overlayRect);
    public static void image_display_overlay_rect_set_crossed_out(IntPtr overlayRect, bool ignore);
    public static IntPtr image_display_overlay_rect_get_label(IntPtr overlayRect);
    public static void image_display_overlay_rect_set_label(IntPtr overlayRect, Byte[] label, int labelLength);
    public static IntPtr image_display_overlay_rect_get_rect(IntPtr overlayRect);
    public static void image_display_overlay_rect_set_rect(IntPtr overlayRect, IntPtr rect);
    public static void image_display_overlay_rect_get_color(IntPtr overlayRect, RgbAlphaPixel& color);
    public static void image_display_overlay_rect_set_color(IntPtr overlayRect, RgbAlphaPixel color);
    public static void image_display_overlay_rect_get_parts_get_all(IntPtr box, IntPtr strings, IntPtr points);
    public static bool image_display_overlay_rect_get_parts_get_value(IntPtr overlayRect, Byte[] key, int keyLength, IntPtr& result);
    public static void image_display_overlay_rect_get_parts_set_value(IntPtr overlayRect, Byte[] key, int keyLength, IntPtr value);
    public static int image_display_overlay_rect_get_parts_get_size(IntPtr overlayRect);
    public static void image_display_overlay_rect_get_parts_clear(IntPtr overlayRect);
    public static void image_window_delete(IntPtr ptr);
    public static IntPtr image_window_new();
    public static IntPtr image_window_new_array2d1(Array2DType type, IntPtr image);
    public static IntPtr image_window_new_array2d2(Array2DType type, IntPtr image, Byte[] title, int titleLength);
    public static IntPtr image_window_new_matrix1(MatrixElementType type, IntPtr image);
    public static IntPtr image_window_new_matrix2(MatrixElementType type, IntPtr image, Byte[] title, int titleLength);
    public static ErrorType image_window_new_matrix_op1(ElementType matrixElementType, Array2DType type, IntPtr image, IntPtr& ret);
    public static ErrorType image_window_new_matrix_op2(ElementType matrixElementType, Array2DType type, IntPtr image, Byte[] title, int titleLength, IntPtr& ret);
    public static ErrorType image_window_new_matrix_op3(ElementType etype, MatrixElementType type, IntPtr img, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType image_window_new_matrix_op4(ElementType etype, MatrixElementType type, IntPtr img, int templateRows, int templateColumns, Byte[] title, int titleLength, IntPtr& ret);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, Byte& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, UInt16& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, UInt32& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, SByte& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, Int16& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, Int32& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, Single& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, Double& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, RgbPixel& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, RgbAlphaPixel& color);
    public static ErrorType image_window_add_overlay(IntPtr window, IntPtr rect, Array2DType type, HsiPixel& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, Byte& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, UInt16& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, UInt32& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, SByte& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, Int16& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, Int32& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, Single& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, Double& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, RgbPixel& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, RgbAlphaPixel& color);
    public static ErrorType image_window_add_overlay2(IntPtr window, IntPtr vectorOfRect, Array2DType type, HsiPixel& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, Byte& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, UInt16& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, UInt32& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, SByte& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, Int16& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, Int32& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, Single& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, Double& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, RgbPixel& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, RgbAlphaPixel& color);
    public static ErrorType image_window_add_overlay3(IntPtr window, IntPtr rect, Array2DType type, HsiPixel& color);
    public static ErrorType image_window_add_overlay4(IntPtr window, IntPtr line);
    public static ErrorType image_window_add_overlay5(IntPtr window, IntPtr vectorOfLine);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, Byte& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, UInt16& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, UInt32& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, SByte& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, Int16& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, Int32& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, Single& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, Double& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, RgbPixel& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, RgbAlphaPixel& color, IntPtr str);
    public static ErrorType image_window_add_overlay6(IntPtr window, IntPtr rect, Array2DType type, HsiPixel& color, IntPtr str);
    public static void image_window_clear_overlay(IntPtr window);
    public static bool image_window_get_next_double_click(IntPtr window, IntPtr& p);
    public static bool image_window_get_next_double_click2(IntPtr window, IntPtr& p, UInt32& mouseButton);
    public static bool image_window_is_closed(IntPtr window);
    public static ErrorType image_window_set_image_array2d(IntPtr window, Array2DType type, IntPtr image);
    public static ErrorType image_window_set_image_matrix_op_array2d(IntPtr window, ElementType matrixElementType, Array2DType type, IntPtr matrix);
    public static ErrorType image_window_set_image_matrix_op_matrix(IntPtr window, ElementType matrixElementType, MatrixElementType type, IntPtr matrix);
    public static ErrorType image_window_set_image_matrix(IntPtr window, MatrixElementType type, IntPtr matrix);
    public static IntPtr label_new(IntPtr drawable_window);
    public static void label_delete(IntPtr ptr);
    public static void label_set_text(IntPtr ptr, Byte[] text, int textLength);
    public static IntPtr list_box_new(IntPtr drawable_window);
    public static void list_box_delete(IntPtr list_box);
    public static ulong list_box_size(IntPtr list_box);
    public static void list_box_select(IntPtr list_box, UInt32 index);
    public static void list_box_unselect(IntPtr list_box, UInt32 index);
    public static void list_box_enable_multiple_select(IntPtr list_box);
    public static void list_box_disable_multiple_select(IntPtr list_box);
    public static bool list_box_multiple_select_enabled(IntPtr list_box);
    public static void list_box_set_click_handler(IntPtr list_box, IntPtr mediator);
    public static void list_box_load_stdstring(IntPtr list_box, IntPtr vector);
    public static IntPtr list_box_get_selected(IntPtr list_box);
    public static IntPtr menu_bar_new(IntPtr drawable_window);
    public static void menu_bar_delete(IntPtr ptr);
    public static void menu_bar_set_number_of_menus(IntPtr menubar, UInt32 num);
    public static void menu_bar_set_menu_name(IntPtr menubar, UInt32 idx, Byte[] name, int nameLength, char underline_ch);
    public static IntPtr menu_bar_menu(IntPtr menubar, UInt32 idx);
    public static IntPtr perspective_window_new();
    public static IntPtr perspective_window_new2(IntPtr vector);
    public static IntPtr perspective_window_new3(IntPtr vector, Byte[] title, int titleLength);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, Byte& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, UInt16& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, Int16& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, Int32& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, Single& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, Double& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, RgbPixel& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, RgbAlphaPixel& color);
    public static ErrorType perspective_window_add_overlay(IntPtr window, IntPtr p1, IntPtr p2, Array2DType type, HsiPixel& color);
    public static ErrorType perspective_window_add_overlay2(IntPtr window, IntPtr vector);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, Byte& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, UInt16& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, Int16& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, Int32& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, Single& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, Double& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, RgbPixel& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, RgbAlphaPixel& color);
    public static ErrorType perspective_window_add_overlay3(IntPtr window, IntPtr vector, Array2DType type, HsiPixel& color);
    public static ErrorType perspective_window_add_overlay4(IntPtr window, IntPtr vector);
    public static void perspective_window_delete(IntPtr ptr);
    public static IntPtr text_field_new(IntPtr drawable_window);
    public static void text_field_delete(IntPtr text_field);
    public static void text_field_get_text(IntPtr text_field, IntPtr& str);
    public static bool text_field_has_input_focus(IntPtr text_field);
    public static void text_field_select_all_text(IntPtr text_field);
    public static void text_field_give_input_focus(IntPtr text_field);
    public static void text_field_set_text(IntPtr text_field, Byte[] text, int textLength);
    public static void text_field_set_width(IntPtr text_field, UInt32 width);
    public static void text_field_set_text_modified_handler(IntPtr text_field, IntPtr mediator);
    public static void draw_surf_points(IntPtr win, IntPtr points);
    public static IntPtr interest_point_get_center(IntPtr surfpoint);
    public static double interest_point_get_laplacian(IntPtr surfpoint);
    public static double interest_point_get_scale(IntPtr surfpoint);
    public static double interest_point_get_score(IntPtr surfpoint);
    public static void interest_point_delete(IntPtr surfpoint);
    public static ErrorType get_surf_points(Array2DType type, IntPtr img, long max_points, double detection_threshold, IntPtr points);
    public static double surf_point_get_angle(IntPtr surfpoint);
    public static IntPtr surf_point_get_p(IntPtr surfpoint);
    public static IntPtr surf_point_get_des(IntPtr surfpoint);
    public static void surf_point_delete(IntPtr surfpoint);
    public static ErrorType surf_point_des_matrix_operator_left_shift(IntPtr matrix, IntPtr ofstream);
    public static ErrorType surf_point_des_matrix_nc(IntPtr matrix, Int32& ret);
    public static ErrorType surf_point_des_matrix_nr(IntPtr matrix, Int32& ret);
    public static ErrorType load_bmp(Array2DType type, IntPtr array, Byte[] path, int pathLength, IntPtr& error_message);
    public static ErrorType load_dng(Array2DType type, IntPtr array, Byte[] path, int pathLength, IntPtr& error_message);
    public static ErrorType load_image(Array2DType type, IntPtr array, Byte[] path, int pathLength, IntPtr& error_message);
    public static ErrorType load_image_matrix(MatrixElementType type, Byte[] path, int pathLength, IntPtr& matrix, IntPtr& error_message);
    public static ErrorType load_jpeg(Array2DType type, IntPtr array, Byte[] path, int pathLength, IntPtr& error_message);
    public static ErrorType load_png(Array2DType type, IntPtr array, Byte[] path, int pathLength, IntPtr& error_message);
    public static IntPtr correlation_tracker_new(UInt32 filterSize, UInt32 numScaleLevels, UInt32 scaleWindowSize, double regularizerSpace, double nuSpace, double regularizerScale, double nuScale, double scalePyramidAlpha);
    public static ErrorType correlation_tracker_start_track(IntPtr tracker, Array2DType imgType, IntPtr img, IntPtr p);
    public static IntPtr correlation_tracker_get_position(IntPtr tracker);
    public static ErrorType correlation_tracker_update_noscale(IntPtr tracker, Array2DType imgType, IntPtr img, IntPtr guess, Double& confident);
    public static ErrorType correlation_tracker_update_noscale2(IntPtr tracker, Array2DType imgType, IntPtr img, Double& confident);
    public static ErrorType correlation_tracker_update(IntPtr tracker, Array2DType imgType, IntPtr img, IntPtr guess, Double& confident);
    public static ErrorType correlation_tracker_update2(IntPtr tracker, Array2DType imgType, IntPtr img, Double& confident);
    public static void correlation_tracker_delete(IntPtr point);
    public static IntPtr compute_box_dimensions(double filterSize, double numScaleLevels);
    public static IntPtr create_grid_detection_template(IntPtr object_box, UInt32 cells_x, UInt32 cells_y);
    public static IntPtr get_frontal_face_detector();
    public static ErrorType frontal_face_detector_operator(IntPtr detector, Array2DType imgType, IntPtr img, double adjustThreshold, IntPtr dets);
    public static ErrorType frontal_face_detector_matrix_operator(IntPtr detector, MatrixElementType imgType, IntPtr img, double adjustThreshold, IntPtr dets);
    public static ErrorType frontal_face_detector_matrix_operator2(IntPtr detector, MatrixElementType imgType, IntPtr img, double adjustThreshold, IntPtr dets);
    public static void frontal_face_detector_delete(IntPtr detector);
    public static double full_detection_get_detection_confidence(IntPtr detection);
    public static void full_detection_set_detection_confidence(IntPtr detection, double detection_confidence);
    public static IntPtr full_detection_get_rect(IntPtr detection);
    public static void full_detection_set_rect(IntPtr detection, IntPtr rect);
    public static ulong full_detection_get_weight_index(IntPtr detection);
    public static void full_detection_set_weight_index(IntPtr detection, ulong weight_index);
    public static void full_detection_delete(IntPtr detection);
    public static IntPtr full_object_detection_new();
    public static IntPtr full_object_detection_new2(IntPtr rect);
    public static IntPtr full_object_detection_new3(IntPtr rect, IntPtr points);
    public static UInt32 full_object_detection_num_parts(IntPtr predictor);
    public static IntPtr full_object_detection_get_rect(IntPtr predictor);
    public static IntPtr full_object_detection_part(IntPtr predictor, UInt32 idx);
    public static void full_object_detection_delete(IntPtr point);
    public static IntPtr mmod_rect_new();
    public static IntPtr mmod_rect_new2(IntPtr rectangle);
    public static bool mmod_rect_get_ignore(IntPtr mmod, Boolean& ignore);
    public static void mmod_rect_set_ignore(IntPtr mmod, bool ignore);
    public static bool mmod_rect_get_detection_confidence(IntPtr mmod, Double& confidence);
    public static void mmod_rect_set_detection_confidence(IntPtr mmod, double confidence);
    public static bool mmod_rect_get_rect(IntPtr mmod, IntPtr& rect);
    public static void mmod_rect_set_rect(IntPtr mmod, IntPtr rect);
    public static bool mmod_rect_get_label(IntPtr mmod, IntPtr& label);
    public static void mmod_rect_set_label(IntPtr mmod, IntPtr label);
    public static void mmod_rect_delete(IntPtr mmod);
    public static double rect_detection_get_detection_confidence(IntPtr detection);
    public static void rect_detection_set_detection_confidence(IntPtr detection, double detection_confidence);
    public static IntPtr rect_detection_get_rect(IntPtr detection);
    public static void rect_detection_set_rect(IntPtr detection, IntPtr rect);
    public static ulong rect_detection_get_weight_index(IntPtr detection);
    public static void rect_detection_set_weight_index(IntPtr detection, ulong weight_index);
    public static void rect_detection_delete(IntPtr detection);
    public static void render_face_detections(IntPtr dets, RgbPixel& color, IntPtr vectorOfLine);
    public static void render_face_detections2(IntPtr dets, RgbPixel& color, IntPtr vectorOfLine);
    public static ErrorType scan_fhog_pyramid_new(PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr& pyramid);
    public static void scan_fhog_pyramid_delete(PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr pyramid);
    public static ErrorType scan_fhog_pyramid_set_detection_window_size(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, UInt32 width, UInt32 height);
    public static ErrorType scan_fhog_pyramid_set_nuclear_norm_regularization_strength(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, double strength);
    public static ErrorType scan_fhog_pyramid_evaluate_detectors(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr[] objects, int objects_num, MatrixElementType elementType, IntPtr image, double adjust_threshold, IntPtr& ret);
    public static ErrorType scan_fhog_pyramid_num_separable_filters(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, UInt32 weight_index, UInt32& ret);
    public static ErrorType scan_fhog_pyramid_threshold_filter_singular_values(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, double thresh, UInt32 weight_index, IntPtr& ret);
    public static IntPtr shape_predictor_new();
    public static UInt32 shape_predictor_num_parts(IntPtr predictor);
    public static UInt32 shape_predictor_num_features(IntPtr predictor);
    public static ErrorType serialize_shape_predictor(IntPtr predictor, Byte[] filName, int filNameLength, IntPtr& errorMessage);
    public static ErrorType deserialize_shape_predictor(Byte[] filName, int fileNameLength, IntPtr& predictor, IntPtr& errorMessage);
    public static ErrorType deserialize_shape_predictor_proxy(IntPtr proxy_deserialize, IntPtr& predictor, IntPtr& errorMessage);
    public static ErrorType shape_predictor_operator(IntPtr detector, Array2DType imgType, IntPtr img, IntPtr rect, IntPtr& fullObjDetect);
    public static ErrorType shape_predictor_matrix_operator(IntPtr detector, MatrixElementType imgType, IntPtr img, IntPtr rect, IntPtr& fullObjDetect);
    public static ErrorType shape_predictor_operator_mmod_rect(IntPtr detector, Array2DType imgType, IntPtr img, IntPtr rect, IntPtr& fullObjDetect);
    public static ErrorType shape_predictor_matrix_operator_mmod_rect(IntPtr detector, MatrixElementType imgType, IntPtr img, IntPtr rect, IntPtr& fullObjDetect);
    public static void shape_predictor_delete(IntPtr point);
    public static ErrorType shape_predictor_test_shape_predictor(IntPtr predictor, Array2DType imgType, IntPtr array_array2d, IntPtr objects, IntPtr scales, Double& ret);
    public static IntPtr shape_predictor_trainer_new();
    public static void shape_predictor_trainer_delete(IntPtr trainer);
    public static UInt32 shape_predictor_trainer_get_cascade_depth(IntPtr trainer);
    public static void shape_predictor_trainer_set_cascade_depth(IntPtr trainer, UInt32 depth);
    public static UInt32 shape_predictor_trainer_get_tree_depth(IntPtr trainer);
    public static void shape_predictor_trainer_set_tree_depth(IntPtr trainer, UInt32 depth);
    public static UInt32 shape_predictor_trainer_get_num_trees_per_cascade_level(IntPtr trainer);
    public static void shape_predictor_trainer_set_num_trees_per_cascade_level(IntPtr trainer, UInt32 num);
    public static double shape_predictor_trainer_get_nu(IntPtr trainer);
    public static void shape_predictor_trainer_set_nu(IntPtr trainer, double nu);
    public static UInt32 shape_predictor_trainer_get_oversampling_amount(IntPtr trainer);
    public static void shape_predictor_trainer_set_oversampling_amount(IntPtr trainer, UInt32 amount);
    public static double shape_predictor_trainer_get_oversampling_translation_jitter(IntPtr trainer);
    public static void shape_predictor_trainer_set_oversampling_translation_jitter(IntPtr trainer, double amount);
    public static UInt32 shape_predictor_trainer_get_feature_pool_size(IntPtr trainer);
    public static void shape_predictor_trainer_set_feature_pool_size(IntPtr trainer, UInt32 size);
    public static double shape_predictor_trainer_get_lambda(IntPtr trainer);
    public static void shape_predictor_trainer_set_lambda(IntPtr trainer, double lambda);
    public static UInt32 shape_predictor_trainer_get_num_test_splits(IntPtr trainer);
    public static void shape_predictor_trainer_set_num_test_splits(IntPtr trainer, UInt32 num);
    public static UInt32 shape_predictor_trainer_get_num_threads(IntPtr trainer);
    public static void shape_predictor_trainer_set_num_threads(IntPtr trainer, UInt32 num);
    public static double shape_predictor_trainer_get_feature_pool_region_padding(IntPtr trainer);
    public static void shape_predictor_trainer_set_feature_pool_region_padding(IntPtr trainer, double lambda);
    public static PaddingMode shape_predictor_trainer_get_padding_mode(IntPtr trainer);
    public static void shape_predictor_trainer_set_padding_mode(IntPtr trainer, PaddingMode mode);
    public static IntPtr shape_predictor_trainer_get_random_seed(IntPtr trainer);
    public static void shape_predictor_trainer_set_random_seed(IntPtr trainer, IntPtr seed);
    public static void shape_predictor_trainer_be_verbose(IntPtr trainer);
    public static void shape_predictor_trainer_be_quiet(IntPtr trainer);
    public static ErrorType shape_predictor_trainer_train(IntPtr trainer, Array2DType imgType, IntPtr array_array2d, IntPtr objects, IntPtr& predictor);
    public static IntPtr test_box_overlap_new(double iou_thresh, double percent_covered_thresh);
    public static void test_box_overlap_delete(IntPtr obj);
    public static double test_box_overlap_get_iou_thresh(IntPtr overlap);
    public static double test_box_overlap_get_percent_covered_thresh(IntPtr overlap);
    public static bool test_box_overlap_operator(IntPtr overlap, IntPtr a, IntPtr b);
    public static ErrorType save_bmp(Array2DType type, IntPtr array, Byte[] path, int pathLength);
    public static ErrorType save_bmp_matrix(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumn, Byte[] path, int pathLength);
    public static ErrorType save_dng(Array2DType type, IntPtr array, Byte[] path, int pathLength);
    public static ErrorType save_dng_matrix(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumn, Byte[] path, int pathLength);
    public static ErrorType save_jpeg(Array2DType type, IntPtr array, Byte[] path, int pathLength, int quality);
    public static ErrorType save_jpeg_matrix(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumn, Byte[] path, int pathLength, int quality);
    public static ErrorType save_png(Array2DType type, IntPtr array, Byte[] path, int pathLength);
    public static ErrorType save_png_matrix(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumn, Byte[] path, int pathLength);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, Byte& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, UInt16& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, UInt32& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, SByte& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, Int16& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, Int32& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, Single& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, Double& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, BgrPixel& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, RgbPixel& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, RgbAlphaPixel& color);
    public static ErrorType assign_all_pixels(Array2DType out_type, IntPtr out_img, Array2DType in_type, HsiPixel& color);
    public static ErrorType assign_image(Array2DType out_type, IntPtr out_img, Array2DType in_type, IntPtr in_img);
    public static ErrorType assign_image_matrix(MatrixElementType out_type, IntPtr out_img, MatrixElementType in_type, IntPtr in_img);
    public static IntPtr chip_details_new();
    public static IntPtr chip_details_new2(IntPtr drect, IntPtr dims);
    public static IntPtr chip_details_new3(IntPtr rect, IntPtr dims);
    public static IntPtr chip_details_new4(IntPtr rect, UInt32 size);
    public static IntPtr chip_details_new5(IntPtr rect, UInt32 size, double angle);
    public static bool chip_details_angle(IntPtr chip, Double& angle);
    public static bool chip_details_cols(IntPtr chip, UInt32& cols);
    public static bool chip_details_rect(IntPtr chip, IntPtr& rect);
    public static bool chip_details_rows(IntPtr chip, UInt32& rows);
    public static void chip_details_delete(IntPtr obj);
    public static IntPtr chip_dims_new(UInt32 rows, UInt32 cols);
    public static bool chip_dims_get_cols(IntPtr chip, UInt32& cols);
    public static void chip_dims_set_cols(IntPtr chip, UInt32 cols);
    public static bool chip_dims_get_rows(IntPtr chip, UInt32& rows);
    public static void chip_dims_set_rows(IntPtr chip, UInt32 rows);
    public static void chip_dims_delete(IntPtr obj);
    public static ErrorType heatmap(Array2DType type, IntPtr img, IntPtr& matrix);
    public static ErrorType heatmap2(Array2DType type, IntPtr img, double maxVal, double minVal, IntPtr& matrix);
    public static ErrorType heatmap_matrix(MatrixElementType type, IntPtr img, int templateRow, int templateColumn, IntPtr& matrix);
    public static ErrorType heatmap2_matrix(MatrixElementType type, IntPtr img, int templateRow, int templateColumn, double maxVal, double minVal, IntPtr& matrix);
    public static ErrorType jet(Array2DType type, IntPtr img, IntPtr& matrix);
    public static ErrorType jet2(Array2DType type, IntPtr img, double maxVal, double minVal, IntPtr& matrix);
    public static ErrorType jet_matrix(MatrixElementType type, IntPtr img, int templateRow, int templateColumn, IntPtr& matrix);
    public static ErrorType jet2_matrix(MatrixElementType type, IntPtr img, int templateRow, int templateColumn, double maxVal, double minVal, IntPtr& matrix);
    public static void colormap_heat(double value, double min_val, double max_val, RgbPixel& pixel);
    public static void colormap_jet(double value, double min_val, double max_val, RgbPixel& pixel);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, Byte& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, UInt16& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, UInt32& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, SByte& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, Int16& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, Int32& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, Single& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, Double& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, RgbPixel& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, RgbAlphaPixel& color);
    public static ErrorType draw_line(Array2DType pixelType, IntPtr image, IntPtr p1, IntPtr p2, HsiPixel& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, Byte& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, UInt16& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, UInt32& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, SByte& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, Int16& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, Int32& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, Single& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, Double& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, RgbPixel& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, RgbAlphaPixel& color);
    public static ErrorType draw_line_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr p1, IntPtr p2, HsiPixel& color);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, Byte& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, UInt16& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, UInt32& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, SByte& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, Int16& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, Int32& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, Single& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, Double& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, RgbPixel& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, RgbAlphaPixel& color, UInt32 thickness);
    public static ErrorType draw_rectangle(Array2DType pixelType, IntPtr image, IntPtr rect, HsiPixel& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Byte& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, UInt16& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, UInt32& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, SByte& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Int16& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Int32& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Single& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Double& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, RgbPixel& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, RgbAlphaPixel& color, UInt32 thickness);
    public static ErrorType draw_rectangle_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, HsiPixel& color, UInt32 thickness);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, Byte& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, UInt16& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, UInt32& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, SByte& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, Int16& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, Int32& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, Single& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, Double& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, RgbPixel& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, RgbAlphaPixel& color);
    public static ErrorType fill_rect(Array2DType pixelType, IntPtr image, IntPtr rect, HsiPixel& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Byte& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, UInt16& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, UInt32& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, SByte& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Int16& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Int32& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Single& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, Double& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, RgbPixel& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, RgbAlphaPixel& color);
    public static ErrorType fill_rect_matrix(MatrixElementType elementType, IntPtr matrix, IntPtr rect, HsiPixel& color);
    public static ErrorType tile_images(Array2DType inType, IntPtr array, IntPtr& ret_image);
    public static ErrorType tile_images_matrix(MatrixElementType in_type, IntPtr images, IntPtr& ret_image);
    public static ErrorType sobel_edge_detector(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr horz, IntPtr vert);
    public static ErrorType suppress_non_maximum_edges(Array2DType inType, IntPtr horz, IntPtr vert, Array2DType outType, IntPtr outImg);
    public static ErrorType equalize_histogram_array2d(Array2DType img_type, IntPtr img);
    public static ErrorType equalize_histogram_array2d_2(Array2DType in_type, IntPtr in_img, Array2DType out_type, IntPtr out_img);
    public static ErrorType draw_fhog(MatrixElementType img_type, IntPtr hog, int cell_draw_size, float min_response_threshold, IntPtr& out_matrix);
    public static ErrorType draw_fhog_object_detector_scan_fhog_pyramid(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, UInt32 weightIndex, int cellDrawSize, IntPtr& out_matrix);
    public static ErrorType extract_fhog_features(Array2DType img_type, IntPtr img, MatrixElementType hog_type, IntPtr hog, int cell_size, int filter_rows_padding, int filter_cols_padding);
    public static ErrorType extract_fhog_features_array(Array2DType img_type, IntPtr img, Array2DType hog_type, IntPtr hog, int cell_size, int filter_rows_padding, int filter_cols_padding);
    public static ErrorType extract_fhog_features2(Array2DType img_type, IntPtr img, MatrixElementType hog_type, int cell_size, int filter_rows_padding, int filter_cols_padding, IntPtr& hog);
    public static IntPtr image_to_fhog(IntPtr p, int cell_size, int filter_rows_padding, int filter_cols_padding);
    public static ErrorType find_candidate_object_locations(Array2DType type, IntPtr img, IntPtr rect, MatrixElementType matrixElementType, IntPtr kvals, UInt32 minSize, UInt32 maxMergingIterations);
    public static IntPtr hough_transform_new(UInt32 size);
    public static bool hough_transform_nc(IntPtr obj, Int32& ret);
    public static bool hough_transform_nr(IntPtr obj, Int32& ret);
    public static bool hough_transform_size(IntPtr obj, UInt32& ret);
    public static ErrorType hough_transform_get_best_hough_point(IntPtr obj, IntPtr p, Array2DType type, IntPtr img, IntPtr& point);
    public static ErrorType hough_transform_operator(IntPtr obj, Array2DType in_type, IntPtr in_img, Array2DType out_type, IntPtr out_img, IntPtr rectangle);
    public static IntPtr hough_transform_get_line(IntPtr obj, IntPtr p);
    public static bool hough_transform_get_rect(IntPtr obj, IntPtr& rect);
    public static void hough_transform_delete(IntPtr obj);
    public static ErrorType create_tiled_pyramid(MatrixElementType img_type, IntPtr img, PyramidType pyramidType, UInt32 pyramidRate, UInt32 padding, UInt32 outer_padding, IntPtr& out_img, IntPtr& rects);
    public static ErrorType add_image_left_right_flips_rectangle(MatrixElementType elementType, IntPtr images, IntPtr objects);
    public static ErrorType flip_image_left_right(Array2DType type, IntPtr img);
    public static ErrorType flip_image_left_right2(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr outImg);
    public static ErrorType flip_image_up_down(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr outImg);
    public static IntPtr flip_rect_left_right(IntPtr rect, IntPtr window);
    public static ErrorType pyramid_up(Array2DType type, IntPtr img);
    public static ErrorType pyramid_up_matrix(MatrixElementType type, IntPtr img);
    public static ErrorType pyramid_up_matrix2(MatrixElementType type, IntPtr img, IntPtr pyramid_down, UInt32 pyramid_rate, IntPtr& matrix);
    public static ErrorType pyramid_up_pyramid_matrix(PyramidType pyramid_type, UInt32 pyramid_rate, MatrixElementType elementType, IntPtr image);
    public static ErrorType resize_image(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr outImg);
    public static ErrorType resize_image2(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr outImg, InterpolationTypes interpolationTypes);
    public static ErrorType resize_image3(Array2DType inType, IntPtr inImg, double scaleSize);
    public static ErrorType resize_image_matrix(MatrixElementType type, IntPtr matrix, UInt32 templateRows, UInt32 templateColumns, IntPtr out_matrix, InterpolationTypes interpolationTypes);
    public static ErrorType resize_image_matrix_scale(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, double scaleSize);
    public static ErrorType rotate_image(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr outImg, double angle);
    public static ErrorType rotate_image2(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr outImg, double angle, InterpolationTypes interpolationTypes);
    public static ErrorType transform_image(Array2DType inType, IntPtr inImg, Array2DType outType, IntPtr outImg, PointMappingTypes pointMappingTypes, IntPtr mappingObj, InterpolationTypes interpolationTypes);
    public static ErrorType get_face_chip_details(IntPtr dets, UInt32 size, double padding, IntPtr vectoChips);
    public static ErrorType get_face_chip_details2(IntPtr det, UInt32 size, double padding, IntPtr& chips);
    public static ErrorType extract_image_chip(Array2DType img_type, IntPtr in_img, IntPtr chip_location, Array2DType array_type, IntPtr out_chip);
    public static ErrorType extract_image_chip2(Array2DType img_type, IntPtr in_img, IntPtr chip_location, Array2DType array_type, InterpolationTypes type, IntPtr out_chip);
    public static ErrorType extract_image_chips(Array2DType img_type, IntPtr in_img, IntPtr chip_locations, Array2DType array_type, IntPtr array);
    public static ErrorType extract_image_chips_matrix(MatrixElementType img_type, IntPtr in_img, IntPtr chip_locations, MatrixElementType array_type, IntPtr array);
    public static ErrorType extract_image_chip_matrix(MatrixElementType img_type, IntPtr in_img, IntPtr chip_location, MatrixElementType array_type, IntPtr out_chip);
    public static ErrorType extract_image_chip_matrix2(MatrixElementType img_type, IntPtr in_img, IntPtr chip_location, MatrixElementType array_type, InterpolationTypes type, IntPtr out_chip);
    public static ErrorType jitter_image(MatrixElementType in_type, IntPtr in_img, IntPtr rand, IntPtr& out_img);
    public static ErrorType upsample_image_dataset_pyramid_down_rect(UInt32 pyramid_rate, MatrixElementType elementType, IntPtr images, IntPtr objects, UInt32 maxImageSize);
    public static ErrorType upsample_image_dataset_pyramid_down_mmod_rect(UInt32 pyramid_rate, MatrixElementType elementType, IntPtr images, IntPtr objects, UInt32 maxImageSize);
    public static ErrorType extract_image_4points(Array2DType type, IntPtr array, IntPtr[] points, int width, int height, IntPtr& output);
    public static ErrorType extract_image_4points_matrix(MatrixElementType element_type, IntPtr matrix, int templateRows, int templateColumns, IntPtr[] points, int width, int height, IntPtr& output);
    public static ErrorType pyramid_down_new(UInt32 pyramidRate, IntPtr& pyramid);
    public static void pyramid_down_delete(UInt32 pyramidRate, IntPtr pyramid);
    public static ErrorType pyramid_down_rect_up(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, IntPtr& ret);
    public static ErrorType pyramid_down_rect_up_rectangle(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, IntPtr& ret);
    public static ErrorType pyramid_down_rect_up2(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, UInt32 levels, IntPtr& ret);
    public static ErrorType pyramid_down_rect_up2_rectangle(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, UInt32 levels, IntPtr& ret);
    public static ErrorType pyramid_down_rect_down(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, IntPtr& ret);
    public static ErrorType pyramid_down_rect_down_rectangle(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, IntPtr& ret);
    public static ErrorType pyramid_down_rect_down2(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, UInt32 levels, IntPtr& ret);
    public static ErrorType pyramid_down_rect_down2_rectangle(IntPtr pyramid, UInt32 pyramidRate, IntPtr rect, UInt32 levels, IntPtr& ret);
    public static ErrorType apply_random_color_offset_matrix(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, IntPtr rand);
    public static ErrorType disturb_colors_matrix(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, IntPtr rand, double gamma_magnitude, double color_magnitude);
    public static IntPtr random_cropper_new();
    public static bool random_cropper_get_background_crops_fraction(IntPtr cropper, Double& ret);
    public static bool random_cropper_get_chip_dims(IntPtr cropper, IntPtr& chip);
    public static bool random_cropper_get_max_object_size(IntPtr cropper, Double& ret);
    public static bool random_cropper_get_max_rotation_degrees(IntPtr cropper, Double& ret);
    public static bool random_cropper_get_min_object_length_long_dim(IntPtr cropper, Int32& ret);
    public static bool random_cropper_get_min_object_length_short_dim(IntPtr cropper, Int32& ret);
    public static bool random_cropper_get_randomly_flip(IntPtr cropper, Boolean& ret);
    public static bool random_cropper_get_translate_amount(IntPtr cropper, Double& ret);
    public static void random_cropper_set_chip_dims(IntPtr cropper, UInt32 rows, UInt32 cols);
    public static void random_cropper_set_max_object_size(IntPtr cropper, double value);
    public static void random_cropper_set_min_object_size(IntPtr cropper, int longDim, int shortDim);
    public static void random_cropper_set_randomly_flip(IntPtr cropper, bool value);
    public static void random_cropper_set_translate_amount(IntPtr cropper, double value);
    public static void random_cropper_set_background_crops_fraction(IntPtr cropper, double value);
    public static void random_cropper_set_max_rotation_degrees(IntPtr cropper, double value);
    public static void random_cropper_set_seed(IntPtr cropper, IntPtr value);
    public static ErrorType random_cropper_operator(IntPtr cropper, UInt32 numCrops, MatrixElementType type, IntPtr images, IntPtr rects, IntPtr crops, IntPtr cropRects);
    public static ErrorType random_cropper_operator2(IntPtr cropper, MatrixElementType type, IntPtr image, IntPtr rects, IntPtr& crop, IntPtr cropRects);
    public static void random_cropper_operator_left_shift(IntPtr obj, IntPtr ofstream);
    public static void random_cropper_delete(IntPtr point);
    public static ErrorType gaussian_blur(Array2DType inType, IntPtr inImg, Array2DType outtype, IntPtr outImg, double sigma, int maxSize);
    public static ErrorType sum_filter(Array2DType inType, IntPtr inImg, Array2DType outtype, IntPtr outImg, IntPtr rect);
    public static IntPtr custom_logger_new(IntPtr logFunc);
    public static void custom_logger_delete(IntPtr logger);
    public static void custom_set_all_logging_output_hooks(IntPtr logger);
    public static IntPtr logger_new(Byte[] name, int nameLength);
    public static void logger_delete(IntPtr logger);
    public static void logger_set_level(IntPtr logger, LogLevel log_level);
    public static void logger_operator_left_shift(IntPtr logger, LogLevel log_level, Byte[] message, int messageLength);
    public static IntPtr matrix_new(MatrixElementType matrixElementType);
    public static IntPtr matrix_new1(MatrixElementType matrixElementType, int row, int column);
    public static IntPtr matrix_new2(MatrixElementType matrixElementType, int row, int column, IntPtr src);
    public static IntPtr matrix_new3(MatrixElementType matrixElementType, int row, int column, Byte* src);
    public static ErrorType matrix_new4(MatrixElementType matrixElementType, UInt32 templateRows, UInt32 templateColumns, IntPtr& ret);
    public static ErrorType matrix_new5(MatrixElementType matrixElementType, UInt32 templateRows, UInt32 templateColumns, IntPtr vector, IntPtr& ret);
    public static IntPtr matrix_new6(MatrixElementType matrixElementType, int row, int column, int stride, IntPtr src);
    public static void matrix_delete(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns);
    public static IntPtr matrix_clone(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns);
    public static ErrorType matrix_deserialize_matrix_proxy(IntPtr deserializeProxy, MatrixElementType matrixElementType, int templateRows, int templateColumns, IntPtr& matrix, IntPtr& errorMessage);
    public static ErrorType matrix_begin(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns, IntPtr& begin);
    public static ErrorType matrix_end(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns, IntPtr& end);
    public static bool matrix_nc(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns, Int32& ret);
    public static bool matrix_nr(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns, Int32& ret);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Byte[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt16[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt32[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, SByte[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int16[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int32[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Single[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Double[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, RgbPixel[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, BgrPixel[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, RgbAlphaPixel[] array);
    public static int matrix_operator_array(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, HsiPixel[] array);
    public static ErrorType matrix_operator_left_shift(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, IntPtr ofstream);
    public static bool matrix_size(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_set_size(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, int value);
    public static ErrorType matrix_set_size2(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, int rows, int cols);
    public static ErrorType matrix_operator_get_one_row_column(MatrixElementType matrixElementType, IntPtr matrix, int index, int templateRows, int templateColumns, IntPtr ret);
    public static ErrorType matrix_operator_set_one_row_column(MatrixElementType matrixElementType, IntPtr matrix, int index, int templateRows, int templateColumns, IntPtr value);
    public static ErrorType matrix_operator_get_row_column(MatrixElementType matrixElementType, IntPtr matrix, int row, int column, int templateRows, int templateColumns, IntPtr ret);
    public static ErrorType matrix_operator_set_row_column(MatrixElementType matrixElementType, IntPtr matrix, int row, int column, int templateRows, int templateColumns, IntPtr value);
    public static ErrorType matrix_operator_add(MatrixElementType matrixElementType, IntPtr lhs, IntPtr rhs, int leftTemplateRows, int leftTemplateColumns, int rightTemplateRows, int rightTemplateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_negative(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_invert(MatrixElementType matrixElementType, IntPtr matrix, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_subtract(MatrixElementType matrixElementType, IntPtr lhs, IntPtr rhs, int leftTemplateRows, int leftTemplateColumns, int rightTemplateRows, int rightTemplateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_subtract_dpoint(MatrixElementType matrixElementType, IntPtr lhs, IntPtr rhs, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_multiply(MatrixElementType matrixElementType, IntPtr lhs, IntPtr rhs, int leftTemplateRows, int leftTemplateColumns, int rightTemplateRows, int rightTemplateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_multiply_dpoint(MatrixElementType matrixElementType, IntPtr lhs, IntPtr rhs, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_multiply_left_numeric(NumericType numericType, IntPtr lhs, MatrixElementType type, IntPtr rhs, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_multiply_right_numeric(MatrixElementType type, IntPtr lhs, int templateRows, int templateColumns, NumericType numericType, IntPtr rhs, IntPtr& ret);
    public static ErrorType matrix_operator_divide(MatrixElementType matrixElementType, IntPtr lhs, IntPtr rhs, int leftTemplateRows, int leftTemplateColumns, int rightTemplateRows, int rightTemplateColumns, IntPtr& ret);
    public static ErrorType matrix_operator_divide_double(MatrixElementType matrixElementType, IntPtr lhs, double rhs, int leftTemplateRows, int leftTemplateColumns, IntPtr& ret);
    public static ErrorType mat_array2d(Array2DType type, IntPtr array, IntPtr& ret);
    public static ErrorType mat_mat_OpStdVectToMat(MatrixElementType type, IntPtr vector, int templateRows, int templateColumns, IntPtr& ret);
    public static void mat_StdVect_int8_t(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_int16_t(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_int32_t(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_uint8_t(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_uint16_t(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_uint32_t(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_float(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_double(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_rgb_pixel(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_bgr_pixel(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_hsi_pixel(IntPtr vector, IntPtr& ret);
    public static void mat_StdVect_rgb_alpha_pixel(IntPtr vector, IntPtr& ret);
    public static ErrorType mat_matrix(Array2DType srcType, IntPtr src, int templateRows, int templateColumns, MatrixElementType dstType, IntPtr& ret);
    public static ErrorType matrix_round(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, IntPtr& ret);
    public static void matrix_op_op_array2d_to_mat_delete(Array2DType type, IntPtr obj);
    public static void matrix_op_op_heatmap_delete(Array2DType type, IntPtr obj);
    public static void matrix_op_op_jet_delete(Array2DType type, IntPtr obj);
    public static void matrix_op_op_std_vect_to_mat_delete(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns);
    public static void matrix_op_op_std_vect_to_mat_value_delete(Array2DType type, IntPtr obj);
    public static void matrix_op_op_trans_delete(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns);
    public static void matrix_op_op_join_rows_delete(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns);
    public static ErrorType matrix_op_op_array2d_to_mat_nc(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_heatmap_nc(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_heatmap_nc_matrix(MatrixElementType type, IntPtr img, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_jet_nc(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_jet_nc_matrix(MatrixElementType type, IntPtr img, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_std_vect_to_mat_nc(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_std_vect_to_mat_value_nc(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_trans_nc(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_join_rows_nc(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_array2d_to_mat_nr(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_heatmap_nr(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_heatmap_nr_matrix(MatrixElementType type, IntPtr img, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_jet_nr(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_jet_nr_matrix(MatrixElementType type, IntPtr img, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_std_vect_to_mat_nr(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_std_vect_to_mat_value_nr(Array2DType type, IntPtr obj, Int32& ret);
    public static ErrorType matrix_op_op_trans_nr(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_join_rows_nr(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_op_op_jet_operator(Array2DType type, IntPtr matrix, int r, int c, IntPtr rgbPixel);
    public static ErrorType matrix_op_op_heatmap_operator(Array2DType type, IntPtr matrix, int r, int c, IntPtr rgbPixel);
    public static ErrorType matrix_op_op_std_vect_to_mat_operator_left_shift(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, IntPtr stream);
    public static ErrorType matrix_op_op_std_vect_to_mat_value_operator_left_shift(Array2DType type, IntPtr obj, IntPtr stream);
    public static ErrorType matrix_op_op_trans_operator_left_shift(MatrixElementType type, IntPtr obj, int templateRows, int templateColumns, IntPtr stream);
    public static IntPtr linspace(double start, double end, int num);
    public static ErrorType matrix_join_rows(MatrixElementType type, IntPtr matrix1, IntPtr matrix2, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Byte& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt16& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt32& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, SByte& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int16& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Single& ret);
    public static ErrorType matrix_length(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Double& ret);
    public static void matrix_length_point(IntPtr point, Int32& ret);
    public static void matrix_length_dpoint(IntPtr point, Double& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Byte& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt16& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt32& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, SByte& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int16& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Single& ret);
    public static ErrorType matrix_length_squared(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Double& ret);
    public static ErrorType matrix_cast(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, MatrixElementType desttype, IntPtr& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Byte& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt16& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt32& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, SByte& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int16& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Single& ret);
    public static ErrorType matrix_max(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Double& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Byte& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt16& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, UInt32& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, SByte& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int16& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Int32& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Single& ret);
    public static ErrorType matrix_min(MatrixElementType type, IntPtr matrix, int templateRows, int templateColumns, Double& ret);
    public static ErrorType matrix_mean(MatrixElementType dstType, IntPtr matrix_op, int templateRows, int templateColumns, ElementType type, MatrixElementType srcType, IntPtr& point);
    public static ErrorType matrix_max_point(Array2DType array2DType, IntPtr matrix_op, IntPtr& point);
    public static ErrorType matrix_max_pointwise_matrix(MatrixElementType type, IntPtr matrix1, IntPtr matrix2, int templateRows, int templateColumns, IntPtr& ret);
    public static ErrorType matrix_randm(int nr, int nc, IntPtr& ret);
    public static ErrorType matrix_trans(MatrixElementType elementType, IntPtr matrix, int templateRows, int templateColumns, IntPtr& matrix_op);
    public static ErrorType fliplr(MatrixElementType elementType, IntPtr matrix, int templateRows, int templateColumns, IntPtr& ret);
    public static IntPtr sleep(UInt32 milliseconds);
    public static IntPtr mlp_kernel_new(MlpKernelType kernel_type, int nodes_in_input_layer, int nodes_in_first_hidden_layer, int nodes_in_second_hidden_layer, int nodes_in_output_layer, double alpha, double momentum);
    public static ErrorType mlp_kernel_train(MlpKernelType kernel_type, IntPtr kernel, IntPtr example_in, double example_out);
    public static ErrorType mlp_kernel_train_matrix(MlpKernelType kernel_type, IntPtr kernel, IntPtr example_in, IntPtr example_out);
    public static ErrorType mlp_kernel_operator(MlpKernelType kernel_type, IntPtr kernel, MatrixElementType type, IntPtr data, IntPtr& ret_mat);
    public static void mlp_kernel_delete(MlpKernelType kernel_type, IntPtr kernel);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, Byte& ret);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, UInt16& ret);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, UInt32& ret);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, SByte& ret);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, Int16& ret);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, Int32& ret);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, Double& ret);
    public static ErrorType assignment_cost(MatrixElementType elementType, IntPtr cost, IntPtr assignments, Single& ret);
    public static ErrorType max_cost_assignment(MatrixElementType elementType, IntPtr cost, IntPtr assignments);
    public static ErrorType maximum_nu_float_vector(IntPtr y, Single& ret);
    public static ErrorType maximum_nu_double_vector(IntPtr y, Double& ret);
    public static IntPtr pipe_generic_new(ulong mas_size);
    public static void pipe_generic_delete(IntPtr q);
    public static bool pipe_generic_dequeue(IntPtr q, IntPtr& e);
    public static void pipe_generic_disable(IntPtr q);
    public static void pipe_generic_enqueue(IntPtr q, IntPtr e);
    public static bool pipe_generic_is_enabled(IntPtr q);
    public static void pipe_generic_wait_until_empty(IntPtr q);
    public static IntPtr proxy_deserialize_new(Byte[] fileName, int fileNameLength);
    public static void proxy_deserialize_delete(IntPtr deserialize);
    public static IntPtr proxy_serialize_new(Byte[] fileName, int fileNameLength);
    public static void proxy_serialize_delete(IntPtr serialize);
    public static IntPtr queue_kernel_1a_int32_t_new();
    public static void queue_kernel_1a_int32_t_delete(IntPtr q);
    public static void queue_kernel_1a_int32_t_clear(IntPtr q);
    public static void queue_kernel_1a_int32_t_reset(IntPtr q);
    public static bool queue_kernel_1a_int32_t_move_next(IntPtr q);
    public static int queue_kernel_1a_int32_t_size(IntPtr q);
    public static void queue_kernel_1a_int32_t_enqueue(IntPtr q, int e);
    public static void queue_kernel_1a_int32_t_dequeue(IntPtr q, Int32& e);
    public static int queue_kernel_1a_int32_t_element(IntPtr q);
    public static IntPtr queue_kernel_1a_uint32_t_new();
    public static void queue_kernel_1a_uint32_t_delete(IntPtr q);
    public static void queue_kernel_1a_uint32_t_clear(IntPtr q);
    public static void queue_kernel_1a_uint32_t_reset(IntPtr q);
    public static bool queue_kernel_1a_uint32_t_move_next(IntPtr q);
    public static int queue_kernel_1a_uint32_t_size(IntPtr q);
    public static void queue_kernel_1a_uint32_t_enqueue(IntPtr q, UInt32 e);
    public static void queue_kernel_1a_uint32_t_dequeue(IntPtr q, UInt32& e);
    public static UInt32 queue_kernel_1a_uint32_t_element(IntPtr q);
    public static IntPtr queue_sort_1b_c_int32_t_new();
    public static void queue_sort_1b_c_int32_t_delete(IntPtr q);
    public static void queue_sort_1b_c_int32_t_clear(IntPtr q);
    public static void queue_sort_1b_c_int32_t_reset(IntPtr q);
    public static void queue_sort_1b_c_int32_t_sort(IntPtr q);
    public static bool queue_sort_1b_c_int32_t_move_next(IntPtr q);
    public static int queue_sort_1b_c_int32_t_size(IntPtr q);
    public static void queue_sort_1b_c_int32_t_enqueue(IntPtr q, int e);
    public static void queue_sort_1b_c_int32_t_dequeue(IntPtr q, Int32& e);
    public static int queue_sort_1b_c_int32_t_element(IntPtr q);
    public static IntPtr queue_sort_1b_c_uint32_t_new();
    public static void queue_sort_1b_c_uint32_t_delete(IntPtr q);
    public static void queue_sort_1b_c_uint32_t_clear(IntPtr q);
    public static void queue_sort_1b_c_uint32_t_reset(IntPtr q);
    public static void queue_sort_1b_c_uint32_t_sort(IntPtr q);
    public static bool queue_sort_1b_c_uint32_t_move_next(IntPtr q);
    public static int queue_sort_1b_c_uint32_t_size(IntPtr q);
    public static void queue_sort_1b_c_uint32_t_enqueue(IntPtr q, UInt32 e);
    public static void queue_sort_1b_c_uint32_t_dequeue(IntPtr q, UInt32& e);
    public static UInt32 queue_sort_1b_c_uint32_t_element(IntPtr q);
    public static IntPtr rand_new();
    public static IntPtr rand_new2(ulong seed);
    public static long rand_get_integer_in_range(IntPtr rand, long begin, long end);
    public static double rand_get_random_gaussian(IntPtr rand);
    public static double rand_get_random_double(IntPtr rand);
    public static byte rand_get_random_8bit_number(IntPtr rand);
    public static UInt32 rand_get_random_32bit_number(IntPtr rand);
    public static void rand_delete(IntPtr rand);
    public static IntPtr running_stats_new(RunningStatsType type);
    public static ErrorType running_stats_add(RunningStatsType type, IntPtr stats, Single& val);
    public static ErrorType running_stats_add(RunningStatsType type, IntPtr stats, Double& val);
    public static ErrorType running_stats_clear(RunningStatsType type, IntPtr stats);
    public static ErrorType running_stats_current_n(RunningStatsType type, IntPtr stats, Single& n);
    public static ErrorType running_stats_current_n(RunningStatsType type, IntPtr stats, Double& n);
    public static ErrorType running_stats_ex_kurtosis(RunningStatsType type, IntPtr stats, Single& ex_kurtosis);
    public static ErrorType running_stats_ex_kurtosis(RunningStatsType type, IntPtr stats, Double& ex_kurtosis);
    public static ErrorType running_stats_max(RunningStatsType type, IntPtr stats, Single& max);
    public static ErrorType running_stats_max(RunningStatsType type, IntPtr stats, Double& max);
    public static ErrorType running_stats_mean(RunningStatsType type, IntPtr stats, Single& mean);
    public static ErrorType running_stats_mean(RunningStatsType type, IntPtr stats, Double& mean);
    public static ErrorType running_stats_min(RunningStatsType type, IntPtr stats, Single& min);
    public static ErrorType running_stats_min(RunningStatsType type, IntPtr stats, Double& min);
    public static ErrorType running_stats_scale(RunningStatsType type, IntPtr stats, Single& scale, Single& ret);
    public static ErrorType running_stats_scale(RunningStatsType type, IntPtr stats, Double& scale, Double& ret);
    public static ErrorType running_stats_skewness(RunningStatsType type, IntPtr stats, Single& skewness);
    public static ErrorType running_stats_skewness(RunningStatsType type, IntPtr stats, Double& skewness);
    public static ErrorType running_stats_stddev(RunningStatsType type, IntPtr stats, Single& stddev);
    public static ErrorType running_stats_stddev(RunningStatsType type, IntPtr stats, Double& stddev);
    public static ErrorType running_stats_variance(RunningStatsType type, IntPtr stats, Single& variance);
    public static ErrorType running_stats_variance(RunningStatsType type, IntPtr stats, Double& variance);
    public static void running_stats_delete(RunningStatsType type, IntPtr stats);
    public static IntPtr running_stats_operator_add(RunningStatsType type, IntPtr left, IntPtr right);
    public static IntPtr vector_normalizer_new(MatrixElementType type);
    public static void vector_normalizer_delete(MatrixElementType type, IntPtr normalizer);
    public static ErrorType vector_normalizer_operator(MatrixElementType type, IntPtr normalizer, IntPtr matrix, IntPtr& ret);
    public static void vector_normalizer_train(MatrixElementType type, IntPtr normalizer, IntPtr samples);
    public static void stdlib_free(IntPtr ptr);
    public static IntPtr stdlib_malloc(IntPtr size);
    public static void stdlib_srand(UInt32 seed);
    public static IntPtr string_new();
    public static IntPtr string_new2(StringBuilder c_str, int len);
    public static void string_append(IntPtr str, StringBuilder c_str, int len);
    public static IntPtr string_c_str(IntPtr str);
    public static void string_delete(IntPtr str);
    public static IntPtr ostringstream_new();
    public static IntPtr ostringstream_str(IntPtr str);
    public static void ostringstream_delete(IntPtr str);
    public static IntPtr stdvector_int32_new1();
    public static IntPtr stdvector_int32_new2(IntPtr size);
    public static IntPtr stdvector_int32_new3(Int32[] data, IntPtr dataLength);
    public static IntPtr stdvector_int32_getSize(IntPtr vector);
    public static IntPtr stdvector_int32_getPointer(IntPtr vector);
    public static int stdvector_int32_at(IntPtr vector, int index);
    public static void stdvector_int32_delete(IntPtr vector);
    public static IntPtr stdvector_uint32_new1();
    public static IntPtr stdvector_uint32_new2(IntPtr size);
    public static IntPtr stdvector_uint32_new3(UInt32[] data, IntPtr dataLength);
    public static IntPtr stdvector_uint32_getSize(IntPtr vector);
    public static IntPtr stdvector_uint32_getPointer(IntPtr vector);
    public static int stdvector_uint32_at(IntPtr vector, int index);
    public static void stdvector_uint32_delete(IntPtr vector);
    public static IntPtr stdvector_long_new1();
    public static IntPtr stdvector_long_new2(IntPtr size);
    public static IntPtr stdvector_long_new3(Int64[] data, IntPtr dataLength);
    public static IntPtr stdvector_long_getSize(IntPtr vector);
    public static IntPtr stdvector_long_getPointer(IntPtr vector);
    public static long stdvector_long_at(IntPtr vector, int index);
    public static void stdvector_long_delete(IntPtr vector);
    public static IntPtr stdvector_float_new1();
    public static IntPtr stdvector_float_new2(IntPtr size);
    public static IntPtr stdvector_float_new3(Single[] data, IntPtr dataLength);
    public static IntPtr stdvector_float_getSize(IntPtr vector);
    public static IntPtr stdvector_float_getPointer(IntPtr vector);
    public static float stdvector_float_at(IntPtr vector, int index);
    public static void stdvector_float_delete(IntPtr vector);
    public static IntPtr stdvector_double_new1();
    public static IntPtr stdvector_double_new2(IntPtr size);
    public static IntPtr stdvector_double_new3(Double[] data, IntPtr dataLength);
    public static IntPtr stdvector_double_getSize(IntPtr vector);
    public static IntPtr stdvector_double_getPointer(IntPtr vector);
    public static double stdvector_double_at(IntPtr vector, int index);
    public static void stdvector_double_delete(IntPtr vector);
    public static IntPtr stdvector_full_object_detection_new1();
    public static IntPtr stdvector_full_object_detection_new2(IntPtr size);
    public static IntPtr stdvector_full_object_detection_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_full_object_detection_getSize(IntPtr vector);
    public static IntPtr stdvector_full_object_detection_getPointer(IntPtr vector);
    public static IntPtr stdvector_full_object_detection_at(IntPtr vector, int index);
    public static void stdvector_full_object_detection_delete(IntPtr vector);
    public static void stdvector_full_object_detection_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_rect_detection_new1();
    public static IntPtr stdvector_rect_detection_new2(IntPtr size);
    public static IntPtr stdvector_rect_detection_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_rect_detection_getSize(IntPtr vector);
    public static IntPtr stdvector_rect_detection_getPointer(IntPtr vector);
    public static IntPtr stdvector_rect_detection_at(IntPtr vector, int index);
    public static void stdvector_rect_detection_delete(IntPtr vector);
    public static void stdvector_rect_detection_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_image_window_overlay_line_new1();
    public static IntPtr stdvector_image_window_overlay_line_new2(IntPtr size);
    public static IntPtr stdvector_image_window_overlay_line_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_image_window_overlay_line_getSize(IntPtr vector);
    public static IntPtr stdvector_image_window_overlay_line_getPointer(IntPtr vector);
    public static IntPtr stdvector_image_window_overlay_line_at(IntPtr vector, int index);
    public static void stdvector_image_window_overlay_line_delete(IntPtr vector);
    public static void stdvector_image_window_overlay_line_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_image_dataset_metadata_image_new1();
    public static IntPtr stdvector_image_dataset_metadata_image_new2(IntPtr size);
    public static IntPtr stdvector_image_dataset_metadata_image_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_image_dataset_metadata_image_getSize(IntPtr vector);
    public static IntPtr stdvector_image_dataset_metadata_image_getPointer(IntPtr vector);
    public static IntPtr stdvector_image_dataset_metadata_image_at(IntPtr vector, int index);
    public static void stdvector_image_dataset_metadata_image_delete(IntPtr vector);
    public static void stdvector_image_dataset_metadata_image_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_image_dataset_metadata_box_new1();
    public static IntPtr stdvector_image_dataset_metadata_box_new2(IntPtr size);
    public static IntPtr stdvector_image_dataset_metadata_box_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_image_dataset_metadata_box_getSize(IntPtr vector);
    public static IntPtr stdvector_image_dataset_metadata_box_getPointer(IntPtr vector);
    public static IntPtr stdvector_image_dataset_metadata_box_at(IntPtr vector, int index);
    public static void stdvector_image_dataset_metadata_box_delete(IntPtr vector);
    public static void stdvector_image_dataset_metadata_box_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_matrix_new1(MatrixElementType matrixElementType, int templateRows, int templateColumns);
    public static IntPtr stdvector_matrix_new2(MatrixElementType matrixElementType, IntPtr size, int templateRows, int templateColumns);
    public static IntPtr stdvector_matrix_new3(MatrixElementType matrixElementType, IntPtr[] data, IntPtr dataLength, int templateRows, int templateColumns);
    public static IntPtr stdvector_matrix_getSize(MatrixElementType matrixElementType, IntPtr vector, int templateRows, int templateColumns);
    public static IntPtr stdvector_matrix_getPointer(MatrixElementType matrixElementType, IntPtr vector, int templateRows, int templateColumns);
    public static IntPtr stdvector_matrix_at(IntPtr vector, int index);
    public static void stdvector_matrix_delete(MatrixElementType matrixElementType, IntPtr vector, int templateRows, int templateColumns);
    public static void stdvector_matrix_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_mmod_rect_new1();
    public static IntPtr stdvector_mmod_rect_new2(IntPtr size);
    public static IntPtr stdvector_mmod_rect_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_mmod_rect_getSize(IntPtr vector);
    public static IntPtr stdvector_mmod_rect_getPointer(IntPtr vector);
    public static IntPtr stdvector_mmod_rect_at(IntPtr vector, int index);
    public static void stdvector_mmod_rect_delete(IntPtr vector);
    public static void stdvector_mmod_rect_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_surf_point_new1();
    public static IntPtr stdvector_surf_point_new2(IntPtr size);
    public static IntPtr stdvector_surf_point_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_surf_point_getSize(IntPtr vector);
    public static IntPtr stdvector_surf_point_getPointer(IntPtr vector);
    public static IntPtr stdvector_surf_point_at(IntPtr vector, int index);
    public static void stdvector_surf_point_delete(IntPtr vector);
    public static void stdvector_surf_point_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_sample_pair_new1();
    public static IntPtr stdvector_sample_pair_new2(IntPtr size);
    public static IntPtr stdvector_sample_pair_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_sample_pair_getSize(IntPtr vector);
    public static IntPtr stdvector_sample_pair_getPointer(IntPtr vector);
    public static IntPtr stdvector_sample_pair_at(IntPtr vector, int index);
    public static void stdvector_sample_pair_delete(IntPtr vector);
    public static void stdvector_sample_pair_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_chip_details_new1();
    public static IntPtr stdvector_chip_details_new2(IntPtr size);
    public static IntPtr stdvector_chip_details_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_chip_details_getSize(IntPtr vector);
    public static IntPtr stdvector_chip_details_getPointer(IntPtr vector);
    public static IntPtr stdvector_chip_details_at(IntPtr vector, int index);
    public static void stdvector_chip_details_delete(IntPtr vector);
    public static void stdvector_chip_details_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_string_new1();
    public static IntPtr stdvector_string_new2(IntPtr size);
    public static IntPtr stdvector_string_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_string_getSize(IntPtr vector);
    public static IntPtr stdvector_string_getPointer(IntPtr vector);
    public static IntPtr stdvector_string_at(IntPtr vector, int index);
    public static void stdvector_string_delete(IntPtr vector);
    public static void stdvector_string_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_perspective_window_overlay_dot_new1();
    public static IntPtr stdvector_perspective_window_overlay_dot_new2(IntPtr size);
    public static IntPtr stdvector_perspective_window_overlay_dot_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_perspective_window_overlay_dot_getSize(IntPtr vector);
    public static IntPtr stdvector_perspective_window_overlay_dot_getPointer(IntPtr vector);
    public static IntPtr stdvector_perspective_window_overlay_dot_at(IntPtr vector, int index);
    public static void stdvector_perspective_window_overlay_dot_delete(IntPtr vector);
    public static void stdvector_perspective_window_overlay_dot_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_rectangle_new1();
    public static IntPtr stdvector_rectangle_new2(IntPtr size);
    public static IntPtr stdvector_rectangle_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_rectangle_getSize(IntPtr vector);
    public static IntPtr stdvector_rectangle_getPointer(IntPtr vector);
    public static IntPtr stdvector_rectangle_at(IntPtr vector, int index);
    public static void stdvector_rectangle_delete(IntPtr vector);
    public static void stdvector_rectangle_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_point_new1();
    public static IntPtr stdvector_point_new2(IntPtr size);
    public static IntPtr stdvector_point_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_point_getSize(IntPtr vector);
    public static IntPtr stdvector_point_getPointer(IntPtr vector);
    public static IntPtr stdvector_point_at(IntPtr vector, int index);
    public static void stdvector_point_delete(IntPtr vector);
    public static void stdvector_point_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_dpoint_new1();
    public static IntPtr stdvector_dpoint_new2(IntPtr size);
    public static IntPtr stdvector_dpoint_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_dpoint_getSize(IntPtr vector);
    public static IntPtr stdvector_dpoint_getPointer(IntPtr vector);
    public static IntPtr stdvector_dpoint_at(IntPtr vector, int index);
    public static void stdvector_dpoint_delete(IntPtr vector);
    public static void stdvector_dpoint_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_vector_double_new1();
    public static IntPtr stdvector_vector_double_new2(IntPtr size);
    public static IntPtr stdvector_vector_double_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_vector_double_getSize(IntPtr vector);
    public static IntPtr stdvector_vector_double_getPointer(IntPtr vector);
    public static IntPtr stdvector_vector_double_at(IntPtr vector, int index);
    public static void stdvector_vector_double_delete(IntPtr vector);
    public static void stdvector_vector_double_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_stdvector_double_new1();
    public static IntPtr stdvector_stdvector_double_new2(IntPtr size);
    public static IntPtr stdvector_stdvector_double_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_stdvector_double_getSize(IntPtr vector);
    public static IntPtr stdvector_stdvector_double_getPointer(IntPtr vector);
    public static IntPtr stdvector_stdvector_double_at(IntPtr vector, int index);
    public static void stdvector_stdvector_double_delete(IntPtr vector);
    public static void stdvector_stdvector_double_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_stdvector_mmod_rect_new1();
    public static IntPtr stdvector_stdvector_mmod_rect_new2(IntPtr size);
    public static IntPtr stdvector_stdvector_mmod_rect_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_stdvector_mmod_rect_getSize(IntPtr vector);
    public static IntPtr stdvector_stdvector_mmod_rect_getPointer(IntPtr vector);
    public static IntPtr stdvector_stdvector_mmod_rect_at(IntPtr vector, int index);
    public static void stdvector_stdvector_mmod_rect_delete(IntPtr vector);
    public static void stdvector_stdvector_mmod_rect_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_stdvector_full_object_detection_new1();
    public static IntPtr stdvector_stdvector_full_object_detection_new2(IntPtr size);
    public static IntPtr stdvector_stdvector_full_object_detection_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_stdvector_full_object_detection_getSize(IntPtr vector);
    public static IntPtr stdvector_stdvector_full_object_detection_getPointer(IntPtr vector);
    public static IntPtr stdvector_stdvector_full_object_detection_at(IntPtr vector, int index);
    public static void stdvector_stdvector_full_object_detection_delete(IntPtr vector);
    public static void stdvector_stdvector_full_object_detection_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_stdvector_rectangle_new1();
    public static IntPtr stdvector_stdvector_rectangle_new2(IntPtr size);
    public static IntPtr stdvector_stdvector_rectangle_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_stdvector_rectangle_getSize(IntPtr vector);
    public static IntPtr stdvector_stdvector_rectangle_getPointer(IntPtr vector);
    public static IntPtr stdvector_stdvector_rectangle_at(IntPtr vector, int index);
    public static void stdvector_stdvector_rectangle_delete(IntPtr vector);
    public static void stdvector_stdvector_rectangle_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_mmod_options_detector_window_details_new1();
    public static IntPtr stdvector_mmod_options_detector_window_details_new2(IntPtr size);
    public static IntPtr stdvector_mmod_options_detector_window_details_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_mmod_options_detector_window_details_getSize(IntPtr vector);
    public static IntPtr stdvector_mmod_options_detector_window_details_getPointer(IntPtr vector);
    public static IntPtr stdvector_mmod_options_detector_window_details_at(IntPtr vector, int index);
    public static void stdvector_mmod_options_detector_window_details_delete(IntPtr vector);
    public static void stdvector_mmod_options_detector_window_details_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdvector_image_display_overlay_rect_new1();
    public static IntPtr stdvector_image_display_overlay_rect_new2(IntPtr size);
    public static IntPtr stdvector_image_display_overlay_rect_new3(IntPtr[] data, IntPtr dataLength);
    public static IntPtr stdvector_image_display_overlay_rect_getSize(IntPtr vector);
    public static IntPtr stdvector_image_display_overlay_rect_getPointer(IntPtr vector);
    public static IntPtr stdvector_image_display_overlay_rect_at(IntPtr vector, int index);
    public static void stdvector_image_display_overlay_rect_delete(IntPtr vector);
    public static void stdvector_image_display_overlay_rect_copy(IntPtr vector, IntPtr[] dst);
    public static IntPtr stdpair_point_point_new(IntPtr first, IntPtr second);
    public static IntPtr stdpair_point_point_get_first(IntPtr pair);
    public static void stdpair_point_point_set_first(IntPtr pair, IntPtr first);
    public static IntPtr stdpair_point_point_get_second(IntPtr pair);
    public static void stdpair_point_point_set_second(IntPtr pair, IntPtr second);
    public static void stdpair_point_point_delete(IntPtr pair);
    public static IntPtr wrap_string_char(Byte[] str, int strLength, UInt32 firstPad, UInt32 restPad, UInt32 maxPerLine);
    public static ErrorType cross_validate_object_detection_trainer_scan_fhog_pyramid_test_object_detection_function_rectangle(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, MatrixElementType elementType, IntPtr images, IntPtr objects, IntPtr& matrix);
    public static ErrorType cross_validate_trainer_svm_trainer(SvmKernelType kernelType, MatrixElementType type, SvmTrainerType trainerType, IntPtr trainer, int templateRows, int templateColumns, IntPtr x, IntPtr y, int folds, IntPtr& ret);
    public static ErrorType cross_validate_trainer_batch_trainer(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, int templateRows, int templateColumns, IntPtr x, IntPtr y, int folds, IntPtr& ret);
    public static ErrorType cross_validate_trainer_reduced_decision_function_trainer2(SvmKernelType kernelType, MatrixElementType type, SvmTrainerType trainerType, IntPtr trainer, int templateRows, int templateColumns, IntPtr x, IntPtr y, int folds, IntPtr& ret);
    public static ErrorType nearest_center(MatrixElementType type, int templateRows, int templateColumns, IntPtr centers, IntPtr sample, UInt32& ret);
    public static ErrorType find_clusters_using_angular_kmeans(MatrixElementType type, int templateRows, int templateColumns, IntPtr centers, IntPtr samples, UInt32 max_iter, IntPtr result);
    public static ErrorType pick_initial_centers(SvmKernelType kernelType, MatrixElementType elementType, int templateRows, int templateColumns, long num_centers, IntPtr centers, IntPtr samples, IntPtr k, double percentile);
    public static ErrorType rank_features(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kcentroid, IntPtr samples, IntPtr labels, IntPtr& ret);
    public static ErrorType randomize_samples_pointer(IntPtr vector);
    public static ErrorType randomize_samples_value(IntPtr vector);
    public static ErrorType train_probabilistic_decision_function_svm_trainer(SvmKernelType kernelType, MatrixElementType type, SvmTrainerType trainerType, IntPtr trainer, int templateRows, int templateColumns, IntPtr x, IntPtr y, int folds, IntPtr& ret);
    public static ErrorType train_probabilistic_decision_function_reduced_decision_function_trainer2(SvmKernelType kernelType, MatrixElementType type, SvmTrainerType trainerType, IntPtr trainer, int templateRows, int templateColumns, IntPtr x, IntPtr y, int folds, IntPtr& ret);
    public static void decision_function_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function);
    public static ErrorType serialize_decision_function(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function, Byte[] fileName, int fileNameLength, IntPtr& errorMessage);
    public static ErrorType deserialize_decision_function(Byte[] fileName, int fileNameLength, SvmKernelType kernelType, MatrixElementType matrixElementType, int templateRows, int templateColumns, IntPtr& function, IntPtr& errorMessage);
    public static ErrorType decision_function_operator_double(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function, IntPtr sample, Double& ret);
    public static ErrorType decision_function_operator_float(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function, IntPtr sample, Single& ret);
    public static void probabilistic_decision_function_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function);
    public static ErrorType serialize_probabilistic_decision_function(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function, Byte[] fileName, int fileNameLength, IntPtr& errorMessage);
    public static ErrorType deserialize_probabilistic_decision_function(Byte[] fileName, int fileNameLength, SvmKernelType kernelType, MatrixElementType matrixElementType, int templateRows, int templateColumns, IntPtr& function, IntPtr& errorMessage);
    public static void projection_function_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function);
    public static ErrorType serialize_projection_function(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr function, Byte[] fileName, int fileNameLength, IntPtr& errorMessage);
    public static ErrorType deserialize_projection_function(Byte[] fileName, int fileNameLength, SvmKernelType kernelType, MatrixElementType matrixElementType, int templateRows, int templateColumns, IntPtr& function, IntPtr& errorMessage);
    public static IntPtr normalized_function_new(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType functionType);
    public static void normalized_function_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType functionType, IntPtr function);
    public static ErrorType normalized_function_get_normalizer(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr& ret);
    public static ErrorType normalized_function_set_normalizer(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, NormalizerType normalizer_type, IntPtr normalizer);
    public static ErrorType normalized_function_get_function(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr& ret);
    public static ErrorType normalized_function_set_function(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sub_function);
    public static ErrorType normalized_function_deserialize(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, Byte[] file_name, int file_name_length, IntPtr& ret, IntPtr& error_message);
    public static ErrorType normalized_function_serialize(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, Byte[] file_name, int file_name_length, IntPtr& error_message);
    public static ErrorType normalized_function_operator_int8_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, SByte& ret);
    public static ErrorType normalized_function_operator_uint8_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, Byte& ret);
    public static ErrorType normalized_function_operator_int16_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, Int16& ret);
    public static ErrorType normalized_function_operator_uint16_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, UInt16& ret);
    public static ErrorType normalized_function_operator_int32_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, Int32& ret);
    public static ErrorType normalized_function_operator_uint32_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, UInt32& ret);
    public static ErrorType normalized_function_operator_int64_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, Int64& ret);
    public static ErrorType normalized_function_operator_uint64_t(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, UInt64& ret);
    public static ErrorType normalized_function_operator_double(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, Double& ret);
    public static ErrorType normalized_function_operator_float(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmFunctionType function_type, IntPtr function, IntPtr sample, Single& ret);
    public static ErrorType kcentroid_new(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kernel, double tolerance, UInt32 maxDictionarySize, bool removeOldestFirst, IntPtr& ret);
    public static void kcentroid_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj);
    public static ErrorType kcentroid_dictionary_size(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, UInt32& ret);
    public static ErrorType kcentroid_get_kernel(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr& ret);
    public static ErrorType kcentroid_operator_float(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr sample, Single& ret);
    public static ErrorType kcentroid_operator_double(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr sample, Double& ret);
    public static ErrorType kcentroid_train_float(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr sample);
    public static ErrorType kcentroid_train_double(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr sample);
    public static ErrorType histogram_intersection_kernel_new(MatrixElementType matrixElementType, int templateRow, int templateColumn, IntPtr& ret);
    public static void histogram_intersection_kernel_delete(MatrixElementType matrixElementType, IntPtr linerKernel, int templateRow, int templateColumn);
    public static ErrorType linear_kernel_new(MatrixElementType matrixElementType, int templateRow, int templateColumn, IntPtr& ret);
    public static void linear_kernel_delete(MatrixElementType matrixElementType, IntPtr linerKernel, int templateRow, int templateColumn);
    public static ErrorType polynomial_kernel_new(MatrixElementType matrixElementType, int templateRow, int templateColumn, IntPtr& ret);
    public static void polynomial_kernel_delete(MatrixElementType matrixElementType, IntPtr linerKernel, int templateRow, int templateColumn);
    public static ErrorType radial_basis_kernel_new_int8_t(MatrixElementType matrixElementType, int templateRow, int templateColumn, sbyte gamma, IntPtr& ret);
    public static ErrorType radial_basis_kernel_new_int16_t(MatrixElementType matrixElementType, int templateRow, int templateColumn, short gamma, IntPtr& ret);
    public static ErrorType radial_basis_kernel_new_int32_t(MatrixElementType matrixElementType, int templateRow, int templateColumn, int gamma, IntPtr& ret);
    public static ErrorType radial_basis_kernel_new_uint8_t(MatrixElementType matrixElementType, int templateRow, int templateColumn, byte gamma, IntPtr& ret);
    public static ErrorType radial_basis_kernel_new_uint16_t(MatrixElementType matrixElementType, int templateRow, int templateColumn, ushort gamma, IntPtr& ret);
    public static ErrorType radial_basis_kernel_new_uint32_t(MatrixElementType matrixElementType, int templateRow, int templateColumn, UInt32 gamma, IntPtr& ret);
    public static ErrorType radial_basis_kernel_new_float(MatrixElementType matrixElementType, int templateRow, int templateColumn, float gamma, IntPtr& ret);
    public static ErrorType radial_basis_kernel_new_double(MatrixElementType matrixElementType, int templateRow, int templateColumn, double gamma, IntPtr& ret);
    public static void radial_basis_kernel_delete(MatrixElementType matrixElementType, IntPtr linerKernel, int templateRow, int templateColumn);
    public static ErrorType sigmoid_kernel_new(MatrixElementType matrixElementType, int templateRow, int templateColumn, IntPtr& ret);
    public static void sigmoid_kernel_delete(MatrixElementType matrixElementType, IntPtr linerKernel, int templateRow, int templateColumn);
    public static ErrorType kkmeans_new(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kcentroid, IntPtr& ret);
    public static void kkmeans_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kkmeans);
    public static ErrorType kkmeans_get_kernel(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr& ret);
    public static ErrorType kkmeans_set_number_of_centers(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kkmeans, UInt32 num);
    public static ErrorType kkmeans_get_number_of_centers(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kkmeans, UInt32& num);
    public static ErrorType kkmeans_set_kcentroid(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kkmeans, IntPtr kcentroid);
    public static ErrorType kkmeans_get_kcentroid(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kkmeans, UInt32 i, IntPtr& kcentroid);
    public static ErrorType kkmeans_operator(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kkmeans, IntPtr sample, UInt32& ret);
    public static ErrorType kkmeans_train(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kkmeans, IntPtr samples, IntPtr centers, UInt32 max_iter);
    public static ErrorType krls_new(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr kernel, double tolerance, UInt32 maxDictionarySize, IntPtr& ret);
    public static void krls_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj);
    public static ErrorType krls_dictionary_size(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, UInt32& ret);
    public static ErrorType krls_get_kernel(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr& ret);
    public static ErrorType krls_operator_float(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr sample, Single& ret);
    public static ErrorType krls_operator_double(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr sample, Double& ret);
    public static ErrorType krls_train_float(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr x, float y);
    public static ErrorType krls_train_double(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, IntPtr x, double y);
    public static ErrorType krls_get_decision_function(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr krls, IntPtr& ret);
    public static ErrorType serialize_krls(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj, Byte[] fileName, int fileNameLength, IntPtr& errorMessage);
    public static ErrorType deserialize_krls(Byte[] fileName, int fileNameLength, SvmKernelType kernelType, MatrixElementType matrixElementType, int templateRows, int templateColumns, IntPtr obj, IntPtr& errorMessage);
    public static ErrorType svm_pegasos_new(SvmKernelType kernelType, MatrixElementType type, IntPtr& ret);
    public static void svm_pegasos_delete(SvmKernelType kernelType, MatrixElementType type, IntPtr obj);
    public static ErrorType svm_pegasos_set_kernel(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr kernel);
    public static ErrorType svm_pegasos_get_kernel(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr& kernel);
    public static ErrorType svm_pegasos_set_max_num_sv(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, UInt32 max_num_sv);
    public static ErrorType svm_pegasos_get_max_num_sv(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, UInt32& max_num_sv);
    public static ErrorType svm_pegasos_get_train_count(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, UInt32& train_count);
    public static ErrorType svm_pegasos_clear(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer);
    public static ErrorType svm_pegasos_new2_double(SvmKernelType kernelType, MatrixElementType type, IntPtr kernel, double lambda, double tolerance, UInt32 max_num_sv, IntPtr& ret);
    public static ErrorType svm_pegasos_operator_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr sample, Double& ret);
    public static ErrorType svm_pegasos_set_lambda_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double lambda);
    public static ErrorType svm_pegasos_set_lambda_class1_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double lambda);
    public static ErrorType svm_pegasos_get_lambda_class1_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& lambda);
    public static ErrorType svm_pegasos_set_lambda_class2_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double lambda);
    public static ErrorType svm_pegasos_get_lambda_class2_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& lambda);
    public static ErrorType svm_pegasos_set_tolerance_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double epsilon);
    public static ErrorType svm_pegasos_get_tolerance_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& epsilon);
    public static ErrorType svm_pegasos_train_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr x, double y, Double& ret);
    public static ErrorType svm_pegasos_new2_float(SvmKernelType kernelType, MatrixElementType type, IntPtr kernel, float lambda, float tolerance, UInt32 max_num_sv, IntPtr& ret);
    public static ErrorType svm_pegasos_operator_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr sample, Single& ret);
    public static ErrorType svm_pegasos_set_lambda_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float lambda);
    public static ErrorType svm_pegasos_set_lambda_class1_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float lambda);
    public static ErrorType svm_pegasos_get_lambda_class1_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& lambda);
    public static ErrorType svm_pegasos_set_lambda_class2_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float lambda);
    public static ErrorType svm_pegasos_get_lambda_class2_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& lambda);
    public static ErrorType svm_pegasos_set_tolerance_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float epsilon);
    public static ErrorType svm_pegasos_get_tolerance_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& epsilon);
    public static ErrorType svm_pegasos_train_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr x, float y, Single& ret);
    public static ErrorType structural_object_detection_trainer_scan_fhog_pyramid_new(PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr scanner, IntPtr& pyramid);
    public static void structural_object_detection_trainer_scan_fhog_pyramid_delete(PyramidType pyramidType, UInt32 pyramidRate, FHogFeatureExtractorType featureExtractorType, IntPtr pyramid);
    public static ErrorType structural_object_detection_trainer_scan_fhog_pyramid_be_verbose(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj);
    public static ErrorType structural_object_detection_trainer_scan_fhog_pyramid_set_c(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, double c);
    public static ErrorType structural_object_detection_trainer_scan_fhog_pyramid_set_epsilon(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, double epsilon);
    public static ErrorType structural_object_detection_trainer_scan_fhog_pyramid_set_num_threads(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, UInt32 thread);
    public static ErrorType structural_object_detection_trainer_scan_fhog_pyramid_train_rectangle(PyramidType pyramid_type, UInt32 pyramid_rate, FHogFeatureExtractorType extractor_type, IntPtr obj, MatrixElementType elementType, IntPtr images, IntPtr objects, IntPtr& detector);
    public static ErrorType batch_trainer_new(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr& ret);
    public static void batch_trainer_delete(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer);
    public static ErrorType batch_trainer_train(SvmKernelType kernel_type, MatrixElementType type, SvmBatchTrainerType trainer_type, IntPtr trainer, IntPtr x, IntPtr y, IntPtr& ret);
    public static ErrorType batch_cached_double(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, double minLearningRate, int cacheSize, IntPtr& ret);
    public static ErrorType verbose_batch_cached_double(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, double minLearningRate, int cacheSize, IntPtr& ret);
    public static ErrorType batch_trainer_new2_double(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, double minLearningRate, bool verbose, bool useCache, int cacheSize, IntPtr& ret);
    public static ErrorType batch_trainer_get_min_learning_rate_double(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, Double& ret);
    public static ErrorType batch_cached_float(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, float minLearningRate, int cacheSize, IntPtr& ret);
    public static ErrorType verbose_batch_cached_float(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, float minLearningRate, int cacheSize, IntPtr& ret);
    public static ErrorType batch_trainer_new2_float(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, float minLearningRate, bool verbose, bool useCache, int cacheSize, IntPtr& ret);
    public static ErrorType batch_trainer_get_min_learning_rate_float(SvmKernelType kernelType, MatrixElementType type, SvmBatchTrainerType trainerType, IntPtr trainer, Single& ret);
    public static ErrorType reduced2(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmTrainerType trainer_type, IntPtr trainer, UInt32 num_bv, double eps, IntPtr& ret);
    public static ErrorType reduced_decision_function_trainer2_new(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmTrainerType trainer_type, IntPtr trainer, UInt32 num_bv, double eps, IntPtr& ret);
    public static void reduced_decision_function_trainer2_delete(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmTrainerType trainer_type, IntPtr trainer);
    public static ErrorType reduced_decision_function_trainer2_train_double(SvmKernelType kernel_type, MatrixElementType type, int templateRows, int templateColumns, SvmTrainerType trainer_type, IntPtr trainer, IntPtr x, IntPtr y, IntPtr& ret);
    public static ErrorType svm_c_trainer_new(SvmKernelType kernelType, MatrixElementType type, IntPtr& ret);
    public static void svm_c_trainer_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj);
    public static ErrorType svm_c_trainer_set_kernel(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr kernel);
    public static ErrorType svm_c_trainer_get_kernel(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr& kernel);
    public static ErrorType svm_c_trainer_set_cache_size(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, int cache_size);
    public static ErrorType svm_c_trainer_get_cache_size(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Int32& cache_size);
    public static ErrorType svm_c_trainer_train(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr x, IntPtr y, IntPtr& ret);
    public static ErrorType svm_c_trainer_new2_double(SvmKernelType kernelType, MatrixElementType type, IntPtr kernel, double c, IntPtr& ret);
    public static ErrorType svm_c_trainer_set_c_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double c);
    public static ErrorType svm_c_trainer_set_c_class1_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double c);
    public static ErrorType svm_c_trainer_get_c_class1_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& c);
    public static ErrorType svm_c_trainer_set_c_class2_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double c);
    public static ErrorType svm_c_trainer_get_c_class2_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& c);
    public static ErrorType svm_c_trainer_set_epsilon_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double epsilon);
    public static ErrorType svm_c_trainer_get_epsilon_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& epsilon);
    public static ErrorType svm_c_trainer_new2_float(SvmKernelType kernelType, MatrixElementType type, IntPtr kernel, float c, IntPtr& ret);
    public static ErrorType svm_c_trainer_set_c_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float c);
    public static ErrorType svm_c_trainer_set_c_class1_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float c);
    public static ErrorType svm_c_trainer_get_c_class1_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& c);
    public static ErrorType svm_c_trainer_set_c_class2_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float c);
    public static ErrorType svm_c_trainer_get_c_class2_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& c);
    public static ErrorType svm_c_trainer_set_epsilon_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float epsilon);
    public static ErrorType svm_c_trainer_get_epsilon_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& epsilon);
    public static ErrorType svm_nu_trainer_new(SvmKernelType kernelType, MatrixElementType type, IntPtr& ret);
    public static void svm_nu_trainer_delete(SvmKernelType kernelType, MatrixElementType type, int templateRows, int templateColumns, IntPtr obj);
    public static ErrorType svm_nu_trainer_set_kernel(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr kernel);
    public static ErrorType svm_nu_trainer_get_kernel(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr& kernel);
    public static ErrorType svm_nu_trainer_set_cache_size(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, int cache_size);
    public static ErrorType svm_nu_trainer_get_cache_size(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Int32& cache_size);
    public static ErrorType svm_nu_trainer_train(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, IntPtr x, IntPtr y, IntPtr& ret);
    public static ErrorType svm_nu_trainer_new2_double(SvmKernelType kernelType, MatrixElementType type, IntPtr kernel, double nu, IntPtr& ret);
    public static ErrorType svm_nu_trainer_set_nu_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double nu);
    public static ErrorType svm_nu_trainer_set_nu_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& nu);
    public static ErrorType svm_nu_trainer_set_epsilon_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, double epsilon);
    public static ErrorType svm_nu_trainer_get_epsilon_double(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Double& epsilon);
    public static ErrorType svm_nu_trainer_new2_float(SvmKernelType kernelType, MatrixElementType type, IntPtr kernel, float nu, IntPtr& ret);
    public static ErrorType svm_nu_trainer_set_nu_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float nu);
    public static ErrorType svm_nu_trainer_get_nu_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& nu);
    public static ErrorType svm_nu_trainer_set_epsilon_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, float epsilon);
    public static ErrorType svm_nu_trainer_get_epsilon_float(SvmKernelType kernelType, MatrixElementType type, IntPtr trainer, Single& epsilon);
    public static IntPtr custom_multithreaded_object_new();
    public static void custom_multithreaded_object_delete(IntPtr thread);
    public static void custom_multithreaded_object_register_thread(IntPtr thread, IntPtr mediator);
    public static bool create_new_thread(IntPtr func, IntPtr param);
    public static void multithreaded_object_pause(IntPtr thread);
    public static void multithreaded_object_start(IntPtr thread);
    public static void multithreaded_object_stop(IntPtr thread);
    public static void multithreaded_object_wait(IntPtr thread);
}
public enum DlibDotNet.NonPrintableKeyboardKeys : Enum {
    public UInt32 value__;
    public static NonPrintableKeyboardKeys KEY_BACKSPACE;
    public static NonPrintableKeyboardKeys KEY_SHIFT;
    public static NonPrintableKeyboardKeys KEY_CTRL;
    public static NonPrintableKeyboardKeys KEY_ALT;
    public static NonPrintableKeyboardKeys KEY_PAUSE;
    public static NonPrintableKeyboardKeys KEY_CAPS_LOCK;
    public static NonPrintableKeyboardKeys KEY_ESC;
    public static NonPrintableKeyboardKeys KEY_PAGE_UP;
    public static NonPrintableKeyboardKeys KEY_PAGE_DOWN;
    public static NonPrintableKeyboardKeys KEY_END;
    public static NonPrintableKeyboardKeys KEY_HOME;
    public static NonPrintableKeyboardKeys KEY_LEFT;
    public static NonPrintableKeyboardKeys KEY_RIGHT;
    public static NonPrintableKeyboardKeys KEY_UP;
    public static NonPrintableKeyboardKeys KEY_DOWN;
    public static NonPrintableKeyboardKeys KEY_INSERT;
    public static NonPrintableKeyboardKeys KEY_DELETE;
    public static NonPrintableKeyboardKeys KEY_SCROLL_LOCK;
    public static NonPrintableKeyboardKeys KEY_F1;
    public static NonPrintableKeyboardKeys KEY_F2;
    public static NonPrintableKeyboardKeys KEY_F3;
    public static NonPrintableKeyboardKeys KEY_F4;
    public static NonPrintableKeyboardKeys KEY_F5;
    public static NonPrintableKeyboardKeys KEY_F6;
    public static NonPrintableKeyboardKeys KEY_F7;
    public static NonPrintableKeyboardKeys KEY_F8;
    public static NonPrintableKeyboardKeys KEY_F9;
    public static NonPrintableKeyboardKeys KEY_F10;
    public static NonPrintableKeyboardKeys KEY_F11;
    public static NonPrintableKeyboardKeys KEY_F12;
}
public class DlibDotNet.NormalizedFunction`2 : DlibObject {
    private KernelBaseParameter _Parameter;
    private SvmFunctionType _SvmFunctionType;
    private Imp`1<TScalar, TFunction, TScalar> _Imp;
    unknown TFunction Function {public set; }
    unknown Normalizer Normalizer {public set; }
    internal NormalizedFunction`2(IntPtr ptr);
    public void set_Function(TFunction value);
    public void set_Normalizer(Normalizer value);
    public static NormalizedFunction`2<TScalar, TFunction> Deserialize(string path, UInt32 templateRows, UInt32 templateColumns);
    public TScalar Operator(Matrix`1<TScalar> sample);
    public static void Serialize(string path, NormalizedFunction`2<TScalar, TFunction> function);
    protected virtual void DisposeUnmanaged();
    private Imp`1<TScalar, TFunction, TScalar> CreateImp(MatrixElementType type);
}
public abstract class DlibDotNet.Normalizer : DlibObject {
    [CompilerGeneratedAttribute]
private NormalizerType <NormalizerType>k__BackingField;
    public NormalizerType NormalizerType { get; }
    protected Normalizer(NormalizerType normalizerType, bool isEnabledDispose);
    [CompilerGeneratedAttribute]
public NormalizerType get_NormalizerType();
}
public enum DlibDotNet.NormalizerType : Enum {
    public int value__;
    public static NormalizerType Vector;
    public static NormalizerType VectorPca;
}
internal static class DlibDotNet.NumericKernelTypesRepository : object {
    public static Dictionary`2<Type, MatrixElementTypes> SupportTypes;
    private static NumericKernelTypesRepository();
}
public class DlibDotNet.ObjectDetector`1 : DlibObject {
    private DetectorImp<T> _Imp;
    private FHogPyramidParameter _FHogPyramidParameter;
    public ObjectDetector`1(T scanner);
    internal ObjectDetector`1(IntPtr ptr, FHogPyramidParameter parameter);
    public void Deserialize(string path);
    internal Matrix`1<byte> DrawFHog(UInt32 weightIndex, int cellDrawSize);
    public IEnumerable`1<Rectangle> Operator(Matrix`1<U> image);
    public void Serialize(string path);
    public Matrix`1<double> TestObjectDetectionFunction(IEnumerable`1<Matrix`1<U>> images, IEnumerable`1<IEnumerable`1<Rectangle>> objects);
    protected virtual void DisposeUnmanaged();
    internal FHogPyramidParameter GetFHogPyramidParameter();
}
public enum DlibDotNet.OnCloseReturnCode : Enum {
    public UInt32 value__;
    public static OnCloseReturnCode DO_NOT_CLOSE_WINDOW;
    public static OnCloseReturnCode CLOSE_WINDOW;
}
public enum DlibDotNet.PaddingMode : Enum {
    public int value__;
    public static PaddingMode BoundingBoxRelative;
    public static PaddingMode LandmarkRelative;
}
public class DlibDotNet.PerspectiveWindow : BaseWindow {
    public PerspectiveWindow(IEnumerable`1<Vector`1<double>> points);
    public PerspectiveWindow(IEnumerable`1<Vector`1<double>> points, string title);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, byte color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, ushort color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, short color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, int color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, float color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, double color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, RgbPixel color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, RgbAlphaPixel color);
    public void AddOverlay(Vector`1<double> p1, Vector`1<double> p2, HsiPixel color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, byte color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, ushort color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, short color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, int color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, float color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, double color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, RgbPixel color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, RgbAlphaPixel color);
    public void AddOverlay(IEnumerable`1<Vector`1<double>> points, HsiPixel color);
    public void AddOverlay(IEnumerable`1<OverlayDot> overlay);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.Pipe`1 : DlibObject {
    private Bridge`1<TItem, TItem> _Bridge;
    public bool IsEnabled { get; }
    public int Count { get; }
    public Pipe`1(ulong maximumSize);
    internal Pipe`1(IntPtr ptr);
    public bool get_IsEnabled();
    public bool Dequeue(TItem& item);
    public void Disable();
    public void Enqueue(TItem item);
    public void WaitUntilEmpty();
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<TItem, TItem> CreateImp();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
}
internal static class DlibDotNet.PipeElementTypesRepository : object {
    public static Dictionary`2<Type, ElementTypes> SupportTypes;
    private static PipeElementTypesRepository();
}
public class DlibDotNet.Point : ValueType {
    private int _X;
    private int _Y;
    public double Length { get; }
    public double LengthSquared { get; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public Point(int x, int y);
    internal Point(IntPtr nativePtr);
    internal Point(IntPtr ptr, bool isEnabledDispose);
    public double get_Length();
    public double get_LengthSquared();
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public sealed virtual bool Equals(Point other);
    public Point Rotate(Point point, double angle);
    public static Point Rotate(Point center, Point point, double angle);
    internal NativePoint ToNative();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static Point op_Addition(Point point, Point rhs);
    public static Point op_Subtraction(Point point, Point rhs);
    public static Point op_Multiply(Point point, int rhs);
    public static Point op_Multiply(int lhs, Point point);
    public static Point op_Multiply(double lhs, Point point);
    public static Point op_Division(Point point, int rhs);
    public static bool op_Equality(Point left, Point right);
    public static bool op_Inequality(Point left, Point right);
}
public class DlibDotNet.PointRotator : PointTransformBase {
    public Matrix`1<double> M { get; }
    public PointRotator(double angle);
    public Matrix`1<double> get_M();
    public virtual DPoint Operator(DPoint point);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.PointTransform : PointTransformBase {
    public DPoint B { get; }
    public Matrix`1<double> M { get; }
    public PointTransform(double angle, DPoint vector);
    public PointTransform(double angle, double x, double y);
    public DPoint get_B();
    public Matrix`1<double> get_M();
    public virtual DPoint Operator(DPoint point);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.PointTransformAffine : PointTransformBase {
    public DPoint B { get; }
    public Matrix`1<double> M { get; }
    public PointTransformAffine(Matrix`1<double> matrix, DPoint vector);
    public PointTransformAffine(Matrix`1<double> matrix, double x, double y);
    internal PointTransformAffine(IntPtr ptr);
    public DPoint get_B();
    public Matrix`1<double> get_M();
    public virtual DPoint Operator(DPoint point);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.PointTransformBase : DlibObject {
    public abstract virtual DPoint Operator(DPoint point);
}
public class DlibDotNet.PointTransformProjective : PointTransformBase {
    public Matrix`1<double> M { get; }
    public PointTransformProjective(Matrix`1<double> matrix);
    public Matrix`1<double> get_M();
    public virtual DPoint Operator(DPoint point);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.PolynomialKernel`2 : KernelBase {
    private MatrixElementType _ElementType;
    public PolynomialKernel`2(int templateRow, int templateColumn);
    internal PolynomialKernel`2(IntPtr ptr, int templateRow, int templateColumn, bool isEnabledDispose);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.PopupMenu : BaseWindow {
    internal PopupMenu(IntPtr ptr, bool isEnabledDispose);
    public UInt32 AddMenuItem(MenuItemText menuItemText);
    public UInt32 AddMenuItem(MenuItemSeparator separator);
}
public class DlibDotNet.ProbabilisticDecisionFunction`2 : FunctionBase {
    private KernelBaseParameter _Parameter;
    internal ProbabilisticDecisionFunction`2(IntPtr ptr, KernelBaseParameter parameter, bool isEnabledDispose);
    public static ProbabilisticDecisionFunction`2<TScalar, TKernel> Deserialize(string path, int templateRows, int templateColumns);
    public static void Serialize(ProbabilisticDecisionFunction`2<TScalar, TKernel> function, string path);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ProjectionFunction`2 : FunctionBase {
    private KernelBaseParameter _Parameter;
    internal ProjectionFunction`2(IntPtr ptr, KernelBaseParameter parameter, bool isEnabledDispose);
    public static ProjectionFunction`2<TScalar, TKernel> Deserialize(string path, int templateRows, int templateColumns);
    public static void Serialize(ProjectionFunction`2<TScalar, TKernel> function, string path);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ProxyDeserialize : DlibObject {
    public ProxyDeserialize(string path);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ProxySerialize : DlibObject {
    public ProxySerialize(string path);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.Pyramid : DlibObject {
    private static Dictionary`2<Type, PyramidType> SupportPyramidType;
    private static Pyramid();
    public abstract virtual Rectangle RectDown(Rectangle rect);
    public abstract virtual Rectangle RectDown(Rectangle rect, UInt32 levels);
    public abstract virtual DRectangle RectDown(DRectangle rect);
    public abstract virtual DRectangle RectDown(DRectangle rect, UInt32 levels);
    public abstract virtual Rectangle RectUp(Rectangle rect);
    public abstract virtual Rectangle RectUp(Rectangle rect, UInt32 levels);
    public abstract virtual DRectangle RectUp(DRectangle rect);
    public abstract virtual DRectangle RectUp(DRectangle rect, UInt32 levels);
    internal static bool TryGetSupportPyramidType(PyramidType& type);
}
public class DlibDotNet.PyramidDown : Pyramid {
    [CompilerGeneratedAttribute]
private UInt32 <PyramidRate>k__BackingField;
    public UInt32 PyramidRate { get; }
    public PyramidDown(UInt32 pyramidRate);
    [CompilerGeneratedAttribute]
public UInt32 get_PyramidRate();
    public virtual Rectangle RectDown(Rectangle rect);
    public virtual Rectangle RectDown(Rectangle rect, UInt32 levels);
    public virtual DRectangle RectDown(DRectangle rect);
    public virtual DRectangle RectDown(DRectangle rect, UInt32 levels);
    public virtual Rectangle RectUp(Rectangle rect);
    public virtual Rectangle RectUp(Rectangle rect, UInt32 levels);
    public virtual DRectangle RectUp(DRectangle rect);
    public virtual DRectangle RectUp(DRectangle rect, UInt32 levels);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.Queue`1 : object {
}
internal static class DlibDotNet.QueueElementTypesRepository : object {
    public static Dictionary`2<Type, ElementTypes> SupportTypes;
    private static QueueElementTypesRepository();
}
public class DlibDotNet.RadialBasisKernel`2 : KernelBase {
    private MatrixElementType _ElementType;
    private Bridge`1<TScalar, TSample, TScalar> _Bridge;
    public RadialBasisKernel`2(TScalar gamma, int templateRow, int templateColumn);
    internal RadialBasisKernel`2(IntPtr ptr, int templateRow, int templateColumn, bool isEnabledDispose);
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<TScalar, TSample, TScalar> CreateBridge(MatrixElementTypes sampleType, int templateRow, int templateColumn);
}
public class DlibDotNet.Rand : DlibObject {
    public Rand(ulong seed);
    public long GetIntegerInRange(long begin, long end);
    public double GetRandomDouble();
    public byte GetRandom8BitNumber();
    public UInt32 GetRandom32BitNumber();
    public double GetRandomGaussian();
    protected virtual void DisposeUnmanaged();
}
internal static class DlibDotNet.RealKernelTypesRepository : object {
    public static Dictionary`2<Type, MatrixElementTypes> SupportTypes;
    private static RealKernelTypesRepository();
}
public class DlibDotNet.Rectangle : ValueType {
    public static Rectangle Empty;
    private int _Bottom;
    private int _Left;
    private int _Right;
    private int _Top;
    public UInt32 Area { get; }
    public int Bottom { get; public set; }
    public Point BottomLeft { get; }
    public Point BottomRight { get; }
    public Point Center { get; }
    public DPoint DCenter { get; }
    public UInt32 Height { get; }
    public bool IsEmpty { get; }
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public Point TopLeft { get; }
    public Point TopRight { get; }
    public UInt32 Width { get; }
    public Rectangle(int left, int top, int right, int bottom);
    public Rectangle(UInt32 width, UInt32 height);
    public Rectangle(Point p1, Point p2);
    public Rectangle(Point point);
    internal Rectangle(IntPtr ptr, bool isEnabledDispose);
    private static Rectangle();
    public UInt32 get_Area();
    public int get_Bottom();
    public void set_Bottom(int value);
    public Point get_BottomLeft();
    public Point get_BottomRight();
    public Point get_Center();
    public DPoint get_DCenter();
    public UInt32 get_Height();
    public bool get_IsEmpty();
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public Point get_TopLeft();
    public Point get_TopRight();
    public UInt32 get_Width();
    public static Rectangle CenteredRect(int x, int y, UInt32 width, UInt32 height);
    public static Rectangle CenteredRect(Point p, UInt32 width, UInt32 height);
    public static Rectangle CenteredRect(Rectangle rect, UInt32 width, UInt32 height);
    public bool Contains(Point point);
    public bool Contains(int x, int y);
    public sealed virtual bool Equals(Rectangle other);
    public Rectangle Intersect(Rectangle rect);
    public static Rectangle MoveRect(Rectangle rect, Point point);
    public static Rectangle MoveRect(Rectangle rect, int x, int y);
    public static Rectangle SetAspectRatio(Rectangle rect, double ratio);
    public Rectangle Translate(int x, int y);
    public static Rectangle Translate(Rectangle rect, int x, int y);
    public Rectangle Translate(Point point);
    public static Rectangle Translate(Rectangle rect, Point point);
    internal NativeRectangle ToNative();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Rectangle op_Addition(Rectangle rect, Rectangle rhs);
    public static Rectangle op_Addition(Rectangle rect, Point rhs);
    public static bool op_Equality(Rectangle rect, Rectangle rhs);
    public static bool op_Inequality(Rectangle rect, Rectangle rhs);
    public static DRectangle op_Implicit(Rectangle val);
    public static MModRect op_Implicit(Rectangle val);
}
public class DlibDotNet.RectangleTransform : DlibObject {
    public PointTransformAffine Transform { get; }
    public RectangleTransform(PointTransformAffine transform);
    public PointTransformAffine get_Transform();
    public Rectangle Operator(Rectangle rectangle);
    public DRectangle Operator(DRectangle drectangle);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.RectDetection : DlibObject {
    public double DetectionConfidence { get; public set; }
    public Rectangle Rect { get; public set; }
    public ulong WeightIndex { get; public set; }
    internal RectDetection(IntPtr ptr);
    public double get_DetectionConfidence();
    public void set_DetectionConfidence(double value);
    public Rectangle get_Rect();
    public void set_Rect(Rectangle value);
    public ulong get_WeightIndex();
    public void set_WeightIndex(ulong value);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ReducedDecisionFunctionTrainer2`3 : Trainer`1<TScalar> {
    private KernelBaseParameter _Parameter;
    private SvmTrainerType _SvmTrainerType;
    private Imp`1<TScalar, TKernel, TTrainer, TScalar> _Imp;
    public ReducedDecisionFunctionTrainer2`3(TTrainer trainer, UInt32 numBaseVector, double eps);
    internal ReducedDecisionFunctionTrainer2`3(IntPtr ptr, bool isEnabledDispose);
    public DecisionFunction`2<TScalar, TKernel> Train(IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y);
    protected virtual void DisposeUnmanaged();
    private static Imp`1<TScalar, TKernel, TTrainer, TScalar> CreateImp(KernelBaseParameter parameter);
}
public class DlibDotNet.RgbAlphaPixel : ValueType {
    public byte Red;
    public byte Green;
    public byte Blue;
    public byte Alpha;
    public RgbAlphaPixel(byte alpha, byte red, byte green, byte blue);
    public sealed virtual bool Equals(RgbAlphaPixel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RgbAlphaPixel left, RgbAlphaPixel right);
    public static bool op_Inequality(RgbAlphaPixel left, RgbAlphaPixel right);
}
public class DlibDotNet.RgbPixel : ValueType {
    public byte Red;
    public byte Green;
    public byte Blue;
    public RgbPixel(byte red, byte green, byte blue);
    public sealed virtual bool Equals(RgbPixel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RgbPixel left, RgbPixel right);
    public static bool op_Inequality(RgbPixel left, RgbPixel right);
}
public class DlibDotNet.RunningStats`1 : DlibObject {
    private RunningStatsType _RunningStatsType;
    private RunningStatsType _Type;
    private static Dictionary`2<Type, RunningStatsType> SupportTypes;
    private RunningStatsImp`1<TKernel, TKernel> _Imp;
    public RunningStatsType RunningStatsType { get; }
    public TKernel CurrentN { get; }
    public TKernel ExcessKurtosis { get; }
    public TKernel Max { get; }
    public TKernel Mean { get; }
    public TKernel Min { get; }
    public TKernel Skewness { get; }
    public TKernel StdDev { get; }
    public TKernel Variance { get; }
    private static RunningStats`1();
    public RunningStatsType get_RunningStatsType();
    public TKernel get_CurrentN();
    public TKernel get_ExcessKurtosis();
    public TKernel get_Max();
    public TKernel get_Mean();
    public TKernel get_Min();
    public TKernel get_Skewness();
    public TKernel get_StdDev();
    public TKernel get_Variance();
    public void Add(TKernel value);
    public void Clear();
    public TKernel Scale(TKernel scale);
    protected virtual void DisposeUnmanaged();
}
public enum DlibDotNet.RunningStatsType : Enum {
    public int value__;
    public static RunningStatsType Float;
    public static RunningStatsType Double;
}
public class DlibDotNet.SamplePair : DlibObject {
    public UInt32 Index1 { get; }
    public UInt32 Index2 { get; }
    public double Distance { get; }
    public SamplePair(UInt32 index1, UInt32 index2);
    public SamplePair(UInt32 index1, UInt32 index2, double distance);
    internal SamplePair(IntPtr ptr);
    public UInt32 get_Index1();
    public UInt32 get_Index2();
    public double get_Distance();
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ScanFHogPyramid`2 : ImageScanner {
    private FHogFeatureExtractorType _FeatureExtractorType;
    private PyramidType _PyramidType;
    private UInt32 _PyramidRate;
    private static Dictionary`2<Type, PyramidType> SupportPyramidType;
    private static Dictionary`2<Type, FHogFeatureExtractorType> SupportFeatureExtractorType;
    public ImageScannerType ScannerType { get; }
    private static ScanFHogPyramid`2();
    public ScanFHogPyramid`2(UInt32 pyramidRate);
    public void SetDetectionWindowSize(UInt32 width, UInt32 height);
    public void SetNuclearNormRegularizationStrength(double strength);
    protected virtual void DisposeUnmanaged();
    internal virtual FHogPyramidParameter GetFHogPyramidParameter();
    public virtual ImageScannerType get_ScannerType();
}
public abstract class DlibDotNet.ScrollableRegion : Drawable {
    protected ScrollableRegion(DrawableWindow window);
    public void SetSize(UInt32 width, UInt32 height);
}
public class DlibDotNet.SelectIndexedActionMediator : DlibObject {
    private IntPtr _Handle;
    private Action`1<UInt32> _Callback;
    public SelectIndexedActionMediator(Action`1<UInt32> callback);
    protected virtual void DisposeUnmanaged();
    private void NativeCallback(UInt32 index);
}
public class DlibDotNet.SerializationException : Exception {
    internal SerializationException(string message);
}
public class DlibDotNet.ShapePredictor : DlibObject {
    public UInt32 Features { get; }
    public UInt32 Parts { get; }
    internal ShapePredictor(IntPtr ptr);
    public UInt32 get_Features();
    public UInt32 get_Parts();
    public static ShapePredictor Deserialize(string path);
    public static ShapePredictor Deserialize(ProxyDeserialize deserialize);
    public FullObjectDetection Detect(Array2DBase image, Rectangle rect);
    public FullObjectDetection Detect(Array2DBase image, MModRect rect);
    public FullObjectDetection Detect(MatrixBase image, Rectangle rect);
    public FullObjectDetection Detect(MatrixBase image, MModRect rect);
    public static void Serialize(ShapePredictor predictor, string path);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.ShapePredictorTrainer : DlibObject {
    public UInt32 CascadeDepth { get; public set; }
    public double FeaturePoolRegionPadding { get; public set; }
    public UInt32 FeaturePoolSize { get; public set; }
    public double Lambda { get; public set; }
    public double Nu { get; public set; }
    public UInt32 NumTreesPerCascadeDepth { get; public set; }
    public UInt32 NumTestSplits { get; public set; }
    public UInt32 NumThreads { get; public set; }
    public UInt32 OverSamplingAmount { get; public set; }
    public PaddingMode PaddingMode { get; public set; }
    public double OverSamplingTranslationJitter { get; public set; }
    public string RandomSeed { get; public set; }
    public UInt32 TreeDepth { get; public set; }
    public UInt32 get_CascadeDepth();
    public void set_CascadeDepth(UInt32 value);
    public double get_FeaturePoolRegionPadding();
    public void set_FeaturePoolRegionPadding(double value);
    public UInt32 get_FeaturePoolSize();
    public void set_FeaturePoolSize(UInt32 value);
    public double get_Lambda();
    public void set_Lambda(double value);
    public double get_Nu();
    public void set_Nu(double value);
    public UInt32 get_NumTreesPerCascadeDepth();
    public void set_NumTreesPerCascadeDepth(UInt32 value);
    public UInt32 get_NumTestSplits();
    public void set_NumTestSplits(UInt32 value);
    public UInt32 get_NumThreads();
    public void set_NumThreads(UInt32 value);
    public UInt32 get_OverSamplingAmount();
    public void set_OverSamplingAmount(UInt32 value);
    public PaddingMode get_PaddingMode();
    public void set_PaddingMode(PaddingMode value);
    public double get_OverSamplingTranslationJitter();
    public void set_OverSamplingTranslationJitter(double value);
    public string get_RandomSeed();
    public void set_RandomSeed(string value);
    public UInt32 get_TreeDepth();
    public void set_TreeDepth(UInt32 value);
    public void BeQuiet();
    public void BeVerbose();
    public ShapePredictor Train(Array`1<Array2D`1<T>> images, IEnumerable`1<IList`1<FullObjectDetection>> objects);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.SigmoidKernel`2 : KernelBase {
    private MatrixElementType _ElementType;
    public SigmoidKernel`2(int templateRow, int templateColumn);
    internal SigmoidKernel`2(IntPtr ptr, int templateRow, int templateColumn, bool isEnabledDispose);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.StdPair`2 : DlibObject {
    private static Dictionary`2<Type, ElementTypes<TFirst, TSecond>> SupportTypes;
    private StdPairImp`2<TFirst, TSecond, TFirst, TSecond> _Imp;
    private TFirst _First;
    private TSecond _Second;
    public TFirst First { get; public set; }
    public TSecond Second { get; public set; }
    private static StdPair`2();
    public StdPair`2(TFirst first, TSecond second);
    public StdPair`2(IntPtr first, IntPtr second);
    internal StdPair`2(IntPtr ptr);
    public TFirst get_First();
    public void set_First(TFirst value);
    public TSecond get_Second();
    public void set_Second(TSecond value);
    private static StdPairImp`2<TFirst, TSecond, TFirst, TSecond> CreateImp();
}
public class DlibDotNet.StdString : DlibObject {
    public StdString(string str);
    internal StdString(IntPtr ptr);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class DlibDotNet.StdVector`1 : DlibObject {
    private StdVectorImp`1<TItem, TItem> _Imp;
    [CompilerGeneratedAttribute]
private IParameter <Param>k__BackingField;
    public IntPtr ElementPtr { get; }
    internal IParameter Param { get; private set; }
    public int Size { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TItem Item { get; public set; }
    public StdVector`1(IParameter param);
    public StdVector`1(int size, IParameter param);
    public StdVector`1(IEnumerable`1<TItem> data, IParameter param);
    internal StdVector`1(IntPtr ptr, IParameter param);
    public IntPtr get_ElementPtr();
    [CompilerGeneratedAttribute]
internal IParameter get_Param();
    [CompilerGeneratedAttribute]
private void set_Param(IParameter value);
    public int get_Size();
    public TItem[] ToArray();
    protected virtual void DisposeUnmanaged();
    private static StdVectorImp`1<TItem, TItem> CreateImp(IParameter param);
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(TItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TItem item);
    public sealed virtual void CopyTo(TItem[] array, int arrayIndex);
    public sealed virtual bool Remove(TItem item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(TItem item);
    public sealed virtual void Insert(int index, TItem item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TItem get_Item(int index);
    public sealed virtual void set_Item(int index, TItem value);
}
internal static class DlibDotNet.StdVectorElementTypesRepository : object {
    public static Dictionary`2<Type, ElementTypes> SupportTypes;
    private static StdVectorElementTypesRepository();
}
public class DlibDotNet.StringActionMediator : DlibObject {
    private IntPtr _Handle;
    private Action`1<string> _Callback;
    public StringActionMediator(Action`1<string> callback);
    protected virtual void DisposeUnmanaged();
    private void NativeCallback(IntPtr file);
}
internal static class DlibDotNet.StringHelper : object {
    public static string FromStdString(IntPtr ptr, bool dispose);
}
public class DlibDotNet.StructuralObjectDetectionTrainer`1 : DlibObject {
    private TrainerImp<T> _Imp;
    public StructuralObjectDetectionTrainer`1(T scanner);
    public void BeVerbose();
    public void SetC(double c);
    public void SetEpsilon(double epsilon);
    public void SetNumThreads(UInt32 threads);
    public ObjectDetector`1<T> Train(IEnumerable`1<Matrix`1<U>> images, IEnumerable`1<IEnumerable`1<Rectangle>> objects);
    protected virtual void DisposeUnmanaged();
    private static TrainerImp<T> CreateImp(T scanner);
}
public class DlibDotNet.SurfPoint : DlibObject {
    public double Angle { get; }
    public InterestPoint P { get; }
    public Matrix`1<double> Des { get; }
    internal SurfPoint(IntPtr ptr);
    internal SurfPoint(IntPtr ptr, bool isEnabledDispose);
    public double get_Angle();
    public InterestPoint get_P();
    public Matrix`1<double> get_Des();
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.SvmCTrainer`2 : Trainer`1<TScalar> {
    private KernelBaseParameter _Parameter;
    private Imp`1<TScalar, TKernel, TScalar> _Imp;
    public int CacheSize { get; public set; }
    public TScalar CClass1 { get; public set; }
    public TScalar CClass2 { get; public set; }
    public TScalar Epsilon { get; public set; }
    public TKernel Kernel { get; public set; }
    internal KernelBaseParameter Parameter { get; }
    public SvmCTrainer`2(TKernel kernelBase, TScalar c);
    public int get_CacheSize();
    public void set_CacheSize(int value);
    public TScalar get_CClass1();
    public void set_CClass1(TScalar value);
    public TScalar get_CClass2();
    public void set_CClass2(TScalar value);
    public TScalar get_Epsilon();
    public void set_Epsilon(TScalar value);
    public TKernel get_Kernel();
    public void set_Kernel(TKernel value);
    internal KernelBaseParameter get_Parameter();
    public void SetC(TScalar c);
    public DecisionFunction`2<TScalar, TKernel> Train(IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y);
    protected virtual void DisposeUnmanaged();
    private static Imp`1<TScalar, TKernel, TScalar> CreateImp(KernelBaseParameter parameter);
}
public enum DlibDotNet.SvmKernelType : Enum {
    public int value__;
    public static SvmKernelType HistogramIntersection;
    public static SvmKernelType Linear;
    public static SvmKernelType Offset;
    public static SvmKernelType Polynomial;
    public static SvmKernelType RadialBasis;
    public static SvmKernelType Sigmoid;
}
public class DlibDotNet.SvmNuTrainer`2 : Trainer`1<TScalar> {
    private KernelBaseParameter _Parameter;
    private Imp`1<TScalar, TKernel, TScalar> _Imp;
    public int CacheSize { get; public set; }
    public TScalar Epsilon { get; public set; }
    public TScalar Nu { get; public set; }
    public TKernel Kernel { get; public set; }
    internal KernelBaseParameter Parameter { get; }
    public SvmNuTrainer`2(TKernel kernelBase, TScalar c);
    public int get_CacheSize();
    public void set_CacheSize(int value);
    public TScalar get_Epsilon();
    public void set_Epsilon(TScalar value);
    public TScalar get_Nu();
    public void set_Nu(TScalar value);
    public TKernel get_Kernel();
    public void set_Kernel(TKernel value);
    internal KernelBaseParameter get_Parameter();
    public DecisionFunction`2<TScalar, TKernel> Train(IEnumerable`1<Matrix`1<TScalar>> x, IEnumerable`1<TScalar> y);
    protected virtual void DisposeUnmanaged();
    private static Imp`1<TScalar, TKernel, TScalar> CreateImp(KernelBaseParameter parameter);
}
public class DlibDotNet.SvmPegasos`2 : Trainer`1<TScalar> {
    private KernelBaseParameter _Parameter;
    private Bridge`1<TScalar, TKernel, TScalar> _Bridge;
    public TScalar LambdaClass1 { get; public set; }
    public TScalar LambdaClass2 { get; public set; }
    public UInt32 MaxNumSupportVector { get; public set; }
    internal KernelBaseParameter Parameter { get; }
    public TKernel Kernel { get; public set; }
    public TScalar Tolerance { get; public set; }
    public UInt32 TrainCount { get; }
    public SvmPegasos`2(TKernel kernelBase, TScalar lambda, TScalar tolerance, UInt32 maxNumSupportVector);
    internal SvmPegasos`2(IntPtr ptr, KernelBaseParameter parameter, bool isEnabledDispose);
    public TScalar get_LambdaClass1();
    public void set_LambdaClass1(TScalar value);
    public TScalar get_LambdaClass2();
    public void set_LambdaClass2(TScalar value);
    public UInt32 get_MaxNumSupportVector();
    public void set_MaxNumSupportVector(UInt32 value);
    internal KernelBaseParameter get_Parameter();
    public TKernel get_Kernel();
    public void set_Kernel(TKernel value);
    public TScalar get_Tolerance();
    public void set_Tolerance(TScalar value);
    public UInt32 get_TrainCount();
    public void Clear();
    public TScalar Operator(Matrix`1<TScalar> sample);
    public void SetLambda(TScalar lambda);
    public TScalar Train(Matrix`1<TScalar> x, TScalar y);
    protected virtual void DisposeUnmanaged();
    private static Bridge`1<TScalar, TKernel, TScalar> CreateBridge(KernelBaseParameter parameter);
}
public class DlibDotNet.TestBoxOverlap : DlibObject {
    internal TestBoxOverlap(IntPtr ptr, bool isEnabledDispose);
    public TestBoxOverlap(double iouThresh, double percentCoveredThresh);
    public double GetIouThresh();
    public double GetPercentCoveredThresh();
    public bool Operator(Rectangle a, Rectangle b);
    protected virtual void DisposeUnmanaged();
}
public class DlibDotNet.TextField : Drawable {
    private DrawableWindow _Window;
    public bool HasInputFocus { get; }
    public string Text { get; public set; }
    public TextField(DrawableWindow window);
    public bool get_HasInputFocus();
    public string get_Text();
    public void set_Text(string value);
    public void GiveInputFocus();
    public void SelectAllText();
    public void SetWidth(UInt32 width);
    public void SetTextModifiedHandler(VoidActionMediator mediator);
    protected virtual void DisposeUnmanaged();
}
public abstract class DlibDotNet.Trainer`1 : DlibObject {
    protected Trainer`1(bool isEnabledDispose);
}
public abstract class DlibDotNet.TrainerBase : DlibObject {
    protected TrainerBase(bool isEnabledDispose);
}
internal static class DlibDotNet.TrainerHelper : object {
    public static void GetTypes(Type& trainerType, SvmTrainerType& svmTrainerType, SvmKernelType& svmKernelType, MatrixElementTypes& sampleType);
}
internal static class DlibDotNet.TrainerTypesRepository : object {
    public static Dictionary`2<Type, SvmTrainerType> Types;
    private static TrainerTypesRepository();
}
public abstract class DlibDotNet.TwoDimensionObjectBase : DlibObject {
    public int Columns { get; }
    public int Rows { get; }
    protected TwoDimensionObjectBase(bool isEnabledDispose);
    public abstract virtual int get_Columns();
    public abstract virtual int get_Rows();
}
internal static class DlibDotNet.Util.GenericHelper : object {
    public static Type GetTypeParameter(Type type);
}
internal static class DlibDotNet.Util.MathHelper : object {
    public static double ConvertToRadian(double angle);
}
public class DlibDotNet.Vector`1 : VectorBase`1<TType> {
    private VectorElementTypes _VectorElementTypes;
    private VectorElementType _ElementType;
    private static Dictionary`2<Type, VectorElementTypes> SupportTypes;
    private VectorImp`1<TType, TType> _Imp;
    public double Length { get; }
    public double LengthSquared { get; }
    public TType X { get; }
    public TType Y { get; }
    public TType Z { get; }
    private static Vector`1();
    public Vector`1(TType x, TType y, TType z);
    internal Vector`1(IntPtr ptr, bool isEnabledDispose);
    public virtual double get_Length();
    public virtual double get_LengthSquared();
    public virtual TType get_X();
    public virtual TType get_Y();
    public virtual TType get_Z();
    public static Vector`1<TType> op_Addition(Vector`1<TType> left, Vector`1<TType> right);
    public static Vector`1<TType> op_Division(Vector`1<TType> vector, TType div);
    protected virtual void DisposeUnmanaged();
    public virtual string ToString();
    private VectorImp`1<TType, TType> CreateVectorImp(VectorElementType types);
}
public abstract class DlibDotNet.VectorBase`1 : DlibObject {
    public double Length { get; }
    public double LengthSquared { get; }
    public T X { get; }
    public T Y { get; }
    public T Z { get; }
    protected VectorBase`1(bool isEnabledDispose);
    public abstract virtual double get_Length();
    public abstract virtual double get_LengthSquared();
    public abstract virtual T get_X();
    public abstract virtual T get_Y();
    public abstract virtual T get_Z();
}
public enum DlibDotNet.VectorElementTypes : Enum {
    public int value__;
    public static VectorElementTypes UInt8;
    public static VectorElementTypes UInt16;
    public static VectorElementTypes UInt32;
    public static VectorElementTypes Int8;
    public static VectorElementTypes Int16;
    public static VectorElementTypes Int32;
    public static VectorElementTypes Float;
    public static VectorElementTypes Double;
}
public class DlibDotNet.VectorNormalizer`1 : Normalizer {
    private MatrixElementType _ElementType;
    private Imp`1<TElement, TElement> _Imp;
    public TElement Operator(TElement x);
    public void Train(IEnumerable`1<TElement> samples);
    protected virtual void DisposeUnmanaged();
    private Imp`1<TElement, TElement> CreateImp(MatrixElementTypes type);
}
internal static class DlibDotNet.VectorNormalizerElementTypesRepository : object {
    public static Dictionary`2<Type, MatrixElementTypes> Types;
    private static VectorNormalizerElementTypesRepository();
}
public class DlibDotNet.VoidActionMediator : DlibObject {
    private IntPtr _Handle;
    private Action _Callback;
    public VoidActionMediator(Action callback);
    protected virtual void DisposeUnmanaged();
    private void NativeCallback();
}
internal class DlibDotNet.WindowsLibraryLoader : object {
    private static string ProcessorArchitecture;
    private static string DllFileExtension;
    private static string DllDirectory;
    private Dictionary`2<string, int> _ProcessorArchitectureAddressWidthPlatforms;
    private Dictionary`2<string, string> _ProcessorArchitecturePlatforms;
    private object _SyncLock;
    private static IDictionary`2<string, IntPtr> LoadedLibraries;
    private static WindowsLibraryLoader();
    private static IntPtr Win32LoadLibrary(string dllPath);
    public static bool IsCurrentPlatformSupported();
    public static bool IsWindows();
    private static string FixUpDllFileName(string fileName);
    private ProcessArchitectureInfo GetProcessArchitecture();
    private string GetPlatformName(string processorArchitecture);
    public void LoadLibraries(IEnumerable`1<string> dlls);
    private void LoadLibrary(string dllName);
    private IntPtr LoadLibraryInternal(string dllName, string baseDirectory, ProcessArchitectureInfo processArchInfo);
    private IntPtr LoadLibraryRaw(string dllName, string baseDirectory);
}
