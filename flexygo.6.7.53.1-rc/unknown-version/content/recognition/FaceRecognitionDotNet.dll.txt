internal class DlibDotNet.NativeMethods : object {
    public static string AgeClassificationNativeLibrary;
    public static CallingConvention AgeClassificationCallingConvention;
    public static string GenderClassificationNativeLibrary;
    public static CallingConvention GenderClassificationCallingConvention;
    public static string HeadPoseEstimationNativeLibrary;
    public static CallingConvention HeadPoseEstimationCallingConvention;
    public static IntPtr LossMulticlassLog_age_train_type_create();
    public static void LossMulticlassLog_age_train_type_delete(IntPtr base);
    public static IntPtr LossMulticlassLog_gender_train_type_create();
    public static void LossMulticlassLog_gender_train_type_delete(IntPtr base);
    public static IntPtr LossMulticlassLog_headpose_train_type_create();
    public static void LossMulticlassLog_headpose_train_type_delete(IntPtr base);
}
public abstract class FaceRecognitionDotNet.DisposableObject : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public void ThrowIfDisposed();
    internal void ThrowIfDisposed(string objectName);
    protected virtual void DisposeManaged();
    protected virtual void DisposeUnmanaged();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class FaceRecognitionDotNet.Dlib.Python.CnnFaceDetectionModelV1 : object {
    public static IEnumerable`1<MModRect> Detect(LossMmod net, Image image, int upsampleNumTimes);
    public static IEnumerable`1<IEnumerable`1<MModRect>> DetectMulti(LossMmod net, IEnumerable`1<Image> images, int upsampleNumTimes, int batchSize);
}
internal class FaceRecognitionDotNet.Dlib.Python.FaceRecognitionModelV1 : object {
    private static Rand Rand;
    private static FaceRecognitionModelV1();
    public static Matrix`1<double> ComputeFaceDescriptor(LossMetric net, Image img, FullObjectDetection face, int numJitters);
    public static IEnumerable`1<Matrix`1<double>> ComputeFaceDescriptors(LossMetric net, Image img, IEnumerable`1<FullObjectDetection> faces, int numJitters);
    public static IEnumerable`1<IEnumerable`1<Matrix`1<double>>> BatchComputeFaceDescriptors(LossMetric net, IList`1<Image> batchImages, IList`1<IEnumerable`1<FullObjectDetection>> batchFaces, int numJitters);
    private static IEnumerable`1<Matrix`1<RgbPixel>> JitterImage(Matrix`1<RgbPixel> img, int numJitters);
}
internal class FaceRecognitionDotNet.Dlib.Python.SimpleObjectDetector : object {
    public static IEnumerable`1<Rectangle> RunDetectorWithUpscale1(FrontalFaceDetector detector, Image img, UInt32 upsamplingAmount, double adjustThreshold, List`1<double> detectionConfidences, List`1<ulong> weightIndices);
    public static IEnumerable`1<Rectangle> RunDetectorWithUpscale2(FrontalFaceDetector detector, Image image, UInt32 upsamplingAmount);
    private static void SplitRectDetections(RectDetection[] rectDetections, List`1<Rectangle> rectangles, List`1<double> detectionConfidences, List`1<ulong> weightIndices);
}
public abstract class FaceRecognitionDotNet.Extensions.AgeEstimator : DisposableObject {
    public AgeRange[] Groups { get; }
    public abstract virtual AgeRange[] get_Groups();
    internal UInt32 Predict(Image image, Location location);
    internal IDictionary`2<UInt32, float> PredictProbability(Image image, Location location);
    protected abstract virtual UInt32 RawPredict(MatrixBase matrix, Location location);
    protected abstract virtual IDictionary`2<UInt32, float> RawPredictProbability(MatrixBase matrix, Location location);
}
public class FaceRecognitionDotNet.Extensions.AgeRange : ValueType {
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    public int End { get; }
    public int Start { get; }
    public AgeRange(int start, int end);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public int get_Start();
}
public abstract class FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector : EyeBlinkDetector {
    [CompilerGeneratedAttribute]
private Int32[] <LeftEyePointIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LeftRatioThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <RightEyePointIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RightRatioThreshold>k__BackingField;
    protected Int32[] LeftEyePointIndices { get; }
    public double LeftRatioThreshold { get; }
    protected Int32[] RightEyePointIndices { get; }
    public double RightRatioThreshold { get; }
    protected EyeAspectRatioBaseEyeBlinkDetector(double leftRatioThreshold, double rightRatioThreshold, Int32[] leftEyePointIndices, Int32[] rightEyePointIndices);
    [CompilerGeneratedAttribute]
protected Int32[] get_LeftEyePointIndices();
    [CompilerGeneratedAttribute]
public double get_LeftRatioThreshold();
    [CompilerGeneratedAttribute]
protected Int32[] get_RightEyePointIndices();
    [CompilerGeneratedAttribute]
public double get_RightRatioThreshold();
    protected virtual void RawDetect(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark, Boolean& leftBlink, Boolean& rightBlink);
    protected double GetEar(IList`1<FacePoint> eye, IList`1<int> eyePointIndices);
    private static double Euclidean(FacePoint p1, FacePoint p2);
}
public class FaceRecognitionDotNet.Extensions.EyeAspectRatioHelenEyeBlinkDetector : EyeAspectRatioBaseEyeBlinkDetector {
    public EyeAspectRatioHelenEyeBlinkDetector(double leftRatioThreshold, double rightRatioThreshold);
}
public class FaceRecognitionDotNet.Extensions.EyeAspectRatioLargeEyeBlinkDetector : EyeAspectRatioBaseEyeBlinkDetector {
    public EyeAspectRatioLargeEyeBlinkDetector(double leftRatioThreshold, double rightRatioThreshold);
}
public abstract class FaceRecognitionDotNet.Extensions.EyeBlinkDetector : DisposableObject {
    internal void Detect(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark, Boolean& leftBlink, Boolean& rightBlink);
    protected abstract virtual void RawDetect(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark, Boolean& leftBlink, Boolean& rightBlink);
}
public abstract class FaceRecognitionDotNet.Extensions.FaceLandmarkDetector : DisposableObject {
    internal FullObjectDetection Detect(Image image, Location location);
    internal IEnumerable`1<Dictionary`2<FacePart, IEnumerable`1<FacePoint>>> GetLandmarks(IEnumerable`1<FacePoint[]> landmarkTuples);
    protected abstract virtual FullObjectDetection RawDetect(MatrixBase matrix, Location location);
    protected abstract virtual IEnumerable`1<Dictionary`2<FacePart, IEnumerable`1<FacePoint>>> RawGetLandmarks(IEnumerable`1<FacePoint[]> landmarkTuples);
}
public abstract class FaceRecognitionDotNet.Extensions.GenderEstimator : DisposableObject {
    public Gender[] Labels { get; }
    public abstract virtual Gender[] get_Labels();
    internal Gender Predict(Image image, Location location);
    internal IDictionary`2<Gender, float> PredictProbability(Image image, Location location);
    protected abstract virtual Gender RawPredict(MatrixBase matrix, Location location);
    protected abstract virtual IDictionary`2<Gender, float> RawPredictProbability(MatrixBase matrix, Location location);
}
public abstract class FaceRecognitionDotNet.Extensions.HeadPoseEstimator : DisposableObject {
    internal HeadPose Predict(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark);
    protected abstract virtual HeadPose RawPredict(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark);
}
public class FaceRecognitionDotNet.Extensions.HelenFaceLandmarkDetector : FaceLandmarkDetector {
    private ShapePredictor _Predictor;
    public HelenFaceLandmarkDetector(string modelPath);
    protected virtual FullObjectDetection RawDetect(MatrixBase matrix, Location location);
    protected virtual IEnumerable`1<Dictionary`2<FacePart, IEnumerable`1<FacePoint>>> RawGetLandmarks(IEnumerable`1<FacePoint[]> landmarkTuples);
    protected virtual void DisposeUnmanaged();
}
public class FaceRecognitionDotNet.Extensions.SimpleAgeEstimator : AgeEstimator {
    private LossMulticlassLog _Network;
    public AgeRange[] Groups { get; }
    public SimpleAgeEstimator(string modelPath);
    public virtual AgeRange[] get_Groups();
    protected virtual UInt32 RawPredict(MatrixBase matrix, Location location);
    protected virtual IDictionary`2<UInt32, float> RawPredictProbability(MatrixBase matrix, Location location);
}
public class FaceRecognitionDotNet.Extensions.SimpleGenderEstimator : GenderEstimator {
    private LossMulticlassLog _Network;
    public Gender[] Labels { get; }
    public SimpleGenderEstimator(string modelPath);
    public virtual Gender[] get_Labels();
    protected virtual Gender RawPredict(MatrixBase matrix, Location location);
    protected virtual IDictionary`2<Gender, float> RawPredictProbability(MatrixBase matrix, Location location);
}
public class FaceRecognitionDotNet.Extensions.SimpleHeadPoseEstimator : HeadPoseEstimator {
    private RadialBasisKernel`2<double, Matrix`1<double>> _RollKernel;
    private RadialBasisKernel`2<double, Matrix`1<double>> _PitchKernel;
    private RadialBasisKernel`2<double, Matrix`1<double>> _YawKernel;
    private Krls`2<double, RadialBasisKernel`2<double, Matrix`1<double>>> _RollEstimator;
    private Krls`2<double, RadialBasisKernel`2<double, Matrix`1<double>>> _PitchEstimator;
    private Krls`2<double, RadialBasisKernel`2<double, Matrix`1<double>>> _YawEstimator;
    public SimpleHeadPoseEstimator(string rollModelFile, string pitchModelFile, string yawModelFile);
    protected virtual HeadPose RawPredict(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark);
    protected virtual void DisposeUnmanaged();
    private static Matrix`1<double> GetPitchMatrix(IList`1<FacePoint> points);
    private static Matrix`1<double> GetRollMatrix(IList`1<FacePoint> points);
    private static Matrix`1<double> GetYawMatrix(IList`1<FacePoint> points);
    private static void NormalizeVector(IList`1<double> vector);
}
public class FaceRecognitionDotNet.FaceEncoding : DisposableObject {
    private Matrix`1<double> _Encoding;
    internal Matrix`1<double> Encoding { get; }
    public int Size { get; }
    internal FaceEncoding(Matrix`1<double> encoding);
    private FaceEncoding(SerializationInfo info, StreamingContext context);
    internal Matrix`1<double> get_Encoding();
    public int get_Size();
    public Double[] GetRawEncoding();
    protected virtual void DisposeUnmanaged();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum FaceRecognitionDotNet.FacePart : Enum {
    public int value__;
    public static FacePart Chin;
    public static FacePart LeftEyebrow;
    public static FacePart RightEyebrow;
    public static FacePart NoseBridge;
    public static FacePart NoseTip;
    public static FacePart LeftEye;
    public static FacePart RightEye;
    public static FacePart TopLip;
    public static FacePart BottomLip;
    public static FacePart Nose;
}
public class FaceRecognitionDotNet.FacePoint : object {
    [CompilerGeneratedAttribute]
private Point <Point>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public Point Point { get; }
    public int Index { get; }
    public FacePoint(Point point, int index);
    [CompilerGeneratedAttribute]
public Point get_Point();
    [CompilerGeneratedAttribute]
public int get_Index();
    public sealed virtual bool Equals(FacePoint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FacePoint point1, FacePoint point2);
    public static bool op_Inequality(FacePoint point1, FacePoint point2);
}
public class FaceRecognitionDotNet.FaceRecognition : DisposableObject {
    private ShapePredictor _PosePredictor68Point;
    private ShapePredictor _PosePredictor5Point;
    private LossMmod _CnnFaceDetector;
    private LossMetric _FaceEncoder;
    private FrontalFaceDetector _FaceDetector;
    private FaceLandmarkDetector _CustomFaceLandmarkDetector;
    private AgeEstimator _CustomAgeEstimator;
    private GenderEstimator _CustomGenderEstimator;
    private EyeBlinkDetector _CustomEyeBlinkDetector;
    private HeadPoseEstimator _CustomHeadPoseEstimator;
    public AgeEstimator CustomAgeEstimator { get; public set; }
    public EyeBlinkDetector CustomEyeBlinkDetector { get; public set; }
    public GenderEstimator CustomGenderEstimator { get; public set; }
    public FaceLandmarkDetector CustomFaceLandmarkDetector { get; public set; }
    public HeadPoseEstimator CustomHeadPoseEstimator { get; public set; }
    public static Encoding InternalEncoding { get; public set; }
    private FaceRecognition(string directory);
    public AgeEstimator get_CustomAgeEstimator();
    public void set_CustomAgeEstimator(AgeEstimator value);
    public EyeBlinkDetector get_CustomEyeBlinkDetector();
    public void set_CustomEyeBlinkDetector(EyeBlinkDetector value);
    public GenderEstimator get_CustomGenderEstimator();
    public void set_CustomGenderEstimator(GenderEstimator value);
    public FaceLandmarkDetector get_CustomFaceLandmarkDetector();
    public void set_CustomFaceLandmarkDetector(FaceLandmarkDetector value);
    public HeadPoseEstimator get_CustomHeadPoseEstimator();
    public void set_CustomHeadPoseEstimator(HeadPoseEstimator value);
    public static Encoding get_InternalEncoding();
    public static void set_InternalEncoding(Encoding value);
    [IteratorStateMachineAttribute("FaceRecognitionDotNet.FaceRecognition/<BatchFaceLocations>d__29")]
public IEnumerable`1<Location[]> BatchFaceLocations(IEnumerable`1<Image> images, int numberOfTimesToUpsample, int batchSize);
    public static bool CompareFace(FaceEncoding knownFaceEncoding, FaceEncoding faceEncodingToCheck, double tolerance);
    [IteratorStateMachineAttribute("FaceRecognitionDotNet.FaceRecognition/<CompareFaces>d__31")]
public static IEnumerable`1<bool> CompareFaces(IEnumerable`1<FaceEncoding> knownFaceEncodings, FaceEncoding faceEncodingToCheck, double tolerance);
    public static FaceRecognition Create(string directory);
    [IteratorStateMachineAttribute("FaceRecognitionDotNet.FaceRecognition/<CropFaces>d__33")]
public static IEnumerable`1<Image> CropFaces(Image image, IEnumerable`1<Location> locations);
    public void EyeBlinkDetect(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark, Boolean& leftBlink, Boolean& rightBlink);
    public static double FaceDistance(FaceEncoding faceEncoding, FaceEncoding faceToCompare);
    [IteratorStateMachineAttribute("FaceRecognitionDotNet.FaceRecognition/<FaceDistances>d__36")]
public static IEnumerable`1<double> FaceDistances(IEnumerable`1<FaceEncoding> faceEncodings, FaceEncoding faceToCompare);
    [IteratorStateMachineAttribute("FaceRecognitionDotNet.FaceRecognition/<FaceEncodings>d__37")]
public IEnumerable`1<FaceEncoding> FaceEncodings(Image image, IEnumerable`1<Location> knownFaceLocation, int numJitters, PredictorModel model);
    public IEnumerable`1<IDictionary`2<FacePart, IEnumerable`1<FacePoint>>> FaceLandmark(Image faceImage, IEnumerable`1<Location> faceLocations, PredictorModel model);
    [IteratorStateMachineAttribute("FaceRecognitionDotNet.FaceRecognition/<FaceLocations>d__39")]
public IEnumerable`1<Location> FaceLocations(Image image, int numberOfTimesToUpsample, Model model);
    public static FaceEncoding LoadFaceEncoding(Double[] encoding);
    public static Image LoadImage(Bitmap bitmap);
    public static Image LoadImage(Byte[] array, int row, int column, int stride, Mode mode);
    public static Image LoadImage(IntPtr array, int row, int column, int stride, Mode mode);
    public static Image LoadImageFile(string file, Mode mode);
    public UInt32 PredictAge(Image image, Location location);
    public Gender PredictGender(Image image, Location location);
    public IDictionary`2<UInt32, float> PredictProbabilityAge(Image image, Location location);
    public IDictionary`2<Gender, float> PredictProbabilityGender(Image image, Location location);
    public HeadPose PredictHeadPose(IDictionary`2<FacePart, IEnumerable`1<FacePoint>> landmark);
    [IteratorStateMachineAttribute("FaceRecognitionDotNet.FaceRecognition/<RawFaceLandmarks>d__50")]
private IEnumerable`1<FullObjectDetection> RawFaceLandmarks(Image faceImage, IEnumerable`1<Location> faceLocations, PredictorModel model);
    private IEnumerable`1<MModRect> RawFaceLocations(Image faceImage, int numberOfTimesToUpsample, Model model);
    private IEnumerable`1<IEnumerable`1<MModRect>> RawFaceLocationsBatched(IEnumerable`1<Image> faceImages, int numberOfTimesToUpsample, int batchSize);
    private static Location TrimBound(Rectangle location, int width, int height);
    protected virtual void DisposeUnmanaged();
}
internal class FaceRecognitionDotNet.FaceRecognitionModels : object {
    public static string GetPosePredictorModelLocation();
    public static string GetPosePredictorFivePointModelLocation();
    public static string GetFaceRecognitionModelLocation();
    public static string GetCnnFaceDetectorModelLocation();
    public static string GetPosePredictor194PointModelLocation();
    public static string GetAgeNetworkModelLocation();
    public static string GetGenderNetworkModelLocation();
}
public enum FaceRecognitionDotNet.Gender : Enum {
    public int value__;
    public static Gender Female;
    public static Gender Male;
}
public class FaceRecognitionDotNet.HeadPose : object {
    [CompilerGeneratedAttribute]
private double <Pitch>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Roll>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Yaw>k__BackingField;
    public double Pitch { get; }
    public double Roll { get; }
    public double Yaw { get; }
    public HeadPose(double roll, double pitch, double yaw);
    [CompilerGeneratedAttribute]
public double get_Pitch();
    [CompilerGeneratedAttribute]
public double get_Roll();
    [CompilerGeneratedAttribute]
public double get_Yaw();
    public sealed virtual bool Equals(HeadPose other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HeadPose pose1, HeadPose pose2);
    public static bool op_Inequality(HeadPose pose1, HeadPose pose2);
}
public class FaceRecognitionDotNet.Image : DisposableObject {
    private MatrixBase _Matrix;
    private Mode _Mode;
    public int Height { get; }
    internal MatrixBase Matrix { get; }
    internal Mode Mode { get; }
    public int Width { get; }
    internal Image(MatrixBase matrix, Mode mode);
    public int get_Height();
    internal MatrixBase get_Matrix();
    internal Mode get_Mode();
    public int get_Width();
    public void Save(string filename, ImageFormat format);
    protected virtual void DisposeUnmanaged();
}
public enum FaceRecognitionDotNet.ImageFormat : Enum {
    public int value__;
    public static ImageFormat Bmp;
    public static ImageFormat Jpeg;
    public static ImageFormat Png;
}
public class FaceRecognitionDotNet.Location : object {
    [CompilerGeneratedAttribute]
private int <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    public int Bottom { get; }
    public int Left { get; }
    public int Right { get; }
    public int Top { get; }
    public Location(int left, int top, int right, int bottom);
    [CompilerGeneratedAttribute]
public int get_Bottom();
    [CompilerGeneratedAttribute]
public int get_Left();
    [CompilerGeneratedAttribute]
public int get_Right();
    [CompilerGeneratedAttribute]
public int get_Top();
    public sealed virtual bool Equals(Location other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Location location1, Location location2);
    public static bool op_Inequality(Location location1, Location location2);
}
public enum FaceRecognitionDotNet.Mode : Enum {
    public int value__;
    public static Mode Rgb;
    public static Mode Greyscale;
}
public enum FaceRecognitionDotNet.Model : Enum {
    public int value__;
    public static Model Hog;
    public static Model Cnn;
}
public class FaceRecognitionDotNet.Point : ValueType {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public int X { get; }
    public int Y { get; }
    public Point(int x, int y);
    internal Point(Point point);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    public sealed virtual bool Equals(Point other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Point point1, Point point2);
    public static bool op_Inequality(Point point1, Point point2);
}
public enum FaceRecognitionDotNet.PredictorModel : Enum {
    public int value__;
    public static PredictorModel Large;
    public static PredictorModel Small;
    public static PredictorModel Custom;
}
