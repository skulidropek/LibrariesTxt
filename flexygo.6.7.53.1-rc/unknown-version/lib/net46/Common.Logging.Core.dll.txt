[AttributeUsageAttribute("96")]
public class Common.Logging.Factory.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
public class Common.Logging.FormatMessageHandler : MulticastDelegate {
    public FormatMessageHandler(object object, IntPtr method);
    public virtual string Invoke(string format, Object[] args);
    public virtual IAsyncResult BeginInvoke(string format, Object[] args, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public interface Common.Logging.IConfigurationReader {
    public abstract virtual object GetSection(string sectionName);
}
public interface Common.Logging.ILog {
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public IVariablesContext GlobalVariablesContext { get; }
    public IVariablesContext ThreadVariablesContext { get; }
    public abstract virtual void Trace(object message);
    public abstract virtual void Trace(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void TraceFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void TraceFormat(string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void TraceFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void TraceFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public abstract virtual void Trace(Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Trace(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Trace(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Trace(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Debug(object message);
    public abstract virtual void Debug(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void DebugFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void DebugFormat(string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void DebugFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void DebugFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public abstract virtual void Debug(Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Debug(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Debug(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Debug(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Info(object message);
    public abstract virtual void Info(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void InfoFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void InfoFormat(string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void InfoFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void InfoFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public abstract virtual void Info(Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Info(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Info(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Info(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Warn(object message);
    public abstract virtual void Warn(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void WarnFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void WarnFormat(string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void WarnFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void WarnFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public abstract virtual void Warn(Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Warn(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Warn(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Warn(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Error(object message);
    public abstract virtual void Error(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void ErrorFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void ErrorFormat(string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void ErrorFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void ErrorFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public abstract virtual void Error(Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Error(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Error(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Error(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Fatal(object message);
    public abstract virtual void Fatal(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public abstract virtual void FatalFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void FatalFormat(string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void FatalFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public abstract virtual void FatalFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public abstract virtual void Fatal(Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Fatal(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual void Fatal(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public abstract virtual void Fatal(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public abstract virtual bool get_IsTraceEnabled();
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual bool get_IsFatalEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual IVariablesContext get_GlobalVariablesContext();
    public abstract virtual IVariablesContext get_ThreadVariablesContext();
}
public interface Common.Logging.ILoggerFactoryAdapter {
    public abstract virtual ILog GetLogger(Type type);
    public abstract virtual ILog GetLogger(string key);
}
public interface Common.Logging.ILogManager {
    public string COMMON_LOGGING_SECTION { get; }
    public IConfigurationReader ConfigurationReader { get; }
    public ILoggerFactoryAdapter Adapter { get; public set; }
    public abstract virtual string get_COMMON_LOGGING_SECTION();
    public abstract virtual void Reset();
    public abstract virtual void Reset(IConfigurationReader reader);
    public abstract virtual IConfigurationReader get_ConfigurationReader();
    public abstract virtual ILoggerFactoryAdapter get_Adapter();
    public abstract virtual void set_Adapter(ILoggerFactoryAdapter value);
    [ObsoleteAttribute("Null-Reference Exception when dealing with Dynamic Types, Prefer instead one of the LogManager.GetLogger(...) variants.")]
public abstract virtual ILog GetCurrentClassLogger();
    public abstract virtual ILog GetLogger();
    public abstract virtual ILog GetLogger(Type type);
    public abstract virtual ILog GetLogger(string key);
}
public interface Common.Logging.IVariablesContext {
    public abstract virtual void Set(string key, object value);
    public abstract virtual object Get(string key);
    public abstract virtual bool Contains(string key);
    public abstract virtual void Remove(string key);
    public abstract virtual void Clear();
}
[FlagsAttribute]
public enum Common.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel All;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Fatal;
    public static LogLevel Off;
}
