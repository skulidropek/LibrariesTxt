public static class Common.Logging.Configuration.ArgUtils : object {
    private static Dictionary`2<Type, object> s_parsers;
    [CompilerGeneratedAttribute]
private static Predicate`1<string> CS$<>9__CachedAnonymousMethodDelegate1;
    private static ArgUtils();
    public static void RegisterTypeParser(ParseHandler`1<T> parser);
    public static string GetValue(NameValueCollection values, string key);
    public static string GetValue(NameValueCollection values, string key, string defaultValue);
    public static string Coalesce(String[] values);
    public static T Coalesce(Predicate`1<T> predicate, T[] values);
    public static T TryParseEnum(T defaultValue, string stringValue);
    public static T TryParse(T defaultValue, string stringValue);
    public static T AssertNotNull(string paramName, T val);
    public static T AssertNotNull(string paramName, T val, string messageFormat, Object[] args);
    public static Type AssertIsAssignable(string paramName, Type valType);
    public static Type AssertIsAssignable(string paramName, Type valType, string messageFormat, Object[] args);
    public static void Guard(Action action, string messageFormat, Object[] args);
    public static T Guard(Function`1<T> function, string messageFormat, Object[] args);
    [CompilerGeneratedAttribute]
private static bool <Coalesce>b__0(string v);
    [CompilerGeneratedAttribute]
private static bool <Coalesce>b__2(T v);
}
public class Common.Logging.Configuration.DefaultConfigurationReader : object {
    public sealed virtual object GetSection(string sectionName);
}
public class Common.Logging.Configuration.LogSetting : object {
    private Type _factoryAdapterType;
    private NameValueCollection _properties;
    public Type FactoryAdapterType { get; }
    public NameValueCollection Properties { get; }
    public LogSetting(Type factoryAdapterType, NameValueCollection properties);
    public Type get_FactoryAdapterType();
    public NameValueCollection get_Properties();
}
[DefaultMemberAttribute("Item")]
public class Common.Logging.Configuration.NameValueCollection : Dictionary`2<string, string> {
    public string Item { get; public set; }
    public String[] GetValues(string key);
    public string get_Item(string key);
    public void set_Item(string key, string value);
}
public static class Common.Logging.Configuration.NameValueCollectionHelper : object {
    public static NameValueCollection ToCommonLoggingCollection(NameValueCollection properties);
}
public class Common.Logging.ConfigurationException : ApplicationException {
    public ConfigurationException(string message);
    public ConfigurationException(string message, Exception rootCause);
    protected ConfigurationException(SerializationInfo info, StreamingContext context);
}
public class Common.Logging.ConfigurationSectionHandler : object {
    private static string LOGFACTORYADAPTER_ELEMENT;
    private static string LOGFACTORYADAPTER_ELEMENT_TYPE_ATTRIB;
    private static string ARGUMENT_ELEMENT;
    private static string ARGUMENT_ELEMENT_KEY_ATTRIB;
    private static string ARGUMENT_ELEMENT_VALUE_ATTRIB;
    private static ConfigurationSectionHandler();
    private LogSetting ReadConfiguration(XmlNode section);
    public LogSetting Create(LogSetting parent, object configContext, XmlNode section);
    private sealed virtual override object System.Configuration.IConfigurationSectionHandler.Create(object parent, object configContext, XmlNode section);
}
public abstract class Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter : object {
    private Dictionary`2<string, ILog> _cachedLoggers;
    protected AbstractCachingLoggerFactoryAdapter(bool caseSensitiveLoggerCache);
    protected void ClearLoggerCache();
    protected abstract virtual ILog CreateLogger(string name);
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string key);
    private ILog GetLoggerInternal(string key);
}
public abstract class Common.Logging.Factory.AbstractLogger : object {
    private WriteHandler Write;
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public IVariablesContext GlobalVariablesContext { get; }
    public IVariablesContext ThreadVariablesContext { get; }
    protected virtual WriteHandler GetWriteHandler();
    public abstract virtual bool get_IsTraceEnabled();
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual bool get_IsFatalEnabled();
    protected abstract virtual void WriteInternal(LogLevel level, object message, Exception exception);
    public virtual void Trace(object message);
    public virtual void Trace(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public virtual void TraceFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void TraceFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void TraceFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void TraceFormat(string format, Exception exception, Object[] args);
    public virtual void Trace(Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Trace(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Trace(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Trace(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Debug(object message);
    public virtual void Debug(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public virtual void DebugFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void DebugFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void DebugFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void DebugFormat(string format, Exception exception, Object[] args);
    public virtual void Debug(Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Debug(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Debug(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Debug(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Info(object message);
    public virtual void Info(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public virtual void InfoFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void InfoFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void InfoFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void InfoFormat(string format, Exception exception, Object[] args);
    public virtual void Info(Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Info(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Info(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Info(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Warn(object message);
    public virtual void Warn(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public virtual void WarnFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void WarnFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void WarnFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void WarnFormat(string format, Exception exception, Object[] args);
    public virtual void Warn(Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Warn(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Warn(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Warn(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Error(object message);
    public virtual void Error(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public virtual void ErrorFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void ErrorFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void ErrorFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void ErrorFormat(string format, Exception exception, Object[] args);
    public virtual void Error(Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Error(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Error(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Error(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Fatal(object message);
    public virtual void Fatal(object message, Exception exception);
    [StringFormatMethodAttribute("format")]
public virtual void FatalFormat(IFormatProvider formatProvider, string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void FatalFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void FatalFormat(string format, Object[] args);
    [StringFormatMethodAttribute("format")]
public virtual void FatalFormat(string format, Exception exception, Object[] args);
    public virtual void Fatal(Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Fatal(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual void Fatal(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public virtual void Fatal(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public virtual IVariablesContext get_GlobalVariablesContext();
    public virtual IVariablesContext get_ThreadVariablesContext();
}
public class Common.Logging.LogManager : object {
    private static IConfigurationReader _configurationReader;
    private static ILoggerFactoryAdapter _adapter;
    private static object _loadLock;
    public static string COMMON_LOGGING_SECTION { get; }
    private string Common.Logging.ILogManager.COMMON_LOGGING_SECTION { get; }
    public static IConfigurationReader ConfigurationReader { get; }
    private IConfigurationReader Common.Logging.ILogManager.ConfigurationReader { get; }
    public static ILoggerFactoryAdapter Adapter { get; public set; }
    private ILoggerFactoryAdapter Common.Logging.ILogManager.Adapter { get; private set; }
    private static LogManager();
    public static string get_COMMON_LOGGING_SECTION();
    private sealed virtual override string Common.Logging.ILogManager.get_COMMON_LOGGING_SECTION();
    public static void Reset();
    private sealed virtual override void Common.Logging.ILogManager.Reset();
    public static void Reset(IConfigurationReader reader);
    private sealed virtual override void Common.Logging.ILogManager.Reset(IConfigurationReader reader);
    public static IConfigurationReader get_ConfigurationReader();
    private sealed virtual override IConfigurationReader Common.Logging.ILogManager.get_ConfigurationReader();
    public static ILoggerFactoryAdapter get_Adapter();
    public static void set_Adapter(ILoggerFactoryAdapter value);
    private sealed virtual override ILoggerFactoryAdapter Common.Logging.ILogManager.get_Adapter();
    private sealed virtual override void Common.Logging.ILogManager.set_Adapter(ILoggerFactoryAdapter value);
    [ObsoleteAttribute("Null-Reference Exception when dealing with Dynamic Types, Prefer instead one of the LogManager.GetLogger(...) variants.")]
public static ILog GetCurrentClassLogger();
    [ObsoleteAttribute("Null-Reference Exception when dealing with Dynamic Types, Prefer instead one of the LogManager.GetLogger(...) variants.")]
private sealed virtual override ILog Common.Logging.ILogManager.GetCurrentClassLogger();
    public static ILog GetLogger();
    private sealed virtual override ILog Common.Logging.ILogManager.GetLogger();
    public static ILog GetLogger(Type type);
    private sealed virtual override ILog Common.Logging.ILogManager.GetLogger(Type type);
    public static ILog GetLogger(string key);
    private sealed virtual override ILog Common.Logging.ILogManager.GetLogger(string key);
    private static ILoggerFactoryAdapter BuildLoggerFactoryAdapter();
    private static ILoggerFactoryAdapter BuildLoggerFactoryAdapterFromLogSettings(LogSetting setting);
}
public abstract class Common.Logging.Simple.AbstractSimpleLogger : AbstractLogger {
    private string _name;
    private bool _showLevel;
    private bool _showDateTime;
    private bool _showLogName;
    private LogLevel _currentLogLevel;
    private string _dateTimeFormat;
    private bool _hasDateTimeFormat;
    [CoverageExcludeAttribute]
public string Name { get; }
    [CoverageExcludeAttribute]
public bool ShowLevel { get; }
    [CoverageExcludeAttribute]
public bool ShowDateTime { get; }
    [CoverageExcludeAttribute]
public bool ShowLogName { get; }
    [CoverageExcludeAttribute]
public LogLevel CurrentLogLevel { get; public set; }
    [CoverageExcludeAttribute]
public string DateTimeFormat { get; }
    [CoverageExcludeAttribute]
public bool HasDateTimeFormat { get; }
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public AbstractSimpleLogger(string logName, LogLevel logLevel, bool showlevel, bool showDateTime, bool showLogName, string dateTimeFormat);
    public string get_Name();
    public bool get_ShowLevel();
    public bool get_ShowDateTime();
    public bool get_ShowLogName();
    public LogLevel get_CurrentLogLevel();
    public void set_CurrentLogLevel(LogLevel value);
    public string get_DateTimeFormat();
    public bool get_HasDateTimeFormat();
    protected virtual void FormatOutput(StringBuilder stringBuilder, LogLevel level, object message, Exception e);
    protected virtual bool IsLevelEnabled(LogLevel level);
    public virtual bool get_IsTraceEnabled();
    public virtual bool get_IsDebugEnabled();
    public virtual bool get_IsInfoEnabled();
    public virtual bool get_IsWarnEnabled();
    public virtual bool get_IsErrorEnabled();
    public virtual bool get_IsFatalEnabled();
}
public abstract class Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter : AbstractCachingLoggerFactoryAdapter {
    private LogLevel _level;
    private bool _showLevel;
    private bool _showDateTime;
    private bool _showLogName;
    private string _dateTimeFormat;
    [CoverageExcludeAttribute]
public LogLevel Level { get; public set; }
    [CoverageExcludeAttribute]
public bool ShowLevel { get; public set; }
    [CoverageExcludeAttribute]
public bool ShowDateTime { get; public set; }
    [CoverageExcludeAttribute]
public bool ShowLogName { get; public set; }
    [CoverageExcludeAttribute]
public string DateTimeFormat { get; public set; }
    protected AbstractSimpleLoggerFactoryAdapter(NameValueCollection properties);
    protected AbstractSimpleLoggerFactoryAdapter(LogLevel level, bool showDateTime, bool showLogName, bool showLevel, string dateTimeFormat);
    public LogLevel get_Level();
    public void set_Level(LogLevel value);
    public bool get_ShowLevel();
    public void set_ShowLevel(bool value);
    public bool get_ShowDateTime();
    public void set_ShowDateTime(bool value);
    public bool get_ShowLogName();
    public void set_ShowLogName(bool value);
    public string get_DateTimeFormat();
    public void set_DateTimeFormat(string value);
    protected virtual ILog CreateLogger(string name);
    protected abstract virtual ILog CreateLogger(string name, LogLevel level, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
}
public class Common.Logging.Simple.CapturingLogger : AbstractSimpleLogger {
    public CapturingLoggerFactoryAdapter Owner;
    private CapturingLoggerEvent modreq(System.Runtime.CompilerServices.IsVolatile) _lastEvent;
    public IList`1<CapturingLoggerEvent> LoggerEvents;
    public CapturingLoggerEvent LastEvent { get; }
    public CapturingLogger(CapturingLoggerFactoryAdapter owner, string logName);
    public CapturingLoggerEvent get_LastEvent();
    public void Clear();
    public void ClearLastEvent();
    public virtual void AddEvent(CapturingLoggerEvent loggerEvent);
    protected virtual void WriteInternal(LogLevel level, object message, Exception exception);
}
public class Common.Logging.Simple.CapturingLoggerEvent : object {
    public CapturingLogger Source;
    public LogLevel Level;
    public object MessageObject;
    public Exception Exception;
    public string RenderedMessage { get; }
    public CapturingLoggerEvent(CapturingLogger source, LogLevel level, object messageObject, Exception exception);
    public string get_RenderedMessage();
}
public class Common.Logging.Simple.CapturingLoggerFactoryAdapter : object {
    private Dictionary`2<string, ILog> _cachedLoggers;
    private CapturingLoggerEvent modreq(System.Runtime.CompilerServices.IsVolatile) _lastEvent;
    public IList`1<CapturingLoggerEvent> LoggerEvents;
    public CapturingLoggerEvent LastEvent { get; }
    public CapturingLoggerEvent get_LastEvent();
    public void Clear();
    public void ClearLastEvent();
    public virtual void AddEvent(CapturingLoggerEvent loggerEvent);
    public sealed virtual ILog GetLogger(Type type);
    public sealed virtual ILog GetLogger(string name);
}
public class Common.Logging.Simple.CommonLoggingTraceListener : TraceListener {
    private TraceEventType _defaultTraceEventType;
    private string _loggerNameFormat;
    public TraceEventType DefaultTraceEventType { get; public set; }
    public string LoggerNameFormat { get; public set; }
    public CommonLoggingTraceListener(string initializeData);
    public CommonLoggingTraceListener(NameValueCollection properties);
    public TraceEventType get_DefaultTraceEventType();
    public void set_DefaultTraceEventType(TraceEventType value);
    public string get_LoggerNameFormat();
    public void set_LoggerNameFormat(string value);
    private void ApplyProperties(NameValueCollection props);
    protected virtual void Log(TraceEventType eventType, string source, int id, string format, Object[] args);
    private static NameValueCollection GetPropertiesFromInitString(string initializeData);
    public virtual void Write(object o);
    public virtual void Write(object o, string category);
    public virtual void Write(string message);
    public virtual void Write(string message, string category);
    public virtual void WriteLine(object o);
    public virtual void WriteLine(object o, string category);
    public virtual void WriteLine(string message);
    public virtual void WriteLine(string message, string category);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message, Object[] args);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    private string GetFormat(Object[] data);
    private LogLevel MapLogLevel(TraceEventType eventType);
}
public class Common.Logging.Simple.ConsoleOutLogger : AbstractSimpleLogger {
    private static Dictionary`2<LogLevel, ConsoleColor> colors;
    private bool useColor;
    public ConsoleOutLogger(string logName, LogLevel logLevel, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
    public ConsoleOutLogger(string logName, LogLevel logLevel, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat, bool useColor);
    private static ConsoleOutLogger();
    protected virtual void WriteInternal(LogLevel level, object message, Exception e);
}
public class Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter : AbstractSimpleLoggerFactoryAdapter {
    private bool useColor;
    public ConsoleOutLoggerFactoryAdapter(NameValueCollection properties);
    [ObsoleteAttribute("Use Constructor taking Common.Logging.Configuration.NameValueCollection instead")]
public ConsoleOutLoggerFactoryAdapter(NameValueCollection properties);
    public ConsoleOutLoggerFactoryAdapter(LogLevel level, bool showDateTime, bool showLogName, bool showLevel, string dateTimeFormat);
    public ConsoleOutLoggerFactoryAdapter(LogLevel level, bool showDateTime, bool showLogName, bool showLevel, string dateTimeFormat, bool useColor);
    protected virtual ILog CreateLogger(string name, LogLevel level, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
}
public class Common.Logging.Simple.DebugLoggerFactoryAdapter : AbstractSimpleLoggerFactoryAdapter {
    public DebugLoggerFactoryAdapter(NameValueCollection properties);
    public DebugLoggerFactoryAdapter(LogLevel level, bool showDateTime, bool showLogName, bool showLevel, string dateTimeFormat);
    protected virtual ILog CreateLogger(string name, LogLevel level, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
}
public class Common.Logging.Simple.DebugOutLogger : AbstractSimpleLogger {
    public DebugOutLogger(string logName, LogLevel logLevel, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
    protected virtual void WriteInternal(LogLevel level, object message, Exception e);
}
internal static class Common.Logging.Simple.ExceptionFormatter : object {
    private static string STANDARD_DELIMETER;
    private static string INNERMOST_DELIMETER;
    internal static string Format(Exception exception);
    internal static string Format(Exception exception, IFormatProvider formatProvider);
    private static void FormatSingleException(IFormatProvider formatProvider, StringBuilder sb, Exception exception, int exceptionIndex);
    private static void OutputHeader(IFormatProvider formatProvider, StringBuilder sb, Exception exception, int exceptionIndex);
    private static void OutputDetails(IFormatProvider formatProvider, StringBuilder sb, Exception exception);
    private static void OutputMessage(IFormatProvider formatProvider, StringBuilder sb, Exception exception);
    private static void OutputProperties(IFormatProvider formatProvider, StringBuilder sb, Exception exception);
    private static void OutputData(IFormatProvider formatProvider, StringBuilder sb, Exception exception);
    private static void OutputStackTrace(IFormatProvider formatProvider, StringBuilder sb, Exception exception);
    private static void SafeGetTargetSiteInfo(Exception exception, String& assemblyName, String& assemblyModulePath, String& typeName, String& methodName);
    private static void SafeGetSourceAndHelplink(Exception exception, String& source, String& helplink);
}
[CoverageExcludeAttribute]
public class Common.Logging.Simple.NoOpLogger : object {
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public IVariablesContext GlobalVariablesContext { get; }
    public IVariablesContext ThreadVariablesContext { get; }
    public sealed virtual bool get_IsTraceEnabled();
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual bool get_IsFatalEnabled();
    public sealed virtual void Trace(object message);
    public sealed virtual void Trace(object message, Exception e);
    public sealed virtual void TraceFormat(string format, Object[] args);
    public sealed virtual void TraceFormat(string format, Exception exception, Object[] args);
    public sealed virtual void TraceFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void TraceFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public sealed virtual void Trace(Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Trace(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Trace(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Trace(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Debug(object message);
    public sealed virtual void Debug(object message, Exception e);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void DebugFormat(string format, Exception exception, Object[] args);
    public sealed virtual void DebugFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void DebugFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public sealed virtual void Debug(Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Debug(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Debug(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Debug(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Info(object message);
    public sealed virtual void Info(object message, Exception e);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void InfoFormat(string format, Exception exception, Object[] args);
    public sealed virtual void InfoFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void InfoFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public sealed virtual void Info(Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Info(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Info(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Info(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Warn(object message);
    public sealed virtual void Warn(object message, Exception e);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void WarnFormat(string format, Exception exception, Object[] args);
    public sealed virtual void WarnFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void WarnFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public sealed virtual void Warn(Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Warn(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Warn(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Warn(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Error(object message);
    public sealed virtual void Error(object message, Exception e);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void ErrorFormat(string format, Exception exception, Object[] args);
    public sealed virtual void ErrorFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void ErrorFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public sealed virtual void Error(Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Error(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Error(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Error(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Fatal(object message);
    public sealed virtual void Fatal(object message, Exception e);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void FatalFormat(string format, Exception exception, Object[] args);
    public sealed virtual void FatalFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void FatalFormat(IFormatProvider formatProvider, string format, Exception exception, Object[] args);
    public sealed virtual void Fatal(Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Fatal(Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual void Fatal(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback);
    public sealed virtual void Fatal(IFormatProvider formatProvider, Action`1<FormatMessageHandler> formatMessageCallback, Exception exception);
    public sealed virtual IVariablesContext get_GlobalVariablesContext();
    public sealed virtual IVariablesContext get_ThreadVariablesContext();
}
public class Common.Logging.Simple.NoOpLoggerFactoryAdapter : object {
    private static ILog s_nopLogger;
    public NoOpLoggerFactoryAdapter(NameValueCollection properties);
    private static NoOpLoggerFactoryAdapter();
    public sealed virtual ILog GetLogger(Type type);
    private sealed virtual override ILog Common.Logging.ILoggerFactoryAdapter.GetLogger(string key);
}
public class Common.Logging.Simple.NoOpVariablesContext : object {
    public sealed virtual void Set(string key, object value);
    public sealed virtual object Get(string key);
    public sealed virtual bool Contains(string key);
    public sealed virtual void Remove(string key);
    public sealed virtual void Clear();
}
public class Common.Logging.Simple.TraceLogger : AbstractSimpleLogger {
    private bool _useTraceSource;
    private TraceSource _traceSource;
    public TraceLogger(bool useTraceSource, string logName, LogLevel logLevel, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
    protected virtual bool IsLevelEnabled(LogLevel level);
    protected virtual void WriteInternal(LogLevel level, object message, Exception e);
    private TraceEventType Map2TraceEventType(LogLevel logLevel);
    private SourceLevels Map2SourceLevel(LogLevel logLevel);
    public virtual void OnDeserialization(object sender);
}
public class Common.Logging.Simple.TraceLoggerFactoryAdapter : AbstractSimpleLoggerFactoryAdapter {
    private bool _useTraceSource;
    [CoverageExcludeAttribute]
public bool UseTraceSource { get; public set; }
    public TraceLoggerFactoryAdapter(NameValueCollection properties);
    public TraceLoggerFactoryAdapter(LogLevel level, bool showDateTime, bool showLogName, bool showLevel, string dateTimeFormat, bool useTraceSource);
    public bool get_UseTraceSource();
    public void set_UseTraceSource(bool value);
    protected virtual ILog CreateLogger(string name, LogLevel level, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
}
[AttributeUsageAttribute("32767")]
internal class CoverageExcludeAttribute : Attribute {
}
