public class DevExpress.Charts.Model.AreaSeries : AreaSeriesBase {
    [CompilerGeneratedAttribute]
private bool <ColorEach>k__BackingField;
    public bool ActualColorEach { get; }
    public bool ColorEach { get; public set; }
    public virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorEach(bool value);
}
public abstract class DevExpress.Charts.Model.AreaSeriesBase : MarkerCartesianSeriesBase {
    [CompilerGeneratedAttribute]
private byte <Transparency>k__BackingField;
    public byte Transparency { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Transparency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Transparency(byte value);
}
public enum DevExpress.Charts.Model.ArgumentScaleType : Enum {
    public int value__;
    public static ArgumentScaleType Qualitative;
    public static ArgumentScaleType Numerical;
    public static ArgumentScaleType DateTime;
    public static ArgumentScaleType TimeSpan;
    public static ArgumentScaleType Auto;
}
public class DevExpress.Charts.Model.Axis : NonPolarAxis {
    private AxisPosition position;
    private bool tickmarksVisible;
    private bool tickmarksMinorVisible;
    private bool tickmarksCrossAxis;
    private AxisTitle title;
    private bool reverse;
    [CompilerGeneratedAttribute]
private ModelIntervalOptions <IntervalOptions>k__BackingField;
    public AxisPosition Position { get; public set; }
    public bool TickmarksVisible { get; public set; }
    public bool TickmarksMinorVisible { get; public set; }
    public bool TickmarksCrossAxis { get; public set; }
    public AxisTitle Title { get; public set; }
    public bool Reverse { get; public set; }
    public ModelIntervalOptions IntervalOptions { get; public set; }
    public Axis(CartesianChart parent);
    public AxisPosition get_Position();
    public void set_Position(AxisPosition value);
    public bool get_TickmarksVisible();
    public void set_TickmarksVisible(bool value);
    public bool get_TickmarksMinorVisible();
    public void set_TickmarksMinorVisible(bool value);
    public bool get_TickmarksCrossAxis();
    public void set_TickmarksCrossAxis(bool value);
    public AxisTitle get_Title();
    public void set_Title(AxisTitle value);
    public bool get_Reverse();
    public void set_Reverse(bool value);
    [CompilerGeneratedAttribute]
public ModelIntervalOptions get_IntervalOptions();
    [CompilerGeneratedAttribute]
public void set_IntervalOptions(ModelIntervalOptions value);
}
public class DevExpress.Charts.Model.AxisAppearance : ModelElement {
    private FillStyle interlacedFillStyle;
    private LineStyle gridLinesLineStyle;
    private LineStyle gridLinesMinorLineStyle;
    private AxisTitleAppearance titleAppearance;
    [CompilerGeneratedAttribute]
private ColorARGB <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Thickness>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interlaced>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <InterlacedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <GridLinesColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <GridLinesMinorColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <LabelTextColor>k__BackingField;
    public ColorARGB Color { get; public set; }
    public int Thickness { get; public set; }
    public bool Interlaced { get; public set; }
    public FillStyle InterlacedFillStyle { get; public set; }
    public ColorARGB InterlacedColor { get; public set; }
    public ColorARGB GridLinesColor { get; public set; }
    public LineStyle GridLinesLineStyle { get; public set; }
    public ColorARGB GridLinesMinorColor { get; public set; }
    public LineStyle GridLinesMinorLineStyle { get; public set; }
    public ColorARGB LabelTextColor { get; public set; }
    public AxisTitleAppearance TitleAppearance { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ColorARGB value);
    [CompilerGeneratedAttribute]
public int get_Thickness();
    [CompilerGeneratedAttribute]
public void set_Thickness(int value);
    [CompilerGeneratedAttribute]
public bool get_Interlaced();
    [CompilerGeneratedAttribute]
public void set_Interlaced(bool value);
    public FillStyle get_InterlacedFillStyle();
    public void set_InterlacedFillStyle(FillStyle value);
    [CompilerGeneratedAttribute]
public ColorARGB get_InterlacedColor();
    [CompilerGeneratedAttribute]
public void set_InterlacedColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public ColorARGB get_GridLinesColor();
    [CompilerGeneratedAttribute]
public void set_GridLinesColor(ColorARGB value);
    public LineStyle get_GridLinesLineStyle();
    public void set_GridLinesLineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public ColorARGB get_GridLinesMinorColor();
    [CompilerGeneratedAttribute]
public void set_GridLinesMinorColor(ColorARGB value);
    public LineStyle get_GridLinesMinorLineStyle();
    public void set_GridLinesMinorLineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public ColorARGB get_LabelTextColor();
    [CompilerGeneratedAttribute]
public void set_LabelTextColor(ColorARGB value);
    public AxisTitleAppearance get_TitleAppearance();
    public void set_TitleAppearance(AxisTitleAppearance value);
}
public abstract class DevExpress.Charts.Model.AxisBase : ModelElement {
    private bool gridLinesVisible;
    private bool gridLinesMinorVisible;
    private AxisLabel label;
    private AxisRange range;
    private AxisAppearance appearance;
    private bool visible;
    private Nullable`1<int> gridSpacingFactor;
    public bool GridLinesVisible { get; public set; }
    public bool GridLinesMinorVisible { get; public set; }
    public AxisLabel Label { get; public set; }
    public AxisRange Range { get; public set; }
    public AxisAppearance Appearance { get; public set; }
    public bool Visible { get; public set; }
    public Nullable`1<int> GridSpacingFactor { get; public set; }
    protected AxisBase(Chart parent);
    public bool get_GridLinesVisible();
    public void set_GridLinesVisible(bool value);
    public bool get_GridLinesMinorVisible();
    public void set_GridLinesMinorVisible(bool value);
    public AxisLabel get_Label();
    public void set_Label(AxisLabel value);
    public AxisRange get_Range();
    public void set_Range(AxisRange value);
    public AxisAppearance get_Appearance();
    public void set_Appearance(AxisAppearance value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Nullable`1<int> get_GridSpacingFactor();
    public void set_GridSpacingFactor(Nullable`1<int> value);
}
public class DevExpress.Charts.Model.AxisCollection : ModelElementCollection`1<Axis> {
    public AxisCollection(CartesianChart parent);
}
public class DevExpress.Charts.Model.AxisLabel : ModelElement {
    private bool visible;
    private DefaultBoolean enableAntialiasing;
    private IAxisLabelFormatter formatter;
    private int rotationAngleDegree;
    private ModelAxisLabelResolveOverlappingOptions resolveOverlappingOptions;
    public bool Visible { get; public set; }
    public IAxisLabelFormatter Formatter { get; public set; }
    public DefaultBoolean EnableAntialiasing { get; public set; }
    public int RotationAngleDegree { get; public set; }
    public ModelAxisLabelResolveOverlappingOptions ResolveOverlappingOptions { get; public set; }
    public AxisLabel(AxisBase parent);
    public bool get_Visible();
    public void set_Visible(bool value);
    public IAxisLabelFormatter get_Formatter();
    public void set_Formatter(IAxisLabelFormatter value);
    public DefaultBoolean get_EnableAntialiasing();
    public void set_EnableAntialiasing(DefaultBoolean value);
    public int get_RotationAngleDegree();
    public void set_RotationAngleDegree(int value);
    public ModelAxisLabelResolveOverlappingOptions get_ResolveOverlappingOptions();
    public void set_ResolveOverlappingOptions(ModelAxisLabelResolveOverlappingOptions value);
    private void SetResolveOverlappingOptions(ModelAxisLabelResolveOverlappingOptions newValue);
}
public enum DevExpress.Charts.Model.AxisPosition : Enum {
    public int value__;
    public static AxisPosition Left;
    public static AxisPosition Right;
    public static AxisPosition Top;
    public static AxisPosition Bottom;
}
public class DevExpress.Charts.Model.AxisRange : ModelElement {
    private object minValue;
    private object maxValue;
    public object MinValue { get; public set; }
    public object MaxValue { get; public set; }
    public AxisRange(AxisBase parent);
    public object get_MinValue();
    public void set_MinValue(object value);
    public object get_MaxValue();
    public void set_MaxValue(object value);
}
public class DevExpress.Charts.Model.AxisTitle : TitleBase {
    private string text;
    private bool visible;
    public string Text { get; public set; }
    public bool Visible { get; public set; }
    public AxisTitle(Axis parent);
    public string get_Text();
    public void set_Text(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
}
public class DevExpress.Charts.Model.AxisTitleAppearance : TitleAppearanceBase {
}
public enum DevExpress.Charts.Model.Bar3DModel : Enum {
    public int value__;
    public static Bar3DModel Box;
    public static Bar3DModel Cylinder;
    public static Bar3DModel Cone;
    public static Bar3DModel Pyramid;
}
public abstract class DevExpress.Charts.Model.BarSeries : ColorEachCartesianSeriesBase {
    [CompilerGeneratedAttribute]
private double <BarWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Bar3DModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Transparency>k__BackingField;
    public double BarWidth { get; public set; }
    public Bar3DModel Model { get; public set; }
    public byte Transparency { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual double get_BarWidth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BarWidth(double value);
    [CompilerGeneratedAttribute]
public sealed virtual Bar3DModel get_Model();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Model(Bar3DModel value);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Transparency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Transparency(byte value);
}
public class DevExpress.Charts.Model.Border : ModelElement {
    [CompilerGeneratedAttribute]
private int <Thickness>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <Color>k__BackingField;
    public int Thickness { get; public set; }
    public ColorARGB Color { get; public set; }
    public Border(ModelElement parent);
    [CompilerGeneratedAttribute]
public int get_Thickness();
    [CompilerGeneratedAttribute]
public void set_Thickness(int value);
    [CompilerGeneratedAttribute]
public ColorARGB get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ColorARGB value);
}
public class DevExpress.Charts.Model.BoxPlotSeries : CartesianSeriesBase {
    [CompilerGeneratedAttribute]
private bool <ShowMeanLine>k__BackingField;
    public bool ActualColorEach { get; }
    public bool ShowMeanLine { get; public set; }
    public virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public bool get_ShowMeanLine();
    [CompilerGeneratedAttribute]
public void set_ShowMeanLine(bool value);
}
public class DevExpress.Charts.Model.BubbleSeries : PointSeriesBase {
    private double minSize;
    private double maxSize;
    [CompilerGeneratedAttribute]
private byte <Transparency>k__BackingField;
    public byte Transparency { get; public set; }
    public double MinSize { get; public set; }
    public double MaxSize { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Transparency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Transparency(byte value);
    public double get_MinSize();
    public void set_MinSize(double value);
    public double get_MaxSize();
    public void set_MaxSize(double value);
}
public class DevExpress.Charts.Model.CandleStickSeries : FinancialSeries {
}
public class DevExpress.Charts.Model.Cartesian3DChart : CartesianChart {
    private Options3D options3D;
    public IOptions3D Options3D { get; }
    public sealed virtual IOptions3D get_Options3D();
    protected internal virtual bool IsSeriesValid(SeriesModel value);
}
public class DevExpress.Charts.Model.CartesianChart : Chart {
    private AxisCollection secondaryArgumentAxes;
    private AxisCollection secondaryValueAxes;
    private Axis argumentAxis;
    private Axis valueAxis;
    [CompilerGeneratedAttribute]
private ChartDataTable <ChartDataTable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rotated>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BarDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BarDistanceFixed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRangeDependentEnqueuer>k__BackingField;
    public ChartDataTable ChartDataTable { get; public set; }
    public bool Rotated { get; public set; }
    public double BarDistance { get; public set; }
    public int BarDistanceFixed { get; public set; }
    public AxisCollection SecondaryArgumentAxes { get; }
    public AxisCollection SecondaryValueAxes { get; }
    public bool UseRangeDependentEnqueuer { get; public set; }
    public Axis ArgumentAxis { get; public set; }
    public Axis ValueAxis { get; public set; }
    [CompilerGeneratedAttribute]
public ChartDataTable get_ChartDataTable();
    [CompilerGeneratedAttribute]
public void set_ChartDataTable(ChartDataTable value);
    [CompilerGeneratedAttribute]
public bool get_Rotated();
    [CompilerGeneratedAttribute]
public void set_Rotated(bool value);
    [CompilerGeneratedAttribute]
public double get_BarDistance();
    [CompilerGeneratedAttribute]
public void set_BarDistance(double value);
    [CompilerGeneratedAttribute]
public int get_BarDistanceFixed();
    [CompilerGeneratedAttribute]
public void set_BarDistanceFixed(int value);
    public AxisCollection get_SecondaryArgumentAxes();
    public AxisCollection get_SecondaryValueAxes();
    [CompilerGeneratedAttribute]
public bool get_UseRangeDependentEnqueuer();
    [CompilerGeneratedAttribute]
public void set_UseRangeDependentEnqueuer(bool value);
    public Axis get_ArgumentAxis();
    public void set_ArgumentAxis(Axis value);
    public Axis get_ValueAxis();
    public void set_ValueAxis(Axis value);
    protected internal virtual bool IsSeriesValid(SeriesModel value);
}
public abstract class DevExpress.Charts.Model.CartesianSeriesBase : SeriesModel {
    private int secondaryArgumentAxisIndex;
    private int secondaryValueAxisIndex;
    private ProcessEmptyPointsMode processEmptyPoints;
    private List`1<Indicator> indicators;
    public int SecondaryArgumentAxisIndex { get; public set; }
    public int SecondaryValueAxisIndex { get; public set; }
    public ProcessEmptyPointsMode ProcessEmptyPoints { get; public set; }
    public List`1<Indicator> Indicators { get; }
    public int get_SecondaryArgumentAxisIndex();
    public void set_SecondaryArgumentAxisIndex(int value);
    public int get_SecondaryValueAxisIndex();
    public void set_SecondaryValueAxisIndex(int value);
    public ProcessEmptyPointsMode get_ProcessEmptyPoints();
    public void set_ProcessEmptyPoints(ProcessEmptyPointsMode value);
    public List`1<Indicator> get_Indicators();
}
public abstract class DevExpress.Charts.Model.Chart : ChartBase {
    private SeriesCollection series;
    private ChartAppearanceOptions appearance;
    private bool autoLayout;
    public SeriesCollection Series { get; }
    public ChartAppearanceOptions Appearance { get; public set; }
    public bool AutoLayout { get; public set; }
    public SeriesCollection get_Series();
    public ChartAppearanceOptions get_Appearance();
    public void set_Appearance(ChartAppearanceOptions value);
    public bool get_AutoLayout();
    public void set_AutoLayout(bool value);
    protected internal abstract virtual bool IsSeriesValid(SeriesModel value);
}
public class DevExpress.Charts.Model.ChartAppearance : ModelElement {
    private Border border;
    private FillStyle fillStyle;
    private RectangleIndents padding;
    private ChartTitleAppearance titleAppearance;
    [CompilerGeneratedAttribute]
private ColorARGB <BackColor>k__BackingField;
    public ColorARGB BackColor { get; public set; }
    public Border Border { get; public set; }
    public FillStyle FillStyle { get; public set; }
    public RectangleIndents Padding { get; public set; }
    public ChartTitleAppearance TitleAppearance { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_BackColor();
    [CompilerGeneratedAttribute]
public void set_BackColor(ColorARGB value);
    public Border get_Border();
    public void set_Border(Border value);
    public FillStyle get_FillStyle();
    public void set_FillStyle(FillStyle value);
    public RectangleIndents get_Padding();
    public void set_Padding(RectangleIndents value);
    public ChartTitleAppearance get_TitleAppearance();
    public void set_TitleAppearance(ChartTitleAppearance value);
}
public class DevExpress.Charts.Model.ChartAppearanceOptions : ModelElement {
    private ChartAppearance chartAppearance;
    private LegendAppearance legendAppearance;
    private DiagramAppearance diagramAppearance;
    private SeriesAppearance seriesAppearance;
    public ChartAppearance ChartAppearance { get; public set; }
    public LegendAppearance LegendAppearance { get; public set; }
    public DiagramAppearance DiagramAppearance { get; public set; }
    public SeriesAppearance SeriesAppearance { get; public set; }
    public ChartAppearance get_ChartAppearance();
    public void set_ChartAppearance(ChartAppearance value);
    public LegendAppearance get_LegendAppearance();
    public void set_LegendAppearance(LegendAppearance value);
    public DiagramAppearance get_DiagramAppearance();
    public void set_DiagramAppearance(DiagramAppearance value);
    public SeriesAppearance get_SeriesAppearance();
    public void set_SeriesAppearance(SeriesAppearance value);
}
public abstract class DevExpress.Charts.Model.ChartBase : ModelElement {
    private Palette palette;
    private object dataSource;
    private Legend legend;
    private ChartTitleCollection titles;
    public object DataSource { get; public set; }
    public Palette Palette { get; public set; }
    public Legend Legend { get; public set; }
    public ChartTitleCollection Titles { get; }
    public object get_DataSource();
    public void set_DataSource(object value);
    public Palette get_Palette();
    public void set_Palette(Palette value);
    public Legend get_Legend();
    public void set_Legend(Legend value);
    public ChartTitleCollection get_Titles();
}
public class DevExpress.Charts.Model.ChartDataTable : object {
    [CompilerGeneratedAttribute]
private bool <ShowBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHorizontalLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowVerticalLines>k__BackingField;
    [CompilerGeneratedAttribute]
private FontModel <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <LineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private LineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLegendMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VerticalIndent>k__BackingField;
    public bool ShowBorder { get; public set; }
    public bool ShowHorizontalLines { get; public set; }
    public bool ShowVerticalLines { get; public set; }
    public FontModel Font { get; public set; }
    public ColorARGB TextColor { get; public set; }
    public ColorARGB LineColor { get; public set; }
    public LineStyle LineStyle { get; }
    public bool ShowLegendMarker { get; public set; }
    public bool Visible { get; public set; }
    public int VerticalIndent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowBorder();
    [CompilerGeneratedAttribute]
public void set_ShowBorder(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowHorizontalLines();
    [CompilerGeneratedAttribute]
public void set_ShowHorizontalLines(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowVerticalLines();
    [CompilerGeneratedAttribute]
public void set_ShowVerticalLines(bool value);
    [CompilerGeneratedAttribute]
public FontModel get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(FontModel value);
    [CompilerGeneratedAttribute]
public ColorARGB get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public ColorARGB get_LineColor();
    [CompilerGeneratedAttribute]
public void set_LineColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public bool get_ShowLegendMarker();
    [CompilerGeneratedAttribute]
public void set_ShowLegendMarker(bool value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public int get_VerticalIndent();
    [CompilerGeneratedAttribute]
public void set_VerticalIndent(int value);
}
public class DevExpress.Charts.Model.ChartModelException : Exception {
    public ChartModelException(string message);
    public static ChartModelException ThrowNullReferenceException(string objectName);
}
public class DevExpress.Charts.Model.ChartTitle : TitleBase {
    [CompilerGeneratedAttribute]
private String[] <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOverlay>k__BackingField;
    public String[] Lines { get; public set; }
    public bool IsOverlay { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsOverlay();
    [CompilerGeneratedAttribute]
public void set_IsOverlay(bool value);
}
public class DevExpress.Charts.Model.ChartTitleAppearance : TitleAppearanceBase {
    [CompilerGeneratedAttribute]
private int <Indent>k__BackingField;
    public int Indent { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(int value);
}
public class DevExpress.Charts.Model.ChartTitleCollection : ModelElementCollection`1<ChartTitle> {
    public ChartTitleCollection(ChartBase parent);
}
public class DevExpress.Charts.Model.CircularAxisY : NonPolarAxis {
    private bool tickmarksVisible;
    private bool tickmarksMinorVisible;
    private bool tickmarksCrossAxis;
    public bool TickmarksVisible { get; public set; }
    public bool TickmarksMinorVisible { get; public set; }
    public bool TickmarksCrossAxis { get; public set; }
    public bool get_TickmarksVisible();
    public void set_TickmarksVisible(bool value);
    public bool get_TickmarksMinorVisible();
    public void set_TickmarksMinorVisible(bool value);
    public bool get_TickmarksCrossAxis();
    public void set_TickmarksCrossAxis(bool value);
}
public abstract class DevExpress.Charts.Model.CircularChart : Chart {
    private DirectionMode direction;
    private CircularAxisY valueAxis;
    private CircularDiagramStyle style;
    private bool useRangeDependentEnqueuer;
    public DirectionMode Direction { get; public set; }
    public CircularAxisY ValueAxis { get; public set; }
    public CircularDiagramStyle Style { get; public set; }
    public bool UseRangeDependentEnqueuer { get; public set; }
    public DirectionMode get_Direction();
    public void set_Direction(DirectionMode value);
    public CircularAxisY get_ValueAxis();
    public void set_ValueAxis(CircularAxisY value);
    public CircularDiagramStyle get_Style();
    public void set_Style(CircularDiagramStyle value);
    public bool get_UseRangeDependentEnqueuer();
    public void set_UseRangeDependentEnqueuer(bool value);
}
public enum DevExpress.Charts.Model.CircularDiagramStyle : Enum {
    public int value__;
    public static CircularDiagramStyle Circle;
    public static CircularDiagramStyle Polygon;
}
public class DevExpress.Charts.Model.ColorARGB : ValueType {
    public static ColorARGB Empty;
    public static ColorARGB Transparent;
    private UInt32 argb;
    public byte A { get; }
    public byte R { get; }
    public byte G { get; }
    public byte B { get; }
    public bool IsEmpty { get; }
    public bool IsTransparent { get; }
    public ColorARGB(byte alpha, byte red, byte green, byte blue);
    private static ColorARGB();
    public static ColorARGB Parse(string argbColor);
    public static bool op_Equality(ColorARGB color1, ColorARGB color2);
    public static bool op_Inequality(ColorARGB color1, ColorARGB color2);
    public static bool Equals(ColorARGB color1, ColorARGB color2);
    public byte get_A();
    public byte get_R();
    public byte get_G();
    public byte get_B();
    public bool get_IsEmpty();
    public bool get_IsTransparent();
    public sealed virtual bool Equals(ColorARGB other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(ColorARGB other);
}
public abstract class DevExpress.Charts.Model.ColorEachCartesianSeriesBase : CartesianSeriesBase {
    [CompilerGeneratedAttribute]
private bool <ColorEach>k__BackingField;
    public bool ActualColorEach { get; }
    public bool ColorEach { get; public set; }
    public virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorEach(bool value);
}
public abstract class DevExpress.Charts.Model.ColorEachMarkerSeriesBase : SeriesModel {
    [CompilerGeneratedAttribute]
private bool <ColorEach>k__BackingField;
    [CompilerGeneratedAttribute]
private Marker <Marker>k__BackingField;
    public bool ColorEach { get; public set; }
    public Marker Marker { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorEach(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Marker get_Marker();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Marker(Marker value);
}
public abstract class DevExpress.Charts.Model.Controller : object {
    private ChartBase chartModel;
    [CompilerGeneratedAttribute]
private IModelElementContainer <ElementContainer>k__BackingField;
    protected internal IModelElementContainer ElementContainer { get; }
    public ChartBase ChartModel { get; public set; }
    [CompilerGeneratedAttribute]
protected internal IModelElementContainer get_ElementContainer();
    public sealed virtual ChartBase get_ChartModel();
    public sealed virtual void set_ChartModel(ChartBase value);
    protected abstract virtual void OnModelChanged();
    private void ClearElementContainer();
    public abstract virtual HitInfo CalcHitInfo(double x, double y);
    public abstract virtual void Select(ModelElement element);
    public abstract virtual void Deselect(ModelElement element);
    public abstract virtual void ClearSelection();
    public abstract virtual void RenderChart(IChartRenderContext renderContext);
    public abstract virtual EmfMetafile ExportToMetafileModel(int width, int height);
    protected HitInfo CreateHitInfo(object hitObject);
}
public enum DevExpress.Charts.Model.DashStyle : Enum {
    public int value__;
    public static DashStyle Empty;
    public static DashStyle Solid;
    public static DashStyle Dash;
    public static DashStyle Dot;
    public static DashStyle DashDot;
    public static DashStyle DashDotDot;
}
public enum DevExpress.Charts.Model.DataMemberType : Enum {
    public int value__;
    public static DataMemberType Argument;
    public static DataMemberType Value;
    public static DataMemberType Color;
    public static DataMemberType Open;
    public static DataMemberType High;
    public static DataMemberType Low;
    public static DataMemberType Close;
    public static DataMemberType Weight;
    public static DataMemberType Value2;
    public static DataMemberType BoxPlotMin;
    public static DataMemberType BoxPlotQuartile1;
    public static DataMemberType BoxPlotMedian;
    public static DataMemberType BoxPlotQuartile3;
    public static DataMemberType BoxPlotMax;
    public static DataMemberType BoxPlotMean;
    public static DataMemberType BoxPlotOutliers;
}
public enum DevExpress.Charts.Model.DateTimeGridAlignment : Enum {
    public int value__;
    public static DateTimeGridAlignment Millisecond;
    public static DateTimeGridAlignment Second;
    public static DateTimeGridAlignment Minute;
    public static DateTimeGridAlignment Hour;
    public static DateTimeGridAlignment Day;
    public static DateTimeGridAlignment Week;
    public static DateTimeGridAlignment Month;
    public static DateTimeGridAlignment Quarter;
    public static DateTimeGridAlignment Year;
}
public class DevExpress.Charts.Model.DiagramAppearance : ModelElement {
    private AxisAppearance axesAppearance;
    private FillStyle fillStyle;
    private Shadow shadow;
    private RectangleIndents margins;
    [CompilerGeneratedAttribute]
private ColorARGB <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BorderVisible>k__BackingField;
    public ColorARGB BackColor { get; public set; }
    public ColorARGB BorderColor { get; public set; }
    public bool BorderVisible { get; public set; }
    public AxisAppearance AxesAppearance { get; public set; }
    public FillStyle FillStyle { get; public set; }
    public Shadow Shadow { get; public set; }
    public RectangleIndents Margins { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_BackColor();
    [CompilerGeneratedAttribute]
public void set_BackColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public ColorARGB get_BorderColor();
    [CompilerGeneratedAttribute]
public void set_BorderColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public bool get_BorderVisible();
    [CompilerGeneratedAttribute]
public void set_BorderVisible(bool value);
    public AxisAppearance get_AxesAppearance();
    public void set_AxesAppearance(AxisAppearance value);
    public FillStyle get_FillStyle();
    public void set_FillStyle(FillStyle value);
    public Shadow get_Shadow();
    public void set_Shadow(Shadow value);
    public RectangleIndents get_Margins();
    public void set_Margins(RectangleIndents value);
}
public enum DevExpress.Charts.Model.DirectionMode : Enum {
    public int value__;
    public static DirectionMode Counterclockwise;
    public static DirectionMode Clockwise;
}
public class DevExpress.Charts.Model.DonutSeries : PieSeriesBase {
    private static int DefaultHoleRadiusPercent;
    private int holeRadiusPercent;
    public int HoleRadiusPercent { get; public set; }
    public int get_HoleRadiusPercent();
    public void set_HoleRadiusPercent(int value);
}
public class DevExpress.Charts.Model.ExponentialRegression : ParametricRegression {
}
public enum DevExpress.Charts.Model.FillMode : Enum {
    public int value__;
    public static FillMode Empty;
    public static FillMode Solid;
    public static FillMode Gradient;
}
public class DevExpress.Charts.Model.FillOptions : ModelElement {
    [CompilerGeneratedAttribute]
private ColorARGB <Color2>k__BackingField;
    [CompilerGeneratedAttribute]
private GradientMode <GradientMode>k__BackingField;
    public ColorARGB Color2 { get; public set; }
    public GradientMode GradientMode { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_Color2();
    [CompilerGeneratedAttribute]
public void set_Color2(ColorARGB value);
    [CompilerGeneratedAttribute]
public GradientMode get_GradientMode();
    [CompilerGeneratedAttribute]
public void set_GradientMode(GradientMode value);
}
public class DevExpress.Charts.Model.FillStyle : ModelElement {
    private FillOptions options;
    [CompilerGeneratedAttribute]
private FillMode <FillMode>k__BackingField;
    public FillMode FillMode { get; public set; }
    public FillOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public FillMode get_FillMode();
    [CompilerGeneratedAttribute]
public void set_FillMode(FillMode value);
    public FillOptions get_Options();
    public void set_Options(FillOptions value);
}
public abstract class DevExpress.Charts.Model.FinancialSeries : CartesianSeriesBase {
    public bool ActualColorEach { get; }
    public virtual bool get_ActualColorEach();
}
public static class DevExpress.Charts.Model.FontConversion : object {
    private static double pixelToPointRatio;
    public static double ConvertFromPointToPixel(double fontSizeInPoints);
    public static double ConvertFromPixelToPoint(double fontSizeInPixels);
}
public class DevExpress.Charts.Model.FontModel : ModelElement {
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Size>k__BackingField;
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Underline { get; public set; }
    public bool Strikeout { get; public set; }
    public string Name { get; public set; }
    public float Size { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strikeout();
    [CompilerGeneratedAttribute]
public void set_Strikeout(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public float get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(float value);
}
public class DevExpress.Charts.Model.FullStackedAreaSeries : StackedAreaSeries {
}
public class DevExpress.Charts.Model.FullStackedBarSeries : StackedBarSeries {
}
public class DevExpress.Charts.Model.FullStackedLineSeries : StackedLineSeries {
}
public class DevExpress.Charts.Model.FullStackedSplineAreaSeries : StackedAreaSeries {
}
public class DevExpress.Charts.Model.FullStackedStepAreaSeries : StackedAreaSeries {
}
public class DevExpress.Charts.Model.FunnelChart : Chart {
    protected internal virtual bool IsSeriesValid(SeriesModel value);
}
public enum DevExpress.Charts.Model.FunnelPointShape : Enum {
    public int value__;
    public static FunnelPointShape Rectangle;
    public static FunnelPointShape Trapezoid;
}
public class DevExpress.Charts.Model.FunnelSeries : SeriesModel {
    private static bool DefaultColorEach;
    private static int DefaultGapWidth;
    private static FunnelPointShape DefaultPointShape;
    [CompilerGeneratedAttribute]
private bool <ColorEach>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GapWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private FunnelPointShape <PointShape>k__BackingField;
    public bool ActualColorEach { get; }
    public bool ColorEach { get; public set; }
    public int GapWidth { get; public set; }
    public FunnelPointShape PointShape { get; public set; }
    public virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public bool get_ColorEach();
    [CompilerGeneratedAttribute]
public void set_ColorEach(bool value);
    [CompilerGeneratedAttribute]
public int get_GapWidth();
    [CompilerGeneratedAttribute]
public void set_GapWidth(int value);
    [CompilerGeneratedAttribute]
public FunnelPointShape get_PointShape();
    [CompilerGeneratedAttribute]
public void set_PointShape(FunnelPointShape value);
}
public enum DevExpress.Charts.Model.GradientMode : Enum {
    public int value__;
    public static GradientMode TopToBottom;
    public static GradientMode BottomToTop;
    public static GradientMode LeftToRight;
    public static GradientMode RightToLeft;
    public static GradientMode TopLeftToBottomRight;
    public static GradientMode BottomRightToTopLeft;
    public static GradientMode TopRightToBottomLeft;
    public static GradientMode BottomLeftToTopRight;
    public static GradientMode FromCenterHorizontal;
    public static GradientMode ToCenterHorizontal;
    public static GradientMode FromCenterVertical;
    public static GradientMode ToCenterVertical;
}
public static class DevExpress.Charts.Model.Helpers.FontConfiguratorHelper : object {
    public static DXFont ConfigureDXFont(FontModel fontModel, string fallbackFontName);
}
public abstract class DevExpress.Charts.Model.HierarchicalChart : ChartBase {
    private ChartAppearance plotAppearance;
    private LegendAppearance legendAppearance;
    private HierarchicalItemAppearance itemAppearance;
    [CompilerGeneratedAttribute]
private HierarchicalChartDataAdapterBase <DataAdapter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataLabelFormatter <LabelFormatter>k__BackingField;
    public HierarchicalChartDataAdapterBase DataAdapter { get; public set; }
    public IDataLabelFormatter LabelFormatter { get; public set; }
    public LegendAppearance LegendAppearance { get; public set; }
    public ChartAppearance PlotAppearance { get; public set; }
    public HierarchicalItemAppearance ItemAppearance { get; public set; }
    [CompilerGeneratedAttribute]
public HierarchicalChartDataAdapterBase get_DataAdapter();
    [CompilerGeneratedAttribute]
public void set_DataAdapter(HierarchicalChartDataAdapterBase value);
    [CompilerGeneratedAttribute]
public IDataLabelFormatter get_LabelFormatter();
    [CompilerGeneratedAttribute]
public void set_LabelFormatter(IDataLabelFormatter value);
    public LegendAppearance get_LegendAppearance();
    public void set_LegendAppearance(LegendAppearance value);
    public ChartAppearance get_PlotAppearance();
    public void set_PlotAppearance(ChartAppearance value);
    public HierarchicalItemAppearance get_ItemAppearance();
    public void set_ItemAppearance(HierarchicalItemAppearance value);
}
public abstract class DevExpress.Charts.Model.HierarchicalChartDataAdapterBase : ModelElement {
    public bool HasGroupData { get; }
    public abstract virtual bool get_HasGroupData();
}
public class DevExpress.Charts.Model.HierarchicalChartDataMapping : object {
    [CompilerGeneratedAttribute]
private string <LabelDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildrenDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string LabelDataMember { get; public set; }
    public string ValueDataMember { get; public set; }
    public string ColorDataMember { get; public set; }
    public string ChildrenDataMember { get; public set; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LabelDataMember();
    [CompilerGeneratedAttribute]
public void set_LabelDataMember(string value);
    [CompilerGeneratedAttribute]
public string get_ValueDataMember();
    [CompilerGeneratedAttribute]
public void set_ValueDataMember(string value);
    [CompilerGeneratedAttribute]
public string get_ColorDataMember();
    [CompilerGeneratedAttribute]
public void set_ColorDataMember(string value);
    [CompilerGeneratedAttribute]
public string get_ChildrenDataMember();
    [CompilerGeneratedAttribute]
public void set_ChildrenDataMember(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
public class DevExpress.Charts.Model.HierarchicalChartFlatDataAdapter : HierarchicalChartDataAdapterBase {
    [CompilerGeneratedAttribute]
private string <LabelDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorDataMember>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <GroupDataMembers>k__BackingField;
    public bool HasGroupData { get; }
    public string LabelDataMember { get; public set; }
    public string ValueDataMember { get; public set; }
    public string ColorDataMember { get; public set; }
    public String[] GroupDataMembers { get; public set; }
    public virtual bool get_HasGroupData();
    [CompilerGeneratedAttribute]
public string get_LabelDataMember();
    [CompilerGeneratedAttribute]
public void set_LabelDataMember(string value);
    [CompilerGeneratedAttribute]
public string get_ValueDataMember();
    [CompilerGeneratedAttribute]
public void set_ValueDataMember(string value);
    [CompilerGeneratedAttribute]
public string get_ColorDataMember();
    [CompilerGeneratedAttribute]
public void set_ColorDataMember(string value);
    [CompilerGeneratedAttribute]
public String[] get_GroupDataMembers();
    [CompilerGeneratedAttribute]
public void set_GroupDataMembers(String[] value);
}
public class DevExpress.Charts.Model.HierarchicalChartHierarchicalDataAdapter : HierarchicalChartDataAdapterBase {
    [CompilerGeneratedAttribute]
private List`1<HierarchicalChartDataMapping> <Mappings>k__BackingField;
    public bool HasGroupData { get; }
    public List`1<HierarchicalChartDataMapping> Mappings { get; public set; }
    public virtual bool get_HasGroupData();
    [CompilerGeneratedAttribute]
public List`1<HierarchicalChartDataMapping> get_Mappings();
    [CompilerGeneratedAttribute]
public void set_Mappings(List`1<HierarchicalChartDataMapping> value);
}
public class DevExpress.Charts.Model.HierarchicalItemAppearance : ModelElement {
    private LabelAppearance labelAppearance;
    [CompilerGeneratedAttribute]
private bool <BorderVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BorderBrightnessCoeff>k__BackingField;
    public bool BorderVisible { get; public set; }
    public ColorARGB BorderColor { get; public set; }
    public float BorderBrightnessCoeff { get; public set; }
    public LabelAppearance LabelAppearance { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_BorderVisible();
    [CompilerGeneratedAttribute]
public void set_BorderVisible(bool value);
    [CompilerGeneratedAttribute]
public ColorARGB get_BorderColor();
    [CompilerGeneratedAttribute]
public void set_BorderColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public float get_BorderBrightnessCoeff();
    [CompilerGeneratedAttribute]
public void set_BorderBrightnessCoeff(float value);
    public LabelAppearance get_LabelAppearance();
    public void set_LabelAppearance(LabelAppearance value);
}
public class DevExpress.Charts.Model.HitInfo : object {
    public static HitInfo Empty;
    private ModelElement element;
    public ModelElement Element { get; }
    public HitInfo(ModelElement element);
    private static HitInfo();
    public ModelElement get_Element();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface DevExpress.Charts.Model.IAxisLabelFormatter {
    public abstract virtual string GetAxisLabelText(object axisValue);
}
public interface DevExpress.Charts.Model.IChart3D {
    public IOptions3D Options3D { get; }
    public abstract virtual IOptions3D get_Options3D();
}
public interface DevExpress.Charts.Model.IChartRenderContext {
    public ModelRect Bounds { get; }
    public abstract virtual ModelRect get_Bounds();
}
public interface DevExpress.Charts.Model.IController {
    public ChartBase ChartModel { get; public set; }
    public abstract virtual ChartBase get_ChartModel();
    public abstract virtual void set_ChartModel(ChartBase value);
    public abstract virtual void RenderChart(IChartRenderContext renderContext);
    public abstract virtual EmfMetafile ExportToMetafileModel(int width, int height);
    public abstract virtual HitInfo CalcHitInfo(double x, double y);
    public abstract virtual void Select(ModelElement element);
    public abstract virtual void Deselect(ModelElement element);
    public abstract virtual void ClearSelection();
}
public interface DevExpress.Charts.Model.IDataLabelFormatter {
    public abstract virtual string GetDataLabelText(LabelPointData pointData);
}
public interface DevExpress.Charts.Model.IModelElementContainer {
    public abstract virtual void Clear();
    public abstract virtual void Register(object viewObject, ModelElement element);
    public abstract virtual ModelElement FindModelElement(object viewObject);
    public abstract virtual object FindViewObject(ModelElement element);
}
public class DevExpress.Charts.Model.Indicator : ModelElement {
    private LineStyle lineStyle;
    [CompilerGeneratedAttribute]
private ColorARGB <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInLegend>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayEquation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayRSquare>k__BackingField;
    public ColorARGB Color { get; public set; }
    public LineStyle LineStyle { get; }
    public string Name { get; public set; }
    public bool ShowInLegend { get; public set; }
    public bool Visible { get; public set; }
    public bool DisplayEquation { get; public set; }
    public bool DisplayRSquare { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ColorARGB value);
    public LineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInLegend();
    [CompilerGeneratedAttribute]
public void set_ShowInLegend(bool value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisplayEquation();
    [CompilerGeneratedAttribute]
public void set_DisplayEquation(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisplayRSquare();
    [CompilerGeneratedAttribute]
public void set_DisplayRSquare(bool value);
}
public enum DevExpress.Charts.Model.IntervalDivisionMode : Enum {
    public int value__;
    public static IntervalDivisionMode Auto;
    public static IntervalDivisionMode Width;
    public static IntervalDivisionMode Count;
}
public interface DevExpress.Charts.Model.IOptions3D {
    public int RotationAngleX { get; public set; }
    public int RotationAngleY { get; public set; }
    public int RotationAngleZ { get; public set; }
    public int PerspectiveAngle { get; public set; }
    public bool EnableAntialiasing { get; public set; }
    public abstract virtual int get_RotationAngleX();
    public abstract virtual void set_RotationAngleX(int value);
    public abstract virtual int get_RotationAngleY();
    public abstract virtual void set_RotationAngleY(int value);
    public abstract virtual int get_RotationAngleZ();
    public abstract virtual void set_RotationAngleZ(int value);
    public abstract virtual int get_PerspectiveAngle();
    public abstract virtual void set_PerspectiveAngle(int value);
    public abstract virtual bool get_EnableAntialiasing();
    public abstract virtual void set_EnableAntialiasing(bool value);
}
public interface DevExpress.Charts.Model.ISupportBar3DModelSeries {
    public Bar3DModel Model { get; public set; }
    public abstract virtual Bar3DModel get_Model();
    public abstract virtual void set_Model(Bar3DModel value);
}
public interface DevExpress.Charts.Model.ISupportBarWidthSeries {
    public double BarWidth { get; public set; }
    public abstract virtual double get_BarWidth();
    public abstract virtual void set_BarWidth(double value);
}
public interface DevExpress.Charts.Model.ISupportColorEachSeries {
    public bool ColorEach { get; public set; }
    public abstract virtual bool get_ColorEach();
    public abstract virtual void set_ColorEach(bool value);
}
public interface DevExpress.Charts.Model.ISupportMarkerSeries {
    public Marker Marker { get; public set; }
    public abstract virtual Marker get_Marker();
    public abstract virtual void set_Marker(Marker value);
}
public interface DevExpress.Charts.Model.ISupportTransparencySeries {
    public byte Transparency { get; public set; }
    public abstract virtual byte get_Transparency();
    public abstract virtual void set_Transparency(byte value);
}
public class DevExpress.Charts.Model.LabelAppearance : ModelElement {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <TextGlowColor>k__BackingField;
    [CompilerGeneratedAttribute]
private FontModel <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private StringAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private StringAlignment <VerticalAlignment>k__BackingField;
    public bool Visible { get; public set; }
    public ColorARGB TextColor { get; public set; }
    public ColorARGB TextGlowColor { get; public set; }
    public FontModel Font { get; public set; }
    public StringAlignment HorizontalAlignment { get; public set; }
    public StringAlignment VerticalAlignment { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public ColorARGB get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public ColorARGB get_TextGlowColor();
    [CompilerGeneratedAttribute]
public void set_TextGlowColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public FontModel get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(FontModel value);
    [CompilerGeneratedAttribute]
public StringAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(StringAlignment value);
    [CompilerGeneratedAttribute]
public StringAlignment get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(StringAlignment value);
}
public class DevExpress.Charts.Model.LabelPointData : ValueType {
    private object context;
    private object argument;
    private double normalizedValue;
    public object Context { get; }
    public object Argument { get; }
    public double NormalizedValue { get; }
    public LabelPointData(object context, object argument, double normalizedValue);
    public object get_Context();
    public object get_Argument();
    public double get_NormalizedValue();
}
public class DevExpress.Charts.Model.Legend : ModelElement {
    private LegendItemCollection items;
    private LegendPosition legendPosition;
    private LegendOrientation orientation;
    private Border border;
    private bool overlay;
    private DefaultBoolean enableAntialiasing;
    [CompilerGeneratedAttribute]
private FontModel <Font>k__BackingField;
    public LegendItemCollection Items { get; }
    public LegendPosition LegendPosition { get; public set; }
    public LegendOrientation Orientation { get; public set; }
    public Border Border { get; public set; }
    public bool Overlay { get; public set; }
    public DefaultBoolean EnableAntialiasing { get; public set; }
    public FontModel Font { get; public set; }
    public LegendItemCollection get_Items();
    public LegendPosition get_LegendPosition();
    public void set_LegendPosition(LegendPosition value);
    public LegendOrientation get_Orientation();
    public void set_Orientation(LegendOrientation value);
    public Border get_Border();
    public void set_Border(Border value);
    public bool get_Overlay();
    public void set_Overlay(bool value);
    public DefaultBoolean get_EnableAntialiasing();
    public void set_EnableAntialiasing(DefaultBoolean value);
    [CompilerGeneratedAttribute]
public FontModel get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(FontModel value);
}
public class DevExpress.Charts.Model.LegendAppearance : ModelElement {
    private Border border;
    private FillStyle fillStyle;
    private Shadow shadow;
    private RectangleIndents margins;
    private RectangleIndents padding;
    [CompilerGeneratedAttribute]
private ColorARGB <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <TextColor>k__BackingField;
    public ColorARGB BackColor { get; public set; }
    public Border Border { get; public set; }
    public ColorARGB TextColor { get; public set; }
    public FillStyle FillStyle { get; public set; }
    public Shadow Shadow { get; public set; }
    public RectangleIndents Margins { get; public set; }
    public RectangleIndents Padding { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_BackColor();
    [CompilerGeneratedAttribute]
public void set_BackColor(ColorARGB value);
    public Border get_Border();
    public void set_Border(Border value);
    [CompilerGeneratedAttribute]
public ColorARGB get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(ColorARGB value);
    public FillStyle get_FillStyle();
    public void set_FillStyle(FillStyle value);
    public Shadow get_Shadow();
    public void set_Shadow(Shadow value);
    public RectangleIndents get_Margins();
    public void set_Margins(RectangleIndents value);
    public RectangleIndents get_Padding();
    public void set_Padding(RectangleIndents value);
}
public class DevExpress.Charts.Model.LegendItem : ModelElement {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class DevExpress.Charts.Model.LegendItemCollection : ModelElementCollection`1<LegendItem> {
    public LegendItemCollection(Legend parent);
}
public enum DevExpress.Charts.Model.LegendOrientation : Enum {
    public int value__;
    public static LegendOrientation Vertical;
    public static LegendOrientation Horizontal;
}
public enum DevExpress.Charts.Model.LegendPosition : Enum {
    public int value__;
    public static LegendPosition Bottom;
    public static LegendPosition Left;
    public static LegendPosition Right;
    public static LegendPosition Top;
    public static LegendPosition TopRight;
}
public static class DevExpress.Charts.Model.LegendPositionConverter : object {
    private static Dictionary`2<LegendPosition, LayoutAlignmentHorizontal> horizontalAlignmentDict;
    private static Dictionary`2<LegendPosition, LayoutAlignmentVertical> verticalAlignmentDict;
    private static LegendPositionConverter();
    public static LayoutAlignmentHorizontal ConverterToHorizontalAlignment(LegendPosition position, bool overlay);
    public static LayoutAlignmentVertical ConverterToVerticalAlignment(LegendPosition position, bool overlay);
}
public class DevExpress.Charts.Model.LineSeries : ScatterLineSeries {
}
public class DevExpress.Charts.Model.LineStyle : ModelElement {
    [CompilerGeneratedAttribute]
private int <Thickness>k__BackingField;
    [CompilerGeneratedAttribute]
private DashStyle <DashStyle>k__BackingField;
    public int Thickness { get; public set; }
    public DashStyle DashStyle { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Thickness();
    [CompilerGeneratedAttribute]
public void set_Thickness(int value);
    [CompilerGeneratedAttribute]
public DashStyle get_DashStyle();
    [CompilerGeneratedAttribute]
public void set_DashStyle(DashStyle value);
}
public class DevExpress.Charts.Model.LogarithmicRegression : ParametricRegression {
}
public class DevExpress.Charts.Model.ManhattanBarSeries : SeriesModel {
    [CompilerGeneratedAttribute]
private double <BarWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ColorEach>k__BackingField;
    [CompilerGeneratedAttribute]
private Bar3DModel <Model>k__BackingField;
    public bool ActualColorEach { get; }
    public double BarWidth { get; public set; }
    public bool ColorEach { get; public set; }
    public Bar3DModel Model { get; public set; }
    public virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual double get_BarWidth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BarWidth(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorEach(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Bar3DModel get_Model();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Model(Bar3DModel value);
}
public class DevExpress.Charts.Model.Marker : ModelElement {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkerType <MarkerType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BorderVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BorderThickness>k__BackingField;
    public int Size { get; public set; }
    public bool Visible { get; public set; }
    public ColorARGB Color { get; public set; }
    public MarkerType MarkerType { get; public set; }
    public bool BorderVisible { get; public set; }
    public ColorARGB BorderColor { get; public set; }
    public int BorderThickness { get; public set; }
    public Marker(ModelElement parent);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public ColorARGB get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ColorARGB value);
    [CompilerGeneratedAttribute]
public MarkerType get_MarkerType();
    [CompilerGeneratedAttribute]
public void set_MarkerType(MarkerType value);
    [CompilerGeneratedAttribute]
public bool get_BorderVisible();
    [CompilerGeneratedAttribute]
public void set_BorderVisible(bool value);
    [CompilerGeneratedAttribute]
public ColorARGB get_BorderColor();
    [CompilerGeneratedAttribute]
public void set_BorderColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public int get_BorderThickness();
    [CompilerGeneratedAttribute]
public void set_BorderThickness(int value);
}
public class DevExpress.Charts.Model.MarkerAppearance : ModelElement {
    private FillStyle fillStyle;
    [CompilerGeneratedAttribute]
private ColorARGB <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BorderVisible>k__BackingField;
    public ColorARGB BorderColor { get; public set; }
    public bool BorderVisible { get; public set; }
    public FillStyle FillStyle { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_BorderColor();
    [CompilerGeneratedAttribute]
public void set_BorderColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public bool get_BorderVisible();
    [CompilerGeneratedAttribute]
public void set_BorderVisible(bool value);
    public FillStyle get_FillStyle();
    public void set_FillStyle(FillStyle value);
}
public abstract class DevExpress.Charts.Model.MarkerCartesianSeriesBase : CartesianSeriesBase {
    [CompilerGeneratedAttribute]
private Marker <Marker>k__BackingField;
    public Marker Marker { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Marker get_Marker();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Marker(Marker value);
}
public enum DevExpress.Charts.Model.MarkerType : Enum {
    public int value__;
    public static MarkerType Square;
    public static MarkerType Diamond;
    public static MarkerType Triangle;
    public static MarkerType InvertedTriangle;
    public static MarkerType Circle;
    public static MarkerType Plus;
    public static MarkerType Cross;
    public static MarkerType Star;
    public static MarkerType Pentagon;
    public static MarkerType Hexagon;
}
public class DevExpress.Charts.Model.ModelAxisLabelResolveOverlappingOptions : ModelElement {
    private static int DefaultMinIndent;
    private static bool DefaultAllowStagger;
    private static bool DefaultAllowRotate;
    private static bool DefaultAllowHide;
    private bool allowStagger;
    private bool allowRotate;
    private bool allowHide;
    private int minIndent;
    public bool AllowStagger { get; public set; }
    public bool AllowRotate { get; public set; }
    public bool AllowHide { get; public set; }
    public int MinIndent { get; public set; }
    public ModelAxisLabelResolveOverlappingOptions(AxisLabel axisLabel);
    public bool get_AllowStagger();
    public void set_AllowStagger(bool value);
    public bool get_AllowRotate();
    public void set_AllowRotate(bool value);
    public bool get_AllowHide();
    public void set_AllowHide(bool value);
    public int get_MinIndent();
    public void set_MinIndent(int value);
}
public abstract class DevExpress.Charts.Model.ModelControllerFactoryBase : object {
    public abstract virtual IController CreateController();
    public abstract virtual IChartRenderContext CreateRenderContext(ModelRect bounds, Object[] renderParams);
}
public abstract class DevExpress.Charts.Model.ModelElement : object {
    private ModelElement parent;
    public ModelElement Parent { get; public set; }
    protected ModelElement(ModelElement parent);
    public ModelElement get_Parent();
    public void set_Parent(ModelElement value);
    protected void UpdateElementParent(ModelElement element, ModelElement parent);
}
public abstract class DevExpress.Charts.Model.ModelElementCollection`1 : DXCollection`1<T> {
    private ModelElement parent;
    protected ModelElement Parent { get; }
    protected ModelElementCollection`1(ModelElement parent);
    protected ModelElement get_Parent();
    protected virtual void OnInsertComplete(int index, T value);
    protected virtual void OnRemoveComplete(int index, T value);
    protected virtual void OnSetComplete(int index, T oldValue, T newValue);
    protected virtual bool OnClear();
}
public class DevExpress.Charts.Model.ModelElementContainer : object {
    private Dictionary`2<object, ModelElement> modelElements;
    private Dictionary`2<ModelElement, object> viewObjects;
    public sealed virtual void Clear();
    public sealed virtual void Register(object viewObject, ModelElement element);
    public sealed virtual ModelElement FindModelElement(object viewObject);
    public sealed virtual object FindViewObject(ModelElement element);
}
public class DevExpress.Charts.Model.ModelIntervalOptions : ModelElement {
    [CompilerGeneratedAttribute]
private IntervalDivisionMode <DivisionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UnderflowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OverflowValue>k__BackingField;
    public IntervalDivisionMode DivisionMode { get; public set; }
    public double Width { get; public set; }
    public int Count { get; public set; }
    public object UnderflowValue { get; public set; }
    public object OverflowValue { get; public set; }
    [CompilerGeneratedAttribute]
public IntervalDivisionMode get_DivisionMode();
    [CompilerGeneratedAttribute]
public void set_DivisionMode(IntervalDivisionMode value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public object get_UnderflowValue();
    [CompilerGeneratedAttribute]
public void set_UnderflowValue(object value);
    [CompilerGeneratedAttribute]
public object get_OverflowValue();
    [CompilerGeneratedAttribute]
public void set_OverflowValue(object value);
}
[ComVisibleAttribute("False")]
public class DevExpress.Charts.Model.ModelRect : ValueType {
    public static ModelRect Empty;
    private double left;
    private double top;
    private double width;
    private double height;
    public double Left { get; public set; }
    public double Top { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public ModelRect(double left, double top, double width, double height);
    private static ModelRect();
    public static bool op_Equality(ModelRect rect1, ModelRect rect2);
    public static bool op_Inequality(ModelRect rect1, ModelRect rect2);
    public static bool Equals(ModelRect rect1, ModelRect rect2);
    public double get_Left();
    public void set_Left(double value);
    public double get_Top();
    public void set_Top(double value);
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public sealed virtual bool Equals(ModelRect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Charts.Model.NestedDonutSeries : DonutSeries {
    private static double DefaultInnerIndent;
    [CompilerGeneratedAttribute]
private double <InnerIndent>k__BackingField;
    public double InnerIndent { get; public set; }
    [CompilerGeneratedAttribute]
public double get_InnerIndent();
    [CompilerGeneratedAttribute]
public void set_InnerIndent(double value);
}
public abstract class DevExpress.Charts.Model.NonPolarAxis : AxisBase {
    private double gridSpacing;
    private DateTimeGridAlignment gridAlignment;
    private bool autoGrid;
    private bool logarithmic;
    private double logarithmicBase;
    public double GridSpacing { get; public set; }
    public DateTimeGridAlignment GridAlignment { get; public set; }
    public bool AutoGrid { get; public set; }
    public bool Logarithmic { get; public set; }
    public double LogarithmicBase { get; public set; }
    protected NonPolarAxis(Chart parent);
    public double get_GridSpacing();
    public void set_GridSpacing(double value);
    public DateTimeGridAlignment get_GridAlignment();
    public void set_GridAlignment(DateTimeGridAlignment value);
    public bool get_AutoGrid();
    public void set_AutoGrid(bool value);
    public bool get_Logarithmic();
    public void set_Logarithmic(bool value);
    public double get_LogarithmicBase();
    public void set_LogarithmicBase(double value);
}
public class DevExpress.Charts.Model.Options3D : ModelElement {
    private bool enableAntialiasing;
    private int rotationAngleX;
    private int rotationAngleY;
    private int rotationAngleZ;
    private int perspectiveAngle;
    public int RotationAngleX { get; public set; }
    public int RotationAngleY { get; public set; }
    public int RotationAngleZ { get; public set; }
    public int PerspectiveAngle { get; public set; }
    public bool EnableAntialiasing { get; public set; }
    public Options3D(ModelElement parent);
    public sealed virtual int get_RotationAngleX();
    public sealed virtual void set_RotationAngleX(int value);
    public sealed virtual int get_RotationAngleY();
    public sealed virtual void set_RotationAngleY(int value);
    public sealed virtual int get_RotationAngleZ();
    public sealed virtual void set_RotationAngleZ(int value);
    public sealed virtual int get_PerspectiveAngle();
    public sealed virtual void set_PerspectiveAngle(int value);
    public sealed virtual bool get_EnableAntialiasing();
    public sealed virtual void set_EnableAntialiasing(bool value);
}
public class DevExpress.Charts.Model.Palette : ModelElement {
    private List`1<PaletteEntry> entries;
    public List`1<PaletteEntry> Entries { get; }
    public Palette(ModelElement parent);
    public Palette(List`1<PaletteEntry> entries);
    public List`1<PaletteEntry> get_Entries();
}
public class DevExpress.Charts.Model.PaletteEntry : ValueType {
    [CompilerGeneratedAttribute]
private ColorARGB <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <Color2>k__BackingField;
    public ColorARGB Color { get; }
    public ColorARGB Color2 { get; }
    public PaletteEntry(ColorARGB color, ColorARGB color2);
    public PaletteEntry(ColorARGB color);
    [CompilerGeneratedAttribute]
public ColorARGB get_Color();
    [CompilerGeneratedAttribute]
public ColorARGB get_Color2();
}
public class DevExpress.Charts.Model.ParametricRegression : Indicator {
    [CompilerGeneratedAttribute]
private double <ForecastBackwardPeriods>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ForecastForwardPeriods>k__BackingField;
    public double ForecastBackwardPeriods { get; public set; }
    public double ForecastForwardPeriods { get; public set; }
    [CompilerGeneratedAttribute]
public double get_ForecastBackwardPeriods();
    [CompilerGeneratedAttribute]
public void set_ForecastBackwardPeriods(double value);
    [CompilerGeneratedAttribute]
public double get_ForecastForwardPeriods();
    [CompilerGeneratedAttribute]
public void set_ForecastForwardPeriods(double value);
}
public class DevExpress.Charts.Model.Pie3DChart : PieChart {
    private Options3D options3D;
    public IOptions3D Options3D { get; }
    public sealed virtual IOptions3D get_Options3D();
}
public class DevExpress.Charts.Model.PieChart : Chart {
    protected internal virtual bool IsSeriesValid(SeriesModel value);
}
public enum DevExpress.Charts.Model.PieExplodeMode : Enum {
    public int value__;
    public static PieExplodeMode None;
    public static PieExplodeMode All;
    public static PieExplodeMode UsePoints;
}
public class DevExpress.Charts.Model.PieSeries : PieSeriesBase {
}
public abstract class DevExpress.Charts.Model.PieSeriesBase : SeriesModel {
    private static double DefaultExplodedDistancePercentage;
    private List`1<int> explodedPointsIndexes;
    private double explodedDistancePercentage;
    private PieExplodeMode explodeMode;
    private int rotationAngle;
    private int depthPercent;
    private PieSweepDirection sweepDirection;
    public bool ActualColorEach { get; }
    public int RotationAngle { get; public set; }
    public double ExplodedDistancePercentage { get; public set; }
    public PieExplodeMode ExplodeMode { get; public set; }
    public List`1<int> ExplodedPointsIndexes { get; }
    public int DepthPercent { get; public set; }
    public PieSweepDirection SweepDirection { get; public set; }
    public virtual bool get_ActualColorEach();
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    public double get_ExplodedDistancePercentage();
    public void set_ExplodedDistancePercentage(double value);
    public PieExplodeMode get_ExplodeMode();
    public void set_ExplodeMode(PieExplodeMode value);
    public List`1<int> get_ExplodedPointsIndexes();
    public int get_DepthPercent();
    public void set_DepthPercent(int value);
    public PieSweepDirection get_SweepDirection();
    public void set_SweepDirection(PieSweepDirection value);
}
public enum DevExpress.Charts.Model.PieSweepDirection : Enum {
    public int value__;
    public static PieSweepDirection Clockwise;
    public static PieSweepDirection Counterclockwise;
}
public class DevExpress.Charts.Model.PointSeries : PointSeriesBase {
}
public class DevExpress.Charts.Model.PointSeriesBase : MarkerCartesianSeriesBase {
    [CompilerGeneratedAttribute]
private bool <ColorEach>k__BackingField;
    public bool ActualColorEach { get; }
    public bool ColorEach { get; public set; }
    public virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorEach(bool value);
}
public class DevExpress.Charts.Model.PolarAreaSeries : PolarLineSeries {
    [CompilerGeneratedAttribute]
private byte <Transparency>k__BackingField;
    public byte Transparency { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Transparency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Transparency(byte value);
}
public class DevExpress.Charts.Model.PolarAxisX : AxisBase {
}
public class DevExpress.Charts.Model.PolarChart : CircularChart {
    private PolarAxisX argumentAxis;
    public PolarAxisX ArgumentAxis { get; public set; }
    public PolarAxisX get_ArgumentAxis();
    public void set_ArgumentAxis(PolarAxisX value);
    protected internal virtual bool IsSeriesValid(SeriesModel value);
}
public class DevExpress.Charts.Model.PolarLineSeries : PolarPointSeries {
}
public class DevExpress.Charts.Model.PolarPointSeries : PolarSeriesBase {
}
public class DevExpress.Charts.Model.PolarRangeAreaSeries : PolarAreaSeries {
}
public abstract class DevExpress.Charts.Model.PolarSeriesBase : ColorEachMarkerSeriesBase {
    public bool ActualColorEach { get; }
    public ArgumentScaleType ArgumentScaleType { get; public set; }
    public virtual bool get_ActualColorEach();
    public virtual ArgumentScaleType get_ArgumentScaleType();
    public virtual void set_ArgumentScaleType(ArgumentScaleType value);
}
public class DevExpress.Charts.Model.PolynomialRegression : ParametricRegression {
    [CompilerGeneratedAttribute]
private int <Degree>k__BackingField;
    public int Degree { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Degree();
    [CompilerGeneratedAttribute]
public void set_Degree(int value);
}
public class DevExpress.Charts.Model.PowerRegression : ParametricRegression {
}
public enum DevExpress.Charts.Model.ProcessEmptyPointsMode : Enum {
    public int value__;
    public static ProcessEmptyPointsMode InsertZero;
    public static ProcessEmptyPointsMode Ignore;
}
public enum DevExpress.Charts.Model.ProcessMissingPointsMode : Enum {
    public int value__;
    public static ProcessMissingPointsMode Skip;
    public static ProcessMissingPointsMode InsertEmptyPoints;
}
public class DevExpress.Charts.Model.RadarAreaSeries : RadarLineSeries {
    [CompilerGeneratedAttribute]
private byte <Transparency>k__BackingField;
    public byte Transparency { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Transparency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Transparency(byte value);
}
public class DevExpress.Charts.Model.RadarAxisX : NonPolarAxis {
}
public class DevExpress.Charts.Model.RadarChart : CircularChart {
    private RadarAxisX argumentAxis;
    public RadarAxisX ArgumentAxis { get; public set; }
    public RadarAxisX get_ArgumentAxis();
    public void set_ArgumentAxis(RadarAxisX value);
    protected internal virtual bool IsSeriesValid(SeriesModel value);
}
public class DevExpress.Charts.Model.RadarLineSeries : RadarPointSeries {
}
public class DevExpress.Charts.Model.RadarPointSeries : RadarSeriesBase {
}
public class DevExpress.Charts.Model.RadarRangeAreaSeries : RadarAreaSeries {
}
public abstract class DevExpress.Charts.Model.RadarSeriesBase : ColorEachMarkerSeriesBase {
    public bool ActualColorEach { get; }
    public virtual bool get_ActualColorEach();
}
public class DevExpress.Charts.Model.RangeAreaSeries : AreaSeries {
}
public class DevExpress.Charts.Model.RangeBarSeries : BarSeries {
}
public class DevExpress.Charts.Model.RectangleIndents : ModelElement {
    public static int Undefined;
    [CompilerGeneratedAttribute]
private int <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bottom>k__BackingField;
    public int Left { get; public set; }
    public int Top { get; public set; }
    public int Right { get; public set; }
    public int Bottom { get; public set; }
    public int All { get; public set; }
    public RectangleIndents(int left, int top, int right, int bottom);
    public RectangleIndents(int all);
    [CompilerGeneratedAttribute]
public int get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(int value);
    [CompilerGeneratedAttribute]
public int get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(int value);
    [CompilerGeneratedAttribute]
public int get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(int value);
    [CompilerGeneratedAttribute]
public int get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(int value);
    public int get_All();
    public void set_All(int value);
}
public class DevExpress.Charts.Model.RegressionLine : ParametricRegression {
}
public class DevExpress.Charts.Model.ScatterLineSeries : MarkerCartesianSeriesBase {
    [CompilerGeneratedAttribute]
private bool <ColorEach>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessMissingPointsMode <ProcessMissingPointsMode>k__BackingField;
    public bool ActualColorEach { get; }
    public bool ColorEach { get; public set; }
    public ProcessMissingPointsMode ProcessMissingPointsMode { get; public set; }
    public virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ColorEach();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColorEach(bool value);
    [CompilerGeneratedAttribute]
public ProcessMissingPointsMode get_ProcessMissingPointsMode();
    [CompilerGeneratedAttribute]
public void set_ProcessMissingPointsMode(ProcessMissingPointsMode value);
}
public class DevExpress.Charts.Model.SeriesAppearance : ModelElement {
    private Border border;
    private FillStyle fillStyle;
    private Shadow shadow;
    private LineStyle lineStyle;
    private MarkerAppearance markerAppearance;
    private SeriesLabelAppearance labelAppearance;
    [CompilerGeneratedAttribute]
private ColorARGB <Color>k__BackingField;
    public ColorARGB Color { get; public set; }
    public Border Border { get; public set; }
    public FillStyle FillStyle { get; public set; }
    public Shadow Shadow { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public MarkerAppearance MarkerAppearance { get; public set; }
    public SeriesLabelAppearance LabelAppearance { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ColorARGB value);
    public Border get_Border();
    public void set_Border(Border value);
    public FillStyle get_FillStyle();
    public void set_FillStyle(FillStyle value);
    public Shadow get_Shadow();
    public void set_Shadow(Shadow value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    public MarkerAppearance get_MarkerAppearance();
    public void set_MarkerAppearance(MarkerAppearance value);
    public SeriesLabelAppearance get_LabelAppearance();
    public void set_LabelAppearance(SeriesLabelAppearance value);
}
public class DevExpress.Charts.Model.SeriesCollection : ModelElementCollection`1<SeriesModel> {
    public SeriesCollection(Chart parent);
    protected virtual void OnValidate(SeriesModel value);
}
public class DevExpress.Charts.Model.SeriesLabel : ModelElement {
    private SeriesLabelPosition position;
    private IDataLabelFormatter formatter;
    private DefaultBoolean enableAntialiasing;
    private TextOrientation textOrientation;
    public SeriesLabelPosition Position { get; public set; }
    public IDataLabelFormatter Formatter { get; public set; }
    public DefaultBoolean EnableAntialiasing { get; public set; }
    public TextOrientation TextOrientation { get; public set; }
    public SeriesLabel(ModelElement parent);
    public SeriesLabelPosition get_Position();
    public void set_Position(SeriesLabelPosition value);
    public IDataLabelFormatter get_Formatter();
    public void set_Formatter(IDataLabelFormatter value);
    public DefaultBoolean get_EnableAntialiasing();
    public void set_EnableAntialiasing(DefaultBoolean value);
    public TextOrientation get_TextOrientation();
    public void set_TextOrientation(TextOrientation value);
}
public class DevExpress.Charts.Model.SeriesLabelAppearance : ModelElement {
    private Border border;
    private FillStyle fillStyle;
    private LineStyle lineStyle;
    private Shadow shadow;
    [CompilerGeneratedAttribute]
private ColorARGB <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <LineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LineVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <TextColor>k__BackingField;
    public ColorARGB BackColor { get; public set; }
    public Border Border { get; public set; }
    public FillStyle FillStyle { get; public set; }
    public ColorARGB LineColor { get; public set; }
    public int LineLength { get; public set; }
    public LineStyle LineStyle { get; public set; }
    public bool LineVisible { get; public set; }
    public Shadow Shadow { get; public set; }
    public ColorARGB TextColor { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_BackColor();
    [CompilerGeneratedAttribute]
public void set_BackColor(ColorARGB value);
    public Border get_Border();
    public void set_Border(Border value);
    public FillStyle get_FillStyle();
    public void set_FillStyle(FillStyle value);
    [CompilerGeneratedAttribute]
public ColorARGB get_LineColor();
    [CompilerGeneratedAttribute]
public void set_LineColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public int get_LineLength();
    [CompilerGeneratedAttribute]
public void set_LineLength(int value);
    public LineStyle get_LineStyle();
    public void set_LineStyle(LineStyle value);
    [CompilerGeneratedAttribute]
public bool get_LineVisible();
    [CompilerGeneratedAttribute]
public void set_LineVisible(bool value);
    public Shadow get_Shadow();
    public void set_Shadow(Shadow value);
    [CompilerGeneratedAttribute]
public ColorARGB get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(ColorARGB value);
}
public enum DevExpress.Charts.Model.SeriesLabelPosition : Enum {
    public int value__;
    public static SeriesLabelPosition Left;
    public static SeriesLabelPosition Top;
    public static SeriesLabelPosition Right;
    public static SeriesLabelPosition Bottom;
    public static SeriesLabelPosition Center;
    public static SeriesLabelPosition InsideBase;
    public static SeriesLabelPosition InsideEnd;
    public static SeriesLabelPosition OutsideEnd;
    public static SeriesLabelPosition BestFit;
}
public abstract class DevExpress.Charts.Model.SeriesModel : ModelElement {
    private Dictionary`2<DataMemberType, string> dataMembers;
    private ArgumentScaleType argumentScaleType;
    private ValueScaleType valueScaleType;
    private object dataSource;
    private bool labelsVisibility;
    private SeriesLabel label;
    private SeriesAppearance appearance;
    private Nullable`1<bool> allowResampleCore;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegendPointPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInLegend>k__BackingField;
    public bool ActualColorEach { get; }
    public string DisplayName { get; public set; }
    public string LegendPointPattern { get; public set; }
    public bool ShowInLegend { get; public set; }
    public ArgumentScaleType ArgumentScaleType { get; public set; }
    public ValueScaleType ValueScaleType { get; public set; }
    public Dictionary`2<DataMemberType, string> DataMembers { get; }
    public object DataSource { get; public set; }
    public SeriesAppearance Appearance { get; public set; }
    public bool LabelsVisibility { get; public set; }
    public SeriesLabel Label { get; public set; }
    public Nullable`1<bool> AllowResample { get; public set; }
    public abstract virtual bool get_ActualColorEach();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_LegendPointPattern();
    [CompilerGeneratedAttribute]
public void set_LegendPointPattern(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInLegend();
    [CompilerGeneratedAttribute]
public void set_ShowInLegend(bool value);
    public virtual ArgumentScaleType get_ArgumentScaleType();
    public virtual void set_ArgumentScaleType(ArgumentScaleType value);
    public ValueScaleType get_ValueScaleType();
    public void set_ValueScaleType(ValueScaleType value);
    public Dictionary`2<DataMemberType, string> get_DataMembers();
    public object get_DataSource();
    public void set_DataSource(object value);
    public SeriesAppearance get_Appearance();
    public void set_Appearance(SeriesAppearance value);
    public bool get_LabelsVisibility();
    public void set_LabelsVisibility(bool value);
    public SeriesLabel get_Label();
    public void set_Label(SeriesLabel value);
    public Nullable`1<bool> get_AllowResample();
    public void set_AllowResample(Nullable`1<bool> value);
}
public class DevExpress.Charts.Model.Shadow : ModelElement {
    [CompilerGeneratedAttribute]
private ColorARGB <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public ColorARGB Color { get; public set; }
    public int Size { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(ColorARGB value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
}
public class DevExpress.Charts.Model.SideBySideBarSeries : BarSeries {
}
public class DevExpress.Charts.Model.SideBySideFullStackedBarSeries : SideBySideStackedBarSeries {
}
public class DevExpress.Charts.Model.SideBySideRangeBarSeries : RangeBarSeries {
}
public class DevExpress.Charts.Model.SideBySideStackedBarSeries : StackedBarSeries {
}
public class DevExpress.Charts.Model.SimpleMovingAverage : Indicator {
    [CompilerGeneratedAttribute]
private int <PointsCount>k__BackingField;
    public int PointsCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PointsCount();
    [CompilerGeneratedAttribute]
public void set_PointsCount(int value);
}
public class DevExpress.Charts.Model.SplineAreaSeries : AreaSeries {
}
public class DevExpress.Charts.Model.SplineSeries : LineSeries {
}
public class DevExpress.Charts.Model.StackedAreaSeries : AreaSeriesBase {
    public bool ActualColorEach { get; }
    public virtual bool get_ActualColorEach();
}
public class DevExpress.Charts.Model.StackedBarSeries : BarSeries {
}
public class DevExpress.Charts.Model.StackedLineSeries : LineSeries {
}
public class DevExpress.Charts.Model.StackedSplineAreaSeries : StackedAreaSeries {
}
public class DevExpress.Charts.Model.StackedStepAreaSeries : StackedAreaSeries {
}
public class DevExpress.Charts.Model.StepAreaSeries : AreaSeries {
}
public class DevExpress.Charts.Model.StepLineSeries : LineSeries {
}
public class DevExpress.Charts.Model.StockSeries : FinancialSeries {
}
public enum DevExpress.Charts.Model.StringAlignment : Enum {
    public int value__;
    public static StringAlignment Near;
    public static StringAlignment Center;
    public static StringAlignment Far;
}
public class DevExpress.Charts.Model.Sunburst : HierarchicalChart {
    private static int DefaultHoleSizePercent;
    private static double DefaultStartAngle;
    [CompilerGeneratedAttribute]
private double <StartAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HoleRadiusPercent>k__BackingField;
    public double StartAngle { get; public set; }
    public int HoleRadiusPercent { get; public set; }
    [CompilerGeneratedAttribute]
public double get_StartAngle();
    [CompilerGeneratedAttribute]
public void set_StartAngle(double value);
    [CompilerGeneratedAttribute]
public int get_HoleRadiusPercent();
    [CompilerGeneratedAttribute]
public void set_HoleRadiusPercent(int value);
}
public enum DevExpress.Charts.Model.TextOrientation : Enum {
    public int value__;
    public static TextOrientation Horizontal;
    public static TextOrientation TopToBottom;
    public static TextOrientation BottomToTop;
}
public abstract class DevExpress.Charts.Model.TitleAppearanceBase : ModelElement {
    [CompilerGeneratedAttribute]
private ColorARGB <TextColor>k__BackingField;
    public ColorARGB TextColor { get; public set; }
    [CompilerGeneratedAttribute]
public ColorARGB get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(ColorARGB value);
}
public abstract class DevExpress.Charts.Model.TitleBase : ModelElement {
    private DefaultBoolean enableAntialiasing;
    private FontModel font;
    public DefaultBoolean EnableAntialiasing { get; public set; }
    public FontModel Font { get; public set; }
    protected TitleBase(ModelElement parent);
    public DefaultBoolean get_EnableAntialiasing();
    public void set_EnableAntialiasing(DefaultBoolean value);
    public FontModel get_Font();
    public void set_Font(FontModel value);
}
public class DevExpress.Charts.Model.TreeMap : HierarchicalChart {
    private HierarchicalItemAppearance groupAppearance;
    public HierarchicalItemAppearance GroupAppearance { get; public set; }
    public HierarchicalItemAppearance get_GroupAppearance();
    public void set_GroupAppearance(HierarchicalItemAppearance value);
}
public class DevExpress.Charts.Model.UpdateInfo : object {
    public static UpdateInfo Empty;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public bool Handled { get; public set; }
    public ModelElement Element { get; private set; }
    public string PropertyName { get; private set; }
    public object Value { get; private set; }
    public UpdateInfo(ModelElement element, string propertyName, object value);
    private static UpdateInfo();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public ModelElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(ModelElement value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public virtual string ToString();
}
public enum DevExpress.Charts.Model.ValueScaleType : Enum {
    public int value__;
    public static ValueScaleType Numerical;
    public static ValueScaleType DateTime;
    public static ValueScaleType TimeSpan;
}
public class DevExpress.Charts.Model.WaterfallSeries : BarSeries {
    [CompilerGeneratedAttribute]
private bool <ShowConnectors>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <RisingBarColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <FallingBarColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <SubtotalBarColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorARGB <ConnectorColor>k__BackingField;
    [CompilerGeneratedAttribute]
private FillStyle <RisingBarFillStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private FillStyle <FallingBarFillStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private FillStyle <SubtotalBarFillStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Subtotals>k__BackingField;
    public bool ShowConnectors { get; public set; }
    public ColorARGB RisingBarColor { get; public set; }
    public ColorARGB FallingBarColor { get; public set; }
    public ColorARGB SubtotalBarColor { get; public set; }
    public ColorARGB ConnectorColor { get; public set; }
    public FillStyle RisingBarFillStyle { get; public set; }
    public FillStyle FallingBarFillStyle { get; public set; }
    public FillStyle SubtotalBarFillStyle { get; public set; }
    public List`1<int> Subtotals { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowConnectors();
    [CompilerGeneratedAttribute]
public void set_ShowConnectors(bool value);
    [CompilerGeneratedAttribute]
public ColorARGB get_RisingBarColor();
    [CompilerGeneratedAttribute]
public void set_RisingBarColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public ColorARGB get_FallingBarColor();
    [CompilerGeneratedAttribute]
public void set_FallingBarColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public ColorARGB get_SubtotalBarColor();
    [CompilerGeneratedAttribute]
public void set_SubtotalBarColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public ColorARGB get_ConnectorColor();
    [CompilerGeneratedAttribute]
public void set_ConnectorColor(ColorARGB value);
    [CompilerGeneratedAttribute]
public FillStyle get_RisingBarFillStyle();
    [CompilerGeneratedAttribute]
public void set_RisingBarFillStyle(FillStyle value);
    [CompilerGeneratedAttribute]
public FillStyle get_FallingBarFillStyle();
    [CompilerGeneratedAttribute]
public void set_FallingBarFillStyle(FillStyle value);
    [CompilerGeneratedAttribute]
public FillStyle get_SubtotalBarFillStyle();
    [CompilerGeneratedAttribute]
public void set_SubtotalBarFillStyle(FillStyle value);
    [CompilerGeneratedAttribute]
public List`1<int> get_Subtotals();
    [CompilerGeneratedAttribute]
public void set_Subtotals(List`1<int> value);
}
public class DevExpress.DataVisualization.Native.ColorHSL : object {
    private static float minLuminance;
    private static float maxLuminance;
    private float hue;
    private float saturation;
    private float luminance;
    public float Hue { get; public set; }
    public float Saturation { get; public set; }
    public float Luminance { get; public set; }
    public float MinLuminance { get; }
    public float MaxLuminance { get; }
    public ColorHSL(float hue, float saturation, float luminance);
    private static float GetHue(ColorARGB color);
    private static float GetSaturation(ColorARGB color);
    private static float GetBrightness(ColorARGB color);
    private static byte GetComponent(float q, float p, float t);
    public static ColorHSL op_Explicit(ColorARGB color);
    public static ColorARGB op_Explicit(ColorHSL color);
    public float get_Hue();
    public void set_Hue(float value);
    public float get_Saturation();
    public void set_Saturation(float value);
    public float get_Luminance();
    public void set_Luminance(float value);
    public float get_MinLuminance();
    public float get_MaxLuminance();
}
public abstract class DevExpress.DataVisualization.Native.ColorIndexCacheCore : object {
    private Dictionary`2<int, int> indexCount;
    protected int GetActualIndexRepeatCount(int index, int actualIndex);
    protected ColorARGB ConvertColor(ColorARGB color, int colorRepeat);
}
public enum DevExpress.DataVisualization.Native.DockStyleCore : Enum {
    public int value__;
    public static DockStyleCore None;
    public static DockStyleCore Top;
    public static DockStyleCore Bottom;
    public static DockStyleCore Left;
    public static DockStyleCore Right;
    public static DockStyleCore Fill;
}
public enum DevExpress.DataVisualization.Native.LayoutAlignmentHorizontal : Enum {
    public int value__;
    public static LayoutAlignmentHorizontal LeftOutside;
    public static LayoutAlignmentHorizontal Left;
    public static LayoutAlignmentHorizontal Center;
    public static LayoutAlignmentHorizontal Right;
    public static LayoutAlignmentHorizontal RightOutside;
}
public enum DevExpress.DataVisualization.Native.LayoutAlignmentVertical : Enum {
    public int value__;
    public static LayoutAlignmentVertical TopOutside;
    public static LayoutAlignmentVertical Top;
    public static LayoutAlignmentVertical Center;
    public static LayoutAlignmentVertical Bottom;
    public static LayoutAlignmentVertical BottomOutside;
}
