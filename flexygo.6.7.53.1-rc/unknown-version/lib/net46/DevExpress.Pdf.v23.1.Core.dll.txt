public class DevExpress.Office.DigitalSignatures.CertificateStoreProvider : object {
    private X509Store store;
    private X509Certificate2Collection collection;
    public CertificateStoreProvider(X509Store store, bool closeStore);
    public CertificateStoreProvider(X509Certificate2Collection collection);
    public sealed virtual Byte[] GetCertificate(Byte[] subjectDN);
    public sealed virtual void Dispose();
}
public class DevExpress.Office.DigitalSignatures.CrlClient : object {
    private IList`1<Uri> uriList;
    private bool throwOnFail;
    public CrlClient(IList`1<Uri> uriList, bool throwOnFail);
    public CrlClient(IList`1<Uri> uriList);
    private static Byte[] GetCRLData(Uri serverUri);
    public sealed virtual IEnumerable`1<Byte[]> GetEncoded(IList`1<Byte[]> chain);
}
public class DevExpress.Office.DigitalSignatures.DigestCalculator : object {
    private HashAlgorithm digest;
    [CompilerGeneratedAttribute]
private string <AlgorithmOid>k__BackingField;
    public string AlgorithmOid { get; }
    public DigestCalculator(HashAlgorithmType algorithm);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AlgorithmOid();
    public sealed virtual Byte[] ComputeDigest(Stream stream);
    public sealed virtual int GetDigestSize();
}
public enum DevExpress.Office.DigitalSignatures.HashAlgorithmType : Enum {
    public int value__;
    public static HashAlgorithmType SHA1;
    public static HashAlgorithmType SHA256;
    public static HashAlgorithmType SHA384;
    public static HashAlgorithmType SHA512;
}
public interface DevExpress.Office.DigitalSignatures.ICertificateStoreProvider {
    public abstract virtual Byte[] GetCertificate(Byte[] subjectDN);
}
public interface DevExpress.Office.DigitalSignatures.ICrlClient {
    public abstract virtual IEnumerable`1<Byte[]> GetEncoded(IList`1<Byte[]> chain);
}
public interface DevExpress.Office.DigitalSignatures.IDigestCalculator {
    public string AlgorithmOid { get; }
    public abstract virtual string get_AlgorithmOid();
    public abstract virtual int GetDigestSize();
    public abstract virtual Byte[] ComputeDigest(Stream stream);
}
public interface DevExpress.Office.DigitalSignatures.IOcspClient {
    public abstract virtual Byte[] GetEncoded(Byte[] checkCertificateBytes, Byte[] issuerCertificateBytes);
}
public class DevExpress.Office.DigitalSignatures.OcspClient : object {
    private static int nonceSize;
    private Uri uri;
    private IDigestCalculator digestCalculator;
    public OcspClient(Uri uri, HashAlgorithmType hashAlgorithm);
    public OcspClient(Uri uri);
    private static string GetOcspResponseStatusText(int status);
    private static Byte[] GetHttpResponseForOcspRequest(Byte[] requestData, Uri uri);
    public sealed virtual Byte[] GetEncoded(Byte[] checkCertificateBytes, Byte[] issuerCertificateBytes);
    private static Byte[] UnpackDEREncodedOctetString(Asn1OctetString value);
    private Byte[] GetOCSPResp(X509Certificate checkCert, X509Certificate rootCert);
    private Tuple`2<OcspReq, Byte[]> GenerateOCSPRequest(X509Certificate issuerCert, BigInteger serialNumber);
}
public class DevExpress.Office.DigitalSignatures.OcspException : Exception {
    public OcspException(string message);
}
public interface DevExpress.Office.Tsp.ITsaClient {
    public abstract virtual Byte[] GenerateTimeStamp(Stream stream);
    public abstract virtual Byte[] GenerateTimeStamp(Byte[] digest, string digestAlgorithmOID);
}
public class DevExpress.Office.Tsp.TsaClient : object {
    private Uri tsaServerURI;
    private string userName;
    private string password;
    private IDigestCalculator digestCalculator;
    public TsaClient(Uri tsaServerURI, HashAlgorithmType algorithm);
    public TsaClient(Uri tsaServerURI, HashAlgorithmType algorithm, string userName, string password);
    public TsaClient(Uri tsaServerURI, IDigestCalculator digestCalculator);
    public TsaClient(Uri tsaServerURI, IDigestCalculator digestCalculator, string userName, string password);
    private static string GetInvalidTsaExceptionMessage(Uri tsaURI, int errorCode);
    public sealed virtual Byte[] GenerateTimeStamp(Stream stream);
    public sealed virtual Byte[] GenerateTimeStamp(Byte[] digest, string digestAlgorithmOID);
}
public class DevExpress.Office.Tsp.TspValidationException : Exception {
    public TspValidationException(string message);
}
public class DevExpress.Pdf.ContentGeneration.EmfArcBuilder : object {
    private static double halfPI;
    private static double twoPI;
    private double startAngle;
    private double endAngle;
    private List`1<PdfPoint> points;
    private bool inverted;
    private PdfPoint endPoint;
    private EmfArcBuilder(double startAngle, double endAngle, EmfArcDirection direction);
    private static PointF[] ConvertPoints(PdfPoint[] points);
    public static PointF[] CreateEllipticalArc(EmfRectL bounds, Point startPoint, Point endPoint, EmfArcDirection direction);
    public static PointF[] CreateEllipticalArc(EmfRectL bounds, PointF startPoint, PointF endPoint, EmfArcDirection direction);
    public static PointF[] CreateEllipse(EmfRectL bounds);
    public static PointF[] CreateArc(Point centerPoint, long radius, float startAngle, float sweepAngle);
    private static double DegreeToRadian(double angle);
    private static double Atan2(double y, double x);
    private static PdfPoint CirclePoint(double angle, double r);
    private static PdfPoint CircleDerivativePoint(double angle, double r);
    private IList`1<PdfPoint> CreateArcPoints();
    private IList`1<PdfPoint> Build();
    private void AddCircularArc(double startAngle, double endAngle, double r);
    private void AddBezier(PdfPoint startPoint, PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint endPoint);
}
public class DevExpress.Pdf.ContentGeneration.EmfExporter : object {
    private static int gdiDefaultFontSize;
    private static string gdiDefaultFontName;
    private EmfGraphicsCommandConstructor constructor;
    private Dictionary`2<int, EmfObject> objectTable;
    private PdfExportFontManager fontCache;
    private EmfMetafileState sharedState;
    private Lazy`1<PdfExportFontInfo> defaultFont;
    private EmfGraphicsStateStack State { get; }
    public EmfExporter(EmfGraphicsCommandConstructor constructor, PdfExportFontManager fontCache, EmfMetafileState sharedState);
    private static T[] Concat(T element, T[] array);
    private static PdfTransformationMatrix ConvertMatrix(DXMatrix matrix);
    private static DXDashStyle ConvertDashStyle(EmfPenStyle style);
    private static DXLineJoin ConvertLineJoin(EmfPenStyle style);
    private static DXLineCap ConvertLineCap(EmfPenStyle style);
    private static EmfSizeL ScaleSize(EmfSizeL size, EmfScaleExtRecord record);
    private static long ScaleValue(long value, int numerator, int denominator);
    private EmfGraphicsStateStack get_State();
    public void Save();
    public void Restore(int savedDC);
    public void SetDeviceParameters(float dpiX, float dpiY, PdfTransformationMatrix matrix);
    public void SetViewportExtent(EmfSizeL size);
    public void SetViewportOrigin(Point origin);
    public void SetWindowExtent(EmfSizeL size);
    public void SetWindowOrigin(Point origin);
    public void ScaleViewportExtent(EmfScaleViewportExtExRecord record);
    public void ScaleWindowExtent(EmfScaleWindowExtExRecord record);
    public void SetMappingMode(EmfMapMode mappingMode);
    public void SetTextAlignment(EmfTextAlignmentMode alignment);
    public void SetBackgroundMode(EmfBackgroundMode backgroundMode);
    public void SetTextColor(Color textColor);
    public void CreateFontIndirect(int id, EmfLogFont logFont);
    public void SelectObject(int id);
    public void DeleteObject(int id);
    public void ModifyWorldTransform(DXMatrix matrix, EmfModifyWorldTransformMode mode);
    public void SelectClipRegion(EmfRegionMode regionMode, EmfRectL[] regionRects);
    public void ExTextOut(EmfExtTextOutRecord record);
    public void CreateBrush(EmfCreateBrushIndirectRecord record);
    public void AbortPath();
    public void MoveTo(Point point);
    public void BeginPath();
    public void CloseFigure();
    public void EndPath();
    public void LineTo(Point point);
    public void FillPath();
    public void SetBackgroundColor(Color color);
    public void IntersectClip(EmfRectL clip);
    public void ExcludeClip(EmfRectL clip);
    public void OffsetClip(Point offset);
    public void SelectClipPath(EmfRegionMode regionMode);
    public void CreatePen(EmfCreatePenIndirectRecord record);
    public void CreatePen(EmfExtCreatePenRecord record);
    public void CreateMonochromeBrush(EmfCreateMonoBrushRecord record);
    public void CreatePatternBrush(EmfCreateDIBPatternBrushRecord record);
    public void DrawPolygons(Point[][] points);
    public void DrawRectangle(EmfRectL rectangle);
    public void DrawBeziers(Point[] points);
    public void DrawBeziersTo(Point[] points);
    public void DrawPolylines(Point[][] lineData, bool useCurrentPosition);
    public void DrawEllipticalArc(EmfRectL bounds, Point startPoint, Point endPoint, bool updateCurrentPosition);
    public void DrawArc(Point center, long radius, float startAngle, float sweepAngle);
    public void DrawEllipse(EmfRectL bounds);
    public void DrawChord(EmfRectL bounds, Point startPoint, Point endPoint);
    public void DrawPie(EmfRectL bounds, Point startPoint, Point endPoint);
    public void DrawRoundRect(EmfRectL box, EmfSizeL corner);
    public void PolyDraw(Point[] points, EmfPointType[] types);
    public void SetPolygonFillMode(EmfPolygonFillMode fillMode);
    public void BitBlt(EmfBitBltRecord record);
    public void FillRegion(EmfFillRegionRecord record);
    public void StrokeAndFillPath();
    public void StrokePath();
    public void SetArcDirection(EmfArcDirection arcDirection);
    public void SetStretchMode(EmfStretchMode stretchMode);
    public void CreatePalette(EmfCreatePaletteRecord record);
    public void SelectPalette(int paletteId);
    public void RealizePalette();
    public void StretchBitmap(EmfStretchDIBBitsRecord record);
    public void AlphaBlend(EmfAlphaBlendRecord record);
    public void SetMiterLimit(int miterLimit);
    public void SetTransformationMatrix(DXMatrix matrix);
    public void OnGetDC();
    public void SetBrushOrigin(Point origin);
    public void SetROP2(EmfBinaryRasterOperation operation);
    public void SetLayoutMode(EmfLayoutMode layoutMode);
    private void TestSrcRect(EmfRectL srcRect, EmfBitmap bitmap);
    private DXBrush GetBrush(int id);
    private DXPalette ConvertPalette(EmfBitmap bitmap);
    private void StrokePath(bool closePath);
    private void AddBezierStripToPath(PointF[] points, bool updateCurrentPosition, EmfPathBuilder pathBuilder);
    private void DrawPathWithStroke(Action`1<EmfPathBuilder> createPath);
    private void DrawPathWithFillAndStroke(bool nonZero, Action`1<EmfPathBuilder> createPath);
    private void ExTextOutCore(EmfExtTextOutRecord record);
    private void PerformDrawAction(Action action);
    private void PerformFillAndStrokeAction(Action fillAction, Action strokeAction);
    private void PerformFillAction(Action action);
    private void PerformStrokeAction(Action action);
    private void UpdateClip(EmfRegionMode regionMode, EmfPlusRegion region, bool useWorldCoordinateSystem);
    private DXBrush CreateHatchBrush(Color foreColor, EmfHatchStyle hatchStyle);
    private DXBrush CreateBrush(EmfBrushStyle brushStyle, Color color, EmfHatchStyle hatchStyle, EmfBitmap bitmap);
    private DXTextureBrush CreateTextureBrush(EmfBitmap bitmap);
    private DXTextureBrush CreateTextureBrush(EmfBitmap bitmap, DXPalette palette);
    private DXPen CreatePen(EmfLogPenEx emfPen, EmfBitmap bitmap);
    private T GetEmfObject(int id);
    private EmfFont GetFont(EmfLogFont font);
    private EmfFont CreateFontInfo(string faceName);
    [CompilerGeneratedAttribute]
private void <FillPath>b__45_0();
    [CompilerGeneratedAttribute]
private void <StrokeAndFillPath>b__70_0();
}
[ExtensionAttribute]
internal static class DevExpress.Pdf.ContentGeneration.EmfExportExtensions : object {
    [ExtensionAttribute]
public static PointF ToPointF(Point point);
    [ExtensionAttribute]
public static DXMatrix ToDxMatrix(PdfTransformationMatrix matrix);
}
public class DevExpress.Pdf.ContentGeneration.EmfFont : object {
    [CompilerGeneratedAttribute]
private PdfExportFontInfo <FontInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Escapement>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Orientation>k__BackingField;
    public PdfExportFontInfo FontInfo { get; }
    public int Escapement { get; }
    public int Orientation { get; }
    public EmfFont(PdfExportFontInfo fontInfo, int escapement, int orientation);
    [CompilerGeneratedAttribute]
public PdfExportFontInfo get_FontInfo();
    [CompilerGeneratedAttribute]
public int get_Escapement();
    [CompilerGeneratedAttribute]
public int get_Orientation();
}
public class DevExpress.Pdf.ContentGeneration.EmfGraphicsCommandConstructor : PdfGraphicsCommandConstructor {
    private DXKerningMode KerningMode { get; }
    public EmfGraphicsCommandConstructor(PdfForm form, PdfGraphicsDocument graphicsDocument, float dpiX, float dpiY);
    private static PdfGraphicsPath CreateRectangularPath(double left, double bottom, double right, double top);
    private DXKerningMode get_KerningMode();
    public void DrawEmfString(string text, PdfExportFontInfo fontInfo, PointF location, DXStringFormat format, PdfGraphicsTextOrigin textOrigin, Color textColor, Single[] offsets, bool fillBackground);
    public void DrawGlyphs(Int16[] glyphs, PdfExportFontInfo fontInfo, PointF location, DXStringFormat format, PdfGraphicsTextOrigin textOrigin, Color textColor, Single[] offsets, bool fillBackground);
    public void FillAndStrokePath(PointF[] pathPoints, Byte[] pathTypes, bool nonZero);
    public void FillAndStrokePath(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes, bool nonZero);
    private void DrawString(IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PointF location, DXStringFormat format, PdfGraphicsTextOrigin textOrigin, Color textColor, bool fillBackground);
    private void SetFontColor(PdfExportFontInfo fontInfo, Color textColor);
}
public class DevExpress.Pdf.ContentGeneration.EmfGraphicsStateStack : object {
    private static float millimetersPerInch;
    private static float hundredthsOfMillimeterPerInch;
    private Stack`1<EmfGraphicsState> graphicsStateStack;
    private EmfGraphicsState current;
    private EmfGraphicsState initialState;
    private float dpiX;
    private float dpiY;
    [CompilerGeneratedAttribute]
private PdfTransformationMatrix <DeviceToTargetTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChanged>k__BackingField;
    public PdfTransformationMatrix DeviceToTargetTransform { get; private set; }
    public PdfTransformationMatrix PageToDeviceTransform { get; }
    public EmfPlusClip Clip { get; public set; }
    public PdfTransformationMatrix Transform { get; public set; }
    public Point ViewportOrigin { get; public set; }
    public Point WindowOrigin { get; public set; }
    public EmfSizeL ViewportSize { get; public set; }
    public EmfSizeL WindowSize { get; public set; }
    public EmfMapMode MappingMode { get; public set; }
    public EmfTextAlignmentMode TextAlignment { get; public set; }
    public EmfBackgroundMode BackgroundMode { get; public set; }
    public Color TextColor { get; public set; }
    public EmfFont Font { get; public set; }
    public DXBrush Brush { get; public set; }
    public EmfPathBuilder PathBuilder { get; public set; }
    public EmfPathBuilder CurrentPath { get; public set; }
    public PointF CurrentPoint { get; public set; }
    public Color BackgroundColor { get; public set; }
    public DXPen Pen { get; public set; }
    public EmfPolygonFillMode PolygonFillMode { get; public set; }
    public EmfArcDirection ArcDirection { get; public set; }
    public EmfStretchMode StretchMode { get; public set; }
    public Color[] LogicalPalette { get; public set; }
    public Color[] SystemPalette { get; public set; }
    public float MiterLimit { get; public set; }
    public Point BrushOrigin { get; public set; }
    public EmfBinaryRasterOperation BinaryRasterOperation { get; public set; }
    public bool IsChanged { get; private set; }
    [CompilerGeneratedAttribute]
public PdfTransformationMatrix get_DeviceToTargetTransform();
    [CompilerGeneratedAttribute]
private void set_DeviceToTargetTransform(PdfTransformationMatrix value);
    public PdfTransformationMatrix get_PageToDeviceTransform();
    public EmfPlusClip get_Clip();
    public void set_Clip(EmfPlusClip value);
    public PdfTransformationMatrix get_Transform();
    public void set_Transform(PdfTransformationMatrix value);
    public Point get_ViewportOrigin();
    public void set_ViewportOrigin(Point value);
    public Point get_WindowOrigin();
    public void set_WindowOrigin(Point value);
    public EmfSizeL get_ViewportSize();
    public void set_ViewportSize(EmfSizeL value);
    public EmfSizeL get_WindowSize();
    public void set_WindowSize(EmfSizeL value);
    public EmfMapMode get_MappingMode();
    public void set_MappingMode(EmfMapMode value);
    public EmfTextAlignmentMode get_TextAlignment();
    public void set_TextAlignment(EmfTextAlignmentMode value);
    public EmfBackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(EmfBackgroundMode value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public EmfFont get_Font();
    public void set_Font(EmfFont value);
    public DXBrush get_Brush();
    public void set_Brush(DXBrush value);
    public EmfPathBuilder get_PathBuilder();
    public void set_PathBuilder(EmfPathBuilder value);
    public EmfPathBuilder get_CurrentPath();
    public void set_CurrentPath(EmfPathBuilder value);
    public PointF get_CurrentPoint();
    public void set_CurrentPoint(PointF value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public DXPen get_Pen();
    public void set_Pen(DXPen value);
    public EmfPolygonFillMode get_PolygonFillMode();
    public void set_PolygonFillMode(EmfPolygonFillMode value);
    public EmfArcDirection get_ArcDirection();
    public void set_ArcDirection(EmfArcDirection value);
    public EmfStretchMode get_StretchMode();
    public void set_StretchMode(EmfStretchMode value);
    public Color[] get_LogicalPalette();
    public void set_LogicalPalette(Color[] value);
    public Color[] get_SystemPalette();
    public void set_SystemPalette(Color[] value);
    public float get_MiterLimit();
    public void set_MiterLimit(float value);
    public Point get_BrushOrigin();
    public void set_BrushOrigin(Point value);
    public EmfBinaryRasterOperation get_BinaryRasterOperation();
    public void set_BinaryRasterOperation(EmfBinaryRasterOperation value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsChanged();
    [CompilerGeneratedAttribute]
private void set_IsChanged(bool value);
    public void Push();
    public void Pop();
    public void SetDeviceParameters(float dpiX, float dpiY, PdfTransformationMatrix matrix);
    public void SetCompatiblePageToDeviceTransformationMatrix(double scaleX, double scaleY);
    public PdfTransformationMatrix GetFullTransformationMatrix();
    public sealed virtual void ApplyState(PdfGraphicsCommandConstructor commandConstructor);
    public void Reset();
    public void SaveInitialState();
    private void UpdatePageToDeviceTransformationMatrix();
    private PdfTransformationMatrix CreatePageToDeviceTransformationMatrix(EmfMapMode mappingMode);
    private PdfTransformationMatrix CreatePageToDeviceTransformationMatrix(double scaleX, double scaleY);
    private PdfTransformationMatrix CreatePageToDeviceTransformationMatrix(double logicalUnitToInchScale);
    private sealed virtual override void DevExpress.Pdf.ContentGeneration.IEmfGraphicsState.MarkChanged();
}
public class DevExpress.Pdf.ContentGeneration.EmfMetafileExportVisitor : object {
    private EmfPlusExporter emfPlusContext;
    private EmfExporter emfContext;
    private PdfRectangle destinationRectangle;
    public EmfMetafileExportVisitor(EmfGraphicsCommandConstructor constructor, PdfExportFontManager fontCache, PdfRectangle destinationRectangle);
    public sealed virtual void Visit(EmfMetafileHeaderRecord headerRecord);
    public sealed virtual void Visit(EmfPlusHeaderRecord headerRecord);
    public sealed virtual void Visit(EmfPlusClearRecord clearRecord);
    public sealed virtual void Visit(EmfPlusObjectRecord record);
    public sealed virtual void Visit(EmfPlusDrawArcRecord record);
    public sealed virtual void Visit(EmfPlusDrawBeziersRecord record);
    public sealed virtual void Visit(EmfPlusDrawDriverStringRecord record);
    public sealed virtual void Visit(EmfPlusDrawEllipseRecord record);
    public sealed virtual void Visit(EmfPlusDrawImagePointsRecord record);
    public sealed virtual void Visit(EmfPlusDrawImageRecord record);
    public sealed virtual void Visit(EmfPlusDrawLinesRecord record);
    public sealed virtual void Visit(EmfPlusDrawPathRecord record);
    public sealed virtual void Visit(EmfPlusDrawPieRecord record);
    public sealed virtual void Visit(EmfPlusDrawRectsRecord record);
    public sealed virtual void Visit(EmfPlusDrawStringRecord record);
    public sealed virtual void Visit(EmfPlusFillEllipseRecord record);
    public sealed virtual void Visit(EmfPlusFillPathRecord record);
    public sealed virtual void Visit(EmfPlusFillRegionRecord record);
    public sealed virtual void Visit(EmfPlusFillPieRecord record);
    public sealed virtual void Visit(EmfPlusFillPolygonRecord record);
    public sealed virtual void Visit(EmfPlusFillRectsRecord record);
    public sealed virtual void Visit(EmfPlusModifyWorldTransform record);
    public sealed virtual void Visit(EmfPlusRotateWorldTransformRecord record);
    public sealed virtual void Visit(EmfPlusResetClipRecord record);
    public sealed virtual void Visit(EmfPlusResetWorldTransformRecord record);
    public sealed virtual void Visit(EmfPlusRestoreRecord record);
    public sealed virtual void Visit(EmfPlusSaveRecord record);
    public sealed virtual void Visit(EmfPlusSetClipPathRecord record);
    public sealed virtual void Visit(EmfPlusSetClipRectRecord record);
    public sealed virtual void Visit(EmfPlusSetClipRegionRecord record);
    public sealed virtual void Visit(EmfPlusSetPageTransformRecord record);
    public sealed virtual void Visit(EmfPlusSetWorldTransformRecord record);
    public sealed virtual void Visit(EmfPlusEofRecord record);
    public sealed virtual void Visit(EmfSetMetaRegionRecord record);
    public sealed virtual void Visit(EmfSaveDCRecord record);
    public sealed virtual void Visit(EmfRestoreDCRecord record);
    public sealed virtual void Visit(EmfSetViewportExtentRecord record);
    public sealed virtual void Visit(EmfExCreateFontIndirectRecord record);
    public sealed virtual void Visit(EmfSelectObjectRecord record);
    public sealed virtual void Visit(EmfDeleteObjectRecord record);
    public sealed virtual void Visit(EmfSetViewportOriginRecord record);
    public sealed virtual void Visit(EmfSetWindowExtentRecord record);
    public sealed virtual void Visit(EmfSetWindowOriginRecord record);
    public sealed virtual void Visit(EmfSetMappingModeRecord record);
    public sealed virtual void Visit(EmfSetTextAlignmentRecord record);
    public sealed virtual void Visit(EmfSetBackgroundModeRecord record);
    public sealed virtual void Visit(EmfSetTextColorRecord record);
    public sealed virtual void Visit(EmfModifyWorldTransformRecord record);
    public sealed virtual void Visit(EmfSelectClipRegionRecord record);
    public sealed virtual void Visit(EmfExtTextOutRecord record);
    public sealed virtual void Visit(EmfCreateBrushIndirectRecord record);
    public sealed virtual void Visit(EmfFillRegionRecord record);
    public sealed virtual void Visit(EmfAbortPathRecord record);
    public sealed virtual void Visit(EmfBeginPathRecord record);
    public sealed virtual void Visit(EmfCloseFigureRecord record);
    public sealed virtual void Visit(EmfFlattenPathRecord record);
    public sealed virtual void Visit(EmfEndPathRecord record);
    public sealed virtual void Visit(EmfWidenPathRecord record);
    public sealed virtual void Visit(EmfLineToRecord record);
    public sealed virtual void Visit(EmfFillPathRecord record);
    public sealed virtual void Visit(EmfMoveToEx record);
    public sealed virtual void Visit(EmfSetBackgroundColorRecord record);
    public sealed virtual void Visit(EmfIntersectClipRectRecord record);
    public sealed virtual void Visit(EmfCreatePenIndirectRecord record);
    public sealed virtual void Visit(EmfDrawRectangleRecord record);
    public sealed virtual void Visit(EmfBitBltRecord record);
    public sealed virtual void Visit(EmfPolygonRecord record);
    public sealed virtual void Visit(EmfSetPolygonFillModeRecord record);
    public sealed virtual void Visit(EmfSetArcDirectionRecord record);
    public sealed virtual void Visit(EmfSetStretchBitmapRecord record);
    public sealed virtual void Visit(EmfCreatePaletteRecord record);
    public sealed virtual void Visit(EmfSelectPaletteRecord record);
    public sealed virtual void Visit(EmfRealizePaletteRecord record);
    public sealed virtual void Visit(EmfStretchDIBBitsRecord record);
    public sealed virtual void Visit(EmfPolyBezierRecord record);
    public sealed virtual void Visit(EmfPolyBezierToRecord record);
    public sealed virtual void Visit(EmfPolylineRecord record);
    public sealed virtual void Visit(EmfPolylineToRecord record);
    public sealed virtual void Visit(EmfArcRecord record);
    public sealed virtual void Visit(EmfAngleArcRecord record);
    public sealed virtual void Visit(EmfPieRecord record);
    public sealed virtual void Visit(EmfChordRecord record);
    public sealed virtual void Visit(EmfEllipseRecord record);
    public sealed virtual void Visit(EmfRoundRectRecord record);
    public sealed virtual void Visit(EmfPolyDrawRecord record);
    public sealed virtual void Visit(EmfStrokeAndFillPathRecord record);
    public sealed virtual void Visit(EmfStrokePathRecord record);
    public sealed virtual void Visit(EmfExtCreatePenRecord record);
    public sealed virtual void Visit(EmfCreateMonoBrushRecord record);
    public sealed virtual void Visit(EmfCreateDIBPatternBrushRecord record);
    public sealed virtual void Visit(EmfSetMiterLimitRecord record);
    public sealed virtual void Visit(EmfExcludeClipRectRecord record);
    public sealed virtual void Visit(EmfOffsetClipRegionRecord record);
    public sealed virtual void Visit(EmfSelectClipPathRecord record);
    public sealed virtual void Visit(EmfScaleViewportExtExRecord record);
    public sealed virtual void Visit(EmfScaleWindowExtExRecord record);
    public sealed virtual void Visit(EmfSetWorldTransformRecord record);
    public sealed virtual void Visit(EmfPlusGetDCRecord record);
    public sealed virtual void Visit(EmfSetBrushOriginRecord record);
    public sealed virtual void Visit(EmfSetROP2Record record);
    public sealed virtual void Visit(EmfSetLayoutRecord record);
    public sealed virtual void Visit(EmfAlphaBlendRecord record);
    private void PerformPenDrawAction(EmfPlusPenDrawingRecord record, Action action);
    private void PerformFillAction(EmfPlusFillBase record, Action action);
    public sealed virtual void Visit(EmfPlusSetAntiAliasModeRecord record);
    public sealed virtual void Visit(EmfPlusSetComposingModeRecord record);
    public sealed virtual void Visit(EmfPlusSetComposingQualityRecord record);
    public sealed virtual void Visit(EmfPlusSetInterpolationModeRecord record);
    public sealed virtual void Visit(EmfPlusSetPixelOffsetModeRecord record);
    public sealed virtual void Visit(EmfPlusSetTextRenderingHintRecord record);
}
public class DevExpress.Pdf.ContentGeneration.EmfMetafileState : object {
    private PdfGraphicsCommandConstructor constructor;
    private bool isStateEmpty;
    [CompilerGeneratedAttribute]
private EmfPlusGraphicsStateStack <EmfPlusState>k__BackingField;
    [CompilerGeneratedAttribute]
private EmfGraphicsStateStack <EmfState>k__BackingField;
    public EmfPlusGraphicsStateStack EmfPlusState { get; }
    public EmfGraphicsStateStack EmfState { get; }
    public EmfMetafileState(PdfGraphicsCommandConstructor constructor);
    [CompilerGeneratedAttribute]
public EmfPlusGraphicsStateStack get_EmfPlusState();
    [CompilerGeneratedAttribute]
public EmfGraphicsStateStack get_EmfState();
    private void PerformDrawAction(Action action, IEmfGraphicsState state, IEmfGraphicsState anotherState);
    public void PerformEmfPlusDrawAction(Action action);
    public void PerformEmfDrawAction(Action action);
    public void OnEndOfFile();
}
public class DevExpress.Pdf.ContentGeneration.EmfPathBuilder : object {
    private IList`1<EmfFigure> figures;
    private EmfFigure currentFigure;
    private EmfPathBuilder(EmfPathBuilder builder);
    private static EmfRectL FromLTRB(int left, int top, int right, int bottom);
    public void MoveTo(Point point);
    public void MoveTo(PointF point);
    public void LineTo(PointF currentPoint, PointF point);
    public void PolyBezier(PointF currentPoint, Point[] points);
    public void PolyBezier(Point[] points);
    public void PolyBezier(PointF[] points);
    public void PolyBezier(PointF currentPoint, PointF[] points);
    public void AddBezier(PointF currentPoint, PointF controlPoint1, PointF controlPoint2, PointF endPoint);
    public void Polyline(PointF currentPoint, IEnumerable`1<Point> points);
    public void AddPolygons(Point[][] points);
    public void AddRectangle(RectangleF rect);
    public void AddRoundRect(EmfRectL box, EmfSizeL corner);
    public void CloseFigure();
    public EmfPathBuilder Clone();
    public Tuple`2<PointF[], Byte[]> Build(bool closePath);
    private void EnsureFigure(PointF currentPoint);
    private void AddArc(PointF startPoint, PointF endPoint, EmfRectL arcBox);
}
public class DevExpress.Pdf.ContentGeneration.EmfPlusClip : object {
    private EmfPlusRegion clipRegion;
    public EmfPlusClip(EmfPlusRegion clipRegion);
    public void ApplyClip(PdfGraphicsCommandConstructor commandConstructor);
    public EmfPlusClip Combine(EmfPlusCombineMode mode, EmfPlusClip newClip);
    public EmfPlusClip Transform(DXMatrix matrix);
}
public class DevExpress.Pdf.ContentGeneration.EmfPlusExporter : object {
    private static float millimetersPerInch;
    private static float pointsPerInch;
    private static float documentsPerInch;
    private static float printerDefaultDPI;
    private PdfGraphicsCommandConstructor constructor;
    private Dictionary`2<int, EmfPlusObject> objectTable;
    private Dictionary`2<int, EmfPlusContinuedObject> continuedObjects;
    private EmfMetafileState sharedState;
    private PdfExportFontManager fontCache;
    private float logicalDpiX;
    private float logicalDpiY;
    private bool isVideoDisplay;
    private DXGraphicsUnit pageUnit;
    private float scaleFactor;
    private EmfPlusGraphicsStateStack State { get; }
    public EmfPlusExporter(PdfGraphicsCommandConstructor constructor, PdfExportFontManager fontCache, EmfMetafileState sharedState);
    private static DXStringAlignment ConvertAlignment(EmfPlusStringAlignment value);
    private static PdfTransformationMatrix ConvertMatrix(DXMatrix matrix);
    private static bool Compare(float a, float b);
    private static bool IsDefaultSourceRectangle(RectangleF rectangle, DXImage image);
    private EmfPlusGraphicsStateStack get_State();
    public void SetDeviceTransformation(PdfTransformationMatrix matrix);
    public void SetLogicalDpi(float logicalDpiX, float logicalDpiY, bool isVideoDisplay);
    public void Save(int id);
    public void Restore(int id);
    public void PerformDrawAction(Action action);
    public void OnEndOfFile();
    public void DrawPath(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes);
    public void DrawRectangles(RectangleF[] rects);
    public void DrawBeziers(PointF[] points);
    public void DrawEllipse(RectangleF bounds);
    public void DrawLines(PointF[] points);
    public void DrawPolygon(PointF[] points);
    public void DrawPath(int id);
    public void FillEllipse(RectangleF bounds);
    public void FillPath(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes);
    public void FillPath(int id);
    public void FillRects(RectangleF[] rectangles);
    public void SetBrush(int id);
    public void SetFillColor(Color color);
    public void SetPen(int id);
    public void SetPen(DXPen pen);
    public void FillPolygon(PointF[] points);
    public void DrawImage(int id, PointF[] destinationPoints, RectangleF srcRect);
    public void DrawImage(int id, RectangleF bounds, RectangleF srcRect);
    public void ResetClip();
    public void SetPageUnit(DXGraphicsUnit unit, float scaleFactor);
    public void SetClipPath(int id, EmfPlusCombineMode mode);
    public void SetClipRegion(int id, EmfPlusCombineMode mode);
    public void SetClipRectangle(RectangleF rect, EmfPlusCombineMode mode);
    public void DrawString(string text, RectangleF layoutRect, int fontId, Nullable`1<Color> color, int brushId, int formatId);
    public void DrawUnicodeString(Char[] glyphs, PointF[] positions, int fontId, int brushId, Nullable`1<Color> color);
    public void Clear(Color color);
    public void ProcessEmfPlusObjectRecord(EmfPlusObjectRecord record);
    private void AddEmfPlusObject(int index, EmfPlusObject obj);
    public void SetWorldTransform(DXMatrix matrix);
    public void MultiplyWorldTransform(DXMatrix matrix, bool isPostMultiplied);
    public void RotateTransform(float angle, bool isPostMultiplied);
    private T GetEmfPlusObject(int id);
    private double GetUnitScale(float scale, DXGraphicsUnit unit);
    private void SetMatrix(PdfTransformationMatrix matrix);
    private void MultiplyWorldTransform(PdfTransformationMatrix matrix, bool isPostMultiplied);
    private void SetClip(EmfPlusRegion clipRegion, EmfPlusCombineMode mode);
    private void SetFontColor(PdfExportFontInfo fontInfo, Nullable`1<Color> color, int brushId);
    private PdfExportFontInfo GetFont(int fontId);
}
public class DevExpress.Pdf.ContentGeneration.EmfPlusGraphicsStateStack : object {
    private Stack`1<EmfPlusGraphicsState> graphicsStateStack;
    private EmfPlusGraphicsState current;
    private PdfTransformationMatrix pageTransformationMatrix;
    [CompilerGeneratedAttribute]
private bool <IsChanged>k__BackingField;
    public EmfPlusClip Clip { get; public set; }
    public Nullable`1<int> CurrentId { get; }
    public PdfTransformationMatrix Transform { get; public set; }
    public PdfTransformationMatrix PageTransformationMatrix { get; public set; }
    public PdfTransformationMatrix PageUnitTransformationMatrix { get; public set; }
    public bool IsChanged { get; private set; }
    public EmfPlusClip get_Clip();
    public void set_Clip(EmfPlusClip value);
    public Nullable`1<int> get_CurrentId();
    public PdfTransformationMatrix get_Transform();
    public void set_Transform(PdfTransformationMatrix value);
    public PdfTransformationMatrix get_PageTransformationMatrix();
    public void set_PageTransformationMatrix(PdfTransformationMatrix value);
    public PdfTransformationMatrix get_PageUnitTransformationMatrix();
    public void set_PageUnitTransformationMatrix(PdfTransformationMatrix value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsChanged();
    [CompilerGeneratedAttribute]
private void set_IsChanged(bool value);
    public void Push(int id);
    public void Pop();
    public bool IsStackEmpty();
    public PdfTransformationMatrix GetFullTransformationMatrix();
    public sealed virtual void ApplyState(PdfGraphicsCommandConstructor commandConstructor);
    private sealed virtual override void DevExpress.Pdf.ContentGeneration.IEmfGraphicsState.MarkChanged();
}
public class DevExpress.Pdf.ContentGeneration.EmfPlusRegionClipBuilder : object {
    private PdfGraphicsCommandConstructor commandConstructor;
    public EmfPlusRegionClipBuilder(PdfGraphicsCommandConstructor commandConstructor);
    public sealed virtual void Visit(DXRegionDataNodeRectangle node);
    public sealed virtual void Visit(DXRegionDataNodePath node);
    public sealed virtual void Visit(DXRegionDataNodeEmpty node);
    public sealed virtual void Visit(DXRegionDataNodeInfinite node);
    public sealed virtual void Visit(DXRegionDataNodeComplex node);
}
public class DevExpress.Pdf.ContentGeneration.EmfPlusRegionComplexityAnalyzer : object {
    private bool isSimple;
    public static bool IsSimple(DXRegionDataNode node);
    public sealed virtual void Visit(DXRegionDataNodeRectangle node);
    public sealed virtual void Visit(DXRegionDataNodePath node);
    public sealed virtual void Visit(DXRegionDataNodeEmpty node);
    public sealed virtual void Visit(DXRegionDataNodeInfinite node);
    public sealed virtual void Visit(DXRegionDataNodeComplex node);
}
[ExtensionAttribute]
public static class DevExpress.Pdf.ContentGeneration.Extensions.PdfExportExtensions : object {
    [ExtensionAttribute]
public static DXStringFormat ToDXStringFormat(PdfStringFormat pdfFormat);
    [ExtensionAttribute]
public static PdfFontMetrics ToPdfMetrics(DXFontMetrics fontMetrics);
    [ExtensionAttribute]
public static bool IsBold(DXFontDescriptor descriptor);
    [ExtensionAttribute]
public static bool IsItalic(DXFontDescriptor descriptor);
    [ExtensionAttribute]
public static bool IsSymbolFont(DXFontDescriptor descriptor);
    [ExtensionAttribute]
public static string GetFontName(DXFontDescriptor descriptor);
}
public static class DevExpress.Pdf.ContentGeneration.Fonts.FontLink : object {
    private static IDictionary`2<PdfFontCharset, List`1<string>> serifLink;
    private static IDictionary`2<PdfFontCharset, List`1<string>> sansLink;
    private static IDictionary`2<PdfFontCharset, List`1<string>> monoSerifLink;
    private static IDictionary`2<PdfFontCharset, List`1<string>> monoSansLink;
    private static List`1<string> dingbatsLinks;
    private static FontLink();
    private static Dictionary`2<PdfFontCharset, List`1<string>> CreateDictionary();
    private static void FillWindowsLinks();
    public static IEnumerable`1<string> GetDingbatsFontLink();
    public static IEnumerable`1<string> GetSerifFontLink(PdfFontCharset charset);
    public static IEnumerable`1<string> GetSansFontLink(PdfFontCharset charset);
    public static IEnumerable`1<string> GetMonoSerifFontLink(PdfFontCharset charset);
    public static IEnumerable`1<string> GetMonoSansFontLink(PdfFontCharset charset);
}
public abstract class DevExpress.Pdf.ContentGeneration.Fonts.FontMatcher`3 : object {
    private static Regex tempFileFilter;
    private IDictionary`2<PdfFontCharset, TFontFamily> serifFonts;
    private IDictionary`2<PdfFontCharset, TFontFamily> serifMonospacedFonts;
    private IDictionary`2<PdfFontCharset, TFontFamily> sansSerifMonospacedFonts;
    private IDictionary`2<PdfFontCharset, TFontFamily> sansSerifFonts;
    private IDictionary`2<string, TFontFamily> knownMatchings;
    private IDictionary`2<string, TFont> postScriptNameMap;
    private IList`1<TFontFamily> systemFonts;
    private string symbolicFontFamily;
    protected IList`1<TFontFamily> SystemFonts { get; }
    protected FontMatcher`3(IList`1<TFontFamily> systemFonts);
    private static FontMatcher`3();
    protected IList`1<TFontFamily> get_SystemFonts();
    private void FillKnownMatching(FamilyMatcher<TFontFamily, TFont, TPlatformFont> matcher, string family, IEnumerable`1<string> systemFamilies);
    private void FillKnownMatching(FamilyMatcher<TFontFamily, TFont, TPlatformFont> matcher, string family, string systemFamily);
    private DXFontDescriptor CreateDescriptor(PdfFont font);
    protected TFontFamily MatchWithKnownMatching(DXFontDescriptor descriptor);
    private TFont MatchByPostScriptName(String[] postScriptNames);
    protected TFontFamily FindFamily(DXFontDescriptor descriptor);
    private void FillStyleMatchings(FamilyMatcher<TFontFamily, TFont, TPlatformFont> matcher, PdfFontCharset charset);
    protected TPlatformFont MatchFont(DXFontDescriptor descriptor, PdfFontFlags flags, PdfFontCharset charset);
    public TPlatformFont MatchFont(PdfFont font);
    protected abstract virtual TPlatformFont GetNativeFont(TFont font);
    protected abstract virtual TPlatformFont GetFirstMatchingNativeFont(TFontFamily family, DXFontDescriptor descriptor);
}
public class DevExpress.Pdf.ContentGeneration.Fonts.GDIFont : object {
    [CompilerGeneratedAttribute]
private bool <IsSerif>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMonospaced>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostScriptName>k__BackingField;
    [CompilerGeneratedAttribute]
private DXFontStyleSlant <Slant>k__BackingField;
    [CompilerGeneratedAttribute]
private DXFontWeight <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private DXFontStretch <Stretch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemFontName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    public bool IsSerif { get; }
    public bool IsMonospaced { get; }
    public bool IsSymbol { get; }
    public string PostScriptName { get; }
    public DXFontStyleSlant Slant { get; }
    public DXFontWeight Weight { get; }
    public DXFontStretch Stretch { get; }
    public string SystemFontName { get; }
    public string FamilyName { get; }
    public GDIFont(string systemFontName, DXFontDescriptor descriptor);
    public GDIFont(string family, bool bold, bool italic);
    public GDIFont(DWriteFont font, string familyName, bool isSimulation);
    private static string GetString(DWriteFont font, DWRITE_INFORMATIONAL_STRING_ID id, string localeName);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSerif();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMonospaced();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSymbol();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PostScriptName();
    [CompilerGeneratedAttribute]
public sealed virtual DXFontStyleSlant get_Slant();
    [CompilerGeneratedAttribute]
public sealed virtual DXFontWeight get_Weight();
    [CompilerGeneratedAttribute]
public sealed virtual DXFontStretch get_Stretch();
    [CompilerGeneratedAttribute]
public string get_SystemFontName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FamilyName();
}
public class DevExpress.Pdf.ContentGeneration.Fonts.GDIFontFamily : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <FamilyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GDIFont> <Fonts>k__BackingField;
    public HashSet`1<string> FamilyNames { get; }
    public IList`1<GDIFont> Fonts { get; }
    public GDIFontFamily(string familyName, IList`1<GDIFont> fonts);
    public GDIFontFamily(DWriteFontFamily family);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_FamilyNames();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<GDIFont> get_Fonts();
    public void AddStyle(string systemFontName, DXFontDescriptor descriptor);
}
public class DevExpress.Pdf.ContentGeneration.Fonts.GDIFontSubstitutionEngine : FontMatcher`3<GDIFontFamily, GDIFont, PdfFontParameters> {
    private static GDIFontSubstitutionEngine instance;
    private static GDIFontSubstitutionEngine();
    private GDIFontSubstitutionEngine(IList`1<GDIFontFamily> systemFonts);
    public static PdfFontParameters GetMatchingFont(string fontFamily, PdfFontStyle style);
    public static PdfFontParameters GetMatchingFont(PdfFont font);
    public static IList`1<GDIFontFamily> GetGdiFontFamilies();
    private static List`1<GDIFont> InitFamily(IDictionary`2<string, List`1<GDIFont>> storage, string family);
    private static GDIFontSubstitutionEngine CreateFromDirectWrite();
    protected virtual PdfFontParameters GetFirstMatchingNativeFont(GDIFontFamily family, DXFontDescriptor descriptor);
    protected virtual PdfFontParameters GetNativeFont(GDIFont font);
}
public interface DevExpress.Pdf.ContentGeneration.Fonts.IFont {
    public bool IsSerif { get; }
    public bool IsMonospaced { get; }
    public bool IsSymbol { get; }
    public string PostScriptName { get; }
    public abstract virtual bool get_IsSerif();
    public abstract virtual bool get_IsMonospaced();
    public abstract virtual bool get_IsSymbol();
    public abstract virtual string get_PostScriptName();
}
public interface DevExpress.Pdf.ContentGeneration.Fonts.IFontFamily`1 {
    public HashSet`1<string> FamilyNames { get; }
    public IList`1<TFont> Fonts { get; }
    public abstract virtual HashSet`1<string> get_FamilyNames();
    public abstract virtual IList`1<TFont> get_Fonts();
}
public class DevExpress.Pdf.ContentGeneration.GDIPlusMeasuringContext : object {
    private Graphics graphics;
    private StringFormat format;
    public float GetCharWidth(char ch, Font font);
    public sealed virtual void Dispose();
}
public interface DevExpress.Pdf.ContentGeneration.IEmfGraphicsState {
    public bool IsChanged { get; }
    public abstract virtual bool get_IsChanged();
    public abstract virtual void MarkChanged();
    public abstract virtual void ApplyState(PdfGraphicsCommandConstructor commandConstructor);
}
public class DevExpress.Pdf.ContentGeneration.Interop.ABC : ValueType {
    private int abcA;
    private UInt32 abcB;
    private int abcC;
}
internal class DevExpress.Pdf.ContentGeneration.Interop.GCP_RESULTS : ValueType {
    private int structSize;
    private string outString;
    private IntPtr order;
    private IntPtr dx;
    private IntPtr caretPos;
    private IntPtr cls;
    private IntPtr glyphs;
    private UInt32 glyphCount;
    private int maxFit;
    public int StructSize { get; public set; }
    public string OutString { get; public set; }
    public IntPtr Order { get; public set; }
    public IntPtr Dx { get; public set; }
    public IntPtr CaretPos { get; public set; }
    public IntPtr Cls { get; public set; }
    public IntPtr Glyphs { get; public set; }
    public UInt32 GlyphCount { get; public set; }
    public int MaxFit { get; public set; }
    public int get_StructSize();
    public void set_StructSize(int value);
    public string get_OutString();
    public void set_OutString(string value);
    public IntPtr get_Order();
    public void set_Order(IntPtr value);
    public IntPtr get_Dx();
    public void set_Dx(IntPtr value);
    public IntPtr get_CaretPos();
    public void set_CaretPos(IntPtr value);
    public IntPtr get_Cls();
    public void set_Cls(IntPtr value);
    public IntPtr get_Glyphs();
    public void set_Glyphs(IntPtr value);
    public UInt32 get_GlyphCount();
    public void set_GlyphCount(UInt32 value);
    public int get_MaxFit();
    public void set_MaxFit(int value);
}
[FlagsAttribute]
internal enum DevExpress.Pdf.ContentGeneration.Interop.GCPFlags : Enum {
    public UInt32 value__;
    public static GCPFlags GCP_REORDER;
    public static GCPFlags GCP_USEKERNING;
    public static GCPFlags GCP_LIGATE;
}
internal static class DevExpress.Pdf.ContentGeneration.Interop.Gdi32Interop : object {
    public static int GGI_MARK_NONEXISTING_GLYPHS;
    public static IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);
    public static bool DeleteObject(IntPtr hObject);
    public static UInt32 GetCharacterPlacement(IntPtr hdc, string lpString, int nCount, int nMaxExtent, GCP_RESULTS& lpResults, UInt32 dwFlags);
    public static UInt32 GetEnhMetaFileBits(IntPtr hemf, UInt32 cbBuffer, Byte[] lpbBuffer);
    public static UInt32 GetMetaFileBitsEx(IntPtr hemf, UInt32 cbBuffer, Byte[] lpbBuffer);
    public static UInt32 DeleteEnhMetaFile(IntPtr hemf);
    public static UInt32 DeleteMetaFile(IntPtr hmf);
    public static UInt32 GetFontData(IntPtr hdc, UInt32 dwTable, UInt32 dwOffset, Byte[] lpvBuffer, UInt32 cbData);
    public static UInt32 SetLayout(IntPtr hdc, UInt32 dwLayout);
    public static UInt32 GetGlyphIndices(IntPtr hdc, IntPtr str, int length, UInt16[] pgi, int flags);
    public static int RemoveFontResourceEx(string lpszFilename, int fl, IntPtr pdv);
}
public class DevExpress.Pdf.ContentGeneration.Interop.GOFFSET : ValueType {
    private int du;
    private int dv;
    public int HorizontalOffset { get; }
    public int VerticalOffset { get; }
    public int get_HorizontalOffset();
    public int get_VerticalOffset();
}
public class DevExpress.Pdf.ContentGeneration.Interop.OPENTYPE_FEATURE_RECORD : ValueType {
    private OPENTYPE_TAG tagFeature;
    private int lParameter;
    public OPENTYPE_FEATURE_RECORD(OPENTYPE_TAG tagFeature, bool value);
    private OPENTYPE_FEATURE_RECORD(OPENTYPE_TAG tagFeature, int lParameter);
}
public class DevExpress.Pdf.ContentGeneration.Interop.OPENTYPE_TAG : ValueType {
    public static OPENTYPE_TAG Kerning;
    public static OPENTYPE_TAG RequiredLigatures;
    public static OPENTYPE_TAG StandardLigatures;
    public static OPENTYPE_TAG ContextualLigatures;
    public static OPENTYPE_TAG HistoricalLigatures;
    public static OPENTYPE_TAG DiscretionaryLigatures;
    private UInt32 value;
    public OPENTYPE_TAG(int v);
    private static OPENTYPE_TAG();
    private static OPENTYPE_TAG MakeOpenTypeTag(char a, char b, char c, char d);
}
public class DevExpress.Pdf.ContentGeneration.Interop.OpenTypeFeatureInfo : object {
    [CompilerGeneratedAttribute]
private static TextRangeProperties <KerningOnProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private static TextRangeProperties <KerningOffProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <RangeChars>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <RangeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RangesCount>k__BackingField;
    private static TextRangeProperties KerningOnProperties { get; }
    private static TextRangeProperties KerningOffProperties { get; }
    public Int32[] RangeChars { get; }
    public IntPtr RangeProperties { get; private set; }
    public int RangesCount { get; }
    private static OpenTypeFeatureInfo();
    private OpenTypeFeatureInfo(Int32[] rangeChars, IntPtr rangeProperties, int rangesCount);
    [CompilerGeneratedAttribute]
private static TextRangeProperties get_KerningOnProperties();
    [CompilerGeneratedAttribute]
private static TextRangeProperties get_KerningOffProperties();
    [SecuritySafeCriticalAttribute]
public static OpenTypeFeatureInfo CreateKerningInfo(int textLength, bool useKerning);
    [CompilerGeneratedAttribute]
public Int32[] get_RangeChars();
    [CompilerGeneratedAttribute]
public IntPtr get_RangeProperties();
    [CompilerGeneratedAttribute]
private void set_RangeProperties(IntPtr value);
    [CompilerGeneratedAttribute]
public int get_RangesCount();
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_ANALYSIS : ValueType {
    private static short logicalOrderMask;
    private static short scriptIdMask;
    private short value;
    private SCRIPT_STATE s;
    public SCRIPT_STATE State { get; }
    public int ScriptId { get; public set; }
    public bool LogicalOrder { get; public set; }
    public SCRIPT_STATE get_State();
    public int get_ScriptId();
    public void set_ScriptId(int value);
    public bool get_LogicalOrder();
    public void set_LogicalOrder(bool value);
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_CHARPROP : ValueType {
    private short value;
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_CONTROL : ValueType {
    private int value;
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_GLYPHPROP : ValueType {
    private SCRIPT_VISATTR sva;
    private short reserved;
    public bool IsClusterStart { get; }
    public bool get_IsClusterStart();
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_ITEM : ValueType {
    private int iCharPos;
    private SCRIPT_ANALYSIS a;
    public int ICharPos { get; }
    public SCRIPT_ANALYSIS Analysis { get; }
    public int get_ICharPos();
    public SCRIPT_ANALYSIS get_Analysis();
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_LOGATTR : ValueType {
    private byte value;
    public bool SoftBreak { get; }
    public bool WhiteSpace { get; }
    public bool get_SoftBreak();
    public bool get_WhiteSpace();
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_PROPERTIES : ValueType {
    private int value;
    private int value2;
    public bool Control { get; }
    public bool get_Control();
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_STATE : ValueType {
    private static short bidiLevelMask;
    private short value;
    public byte BidiLevel { get; public set; }
    public byte get_BidiLevel();
    public void set_BidiLevel(byte value);
}
public class DevExpress.Pdf.ContentGeneration.Interop.SCRIPT_VISATTR : ValueType {
    private short value;
    public bool IsClusterStart { get; }
    public bool get_IsClusterStart();
}
public class DevExpress.Pdf.ContentGeneration.Interop.TEXTRANGE_PROPERTIES : ValueType {
    private IntPtr potfRecords;
    private int cotfRecords;
    public TEXTRANGE_PROPERTIES(IntPtr potfRecords, int cotfRecords);
}
public static class DevExpress.Pdf.ContentGeneration.Interop.UniscribeInterop : object {
    private static int E_OUTOFMEMORY;
    private static int USP_E_SCRIPT_NOT_IN_FONT;
    private static int SCRIPT_UNDEFINED;
    private static int maxBufferResizesCount;
    private static int ScriptItemizeOpenType(string pwcInChars, int cInChars, int cMaxItems, SCRIPT_CONTROL& psControl, SCRIPT_STATE& psState, SCRIPT_ITEM[] pItems, OPENTYPE_TAG[] pScriptTags, Int32& pcItems);
    private static int ScriptShapeOpenType(IntPtr hdc, IntPtr& psc, SCRIPT_ANALYSIS& psa, OPENTYPE_TAG tagScript, OPENTYPE_TAG tagLangSys, Int32[] rcRangeChars, IntPtr rpRangeProperties, int cRanges, IntPtr pwcInChars, int cChars, int cMaxGlyphs, Int16[] pwLogClust, SCRIPT_CHARPROP[] pCharProps, Int16[] pwOutGlyphs, SCRIPT_GLYPHPROP[] pOutGlyphProps, Int32& pcGlyphs);
    private static int ScriptPlaceOpenType(IntPtr hdc, IntPtr& psc, SCRIPT_ANALYSIS& psa, OPENTYPE_TAG tagScript, OPENTYPE_TAG tagLangSys, Int32[] rcRangeChars, IntPtr rpRangeProperties, int cRanges, IntPtr pwcInChars, Int16[] pwLogClust, SCRIPT_CHARPROP[] pCharProps, int cChars, Int16[] pwGlyphs, SCRIPT_GLYPHPROP[] pGlyphProps, int cGlyphs, Int32[] piAdvance, GOFFSET[] pGoffset, ABC& pABC);
    private static int ScriptBreak(string pwcInChars, int cInChars, SCRIPT_ANALYSIS& psa, SCRIPT_LOGATTR[] psla);
    private static int ScriptFreeCache(IntPtr& psc);
    private static int ScriptGetProperties(IntPtr& scriptPropertiesData, Int32& piNumScripts);
    [SecuritySafeCriticalAttribute]
public static SCRIPT_PROPERTIES[] ScriptGetProperties();
    [SecuritySafeCriticalAttribute]
public static IList`1<SCRIPT_ITEM> ScriptItemize(string text, SCRIPT_CONTROL& psControl, SCRIPT_STATE& psState, OPENTYPE_TAG[]& scriptTags);
    [SecuritySafeCriticalAttribute]
public static void ScriptShape(IntPtr hdc, IntPtr& cache, OPENTYPE_TAG tagScript, OPENTYPE_TAG tagLangSys, OpenTypeFeatureInfo featuresInfo, StringView text, SCRIPT_ANALYSIS& psa, Int16[]& clusters, SCRIPT_CHARPROP[]& charProps, Int16[]& glyphs, SCRIPT_GLYPHPROP[]& glyphAttributes, Int32& actualGlyphCount);
    [SecuritySafeCriticalAttribute]
public static void ScriptPlace(IntPtr hdc, IntPtr& cache, OPENTYPE_TAG tagScript, OPENTYPE_TAG tagLangSys, OpenTypeFeatureInfo featuresInfo, StringView text, Int16[] clusters, SCRIPT_CHARPROP[] charProps, Int16[] glyphs, int glyphsCount, SCRIPT_GLYPHPROP[] glyphAttributes, SCRIPT_ANALYSIS& psa, Int32[]& advances, GOFFSET[]& offsets);
    [SecuritySafeCriticalAttribute]
public static void ScriptFreeCache(IntPtr cache);
    [SecuritySafeCriticalAttribute]
public static SCRIPT_LOGATTR[] ScriptBreak(string text, SCRIPT_ANALYSIS& psa);
}
public interface DevExpress.Pdf.ContentGeneration.IPdfExportFontEngine {
    public abstract virtual IPdfExportPlatformFontProvider CreateProvider(DXFont font);
    public abstract virtual PdfFontParameters MatchFont(PdfFont font);
    public abstract virtual PdfFontParameters MatchFont(string fontFamily, PdfFontStyle fontStyle);
}
public interface DevExpress.Pdf.ContentGeneration.IPdfExportPlatformFont {
    public DXFontDescriptor Descriptor { get; }
    public DXFontSimulations Simulations { get; }
    public PdfFontMetrics Metrics { get; }
    public PdfFontFile FontFile { get; }
    public abstract virtual DXFontDescriptor get_Descriptor();
    public abstract virtual DXFontSimulations get_Simulations();
    public abstract virtual PdfFontMetrics get_Metrics();
    public abstract virtual PdfFontFile get_FontFile();
    public abstract virtual Font CreateGDIPlusFont(float fontSize);
    public abstract virtual IDXShaper CreateCTLShaper();
    public abstract virtual bool ShouldEmbed(PdfCompatibilityOptions compatibilityOptions);
}
public interface DevExpress.Pdf.ContentGeneration.IPdfExportPlatformFontProvider {
    public object Key { get; }
    public abstract virtual object get_Key();
    public abstract virtual IPdfExportPlatformFont GetPlatformFont();
}
public interface DevExpress.Pdf.ContentGeneration.IPdfImageCacheProvider {
    public IPdfXObjectResourceCache ImageCache { get; }
    public abstract virtual IPdfXObjectResourceCache get_ImageCache();
}
public interface DevExpress.Pdf.ContentGeneration.IPdfTextShaper {
    public abstract virtual IList`1<DXCluster> ShapeText(string text, bool directionRightToLeft, float fontSizeInPoints, bool useKerning);
    public abstract virtual bool IsFallbackNeeded(IDXTextAnalysisRun run);
    public abstract virtual bool IsFallbackNeeded(char c);
    public abstract virtual IEnumerable`1<DXCluster> MakeRunClusters(IDXTextAnalysisRun run, float fontSizeInPoints, bool useKerning);
    public abstract virtual Nullable`1<DXCluster> MakeCharCluster(IDXTextAnalysisRun run, int index, float fontSizeInPoints, bool useKerning);
}
public interface DevExpress.Pdf.ContentGeneration.IPdfXObjectProvider {
    public abstract virtual PdfXObject GetXObject();
}
public interface DevExpress.Pdf.ContentGeneration.IPdfXObjectResourceCache {
    public abstract virtual IPdfXObjectProvider AddXObject(Stream imageStream);
    public abstract virtual IPdfXObjectProvider AddXObject(Byte[] data);
}
public class DevExpress.Pdf.ContentGeneration.Pdf24BppBitmapToXObjectConverter : PdfBitmapToXObjectConverter {
    protected Byte[] SMask { get; }
    protected int ComponentsCount { get; }
    public Pdf24BppBitmapToXObjectConverter(DXBitmap bitmap);
    protected virtual Byte[] get_SMask();
    protected virtual int get_ComponentsCount();
    protected virtual void ReadNextImageRow(Byte[] rowBuffer, PdfImageStreamFlateEncoder dataEncoder);
}
public class DevExpress.Pdf.ContentGeneration.Pdf32BppBitmapPremultipliedAlphaToXObjectConverter : Pdf32BppBitmapToXObjectConverter {
    protected bool PremultipliedAlpha { get; }
    public Pdf32BppBitmapPremultipliedAlphaToXObjectConverter(DXBitmap bitmap, bool extractSMask);
    protected virtual bool get_PremultipliedAlpha();
}
public class DevExpress.Pdf.ContentGeneration.Pdf32BppBitmapToXObjectConverter : PdfBitmapToXObjectConverter {
    private Byte[] sMask;
    private bool hasMask;
    private PdfImageStreamFlateEncoder smaskEncoder;
    protected Byte[] SMask { get; }
    protected int ComponentsCount { get; }
    protected bool PremultipliedAlpha { get; }
    public Pdf32BppBitmapToXObjectConverter(DXBitmap bitmap, bool extractSMask);
    protected virtual Byte[] get_SMask();
    protected virtual int get_ComponentsCount();
    protected virtual bool get_PremultipliedAlpha();
    protected virtual void ReadNextImageRow(Byte[] rowBuffer, PdfImageStreamFlateEncoder dataEncoder);
}
public class DevExpress.Pdf.ContentGeneration.PdfAcroFormCombTextBoxField : PdfAcroFormTextBoxField {
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    public PdfAcroFormCombTextBoxField(string name, int pageNumber, PdfRectangle rectangle, int maxLength);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
}
public class DevExpress.Pdf.ContentGeneration.PdfAcroFormImageField : PdfAcroFormCommonVisualField {
    private PdfXObject normalIcon;
    private PdfIconFitBuilder iconFitBuilder;
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    public PdfAcroFormImageField(PdfXObject normalIcon, PdfIconFitBuilder iconFitBuilder, PdfRectangle rectangle, string name, int pageNumber);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
    protected virtual PdfInteractiveFormField CreateCommonVisualField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormFieldProperties properties);
    protected virtual PdfAdditionalActions CreateAdditionalActions(PdfDocument document);
    protected virtual PdfWidgetAnnotationBuilder CreateWidgetBuilder(PdfRectangle rect);
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationButtLineCapPainter : PdfAnnotationPolyLineCapPainter {
    public PdfAnnotationButtLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual PdfPoint[] CreatePathData(double penWidth);
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationCircleLineCapPainter : PdfAnnotationLineCapPainter {
    private PdfRectangle rectangle;
    private bool fill;
    private double borderWidth;
    public PdfAnnotationCircleLineCapPainter(PdfColor interiorColor, double borderWidth);
    public virtual PdfRectangle CalcBBox(PdfPoint startPoint, PdfPoint endPoint);
    protected virtual PdfTransformationMatrix CalcTransformationMatrix(PdfPoint startPoint, PdfPoint endPoint);
    protected virtual void PerformDraw(PdfCommandConstructor constructor, PdfTransformationMatrix lineTransform);
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationClosedArrowLineCapPainter : PdfAnnotationOpenArrowLineCapPainter {
    protected bool CloseAndFillPath { get; }
    public PdfAnnotationClosedArrowLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual bool get_CloseAndFillPath();
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationDiamondLineCapPainter : PdfAnnotationPolyLineCapPainter {
    protected bool CloseAndFillPath { get; }
    public PdfAnnotationDiamondLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual bool get_CloseAndFillPath();
    protected virtual PdfTransformationMatrix CalcTransformationMatrix(PdfPoint startPoint, PdfPoint endPoint);
    protected virtual PdfPoint[] CreatePathData(double penWidth);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfAnnotationLineCapPainter : object {
    public static PdfAnnotationLineCapPainter Create(PdfAnnotationLineEndingStyle style, PdfColor interiorColor, double borderWidth);
    protected virtual bool ShouldPaint(PdfPoint startPoint, PdfPoint endPoint);
    protected abstract virtual void PerformDraw(PdfCommandConstructor constructor, PdfTransformationMatrix lineTransform);
    protected virtual PdfTransformationMatrix CalcTransformationMatrix(PdfPoint startPoint, PdfPoint endPoint);
    public void DrawLineCap(PdfCommandConstructor constructor, PdfPoint startPoint, PdfPoint endPoint);
    public abstract virtual PdfRectangle CalcBBox(PdfPoint startPoint, PdfPoint endPoint);
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationOpenArrowLineCapPainter : PdfAnnotationPolyLineCapPainter {
    public PdfAnnotationOpenArrowLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual PdfTransformationMatrix CalcTransformationMatrix(PdfPoint startPoint, PdfPoint endPoint);
    protected virtual PdfPoint[] CreatePathData(double penWidth);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfAnnotationPolyLineCapPainter : PdfAnnotationLineCapPainter {
    private bool fill;
    [CompilerGeneratedAttribute]
private PdfPoint[] <LineCapData>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PenWidth>k__BackingField;
    protected PdfPoint[] LineCapData { get; }
    protected double PenWidth { get; }
    protected bool CloseAndFillPath { get; }
    protected PdfAnnotationPolyLineCapPainter(PdfColor interiorColor, double borderWidth);
    [CompilerGeneratedAttribute]
protected PdfPoint[] get_LineCapData();
    [CompilerGeneratedAttribute]
protected double get_PenWidth();
    protected virtual bool get_CloseAndFillPath();
    protected virtual bool ShouldPaint(PdfPoint startPoint, PdfPoint endPoint);
    protected virtual void PerformDraw(PdfCommandConstructor constructor, PdfTransformationMatrix lineTransform);
    public virtual PdfRectangle CalcBBox(PdfPoint startPoint, PdfPoint endPoint);
    protected abstract virtual PdfPoint[] CreatePathData(double penWidth);
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationReverseClosedArrowLineCapPainter : PdfAnnotationReverseOpenArrowLineCapPainter {
    protected bool CloseAndFillPath { get; }
    public PdfAnnotationReverseClosedArrowLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual bool get_CloseAndFillPath();
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationReverseOpenArrowLineCapPainter : PdfAnnotationPolyLineCapPainter {
    public PdfAnnotationReverseOpenArrowLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual PdfPoint[] CreatePathData(double penWidth);
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationSlashLineCapPainter : PdfAnnotationPolyLineCapPainter {
    public PdfAnnotationSlashLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual PdfPoint[] CreatePathData(double penWidth);
}
public class DevExpress.Pdf.ContentGeneration.PdfAnnotationSquareLineCapPainter : PdfAnnotationPolyLineCapPainter {
    protected bool CloseAndFillPath { get; }
    public PdfAnnotationSquareLineCapPainter(PdfColor interiorColor, double borderWidth);
    protected virtual bool get_CloseAndFillPath();
    protected virtual PdfTransformationMatrix CalcTransformationMatrix(PdfPoint startPoint, PdfPoint endPoint);
    protected virtual PdfPoint[] CreatePathData(double penWidth);
}
public class DevExpress.Pdf.ContentGeneration.PdfAppendPageContentCommand : PdfGraphicsCommand {
    private PdfPage source;
    public PdfAppendPageContentCommand(PdfPage source);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfArtifactInfo : object {
    [CompilerGeneratedAttribute]
private static PdfArtifactInfo <LayoutArtifact>k__BackingField;
    [CompilerGeneratedAttribute]
private static PdfArtifactInfo <PaginationArtifact>k__BackingField;
    [CompilerGeneratedAttribute]
private static PdfArtifactInfo <PageArtifact>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Dictionary>k__BackingField;
    public static PdfArtifactInfo LayoutArtifact { get; }
    public static PdfArtifactInfo PaginationArtifact { get; }
    public static PdfArtifactInfo PageArtifact { get; }
    public IDictionary`2<string, object> Dictionary { get; }
    private PdfArtifactInfo(PdfName type, PdfRectangle boundingBox);
    private static PdfArtifactInfo();
    [CompilerGeneratedAttribute]
public static PdfArtifactInfo get_LayoutArtifact();
    [CompilerGeneratedAttribute]
public static PdfArtifactInfo get_PaginationArtifact();
    [CompilerGeneratedAttribute]
public static PdfArtifactInfo get_PageArtifact();
    public static PdfArtifactInfo CreateBackgroundArtifact(PdfRectangle boundingBox);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Dictionary();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfAutoFontSizeCalculator : object {
    private float minFontSize;
    private float maxFontSize;
    private float fontSizeStep;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private SizeF <LayoutSize>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfExportFont <Font>k__BackingField;
    protected string Text { get; }
    protected SizeF LayoutSize { get; }
    protected PdfExportFont Font { get; }
    protected PdfAutoFontSizeCalculator(float minFontSize, float maxFontSize, float fontSizeStep, string text, SizeF layoutSize, PdfExportFont font);
    [CompilerGeneratedAttribute]
protected string get_Text();
    [CompilerGeneratedAttribute]
protected SizeF get_LayoutSize();
    [CompilerGeneratedAttribute]
protected PdfExportFont get_Font();
    protected float CalcFontSize();
    private float GetAutoFontSize(int v);
    protected abstract virtual bool IsTextFit(float fontSize);
}
public class DevExpress.Pdf.ContentGeneration.PdfBackwardDiagonalHatchPatternConstructor : PdfForwardDiagonalHatchPatternConstructor {
    public PdfBackwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfBBoxStructureElementAttribute : PdfLogicalStructureElementAttribute {
    [CompilerGeneratedAttribute]
private PdfRectangle <Bbox>k__BackingField;
    public PdfRectangle Bbox { get; }
    public PdfBBoxStructureElementAttribute(PdfRectangle bbox);
    [CompilerGeneratedAttribute]
public PdfRectangle get_Bbox();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfBitmapToXObjectConverter : PdfDeviceImageToXObjectConverter {
    protected static byte PngUpPrediction;
    private PdfFilter flateFilter;
    private Byte[] imageData;
    protected PdfFilter Filter { get; }
    protected Byte[] ImageData { get; }
    protected Byte[] SMask { get; }
    public int ImageDataLength { get; }
    protected int ComponentsCount { get; }
    protected PdfBitmapToXObjectConverter(DXBitmap bitmap);
    protected virtual PdfFilter get_Filter();
    protected virtual Byte[] get_ImageData();
    protected abstract virtual Byte[] get_SMask();
    public virtual int get_ImageDataLength();
    protected abstract virtual int get_ComponentsCount();
    protected abstract virtual void ReadNextImageRow(Byte[] rowBuffer, PdfImageStreamFlateEncoder dataEncoder);
    private void ProcessBitmap(DXBitmap bitmap);
    protected virtual PdfImage GetSoftMask();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfBrushContainer : object {
    protected static PdfTransformationMatrix GetActualTransformationMatrix(PdfGraphicsCommandConstructor constructor, DXTilingBrush brush);
    public static PdfTransformationMatrix GetTransformationMatrix(DXTilingBrush brush);
    public abstract virtual PdfTransparentColor GetColor(PdfGraphicsCommandConstructor commandConstructor);
    public virtual bool FillShape(PdfGraphicsCommandConstructor commandConstructor, PdfShapeFillingStrategy shape);
}
public class DevExpress.Pdf.ContentGeneration.PdfBrushExportVisitor : object {
    private PdfGraphicsCommandConstructor constructor;
    public PdfBrushExportVisitor(PdfGraphicsCommandConstructor constructor);
    public sealed virtual void Visit(DXSolidBrush brush);
    public sealed virtual void Visit(DXHatchBrush brush);
    public sealed virtual void Visit(DXTextureBrush brush);
    public sealed virtual void Visit(DXLinearGradientBrush brush);
    public sealed virtual void Visit(DXPathGradientBrush brush);
}
public class DevExpress.Pdf.ContentGeneration.PdfBrushFlippedTilingPatternConstructor : PdfBrushTilingPatternConstructor {
    public PdfBrushFlippedTilingPatternConstructor(PdfRectangle tileBounds, PdfShading shading, PdfShading maskShading, PdfTransformationMatrix transform, PdfTransformationMatrix shadingTransformationMatrix);
    protected virtual void FillTilingPatternCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfBrushHorizonatallyFlippedTilingPatternConstructor : PdfBrushTilingPatternConstructor {
    public PdfBrushHorizonatallyFlippedTilingPatternConstructor(PdfRectangle tileBounds, PdfShading shading, PdfShading maskShading, PdfTransformationMatrix transform, PdfTransformationMatrix shadingTransformationMatrix);
    protected virtual void FillTilingPatternCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfBrushNonFlippedTilingPatternConstructor : PdfBrushTilingPatternConstructor {
    public PdfBrushNonFlippedTilingPatternConstructor(PdfRectangle tileBounds, PdfShading shading, PdfShading maskShading, PdfTransformationMatrix transform, PdfTransformationMatrix shadingTransformationMatrix);
    protected virtual void FillTilingPatternCommands(PdfCommandConstructor constructor);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfBrushPatternConstructor : object {
    private PdfTransformationMatrix transform;
    private PdfShading shading;
    private PdfTransformationMatrix shadingTransformationMatrix;
    protected PdfTransformationMatrix Transform { get; }
    protected PdfShading Shading { get; }
    protected PdfTransformationMatrix ShadingTransformationMatrix { get; }
    protected PdfBrushPatternConstructor(PdfShading shading, PdfTransformationMatrix transform, PdfTransformationMatrix shadingTransformationMatrix);
    public static PdfPattern CreatePattern(DXWrapMode wrapMode, PdfTransformationMatrix transform, PdfRectangle tileBounds, PdfShading shading, PdfShading maskShading, IPdfDocumentCatalog documentCatalog, PdfTransformationMatrix shadingTransformationMatrix);
    protected PdfTransformationMatrix get_Transform();
    protected PdfShading get_Shading();
    protected PdfTransformationMatrix get_ShadingTransformationMatrix();
    protected abstract virtual PdfPattern CreatePattern(IPdfDocumentCatalog documentCatalog);
}
public class DevExpress.Pdf.ContentGeneration.PdfBrushShadingPatternConstructor : PdfBrushPatternConstructor {
    public PdfBrushShadingPatternConstructor(PdfShading shading, PdfTransformationMatrix transform, PdfTransformationMatrix shadingTransformationMatrix);
    protected virtual PdfPattern CreatePattern(IPdfDocumentCatalog documentCatalog);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfBrushTilingPatternConstructor : PdfBrushPatternConstructor {
    private PdfRectangle tileBounds;
    private PdfRectangle patternBounds;
    private PdfShading maskShading;
    protected PdfRectangle TileBounds { get; }
    protected PdfRectangle PatternBounds { get; }
    protected PdfBrushTilingPatternConstructor(PdfRectangle tileBounds, PdfShading shading, PdfShading maskShading, PdfTransformationMatrix transform, PdfRectangle patternBounds, PdfTransformationMatrix shadingTransformationMatrix);
    protected PdfRectangle get_TileBounds();
    protected PdfRectangle get_PatternBounds();
    protected void AppendTile(PdfCommandConstructor constructor, PdfRectangle tileBounds, PdfTransformationMatrix shadingTransform);
    protected virtual PdfPattern CreatePattern(IPdfDocumentCatalog documentCatalog);
    protected abstract virtual void FillTilingPatternCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfBrushVerticallyFlippedTilingPatternConstructor : PdfBrushTilingPatternConstructor {
    public PdfBrushVerticallyFlippedTilingPatternConstructor(PdfRectangle tileBounds, PdfShading shading, PdfShading maskShading, PdfTransformationMatrix transform, PdfTransformationMatrix shadingTransformationMatrix);
    protected virtual void FillTilingPatternCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfCheckerBoardHatchPatternConstructor : PdfHatchPatternConstructor {
    public PdfCheckerBoardHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfCrossHatchPatternConstructor : PdfHatchPatternConstructor {
    public PdfCrossHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfCrossPlatformFontExportFontEngine : object {
    private CrossPlatformFontProvider fontProvider;
    private DXFontEngine fontEngine;
    public PdfCrossPlatformFontExportFontEngine(CrossPlatformFontProvider fontProvider);
    public sealed virtual IPdfExportPlatformFontProvider CreateProvider(DXFont dxFont);
    public sealed virtual PdfFontParameters MatchFont(PdfFont font);
    public sealed virtual PdfFontParameters MatchFont(string fontFamily, PdfFontStyle fontStyle);
    public sealed virtual void Dispose();
    public sealed virtual DXFontFace GetFallbackFont(StringView str, DXFontDescriptor descriptor);
}
public class DevExpress.Pdf.ContentGeneration.PdfCubicBezierCurve : object {
    [CompilerGeneratedAttribute]
private PdfPoint <P0>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <P1>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <P2>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <P3>k__BackingField;
    public PdfPoint P0 { get; }
    public PdfPoint P1 { get; }
    public PdfPoint P2 { get; }
    public PdfPoint P3 { get; }
    public PdfCubicBezierCurve(PdfPoint p0, PdfPoint p1, PdfPoint p2, PdfPoint p3);
    [CompilerGeneratedAttribute]
public PdfPoint get_P0();
    [CompilerGeneratedAttribute]
public PdfPoint get_P1();
    [CompilerGeneratedAttribute]
public PdfPoint get_P2();
    [CompilerGeneratedAttribute]
public PdfPoint get_P3();
    public Tuple`2<PdfCubicBezierCurve, PdfCubicBezierCurve> Split(double splitFactor);
    public IList`1<PdfPoint> Flatten(double flatnessTolerance);
    public Tuple`2<PdfPoint, PdfPoint> GetLastFlatSegment();
    public PdfPoint CalculatePoint(double t);
    private bool IsFlat(double flatnessTolerance);
}
public class DevExpress.Pdf.ContentGeneration.PdfDarkDownwardDiagonalHatchPatternConstructor : PdfForwardDiagonalHatchPatternConstructor {
    protected double LineStep { get; }
    protected double LineWidth { get; }
    public PdfDarkDownwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
    protected virtual double get_LineWidth();
}
public class DevExpress.Pdf.ContentGeneration.PdfDarkHorizontalHatchPatternConstructor : PdfHorizontalHatchPatternConstructor {
    protected double LineStep { get; }
    protected double LineWidth { get; }
    public PdfDarkHorizontalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
    protected virtual double get_LineWidth();
}
public class DevExpress.Pdf.ContentGeneration.PdfDarkUpwardDiagonalHatchPatternConstructor : PdfBackwardDiagonalHatchPatternConstructor {
    protected double LineStep { get; }
    protected double LineWidth { get; }
    public PdfDarkUpwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
    protected virtual double get_LineWidth();
}
public class DevExpress.Pdf.ContentGeneration.PdfDarkVerticalHatchPatternConstructor : PdfVerticalHatchPatternConstructor {
    protected double LineStep { get; }
    protected double LineWidth { get; }
    public PdfDarkVerticalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
    protected virtual double get_LineWidth();
}
public class DevExpress.Pdf.ContentGeneration.PdfDashedDownwardDiagonalHatchPatternConstructor : PdfDashedHorizontalHatchPatternConstructor {
    public PdfDashedDownwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfDashedHorizontalHatchPatternConstructor : PdfHatchPatternConstructor {
    protected PdfLineCapStyle LineCapStyle { get; }
    public PdfDashedHorizontalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual PdfLineCapStyle get_LineCapStyle();
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfDashedUpwardDiagonalHatchPatternConstructor : PdfDashedDownwardDiagonalHatchPatternConstructor {
    public PdfDashedUpwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfDashedVerticalHatchPatternConstructor : PdfDashedHorizontalHatchPatternConstructor {
    public PdfDashedVerticalHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfDeferredForm : PdfForm {
    public PdfDeferredForm(IPdfDocumentCatalog catalog, PdfRectangle bbox);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isCloning);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfDeviceImageToXObjectConverter : PdfImageToXObjectConverter {
    private static PdfRange[] maskDecode;
    private PdfDeviceColorSpaceKind colorSpaceKind;
    private IList`1<PdfRange> decode;
    protected static PdfRange[] RgbDecode { get; }
    protected Byte[] ImageData { get; }
    protected PdfFilter Filter { get; }
    protected PdfDeviceImageToXObjectConverter(DXBitmap image);
    protected PdfDeviceImageToXObjectConverter(int width, int height, PdfDeviceColorSpaceKind colorSpaceKind, IList`1<PdfRange> decode);
    private static PdfDeviceImageToXObjectConverter();
    protected static PdfRange[] get_RgbDecode();
    protected static PdfImage CreateSoftMaskImage(int width, int height, Byte[] softMaskData);
    protected abstract virtual Byte[] get_ImageData();
    protected abstract virtual PdfFilter get_Filter();
    public virtual PdfImage GetXObject();
    protected abstract virtual PdfImage GetSoftMask();
}
public class DevExpress.Pdf.ContentGeneration.PdfDiagonalBricksHatchPatternConstructor : PdfHorizontalBricksHatchPatternConstructor {
    public PdfDiagonalBricksHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfDiagonalCrossHatchPatternConstructor : PdfCrossHatchPatternConstructor {
    public PdfDiagonalCrossHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfDivotHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    public PdfDivotHatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfDivotHatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfDottedDiamondHatchPatternConstructor : PdfOutlinedDiamondHatchPatternConstructor {
    protected PdfLineCapStyle LineCapStyle { get; }
    public PdfDottedDiamondHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual PdfLineCapStyle get_LineCapStyle();
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfDottedGridHatchPatternConstructor : PdfCrossHatchPatternConstructor {
    protected PdfLineCapStyle LineCapStyle { get; }
    public PdfDottedGridHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual PdfLineCapStyle get_LineCapStyle();
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfDualColorGradientTriangleListBuilder : PdfTriangleListBuilder {
    private PdfColor centerColor;
    private DXBlend blend;
    protected IList`1<PdfRange> ComponentsRange { get; }
    public PdfDualColorGradientTriangleListBuilder(DXPathGradientBrush brush, PdfPoint centerPoint);
    private static PdfPoint GetPoint(double position, PdfPoint startPoint, PdfPoint endPoint);
    protected virtual IList`1<PdfRange> get_ComponentsRange();
    protected virtual IEnumerable`1<PdfTriangle> CreateTriangles(PdfPoint startPoint, PdfPoint endPoint, Color startColor, Color endColor);
    protected virtual PdfObjectList`1<PdfCustomFunction> CreateFunction();
}
public class DevExpress.Pdf.ContentGeneration.PdfEllipseFillingStrategy : PdfShapeFillingStrategy {
    private PdfPoint[] points;
    private PdfRectangle transformedBBox;
    public PdfPoint[] ShapePoints { get; }
    public PdfEllipseFillingStrategy(RectangleF bBox, PdfRectangle transformedBBox);
    public virtual PdfPoint[] get_ShapePoints();
    public virtual void Clip(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfExportDXPlatformFontProvider : object {
    private DXFontInternal font;
    private IDXFontFallback fontFallback;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    public object Key { get; }
    public PdfExportDXPlatformFontProvider(DXFontInternal font, IDXFontFallback fontFallback);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Key();
    private static PdfFontFile GetFontFile(DXFontInternal font);
    public sealed virtual IPdfExportPlatformFont GetPlatformFont();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfExportFont : object {
    private Lazy`1<PdfFont> appearanceFont;
    private DXFontDescriptor descriptor;
    [CompilerGeneratedAttribute]
private PdfExportModelFont <ModelFont>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfExportFontManager <Manager>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFontMetrics <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private DXFontSimulations <Simulations>k__BackingField;
    protected PdfExportModelFont ModelFont { get; }
    public PdfExportFontManager Manager { get; }
    public PdfFont Font { get; }
    public bool UseTwoByteCodePoints { get; }
    public PdfFontMetrics Metrics { get; }
    public DXFontSimulations Simulations { get; }
    public PdfFont AppearanceFont { get; }
    protected string PostScriptFontName { get; }
    public string FontFamily { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public DXFontDescriptor Descriptor { get; }
    protected PdfExportFont(PdfExportFontManager manager, IPdfExportPlatformFont platformFont, PdfExportModelFont modelFont);
    [CompilerGeneratedAttribute]
protected PdfExportModelFont get_ModelFont();
    [CompilerGeneratedAttribute]
public PdfExportFontManager get_Manager();
    public PdfFont get_Font();
    public bool get_UseTwoByteCodePoints();
    [CompilerGeneratedAttribute]
public PdfFontMetrics get_Metrics();
    [CompilerGeneratedAttribute]
public DXFontSimulations get_Simulations();
    public PdfFont get_AppearanceFont();
    protected virtual string get_PostScriptFontName();
    public string get_FontFamily();
    public bool get_Bold();
    public bool get_Italic();
    public DXFontDescriptor get_Descriptor();
    private PdfFont CreateAppearanceFont();
    protected abstract virtual double GetCharacterWidth(char ch);
    protected abstract virtual IPdfTextShaper CreateShaper(IDXLineBreakAnalyzer lineBreakAnalyzer);
    public IPdfTextShaper GetShaper(IDXLineBreakAnalyzer lineBreakAnalyzer);
    public float GetGlyphWidth(int glyphCode);
    public void AddGlyph(int codePoint, PdfExportFontGlyphInfo glyphInfo);
    public void UpdateFont();
    public virtual void Dispose();
}
public class DevExpress.Pdf.ContentGeneration.PdfExportFontDescriptorBuilder : object {
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ascent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Descent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BBox>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumGlyphs>k__BackingField;
    [CompilerGeneratedAttribute]
private double <XHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StemV>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StemH>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFontFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CapHeight>k__BackingField;
    public string FontFamily { get; }
    public double Ascent { get; }
    public double Descent { get; }
    public bool Bold { get; }
    public PdfRectangle BBox { get; }
    public int NumGlyphs { get; }
    public double XHeight { get; }
    public double StemV { get; }
    public double StemH { get; }
    public PdfFontFlags Flags { get; }
    public double ItalicAngle { get; }
    public double CapHeight { get; }
    public PdfExportFontDescriptorBuilder(IPdfExportPlatformFont platformFont);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FontFamily();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Ascent();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Descent();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bold();
    [CompilerGeneratedAttribute]
public sealed virtual PdfRectangle get_BBox();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumGlyphs();
    [CompilerGeneratedAttribute]
public sealed virtual double get_XHeight();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StemV();
    [CompilerGeneratedAttribute]
public sealed virtual double get_StemH();
    [CompilerGeneratedAttribute]
public sealed virtual PdfFontFlags get_Flags();
    [CompilerGeneratedAttribute]
public sealed virtual double get_ItalicAngle();
    [CompilerGeneratedAttribute]
public sealed virtual double get_CapHeight();
}
public class DevExpress.Pdf.ContentGeneration.PdfExportFontInfo : object {
    [CompilerGeneratedAttribute]
private PdfExportFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private DXFontDecorations <Decorations>k__BackingField;
    public PdfExportFont Font { get; }
    public float FontSize { get; }
    public DXFontDecorations Decorations { get; }
    public double FontLineSize { get; }
    public bool ShouldSetStrokingColor { get; }
    public PdfExportFontInfo(PdfExportFont font, float fontSize, DXFontDecorations decorations);
    public PdfExportFontInfo(PdfExportFont font, float fontSize);
    [CompilerGeneratedAttribute]
public PdfExportFont get_Font();
    [CompilerGeneratedAttribute]
public float get_FontSize();
    [CompilerGeneratedAttribute]
public DXFontDecorations get_Decorations();
    public double get_FontLineSize();
    public bool get_ShouldSetStrokingColor();
    public void RegisterSubset(string text);
}
public class DevExpress.Pdf.ContentGeneration.PdfExportFontManager : object {
    private static string timesNewRomanFontName;
    private static float symbolFontSize;
    private IPdfDocumentCatalog documentCatalog;
    private IPdfRenderFontStorage renderFontContext;
    private IDictionary`2<object, PdfExportFont> fontStorage;
    private Lazy`1<GDIPlusMeasuringContext> gdiMeasuringContext;
    private IPdfExportFontEngine exportFontEngine;
    internal Guid ObjectsId { get; }
    public PdfExportFontManager(IPdfDocumentCatalog documentCatalog, IPdfRenderFontStorage renderFontContext, IFontProvider fontProvider);
    internal Guid get_ObjectsId();
    public PdfExportFont GetExportFont(IPdfExportPlatformFontProvider provider);
    private bool EmbedFont(IPdfExportPlatformFont platformFont);
    private PdfExportFont CreateExportFont(IPdfExportPlatformFont platformFont);
    public sealed virtual void Dispose();
    public PdfExportFont GetFallbackFont(StringView str, DXFontDescriptor descriptor);
    public sealed virtual PdfExportFont GetExportFont(string fontFamily, PdfFontStyle style);
    public sealed virtual PdfExportFont GetExportFont(PdfSetTextFontCommand setTextFontCommand);
    private PdfExportFont GetExportFont(PdfFontParameters fontParameters);
    public PdfExportFontInfo GetFontInfo(DXFont dxFont);
    public void UpdateFonts();
}
public class DevExpress.Pdf.ContentGeneration.PdfExportFullTrustFont : PdfExportFont {
    private static char space;
    private static char nonBreakingSpace;
    private Dictionary`2<int, int> mappedGlyphsCache;
    private PdfFontFile fontFile;
    private float unitsPerEm;
    private List`1<PdfFontCmapFormatEntry> cmapTables;
    private Lazy`1<IDXShaper> ctlShaper;
    protected string PostScriptFontName { get; }
    public PdfExportFullTrustFont(PdfExportFontManager manager, IPdfExportPlatformFont platformFont, PdfExportModelFont modelFont);
    public static float GetGlyphWidth(PdfFontFile fontFile, int glyphIndex);
    private static int GetCMapEntryPriority(PdfFontCmapFormatEntry entry, bool isSymbolic);
    protected virtual string get_PostScriptFontName();
    protected virtual IPdfTextShaper CreateShaper(IDXLineBreakAnalyzer lineBreakAnalyzer);
    protected virtual double GetCharacterWidth(char ch);
    private int GetGlyphIndex(char character);
    public virtual void Dispose();
}
public class DevExpress.Pdf.ContentGeneration.PdfExportGdiPlatformFont : object {
    private static int maxGDIFamilyNameLength;
    private Font font;
    private IDXFontFallback fontFallback;
    [CompilerGeneratedAttribute]
private PdfFontMetrics <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFontFile <FontFile>k__BackingField;
    [CompilerGeneratedAttribute]
private DXFontDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private DXFontSimulations <Simulations>k__BackingField;
    public PdfFontMetrics Metrics { get; }
    public PdfFontFile FontFile { get; }
    public DXFontDescriptor Descriptor { get; }
    public DXFontSimulations Simulations { get; }
    private PdfExportGdiPlatformFont(Font font, PdfFontFile fontFile, IDXFontFallback fontFallback);
    private static string GetGdiPlusFamilyName(Font font);
    private static DXFontDescriptor CreateDescriptor(Font font);
    [SecuritySafeCriticalAttribute]
private static PdfFontFile CreateFontFileGdi(Font font);
    public static IPdfExportPlatformFont Create(Font font, IDXFontFallback fontFallback);
    [CompilerGeneratedAttribute]
public sealed virtual PdfFontMetrics get_Metrics();
    [CompilerGeneratedAttribute]
public sealed virtual PdfFontFile get_FontFile();
    [CompilerGeneratedAttribute]
public sealed virtual DXFontDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public sealed virtual DXFontSimulations get_Simulations();
    private static bool IsNotItalic(PdfFontFile fontFile);
    private static bool IsNotBold(PdfFontFile fontFile);
    public sealed virtual Font CreateGDIPlusFont(float fontSize);
    public sealed virtual IDXShaper CreateCTLShaper();
    public sealed virtual bool ShouldEmbed(PdfCompatibilityOptions compatibilityOptions);
}
public class DevExpress.Pdf.ContentGeneration.PdfExportGdiPlatformFontProvider : object {
    private static HashSet`1<FontFamily> systemFontFamilies;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    private Font font;
    private IDXFontFallback fontFallback;
    public object Key { get; }
    private static PdfExportGdiPlatformFontProvider();
    public PdfExportGdiPlatformFontProvider(Font font, IDXFontFallback fontFallback);
    public PdfExportGdiPlatformFontProvider(string fontFamilyName, PdfFontStyle style, float sizeInPoints, IDXFontFallback fontFallback);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Key();
    public sealed virtual IPdfExportPlatformFont GetPlatformFont();
}
public class DevExpress.Pdf.ContentGeneration.PdfExportPartialTrustFont : PdfExportFont {
    private static float shapingFontSize;
    private GDIPlusMeasuringContext gdiContext;
    private Font shapingFont;
    private PdfExportModelFont modelFont;
    public PdfExportPartialTrustFont(PdfExportFontManager manager, IPdfExportPlatformFont platformFont, GDIPlusMeasuringContext gdiContext, PdfExportModelFont modelFont);
    protected virtual double GetCharacterWidth(char ch);
    protected virtual IPdfTextShaper CreateShaper(IDXLineBreakAnalyzer lineBreakAnalyzer);
    public virtual void Dispose();
}
public class DevExpress.Pdf.ContentGeneration.PdfFontParameters : ValueType {
    private string name;
    private int weight;
    private bool isItalic;
    public string Name { get; }
    public int Weight { get; }
    public bool IsItalic { get; }
    public PdfFontParameters(string name, int weight, bool isItalic);
    public string get_Name();
    public int get_Weight();
    public bool get_IsItalic();
}
public class DevExpress.Pdf.ContentGeneration.PdfFormSignatureAppearance : PdfSignatureAppearanceBase {
    private PdfForm form;
    public PdfForm Form { get; }
    public PdfFormSignatureAppearance(PdfForm form, PdfRectangle signatureBounds, int pageIndex);
    public PdfForm get_Form();
    protected virtual PdfSignatureAppearanceBuilderBase CreateBuilder(PdfForm appearanceForm);
}
public class DevExpress.Pdf.ContentGeneration.PdfFormSignatureAppearanceBuilder : PdfSignatureAppearanceBuilderBase {
    private PdfForm form;
    public PdfFormSignatureAppearanceBuilder(PdfForm form);
    protected virtual void DrawFormContent(PdfFormCommandConstructor formConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfForwardDiagonalHatchPatternConstructor : PdfHatchPatternConstructor {
    public PdfForwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual void FillCommands(PdfCommandConstructor commandConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfGDIExportFontEngine : object {
    private SystemDrawingFontCache fontCache;
    private DXFontEngine fontEngine;
    public PdfGDIExportFontEngine(IFontProvider fontProvider);
    public sealed virtual IPdfExportPlatformFontProvider CreateProvider(DXFont font);
    public sealed virtual void Dispose();
    public sealed virtual PdfFontParameters MatchFont(PdfFont font);
    public sealed virtual PdfFontParameters MatchFont(string fontFamily, PdfFontStyle fontStyle);
    public sealed virtual DXFontFace GetFallbackFont(StringView str, DXFontDescriptor descriptor);
}
public static class DevExpress.Pdf.ContentGeneration.PdfGDIPlusGraphicsConverter : object {
    public static PointF[] ConvertPoints(Point[] source);
    public static RectangleF ConvertRectangle(EmfRectL rectangle);
    public static IList`1<PdfGraphicsPath> TransformPath(IReadOnlyList`1<T> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes, Func`2<T, PdfPoint> transformPoint);
    public static IList`1<PdfGraphicsPath> TransformPath(T[] pathPoints, Byte[] pathTypes, Func`2<T, PdfPoint> transformPoint);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfGraphicsAddLinkCommand : PdfGraphicsCommand {
    private RectangleF linkArea;
    protected PdfGraphicsAddLinkCommand(RectangleF linkArea);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
    protected abstract virtual PdfLinkAnnotation CreateLinkAnnotation(PdfRectangle rect, PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsAddLinkToPageCommand : PdfGraphicsAddLinkCommand {
    private int pageNumber;
    private Nullable`1<float> x;
    private Nullable`1<float> y;
    private Nullable`1<float> zoom;
    public PdfGraphicsAddLinkToPageCommand(RectangleF linkArea, int pageNumber, Nullable`1<float> x, Nullable`1<float> y, Nullable`1<float> zoom);
    protected virtual PdfLinkAnnotation CreateLinkAnnotation(PdfRectangle rect, PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsAddLinkToUriCommand : PdfGraphicsAddLinkCommand {
    private string uri;
    public PdfGraphicsAddLinkToUriCommand(RectangleF linkArea, string uri);
    protected virtual PdfLinkAnnotation CreateLinkAnnotation(PdfRectangle rect, PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfGraphicsCommand : PdfDisposableObject {
    public abstract virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsCommandConstructor : PdfDisposableObject {
    private static float pdfDpi;
    private static string MCIDDictionaryKey;
    private PdfRectangle bBox;
    private IPdfResources resources;
    private PdfGraphicsStateStack graphicsStateStack;
    private PdfCommandConstructor commandConstructor;
    private PdfCompatibilityOptions compatibilityOptions;
    private PdfGraphicsDocument graphicsDocument;
    private IList`1<DXBrush> disposableBrushes;
    private PdfPage page;
    private PdfForm form;
    private PdfTransformationMatrix coordinateTransformationMatrix;
    private PdfTransformationMatrix invertedCoordinateTransformationMatrix;
    private float dpiX;
    private float dpiY;
    private int nextMCID;
    public PdfTransformationMatrix CoordinateTransformationMatrix { get; }
    public PdfTransformationMatrix TransformationMatrix { get; }
    public PdfXObjectResourceCache ImageCache { get; }
    public IPdfResources Resources { get; }
    public PdfRectangle BBox { get; }
    public float DpiX { get; }
    public float DpiY { get; }
    public Byte[] Commands { get; }
    public PdfShadingCache ShadingCache { get; }
    public PdfCommandConstructor CommandConstructor { get; }
    public IPdfDocumentCatalog DocumentCatalog { get; }
    public PdfGraphicsDocument GraphicsDocument { get; }
    private PdfTransformationMatrix InvertedTransformationMatrix { get; }
    private PdfGraphicsCommandConstructor(PdfRectangle bBox, IPdfResources resources, PdfGraphicsDocument graphicsDocument, float dpiX, float dpiY, PdfCommandList commands);
    public PdfGraphicsCommandConstructor(PdfPage page, PdfGraphicsDocument graphicsDocument, float dpiX, float dpiY);
    public PdfGraphicsCommandConstructor(PdfForm form, PdfGraphicsDocument graphicsDocument, float dpiX, float dpiY);
    private static bool ShouldDrawPath(IReadOnlyList`1<PointF> points);
    public PdfTransformationMatrix get_CoordinateTransformationMatrix();
    public PdfTransformationMatrix get_TransformationMatrix();
    public PdfXObjectResourceCache get_ImageCache();
    public IPdfResources get_Resources();
    public PdfRectangle get_BBox();
    public float get_DpiX();
    public float get_DpiY();
    public Byte[] get_Commands();
    public PdfShadingCache get_ShadingCache();
    public PdfCommandConstructor get_CommandConstructor();
    public IPdfDocumentCatalog get_DocumentCatalog();
    public PdfGraphicsDocument get_GraphicsDocument();
    private PdfTransformationMatrix get_InvertedTransformationMatrix();
    private int CalculateMaxMCID(PdfCommandList commands);
    public void SetDpi(float dpiX, float dpiY);
    public void BeginMarkedContent(PdfArtifactInfo artifactInfo);
    public void BeginMarkedContent(PdfLogicalStructureElement owner);
    public void EndMarkedContent();
    public void SaveGraphicsState();
    public void RestoreGraphicsState();
    public void SetMiterLimit(double miterLimit);
    public void DrawPath(PointF[] pathPoints, Byte[] pathTypes);
    public void DrawPath(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes);
    public void FillPath(PointF[] pathPoints, Byte[] pathTypes, bool nonZero);
    public void FillPath(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes, bool nonZero);
    public void DrawLine(float x1, float y1, float x2, float y2);
    public void DrawPolygon(PointF[] points);
    public void FillPolygon(PointF[] points, bool nonZero);
    public void DrawRectangle(RectangleF rect);
    public void FillRectangle(RectangleF rect);
    public void DrawEllipse(RectangleF rect);
    public void FillEllipse(RectangleF rect);
    public void DrawBezier(PointF start, PointF controlPoint1, PointF controlPoint2, PointF finish);
    public void DrawBeziers(PointF[] points);
    public void DrawXObject(PdfXObjectCachedResource cachedResource, RectangleF bounds);
    public void DrawXObject(PdfXObjectCachedResource cachedResource, RectangleF bounds, PdfTransformationMatrix matrix);
    public void DrawXObject(PdfXObjectCachedResource cachedResource, PointF location);
    public void RotateTransform(float degree);
    public void TranslateTransform(double x, double y);
    public void ScaleTransform(double sx, double sy);
    public void SetUnscaledPen(DXPen pen);
    public void SetUnscaledPen(Color color, double width);
    public void SetPen(DXPen pen);
    public void SetBrush(DXBrush brush);
    public void SetBrush(PdfBrushContainer container);
    public void SetFillColor(Color color);
    public void DrawLines(PointF[] points);
    public void IntersectClip(RectangleF rect);
    public void IntersectClipWithoutWorldTransform(PointF[] points, Byte[] types, bool isWindingFillMode);
    public void IntersectClip(PointF[] points, Byte[] types, bool isWindingFillMode);
    public void IntersectClipWithoutWorldTransform(IReadOnlyList`1<PointF> points, IReadOnlyList`1<DXPathPointType> types, bool isWindingFillMode);
    public void IntersectClip(IReadOnlyList`1<PointF> points, IReadOnlyList`1<DXPathPointType> types, bool isWindingFillMode);
    public void IntersectClipWithoutWorldTransform(PointF[] points);
    public void IntersectClipWithoutWorldTransform(RectangleF rect);
    public void UpdateTransformationMatrix(PdfTransformationMatrix matrix);
    public PdfRectangle TransformRectangle(RectangleF rect);
    public void DrawFormattedLines(String[] lines, PdfExportFontInfo fontInfo, RectangleF layout, DXStringFormat format, Nullable`1<RectangleF> clipRectangle);
    public void DrawString(string text, PdfExportFontInfo fontInfo, RectangleF layout, DXStringFormat format, DXLineFormatterOptions options, IDXLineBreakAnalyzer lineBreakAnalyzer);
    public void DrawString(string text, PdfExportFontInfo fontInfo, RectangleF layout, DXStringFormat format, DXLineFormatterOptions options);
    public void DrawString(string text, PdfExportFontInfo fontInfo, PointF location, DXStringFormat format, PdfGraphicsTextOrigin textOrigin, DXLineFormatterOptions options, IDXLineBreakAnalyzer lineBreakAnalyzer);
    public void DrawString(string text, PdfExportFontInfo fontInfo, PointF location, DXStringFormat format, PdfGraphicsTextOrigin textOrigin, DXLineFormatterOptions options);
    public void DrawString(string text, PdfExportFontInfo fontInfo, PointF location, PdfGraphicsTextOrigin textOrigin, DXLineFormatterOptions options);
    public void DrawGlyphRun(IPdfGlyphRun glyphRun, PdfExportFontInfo fontInfo, PointF location, Nullable`1<RectangleF> clipRectangle);
    public void SetNonStrokingAlpha(double alpha);
    public void SetColorForStrokingOperations(PdfTransparentColor color);
    public void SetColorForNonStrokingOperations(PdfTransparentColor color);
    public PdfDeferredForm DrawDeferredForm(RectangleF rectangle);
    public PdfFormSignatureAppearance CreateSignatureAppearance(RectangleF rectangle, int pageIndex);
    public void Clear();
    internal double TransformX(double value);
    internal double TransformY(double value);
    internal PdfTransformationMatrix TransformMatrix(PdfTransformationMatrix matrix);
    protected PdfPoint TransformPoint(PointF point);
    private PdfPoint TransformPoint(double x, double y);
    protected void EnsureBrush();
    private void EnsureLineWidth(bool isClosedShape);
    private void SetLineWidth(double lineWidth);
    private void SetPen(DXPen pen, double lineWidth);
    public void AppendPageContent(PdfPage contentPage);
    public void AppendPageContent(PdfPage contentPage, PdfTransformationMatrix transform);
    private void SetGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    protected IList`1<PdfGraphicsPath> TransformPath(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes);
    protected IReadOnlyList`1<PointF> TransformPathPoints(IReadOnlyList`1<PointF> pathPoints);
    private PdfPoint[] TransformPoints(PointF[] points);
    private bool CompareComponents(Double[] first, Double[] second);
    private void RecalculateMatrix();
    private bool FillShape(PdfShapeFillingStrategy strategy);
    protected virtual void Dispose(bool disposing);
}
public static class DevExpress.Pdf.ContentGeneration.PdfGraphicsConverter : object {
    public static PdfColor ConvertColor(Color color);
    public static Double[] ConvertColorToColorComponents(Color color);
    public static PdfRectangle ConvertRectangle(RectangleF rect);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDocument : PdfDisposableObject {
    private PdfExportFontManager fontCache;
    private PdfXObjectResourceCache imageCache;
    private IPdfDocumentCatalog documentCatalog;
    private PdfStrokingAlphaCache strokingAlphaCache;
    private PdfNonStrokingAlphaCache nonStrokingAlphaCache;
    private PdfShadingCache shadingCache;
    private PdfHatchPatternCache hatchPatternCache;
    [CompilerGeneratedAttribute]
private int <MetafileMinimalRasterizationResolution>k__BackingField;
    public PdfExportFontManager FontCache { get; }
    public PdfXObjectResourceCache ImageCache { get; }
    public IPdfDocumentCatalog DocumentCatalog { get; }
    public PdfStrokingAlphaCache StrokingAlphaCache { get; }
    public PdfNonStrokingAlphaCache NonStrokingAlphaCache { get; }
    public PdfShadingCache ShadingCache { get; }
    public PdfHatchPatternCache HatchPatternCache { get; }
    public int MetafileMinimalRasterizationResolution { get; public set; }
    private IPdfXObjectResourceCache DevExpress.Pdf.ContentGeneration.IPdfImageCacheProvider.ImageCache { get; }
    public PdfGraphicsDocument(IPdfDocumentCatalog documentCatalog);
    public PdfGraphicsDocument(IPdfDocumentCatalog documentCatalog, IPdfRenderFontStorage renderFontStorage);
    public PdfGraphicsDocument(IPdfDocumentCatalog documentCatalog, IPdfRenderFontStorage renderFontStorage, IFontProvider fontProvider);
    public PdfExportFontManager get_FontCache();
    public PdfXObjectResourceCache get_ImageCache();
    public IPdfDocumentCatalog get_DocumentCatalog();
    public PdfStrokingAlphaCache get_StrokingAlphaCache();
    public PdfNonStrokingAlphaCache get_NonStrokingAlphaCache();
    public PdfShadingCache get_ShadingCache();
    public PdfHatchPatternCache get_HatchPatternCache();
    [CompilerGeneratedAttribute]
public int get_MetafileMinimalRasterizationResolution();
    [CompilerGeneratedAttribute]
public void set_MetafileMinimalRasterizationResolution(int value);
    private sealed virtual override IPdfXObjectResourceCache DevExpress.Pdf.ContentGeneration.IPdfImageCacheProvider.get_ImageCache();
    public bool CheckCollectionId(Guid id);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawBezierCommand : PdfGraphicsStrokingCommand {
    private PointF pt1;
    private PointF pt2;
    private PointF pt3;
    private PointF pt4;
    public PdfGraphicsDrawBezierCommand(DXPen pen, PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawBeziersCommand : PdfGraphicsStrokingCommand {
    private PointF[] points;
    public PdfGraphicsDrawBeziersCommand(DXPen pen, PointF[] points);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawEllipseCommand : PdfGraphicsStrokingCommand {
    private RectangleF rect;
    public PdfGraphicsDrawEllipseCommand(DXPen pen, RectangleF rect);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawFormattedStringCommand : PdfGraphicsDrawStringCommand {
    private RectangleF layout;
    private DXStringFormat format;
    private DXLineFormatterOptions options;
    public PdfGraphicsDrawFormattedStringCommand(string text, PdfExportFontInfo fontInfo, RectangleF layout, DXStringFormat format, DXSolidBrush foreBrush, bool useKerning);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawImageWithBoundsCommand : PdfGraphicsCommand {
    private PdfXObjectCachedResource imageResource;
    private RectangleF bounds;
    public PdfGraphicsDrawImageWithBoundsCommand(PdfXObjectCachedResource imageResource, RectangleF bounds);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawImageWithPointCommand : PdfGraphicsCommand {
    private PdfXObjectCachedResource imageResource;
    private PointF location;
    public PdfGraphicsDrawImageWithPointCommand(PdfXObjectCachedResource imageResource, PointF location);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawLineCommand : PdfGraphicsStrokingCommand {
    private float x1;
    private float x2;
    private float y1;
    private float y2;
    public PdfGraphicsDrawLineCommand(DXPen pen, float x1, float y1, float x2, float y2);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawLinesCommand : PdfGraphicsStrokingCommand {
    private PointF[] points;
    public PdfGraphicsDrawLinesCommand(DXPen pen, PointF[] points);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawPathCommand : PdfGraphicsStrokingCommand {
    private IReadOnlyList`1<PointF> pathPoints;
    private IReadOnlyList`1<DXPathPointType> pathTypes;
    public PdfGraphicsDrawPathCommand(DXPen pen, DXGraphicsPath path);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawPolygonCommand : PdfGraphicsStrokingCommand {
    private PointF[] points;
    public PdfGraphicsDrawPolygonCommand(DXPen pen, PointF[] points);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawRectangleCommand : PdfGraphicsStrokingCommand {
    private RectangleF bounds;
    public PdfGraphicsDrawRectangleCommand(DXPen pen, RectangleF bounds);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawStringCommand : PdfGraphicsCommand {
    private string text;
    private PdfExportFontInfo fontInfo;
    private DXSolidBrush foreBrush;
    protected string Text { get; }
    protected PdfExportFontInfo FontInfo { get; }
    protected PdfGraphicsDrawStringCommand(string text, PdfExportFontInfo fontInfo, DXSolidBrush foreBrush);
    protected string get_Text();
    protected PdfExportFontInfo get_FontInfo();
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsDrawStringWithLocationCommand : PdfGraphicsDrawStringCommand {
    private PointF location;
    private PdfGraphicsTextOrigin textOrigin;
    private DXLineFormatterOptions options;
    private DXStringFormat format;
    public PdfGraphicsDrawStringWithLocationCommand(string text, PdfExportFontInfo fontInfo, PointF location, DXStringFormat format, PdfGraphicsTextOrigin textOrigin, DXSolidBrush foreBrush, bool useKerning);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsExportState : object {
    private double lineWidth;
    private Double[] strokingColorComponents;
    private double strokingAlpha;
    private Double[] nonStrokingColorComponents;
    private double nonStrokingAlpha;
    private Nullable`1<DXDashStyle> dashStyle;
    private Nullable`1<DXDashCap> dashCap;
    private Nullable`1<LineCap> lineCap;
    private Nullable`1<DXLineJoin> lineJoin;
    private double miterLimit;
    private PdfBrushContainer currentBrush;
    private bool isInsetPen;
    private double actualLineWidth;
    [CompilerGeneratedAttribute]
private PdfCapsPainter <CapsPainter>k__BackingField;
    public double LineWidth { get; public set; }
    public Double[] StrokingColorComponents { get; public set; }
    public double StrokingAlpha { get; public set; }
    public Double[] NonStrokingColorComponents { get; public set; }
    public double NonStrokingAlpha { get; public set; }
    public Nullable`1<DXDashStyle> DashStyle { get; public set; }
    public Nullable`1<DXDashCap> DashCap { get; public set; }
    public Nullable`1<LineCap> LineCap { get; public set; }
    public Nullable`1<DXLineJoin> LineJoin { get; public set; }
    public double MiterLimit { get; public set; }
    public PdfCapsPainter CapsPainter { get; public set; }
    public PdfBrushContainer CurrentBrush { get; public set; }
    public bool IsInsetPen { get; public set; }
    public double ActualLineWidth { get; public set; }
    public PdfGraphicsExportState(PdfGraphicsExportState s);
    public double get_LineWidth();
    public void set_LineWidth(double value);
    public Double[] get_StrokingColorComponents();
    public void set_StrokingColorComponents(Double[] value);
    public double get_StrokingAlpha();
    public void set_StrokingAlpha(double value);
    public Double[] get_NonStrokingColorComponents();
    public void set_NonStrokingColorComponents(Double[] value);
    public double get_NonStrokingAlpha();
    public void set_NonStrokingAlpha(double value);
    public Nullable`1<DXDashStyle> get_DashStyle();
    public void set_DashStyle(Nullable`1<DXDashStyle> value);
    public Nullable`1<DXDashCap> get_DashCap();
    public void set_DashCap(Nullable`1<DXDashCap> value);
    public Nullable`1<LineCap> get_LineCap();
    public void set_LineCap(Nullable`1<LineCap> value);
    public Nullable`1<DXLineJoin> get_LineJoin();
    public void set_LineJoin(Nullable`1<DXLineJoin> value);
    public double get_MiterLimit();
    public void set_MiterLimit(double value);
    [CompilerGeneratedAttribute]
public PdfCapsPainter get_CapsPainter();
    [CompilerGeneratedAttribute]
public void set_CapsPainter(PdfCapsPainter value);
    public PdfBrushContainer get_CurrentBrush();
    public void set_CurrentBrush(PdfBrushContainer value);
    public bool get_IsInsetPen();
    public void set_IsInsetPen(bool value);
    public double get_ActualLineWidth();
    public void set_ActualLineWidth(double value);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsFillEllipseCommand : PdfGraphicsNonStrokingCommand {
    private RectangleF rect;
    public PdfGraphicsFillEllipseCommand(DXBrush brush, RectangleF rect);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsFillPathCommand : PdfGraphicsNonStrokingCommand {
    private IReadOnlyList`1<PointF> pathPoints;
    private IReadOnlyList`1<DXPathPointType> pathTypes;
    private DXFillMode fillMode;
    public PdfGraphicsFillPathCommand(DXBrush brush, DXGraphicsPath path);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsFillPolygonCommand : PdfGraphicsNonStrokingCommand {
    private PointF[] points;
    public PdfGraphicsFillPolygonCommand(DXBrush brush, PointF[] points);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsFillRectangleCommand : PdfGraphicsNonStrokingCommand {
    private RectangleF bounds;
    public PdfGraphicsFillRectangleCommand(DXBrush brush, RectangleF bounds);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsIntersectClipCommand : PdfGraphicsCommand {
    private RectangleF clip;
    public PdfGraphicsIntersectClipCommand(RectangleF clip);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfGraphicsNonStrokingCommand : PdfGraphicsCommand {
    private DXBrush brush;
    protected DXBrush Brush { get; }
    protected PdfGraphicsNonStrokingCommand(DXBrush brush);
    protected DXBrush get_Brush();
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsRestoreGraphicsStateCommand : PdfGraphicsCommand {
    public static PdfGraphicsRestoreGraphicsStateCommand Instance;
    private static PdfGraphicsRestoreGraphicsStateCommand();
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsRotateTransformCommand : PdfGraphicsCommand {
    private float degree;
    public PdfGraphicsRotateTransformCommand(float degree);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsSaveGraphicsStateCommand : PdfGraphicsCommand {
    public static PdfGraphicsSaveGraphicsStateCommand Instance;
    private static PdfGraphicsSaveGraphicsStateCommand();
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsScaleTransformCommand : PdfGraphicsCommand {
    private float sx;
    private float sy;
    public PdfGraphicsScaleTransformCommand(float sx, float sy);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfGraphicsStateParametersCache : object {
    private IDictionary`2<double, PdfGraphicsStateParameters> cache;
    public PdfGraphicsStateParameters GetParameters(double key);
    protected abstract virtual PdfGraphicsStateParameters CreateParameters(double value);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsStateStack : object {
    private Stack`1<PdfGraphicsExportState> stack;
    private PdfGraphicsExportState current;
    public PdfGraphicsExportState Current { get; public set; }
    public PdfGraphicsExportState get_Current();
    public void set_Current(PdfGraphicsExportState value);
    public void Push();
    public void Pop();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfGraphicsStrokingCommand : PdfGraphicsCommand {
    private DXPen pen;
    protected PdfGraphicsStrokingCommand(DXPen pen);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfGraphicsTranslateTransformCommand : PdfGraphicsCommand {
    private float x;
    private float y;
    public PdfGraphicsTranslateTransformCommand(float x, float y);
    public virtual void Execute(PdfGraphicsCommandConstructor constructor, PdfPage page);
}
public class DevExpress.Pdf.ContentGeneration.PdfHatchBrushContainer : PdfBrushContainer {
    private DXHatchBrush brush;
    public PdfHatchBrushContainer(DXHatchBrush brush);
    public virtual PdfTransparentColor GetColor(PdfGraphicsCommandConstructor commandConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfHatchPatternCache : object {
    private IDictionary`2<Tuple`4<int, int, DXHatchStyle, PdfRectangle>, PdfPattern> cache;
    private IPdfDocumentCatalog documentCatalog;
    public PdfHatchPatternCache(IPdfDocumentCatalog documentCatalog);
    public PdfPattern GetPattern(DXHatchBrush brush, PdfRectangle bBox);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfHatchPatternConstructor : object {
    private static double DefaultLineStep;
    private static double DefaultLineWidth;
    private Color foreColor;
    private Color backColor;
    private double lineWidth;
    private double lineStep;
    private PdfTransformationMatrix transform;
    protected double LineWidth { get; }
    protected double LineStep { get; }
    protected PdfLineCapStyle LineCapStyle { get; }
    protected PdfHatchPatternConstructor(DXHatchBrush hatchBrush);
    public static PdfHatchPatternConstructor Create(DXHatchBrush hatchBrush);
    protected virtual double get_LineWidth();
    protected virtual double get_LineStep();
    protected virtual PdfLineCapStyle get_LineCapStyle();
    protected void RotateTransform(float degree);
    protected void MultipleTransform(PdfTransformationMatrix transform);
    public PdfPattern CreatePattern(PdfRectangle bBox, IPdfDocumentCatalog documentCatalog);
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfHatchPatternRect : ValueType {
    private int x;
    private int y;
    private int width;
    private int height;
    public int X { get; }
    public int Y { get; }
    public int Right { get; }
    public int Top { get; }
    public PdfHatchPatternRect(int x, int y, int width, int height);
    public PdfHatchPatternRect(int x, int y);
    public int get_X();
    public int get_Y();
    public int get_Right();
    public int get_Top();
}
public class DevExpress.Pdf.ContentGeneration.PdfHorizontalBricksHatchPatternConstructor : PdfHatchPatternConstructor {
    public PdfHorizontalBricksHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfHorizontalHatchPatternConstructor : PdfHatchPatternConstructor {
    public PdfHorizontalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfImageConverterBitmapDataReader : PdfImageConverterImageDataReader {
    private IDXBitmapData bitmapData;
    private int length;
    private int position;
    [SecuritySafeCriticalAttribute]
internal PdfImageConverterBitmapDataReader(DXBitmap bitmap);
    [SecuritySafeCriticalAttribute]
public virtual int ReadNextRow(Byte[] buffer, int count);
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfImageConverterImageDataReader : PdfDisposableObject {
    public static PdfImageConverterImageDataReader Create(DXBitmap bitmap, int componentsCount);
    public abstract virtual int ReadNextRow(Byte[] buffer, int count);
}
public class DevExpress.Pdf.ContentGeneration.PdfImageConverterStreamReader : PdfImageConverterImageDataReader {
    private static int bitmapDataOffset;
    private MemoryStream stream;
    private int y;
    private int stride;
    internal PdfImageConverterStreamReader(DXBitmap bitmap, int componentsCount);
    public virtual int ReadNextRow(Byte[] buffer, int count);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.ContentGeneration.PdfImageDataWrapper : object {
    private MemoryStream imageStream;
    private Byte[] ImageBytes { get; }
    public PdfImageDataWrapper(Byte[] data);
    public PdfImageDataWrapper(Stream imageStream);
    public PdfImageDataWrapper(string filePath);
    private Byte[] get_ImageBytes();
    private void DrawXObject(PdfCommandConstructor constructor, PdfXObjectCachedResource resource, PdfRectangle contentRectangle);
    public void Draw(PdfCommandConstructor constructor, PdfGraphicsDocument graphicsDocument, PdfRectangle contentRectangle);
}
public class DevExpress.Pdf.ContentGeneration.PdfImageSignatureAppearance : PdfSignatureAppearanceBase {
    private PdfOrientedRectangle actualBounds;
    private PdfImageDataWrapper image;
    public PdfImageSignatureAppearance(Stream imageStream, PdfOrientedRectangle signatureBounds, int pageIndex);
    public PdfImageSignatureAppearance(Byte[] imageStream, PdfOrientedRectangle signatureBounds, int pageIndex);
    protected virtual PdfSignatureAppearanceBuilderBase CreateBuilder(PdfForm appearanceForm);
}
public class DevExpress.Pdf.ContentGeneration.PdfImageSignatureAppearanceBuilder : PdfSignatureAppearanceBuilderBase {
    private PdfImageDataWrapper image;
    private PdfTransformationMatrix contentMatrix;
    private PdfRectangle contentRectangle;
    public PdfImageSignatureAppearanceBuilder(PdfImageDataWrapper image, PdfTransformationMatrix contentMatrix, PdfRectangle contentRectangle);
    protected virtual void DrawFormContent(PdfFormCommandConstructor formConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfImageStreamFlateEncoder : object {
    private static byte pngUpPrediction;
    private PdfFlateEncoder encoder;
    private Adler32 adler;
    private Byte[] rowBuffer;
    private Byte[] lastImageRow;
    private int offset;
    public PdfImageStreamFlateEncoder(int imageRowLength);
    public void Add(byte value);
    public void EndRow();
    public Byte[] GetEncodedData();
    public sealed virtual void Dispose();
}
public class DevExpress.Pdf.ContentGeneration.PdfImageToDCTImageToXObjectConverter : PdfDeviceImageToXObjectConverter {
    private Byte[] imageData;
    private PdfImage sMask;
    protected PdfFilter Filter { get; }
    protected Byte[] ImageData { get; }
    public int ImageDataLength { get; }
    public PdfImageToDCTImageToXObjectConverter(Byte[] imageData, int width, int height);
    private PdfImageToDCTImageToXObjectConverter(int width, int height, Byte[] imageData, PdfImage sMask);
    private PdfImageToDCTImageToXObjectConverter(int width, int height, Byte[] imageData, PdfImage sMask, PdfDeviceColorSpaceKind colorSpaceKind, IList`1<PdfRange> decode);
    private static PdfImageToDCTImageToXObjectConverter CreateFromYCCKJpeg(Byte[] jpegImageData, int width, int height, PdfImage sMask);
    public static PdfImageToDCTImageToXObjectConverter CreateFromYCCKJpeg(Byte[] jpegImageData, int width, int height);
    public static PdfImageToDCTImageToXObjectConverter ConvertToJpeg(DXBitmap image, long jpegImageQuality, bool extractSMask);
    protected virtual PdfFilter get_Filter();
    protected virtual Byte[] get_ImageData();
    public virtual int get_ImageDataLength();
    protected virtual PdfImage GetSoftMask();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfImageToXObjectConverter : object {
    private static int jpegHighestQuality;
    private int width;
    private int height;
    public int Width { get; }
    public int Height { get; }
    public int ImageDataLength { get; }
    protected PdfImageToXObjectConverter(int width, int height);
    protected PdfImageToXObjectConverter(DXBitmap image);
    private static Byte[] GetImageData(Stream imageStream);
    private static PdfImageToXObjectConverter CreateConverter(DXBitmap bmp, bool convertToJpeg, long jpegQuality, bool extractSMask);
    protected static Byte[] SaveBitmapToByteArray(Action`1<Stream> save);
    protected static Byte[] GetJpegImageData(DXBitmap image);
    public static PdfImageToXObjectConverter Create(PdfRecognizedImageInfo imageInfo, Stream imageStream, bool convertToJpeg, long jpegQuality, bool extractSMask);
    public static PdfImageToXObjectConverter Create(DXBitmap bmp, bool convertToJpeg, long jpegQuality, bool extractSMask);
    public int get_Width();
    public int get_Height();
    public abstract virtual int get_ImageDataLength();
    public abstract virtual PdfImage GetXObject();
}
public class DevExpress.Pdf.ContentGeneration.PdfIndexedImageToSoftMaskConverter : PdfImageToXObjectConverter {
    private int bitsPerComponent;
    private Byte[] imageData;
    public int ImageDataLength { get; }
    public PdfIndexedImageToSoftMaskConverter(DXBitmap bmp);
    public virtual int get_ImageDataLength();
    private Byte[] ExtractImageData(DXBitmap bmp);
    public virtual PdfImage GetXObject();
}
public class DevExpress.Pdf.ContentGeneration.PdfIndexedImageToXObjectConverter : PdfImageToXObjectConverter {
    private int bitsPerComponent;
    private Byte[] imageData;
    private Byte[] lookupTable;
    private PdfDeviceColorSpaceKind baseColorSpaceKind;
    private PdfRange[] colorKeyMask;
    private int maxValue;
    public int ImageDataLength { get; }
    public PdfIndexedImageToXObjectConverter(DXBitmap bmp);
    private static PdfRange[] CreateColorKeyMask(int index);
    public virtual int get_ImageDataLength();
    private Byte[] ExtractImageData(DXBitmap bmp);
    public virtual PdfImage GetXObject();
}
public class DevExpress.Pdf.ContentGeneration.PdfLargeConfettiHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    public PdfLargeConfettiHatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfLargeConfettiHatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfLightDownwardDiagonalHatchPatternConstructor : PdfForwardDiagonalHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfLightDownwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfLightHorizontalHatchPatternConstructor : PdfHorizontalHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfLightHorizontalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfLightUpwardDiagonalHatchPatternConstructor : PdfBackwardDiagonalHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfLightUpwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfLightVerticalHatchPatternConstructor : PdfVerticalHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfLightVerticalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfLinearGradientBrushContainer : PdfBrushContainer {
    private static double epsilon;
    private DXLinearGradientBrush brush;
    public PdfLinearGradientBrushContainer(DXLinearGradientBrush brush);
    public virtual PdfTransparentColor GetColor(PdfGraphicsCommandConstructor commandConstructor);
    public virtual bool FillShape(PdfGraphicsCommandConstructor commandConstructor, PdfShapeFillingStrategy shape);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfLinearGradientPatternConstructor : object {
    private DXLinearGradientBrush brush;
    private PdfTransformationMatrix actualBrushTransform;
    protected DXLinearGradientBrush Brush { get; }
    protected PdfTransformationMatrix ActualBrushTransform { get; }
    public byte Alpha { get; }
    protected PdfLinearGradientPatternConstructor(DXLinearGradientBrush brush, PdfTransformationMatrix actualBrushTransform);
    public static PdfLinearGradientPatternConstructor Create(DXLinearGradientBrush brush, PdfRectangle bBox, PdfTransformationMatrix actualBrushTransform);
    protected DXLinearGradientBrush get_Brush();
    protected PdfTransformationMatrix get_ActualBrushTransform();
    public abstract virtual byte get_Alpha();
    public virtual PdfPattern CreatePattern(PdfGraphicsCommandConstructor commandConstructor);
    protected abstract virtual PdfLinearGradientShadingBuilder CreateBuilder();
    protected abstract virtual PdfLinearGradientShadingBuilder CreateMaskBuilder();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfLinearGradientShadingBuilder : object {
    protected static PdfRange[] FunctionsRange;
    protected static PdfRange[] FunctionDomain;
    private Single[] positions;
    protected Single[] Positions { get; }
    protected PdfLinearGradientShadingBuilder(Single[] positions);
    private static PdfLinearGradientShadingBuilder();
    protected Single[] get_Positions();
    public PdfAxialShading CreateShading(IPdfDocumentCatalog documentCatalog, PdfRectangle gradientRect);
    protected abstract virtual PdfCustomFunction CreateSampledFunction();
}
public class DevExpress.Pdf.ContentGeneration.PdfLineFormatterFont : object {
    private PdfExportFont font;
    private IDXLineBreakAnalyzer lineBreakAnalyzer;
    [CompilerGeneratedAttribute]
private float <Size>k__BackingField;
    public double Ascent { get; }
    public double Descent { get; }
    public double LineSpacing { get; }
    public float Size { get; }
    public PdfLineFormatterFont(PdfExportFont font, float size, IDXLineBreakAnalyzer lineBreakAnalyzer);
    public PdfLineFormatterFont(PdfExportFontInfo fontInfo, IDXLineBreakAnalyzer lineBreakAnalyzer);
    public sealed virtual double get_Ascent();
    public sealed virtual double get_Descent();
    public sealed virtual double get_LineSpacing();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Size();
    public virtual IList`1<DXCluster> ShapeText(string text, bool directionRightToLeft, bool useKerning);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class DevExpress.Pdf.ContentGeneration.PdfLogicalStructureElementExtensions : object {
    private static PdfLogicalStructureElement CreateElement(string tag, PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddPart(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddArticle(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddSection(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddDiv(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddSpan(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddBlockQuote(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddCaption(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTableOfContents(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTableOfContentsItem(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddIndex(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddNonStruct(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddHeading(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddHeading1(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddHeading2(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddHeading3(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddHeading4(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddHeading5(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddHeading6(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddParagraph(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTable(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTableHeader(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTableRow(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTableData(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTableHeaderRowGroup(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddTableBodyRowGroup(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddFigure(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddReference(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddDocument(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddPage(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddLink(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddForm(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddNote(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddList(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddListItem(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddListBody(PdfLogicalStructureEntry parent);
    [ExtensionAttribute]
public static PdfLogicalStructureElement AddCustom(PdfLogicalStructureEntry parent, string tag);
    [ExtensionAttribute]
public static void SetBBox(PdfLogicalStructureElement element, PdfRectangle bbox);
    [ExtensionAttribute]
public static void SetPlacement(PdfLogicalStructureElement element, PdfLayoutLogicalStructureElementAttributePlacement placement);
}
public static class DevExpress.Pdf.ContentGeneration.PdfLuminositySoftMaskBuilder : object {
    public static PdfLuminositySoftMask CreateSoftMask(PdfShading maskShading, PdfRectangle maskBoundingBox, IPdfDocumentCatalog documentCatalog);
}
public class DevExpress.Pdf.ContentGeneration.PdfMulticolorGradientTriangleListBuilder : PdfTriangleListBuilder {
    private static double gradientStartColorValue;
    private static double gradientEndColorValue;
    private Single[] positions;
    private PdfColor[] colors;
    private PointF focusScales;
    private PdfColor centerColor;
    protected IList`1<PdfRange> ComponentsRange { get; }
    public PdfMulticolorGradientTriangleListBuilder(PdfPoint centerPoint, Single[] positions, PdfColor[] colors, PointF focusScales, PdfColor centerColor);
    protected virtual IList`1<PdfRange> get_ComponentsRange();
    protected virtual IEnumerable`1<PdfTriangle> CreateTriangles(PdfPoint startPoint, PdfPoint endPoint, Color startColor, Color endColor);
    protected virtual PdfObjectList`1<PdfCustomFunction> CreateFunction();
}
public class DevExpress.Pdf.ContentGeneration.PdfMultiColorLinearGradientPatternConstructor : PdfLinearGradientPatternConstructor {
    private bool IsTransparencyGradient { get; }
    public byte Alpha { get; }
    public PdfMultiColorLinearGradientPatternConstructor(DXLinearGradientBrush brush, PdfTransformationMatrix actualBrushTransform);
    private bool get_IsTransparencyGradient();
    public virtual byte get_Alpha();
    protected virtual PdfLinearGradientShadingBuilder CreateBuilder();
    protected virtual PdfLinearGradientShadingBuilder CreateMaskBuilder();
}
public class DevExpress.Pdf.ContentGeneration.PdfMultiColorLinearGradientShadingBuilder : PdfLinearGradientShadingBuilder {
    private DXColorBlend colorBlend;
    public PdfMultiColorLinearGradientShadingBuilder(DXColorBlend colorBlend);
    protected virtual PdfCustomFunction CreateSampledFunction();
}
public class DevExpress.Pdf.ContentGeneration.PdfNarrowHorizontalHatchPatternConstructor : PdfHorizontalHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfNarrowHorizontalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfNarrowVerticalHatchPatternConstructor : PdfVerticalHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfNarrowVerticalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfNonStrokingAlphaCache : PdfGraphicsStateParametersCache {
    protected virtual PdfGraphicsStateParameters CreateParameters(double value);
}
public class DevExpress.Pdf.ContentGeneration.PdfOutlinedDiamondHatchPatternConstructor : PdfCrossHatchPatternConstructor {
    public PdfOutlinedDiamondHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfPathFillingStrategy : PdfShapeFillingStrategy {
    private PdfPoint[] points;
    private IList`1<PdfGraphicsPath> transformedPaths;
    private bool nonZero;
    public PdfPoint[] ShapePoints { get; }
    public PdfPathFillingStrategy(IReadOnlyList`1<PointF> points, IList`1<PdfGraphicsPath> transformedPaths, bool nonZero);
    public virtual PdfPoint[] get_ShapePoints();
    public virtual void Clip(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfPathGradientBrushContainer : PdfBrushContainer {
    private DXPathGradientBrush brush;
    public PdfPathGradientBrushContainer(DXPathGradientBrush brush);
    public virtual PdfTransparentColor GetColor(PdfGraphicsCommandConstructor commandConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfPathGradientPatternConstructor : object {
    private DXPathGradientBrush brush;
    private PdfTransformationMatrix actualBrushTransform;
    private static PdfRange[] functionsRange;
    private static PdfRange[] functionDomain;
    public PdfPathGradientPatternConstructor(DXPathGradientBrush brush, PdfRectangle bBox, PdfTransformationMatrix actualBrushTransform);
    private static PdfPathGradientPatternConstructor();
    public PdfPattern CreatePattern(IPdfDocumentCatalog documentCatalog);
    private PdfPattern CreatePattern(PdfRectangle brushBbox, PdfShading shading, IPdfDocumentCatalog catalog);
    private IList`1<PdfPoint> GetPdfPathPoints();
    private PdfRectangle CalculateBrushBbox();
    private PdfRectangle CalculateBrushBbox(IList`1<PdfPoint> pathPoints);
    private PdfPattern TryCreateRadial(IPdfDocumentCatalog documentCatalog);
    private PdfObjectList`1<PdfCustomFunction> CreateRadialBlendFunction(Color centerColor, Color surroundingColor, DXBlend blend);
}
public class DevExpress.Pdf.ContentGeneration.PdfPenExportVisitor : object {
    private PdfGraphicsCommandConstructor constructor;
    private bool shouldSetNonStrokingColor;
    public PdfPenExportVisitor(PdfGraphicsCommandConstructor constructor, bool shouldSetNonStrokingColor);
    public sealed virtual void Visit(DXSolidBrush brush);
    public sealed virtual void Visit(DXHatchBrush brush);
    public sealed virtual void Visit(DXTextureBrush brush);
    public sealed virtual void Visit(DXLinearGradientBrush brush);
    public sealed virtual void Visit(DXPathGradientBrush brush);
    private void SetColor(PdfBrushContainer container);
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent05HatchPatternConstructor : PdfPercentHatchPatternConstructor {
    private static Int32[] elementsCount;
    private static Int32[] offsets;
    public PdfPercent05HatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfPercent05HatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent10HatchPatternConstructor : PdfPercentHatchPatternConstructor {
    private static Int32[] elementsCount;
    private static Int32[] offsets;
    public PdfPercent10HatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfPercent10HatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent20HatchPatternConstructor : PdfPercentHatchPatternConstructor {
    private static Int32[] elementsCount;
    private static Int32[] offsets;
    public PdfPercent20HatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfPercent20HatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent25HatchPatternConstructor : PdfPercentHatchPatternConstructor {
    private static Int32[] elementsCount;
    private static Int32[] offsets;
    public PdfPercent25HatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfPercent25HatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent30HatchPatternConstructor : PdfPercentHatchPatternConstructor {
    private static Int32[] elementsCount;
    private static Int32[] offsets;
    public PdfPercent30HatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfPercent30HatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent40HatchPatternConstructor : PdfPercentHatchPatternConstructor {
    private static Int32[] elementsCount;
    private static Int32[] offsets;
    public PdfPercent40HatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfPercent40HatchPatternConstructor();
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent50HatchPatternConstructor : PdfPercentHatchPatternConstructor {
    private static Int32[] elementsCount;
    private static Int32[] offsets;
    public PdfPercent50HatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfPercent50HatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent60HatchPatternConstructor : PdfPercent30HatchPatternConstructor {
    public PdfPercent60HatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent70HatchPatternConstructor : PdfPercent25HatchPatternConstructor {
    public PdfPercent70HatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent75HatchPatternConstructor : PdfPercent20HatchPatternConstructor {
    public PdfPercent75HatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent80HatchPatternConstructor : PdfPercent10HatchPatternConstructor {
    public PdfPercent80HatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfPercent90HatchPatternConstructor : PdfPercent05HatchPatternConstructor {
    public PdfPercent90HatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfPercentHatchPatternConstructor : PdfHatchPatternConstructor {
    private Int32[] elementsCount;
    private Int32[] offsets;
    protected double RectangleSize { get; }
    public PdfPercentHatchPatternConstructor(DXHatchBrush hatchBrush, Int32[] elementsCount, Int32[] offsets);
    protected double get_RectangleSize();
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfPlacementStructureElementAttribute : PdfLogicalStructureElementAttribute {
    [CompilerGeneratedAttribute]
private PdfLayoutLogicalStructureElementAttributePlacement <Placement>k__BackingField;
    public PdfLayoutLogicalStructureElementAttributePlacement Placement { get; }
    public PdfPlacementStructureElementAttribute(PdfLayoutLogicalStructureElementAttributePlacement placement);
    [CompilerGeneratedAttribute]
public PdfLayoutLogicalStructureElementAttributePlacement get_Placement();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.ContentGeneration.PdfPlaidHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    private static PdfPlaidHatchPatternConstructor();
    public PdfPlaidHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfPolygonFillingStrategy : PdfShapeFillingStrategy {
    private PdfPoint[] points;
    private PdfGraphicsPath path;
    private bool nonZero;
    public PdfPoint[] ShapePoints { get; }
    public PdfPolygonFillingStrategy(PointF[] points, PdfPoint[] transformedPoints, bool nonZero);
    public virtual PdfPoint[] get_ShapePoints();
    public virtual void Clip(PdfCommandConstructor constructor);
}
public enum DevExpress.Pdf.ContentGeneration.PdfRecognizedImageFormat : Enum {
    public int value__;
    public static PdfRecognizedImageFormat Unrecognized;
    public static PdfRecognizedImageFormat Metafile;
    public static PdfRecognizedImageFormat RGBJpeg;
    public static PdfRecognizedImageFormat YCCKJpeg;
    public static PdfRecognizedImageFormat Tiff;
}
public class DevExpress.Pdf.ContentGeneration.PdfRecognizedImageInfo : ValueType {
    private int width;
    private int height;
    private PdfRecognizedImageFormat type;
    public int JpegWidth { get; }
    public int JpegHeight { get; }
    public PdfRecognizedImageFormat Type { get; }
    public PdfRecognizedImageInfo(PdfRecognizedImageFormat type);
    public PdfRecognizedImageInfo(PdfRecognizedImageFormat type, int width, int height);
    public static PdfRecognizedImageInfo DetectImage(Stream data);
    public int get_JpegWidth();
    public int get_JpegHeight();
    public PdfRecognizedImageFormat get_Type();
}
public class DevExpress.Pdf.ContentGeneration.PdfRectangleBasedHatchPatternConstructor : PdfHatchPatternConstructor {
    private IEnumerable`1<PdfHatchPatternRect> rectangles;
    public PdfRectangleBasedHatchPatternConstructor(DXHatchBrush hatchBrush, IEnumerable`1<PdfHatchPatternRect> rectangles);
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfRectangleFillingStrategy : PdfShapeFillingStrategy {
    private PdfRectangle transformedRectangle;
    private PdfPoint[] points;
    public PdfPoint[] ShapePoints { get; }
    public PdfRectangleFillingStrategy(RectangleF rectangle, PdfRectangle transformedRectangle);
    public virtual PdfPoint[] get_ShapePoints();
    public virtual void Clip(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfRectangleStringClipper : PdfStringClipper {
    private double clipTop;
    private double clipBottom;
    public PdfRectangleStringClipper(PdfRectangle clipRectangle);
    public virtual PdfTextLineBounds CalculateActualLineBounds(double firstLineY, double lineSpacing, int lineCount);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfResourceCache`1 : PdfDisposableObject {
    private static int cacheCleanUpInterval;
    private Dictionary`2<PdfResourcesCacheKey, T> cache;
    private int lastCleanUpTime;
    protected T CacheObject(PdfResourcesCacheKey key, Func`1<T> create);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.ContentGeneration.PdfResourcesCacheCompositeKey : PdfResourcesCacheKey {
    private Color color;
    private int resolution;
    public PdfResourcesCacheCompositeKey(object obj, Color color, int resolution);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.ContentGeneration.PdfResourcesCacheKey : object {
    private WeakReference weakReference;
    private int keyHashCode;
    public bool IsAlive { get; }
    public PdfResourcesCacheKey(object key);
    public bool get_IsAlive();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.ContentGeneration.PdfShadingCache : object {
    private static PdfRange defaultRange;
    private IDictionary`2<ulong, PdfAxialShading> cache;
    private static PdfShadingCache();
    public PdfAxialShading GetShading(Color startColor, Color endColor);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfShapeFillingStrategy : object {
    public PdfPoint[] ShapePoints { get; }
    protected static PdfPoint[] GetRectanglePoints(RectangleF rectangle);
    public abstract virtual PdfPoint[] get_ShapePoints();
    public abstract virtual void Clip(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfShingleHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    private static PdfShingleHatchPatternConstructor();
    public PdfShingleHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfSignatureAppearanceBuilder : PdfSignatureAppearanceBuilderBase {
    private PdfSignatureAppearance appearance;
    private PdfRectangle contentRectangle;
    private PdfGraphicsDocument graphicsDocument;
    private PdfTransformationMatrix contentMatrix;
    private PdfSignatureBuilder builder;
    public PdfSignatureAppearanceBuilder(PdfSignatureBuilder builder, PdfSignatureAppearance appearance, PdfTransformationMatrix contentMatrix, PdfRectangle contentRectangle, PdfGraphicsDocument graphicsDocument);
    private void DrawContent(PdfFormCommandConstructor constructor, PdfRectangle textRectangle, PdfRectangle infoRectangle);
    private void DrawImage(PdfImageDataWrapper image, PdfFormCommandConstructor constructor, PdfRectangle contentRectangle);
    private void DrawText(string text, PdfSignatureFontSettings fontSettings, PdfFormCommandConstructor constructor, PdfRectangle contentRectangle);
    private string FormatSignaturerInfo();
    private void DrawString(PdfCommandConstructor constructor, string text, PdfExportFontInfo fontInfo, PdfRectangle textRectangle, DXStringFormat format);
    private void AppendText(StringBuilder builder, Nullable`1<PdfCoreStringId> formatStringID, string value);
    private string GetDate();
    protected virtual void DrawFormContent(PdfFormCommandConstructor formConstructor);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfSignatureAppearanceBuilderBase : object {
    public virtual void CreateAppearance(PdfForm appearanceForm);
    protected abstract virtual void DrawFormContent(PdfFormCommandConstructor formConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfSmallCheckerBoardHatchPatternConstructor : PdfCheckerBoardHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfSmallCheckerBoardHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfSmallConfettiHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    public PdfSmallConfettiHatchPatternConstructor(DXHatchBrush hatchBrush);
    private static PdfSmallConfettiHatchPatternConstructor();
}
public class DevExpress.Pdf.ContentGeneration.PdfSmallGridHatchPatternConstructor : PdfCrossHatchPatternConstructor {
    protected double LineStep { get; }
    public PdfSmallGridHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineStep();
}
public class DevExpress.Pdf.ContentGeneration.PdfSolidBrushContainer : PdfBrushContainer {
    private DXSolidBrush brush;
    public DXSolidBrush Brush { get; }
    public PdfSolidBrushContainer(DXSolidBrush brush);
    public DXSolidBrush get_Brush();
    public virtual PdfTransparentColor GetColor(PdfGraphicsCommandConstructor commandConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfSolidDiamondHatchPatternConstructor : PdfCheckerBoardHatchPatternConstructor {
    public PdfSolidDiamondHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfSphereHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    private static PdfSphereHatchPatternConstructor();
    public PdfSphereHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfStringClipper : object {
    public virtual PdfTextLineBounds CalculateActualLineBounds(double firstLineY, double lineSpacing, int lineCount);
}
public class DevExpress.Pdf.ContentGeneration.PdfStringLine : ValueType {
    private PdfPoint begin;
    private PdfPoint end;
    public PdfPoint Begin { get; }
    public PdfPoint End { get; }
    public PdfStringLine(PdfPoint begin, PdfPoint end);
    public PdfPoint get_Begin();
    public PdfPoint get_End();
}
public class DevExpress.Pdf.ContentGeneration.PdfStringPaintingAtPointStrategy : PdfStringPaintingStrategy {
    private PdfPoint location;
    public PdfStringPaintingAtPointStrategy(PdfPoint location, PdfExportFontInfo fontInfo, DXStringFormat format);
    public virtual double GetHorizontalPosition(DXTextLine line);
    public virtual double GetFirstLineVerticalPosition(int lineCount);
    public virtual void Clip(PdfCommandConstructor commandConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfStringPaintingInsideRectStrategy : PdfStringPaintingStrategy {
    private PdfRectangle layoutRect;
    public PdfStringPaintingInsideRectStrategy(PdfRectangle layoutRect, PdfExportFontInfo fontInfo, DXStringFormat format);
    public virtual double GetHorizontalPosition(DXTextLine line);
    public virtual double GetFirstLineVerticalPosition(int lineCount);
    public virtual void Clip(PdfCommandConstructor commandConstructor);
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfStringPaintingStrategy : object {
    private PdfFontMetrics metrics;
    private double fontSize;
    [CompilerGeneratedAttribute]
private double <LeadingOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TrailingOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private DXStringFormat <Format>k__BackingField;
    public double LeadingOffset { get; }
    public double TrailingOffset { get; }
    public DXStringFormat Format { get; }
    protected PdfStringPaintingStrategy(PdfExportFontInfo fontInfo, DXStringFormat format);
    [CompilerGeneratedAttribute]
public double get_LeadingOffset();
    [CompilerGeneratedAttribute]
public double get_TrailingOffset();
    [CompilerGeneratedAttribute]
public DXStringFormat get_Format();
    public abstract virtual double GetHorizontalPosition(DXTextLine line);
    public abstract virtual double GetFirstLineVerticalPosition(int count);
    public abstract virtual void Clip(PdfCommandConstructor commandConstructor);
    protected double MeasureStringHeight(int lineCount);
    protected DXStringAlignment GetActualAlignment(DXStringAlignment alignment);
}
public class DevExpress.Pdf.ContentGeneration.PdfStrokingAlphaCache : PdfGraphicsStateParametersCache {
    protected virtual PdfGraphicsStateParameters CreateParameters(double value);
}
public class DevExpress.Pdf.ContentGeneration.PdfTextBuilder : PdfTextSubsetBuilder {
    private double pointToPdfFontUnitsFactor;
    private PdfExportFontInfo mainFont;
    private PdfTextWriter writer;
    private double currentPosition;
    private double currentActualPosition;
    private double previousVerticalOffset;
    private double additionalHorizontalOffset;
    private string fallbackFontFamily;
    private DXFontStyle fallbackFontStyle;
    private PdfExportFont currentFont;
    [CompilerGeneratedAttribute]
private PdfCommandConstructor <CommandConstructor>k__BackingField;
    protected PdfCommandConstructor CommandConstructor { get; }
    public PdfTextBuilder(PdfCommandConstructor commandConstructor, PdfExportFontInfo fontInfo);
    [CompilerGeneratedAttribute]
protected PdfCommandConstructor get_CommandConstructor();
    public void Append(DXTextLine line);
    public void StartNextLine(double xOffset, double yOffset);
    protected virtual void AppendGlyph(DXGlyph glyph, float glyphWidth);
    private void ResetPositions();
    protected virtual void StartNextLineCore(double xOffset, double yOffset);
}
public class DevExpress.Pdf.ContentGeneration.PdfTextLineBounds : ValueType {
    private int firstLineIndex;
    private int lastLineIndex;
    public int FirstLineIndex { get; }
    public int LastLineIndex { get; }
    public PdfTextLineBounds(int firstLineIndex, int lastLineIndex);
    public int get_FirstLineIndex();
    public int get_LastLineIndex();
}
public class DevExpress.Pdf.ContentGeneration.PdfTextPainter : object {
    private PdfCommandConstructor constructor;
    private PdfTextPainter(PdfCommandConstructor constructor);
    public static void DrawLines(PdfCommandConstructor constructor, IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfRectangle layoutRect, DXStringFormat format, PdfStringClipper stringClipper);
    public static void DrawLines(PdfCommandConstructor constructor, IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfRectangle layoutRect, DXStringFormat format);
    public static void DrawLines(PdfCommandConstructor constructor, IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfRectangle layoutRect, PdfFontMetrics metrics, DXStringFormat format, bool isolateAction);
    public static void DrawLines(PdfCommandConstructor constructor, IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfPoint location, DXStringFormat format, bool isolateAction, PdfStringClipper stringClipper);
    public static void DrawLines(PdfCommandConstructor constructor, IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfPoint location, DXStringFormat format, bool isolateAction);
    public void DrawLines(IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfRectangle layoutRect, DXStringFormat format, PdfStringClipper stringClipper);
    public void DrawLines(IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfRectangle layoutRect, DXStringFormat format);
    public void DrawLines(IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfRectangle layoutRect, PdfFontMetrics metrics, DXStringFormat format, bool isolateAction);
    public void DrawLines(IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfPoint location, DXStringFormat format, bool isolateAction, PdfStringClipper stringClipper);
    public void DrawLines(IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfPoint location, DXStringFormat format, bool isolateAction);
    private void DrawLines(IReadOnlyList`1<DXTextLine> lines, PdfExportFontInfo fontInfo, PdfStringPaintingStrategy strategy, PdfFontMetrics metrics, PdfStringClipper stringClipper, bool isolateAction);
}
public class DevExpress.Pdf.ContentGeneration.PdfTextSubsetBuilder : object {
    public static void RegisterSubset(PdfExportFont font, IEnumerable`1<DXCluster> text);
    private static string GetUnicode(int index, int glyphCount, string text, DXCluster cluster);
    protected void AppendCluster(PdfExportFont font, DXCluster cluster);
    protected virtual void AppendGlyph(DXGlyph glyph, float glyphWidth);
}
public class DevExpress.Pdf.ContentGeneration.PdfTextureBrushContainer : PdfTileBrushContainer`1<PdfXObjectCachedResource> {
    private DXTextureBrush brush;
    public PdfTextureBrushContainer(DXTextureBrush brush);
    protected virtual PdfXObjectCachedResource GetTile(PdfGraphicsCommandConstructor constructor);
    protected virtual void DrawTile(PdfCommandConstructor constructor, PdfXObjectCachedResource tile, PdfRectangle bounds, PdfTransformationMatrix matrix);
}
public class DevExpress.Pdf.ContentGeneration.PdfTiffImageToXObjectConverter : PdfImageToXObjectConverter {
    private Byte[] imageData;
    private PdfFilter filter;
    private PdfColorSpace colorSpace;
    private int bitsPerComponent;
    private PdfRange[] decode;
    public int ImageDataLength { get; }
    private PdfTiffImageToXObjectConverter(int width, int height, Byte[] imageData, PdfFilter filter, PdfColorSpace colorSpace, int bitsPerComponent, PdfRange[] decode);
    private static PdfTiffImageToXObjectConverter CreateFromLZW(TiffParser tiffParser);
    public static PdfTiffImageToXObjectConverter Create(Stream stream);
    public static PdfTiffImageToXObjectConverter Create(DXBitmap image, DXImageFormatOptions imageFormatOptions);
    public virtual int get_ImageDataLength();
    public virtual PdfImage GetXObject();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfTileBrushContainer`1 : PdfBrushContainer {
    private DXWrapMode wrapMode;
    private double tileWidth;
    private double tileHeight;
    private PdfTransformationMatrix brushMatrix;
    protected double TileWidth { get; }
    protected double TileHeight { get; }
    protected PdfTileBrushContainer`1(double tileWidth, double tileHeight, DXWrapMode wrapMode, DXMatrix brushMatrix);
    protected double get_TileWidth();
    protected double get_TileHeight();
    protected abstract virtual TTile GetTile(PdfGraphicsCommandConstructor constructor);
    protected abstract virtual void DrawTile(PdfCommandConstructor constructor, TTile tile, PdfRectangle bounds, PdfTransformationMatrix matrix);
    public virtual PdfTransparentColor GetColor(PdfGraphicsCommandConstructor commandConstructor);
}
public class DevExpress.Pdf.ContentGeneration.PdfTransparentColor : PdfColor {
    private double alpha;
    public double Alpha { get; }
    public PdfTransparentColor(byte alpha, Double[] components);
    public PdfTransparentColor(byte alpha, PdfPattern pattern, Double[] components);
    public double get_Alpha();
}
public class DevExpress.Pdf.ContentGeneration.PdfTrellisHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    protected PdfLineCapStyle LineCapStyle { get; }
    private static PdfTrellisHatchPatternConstructor();
    public PdfTrellisHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual PdfLineCapStyle get_LineCapStyle();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfTriangleListBuilder : object {
    private static PdfRange pdfColorRange;
    private static int bitsPerCoordinate;
    private static int bitsPerComponent;
    private static int bitsPerFlag;
    private static int bezierTrianglesCount;
    private List`1<PdfTriangle> triangles;
    private PdfPoint centerPoint;
    private Color[] surroundColors;
    private int currentColorIndex;
    private PdfPoint subpathEndPoint;
    protected static PdfRange PdfColorRange { get; }
    protected IList`1<PdfRange> ComponentsRange { get; }
    protected PdfPoint CenterPoint { get; }
    protected PdfTriangleListBuilder(PdfPoint centerPoint, Color[] surroundColors);
    private static PdfTriangleListBuilder();
    private static double CalculateBezierCurveCoordinate(double startCoordinate, double controlCoordinate1, double controlCoordinate2, double endCoordinate, double t);
    public static PdfTriangleListBuilder Create(DXPathGradientBrush brush, PdfRectangle brushBbox);
    protected static PdfColor BlendColor(PdfColor first, PdfColor second, double factor);
    protected static PdfRange get_PdfColorRange();
    protected abstract virtual IList`1<PdfRange> get_ComponentsRange();
    protected PdfPoint get_CenterPoint();
    private Color GetNextSurroundColor();
    public void AppendLine(PdfPoint startPoint, PdfPoint endPoint);
    public void ClosePath(PdfPoint endPoint, Color endColor);
    public void AppendBezier(PdfPoint startPoint, PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint EndPoint);
    public PdfShading GetShading();
    private void AddTriangle(PdfPoint startPoint, PdfPoint endPoint, Color startColor, Color endColor);
    protected abstract virtual IEnumerable`1<PdfTriangle> CreateTriangles(PdfPoint startPoint, PdfPoint endPoint, Color startColor, Color endColor);
    protected abstract virtual PdfObjectList`1<PdfCustomFunction> CreateFunction();
}
public class DevExpress.Pdf.ContentGeneration.PdfTwoColorLinearGradientPatternConstructor : PdfLinearGradientPatternConstructor {
    private bool IsTransparencyGradient { get; }
    public byte Alpha { get; }
    public PdfTwoColorLinearGradientPatternConstructor(DXLinearGradientBrush brush, PdfTransformationMatrix actualBrushTransform);
    private bool get_IsTransparencyGradient();
    public virtual byte get_Alpha();
    public virtual PdfPattern CreatePattern(PdfGraphicsCommandConstructor commandConstructor);
    protected virtual PdfLinearGradientShadingBuilder CreateBuilder();
    protected virtual PdfLinearGradientShadingBuilder CreateMaskBuilder();
}
public class DevExpress.Pdf.ContentGeneration.PdfTwoColorLinearGradientShadingBuilder : PdfLinearGradientShadingBuilder {
    private Color[] brushColors;
    private DXBlend blend;
    public PdfTwoColorLinearGradientShadingBuilder(Color[] brushColors, DXBlend blend);
    protected virtual PdfCustomFunction CreateSampledFunction();
}
public class DevExpress.Pdf.ContentGeneration.PdfVectorBrushContainer : PdfTileBrushContainer`1<PdfForm> {
    private Action`1<PdfGraphicsCommandConstructor> tilePaint;
    public PdfVectorBrushContainer(double tileWidth, double tileHeight, DXWrapMode wrapMode, DXMatrix brushMatrix, Action`1<PdfGraphicsCommandConstructor> tilePaint);
    protected virtual PdfForm GetTile(PdfGraphicsCommandConstructor constructor);
    protected virtual void DrawTile(PdfCommandConstructor constructor, PdfForm tile, PdfRectangle bounds, PdfTransformationMatrix matrix);
}
public class DevExpress.Pdf.ContentGeneration.PdfVerticalHatchPatternConstructor : PdfHorizontalHatchPatternConstructor {
    public PdfVerticalHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfWaveHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    private static PdfWaveHatchPatternConstructor();
    public PdfWaveHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfWeaveHatchPatternConstructor : PdfRectangleBasedHatchPatternConstructor {
    private static PdfHatchPatternRect[] rectangles;
    private static PdfWeaveHatchPatternConstructor();
    public PdfWeaveHatchPatternConstructor(DXHatchBrush hatchBrush);
}
public class DevExpress.Pdf.ContentGeneration.PdfWideDownwardDiagonalHatchPatternConstructor : PdfForwardDiagonalHatchPatternConstructor {
    protected double LineWidth { get; }
    public PdfWideDownwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineWidth();
}
public class DevExpress.Pdf.ContentGeneration.PdfWideUpwardDiagonalHatchPatternConstructor : PdfBackwardDiagonalHatchPatternConstructor {
    protected double LineWidth { get; }
    public PdfWideUpwardDiagonalHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual double get_LineWidth();
}
public abstract class DevExpress.Pdf.ContentGeneration.PdfXObjectCachedResource : PdfDisposableObject {
    private float width;
    private float height;
    public float Width { get; }
    public float Height { get; }
    protected PdfXObjectCachedResource(float width, float height);
    public float get_Width();
    public float get_Height();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Draw(PdfCommandConstructor constructor, PdfRectangle bounds, PdfTransformationMatrix transform);
    public abstract virtual void Draw(PdfCommandConstructor constructor, PdfRectangle bounds);
    public abstract virtual PdfXObject GetXObject();
}
public class DevExpress.Pdf.ContentGeneration.PdfXObjectImageCachedResource : PdfXObjectCachedResource {
    private PdfXObject obj;
    public PdfXObjectImageCachedResource(PdfImageToXObjectConverter converter);
    public PdfXObjectImageCachedResource(int width, int height, PdfXObject obj);
    public virtual void Draw(PdfCommandConstructor constructor, PdfRectangle bounds);
    public virtual void Draw(PdfCommandConstructor constructor, PdfRectangle bounds, PdfTransformationMatrix transform);
    public virtual PdfXObject GetXObject();
}
public class DevExpress.Pdf.ContentGeneration.PdfXObjectMetafileCachedResource : PdfXObjectCachedResource {
    public static int MaxImageSampleCount;
    private static float metafileContentDpi;
    private static float metafileDpiFactor;
    private PdfGraphicsDocument graphicsDocument;
    private DXMetafile metafile;
    private EmfMetafile emfMetafile;
    private bool ownsEmfMetafile;
    private PdfRectangle formBounds;
    private PdfForm metafileForm;
    private PdfXObjectMetafileCachedResource(DXMetafile metafile, EmfMetafile emfMetafile, bool ownsEmfMetafile, float width, float height, PdfGraphicsDocument graphicsDocument);
    public static PdfXObjectMetafileCachedResource Create(DXMetafile metafile, PdfGraphicsDocument graphicsDocument);
    public static PdfXObjectMetafileCachedResource Create(Stream imageStream, PdfGraphicsDocument graphicsDocument);
    public static PdfXObjectMetafileCachedResource Create(EmfMetafile emfMetafile, PdfGraphicsDocument graphicsDocument);
    private static PdfXObjectMetafileCachedResource Create(DXMetafile metafile, PdfGraphicsDocument graphicsDocument, Func`1<EmfMetafile> createEmfMetafile);
    private void DrawMetafileForm(PdfCommandConstructor constructor, PdfRectangle bounds);
    private void DrawRasterImage(PdfCommandConstructor constructor, PdfRectangle bounds, double metafileImageSizeFactor, double width, double height);
    public virtual PdfXObject GetXObject();
    public virtual void Draw(PdfCommandConstructor constructor, PdfRectangle bounds, PdfTransformationMatrix transform);
    public virtual void Draw(PdfCommandConstructor constructor, PdfRectangle bounds);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.ContentGeneration.PdfXObjectResourceCache : PdfResourceCache`1<PdfXObjectCachedResource> {
    private PdfGraphicsDocument graphicsDocument;
    private bool extractSMask;
    private bool convertImagesToJpeg;
    private long jpegQuality;
    public bool ConvertImagesToJpeg { get; public set; }
    public long JpegQuality { get; public set; }
    public bool ExtractSMask { get; }
    public PdfXObjectResourceCache(PdfGraphicsDocument graphicsDocument);
    public bool get_ConvertImagesToJpeg();
    public void set_ConvertImagesToJpeg(bool value);
    public long get_JpegQuality();
    public void set_JpegQuality(long value);
    public bool get_ExtractSMask();
    public PdfXObjectCachedResource AddXObject(DXImage image, Color backgroundColor, int resolution);
    public PdfXObjectCachedResource AddXObject(DXImage image);
    public PdfXObjectCachedResource AddXObject(DXBitmap image, Color backgroundColor);
    public PdfXObjectCachedResource AddXObject(DXBitmap image);
    public PdfXObjectCachedResource AddXObject(Stream imageStream);
    public PdfXObjectCachedResource AddXObject(Byte[] imageData);
    public PdfXObjectCachedResource AddXObject(EmfMetafile emfMetafile);
    private PdfXObjectCachedResource AddXObject(object cacheKey, Stream imageStream);
    private PdfXObjectCachedResource AddImage(PdfResourcesCacheKey key, Func`1<PdfImageToXObjectConverter> createConverter);
    private PdfXObjectCachedResource AddImage(PdfResourcesCacheKey key, DXImage image, Func`1<PdfImageToXObjectConverter> createConverter);
    private PdfXObjectCachedResource AddMetafile(object source, DXMetafile metafile);
    private sealed virtual override IPdfXObjectProvider DevExpress.Pdf.ContentGeneration.IPdfXObjectResourceCache.AddXObject(Stream imageStream);
    private sealed virtual override IPdfXObjectProvider DevExpress.Pdf.ContentGeneration.IPdfXObjectResourceCache.AddXObject(Byte[] imageData);
}
public class DevExpress.Pdf.ContentGeneration.PdfZigZagHatchPatternConstructor : PdfHatchPatternConstructor {
    public PdfZigZagHatchPatternConstructor(DXHatchBrush hatchBrush);
    protected virtual void FillCommands(PdfCommandConstructor constructor);
}
public class DevExpress.Pdf.ContentGeneration.Pens.PdfCapsPainter : object {
    private DXPen pen;
    private double lineWidth;
    public PdfCapsPainter(DXPen pen, double lineWidth);
    public void DrawPathWithCaps(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes, PdfCommandConstructor commandConstructor, PdfGraphicsExportState state);
    private static PdfPoint TransformPointIdentity(PointF point);
    private IList`1<PdfGraphicsPath> TransformPath(DXGraphicsPathData path, Func`2<PointF, PdfPoint> transformPoint);
    private IList`1<PdfGraphicsPath> TransformPath(IReadOnlyList`1<PointF> pathPoints, IReadOnlyList`1<DXPathPointType> pathTypes, Func`2<PointF, PdfPoint> transformPoint);
    private void SetupPen(DXPen pen, PdfCommandConstructor constructor, PdfGraphicsExportState currentState);
    public bool ShouldRenderCaps();
}
public class DevExpress.Pdf.ContentGeneration.TiffParsing.CCITTFilterParameters : object {
    private static int twoDimensionalFlag;
    private static int uncompressedModeFlag;
    private static int byteAllignFlag;
    private static int centimeterMark;
    [CompilerGeneratedAttribute]
private PdfCCITTFaxEncodingScheme <EncodingScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TwoDimensionalLineCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndOfLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncodedByteAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlackIs1>k__BackingField;
    public PdfCCITTFaxEncodingScheme EncodingScheme { get; private set; }
    public int TwoDimensionalLineCount { get; private set; }
    public bool EndOfLine { get; private set; }
    public bool EncodedByteAlign { get; private set; }
    public int Columns { get; private set; }
    public int Rows { get; private set; }
    public bool EndOfBlock { get; }
    public bool BlackIs1 { get; private set; }
    private static Nullable`1<long> GetValue(TiffParser parser, TiffTag tag);
    private static T GetValueOrDefault(TiffParser parser, TiffTag tag, Func`2<long, T> getValue, T defaultValue);
    public static CCITTFilterParameters Create(TiffParser parser);
    [CompilerGeneratedAttribute]
public PdfCCITTFaxEncodingScheme get_EncodingScheme();
    [CompilerGeneratedAttribute]
private void set_EncodingScheme(PdfCCITTFaxEncodingScheme value);
    [CompilerGeneratedAttribute]
public int get_TwoDimensionalLineCount();
    [CompilerGeneratedAttribute]
private void set_TwoDimensionalLineCount(int value);
    [CompilerGeneratedAttribute]
public bool get_EndOfLine();
    [CompilerGeneratedAttribute]
private void set_EndOfLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_EncodedByteAlign();
    [CompilerGeneratedAttribute]
private void set_EncodedByteAlign(bool value);
    [CompilerGeneratedAttribute]
public int get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(int value);
    [CompilerGeneratedAttribute]
public int get_Rows();
    [CompilerGeneratedAttribute]
private void set_Rows(int value);
    public bool get_EndOfBlock();
    [CompilerGeneratedAttribute]
public bool get_BlackIs1();
    [CompilerGeneratedAttribute]
private void set_BlackIs1(bool value);
}
public interface DevExpress.Pdf.ContentGeneration.TiffParsing.ITiffReader {
    public long Position { get; public set; }
    public abstract virtual long get_Position();
    public abstract virtual void set_Position(long value);
    public abstract virtual Byte[] ReadBytes(int count);
    public abstract virtual short ReadInt16();
    public abstract virtual int ReadInt32();
    public abstract virtual byte ReadByte();
}
public interface DevExpress.Pdf.ContentGeneration.TiffParsing.ITiffValue {
    public abstract virtual int AsInt();
    public abstract virtual double AsDouble();
    public abstract virtual long AsUint();
}
public class DevExpress.Pdf.ContentGeneration.TiffParsing.TiffBigEndianReader : object {
    private PdfBigEndianStreamReader reader;
    public long Position { get; public set; }
    public TiffBigEndianReader(Stream stream);
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long value);
    public sealed virtual Byte[] ReadBytes(int count);
    public sealed virtual short ReadInt16();
    public sealed virtual int ReadInt32();
    public sealed virtual byte ReadByte();
}
public class DevExpress.Pdf.ContentGeneration.TiffParsing.TiffDouble : object {
    private double value;
    public TiffDouble(double value);
    public sealed virtual int AsInt();
    public sealed virtual double AsDouble();
    public sealed virtual long AsUint();
}
public class DevExpress.Pdf.ContentGeneration.TiffParsing.TiffLittleEndianReader : object {
    private BinaryReader reader;
    public long Position { get; public set; }
    public TiffLittleEndianReader(Stream stream);
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long value);
    public sealed virtual Byte[] ReadBytes(int count);
    public sealed virtual short ReadInt16();
    public sealed virtual int ReadInt32();
    public sealed virtual byte ReadByte();
}
public class DevExpress.Pdf.ContentGeneration.TiffParsing.TiffParser : object {
    private static Byte[] bitReverseTable;
    private static int byteOrderMark;
    private static int fillOrderMark;
    [CompilerGeneratedAttribute]
private ITiffReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TiffTag, ITiffValue[]> <DirectoryEntryDictionary>k__BackingField;
    private ITiffReader Reader { get; private set; }
    public IDictionary`2<TiffTag, ITiffValue[]> DirectoryEntryDictionary { get; }
    public TiffParser(Stream stream);
    private static TiffParser();
    private static Nullable`1<int> GetTypeLength(TiffType type);
    [CompilerGeneratedAttribute]
private ITiffReader get_Reader();
    [CompilerGeneratedAttribute]
private void set_Reader(ITiffReader value);
    [CompilerGeneratedAttribute]
public IDictionary`2<TiffTag, ITiffValue[]> get_DirectoryEntryDictionary();
    public ITiffValue[] GetDirectoryEntryValue(TiffTag key);
    public ITiffValue GetFirstValue(TiffTag key);
    public int GetStripCount();
    public Byte[] GetImageData();
    private ITiffValue[] ReadValues(int count, TiffType type);
    private void ParseDirectoryEntry();
    private ITiffValue ReadValue(TiffType type);
}
public class DevExpress.Pdf.ContentGeneration.TiffParsing.TiffSignedInt : object {
    private int value;
    public TiffSignedInt(int value);
    public sealed virtual int AsInt();
    public sealed virtual double AsDouble();
    public sealed virtual long AsUint();
}
public enum DevExpress.Pdf.ContentGeneration.TiffParsing.TiffTag : Enum {
    public short value__;
    public static TiffTag PhotometricInterpretation;
    public static TiffTag Compression;
    public static TiffTag ImageLength;
    public static TiffTag ImageWidth;
    public static TiffTag FillOrder;
    public static TiffTag ResolutionUnit;
    public static TiffTag XResolution;
    public static TiffTag YResolution;
    public static TiffTag RowsPerStrip;
    public static TiffTag StripOffsets;
    public static TiffTag StripByteCounts;
    public static TiffTag T4Options;
    public static TiffTag T6Options;
    public static TiffTag Predictor;
    public static TiffTag BitsPerSample;
    public static TiffTag ColorMap;
    public static TiffTag SamplesPerPixel;
}
public enum DevExpress.Pdf.ContentGeneration.TiffParsing.TiffType : Enum {
    public short value__;
    public static TiffType Byte;
    public static TiffType Ascii;
    public static TiffType Short;
    public static TiffType Long;
    public static TiffType Rational;
    public static TiffType SByte;
    public static TiffType Undefined;
    public static TiffType SShort;
    public static TiffType SLong;
    public static TiffType SRational;
    public static TiffType Float;
    public static TiffType Double;
}
public class DevExpress.Pdf.ContentGeneration.TiffParsing.TiffUnsignedInt : object {
    private long value;
    public TiffUnsignedInt(long value);
    public sealed virtual int AsInt();
    public sealed virtual double AsDouble();
    public sealed virtual long AsUint();
}
internal class DevExpress.Pdf.ContentGeneration.UniscribeShaper : DXShaper`1<UniscribeTextRun> {
    private static float measurementFontSize;
    private Graphics context;
    private Font font;
    private double contextDpi;
    private IntPtr hFont;
    private IntPtr cache;
    private IntPtr hdc;
    protected DXFontDescriptor Descriptor { get; }
    [SecuritySafeCriticalAttribute]
public UniscribeShaper(Font originalFont, IDXFontFallback fallback);
    private static DXTextBuffer`1<UniscribeTextRun> CreateRuns(string text, bool directionRightToLeft);
    private static void UpdateBreakpoint(DXLineBreakpoint[] breakpoints, int index);
    private static void SetLineBreaks(string text, DXTextBuffer`1<UniscribeTextRun> runs);
    protected virtual DXFontDescriptor get_Descriptor();
    protected virtual override void Finalize();
    protected virtual IEnumerable`1<UniscribeTextRun> CreateTextAnalysisRuns(string text, bool directionRightToLeft);
    protected virtual IList`1<DXCluster> ShapeVisualTextAnalysisRun(UniscribeTextRun run, float fontSizeInPoints, bool useKerning);
    public virtual void Dispose();
    [SecuritySafeCriticalAttribute]
public virtual bool FontHasCharacters(StringView text);
    [SecuritySafeCriticalAttribute]
private IList`1<DXCluster> ShapeRun(IntPtr hdc, UniscribeTextRun run, float fontSize, bool useKerning);
    [SecuritySafeCriticalAttribute]
private void Dispose(bool disposing);
}
internal class DevExpress.Pdf.ContentGeneration.UniscribeTextRun : DXTextAnalysisRun`1<UniscribeTextRun> {
    private static Lazy`1<SCRIPT_PROPERTIES[]> scriptProperties;
    [CompilerGeneratedAttribute]
private SCRIPT_ANALYSIS <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private OPENTYPE_TAG <ScriptTag>k__BackingField;
    [CompilerGeneratedAttribute]
private DXLineBreakpoint[] <Breakpoints>k__BackingField;
    public SCRIPT_ANALYSIS Script { get; private set; }
    public OPENTYPE_TAG ScriptTag { get; public set; }
    public DXLineBreakpoint[] Breakpoints { get; public set; }
    private static UniscribeTextRun();
    public UniscribeTextRun(string text, int offset, int length);
    private UniscribeTextRun(int offset, int length, StringView text, byte bidiLevel, SCRIPT_ANALYSIS script, OPENTYPE_TAG scriptTag, DXLineBreakpoint[] breakpoints);
    [CompilerGeneratedAttribute]
public SCRIPT_ANALYSIS get_Script();
    [CompilerGeneratedAttribute]
private void set_Script(SCRIPT_ANALYSIS value);
    [CompilerGeneratedAttribute]
public OPENTYPE_TAG get_ScriptTag();
    [CompilerGeneratedAttribute]
public void set_ScriptTag(OPENTYPE_TAG value);
    [CompilerGeneratedAttribute]
public DXLineBreakpoint[] get_Breakpoints();
    [CompilerGeneratedAttribute]
public void set_Breakpoints(DXLineBreakpoint[] value);
    protected virtual UniscribeTextRun CreateTextAnalysisRun(int offset, int length, StringView text, byte bidiLevel);
    public virtual DXLineBreakpoint GetBreakpoint(int index);
    public void SetScript(SCRIPT_ANALYSIS script);
}
public class DevExpress.Pdf.ExternalSignerInfo : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDigestCalculator <DigestCalculator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SignatureSize>k__BackingField;
    public string Type { get; }
    public string Filter { get; }
    public string SubFilter { get; }
    public IDigestCalculator DigestCalculator { get; }
    public int SignatureSize { get; }
    public ExternalSignerInfo(string type, string filter, string subFilter, int signatureSize, IDigestCalculator digestCalculator);
    public ExternalSignerInfo(string type, string filter, string subFilter, int signatureSize, HashAlgorithmType hashAlgorithm);
    public ExternalSignerInfo(PdfSignatureType type, int signatureSize, IDigestCalculator digestCalculator);
    public ExternalSignerInfo(PdfSignatureType type, int signatureSize, HashAlgorithmType hashAlgorithm);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public string get_SubFilter();
    [CompilerGeneratedAttribute]
public IDigestCalculator get_DigestCalculator();
    [CompilerGeneratedAttribute]
public int get_SignatureSize();
}
public interface DevExpress.Pdf.IExternalSigner {
    public string Type { get; }
    public string Filter { get; }
    public string SubFilter { get; }
    public abstract virtual string get_Type();
    public abstract virtual string get_Filter();
    public abstract virtual string get_SubFilter();
    public abstract virtual int GetSignatureSize();
    public abstract virtual Byte[] BuildSignature(Stream stream);
    public abstract virtual Byte[] BuildSignature(Byte[] digest, string digestAlgorithmOID);
}
[FlagsAttribute]
public enum DevExpress.Pdf.Interop.FormatMessageFlags : Enum {
    public int value__;
    public static FormatMessageFlags FROM_SYSTEM;
    public static FormatMessageFlags ALLOCATE_BUFFER;
    public static FormatMessageFlags IGNORE_INSERTS;
    public static FormatMessageFlags ARGUMENT_ARRAY;
}
internal static class DevExpress.Pdf.Interop.Kernel32Interop : object {
    public static UInt32 WaitForMultipleObjects(int count, IntPtr[] handles, bool waitAll, int milliseconds);
    public static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, int dwFlags);
    public static IntPtr GlobalLock(IntPtr hMem);
    public static bool GlobalUnlock(IntPtr hMem);
    public static IntPtr GlobalFree(IntPtr hMem);
    public static IntPtr GetProcAddress(IntPtr hModule, string procName);
    public static bool FreeLibrary(IntPtr hModule);
    public static int FormatMessage(FormatMessageFlags dwFlags, IntPtr lpSource_mustBeNull, UInt32 dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, IntPtr[] arguments);
}
public interface DevExpress.Pdf.IPdfViewer {
    public abstract virtual PdfDocumentProcessorHelper GetDocumentProcessorHelper();
}
[ToolboxItemAttribute("False")]
public class DevExpress.Pdf.Localization.PdfCoreLocalizer : XtraLocalizer`1<PdfCoreStringId> {
    public static XtraLocalizer`1<PdfCoreStringId> Active { get; public set; }
    public string Language { get; }
    private static PdfCoreLocalizer();
    public static XtraLocalizer`1<PdfCoreStringId> get_Active();
    public static void set_Active(XtraLocalizer`1<PdfCoreStringId> value);
    public static string GetString(PdfCoreStringId id);
    public virtual string get_Language();
    public virtual XtraLocalizer`1<PdfCoreStringId> CreateResXLocalizer();
    protected virtual void PopulateStringTable();
    private void AddStrings();
}
public class DevExpress.Pdf.Localization.PdfCoreResLocalizer : PdfCoreLocalizer {
    private static string baseName;
    private ResourceManager manager;
    private static Assembly GetAssembly(Type type);
    public virtual string GetLocalizedString(PdfCoreStringId id);
}
public enum DevExpress.Pdf.Localization.PdfCoreStringId : Enum {
    public int value__;
    public static PdfCoreStringId DefaultDocumentName;
    public static PdfCoreStringId UnitKiloBytes;
    public static PdfCoreStringId UnitMegaBytes;
    public static PdfCoreStringId UnitGigaBytes;
    public static PdfCoreStringId UnitTeraBytes;
    public static PdfCoreStringId UnitPetaBytes;
    public static PdfCoreStringId UnitExaBytes;
    public static PdfCoreStringId UnitZettaBytes;
    public static PdfCoreStringId FileSize;
    public static PdfCoreStringId FileSizeInBytes;
    public static PdfCoreStringId MsgAttachmentHintFileName;
    public static PdfCoreStringId MsgAttachmentHintSize;
    public static PdfCoreStringId MsgAttachmentHintModificationDate;
    public static PdfCoreStringId MsgAttachmentHintDescription;
    public static PdfCoreStringId MsgIncorrectPdfData;
    public static PdfCoreStringId MsgIncorrectFormDataFile;
    public static PdfCoreStringId MsgIncorrectPdfPassword;
    public static PdfCoreStringId MsgIncorrectRectangleWidth;
    public static PdfCoreStringId MsgIncorrectRectangleHeight;
    public static PdfCoreStringId MsgIncorrectPageRotate;
    public static PdfCoreStringId MsgIncorrectPageCropBox;
    public static PdfCoreStringId MsgIncorrectPageBleedBox;
    public static PdfCoreStringId MsgIncorrectPageTrimBox;
    public static PdfCoreStringId MsgIncorrectPageArtBox;
    public static PdfCoreStringId MsgIncorrectOpacity;
    public static PdfCoreStringId MsgIncorrectLineWidth;
    public static PdfCoreStringId MsgIncorrectMiterLimit;
    public static PdfCoreStringId MsgIncorrectDashLength;
    public static PdfCoreStringId MsgIncorrectGapLength;
    public static PdfCoreStringId MsgIncorrectDashPatternArraySize;
    public static PdfCoreStringId MsgIncorrectDashPattern;
    public static PdfCoreStringId MsgIncorrectFlatnessTolerance;
    public static PdfCoreStringId MsgIncorrectColorComponentValue;
    public static PdfCoreStringId MsgZeroColorComponentsCount;
    public static PdfCoreStringId MsgIncorrectTextHorizontalScaling;
    public static PdfCoreStringId MsgIncorrectText;
    public static PdfCoreStringId MsgIncorrectGlyphPosition;
    public static PdfCoreStringId MsgIncorrectMarkedContentTag;
    public static PdfCoreStringId MsgIncorrectListSize;
    public static PdfCoreStringId MsgIncorrectPageNumber;
    public static PdfCoreStringId MsgIncorrectDestinationPage;
    public static PdfCoreStringId MsgIncorrectInsertingPageNumber;
    public static PdfCoreStringId MsgIncorrectLargestEdgeLength;
    public static PdfCoreStringId MsgIncorrectButtonFormFieldValue;
    public static PdfCoreStringId MsgIncorrectChoiceFormFieldValue;
    public static PdfCoreStringId MsgIncorrectTextFormFieldValue;
    public static PdfCoreStringId MsgIncorrectSelectedIndexValue;
    public static PdfCoreStringId MsgIncorrectAcroFormExportValue;
    public static PdfCoreStringId MsgAcroFormFieldNameCantBeEmpty;
    public static PdfCoreStringId MsgIncorrectAcroFormFieldNameContainsPeriod;
    public static PdfCoreStringId MsgCantSetSelectedIndexWithoutValues;
    public static PdfCoreStringId MsgPageNumberShouldBePositive;
    public static PdfCoreStringId MsgAcroFormFieldNameDuplication;
    public static PdfCoreStringId MsgIncorrectZoom;
    public static PdfCoreStringId MsgFormDataNotFound;
    public static PdfCoreStringId MsgUnavailableOperation;
    public static PdfCoreStringId MsgIncorrectPrintableFilePath;
    public static PdfCoreStringId MsgIncompatibleOperationWithCurrentDocumentFormat;
    public static PdfCoreStringId MsgIncorrectBookmarkListValue;
    public static PdfCoreStringId MsgIncorrectMarkupAnnotation;
    public static PdfCoreStringId MsgUnsupportedGraphicsOperation;
    public static PdfCoreStringId MsgUnsupportedGraphicsUnit;
    public static PdfCoreStringId MsgUnsupportedBrushType;
    public static PdfCoreStringId MsgShouldEmbedFonts;
    public static PdfCoreStringId MsgUnsupportedFileAttachments;
    public static PdfCoreStringId MsgIncorrectDpi;
    public static PdfCoreStringId MsgMissingPageNumbers;
    public static PdfCoreStringId MsgPartialTrustEnvironmentLimitation;
    public static PdfCoreStringId MsgStreamIsInUse;
    public static PdfCoreStringId MsgUnsupportedAnnotationType;
    public static PdfCoreStringId MsgUnsupportedStreamForLoadOperation;
    public static PdfCoreStringId MsgUnsupportedStreamForSaveOperation;
    public static PdfCoreStringId MsgUnsupportedStream;
    public static PdfCoreStringId MsgUnsupportedEncryption;
    public static PdfCoreStringId TextHighlightDefaultSubject;
    public static PdfCoreStringId TextStrikethroughDefaultSubject;
    public static PdfCoreStringId TextUnderlineDefaultSubject;
    public static PdfCoreStringId MsgWinOnlyLimitation;
    public static PdfCoreStringId MsgEntryPointNotFound;
    public static PdfCoreStringId MsgSharedLibraryNotFound;
    public static PdfCoreStringId MsgICULibraryNotFound;
    public static PdfCoreStringId MsgEmptyCustomPropertyName;
    public static PdfCoreStringId MsgIncorrectDestination;
    public static PdfCoreStringId MsgIncorrectAction;
    public static PdfCoreStringId StickyNoteDefaultSubject;
    public static PdfCoreStringId AnnotationFilterTypeText;
    public static PdfCoreStringId AnnotationFilterTypeLine;
    public static PdfCoreStringId AnnotationFilterTypePolygon;
    public static PdfCoreStringId AnnotationFilterTypePolyLine;
    public static PdfCoreStringId AnnotationFilterTypeSquare;
    public static PdfCoreStringId AnnotationFilterTypeCircle;
    public static PdfCoreStringId AnnotationFilterTypeFileAttachment;
    public static PdfCoreStringId AnnotationFilterTypeFreeText;
    public static PdfCoreStringId AnnotationFilterTypeInk;
    public static PdfCoreStringId AnnotationFilterTypeRedaction;
    public static PdfCoreStringId AnnotationFilterTypeRubberStamp;
    public static PdfCoreStringId AnnotationFilterTypeSound;
    public static PdfCoreStringId AnnotationFilterTypeCaret;
    public static PdfCoreStringId AnnotationFilterTypeStrikethrough;
    public static PdfCoreStringId AnnotationFilterTypeUnderline;
    public static PdfCoreStringId AnnotationFilterTypeHighlight;
    public static PdfCoreStringId AnnotationFilterTypeSquiggly;
    public static PdfCoreStringId AnnotationFilterTypeCustom;
    public static PdfCoreStringId SignatureAppearanceCommonNameFormatString;
    public static PdfCoreStringId SignatureAppearanceDistinguishedNameFormatString;
    public static PdfCoreStringId SignatureAppearanceReasonFormatString;
    public static PdfCoreStringId SignatureAppearanceLocationFormatString;
    public static PdfCoreStringId SignatureAppearanceDateFormatString;
    public static PdfCoreStringId MsgUnresolvedXmpPrefix;
    public static PdfCoreStringId RubberStampSHAccepted;
    public static PdfCoreStringId RubberStampSHRejected;
    public static PdfCoreStringId RubberStampSHSignHere;
    public static PdfCoreStringId RubberStampSHInitialHere;
    public static PdfCoreStringId RubberStampSHWitness;
    public static PdfCoreStringId RubberStampDRevised;
    public static PdfCoreStringId RubberStampDReviewed;
    public static PdfCoreStringId RubberStampDReceived;
    public static PdfCoreStringId RubberStampDApproved;
    public static PdfCoreStringId RubberStampDConfidential;
    public static PdfCoreStringId RubberStampApproved;
    public static PdfCoreStringId RubberStampExperimental;
    public static PdfCoreStringId RubberStampNotApproved;
    public static PdfCoreStringId RubberStampAsIs;
    public static PdfCoreStringId RubberStampExpired;
    public static PdfCoreStringId RubberStampNotForPublicRelease;
    public static PdfCoreStringId RubberStampConfidential;
    public static PdfCoreStringId RubberStampFinal;
    public static PdfCoreStringId RubberStampSold;
    public static PdfCoreStringId RubberStampDepartmental;
    public static PdfCoreStringId RubberStampForComment;
    public static PdfCoreStringId RubberStampTopSecret;
    public static PdfCoreStringId RubberStampDraft;
    public static PdfCoreStringId RubberStampForPublicRelease;
    public static PdfCoreStringId RubberStampDConfidentialCredentials;
    public static PdfCoreStringId RubberStampDReviewedCredentials;
    public static PdfCoreStringId RubberStampDReceivedCredentials;
    public static PdfCoreStringId RubberStampDRevisedCredentials;
    public static PdfCoreStringId RubberStampDApprovedCredentials;
    public static PdfCoreStringId RubberStampDateTimeFormat;
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Encodable : object {
    public static string Der;
    public static string Ber;
    public Byte[] GetEncoded();
    public Byte[] GetEncoded(string encoding);
    public Byte[] GetDerEncoded();
    public sealed virtual int GetHashCode();
    public sealed virtual bool Equals(object obj);
    public abstract virtual Asn1Object ToAsn1Object();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1EncodableVector : object {
    private IList v;
    public Asn1Encodable Item { get; }
    [ObsoleteAttribute("Use 'Count' property instead")]
public int Size { get; }
    public int Count { get; }
    public Asn1EncodableVector(Asn1Encodable[] v);
    public static Asn1EncodableVector FromEnumerable(IEnumerable e);
    public void Add(Asn1Encodable[] objs);
    public void AddOptional(Asn1Encodable[] objs);
    public Asn1Encodable get_Item(int index);
    [ObsoleteAttribute("Use 'object[index]' syntax instead")]
public Asn1Encodable Get(int index);
    public int get_Size();
    public int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Exception : IOException {
    public Asn1Exception(string message);
    public Asn1Exception(string message, Exception exception);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Generator : object {
    private Stream _out;
    protected Stream Out { get; }
    protected Asn1Generator(Stream outStream);
    protected Stream get_Out();
    public abstract virtual void AddObject(Asn1Encodable obj);
    public abstract virtual Stream GetRawOutputStream();
    public abstract virtual void Close();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1InputStream : FilterStream {
    private int limit;
    private Byte[][] tmpBuffers;
    public Asn1InputStream(Stream inputStream);
    public Asn1InputStream(Stream inputStream, int limit);
    public Asn1InputStream(Byte[] input);
    internal static int FindLimit(Stream input);
    private Asn1Object BuildObject(int tag, int tagNo, int length);
    internal Asn1EncodableVector BuildEncodableVector();
    internal virtual Asn1EncodableVector BuildDerEncodableVector(DefiniteLengthInputStream dIn);
    internal virtual DerSequence CreateDerSequence(DefiniteLengthInputStream dIn);
    internal virtual DerSet CreateDerSet(DefiniteLengthInputStream dIn);
    public Asn1Object ReadObject();
    internal static int ReadTagNumber(Stream s, int tag);
    internal static int ReadLength(Stream s, int limit);
    internal static Byte[] GetBuffer(DefiniteLengthInputStream defIn, Byte[][] tmpBuffers);
    internal static Asn1Object CreatePrimitiveDerObject(int tagNo, DefiniteLengthInputStream defIn, Byte[][] tmpBuffers);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Null : Asn1Object {
    public virtual string ToString();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Object : Asn1Encodable {
    public static Asn1Object FromByteArray(Byte[] data);
    public static Asn1Object FromByteArray(Byte[] data, bool ignoreExtraData);
    public static Asn1Object FromStream(Stream inStr);
    public sealed virtual Asn1Object ToAsn1Object();
    internal abstract virtual void Encode(DerOutputStream derOut);
    protected abstract virtual bool Asn1Equals(Asn1Object asn1Object);
    protected abstract virtual int Asn1GetHashCode();
    internal bool CallAsn1Equals(Asn1Object obj);
    internal int CallAsn1GetHashCode();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1OctetString : Asn1Object {
    internal Byte[] str;
    public Asn1OctetStringParser Parser { get; }
    internal Asn1OctetString(Byte[] str);
    internal Asn1OctetString(Asn1Encodable obj);
    public static Asn1OctetString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static Asn1OctetString GetInstance(object obj);
    public sealed virtual Stream GetOctetStream();
    public Asn1OctetStringParser get_Parser();
    public virtual Byte[] GetOctets();
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public virtual string ToString();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1OctetStringParser {
    public abstract virtual Stream GetOctetStream();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1OutputStream : DerOutputStream {
    public Asn1OutputStream(Stream os);
    [ObsoleteAttribute("Use version taking an Asn1Encodable arg instead")]
public virtual void WriteObject(object obj);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1ParsingException : InvalidOperationException {
    public Asn1ParsingException(string message);
    public Asn1ParsingException(string message, Exception exception);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Sequence : Asn1Object {
    private IList seq;
    public Asn1SequenceParser Parser { get; }
    public Asn1Encodable Item { get; }
    [ObsoleteAttribute("Use 'Count' property instead")]
public int Size { get; }
    public int Count { get; }
    protected internal Asn1Sequence(int capacity);
    public static Asn1Sequence GetInstance(object obj);
    public static Asn1Sequence GetInstance(Asn1TaggedObject obj, bool explicitly);
    public virtual IEnumerator GetEnumerator();
    [ObsoleteAttribute("Use GetEnumerator() instead")]
public IEnumerator GetObjects();
    public virtual Asn1SequenceParser get_Parser();
    public virtual Asn1Encodable get_Item(int index);
    [ObsoleteAttribute("Use 'object[index]' syntax instead")]
public Asn1Encodable GetObjectAt(int index);
    public int get_Size();
    public virtual int get_Count();
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    private Asn1Encodable GetCurrent(IEnumerator e);
    protected internal void AddObject(Asn1Encodable obj);
    public virtual string ToString();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1SequenceParser {
    public abstract virtual IAsn1Convertible ReadObject();
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Set : Asn1Object {
    private IList _set;
    public Asn1Encodable Item { get; }
    [ObsoleteAttribute("Use 'Count' property instead")]
public int Size { get; }
    public int Count { get; }
    public Asn1SetParser Parser { get; }
    protected internal Asn1Set(int capacity);
    public static Asn1Set GetInstance(object obj);
    public static Asn1Set GetInstance(Asn1TaggedObject obj, bool explicitly);
    public virtual IEnumerator GetEnumerator();
    [ObsoleteAttribute("Use GetEnumerator() instead")]
public IEnumerator GetObjects();
    public virtual Asn1Encodable get_Item(int index);
    [ObsoleteAttribute("Use 'object[index]' syntax instead")]
public Asn1Encodable GetObjectAt(int index);
    public int get_Size();
    public virtual int get_Count();
    public virtual Asn1Encodable[] ToArray();
    public Asn1SetParser get_Parser();
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    private Asn1Encodable GetCurrent(IEnumerator e);
    protected internal void Sort();
    protected internal void AddObject(Asn1Encodable obj);
    public virtual string ToString();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1SetParser {
    public abstract virtual IAsn1Convertible ReadObject();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1StreamParser : object {
    private Stream _in;
    private int _limit;
    private Byte[][] tmpBuffers;
    public Asn1StreamParser(Stream inStream);
    public Asn1StreamParser(Stream inStream, int limit);
    public Asn1StreamParser(Byte[] encoding);
    internal IAsn1Convertible ReadIndef(int tagValue);
    internal IAsn1Convertible ReadImplicit(bool constructed, int tag);
    internal Asn1Object ReadTaggedObject(bool constructed, int tag);
    public virtual IAsn1Convertible ReadObject();
    private void Set00Check(bool enabled);
    internal Asn1EncodableVector ReadVector();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1TaggedObject : Asn1Object {
    internal int tagNo;
    internal bool explicitly;
    internal Asn1Encodable obj;
    public int TagNo { get; }
    protected Asn1TaggedObject(int tagNo, Asn1Encodable obj);
    protected Asn1TaggedObject(bool explicitly, int tagNo, Asn1Encodable obj);
    internal static bool IsConstructed(bool isExplicit, Asn1Object obj);
    public static Asn1TaggedObject GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static Asn1TaggedObject GetInstance(object obj);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
    public sealed virtual int get_TagNo();
    public bool IsExplicit();
    public bool IsEmpty();
    public Asn1Object GetObject();
    public sealed virtual IAsn1Convertible GetObjectParser(int tag, bool isExplicit);
    public virtual string ToString();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1TaggedObjectParser {
    public int TagNo { get; }
    public abstract virtual int get_TagNo();
    public abstract virtual IAsn1Convertible GetObjectParser(int tag, bool isExplicit);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Asn1Tags : object {
    public static int Boolean;
    public static int Integer;
    public static int BitString;
    public static int OctetString;
    public static int Null;
    public static int ObjectIdentifier;
    public static int External;
    public static int Enumerated;
    public static int Sequence;
    public static int SequenceOf;
    public static int Set;
    public static int SetOf;
    public static int NumericString;
    public static int PrintableString;
    public static int T61String;
    public static int VideotexString;
    public static int IA5String;
    public static int UtcTime;
    public static int GeneralizedTime;
    public static int GraphicString;
    public static int VisibleString;
    public static int GeneralString;
    public static int UniversalString;
    public static int BmpString;
    public static int Utf8String;
    public static int Constructed;
    public static int Application;
    public static int Tagged;
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.BC.BCObjectIdentifiers : object {
    public static DerObjectIdentifier bc;
    public static DerObjectIdentifier bc_pbe;
    public static DerObjectIdentifier bc_pbe_sha1;
    public static DerObjectIdentifier bc_pbe_sha256;
    public static DerObjectIdentifier bc_pbe_sha384;
    public static DerObjectIdentifier bc_pbe_sha512;
    public static DerObjectIdentifier bc_pbe_sha224;
    public static DerObjectIdentifier bc_pbe_sha1_pkcs5;
    public static DerObjectIdentifier bc_pbe_sha1_pkcs12;
    public static DerObjectIdentifier bc_pbe_sha256_pkcs5;
    public static DerObjectIdentifier bc_pbe_sha256_pkcs12;
    public static DerObjectIdentifier bc_pbe_sha1_pkcs12_aes128_cbc;
    public static DerObjectIdentifier bc_pbe_sha1_pkcs12_aes192_cbc;
    public static DerObjectIdentifier bc_pbe_sha1_pkcs12_aes256_cbc;
    public static DerObjectIdentifier bc_pbe_sha256_pkcs12_aes128_cbc;
    public static DerObjectIdentifier bc_pbe_sha256_pkcs12_aes192_cbc;
    public static DerObjectIdentifier bc_pbe_sha256_pkcs12_aes256_cbc;
    public static DerObjectIdentifier bc_sig;
    public static DerObjectIdentifier sphincs256;
    public static DerObjectIdentifier sphincs256_with_BLAKE512;
    public static DerObjectIdentifier sphincs256_with_SHA512;
    public static DerObjectIdentifier sphincs256_with_SHA3_512;
    public static DerObjectIdentifier xmss;
    public static DerObjectIdentifier xmss_with_SHA256;
    public static DerObjectIdentifier xmss_with_SHA512;
    public static DerObjectIdentifier xmss_with_SHAKE128;
    public static DerObjectIdentifier xmss_with_SHAKE256;
    public static DerObjectIdentifier xmss_mt;
    public static DerObjectIdentifier xmss_mt_with_SHA256;
    public static DerObjectIdentifier xmss_mt_with_SHA512;
    public static DerObjectIdentifier xmss_mt_with_SHAKE128;
    public static DerObjectIdentifier xmss_mt_with_SHAKE256;
    public static DerObjectIdentifier bc_exch;
    public static DerObjectIdentifier newHope;
    private static BCObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerApplicationSpecific : DerApplicationSpecific {
    public BerApplicationSpecific(int tagNo, Asn1EncodableVector vec);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerApplicationSpecificParser : object {
    private int tag;
    private Asn1StreamParser parser;
    internal BerApplicationSpecificParser(int tag, Asn1StreamParser parser);
    public sealed virtual IAsn1Convertible ReadObject();
    public sealed virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerBitString : DerBitString {
    public BerBitString(Byte[] data, int padBits);
    public BerBitString(Byte[] data);
    public BerBitString(int namedBits);
    public BerBitString(Asn1Encodable obj);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerGenerator : Asn1Generator {
    private bool _tagged;
    private bool _isExplicit;
    private int _tagNo;
    protected BerGenerator(Stream outStream);
    public BerGenerator(Stream outStream, int tagNo, bool isExplicit);
    public virtual void AddObject(Asn1Encodable obj);
    public virtual Stream GetRawOutputStream();
    public virtual void Close();
    private void WriteHdr(int tag);
    protected void WriteBerHeader(int tag);
    protected void WriteBerBody(Stream contentStream);
    protected void WriteBerEnd();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerNull : DerNull {
    public static BerNull Instance;
    private BerNull(int dummy);
    private static BerNull();
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerOctetString : DerOctetString {
    private static int MaxLength;
    private IEnumerable octs;
    public BerOctetString(Byte[] str);
    public BerOctetString(IEnumerable octets);
    public BerOctetString(Asn1Object obj);
    public BerOctetString(Asn1Encodable obj);
    public static BerOctetString FromSequence(Asn1Sequence seq);
    private static Byte[] ToBytes(IEnumerable octs);
    public virtual Byte[] GetOctets();
    public sealed virtual IEnumerator GetEnumerator();
    [ObsoleteAttribute("Use GetEnumerator() instead")]
public IEnumerator GetObjects();
    private IList GenerateOcts();
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerOctetStringGenerator : BerGenerator {
    public BerOctetStringGenerator(Stream outStream);
    public BerOctetStringGenerator(Stream outStream, int tagNo, bool isExplicit);
    public Stream GetOctetOutputStream();
    public Stream GetOctetOutputStream(int bufSize);
    public Stream GetOctetOutputStream(Byte[] buf);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerOctetStringParser : object {
    private Asn1StreamParser _parser;
    internal BerOctetStringParser(Asn1StreamParser parser);
    public sealed virtual Stream GetOctetStream();
    public sealed virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerOutputStream : DerOutputStream {
    public BerOutputStream(Stream os);
    [ObsoleteAttribute("Use version taking an Asn1Encodable arg instead")]
public virtual void WriteObject(object obj);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerSequence : DerSequence {
    public static BerSequence Empty;
    public BerSequence(Asn1Encodable obj);
    public BerSequence(Asn1Encodable[] v);
    public BerSequence(Asn1EncodableVector v);
    private static BerSequence();
    public static BerSequence FromVector(Asn1EncodableVector v);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerSequenceGenerator : BerGenerator {
    public BerSequenceGenerator(Stream outStream);
    public BerSequenceGenerator(Stream outStream, int tagNo, bool isExplicit);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerSequenceParser : object {
    private Asn1StreamParser _parser;
    internal BerSequenceParser(Asn1StreamParser parser);
    public sealed virtual IAsn1Convertible ReadObject();
    public sealed virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerSet : DerSet {
    public static BerSet Empty;
    public BerSet(Asn1Encodable obj);
    public BerSet(Asn1EncodableVector v);
    internal BerSet(Asn1EncodableVector v, bool needsSorting);
    private static BerSet();
    public static BerSet FromVector(Asn1EncodableVector v);
    internal static BerSet FromVector(Asn1EncodableVector v, bool needsSorting);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerSetGenerator : BerGenerator {
    public BerSetGenerator(Stream outStream);
    public BerSetGenerator(Stream outStream, int tagNo, bool isExplicit);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerSetParser : object {
    private Asn1StreamParser _parser;
    internal BerSetParser(Asn1StreamParser parser);
    public sealed virtual IAsn1Convertible ReadObject();
    public sealed virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerTaggedObject : DerTaggedObject {
    public BerTaggedObject(int tagNo, Asn1Encodable obj);
    public BerTaggedObject(bool explicitly, int tagNo, Asn1Encodable obj);
    public BerTaggedObject(int tagNo);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.BerTaggedObjectParser : object {
    private bool _constructed;
    private int _tagNumber;
    private Asn1StreamParser _parser;
    public bool IsConstructed { get; }
    public int TagNo { get; }
    [ObsoleteAttribute]
internal BerTaggedObjectParser(int baseTag, int tagNumber, Stream contentStream);
    internal BerTaggedObjectParser(bool constructed, int tagNumber, Asn1StreamParser parser);
    public bool get_IsConstructed();
    public sealed virtual int get_TagNo();
    public sealed virtual IAsn1Convertible GetObjectParser(int tag, bool isExplicit);
    public sealed virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Bsi.BsiObjectIdentifiers : object {
    public static DerObjectIdentifier bsi_de;
    public static DerObjectIdentifier id_ecc;
    public static DerObjectIdentifier ecdsa_plain_signatures;
    public static DerObjectIdentifier ecdsa_plain_SHA1;
    public static DerObjectIdentifier ecdsa_plain_SHA224;
    public static DerObjectIdentifier ecdsa_plain_SHA256;
    public static DerObjectIdentifier ecdsa_plain_SHA384;
    public static DerObjectIdentifier ecdsa_plain_SHA512;
    public static DerObjectIdentifier ecdsa_plain_RIPEMD160;
    public static DerObjectIdentifier algorithm;
    public static DerObjectIdentifier ecka_eg;
    public static DerObjectIdentifier ecka_eg_X963kdf;
    public static DerObjectIdentifier ecka_eg_X963kdf_SHA1;
    public static DerObjectIdentifier ecka_eg_X963kdf_SHA224;
    public static DerObjectIdentifier ecka_eg_X963kdf_SHA256;
    public static DerObjectIdentifier ecka_eg_X963kdf_SHA384;
    public static DerObjectIdentifier ecka_eg_X963kdf_SHA512;
    public static DerObjectIdentifier ecka_eg_X963kdf_RIPEMD160;
    public static DerObjectIdentifier ecka_eg_SessionKDF;
    public static DerObjectIdentifier ecka_eg_SessionKDF_3DES;
    public static DerObjectIdentifier ecka_eg_SessionKDF_AES128;
    public static DerObjectIdentifier ecka_eg_SessionKDF_AES192;
    public static DerObjectIdentifier ecka_eg_SessionKDF_AES256;
    private static BsiObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cmp.PkiFailureInfo : DerBitString {
    public static int BadAlg;
    public static int BadMessageCheck;
    public static int BadRequest;
    public static int BadTime;
    public static int BadCertId;
    public static int BadDataFormat;
    public static int WrongAuthority;
    public static int IncorrectData;
    public static int MissingTimeStamp;
    public static int BadPop;
    public static int CertRevoked;
    public static int CertConfirmed;
    public static int WrongIntegrity;
    public static int BadRecipientNonce;
    public static int TimeNotAvailable;
    public static int UnacceptedPolicy;
    public static int UnacceptedExtension;
    public static int AddInfoNotAvailable;
    public static int BadSenderNonce;
    public static int BadCertTemplate;
    public static int SignerNotTrusted;
    public static int TransactionIdInUse;
    public static int UnsupportedVersion;
    public static int NotAuthorized;
    public static int SystemUnavail;
    public static int SystemFailure;
    public static int DuplicateCertReq;
    public PkiFailureInfo(int info);
    public PkiFailureInfo(DerBitString info);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cmp.PkiFreeText : Asn1Encodable {
    internal Asn1Sequence strings;
    [ObsoleteAttribute("Use 'Count' property instead")]
public int Size { get; }
    public int Count { get; }
    public DerUtf8String Item { get; }
    public PkiFreeText(Asn1Sequence seq);
    public PkiFreeText(DerUtf8String p);
    public static PkiFreeText GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static PkiFreeText GetInstance(object obj);
    public int get_Size();
    public int get_Count();
    public DerUtf8String get_Item(int index);
    [ObsoleteAttribute("Use 'object[index]' syntax instead")]
public DerUtf8String GetStringAt(int index);
    public virtual Asn1Object ToAsn1Object();
}
public enum DevExpress.Pdf.Native.BouncyCastle.Asn1.Cmp.PkiStatus : Enum {
    public int value__;
    public static PkiStatus Granted;
    public static PkiStatus GrantedWithMods;
    public static PkiStatus Rejection;
    public static PkiStatus Waiting;
    public static PkiStatus RevocationWarning;
    public static PkiStatus RevocationNotification;
    public static PkiStatus KeyUpdateWarning;
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cmp.PkiStatusEncodable : Asn1Encodable {
    public static PkiStatusEncodable granted;
    public static PkiStatusEncodable grantedWithMods;
    public static PkiStatusEncodable rejection;
    public static PkiStatusEncodable waiting;
    public static PkiStatusEncodable revocationWarning;
    public static PkiStatusEncodable revocationNotification;
    public static PkiStatusEncodable keyUpdateWaiting;
    private DerInteger status;
    public BigInteger Value { get; }
    private PkiStatusEncodable(PkiStatus status);
    private PkiStatusEncodable(DerInteger status);
    private static PkiStatusEncodable();
    public static PkiStatusEncodable GetInstance(object obj);
    public virtual BigInteger get_Value();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cmp.PkiStatusInfo : Asn1Encodable {
    private DerInteger status;
    private PkiFreeText statusString;
    private DerBitString failInfo;
    public BigInteger Status { get; }
    public PkiFreeText StatusString { get; }
    public DerBitString FailInfo { get; }
    public PkiStatusInfo(Asn1Sequence seq);
    public PkiStatusInfo(int status);
    public PkiStatusInfo(int status, PkiFreeText statusString);
    public PkiStatusInfo(int status, PkiFreeText statusString, PkiFailureInfo failInfo);
    public static PkiStatusInfo GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static PkiStatusInfo GetInstance(object obj);
    public BigInteger get_Status();
    public PkiFreeText get_StatusString();
    public DerBitString get_FailInfo();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.Attribute : Asn1Encodable {
    private DerObjectIdentifier attrType;
    private Asn1Set attrValues;
    public DerObjectIdentifier AttrType { get; }
    public Asn1Set AttrValues { get; }
    public Attribute(Asn1Sequence seq);
    public Attribute(DerObjectIdentifier attrType, Asn1Set attrValues);
    public static Attribute GetInstance(object obj);
    public DerObjectIdentifier get_AttrType();
    public Asn1Set get_AttrValues();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.Attributes : Asn1Encodable {
    private Asn1Set attributes;
    private Attributes(Asn1Set attributes);
    public Attributes(Asn1EncodableVector v);
    public static Attributes GetInstance(object obj);
    public virtual Attribute[] GetAttributes();
    public virtual Asn1Object ToAsn1Object();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.AttributeTable : object {
    private IDictionary attributes;
    public Attribute Item { get; }
    public int Count { get; }
    [ObsoleteAttribute]
public AttributeTable(Hashtable attrs);
    public AttributeTable(IDictionary attrs);
    public AttributeTable(Asn1EncodableVector v);
    public AttributeTable(Asn1Set s);
    public AttributeTable(Attributes attrs);
    private void AddAttribute(Attribute a);
    public Attribute get_Item(DerObjectIdentifier oid);
    [ObsoleteAttribute("Use 'object[oid]' syntax instead")]
public Attribute Get(DerObjectIdentifier oid);
    public Asn1EncodableVector GetAll(DerObjectIdentifier oid);
    public int get_Count();
    public IDictionary ToDictionary();
    [ObsoleteAttribute("Use 'ToDictionary' instead")]
public Hashtable ToHashtable();
    public Asn1EncodableVector ToAsn1EncodableVector();
    public Attributes ToAttributes();
    public AttributeTable Add(DerObjectIdentifier attrType, Asn1Encodable attrValue);
    public AttributeTable Remove(DerObjectIdentifier attrType);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.AuthenticatedData : Asn1Encodable {
    private DerInteger version;
    private OriginatorInfo originatorInfo;
    private Asn1Set recipientInfos;
    private AlgorithmIdentifier macAlgorithm;
    private AlgorithmIdentifier digestAlgorithm;
    private ContentInfo encapsulatedContentInfo;
    private Asn1Set authAttrs;
    private Asn1OctetString mac;
    private Asn1Set unauthAttrs;
    public DerInteger Version { get; }
    public OriginatorInfo OriginatorInfo { get; }
    public Asn1Set RecipientInfos { get; }
    public AlgorithmIdentifier MacAlgorithm { get; }
    public AlgorithmIdentifier DigestAlgorithm { get; }
    public ContentInfo EncapsulatedContentInfo { get; }
    public Asn1Set AuthAttrs { get; }
    public Asn1OctetString Mac { get; }
    public Asn1Set UnauthAttrs { get; }
    public AuthenticatedData(OriginatorInfo originatorInfo, Asn1Set recipientInfos, AlgorithmIdentifier macAlgorithm, AlgorithmIdentifier digestAlgorithm, ContentInfo encapsulatedContent, Asn1Set authAttrs, Asn1OctetString mac, Asn1Set unauthAttrs);
    private AuthenticatedData(Asn1Sequence seq);
    public static AuthenticatedData GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static AuthenticatedData GetInstance(object obj);
    public DerInteger get_Version();
    public OriginatorInfo get_OriginatorInfo();
    public Asn1Set get_RecipientInfos();
    public AlgorithmIdentifier get_MacAlgorithm();
    public AlgorithmIdentifier get_DigestAlgorithm();
    public ContentInfo get_EncapsulatedContentInfo();
    public Asn1Set get_AuthAttrs();
    public Asn1OctetString get_Mac();
    public Asn1Set get_UnauthAttrs();
    public virtual Asn1Object ToAsn1Object();
    public static int CalculateVersion(OriginatorInfo origInfo);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.AuthenticatedDataParser : object {
    private Asn1SequenceParser seq;
    private DerInteger version;
    private IAsn1Convertible nextObject;
    private bool originatorInfoCalled;
    public DerInteger Version { get; }
    public AuthenticatedDataParser(Asn1SequenceParser seq);
    public DerInteger get_Version();
    public OriginatorInfo GetOriginatorInfo();
    public Asn1SetParser GetRecipientInfos();
    public AlgorithmIdentifier GetMacAlgorithm();
    public AlgorithmIdentifier GetDigestAlgorithm();
    public ContentInfoParser GetEnapsulatedContentInfo();
    public Asn1SetParser GetAuthAttrs();
    public Asn1OctetString GetMac();
    public Asn1SetParser GetUnauthAttrs();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.AuthEnvelopedData : Asn1Encodable {
    private DerInteger version;
    private OriginatorInfo originatorInfo;
    private Asn1Set recipientInfos;
    private EncryptedContentInfo authEncryptedContentInfo;
    private Asn1Set authAttrs;
    private Asn1OctetString mac;
    private Asn1Set unauthAttrs;
    public DerInteger Version { get; }
    public OriginatorInfo OriginatorInfo { get; }
    public Asn1Set RecipientInfos { get; }
    public EncryptedContentInfo AuthEncryptedContentInfo { get; }
    public Asn1Set AuthAttrs { get; }
    public Asn1OctetString Mac { get; }
    public Asn1Set UnauthAttrs { get; }
    public AuthEnvelopedData(OriginatorInfo originatorInfo, Asn1Set recipientInfos, EncryptedContentInfo authEncryptedContentInfo, Asn1Set authAttrs, Asn1OctetString mac, Asn1Set unauthAttrs);
    private AuthEnvelopedData(Asn1Sequence seq);
    public static AuthEnvelopedData GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static AuthEnvelopedData GetInstance(object obj);
    public DerInteger get_Version();
    public OriginatorInfo get_OriginatorInfo();
    public Asn1Set get_RecipientInfos();
    public EncryptedContentInfo get_AuthEncryptedContentInfo();
    public Asn1Set get_AuthAttrs();
    public Asn1OctetString get_Mac();
    public Asn1Set get_UnauthAttrs();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser : object {
    private Asn1SequenceParser seq;
    private DerInteger version;
    private IAsn1Convertible nextObject;
    private bool originatorInfoCalled;
    public DerInteger Version { get; }
    public AuthEnvelopedDataParser(Asn1SequenceParser seq);
    public DerInteger get_Version();
    public OriginatorInfo GetOriginatorInfo();
    public Asn1SetParser GetRecipientInfos();
    public EncryptedContentInfoParser GetAuthEncryptedContentInfo();
    public Asn1SetParser GetAuthAttrs();
    public Asn1OctetString GetMac();
    public Asn1SetParser GetUnauthAttrs();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.CmsAttributes : object {
    public static DerObjectIdentifier ContentType;
    public static DerObjectIdentifier MessageDigest;
    public static DerObjectIdentifier SigningTime;
    public static DerObjectIdentifier CounterSignature;
    public static DerObjectIdentifier ContentHint;
    private static CmsAttributes();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers : object {
    public static DerObjectIdentifier Data;
    public static DerObjectIdentifier SignedData;
    public static DerObjectIdentifier EnvelopedData;
    public static DerObjectIdentifier SignedAndEnvelopedData;
    public static DerObjectIdentifier DigestedData;
    public static DerObjectIdentifier EncryptedData;
    public static DerObjectIdentifier AuthenticatedData;
    public static DerObjectIdentifier CompressedData;
    public static DerObjectIdentifier AuthEnvelopedData;
    public static DerObjectIdentifier timestampedData;
    public static DerObjectIdentifier id_ri;
    public static DerObjectIdentifier id_ri_ocsp_response;
    public static DerObjectIdentifier id_ri_scvp;
    private static CmsObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.CompressedData : Asn1Encodable {
    private DerInteger version;
    private AlgorithmIdentifier compressionAlgorithm;
    private ContentInfo encapContentInfo;
    public DerInteger Version { get; }
    public AlgorithmIdentifier CompressionAlgorithmIdentifier { get; }
    public ContentInfo EncapContentInfo { get; }
    public CompressedData(AlgorithmIdentifier compressionAlgorithm, ContentInfo encapContentInfo);
    public CompressedData(Asn1Sequence seq);
    public static CompressedData GetInstance(Asn1TaggedObject ato, bool explicitly);
    public static CompressedData GetInstance(object obj);
    public DerInteger get_Version();
    public AlgorithmIdentifier get_CompressionAlgorithmIdentifier();
    public ContentInfo get_EncapContentInfo();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.CompressedDataParser : object {
    private DerInteger _version;
    private AlgorithmIdentifier _compressionAlgorithm;
    private ContentInfoParser _encapContentInfo;
    public DerInteger Version { get; }
    public AlgorithmIdentifier CompressionAlgorithmIdentifier { get; }
    public CompressedDataParser(Asn1SequenceParser seq);
    public DerInteger get_Version();
    public AlgorithmIdentifier get_CompressionAlgorithmIdentifier();
    public ContentInfoParser GetEncapContentInfo();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.ContentInfo : Asn1Encodable {
    private DerObjectIdentifier contentType;
    private Asn1Encodable content;
    public DerObjectIdentifier ContentType { get; }
    public Asn1Encodable Content { get; }
    private ContentInfo(Asn1Sequence seq);
    public ContentInfo(DerObjectIdentifier contentType, Asn1Encodable content);
    public static ContentInfo GetInstance(object obj);
    public static ContentInfo GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public DerObjectIdentifier get_ContentType();
    public Asn1Encodable get_Content();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.ContentInfoParser : object {
    private DerObjectIdentifier contentType;
    private Asn1TaggedObjectParser content;
    public DerObjectIdentifier ContentType { get; }
    public ContentInfoParser(Asn1SequenceParser seq);
    public DerObjectIdentifier get_ContentType();
    public IAsn1Convertible GetContent(int tag);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial : Asn1Encodable {
    private OriginatorPublicKey ephemeralPublicKey;
    private Asn1OctetString addedukm;
    public OriginatorPublicKey EphemeralPublicKey { get; }
    public Asn1OctetString AddedUkm { get; }
    public MQVuserKeyingMaterial(OriginatorPublicKey ephemeralPublicKey, Asn1OctetString addedukm);
    private MQVuserKeyingMaterial(Asn1Sequence seq);
    public static MQVuserKeyingMaterial GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static MQVuserKeyingMaterial GetInstance(object obj);
    public OriginatorPublicKey get_EphemeralPublicKey();
    public Asn1OctetString get_AddedUkm();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.EncryptedContentInfo : Asn1Encodable {
    private DerObjectIdentifier contentType;
    private AlgorithmIdentifier contentEncryptionAlgorithm;
    private Asn1OctetString encryptedContent;
    public DerObjectIdentifier ContentType { get; }
    public AlgorithmIdentifier ContentEncryptionAlgorithm { get; }
    public Asn1OctetString EncryptedContent { get; }
    public EncryptedContentInfo(DerObjectIdentifier contentType, AlgorithmIdentifier contentEncryptionAlgorithm, Asn1OctetString encryptedContent);
    public EncryptedContentInfo(Asn1Sequence seq);
    public static EncryptedContentInfo GetInstance(object obj);
    public DerObjectIdentifier get_ContentType();
    public AlgorithmIdentifier get_ContentEncryptionAlgorithm();
    public Asn1OctetString get_EncryptedContent();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser : object {
    private DerObjectIdentifier _contentType;
    private AlgorithmIdentifier _contentEncryptionAlgorithm;
    private Asn1TaggedObjectParser _encryptedContent;
    public DerObjectIdentifier ContentType { get; }
    public AlgorithmIdentifier ContentEncryptionAlgorithm { get; }
    public EncryptedContentInfoParser(Asn1SequenceParser seq);
    public DerObjectIdentifier get_ContentType();
    public AlgorithmIdentifier get_ContentEncryptionAlgorithm();
    public IAsn1Convertible GetEncryptedContent(int tag);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.EncryptedData : Asn1Encodable {
    private DerInteger version;
    private EncryptedContentInfo encryptedContentInfo;
    private Asn1Set unprotectedAttrs;
    public DerInteger Version { get; }
    public EncryptedContentInfo EncryptedContentInfo { get; }
    public Asn1Set UnprotectedAttrs { get; }
    public EncryptedData(EncryptedContentInfo encInfo);
    public EncryptedData(EncryptedContentInfo encInfo, Asn1Set unprotectedAttrs);
    private EncryptedData(Asn1Sequence seq);
    public static EncryptedData GetInstance(object obj);
    public virtual DerInteger get_Version();
    public virtual EncryptedContentInfo get_EncryptedContentInfo();
    public virtual Asn1Set get_UnprotectedAttrs();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.EnvelopedData : Asn1Encodable {
    private DerInteger version;
    private OriginatorInfo originatorInfo;
    private Asn1Set recipientInfos;
    private EncryptedContentInfo encryptedContentInfo;
    private Asn1Set unprotectedAttrs;
    public DerInteger Version { get; }
    public OriginatorInfo OriginatorInfo { get; }
    public Asn1Set RecipientInfos { get; }
    public EncryptedContentInfo EncryptedContentInfo { get; }
    public Asn1Set UnprotectedAttrs { get; }
    public EnvelopedData(OriginatorInfo originatorInfo, Asn1Set recipientInfos, EncryptedContentInfo encryptedContentInfo, Asn1Set unprotectedAttrs);
    public EnvelopedData(OriginatorInfo originatorInfo, Asn1Set recipientInfos, EncryptedContentInfo encryptedContentInfo, Attributes unprotectedAttrs);
    public EnvelopedData(Asn1Sequence seq);
    public static EnvelopedData GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static EnvelopedData GetInstance(object obj);
    public DerInteger get_Version();
    public OriginatorInfo get_OriginatorInfo();
    public Asn1Set get_RecipientInfos();
    public EncryptedContentInfo get_EncryptedContentInfo();
    public Asn1Set get_UnprotectedAttrs();
    public virtual Asn1Object ToAsn1Object();
    public static int CalculateVersion(OriginatorInfo originatorInfo, Asn1Set recipientInfos, Asn1Set unprotectedAttrs);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.EnvelopedDataParser : object {
    private Asn1SequenceParser _seq;
    private DerInteger _version;
    private IAsn1Convertible _nextObject;
    private bool _originatorInfoCalled;
    public DerInteger Version { get; }
    public EnvelopedDataParser(Asn1SequenceParser seq);
    public DerInteger get_Version();
    public OriginatorInfo GetOriginatorInfo();
    public Asn1SetParser GetRecipientInfos();
    public EncryptedContentInfoParser GetEncryptedContentInfo();
    public Asn1SetParser GetUnprotectedAttrs();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.Evidence : Asn1Encodable {
    private TimeStampTokenEvidence tstEvidence;
    public TimeStampTokenEvidence TstEvidence { get; }
    public Evidence(TimeStampTokenEvidence tstEvidence);
    private Evidence(Asn1TaggedObject tagged);
    public static Evidence GetInstance(object obj);
    public virtual TimeStampTokenEvidence get_TstEvidence();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.IssuerAndSerialNumber : Asn1Encodable {
    private X509Name name;
    private DerInteger serialNumber;
    public X509Name Name { get; }
    public DerInteger SerialNumber { get; }
    public IssuerAndSerialNumber(Asn1Sequence seq);
    public IssuerAndSerialNumber(X509Name name, BigInteger serialNumber);
    public IssuerAndSerialNumber(X509Name name, DerInteger serialNumber);
    public static IssuerAndSerialNumber GetInstance(object obj);
    public X509Name get_Name();
    public DerInteger get_SerialNumber();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.KekIdentifier : Asn1Encodable {
    private Asn1OctetString keyIdentifier;
    private DerGeneralizedTime date;
    private OtherKeyAttribute other;
    public Asn1OctetString KeyIdentifier { get; }
    public DerGeneralizedTime Date { get; }
    public OtherKeyAttribute Other { get; }
    public KekIdentifier(Byte[] keyIdentifier, DerGeneralizedTime date, OtherKeyAttribute other);
    public KekIdentifier(Asn1Sequence seq);
    public static KekIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static KekIdentifier GetInstance(object obj);
    public Asn1OctetString get_KeyIdentifier();
    public DerGeneralizedTime get_Date();
    public OtherKeyAttribute get_Other();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.KekRecipientInfo : Asn1Encodable {
    private DerInteger version;
    private KekIdentifier kekID;
    private AlgorithmIdentifier keyEncryptionAlgorithm;
    private Asn1OctetString encryptedKey;
    public DerInteger Version { get; }
    public KekIdentifier KekID { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Asn1OctetString EncryptedKey { get; }
    public KekRecipientInfo(KekIdentifier kekID, AlgorithmIdentifier keyEncryptionAlgorithm, Asn1OctetString encryptedKey);
    public KekRecipientInfo(Asn1Sequence seq);
    public static KekRecipientInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static KekRecipientInfo GetInstance(object obj);
    public DerInteger get_Version();
    public KekIdentifier get_KekID();
    public AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public Asn1OctetString get_EncryptedKey();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier : Asn1Encodable {
    private IssuerAndSerialNumber issuerSerial;
    private RecipientKeyIdentifier rKeyID;
    public IssuerAndSerialNumber IssuerAndSerialNumber { get; }
    public RecipientKeyIdentifier RKeyID { get; }
    public KeyAgreeRecipientIdentifier(IssuerAndSerialNumber issuerSerial);
    public KeyAgreeRecipientIdentifier(RecipientKeyIdentifier rKeyID);
    public static KeyAgreeRecipientIdentifier GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static KeyAgreeRecipientIdentifier GetInstance(object obj);
    public IssuerAndSerialNumber get_IssuerAndSerialNumber();
    public RecipientKeyIdentifier get_RKeyID();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo : Asn1Encodable {
    private DerInteger version;
    private OriginatorIdentifierOrKey originator;
    private Asn1OctetString ukm;
    private AlgorithmIdentifier keyEncryptionAlgorithm;
    private Asn1Sequence recipientEncryptedKeys;
    public DerInteger Version { get; }
    public OriginatorIdentifierOrKey Originator { get; }
    public Asn1OctetString UserKeyingMaterial { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Asn1Sequence RecipientEncryptedKeys { get; }
    public KeyAgreeRecipientInfo(OriginatorIdentifierOrKey originator, Asn1OctetString ukm, AlgorithmIdentifier keyEncryptionAlgorithm, Asn1Sequence recipientEncryptedKeys);
    public KeyAgreeRecipientInfo(Asn1Sequence seq);
    public static KeyAgreeRecipientInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static KeyAgreeRecipientInfo GetInstance(object obj);
    public DerInteger get_Version();
    public OriginatorIdentifierOrKey get_Originator();
    public Asn1OctetString get_UserKeyingMaterial();
    public AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public Asn1Sequence get_RecipientEncryptedKeys();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo : Asn1Encodable {
    private DerInteger version;
    private RecipientIdentifier rid;
    private AlgorithmIdentifier keyEncryptionAlgorithm;
    private Asn1OctetString encryptedKey;
    public DerInteger Version { get; }
    public RecipientIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Asn1OctetString EncryptedKey { get; }
    public KeyTransRecipientInfo(RecipientIdentifier rid, AlgorithmIdentifier keyEncryptionAlgorithm, Asn1OctetString encryptedKey);
    public KeyTransRecipientInfo(Asn1Sequence seq);
    public static KeyTransRecipientInfo GetInstance(object obj);
    public DerInteger get_Version();
    public RecipientIdentifier get_RecipientIdentifier();
    public AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public Asn1OctetString get_EncryptedKey();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.MetaData : Asn1Encodable {
    private DerBoolean hashProtected;
    private DerUtf8String fileName;
    private DerIA5String mediaType;
    private Attributes otherMetaData;
    public bool IsHashProtected { get; }
    public DerUtf8String FileName { get; }
    public DerIA5String MediaType { get; }
    public Attributes OtherMetaData { get; }
    public MetaData(DerBoolean hashProtected, DerUtf8String fileName, DerIA5String mediaType, Attributes otherMetaData);
    private MetaData(Asn1Sequence seq);
    public static MetaData GetInstance(object obj);
    public virtual Asn1Object ToAsn1Object();
    public virtual bool get_IsHashProtected();
    public virtual DerUtf8String get_FileName();
    public virtual DerIA5String get_MediaType();
    public virtual Attributes get_OtherMetaData();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey : Asn1Encodable {
    private Asn1Encodable id;
    public Asn1Encodable ID { get; }
    public IssuerAndSerialNumber IssuerAndSerialNumber { get; }
    public SubjectKeyIdentifier SubjectKeyIdentifier { get; }
    [ObsoleteAttribute("Use 'OriginatorPublicKey' property")]
public OriginatorPublicKey OriginatorKey { get; }
    public OriginatorPublicKey OriginatorPublicKey { get; }
    public OriginatorIdentifierOrKey(IssuerAndSerialNumber id);
    [ObsoleteAttribute("Use version taking a 'SubjectKeyIdentifier'")]
public OriginatorIdentifierOrKey(Asn1OctetString id);
    public OriginatorIdentifierOrKey(SubjectKeyIdentifier id);
    public OriginatorIdentifierOrKey(OriginatorPublicKey id);
    [ObsoleteAttribute("Use more specific version")]
public OriginatorIdentifierOrKey(Asn1Object id);
    private OriginatorIdentifierOrKey(Asn1TaggedObject id);
    public static OriginatorIdentifierOrKey GetInstance(Asn1TaggedObject o, bool explicitly);
    public static OriginatorIdentifierOrKey GetInstance(object o);
    public Asn1Encodable get_ID();
    public IssuerAndSerialNumber get_IssuerAndSerialNumber();
    public SubjectKeyIdentifier get_SubjectKeyIdentifier();
    public OriginatorPublicKey get_OriginatorKey();
    public OriginatorPublicKey get_OriginatorPublicKey();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.OriginatorInfo : Asn1Encodable {
    private Asn1Set certs;
    private Asn1Set crls;
    public Asn1Set Certificates { get; }
    public Asn1Set Crls { get; }
    public OriginatorInfo(Asn1Set certs, Asn1Set crls);
    public OriginatorInfo(Asn1Sequence seq);
    public static OriginatorInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static OriginatorInfo GetInstance(object obj);
    public Asn1Set get_Certificates();
    public Asn1Set get_Crls();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.OriginatorPublicKey : Asn1Encodable {
    private AlgorithmIdentifier mAlgorithm;
    private DerBitString mPublicKey;
    public AlgorithmIdentifier Algorithm { get; }
    public DerBitString PublicKey { get; }
    public OriginatorPublicKey(AlgorithmIdentifier algorithm, Byte[] publicKey);
    public OriginatorPublicKey(Asn1Sequence seq);
    public static OriginatorPublicKey GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static OriginatorPublicKey GetInstance(object obj);
    public AlgorithmIdentifier get_Algorithm();
    public DerBitString get_PublicKey();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.OtherKeyAttribute : Asn1Encodable {
    private DerObjectIdentifier keyAttrId;
    private Asn1Encodable keyAttr;
    public DerObjectIdentifier KeyAttrId { get; }
    public Asn1Encodable KeyAttr { get; }
    public OtherKeyAttribute(Asn1Sequence seq);
    public OtherKeyAttribute(DerObjectIdentifier keyAttrId, Asn1Encodable keyAttr);
    public static OtherKeyAttribute GetInstance(object obj);
    public DerObjectIdentifier get_KeyAttrId();
    public Asn1Encodable get_KeyAttr();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.OtherRecipientInfo : Asn1Encodable {
    private DerObjectIdentifier oriType;
    private Asn1Encodable oriValue;
    public DerObjectIdentifier OriType { get; }
    public Asn1Encodable OriValue { get; }
    public OtherRecipientInfo(DerObjectIdentifier oriType, Asn1Encodable oriValue);
    public OtherRecipientInfo(Asn1Sequence seq);
    public static OtherRecipientInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static OtherRecipientInfo GetInstance(object obj);
    public virtual DerObjectIdentifier get_OriType();
    public virtual Asn1Encodable get_OriValue();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat : Asn1Encodable {
    private DerObjectIdentifier otherRevInfoFormat;
    private Asn1Encodable otherRevInfo;
    public DerObjectIdentifier InfoFormat { get; }
    public Asn1Encodable Info { get; }
    public OtherRevocationInfoFormat(DerObjectIdentifier otherRevInfoFormat, Asn1Encodable otherRevInfo);
    private OtherRevocationInfoFormat(Asn1Sequence seq);
    public static OtherRevocationInfoFormat GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static OtherRevocationInfoFormat GetInstance(object obj);
    public virtual DerObjectIdentifier get_InfoFormat();
    public virtual Asn1Encodable get_Info();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.PasswordRecipientInfo : Asn1Encodable {
    private DerInteger version;
    private AlgorithmIdentifier keyDerivationAlgorithm;
    private AlgorithmIdentifier keyEncryptionAlgorithm;
    private Asn1OctetString encryptedKey;
    public DerInteger Version { get; }
    public AlgorithmIdentifier KeyDerivationAlgorithm { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Asn1OctetString EncryptedKey { get; }
    public PasswordRecipientInfo(AlgorithmIdentifier keyEncryptionAlgorithm, Asn1OctetString encryptedKey);
    public PasswordRecipientInfo(AlgorithmIdentifier keyDerivationAlgorithm, AlgorithmIdentifier keyEncryptionAlgorithm, Asn1OctetString encryptedKey);
    public PasswordRecipientInfo(Asn1Sequence seq);
    public static PasswordRecipientInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static PasswordRecipientInfo GetInstance(object obj);
    public DerInteger get_Version();
    public AlgorithmIdentifier get_KeyDerivationAlgorithm();
    public AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public Asn1OctetString get_EncryptedKey();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.RecipientEncryptedKey : Asn1Encodable {
    private KeyAgreeRecipientIdentifier identifier;
    private Asn1OctetString encryptedKey;
    public KeyAgreeRecipientIdentifier Identifier { get; }
    public Asn1OctetString EncryptedKey { get; }
    private RecipientEncryptedKey(Asn1Sequence seq);
    public RecipientEncryptedKey(KeyAgreeRecipientIdentifier id, Asn1OctetString encryptedKey);
    public static RecipientEncryptedKey GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static RecipientEncryptedKey GetInstance(object obj);
    public KeyAgreeRecipientIdentifier get_Identifier();
    public Asn1OctetString get_EncryptedKey();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.RecipientIdentifier : Asn1Encodable {
    private Asn1Encodable id;
    public bool IsTagged { get; }
    public Asn1Encodable ID { get; }
    public RecipientIdentifier(IssuerAndSerialNumber id);
    public RecipientIdentifier(Asn1OctetString id);
    public RecipientIdentifier(Asn1Object id);
    public static RecipientIdentifier GetInstance(object o);
    public bool get_IsTagged();
    public Asn1Encodable get_ID();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.RecipientInfo : Asn1Encodable {
    internal Asn1Encodable info;
    public DerInteger Version { get; }
    public bool IsTagged { get; }
    public Asn1Encodable Info { get; }
    public RecipientInfo(KeyTransRecipientInfo info);
    public RecipientInfo(KeyAgreeRecipientInfo info);
    public RecipientInfo(KekRecipientInfo info);
    public RecipientInfo(PasswordRecipientInfo info);
    public RecipientInfo(OtherRecipientInfo info);
    public RecipientInfo(Asn1Object info);
    public static RecipientInfo GetInstance(object o);
    public DerInteger get_Version();
    public bool get_IsTagged();
    public Asn1Encodable get_Info();
    private KekRecipientInfo GetKekInfo(Asn1TaggedObject o);
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier : Asn1Encodable {
    private Asn1OctetString subjectKeyIdentifier;
    private DerGeneralizedTime date;
    private OtherKeyAttribute other;
    public Asn1OctetString SubjectKeyIdentifier { get; }
    public DerGeneralizedTime Date { get; }
    public OtherKeyAttribute OtherKeyAttribute { get; }
    public RecipientKeyIdentifier(Asn1OctetString subjectKeyIdentifier, DerGeneralizedTime date, OtherKeyAttribute other);
    public RecipientKeyIdentifier(Byte[] subjectKeyIdentifier);
    public RecipientKeyIdentifier(Byte[] subjectKeyIdentifier, DerGeneralizedTime date, OtherKeyAttribute other);
    public RecipientKeyIdentifier(Asn1Sequence seq);
    public static RecipientKeyIdentifier GetInstance(Asn1TaggedObject ato, bool explicitly);
    public static RecipientKeyIdentifier GetInstance(object obj);
    public Asn1OctetString get_SubjectKeyIdentifier();
    public DerGeneralizedTime get_Date();
    public OtherKeyAttribute get_OtherKeyAttribute();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.ScvpReqRes : Asn1Encodable {
    private ContentInfo request;
    private ContentInfo response;
    public ContentInfo Request { get; }
    public ContentInfo Response { get; }
    private ScvpReqRes(Asn1Sequence seq);
    public ScvpReqRes(ContentInfo response);
    public ScvpReqRes(ContentInfo request, ContentInfo response);
    public static ScvpReqRes GetInstance(object obj);
    public virtual ContentInfo get_Request();
    public virtual ContentInfo get_Response();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.SignedData : Asn1Encodable {
    private static DerInteger Version1;
    private static DerInteger Version3;
    private static DerInteger Version4;
    private static DerInteger Version5;
    private DerInteger version;
    private Asn1Set digestAlgorithms;
    private ContentInfo contentInfo;
    private Asn1Set certificates;
    private Asn1Set crls;
    private Asn1Set signerInfos;
    private bool certsBer;
    private bool crlsBer;
    public DerInteger Version { get; }
    public Asn1Set DigestAlgorithms { get; }
    public ContentInfo EncapContentInfo { get; }
    public Asn1Set Certificates { get; }
    public Asn1Set CRLs { get; }
    public Asn1Set SignerInfos { get; }
    public SignedData(Asn1Set digestAlgorithms, ContentInfo contentInfo, Asn1Set certificates, Asn1Set crls, Asn1Set signerInfos);
    private SignedData(Asn1Sequence seq);
    private static SignedData();
    public static SignedData GetInstance(object obj);
    private DerInteger CalculateVersion(DerObjectIdentifier contentOid, Asn1Set certs, Asn1Set crls, Asn1Set signerInfs);
    private bool CheckForVersion3(Asn1Set signerInfs);
    public DerInteger get_Version();
    public Asn1Set get_DigestAlgorithms();
    public ContentInfo get_EncapContentInfo();
    public Asn1Set get_Certificates();
    public Asn1Set get_CRLs();
    public Asn1Set get_SignerInfos();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.SignedDataParser : object {
    private Asn1SequenceParser _seq;
    private DerInteger _version;
    private object _nextObject;
    private bool _certsCalled;
    private bool _crlsCalled;
    public DerInteger Version { get; }
    public SignedDataParser(Asn1SequenceParser seq);
    public static SignedDataParser GetInstance(object o);
    public DerInteger get_Version();
    public Asn1SetParser GetDigestAlgorithms();
    public ContentInfoParser GetEncapContentInfo();
    public Asn1SetParser GetCertificates();
    public Asn1SetParser GetCrls();
    public Asn1SetParser GetSignerInfos();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.SignerIdentifier : Asn1Encodable {
    private Asn1Encodable id;
    public bool IsTagged { get; }
    public Asn1Encodable ID { get; }
    public SignerIdentifier(IssuerAndSerialNumber id);
    public SignerIdentifier(Asn1OctetString id);
    public SignerIdentifier(Asn1Object id);
    public static SignerIdentifier GetInstance(object o);
    public bool get_IsTagged();
    public Asn1Encodable get_ID();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.SignerInfo : Asn1Encodable {
    private DerInteger version;
    private SignerIdentifier sid;
    private AlgorithmIdentifier digAlgorithm;
    private Asn1Set authenticatedAttributes;
    private AlgorithmIdentifier digEncryptionAlgorithm;
    private Asn1OctetString encryptedDigest;
    private Asn1Set unauthenticatedAttributes;
    public DerInteger Version { get; }
    public SignerIdentifier SignerID { get; }
    public Asn1Set AuthenticatedAttributes { get; }
    public AlgorithmIdentifier DigestAlgorithm { get; }
    public Asn1OctetString EncryptedDigest { get; }
    public AlgorithmIdentifier DigestEncryptionAlgorithm { get; }
    public Asn1Set UnauthenticatedAttributes { get; }
    public SignerInfo(SignerIdentifier sid, AlgorithmIdentifier digAlgorithm, Asn1Set authenticatedAttributes, AlgorithmIdentifier digEncryptionAlgorithm, Asn1OctetString encryptedDigest, Asn1Set unauthenticatedAttributes);
    public SignerInfo(SignerIdentifier sid, AlgorithmIdentifier digAlgorithm, Attributes authenticatedAttributes, AlgorithmIdentifier digEncryptionAlgorithm, Asn1OctetString encryptedDigest, Attributes unauthenticatedAttributes);
    public SignerInfo(Asn1Sequence seq);
    public static SignerInfo GetInstance(object obj);
    public DerInteger get_Version();
    public SignerIdentifier get_SignerID();
    public Asn1Set get_AuthenticatedAttributes();
    public AlgorithmIdentifier get_DigestAlgorithm();
    public Asn1OctetString get_EncryptedDigest();
    public AlgorithmIdentifier get_DigestEncryptionAlgorithm();
    public Asn1Set get_UnauthenticatedAttributes();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.Time : Asn1Encodable {
    private Asn1Object time;
    public string TimeString { get; }
    public DateTime Date { get; }
    public Time(Asn1Object time);
    public Time(DateTime date);
    public static Time GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static Time GetInstance(object obj);
    public string get_TimeString();
    public DateTime get_Date();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.TimeStampAndCrl : Asn1Encodable {
    private ContentInfo timeStamp;
    private CertificateList crl;
    public ContentInfo TimeStampToken { get; }
    public CertificateList Crl { get; }
    public TimeStampAndCrl(ContentInfo timeStamp);
    private TimeStampAndCrl(Asn1Sequence seq);
    public static TimeStampAndCrl GetInstance(object obj);
    public virtual ContentInfo get_TimeStampToken();
    public virtual CertificateList get_Crl();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.TimeStampedData : Asn1Encodable {
    private DerInteger version;
    private DerIA5String dataUri;
    private MetaData metaData;
    private Asn1OctetString content;
    private Evidence temporalEvidence;
    public DerIA5String DataUri { get; }
    public MetaData MetaData { get; }
    public Asn1OctetString Content { get; }
    public Evidence TemporalEvidence { get; }
    public TimeStampedData(DerIA5String dataUri, MetaData metaData, Asn1OctetString content, Evidence temporalEvidence);
    private TimeStampedData(Asn1Sequence seq);
    public static TimeStampedData GetInstance(object obj);
    public virtual DerIA5String get_DataUri();
    public MetaData get_MetaData();
    public Asn1OctetString get_Content();
    public Evidence get_TemporalEvidence();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.TimeStampedDataParser : object {
    private DerInteger version;
    private DerIA5String dataUri;
    private MetaData metaData;
    private Asn1OctetStringParser content;
    private Evidence temporalEvidence;
    private Asn1SequenceParser parser;
    public DerIA5String DataUri { get; }
    public MetaData MetaData { get; }
    public Asn1OctetStringParser Content { get; }
    private TimeStampedDataParser(Asn1SequenceParser parser);
    public static TimeStampedDataParser GetInstance(object obj);
    public virtual DerIA5String get_DataUri();
    public virtual MetaData get_MetaData();
    public virtual Asn1OctetStringParser get_Content();
    public virtual Evidence GetTemporalEvidence();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence : Asn1Encodable {
    private TimeStampAndCrl[] timeStampAndCrls;
    public TimeStampTokenEvidence(TimeStampAndCrl[] timeStampAndCrls);
    public TimeStampTokenEvidence(TimeStampAndCrl timeStampAndCrl);
    private TimeStampTokenEvidence(Asn1Sequence seq);
    public static TimeStampTokenEvidence GetInstance(Asn1TaggedObject tagged, bool isExplicit);
    public static TimeStampTokenEvidence GetInstance(object obj);
    public virtual TimeStampAndCrl[] ToTimeStampAndCrlArray();
    public virtual Asn1Object ToAsn1Object();
}
internal class DevExpress.Pdf.Native.BouncyCastle.Asn1.ConstructedOctetStream : BaseInputStream {
    private Asn1StreamParser _parser;
    private bool _first;
    private Stream _currentStream;
    internal ConstructedOctetStream(Asn1StreamParser parser);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.CryptoPro.CryptoProObjectIdentifiers : object {
    public static string GostID;
    public static DerObjectIdentifier GostR3411;
    public static DerObjectIdentifier GostR3411Hmac;
    public static DerObjectIdentifier GostR28147Cbc;
    public static DerObjectIdentifier ID_Gost28147_89_CryptoPro_A_ParamSet;
    public static DerObjectIdentifier GostR3410x94;
    public static DerObjectIdentifier GostR3410x2001;
    public static DerObjectIdentifier GostR3411x94WithGostR3410x94;
    public static DerObjectIdentifier GostR3411x94WithGostR3410x2001;
    public static DerObjectIdentifier GostR3411x94CryptoProParamSet;
    public static DerObjectIdentifier GostR3410x94CryptoProA;
    public static DerObjectIdentifier GostR3410x94CryptoProB;
    public static DerObjectIdentifier GostR3410x94CryptoProC;
    public static DerObjectIdentifier GostR3410x94CryptoProD;
    public static DerObjectIdentifier GostR3410x94CryptoProXchA;
    public static DerObjectIdentifier GostR3410x94CryptoProXchB;
    public static DerObjectIdentifier GostR3410x94CryptoProXchC;
    public static DerObjectIdentifier GostR3410x2001CryptoProA;
    public static DerObjectIdentifier GostR3410x2001CryptoProB;
    public static DerObjectIdentifier GostR3410x2001CryptoProC;
    public static DerObjectIdentifier GostR3410x2001CryptoProXchA;
    public static DerObjectIdentifier GostR3410x2001CryptoProXchB;
    public static DerObjectIdentifier GostElSgDH3410Default;
    public static DerObjectIdentifier GostElSgDH3410x1;
    private static CryptoProObjectIdentifiers();
}
internal class DevExpress.Pdf.Native.BouncyCastle.Asn1.DefiniteLengthInputStream : LimitedInputStream {
    private static Byte[] EmptyBytes;
    private int _originalLength;
    private int _remaining;
    internal int Remaining { get; }
    internal DefiniteLengthInputStream(Stream inStream, int length);
    private static DefiniteLengthInputStream();
    internal int get_Remaining();
    public virtual int ReadByte();
    public virtual int Read(Byte[] buf, int off, int len);
    internal void ReadAllIntoByteArray(Byte[] buf);
    internal Byte[] ToArray();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerApplicationSpecific : Asn1Object {
    private bool isConstructed;
    private int tag;
    private Byte[] octets;
    public int ApplicationTag { get; }
    internal DerApplicationSpecific(bool isConstructed, int tag, Byte[] octets);
    public DerApplicationSpecific(int tag, Byte[] octets);
    public DerApplicationSpecific(int tag, Asn1Encodable obj);
    public DerApplicationSpecific(bool isExplicit, int tag, Asn1Encodable obj);
    public DerApplicationSpecific(int tagNo, Asn1EncodableVector vec);
    private int GetLengthOfHeader(Byte[] data);
    public bool IsConstructed();
    public Byte[] GetContents();
    public int get_ApplicationTag();
    public Asn1Object GetObject();
    public Asn1Object GetObject(int derTagNo);
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
    private Byte[] ReplaceTagNumber(int newTag, Byte[] input);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerBitString : DerStringBase {
    private static Char[] table;
    protected Byte[] mData;
    protected int mPadBits;
    public int PadBits { get; }
    public int IntValue { get; }
    public DerBitString(Byte[] data, int padBits);
    public DerBitString(Byte[] data);
    public DerBitString(int namedBits);
    public DerBitString(Asn1Encodable obj);
    private static DerBitString();
    public static DerBitString GetInstance(object obj);
    public static DerBitString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual Byte[] GetOctets();
    public virtual Byte[] GetBytes();
    public virtual int get_PadBits();
    public virtual int get_IntValue();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public virtual string GetString();
    internal static DerBitString FromAsn1Octets(Byte[] octets);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerBmpString : DerStringBase {
    private string str;
    public DerBmpString(Byte[] str);
    public DerBmpString(string str);
    public static DerBmpString GetInstance(object obj);
    public static DerBmpString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerBoolean : Asn1Object {
    private byte value;
    public static DerBoolean False;
    public static DerBoolean True;
    public bool IsTrue { get; }
    public DerBoolean(Byte[] val);
    private DerBoolean(bool value);
    private static DerBoolean();
    public static DerBoolean GetInstance(object obj);
    public static DerBoolean GetInstance(bool value);
    public static DerBoolean GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public bool get_IsTrue();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
    public virtual string ToString();
    internal static DerBoolean FromOctetString(Byte[] value);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerEnumerated : Asn1Object {
    private Byte[] bytes;
    private static DerEnumerated[] cache;
    public BigInteger Value { get; }
    public DerEnumerated(int val);
    public DerEnumerated(BigInteger val);
    public DerEnumerated(Byte[] bytes);
    private static DerEnumerated();
    public static DerEnumerated GetInstance(object obj);
    public static DerEnumerated GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public BigInteger get_Value();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
    internal static DerEnumerated FromOctetString(Byte[] enc);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerExternal : Asn1Object {
    private DerObjectIdentifier directReference;
    private DerInteger indirectReference;
    private Asn1Object dataValueDescriptor;
    private int encoding;
    private Asn1Object externalContent;
    public Asn1Object DataValueDescriptor { get; public set; }
    public DerObjectIdentifier DirectReference { get; public set; }
    public int Encoding { get; public set; }
    public Asn1Object ExternalContent { get; public set; }
    public DerInteger IndirectReference { get; public set; }
    public DerExternal(Asn1EncodableVector vector);
    public DerExternal(DerObjectIdentifier directReference, DerInteger indirectReference, Asn1Object dataValueDescriptor, DerTaggedObject externalData);
    public DerExternal(DerObjectIdentifier directReference, DerInteger indirectReference, Asn1Object dataValueDescriptor, int encoding, Asn1Object externalData);
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public Asn1Object get_DataValueDescriptor();
    public void set_DataValueDescriptor(Asn1Object value);
    public DerObjectIdentifier get_DirectReference();
    public void set_DirectReference(DerObjectIdentifier value);
    public int get_Encoding();
    public void set_Encoding(int value);
    public Asn1Object get_ExternalContent();
    public void set_ExternalContent(Asn1Object value);
    public DerInteger get_IndirectReference();
    public void set_IndirectReference(DerInteger value);
    private static Asn1Object GetObjFromVector(Asn1EncodableVector v, int index);
    private static void WriteEncodable(MemoryStream ms, Asn1Encodable e);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerExternalParser : Asn1Encodable {
    private Asn1StreamParser _parser;
    public DerExternalParser(Asn1StreamParser parser);
    public IAsn1Convertible ReadObject();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerGeneralizedTime : Asn1Object {
    private string time;
    public string TimeString { get; }
    private bool HasFractionalSeconds { get; }
    public DerGeneralizedTime(string time);
    public DerGeneralizedTime(DateTime time);
    internal DerGeneralizedTime(Byte[] bytes);
    public static DerGeneralizedTime GetInstance(object obj);
    public static DerGeneralizedTime GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public string get_TimeString();
    public string GetTime();
    private string CalculateGmtOffset();
    private static string Convert(int time);
    public DateTime ToDateTime();
    private string FString(int count);
    private DateTime ParseDateString(string s, string format, bool makeUniversal);
    private bool get_HasFractionalSeconds();
    private Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerGeneralString : DerStringBase {
    private string str;
    public DerGeneralString(Byte[] str);
    public DerGeneralString(string str);
    public static DerGeneralString GetInstance(object obj);
    public static DerGeneralString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerGenerator : Asn1Generator {
    private bool _tagged;
    private bool _isExplicit;
    private int _tagNo;
    protected DerGenerator(Stream outStream);
    protected DerGenerator(Stream outStream, int tagNo, bool isExplicit);
    private static void WriteLength(Stream outStr, int length);
    internal static void WriteDerEncoded(Stream outStream, int tag, Byte[] bytes);
    internal void WriteDerEncoded(int tag, Byte[] bytes);
    internal static void WriteDerEncoded(Stream outStr, int tag, Stream inStr);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerGraphicString : DerStringBase {
    private Byte[] mString;
    public DerGraphicString(Byte[] encoding);
    public static DerGraphicString GetInstance(object obj);
    public static DerGraphicString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerIA5String : DerStringBase {
    private string str;
    public DerIA5String(Byte[] str);
    public DerIA5String(string str);
    public DerIA5String(string str, bool validate);
    public static DerIA5String GetInstance(object obj);
    public static DerIA5String GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public static bool IsIA5String(string str);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerInteger : Asn1Object {
    public static string AllowUnsafeProperty;
    private Byte[] bytes;
    public BigInteger Value { get; }
    public BigInteger PositiveValue { get; }
    public DerInteger(int value);
    public DerInteger(BigInteger value);
    public DerInteger(Byte[] bytes);
    internal static bool AllowUnsafe();
    public static DerInteger GetInstance(object obj);
    public static DerInteger GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public BigInteger get_Value();
    public BigInteger get_PositiveValue();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerNull : Asn1Null {
    public static DerNull Instance;
    private Byte[] zeroBytes;
    protected internal DerNull(int dummy);
    private static DerNull();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerNumericString : DerStringBase {
    private string str;
    public DerNumericString(Byte[] str);
    public DerNumericString(string str);
    public DerNumericString(string str, bool validate);
    public static DerNumericString GetInstance(object obj);
    public static DerNumericString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public static bool IsNumericString(string str);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerObjectIdentifier : Asn1Object {
    private string identifier;
    private Byte[] body;
    private static long LONG_LIMIT;
    private static DerObjectIdentifier[] cache;
    public string Id { get; }
    public DerObjectIdentifier(string identifier);
    internal DerObjectIdentifier(DerObjectIdentifier oid, string branchID);
    internal DerObjectIdentifier(Byte[] bytes);
    private static DerObjectIdentifier();
    public static DerObjectIdentifier GetInstance(object obj);
    public static DerObjectIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly);
    public string get_Id();
    public virtual DerObjectIdentifier Branch(string branchID);
    public virtual bool On(DerObjectIdentifier stem);
    private void WriteField(Stream outputStream, long fieldValue);
    private void WriteField(Stream outputStream, BigInteger fieldValue);
    private void DoOutput(MemoryStream bOut);
    internal Byte[] GetBody();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public virtual string ToString();
    private static bool IsValidBranchID(string branchID, int start);
    private static bool IsValidIdentifier(string identifier);
    private static string MakeOidStringFromBytes(Byte[] bytes);
    internal static DerObjectIdentifier FromOctetString(Byte[] enc);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerOctetString : Asn1OctetString {
    public DerOctetString(Byte[] str);
    public DerOctetString(Asn1Encodable obj);
    internal virtual void Encode(DerOutputStream derOut);
    internal static void Encode(DerOutputStream derOut, Byte[] bytes, int offset, int length);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerOctetStringParser : object {
    private DefiniteLengthInputStream stream;
    internal DerOctetStringParser(DefiniteLengthInputStream stream);
    public sealed virtual Stream GetOctetStream();
    public sealed virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerOutputStream : FilterStream {
    public DerOutputStream(Stream os);
    private void WriteLength(int length);
    internal void WriteEncoded(int tag, Byte[] bytes);
    internal void WriteEncoded(int tag, byte first, Byte[] bytes);
    internal void WriteEncoded(int tag, Byte[] bytes, int offset, int length);
    internal void WriteTag(int flags, int tagNo);
    internal void WriteEncoded(int flags, int tagNo, Byte[] bytes);
    protected void WriteNull();
    [ObsoleteAttribute("Use version taking an Asn1Encodable arg instead")]
public virtual void WriteObject(object obj);
    public virtual void WriteObject(Asn1Encodable obj);
    public virtual void WriteObject(Asn1Object obj);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerPrintableString : DerStringBase {
    private string str;
    public DerPrintableString(Byte[] str);
    public DerPrintableString(string str);
    public DerPrintableString(string str, bool validate);
    public static DerPrintableString GetInstance(object obj);
    public static DerPrintableString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    public static bool IsPrintableString(string str);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerSequence : Asn1Sequence {
    public static DerSequence Empty;
    public DerSequence(Asn1Encodable obj);
    public DerSequence(Asn1Encodable[] v);
    public DerSequence(Asn1EncodableVector v);
    private static DerSequence();
    public static DerSequence FromVector(Asn1EncodableVector v);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerSequenceGenerator : DerGenerator {
    private MemoryStream _bOut;
    public DerSequenceGenerator(Stream outStream);
    public DerSequenceGenerator(Stream outStream, int tagNo, bool isExplicit);
    public virtual void AddObject(Asn1Encodable obj);
    public virtual Stream GetRawOutputStream();
    public virtual void Close();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerSequenceParser : object {
    private Asn1StreamParser _parser;
    internal DerSequenceParser(Asn1StreamParser parser);
    public sealed virtual IAsn1Convertible ReadObject();
    public sealed virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerSet : Asn1Set {
    public static DerSet Empty;
    public DerSet(Asn1Encodable obj);
    public DerSet(Asn1Encodable[] v);
    public DerSet(Asn1EncodableVector v);
    internal DerSet(Asn1EncodableVector v, bool needsSorting);
    private static DerSet();
    public static DerSet FromVector(Asn1EncodableVector v);
    internal static DerSet FromVector(Asn1EncodableVector v, bool needsSorting);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerSetGenerator : DerGenerator {
    private MemoryStream _bOut;
    public DerSetGenerator(Stream outStream);
    public DerSetGenerator(Stream outStream, int tagNo, bool isExplicit);
    public virtual void AddObject(Asn1Encodable obj);
    public virtual Stream GetRawOutputStream();
    public virtual void Close();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerSetParser : object {
    private Asn1StreamParser _parser;
    internal DerSetParser(Asn1StreamParser parser);
    public sealed virtual IAsn1Convertible ReadObject();
    public sealed virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerStringBase : Asn1Object {
    public abstract virtual string GetString();
    public virtual string ToString();
    protected virtual int Asn1GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerT61String : DerStringBase {
    private string str;
    public DerT61String(Byte[] str);
    public DerT61String(string str);
    public static DerT61String GetInstance(object obj);
    public static DerT61String GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    internal virtual void Encode(DerOutputStream derOut);
    public Byte[] GetOctets();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerTaggedObject : Asn1TaggedObject {
    public DerTaggedObject(int tagNo, Asn1Encodable obj);
    public DerTaggedObject(bool explicitly, int tagNo, Asn1Encodable obj);
    public DerTaggedObject(int tagNo);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerUniversalString : DerStringBase {
    private static Char[] table;
    private Byte[] str;
    public DerUniversalString(Byte[] str);
    private static DerUniversalString();
    public static DerUniversalString GetInstance(object obj);
    public static DerUniversalString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerUtcTime : Asn1Object {
    private string time;
    public string TimeString { get; }
    [ObsoleteAttribute("Use 'AdjustedTimeString' property instead")]
public string AdjustedTime { get; }
    public string AdjustedTimeString { get; }
    public DerUtcTime(string time);
    public DerUtcTime(DateTime time);
    internal DerUtcTime(Byte[] bytes);
    public static DerUtcTime GetInstance(object obj);
    public static DerUtcTime GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public DateTime ToDateTime();
    public DateTime ToAdjustedDateTime();
    private DateTime ParseDateString(string dateStr, string formatStr);
    public string get_TimeString();
    public string get_AdjustedTime();
    public string get_AdjustedTimeString();
    private Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerUtf8String : DerStringBase {
    private string str;
    public DerUtf8String(Byte[] str);
    public DerUtf8String(string str);
    public static DerUtf8String GetInstance(object obj);
    public static DerUtf8String GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    internal virtual void Encode(DerOutputStream derOut);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerVideotexString : DerStringBase {
    private Byte[] mString;
    public DerVideotexString(Byte[] encoding);
    public static DerVideotexString GetInstance(object obj);
    public static DerVideotexString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual int Asn1GetHashCode();
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.DerVisibleString : DerStringBase {
    private string str;
    public DerVisibleString(Byte[] str);
    public DerVisibleString(string str);
    public static DerVisibleString GetInstance(object obj);
    public static DerVisibleString GetInstance(Asn1TaggedObject obj, bool explicitly);
    public virtual string GetString();
    public Byte[] GetOctets();
    internal virtual void Encode(DerOutputStream derOut);
    protected virtual bool Asn1Equals(Asn1Object asn1Object);
    protected virtual int Asn1GetHashCode();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Eac.EacObjectIdentifiers : object {
    public static DerObjectIdentifier bsi_de;
    public static DerObjectIdentifier id_PK;
    public static DerObjectIdentifier id_PK_DH;
    public static DerObjectIdentifier id_PK_ECDH;
    public static DerObjectIdentifier id_CA;
    public static DerObjectIdentifier id_CA_DH;
    public static DerObjectIdentifier id_CA_DH_3DES_CBC_CBC;
    public static DerObjectIdentifier id_CA_ECDH;
    public static DerObjectIdentifier id_CA_ECDH_3DES_CBC_CBC;
    public static DerObjectIdentifier id_TA;
    public static DerObjectIdentifier id_TA_RSA;
    public static DerObjectIdentifier id_TA_RSA_v1_5_SHA_1;
    public static DerObjectIdentifier id_TA_RSA_v1_5_SHA_256;
    public static DerObjectIdentifier id_TA_RSA_PSS_SHA_1;
    public static DerObjectIdentifier id_TA_RSA_PSS_SHA_256;
    public static DerObjectIdentifier id_TA_ECDSA;
    public static DerObjectIdentifier id_TA_ECDSA_SHA_1;
    public static DerObjectIdentifier id_TA_ECDSA_SHA_224;
    public static DerObjectIdentifier id_TA_ECDSA_SHA_256;
    public static DerObjectIdentifier id_TA_ECDSA_SHA_384;
    public static DerObjectIdentifier id_TA_ECDSA_SHA_512;
    private static EacObjectIdentifiers();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.EdEC.EdECObjectIdentifiers : object {
    public static DerObjectIdentifier id_edwards_curve_algs;
    public static DerObjectIdentifier id_X25519;
    public static DerObjectIdentifier id_X448;
    public static DerObjectIdentifier id_Ed25519;
    public static DerObjectIdentifier id_Ed448;
    private static EdECObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ess.EssCertID : Asn1Encodable {
    private Asn1OctetString certHash;
    private IssuerSerial issuerSerial;
    public IssuerSerial IssuerSerial { get; }
    public EssCertID(Asn1Sequence seq);
    public EssCertID(Byte[] hash);
    public EssCertID(Byte[] hash, IssuerSerial issuerSerial);
    public static EssCertID GetInstance(object o);
    public Byte[] GetCertHash();
    public IssuerSerial get_IssuerSerial();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ess.EssCertIDv2 : Asn1Encodable {
    private AlgorithmIdentifier hashAlgorithm;
    private Byte[] certHash;
    private IssuerSerial issuerSerial;
    private static AlgorithmIdentifier DefaultAlgID;
    public AlgorithmIdentifier HashAlgorithm { get; }
    public IssuerSerial IssuerSerial { get; }
    private EssCertIDv2(Asn1Sequence seq);
    public EssCertIDv2(Byte[] certHash);
    public EssCertIDv2(AlgorithmIdentifier algId, Byte[] certHash);
    public EssCertIDv2(Byte[] certHash, IssuerSerial issuerSerial);
    public EssCertIDv2(AlgorithmIdentifier algId, Byte[] certHash, IssuerSerial issuerSerial);
    private static EssCertIDv2();
    public static EssCertIDv2 GetInstance(object obj);
    public AlgorithmIdentifier get_HashAlgorithm();
    public Byte[] GetCertHash();
    public IssuerSerial get_IssuerSerial();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ess.SigningCertificate : Asn1Encodable {
    private Asn1Sequence certs;
    private Asn1Sequence policies;
    public SigningCertificate(Asn1Sequence seq);
    public SigningCertificate(EssCertID essCertID);
    public static SigningCertificate GetInstance(object o);
    public EssCertID[] GetCerts();
    public PolicyInformation[] GetPolicies();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ess.SigningCertificateV2 : Asn1Encodable {
    private Asn1Sequence certs;
    private Asn1Sequence policies;
    private SigningCertificateV2(Asn1Sequence seq);
    public SigningCertificateV2(EssCertIDv2 cert);
    public SigningCertificateV2(EssCertIDv2[] certs);
    public SigningCertificateV2(EssCertIDv2[] certs, PolicyInformation[] policies);
    public static SigningCertificateV2 GetInstance(object o);
    public EssCertIDv2[] GetCerts();
    public PolicyInformation[] GetPolicies();
    public virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.GM.GMObjectIdentifiers : object {
    public static DerObjectIdentifier sm_scheme;
    public static DerObjectIdentifier sm6_ecb;
    public static DerObjectIdentifier sm6_cbc;
    public static DerObjectIdentifier sm6_ofb128;
    public static DerObjectIdentifier sm6_cfb128;
    public static DerObjectIdentifier sm1_ecb;
    public static DerObjectIdentifier sm1_cbc;
    public static DerObjectIdentifier sm1_ofb128;
    public static DerObjectIdentifier sm1_cfb128;
    public static DerObjectIdentifier sm1_cfb1;
    public static DerObjectIdentifier sm1_cfb8;
    public static DerObjectIdentifier ssf33_ecb;
    public static DerObjectIdentifier ssf33_cbc;
    public static DerObjectIdentifier ssf33_ofb128;
    public static DerObjectIdentifier ssf33_cfb128;
    public static DerObjectIdentifier ssf33_cfb1;
    public static DerObjectIdentifier ssf33_cfb8;
    public static DerObjectIdentifier sms4_ecb;
    public static DerObjectIdentifier sms4_cbc;
    public static DerObjectIdentifier sms4_ofb128;
    public static DerObjectIdentifier sms4_cfb128;
    public static DerObjectIdentifier sms4_cfb1;
    public static DerObjectIdentifier sms4_cfb8;
    public static DerObjectIdentifier sms4_ctr;
    public static DerObjectIdentifier sms4_gcm;
    public static DerObjectIdentifier sms4_ccm;
    public static DerObjectIdentifier sms4_xts;
    public static DerObjectIdentifier sms4_wrap;
    public static DerObjectIdentifier sms4_wrap_pad;
    public static DerObjectIdentifier sms4_ocb;
    public static DerObjectIdentifier sm5;
    public static DerObjectIdentifier sm2p256v1;
    public static DerObjectIdentifier sm2sign;
    public static DerObjectIdentifier sm2exchange;
    public static DerObjectIdentifier sm2encrypt;
    public static DerObjectIdentifier wapip192v1;
    public static DerObjectIdentifier sm2encrypt_recommendedParameters;
    public static DerObjectIdentifier sm2encrypt_specifiedParameters;
    public static DerObjectIdentifier sm2encrypt_with_sm3;
    public static DerObjectIdentifier sm2encrypt_with_sha1;
    public static DerObjectIdentifier sm2encrypt_with_sha224;
    public static DerObjectIdentifier sm2encrypt_with_sha256;
    public static DerObjectIdentifier sm2encrypt_with_sha384;
    public static DerObjectIdentifier sm2encrypt_with_sha512;
    public static DerObjectIdentifier sm2encrypt_with_rmd160;
    public static DerObjectIdentifier sm2encrypt_with_whirlpool;
    public static DerObjectIdentifier sm2encrypt_with_blake2b512;
    public static DerObjectIdentifier sm2encrypt_with_blake2s256;
    public static DerObjectIdentifier sm2encrypt_with_md5;
    public static DerObjectIdentifier id_sm9PublicKey;
    public static DerObjectIdentifier sm9sign;
    public static DerObjectIdentifier sm9keyagreement;
    public static DerObjectIdentifier sm9encrypt;
    public static DerObjectIdentifier sm3;
    public static DerObjectIdentifier hmac_sm3;
    public static DerObjectIdentifier sm2sign_with_sm3;
    public static DerObjectIdentifier sm2sign_with_sha1;
    public static DerObjectIdentifier sm2sign_with_sha256;
    public static DerObjectIdentifier sm2sign_with_sha512;
    public static DerObjectIdentifier sm2sign_with_sha224;
    public static DerObjectIdentifier sm2sign_with_sha384;
    public static DerObjectIdentifier sm2sign_with_rmd160;
    public static DerObjectIdentifier sm2sign_with_whirlpool;
    public static DerObjectIdentifier sm2sign_with_blake2b512;
    public static DerObjectIdentifier sm2sign_with_blake2s256;
    private static GMObjectIdentifiers();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Iana.IanaObjectIdentifiers : object {
    public static DerObjectIdentifier IsakmpOakley;
    public static DerObjectIdentifier HmacMD5;
    public static DerObjectIdentifier HmacSha1;
    public static DerObjectIdentifier HmacTiger;
    public static DerObjectIdentifier HmacRipeMD160;
    private static IanaObjectIdentifiers();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.IAsn1ApplicationSpecificParser {
    public abstract virtual IAsn1Convertible ReadObject();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.IAsn1Choice {
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.IAsn1Convertible {
    public abstract virtual Asn1Object ToAsn1Object();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Asn1.IAsn1String {
    public abstract virtual string GetString();
}
internal class DevExpress.Pdf.Native.BouncyCastle.Asn1.IndefiniteLengthInputStream : LimitedInputStream {
    private int _lookAhead;
    private bool _eofOn00;
    internal IndefiniteLengthInputStream(Stream inStream, int limit);
    internal void SetEofOn00(bool eofOn00);
    private bool CheckForEof();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    private int RequireByte();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.LazyAsn1InputStream : Asn1InputStream {
    public LazyAsn1InputStream(Byte[] input);
    public LazyAsn1InputStream(Stream inputStream);
    internal virtual DerSequence CreateDerSequence(DefiniteLengthInputStream dIn);
    internal virtual DerSet CreateDerSet(DefiniteLengthInputStream dIn);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Pdf.Native.BouncyCastle.Asn1.LazyDerSequence : DerSequence {
    private Byte[] encoded;
    public Asn1Encodable Item { get; }
    public int Count { get; }
    internal LazyDerSequence(Byte[] encoded);
    private void Parse();
    public virtual Asn1Encodable get_Item(int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int get_Count();
    internal virtual void Encode(DerOutputStream derOut);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Pdf.Native.BouncyCastle.Asn1.LazyDerSet : DerSet {
    private Byte[] encoded;
    public Asn1Encodable Item { get; }
    public int Count { get; }
    internal LazyDerSet(Byte[] encoded);
    private void Parse();
    public virtual Asn1Encodable get_Item(int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int get_Count();
    internal virtual void Encode(DerOutputStream derOut);
}
internal abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.LimitedInputStream : BaseInputStream {
    protected Stream _in;
    private int _limit;
    internal LimitedInputStream(Stream inStream, int limit);
    internal virtual int GetRemaining();
    protected virtual void SetParentEofDetect(bool on);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Misc.MiscObjectIdentifiers : object {
    public static DerObjectIdentifier Netscape;
    public static DerObjectIdentifier NetscapeCertType;
    public static DerObjectIdentifier NetscapeBaseUrl;
    public static DerObjectIdentifier NetscapeRevocationUrl;
    public static DerObjectIdentifier NetscapeCARevocationUrl;
    public static DerObjectIdentifier NetscapeRenewalUrl;
    public static DerObjectIdentifier NetscapeCAPolicyUrl;
    public static DerObjectIdentifier NetscapeSslServerName;
    public static DerObjectIdentifier NetscapeCertComment;
    public static DerObjectIdentifier Verisign;
    public static DerObjectIdentifier VerisignCzagExtension;
    public static DerObjectIdentifier VerisignPrivate_6_9;
    public static DerObjectIdentifier VerisignOnSiteJurisdictionHash;
    public static DerObjectIdentifier VerisignBitString_6_13;
    public static DerObjectIdentifier VerisignDnbDunsNumber;
    public static DerObjectIdentifier VerisignIssStrongCrypto;
    public static string Novell;
    public static DerObjectIdentifier NovellSecurityAttribs;
    public static string Entrust;
    public static DerObjectIdentifier EntrustVersionExtension;
    public static DerObjectIdentifier cast5CBC;
    public static DerObjectIdentifier as_sys_sec_alg_ideaCBC;
    public static DerObjectIdentifier cryptlib;
    public static DerObjectIdentifier cryptlib_algorithm;
    public static DerObjectIdentifier cryptlib_algorithm_blowfish_ECB;
    public static DerObjectIdentifier cryptlib_algorithm_blowfish_CBC;
    public static DerObjectIdentifier cryptlib_algorithm_blowfish_CFB;
    public static DerObjectIdentifier cryptlib_algorithm_blowfish_OFB;
    public static DerObjectIdentifier blake2;
    public static DerObjectIdentifier id_blake2b160;
    public static DerObjectIdentifier id_blake2b256;
    public static DerObjectIdentifier id_blake2b384;
    public static DerObjectIdentifier id_blake2b512;
    public static DerObjectIdentifier id_blake2s128;
    public static DerObjectIdentifier id_blake2s160;
    public static DerObjectIdentifier id_blake2s224;
    public static DerObjectIdentifier id_blake2s256;
    public static DerObjectIdentifier id_scrypt;
    private static MiscObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Misc.NetscapeCertType : DerBitString {
    public static int SslClient;
    public static int SslServer;
    public static int Smime;
    public static int ObjectSigning;
    public static int Reserved;
    public static int SslCA;
    public static int SmimeCA;
    public static int ObjectSigningCA;
    public NetscapeCertType(int usage);
    public NetscapeCertType(DerBitString usage);
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Misc.NetscapeRevocationUrl : DerIA5String {
    public NetscapeRevocationUrl(DerIA5String str);
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Misc.VerisignCzagExtension : DerIA5String {
    public VerisignCzagExtension(DerIA5String str);
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Nist.NistObjectIdentifiers : object {
    public static DerObjectIdentifier NistAlgorithm;
    public static DerObjectIdentifier HashAlgs;
    public static DerObjectIdentifier IdSha256;
    public static DerObjectIdentifier IdSha384;
    public static DerObjectIdentifier IdSha512;
    public static DerObjectIdentifier IdSha224;
    public static DerObjectIdentifier IdSha512_224;
    public static DerObjectIdentifier IdSha512_256;
    public static DerObjectIdentifier IdSha3_224;
    public static DerObjectIdentifier IdSha3_256;
    public static DerObjectIdentifier IdSha3_384;
    public static DerObjectIdentifier IdSha3_512;
    public static DerObjectIdentifier IdShake128;
    public static DerObjectIdentifier IdShake256;
    public static DerObjectIdentifier IdHMacWithSha3_224;
    public static DerObjectIdentifier IdHMacWithSha3_256;
    public static DerObjectIdentifier IdHMacWithSha3_384;
    public static DerObjectIdentifier IdHMacWithSha3_512;
    public static DerObjectIdentifier Aes;
    public static DerObjectIdentifier IdAes128Ecb;
    public static DerObjectIdentifier IdAes128Cbc;
    public static DerObjectIdentifier IdAes128Ofb;
    public static DerObjectIdentifier IdAes128Cfb;
    public static DerObjectIdentifier IdAes128Wrap;
    public static DerObjectIdentifier IdAes128Gcm;
    public static DerObjectIdentifier IdAes128Ccm;
    public static DerObjectIdentifier IdAes192Ecb;
    public static DerObjectIdentifier IdAes192Cbc;
    public static DerObjectIdentifier IdAes192Ofb;
    public static DerObjectIdentifier IdAes192Cfb;
    public static DerObjectIdentifier IdAes192Wrap;
    public static DerObjectIdentifier IdAes192Gcm;
    public static DerObjectIdentifier IdAes192Ccm;
    public static DerObjectIdentifier IdAes256Ecb;
    public static DerObjectIdentifier IdAes256Cbc;
    public static DerObjectIdentifier IdAes256Ofb;
    public static DerObjectIdentifier IdAes256Cfb;
    public static DerObjectIdentifier IdAes256Wrap;
    public static DerObjectIdentifier IdAes256Gcm;
    public static DerObjectIdentifier IdAes256Ccm;
    public static DerObjectIdentifier IdDsaWithSha2;
    public static DerObjectIdentifier DsaWithSha224;
    public static DerObjectIdentifier DsaWithSha256;
    public static DerObjectIdentifier DsaWithSha384;
    public static DerObjectIdentifier DsaWithSha512;
    public static DerObjectIdentifier IdDsaWithSha3_224;
    public static DerObjectIdentifier IdDsaWithSha3_256;
    public static DerObjectIdentifier IdDsaWithSha3_384;
    public static DerObjectIdentifier IdDsaWithSha3_512;
    public static DerObjectIdentifier IdEcdsaWithSha3_224;
    public static DerObjectIdentifier IdEcdsaWithSha3_256;
    public static DerObjectIdentifier IdEcdsaWithSha3_384;
    public static DerObjectIdentifier IdEcdsaWithSha3_512;
    public static DerObjectIdentifier IdRsassaPkcs1V15WithSha3_224;
    public static DerObjectIdentifier IdRsassaPkcs1V15WithSha3_256;
    public static DerObjectIdentifier IdRsassaPkcs1V15WithSha3_384;
    public static DerObjectIdentifier IdRsassaPkcs1V15WithSha3_512;
    private static NistObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.BasicOcspResponse : Asn1Encodable {
    private ResponseData tbsResponseData;
    private AlgorithmIdentifier signatureAlgorithm;
    private DerBitString signature;
    private Asn1Sequence certs;
    public ResponseData TbsResponseData { get; }
    public AlgorithmIdentifier SignatureAlgorithm { get; }
    public DerBitString Signature { get; }
    public Asn1Sequence Certs { get; }
    public BasicOcspResponse(ResponseData tbsResponseData, AlgorithmIdentifier signatureAlgorithm, DerBitString signature, Asn1Sequence certs);
    private BasicOcspResponse(Asn1Sequence seq);
    public static BasicOcspResponse GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static BasicOcspResponse GetInstance(object obj);
    [ObsoleteAttribute("Use TbsResponseData property instead")]
public ResponseData GetTbsResponseData();
    public ResponseData get_TbsResponseData();
    [ObsoleteAttribute("Use SignatureAlgorithm property instead")]
public AlgorithmIdentifier GetSignatureAlgorithm();
    public AlgorithmIdentifier get_SignatureAlgorithm();
    [ObsoleteAttribute("Use Signature property instead")]
public DerBitString GetSignature();
    public DerBitString get_Signature();
    public Byte[] GetSignatureOctets();
    [ObsoleteAttribute("Use Certs property instead")]
public Asn1Sequence GetCerts();
    public Asn1Sequence get_Certs();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.CertID : Asn1Encodable {
    private AlgorithmIdentifier hashAlgorithm;
    private Asn1OctetString issuerNameHash;
    private Asn1OctetString issuerKeyHash;
    private DerInteger serialNumber;
    public AlgorithmIdentifier HashAlgorithm { get; }
    public Asn1OctetString IssuerNameHash { get; }
    public Asn1OctetString IssuerKeyHash { get; }
    public DerInteger SerialNumber { get; }
    public CertID(AlgorithmIdentifier hashAlgorithm, Asn1OctetString issuerNameHash, Asn1OctetString issuerKeyHash, DerInteger serialNumber);
    private CertID(Asn1Sequence seq);
    public static CertID GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static CertID GetInstance(object obj);
    public AlgorithmIdentifier get_HashAlgorithm();
    public Asn1OctetString get_IssuerNameHash();
    public Asn1OctetString get_IssuerKeyHash();
    public DerInteger get_SerialNumber();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.CertStatus : Asn1Encodable {
    private int tagNo;
    private Asn1Encodable value;
    public int TagNo { get; }
    public Asn1Encodable Status { get; }
    public CertStatus(RevokedInfo info);
    public CertStatus(int tagNo, Asn1Encodable value);
    public CertStatus(Asn1TaggedObject choice);
    public static CertStatus GetInstance(object obj);
    public int get_TagNo();
    public Asn1Encodable get_Status();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.CrlID : Asn1Encodable {
    private DerIA5String crlUrl;
    private DerInteger crlNum;
    private DerGeneralizedTime crlTime;
    public DerIA5String CrlUrl { get; }
    public DerInteger CrlNum { get; }
    public DerGeneralizedTime CrlTime { get; }
    public CrlID(Asn1Sequence seq);
    public DerIA5String get_CrlUrl();
    public DerInteger get_CrlNum();
    public DerGeneralizedTime get_CrlTime();
    public virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.OcspObjectIdentifiers : object {
    internal static string PkixOcspId;
    public static DerObjectIdentifier PkixOcsp;
    public static DerObjectIdentifier PkixOcspBasic;
    public static DerObjectIdentifier PkixOcspNonce;
    public static DerObjectIdentifier PkixOcspCrl;
    public static DerObjectIdentifier PkixOcspResponse;
    public static DerObjectIdentifier PkixOcspNocheck;
    public static DerObjectIdentifier PkixOcspArchiveCutoff;
    public static DerObjectIdentifier PkixOcspServiceLocator;
    private static OcspObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.OcspRequest : Asn1Encodable {
    private TbsRequest tbsRequest;
    private Signature optionalSignature;
    public TbsRequest TbsRequest { get; }
    public Signature OptionalSignature { get; }
    public OcspRequest(TbsRequest tbsRequest, Signature optionalSignature);
    private OcspRequest(Asn1Sequence seq);
    public static OcspRequest GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static OcspRequest GetInstance(object obj);
    public TbsRequest get_TbsRequest();
    public Signature get_OptionalSignature();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.OcspResponse : Asn1Encodable {
    private OcspResponseStatus responseStatus;
    private ResponseBytes responseBytes;
    public OcspResponseStatus ResponseStatus { get; }
    public ResponseBytes ResponseBytes { get; }
    public OcspResponse(OcspResponseStatus responseStatus, ResponseBytes responseBytes);
    private OcspResponse(Asn1Sequence seq);
    public static OcspResponse GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static OcspResponse GetInstance(object obj);
    public OcspResponseStatus get_ResponseStatus();
    public ResponseBytes get_ResponseBytes();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.OcspResponseStatus : DerEnumerated {
    public static int Successful;
    public static int MalformedRequest;
    public static int InternalError;
    public static int TryLater;
    public static int SignatureRequired;
    public static int Unauthorized;
    public OcspResponseStatus(int value);
    public OcspResponseStatus(DerEnumerated value);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.Request : Asn1Encodable {
    private CertID reqCert;
    private X509Extensions singleRequestExtensions;
    public CertID ReqCert { get; }
    public X509Extensions SingleRequestExtensions { get; }
    public Request(CertID reqCert, X509Extensions singleRequestExtensions);
    private Request(Asn1Sequence seq);
    public static Request GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static Request GetInstance(object obj);
    public CertID get_ReqCert();
    public X509Extensions get_SingleRequestExtensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.ResponderID : Asn1Encodable {
    private Asn1Encodable id;
    public X509Name Name { get; }
    public ResponderID(Asn1OctetString id);
    public ResponderID(X509Name id);
    public static ResponderID GetInstance(object obj);
    public static ResponderID GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual Byte[] GetKeyHash();
    public virtual X509Name get_Name();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.ResponseBytes : Asn1Encodable {
    private DerObjectIdentifier responseType;
    private Asn1OctetString response;
    public DerObjectIdentifier ResponseType { get; }
    public Asn1OctetString Response { get; }
    public ResponseBytes(DerObjectIdentifier responseType, Asn1OctetString response);
    private ResponseBytes(Asn1Sequence seq);
    public static ResponseBytes GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static ResponseBytes GetInstance(object obj);
    public DerObjectIdentifier get_ResponseType();
    public Asn1OctetString get_Response();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.ResponseData : Asn1Encodable {
    private static DerInteger V1;
    private bool versionPresent;
    private DerInteger version;
    private ResponderID responderID;
    private DerGeneralizedTime producedAt;
    private Asn1Sequence responses;
    private X509Extensions responseExtensions;
    public DerInteger Version { get; }
    public ResponderID ResponderID { get; }
    public DerGeneralizedTime ProducedAt { get; }
    public Asn1Sequence Responses { get; }
    public X509Extensions ResponseExtensions { get; }
    public ResponseData(DerInteger version, ResponderID responderID, DerGeneralizedTime producedAt, Asn1Sequence responses, X509Extensions responseExtensions);
    public ResponseData(ResponderID responderID, DerGeneralizedTime producedAt, Asn1Sequence responses, X509Extensions responseExtensions);
    private ResponseData(Asn1Sequence seq);
    private static ResponseData();
    public static ResponseData GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static ResponseData GetInstance(object obj);
    public DerInteger get_Version();
    public ResponderID get_ResponderID();
    public DerGeneralizedTime get_ProducedAt();
    public Asn1Sequence get_Responses();
    public X509Extensions get_ResponseExtensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.RevokedInfo : Asn1Encodable {
    private DerGeneralizedTime revocationTime;
    private CrlReason revocationReason;
    public DerGeneralizedTime RevocationTime { get; }
    public CrlReason RevocationReason { get; }
    public RevokedInfo(DerGeneralizedTime revocationTime);
    public RevokedInfo(DerGeneralizedTime revocationTime, CrlReason revocationReason);
    private RevokedInfo(Asn1Sequence seq);
    public static RevokedInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static RevokedInfo GetInstance(object obj);
    public DerGeneralizedTime get_RevocationTime();
    public CrlReason get_RevocationReason();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.ServiceLocator : Asn1Encodable {
    private X509Name issuer;
    private Asn1Object locator;
    public X509Name Issuer { get; }
    public Asn1Object Locator { get; }
    public ServiceLocator(X509Name issuer);
    public ServiceLocator(X509Name issuer, Asn1Object locator);
    private ServiceLocator(Asn1Sequence seq);
    public static ServiceLocator GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static ServiceLocator GetInstance(object obj);
    public X509Name get_Issuer();
    public Asn1Object get_Locator();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.Signature : Asn1Encodable {
    internal AlgorithmIdentifier signatureAlgorithm;
    internal DerBitString signatureValue;
    internal Asn1Sequence certs;
    public AlgorithmIdentifier SignatureAlgorithm { get; }
    public DerBitString SignatureValue { get; }
    public Asn1Sequence Certs { get; }
    public Signature(AlgorithmIdentifier signatureAlgorithm, DerBitString signatureValue);
    public Signature(AlgorithmIdentifier signatureAlgorithm, DerBitString signatureValue, Asn1Sequence certs);
    private Signature(Asn1Sequence seq);
    public static Signature GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static Signature GetInstance(object obj);
    public AlgorithmIdentifier get_SignatureAlgorithm();
    public DerBitString get_SignatureValue();
    public Byte[] GetSignatureOctets();
    public Asn1Sequence get_Certs();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.SingleResponse : Asn1Encodable {
    private CertID certID;
    private CertStatus certStatus;
    private DerGeneralizedTime thisUpdate;
    private DerGeneralizedTime nextUpdate;
    private X509Extensions singleExtensions;
    public CertID CertId { get; }
    public CertStatus CertStatus { get; }
    public DerGeneralizedTime ThisUpdate { get; }
    public DerGeneralizedTime NextUpdate { get; }
    public X509Extensions SingleExtensions { get; }
    public SingleResponse(CertID certID, CertStatus certStatus, DerGeneralizedTime thisUpdate, DerGeneralizedTime nextUpdate, X509Extensions singleExtensions);
    public SingleResponse(Asn1Sequence seq);
    public static SingleResponse GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static SingleResponse GetInstance(object obj);
    public CertID get_CertId();
    public CertStatus get_CertStatus();
    public DerGeneralizedTime get_ThisUpdate();
    public DerGeneralizedTime get_NextUpdate();
    public X509Extensions get_SingleExtensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Ocsp.TbsRequest : Asn1Encodable {
    private static DerInteger V1;
    private DerInteger version;
    private GeneralName requestorName;
    private Asn1Sequence requestList;
    private X509Extensions requestExtensions;
    private bool versionSet;
    public DerInteger Version { get; }
    public GeneralName RequestorName { get; }
    public Asn1Sequence RequestList { get; }
    public X509Extensions RequestExtensions { get; }
    public TbsRequest(GeneralName requestorName, Asn1Sequence requestList, X509Extensions requestExtensions);
    private TbsRequest(Asn1Sequence seq);
    private static TbsRequest();
    public static TbsRequest GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static TbsRequest GetInstance(object obj);
    public DerInteger get_Version();
    public GeneralName get_RequestorName();
    public Asn1Sequence get_RequestList();
    public X509Extensions get_RequestExtensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.OidTokenizer : object {
    private string oid;
    private int index;
    public bool HasMoreTokens { get; }
    public OidTokenizer(string oid);
    public bool get_HasMoreTokens();
    public string NextToken();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Oiw.OiwObjectIdentifiers : object {
    public static DerObjectIdentifier MD4WithRsa;
    public static DerObjectIdentifier MD5WithRsa;
    public static DerObjectIdentifier MD4WithRsaEncryption;
    public static DerObjectIdentifier DesEcb;
    public static DerObjectIdentifier DesCbc;
    public static DerObjectIdentifier DesOfb;
    public static DerObjectIdentifier DesCfb;
    public static DerObjectIdentifier DesEde;
    public static DerObjectIdentifier IdSha1;
    public static DerObjectIdentifier DsaWithSha1;
    public static DerObjectIdentifier Sha1WithRsa;
    public static DerObjectIdentifier ElGamalAlgorithm;
    private static OiwObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.AttributePkcs : Asn1Encodable {
    private DerObjectIdentifier attrType;
    private Asn1Set attrValues;
    public DerObjectIdentifier AttrType { get; }
    public Asn1Set AttrValues { get; }
    private AttributePkcs(Asn1Sequence seq);
    public AttributePkcs(DerObjectIdentifier attrType, Asn1Set attrValues);
    public static AttributePkcs GetInstance(object obj);
    public DerObjectIdentifier get_AttrType();
    public Asn1Set get_AttrValues();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.AuthenticatedSafe : Asn1Encodable {
    private ContentInfo[] info;
    public AuthenticatedSafe(Asn1Sequence seq);
    public AuthenticatedSafe(ContentInfo[] info);
    public ContentInfo[] GetContentInfo();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.CertBag : Asn1Encodable {
    private DerObjectIdentifier certID;
    private Asn1Object certValue;
    public DerObjectIdentifier CertID { get; }
    public Asn1Object CertValue { get; }
    public CertBag(Asn1Sequence seq);
    public CertBag(DerObjectIdentifier certID, Asn1Object certValue);
    public DerObjectIdentifier get_CertID();
    public Asn1Object get_CertValue();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.CertificationRequest : Asn1Encodable {
    protected CertificationRequestInfo reqInfo;
    protected AlgorithmIdentifier sigAlgId;
    protected DerBitString sigBits;
    public AlgorithmIdentifier SignatureAlgorithm { get; }
    public DerBitString Signature { get; }
    public CertificationRequest(CertificationRequestInfo requestInfo, AlgorithmIdentifier algorithm, DerBitString signature);
    public CertificationRequest(Asn1Sequence seq);
    public static CertificationRequest GetInstance(object obj);
    public CertificationRequestInfo GetCertificationRequestInfo();
    public AlgorithmIdentifier get_SignatureAlgorithm();
    public DerBitString get_Signature();
    public Byte[] GetSignatureOctets();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo : Asn1Encodable {
    internal DerInteger version;
    internal X509Name subject;
    internal SubjectPublicKeyInfo subjectPKInfo;
    internal Asn1Set attributes;
    public DerInteger Version { get; }
    public X509Name Subject { get; }
    public SubjectPublicKeyInfo SubjectPublicKeyInfo { get; }
    public Asn1Set Attributes { get; }
    public CertificationRequestInfo(X509Name subject, SubjectPublicKeyInfo pkInfo, Asn1Set attributes);
    private CertificationRequestInfo(Asn1Sequence seq);
    public static CertificationRequestInfo GetInstance(object obj);
    public DerInteger get_Version();
    public X509Name get_Subject();
    public SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
    public Asn1Set get_Attributes();
    public virtual Asn1Object ToAsn1Object();
    private static void ValidateAttributes(Asn1Set attributes);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.ContentInfo : Asn1Encodable {
    private DerObjectIdentifier contentType;
    private Asn1Encodable content;
    public DerObjectIdentifier ContentType { get; }
    public Asn1Encodable Content { get; }
    private ContentInfo(Asn1Sequence seq);
    public ContentInfo(DerObjectIdentifier contentType, Asn1Encodable content);
    public static ContentInfo GetInstance(object obj);
    public DerObjectIdentifier get_ContentType();
    public Asn1Encodable get_Content();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.DHParameter : Asn1Encodable {
    internal DerInteger p;
    internal DerInteger g;
    internal DerInteger l;
    public BigInteger P { get; }
    public BigInteger G { get; }
    public BigInteger L { get; }
    public DHParameter(BigInteger p, BigInteger g, int l);
    public DHParameter(Asn1Sequence seq);
    public BigInteger get_P();
    public BigInteger get_G();
    public BigInteger get_L();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.EncryptedData : Asn1Encodable {
    private Asn1Sequence data;
    public DerObjectIdentifier ContentType { get; }
    public AlgorithmIdentifier EncryptionAlgorithm { get; }
    public Asn1OctetString Content { get; }
    private EncryptedData(Asn1Sequence seq);
    public EncryptedData(DerObjectIdentifier contentType, AlgorithmIdentifier encryptionAlgorithm, Asn1Encodable content);
    public static EncryptedData GetInstance(object obj);
    public DerObjectIdentifier get_ContentType();
    public AlgorithmIdentifier get_EncryptionAlgorithm();
    public Asn1OctetString get_Content();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo : Asn1Encodable {
    private AlgorithmIdentifier algId;
    private Asn1OctetString data;
    public AlgorithmIdentifier EncryptionAlgorithm { get; }
    private EncryptedPrivateKeyInfo(Asn1Sequence seq);
    public EncryptedPrivateKeyInfo(AlgorithmIdentifier algId, Byte[] encoding);
    public static EncryptedPrivateKeyInfo GetInstance(object obj);
    public AlgorithmIdentifier get_EncryptionAlgorithm();
    public Byte[] GetEncryptedData();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.EncryptionScheme : AlgorithmIdentifier {
    public Asn1Object Asn1Object { get; }
    public EncryptionScheme(DerObjectIdentifier objectID);
    public EncryptionScheme(DerObjectIdentifier objectID, Asn1Encodable parameters);
    internal EncryptionScheme(Asn1Sequence seq);
    public static EncryptionScheme GetInstance(object obj);
    public Asn1Object get_Asn1Object();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.IssuerAndSerialNumber : Asn1Encodable {
    private X509Name name;
    private DerInteger certSerialNumber;
    public X509Name Name { get; }
    public DerInteger CertificateSerialNumber { get; }
    private IssuerAndSerialNumber(Asn1Sequence seq);
    public IssuerAndSerialNumber(X509Name name, BigInteger certSerialNumber);
    public IssuerAndSerialNumber(X509Name name, DerInteger certSerialNumber);
    public static IssuerAndSerialNumber GetInstance(object obj);
    public X509Name get_Name();
    public DerInteger get_CertificateSerialNumber();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.KeyDerivationFunc : AlgorithmIdentifier {
    internal KeyDerivationFunc(Asn1Sequence seq);
    public KeyDerivationFunc(DerObjectIdentifier id, Asn1Encodable parameters);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.MacData : Asn1Encodable {
    internal DigestInfo digInfo;
    internal Byte[] salt;
    internal BigInteger iterationCount;
    public DigestInfo Mac { get; }
    public BigInteger IterationCount { get; }
    private MacData(Asn1Sequence seq);
    public MacData(DigestInfo digInfo, Byte[] salt, int iterationCount);
    public static MacData GetInstance(object obj);
    public DigestInfo get_Mac();
    public Byte[] GetSalt();
    public BigInteger get_IterationCount();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.PbeParameter : Asn1Encodable {
    private Asn1OctetString salt;
    private DerInteger iterationCount;
    public BigInteger IterationCount { get; }
    private PbeParameter(Asn1Sequence seq);
    public PbeParameter(Byte[] salt, int iterationCount);
    public static PbeParameter GetInstance(object obj);
    public Byte[] GetSalt();
    public BigInteger get_IterationCount();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.PbeS2Parameters : Asn1Encodable {
    private KeyDerivationFunc func;
    private EncryptionScheme scheme;
    public KeyDerivationFunc KeyDerivationFunc { get; }
    public EncryptionScheme EncryptionScheme { get; }
    public PbeS2Parameters(KeyDerivationFunc keyDevFunc, EncryptionScheme encScheme);
    public PbeS2Parameters(Asn1Sequence seq);
    public static PbeS2Parameters GetInstance(object obj);
    public KeyDerivationFunc get_KeyDerivationFunc();
    public EncryptionScheme get_EncryptionScheme();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.Pbkdf2Params : Asn1Encodable {
    private static AlgorithmIdentifier algid_hmacWithSHA1;
    private Asn1OctetString octStr;
    private DerInteger iterationCount;
    private DerInteger keyLength;
    private AlgorithmIdentifier prf;
    public BigInteger IterationCount { get; }
    public BigInteger KeyLength { get; }
    public bool IsDefaultPrf { get; }
    public AlgorithmIdentifier Prf { get; }
    public Pbkdf2Params(Asn1Sequence seq);
    public Pbkdf2Params(Byte[] salt, int iterationCount);
    public Pbkdf2Params(Byte[] salt, int iterationCount, int keyLength);
    public Pbkdf2Params(Byte[] salt, int iterationCount, int keyLength, AlgorithmIdentifier prf);
    public Pbkdf2Params(Byte[] salt, int iterationCount, AlgorithmIdentifier prf);
    private static Pbkdf2Params();
    public static Pbkdf2Params GetInstance(object obj);
    public Byte[] GetSalt();
    public BigInteger get_IterationCount();
    public BigInteger get_KeyLength();
    public bool get_IsDefaultPrf();
    public AlgorithmIdentifier get_Prf();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.Pfx : Asn1Encodable {
    private ContentInfo contentInfo;
    private MacData macData;
    public ContentInfo AuthSafe { get; }
    public MacData MacData { get; }
    public Pfx(Asn1Sequence seq);
    public Pfx(ContentInfo contentInfo, MacData macData);
    public ContentInfo get_AuthSafe();
    public MacData get_MacData();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.Pkcs12PbeParams : Asn1Encodable {
    private DerInteger iterations;
    private Asn1OctetString iv;
    public BigInteger Iterations { get; }
    public Pkcs12PbeParams(Byte[] salt, int iterations);
    private Pkcs12PbeParams(Asn1Sequence seq);
    public static Pkcs12PbeParams GetInstance(object obj);
    public BigInteger get_Iterations();
    public Byte[] GetIV();
    public virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers : object {
    public static string Pkcs1;
    internal static DerObjectIdentifier Pkcs1Oid;
    public static DerObjectIdentifier RsaEncryption;
    public static DerObjectIdentifier MD2WithRsaEncryption;
    public static DerObjectIdentifier MD4WithRsaEncryption;
    public static DerObjectIdentifier MD5WithRsaEncryption;
    public static DerObjectIdentifier Sha1WithRsaEncryption;
    public static DerObjectIdentifier SrsaOaepEncryptionSet;
    public static DerObjectIdentifier IdRsaesOaep;
    public static DerObjectIdentifier IdMgf1;
    public static DerObjectIdentifier IdPSpecified;
    public static DerObjectIdentifier IdRsassaPss;
    public static DerObjectIdentifier Sha256WithRsaEncryption;
    public static DerObjectIdentifier Sha384WithRsaEncryption;
    public static DerObjectIdentifier Sha512WithRsaEncryption;
    public static DerObjectIdentifier Sha224WithRsaEncryption;
    public static DerObjectIdentifier Sha512_224WithRSAEncryption;
    public static DerObjectIdentifier Sha512_256WithRSAEncryption;
    public static string Pkcs3;
    public static DerObjectIdentifier DhKeyAgreement;
    public static string Pkcs5;
    public static DerObjectIdentifier PbeWithMD2AndDesCbc;
    public static DerObjectIdentifier PbeWithMD2AndRC2Cbc;
    public static DerObjectIdentifier PbeWithMD5AndDesCbc;
    public static DerObjectIdentifier PbeWithMD5AndRC2Cbc;
    public static DerObjectIdentifier PbeWithSha1AndDesCbc;
    public static DerObjectIdentifier PbeWithSha1AndRC2Cbc;
    public static DerObjectIdentifier IdPbeS2;
    public static DerObjectIdentifier IdPbkdf2;
    public static string EncryptionAlgorithm;
    public static DerObjectIdentifier DesEde3Cbc;
    public static DerObjectIdentifier RC2Cbc;
    public static DerObjectIdentifier rc4;
    public static string DigestAlgorithm;
    public static DerObjectIdentifier MD2;
    public static DerObjectIdentifier MD4;
    public static DerObjectIdentifier MD5;
    public static DerObjectIdentifier IdHmacWithSha1;
    public static DerObjectIdentifier IdHmacWithSha224;
    public static DerObjectIdentifier IdHmacWithSha256;
    public static DerObjectIdentifier IdHmacWithSha384;
    public static DerObjectIdentifier IdHmacWithSha512;
    public static string Pkcs7;
    public static DerObjectIdentifier Data;
    public static DerObjectIdentifier SignedData;
    public static DerObjectIdentifier EnvelopedData;
    public static DerObjectIdentifier SignedAndEnvelopedData;
    public static DerObjectIdentifier DigestedData;
    public static DerObjectIdentifier EncryptedData;
    public static string Pkcs9;
    public static DerObjectIdentifier Pkcs9AtEmailAddress;
    public static DerObjectIdentifier Pkcs9AtUnstructuredName;
    public static DerObjectIdentifier Pkcs9AtContentType;
    public static DerObjectIdentifier Pkcs9AtMessageDigest;
    public static DerObjectIdentifier Pkcs9AtSigningTime;
    public static DerObjectIdentifier Pkcs9AtCounterSignature;
    public static DerObjectIdentifier Pkcs9AtChallengePassword;
    public static DerObjectIdentifier Pkcs9AtUnstructuredAddress;
    public static DerObjectIdentifier Pkcs9AtExtendedCertificateAttributes;
    public static DerObjectIdentifier Pkcs9AtSigningDescription;
    public static DerObjectIdentifier Pkcs9AtExtensionRequest;
    public static DerObjectIdentifier Pkcs9AtSmimeCapabilities;
    public static DerObjectIdentifier IdSmime;
    public static DerObjectIdentifier Pkcs9AtFriendlyName;
    public static DerObjectIdentifier Pkcs9AtLocalKeyID;
    [ObsoleteAttribute("Use X509Certificate instead")]
public static DerObjectIdentifier X509CertType;
    public static string CertTypes;
    public static DerObjectIdentifier X509Certificate;
    public static DerObjectIdentifier SdsiCertificate;
    public static string CrlTypes;
    public static DerObjectIdentifier X509Crl;
    public static DerObjectIdentifier IdAlg;
    public static DerObjectIdentifier IdAlgEsdh;
    public static DerObjectIdentifier IdAlgCms3DesWrap;
    public static DerObjectIdentifier IdAlgCmsRC2Wrap;
    public static DerObjectIdentifier IdAlgPwriKek;
    public static DerObjectIdentifier IdAlgSsdh;
    public static DerObjectIdentifier IdRsaKem;
    public static DerObjectIdentifier PreferSignedData;
    public static DerObjectIdentifier CannotDecryptAny;
    public static DerObjectIdentifier SmimeCapabilitiesVersions;
    public static DerObjectIdentifier IdAAReceiptRequest;
    public static string IdCT;
    public static DerObjectIdentifier IdCTAuthData;
    public static DerObjectIdentifier IdCTTstInfo;
    public static DerObjectIdentifier IdCTCompressedData;
    public static DerObjectIdentifier IdCTAuthEnvelopedData;
    public static DerObjectIdentifier IdCTTimestampedData;
    public static string IdCti;
    public static DerObjectIdentifier IdCtiEtsProofOfOrigin;
    public static DerObjectIdentifier IdCtiEtsProofOfReceipt;
    public static DerObjectIdentifier IdCtiEtsProofOfDelivery;
    public static DerObjectIdentifier IdCtiEtsProofOfSender;
    public static DerObjectIdentifier IdCtiEtsProofOfApproval;
    public static DerObjectIdentifier IdCtiEtsProofOfCreation;
    public static string IdAA;
    public static DerObjectIdentifier IdAAOid;
    public static DerObjectIdentifier IdAAContentHint;
    public static DerObjectIdentifier IdAAMsgSigDigest;
    public static DerObjectIdentifier IdAAContentReference;
    public static DerObjectIdentifier IdAAEncrypKeyPref;
    public static DerObjectIdentifier IdAASigningCertificate;
    public static DerObjectIdentifier IdAASigningCertificateV2;
    public static DerObjectIdentifier IdAAContentIdentifier;
    public static DerObjectIdentifier IdAASignatureTimeStampToken;
    public static DerObjectIdentifier IdAAEtsSigPolicyID;
    public static DerObjectIdentifier IdAAEtsCommitmentType;
    public static DerObjectIdentifier IdAAEtsSignerLocation;
    public static DerObjectIdentifier IdAAEtsSignerAttr;
    public static DerObjectIdentifier IdAAEtsOtherSigCert;
    public static DerObjectIdentifier IdAAEtsContentTimestamp;
    public static DerObjectIdentifier IdAAEtsCertificateRefs;
    public static DerObjectIdentifier IdAAEtsRevocationRefs;
    public static DerObjectIdentifier IdAAEtsCertValues;
    public static DerObjectIdentifier IdAAEtsRevocationValues;
    public static DerObjectIdentifier IdAAEtsEscTimeStamp;
    public static DerObjectIdentifier IdAAEtsCertCrlTimestamp;
    public static DerObjectIdentifier IdAAEtsArchiveTimestamp;
    public static DerObjectIdentifier IdAADecryptKeyID;
    public static DerObjectIdentifier IdAAImplCryptoAlgs;
    public static DerObjectIdentifier IdAAAsymmDecryptKeyID;
    public static DerObjectIdentifier IdAAImplCompressAlgs;
    public static DerObjectIdentifier IdAACommunityIdentifiers;
    [ObsoleteAttribute("Use 'IdAAEtsSigPolicyID' instead")]
public static DerObjectIdentifier IdAASigPolicyID;
    [ObsoleteAttribute("Use 'IdAAEtsCommitmentType' instead")]
public static DerObjectIdentifier IdAACommitmentType;
    [ObsoleteAttribute("Use 'IdAAEtsSignerLocation' instead")]
public static DerObjectIdentifier IdAASignerLocation;
    [ObsoleteAttribute("Use 'IdAAEtsOtherSigCert' instead")]
public static DerObjectIdentifier IdAAOtherSigCert;
    public static string IdSpq;
    public static DerObjectIdentifier IdSpqEtsUri;
    public static DerObjectIdentifier IdSpqEtsUNotice;
    public static string Pkcs12;
    public static string BagTypes;
    public static DerObjectIdentifier KeyBag;
    public static DerObjectIdentifier Pkcs8ShroudedKeyBag;
    public static DerObjectIdentifier CertBag;
    public static DerObjectIdentifier CrlBag;
    public static DerObjectIdentifier SecretBag;
    public static DerObjectIdentifier SafeContentsBag;
    public static string Pkcs12PbeIds;
    public static DerObjectIdentifier PbeWithShaAnd128BitRC4;
    public static DerObjectIdentifier PbeWithShaAnd40BitRC4;
    public static DerObjectIdentifier PbeWithShaAnd3KeyTripleDesCbc;
    public static DerObjectIdentifier PbeWithShaAnd2KeyTripleDesCbc;
    public static DerObjectIdentifier PbeWithShaAnd128BitRC2Cbc;
    public static DerObjectIdentifier PbewithShaAnd40BitRC2Cbc;
    private static PkcsObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo : Asn1Encodable {
    private DerInteger version;
    private AlgorithmIdentifier privateKeyAlgorithm;
    private Asn1OctetString privateKey;
    private Asn1Set attributes;
    private DerBitString publicKey;
    public Asn1Set Attributes { get; }
    public bool HasPublicKey { get; }
    public AlgorithmIdentifier PrivateKeyAlgorithm { get; }
    public DerBitString PublicKeyData { get; }
    public PrivateKeyInfo(AlgorithmIdentifier privateKeyAlgorithm, Asn1Encodable privateKey);
    public PrivateKeyInfo(AlgorithmIdentifier privateKeyAlgorithm, Asn1Encodable privateKey, Asn1Set attributes);
    public PrivateKeyInfo(AlgorithmIdentifier privateKeyAlgorithm, Asn1Encodable privateKey, Asn1Set attributes, Byte[] publicKey);
    private PrivateKeyInfo(Asn1Sequence seq);
    public static PrivateKeyInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static PrivateKeyInfo GetInstance(object obj);
    private static int GetVersionValue(DerInteger version);
    public virtual Asn1Set get_Attributes();
    public virtual bool get_HasPublicKey();
    public virtual AlgorithmIdentifier get_PrivateKeyAlgorithm();
    public virtual Asn1Object ParsePrivateKey();
    public virtual Asn1Object ParsePublicKey();
    public virtual DerBitString get_PublicKeyData();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.RC2CbcParameter : Asn1Encodable {
    internal DerInteger version;
    internal Asn1OctetString iv;
    public BigInteger RC2ParameterVersion { get; }
    public RC2CbcParameter(Byte[] iv);
    public RC2CbcParameter(int parameterVersion, Byte[] iv);
    private RC2CbcParameter(Asn1Sequence seq);
    public static RC2CbcParameter GetInstance(object obj);
    public BigInteger get_RC2ParameterVersion();
    public Byte[] GetIV();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters : Asn1Encodable {
    private AlgorithmIdentifier hashAlgorithm;
    private AlgorithmIdentifier maskGenAlgorithm;
    private AlgorithmIdentifier pSourceAlgorithm;
    public static AlgorithmIdentifier DefaultHashAlgorithm;
    public static AlgorithmIdentifier DefaultMaskGenFunction;
    public static AlgorithmIdentifier DefaultPSourceAlgorithm;
    public AlgorithmIdentifier HashAlgorithm { get; }
    public AlgorithmIdentifier MaskGenAlgorithm { get; }
    public AlgorithmIdentifier PSourceAlgorithm { get; }
    public RsaesOaepParameters(AlgorithmIdentifier hashAlgorithm, AlgorithmIdentifier maskGenAlgorithm, AlgorithmIdentifier pSourceAlgorithm);
    public RsaesOaepParameters(Asn1Sequence seq);
    private static RsaesOaepParameters();
    public static RsaesOaepParameters GetInstance(object obj);
    public AlgorithmIdentifier get_HashAlgorithm();
    public AlgorithmIdentifier get_MaskGenAlgorithm();
    public AlgorithmIdentifier get_PSourceAlgorithm();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure : Asn1Encodable {
    private BigInteger modulus;
    private BigInteger publicExponent;
    private BigInteger privateExponent;
    private BigInteger prime1;
    private BigInteger prime2;
    private BigInteger exponent1;
    private BigInteger exponent2;
    private BigInteger coefficient;
    public BigInteger Modulus { get; }
    public BigInteger PublicExponent { get; }
    public BigInteger PrivateExponent { get; }
    public BigInteger Prime1 { get; }
    public BigInteger Prime2 { get; }
    public BigInteger Exponent1 { get; }
    public BigInteger Exponent2 { get; }
    public BigInteger Coefficient { get; }
    public RsaPrivateKeyStructure(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger prime1, BigInteger prime2, BigInteger exponent1, BigInteger exponent2, BigInteger coefficient);
    public RsaPrivateKeyStructure(Asn1Sequence seq);
    public static RsaPrivateKeyStructure GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static RsaPrivateKeyStructure GetInstance(object obj);
    public BigInteger get_Modulus();
    public BigInteger get_PublicExponent();
    public BigInteger get_PrivateExponent();
    public BigInteger get_Prime1();
    public BigInteger get_Prime2();
    public BigInteger get_Exponent1();
    public BigInteger get_Exponent2();
    public BigInteger get_Coefficient();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.RsassaPssParameters : Asn1Encodable {
    private AlgorithmIdentifier hashAlgorithm;
    private AlgorithmIdentifier maskGenAlgorithm;
    private DerInteger saltLength;
    private DerInteger trailerField;
    public static AlgorithmIdentifier DefaultHashAlgorithm;
    public static AlgorithmIdentifier DefaultMaskGenFunction;
    public static DerInteger DefaultSaltLength;
    public static DerInteger DefaultTrailerField;
    public AlgorithmIdentifier HashAlgorithm { get; }
    public AlgorithmIdentifier MaskGenAlgorithm { get; }
    public DerInteger SaltLength { get; }
    public DerInteger TrailerField { get; }
    public RsassaPssParameters(AlgorithmIdentifier hashAlgorithm, AlgorithmIdentifier maskGenAlgorithm, DerInteger saltLength, DerInteger trailerField);
    public RsassaPssParameters(Asn1Sequence seq);
    private static RsassaPssParameters();
    public static RsassaPssParameters GetInstance(object obj);
    public AlgorithmIdentifier get_HashAlgorithm();
    public AlgorithmIdentifier get_MaskGenAlgorithm();
    public DerInteger get_SaltLength();
    public DerInteger get_TrailerField();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.SafeBag : Asn1Encodable {
    private DerObjectIdentifier bagID;
    private Asn1Object bagValue;
    private Asn1Set bagAttributes;
    public DerObjectIdentifier BagID { get; }
    public Asn1Object BagValue { get; }
    public Asn1Set BagAttributes { get; }
    public SafeBag(DerObjectIdentifier oid, Asn1Object obj);
    public SafeBag(DerObjectIdentifier oid, Asn1Object obj, Asn1Set bagAttributes);
    public SafeBag(Asn1Sequence seq);
    public DerObjectIdentifier get_BagID();
    public Asn1Object get_BagValue();
    public Asn1Set get_BagAttributes();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.SignedData : Asn1Encodable {
    private DerInteger version;
    private Asn1Set digestAlgorithms;
    private ContentInfo contentInfo;
    private Asn1Set certificates;
    private Asn1Set crls;
    private Asn1Set signerInfos;
    public DerInteger Version { get; }
    public Asn1Set DigestAlgorithms { get; }
    public ContentInfo ContentInfo { get; }
    public Asn1Set Certificates { get; }
    public Asn1Set Crls { get; }
    public Asn1Set SignerInfos { get; }
    public SignedData(DerInteger _version, Asn1Set _digestAlgorithms, ContentInfo _contentInfo, Asn1Set _certificates, Asn1Set _crls, Asn1Set _signerInfos);
    private SignedData(Asn1Sequence seq);
    public static SignedData GetInstance(object obj);
    public DerInteger get_Version();
    public Asn1Set get_DigestAlgorithms();
    public ContentInfo get_ContentInfo();
    public Asn1Set get_Certificates();
    public Asn1Set get_Crls();
    public Asn1Set get_SignerInfos();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Pkcs.SignerInfo : Asn1Encodable {
    private DerInteger version;
    private IssuerAndSerialNumber issuerAndSerialNumber;
    private AlgorithmIdentifier digAlgorithm;
    private Asn1Set authenticatedAttributes;
    private AlgorithmIdentifier digEncryptionAlgorithm;
    private Asn1OctetString encryptedDigest;
    private Asn1Set unauthenticatedAttributes;
    public DerInteger Version { get; }
    public IssuerAndSerialNumber IssuerAndSerialNumber { get; }
    public Asn1Set AuthenticatedAttributes { get; }
    public AlgorithmIdentifier DigestAlgorithm { get; }
    public Asn1OctetString EncryptedDigest { get; }
    public AlgorithmIdentifier DigestEncryptionAlgorithm { get; }
    public Asn1Set UnauthenticatedAttributes { get; }
    public SignerInfo(DerInteger version, IssuerAndSerialNumber issuerAndSerialNumber, AlgorithmIdentifier digAlgorithm, Asn1Set authenticatedAttributes, AlgorithmIdentifier digEncryptionAlgorithm, Asn1OctetString encryptedDigest, Asn1Set unauthenticatedAttributes);
    public SignerInfo(Asn1Sequence seq);
    public static SignerInfo GetInstance(object obj);
    public DerInteger get_Version();
    public IssuerAndSerialNumber get_IssuerAndSerialNumber();
    public Asn1Set get_AuthenticatedAttributes();
    public AlgorithmIdentifier get_DigestAlgorithm();
    public Asn1OctetString get_EncryptedDigest();
    public AlgorithmIdentifier get_DigestEncryptionAlgorithm();
    public Asn1Set get_UnauthenticatedAttributes();
    public virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.Rosstandart.RosstandartObjectIdentifiers : object {
    public static DerObjectIdentifier rosstandart;
    public static DerObjectIdentifier id_tc26;
    public static DerObjectIdentifier id_tc26_gost_3411_12_256;
    public static DerObjectIdentifier id_tc26_gost_3411_12_512;
    public static DerObjectIdentifier id_tc26_hmac_gost_3411_12_256;
    public static DerObjectIdentifier id_tc26_hmac_gost_3411_12_512;
    public static DerObjectIdentifier id_tc26_gost_3410_12_256;
    public static DerObjectIdentifier id_tc26_gost_3410_12_512;
    public static DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_256;
    public static DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_512;
    public static DerObjectIdentifier id_tc26_agreement;
    public static DerObjectIdentifier id_tc26_agreement_gost_3410_12_256;
    public static DerObjectIdentifier id_tc26_agreement_gost_3410_12_512;
    public static DerObjectIdentifier id_tc26_gost_3410_12_256_paramSet;
    public static DerObjectIdentifier id_tc26_gost_3410_12_256_paramSetA;
    public static DerObjectIdentifier id_tc26_gost_3410_12_512_paramSet;
    public static DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetA;
    public static DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetB;
    public static DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetC;
    public static DerObjectIdentifier id_tc26_gost_28147_param_Z;
    private static RosstandartObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.TeleTrust.TeleTrusTObjectIdentifiers : object {
    public static DerObjectIdentifier TeleTrusTAlgorithm;
    public static DerObjectIdentifier RipeMD160;
    public static DerObjectIdentifier RipeMD128;
    public static DerObjectIdentifier RipeMD256;
    public static DerObjectIdentifier TeleTrusTRsaSignatureAlgorithm;
    public static DerObjectIdentifier RsaSignatureWithRipeMD160;
    public static DerObjectIdentifier RsaSignatureWithRipeMD128;
    public static DerObjectIdentifier RsaSignatureWithRipeMD256;
    public static DerObjectIdentifier ECSign;
    public static DerObjectIdentifier ECSignWithSha1;
    public static DerObjectIdentifier ECSignWithRipeMD160;
    public static DerObjectIdentifier EccBrainpool;
    public static DerObjectIdentifier EllipticCurve;
    public static DerObjectIdentifier VersionOne;
    public static DerObjectIdentifier BrainpoolP160R1;
    public static DerObjectIdentifier BrainpoolP160T1;
    public static DerObjectIdentifier BrainpoolP192R1;
    public static DerObjectIdentifier BrainpoolP192T1;
    public static DerObjectIdentifier BrainpoolP224R1;
    public static DerObjectIdentifier BrainpoolP224T1;
    public static DerObjectIdentifier BrainpoolP256R1;
    public static DerObjectIdentifier BrainpoolP256T1;
    public static DerObjectIdentifier BrainpoolP320R1;
    public static DerObjectIdentifier BrainpoolP320T1;
    public static DerObjectIdentifier BrainpoolP384R1;
    public static DerObjectIdentifier BrainpoolP384T1;
    public static DerObjectIdentifier BrainpoolP512R1;
    public static DerObjectIdentifier BrainpoolP512T1;
    private static TeleTrusTObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Tsp.Accuracy : Asn1Encodable {
    private DerInteger seconds;
    private DerInteger millis;
    private DerInteger micros;
    protected static int MinMillis;
    protected static int MaxMillis;
    protected static int MinMicros;
    protected static int MaxMicros;
    public DerInteger Seconds { get; }
    public DerInteger Millis { get; }
    public DerInteger Micros { get; }
    public Accuracy(DerInteger seconds, DerInteger millis, DerInteger micros);
    private Accuracy(Asn1Sequence seq);
    public static Accuracy GetInstance(object o);
    public DerInteger get_Seconds();
    public DerInteger get_Millis();
    public DerInteger get_Micros();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Tsp.MessageImprint : Asn1Encodable {
    private AlgorithmIdentifier hashAlgorithm;
    private Byte[] hashedMessage;
    public AlgorithmIdentifier HashAlgorithm { get; }
    private MessageImprint(Asn1Sequence seq);
    public MessageImprint(AlgorithmIdentifier hashAlgorithm, Byte[] hashedMessage);
    public static MessageImprint GetInstance(object o);
    public AlgorithmIdentifier get_HashAlgorithm();
    public Byte[] GetHashedMessage();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Tsp.TimeStampReq : Asn1Encodable {
    private DerInteger version;
    private MessageImprint messageImprint;
    private DerObjectIdentifier tsaPolicy;
    private DerInteger nonce;
    private DerBoolean certReq;
    private X509Extensions extensions;
    public DerInteger Version { get; }
    public MessageImprint MessageImprint { get; }
    public DerObjectIdentifier ReqPolicy { get; }
    public DerInteger Nonce { get; }
    public DerBoolean CertReq { get; }
    public X509Extensions Extensions { get; }
    private TimeStampReq(Asn1Sequence seq);
    public TimeStampReq(MessageImprint messageImprint, DerObjectIdentifier tsaPolicy, DerInteger nonce, DerBoolean certReq, X509Extensions extensions);
    public static TimeStampReq GetInstance(object o);
    public DerInteger get_Version();
    public MessageImprint get_MessageImprint();
    public DerObjectIdentifier get_ReqPolicy();
    public DerInteger get_Nonce();
    public DerBoolean get_CertReq();
    public X509Extensions get_Extensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Tsp.TimeStampResp : Asn1Encodable {
    private PkiStatusInfo pkiStatusInfo;
    private ContentInfo timeStampToken;
    public PkiStatusInfo Status { get; }
    public ContentInfo TimeStampToken { get; }
    private TimeStampResp(Asn1Sequence seq);
    public TimeStampResp(PkiStatusInfo pkiStatusInfo, ContentInfo timeStampToken);
    public static TimeStampResp GetInstance(object o);
    public PkiStatusInfo get_Status();
    public ContentInfo get_TimeStampToken();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Tsp.TstInfo : Asn1Encodable {
    private DerInteger version;
    private DerObjectIdentifier tsaPolicyId;
    private MessageImprint messageImprint;
    private DerInteger serialNumber;
    private DerGeneralizedTime genTime;
    private Accuracy accuracy;
    private DerBoolean ordering;
    private DerInteger nonce;
    private GeneralName tsa;
    private X509Extensions extensions;
    public DerInteger Version { get; }
    public MessageImprint MessageImprint { get; }
    public DerObjectIdentifier Policy { get; }
    public DerInteger SerialNumber { get; }
    public Accuracy Accuracy { get; }
    public DerGeneralizedTime GenTime { get; }
    public DerBoolean Ordering { get; }
    public DerInteger Nonce { get; }
    public GeneralName Tsa { get; }
    public X509Extensions Extensions { get; }
    private TstInfo(Asn1Sequence seq);
    public TstInfo(DerObjectIdentifier tsaPolicyId, MessageImprint messageImprint, DerInteger serialNumber, DerGeneralizedTime genTime, Accuracy accuracy, DerBoolean ordering, DerInteger nonce, GeneralName tsa, X509Extensions extensions);
    public static TstInfo GetInstance(object o);
    public DerInteger get_Version();
    public MessageImprint get_MessageImprint();
    public DerObjectIdentifier get_Policy();
    public DerInteger get_SerialNumber();
    public Accuracy get_Accuracy();
    public DerGeneralizedTime get_GenTime();
    public DerBoolean get_Ordering();
    public DerInteger get_Nonce();
    public GeneralName get_Tsa();
    public X509Extensions get_Extensions();
    public virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.UA.UAObjectIdentifiers : object {
    public static DerObjectIdentifier UaOid;
    public static DerObjectIdentifier dstu4145le;
    public static DerObjectIdentifier dstu4145be;
    public static DerObjectIdentifier dstu7564digest_256;
    public static DerObjectIdentifier dstu7564digest_384;
    public static DerObjectIdentifier dstu7564digest_512;
    public static DerObjectIdentifier dstu7564mac_256;
    public static DerObjectIdentifier dstu7564mac_384;
    public static DerObjectIdentifier dstu7564mac_512;
    public static DerObjectIdentifier dstu7624ecb_128;
    public static DerObjectIdentifier dstu7624ecb_256;
    public static DerObjectIdentifier dstu7624ecb_512;
    public static DerObjectIdentifier dstu7624ctr_128;
    public static DerObjectIdentifier dstu7624ctr_256;
    public static DerObjectIdentifier dstu7624ctr_512;
    public static DerObjectIdentifier dstu7624cfb_128;
    public static DerObjectIdentifier dstu7624cfb_256;
    public static DerObjectIdentifier dstu7624cfb_512;
    public static DerObjectIdentifier dstu7624cmac_128;
    public static DerObjectIdentifier dstu7624cmac_256;
    public static DerObjectIdentifier dstu7624cmac_512;
    public static DerObjectIdentifier dstu7624cbc_128;
    public static DerObjectIdentifier dstu7624cbc_256;
    public static DerObjectIdentifier dstu7624cbc_512;
    public static DerObjectIdentifier dstu7624ofb_128;
    public static DerObjectIdentifier dstu7624ofb_256;
    public static DerObjectIdentifier dstu7624ofb_512;
    public static DerObjectIdentifier dstu7624gmac_128;
    public static DerObjectIdentifier dstu7624gmac_256;
    public static DerObjectIdentifier dstu7624gmac_512;
    public static DerObjectIdentifier dstu7624ccm_128;
    public static DerObjectIdentifier dstu7624ccm_256;
    public static DerObjectIdentifier dstu7624ccm_512;
    public static DerObjectIdentifier dstu7624xts_128;
    public static DerObjectIdentifier dstu7624xts_256;
    public static DerObjectIdentifier dstu7624xts_512;
    public static DerObjectIdentifier dstu7624kw_128;
    public static DerObjectIdentifier dstu7624kw_256;
    public static DerObjectIdentifier dstu7624kw_512;
    private static UAObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.Utilities.Asn1Dump : object {
    private static string NewLine;
    private static string Tab;
    private static int SampleSize;
    private static Asn1Dump();
    private static void AsString(string indent, bool verbose, Asn1Object obj, StringBuilder buf);
    private static string outputApplicationSpecific(string type, string indent, bool verbose, DerApplicationSpecific app);
    [ObsoleteAttribute("Use version accepting Asn1Encodable")]
public static string DumpAsString(object obj);
    public static string DumpAsString(Asn1Encodable obj);
    public static string DumpAsString(Asn1Encodable obj, bool verbose);
    private static string dumpBinaryDataAsString(string indent, Byte[] bytes);
    private static string calculateAscString(Byte[] bytes, int off, int len);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X500.DirectoryString : Asn1Encodable {
    private DerStringBase str;
    private DirectoryString(DerStringBase str);
    public DirectoryString(string str);
    public static DirectoryString GetInstance(object obj);
    public static DirectoryString GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public sealed virtual string GetString();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AccessDescription : Asn1Encodable {
    public static DerObjectIdentifier IdADCAIssuers;
    public static DerObjectIdentifier IdADOcsp;
    private DerObjectIdentifier accessMethod;
    private GeneralName accessLocation;
    public DerObjectIdentifier AccessMethod { get; }
    public GeneralName AccessLocation { get; }
    private AccessDescription(Asn1Sequence seq);
    public AccessDescription(DerObjectIdentifier oid, GeneralName location);
    private static AccessDescription();
    public static AccessDescription GetInstance(object obj);
    public DerObjectIdentifier get_AccessMethod();
    public GeneralName get_AccessLocation();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AlgorithmIdentifier : Asn1Encodable {
    private DerObjectIdentifier algorithm;
    private Asn1Encodable parameters;
    public DerObjectIdentifier Algorithm { get; }
    [ObsoleteAttribute("Use 'Algorithm' property instead")]
public DerObjectIdentifier ObjectID { get; }
    public Asn1Encodable Parameters { get; }
    public AlgorithmIdentifier(DerObjectIdentifier algorithm);
    [ObsoleteAttribute("Use version taking a DerObjectIdentifier")]
public AlgorithmIdentifier(string algorithm);
    public AlgorithmIdentifier(DerObjectIdentifier algorithm, Asn1Encodable parameters);
    internal AlgorithmIdentifier(Asn1Sequence seq);
    public static AlgorithmIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static AlgorithmIdentifier GetInstance(object obj);
    public virtual DerObjectIdentifier get_Algorithm();
    public virtual DerObjectIdentifier get_ObjectID();
    public virtual Asn1Encodable get_Parameters();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AttCertIssuer : Asn1Encodable {
    internal Asn1Encodable obj;
    internal Asn1Object choiceObj;
    public Asn1Encodable Issuer { get; }
    public AttCertIssuer(GeneralNames names);
    public AttCertIssuer(V2Form v2Form);
    public static AttCertIssuer GetInstance(object obj);
    public static AttCertIssuer GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public Asn1Encodable get_Issuer();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AttCertValidityPeriod : Asn1Encodable {
    private DerGeneralizedTime notBeforeTime;
    private DerGeneralizedTime notAfterTime;
    public DerGeneralizedTime NotBeforeTime { get; }
    public DerGeneralizedTime NotAfterTime { get; }
    private AttCertValidityPeriod(Asn1Sequence seq);
    public AttCertValidityPeriod(DerGeneralizedTime notBeforeTime, DerGeneralizedTime notAfterTime);
    public static AttCertValidityPeriod GetInstance(object obj);
    public static AttCertValidityPeriod GetInstance(Asn1TaggedObject obj, bool explicitly);
    public DerGeneralizedTime get_NotBeforeTime();
    public DerGeneralizedTime get_NotAfterTime();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AttributeCertificate : Asn1Encodable {
    private AttributeCertificateInfo acinfo;
    private AlgorithmIdentifier signatureAlgorithm;
    private DerBitString signatureValue;
    public AttributeCertificateInfo ACInfo { get; }
    public AlgorithmIdentifier SignatureAlgorithm { get; }
    public DerBitString SignatureValue { get; }
    public AttributeCertificate(AttributeCertificateInfo acinfo, AlgorithmIdentifier signatureAlgorithm, DerBitString signatureValue);
    private AttributeCertificate(Asn1Sequence seq);
    public static AttributeCertificate GetInstance(object obj);
    public AttributeCertificateInfo get_ACInfo();
    public AlgorithmIdentifier get_SignatureAlgorithm();
    public DerBitString get_SignatureValue();
    public Byte[] GetSignatureOctets();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AttributeCertificateInfo : Asn1Encodable {
    internal DerInteger version;
    internal Holder holder;
    internal AttCertIssuer issuer;
    internal AlgorithmIdentifier signature;
    internal DerInteger serialNumber;
    internal AttCertValidityPeriod attrCertValidityPeriod;
    internal Asn1Sequence attributes;
    internal DerBitString issuerUniqueID;
    internal X509Extensions extensions;
    public DerInteger Version { get; }
    public Holder Holder { get; }
    public AttCertIssuer Issuer { get; }
    public AlgorithmIdentifier Signature { get; }
    public DerInteger SerialNumber { get; }
    public AttCertValidityPeriod AttrCertValidityPeriod { get; }
    public Asn1Sequence Attributes { get; }
    public DerBitString IssuerUniqueID { get; }
    public X509Extensions Extensions { get; }
    private AttributeCertificateInfo(Asn1Sequence seq);
    public static AttributeCertificateInfo GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public static AttributeCertificateInfo GetInstance(object obj);
    public DerInteger get_Version();
    public Holder get_Holder();
    public AttCertIssuer get_Issuer();
    public AlgorithmIdentifier get_Signature();
    public DerInteger get_SerialNumber();
    public AttCertValidityPeriod get_AttrCertValidityPeriod();
    public Asn1Sequence get_Attributes();
    public DerBitString get_IssuerUniqueID();
    public X509Extensions get_Extensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AttributeTable : object {
    private IDictionary attributes;
    public AttributeTable(IDictionary attrs);
    [ObsoleteAttribute]
public AttributeTable(Hashtable attrs);
    public AttributeTable(Asn1EncodableVector v);
    public AttributeTable(Asn1Set s);
    public AttributeX509 Get(DerObjectIdentifier oid);
    [ObsoleteAttribute("Use 'ToDictionary' instead")]
public Hashtable ToHashtable();
    public IDictionary ToDictionary();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AttributeX509 : Asn1Encodable {
    private DerObjectIdentifier attrType;
    private Asn1Set attrValues;
    public DerObjectIdentifier AttrType { get; }
    public Asn1Set AttrValues { get; }
    private AttributeX509(Asn1Sequence seq);
    public AttributeX509(DerObjectIdentifier attrType, Asn1Set attrValues);
    public static AttributeX509 GetInstance(object obj);
    public DerObjectIdentifier get_AttrType();
    public Asn1Encodable[] GetAttributeValues();
    public Asn1Set get_AttrValues();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AuthorityInformationAccess : Asn1Encodable {
    private AccessDescription[] descriptions;
    private AuthorityInformationAccess(Asn1Sequence seq);
    public AuthorityInformationAccess(AccessDescription description);
    public AuthorityInformationAccess(DerObjectIdentifier oid, GeneralName location);
    public static AuthorityInformationAccess GetInstance(object obj);
    public AccessDescription[] GetAccessDescriptions();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier : Asn1Encodable {
    internal Asn1OctetString keyidentifier;
    internal GeneralNames certissuer;
    internal DerInteger certserno;
    public GeneralNames AuthorityCertIssuer { get; }
    public BigInteger AuthorityCertSerialNumber { get; }
    protected internal AuthorityKeyIdentifier(Asn1Sequence seq);
    public AuthorityKeyIdentifier(GeneralNames name, BigInteger serialNumber);
    public AuthorityKeyIdentifier(Byte[] keyIdentifier);
    public AuthorityKeyIdentifier(Byte[] keyIdentifier, GeneralNames name, BigInteger serialNumber);
    public static AuthorityKeyIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static AuthorityKeyIdentifier GetInstance(object obj);
    public Byte[] GetKeyIdentifier();
    public GeneralNames get_AuthorityCertIssuer();
    public BigInteger get_AuthorityCertSerialNumber();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.BasicConstraints : Asn1Encodable {
    private DerBoolean cA;
    private DerInteger pathLenConstraint;
    public BigInteger PathLenConstraint { get; }
    private BasicConstraints(Asn1Sequence seq);
    public BasicConstraints(bool cA);
    public BasicConstraints(int pathLenConstraint);
    public static BasicConstraints GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static BasicConstraints GetInstance(object obj);
    public bool IsCA();
    public BigInteger get_PathLenConstraint();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CertificateList : Asn1Encodable {
    private TbsCertificateList tbsCertList;
    private AlgorithmIdentifier sigAlgID;
    private DerBitString sig;
    public TbsCertificateList TbsCertList { get; }
    public AlgorithmIdentifier SignatureAlgorithm { get; }
    public DerBitString Signature { get; }
    public int Version { get; }
    public X509Name Issuer { get; }
    public Time ThisUpdate { get; }
    public Time NextUpdate { get; }
    private CertificateList(Asn1Sequence seq);
    public static CertificateList GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static CertificateList GetInstance(object obj);
    public TbsCertificateList get_TbsCertList();
    public CrlEntry[] GetRevokedCertificates();
    public IEnumerable GetRevokedCertificateEnumeration();
    public AlgorithmIdentifier get_SignatureAlgorithm();
    public DerBitString get_Signature();
    public Byte[] GetSignatureOctets();
    public int get_Version();
    public X509Name get_Issuer();
    public Time get_ThisUpdate();
    public Time get_NextUpdate();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CertificatePair : Asn1Encodable {
    private X509CertificateStructure forward;
    private X509CertificateStructure reverse;
    public X509CertificateStructure Forward { get; }
    public X509CertificateStructure Reverse { get; }
    private CertificatePair(Asn1Sequence seq);
    public CertificatePair(X509CertificateStructure forward, X509CertificateStructure reverse);
    public static CertificatePair GetInstance(object obj);
    public virtual Asn1Object ToAsn1Object();
    public X509CertificateStructure get_Forward();
    public X509CertificateStructure get_Reverse();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CertificatePolicies : Asn1Encodable {
    private PolicyInformation[] policyInformation;
    public CertificatePolicies(PolicyInformation name);
    public CertificatePolicies(PolicyInformation[] policyInformation);
    private CertificatePolicies(Asn1Sequence seq);
    public static CertificatePolicies GetInstance(object obj);
    public static CertificatePolicies GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public virtual PolicyInformation[] GetPolicyInformation();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CertPolicyID : DerObjectIdentifier {
    public CertPolicyID(string id);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CrlDistPoint : Asn1Encodable {
    internal Asn1Sequence seq;
    private CrlDistPoint(Asn1Sequence seq);
    public CrlDistPoint(DistributionPoint[] points);
    public static CrlDistPoint GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static CrlDistPoint GetInstance(object obj);
    public DistributionPoint[] GetDistributionPoints();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CrlEntry : Asn1Encodable {
    internal Asn1Sequence seq;
    internal DerInteger userCertificate;
    internal Time revocationDate;
    internal X509Extensions crlEntryExtensions;
    public DerInteger UserCertificate { get; }
    public Time RevocationDate { get; }
    public X509Extensions Extensions { get; }
    public CrlEntry(Asn1Sequence seq);
    public DerInteger get_UserCertificate();
    public Time get_RevocationDate();
    public X509Extensions get_Extensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CrlNumber : DerInteger {
    public BigInteger Number { get; }
    public CrlNumber(BigInteger number);
    public BigInteger get_Number();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.CrlReason : DerEnumerated {
    public static int Unspecified;
    public static int KeyCompromise;
    public static int CACompromise;
    public static int AffiliationChanged;
    public static int Superseded;
    public static int CessationOfOperation;
    public static int CertificateHold;
    public static int RemoveFromCrl;
    public static int PrivilegeWithdrawn;
    public static int AACompromise;
    private static String[] ReasonString;
    public CrlReason(int reason);
    public CrlReason(DerEnumerated reason);
    private static CrlReason();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.DigestInfo : Asn1Encodable {
    private Byte[] digest;
    private AlgorithmIdentifier algID;
    public AlgorithmIdentifier AlgorithmID { get; }
    public DigestInfo(AlgorithmIdentifier algID, Byte[] digest);
    private DigestInfo(Asn1Sequence seq);
    public static DigestInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static DigestInfo GetInstance(object obj);
    public AlgorithmIdentifier get_AlgorithmID();
    public Byte[] GetDigest();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.DisplayText : Asn1Encodable {
    public static int ContentTypeIA5String;
    public static int ContentTypeBmpString;
    public static int ContentTypeUtf8String;
    public static int ContentTypeVisibleString;
    public static int DisplayTextMaximumSize;
    internal int contentType;
    internal IAsn1String contents;
    public DisplayText(int type, string text);
    public DisplayText(string text);
    public DisplayText(IAsn1String contents);
    public static DisplayText GetInstance(object obj);
    public virtual Asn1Object ToAsn1Object();
    public string GetString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.DistributionPoint : Asn1Encodable {
    internal DistributionPointName distributionPoint;
    internal ReasonFlags reasons;
    internal GeneralNames cRLIssuer;
    public DistributionPointName DistributionPointName { get; }
    public ReasonFlags Reasons { get; }
    public GeneralNames CrlIssuer { get; }
    private DistributionPoint(Asn1Sequence seq);
    public DistributionPoint(DistributionPointName distributionPointName, ReasonFlags reasons, GeneralNames crlIssuer);
    public static DistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static DistributionPoint GetInstance(object obj);
    public DistributionPointName get_DistributionPointName();
    public ReasonFlags get_Reasons();
    public GeneralNames get_CrlIssuer();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
    private void appendObject(StringBuilder buf, string sep, string name, string val);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.DistributionPointName : Asn1Encodable {
    internal Asn1Encodable name;
    internal int type;
    public static int FullName;
    public static int NameRelativeToCrlIssuer;
    public int PointType { get; }
    public Asn1Encodable Name { get; }
    public DistributionPointName(int type, Asn1Encodable name);
    public DistributionPointName(GeneralNames name);
    public DistributionPointName(Asn1TaggedObject obj);
    public static DistributionPointName GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static DistributionPointName GetInstance(object obj);
    public int get_PointType();
    public Asn1Encodable get_Name();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
    private void appendObject(StringBuilder buf, string sep, string name, string val);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.DsaParameter : Asn1Encodable {
    internal DerInteger p;
    internal DerInteger q;
    internal DerInteger g;
    public BigInteger P { get; }
    public BigInteger Q { get; }
    public BigInteger G { get; }
    public DsaParameter(BigInteger p, BigInteger q, BigInteger g);
    private DsaParameter(Asn1Sequence seq);
    public static DsaParameter GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static DsaParameter GetInstance(object obj);
    public BigInteger get_P();
    public BigInteger get_Q();
    public BigInteger get_G();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.ExtendedKeyUsage : Asn1Encodable {
    internal IDictionary usageTable;
    internal Asn1Sequence seq;
    public int Count { get; }
    private ExtendedKeyUsage(Asn1Sequence seq);
    public ExtendedKeyUsage(KeyPurposeID[] usages);
    [ObsoleteAttribute]
public ExtendedKeyUsage(ArrayList usages);
    public ExtendedKeyUsage(IEnumerable usages);
    public static ExtendedKeyUsage GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static ExtendedKeyUsage GetInstance(object obj);
    public bool HasKeyPurposeId(KeyPurposeID keyPurposeId);
    [ObsoleteAttribute("Use 'GetAllUsages'")]
public ArrayList GetUsages();
    public IList GetAllUsages();
    public int get_Count();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.GeneralName : Asn1Encodable {
    public static int OtherName;
    public static int Rfc822Name;
    public static int DnsName;
    public static int X400Address;
    public static int DirectoryName;
    public static int EdiPartyName;
    public static int UniformResourceIdentifier;
    public static int IPAddress;
    public static int RegisteredID;
    internal Asn1Encodable obj;
    internal int tag;
    public int TagNo { get; }
    public Asn1Encodable Name { get; }
    public GeneralName(X509Name directoryName);
    public GeneralName(Asn1Object name, int tag);
    public GeneralName(int tag, Asn1Encodable name);
    public GeneralName(int tag, string name);
    public static GeneralName GetInstance(object obj);
    public static GeneralName GetInstance(Asn1TaggedObject tagObj, bool explicitly);
    public int get_TagNo();
    public Asn1Encodable get_Name();
    public virtual string ToString();
    private Byte[] toGeneralNameEncoding(string ip);
    private void parseIPv4Mask(string mask, Byte[] addr, int offset);
    private void parseIPv4(string ip, Byte[] addr, int offset);
    private Int32[] parseMask(string mask);
    private void copyInts(Int32[] parsedIp, Byte[] addr, int offSet);
    private Int32[] parseIPv6(string ip);
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.GeneralNames : Asn1Encodable {
    private GeneralName[] names;
    public GeneralNames(GeneralName name);
    public GeneralNames(GeneralName[] names);
    private GeneralNames(Asn1Sequence seq);
    public static GeneralNames GetInstance(object obj);
    public static GeneralNames GetInstance(Asn1TaggedObject obj, bool explicitly);
    public GeneralName[] GetNames();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.GeneralSubtree : Asn1Encodable {
    private GeneralName baseName;
    private DerInteger minimum;
    private DerInteger maximum;
    public GeneralName Base { get; }
    public BigInteger Minimum { get; }
    public BigInteger Maximum { get; }
    private GeneralSubtree(Asn1Sequence seq);
    public GeneralSubtree(GeneralName baseName, BigInteger minimum, BigInteger maximum);
    public GeneralSubtree(GeneralName baseName);
    public static GeneralSubtree GetInstance(Asn1TaggedObject o, bool isExplicit);
    public static GeneralSubtree GetInstance(object obj);
    public GeneralName get_Base();
    public BigInteger get_Minimum();
    public BigInteger get_Maximum();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Holder : Asn1Encodable {
    internal IssuerSerial baseCertificateID;
    internal GeneralNames entityName;
    internal ObjectDigestInfo objectDigestInfo;
    private int version;
    public int Version { get; }
    public IssuerSerial BaseCertificateID { get; }
    public GeneralNames EntityName { get; }
    public ObjectDigestInfo ObjectDigestInfo { get; }
    public Holder(Asn1TaggedObject tagObj);
    private Holder(Asn1Sequence seq);
    public Holder(IssuerSerial baseCertificateID);
    public Holder(IssuerSerial baseCertificateID, int version);
    public Holder(GeneralNames entityName);
    public Holder(GeneralNames entityName, int version);
    public Holder(ObjectDigestInfo objectDigestInfo);
    public static Holder GetInstance(object obj);
    public int get_Version();
    public IssuerSerial get_BaseCertificateID();
    public GeneralNames get_EntityName();
    public ObjectDigestInfo get_ObjectDigestInfo();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.IetfAttrSyntax : Asn1Encodable {
    public static int ValueOctets;
    public static int ValueOid;
    public static int ValueUtf8;
    internal GeneralNames policyAuthority;
    internal Asn1EncodableVector values;
    internal int valueChoice;
    public GeneralNames PolicyAuthority { get; }
    public int ValueType { get; }
    public IetfAttrSyntax(Asn1Sequence seq);
    public GeneralNames get_PolicyAuthority();
    public int get_ValueType();
    public Object[] GetValues();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.IssuerSerial : Asn1Encodable {
    internal GeneralNames issuer;
    internal DerInteger serial;
    internal DerBitString issuerUid;
    public GeneralNames Issuer { get; }
    public DerInteger Serial { get; }
    public DerBitString IssuerUid { get; }
    private IssuerSerial(Asn1Sequence seq);
    public IssuerSerial(GeneralNames issuer, DerInteger serial);
    public static IssuerSerial GetInstance(object obj);
    public static IssuerSerial GetInstance(Asn1TaggedObject obj, bool explicitly);
    public GeneralNames get_Issuer();
    public DerInteger get_Serial();
    public DerBitString get_IssuerUid();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.IssuingDistributionPoint : Asn1Encodable {
    private DistributionPointName _distributionPoint;
    private bool _onlyContainsUserCerts;
    private bool _onlyContainsCACerts;
    private ReasonFlags _onlySomeReasons;
    private bool _indirectCRL;
    private bool _onlyContainsAttributeCerts;
    private Asn1Sequence seq;
    public bool OnlyContainsUserCerts { get; }
    public bool OnlyContainsCACerts { get; }
    public bool IsIndirectCrl { get; }
    public bool OnlyContainsAttributeCerts { get; }
    public DistributionPointName DistributionPoint { get; }
    public ReasonFlags OnlySomeReasons { get; }
    public IssuingDistributionPoint(DistributionPointName distributionPoint, bool onlyContainsUserCerts, bool onlyContainsCACerts, ReasonFlags onlySomeReasons, bool indirectCRL, bool onlyContainsAttributeCerts);
    private IssuingDistributionPoint(Asn1Sequence seq);
    public static IssuingDistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static IssuingDistributionPoint GetInstance(object obj);
    public bool get_OnlyContainsUserCerts();
    public bool get_OnlyContainsCACerts();
    public bool get_IsIndirectCrl();
    public bool get_OnlyContainsAttributeCerts();
    public DistributionPointName get_DistributionPoint();
    public ReasonFlags get_OnlySomeReasons();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
    private void appendObject(StringBuilder buf, string sep, string name, string val);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.KeyPurposeID : DerObjectIdentifier {
    private static string IdKP;
    public static KeyPurposeID AnyExtendedKeyUsage;
    public static KeyPurposeID IdKPServerAuth;
    public static KeyPurposeID IdKPClientAuth;
    public static KeyPurposeID IdKPCodeSigning;
    public static KeyPurposeID IdKPEmailProtection;
    public static KeyPurposeID IdKPIpsecEndSystem;
    public static KeyPurposeID IdKPIpsecTunnel;
    public static KeyPurposeID IdKPIpsecUser;
    public static KeyPurposeID IdKPTimeStamping;
    public static KeyPurposeID IdKPOcspSigning;
    public static KeyPurposeID IdKPSmartCardLogon;
    public static KeyPurposeID IdKPMacAddress;
    private KeyPurposeID(string id);
    private static KeyPurposeID();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.KeyUsage : DerBitString {
    public static int DigitalSignature;
    public static int NonRepudiation;
    public static int KeyEncipherment;
    public static int DataEncipherment;
    public static int KeyAgreement;
    public static int KeyCertSign;
    public static int CrlSign;
    public static int EncipherOnly;
    public static int DecipherOnly;
    public KeyUsage(int usage);
    private KeyUsage(DerBitString usage);
    public static KeyUsage GetInstance(object obj);
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.NameConstraints : Asn1Encodable {
    private Asn1Sequence permitted;
    private Asn1Sequence excluded;
    public Asn1Sequence PermittedSubtrees { get; }
    public Asn1Sequence ExcludedSubtrees { get; }
    public NameConstraints(Asn1Sequence seq);
    public NameConstraints(ArrayList permitted, ArrayList excluded);
    public NameConstraints(IList permitted, IList excluded);
    public static NameConstraints GetInstance(object obj);
    private DerSequence CreateSequence(IList subtrees);
    public Asn1Sequence get_PermittedSubtrees();
    public Asn1Sequence get_ExcludedSubtrees();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.NoticeReference : Asn1Encodable {
    private DisplayText organization;
    private Asn1Sequence noticeNumbers;
    public DisplayText Organization { get; }
    public NoticeReference(string organization, IList numbers);
    public NoticeReference(string organization, Asn1EncodableVector noticeNumbers);
    public NoticeReference(DisplayText organization, Asn1EncodableVector noticeNumbers);
    private NoticeReference(Asn1Sequence seq);
    private static Asn1EncodableVector ConvertVector(IList numbers);
    public static NoticeReference GetInstance(object obj);
    public virtual DisplayText get_Organization();
    public virtual DerInteger[] GetNoticeNumbers();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.ObjectDigestInfo : Asn1Encodable {
    public static int PublicKey;
    public static int PublicKeyCert;
    public static int OtherObjectDigest;
    internal DerEnumerated digestedObjectType;
    internal DerObjectIdentifier otherObjectTypeID;
    internal AlgorithmIdentifier digestAlgorithm;
    internal DerBitString objectDigest;
    public DerEnumerated DigestedObjectType { get; }
    public DerObjectIdentifier OtherObjectTypeID { get; }
    public AlgorithmIdentifier DigestAlgorithm { get; }
    public DerBitString ObjectDigest { get; }
    public ObjectDigestInfo(int digestedObjectType, string otherObjectTypeID, AlgorithmIdentifier digestAlgorithm, Byte[] objectDigest);
    private ObjectDigestInfo(Asn1Sequence seq);
    public static ObjectDigestInfo GetInstance(object obj);
    public static ObjectDigestInfo GetInstance(Asn1TaggedObject obj, bool isExplicit);
    public DerEnumerated get_DigestedObjectType();
    public DerObjectIdentifier get_OtherObjectTypeID();
    public AlgorithmIdentifier get_DigestAlgorithm();
    public DerBitString get_ObjectDigest();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.PolicyInformation : Asn1Encodable {
    private DerObjectIdentifier policyIdentifier;
    private Asn1Sequence policyQualifiers;
    public DerObjectIdentifier PolicyIdentifier { get; }
    public Asn1Sequence PolicyQualifiers { get; }
    private PolicyInformation(Asn1Sequence seq);
    public PolicyInformation(DerObjectIdentifier policyIdentifier);
    public PolicyInformation(DerObjectIdentifier policyIdentifier, Asn1Sequence policyQualifiers);
    public static PolicyInformation GetInstance(object obj);
    public DerObjectIdentifier get_PolicyIdentifier();
    public Asn1Sequence get_PolicyQualifiers();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.PolicyMappings : Asn1Encodable {
    private Asn1Sequence seq;
    public PolicyMappings(Asn1Sequence seq);
    public PolicyMappings(Hashtable mappings);
    public PolicyMappings(IDictionary mappings);
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.PolicyQualifierID : DerObjectIdentifier {
    private static string IdQt;
    public static PolicyQualifierID IdQtCps;
    public static PolicyQualifierID IdQtUnotice;
    private PolicyQualifierID(string id);
    private static PolicyQualifierID();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.PolicyQualifierInfo : Asn1Encodable {
    private DerObjectIdentifier policyQualifierId;
    private Asn1Encodable qualifier;
    public DerObjectIdentifier PolicyQualifierId { get; }
    public Asn1Encodable Qualifier { get; }
    public PolicyQualifierInfo(DerObjectIdentifier policyQualifierId, Asn1Encodable qualifier);
    public PolicyQualifierInfo(string cps);
    private PolicyQualifierInfo(Asn1Sequence seq);
    public static PolicyQualifierInfo GetInstance(object obj);
    public virtual DerObjectIdentifier get_PolicyQualifierId();
    public virtual Asn1Encodable get_Qualifier();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod : Asn1Encodable {
    private DerGeneralizedTime _notBefore;
    private DerGeneralizedTime _notAfter;
    public DerGeneralizedTime NotBefore { get; }
    public DerGeneralizedTime NotAfter { get; }
    private PrivateKeyUsagePeriod(Asn1Sequence seq);
    public static PrivateKeyUsagePeriod GetInstance(object obj);
    public DerGeneralizedTime get_NotBefore();
    public DerGeneralizedTime get_NotAfter();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.BiometricData : Asn1Encodable {
    private TypeOfBiometricData typeOfBiometricData;
    private AlgorithmIdentifier hashAlgorithm;
    private Asn1OctetString biometricDataHash;
    private DerIA5String sourceDataUri;
    public TypeOfBiometricData TypeOfBiometricData { get; }
    public AlgorithmIdentifier HashAlgorithm { get; }
    public Asn1OctetString BiometricDataHash { get; }
    public DerIA5String SourceDataUri { get; }
    private BiometricData(Asn1Sequence seq);
    public BiometricData(TypeOfBiometricData typeOfBiometricData, AlgorithmIdentifier hashAlgorithm, Asn1OctetString biometricDataHash, DerIA5String sourceDataUri);
    public BiometricData(TypeOfBiometricData typeOfBiometricData, AlgorithmIdentifier hashAlgorithm, Asn1OctetString biometricDataHash);
    public static BiometricData GetInstance(object obj);
    public TypeOfBiometricData get_TypeOfBiometricData();
    public AlgorithmIdentifier get_HashAlgorithm();
    public Asn1OctetString get_BiometricDataHash();
    public DerIA5String get_SourceDataUri();
    public virtual Asn1Object ToAsn1Object();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.EtsiQCObjectIdentifiers : object {
    public static DerObjectIdentifier IdEtsiQcs;
    public static DerObjectIdentifier IdEtsiQcsQcCompliance;
    public static DerObjectIdentifier IdEtsiQcsLimitValue;
    public static DerObjectIdentifier IdEtsiQcsRetentionPeriod;
    public static DerObjectIdentifier IdEtsiQcsQcSscd;
    private static EtsiQCObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode : Asn1Encodable {
    internal static int AlphabeticMaxSize;
    internal static int NumericMinSize;
    internal static int NumericMaxSize;
    internal Asn1Encodable obj;
    public bool IsAlphabetic { get; }
    public string Alphabetic { get; }
    public int Numeric { get; }
    public Iso4217CurrencyCode(int numeric);
    public Iso4217CurrencyCode(string alphabetic);
    public static Iso4217CurrencyCode GetInstance(object obj);
    public bool get_IsAlphabetic();
    public string get_Alphabetic();
    public int get_Numeric();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.MonetaryValue : Asn1Encodable {
    internal Iso4217CurrencyCode currency;
    internal DerInteger amount;
    internal DerInteger exponent;
    public Iso4217CurrencyCode Currency { get; }
    public BigInteger Amount { get; }
    public BigInteger Exponent { get; }
    private MonetaryValue(Asn1Sequence seq);
    public MonetaryValue(Iso4217CurrencyCode currency, int amount, int exponent);
    public static MonetaryValue GetInstance(object obj);
    public Iso4217CurrencyCode get_Currency();
    public BigInteger get_Amount();
    public BigInteger get_Exponent();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.QCStatement : Asn1Encodable {
    private DerObjectIdentifier qcStatementId;
    private Asn1Encodable qcStatementInfo;
    public DerObjectIdentifier StatementId { get; }
    public Asn1Encodable StatementInfo { get; }
    private QCStatement(Asn1Sequence seq);
    public QCStatement(DerObjectIdentifier qcStatementId);
    public QCStatement(DerObjectIdentifier qcStatementId, Asn1Encodable qcStatementInfo);
    public static QCStatement GetInstance(object obj);
    public DerObjectIdentifier get_StatementId();
    public Asn1Encodable get_StatementInfo();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.Rfc3739QCObjectIdentifiers : object {
    public static DerObjectIdentifier IdQcs;
    public static DerObjectIdentifier IdQcsPkixQCSyntaxV1;
    public static DerObjectIdentifier IdQcsPkixQCSyntaxV2;
    private static Rfc3739QCObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation : Asn1Encodable {
    private DerObjectIdentifier semanticsIdentifier;
    private GeneralName[] nameRegistrationAuthorities;
    public DerObjectIdentifier SemanticsIdentifier { get; }
    public SemanticsInformation(Asn1Sequence seq);
    public SemanticsInformation(DerObjectIdentifier semanticsIdentifier, GeneralName[] generalNames);
    public SemanticsInformation(DerObjectIdentifier semanticsIdentifier);
    public SemanticsInformation(GeneralName[] generalNames);
    public static SemanticsInformation GetInstance(object obj);
    public DerObjectIdentifier get_SemanticsIdentifier();
    public GeneralName[] GetNameRegistrationAuthorities();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData : Asn1Encodable {
    public static int Picture;
    public static int HandwrittenSignature;
    internal Asn1Encodable obj;
    public bool IsPredefined { get; }
    public int PredefinedBiometricType { get; }
    public DerObjectIdentifier BiometricDataOid { get; }
    public TypeOfBiometricData(int predefinedBiometricType);
    public TypeOfBiometricData(DerObjectIdentifier biometricDataOid);
    public static TypeOfBiometricData GetInstance(object obj);
    public bool get_IsPredefined();
    public int get_PredefinedBiometricType();
    public DerObjectIdentifier get_BiometricDataOid();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.ReasonFlags : DerBitString {
    public static int Unused;
    public static int KeyCompromise;
    public static int CACompromise;
    public static int AffiliationChanged;
    public static int Superseded;
    public static int CessationOfOperation;
    public static int CertificateHold;
    public static int PrivilegeWithdrawn;
    public static int AACompromise;
    public ReasonFlags(int reasons);
    public ReasonFlags(DerBitString reasons);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.RoleSyntax : Asn1Encodable {
    private GeneralNames roleAuthority;
    private GeneralName roleName;
    public GeneralNames RoleAuthority { get; }
    public GeneralName RoleName { get; }
    public RoleSyntax(GeneralNames roleAuthority, GeneralName roleName);
    public RoleSyntax(GeneralName roleName);
    public RoleSyntax(string roleName);
    private RoleSyntax(Asn1Sequence seq);
    public static RoleSyntax GetInstance(object obj);
    public GeneralNames get_RoleAuthority();
    public GeneralName get_RoleName();
    public string GetRoleNameAsString();
    public String[] GetRoleAuthorityAsString();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.RsaPublicKeyStructure : Asn1Encodable {
    private BigInteger modulus;
    private BigInteger publicExponent;
    public BigInteger Modulus { get; }
    public BigInteger PublicExponent { get; }
    public RsaPublicKeyStructure(BigInteger modulus, BigInteger publicExponent);
    private RsaPublicKeyStructure(Asn1Sequence seq);
    public static RsaPublicKeyStructure GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static RsaPublicKeyStructure GetInstance(object obj);
    public BigInteger get_Modulus();
    public BigInteger get_PublicExponent();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym : Asn1Encodable {
    private DirectoryString pseudonym;
    private DirectoryString surname;
    private Asn1Sequence givenName;
    public DirectoryString Pseudonym { get; }
    public DirectoryString Surname { get; }
    public NameOrPseudonym(DirectoryString pseudonym);
    private NameOrPseudonym(Asn1Sequence seq);
    public NameOrPseudonym(string pseudonym);
    public NameOrPseudonym(DirectoryString surname, Asn1Sequence givenName);
    public static NameOrPseudonym GetInstance(object obj);
    public DirectoryString get_Pseudonym();
    public DirectoryString get_Surname();
    public DirectoryString[] GetGivenName();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.SigI.PersonalData : Asn1Encodable {
    private NameOrPseudonym nameOrPseudonym;
    private BigInteger nameDistinguisher;
    private DerGeneralizedTime dateOfBirth;
    private DirectoryString placeOfBirth;
    private string gender;
    private DirectoryString postalAddress;
    public NameOrPseudonym NameOrPseudonym { get; }
    public BigInteger NameDistinguisher { get; }
    public DerGeneralizedTime DateOfBirth { get; }
    public DirectoryString PlaceOfBirth { get; }
    public string Gender { get; }
    public DirectoryString PostalAddress { get; }
    private PersonalData(Asn1Sequence seq);
    public PersonalData(NameOrPseudonym nameOrPseudonym, BigInteger nameDistinguisher, DerGeneralizedTime dateOfBirth, DirectoryString placeOfBirth, string gender, DirectoryString postalAddress);
    public static PersonalData GetInstance(object obj);
    public NameOrPseudonym get_NameOrPseudonym();
    public BigInteger get_NameDistinguisher();
    public DerGeneralizedTime get_DateOfBirth();
    public DirectoryString get_PlaceOfBirth();
    public string get_Gender();
    public DirectoryString get_PostalAddress();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers : object {
    public static DerObjectIdentifier IdSigI;
    public static DerObjectIdentifier IdSigIKP;
    public static DerObjectIdentifier IdSigICP;
    public static DerObjectIdentifier IdSigION;
    public static DerObjectIdentifier IdSigIKPDirectoryService;
    public static DerObjectIdentifier IdSigIONPersonalData;
    public static DerObjectIdentifier IdSigICPSigConform;
    private static SigIObjectIdentifiers();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes : Asn1Encodable {
    private IList attributes;
    public IEnumerable Attributes { get; }
    private SubjectDirectoryAttributes(Asn1Sequence seq);
    [ObsoleteAttribute]
public SubjectDirectoryAttributes(ArrayList attributes);
    public SubjectDirectoryAttributes(IList attributes);
    public static SubjectDirectoryAttributes GetInstance(object obj);
    public virtual Asn1Object ToAsn1Object();
    public IEnumerable get_Attributes();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.SubjectKeyIdentifier : Asn1Encodable {
    private Byte[] keyIdentifier;
    public SubjectKeyIdentifier(Byte[] keyID);
    public SubjectKeyIdentifier(Asn1OctetString keyID);
    public static SubjectKeyIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static SubjectKeyIdentifier GetInstance(object obj);
    public Byte[] GetKeyIdentifier();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo : Asn1Encodable {
    private AlgorithmIdentifier algID;
    private DerBitString keyData;
    public AlgorithmIdentifier AlgorithmID { get; }
    public DerBitString PublicKeyData { get; }
    public SubjectPublicKeyInfo(AlgorithmIdentifier algID, Asn1Encodable publicKey);
    public SubjectPublicKeyInfo(AlgorithmIdentifier algID, Byte[] publicKey);
    private SubjectPublicKeyInfo(Asn1Sequence seq);
    public static SubjectPublicKeyInfo GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static SubjectPublicKeyInfo GetInstance(object obj);
    public AlgorithmIdentifier get_AlgorithmID();
    public Asn1Object GetPublicKey();
    public DerBitString get_PublicKeyData();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Target : Asn1Encodable {
    private GeneralName targetName;
    private GeneralName targetGroup;
    public GeneralName TargetGroup { get; }
    public GeneralName TargetName { get; }
    private Target(Asn1TaggedObject tagObj);
    public Target(Choice type, GeneralName name);
    public static Target GetInstance(object obj);
    public virtual GeneralName get_TargetGroup();
    public virtual GeneralName get_TargetName();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.TargetInformation : Asn1Encodable {
    private Asn1Sequence targets;
    private TargetInformation(Asn1Sequence targets);
    public TargetInformation(Targets targets);
    public TargetInformation(Target[] targets);
    public static TargetInformation GetInstance(object obj);
    public virtual Targets[] GetTargetsObjects();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Targets : Asn1Encodable {
    private Asn1Sequence targets;
    private Targets(Asn1Sequence targets);
    public Targets(Target[] targets);
    public static Targets GetInstance(object obj);
    public virtual Target[] GetTargets();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.TbsCertificateList : Asn1Encodable {
    internal Asn1Sequence seq;
    internal DerInteger version;
    internal AlgorithmIdentifier signature;
    internal X509Name issuer;
    internal Time thisUpdate;
    internal Time nextUpdate;
    internal Asn1Sequence revokedCertificates;
    internal X509Extensions crlExtensions;
    public int Version { get; }
    public DerInteger VersionNumber { get; }
    public AlgorithmIdentifier Signature { get; }
    public X509Name Issuer { get; }
    public Time ThisUpdate { get; }
    public Time NextUpdate { get; }
    public X509Extensions Extensions { get; }
    internal TbsCertificateList(Asn1Sequence seq);
    public static TbsCertificateList GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static TbsCertificateList GetInstance(object obj);
    public int get_Version();
    public DerInteger get_VersionNumber();
    public AlgorithmIdentifier get_Signature();
    public X509Name get_Issuer();
    public Time get_ThisUpdate();
    public Time get_NextUpdate();
    public CrlEntry[] GetRevokedCertificates();
    public IEnumerable GetRevokedCertificateEnumeration();
    public X509Extensions get_Extensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.TbsCertificateStructure : Asn1Encodable {
    internal Asn1Sequence seq;
    internal DerInteger version;
    internal DerInteger serialNumber;
    internal AlgorithmIdentifier signature;
    internal X509Name issuer;
    internal Time startDate;
    internal Time endDate;
    internal X509Name subject;
    internal SubjectPublicKeyInfo subjectPublicKeyInfo;
    internal DerBitString issuerUniqueID;
    internal DerBitString subjectUniqueID;
    internal X509Extensions extensions;
    public int Version { get; }
    public DerInteger VersionNumber { get; }
    public DerInteger SerialNumber { get; }
    public AlgorithmIdentifier Signature { get; }
    public X509Name Issuer { get; }
    public Time StartDate { get; }
    public Time EndDate { get; }
    public X509Name Subject { get; }
    public SubjectPublicKeyInfo SubjectPublicKeyInfo { get; }
    public DerBitString IssuerUniqueID { get; }
    public DerBitString SubjectUniqueID { get; }
    public X509Extensions Extensions { get; }
    internal TbsCertificateStructure(Asn1Sequence seq);
    public static TbsCertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static TbsCertificateStructure GetInstance(object obj);
    public int get_Version();
    public DerInteger get_VersionNumber();
    public DerInteger get_SerialNumber();
    public AlgorithmIdentifier get_Signature();
    public X509Name get_Issuer();
    public Time get_StartDate();
    public Time get_EndDate();
    public X509Name get_Subject();
    public SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
    public DerBitString get_IssuerUniqueID();
    public DerBitString get_SubjectUniqueID();
    public X509Extensions get_Extensions();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.Time : Asn1Encodable {
    private Asn1Object time;
    public Time(Asn1Object time);
    public Time(DateTime date);
    public static Time GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static Time GetInstance(object obj);
    public string GetTime();
    public DateTime ToDateTime();
    public virtual Asn1Object ToAsn1Object();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.UserNotice : Asn1Encodable {
    private NoticeReference noticeRef;
    private DisplayText explicitText;
    public NoticeReference NoticeRef { get; }
    public DisplayText ExplicitText { get; }
    public UserNotice(NoticeReference noticeRef, DisplayText explicitText);
    public UserNotice(NoticeReference noticeRef, string str);
    public UserNotice(Asn1Sequence seq);
    public static UserNotice GetInstance(object obj);
    public virtual NoticeReference get_NoticeRef();
    public virtual DisplayText get_ExplicitText();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator : object {
    internal DerTaggedObject version;
    internal DerInteger serialNumber;
    internal AlgorithmIdentifier signature;
    internal X509Name issuer;
    internal Time startDate;
    internal Time endDate;
    internal X509Name subject;
    internal SubjectPublicKeyInfo subjectPublicKeyInfo;
    public void SetSerialNumber(DerInteger serialNumber);
    public void SetSignature(AlgorithmIdentifier signature);
    public void SetIssuer(X509Name issuer);
    public void SetStartDate(Time startDate);
    public void SetStartDate(DerUtcTime startDate);
    public void SetEndDate(Time endDate);
    public void SetEndDate(DerUtcTime endDate);
    public void SetSubject(X509Name subject);
    public void SetSubjectPublicKeyInfo(SubjectPublicKeyInfo pubKeyInfo);
    public TbsCertificateStructure GenerateTbsCertificate();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator : object {
    internal DerInteger version;
    internal Holder holder;
    internal AttCertIssuer issuer;
    internal AlgorithmIdentifier signature;
    internal DerInteger serialNumber;
    internal Asn1EncodableVector attributes;
    internal DerBitString issuerUniqueID;
    internal X509Extensions extensions;
    internal DerGeneralizedTime startDate;
    internal DerGeneralizedTime endDate;
    public void SetHolder(Holder holder);
    public void AddAttribute(string oid, Asn1Encodable value);
    public void AddAttribute(AttributeX509 attribute);
    public void SetSerialNumber(DerInteger serialNumber);
    public void SetSignature(AlgorithmIdentifier signature);
    public void SetIssuer(AttCertIssuer issuer);
    public void SetStartDate(DerGeneralizedTime startDate);
    public void SetEndDate(DerGeneralizedTime endDate);
    public void SetIssuerUniqueID(DerBitString issuerUniqueID);
    public void SetExtensions(X509Extensions extensions);
    public AttributeCertificateInfo GenerateAttributeCertificateInfo();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.V2Form : Asn1Encodable {
    internal GeneralNames issuerName;
    internal IssuerSerial baseCertificateID;
    internal ObjectDigestInfo objectDigestInfo;
    public GeneralNames IssuerName { get; }
    public IssuerSerial BaseCertificateID { get; }
    public ObjectDigestInfo ObjectDigestInfo { get; }
    public V2Form(GeneralNames issuerName);
    public V2Form(GeneralNames issuerName, IssuerSerial baseCertificateID);
    public V2Form(GeneralNames issuerName, ObjectDigestInfo objectDigestInfo);
    public V2Form(GeneralNames issuerName, IssuerSerial baseCertificateID, ObjectDigestInfo objectDigestInfo);
    private V2Form(Asn1Sequence seq);
    public static V2Form GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static V2Form GetInstance(object obj);
    public GeneralNames get_IssuerName();
    public IssuerSerial get_BaseCertificateID();
    public ObjectDigestInfo get_ObjectDigestInfo();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.V2TbsCertListGenerator : object {
    private DerInteger version;
    private AlgorithmIdentifier signature;
    private X509Name issuer;
    private Time thisUpdate;
    private Time nextUpdate;
    private X509Extensions extensions;
    private IList crlEntries;
    public void SetSignature(AlgorithmIdentifier signature);
    public void SetIssuer(X509Name issuer);
    public void SetThisUpdate(DerUtcTime thisUpdate);
    public void SetNextUpdate(DerUtcTime nextUpdate);
    public void SetThisUpdate(Time thisUpdate);
    public void SetNextUpdate(Time nextUpdate);
    public void AddCrlEntry(Asn1Sequence crlEntry);
    public void AddCrlEntry(DerInteger userCertificate, DerUtcTime revocationDate, int reason);
    public void AddCrlEntry(DerInteger userCertificate, Time revocationDate, int reason);
    public void AddCrlEntry(DerInteger userCertificate, Time revocationDate, int reason, DerGeneralizedTime invalidityDate);
    public void AddCrlEntry(DerInteger userCertificate, Time revocationDate, X509Extensions extensions);
    public void SetExtensions(X509Extensions extensions);
    public TbsCertificateList GenerateTbsCertList();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator : object {
    internal DerTaggedObject version;
    internal DerInteger serialNumber;
    internal AlgorithmIdentifier signature;
    internal X509Name issuer;
    internal Time startDate;
    internal Time endDate;
    internal X509Name subject;
    internal SubjectPublicKeyInfo subjectPublicKeyInfo;
    internal X509Extensions extensions;
    private bool altNamePresentAndCritical;
    private DerBitString issuerUniqueID;
    private DerBitString subjectUniqueID;
    public void SetSerialNumber(DerInteger serialNumber);
    public void SetSignature(AlgorithmIdentifier signature);
    public void SetIssuer(X509Name issuer);
    public void SetStartDate(DerUtcTime startDate);
    public void SetStartDate(Time startDate);
    public void SetEndDate(DerUtcTime endDate);
    public void SetEndDate(Time endDate);
    public void SetSubject(X509Name subject);
    public void SetIssuerUniqueID(DerBitString uniqueID);
    public void SetSubjectUniqueID(DerBitString uniqueID);
    public void SetSubjectPublicKeyInfo(SubjectPublicKeyInfo pubKeyInfo);
    public void SetExtensions(X509Extensions extensions);
    public TbsCertificateStructure GenerateTbsCertificate();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509Attributes : object {
    public static DerObjectIdentifier RoleSyntax;
    private static X509Attributes();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509CertificateStructure : Asn1Encodable {
    private TbsCertificateStructure tbsCert;
    private AlgorithmIdentifier sigAlgID;
    private DerBitString sig;
    public TbsCertificateStructure TbsCertificate { get; }
    public int Version { get; }
    public DerInteger SerialNumber { get; }
    public X509Name Issuer { get; }
    public Time StartDate { get; }
    public Time EndDate { get; }
    public X509Name Subject { get; }
    public SubjectPublicKeyInfo SubjectPublicKeyInfo { get; }
    public AlgorithmIdentifier SignatureAlgorithm { get; }
    public DerBitString Signature { get; }
    public X509CertificateStructure(TbsCertificateStructure tbsCert, AlgorithmIdentifier sigAlgID, DerBitString sig);
    private X509CertificateStructure(Asn1Sequence seq);
    public static X509CertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static X509CertificateStructure GetInstance(object obj);
    public TbsCertificateStructure get_TbsCertificate();
    public int get_Version();
    public DerInteger get_SerialNumber();
    public X509Name get_Issuer();
    public Time get_StartDate();
    public Time get_EndDate();
    public X509Name get_Subject();
    public SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
    public AlgorithmIdentifier get_SignatureAlgorithm();
    public DerBitString get_Signature();
    public Byte[] GetSignatureOctets();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509DefaultEntryConverter : X509NameEntryConverter {
    public virtual Asn1Object GetConvertedValue(DerObjectIdentifier oid, string value);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509Extension : object {
    internal bool critical;
    internal Asn1OctetString value;
    public bool IsCritical { get; }
    public Asn1OctetString Value { get; }
    public X509Extension(DerBoolean critical, Asn1OctetString value);
    public X509Extension(bool critical, Asn1OctetString value);
    public bool get_IsCritical();
    public Asn1OctetString get_Value();
    public Asn1Encodable GetParsedValue();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static Asn1Object ConvertValueToObject(X509Extension ext);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509Extensions : Asn1Encodable {
    public static DerObjectIdentifier SubjectDirectoryAttributes;
    public static DerObjectIdentifier SubjectKeyIdentifier;
    public static DerObjectIdentifier KeyUsage;
    public static DerObjectIdentifier PrivateKeyUsagePeriod;
    public static DerObjectIdentifier SubjectAlternativeName;
    public static DerObjectIdentifier IssuerAlternativeName;
    public static DerObjectIdentifier BasicConstraints;
    public static DerObjectIdentifier CrlNumber;
    public static DerObjectIdentifier ReasonCode;
    public static DerObjectIdentifier InstructionCode;
    public static DerObjectIdentifier InvalidityDate;
    public static DerObjectIdentifier DeltaCrlIndicator;
    public static DerObjectIdentifier IssuingDistributionPoint;
    public static DerObjectIdentifier CertificateIssuer;
    public static DerObjectIdentifier NameConstraints;
    public static DerObjectIdentifier CrlDistributionPoints;
    public static DerObjectIdentifier CertificatePolicies;
    public static DerObjectIdentifier PolicyMappings;
    public static DerObjectIdentifier AuthorityKeyIdentifier;
    public static DerObjectIdentifier PolicyConstraints;
    public static DerObjectIdentifier ExtendedKeyUsage;
    public static DerObjectIdentifier FreshestCrl;
    public static DerObjectIdentifier InhibitAnyPolicy;
    public static DerObjectIdentifier AuthorityInfoAccess;
    public static DerObjectIdentifier SubjectInfoAccess;
    public static DerObjectIdentifier LogoType;
    public static DerObjectIdentifier BiometricInfo;
    public static DerObjectIdentifier QCStatements;
    public static DerObjectIdentifier AuditIdentity;
    public static DerObjectIdentifier NoRevAvail;
    public static DerObjectIdentifier TargetInformation;
    public static DerObjectIdentifier ExpiredCertsOnCrl;
    private IDictionary extensions;
    private IList ordering;
    public IEnumerable ExtensionOids { get; }
    private X509Extensions(Asn1Sequence seq);
    public X509Extensions(IDictionary extensions);
    public X509Extensions(IList ordering, IDictionary extensions);
    public X509Extensions(IList oids, IList values);
    [ObsoleteAttribute]
public X509Extensions(Hashtable extensions);
    [ObsoleteAttribute]
public X509Extensions(ArrayList ordering, Hashtable extensions);
    [ObsoleteAttribute]
public X509Extensions(ArrayList oids, ArrayList values);
    private static X509Extensions();
    public static X509Extensions GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static X509Extensions GetInstance(object obj);
    [ObsoleteAttribute("Use ExtensionOids IEnumerable property")]
public IEnumerator Oids();
    public IEnumerable get_ExtensionOids();
    public X509Extension GetExtension(DerObjectIdentifier oid);
    public virtual Asn1Object ToAsn1Object();
    public bool Equivalent(X509Extensions other);
    public DerObjectIdentifier[] GetExtensionOids();
    public DerObjectIdentifier[] GetNonCriticalExtensionOids();
    public DerObjectIdentifier[] GetCriticalExtensionOids();
    private DerObjectIdentifier[] GetExtensionOids(bool isCritical);
    private static DerObjectIdentifier[] ToOidArray(IList oids);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509ExtensionsGenerator : object {
    private IDictionary extensions;
    private IList extOrdering;
    public bool IsEmpty { get; }
    public void Reset();
    public void AddExtension(DerObjectIdentifier oid, bool critical, Asn1Encodable extValue);
    public void AddExtension(DerObjectIdentifier oid, bool critical, Byte[] extValue);
    public bool get_IsEmpty();
    public X509Extensions Generate();
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509Name : Asn1Encodable {
    public static DerObjectIdentifier C;
    public static DerObjectIdentifier O;
    public static DerObjectIdentifier OU;
    public static DerObjectIdentifier T;
    public static DerObjectIdentifier CN;
    public static DerObjectIdentifier Street;
    public static DerObjectIdentifier SerialNumber;
    public static DerObjectIdentifier L;
    public static DerObjectIdentifier ST;
    public static DerObjectIdentifier Surname;
    public static DerObjectIdentifier GivenName;
    public static DerObjectIdentifier Initials;
    public static DerObjectIdentifier Generation;
    public static DerObjectIdentifier UniqueIdentifier;
    public static DerObjectIdentifier BusinessCategory;
    public static DerObjectIdentifier PostalCode;
    public static DerObjectIdentifier DnQualifier;
    public static DerObjectIdentifier Pseudonym;
    public static DerObjectIdentifier DateOfBirth;
    public static DerObjectIdentifier PlaceOfBirth;
    public static DerObjectIdentifier Gender;
    public static DerObjectIdentifier CountryOfCitizenship;
    public static DerObjectIdentifier CountryOfResidence;
    public static DerObjectIdentifier NameAtBirth;
    public static DerObjectIdentifier PostalAddress;
    public static DerObjectIdentifier DmdName;
    public static DerObjectIdentifier TelephoneNumber;
    public static DerObjectIdentifier OrganizationIdentifier;
    public static DerObjectIdentifier Name;
    public static DerObjectIdentifier EmailAddress;
    public static DerObjectIdentifier UnstructuredName;
    public static DerObjectIdentifier UnstructuredAddress;
    public static DerObjectIdentifier E;
    public static DerObjectIdentifier DC;
    public static DerObjectIdentifier UID;
    private static Boolean[] defaultReverse;
    public static Hashtable DefaultSymbols;
    public static Hashtable RFC2253Symbols;
    public static Hashtable RFC1779Symbols;
    public static Hashtable DefaultLookup;
    private IList ordering;
    private X509NameEntryConverter converter;
    private IList values;
    private IList added;
    private Asn1Sequence seq;
    public static bool DefaultReverse { get; public set; }
    private static X509Name();
    protected X509Name(Asn1Sequence seq);
    public X509Name(IList ordering, IDictionary attributes);
    public X509Name(IList ordering, IDictionary attributes, X509NameEntryConverter converter);
    public X509Name(IList oids, IList values);
    public X509Name(IList oids, IList values, X509NameEntryConverter converter);
    public X509Name(string dirName);
    public X509Name(string dirName, X509NameEntryConverter converter);
    public X509Name(bool reverse, string dirName);
    public X509Name(bool reverse, string dirName, X509NameEntryConverter converter);
    public X509Name(bool reverse, IDictionary lookUp, string dirName);
    public X509Name(bool reverse, IDictionary lookUp, string dirName, X509NameEntryConverter converter);
    public static bool get_DefaultReverse();
    public static void set_DefaultReverse(bool value);
    public static X509Name GetInstance(Asn1TaggedObject obj, bool explicitly);
    public static X509Name GetInstance(object obj);
    private DerObjectIdentifier DecodeOid(string name, IDictionary lookUp);
    public IList GetOidList();
    public IList GetValueList();
    public IList GetValueList(DerObjectIdentifier oid);
    public virtual Asn1Object ToAsn1Object();
    public bool Equivalent(X509Name other, bool inOrder);
    public bool Equivalent(X509Name other);
    private static bool equivalentStrings(string s1, string s2);
    private static string canonicalize(string s);
    private static Asn1Object decodeObject(string v);
    private static string stripInternalSpaces(string str);
    private void AppendValue(StringBuilder buf, IDictionary oidSymbols, DerObjectIdentifier oid, string val);
    public string ToString(bool reverse, IDictionary oidSymbols);
    public virtual string ToString();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509NameEntryConverter : object {
    protected Asn1Object ConvertHexEncoded(string hexString, int offset);
    protected bool CanBePrintable(string str);
    public abstract virtual Asn1Object GetConvertedValue(DerObjectIdentifier oid, string value);
}
public class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509NameTokenizer : object {
    private string value;
    private int index;
    private char separator;
    private StringBuilder buffer;
    public X509NameTokenizer(string oid);
    public X509NameTokenizer(string oid, char separator);
    public bool HasMoreTokens();
    public string NextToken();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.X509.X509ObjectIdentifiers : object {
    internal static string ID;
    public static DerObjectIdentifier CommonName;
    public static DerObjectIdentifier CountryName;
    public static DerObjectIdentifier LocalityName;
    public static DerObjectIdentifier StateOrProvinceName;
    public static DerObjectIdentifier Organization;
    public static DerObjectIdentifier OrganizationalUnitName;
    public static DerObjectIdentifier id_at_telephoneNumber;
    public static DerObjectIdentifier id_at_name;
    public static DerObjectIdentifier id_at_organizationIdentifier;
    public static DerObjectIdentifier IdSha1;
    public static DerObjectIdentifier RipeMD160;
    public static DerObjectIdentifier RipeMD160WithRsaEncryption;
    public static DerObjectIdentifier IdEARsa;
    public static DerObjectIdentifier IdPkix;
    public static DerObjectIdentifier IdPE;
    public static DerObjectIdentifier IdAD;
    public static DerObjectIdentifier IdADCAIssuers;
    public static DerObjectIdentifier IdADOcsp;
    public static DerObjectIdentifier OcspAccessMethod;
    public static DerObjectIdentifier CrlAccessMethod;
    private static X509ObjectIdentifiers();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Asn1.X9.X9ObjectIdentifiers : object {
    internal static string AnsiX962;
    public static DerObjectIdentifier ansi_X9_62;
    public static DerObjectIdentifier IdFieldType;
    public static DerObjectIdentifier PrimeField;
    public static DerObjectIdentifier CharacteristicTwoField;
    public static DerObjectIdentifier GNBasis;
    public static DerObjectIdentifier TPBasis;
    public static DerObjectIdentifier PPBasis;
    [ObsoleteAttribute("Use 'id_ecSigType' instead")]
public static string IdECSigType;
    public static DerObjectIdentifier id_ecSigType;
    public static DerObjectIdentifier ECDsaWithSha1;
    [ObsoleteAttribute("Use 'id_publicKeyType' instead")]
public static string IdPublicKeyType;
    public static DerObjectIdentifier id_publicKeyType;
    public static DerObjectIdentifier IdECPublicKey;
    public static DerObjectIdentifier ECDsaWithSha2;
    public static DerObjectIdentifier ECDsaWithSha224;
    public static DerObjectIdentifier ECDsaWithSha256;
    public static DerObjectIdentifier ECDsaWithSha384;
    public static DerObjectIdentifier ECDsaWithSha512;
    public static DerObjectIdentifier EllipticCurve;
    public static DerObjectIdentifier CTwoCurve;
    public static DerObjectIdentifier C2Pnb163v1;
    public static DerObjectIdentifier C2Pnb163v2;
    public static DerObjectIdentifier C2Pnb163v3;
    public static DerObjectIdentifier C2Pnb176w1;
    public static DerObjectIdentifier C2Tnb191v1;
    public static DerObjectIdentifier C2Tnb191v2;
    public static DerObjectIdentifier C2Tnb191v3;
    public static DerObjectIdentifier C2Onb191v4;
    public static DerObjectIdentifier C2Onb191v5;
    public static DerObjectIdentifier C2Pnb208w1;
    public static DerObjectIdentifier C2Tnb239v1;
    public static DerObjectIdentifier C2Tnb239v2;
    public static DerObjectIdentifier C2Tnb239v3;
    public static DerObjectIdentifier C2Onb239v4;
    public static DerObjectIdentifier C2Onb239v5;
    public static DerObjectIdentifier C2Pnb272w1;
    public static DerObjectIdentifier C2Pnb304w1;
    public static DerObjectIdentifier C2Tnb359v1;
    public static DerObjectIdentifier C2Pnb368w1;
    public static DerObjectIdentifier C2Tnb431r1;
    public static DerObjectIdentifier PrimeCurve;
    public static DerObjectIdentifier Prime192v1;
    public static DerObjectIdentifier Prime192v2;
    public static DerObjectIdentifier Prime192v3;
    public static DerObjectIdentifier Prime239v1;
    public static DerObjectIdentifier Prime239v2;
    public static DerObjectIdentifier Prime239v3;
    public static DerObjectIdentifier Prime256v1;
    public static DerObjectIdentifier IdDsa;
    public static DerObjectIdentifier IdDsaWithSha1;
    public static DerObjectIdentifier X9x63Scheme;
    public static DerObjectIdentifier DHSinglePassStdDHSha1KdfScheme;
    public static DerObjectIdentifier DHSinglePassCofactorDHSha1KdfScheme;
    public static DerObjectIdentifier MqvSinglePassSha1KdfScheme;
    public static DerObjectIdentifier ansi_x9_42;
    public static DerObjectIdentifier DHPublicNumber;
    public static DerObjectIdentifier X9x42Schemes;
    public static DerObjectIdentifier DHStatic;
    public static DerObjectIdentifier DHEphem;
    public static DerObjectIdentifier DHOneFlow;
    public static DerObjectIdentifier DHHybrid1;
    public static DerObjectIdentifier DHHybrid2;
    public static DerObjectIdentifier DHHybridOneFlow;
    public static DerObjectIdentifier Mqv2;
    public static DerObjectIdentifier Mqv1;
    private static X9ObjectIdentifiers();
}
internal class DevExpress.Pdf.Native.BouncyCastle.Cms.BaseDigestCalculator : object {
    private Byte[] digest;
    internal BaseDigestCalculator(Byte[] digest);
    public sealed virtual Byte[] GetDigest();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Cms.CmsAttributeTableGenerator {
    public abstract virtual AttributeTable GetAttributes(IDictionary parameters);
}
public enum DevExpress.Pdf.Native.BouncyCastle.Cms.CmsAttributeTableParameter : Enum {
    public int value__;
    public static CmsAttributeTableParameter ContentType;
    public static CmsAttributeTableParameter Digest;
    public static CmsAttributeTableParameter Signature;
    public static CmsAttributeTableParameter DigestAlgorithmIdentifier;
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.CmsException : Exception {
    public CmsException(string msg);
    public CmsException(string msg, Exception e);
}
public interface DevExpress.Pdf.Native.BouncyCastle.Cms.CmsProcessable {
    public abstract virtual void Write(Stream outStream);
    [ObsoleteAttribute]
public abstract virtual object GetContent();
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.CmsProcessableByteArray : object {
    private DerObjectIdentifier type;
    private Byte[] bytes;
    public DerObjectIdentifier Type { get; }
    public CmsProcessableByteArray(Byte[] bytes);
    public CmsProcessableByteArray(DerObjectIdentifier type, Byte[] bytes);
    public DerObjectIdentifier get_Type();
    public virtual Stream GetInputStream();
    public virtual void Write(Stream zOut);
    [ObsoleteAttribute]
public virtual object GetContent();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Cms.CmsReadable {
    public abstract virtual Stream GetInputStream();
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.CmsSignedData : object {
    private static CmsSignedHelper Helper;
    private CmsProcessable signedContent;
    private SignedData signedData;
    private ContentInfo contentInfo;
    private SignerInformationStore signerInfoStore;
    private IX509Store attrCertStore;
    private IX509Store certificateStore;
    private IX509Store crlStore;
    private IDictionary hashes;
    public int Version { get; }
    [ObsoleteAttribute("Use 'SignedContentType' property instead.")]
public string SignedContentTypeOid { get; }
    public DerObjectIdentifier SignedContentType { get; }
    public CmsProcessable SignedContent { get; }
    public ContentInfo ContentInfo { get; }
    private CmsSignedData(CmsSignedData c);
    public CmsSignedData(Byte[] sigBlock);
    public CmsSignedData(CmsProcessable signedContent, Byte[] sigBlock);
    public CmsSignedData(IDictionary hashes, Byte[] sigBlock);
    public CmsSignedData(CmsProcessable signedContent, Stream sigData);
    public CmsSignedData(Stream sigData);
    public CmsSignedData(CmsProcessable signedContent, ContentInfo sigData);
    public CmsSignedData(IDictionary hashes, ContentInfo sigData);
    public CmsSignedData(ContentInfo sigData);
    private static CmsSignedData();
    public int get_Version();
    public SignerInformationStore GetSignerInfos();
    public IX509Store GetAttributeCertificates(string type);
    public IX509Store GetCertificates(string type);
    public IX509Store GetCrls(string type);
    public string get_SignedContentTypeOid();
    public DerObjectIdentifier get_SignedContentType();
    public CmsProcessable get_SignedContent();
    public ContentInfo get_ContentInfo();
    public Byte[] GetEncoded();
    public static CmsSignedData ReplaceSigners(CmsSignedData signedData, SignerInformationStore signerInformationStore);
    public static CmsSignedData ReplaceCertificatesAndCrls(CmsSignedData signedData, IX509Store x509Certs, IX509Store x509Crls, IX509Store x509AttrCerts);
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.CmsSignedGenerator : object {
    public static string Data;
    public static string DigestSha1;
    public static string DigestSha224;
    public static string DigestSha256;
    public static string DigestSha384;
    public static string DigestSha512;
    public static string DigestMD5;
    public static string DigestGost3411;
    public static string DigestRipeMD128;
    public static string DigestRipeMD160;
    public static string DigestRipeMD256;
    public static string EncryptionRsa;
    public static string EncryptionDsa;
    public static string EncryptionECDsa;
    public static string EncryptionRsaPss;
    public static string EncryptionGost3410;
    public static string EncryptionECGost3410;
    internal IList _certs;
    internal IList _crls;
    internal IList _signers;
    internal IDictionary _digests;
    internal bool _useDerForCerts;
    internal bool _useDerForCrls;
    protected SecureRandom rand;
    public bool UseDerForCerts { get; public set; }
    public bool UseDerForCrls { get; public set; }
    protected CmsSignedGenerator(SecureRandom rand);
    private static CmsSignedGenerator();
    protected internal virtual IDictionary GetBaseParameters(DerObjectIdentifier contentType, AlgorithmIdentifier digAlgId, Byte[] hash);
    protected internal virtual Asn1Set GetAttributeSet(AttributeTable attr);
    public void AddCertificates(IX509Store certStore);
    public void AddCrls(IX509Store crlStore);
    public void AddAttributeCertificates(IX509Store store);
    public void AddSigners(SignerInformationStore signerStore);
    public IDictionary GetGeneratedDigests();
    public bool get_UseDerForCerts();
    public void set_UseDerForCerts(bool value);
    public bool get_UseDerForCrls();
    public void set_UseDerForCrls(bool value);
    internal virtual void AddSignerCallback(SignerInformation si);
    internal static SignerIdentifier GetSignerIdentifier(X509Certificate cert);
    internal static SignerIdentifier GetSignerIdentifier(Byte[] subjectKeyIdentifier);
}
internal class DevExpress.Pdf.Native.BouncyCastle.Cms.CmsSignedHelper : object {
    internal static CmsSignedHelper Instance;
    private static string EncryptionECDsaWithSha1;
    private static string EncryptionECDsaWithSha224;
    private static string EncryptionECDsaWithSha256;
    private static string EncryptionECDsaWithSha384;
    private static string EncryptionECDsaWithSha512;
    private static IDictionary encryptionAlgs;
    private static IDictionary digestAlgs;
    private static IDictionary digestAliases;
    private static ISet noParams;
    private static IDictionary ecAlgorithms;
    private static CmsSignedHelper();
    private static void AddEntries(DerObjectIdentifier oid, string digest, string encryption);
    internal string GetDigestAlgName(string digestAlgOid);
    internal AlgorithmIdentifier GetEncAlgorithmIdentifier(DerObjectIdentifier encOid, Asn1Encodable sigX509Parameters);
    internal String[] GetDigestAliases(string algName);
    internal string GetEncryptionAlgName(string encryptionAlgOid);
    internal IDigest GetDigestInstance(string algorithm);
    internal ISigner GetSignatureInstance(string algorithm);
    internal IX509Store CreateAttributeStore(string type, Asn1Set certSet);
    internal IX509Store CreateCertificateStore(string type, Asn1Set certSet);
    internal IX509Store CreateCrlStore(string type, Asn1Set crlSet);
    private void AddCertsFromSet(IList certs, Asn1Set certSet);
    private void AddCrlsFromSet(IList crls, Asn1Set crlSet);
    internal AlgorithmIdentifier FixAlgID(AlgorithmIdentifier algId);
    internal string GetEncOid(AsymmetricKeyParameter key, string digestOID);
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.CmsStreamException : IOException {
    public CmsStreamException(string name);
    public CmsStreamException(string name, Exception e);
}
internal class DevExpress.Pdf.Native.BouncyCastle.Cms.CmsUtilities : object {
    internal static int MaximumMemory { get; }
    internal static int get_MaximumMemory();
    internal static ContentInfo ReadContentInfo(Byte[] input);
    internal static ContentInfo ReadContentInfo(Stream input);
    private static ContentInfo ReadContentInfo(Asn1InputStream aIn);
    public static Byte[] StreamToByteArray(Stream inStream);
    public static Byte[] StreamToByteArray(Stream inStream, int limit);
    public static IList GetCertificatesFromStore(IX509Store certStore);
    public static IList GetCrlsFromStore(IX509Store crlStore);
    public static Asn1Set CreateBerSetFromList(IList berObjects);
    public static Asn1Set CreateDerSetFromList(IList derObjects);
    internal static Stream CreateBerOctetOutputStream(Stream s, int tagNo, bool isExplicit, int bufferSize);
    internal static TbsCertificateStructure GetTbsCertificateStructure(X509Certificate cert);
    internal static IssuerAndSerialNumber GetIssuerAndSerialNumber(X509Certificate cert);
}
internal class DevExpress.Pdf.Native.BouncyCastle.Cms.CounterSignatureDigestCalculator : object {
    private string alg;
    private Byte[] data;
    internal CounterSignatureDigestCalculator(string alg, Byte[] data);
    public sealed virtual Byte[] GetDigest();
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.DefaultDigestAlgorithmIdentifierFinder : object {
    private static IDictionary digestOids;
    private static IDictionary digestNameToOids;
    private static DefaultDigestAlgorithmIdentifierFinder();
    public AlgorithmIdentifier find(AlgorithmIdentifier sigAlgId);
    public AlgorithmIdentifier find(string digAlgName);
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.DefaultSignatureAlgorithmIdentifierFinder : object {
    private static IDictionary algorithms;
    private static ISet noParams;
    private static IDictionary _params;
    private static ISet pkcs15RsaEncryption;
    private static IDictionary digestOids;
    private static DefaultSignatureAlgorithmIdentifierFinder();
    private static AlgorithmIdentifier Generate(string signatureAlgorithm);
    private static RsassaPssParameters CreatePssParams(AlgorithmIdentifier hashAlgId, int saltSize);
    public AlgorithmIdentifier Find(string sigAlgName);
}
internal interface DevExpress.Pdf.Native.BouncyCastle.Cms.IDigestCalculator {
    public abstract virtual Byte[] GetDigest();
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.SignerID : X509CertStoreSelector {
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.SignerInformation : object {
    private static CmsSignedHelper Helper;
    private SignerID sid;
    private SignerInfo info;
    private AlgorithmIdentifier digestAlgorithm;
    private AlgorithmIdentifier encryptionAlgorithm;
    private Asn1Set signedAttributeSet;
    private Asn1Set unsignedAttributeSet;
    private CmsProcessable content;
    private Byte[] signature;
    private DerObjectIdentifier contentType;
    private IDigestCalculator digestCalculator;
    private Byte[] resultDigest;
    private AttributeTable signedAttributeTable;
    private AttributeTable unsignedAttributeTable;
    private bool isCounterSignature;
    public bool IsCounterSignature { get; }
    public DerObjectIdentifier ContentType { get; }
    public SignerID SignerID { get; }
    public int Version { get; }
    public AlgorithmIdentifier DigestAlgorithmID { get; }
    public string DigestAlgOid { get; }
    public Asn1Object DigestAlgParams { get; }
    public AlgorithmIdentifier EncryptionAlgorithmID { get; }
    public string EncryptionAlgOid { get; }
    public Asn1Object EncryptionAlgParams { get; }
    public AttributeTable SignedAttributes { get; }
    public AttributeTable UnsignedAttributes { get; }
    internal SignerInformation(SignerInfo info, DerObjectIdentifier contentType, CmsProcessable content, IDigestCalculator digestCalculator);
    protected SignerInformation(SignerInformation baseInfo);
    private static SignerInformation();
    public bool get_IsCounterSignature();
    public DerObjectIdentifier get_ContentType();
    public SignerID get_SignerID();
    public int get_Version();
    public AlgorithmIdentifier get_DigestAlgorithmID();
    public string get_DigestAlgOid();
    public Asn1Object get_DigestAlgParams();
    public Byte[] GetContentDigest();
    public AlgorithmIdentifier get_EncryptionAlgorithmID();
    public string get_EncryptionAlgOid();
    public Asn1Object get_EncryptionAlgParams();
    public AttributeTable get_SignedAttributes();
    public AttributeTable get_UnsignedAttributes();
    public Byte[] GetSignature();
    public SignerInformationStore GetCounterSignatures();
    public Byte[] GetEncodedSignedAttributes();
    private bool DoVerify(AsymmetricKeyParameter key);
    private bool IsNull(Asn1Encodable o);
    private DigestInfo DerDecode(Byte[] encoding);
    private bool VerifyDigest(Byte[] digest, AsymmetricKeyParameter key, Byte[] signature);
    public bool Verify(AsymmetricKeyParameter pubKey);
    public bool Verify(X509Certificate cert);
    public SignerInfo ToSignerInfo();
    private Asn1Object GetSingleValuedSignedAttribute(DerObjectIdentifier attrOID, string printableName);
    private Time GetSigningTime();
    public static SignerInformation ReplaceUnsignedAttributes(SignerInformation signerInformation, AttributeTable unsignedAttributes);
    public static SignerInformation AddCounterSigners(SignerInformation signerInformation, SignerInformationStore counterSigners);
}
public class DevExpress.Pdf.Native.BouncyCastle.Cms.SignerInformationStore : object {
    private IList all;
    private IDictionary table;
    public int Count { get; }
    public SignerInformationStore(SignerInformation signerInfo);
    public SignerInformationStore(ICollection signerInfos);
    public SignerInformation GetFirstSigner(SignerID selector);
    public int get_Count();
    public ICollection GetSigners();
    public ICollection GetSigners(SignerID selector);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Crypto.AsymmetricKeyParameter : object {
    private bool privateKey;
    public bool IsPrivate { get; }
    protected AsymmetricKeyParameter(bool privateKey);
    public bool get_IsPrivate();
    public virtual bool Equals(object obj);
    protected bool Equals(AsymmetricKeyParameter other);
    public virtual int GetHashCode();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.IBlockResult {
    public abstract virtual Byte[] Collect();
    public abstract virtual int Collect(Byte[] destination, int offset);
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.IBufferedCipher {
    public string AlgorithmName { get; }
    public abstract virtual string get_AlgorithmName();
    public abstract virtual void Init(bool forEncryption, ICipherParameters parameters);
    public abstract virtual int GetBlockSize();
    public abstract virtual int GetOutputSize(int inputLen);
    public abstract virtual int GetUpdateOutputSize(int inputLen);
    public abstract virtual Byte[] ProcessByte(byte input);
    public abstract virtual int ProcessByte(byte input, Byte[] output, int outOff);
    public abstract virtual Byte[] ProcessBytes(Byte[] input);
    public abstract virtual Byte[] ProcessBytes(Byte[] input, int inOff, int length);
    public abstract virtual int ProcessBytes(Byte[] input, Byte[] output, int outOff);
    public abstract virtual int ProcessBytes(Byte[] input, int inOff, int length, Byte[] output, int outOff);
    public abstract virtual Byte[] DoFinal();
    public abstract virtual Byte[] DoFinal(Byte[] input);
    public abstract virtual Byte[] DoFinal(Byte[] input, int inOff, int length);
    public abstract virtual int DoFinal(Byte[] output, int outOff);
    public abstract virtual int DoFinal(Byte[] input, Byte[] output, int outOff);
    public abstract virtual int DoFinal(Byte[] input, int inOff, int length, Byte[] output, int outOff);
    public abstract virtual void Reset();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.ICipherParameters {
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.IDigest {
    public string AlgorithmName { get; }
    public abstract virtual string get_AlgorithmName();
    public abstract virtual int GetDigestSize();
    public abstract virtual int GetByteLength();
    public abstract virtual void Update(byte input);
    public abstract virtual void BlockUpdate(Byte[] input, int inOff, int length);
    public abstract virtual int DoFinal(Byte[] output, int outOff);
    public abstract virtual void Reset();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.IO.DigestSink : BaseOutputStream {
    private IDigest mDigest;
    public IDigest Digest { get; }
    public DigestSink(IDigest digest);
    public virtual IDigest get_Digest();
    public virtual void WriteByte(byte b);
    public virtual void Write(Byte[] buf, int off, int len);
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.IO.SignerSink : BaseOutputStream {
    private ISigner mSigner;
    public ISigner Signer { get; }
    public SignerSink(ISigner signer);
    public virtual ISigner get_Signer();
    public virtual void WriteByte(byte b);
    public virtual void Write(Byte[] buf, int off, int len);
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.ISignatureFactory {
    public object AlgorithmDetails { get; }
    public abstract virtual object get_AlgorithmDetails();
    public abstract virtual IStreamCalculator CreateCalculator();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.ISigner {
    public string AlgorithmName { get; }
    public abstract virtual string get_AlgorithmName();
    public abstract virtual void Init(bool forSigning, ICipherParameters parameters);
    public abstract virtual void Update(byte input);
    public abstract virtual void BlockUpdate(Byte[] input, int inOff, int length);
    public abstract virtual Byte[] GenerateSignature();
    public abstract virtual bool VerifySignature(Byte[] signature);
    public abstract virtual void Reset();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.IStreamCalculator {
    public Stream Stream { get; }
    public abstract virtual Stream get_Stream();
    public abstract virtual object GetResult();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.IVerifier {
    public abstract virtual bool IsVerified(Byte[] data);
    public abstract virtual bool IsVerified(Byte[] source, int off, int length);
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.IVerifierFactory {
    public object AlgorithmDetails { get; }
    public abstract virtual object get_AlgorithmDetails();
    public abstract virtual IStreamCalculator CreateCalculator();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Crypto.IVerifierFactoryProvider {
    public abstract virtual IVerifierFactory CreateVerifierFactory(object algorithmDetails);
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.Asn1SignatureFactory : object {
    private AlgorithmIdentifier algID;
    private string algorithm;
    private AsymmetricKeyParameter privateKey;
    private SecureRandom random;
    public object AlgorithmDetails { get; }
    public static IEnumerable SignatureAlgNames { get; }
    public Asn1SignatureFactory(string algorithm, AsymmetricKeyParameter privateKey);
    public Asn1SignatureFactory(string algorithm, AsymmetricKeyParameter privateKey, SecureRandom random);
    public sealed virtual object get_AlgorithmDetails();
    public sealed virtual IStreamCalculator CreateCalculator();
    public static IEnumerable get_SignatureAlgNames();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.Asn1VerifierFactory : object {
    private AlgorithmIdentifier algID;
    private AsymmetricKeyParameter publicKey;
    public object AlgorithmDetails { get; }
    public Asn1VerifierFactory(string algorithm, AsymmetricKeyParameter publicKey);
    public Asn1VerifierFactory(AlgorithmIdentifier algorithm, AsymmetricKeyParameter publicKey);
    public sealed virtual object get_AlgorithmDetails();
    public sealed virtual IStreamCalculator CreateCalculator();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider : object {
    private AsymmetricKeyParameter publicKey;
    public IEnumerable SignatureAlgNames { get; }
    public Asn1VerifierFactoryProvider(AsymmetricKeyParameter publicKey);
    public sealed virtual IVerifierFactory CreateVerifierFactory(object algorithmDetails);
    public IEnumerable get_SignatureAlgNames();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.DefaultSignatureCalculator : object {
    private SignerSink mSignerSink;
    public Stream Stream { get; }
    public DefaultSignatureCalculator(ISigner signer);
    public sealed virtual Stream get_Stream();
    public sealed virtual object GetResult();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.DefaultSignatureResult : object {
    private ISigner mSigner;
    public DefaultSignatureResult(ISigner signer);
    public sealed virtual Byte[] Collect();
    public sealed virtual int Collect(Byte[] sig, int sigOff);
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.DefaultVerifierCalculator : object {
    private SignerSink mSignerSink;
    public Stream Stream { get; }
    public DefaultVerifierCalculator(ISigner signer);
    public sealed virtual Stream get_Stream();
    public sealed virtual object GetResult();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.DefaultVerifierResult : object {
    private ISigner mSigner;
    public DefaultVerifierResult(ISigner signer);
    public sealed virtual bool IsVerified(Byte[] signature);
    public sealed virtual bool IsVerified(Byte[] sig, int sigOff, int sigLen);
}
internal class DevExpress.Pdf.Native.BouncyCastle.Crypto.Operators.X509Utilities : object {
    private static Asn1Null derNull;
    private static IDictionary algorithms;
    private static IDictionary exParams;
    private static ISet noParams;
    private static X509Utilities();
    private static string GetDigestAlgName(DerObjectIdentifier digestAlgOID);
    internal static string GetSignatureName(AlgorithmIdentifier sigAlgId);
    private static RsassaPssParameters CreatePssParams(AlgorithmIdentifier hashAlgId, int saltSize);
    internal static DerObjectIdentifier GetAlgorithmOid(string algorithmName);
    internal static AlgorithmIdentifier GetSigAlgID(DerObjectIdentifier sigOid, string algorithmName);
    internal static IEnumerable GetAlgNames();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters.DsaKeyParameters : AsymmetricKeyParameter {
    private DsaParameters parameters;
    public DsaParameters Parameters { get; }
    protected DsaKeyParameters(bool isPrivate, DsaParameters parameters);
    public DsaParameters get_Parameters();
    public virtual bool Equals(object obj);
    protected bool Equals(DsaKeyParameters other);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters.DsaParameters : object {
    private BigInteger p;
    private BigInteger q;
    private BigInteger g;
    private DsaValidationParameters validation;
    public BigInteger P { get; }
    public BigInteger Q { get; }
    public BigInteger G { get; }
    public DsaValidationParameters ValidationParameters { get; }
    public DsaParameters(BigInteger p, BigInteger q, BigInteger g);
    public DsaParameters(BigInteger p, BigInteger q, BigInteger g, DsaValidationParameters parameters);
    public BigInteger get_P();
    public BigInteger get_Q();
    public BigInteger get_G();
    public DsaValidationParameters get_ValidationParameters();
    public virtual bool Equals(object obj);
    protected bool Equals(DsaParameters other);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters.DsaPrivateKeyParameters : DsaKeyParameters {
    private BigInteger x;
    public BigInteger X { get; }
    public DsaPrivateKeyParameters(BigInteger x, DsaParameters parameters);
    public BigInteger get_X();
    public virtual bool Equals(object obj);
    protected bool Equals(DsaPrivateKeyParameters other);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters : DsaKeyParameters {
    private BigInteger y;
    public BigInteger Y { get; }
    public DsaPublicKeyParameters(BigInteger y, DsaParameters parameters);
    private static BigInteger Validate(BigInteger y, DsaParameters parameters);
    public BigInteger get_Y();
    public virtual bool Equals(object obj);
    protected bool Equals(DsaPublicKeyParameters other);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters.DsaValidationParameters : object {
    private Byte[] seed;
    private int counter;
    private int usageIndex;
    public int Counter { get; }
    public int UsageIndex { get; }
    public DsaValidationParameters(Byte[] seed, int counter);
    public DsaValidationParameters(Byte[] seed, int counter, int usageIndex);
    public virtual Byte[] GetSeed();
    public virtual int get_Counter();
    public virtual int get_UsageIndex();
    public virtual bool Equals(object obj);
    protected virtual bool Equals(DsaValidationParameters other);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters.RsaKeyParameters : AsymmetricKeyParameter {
    private static BigInteger SmallPrimesProduct;
    private BigInteger modulus;
    private BigInteger exponent;
    public BigInteger Modulus { get; }
    public BigInteger Exponent { get; }
    public RsaKeyParameters(bool isPrivate, BigInteger modulus, BigInteger exponent);
    private static RsaKeyParameters();
    private static BigInteger Validate(BigInteger modulus);
    public BigInteger get_Modulus();
    public BigInteger get_Exponent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters : RsaKeyParameters {
    private BigInteger e;
    private BigInteger p;
    private BigInteger q;
    private BigInteger dP;
    private BigInteger dQ;
    private BigInteger qInv;
    public BigInteger PublicExponent { get; }
    public BigInteger P { get; }
    public BigInteger Q { get; }
    public BigInteger DP { get; }
    public BigInteger DQ { get; }
    public BigInteger QInv { get; }
    public RsaPrivateCrtKeyParameters(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger p, BigInteger q, BigInteger dP, BigInteger dQ, BigInteger qInv);
    public RsaPrivateCrtKeyParameters(RsaPrivateKeyStructure rsaPrivateKey);
    public BigInteger get_PublicExponent();
    public BigInteger get_P();
    public BigInteger get_Q();
    public BigInteger get_DP();
    public BigInteger get_DQ();
    public BigInteger get_QInv();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static void ValidateValue(BigInteger x, string name, string desc);
}
public class DevExpress.Pdf.Native.BouncyCastle.Math.BigInteger : object {
    internal static Int32[][] primeLists;
    internal static Int32[] primeProducts;
    private static long IMASK;
    private static ulong UIMASK;
    private static Int32[] ZeroMagnitude;
    private static Byte[] ZeroEncoding;
    private static BigInteger[] SMALL_CONSTANTS;
    public static BigInteger Zero;
    public static BigInteger One;
    public static BigInteger Two;
    public static BigInteger Three;
    public static BigInteger Ten;
    private static Byte[] BitLengthTable;
    private static int chunk2;
    private static int chunk8;
    private static int chunk10;
    private static int chunk16;
    private static BigInteger radix2;
    private static BigInteger radix2E;
    private static BigInteger radix8;
    private static BigInteger radix8E;
    private static BigInteger radix10;
    private static BigInteger radix10E;
    private static BigInteger radix16;
    private static BigInteger radix16E;
    private static Int32[] ExpWindowThresholds;
    private static int BitsPerByte;
    private static int BitsPerInt;
    private static int BytesPerInt;
    private Int32[] magnitude;
    private int sign;
    private int nBits;
    private int nBitLength;
    private int mQuote;
    public int BitCount { get; }
    public int BitLength { get; }
    public int IntValue { get; }
    public long LongValue { get; }
    public int SignValue { get; }
    private static BigInteger();
    private BigInteger(int signum, Int32[] mag, bool checkMag);
    public BigInteger(string value);
    public BigInteger(string str, int radix);
    public BigInteger(Byte[] bytes);
    public BigInteger(Byte[] bytes, int offset, int length);
    public BigInteger(int sign, Byte[] bytes);
    public BigInteger(int sign, Byte[] bytes, int offset, int length);
    private static int GetByteLength(int nBits);
    private static Int32[] MakeMagnitude(Byte[] bytes, int offset, int length);
    public BigInteger Abs();
    private static Int32[] AddMagnitudes(Int32[] a, Int32[] b);
    public BigInteger Add(BigInteger value);
    private BigInteger AddToMagnitude(Int32[] magToAdd);
    public BigInteger And(BigInteger value);
    public BigInteger AndNot(BigInteger val);
    public int get_BitCount();
    public static int BitCnt(int i);
    private static int CalcBitLength(int sign, int indx, Int32[] mag);
    public int get_BitLength();
    internal static int BitLen(int w);
    private bool QuickPow2Check();
    public int CompareTo(object obj);
    private static int CompareTo(int xIndx, Int32[] x, int yIndx, Int32[] y);
    private static int CompareNoLeadingZeroes(int xIndx, Int32[] x, int yIndx, Int32[] y);
    public int CompareTo(BigInteger value);
    private Int32[] Divide(Int32[] x, Int32[] y);
    public BigInteger Divide(BigInteger val);
    public BigInteger[] DivideAndRemainder(BigInteger val);
    public virtual bool Equals(object obj);
    private bool IsEqualMagnitude(BigInteger x);
    public BigInteger Gcd(BigInteger value);
    public virtual int GetHashCode();
    private BigInteger Inc();
    public int get_IntValue();
    public long get_LongValue();
    public BigInteger Max(BigInteger value);
    public BigInteger Min(BigInteger value);
    public BigInteger Mod(BigInteger m);
    public BigInteger ModInverse(BigInteger m);
    private BigInteger ModInversePow2(BigInteger m);
    private static int ModInverse32(int d);
    private static long ModInverse64(long d);
    private static BigInteger ExtEuclid(BigInteger a, BigInteger b, BigInteger& u1Out);
    private static void ZeroOut(Int32[] x);
    public BigInteger ModPow(BigInteger e, BigInteger m);
    private static BigInteger ModPowBarrett(BigInteger b, BigInteger e, BigInteger m);
    private static BigInteger ReduceBarrett(BigInteger x, BigInteger m, BigInteger mr, BigInteger yu);
    private static BigInteger ModPowMonty(BigInteger b, BigInteger e, BigInteger m, bool convert);
    private static Int32[] GetWindowList(Int32[] mag, int extraBits);
    private static int CreateWindowEntry(int mult, int zeroes);
    private static Int32[] Square(Int32[] w, Int32[] x);
    private static Int32[] Multiply(Int32[] x, Int32[] y, Int32[] z);
    private int GetMQuote();
    private static void MontgomeryReduce(Int32[] x, Int32[] m, UInt32 mDash);
    private static void MultiplyMonty(Int32[] a, Int32[] x, Int32[] y, Int32[] m, UInt32 mDash, bool smallMontyModulus);
    private static void SquareMonty(Int32[] a, Int32[] x, Int32[] m, UInt32 mDash, bool smallMontyModulus);
    private static UInt32 MultiplyMontyNIsOne(UInt32 x, UInt32 y, UInt32 m, UInt32 mDash);
    public BigInteger Multiply(BigInteger val);
    public BigInteger Square();
    public BigInteger Negate();
    public BigInteger Not();
    public BigInteger Pow(int exp);
    private int Remainder(int m);
    private static Int32[] Remainder(Int32[] x, Int32[] y);
    public BigInteger Remainder(BigInteger n);
    private Int32[] LastNBits(int n);
    private BigInteger DivideWords(int w);
    private BigInteger RemainderWords(int w);
    private static Int32[] ShiftLeft(Int32[] mag, int n);
    private static int ShiftLeftOneInPlace(Int32[] x, int carry);
    public BigInteger ShiftLeft(int n);
    private static void ShiftRightInPlace(int start, Int32[] mag, int n);
    private static void ShiftRightOneInPlace(int start, Int32[] mag);
    public BigInteger ShiftRight(int n);
    public int get_SignValue();
    private static Int32[] Subtract(int xStart, Int32[] x, int yStart, Int32[] y);
    public BigInteger Subtract(BigInteger n);
    private static Int32[] doSubBigLil(Int32[] bigMag, Int32[] lilMag);
    public Byte[] ToByteArray();
    public Byte[] ToByteArrayUnsigned();
    private Byte[] ToByteArray(bool unsigned);
    public virtual string ToString();
    public string ToString(int radix);
    private static void ToString(StringBuilder sb, int radix, IList moduli, int scale, BigInteger pos);
    private static void AppendZeroExtendedString(StringBuilder sb, string s, int minLength);
    private static BigInteger CreateUValueOf(ulong value);
    private static BigInteger CreateValueOf(long value);
    public static BigInteger ValueOf(long value);
    public int GetLowestSetBit();
    private int GetLowestSetBitMaskFirst(int firstWordMask);
    public bool TestBit(int n);
    public BigInteger Or(BigInteger value);
    public BigInteger Xor(BigInteger value);
    public BigInteger SetBit(int n);
    public BigInteger ClearBit(int n);
    public BigInteger FlipBit(int n);
    private BigInteger FlipExistingBit(int n);
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.BasicOcspResp : X509ExtensionBase {
    private BasicOcspResponse resp;
    private ResponseData data;
    public int Version { get; }
    public RespID ResponderId { get; }
    public DateTime ProducedAt { get; }
    public SingleResp[] Responses { get; }
    public X509Extensions ResponseExtensions { get; }
    public string SignatureAlgName { get; }
    public string SignatureAlgOid { get; }
    public BasicOcspResp(BasicOcspResponse resp);
    public Byte[] GetTbsResponseData();
    public int get_Version();
    public RespID get_ResponderId();
    public DateTime get_ProducedAt();
    public SingleResp[] get_Responses();
    public X509Extensions get_ResponseExtensions();
    protected virtual X509Extensions GetX509Extensions();
    public string get_SignatureAlgName();
    public string get_SignatureAlgOid();
    [ObsoleteAttribute("RespData class is no longer required as all functionality is available on this class")]
public RespData GetResponseData();
    public Byte[] GetSignature();
    private IList GetCertList();
    public X509Certificate[] GetCerts();
    public IX509Store GetCertificates(string type);
    public bool Verify(AsymmetricKeyParameter publicKey);
    public Byte[] GetEncoded();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.BasicOcspRespGenerator : object {
    private IList list;
    private X509Extensions responseExtensions;
    private RespID responderID;
    public IEnumerable SignatureAlgNames { get; }
    public BasicOcspRespGenerator(RespID responderID);
    public BasicOcspRespGenerator(AsymmetricKeyParameter publicKey);
    public void AddResponse(CertificateID certID, CertificateStatus certStatus);
    public void AddResponse(CertificateID certID, CertificateStatus certStatus, X509Extensions singleExtensions);
    public void AddResponse(CertificateID certID, CertificateStatus certStatus, DateTime nextUpdate, X509Extensions singleExtensions);
    public void AddResponse(CertificateID certID, CertificateStatus certStatus, DateTime thisUpdate, DateTime nextUpdate, X509Extensions singleExtensions);
    public void SetResponseExtensions(X509Extensions responseExtensions);
    private BasicOcspResp GenerateResponse(ISignatureFactory signatureCalculator, X509Certificate[] chain, DateTime producedAt);
    public BasicOcspResp Generate(string signingAlgorithm, AsymmetricKeyParameter privateKey, X509Certificate[] chain, DateTime thisUpdate);
    public BasicOcspResp Generate(string signingAlgorithm, AsymmetricKeyParameter privateKey, X509Certificate[] chain, DateTime producedAt, SecureRandom random);
    public BasicOcspResp Generate(ISignatureFactory signatureCalculatorFactory, X509Certificate[] chain, DateTime producedAt);
    public IEnumerable get_SignatureAlgNames();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.CertificateID : object {
    public static string HashSha1;
    private CertID id;
    public string HashAlgOid { get; }
    public BigInteger SerialNumber { get; }
    public CertificateID(CertID id);
    public CertificateID(string hashAlgorithm, X509Certificate issuerCert, BigInteger serialNumber);
    public string get_HashAlgOid();
    public Byte[] GetIssuerNameHash();
    public Byte[] GetIssuerKeyHash();
    public BigInteger get_SerialNumber();
    public bool MatchesIssuer(X509Certificate issuerCert);
    public CertID ToAsn1Object();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static CertificateID DeriveCertificateID(CertificateID original, BigInteger newSerialNumber);
    private static CertID CreateCertID(AlgorithmIdentifier hashAlg, X509Certificate issuerCert, DerInteger serialNumber);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Ocsp.CertificateStatus : object {
    public static CertificateStatus Good;
    private static CertificateStatus();
}
[ObsoleteAttribute("Use version with correct spelling 'OcspRespStatus'")]
public abstract class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OcscpRespStatus : OcspRespStatus {
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OcspException : Exception {
    public OcspException(string message);
    public OcspException(string message, Exception e);
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OcspReq : X509ExtensionBase {
    private OcspRequest req;
    public int Version { get; }
    public GeneralName RequestorName { get; }
    public X509Extensions RequestExtensions { get; }
    public string SignatureAlgOid { get; }
    public bool IsSigned { get; }
    public OcspReq(OcspRequest req);
    public OcspReq(Byte[] req);
    public OcspReq(Stream inStr);
    private OcspReq(Asn1InputStream aIn);
    public Byte[] GetTbsRequest();
    public int get_Version();
    public GeneralName get_RequestorName();
    public Req[] GetRequestList();
    public X509Extensions get_RequestExtensions();
    protected virtual X509Extensions GetX509Extensions();
    public string get_SignatureAlgOid();
    public Byte[] GetSignature();
    private IList GetCertList();
    public X509Certificate[] GetCerts();
    public IX509Store GetCertificates(string type);
    public bool get_IsSigned();
    public bool Verify(AsymmetricKeyParameter publicKey);
    public Byte[] GetEncoded();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OcspReqGenerator : object {
    private IList list;
    private GeneralName requestorName;
    private X509Extensions requestExtensions;
    public IEnumerable SignatureAlgNames { get; }
    public void AddRequest(CertificateID certId);
    public void AddRequest(CertificateID certId, X509Extensions singleRequestExtensions);
    public void SetRequestorName(X509Name requestorName);
    public void SetRequestorName(GeneralName requestorName);
    public void SetRequestExtensions(X509Extensions requestExtensions);
    private OcspReq GenerateRequest(DerObjectIdentifier signingAlgorithm, AsymmetricKeyParameter privateKey, X509Certificate[] chain, SecureRandom random);
    public OcspReq Generate();
    public OcspReq Generate(string signingAlgorithm, AsymmetricKeyParameter privateKey, X509Certificate[] chain);
    public OcspReq Generate(string signingAlgorithm, AsymmetricKeyParameter privateKey, X509Certificate[] chain, SecureRandom random);
    public IEnumerable get_SignatureAlgNames();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OcspResp : object {
    private OcspResponse resp;
    public int Status { get; }
    public OcspResp(OcspResponse resp);
    public OcspResp(Byte[] resp);
    public OcspResp(Stream inStr);
    private OcspResp(Asn1InputStream aIn);
    public int get_Status();
    public object GetResponseObject();
    public Byte[] GetEncoded();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OCSPRespGenerator : object {
    public static int Successful;
    public static int MalformedRequest;
    public static int InternalError;
    public static int TryLater;
    public static int SigRequired;
    public static int Unauthorized;
    public OcspResp Generate(int status, object response);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OcspRespStatus : object {
    public static int Successful;
    public static int MalformedRequest;
    public static int InternalError;
    public static int TryLater;
    public static int SigRequired;
    public static int Unauthorized;
}
internal class DevExpress.Pdf.Native.BouncyCastle.Ocsp.OcspUtilities : object {
    private static IDictionary algorithms;
    private static IDictionary oids;
    private static ISet noParams;
    internal static IEnumerable AlgNames { get; }
    private static OcspUtilities();
    internal static DerObjectIdentifier GetAlgorithmOid(string algorithmName);
    internal static string GetAlgorithmName(DerObjectIdentifier oid);
    internal static AlgorithmIdentifier GetSigAlgID(DerObjectIdentifier sigOid);
    internal static IEnumerable get_AlgNames();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.Req : X509ExtensionBase {
    private Request req;
    public X509Extensions SingleRequestExtensions { get; }
    public Req(Request req);
    public CertificateID GetCertID();
    public X509Extensions get_SingleRequestExtensions();
    protected virtual X509Extensions GetX509Extensions();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.RespData : X509ExtensionBase {
    internal ResponseData data;
    public int Version { get; }
    public DateTime ProducedAt { get; }
    public X509Extensions ResponseExtensions { get; }
    public RespData(ResponseData data);
    public int get_Version();
    public RespID GetResponderId();
    public DateTime get_ProducedAt();
    public SingleResp[] GetResponses();
    public X509Extensions get_ResponseExtensions();
    protected virtual X509Extensions GetX509Extensions();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.RespID : object {
    internal ResponderID id;
    public RespID(ResponderID id);
    public RespID(X509Name name);
    public RespID(AsymmetricKeyParameter publicKey);
    public ResponderID ToAsn1Object();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.RevokedStatus : CertificateStatus {
    internal RevokedInfo info;
    public DateTime RevocationTime { get; }
    public bool HasRevocationReason { get; }
    public int RevocationReason { get; }
    public RevokedStatus(RevokedInfo info);
    public RevokedStatus(DateTime revocationDate, int reason);
    public DateTime get_RevocationTime();
    public bool get_HasRevocationReason();
    public int get_RevocationReason();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.SingleResp : X509ExtensionBase {
    internal SingleResponse resp;
    public DateTime ThisUpdate { get; }
    public DateTimeObject NextUpdate { get; }
    public X509Extensions SingleExtensions { get; }
    public SingleResp(SingleResponse resp);
    public CertificateID GetCertID();
    public object GetCertStatus();
    public DateTime get_ThisUpdate();
    public DateTimeObject get_NextUpdate();
    public X509Extensions get_SingleExtensions();
    protected virtual X509Extensions GetX509Extensions();
}
public class DevExpress.Pdf.Native.BouncyCastle.Ocsp.UnknownStatus : CertificateStatus {
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Certificates.CertificateEncodingException : CertificateException {
    public CertificateEncodingException(string msg);
    public CertificateEncodingException(string msg, Exception e);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Certificates.CertificateException : GeneralSecurityException {
    public CertificateException(string message);
    public CertificateException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Certificates.CertificateExpiredException : CertificateException {
    public CertificateExpiredException(string message);
    public CertificateExpiredException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Certificates.CertificateNotYetValidException : CertificateException {
    public CertificateNotYetValidException(string message);
    public CertificateNotYetValidException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Certificates.CertificateParsingException : CertificateException {
    public CertificateParsingException(string message);
    public CertificateParsingException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Certificates.CrlException : GeneralSecurityException {
    public CrlException(string msg);
    public CrlException(string msg, Exception e);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.DigestUtilities : object {
    private static IDictionary algorithms;
    private static IDictionary oids;
    public static ICollection Algorithms { get; }
    private static DigestUtilities();
    public static DerObjectIdentifier GetObjectIdentifier(string mechanism);
    public static ICollection get_Algorithms();
    public static IDigest GetDigest(DerObjectIdentifier id);
    public static IDigest GetDigest(string algorithm);
    public static string GetAlgorithmName(DerObjectIdentifier oid);
    public static Byte[] CalculateDigest(DerObjectIdentifier id, Byte[] input);
    public static Byte[] CalculateDigest(string algorithm, Byte[] input);
    public static Byte[] DoFinal(IDigest digest);
    public static Byte[] DoFinal(IDigest digest, Byte[] input);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Security.DotNetBuiltInDigest : object {
    private HashAlgorithm hashAlgorithm;
    public string AlgorithmName { get; }
    public abstract virtual string get_AlgorithmName();
    protected abstract virtual HashAlgorithm Create();
    public sealed virtual void BlockUpdate(Byte[] input, int inOff, int length);
    public sealed virtual int DoFinal(Byte[] output, int outOff);
    public sealed virtual int GetByteLength();
    public sealed virtual int GetDigestSize();
    public sealed virtual void Reset();
    public sealed virtual void Update(byte input);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.GeneralSecurityException : Exception {
    public GeneralSecurityException(string message);
    public GeneralSecurityException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.InvalidKeyException : KeyException {
    public InvalidKeyException(string message);
    public InvalidKeyException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.KeyException : GeneralSecurityException {
    public KeyException(string message);
    public KeyException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.NullDigest : object {
    private MemoryStream bOut;
    public string AlgorithmName { get; }
    public sealed virtual string get_AlgorithmName();
    public sealed virtual int GetByteLength();
    public sealed virtual int GetDigestSize();
    public sealed virtual void Update(byte b);
    public sealed virtual void BlockUpdate(Byte[] inBytes, int inOff, int len);
    public sealed virtual int DoFinal(Byte[] outBytes, int outOff);
    public sealed virtual void Reset();
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.PublicKeyFactory : object {
    public static AsymmetricKeyParameter CreateKey(Byte[] keyInfoData);
    public static AsymmetricKeyParameter CreateKey(Stream inStr);
    public static AsymmetricKeyParameter CreateKey(SubjectPublicKeyInfo keyInfo);
    private static Byte[] GetRawKey(SubjectPublicKeyInfo keyInfo, int expectedSize);
    private static bool IsPkcsDHParam(Asn1Sequence seq);
}
internal class DevExpress.Pdf.Native.BouncyCastle.Security.RsaDigestSigner : object {
    private AlgorithmIdentifier algId;
    private IDigest digest;
    private bool forSigning;
    private RSA rsa;
    private static IDictionary oidMap;
    public string AlgorithmName { get; }
    private static RsaDigestSigner();
    public RsaDigestSigner(IDigest digest);
    public RsaDigestSigner(IDigest digest, DerObjectIdentifier digestOid);
    public RsaDigestSigner(IDigest digest, AlgorithmIdentifier algId);
    public sealed virtual string get_AlgorithmName();
    public sealed virtual void BlockUpdate(Byte[] input, int inOff, int length);
    public sealed virtual Byte[] GenerateSignature();
    public sealed virtual void Init(bool forSigning, ICipherParameters parameters);
    public sealed virtual void Reset();
    public sealed virtual void Update(byte input);
    public virtual bool VerifySignature(Byte[] signature);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.SecureRandom : object {
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.SecurityUtilityException : Exception {
    public SecurityUtilityException(string message);
    public SecurityUtilityException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Sha1Digest : DotNetBuiltInDigest {
    public string AlgorithmName { get; }
    public virtual string get_AlgorithmName();
    protected virtual HashAlgorithm Create();
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Sha256Digest : DotNetBuiltInDigest {
    public string AlgorithmName { get; }
    public virtual string get_AlgorithmName();
    protected virtual HashAlgorithm Create();
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Sha384Digest : DotNetBuiltInDigest {
    public string AlgorithmName { get; }
    public virtual string get_AlgorithmName();
    protected virtual HashAlgorithm Create();
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.Sha512Digest : DotNetBuiltInDigest {
    public string AlgorithmName { get; }
    public virtual string get_AlgorithmName();
    protected virtual HashAlgorithm Create();
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.SignatureException : GeneralSecurityException {
    public SignatureException(string message);
    public SignatureException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Security.SignerUtilities : object {
    internal static IDictionary algorithms;
    internal static IDictionary oids;
    public static ICollection Algorithms { get; }
    private static SignerUtilities();
    public static DerObjectIdentifier GetObjectIdentifier(string mechanism);
    public static ICollection get_Algorithms();
    public static Asn1Encodable GetDefaultX509Parameters(DerObjectIdentifier id);
    public static Asn1Encodable GetDefaultX509Parameters(string algorithm);
    private static Asn1Encodable GetPssX509Parameters(string digestName);
    public static ISigner GetSigner(DerObjectIdentifier id);
    public static ISigner GetSigner(string algorithm);
    public static string GetEncodingName(DerObjectIdentifier oid);
    public static ISigner InitSigner(DerObjectIdentifier algorithmOid, bool forSigning, AsymmetricKeyParameter privateKey, SecureRandom random);
    public static ISigner InitSigner(string algorithm, bool forSigning, AsymmetricKeyParameter privateKey, SecureRandom random);
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.GenTimeAccuracy : object {
    private Accuracy accuracy;
    public int Seconds { get; }
    public int Millis { get; }
    public int Micros { get; }
    public GenTimeAccuracy(Accuracy accuracy);
    public int get_Seconds();
    public int get_Millis();
    public int get_Micros();
    private int GetTimeComponent(DerInteger time);
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TimeStampRequest : X509ExtensionBase {
    private TimeStampReq req;
    private X509Extensions extensions;
    public int Version { get; }
    public string MessageImprintAlgOid { get; }
    public string ReqPolicy { get; }
    public BigInteger Nonce { get; }
    public bool CertReq { get; }
    internal X509Extensions Extensions { get; }
    public bool HasExtensions { get; }
    public TimeStampRequest(TimeStampReq req);
    public TimeStampRequest(Byte[] req);
    public TimeStampRequest(Stream input);
    private TimeStampRequest(Asn1InputStream str);
    public int get_Version();
    public string get_MessageImprintAlgOid();
    public Byte[] GetMessageImprintDigest();
    public string get_ReqPolicy();
    public BigInteger get_Nonce();
    public bool get_CertReq();
    public void Validate(IList algorithms, IList policies, IList extensions);
    public Byte[] GetEncoded();
    internal X509Extensions get_Extensions();
    public virtual bool get_HasExtensions();
    public virtual X509Extension GetExtension(DerObjectIdentifier oid);
    public virtual IList GetExtensionOids();
    protected virtual X509Extensions GetX509Extensions();
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TimeStampRequestGenerator : object {
    private DerObjectIdentifier reqPolicy;
    private DerBoolean certReq;
    private IDictionary extensions;
    private IList extOrdering;
    public void SetReqPolicy(string reqPolicy);
    public void SetCertReq(bool certReq);
    [ObsoleteAttribute("Use method taking DerObjectIdentifier")]
public void AddExtension(string oid, bool critical, Asn1Encodable value);
    [ObsoleteAttribute("Use method taking DerObjectIdentifier")]
public void AddExtension(string oid, bool critical, Byte[] value);
    public virtual void AddExtension(DerObjectIdentifier oid, bool critical, Asn1Encodable extValue);
    public virtual void AddExtension(DerObjectIdentifier oid, bool critical, Byte[] extValue);
    public TimeStampRequest Generate(string digestAlgorithm, Byte[] digest);
    public TimeStampRequest Generate(string digestAlgorithmOid, Byte[] digest, BigInteger nonce);
    public virtual TimeStampRequest Generate(DerObjectIdentifier digestAlgorithm, Byte[] digest);
    public virtual TimeStampRequest Generate(DerObjectIdentifier digestAlgorithm, Byte[] digest, BigInteger nonce);
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TimeStampResponse : object {
    private TimeStampResp resp;
    private TimeStampToken timeStampToken;
    public int Status { get; }
    public TimeStampToken TimeStampToken { get; }
    public TimeStampResponse(TimeStampResp resp);
    public TimeStampResponse(Byte[] resp);
    public TimeStampResponse(Stream input);
    private static TimeStampResp readTimeStampResp(Asn1InputStream input);
    public int get_Status();
    public string GetStatusString();
    public PkiFailureInfo GetFailInfo();
    public TimeStampToken get_TimeStampToken();
    public void Validate(TimeStampRequest request);
    public Byte[] GetEncoded();
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TimeStampToken : object {
    private CmsSignedData tsToken;
    private SignerInformation tsaSignerInfo;
    private TimeStampTokenInfo tstInfo;
    private CertID certID;
    public TimeStampTokenInfo TimeStampInfo { get; }
    public SignerID SignerID { get; }
    public AttributeTable SignedAttributes { get; }
    public AttributeTable UnsignedAttributes { get; }
    public TimeStampToken(ContentInfo contentInfo);
    public TimeStampToken(CmsSignedData signedData);
    public TimeStampTokenInfo get_TimeStampInfo();
    public SignerID get_SignerID();
    public AttributeTable get_SignedAttributes();
    public AttributeTable get_UnsignedAttributes();
    public IX509Store GetCertificates(string type);
    public IX509Store GetCrls(string type);
    public IX509Store GetAttributeCertificates(string type);
    public void Validate(X509Certificate cert);
    public CmsSignedData ToCmsSignedData();
    public Byte[] GetEncoded();
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TimeStampTokenInfo : object {
    private TstInfo tstInfo;
    private DateTime genTime;
    public bool IsOrdered { get; }
    public Accuracy Accuracy { get; }
    public DateTime GenTime { get; }
    public GenTimeAccuracy GenTimeAccuracy { get; }
    public string Policy { get; }
    public BigInteger SerialNumber { get; }
    public GeneralName Tsa { get; }
    public BigInteger Nonce { get; }
    public AlgorithmIdentifier HashAlgorithm { get; }
    public string MessageImprintAlgOid { get; }
    public TstInfo TstInfo { get; }
    public TimeStampTokenInfo(TstInfo tstInfo);
    public bool get_IsOrdered();
    public Accuracy get_Accuracy();
    public DateTime get_GenTime();
    public GenTimeAccuracy get_GenTimeAccuracy();
    public string get_Policy();
    public BigInteger get_SerialNumber();
    public GeneralName get_Tsa();
    public BigInteger get_Nonce();
    public AlgorithmIdentifier get_HashAlgorithm();
    public string get_MessageImprintAlgOid();
    public Byte[] GetMessageImprintDigest();
    public Byte[] GetEncoded();
    public TstInfo get_TstInfo();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Tsp.TspAlgorithms : object {
    public static string MD5;
    public static string Sha1;
    public static string Sha224;
    public static string Sha256;
    public static string Sha384;
    public static string Sha512;
    public static string RipeMD128;
    public static string RipeMD160;
    public static string RipeMD256;
    public static string Gost3411;
    public static string Gost3411_2012_256;
    public static string Gost3411_2012_512;
    public static string SM3;
    public static IList Allowed;
    private static TspAlgorithms();
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TspException : Exception {
    public TspException(string message);
    public TspException(string message, Exception e);
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TspUtil : object {
    private static ISet EmptySet;
    private static IList EmptyList;
    private static IDictionary digestLengths;
    private static IDictionary digestNames;
    private static TspUtil();
    public static ICollection GetSignatureTimestamps(SignerInformation signerInfo);
    public static void ValidateCertificate(X509Certificate cert);
    internal static string GetDigestAlgName(string digestAlgOID);
    internal static int GetDigestLength(string digestAlgOID);
    internal static IDigest CreateDigestInstance(string digestAlgOID);
    internal static ISet GetCriticalExtensionOids(X509Extensions extensions);
    internal static ISet GetNonCriticalExtensionOids(X509Extensions extensions);
    internal static IList GetExtensionOids(X509Extensions extensions);
}
public class DevExpress.Pdf.Native.BouncyCastle.Tsp.TspValidationException : TspException {
    private int failureCode;
    public int FailureCode { get; }
    public TspValidationException(string message);
    public TspValidationException(string message, int failureCode);
    public int get_FailureCode();
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Arrays : object {
    public static Byte[] EmptyBytes;
    public static Int32[] EmptyInts;
    private static Arrays();
    public static bool AreAllZeroes(Byte[] buf, int off, int len);
    public static bool AreEqual(Boolean[] a, Boolean[] b);
    public static bool AreEqual(Char[] a, Char[] b);
    public static bool AreEqual(Byte[] a, Byte[] b);
    [ObsoleteAttribute("Use 'AreEqual' method instead")]
public static bool AreSame(Byte[] a, Byte[] b);
    public static bool ConstantTimeAreEqual(Byte[] a, Byte[] b);
    public static bool AreEqual(Int32[] a, Int32[] b);
    [CLSCompliantAttribute("False")]
public static bool AreEqual(UInt32[] a, UInt32[] b);
    private static bool HaveSameContents(Boolean[] a, Boolean[] b);
    private static bool HaveSameContents(Char[] a, Char[] b);
    private static bool HaveSameContents(Byte[] a, Byte[] b);
    private static bool HaveSameContents(Int32[] a, Int32[] b);
    private static bool HaveSameContents(UInt32[] a, UInt32[] b);
    public static string ToString(Object[] a);
    public static int GetHashCode(Byte[] data);
    public static int GetHashCode(Byte[] data, int off, int len);
    public static int GetHashCode(Int32[] data);
    public static int GetHashCode(Int32[] data, int off, int len);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt32[] data);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt32[] data, int off, int len);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt64[] data);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt64[] data, int off, int len);
    public static Byte[] Clone(Byte[] data);
    public static Byte[] Clone(Byte[] data, Byte[] existing);
    public static Int32[] Clone(Int32[] data);
    internal static UInt32[] Clone(UInt32[] data);
    public static Int64[] Clone(Int64[] data);
    [CLSCompliantAttribute("False")]
public static UInt64[] Clone(UInt64[] data);
    [CLSCompliantAttribute("False")]
public static UInt64[] Clone(UInt64[] data, UInt64[] existing);
    public static bool Contains(Byte[] a, byte n);
    public static bool Contains(Int16[] a, short n);
    public static bool Contains(Int32[] a, int n);
    public static void Fill(Byte[] buf, byte b);
    public static void Fill(Byte[] buf, int from, int to, byte b);
    public static Byte[] CopyOf(Byte[] data, int newLength);
    public static Char[] CopyOf(Char[] data, int newLength);
    public static Int32[] CopyOf(Int32[] data, int newLength);
    public static Int64[] CopyOf(Int64[] data, int newLength);
    public static BigInteger[] CopyOf(BigInteger[] data, int newLength);
    public static Byte[] CopyOfRange(Byte[] data, int from, int to);
    public static Int32[] CopyOfRange(Int32[] data, int from, int to);
    public static Int64[] CopyOfRange(Int64[] data, int from, int to);
    public static BigInteger[] CopyOfRange(BigInteger[] data, int from, int to);
    private static int GetLength(int from, int to);
    public static Byte[] Append(Byte[] a, byte b);
    public static Int16[] Append(Int16[] a, short b);
    public static Int32[] Append(Int32[] a, int b);
    public static Byte[] Concatenate(Byte[] a, Byte[] b);
    public static Byte[] ConcatenateAll(Byte[][] vs);
    public static Int32[] Concatenate(Int32[] a, Int32[] b);
    public static Byte[] Prepend(Byte[] a, byte b);
    public static Int16[] Prepend(Int16[] a, short b);
    public static Int32[] Prepend(Int32[] a, int b);
    public static Byte[] Reverse(Byte[] a);
    public static Int32[] Reverse(Int32[] a);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.BigIntegers : object {
    public static Byte[] AsUnsignedByteArray(BigInteger n);
    public static Byte[] AsUnsignedByteArray(int length, BigInteger n);
    public static int GetUnsignedByteLength(BigInteger n);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.CollectionUtilities : object {
    public static void AddRange(IList to, IEnumerable range);
    public static bool CheckElementsAreOfType(IEnumerable e, Type t);
    public static IDictionary ReadOnly(IDictionary d);
    public static IList ReadOnly(IList l);
    public static ISet ReadOnly(ISet s);
    public static object RequireNext(IEnumerator e);
    public static string ToString(IEnumerable c);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.EmptyEnumerable : object {
    public static IEnumerable Instance;
    private static EmptyEnumerable();
    public sealed virtual IEnumerator GetEnumerator();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.EmptyEnumerator : object {
    public static IEnumerator Instance;
    public object Current { get; }
    private static EmptyEnumerator();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.EnumerableProxy : object {
    private IEnumerable inner;
    public EnumerableProxy(IEnumerable inner);
    public sealed virtual IEnumerator GetEnumerator();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.HashSet : object {
    private IDictionary impl;
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public HashSet(IEnumerable s);
    public virtual void Add(object o);
    public virtual void AddAll(IEnumerable e);
    public virtual void Clear();
    public virtual bool Contains(object o);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual void Remove(object o);
    public virtual void RemoveAll(IEnumerable e);
    public virtual object get_SyncRoot();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.ISet {
    public bool IsEmpty { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public abstract virtual void Add(object o);
    public abstract virtual void AddAll(IEnumerable e);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(object o);
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsFixedSize();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void Remove(object o);
    public abstract virtual void RemoveAll(IEnumerable e);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.LinkedDictionary : object {
    internal IDictionary hash;
    internal IList keys;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public virtual void Add(object k, object v);
    public virtual void Clear();
    public virtual bool Contains(object k);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual void Remove(object k);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual object get_Item(object k);
    public virtual void set_Item(object k, object value);
}
internal class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.LinkedDictionaryEnumerator : object {
    private LinkedDictionary parent;
    private int pos;
    public object Current { get; }
    public DictionaryEntry Entry { get; }
    public object Key { get; }
    public object Value { get; }
    private object CurrentKey { get; }
    internal LinkedDictionaryEnumerator(LinkedDictionary parent);
    public virtual object get_Current();
    public virtual DictionaryEntry get_Entry();
    public virtual object get_Key();
    public virtual bool MoveNext();
    public virtual void Reset();
    public virtual object get_Value();
    private object get_CurrentKey();
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.UnmodifiableDictionary : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public virtual void Add(object k, object v);
    public virtual void Clear();
    public abstract virtual bool Contains(object k);
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual int get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public abstract virtual IDictionaryEnumerator GetEnumerator();
    public virtual void Remove(object k);
    public abstract virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsSynchronized();
    public abstract virtual object get_SyncRoot();
    public abstract virtual ICollection get_Keys();
    public abstract virtual ICollection get_Values();
    public virtual object get_Item(object k);
    public virtual void set_Item(object k, object value);
    protected abstract virtual object GetValue(object k);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.UnmodifiableDictionaryProxy : UnmodifiableDictionary {
    private IDictionary d;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public UnmodifiableDictionaryProxy(IDictionary d);
    public virtual bool Contains(object k);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    protected virtual object GetValue(object k);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.UnmodifiableList : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; public set; }
    public virtual int Add(object o);
    public virtual void Clear();
    public abstract virtual bool Contains(object o);
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int IndexOf(object o);
    public virtual void Insert(int i, object o);
    public abstract virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsSynchronized();
    public virtual void Remove(object o);
    public virtual void RemoveAt(int i);
    public abstract virtual object get_SyncRoot();
    public virtual object get_Item(int i);
    public virtual void set_Item(int i, object value);
    protected abstract virtual object GetValue(int i);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.UnmodifiableListProxy : UnmodifiableList {
    private IList l;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public UnmodifiableListProxy(IList l);
    public virtual bool Contains(object o);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual int IndexOf(object o);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    protected virtual object GetValue(int i);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.UnmodifiableSet : object {
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public virtual void Add(object o);
    public virtual void AddAll(IEnumerable e);
    public virtual void Clear();
    public abstract virtual bool Contains(object o);
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsSynchronized();
    public abstract virtual object get_SyncRoot();
    public virtual void Remove(object o);
    public virtual void RemoveAll(IEnumerable e);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Collections.UnmodifiableSetProxy : UnmodifiableSet {
    private ISet s;
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public UnmodifiableSetProxy(ISet s);
    public virtual bool Contains(object o);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Date.DateTimeObject : object {
    private DateTime dt;
    public DateTime Value { get; }
    public DateTimeObject(DateTime dt);
    public DateTime get_Value();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Date.DateTimeUtilities : object {
    public static DateTime UnixEpoch;
    private static DateTimeUtilities();
    public static long DateTimeToUnixMs(DateTime dateTime);
    public static DateTime UnixMsToDateTime(long unixMs);
    public static long CurrentUnixMs();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.Base64 : object {
    public static string ToBase64String(Byte[] data);
    public static string ToBase64String(Byte[] data, int off, int length);
    public static Byte[] Encode(Byte[] data);
    public static Byte[] Encode(Byte[] data, int off, int length);
    public static int Encode(Byte[] data, Stream outStream);
    public static int Encode(Byte[] data, int off, int length, Stream outStream);
    public static Byte[] Decode(Byte[] data);
    public static Byte[] Decode(string data);
    public static int Decode(string data, Stream outStream);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.Base64Encoder : object {
    protected Byte[] encodingTable;
    protected byte padding;
    protected Byte[] decodingTable;
    protected void InitialiseDecodingTable();
    public sealed virtual int Encode(Byte[] data, int off, int length, Stream outStream);
    private bool ignore(char c);
    public sealed virtual int Decode(Byte[] data, int off, int length, Stream outStream);
    private int nextI(Byte[] data, int i, int finish);
    public sealed virtual int DecodeString(string data, Stream outStream);
    private int decodeLastBlock(Stream outStream, char c1, char c2, char c3, char c4);
    private int nextI(string data, int i, int finish);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.BufferedDecoder : object {
    internal Byte[] buffer;
    internal int bufOff;
    internal ITranslator translator;
    public BufferedDecoder(ITranslator translator, int bufferSize);
    public int ProcessByte(byte input, Byte[] output, int outOff);
    public int ProcessBytes(Byte[] input, int inOff, int len, Byte[] outBytes, int outOff);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.BufferedEncoder : object {
    internal Byte[] Buffer;
    internal int bufOff;
    internal ITranslator translator;
    public BufferedEncoder(ITranslator translator, int bufferSize);
    public int ProcessByte(byte input, Byte[] outBytes, int outOff);
    public int ProcessBytes(Byte[] input, int inOff, int len, Byte[] outBytes, int outOff);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.Hex : object {
    private static IEncoder encoder;
    private static Hex();
    public static string ToHexString(Byte[] data);
    public static string ToHexString(Byte[] data, int off, int length);
    public static Byte[] Encode(Byte[] data);
    public static Byte[] Encode(Byte[] data, int off, int length);
    public static int Encode(Byte[] data, Stream outStream);
    public static int Encode(Byte[] data, int off, int length, Stream outStream);
    public static Byte[] Decode(Byte[] data);
    public static Byte[] Decode(string data);
    public static int Decode(string data, Stream outStream);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.HexEncoder : object {
    protected Byte[] encodingTable;
    protected Byte[] decodingTable;
    protected void InitialiseDecodingTable();
    public sealed virtual int Encode(Byte[] data, int off, int length, Stream outStream);
    private static bool Ignore(char c);
    public sealed virtual int Decode(Byte[] data, int off, int length, Stream outStream);
    public sealed virtual int DecodeString(string data, Stream outStream);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.HexTranslator : object {
    private static Byte[] hexTable;
    private static HexTranslator();
    public sealed virtual int GetEncodedBlockSize();
    public sealed virtual int Encode(Byte[] input, int inOff, int length, Byte[] outBytes, int outOff);
    public sealed virtual int GetDecodedBlockSize();
    public sealed virtual int Decode(Byte[] input, int inOff, int length, Byte[] outBytes, int outOff);
}
public interface DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.IEncoder {
    public abstract virtual int Encode(Byte[] data, int off, int length, Stream outStream);
    public abstract virtual int Decode(Byte[] data, int off, int length, Stream outStream);
    public abstract virtual int DecodeString(string data, Stream outStream);
}
public interface DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.ITranslator {
    public abstract virtual int GetEncodedBlockSize();
    public abstract virtual int Encode(Byte[] input, int inOff, int length, Byte[] outBytes, int outOff);
    public abstract virtual int GetDecodedBlockSize();
    public abstract virtual int Decode(Byte[] input, int inOff, int length, Byte[] outBytes, int outOff);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.UrlBase64 : object {
    private static IEncoder encoder;
    private static UrlBase64();
    public static Byte[] Encode(Byte[] data);
    public static int Encode(Byte[] data, Stream outStr);
    public static Byte[] Decode(Byte[] data);
    public static int Decode(Byte[] data, Stream outStr);
    public static Byte[] Decode(string data);
    public static int Decode(string data, Stream outStr);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Encoders.UrlBase64Encoder : Base64Encoder {
}
internal abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Enums : object {
    internal static Enum GetEnumValue(Type enumType, string s);
    internal static Array GetEnumValues(Type enumType);
    internal static Enum GetArbitraryValue(Type enumType);
    internal static bool IsEnumType(Type t);
}
public interface DevExpress.Pdf.Native.BouncyCastle.Utilities.IMemoable {
    public abstract virtual IMemoable Copy();
    public abstract virtual void Reset(IMemoable other);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Integers : object {
    public static int RotateLeft(int i, int distance);
    [CLSCompliantAttribute("False")]
public static UInt32 RotateLeft(UInt32 i, int distance);
    public static int RotateRight(int i, int distance);
    [CLSCompliantAttribute("False")]
public static UInt32 RotateRight(UInt32 i, int distance);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.BaseInputStream : Stream {
    private bool closed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanSeek();
    public sealed virtual bool get_CanWrite();
    public virtual void Close();
    public sealed virtual void Flush();
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public sealed virtual long Seek(long offset, SeekOrigin origin);
    public sealed virtual void SetLength(long value);
    public sealed virtual void Write(Byte[] buffer, int offset, int count);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.BaseOutputStream : Stream {
    private bool closed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanSeek();
    public sealed virtual bool get_CanWrite();
    public virtual void Close();
    public virtual void Flush();
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long value);
    public sealed virtual int Read(Byte[] buffer, int offset, int count);
    public sealed virtual long Seek(long offset, SeekOrigin origin);
    public sealed virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer);
    public virtual void WriteByte(byte b);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.FilterStream : Stream {
    protected Stream s;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public FilterStream(Stream s);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.MemoryInputStream : MemoryStream {
    public bool CanWrite { get; }
    public MemoryInputStream(Byte[] buffer);
    public sealed virtual bool get_CanWrite();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.MemoryOutputStream : MemoryStream {
    public bool CanRead { get; }
    public sealed virtual bool get_CanRead();
}
internal class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.NullOutputStream : BaseOutputStream {
    public virtual void WriteByte(byte b);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem.PemGenerationException : Exception {
    public PemGenerationException(string message);
    public PemGenerationException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem.PemHeader : object {
    private string name;
    private string val;
    public string Name { get; }
    public string Value { get; }
    public PemHeader(string name, string val);
    public virtual string get_Name();
    public virtual string get_Value();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private int GetHashCode(string s);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem.PemObject : object {
    private string type;
    private IList headers;
    private Byte[] content;
    public string Type { get; }
    public IList Headers { get; }
    public Byte[] Content { get; }
    public PemObject(string type, Byte[] content);
    public PemObject(string type, IList headers, Byte[] content);
    public string get_Type();
    public IList get_Headers();
    public Byte[] get_Content();
    public sealed virtual PemObject Generate();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem.PemObjectGenerator {
    public abstract virtual PemObject Generate();
}
public interface DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem.PemObjectParser {
    public abstract virtual object ParseObject(PemObject obj);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem.PemReader : object {
    private static string BeginString;
    private static string EndString;
    private TextReader reader;
    public TextReader Reader { get; }
    public PemReader(TextReader reader);
    public TextReader get_Reader();
    public PemObject ReadPemObject();
    private PemObject LoadObject(string type);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Pem.PemWriter : object {
    private static int LineLength;
    private TextWriter writer;
    private int nlLength;
    private Char[] buf;
    public TextWriter Writer { get; }
    public PemWriter(TextWriter writer);
    public TextWriter get_Writer();
    public int GetOutputSize(PemObject obj);
    public void WriteObject(PemObjectGenerator objGen);
    private void WriteEncoded(Byte[] bytes);
    private void WritePreEncapsulationBoundary(string type);
    private void WritePostEncapsulationBoundary(string type);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.PushbackStream : FilterStream {
    private int buf;
    public PushbackStream(Stream s);
    public virtual int ReadByte();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Unread(int b);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.StreamOverflowException : IOException {
    public StreamOverflowException(string message);
    public StreamOverflowException(string message, Exception exception);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.Streams : object {
    private static int BufferSize;
    public static void Drain(Stream inStr);
    public static Byte[] ReadAll(Stream inStr);
    public static Byte[] ReadAllLimited(Stream inStr, int limit);
    public static int ReadFully(Stream inStr, Byte[] buf);
    public static int ReadFully(Stream inStr, Byte[] buf, int off, int len);
    public static void PipeAll(Stream inStr, Stream outStr);
    public static long PipeAllLimited(Stream inStr, long limit, Stream outStr);
    public static void WriteBufTo(MemoryStream buf, Stream output);
    public static int WriteBufTo(MemoryStream buf, Byte[] output, int offset);
    public static void WriteZeroes(Stream outStr, long count);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.TeeInputStream : BaseInputStream {
    private Stream input;
    private Stream tee;
    public TeeInputStream(Stream input, Stream tee);
    public virtual void Close();
    public virtual int Read(Byte[] buf, int off, int len);
    public virtual int ReadByte();
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.IO.TeeOutputStream : BaseOutputStream {
    private Stream output;
    private Stream tee;
    public TeeOutputStream(Stream output, Stream tee);
    public virtual void Close();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte b);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.MemoableResetException : InvalidCastException {
    public MemoableResetException(string msg);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Net.IPAddress : object {
    public static bool IsValid(string address);
    public static bool IsValidWithNetMask(string address);
    public static bool IsValidIPv4(string address);
    private static bool unsafeIsValidIPv4(string address);
    public static bool IsValidIPv4WithNetmask(string address);
    public static bool IsValidIPv6WithNetmask(string address);
    private static bool IsMaskValue(string component, int size);
    public static bool IsValidIPv6(string address);
    private static bool unsafeIsValidIPv6(string address);
}
internal abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Platform : object {
    private static CompareInfo InvariantCompareInfo;
    internal static string NewLine;
    private static Platform();
    private static string GetNewLine();
    internal static bool EqualsIgnoreCase(string a, string b);
    internal static string GetEnvironmentVariable(string variable);
    internal static Exception CreateNotImplementedException(string message);
    internal static IList CreateArrayList();
    internal static IList CreateArrayList(int capacity);
    internal static IList CreateArrayList(ICollection collection);
    internal static IList CreateArrayList(IEnumerable collection);
    internal static IDictionary CreateHashtable();
    internal static IDictionary CreateHashtable(int capacity);
    internal static IDictionary CreateHashtable(IDictionary dictionary);
    internal static string ToLowerInvariant(string s);
    internal static string ToUpperInvariant(string s);
    internal static void Dispose(Stream s);
    internal static void Dispose(TextWriter t);
    internal static int IndexOf(string source, string value);
    internal static int LastIndexOf(string source, string value);
    internal static bool StartsWith(string source, string prefix);
    internal static bool EndsWith(string source, string suffix);
    internal static string GetTypeName(object obj);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.Utilities.Strings : object {
    public static string ToUpperCase(string original);
    internal static bool IsOneOf(string s, String[] candidates);
    public static string FromByteArray(Byte[] bs);
    public static Byte[] ToByteArray(Char[] cs);
    public static Byte[] ToByteArray(string s);
    public static string FromAsciiByteArray(Byte[] bytes);
    public static Byte[] ToAsciiByteArray(Char[] cs);
    public static Byte[] ToAsciiByteArray(string s);
    public static string FromUtf8ByteArray(Byte[] bytes);
    public static Byte[] ToUtf8ByteArray(Char[] cs);
    public static Byte[] ToUtf8ByteArray(string s);
}
public class DevExpress.Pdf.Native.BouncyCastle.Utilities.Times : object {
    private static long NanosecondsPerTick;
    private static Times();
    public static long NanoTime();
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.AttributeCertificateHolder : object {
    internal Holder holder;
    public int DigestedObjectType { get; }
    public string DigestAlgorithm { get; }
    public string OtherObjectTypeID { get; }
    public BigInteger SerialNumber { get; }
    internal AttributeCertificateHolder(Asn1Sequence seq);
    public AttributeCertificateHolder(X509Name issuerName, BigInteger serialNumber);
    public AttributeCertificateHolder(X509Certificate cert);
    public AttributeCertificateHolder(X509Name principal);
    public AttributeCertificateHolder(int digestedObjectType, string digestAlgorithm, string otherObjectTypeID, Byte[] objectDigest);
    public int get_DigestedObjectType();
    public string get_DigestAlgorithm();
    public Byte[] GetObjectDigest();
    public string get_OtherObjectTypeID();
    private GeneralNames GenerateGeneralNames(X509Name principal);
    private bool MatchesDN(X509Name subject, GeneralNames targets);
    private Object[] GetNames(GeneralName[] names);
    private X509Name[] GetPrincipals(GeneralNames names);
    public X509Name[] GetEntityNames();
    public X509Name[] GetIssuer();
    public BigInteger get_SerialNumber();
    public sealed virtual object Clone();
    public bool Match(X509Certificate x509Cert);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Match(object obj);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.AttributeCertificateIssuer : object {
    internal Asn1Encodable form;
    public AttributeCertificateIssuer(AttCertIssuer issuer);
    public AttributeCertificateIssuer(X509Name principal);
    private Object[] GetNames();
    public X509Name[] GetPrincipals();
    private bool MatchesDN(X509Name subject, GeneralNames targets);
    public sealed virtual object Clone();
    public bool Match(X509Certificate x509Cert);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Match(object obj);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.Extension.X509ExtensionUtilities : object {
    public static Asn1Object FromExtensionValue(Asn1OctetString extensionValue);
    public static ICollection GetIssuerAlternativeNames(X509Certificate cert);
    public static ICollection GetSubjectAlternativeNames(X509Certificate cert);
    private static ICollection GetAlternativeName(Asn1OctetString extVal);
}
public interface DevExpress.Pdf.Native.BouncyCastle.X509.IX509AttributeCertificate {
    public int Version { get; }
    public BigInteger SerialNumber { get; }
    public DateTime NotBefore { get; }
    public DateTime NotAfter { get; }
    public AttributeCertificateHolder Holder { get; }
    public AttributeCertificateIssuer Issuer { get; }
    public bool IsValidNow { get; }
    public abstract virtual int get_Version();
    public abstract virtual BigInteger get_SerialNumber();
    public abstract virtual DateTime get_NotBefore();
    public abstract virtual DateTime get_NotAfter();
    public abstract virtual AttributeCertificateHolder get_Holder();
    public abstract virtual AttributeCertificateIssuer get_Issuer();
    public abstract virtual X509Attribute[] GetAttributes();
    public abstract virtual X509Attribute[] GetAttributes(string oid);
    public abstract virtual Boolean[] GetIssuerUniqueID();
    public abstract virtual bool get_IsValidNow();
    public abstract virtual bool IsValid(DateTime date);
    public abstract virtual void CheckValidity();
    public abstract virtual void CheckValidity(DateTime date);
    public abstract virtual Byte[] GetSignature();
    public abstract virtual void Verify(AsymmetricKeyParameter publicKey);
    public abstract virtual Byte[] GetEncoded();
}
public interface DevExpress.Pdf.Native.BouncyCastle.X509.IX509Extension {
    public abstract virtual ISet GetCriticalExtensionOids();
    public abstract virtual ISet GetNonCriticalExtensionOids();
    [ObsoleteAttribute("Use version taking a DerObjectIdentifier instead")]
public abstract virtual Asn1OctetString GetExtensionValue(string oid);
    public abstract virtual Asn1OctetString GetExtensionValue(DerObjectIdentifier oid);
}
internal class DevExpress.Pdf.Native.BouncyCastle.X509.PemParser : object {
    private string _header1;
    private string _header2;
    private string _footer1;
    private string _footer2;
    internal PemParser(string type);
    private string ReadLine(Stream inStream);
    internal Asn1Sequence ReadPemObject(Stream inStream);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.PrincipalUtilities : object {
    public static X509Name GetIssuerX509Principal(X509Certificate cert);
    public static X509Name GetSubjectX509Principal(X509Certificate cert);
    public static X509Name GetIssuerX509Principal(X509Crl crl);
}
public interface DevExpress.Pdf.Native.BouncyCastle.X509.Store.IX509Selector {
    public abstract virtual bool Match(object obj);
}
public interface DevExpress.Pdf.Native.BouncyCastle.X509.Store.IX509Store {
    public abstract virtual ICollection GetMatches(IX509Selector selector);
}
public interface DevExpress.Pdf.Native.BouncyCastle.X509.Store.IX509StoreParameters {
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.Store.NoSuchStoreException : X509StoreException {
    public NoSuchStoreException(string message);
    public NoSuchStoreException(string message, Exception e);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.Store.X509CertStoreSelector : object {
    private Byte[] authorityKeyIdentifier;
    private int basicConstraints;
    private X509Certificate certificate;
    private DateTimeObject certificateValid;
    private ISet extendedKeyUsage;
    private bool ignoreX509NameOrdering;
    private X509Name issuer;
    private Boolean[] keyUsage;
    private ISet policy;
    private DateTimeObject privateKeyValid;
    private BigInteger serialNumber;
    private X509Name subject;
    private Byte[] subjectKeyIdentifier;
    private SubjectPublicKeyInfo subjectPublicKey;
    private DerObjectIdentifier subjectPublicKeyAlgID;
    public Byte[] AuthorityKeyIdentifier { get; public set; }
    public int BasicConstraints { get; public set; }
    public X509Certificate Certificate { get; public set; }
    public DateTimeObject CertificateValid { get; public set; }
    public ISet ExtendedKeyUsage { get; public set; }
    public bool IgnoreX509NameOrdering { get; public set; }
    public X509Name Issuer { get; public set; }
    [ObsoleteAttribute("Avoid working with X509Name objects in string form")]
public string IssuerAsString { get; }
    public Boolean[] KeyUsage { get; public set; }
    public ISet Policy { get; public set; }
    public DateTimeObject PrivateKeyValid { get; public set; }
    public BigInteger SerialNumber { get; public set; }
    public X509Name Subject { get; public set; }
    [ObsoleteAttribute("Avoid working with X509Name objects in string form")]
public string SubjectAsString { get; }
    public Byte[] SubjectKeyIdentifier { get; public set; }
    public SubjectPublicKeyInfo SubjectPublicKey { get; public set; }
    public DerObjectIdentifier SubjectPublicKeyAlgID { get; public set; }
    public X509CertStoreSelector(X509CertStoreSelector o);
    public virtual object Clone();
    public Byte[] get_AuthorityKeyIdentifier();
    public void set_AuthorityKeyIdentifier(Byte[] value);
    public int get_BasicConstraints();
    public void set_BasicConstraints(int value);
    public X509Certificate get_Certificate();
    public void set_Certificate(X509Certificate value);
    public DateTimeObject get_CertificateValid();
    public void set_CertificateValid(DateTimeObject value);
    public ISet get_ExtendedKeyUsage();
    public void set_ExtendedKeyUsage(ISet value);
    public bool get_IgnoreX509NameOrdering();
    public void set_IgnoreX509NameOrdering(bool value);
    public X509Name get_Issuer();
    public void set_Issuer(X509Name value);
    public string get_IssuerAsString();
    public Boolean[] get_KeyUsage();
    public void set_KeyUsage(Boolean[] value);
    public ISet get_Policy();
    public void set_Policy(ISet value);
    public DateTimeObject get_PrivateKeyValid();
    public void set_PrivateKeyValid(DateTimeObject value);
    public BigInteger get_SerialNumber();
    public void set_SerialNumber(BigInteger value);
    public X509Name get_Subject();
    public void set_Subject(X509Name value);
    public string get_SubjectAsString();
    public Byte[] get_SubjectKeyIdentifier();
    public void set_SubjectKeyIdentifier(Byte[] value);
    public SubjectPublicKeyInfo get_SubjectPublicKey();
    public void set_SubjectPublicKey(SubjectPublicKeyInfo value);
    public DerObjectIdentifier get_SubjectPublicKeyAlgID();
    public void set_SubjectPublicKeyAlgID(DerObjectIdentifier value);
    public virtual bool Match(object obj);
    internal static bool IssuersMatch(X509Name a, X509Name b);
    private static Boolean[] CopyBoolArray(Boolean[] b);
    private static ISet CopySet(ISet s);
    private static SubjectPublicKeyInfo GetSubjectPublicKey(X509Certificate c);
    private static bool MatchExtension(Byte[] b, X509Certificate c, DerObjectIdentifier oid);
}
internal class DevExpress.Pdf.Native.BouncyCastle.X509.Store.X509CollectionStore : object {
    private ICollection _local;
    internal X509CollectionStore(ICollection collection);
    public sealed virtual ICollection GetMatches(IX509Selector selector);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.Store.X509CollectionStoreParameters : object {
    private IList collection;
    public X509CollectionStoreParameters(ICollection collection);
    public ICollection GetCollection();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.Store.X509StoreException : Exception {
    public X509StoreException(string message);
    public X509StoreException(string message, Exception e);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.Store.X509StoreFactory : object {
    public static IX509Store Create(string type, IX509StoreParameters parameters);
    private static void checkCorrectType(ICollection coll, Type t);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.SubjectPublicKeyInfoFactory : object {
    public static SubjectPublicKeyInfo CreateSubjectPublicKeyInfo(AsymmetricKeyParameter publicKey);
    private static void ExtractBytes(Byte[] encKey, int offset, BigInteger bI);
    private static void ExtractBytes(Byte[] encKey, int size, int offSet, BigInteger bI);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509Attribute : Asn1Encodable {
    private AttributeX509 attr;
    public string Oid { get; }
    internal X509Attribute(Asn1Encodable at);
    public X509Attribute(string oid, Asn1Encodable value);
    public X509Attribute(string oid, Asn1EncodableVector value);
    public string get_Oid();
    public Asn1Encodable[] GetValues();
    public virtual Asn1Object ToAsn1Object();
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509Certificate : X509ExtensionBase {
    private X509CertificateStructure c;
    private BasicConstraints basicConstraints;
    private Boolean[] keyUsage;
    private bool hashValueSet;
    private int hashValue;
    public X509CertificateStructure CertificateStructure { get; }
    public bool IsValidNow { get; }
    public int Version { get; }
    public BigInteger SerialNumber { get; }
    public X509Name IssuerDN { get; }
    public X509Name SubjectDN { get; }
    public DateTime NotBefore { get; }
    public DateTime NotAfter { get; }
    public string SigAlgName { get; }
    public string SigAlgOid { get; }
    public DerBitString IssuerUniqueID { get; }
    public DerBitString SubjectUniqueID { get; }
    public DerBitString PublicKeyData { get; }
    public X509Certificate(X509CertificateStructure c);
    public virtual X509CertificateStructure get_CertificateStructure();
    public virtual bool get_IsValidNow();
    public virtual bool IsValid(DateTime time);
    public virtual void CheckValidity();
    public virtual void CheckValidity(DateTime time);
    public virtual int get_Version();
    public virtual BigInteger get_SerialNumber();
    public virtual X509Name get_IssuerDN();
    public virtual X509Name get_SubjectDN();
    public virtual DateTime get_NotBefore();
    public virtual DateTime get_NotAfter();
    public virtual Byte[] GetTbsCertificate();
    public virtual Byte[] GetSignature();
    public virtual string get_SigAlgName();
    public virtual string get_SigAlgOid();
    public virtual Byte[] GetSigAlgParams();
    public virtual DerBitString get_IssuerUniqueID();
    public virtual DerBitString get_SubjectUniqueID();
    public virtual Boolean[] GetKeyUsage();
    public virtual IList GetExtendedKeyUsage();
    public virtual int GetBasicConstraints();
    public virtual ICollection GetSubjectAlternativeNames();
    public virtual ICollection GetIssuerAlternativeNames();
    protected virtual ICollection GetAlternativeNames(string oid);
    protected virtual X509Extensions GetX509Extensions();
    public virtual AsymmetricKeyParameter GetPublicKey();
    public DerBitString get_PublicKeyData();
    public virtual Byte[] GetEncoded();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual void Verify(AsymmetricKeyParameter key);
    public virtual void Verify(IVerifierFactoryProvider verifierProvider);
    protected virtual void CheckSignature(IVerifierFactory verifier);
    private static bool IsAlgIDEqual(AlgorithmIdentifier id1, AlgorithmIdentifier id2);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509CertificatePair : object {
    private X509Certificate forward;
    private X509Certificate reverse;
    public X509Certificate Forward { get; }
    public X509Certificate Reverse { get; }
    public X509CertificatePair(X509Certificate forward, X509Certificate reverse);
    public X509CertificatePair(CertificatePair pair);
    public Byte[] GetEncoded();
    public X509Certificate get_Forward();
    public X509Certificate get_Reverse();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509CertificateParser : object {
    private static PemParser PemCertParser;
    private Asn1Set sData;
    private int sDataObjectCount;
    private Stream currentStream;
    private static X509CertificateParser();
    private X509Certificate ReadDerCertificate(Asn1InputStream dIn);
    private X509Certificate GetCertificate();
    private X509Certificate ReadPemCertificate(Stream inStream);
    protected virtual X509Certificate CreateX509Certificate(X509CertificateStructure c);
    public X509Certificate ReadCertificate(Byte[] input);
    public ICollection ReadCertificates(Byte[] input);
    public X509Certificate ReadCertificate(Stream inStream);
    public ICollection ReadCertificates(Stream inStream);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509Crl : X509ExtensionBase {
    private CertificateList c;
    private string sigAlgName;
    private Byte[] sigAlgParams;
    private bool isIndirect;
    public int Version { get; }
    public X509Name IssuerDN { get; }
    public DateTime ThisUpdate { get; }
    public DateTimeObject NextUpdate { get; }
    public string SigAlgName { get; }
    public string SigAlgOid { get; }
    protected bool IsIndirectCrl { get; }
    public X509Crl(CertificateList c);
    protected virtual X509Extensions GetX509Extensions();
    public virtual Byte[] GetEncoded();
    public virtual void Verify(AsymmetricKeyParameter publicKey);
    public virtual void Verify(IVerifierFactoryProvider verifierProvider);
    protected virtual void CheckSignature(IVerifierFactory verifier);
    public virtual int get_Version();
    public virtual X509Name get_IssuerDN();
    public virtual DateTime get_ThisUpdate();
    public virtual DateTimeObject get_NextUpdate();
    private ISet LoadCrlEntries();
    public virtual X509CrlEntry GetRevokedCertificate(BigInteger serialNumber);
    public virtual ISet GetRevokedCertificates();
    public virtual Byte[] GetTbsCertList();
    public virtual Byte[] GetSignature();
    public virtual string get_SigAlgName();
    public virtual string get_SigAlgOid();
    public virtual Byte[] GetSigAlgParams();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool IsRevoked(X509Certificate cert);
    protected virtual bool get_IsIndirectCrl();
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509CrlEntry : X509ExtensionBase {
    private CrlEntry c;
    private bool isIndirect;
    private X509Name previousCertificateIssuer;
    private X509Name certificateIssuer;
    public BigInteger SerialNumber { get; }
    public DateTime RevocationDate { get; }
    public bool HasExtensions { get; }
    public X509CrlEntry(CrlEntry c);
    public X509CrlEntry(CrlEntry c, bool isIndirect, X509Name previousCertificateIssuer);
    private X509Name loadCertificateIssuer();
    public X509Name GetCertificateIssuer();
    protected virtual X509Extensions GetX509Extensions();
    public Byte[] GetEncoded();
    public BigInteger get_SerialNumber();
    public DateTime get_RevocationDate();
    public bool get_HasExtensions();
    public virtual string ToString();
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509CrlParser : object {
    private static PemParser PemCrlParser;
    private bool lazyAsn1;
    private Asn1Set sCrlData;
    private int sCrlDataObjectCount;
    private Stream currentCrlStream;
    public X509CrlParser(bool lazyAsn1);
    private static X509CrlParser();
    private X509Crl ReadPemCrl(Stream inStream);
    private X509Crl ReadDerCrl(Asn1InputStream dIn);
    private X509Crl GetCrl();
    protected virtual X509Crl CreateX509Crl(CertificateList c);
    public X509Crl ReadCrl(Byte[] input);
    public ICollection ReadCrls(Byte[] input);
    public X509Crl ReadCrl(Stream inStream);
    public ICollection ReadCrls(Stream inStream);
}
public abstract class DevExpress.Pdf.Native.BouncyCastle.X509.X509ExtensionBase : object {
    protected abstract virtual X509Extensions GetX509Extensions();
    protected virtual ISet GetExtensionOids(bool critical);
    public virtual ISet GetNonCriticalExtensionOids();
    public virtual ISet GetCriticalExtensionOids();
    [ObsoleteAttribute("Use version taking a DerObjectIdentifier instead")]
public sealed virtual Asn1OctetString GetExtensionValue(string oid);
    public virtual Asn1OctetString GetExtensionValue(DerObjectIdentifier oid);
}
internal class DevExpress.Pdf.Native.BouncyCastle.X509.X509SignatureUtilities : object {
    private static Asn1Null derNull;
    private static X509SignatureUtilities();
    internal static void SetSignatureParameters(ISigner signature, Asn1Encodable parameters);
    internal static string GetSignatureName(AlgorithmIdentifier sigAlgId);
    private static string GetDigestAlgName(DerObjectIdentifier digestAlgOID);
}
public class DevExpress.Pdf.Native.BouncyCastle.X509.X509V2AttributeCertificate : X509ExtensionBase {
    private AttributeCertificate cert;
    private DateTime notBefore;
    private DateTime notAfter;
    public int Version { get; }
    public BigInteger SerialNumber { get; }
    public AttributeCertificateHolder Holder { get; }
    public AttributeCertificateIssuer Issuer { get; }
    public DateTime NotBefore { get; }
    public DateTime NotAfter { get; }
    public bool IsValidNow { get; }
    public AlgorithmIdentifier SignatureAlgorithm { get; }
    public X509V2AttributeCertificate(Stream encIn);
    public X509V2AttributeCertificate(Byte[] encoded);
    internal X509V2AttributeCertificate(AttributeCertificate cert);
    private static AttributeCertificate GetObject(Stream input);
    public virtual int get_Version();
    public virtual BigInteger get_SerialNumber();
    public virtual AttributeCertificateHolder get_Holder();
    public virtual AttributeCertificateIssuer get_Issuer();
    public virtual DateTime get_NotBefore();
    public virtual DateTime get_NotAfter();
    public virtual Boolean[] GetIssuerUniqueID();
    public virtual bool get_IsValidNow();
    public virtual bool IsValid(DateTime date);
    public virtual void CheckValidity();
    public virtual void CheckValidity(DateTime date);
    public virtual AlgorithmIdentifier get_SignatureAlgorithm();
    public virtual Byte[] GetSignature();
    public virtual void Verify(AsymmetricKeyParameter key);
    public virtual void Verify(IVerifierFactoryProvider verifierProvider);
    protected virtual void CheckSignature(IVerifierFactory verifier);
    public virtual Byte[] GetEncoded();
    protected virtual X509Extensions GetX509Extensions();
    public virtual X509Attribute[] GetAttributes();
    public virtual X509Attribute[] GetAttributes(string oid);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class DevExpress.Pdf.Native.ByteArrayRawDataSource : RawImageDataSource {
    private Byte[] data;
    private int sourceOffset;
    public ByteArrayRawDataSource(PdfImage image, Byte[] data);
    public virtual void FillScanline(Byte[] scanline);
    public virtual void Dispose();
}
internal class DevExpress.Pdf.Native.CCITTFaxBitReader : object {
    private static int highBitMask;
    private Byte[] data;
    private int length;
    private byte currentByte;
    private int position;
    [CompilerGeneratedAttribute]
private int <CurrentBitMask>k__BackingField;
    public int Position { get; public set; }
    public int CurrentBitMask { get; public set; }
    public bool Ended { get; }
    public bool IsLastByte { get; }
    public int RemainingBits { get; }
    public CCITTFaxBitReader(Byte[] data);
    private static int GetConsumedBits(int bitMask);
    public int get_Position();
    public void set_Position(int value);
    [CompilerGeneratedAttribute]
public int get_CurrentBitMask();
    [CompilerGeneratedAttribute]
public void set_CurrentBitMask(int value);
    public bool get_Ended();
    public bool get_IsLastByte();
    public int get_RemainingBits();
    private bool MoveNextByte();
    public int ReadBit();
    public void Align();
}
internal class DevExpress.Pdf.Native.CCITTFaxDataBuffer : object {
    private MemoryStream memoryStream;
    private Byte[] currentLineBuffer;
    private bool blackIs1;
    private int expectedSize;
    [CompilerGeneratedAttribute]
private int <Columns>k__BackingField;
    public int Columns { get; }
    public bool Ended { get; }
    public long Length { get; }
    protected Byte[] CurrentLine { get; }
    public CCITTFaxDataBuffer(CCITTFaxDecoderParameters parameters);
    private static byte FillByte(byte b, int start, int end, bool black);
    [CompilerGeneratedAttribute]
public int get_Columns();
    public bool get_Ended();
    public long get_Length();
    protected Byte[] get_CurrentLine();
    public void FillLineBuffer(int a0, int a1, bool black);
    public virtual void AppendLine();
    public Byte[] GetResult();
    public sealed virtual void Dispose();
}
internal static class DevExpress.Pdf.Native.CCITTFaxDecoder : object {
    public static Byte[] Decode(PdfCCITTFaxDecodeFilter filter, Byte[] data);
    public static Byte[] Decode(CCITTFaxDecoderParameters parameters, Byte[] data);
    private static Byte[] PerformDecode(CCITTFaxDecoderParameters parameters, Byte[] data);
    private static bool DecodeGroup3Line(CCITTFaxStreamReader dataReader, CCITTFaxDataBuffer buffer);
    private static Byte[] DecodeGroup3(Byte[] data, CCITTFaxDecoderParameters parameters, Boolean& hasErrors);
    private static Byte[] DecodeGroup3(Byte[] data, CCITTFaxDecoderParameters parameters);
    private static Byte[] DecodeGroup4(Byte[] data, CCITTFaxDecoderParameters parameters);
    private static Byte[] DecodeMixedGroup4(Byte[] data, CCITTFaxDecoderParameters parameters);
    private static bool DecodeGroup4Line(CCITTFaxGroup4DataBuffer buffer, CCITTFaxGroup4StreamReader dataReader);
}
internal class DevExpress.Pdf.Native.CCITTFaxDecoderException : Exception {
}
internal class DevExpress.Pdf.Native.CCITTFaxDecoderParameters : object {
    [CompilerGeneratedAttribute]
private bool <BlackIs1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncodedByteAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TwoDimensionalLineCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndOfLine>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfCCITTFaxEncodingScheme <EncodingScheme>k__BackingField;
    public bool BlackIs1 { get; }
    public bool EncodedByteAlign { get; }
    public int TwoDimensionalLineCount { get; }
    public int Columns { get; }
    public int Rows { get; }
    public bool EndOfLine { get; public set; }
    public PdfCCITTFaxEncodingScheme EncodingScheme { get; }
    public CCITTFaxDecoderParameters(PdfCCITTFaxDecodeFilter filter);
    public CCITTFaxDecoderParameters(bool blackIs1, bool encodedByteAlign, int twoDimensionalLineCount, int columns, int rows, PdfCCITTFaxEncodingScheme encodingScheme);
    [CompilerGeneratedAttribute]
public bool get_BlackIs1();
    [CompilerGeneratedAttribute]
public bool get_EncodedByteAlign();
    [CompilerGeneratedAttribute]
public int get_TwoDimensionalLineCount();
    [CompilerGeneratedAttribute]
public int get_Columns();
    [CompilerGeneratedAttribute]
public int get_Rows();
    [CompilerGeneratedAttribute]
public bool get_EndOfLine();
    [CompilerGeneratedAttribute]
public void set_EndOfLine(bool value);
    [CompilerGeneratedAttribute]
public PdfCCITTFaxEncodingScheme get_EncodingScheme();
}
internal enum DevExpress.Pdf.Native.CCITTFaxGroup4CodingMode : Enum {
    public int value__;
    public static CCITTFaxGroup4CodingMode Pass;
    public static CCITTFaxGroup4CodingMode Horizontal;
    public static CCITTFaxGroup4CodingMode Vertical0;
    public static CCITTFaxGroup4CodingMode VerticalRight1;
    public static CCITTFaxGroup4CodingMode VerticalRight2;
    public static CCITTFaxGroup4CodingMode VerticalRight3;
    public static CCITTFaxGroup4CodingMode VerticalLeft1;
    public static CCITTFaxGroup4CodingMode VerticalLeft2;
    public static CCITTFaxGroup4CodingMode VerticalLeft3;
    public static CCITTFaxGroup4CodingMode EndOfData;
}
internal class DevExpress.Pdf.Native.CCITTFaxGroup4DataBuffer : CCITTFaxDataBuffer {
    private Byte[] referenceLine;
    public CCITTFaxGroup4DataBuffer(CCITTFaxDecoderParameters parameters);
    public virtual void AppendLine();
    public int FindB(int startPosition, bool isWhite);
}
internal class DevExpress.Pdf.Native.CCITTFaxGroup4StreamReader : CCITTFaxStreamReader {
    public CCITTFaxGroup4StreamReader(Byte[] data, CCITTFaxDecoderParameters parameters);
    public CCITTFaxGroup4CodingMode ReadCodingMode();
}
internal class DevExpress.Pdf.Native.CCITTFaxStreamReader : object {
    private static int EOLCode;
    private static Dictionary`2<string, int> whiteRunLengths;
    private static Dictionary`2<string, int> blackRunLengths;
    private static Dictionary`2<string, int> commonRunLengths;
    private static PdfHuffmanTreeBranch whiteTree;
    private static PdfHuffmanTreeBranch blackTree;
    private CCITTFaxBitReader bitReader;
    private bool align;
    private bool endOfLine;
    protected CCITTFaxBitReader BitReader { get; }
    public bool Ended { get; }
    public bool IsLastByte { get; }
    private static CCITTFaxStreamReader();
    public CCITTFaxStreamReader(Byte[] data, CCITTFaxDecoderParameters parameters);
    protected CCITTFaxBitReader get_BitReader();
    public bool get_Ended();
    public bool get_IsLastByte();
    public int ReadSequence(bool isBlack);
    public bool ReadBit();
    public bool TryReadEOL(int count);
    public bool TryReadEOL();
    private bool ReadEOL();
    public void EndOfLine();
    private int FindRunningLengthPart(PdfHuffmanTreeBranch branch);
    private int FindRunningLength(PdfHuffmanTreeBranch branch);
}
[ExtensionAttribute]
internal static class DevExpress.Pdf.Native.CertificateExtenstions : object {
    [ExtensionAttribute]
public static string GetOCSPURL(X509Certificate certificate);
    [ExtensionAttribute]
public static IList`1<string> GetCRLURL(X509Certificate certificate);
    private static Asn1Object GetExtensionValue(X509Certificate certificate, string oid);
    private static string GetStringFromGeneralName(Asn1Object names);
}
public class DevExpress.Pdf.Native.CFFFontSubsetInfo : object {
    [CompilerGeneratedAttribute]
private ISet`1<int> <GlyphIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<int> <PrivateSubrIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, HashSet`1<int>> <GlyphGroupSubrIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<int> <GlobalSubrIndices>k__BackingField;
    public ISet`1<int> GlyphIndices { get; }
    public ISet`1<int> PrivateSubrIndices { get; }
    public IDictionary`2<int, HashSet`1<int>> GlyphGroupSubrIndices { get; }
    public ISet`1<int> GlobalSubrIndices { get; }
    public CFFFontSubsetInfo(ISet`1<int> glyphIndices, ISet`1<int> privateSubrIndices, IDictionary`2<int, HashSet`1<int>> glyphGroupSubrIndices, ISet`1<int> globalSubrIndices);
    [CompilerGeneratedAttribute]
public ISet`1<int> get_GlyphIndices();
    [CompilerGeneratedAttribute]
public ISet`1<int> get_PrivateSubrIndices();
    [CompilerGeneratedAttribute]
public IDictionary`2<int, HashSet`1<int>> get_GlyphGroupSubrIndices();
    [CompilerGeneratedAttribute]
public ISet`1<int> get_GlobalSubrIndices();
}
public class DevExpress.Pdf.Native.CFFSusbsetCalculator : PdfType1CharstringInterpreter {
    private PdfType1FontCompactFontProgram program;
    private IDictionary`2<Byte[], IEnumerable`1<IPdfType1CharstringToken>> subrCache;
    private IList`1<Byte[]> glyphGroupSubrs;
    private ISet`1<int> glyphGroupLocalIndices;
    private ISet`1<int> childIndices;
    private ISet`1<int> subrIndices;
    private ISet`1<int> globalSubrIndices;
    private CFFSusbsetCalculator(PdfType1FontCompactFontProgram program, IDictionary`2<Byte[], IEnumerable`1<IPdfType1CharstringToken>> subrCache);
    private static string GetStandardGlyphName(int standardGlyph);
    public static CFFFontSubsetInfo CalculateSubset(PdfType1FontCompactFontProgram program, IEnumerable`1<int> glyphIndices);
    private void RegisterGlyph(int code);
    public virtual void Seac(double asb, double adx, double ady, int bchar, int achar);
    public virtual void CallGlobalSubr(int index);
    private void ProcessSubr(ISet`1<int> usedSubrStorage, IList`1<Byte[]> subrs, int index);
    public virtual void CallSubr(int index);
    public virtual void ClosePath();
    public virtual void RelativeCurveTo(double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
    public virtual void RelativeLineTo(double dx, double dy);
    public virtual void RelativeMoveTo(double dx, double dy);
    public virtual void SetSidebearing(double sbx, double sby, double wx, double wy);
    protected virtual void CallOtherSubr(int index, IList`1<object> parameters);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.ChunkedFloatArray : object {
    private static int chunkSize;
    private int count;
    private List`1<Single[]> chunks;
    public int Length { get; }
    public float Item { get; public set; }
    public ChunkedFloatArray(int count);
    public sealed virtual int get_Length();
    public sealed virtual float get_Item(int i);
    public sealed virtual void set_Item(int i, float value);
    public sealed virtual void BlockCopyFrom(Array src, int srcOffset, int dstOffset, int count);
    public sealed virtual void BlockCopyTo(int srcOffset, Array dst, int dstOffset, int count);
}
[ExtensionAttribute]
internal static class DevExpress.Pdf.Native.DigestCalculatorExtenstions : object {
    [ExtensionAttribute]
public static Byte[] ComputeDigest(IDigestCalculator calculator, Byte[] data);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.BasicParser : object {
    protected static byte Escape;
    protected static byte PercentSign;
    protected static byte Zero;
    protected static byte Nine;
    private static byte plus;
    private static byte minus;
    private static byte period;
    private static byte A;
    private static byte smallA;
    private static byte F;
    private static byte smallF;
    private ParserBuffer parserBuffer;
    private ParserCharTable separators;
    private ParserCharTable whiteSpaces;
    private IDataContainer container;
    protected byte CurrentByte { get; }
    protected bool IsSpace { get; }
    protected bool IsSeparator { get; }
    protected int Digit { get; }
    protected bool IsDigit { get; }
    protected bool IsNotEnded { get; }
    protected bool IsNumeric { get; }
    protected bool IsPeriod { get; }
    protected Nullable`1<byte> HexDigit { get; }
    protected long Position { get; protected set; }
    private bool IsEolSymbol { get; }
    private bool IsComment { get; }
    protected BasicParser(IDataContainer container);
    protected BasicParser(IDataContainer container, ParserCharTable separators);
    internal static void ThrowIncorrectDataException();
    protected byte get_CurrentByte();
    protected bool get_IsSpace();
    protected bool get_IsSeparator();
    protected int get_Digit();
    protected bool get_IsDigit();
    protected bool get_IsNotEnded();
    protected bool get_IsNumeric();
    protected bool get_IsPeriod();
    protected Nullable`1<byte> get_HexDigit();
    protected long get_Position();
    protected void set_Position(long value);
    private bool get_IsEolSymbol();
    private bool get_IsComment();
    protected bool MoveForward();
    protected bool MoveBack();
    protected bool SkipWhitespaces();
    protected bool ExpectLexeme(byte lexeme);
    protected bool ExpectLexeme(IList`1<byte> lexeme);
    protected bool FindLexeme(IList`1<byte> lexeme);
    protected IList`1<byte> ReadToken();
    protected IDataContainer CreateSegment(long offset, long length);
    protected IDataContainer CreateSegment(long length);
    protected bool TryParseNumber(Double& number);
    private bool TryReadReal(double initialValue, Double& result);
}
public interface DevExpress.Pdf.Native.DocumentSigning.IDataContainer {
    public long Length { get; }
    public abstract virtual long get_Length();
    public abstract virtual T Accept(IDataContainerVisitor`1<T> visitor);
    public abstract virtual Byte[] ToByteArray();
    public abstract virtual IDataContainer CreateSegment(long offset, long length);
    public abstract virtual void CopyTo(Stream stream);
}
public interface DevExpress.Pdf.Native.DocumentSigning.IDataContainerVisitor`1 {
    public abstract virtual T Visit(MemoryDataContainer memoryDataContainer);
    public abstract virtual T Visit(StreamDataContainer memoryDataContainer);
}
public interface DevExpress.Pdf.Native.DocumentSigning.IPdfDocumentStructureBuilder {
    public long StartXRef { get; public set; }
    public PdfReferencePrimitive Root { get; public set; }
    public PdfPrimitive Info { get; public set; }
    public PdfArrayPrimitive ID { get; public set; }
    public bool IsStreamXRef { get; public set; }
    public abstract virtual long get_StartXRef();
    public abstract virtual void set_StartXRef(long value);
    public abstract virtual PdfReferencePrimitive get_Root();
    public abstract virtual void set_Root(PdfReferencePrimitive value);
    public abstract virtual PdfPrimitive get_Info();
    public abstract virtual void set_Info(PdfPrimitive value);
    public abstract virtual PdfArrayPrimitive get_ID();
    public abstract virtual void set_ID(PdfArrayPrimitive value);
    public abstract virtual bool get_IsStreamXRef();
    public abstract virtual void set_IsStreamXRef(bool value);
    public abstract virtual void Add(PdfIndirectObjectIdentifier reference, IPdfObjectContainer container);
    public abstract virtual bool Remove(PdfIndirectObjectIdentifier reference);
    public abstract virtual bool Contains(PdfIndirectObjectIdentifier reference);
    public abstract virtual PdfDocumentStructure CreateStructure();
}
internal interface DevExpress.Pdf.Native.DocumentSigning.IPdfObject {
    public abstract virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public interface DevExpress.Pdf.Native.DocumentSigning.IPdfObjectContainer {
    public abstract virtual PdfPrimitive GetIndirectObject(PdfObjectStorage collection, PdfIndirectObjectParsingChain currentProcessedReferences);
    public abstract virtual bool Validate(PdfObjectStorage collection, PdfIndirectObjectIdentifier id);
}
public class DevExpress.Pdf.Native.DocumentSigning.MemoryDataContainer : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    private long DevExpress.Pdf.Native.DocumentSigning.IDataContainer.Length { get; }
    public MemoryDataContainer(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    private sealed virtual override long DevExpress.Pdf.Native.DocumentSigning.IDataContainer.get_Length();
    private sealed virtual override T DevExpress.Pdf.Native.DocumentSigning.IDataContainer.Accept(IDataContainerVisitor`1<T> visitor);
    private sealed virtual override IDataContainer DevExpress.Pdf.Native.DocumentSigning.IDataContainer.CreateSegment(long offset, long length);
    private sealed virtual override Byte[] DevExpress.Pdf.Native.DocumentSigning.IDataContainer.ToByteArray();
    private sealed virtual override void DevExpress.Pdf.Native.DocumentSigning.IDataContainer.CopyTo(Stream stream);
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Pdf.Native.DocumentSigning.ModelObjectList`1 : object {
    private PdfArrayPrimitive primitive;
    public T Item { get; }
    public int Count { get; }
    protected ModelObjectList`1(PdfArrayPrimitive primitive);
    public sealed virtual T get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.DocumentSigning.ModelObjectList`1/<GetEnumerator>d__6")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected abstract virtual T CreateModelObject(PdfPrimitive primitive);
}
internal class DevExpress.Pdf.Native.DocumentSigning.ParserBuffer : object {
    private static ParserBufferFactory factory;
    private static int defaultBufferSize;
    private Stream parserStream;
    private Byte[] buffer;
    private long bufferEnd;
    private long bufferStart;
    private long position;
    [CompilerGeneratedAttribute]
private byte <CurrentByte>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotEnded>k__BackingField;
    public long Position { get; public set; }
    public byte CurrentByte { get; private set; }
    public bool IsNotEnded { get; private set; }
    private ParserBuffer(Stream stream);
    private static ParserBuffer();
    public static ParserBuffer Create(IDataContainer container);
    public long get_Position();
    public void set_Position(long value);
    [CompilerGeneratedAttribute]
public byte get_CurrentByte();
    [CompilerGeneratedAttribute]
private void set_CurrentByte(byte value);
    [CompilerGeneratedAttribute]
public bool get_IsNotEnded();
    [CompilerGeneratedAttribute]
private void set_IsNotEnded(bool value);
    public bool MoveForward();
    public bool MoveBack();
    private void UpdateBuffer();
}
public class DevExpress.Pdf.Native.DocumentSigning.ParserCharTable : ValueType {
    public static ParserCharTable DefaultSeparators;
    public static ParserCharTable DefaultWhiteSpaces;
    private static int bitsPerInt;
    private Int32[] arr;
    public ParserCharTable(IEnumerable`1<byte> chars);
    private ParserCharTable(Int32[] arr);
    private static ParserCharTable();
    private static void SetBits(Int32[] array, IEnumerable`1<byte> chars);
    public bool Contains(byte c);
    public ParserCharTable Concat(IEnumerable`1<byte> chars);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfAnnotationObject : PdfDictionaryBasedObject {
    private static string DictionaryType;
    private static string PageDictionaryKey;
    private static string rectDictionaryKey;
    private static string flagsDictionaryKey;
    protected string Type { get; }
    public PdfRectangle Rect { get; }
    protected PdfAnnotationObject(PdfDictionaryPrimitive primitive);
    protected PdfAnnotationObject(PdfPageObject page, PdfRectangle widgetRectangle, PdfAnnotationFlags flags, PdfDictionaryPrimitive primitive);
    protected abstract virtual string get_Type();
    public PdfRectangle get_Rect();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Array, Count = {array.Count}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfArrayPrimitive : PdfContainerPrimitive`1<int> {
    private IList`1<PdfPrimitive> array;
    public int Count { get; }
    public PdfPrimitive Item { get; public set; }
    public PdfArrayPrimitive(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
    public PdfArrayPrimitive(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference, IList`1<PdfPrimitive> array);
    public sealed virtual int get_Count();
    public sealed virtual PdfPrimitive get_Item(int index);
    public void set_Item(int index, PdfPrimitive value);
    public IList`1<T> AsList(Func`2<PdfPrimitive, T> create);
    public virtual PdfArrayPrimitive AsArray();
    public void InsertPrimitive(int index, PdfPrimitive value);
    public void AddPrimitive(PdfPrimitive value);
    public void Add(double value);
    public void Clear();
    public void Remove(int index);
    public void Remove(PdfPrimitive item);
    public virtual bool Contains(int key);
    protected virtual PdfPrimitive GetContainedValue(int key);
    public sealed virtual IEnumerator`1<PdfPrimitive> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfASCII85DecodeFilterObject : PdfFilterObject {
    internal static string Name;
    internal static string ShortName;
    private static int bufferSize;
    private static long maxAllowedValue;
    private static long multiplier1;
    private static long multiplier2;
    private static long multiplier3;
    private static long multiplier4;
    private static byte endBracket;
    private static Byte[] endToken;
    internal Byte[] EodToken { get; }
    private static PdfASCII85DecodeFilterObject();
    private static bool IsSpaceSymbol(byte symbol);
    private static void DecodeBuffer(List`1<byte> result, Byte[] buffer, int count);
    internal virtual Byte[] get_EodToken();
    internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfASCIIHexDecodeFilterObject : PdfFilterObject {
    internal static string Name;
    internal static string ShortName;
    private static byte nullSymbol;
    private static byte horizontalTab;
    private static byte lineFeed;
    private static byte formFeed;
    private static byte carriageReturn;
    private static byte space;
    private static byte zero;
    private static byte one;
    private static byte two;
    private static byte three;
    private static byte four;
    private static byte five;
    private static byte six;
    private static byte seven;
    private static byte eight;
    private static byte nine;
    private static byte a;
    private static byte b;
    private static byte c;
    private static byte d;
    private static byte e;
    private static byte f;
    private static byte capitalA;
    private static byte capitalB;
    private static byte capitalC;
    private static byte capitalD;
    private static byte capitalE;
    private static byte capitalF;
    private static byte eod;
    private static Byte[] endToken;
    internal Byte[] EodToken { get; }
    private static PdfASCIIHexDecodeFilterObject();
    internal virtual Byte[] get_EodToken();
    internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfBinaryWriter : object {
    private static CultureInfo invariantCulture;
    private PdfStreamWriter streamWriter;
    public long Position { get; public set; }
    public Stream Stream { get; }
    public PdfBinaryWriter(Stream stream, int documentStreamOffset);
    public PdfBinaryWriter(Stream stream);
    private static PdfBinaryWriter();
    public long get_Position();
    public void set_Position(long value);
    public Stream get_Stream();
    public int GetStreamOffset();
    public void WriteSpace();
    public void WriteNewLine();
    public void Write(IDataContainer dataContainer);
    public void Write(Byte[] data);
    public void Write(byte b);
    public void Write(string s);
    public void Write(double value);
    public void Write(int value);
    public void Write(long value);
    public void WriteHexString(Byte[] data);
    public void CopyFromDocumentStream(PdfObjectStorage storage);
    public void WriteIndirectObject(int objectNumber, int generation, PdfPrimitive primitive, PdfPrimitiveWritingContext context);
}
[DebuggerDisplayAttribute("{Object}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfBooleanPrimitive : PdfValuePrimitiveContainer`1<bool> {
    public PdfBooleanPrimitive(bool obj);
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
    public virtual Nullable`1<bool> AsBool();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfCCITTFaxDecodeFilterObject : PdfFilterObject {
    internal static string Name;
    internal static string ShortName;
    private static int defaultColumns;
    private static string encodingSchemeDictionaryKey;
    private static string endOfLineDictionaryKey;
    private static string encodedByteAlignDictionaryKey;
    private static string columnsDictionaryKey;
    private static string rowsDictionaryKey;
    private static string endOfBlockDictionaryKey;
    private static string blackIs1DictionaryKey;
    private static string damagedRowsBeforeErrorDictionaryKey;
    private PdfCCITTFaxEncodingScheme encodingScheme;
    private int twoDimensionalLineCount;
    private bool endOfLine;
    private bool encodedByteAlign;
    private int columns;
    private int rows;
    private bool endOfBlock;
    private bool blackIs1;
    private int damagedRowsBeforeError;
    public PdfCCITTFaxEncodingScheme EncodingScheme { get; }
    public int TwoDimensionalLineCount { get; }
    public bool EndOfLine { get; }
    public bool EncodedByteAlign { get; }
    public int Columns { get; }
    public int Rows { get; }
    public bool EndOfBlock { get; }
    public bool BlackIs1 { get; }
    public int DamagedRowsBeforeError { get; }
    internal PdfCCITTFaxDecodeFilterObject(PdfDictionaryPrimitive parameters);
    public PdfCCITTFaxEncodingScheme get_EncodingScheme();
    public int get_TwoDimensionalLineCount();
    public bool get_EndOfLine();
    public bool get_EncodedByteAlign();
    public int get_Columns();
    public int get_Rows();
    public bool get_EndOfBlock();
    public bool get_BlackIs1();
    public int get_DamagedRowsBeforeError();
    internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfCCITTFaxDecoderObject : object {
    private static Dictionary`2<string, int> whiteRunLengths;
    private static Dictionary`2<string, int> blackRunLengths;
    private static Dictionary`2<string, int> commonRunLengths;
    private static PdfHuffmanTreeBranch whiteTree;
    private static PdfHuffmanTreeBranch blackTree;
    private Byte[] data;
    private int length;
    private bool blackIs1;
    private bool alignEncodedBytes;
    private int twoDimensionalLineCount;
    private int columns;
    private int size;
    private List`1<byte> result;
    private int lineSize;
    private Byte[] referenceLine;
    private Byte[] decodingLine;
    private int currentPosition;
    private byte currentByte;
    private int currentByteOffset;
    private bool isBlack;
    private int a0;
    private int a1;
    private int b1;
    private int b2;
    private bool Completed { get; }
    private static PdfCCITTFaxDecoderObject();
    private PdfCCITTFaxDecoderObject(PdfCCITTFaxDecodeFilterObject filter, Byte[] data);
    public static Byte[] Decode(PdfCCITTFaxDecodeFilterObject filter, Byte[] data);
    private static byte FillByte(byte b, int start, int end, bool black);
    private bool get_Completed();
    private void MoveNextByte();
    private bool ReadBit();
    private CodingMode ReadMode();
    private int FindRunningLengthPart(PdfHuffmanTreeBranch branch);
    private int FindRunningLength(PdfHuffmanTreeBranch branch);
    private int FindB(int startPosition, bool isWhite);
    private void NextLine();
    private void ReadEOL();
    private void FillDecodingLine(int a0, int a1, bool black);
    private void AccumulateResult();
    private bool DecodeGroup3Line();
    private int DecodeGroup4();
    private void DecodeGroup3();
    private void DecodeGroup3TwoDimensional();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfCommentPrimitive : PdfValuePrimitiveContainer`1<string> {
    public PdfCommentPrimitive(string obj);
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfContainerPrimitive`1 : PdfPrimitive {
    private static string timeZonePattern;
    private PdfObjectStorage collection;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfIndirectObjectIdentifier> <ContainerReference>k__BackingField;
    internal PdfObjectStorage Collection { get; }
    internal Nullable`1<PdfIndirectObjectIdentifier> ContainerReference { get; }
    protected PdfContainerPrimitive`1(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containerReference);
    private static bool IsDigit(char chr);
    private static int ConvertToDigit(char chr);
    private static int GetDateComponent(string str, int offset);
    private static int GetTimeComponent(string str, int offset, char delimiter);
    private static DateTimeOffset ParseDate(string str);
    internal PdfObjectStorage get_Collection();
    [CompilerGeneratedAttribute]
internal Nullable`1<PdfIndirectObjectIdentifier> get_ContainerReference();
    public PdfReferencePrimitive GetReference(TKey key);
    public PdfArrayPrimitive GetArray(TKey key);
    public PdfDictionaryPrimitive GetDictionary(TKey key);
    public PdfStreamPrimitive GetStream(TKey key);
    public Nullable`1<bool> GetBoolean(TKey key);
    public Nullable`1<double> GetDouble(TKey key);
    public Nullable`1<int> GetInteger(TKey key);
    public Byte[] GetBytes(TKey key);
    public string GetString(TKey key);
    public string GetTextString(TKey key);
    public string GetUTF8(TKey key);
    public T GetEnum(TKey key);
    public T GetIntegerToEnum(TKey key);
    public Nullable`1<T> GetIntegerToEnumOrNull(TKey key);
    public PdfNamePrimitive GetName(TKey key);
    public PdfRectangle GetRectangle(TKey key);
    public PdfColor GetColor(TKey key);
    public Nullable`1<DateTimeOffset> GetDate(TKey key);
    public PdfPrimitive GetObject(TKey key);
    protected abstract virtual PdfPrimitive GetContainedValue(TKey key);
    public abstract virtual bool Contains(TKey key);
    public PdfPrimitive GetValue(TKey key);
    protected void MarkAsChanged();
}
internal class DevExpress.Pdf.Native.DocumentSigning.PdfCrossReferenceStreamWriter : PdfCrossReferenceWriter {
    private IList`1<byte> data;
    public PdfCrossReferenceStreamWriter(PdfBinaryWriter writer, PdfObjectStorage collection, IList`1<XrefItem> pointers, PdfReferencePrimitive encryptionInfoReference, long prev);
    public virtual void WriteCrossReference();
    private void Write(int number, int w);
}
internal class DevExpress.Pdf.Native.DocumentSigning.PdfCrossReferenceTableWriter : PdfCrossReferenceWriter {
    private static CultureInfo invariantCulture;
    public PdfCrossReferenceTableWriter(PdfBinaryWriter writer, PdfObjectStorage collection, IList`1<XrefItem> pointers, PdfReferencePrimitive encryptionInfoReference, long prev);
    private static PdfCrossReferenceTableWriter();
    public virtual void WriteCrossReference();
    private void WriteReferencesSection(int firstNumber, List`1<string> references);
}
internal abstract class DevExpress.Pdf.Native.DocumentSigning.PdfCrossReferenceWriter : object {
    [CompilerGeneratedAttribute]
private PdfBinaryWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfObjectStorage <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XrefItem> <Pointers>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfReferencePrimitive <EncryptionInfoReference>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Prev>k__BackingField;
    protected PdfBinaryWriter Writer { get; }
    protected PdfObjectStorage Collection { get; }
    protected IList`1<XrefItem> Pointers { get; }
    protected PdfReferencePrimitive EncryptionInfoReference { get; }
    protected long Prev { get; }
    protected PdfCrossReferenceWriter(PdfBinaryWriter writer, PdfObjectStorage collection, IList`1<XrefItem> pointers, PdfReferencePrimitive encryptionInfoReference, long prev);
    public static void Write(PdfBinaryWriter writer, PdfObjectStorage collection, IList`1<XrefItem> pointers, PdfReferencePrimitive encryptionInfoReference, long prev);
    [CompilerGeneratedAttribute]
protected PdfBinaryWriter get_Writer();
    [CompilerGeneratedAttribute]
protected PdfObjectStorage get_Collection();
    [CompilerGeneratedAttribute]
protected IList`1<XrefItem> get_Pointers();
    [CompilerGeneratedAttribute]
protected PdfReferencePrimitive get_EncryptionInfoReference();
    [CompilerGeneratedAttribute]
protected long get_Prev();
    protected Dictionary`2<string, PdfPrimitive> PrepareTrailerDictionary(int size);
    public void Write();
    public abstract virtual void WriteCrossReference();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfCryptFilterObject : PdfFilterObject {
    internal static string Name;
    internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfDCTDecodeFilterObject : PdfFilterObject {
    internal static string Name;
    internal static string ShortName;
    private static string colorTransformDictionaryKey;
    private bool colorTransform;
    public bool ColorTransform { get; }
    internal PdfDCTDecodeFilterObject(PdfDictionaryPrimitive parameters);
    private static Byte[] RemoveLeadingSpaces(Byte[] data);
    public bool get_ColorTransform();
    internal virtual Byte[] Decode(Byte[] data);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfDictionaryBasedObject : PdfModelObject {
    [CompilerGeneratedAttribute]
private PdfDictionaryPrimitive <Primitive>k__BackingField;
    protected PdfDictionaryPrimitive Primitive { get; }
    public Nullable`1<PdfIndirectObjectIdentifier> ContainerReference { get; }
    protected PdfDictionaryBasedObject(PdfDictionaryPrimitive primitive);
    [CompilerGeneratedAttribute]
protected PdfDictionaryPrimitive get_Primitive();
    public Nullable`1<PdfIndirectObjectIdentifier> get_ContainerReference();
    protected T GetModelObject(string key, Func`2<PdfDictionaryPrimitive, T> objectFactory);
    protected void AddReference(string key, PdfIndirectObjectIdentifier reference);
}
[DebuggerDisplayAttribute("Dictionary, {objects}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfDictionaryPrimitive : PdfContainerPrimitive`1<string> {
    public static string DictionaryTypeKey;
    private IDictionary`2<string, PdfPrimitive> objects;
    public bool IsEmpty { get; }
    public PdfDictionaryPrimitive(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containerReference);
    public PdfDictionaryPrimitive(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containerReference, IDictionary`2<string, PdfPrimitive> objects);
    private static string FormatDate(Nullable`1<DateTimeOffset> value);
    protected static void WriteDictionary(PdfBinaryWriter writer, PdfPrimitiveWritingContext context, IEnumerable`1<KeyValuePair`2<string, PdfPrimitive>> dictionary);
    public bool get_IsEmpty();
    public virtual bool Contains(string key);
    protected virtual PdfPrimitive GetContainedValue(string key);
    public PdfDictionaryPrimitive GetOrCreateDictionary(string key);
    public PdfArrayPrimitive GetOrCreateArray(string key);
    public void Add(string key, PdfPrimitive value);
    public void Remove(string key);
    public void Add(string key, Nullable`1<int> value);
    public void Add(string key, Nullable`1<double> value);
    public void Add(string key, Nullable`1<bool> value);
    internal void Add(string key, IPdfObject obj);
    public void Add(string key, PdfIndirectObjectIdentifier reference);
    public void Add(string key, IList`1<PdfPrimitive> value);
    public void Add(string key, IList`1<double> value);
    public void Add(string key, IList`1<int> value);
    public void Add(string key, IList`1<bool> value);
    public void Add(string key, IPdfResources resources);
    public void AddString(string key, string value);
    public void AddASCIIString(string key, string value);
    public void AddName(string key, string name);
    public void Add(string key, Byte[] value);
    public void Add(string key, bool value);
    public void Add(string key, bool value, bool defaultValue);
    public void Add(string key, double number);
    public void Add(string key, PdfRectangle rectangle);
    public void Add(string key, double number, double defaultValue);
    public void Add(string key, int number);
    public void AddUnencryptedHexadecimalString(string key, Byte[] data);
    public void AddEnumName(string key, T value);
    public void AddDate(string key, Nullable`1<DateTimeOffset> value);
    public void AddRectangle(string key, PdfRectangle value);
    public void AddMatrix(string key, PdfTransformationMatrix value);
    public void Add(string key, int value, int defaultValue);
    public IList`1<PdfFilterObject> GetFilters(string key, string decodeParametersKey);
    public virtual PdfDictionaryPrimitive AsDictionary();
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, PdfPrimitive>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfDocumentCatalogObject : PdfDictionaryBasedObject {
    private static string pagesDictionaryKey;
    private static string acroFormDictionaryKey;
    private static PdfSignatureFlags signedDocumentFormFlags;
    private Guid DevExpress.Pdf.Native.IPdfDocumentCatalog.Id { get; }
    private PdfCompatibilityOptions DevExpress.Pdf.Native.IPdfDocumentCatalog.CompatibilityOptions { get; }
    public PdfPageListObject Pages { get; }
    public PdfInteractiveFormObject AcroForm { get; }
    public PdfLogicalStructure LogicalStructure { get; }
    public PdfDocumentCatalogObject(PdfIndirectObjectIdentifier reference, PdfObjectStorage collection);
    private sealed virtual override Guid DevExpress.Pdf.Native.IPdfDocumentCatalog.get_Id();
    private sealed virtual override PdfCompatibilityOptions DevExpress.Pdf.Native.IPdfDocumentCatalog.get_CompatibilityOptions();
    public PdfPageListObject get_Pages();
    public PdfInteractiveFormObject get_AcroForm();
    public sealed virtual PdfLogicalStructure get_LogicalStructure();
    public PdfInteractiveFormObject GetExistingOrCreateNewInteractiveForm();
    public PdfSignatureModelObject ApplySignature(PdfSignatureBuilder signature);
    private sealed virtual override IPdfResources DevExpress.Pdf.Native.IPdfDocumentCatalog.CreateResources(bool shouldBeWritten, bool alternativeFontNames);
    public PdfDictionaryPrimitive GetOrCreateDssDictionary();
    public void AddToDss(string signatureFieldName, ICrlClient crl, IOcspClient ocsp, ICertificateStoreProvider provider);
    public void AddToDss(string signatureFieldName, IList`1<Byte[]> certificates, IList`1<Byte[]> crls, IList`1<Byte[]> ocsp);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfDocumentObject : object {
    private PdfObjectStorage collection;
    [CompilerGeneratedAttribute]
private PdfDocumentCatalogObject <Catalog>k__BackingField;
    public PdfDocumentCatalogObject Catalog { get; }
    public PdfDocumentObject(Stream stream, string password);
    [CompilerGeneratedAttribute]
public PdfDocumentCatalogObject get_Catalog();
    public PdfSignatureContentInfo SaveDocument(Stream stream, bool failOnInvalidDocument, PdfSignatureBuilder signatureBuilder);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfDocumentStructure : object {
    private IDictionary`2<PdfIndirectObjectIdentifier, IPdfObjectContainer> structure;
    private PdfObjectStorage collection;
    [CompilerGeneratedAttribute]
private long <StartXRef>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfReferencePrimitive <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPrimitive <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfArrayPrimitive <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStreamXRef>k__BackingField;
    public long StartXRef { get; private set; }
    public PdfReferencePrimitive Root { get; public set; }
    public PdfPrimitive Info { get; public set; }
    public PdfArrayPrimitive ID { get; public set; }
    protected PdfObjectStorage Collection { get; }
    public bool IsStreamXRef { get; public set; }
    public PdfDocumentStructure(PdfObjectStorage collection);
    public static IPdfDocumentStructureBuilder CreateBuilder(PdfObjectStorage collection);
    [CompilerGeneratedAttribute]
public long get_StartXRef();
    [CompilerGeneratedAttribute]
private void set_StartXRef(long value);
    [CompilerGeneratedAttribute]
public PdfReferencePrimitive get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(PdfReferencePrimitive value);
    [CompilerGeneratedAttribute]
public PdfPrimitive get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(PdfPrimitive value);
    [CompilerGeneratedAttribute]
public virtual PdfArrayPrimitive get_ID();
    [CompilerGeneratedAttribute]
public virtual void set_ID(PdfArrayPrimitive value);
    protected PdfObjectStorage get_Collection();
    [CompilerGeneratedAttribute]
public bool get_IsStreamXRef();
    [CompilerGeneratedAttribute]
public void set_IsStreamXRef(bool value);
    public bool TryGetValue(PdfIndirectObjectIdentifier reference, IPdfObjectContainer& container);
    public bool Contains(PdfIndirectObjectIdentifier reference);
    public bool Remove(PdfIndirectObjectIdentifier reference);
    public sealed virtual IEnumerator`1<KeyValuePair`2<PdfIndirectObjectIdentifier, IPdfObjectContainer>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected void AddToStructure(PdfIndirectObjectIdentifier reference, IPdfObjectContainer container);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfDocumentStructureParser : BasicParser {
    private static Dictionary`2<string, PdfFileVersion> versionMapping;
    private static Byte[] trailer;
    private static Byte[] startxref;
    private static Byte[] xref;
    private static Byte[] eof;
    private static Byte[] versionHeader;
    private Stream documentStream;
    private PdfGetPasswordAction getPasswordAction;
    private long documentOffset;
    private PdfDocumentStructureParser(Stream documentStream, IDataContainer container, PdfGetPasswordAction getPasswordAction);
    private static PdfDocumentStructureParser();
    public static PdfObjectStorage ReadCollection(Stream documentStream, PdfGetPasswordAction getPasswordAction);
    private string FindDocumentVersion();
    private PdfObjectStorage CreateObjectStorage(PdfFileVersion version);
    private PdfObjectStorage ReadColleciton();
    private void ExtractTrailerInfo(IPdfDocumentStructureBuilder currentVersion, PdfDictionaryPrimitive trailerDictionary);
    private void ExtractEncryptionInfo(PdfObjectStorage collection, PdfArrayPrimitive id, PdfDictionaryPrimitive trailerDictionary);
    private PdfObjectStorage ReadCorruptedDocument(PdfFileVersion version);
    private PdfObjectStorage ReadCorruptedDocument(PdfFileVersion version, Action`2<PdfObjectStorage, IPdfDocumentStructureBuilder> parseCorruptedObject);
    private void ReadCorruptedObjectSlow(PdfObjectStorage collection, IPdfDocumentStructureBuilder currentVersion);
    private void ReadCorruptedObjectFast(PdfObjectStorage collection, IPdfDocumentStructureBuilder currentVersion);
    private PdfDictionaryPrimitive ReadCorruptedTrailer(PdfObjectStorage collection, IPdfDocumentStructureBuilder documentStructure, long startxrefPosition);
    protected bool FindEof();
    private PdfDictionaryPrimitive ReadTrailer(PdfObjectStorage objects, IPdfDocumentStructureBuilder documentStructure, long offset);
    private void ReadStreamXRef(PdfObjectStorage objects, IPdfDocumentStructureBuilder documentStructure, PdfStreamPrimitive streamPrimitive);
    private long GetLastEOF();
    private long GetLastXRefOffset();
    private string ReadString();
    private int ReadInteger(int digitCount);
    private bool FindToken(IList`1<byte> token);
    private bool FindSequenceBackward(IList`1<byte> sequence);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfDocumentWriter : object {
    private bool resetGeneration;
    private PdfSignatureModelObject signature;
    [CompilerGeneratedAttribute]
private PdfEncryptionInfoObject <EncryptionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfBinaryWriter <Writer>k__BackingField;
    protected PdfEncryptionInfoObject EncryptionInfo { get; }
    protected PdfBinaryWriter Writer { get; }
    protected PdfDocumentWriter(PdfEncryptionInfoObject encryptionInfo, Stream stream, bool resetGeneration, PdfSignatureModelObject signature);
    public static PdfSignatureContentInfo WriteIncremental(Stream stream, PdfObjectStorage collection, PdfSignatureModelObject signature);
    public static PdfSignatureContentInfo Rewrite(Stream stream, PdfObjectStorage collection, PdfEncryptionInfoObject newEncryption, PdfSignatureModelObject signature);
    [CompilerGeneratedAttribute]
protected PdfEncryptionInfoObject get_EncryptionInfo();
    [CompilerGeneratedAttribute]
protected PdfBinaryWriter get_Writer();
    protected abstract virtual void PerformWrite(PdfObjectStorage collection);
    private PdfSignatureContentInfo Write(PdfObjectStorage collection);
    protected XrefItem Write(PdfIndirectObjectIdentifier reference, PdfPrimitive primitive);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfDssBuilder : object {
    private static string dssCertificatesKey;
    private static string dssCrlsKey;
    private static string dssOcspsKey;
    private static string vriCertificateKey;
    private static string vriCrlKey;
    private static string vriOcspKey;
    private PdfDocumentCatalogObject catalog;
    private PdfObjectStorage Collection { get; }
    public PdfDssBuilder(PdfDocumentCatalogObject catalog);
    private static char GetHex(int b);
    private static void RemoveOldData(string dssKey, PdfDictionaryPrimitive dss, string vriKey, PdfDictionaryPrimitive oldVri);
    private PdfObjectStorage get_Collection();
    public void AddToDss(string signatureFieldName, ICrlClient crl, IOcspClient ocsp, ICertificateStoreProvider provider);
    public void AddToDss(string signatureFieldName, IList`1<Byte[]> certs, IList`1<Byte[]> crls, IList`1<Byte[]> ocsp);
    private PdfSignatureFormFieldObject GetSignatureField(string signatureFieldName);
    private IList`1<X509Certificate> BuildCertificateChain(IList`1<X509Certificate> certificates, ICertificateStoreProvider provider);
    private void AppendData(IList`1<Byte[]> data, string dssKey, PdfDictionaryPrimitive dss, string vriKey, PdfDictionaryPrimitive vri);
    [CompilerGeneratedAttribute]
private PdfReferencePrimitive <AppendData>b__16_0(Byte[] c);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfEditableDocumentStructure : PdfDocumentStructure {
    private PdfArrayPrimitive id;
    private Nullable`1<Guid> collectionId;
    public PdfArrayPrimitive ID { get; public set; }
    public Guid CollectionID { get; }
    public PdfEditableDocumentStructure(PdfObjectStorage collection);
    public virtual PdfArrayPrimitive get_ID();
    public virtual void set_ID(PdfArrayPrimitive value);
    public Guid get_CollectionID();
    public void Add(PdfIndirectObjectIdentifier reference, IPdfObjectContainer container);
    public void Add(PdfIndirectObjectIdentifier reference, PdfPrimitive indirectObject);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfEncryptionInfoObject : object {
    private static int hashLength;
    private static int validationSaltLength;
    private static int keySaltLength;
    private static int keySaltPosition;
    private static int aesV3HashLength;
    private static int passwordLimit;
    private static int encryptedPermissionsLength;
    private static int initializationVectorLength;
    private static int defaultKeyLength;
    private static string filterNameDictionaryKey;
    private static string algorithmTypeDictionaryKey;
    private static string cryptFiltersDictionaryKey;
    private static string streamFilterDictionaryKey;
    private static string stringFilterDictionaryKey;
    private static string securityHandlerRevisionDictionaryKey;
    private static string ownerPasswordHashDictionaryKey;
    private static string userPasswordHashDictionaryKey;
    private static string ownerPasswordEncryptedKeyDictionaryKey;
    private static string userPasswordEncryptedKeyDictionaryKey;
    private static string encryptedPermissionsDictionaryKey;
    private static string encryptionFlagsDictionaryKey;
    private static string encryptMetadataDictionaryKey;
    private static string cryptFilterMethodDictionaryKey;
    private static string keyLengthDictionaryKey;
    private static string standardFilterName;
    private static string identityCryptFilterName;
    private static string standardCryptFilterName;
    private static Byte[] passwordPadding;
    private EncryptionAlgorithm algorithm;
    private int securityHandlerRevision;
    private Byte[] ownerPasswordHash;
    private Byte[] ownerValidationSalt;
    private Byte[] ownerKeySalt;
    private Byte[] userPasswordHash;
    private Byte[] userValidationSalt;
    private Byte[] userKeySalt;
    private bool encryptMetadata;
    private Byte[][] documentID;
    private long encryptionFlags;
    private PdfDocumentPermissionFlags permissionFlags;
    private int extendedKeyLength;
    private int actualKeyLength;
    private int keyLength;
    private string streamFilterName;
    private string stringFilterName;
    private string embeddedFileFilterName;
    private Byte[] ownerPasswordEncryptedKey;
    private Byte[] userPasswordEncryptedKey;
    private Byte[] encryptedPermissions;
    private CryptMethod cryptMethod;
    private Byte[] encryptionKey;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfIndirectObjectIdentifier> <EncryptionObjectIdentifier>k__BackingField;
    public bool EncryptMetadata { get; }
    public Nullable`1<PdfIndirectObjectIdentifier> EncryptionObjectIdentifier { get; }
    internal PdfDocumentPermissionFlags PermissionFlags { get; }
    private Byte[] PermissionsToEncrypt { get; }
    [SecuritySafeCriticalAttribute]
private PdfEncryptionInfoObject(PdfDictionaryPrimitive dictionary, Byte[][] documentID, PdfGetPasswordAction getPasswordAction);
    public PdfEncryptionInfoObject(Byte[][] documentID, PdfEncryptionParameters encryptionParameters);
    private static PdfEncryptionInfoObject();
    private static Byte[] GenerateRandomData(int length);
    private static Byte[] EncryptAesData(CipherMode mode, PaddingMode padding, Byte[] key, Byte[] initializationVector, Byte[] data);
    private static Byte[] DecryptAesData(CipherMode mode, PaddingMode padding, Byte[] key, Byte[] initializationVector, Byte[] data, int dataPosition);
    private static bool CheckFilterExistence(PdfDictionaryPrimitive filterDescriptions, string filterName);
    private static Byte[] PadOrTruncatePassword(IList`1<byte> passwordString);
    private static Byte[] PadOrTruncatePassword(string passwordString);
    private static Byte[] TruncatePassword(string passwordString);
    public bool get_EncryptMetadata();
    [CompilerGeneratedAttribute]
public Nullable`1<PdfIndirectObjectIdentifier> get_EncryptionObjectIdentifier();
    internal PdfDocumentPermissionFlags get_PermissionFlags();
    private Byte[] get_PermissionsToEncrypt();
    public static PdfEncryptionInfoObject Parse(PdfDictionaryPrimitive dictionary, Byte[][] documentID, PdfGetPasswordAction getPasswordAction);
    private Byte[] ValidateHash(Byte[] hash);
    private void InitializeCryptFilter(PdfDictionaryPrimitive dictionary);
    private Byte[] XorKey(Byte[] key, int value);
    private Byte[] ComputeOwnerEncryptionKey(Byte[] ownerPasswordString);
    private Byte[] ComputeUserPasswordHash(Byte[] userPasswordString);
    private bool CheckPassword(Byte[] expectedHash, Byte[] actualHash);
    private Byte[] ComputeHash(Byte[] passwordString, Byte[] data, Byte[] userKey);
    private Byte[] DecryptAesData(CipherMode mode, Byte[] key, Byte[] data);
    private bool CheckPermissions();
    private bool CheckUserPassword(Byte[] passwordString);
    private Byte[] ComputeActualEncryptionKey(int number, int generation);
    private Byte[] DecryptAesData(Byte[] key, Byte[] data);
    public Byte[] EncryptData(Byte[] data, int number, int generation);
    public Byte[] DecryptData(Byte[] data, int number, int generation);
    protected internal PdfDictionaryPrimitive CreatePrimitive(PdfObjectStorage objects);
}
internal class DevExpress.Pdf.Native.DocumentSigning.PdfExportResources : object {
    private static string graphicsStateParametersDictionaryName;
    private static string colorSpacesDictionaryName;
    private static string patternsDictionaryName;
    private static string shadingsDictionaryName;
    private static string xObjectsDictionaryName;
    private static string fontsDictionaryName;
    private static string propertiesDictionaryName;
    private PdfDocumentCatalogObject catalog;
    private ResourceDictionary graphicsStateParameters;
    private ResourceDictionary colorSpaces;
    private ResourceDictionary patterns;
    private ResourceDictionary shadings;
    private ResourceDictionary xObjects;
    private ResourceDictionary fonts;
    private ResourceDictionary properties;
    public IPdfDocumentCatalog DocumentCatalog { get; }
    public PdfObjectStorage Collection { get; }
    public PdfExportResources(PdfDocumentCatalogObject catalog);
    public sealed virtual IPdfDocumentCatalog get_DocumentCatalog();
    public PdfObjectStorage get_Collection();
    public sealed virtual string AddColorSpace(PdfColorSpace colorSpace);
    public sealed virtual string AddFont(PdfFont font);
    public sealed virtual string AddGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    public sealed virtual string AddPattern(PdfPattern pattern);
    public sealed virtual string AddShading(PdfShading shading);
    public sealed virtual string AddXObject(PdfXObject obj);
    public sealed virtual void AddNamedXObject(string name, PdfXObject obj);
    public sealed virtual string AddProperties(PdfProperties customProperties);
    public sealed virtual PdfResources AsResources();
    public sealed virtual PdfObject ToWritableObject();
    private void WriteResourceDictionary(PdfDictionaryPrimitive destinationDictionary, string key, ResourceDictionary dictionary, PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containerReference);
    public sealed virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfFilterObject : object {
    internal Byte[] EodToken { get; }
    internal static IDataContainer DecorateContainer(IDataContainer container, IList`1<PdfFilterObject> filters);
    internal static PdfFilterObject Create(string name, PdfDictionaryPrimitive parameters);
    internal virtual Byte[] get_EodToken();
    internal abstract virtual Byte[] Decode(Byte[] data);
    internal virtual Stream DecorateStream(Stream stream);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfFlateDecodeFilterObject : PdfFlateLZWDecodeFilterObject {
    internal static string Name;
    internal static string ShortName;
    internal PdfFlateDecodeFilterObject(PdfDictionaryPrimitive parameters);
    internal PdfFlateDecodeFilterObject(PdfFlateLZWFilterPredictor predictor, int colors, int bitsPerComponent, int columns);
    protected virtual Byte[] PerformDecode(Byte[] data);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfFlateLZWDecodeFilterObject : PdfFilterObject {
    private static PdfFlateLZWFilterPredictor defaultPredictor;
    private static int defaultColors;
    private static int defaultBitsPerComponent;
    private static int defaultColumns;
    private static string predictorDictionaryKey;
    private static string colorsDictionaryKey;
    private static string bitsPerComponentDictionaryKey;
    private static string columnsDictionaryKey;
    private PdfFlateLZWFilterPredictor predictor;
    private int colors;
    private int bitsPerComponent;
    private int columns;
    public PdfFlateLZWFilterPredictor Predictor { get; }
    public int Colors { get; }
    public int BitsPerComponent { get; }
    public int Columns { get; }
    protected PdfFlateLZWDecodeFilterObject(string filterName, PdfFlateLZWFilterPredictor predictor, int colors, int bitsPerComponent, int columns);
    protected PdfFlateLZWDecodeFilterObject(string filterName, PdfDictionaryPrimitive parameters);
    public PdfFlateLZWFilterPredictor get_Predictor();
    public int get_Colors();
    public int get_BitsPerComponent();
    public int get_Columns();
    internal virtual Byte[] Decode(Byte[] data);
    protected abstract virtual Byte[] PerformDecode(Byte[] data);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfFlateLZWDecodeFilterPredictorObject : object {
    private int bytesPerPixel;
    private int rowLength;
    protected int BytesPerPixel { get; }
    protected int RowLength { get; }
    protected int ActualRowLength { get; }
    protected PdfFlateLZWDecodeFilterPredictorObject(PdfFlateLZWDecodeFilterObject filter);
    public static Byte[] Decode(Byte[] data, PdfFlateLZWDecodeFilterObject filter);
    protected int get_BytesPerPixel();
    protected int get_RowLength();
    protected abstract virtual int get_ActualRowLength();
    protected int CalcRowCount(int dataLength);
    protected abstract virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfFreeObjectNew : object {
    public PdfFreeObjectNew(int number, int generation);
    public sealed virtual PdfPrimitive GetIndirectObject(PdfObjectStorage collection, PdfIndirectObjectParsingChain currentProcessedReferences);
    public sealed virtual bool Validate(PdfObjectStorage collection, PdfIndirectObjectIdentifier id);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfHexadecimalStringPrimitive : PdfStringPrimitive {
    public PdfHexadecimalStringPrimitive(Byte[] data);
    public PdfHexadecimalStringPrimitive(PdfPrimitiveParsingContext parsingContext, IDataContainer dataContainer);
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfIndirectObject`1 : object {
    [CompilerGeneratedAttribute]
private PdfIndirectObjectIdentifier <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Primitive>k__BackingField;
    public PdfIndirectObjectIdentifier Reference { get; }
    public T Primitive { get; }
    public PdfIndirectObject`1(PdfIndirectObjectIdentifier reference, T primitive);
    [CompilerGeneratedAttribute]
public PdfIndirectObjectIdentifier get_Reference();
    [CompilerGeneratedAttribute]
public T get_Primitive();
    public PdfPrimitive CreateReference(PdfObjectStorage collection);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfIndirectObjectContainer : object {
    private PdfPrimitive indirectObject;
    public PdfIndirectObjectContainer(PdfPrimitive indirectObject);
    public sealed virtual PdfPrimitive GetIndirectObject(PdfObjectStorage collection, PdfIndirectObjectParsingChain currentProcessedReferences);
    public sealed virtual bool Validate(PdfObjectStorage collection, PdfIndirectObjectIdentifier id);
}
[DebuggerDisplayAttribute("[{ObjectNumber}, {Generation}]")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfIndirectObjectIdentifier : ValueType {
    [CompilerGeneratedAttribute]
private int <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    public int ObjectNumber { get; }
    public int Generation { get; }
    public PdfIndirectObjectIdentifier(int objectNumber, int generation);
    [CompilerGeneratedAttribute]
public int get_ObjectNumber();
    [CompilerGeneratedAttribute]
public int get_Generation();
    public sealed virtual bool Equals(PdfIndirectObjectIdentifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfIndirectObjectParsingChain : object {
    [CompilerGeneratedAttribute]
private static PdfIndirectObjectParsingChain <Empty>k__BackingField;
    private PdfIndirectObjectParsingChain parent;
    private Nullable`1<PdfIndirectObjectIdentifier> reference;
    public static PdfIndirectObjectParsingChain Empty { get; }
    private PdfIndirectObjectParsingChain(PdfIndirectObjectParsingChain parent, Nullable`1<PdfIndirectObjectIdentifier> reference);
    public PdfIndirectObjectParsingChain(Nullable`1<PdfIndirectObjectIdentifier> reference);
    private static PdfIndirectObjectParsingChain();
    [CompilerGeneratedAttribute]
public static PdfIndirectObjectParsingChain get_Empty();
    public bool Contains(PdfIndirectObjectIdentifier reference);
    public PdfIndirectObjectParsingChain Append(PdfIndirectObjectIdentifier reference);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfIndirectObjectPointer : object {
    private long streamOffset;
    public PdfIndirectObjectPointer(long streamOffset);
    public sealed virtual PdfPrimitive GetIndirectObject(PdfObjectStorage collection, PdfIndirectObjectParsingChain currentProcessedReferences);
    public sealed virtual bool Validate(PdfObjectStorage collection, PdfIndirectObjectIdentifier id);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfInteractiveFormFieldObject : PdfDictionaryBasedObject {
    private static string fieldNameDictionaryKey;
    private static string fieldTypeDictionaryKey;
    private PdfInteractiveFormFieldObject parent;
    public string Name { get; }
    public PdfInteractiveFormFieldObject Parent { get; }
    public IReadOnlyList`1<PdfInteractiveFormFieldObject> Kids { get; }
    public IReadOnlyList`1<PdfWidgetAnnotationObject> Widgets { get; }
    public string FullName { get; }
    protected string Type { get; }
    public PdfPrimitive Value { get; public set; }
    protected PdfInteractiveFormFieldObject(PdfDictionaryPrimitive primitive, PdfInteractiveFormFieldObject parent);
    protected PdfInteractiveFormFieldObject(PdfDictionaryPrimitive primitive, string name, PdfInteractiveFormFieldObject parent);
    public static PdfInteractiveFormFieldObject Parse(PdfDictionaryPrimitive primitive, PdfInteractiveFormFieldObject parent);
    public string get_Name();
    public PdfInteractiveFormFieldObject get_Parent();
    public IReadOnlyList`1<PdfInteractiveFormFieldObject> get_Kids();
    public IReadOnlyList`1<PdfWidgetAnnotationObject> get_Widgets();
    public string get_FullName();
    protected virtual string get_Type();
    public PdfPrimitive get_Value();
    public void set_Value(PdfPrimitive value);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfInteractiveFormFieldsList : ModelObjectList`1<PdfInteractiveFormFieldObject> {
    private PdfInteractiveFormFieldObject parent;
    public PdfInteractiveFormFieldsList(PdfArrayPrimitive primitive, PdfInteractiveFormFieldObject parent);
    protected virtual PdfInteractiveFormFieldObject CreateModelObject(PdfPrimitive primitive);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfInteractiveFormObject : PdfDictionaryBasedObject {
    private static string fieldsKey;
    private static string needAppearancesKey;
    private static string signatureFlagsKey;
    public bool NeedAppearances { get; internal set; }
    public PdfSignatureFlags SignatureFlags { get; internal set; }
    public IReadOnlyList`1<PdfInteractiveFormFieldObject> Fields { get; }
    internal PdfInteractiveFormObject(PdfDictionaryPrimitive dictionary);
    internal static Tuple`2<PdfInteractiveFormObject, PdfIndirectObjectIdentifier> Create(PdfObjectStorage collection);
    public static void ThrowFormFieldNotFoundException(string formFieldName);
    public static void ValidateSignatureFormField(PdfInteractiveFormFieldObject formFieldObject, string formFieldName);
    public bool get_NeedAppearances();
    internal void set_NeedAppearances(bool value);
    public PdfSignatureFlags get_SignatureFlags();
    internal void set_SignatureFlags(PdfSignatureFlags value);
    public IReadOnlyList`1<PdfInteractiveFormFieldObject> get_Fields();
    public void AddInteractiveFormField(PdfIndirectObjectIdentifier reference);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.DocumentSigning.PdfInteractiveFormObject/<GetSignatureFormFields>d__16")]
private IEnumerable`1<PdfSignatureFormFieldObject> GetSignatureFormFields();
    public IList`1<PdfSignatureInfo> GetSignatureInfo();
    public IList`1<string> GetSignatureFieldNames(bool emptyFieldsOnly);
    public void RemoveSignature(string signatureName);
    public PdfInteractiveFormFieldObject FindFormField(string formFieldName);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfJBIG2DecodeFilterObject : PdfFilterObject {
    private static string globalSegmentsDictionaryKey;
    internal static string Name;
    private PdfJBIG2GlobalSegments globalSegments;
    public PdfJBIG2GlobalSegments GlobalSegments { get; }
    internal PdfJBIG2DecodeFilterObject(PdfDictionaryPrimitive parameters);
    public PdfJBIG2GlobalSegments get_GlobalSegments();
    internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfJPXDecodeFilterObject : PdfFilterObject {
    internal static string Name;
    internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfLiteralStringPrimitive : PdfStringPrimitive {
    public PdfLiteralStringPrimitive(string data);
    public PdfLiteralStringPrimitive(PdfPrimitiveParsingContext parsingContext, IDataContainer dataContainer);
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfLZWDecodeFilterObject : PdfFlateLZWDecodeFilterObject {
    internal static string Name;
    internal static string ShortName;
    private static int defaultEarlyChange;
    private static string earlyChangeDictionaryKey;
    private bool earlyChange;
    public bool EarlyChange { get; }
    internal PdfLZWDecodeFilterObject(PdfDictionaryPrimitive parameters);
    public bool get_EarlyChange();
    protected virtual Byte[] PerformDecode(Byte[] data);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfModelObject : object {
    [CompilerGeneratedAttribute]
private PdfObjectStorage <Collection>k__BackingField;
    public PdfObjectStorage Collection { get; }
    protected PdfModelObject(PdfObjectStorage collection);
    [CompilerGeneratedAttribute]
public PdfObjectStorage get_Collection();
}
[DebuggerDisplayAttribute("{DictKey}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfNamePrimitive : PdfValuePrimitiveContainer`1<IDataContainer> {
    [CompilerGeneratedAttribute]
private string <DictKey>k__BackingField;
    public string DictKey { get; }
    public PdfNamePrimitive(string dictKey);
    public PdfNamePrimitive(IDataContainer obj, string dictKey);
    private static void ConvertChar(List`1<byte> bytes, char c);
    public static Byte[] ToByteArray(string name);
    [CompilerGeneratedAttribute]
public string get_DictKey();
    public virtual string AsString();
    public virtual string AsDocString();
    public virtual string AsTextString();
    public virtual Nullable`1<bool> AsBool();
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
[DebuggerDisplayAttribute("Null")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfNullPrimitive : PdfPrimitive {
    [CompilerGeneratedAttribute]
private static PdfNullPrimitive <Instance>k__BackingField;
    public static PdfNullPrimitive Instance { get; }
    private static PdfNullPrimitive();
    [CompilerGeneratedAttribute]
public static PdfNullPrimitive get_Instance();
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
[DebuggerDisplayAttribute("{Object}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfNumberPrimitive : PdfValuePrimitiveContainer`1<double> {
    private bool IsInteger { get; }
    public PdfNumberPrimitive(double obj);
    private bool get_IsInteger();
    public virtual Nullable`1<bool> AsBool();
    public virtual Nullable`1<int> AsInt();
    public virtual Nullable`1<double> AsDouble();
    public virtual string AsString();
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfObjectStorage : object {
    private IList`1<PdfDocumentStructure> documentStructure;
    private Dictionary`2<PdfIndirectObjectIdentifier, PdfPrimitive> primitiveCache;
    private Dictionary`2<PdfIndirectObjectIdentifier, PdfObjStream> objectStreamCache;
    private Stream documentStream;
    private PdfEditableDocumentStructure editableDocumentStructure;
    [CompilerGeneratedAttribute]
private long <DocumentStreamOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFileVersion <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfEncryptionInfoObject <Encryption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XrefCorrupted>k__BackingField;
    public long DocumentStreamOffset { get; public set; }
    public PdfFileVersion FileVersion { get; public set; }
    public int MaxObjectNumber { get; public set; }
    public Stream Stream { get; }
    public int MaxVersion { get; }
    public int Version { get; public set; }
    public PdfEncryptionInfoObject Encryption { get; public set; }
    public bool XrefCorrupted { get; public set; }
    public PdfEditableDocumentStructure EditableDocumentStructure { get; }
    public PdfObjectStorage(Stream documentStream);
    [CompilerGeneratedAttribute]
public long get_DocumentStreamOffset();
    [CompilerGeneratedAttribute]
public void set_DocumentStreamOffset(long value);
    [CompilerGeneratedAttribute]
public PdfFileVersion get_FileVersion();
    [CompilerGeneratedAttribute]
public void set_FileVersion(PdfFileVersion value);
    [CompilerGeneratedAttribute]
public int get_MaxObjectNumber();
    [CompilerGeneratedAttribute]
public void set_MaxObjectNumber(int value);
    public Stream get_Stream();
    public int get_MaxVersion();
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public PdfEncryptionInfoObject get_Encryption();
    [CompilerGeneratedAttribute]
public void set_Encryption(PdfEncryptionInfoObject value);
    [CompilerGeneratedAttribute]
public bool get_XrefCorrupted();
    [CompilerGeneratedAttribute]
public void set_XrefCorrupted(bool value);
    public PdfEditableDocumentStructure get_EditableDocumentStructure();
    public PdfObjStream GetObjectStream(PdfIndirectObjectIdentifier reference);
    public void RemoveIndirectObject(PdfIndirectObjectIdentifier reference);
    public PdfIndirectObject`1<PdfDictionaryPrimitive> CreateIndirectDictionary();
    public PdfIndirectObjectIdentifier CreateIndirectArray(PdfPrimitive[] content);
    public PdfIndirectObject`1<PdfArrayPrimitive> CreateIndirectArray();
    public PdfIndirectObjectIdentifier AddIndirectStream(Byte[] data);
    public PdfIndirectObject`1<PdfStreamPrimitive> AddIndirectStream(IDictionary`2<string, PdfPrimitive> streamDictionary, Byte[] data);
    internal PdfIndirectObjectIdentifier AddIndirectObject(IPdfObject obj);
    public PdfIndirectObjectIdentifier AddIndirectObject(PdfPrimitive primitive);
    public PdfDocumentStructure GetStructure();
    public PdfDocumentStructure GetLastNonEditableStructure();
    public PdfPrimitive GetIndirectPrimitive(PdfIndirectObjectIdentifier reference);
    public PdfPrimitive GetIndirectPrimitive(PdfIndirectObjectIdentifier reference, PdfIndirectObjectParsingChain currentProcessedReferences);
    public void AddVersion(PdfDocumentStructure structure);
    public void AddVersionInReverseOrder(PdfDocumentStructure structure);
    private IPdfObjectContainer GetContainer(PdfIndirectObjectIdentifier reference);
    public void VerifyEditablePrimitive(PdfIndirectObjectIdentifier reference);
    public bool ValidateXref();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.DocumentSigning.PdfObjectStorage/<GetEnumerator>d__54")]
public sealed virtual IEnumerator`1<PdfPrimitiveContainer> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private PdfPrimitive GetIndirectObject(PdfIndirectObjectIdentifier reference, PdfIndirectObjectParsingChain currentProcessedReferences);
    private void AddIndirectObject(PdfIndirectObjectIdentifier reference, PdfPrimitive primitive);
    private PdfIndirectObjectIdentifier CreateNewObjectReference();
    private int GetNextObjectNumber();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfObjectStreamPointer : object {
    private PdfIndirectObjectIdentifier streamReference;
    private int objectIndex;
    public PdfObjectStreamPointer(PdfIndirectObjectIdentifier streamReference, int objectIndex);
    public sealed virtual PdfPrimitive GetIndirectObject(PdfObjectStorage collection, PdfIndirectObjectParsingChain currentProcessedReferences);
    public sealed virtual bool Validate(PdfObjectStorage collection, PdfIndirectObjectIdentifier id);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfObjStream : object {
    private IList`1<PdfPrimitiveContainer> objects;
    public int Count { get; }
    public PdfPrimitiveContainer Item { get; }
    private PdfObjStream(IList`1<PdfPrimitiveContainer> objects);
    public static PdfObjStream Create(PdfObjectStorage collection, PdfStreamPrimitive stream);
    public sealed virtual int get_Count();
    public sealed virtual PdfPrimitiveContainer get_Item(int index);
    public sealed virtual IEnumerator`1<PdfPrimitiveContainer> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfPageListObject : object {
    private IList`1<PdfDictionaryPrimitive> pages;
    public int Count { get; }
    public PdfPageObject Item { get; }
    private PdfPageListObject(IList`1<PdfDictionaryPrimitive> pages);
    public static PdfPageListObject Parse(PdfDictionaryPrimitive primitive);
    public int get_Count();
    public PdfPageObject get_Item(int index);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfPageObject : PdfDictionaryBasedObject {
    private static string AnnotsDictionaryKey;
    public PdfIndirectObjectIdentifier Reference { get; }
    internal PdfPageObject(PdfDictionaryPrimitive primitive);
    public PdfIndirectObjectIdentifier get_Reference();
    internal void AddAnnotation(PdfIndirectObjectIdentifier reference);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfPngPredictorObject : PdfFlateLZWDecodeFilterPredictorObject {
    protected int ActualRowLength { get; }
    public PdfPngPredictorObject(PdfFlateLZWDecodeFilterObject filter);
    protected virtual int get_ActualRowLength();
    protected virtual Byte[] Decode(Byte[] data);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfPrimitive : object {
    public PdfPrimitive Resolve(PdfObjectStorage collection);
    public Byte[] AsBytes();
    public virtual PdfPrimitive Resolve(PdfObjectStorage collection, PdfIndirectObjectParsingChain currentProcessedReferences);
    public virtual string AsString();
    public virtual string AsTextString();
    public virtual string AsUTF8();
    public virtual string AsDocString();
    public virtual Nullable`1<double> AsDouble();
    public virtual Nullable`1<int> AsInt();
    public virtual Byte[] AsBytes(bool decrypt);
    public virtual PdfArrayPrimitive AsArray();
    public virtual Nullable`1<bool> AsBool();
    public T AsEnum();
    public virtual PdfDictionaryPrimitive AsDictionary();
    public abstract virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
[DebuggerDisplayAttribute("{Reference}, {Primitive}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfPrimitiveContainer : object {
    [CompilerGeneratedAttribute]
private PdfIndirectObjectIdentifier <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPrimitive <Primitive>k__BackingField;
    public PdfIndirectObjectIdentifier Reference { get; }
    public PdfPrimitive Primitive { get; }
    public PdfPrimitiveContainer(PdfIndirectObjectIdentifier reference, PdfPrimitive primitiveObject);
    [CompilerGeneratedAttribute]
public PdfIndirectObjectIdentifier get_Reference();
    [CompilerGeneratedAttribute]
public PdfPrimitive get_Primitive();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfPrimitiveParser : BasicParser {
    private static byte octalDigitEnd;
    private static byte horizontalTab;
    private static byte smallT;
    private static byte smallN;
    private static byte smallF;
    private static byte numberSign;
    private static string streamDictionaryLengthKey;
    private PdfObjectStorage collection;
    private PdfIndirectObjectParsingChain currentProcessedReferences;
    protected PdfPrimitiveParser(PdfObjectStorage collection, IDataContainer dataContainer);
    protected PdfPrimitiveParser(PdfObjectStorage collection, IDataContainer dataContainer, PdfIndirectObjectParsingChain currentProcessedReferences);
    public static IList`1<PdfPrimitiveContainer> ParseObjectStream(PdfObjectStorage collection, IDataContainer dataContainer, int first, int count);
    public static T ParsePrimitive(PdfObjectStorage collection, Stream stream, long streamOffset);
    public static T ParseIndirectObject(PdfObjectStorage collection, Stream stream, long streamOffset);
    public static long ParseSkipIndirectObject(PdfObjectStorage collection, Stream stream, long streamOffset);
    public static PdfPrimitiveContainer ParseIndirectObject(PdfObjectStorage collection, Stream stream, long streamOffset, PdfIndirectObjectParsingChain currentProcessedReferences);
    public static int ExpectIndirectObject(PdfObjectStorage collection, Stream stream, long streamOffset);
    protected static bool IsOctalDigitSymbol(byte symbol);
    public PdfPrimitiveContainer ReadIndirectObject();
    private PdfPrimitive ParseNull();
    protected PdfPrimitive ReadObject(PdfPrimitiveParsingContext context);
    protected virtual PdfPrimitive ParseNumeric();
    private void SkipLineFeed();
    private PdfPrimitive ParseLiteralString(PdfPrimitiveParsingContext context);
    private PdfPrimitive ReadHexadecimalString(PdfPrimitiveParsingContext context);
    private PdfPrimitive ReadDictionaryOrStream(PdfPrimitiveParsingContext context);
    private int FindEndstreamOrEndobj();
    private PdfPrimitive ParseArray(PdfPrimitiveParsingContext context);
    private PdfPrimitive ParseName();
    private PdfPrimitive ParseBoolean();
    private void SkipStreamLeadingWhiteSpace();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfPrimitiveParsingContext : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<PdfIndirectObjectIdentifier> <ObjectId>k__BackingField;
    private PdfEncryptionInfoObject encryptionInfo;
    public Nullable`1<PdfIndirectObjectIdentifier> ObjectId { get; }
    public PdfPrimitiveParsingContext(PdfEncryptionInfoObject encryptionInfo, int objectNumber, int generation);
    public PdfPrimitiveParsingContext(PdfEncryptionInfoObject encryptionInfo, PdfIndirectObjectIdentifier id);
    [CompilerGeneratedAttribute]
public Nullable`1<PdfIndirectObjectIdentifier> get_ObjectId();
    public IDataContainer Decrypt(IDataContainer dataContainer);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfPrimitiveWritingContext : ValueType {
    [CompilerGeneratedAttribute]
private PdfIndirectObjectIdentifier <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetGeneration>k__BackingField;
    private PdfEncryptionInfoObject encryptionInfo;
    public PdfIndirectObjectIdentifier ObjectId { get; }
    public bool ResetGeneration { get; }
    public PdfPrimitiveWritingContext(PdfEncryptionInfoObject encryptionInfo, PdfIndirectObjectIdentifier objectId, bool resetGeneration);
    [CompilerGeneratedAttribute]
public PdfIndirectObjectIdentifier get_ObjectId();
    [CompilerGeneratedAttribute]
public bool get_ResetGeneration();
    public IDataContainer Encrypt(IDataContainer dataContainer);
}
[DebuggerDisplayAttribute("{Object}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfReferencePrimitive : PdfValuePrimitiveContainer`1<PdfIndirectObjectIdentifier> {
    private PdfObjectStorage collection;
    public PdfReferencePrimitive(PdfIndirectObjectIdentifier value, PdfObjectStorage collection);
    public virtual PdfPrimitive Resolve(PdfObjectStorage collection, PdfIndirectObjectParsingChain currentProcessedReferences);
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
    public virtual PdfDictionaryPrimitive AsDictionary();
    public virtual PdfArrayPrimitive AsArray();
    public virtual string AsString();
    public virtual Nullable`1<bool> AsBool();
    public virtual Byte[] AsBytes(bool decrypt);
    public virtual Nullable`1<double> AsDouble();
    public virtual Nullable`1<int> AsInt();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfRunLengthDecodeFilterObject : PdfFilterObject {
    internal static string Name;
    internal static string ShortName;
    internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfSignatureContentInfo : object {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StreamOffset>k__BackingField;
    public int Offset { get; }
    public int Length { get; }
    public int StreamOffset { get; }
    public PdfSignatureContentInfo(int offset, int length, int streamOffset);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public int get_StreamOffset();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfSignatureFormFieldObject : PdfInteractiveFormFieldObject {
    private static string certKey;
    private static string documentTimeStampSubFilter;
    [CompilerGeneratedAttribute]
private PdfSignatureInfo <SignatureInfo>k__BackingField;
    protected string Type { get; }
    public PdfSignatureInfo SignatureInfo { get; }
    public PdfSignatureFormFieldObject(PdfDictionaryPrimitive primitive, PdfInteractiveFormFieldObject parent);
    public PdfSignatureFormFieldObject(PdfDictionaryPrimitive primitive, string name, PdfInteractiveFormFieldObject parent);
    private static X509Certificate CreateCetificateFromBytes(Byte[] certBytes);
    protected virtual string get_Type();
    [CompilerGeneratedAttribute]
public PdfSignatureInfo get_SignatureInfo();
    public IList`1<X509Certificate> GetCertificates();
    public Byte[] GetSignatureHash();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfSignatureModelObject : object {
    internal static string ContentsDictionaryKey;
    private static string filterDictionaryKey;
    private static string subFilterDictionaryKey;
    private static string byteRangeDictionaryKey;
    private static string nameDictionaryKey;
    private static string signingTimeDictionaryKey;
    private static string locationDictionaryKey;
    private static string reasonDictionaryKey;
    private static string contactInfoDictionaryKey;
    private Placeholder contentsPlaceHolder;
    private Placeholder byteRangePlaceHolder;
    private IExternalSigner signer;
    [CompilerGeneratedAttribute]
private PdfIndirectObjectIdentifier <Id>k__BackingField;
    public PdfIndirectObjectIdentifier Id { get; }
    public PdfSignatureModelObject(PdfObjectStorage collection, PdfSignatureBuilder builder);
    public static void PatchStream(Stream stream, Byte[] signatureValue, PdfSignatureContentInfo contentInfo);
    private static void PatchStream(PdfBinaryWriter writer, PdfPrimitiveWritingContext writingContext, Byte[] signatureValue, PdfSignatureContentInfo contetInfo, long documentStreamOffset);
    [CompilerGeneratedAttribute]
public PdfIndirectObjectIdentifier get_Id();
    public PdfSignatureContentInfo PatchStream(PdfBinaryWriter writer, bool resetGeneration);
}
[DebuggerDisplayAttribute("Stream, {objects}")]
public class DevExpress.Pdf.Native.DocumentSigning.PdfStreamPrimitive : PdfDictionaryPrimitive {
    private Nullable`1<PdfPrimitiveParsingContext> parsingContext;
    private IDataContainer rawDataContainer;
    public IDataContainer RawDataContainer { get; }
    public PdfStreamPrimitive(PdfObjectStorage collection, PdfPrimitiveParsingContext parsingContext);
    public PdfStreamPrimitive(PdfObjectStorage collection, PdfPrimitiveParsingContext parsingContext, IDictionary`2<string, PdfPrimitive> dictionary, IDataContainer dataContainer);
    public static PdfStreamPrimitive CreateCompressed(PdfObjectStorage collection, IDictionary`2<string, PdfPrimitive> dictionary, Byte[] data);
    public IDataContainer get_RawDataContainer();
    public virtual Byte[] AsBytes(bool decrypt);
    public virtual string AsTextString();
    public IDataContainer GetDecodedData();
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
    private IDataContainer GetRawDataContainer(bool decrypt);
    private IDataContainer GetDecodedData(bool decrypt);
}
[DebuggerDisplayAttribute("{AsUTF8()}")]
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfStringPrimitive : PdfPrimitive {
    private IDataContainer dataContainer;
    private PdfPrimitiveParsingContext parsingContext;
    public Byte[] StringData { get; }
    protected IDataContainer DataContainer { get; }
    protected PdfStringPrimitive(PdfPrimitiveParsingContext parsingContext, IDataContainer dataContainer);
    internal static bool IsUnicode(Byte[] value);
    internal static string ConvertToUnicodeString(Byte[] value);
    internal static string ConvertToString(Byte[] value);
    internal static string ConvertToTextString(Byte[] value);
    public Byte[] get_StringData();
    protected IDataContainer get_DataContainer();
    public string GetDocEncoded();
    public virtual string AsUTF8();
    public string GetBigEndianUnicode();
    public virtual string AsString();
    public virtual string AsTextString();
    public virtual Byte[] AsBytes(bool decrypt);
    public virtual Nullable`1<int> AsInt();
    public virtual Nullable`1<double> AsDouble();
    public virtual Nullable`1<bool> AsBool();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfTiffPredictorObject : PdfFlateLZWDecodeFilterPredictorObject {
    private int bitsPerComponent;
    private int componentsCount;
    protected int ActualRowLength { get; }
    public PdfTiffPredictorObject(PdfFlateLZWDecodeFilterObject filter);
    protected virtual int get_ActualRowLength();
    protected virtual Byte[] Decode(Byte[] data);
    private Byte[] Decode16bpp(Byte[] data);
}
public static class DevExpress.Pdf.Native.DocumentSigning.PdfTokens : object {
    public static byte BeginHex;
    public static byte EndHex;
    public static byte BeginArray;
    public static byte EndArray;
    public static byte BeginName;
    public static byte BeginLiteral;
    public static byte EndLiteral;
    public static byte LiteralEscapeSequence;
    public static byte BeginComment;
    public static byte Ref;
    public static byte Space;
    public static byte CR;
    public static byte LF;
    [CompilerGeneratedAttribute]
private static Byte[] <BeginDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <EndDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <EndStream>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <Obj>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <EndObj>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <Null>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <False>k__BackingField;
    public static Byte[] BeginDictionary { get; }
    public static Byte[] EndDictionary { get; }
    public static Byte[] Stream { get; }
    public static Byte[] EndStream { get; }
    public static Byte[] Obj { get; }
    public static Byte[] EndObj { get; }
    public static Byte[] Null { get; }
    public static Byte[] True { get; }
    public static Byte[] False { get; }
    private static PdfTokens();
    [CompilerGeneratedAttribute]
public static Byte[] get_BeginDictionary();
    [CompilerGeneratedAttribute]
public static Byte[] get_EndDictionary();
    [CompilerGeneratedAttribute]
public static Byte[] get_Stream();
    [CompilerGeneratedAttribute]
public static Byte[] get_EndStream();
    [CompilerGeneratedAttribute]
public static Byte[] get_Obj();
    [CompilerGeneratedAttribute]
public static Byte[] get_EndObj();
    [CompilerGeneratedAttribute]
public static Byte[] get_Null();
    [CompilerGeneratedAttribute]
public static Byte[] get_True();
    [CompilerGeneratedAttribute]
public static Byte[] get_False();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfUnencryptedHexadecimalStringPrimitive : PdfHexadecimalStringPrimitive {
    public PdfUnencryptedHexadecimalStringPrimitive(Byte[] data);
    public virtual void Write(PdfBinaryWriter writer, PdfPrimitiveWritingContext context);
}
public abstract class DevExpress.Pdf.Native.DocumentSigning.PdfValuePrimitiveContainer`1 : PdfPrimitive {
    [CompilerGeneratedAttribute]
private T <Object>k__BackingField;
    public T Object { get; }
    protected PdfValuePrimitiveContainer`1(T obj);
    [CompilerGeneratedAttribute]
public T get_Object();
}
public class DevExpress.Pdf.Native.DocumentSigning.PdfWidgetAnnotationObject : PdfAnnotationObject {
    private static string appearanceCharacteristicsDictionaryKey;
    private static string rotateDictionaryKey;
    protected string Type { get; }
    public int RotationAngle { get; private set; }
    public PdfWidgetAnnotationObject(PdfDictionaryPrimitive primitive);
    public PdfWidgetAnnotationObject(PdfPageObject page, PdfRectangle widgetRectangle, PdfAnnotationFlags flags, PdfAcroFormFieldRotation rotation, PdfDictionaryPrimitive primitive);
    protected virtual string get_Type();
    public int get_RotationAngle();
    private void set_RotationAngle(int value);
    public void SetAppearance(PdfDictionaryPrimitive appearanceDictionary);
}
public class DevExpress.Pdf.Native.DocumentSigning.StreamDataContainer : object {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    public Stream Stream { get; }
    private long DevExpress.Pdf.Native.DocumentSigning.IDataContainer.Length { get; }
    public StreamDataContainer(Stream stream);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    private sealed virtual override long DevExpress.Pdf.Native.DocumentSigning.IDataContainer.get_Length();
    private sealed virtual override T DevExpress.Pdf.Native.DocumentSigning.IDataContainer.Accept(IDataContainerVisitor`1<T> visitor);
    private sealed virtual override IDataContainer DevExpress.Pdf.Native.DocumentSigning.IDataContainer.CreateSegment(long offset, long length);
    private sealed virtual override Byte[] DevExpress.Pdf.Native.DocumentSigning.IDataContainer.ToByteArray();
    private sealed virtual override void DevExpress.Pdf.Native.DocumentSigning.IDataContainer.CopyTo(Stream stream);
}
public class DevExpress.Pdf.Native.DocumentSigning.XrefItem : ValueType {
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    public long Offset { get; }
    public int ObjectNumber { get; }
    public int Generation { get; }
    public XrefItem(int objectNumber, int generation, long offset);
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
public int get_ObjectNumber();
    [CompilerGeneratedAttribute]
public int get_Generation();
}
public class DevExpress.Pdf.Native.DotNetSigner : object {
    private X509Certificate2 certificate;
    public string Type { get; }
    public string Filter { get; }
    public string SubFilter { get; }
    public DotNetSigner(X509Certificate2 certificate);
    public sealed virtual string get_Type();
    public sealed virtual string get_Filter();
    public sealed virtual string get_SubFilter();
    public sealed virtual Byte[] BuildSignature(Stream stream);
    public sealed virtual Byte[] BuildSignature(Byte[] digest, string digestAlgorithmOID);
    public sealed virtual int GetSignatureSize();
    private Byte[] SignData(Byte[] hash);
}
internal static class DevExpress.Pdf.Native.EncodingHelpers : object {
    private static string winAnsiEncodingName;
    private static Encoding ansiEncoding;
    public static Encoding AnsiEncoding { get; }
    private static EncodingHelpers();
    public static Encoding get_AnsiEncoding();
}
[ExtensionAttribute]
internal static class DevExpress.Pdf.Native.Extensions.PdfCompatibilityExtensions : object {
    [ExtensionAttribute]
public static PdfACompatibility ToPdfACompatibility(PdfCompatibility compatibility);
}
internal class DevExpress.Pdf.Native.FdfDocumentReader : PdfDocumentStructureReader {
    private FdfDocumentReader(PdfDocumentStream streamReader);
    internal static void Read(Stream stream, PdfFormData root);
    private void Read(PdfFormData root);
    private void ParseItem(PdfFormData result, string parentName, PdfReaderDictionary item);
    private Byte[] ReadFdfTrailerData();
}
internal class DevExpress.Pdf.Native.FdfDocumentWriter : PdfObjectWriter {
    private static string fdfVersion_1_2;
    private static string fdfDictionaryKey;
    private static string versionDictionaryKey;
    private static string kidsDictionaryKey;
    private static string fieldsDictionaryKey;
    private PdfObjectCollection objectsCollection;
    private IPdfWrittenObjectsCollection objects;
    private PdfFormData formData;
    private FdfDocumentWriter(Stream stream, PdfFormData formData);
    private static PdfWriterDictionary CreateRootDictionary(PdfFormData formData, IPdfWrittenObjectsCollection collection);
    private static PdfWriterDictionary CreateDictionary(PdfFormData formData, IPdfWrittenObjectsCollection collection);
    public static void Write(Stream stream, PdfFormData formData);
    private void Write();
}
internal class DevExpress.Pdf.Native.FlateDecodeRawDataSource : RawImageDataSource {
    private IPdfFlateDataSource flateDataSource;
    public FlateDecodeRawDataSource(PdfImage image, IPdfFlateDataSource dataSource);
    public virtual void FillScanline(Byte[] scanline);
    public virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.FloatArray : object {
    private Single[] buffer;
    public float Item { get; public set; }
    public int Length { get; }
    public FloatArray(int count);
    public FloatArray(Single[] buffer);
    public sealed virtual float get_Item(int i);
    public sealed virtual void set_Item(int i, float value);
    public sealed virtual int get_Length();
    public Single[] GetBuffer();
    public sealed virtual void BlockCopyFrom(Array src, int srcOffset, int dstOffset, int count);
    public sealed virtual void BlockCopyTo(int srcOffset, Array dst, int dstOffset, int count);
}
public interface DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator {
    public int Offset { get; public set; }
    public int Length { get; }
    public abstract virtual int get_Offset();
    public abstract virtual void set_Offset(int value);
    public abstract virtual int get_Length();
    public abstract virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public abstract virtual void WriteData(PdfBinaryStream stream);
}
[DefaultMemberAttribute("Item")]
public interface DevExpress.Pdf.Native.IFloatArray {
    public float Item { get; public set; }
    public int Length { get; }
    public abstract virtual float get_Item(int i);
    public abstract virtual void set_Item(int i, float value);
    public abstract virtual int get_Length();
    public abstract virtual void BlockCopyTo(int srcOffset, Array dst, int dstOffset, int count);
    public abstract virtual void BlockCopyFrom(Array src, int srcOffset, int dstOffset, int count);
}
public interface DevExpress.Pdf.Native.IHuffmanTreeNode {
    public abstract virtual void BuildTree(int code, int curLen, Func`1<IHuffmanTreeNode> createLeaf);
    public abstract virtual Nullable`1<int> DecodeValue(PdfBitReader reader);
}
public interface DevExpress.Pdf.Native.IJBIG2Decoder {
    public bool LastCode { get; }
    public abstract virtual bool get_LastCode();
}
public interface DevExpress.Pdf.Native.IJBIG2SymbolDictionaryDecoder {
    public abstract virtual int DecodeDH();
    public abstract virtual int DecodeDW();
    public abstract virtual int DecodeAI();
    public abstract virtual int DecodeEX();
}
public interface DevExpress.Pdf.Native.IJBIG2TextRegionDecoder {
    public abstract virtual int DecodeDT();
    public abstract virtual int DecodeFS();
    public abstract virtual int DecodeDS();
    public abstract virtual int DecodeIT();
    public abstract virtual int DecodeRI();
    public abstract virtual int DecodeRDW();
    public abstract virtual int DecodeRDH();
    public abstract virtual int DecodeRDX();
    public abstract virtual int DecodeRDY();
    public abstract virtual int DecodeID();
}
public interface DevExpress.Pdf.Native.IJBIG2TextRegionParser {
    public abstract virtual JBIG2Image Process();
}
public interface DevExpress.Pdf.Native.IJPXSubBandCoefficients {
    public int Width { get; }
    public int Height { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
    public abstract virtual void FillCoefficients(Single[] coefficients, int resultWidth);
}
public interface DevExpress.Pdf.Native.IJPXTileDataAction {
    public abstract virtual void Process(JPXTile tile);
}
public interface DevExpress.Pdf.Native.IPdfAnnotationAppearanceBuilder {
    public abstract virtual void RebuildAppearance(PdfForm form);
}
public interface DevExpress.Pdf.Native.IPdfAnnotationBorderStyleBuilder {
    public string StyleName { get; }
    public double Width { get; }
    public abstract virtual string get_StyleName();
    public abstract virtual double get_Width();
}
public interface DevExpress.Pdf.Native.IPdfAnnotationBuilder {
    public PdfRectangle Rect { get; }
    public PdfAnnotationFlags Flags { get; }
    public string Name { get; }
    public string Contents { get; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; }
    public PdfRGBColor Color { get; }
    public PdfAnnotationBorder Border { get; }
    public abstract virtual PdfRectangle get_Rect();
    public abstract virtual PdfAnnotationFlags get_Flags();
    public abstract virtual string get_Name();
    public abstract virtual string get_Contents();
    public abstract virtual Nullable`1<DateTimeOffset> get_ModificationDate();
    public abstract virtual PdfRGBColor get_Color();
    public abstract virtual PdfAnnotationBorder get_Border();
}
public interface DevExpress.Pdf.Native.IPdfAnnotationState {
    public PdfAnnotation Annotation { get; }
    public PdfAnnotationType AnnotationType { get; }
    public PdfAnnotationAppearanceState AppearanceState { get; public set; }
    public bool Visible { get; }
    public bool Hidden { get; public set; }
    public bool ReadOnly { get; }
    public int PageNumber { get; }
    public string Name { get; public set; }
    public PdfRectangle Rect { get; public set; }
    public PdfRGBColor Color { get; public set; }
    public string Contents { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public double BorderWidth { get; public set; }
    public PdfAnnotationFlags Flags { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public double BorderEffectIntensity { get; public set; }
    public PdfAnnotationBorderEffectStyle BorderEffectStyle { get; public set; }
    public abstract virtual PdfAnnotation get_Annotation();
    public abstract virtual PdfAnnotationType get_AnnotationType();
    public abstract virtual PdfAnnotationAppearanceState get_AppearanceState();
    public abstract virtual void set_AppearanceState(PdfAnnotationAppearanceState value);
    public abstract virtual bool get_Visible();
    public abstract virtual bool get_Hidden();
    public abstract virtual void set_Hidden(bool value);
    public abstract virtual bool get_ReadOnly();
    public abstract virtual int get_PageNumber();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual PdfRectangle get_Rect();
    public abstract virtual void set_Rect(PdfRectangle value);
    public abstract virtual PdfRGBColor get_Color();
    public abstract virtual void set_Color(PdfRGBColor value);
    public abstract virtual string get_Contents();
    public abstract virtual void set_Contents(string value);
    public abstract virtual Nullable`1<DateTimeOffset> get_ModificationDate();
    public abstract virtual void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public abstract virtual double get_BorderWidth();
    public abstract virtual void set_BorderWidth(double value);
    public abstract virtual PdfAnnotationFlags get_Flags();
    public abstract virtual void set_Flags(PdfAnnotationFlags value);
    public abstract virtual PdfBorderStyle get_BorderStyle();
    public abstract virtual void set_BorderStyle(PdfBorderStyle value);
    public abstract virtual double get_BorderEffectIntensity();
    public abstract virtual void set_BorderEffectIntensity(double value);
    public abstract virtual PdfAnnotationBorderEffectStyle get_BorderEffectStyle();
    public abstract virtual void set_BorderEffectStyle(PdfAnnotationBorderEffectStyle value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertyChanging(PdfAnnotationPropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyChanging(PdfAnnotationPropertyChangingEventHandler value);
    public abstract virtual void Accept(IPdfAnnotationStateVisitor visitor);
    public abstract virtual bool RemoveFromPage();
    public abstract virtual bool Flatten();
    public abstract virtual bool Contains(PdfPoint cropBoxPoint);
    public abstract virtual PdfAnnotationStatePaintData CreatePaintData(bool isPrinting, PdfRgbaColor highlightColor);
    public abstract virtual IList`1<PdfPoint[]> GetSelectionPolygon();
    public abstract virtual PdfDocumentArea GetInteractiveArea();
    public abstract virtual void RebuildAppearance();
}
public interface DevExpress.Pdf.Native.IPdfAnnotationStateComment {
    public string Type { get; }
    public PdfFilterAnnotationType FilterType { get; }
    public int PageNumber { get; }
    public bool Marked { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Contents { get; public set; }
    public string Subject { get; public set; }
    public string Author { get; public set; }
    public IPdfAnnotationStateCommentReviews Reviews { get; }
    public IPdfAnnotationStateCommentReplies Replies { get; }
    public IPdfMarkupAnnotationState State { get; }
    public bool Hidden { get; }
    public PdfAnnotationStateComment InReplyTo { get; }
    public abstract virtual string get_Type();
    public abstract virtual PdfFilterAnnotationType get_FilterType();
    public abstract virtual int get_PageNumber();
    public abstract virtual bool get_Marked();
    public abstract virtual void set_Marked(bool value);
    public abstract virtual Nullable`1<DateTimeOffset> get_ModificationDate();
    public abstract virtual void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public abstract virtual string get_Contents();
    public abstract virtual void set_Contents(string value);
    public abstract virtual string get_Subject();
    public abstract virtual void set_Subject(string value);
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual IPdfAnnotationStateCommentReviews get_Reviews();
    public abstract virtual IPdfAnnotationStateCommentReplies get_Replies();
    public abstract virtual IPdfMarkupAnnotationState get_State();
    public abstract virtual bool get_Hidden();
    public abstract virtual PdfAnnotationStateComment get_InReplyTo();
    public abstract virtual void AddReview(string author, string status);
    public abstract virtual void AddReview(string author, PdfAnnotationReviewStatus status);
    public abstract virtual IPdfAnnotationStateComment AddReply(string author, string contents);
    public abstract virtual void RemoveFromPage();
}
public interface DevExpress.Pdf.Native.IPdfAnnotationStateCommentReplies {
    public abstract virtual bool Remove(IPdfAnnotationStateComment comment);
    public abstract virtual IPdfAnnotationStateComment Add(string author, string contents);
    public abstract virtual void Clear();
}
public interface DevExpress.Pdf.Native.IPdfAnnotationStateCommentReview {
    public string Author { get; }
    public string Status { get; }
    public abstract virtual string get_Author();
    public abstract virtual string get_Status();
}
public interface DevExpress.Pdf.Native.IPdfAnnotationStateCommentReviews {
    public abstract virtual void Clear();
    public abstract virtual void AddReview(string author, string status);
    public abstract virtual void AddReview(string author, PdfAnnotationReviewStatus status);
}
public interface DevExpress.Pdf.Native.IPdfAnnotationStateVisitor {
    public abstract virtual void Visit(PdfCommonAnnotationState state);
    public abstract virtual void Visit(PdfLinkAnnotationState state);
    public abstract virtual void Visit(PdfWidgetAnnotationState state);
    public abstract virtual void Visit(IPdfMarkupAnnotationState state);
    public abstract virtual void Visit(PdfTextMarkupAnnotationState state);
    public abstract virtual void Visit(PdfTextAnnotationState state);
    public abstract virtual void Visit(PdfFreeTextAnnotationState state);
    public abstract virtual void Visit(PdfRubberStampAnnotationState state);
    public abstract virtual void Visit(PdfSquareAnnotationState state);
    public abstract virtual void Visit(PdfCircleAnnotationState state);
    public abstract virtual void Visit(PdfPolygonAnnotationState state);
    public abstract virtual void Visit(PdfPolyLineAnnotationState state);
    public abstract virtual void Visit(PdfLineAnnotationState state);
    public abstract virtual void Visit(PdfSoundAnnotationState state);
    public abstract virtual void Visit(PdfFileAttachmentAnnotationState state);
    public abstract virtual void Visit(PdfInkAnnotationState state);
}
public interface DevExpress.Pdf.Native.IPdfAnnotationVisitor {
    public abstract virtual void Visit(PdfAnnotation annotation);
    public abstract virtual void Visit(PdfWidgetAnnotation annotation);
    public abstract virtual void Visit(PdfLinkAnnotation annotation);
    public abstract virtual void Visit(PdfPopupAnnotation annotation);
    public abstract virtual void Visit(PdfTextAnnotation annotation);
    public abstract virtual void Visit(PdfTextMarkupAnnotation annotation);
    public abstract virtual void Visit(PdfInkAnnotation annotation);
    public abstract virtual void Visit(PdfPolygonAnnotation annotation);
    public abstract virtual void Visit(PdfRubberStampAnnotation annotation);
    public abstract virtual void Visit(PdfFileAttachmentAnnotation annotation);
    public abstract virtual void Visit(PdfCaretAnnotation annotation);
    public abstract virtual void Visit(PdfCircleAnnotation annotation);
    public abstract virtual void Visit(PdfRedactAnnotation annotation);
    public abstract virtual void Visit(PdfLineAnnotation annotation);
    public abstract virtual void Visit(PdfSquareAnnotation annotation);
    public abstract virtual void Visit(PdfPolyLineAnnotation annotation);
    public abstract virtual void Visit(PdfFreeTextAnnotation annotation);
    public abstract virtual void Visit(PdfSoundAnnotation annotation);
    public abstract virtual void Visit(PdfCustomAnnotation annotation);
}
public interface DevExpress.Pdf.Native.IPdfBookmarkParent {
    public PdfDocumentCatalog DocumentCatalog { get; }
    public abstract virtual PdfDocumentCatalog get_DocumentCatalog();
    public abstract virtual void Invalidate();
}
internal interface DevExpress.Pdf.Native.IPdfChoiceFormFieldProperties {
    public IList`1<PdfOptionsFormFieldOption> Options { get; }
    public IList`1<string> SelectedValues { get; }
    public int TopIndex { get; }
    public abstract virtual IList`1<PdfOptionsFormFieldOption> get_Options();
    public abstract virtual IList`1<string> get_SelectedValues();
    public abstract virtual int get_TopIndex();
}
public interface DevExpress.Pdf.Native.IPdfCMapValue`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
    public abstract virtual IPdfCMapValue`1<T> Increment(int count);
}
public interface DevExpress.Pdf.Native.IPdfCodePointMapping {
    public abstract virtual bool UpdateCodePoints(Int16[] codePoints, bool useEmbeddedFontEncoding);
}
public interface DevExpress.Pdf.Native.IPdfCommandInterpreter {
    public PdfResources PageResources { get; }
    public abstract virtual PdfResources get_PageResources();
    public abstract virtual void BeginPath(PdfPoint startPoint);
    public abstract virtual void AppendPathBezierSegment(PdfPoint controlPoint2, PdfPoint endPoint);
    public abstract virtual void AppendPathBezierSegment(PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint endPoint);
    public abstract virtual void AppendPathLineSegment(PdfPoint endPoint);
    public abstract virtual void AppendRectangle(double x, double y, double width, double height);
    public abstract virtual void ClosePath();
    public abstract virtual void StrokePath();
    public abstract virtual void CloseAndStrokePath();
    public abstract virtual void CloseFillAndStrokePath(bool useNonzeroWindingRule);
    public abstract virtual void FillPath(bool useNonzeroWindingRule);
    public abstract virtual void FillAndStrokePath(bool useNonzeroWindingRule);
    public abstract virtual void EndPathWithoutFillingAndStroking();
    public abstract virtual void Clip(bool useNonzeroWindingRule);
    public abstract virtual void BeginText();
    public abstract virtual void EndText();
    public abstract virtual void ShowText(Byte[] data, Double[] offsets);
    public abstract virtual void ShowTextOnNextLine(Byte[] data);
    public abstract virtual void ShowTextOnNextLineWithSpacing(double wordSpacing, double characterSpacing, Byte[] data);
    public abstract virtual void StartTextLine();
    public abstract virtual void StartTextLine(double xOffset, double yOffset);
    public abstract virtual void StartTextLineWithLeading(double xOffset, double yOffset);
    public abstract virtual void SetTextMatrix(PdfTransformationMatrix matrix);
    public abstract virtual void SetFont(PdfFont font, double fontSize);
    public abstract virtual void SetCharacterSpacing(double characterSpacing);
    public abstract virtual void SetWordSpacing(double wordSpacing);
    public abstract virtual void SetTextHorizontalScaling(double scaling);
    public abstract virtual void SetTextLeading(double leading);
    public abstract virtual void SetTextRenderingMode(PdfTextRenderingMode renderingMode);
    public abstract virtual void SetTextRise(double rise);
    public abstract virtual void SetCMYKColorForNonStrokingOperations(double c, double m, double y, double k);
    public abstract virtual void SetCMYKColorForStrokingOperations(double c, double m, double y, double k);
    public abstract virtual void SetRGBColorForNonStrokingOperations(double r, double g, double b);
    public abstract virtual void SetRGBColorForStrokingOperations(double r, double g, double b);
    public abstract virtual void SetGrayColorForNonStrokingOperations(double gray);
    public abstract virtual void SetGrayColorForStrokingOperations(double gray);
    public abstract virtual void SetColorForNonStrokingOperations(PdfColor color);
    public abstract virtual void SetColorForStrokingOperations(PdfColor color);
    public abstract virtual void SetColorSpaceForNonStrokingOperations(PdfColorSpace colorSpace);
    public abstract virtual void SetColorSpaceForStrokingOperations(PdfColorSpace colorSpace);
    public abstract virtual void SetFlatnessTolerance(double flatnessTolerance);
    public abstract virtual void SetLineCapStyle(PdfLineCapStyle lineCapStyle);
    public abstract virtual void SetLineJoinStyle(PdfLineJoinStyle lineJoinStyle);
    public abstract virtual void SetLineStyle(PdfLineStyle lineStyle);
    public abstract virtual void SetLineWidth(double lineWidth);
    public abstract virtual void SetMiterLimit(double miterLimit);
    public abstract virtual void SetRenderingIntent(PdfRenderingIntent renderingIntent);
    public abstract virtual void ApplyGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    public abstract virtual void UpdateTransformationMatrix(PdfTransformationMatrix matrix);
    public abstract virtual void RestoreGraphicsState();
    public abstract virtual void SaveGraphicsState();
    public abstract virtual void DrawForm(PdfForm form);
    public abstract virtual void DrawImage(PdfImage image);
    public abstract virtual void DrawInlineImage(PdfImage image);
    public abstract virtual void DrawShading(PdfShading shading);
    public abstract virtual void DrawTransparencyGroup(PdfGroupForm form);
    public abstract virtual void DrawCompatibilityGroup(IEnumerable`1<PdfCommand> commands);
    public abstract virtual void DrawMarkedContent(IEnumerable`1<PdfCommand> commands, PdfProperties properties, string tag);
    public abstract virtual void DesignateMarkedContentPoint(PdfProperties properties, string tag);
}
public interface DevExpress.Pdf.Native.IPdfCompatibilityOptionsBuilder {
    public IList`1<string> NotEmbeddedFontFamilies { get; }
    public bool DisableEmbeddingAllFonts { get; }
    public bool MergePdfADocuments { get; }
    public PdfACompatibility PdfACompatibility { get; }
    public PdfUACompatibility PdfUACompatibility { get; }
    public bool RightToLeftLayout { get; }
    public bool UseOldVersion { get; public set; }
    public abstract virtual IList`1<string> get_NotEmbeddedFontFamilies();
    public abstract virtual bool get_DisableEmbeddingAllFonts();
    public abstract virtual bool get_MergePdfADocuments();
    public abstract virtual PdfACompatibility get_PdfACompatibility();
    public abstract virtual PdfUACompatibility get_PdfUACompatibility();
    public abstract virtual bool get_RightToLeftLayout();
    public abstract virtual bool get_UseOldVersion();
    public abstract virtual void set_UseOldVersion(bool value);
}
public interface DevExpress.Pdf.Native.IPdfDCTDecoderFactory {
    public abstract virtual IPdfImageScanlineSource CreateSource(Byte[] imageData, PdfImage image);
}
public interface DevExpress.Pdf.Native.IPdfDocumentCatalog {
    public Guid Id { get; }
    public PdfCompatibilityOptions CompatibilityOptions { get; }
    public PdfLogicalStructure LogicalStructure { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual PdfCompatibilityOptions get_CompatibilityOptions();
    public abstract virtual PdfLogicalStructure get_LogicalStructure();
    public abstract virtual IPdfResources CreateResources(bool shouldBeWritten, bool alternativeFontNames);
}
public interface DevExpress.Pdf.Native.IPdfExportFontProvider {
    public abstract virtual PdfExportFont GetExportFont(string fontFamily, PdfFontStyle style);
    public abstract virtual PdfExportFont GetExportFont(PdfSetTextFontCommand setTextFontCommand);
}
public interface DevExpress.Pdf.Native.IPdfFileIconService {
    public abstract virtual Byte[] GetIcon(string fileExtension, int iconDimension);
}
public interface DevExpress.Pdf.Native.IPdfFlateDataSource {
    public abstract virtual void FillBuffer(Byte[] buffer);
}
public interface DevExpress.Pdf.Native.IPdfFontDescriptorBuilder {
    public string FontFamily { get; }
    public bool Bold { get; }
    public double Ascent { get; }
    public double Descent { get; }
    public PdfRectangle BBox { get; }
    public PdfFontFlags Flags { get; }
    public double ItalicAngle { get; }
    public int NumGlyphs { get; }
    public double StemH { get; }
    public double StemV { get; }
    public double XHeight { get; }
    public double CapHeight { get; }
    public abstract virtual string get_FontFamily();
    public abstract virtual bool get_Bold();
    public abstract virtual double get_Ascent();
    public abstract virtual double get_Descent();
    public abstract virtual PdfRectangle get_BBox();
    public abstract virtual PdfFontFlags get_Flags();
    public abstract virtual double get_ItalicAngle();
    public abstract virtual int get_NumGlyphs();
    public abstract virtual double get_StemH();
    public abstract virtual double get_StemV();
    public abstract virtual double get_XHeight();
    public abstract virtual double get_CapHeight();
}
public interface DevExpress.Pdf.Native.IPdfFormFieldProvider {
    public PdfInteractiveFormField FormField { get; }
    public abstract virtual PdfInteractiveFormField get_FormField();
    public abstract virtual void ResetValue();
}
public interface DevExpress.Pdf.Native.IPdfGlyphRun {
    public string Text { get; }
    public abstract virtual string get_Text();
    public abstract virtual IList`1<DXCluster> GetClusters();
}
public interface DevExpress.Pdf.Native.IPdfGlyphWidthProvider {
    public abstract virtual short GetGlyphWidth(string glyphName);
}
public interface DevExpress.Pdf.Native.IPdfImageScanlineSource {
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public abstract virtual int get_ComponentsCount();
    public abstract virtual bool get_HasAlpha();
    public abstract virtual void FillNextScanline(Byte[] scanlineData);
}
public interface DevExpress.Pdf.Native.IPdfImageScanlineSourceFactory {
    public abstract virtual IPdfImageScanlineSource CreateInterpolator(IPdfImageScanlineSource source, int targetWidth, int targetHeight, int sourceWidth, int sourceHeight, bool shouldInterpolate);
    public abstract virtual IPdfImageScanlineSource CreateIndexedScanlineSource(IPdfImageScanlineSource source, int width, int height, int bitsPerComponent, Byte[] lookupTable, int baseColorSpaceComponentsCount);
}
internal interface DevExpress.Pdf.Native.IPdfInteractiveFormFieldProperties {
    public PdfAdditionalActions AdditionalActions { get; }
    public string AlternateName { get; }
    public Byte[] AppearanceCommands { get; }
    public PdfDocumentCatalog DocumentCatalog { get; }
    public PdfInteractiveFormFieldFlags Flags { get; }
    public string Name { get; }
    public PdfInteractiveFormField Parent { get; }
    public Nullable`1<PdfTextJustification> TextJustification { get; }
    public PdfInteractiveFormField ValuesProvider { get; }
    public PdfWidgetAnnotation Widget { get; }
    public abstract virtual PdfAdditionalActions get_AdditionalActions();
    public abstract virtual string get_AlternateName();
    public abstract virtual Byte[] get_AppearanceCommands();
    public abstract virtual PdfDocumentCatalog get_DocumentCatalog();
    public abstract virtual PdfInteractiveFormFieldFlags get_Flags();
    public abstract virtual string get_Name();
    public abstract virtual PdfInteractiveFormField get_Parent();
    public abstract virtual Nullable`1<PdfTextJustification> get_TextJustification();
    public abstract virtual PdfInteractiveFormField get_ValuesProvider();
    public abstract virtual PdfWidgetAnnotation get_Widget();
}
public interface DevExpress.Pdf.Native.IPdfInteractiveFormFieldVisitor {
    public abstract virtual void Visit(PdfChoiceFormField formField);
    public abstract virtual void Visit(PdfTextFormField formField);
    public abstract virtual void Visit(PdfButtonFormField formField);
    public abstract virtual void Visit(PdfInteractiveFormField formField);
}
public interface DevExpress.Pdf.Native.IPdfInteractiveOperationController {
    public abstract virtual void ShowDocumentPosition(PdfTarget target);
    public abstract virtual void GoToPreviousPage();
    public abstract virtual void GoToNextPage();
    public abstract virtual void GoToFirstPage();
    public abstract virtual void GoToLastPage();
    public abstract virtual void OpenUri(string uri);
    public abstract virtual void OpenDocument(string documentPath, PdfTarget target, bool openInNewWindow);
    public abstract virtual void ShellExecute(string filePath, string defaultDirectory, string parameters);
    public abstract virtual void ShowPrintDialog();
    public abstract virtual void ResetFormFields(IEnumerable`1<PdfInteractiveFormField> fields);
    public abstract virtual void ResetFormExcludingFields(IEnumerable`1<PdfInteractiveFormField> fields);
    public abstract virtual void ResetForm();
}
public interface DevExpress.Pdf.Native.IPdfLineAnnotationBuilder {
    public PdfPoint StartPoint { get; }
    public PdfPoint EndPoint { get; }
    public abstract virtual PdfPoint get_StartPoint();
    public abstract virtual PdfPoint get_EndPoint();
}
public interface DevExpress.Pdf.Native.IPdfLinkAnnotationBuilder {
    public PdfDestinationObject Destination { get; }
    public string Uri { get; }
    public abstract virtual PdfDestinationObject get_Destination();
    public abstract virtual string get_Uri();
}
public interface DevExpress.Pdf.Native.IPdfMarkupAnnotationBuilder {
    public Nullable`1<DateTimeOffset> CreationDate { get; }
    public double Opacity { get; }
    public string Subject { get; }
    public string Title { get; }
    public PdfAnnotation InReplyTo { get; }
    public PdfMarkupAnnotationReplyType ReplyType { get; }
    public int Rotate { get; public set; }
    public abstract virtual Nullable`1<DateTimeOffset> get_CreationDate();
    public abstract virtual double get_Opacity();
    public abstract virtual string get_Subject();
    public abstract virtual string get_Title();
    public abstract virtual PdfAnnotation get_InReplyTo();
    public abstract virtual PdfMarkupAnnotationReplyType get_ReplyType();
    public abstract virtual int get_Rotate();
    public abstract virtual void set_Rotate(int value);
}
public interface DevExpress.Pdf.Native.IPdfMarkupAnnotationState {
    public string Type { get; }
    public PdfFilterAnnotationType FilterType { get; }
    public double Opacity { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public string Author { get; public set; }
    public string Subject { get; public set; }
    public bool Marked { get; public set; }
    public int Rotate { get; public set; }
    public IPdfAnnotationStateComment Comment { get; }
    public IEnumerable`1<IPdfMarkupAnnotationState> GroupedAnnotations { get; }
    public abstract virtual string get_Type();
    public abstract virtual PdfFilterAnnotationType get_FilterType();
    public abstract virtual double get_Opacity();
    public abstract virtual void set_Opacity(double value);
    public abstract virtual Nullable`1<DateTimeOffset> get_CreationDate();
    public abstract virtual void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual string get_Subject();
    public abstract virtual void set_Subject(string value);
    public abstract virtual bool get_Marked();
    public abstract virtual void set_Marked(bool value);
    public abstract virtual int get_Rotate();
    public abstract virtual void set_Rotate(int value);
    public abstract virtual IPdfAnnotationStateComment get_Comment();
    public abstract virtual IEnumerable`1<IPdfMarkupAnnotationState> get_GroupedAnnotations();
}
public interface DevExpress.Pdf.Native.IPdfMouseInputReceiver {
    public abstract virtual void MouseDown(PdfMouseAction action);
    public abstract virtual void MouseMove(PdfMouseAction action);
    public abstract virtual void MouseUp(PdfMouseAction action);
}
public interface DevExpress.Pdf.Native.IPdfObjectId {
}
public interface DevExpress.Pdf.Native.IPdfObjectWritingStrategy {
    public abstract virtual PdfObjectReference AddObjectToWrite(object value, int number);
    public abstract virtual PdfObjectCloningCollection CreateCloningCollection(Dictionary`2<IPdfObjectId, int> clonedObjects);
    public abstract virtual void WriteIndirectObject(PdfObject value);
}
public interface DevExpress.Pdf.Native.IPdfPathAnnotationAppearanceBuilderStrategy {
    public abstract virtual PdfGraphicsPath BuildPath();
    public abstract virtual PdfRectangle GetBBox();
}
public interface DevExpress.Pdf.Native.IPdfPathAnnotationBuilder {
    public IList`1<PdfPoint> Points { get; }
    public abstract virtual IList`1<PdfPoint> get_Points();
}
public interface DevExpress.Pdf.Native.IPdfPathAnnotationState {
    public IList`1<PdfPoint> Vertices { get; }
    public PdfColor InteriorColor { get; public set; }
    public abstract virtual IList`1<PdfPoint> get_Vertices();
    public abstract virtual PdfColor get_InteriorColor();
    public abstract virtual void set_InteriorColor(PdfColor value);
}
public interface DevExpress.Pdf.Native.IPdfPlatformServiceProvider {
    public abstract virtual IPdfFileIconService GetIconService();
    public abstract virtual IPdfRenderFontStorage GetRenderFontStorage();
    public abstract virtual IPolygonBooleanOperationProvider GetPolygonBooleanOperationProvider();
}
public interface DevExpress.Pdf.Native.IPdfRenderFontStorage {
    public abstract virtual void NotifyFontChanged(PdfFont font);
}
public interface DevExpress.Pdf.Native.IPdfRenderingFontInfoProvider {
    public abstract virtual double GetWidth(PdfFont font, int charCode);
    public abstract virtual PdfFontMetricsMetadata GetMetrics(PdfFont font);
}
public interface DevExpress.Pdf.Native.IPdfResources {
    public IPdfDocumentCatalog DocumentCatalog { get; }
    public abstract virtual IPdfDocumentCatalog get_DocumentCatalog();
    public abstract virtual string AddGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    public abstract virtual string AddFont(PdfFont font);
    public abstract virtual string AddXObject(PdfXObject obj);
    public abstract virtual void AddNamedXObject(string name, PdfXObject obj);
    public abstract virtual string AddShading(PdfShading shading);
    public abstract virtual string AddPattern(PdfPattern pattern);
    public abstract virtual string AddColorSpace(PdfColorSpace colorSpace);
    public abstract virtual string AddProperties(PdfProperties properties);
    public abstract virtual PdfObject ToWritableObject();
    public abstract virtual PdfResources AsResources();
}
public interface DevExpress.Pdf.Native.IPdfShapeAnnotationState {
    public PdfColor InteriorColor { get; public set; }
    public abstract virtual PdfColor get_InteriorColor();
    public abstract virtual void set_InteriorColor(PdfColor value);
}
public interface DevExpress.Pdf.Native.IPdfStructureElementOwner {
    public Nullable`1<int> StructParents { get; public set; }
    public abstract virtual Nullable`1<int> get_StructParents();
    public abstract virtual void set_StructParents(Nullable`1<int> value);
}
public interface DevExpress.Pdf.Native.IPdfTextAnnotationBuilder {
    public string State { get; }
    public string StateModel { get; }
    public string IconName { get; }
    public abstract virtual string get_State();
    public abstract virtual string get_StateModel();
    public abstract virtual string get_IconName();
}
public interface DevExpress.Pdf.Native.IPdfTextMarkupAnnotationBuilder {
    public IList`1<PdfQuadrilateral> Quads { get; }
    public PdfTextMarkupAnnotationType Style { get; }
    public abstract virtual IList`1<PdfQuadrilateral> get_Quads();
    public abstract virtual PdfTextMarkupAnnotationType get_Style();
}
public interface DevExpress.Pdf.Native.IPdfToUnicodeCMap {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual string GetUnicode(Byte[] code);
}
public interface DevExpress.Pdf.Native.IPdfType1CharstringToken {
    public abstract virtual void Execute(PdfType1CharstringInterpreter interpreter);
    public abstract virtual void Write(PdfType2CharstringBinaryWriter writer);
}
public interface DevExpress.Pdf.Native.IPdfUnclosedPathAnnotationState {
    public PdfAnnotationLineEndingStyle StartLineEnding { get; public set; }
    public PdfAnnotationLineEndingStyle FinishLineEnding { get; public set; }
    public abstract virtual PdfAnnotationLineEndingStyle get_StartLineEnding();
    public abstract virtual void set_StartLineEnding(PdfAnnotationLineEndingStyle value);
    public abstract virtual PdfAnnotationLineEndingStyle get_FinishLineEnding();
    public abstract virtual void set_FinishLineEnding(PdfAnnotationLineEndingStyle value);
}
public interface DevExpress.Pdf.Native.IPdfValidationLogger {
    public abstract virtual void LogValidationError(int objectNumber, int objectGeneration, string message);
}
public interface DevExpress.Pdf.Native.IPdfViewerLayoutInfoProvider {
    public float ZoomFactor { get; }
    public abstract virtual float get_ZoomFactor();
    public abstract virtual PdfPoint GetClientPoint(PdfDocumentPosition position);
    public abstract virtual void EnsureVisible(int pageIndex, PdfRectangle bounds, bool inCenter);
}
public interface DevExpress.Pdf.Native.IPdfWidgetAnnotationBuilder {
    public abstract virtual PdfAnnotationBorderStyle CreateBorderStyle();
    public abstract virtual PdfWidgetAppearanceCharacteristics CreateAppearanceCharacteristics();
}
public interface DevExpress.Pdf.Native.IPdfWidgetAppearanceCharacteristicsBuilder {
    public PdfColor BackgroundColor { get; }
    public PdfColor BorderColor { get; }
    public int RotationAngle { get; }
    public string Caption { get; }
    public PdfWidgetAnnotationTextPosition TextPosition { get; }
    public PdfXObject NormalIcon { get; }
    public PdfIconFitBuilder IconFitBuilder { get; }
    public abstract virtual PdfColor get_BackgroundColor();
    public abstract virtual PdfColor get_BorderColor();
    public abstract virtual int get_RotationAngle();
    public abstract virtual string get_Caption();
    public abstract virtual PdfWidgetAnnotationTextPosition get_TextPosition();
    public abstract virtual PdfXObject get_NormalIcon();
    public abstract virtual PdfIconFitBuilder get_IconFitBuilder();
}
public interface DevExpress.Pdf.Native.IPdfWritableObject {
    public abstract virtual void Write(PdfDocumentStream stream, int number);
}
public interface DevExpress.Pdf.Native.IPdfWritingContext {
    public bool IsCloning { get; }
    public Guid CollectionId { get; }
    public PdfPageTreeNode PagesRootNode { get; }
    public abstract virtual bool get_IsCloning();
    public abstract virtual Guid get_CollectionId();
    public abstract virtual void AddSavedDestinationName(string name);
    public abstract virtual string GetFormFieldName(string currentName);
    public abstract virtual string GetDestinationName(string currentName);
    public abstract virtual PdfName FindGraphicsStateParametersName(string resourceName);
    public abstract virtual PdfName FindFontName(string resourceName);
    public abstract virtual PdfName FindXObjectName(string resourceName);
    public abstract virtual PdfName FindColorSpaceName(string resourceName);
    public abstract virtual PdfName FindPatternName(string resourceName);
    public abstract virtual PdfName FindShadingName(string resourceName);
    public abstract virtual PdfName FindPropertiesName(string resourceName);
    public abstract virtual Nullable`1<PdfDirectObjectId> GetRelatedObjectId(PdfObject value, int number);
    public abstract virtual PdfPageTreeNode get_PagesRootNode();
}
public interface DevExpress.Pdf.Native.IPdfWrittenObjectsCollection {
    public IPdfWritingContext WritingContext { get; }
    public PdfEncryptionInfo EncryptionInfo { get; }
    public abstract virtual IPdfWritingContext get_WritingContext();
    public abstract virtual PdfEncryptionInfo get_EncryptionInfo();
    public abstract virtual PdfObjectReference AddObject(PdfObject value);
    public abstract virtual PdfObjectReference AddObject(int objectNumber, Func`1<PdfObject> getObject);
    public abstract virtual PdfObjectReference AddObjectToWrite(object obj);
    public abstract virtual PdfObjectReference GetSavedObjectReference(PdfIndirectObjectId objectId);
}
public interface DevExpress.Pdf.Native.IPolygonBooleanOperationProvider {
    public abstract virtual PdfGraphicsPolygon Difference(PdfGraphicsPolygon subjectPolygon, PdfGraphicsPolygon clipPolygon);
}
public abstract class DevExpress.Pdf.Native.JBIG2AdaptiveTemplateRegionDecoder : JBIG2GenericRegionArithmeticDecoder {
    private Int32[] adaptiveTemplate;
    protected Int32[] AdaptiveTemplate { get; }
    protected JBIG2AdaptiveTemplateRegionDecoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected Int32[] get_AdaptiveTemplate();
    protected abstract virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
    public virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2ArithmeticIntContext : object {
    private Byte[] iax;
    public PdfArithmeticDecoderResult Decode(PdfArithmeticState state);
}
public enum DevExpress.Pdf.Native.JBIG2Corner : Enum {
    public int value__;
    public static JBIG2Corner BottomLeft;
    public static JBIG2Corner TopLeft;
    public static JBIG2Corner BottomRight;
    public static JBIG2Corner TopRight;
}
public class DevExpress.Pdf.Native.JBIG2Decoder : object {
    private PdfArithmeticContext gb;
    private PdfArithmeticContext gr;
    private PdfArithmeticContext iaid;
    private int idLength;
    private JBIG2ArithmeticIntContext iardw;
    private JBIG2ArithmeticIntContext iardh;
    private JBIG2ArithmeticIntContext iardx;
    private JBIG2ArithmeticIntContext iardy;
    private JBIG2ArithmeticIntContext iadh;
    private JBIG2ArithmeticIntContext iadw;
    private JBIG2ArithmeticIntContext iaex;
    private JBIG2ArithmeticIntContext iaai;
    private JBIG2ArithmeticIntContext iadt;
    private JBIG2ArithmeticIntContext iafs;
    private JBIG2ArithmeticIntContext iads;
    private JBIG2ArithmeticIntContext iait;
    private JBIG2ArithmeticIntContext iari;
    private PdfArithmeticState arithmeticState;
    private bool lastCode;
    public bool LastCode { get; }
    public JBIG2Decoder(JBIG2StreamHelper sh, int idLength, int gbLength, int grLength);
    private static int FindLength(int tmp);
    public static JBIG2Decoder Create(JBIG2StreamHelper sh, int maxId);
    public sealed virtual bool get_LastCode();
    public sealed virtual int DecodeDT();
    public sealed virtual int DecodeFS();
    public sealed virtual int DecodeDS();
    public sealed virtual int DecodeIT();
    public sealed virtual int DecodeRI();
    public sealed virtual int DecodeRDW();
    public sealed virtual int DecodeRDH();
    public sealed virtual int DecodeRDX();
    public sealed virtual int DecodeRDY();
    public sealed virtual int DecodeDH();
    public sealed virtual int DecodeDW();
    public sealed virtual int DecodeAI();
    public sealed virtual int DecodeEX();
    public sealed virtual int DecodeID();
    public int DecodeGB(int context);
    public int DecodeGR(int context);
    private int Decode(JBIG2ArithmeticIntContext ctx);
}
public class DevExpress.Pdf.Native.JBIG2FastTemplate0Decoder : JBIG2GenericRegionArithmeticDecoder {
    public JBIG2FastTemplate0Decoder(JBIG2Image image, JBIG2Decoder decoder);
    public virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2FastTPGDON0Decoder : JBIG2TPGDON0Decoder {
    private static int adaptiveTemplatePixelsCount;
    public JBIG2FastTPGDON0Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    public virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2GenericRegion : JBIG2SegmentData {
    private JBIG2RegionSegmentInfo info;
    private Int32[] gbat;
    private bool mmr;
    private int gbTemplate;
    private bool tpgdon;
    private JBIG2Decoder decoder;
    protected bool CacheData { get; }
    public JBIG2GenericRegion(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    internal JBIG2GenericRegion(JBIG2SegmentHeader header, Int32[] gbat, int gbTemplate, JBIG2Decoder decoder);
    public static JBIG2GenericRegionDecoder CreateDecoder(int gbTemplate, JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual bool get_CacheData();
    internal JBIG2GenericRegionDecoder CreateDecoder(JBIG2Image image);
    public virtual void Process();
}
public abstract class DevExpress.Pdf.Native.JBIG2GenericRegionArithmeticDecoder : JBIG2GenericRegionDecoder {
    [CompilerGeneratedAttribute]
private JBIG2Decoder <Decoder>k__BackingField;
    protected JBIG2Decoder Decoder { get; }
    protected JBIG2GenericRegionArithmeticDecoder(JBIG2Image image, JBIG2Decoder decoder);
    [CompilerGeneratedAttribute]
protected JBIG2Decoder get_Decoder();
}
public abstract class DevExpress.Pdf.Native.JBIG2GenericRegionDecoder : object {
    private JBIG2Image image;
    protected JBIG2Image Image { get; }
    protected JBIG2GenericRegionDecoder(JBIG2Image image);
    protected JBIG2Image get_Image();
    public abstract virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2GenericRegionMMRDecoder : JBIG2GenericRegionDecoder {
    private Byte[] data;
    public JBIG2GenericRegionMMRDecoder(JBIG2Image image, Byte[] data);
    public virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2HalftoneRegion : JBIG2SegmentData {
    private int imageWidth;
    private int imageHeight;
    private int imageHorizontalOffset;
    private int imageVerticalOffset;
    private int horizontalCoordinate;
    private int verticalCoordinate;
    private JBIG2RegionSegmentInfo regionInfo;
    private int flags;
    private JBIG2PatternDictionary PatternDictionary { get; }
    public JBIG2HalftoneRegion(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    private JBIG2PatternDictionary get_PatternDictionary();
    private Int32[] GetGrayScaleImageData();
    public virtual void Process();
}
public class DevExpress.Pdf.Native.JBIG2HuffmanDecoder : object {
    [CompilerGeneratedAttribute]
private PdfBitReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LastCode>k__BackingField;
    protected PdfBitReader Reader { get; }
    public bool LastCode { get; private set; }
    protected JBIG2HuffmanDecoder(JBIG2StreamHelper sh);
    [CompilerGeneratedAttribute]
protected PdfBitReader get_Reader();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LastCode();
    [CompilerGeneratedAttribute]
private void set_LastCode(bool value);
    protected int Decode(IHuffmanTreeNode root);
}
public static class DevExpress.Pdf.Native.JBIG2HuffmanTableBuilder : object {
    public static IHuffmanTreeNode BuildHuffmanTree(JBIG2HuffmanTableModel tableModel);
    public static Nullable`1[] AssignPrefixCodes(IList`1<int> preflen, int codesNumber, int prefixSize);
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTableLine : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Preflen>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RangeLen>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RangeLow>k__BackingField;
    public Nullable`1<int> Code { get; }
    public int Preflen { get; }
    public int RangeLen { get; }
    public int RangeLow { get; }
    public JBIG2HuffmanTableLine(Nullable`1<int> code, int preflen, int rangeLen, int rangeLow);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Code();
    [CompilerGeneratedAttribute]
public int get_Preflen();
    [CompilerGeneratedAttribute]
public int get_RangeLen();
    [CompilerGeneratedAttribute]
public int get_RangeLow();
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTableModel : object {
    [CompilerGeneratedAttribute]
private List`1<int> <Preflen>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Rangelen>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Rangelow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrefixSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HTOOB>k__BackingField;
    public List`1<int> Preflen { get; }
    public List`1<int> Rangelen { get; }
    public List`1<int> Rangelow { get; }
    public int PrefixSize { get; public set; }
    public bool HTOOB { get; public set; }
    public int ntemp { get; }
    public static IHuffmanTreeNode StandardHuffmanTableA();
    public static IHuffmanTreeNode StandardHuffmanTableB();
    public static IHuffmanTreeNode StandardHuffmanTableC();
    public static IHuffmanTreeNode StandardHuffmanTableD();
    public static IHuffmanTreeNode StandardHuffmanTableE();
    public static IHuffmanTreeNode StandardHuffmanTableF();
    public static IHuffmanTreeNode StandardHuffmanTableG();
    public static IHuffmanTreeNode StandardHuffmanTableH();
    public static IHuffmanTreeNode StandardHuffmanTableI();
    public static IHuffmanTreeNode StandardHuffmanTableJ();
    public static IHuffmanTreeNode StandardHuffmanTableK();
    public static IHuffmanTreeNode StandardHuffmanTableL();
    public static IHuffmanTreeNode StandardHuffmanTableM();
    public static IHuffmanTreeNode StandardHuffmanTableN();
    public static IHuffmanTreeNode StandardHuffmanTableO();
    [CompilerGeneratedAttribute]
public List`1<int> get_Preflen();
    [CompilerGeneratedAttribute]
public List`1<int> get_Rangelen();
    [CompilerGeneratedAttribute]
public List`1<int> get_Rangelow();
    [CompilerGeneratedAttribute]
public int get_PrefixSize();
    [CompilerGeneratedAttribute]
public void set_PrefixSize(int value);
    [CompilerGeneratedAttribute]
public bool get_HTOOB();
    [CompilerGeneratedAttribute]
public void set_HTOOB(bool value);
    public int get_ntemp();
    public void AddLine(int preflen, int rangelen, int rangelow);
    public void AddLine(int preflenOOB);
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTableSegment : JBIG2SegmentData {
    private IHuffmanTreeNode treeRoot;
    public IHuffmanTreeNode TreeRoot { get; }
    public JBIG2HuffmanTableSegment(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    private static JBIG2HuffmanTableModel ParceTable(JBIG2StreamHelper streamHelper);
    public IHuffmanTreeNode get_TreeRoot();
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTreeBuilder : object {
    [CompilerGeneratedAttribute]
private JBIG2HuffmanTreeNode <RootNode>k__BackingField;
    public JBIG2HuffmanTreeNode RootNode { get; }
    [CompilerGeneratedAttribute]
public JBIG2HuffmanTreeNode get_RootNode();
    public void AddTableLine(JBIG2HuffmanTableLine line);
    public void AddLowerRangeLine(JBIG2HuffmanTableLine line);
    public void AddOOBLine(JBIG2HuffmanTableLine line);
    public void AddRunCode(Nullable`1<int> code, int codeLen, int value);
    private void AddTableLine(JBIG2HuffmanTableLine line, Func`1<IHuffmanTreeNode> createLeaf);
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTreeLeaf : object {
    private int rangelen;
    private int rangelow;
    public JBIG2HuffmanTreeLeaf(int rangelen, int rangelow);
    public sealed virtual Nullable`1<int> DecodeValue(PdfBitReader reader);
    public sealed virtual void BuildTree(int code, int curLen, Func`1<IHuffmanTreeNode> createLeaf);
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTreeLowerRangeLeaf : object {
    private int rangelen;
    private int rangelow;
    public JBIG2HuffmanTreeLowerRangeLeaf(int rangelen, int rangelow);
    public sealed virtual Nullable`1<int> DecodeValue(PdfBitReader reader);
    public sealed virtual void BuildTree(int code, int curLen, Func`1<IHuffmanTreeNode> createLeaf);
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTreeNode : object {
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Right>k__BackingField;
    public IHuffmanTreeNode Left { get; public set; }
    public IHuffmanTreeNode Right { get; public set; }
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(IHuffmanTreeNode value);
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(IHuffmanTreeNode value);
    public sealed virtual Nullable`1<int> DecodeValue(PdfBitReader reader);
    public sealed virtual void BuildTree(int code, int curLen, Func`1<IHuffmanTreeNode> createLeaf);
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTreeOOBLeaf : object {
    public sealed virtual Nullable`1<int> DecodeValue(PdfBitReader reader);
    public sealed virtual void BuildTree(int code, int curLen, Func`1<IHuffmanTreeNode> createLeaf);
}
public class DevExpress.Pdf.Native.JBIG2HuffmanTreeRunCodeLeaf : object {
    private int value;
    public JBIG2HuffmanTreeRunCodeLeaf(int value);
    public sealed virtual void BuildTree(int code, int curLen, Func`1<IHuffmanTreeNode> createLeaf);
    public sealed virtual Nullable`1<int> DecodeValue(PdfBitReader reader);
}
public class DevExpress.Pdf.Native.JBIG2Image : object {
    private int width;
    private int height;
    private int stride;
    private Byte[] data;
    private Dictionary`2<int, JBIG2SegmentHeader> segments;
    private Dictionary`2<int, JBIG2SegmentHeader> globalSegments;
    public int Width { get; }
    public int Height { get; }
    public int Stride { get; }
    public Dictionary`2<int, JBIG2SegmentHeader> Segments { get; }
    public Dictionary`2<int, JBIG2SegmentHeader> GlobalSegments { get; }
    public Byte[] Data { get; }
    public JBIG2Image(int width, int height);
    internal static JBIG2Image DecodeImage(Byte[] data, Dictionary`2<int, JBIG2SegmentHeader> globalSegments);
    public static Byte[] Decode(Byte[] data, Dictionary`2<int, JBIG2SegmentHeader> globalSegments);
    private static Func`3<byte, byte, byte> CreateComposeOperatorByte(int value);
    private static Func`3<int, int, int> CreateComposeOperator(int value);
    public int get_Width();
    public int get_Height();
    public int get_Stride();
    public Dictionary`2<int, JBIG2SegmentHeader> get_Segments();
    public Dictionary`2<int, JBIG2SegmentHeader> get_GlobalSegments();
    public Byte[] get_Data();
    public void SetDimensions(int width, int height, bool initialPixelValue);
    public void SetPixel(int x, int y, int value);
    public int GetPixel(int x, int y);
    internal void Composite(JBIG2Image image, int x, int y, int composeOperator);
    private void CompositeFast(JBIG2Image image, int composeOperator);
    private void CompositeOrFast(JBIG2Image image, int x, int y);
    private void CompositeGeneral(JBIG2Image image, int x, int y, int composeOperator);
    internal void Clear(bool color);
}
public class DevExpress.Pdf.Native.JBIG2PageInfo : JBIG2SegmentData {
    private static int pageDefaultPixelValueMask;
    protected bool CacheData { get; }
    public JBIG2PageInfo(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    protected virtual bool get_CacheData();
}
public class DevExpress.Pdf.Native.JBIG2PatternDictionary : JBIG2SegmentData {
    private IList`1<JBIG2Image> patterns;
    public IList`1<JBIG2Image> Patterns { get; }
    public JBIG2PatternDictionary(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    public IList`1<JBIG2Image> get_Patterns();
}
public class DevExpress.Pdf.Native.JBIG2RefinementRegion : JBIG2SegmentData {
    private JBIG2Image referenceGlyph;
    private int template;
    private int dx;
    private int dy;
    private Int32[] at;
    private JBIG2Decoder decoder;
    public JBIG2RefinementRegion(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    internal JBIG2RefinementRegion(JBIG2Image referenceGlyph, int dx, int dy, int template, Int32[] at, JBIG2Decoder decoder, JBIG2Image image);
    public virtual void Process();
    private int Template1Context(int x, int y);
    private int Template0Context(int x, int y);
}
public class DevExpress.Pdf.Native.JBIG2RegionSegmentInfo : object {
    private int width;
    private int height;
    private int x;
    private int y;
    private int composeOperator;
    public int Width { get; }
    public int Height { get; }
    public int X { get; }
    public int Y { get; }
    public int ComposeOperator { get; }
    public JBIG2RegionSegmentInfo(JBIG2StreamHelper helper);
    public JBIG2RegionSegmentInfo(int width, int height);
    public int get_Width();
    public int get_Height();
    public int get_X();
    public int get_Y();
    public int get_ComposeOperator();
}
public abstract class DevExpress.Pdf.Native.JBIG2SegmentData : object {
    private JBIG2SegmentHeader header;
    private JBIG2Image image;
    private JBIG2StreamHelper streamHelper;
    public JBIG2SegmentHeader Header { get; }
    public JBIG2Image Image { get; }
    protected JBIG2StreamHelper StreamHelper { get; }
    protected bool CacheData { get; }
    protected JBIG2SegmentData(JBIG2Image image);
    protected JBIG2SegmentData(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    public static JBIG2SegmentData Create(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    public JBIG2SegmentHeader get_Header();
    public JBIG2Image get_Image();
    protected JBIG2StreamHelper get_StreamHelper();
    protected virtual bool get_CacheData();
    protected void DoCacheData(int dataLength);
    public virtual void Process();
    private List`1<T> GetReferredSegment();
    protected List`1<JBIG2SymbolDictionary> GetSDReferred();
    protected List`1<JBIG2HuffmanTableSegment> GetUserDefinedHuffmanTables();
}
public class DevExpress.Pdf.Native.JBIG2SegmentHeader : object {
    private static int pageAssociationSizeFlagMask;
    private List`1<int> referredToSegments;
    private int number;
    private byte flags;
    private int pageAssociation;
    private int dataLength;
    private JBIG2SegmentData data;
    public int Number { get; }
    public byte Flags { get; }
    public int PageAssociation { get; }
    public int DataLength { get; }
    public JBIG2SegmentData Data { get; }
    public List`1<int> ReferredToSegments { get; }
    public bool EndOfFile { get; }
    public JBIG2SegmentHeader(Stream stream, JBIG2Image image);
    public int get_Number();
    public byte get_Flags();
    public int get_PageAssociation();
    public int get_DataLength();
    public JBIG2SegmentData get_Data();
    public List`1<int> get_ReferredToSegments();
    public bool get_EndOfFile();
    public void Process();
}
public class DevExpress.Pdf.Native.JBIG2StreamHelper : PdfBigEndianStreamReader {
    public JBIG2StreamHelper(Byte[] data);
    public JBIG2StreamHelper(Stream stream);
    internal Int32[] ReadAdaptiveTemplate(int length);
    public JBIG2StreamHelper ReadData(long dataLength);
}
public class DevExpress.Pdf.Native.JBIG2SymbolDictionary : JBIG2SegmentData {
    [CompilerGeneratedAttribute]
private List`1<JBIG2Image> <Glyphs>k__BackingField;
    public List`1<JBIG2Image> Glyphs { get; }
    public JBIG2SymbolDictionary(JBIG2Image image);
    public JBIG2SymbolDictionary(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    [CompilerGeneratedAttribute]
public List`1<JBIG2Image> get_Glyphs();
}
public class DevExpress.Pdf.Native.JBIG2SymbolDictionaryArithmeticParser : JBIG2SymbolDictionaryParser`1<JBIG2Decoder> {
    [CompilerGeneratedAttribute]
private JBIG2Decoder <Decoder>k__BackingField;
    protected JBIG2Decoder Decoder { get; }
    public JBIG2SymbolDictionaryArithmeticParser(JBIG2StreamHelper streamHelper, IList`1<JBIG2SymbolDictionary> sdReferred, JBIG2SegmentHeader segmentHeader, int flags);
    [CompilerGeneratedAttribute]
protected virtual JBIG2Decoder get_Decoder();
    protected virtual void DecodeNonRefaggGLyph(int symWidth, int hcheight);
    protected virtual void DecodeRefaggNonRefaggninstGlyph(int symWidth, int hcheight, int refaggninst);
    protected virtual void DecodeRefaggRefaggninstGlyph(int symWidth, int hcheight);
    protected virtual void ProcessStripBitmap(int hcheight);
}
public class DevExpress.Pdf.Native.JBIG2SymbolDictionaryHuffmanDecoder : JBIG2HuffmanDecoder {
    private IHuffmanTreeNode sdhuffdh;
    private IHuffmanTreeNode sdhuffdw;
    private IHuffmanTreeNode sdhuffbmsize;
    private IHuffmanTreeNode sdhuffagginst;
    private IHuffmanTreeNode huffmanTableB1;
    public JBIG2SymbolDictionaryHuffmanDecoder(JBIG2StreamHelper sh, IHuffmanTreeNode sdhuffdh, IHuffmanTreeNode sdhuffdw, IHuffmanTreeNode sdhuffbmsize, IHuffmanTreeNode sdhuffagginst);
    public sealed virtual int DecodeAI();
    public sealed virtual int DecodeDH();
    public sealed virtual int DecodeDW();
    public int DecodeBmsize();
    public sealed virtual int DecodeEX();
    public Byte[] ReadBytes(int count);
}
public class DevExpress.Pdf.Native.JBIG2SymbolDictionaryHuffmanParser : JBIG2SymbolDictionaryParser`1<JBIG2SymbolDictionaryHuffmanDecoder> {
    private int bitmapUsed;
    private int bitmapRetained;
    private List`1<int> sdnewsymwidths;
    [CompilerGeneratedAttribute]
private JBIG2SymbolDictionaryHuffmanDecoder <Decoder>k__BackingField;
    protected JBIG2SymbolDictionaryHuffmanDecoder Decoder { get; }
    public JBIG2SymbolDictionaryHuffmanParser(JBIG2StreamHelper streamHelper, IList`1<JBIG2SymbolDictionary> sdReferred, JBIG2SegmentHeader segmentHeader, int flags, IList`1<JBIG2HuffmanTableSegment> userDefinedTables);
    [CompilerGeneratedAttribute]
protected virtual JBIG2SymbolDictionaryHuffmanDecoder get_Decoder();
    protected virtual void DecodeNonRefaggGLyph(int symWidth, int hcheight);
    protected virtual void DecodeRefaggNonRefaggninstGlyph(int symWidth, int hcheight, int refaggninst);
    protected virtual void DecodeRefaggRefaggninstGlyph(int symWidth, int hcheight);
    protected virtual void ProcessStripBitmap(int hcheight);
}
public abstract class DevExpress.Pdf.Native.JBIG2SymbolDictionaryParser`1 : object {
    private bool sdrefagg;
    private int sdnumexsyms;
    [CompilerGeneratedAttribute]
private int <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sdtemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sdrtemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sdnumnewsyms>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JBIG2Image> <Syms>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Sdat>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Sdrat>k__BackingField;
    [CompilerGeneratedAttribute]
private JBIG2SegmentHeader <SegmentHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private JBIG2StreamHelper <StreamHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sdnuminsyms>k__BackingField;
    protected T Decoder { get; }
    protected int Limit { get; }
    protected int Sdtemplate { get; }
    protected int Sdrtemplate { get; }
    protected int Sdnumnewsyms { get; }
    protected List`1<JBIG2Image> Syms { get; }
    protected Int32[] Sdat { get; }
    protected Int32[] Sdrat { get; }
    protected JBIG2SegmentHeader SegmentHeader { get; }
    protected JBIG2StreamHelper StreamHelper { get; }
    protected int Sdnuminsyms { get; }
    protected JBIG2SymbolDictionaryParser`1(JBIG2StreamHelper streamHelper, IList`1<JBIG2SymbolDictionary> sdReferred, JBIG2SegmentHeader segmentHeader, int flags);
    protected abstract virtual T get_Decoder();
    [CompilerGeneratedAttribute]
protected int get_Limit();
    [CompilerGeneratedAttribute]
protected int get_Sdtemplate();
    [CompilerGeneratedAttribute]
protected int get_Sdrtemplate();
    [CompilerGeneratedAttribute]
protected int get_Sdnumnewsyms();
    [CompilerGeneratedAttribute]
protected List`1<JBIG2Image> get_Syms();
    [CompilerGeneratedAttribute]
protected Int32[] get_Sdat();
    [CompilerGeneratedAttribute]
protected Int32[] get_Sdrat();
    [CompilerGeneratedAttribute]
protected JBIG2SegmentHeader get_SegmentHeader();
    [CompilerGeneratedAttribute]
protected JBIG2StreamHelper get_StreamHelper();
    [CompilerGeneratedAttribute]
protected int get_Sdnuminsyms();
    public List`1<JBIG2Image> Process();
    private List`1<JBIG2Image> GetExportedSymbols();
    protected abstract virtual void DecodeNonRefaggGLyph(int symWidth, int hcheight);
    protected abstract virtual void DecodeRefaggNonRefaggninstGlyph(int symWidth, int hcheight, int refaggninst);
    protected abstract virtual void DecodeRefaggRefaggninstGlyph(int symWidth, int hcheight);
    protected abstract virtual void ProcessStripBitmap(int hcheight);
}
public class DevExpress.Pdf.Native.JBIG2Template0Decoder : JBIG2AdaptiveTemplateRegionDecoder {
    public JBIG2Template0Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
}
public class DevExpress.Pdf.Native.JBIG2Template1Decoder : JBIG2AdaptiveTemplateRegionDecoder {
    public JBIG2Template1Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
}
public class DevExpress.Pdf.Native.JBIG2Template2aDecoder : JBIG2GenericRegionArithmeticDecoder {
    public JBIG2Template2aDecoder(JBIG2Image image, JBIG2Decoder decoder);
    public virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2Template2Decoder : JBIG2GenericRegionArithmeticDecoder {
    public JBIG2Template2Decoder(JBIG2Image image, JBIG2Decoder decoder);
    public virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2Template3Decoder : JBIG2AdaptiveTemplateRegionDecoder {
    public JBIG2Template3Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
}
public class DevExpress.Pdf.Native.JBIG2TextRegion : JBIG2SegmentData {
    private JBIG2RegionSegmentInfo regionInfo;
    private IJBIG2TextRegionParser parser;
    protected bool CacheData { get; }
    public JBIG2TextRegion(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
    internal JBIG2TextRegion(int refaggninst, int sdrtemplate, Int32[] at, List`1<JBIG2Image> glyphs, JBIG2Decoder decoder, JBIG2Image image);
    internal JBIG2TextRegion(JBIG2StreamHelper streamHelper, JBIG2TextRegionHuffmanTables tables, int refaggninst, int sdrtemplate, Int32[] at, List`1<JBIG2Image> glyphs, JBIG2Image image, int sdnuminsyms, int sdnumnewsyms);
    protected virtual bool get_CacheData();
    public virtual void Process();
}
public class DevExpress.Pdf.Native.JBIG2TextRegionArithmeticDecoderParser : JBIG2TextRegionParser`1<JBIG2Decoder> {
    [CompilerGeneratedAttribute]
private JBIG2Decoder <Decoder>k__BackingField;
    protected JBIG2Decoder Decoder { get; }
    public JBIG2TextRegionArithmeticDecoderParser(JBIG2StreamHelper streamHelper, JBIG2RegionSegmentInfo regionInfo, int flags, IList`1<JBIG2SymbolDictionary> sdReferred);
    public JBIG2TextRegionArithmeticDecoderParser(int refaggninst, int sdrtemplate, Int32[] at, List`1<JBIG2Image> glyphs, JBIG2Decoder decoder, JBIG2RegionSegmentInfo regionInfo);
    [CompilerGeneratedAttribute]
protected virtual JBIG2Decoder get_Decoder();
    protected virtual void RefinementDecode(JBIG2Image ib, int dx, int dy, JBIG2Image refImage);
}
public class DevExpress.Pdf.Native.JBIG2TextRegionHuffmanDecoder : JBIG2HuffmanDecoder {
    private JBIG2TextRegionHuffmanTables tables;
    private int sbstripsBitNumber;
    private IHuffmanTreeNode rootID;
    public JBIG2TextRegionHuffmanDecoder(JBIG2StreamHelper sh, JBIG2TextRegionHuffmanTables huffmanTables, int sbstrips, IHuffmanTreeNode root);
    public sealed virtual int DecodeDS();
    public sealed virtual int DecodeDT();
    public sealed virtual int DecodeFS();
    public sealed virtual int DecodeID();
    public sealed virtual int DecodeIT();
    public sealed virtual int DecodeRDH();
    public sealed virtual int DecodeRDW();
    public sealed virtual int DecodeRDX();
    public sealed virtual int DecodeRDY();
    public int DecodeRSize();
    public sealed virtual int DecodeRI();
    public void IgnoreExtendedBits();
}
public class DevExpress.Pdf.Native.JBIG2TextRegionHuffmanDecoderParser : JBIG2TextRegionParser`1<JBIG2TextRegionHuffmanDecoder> {
    private JBIG2TextRegionHuffmanTables tables;
    private Nullable`1[] sbsymcodes;
    [CompilerGeneratedAttribute]
private JBIG2TextRegionHuffmanDecoder <Decoder>k__BackingField;
    protected JBIG2TextRegionHuffmanDecoder Decoder { get; }
    public JBIG2TextRegionHuffmanDecoderParser(JBIG2StreamHelper streamHelper, JBIG2RegionSegmentInfo regionInfo, int flags, IList`1<JBIG2SymbolDictionary> sdReferred, IList`1<JBIG2HuffmanTableSegment> userDefinedTables);
    public JBIG2TextRegionHuffmanDecoderParser(JBIG2StreamHelper streamHelper, JBIG2TextRegionHuffmanTables tables, int refaggninst, int sdrtemplate, Int32[] at, List`1<JBIG2Image> glyphs, JBIG2RegionSegmentInfo regionInfo, int sdnuminsyms, int sdnumnewsyms);
    private static void AddRun(int length, int value, IList`1<int> list);
    private static IList`1<int> ReadSBSYMCODES(int sbnumsyms, JBIG2StreamHelper streamHelper);
    [CompilerGeneratedAttribute]
protected virtual JBIG2TextRegionHuffmanDecoder get_Decoder();
    protected virtual void RefinementDecode(JBIG2Image ib, int dx, int dy, JBIG2Image refImage);
}
public class DevExpress.Pdf.Native.JBIG2TextRegionHuffmanTables : object {
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhufffs>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhuffds>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhuffdt>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhuffrdw>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhuffrdh>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhuffrdx>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhuffrdy>k__BackingField;
    [CompilerGeneratedAttribute]
private IHuffmanTreeNode <Sbhuffrsize>k__BackingField;
    public IHuffmanTreeNode Sbhufffs { get; }
    public IHuffmanTreeNode Sbhuffds { get; }
    public IHuffmanTreeNode Sbhuffdt { get; }
    public IHuffmanTreeNode Sbhuffrdw { get; }
    public IHuffmanTreeNode Sbhuffrdh { get; }
    public IHuffmanTreeNode Sbhuffrdx { get; }
    public IHuffmanTreeNode Sbhuffrdy { get; }
    public IHuffmanTreeNode Sbhuffrsize { get; }
    public JBIG2TextRegionHuffmanTables(int huffFlags, IList`1<JBIG2HuffmanTableSegment> userDefinedTables);
    public JBIG2TextRegionHuffmanTables(IHuffmanTreeNode sbhufffs, IHuffmanTreeNode sbhuffds, IHuffmanTreeNode sbhuffdt, IHuffmanTreeNode sbhuffrdw, IHuffmanTreeNode sbhuffrdh, IHuffmanTreeNode sbhuffrdx, IHuffmanTreeNode sbhuffrdy, IHuffmanTreeNode sbhuffrsize);
    private static IHuffmanTreeNode SelectHuffmanTable(int flag, JBIG2UserHuffmanTablesEnumerator userDefinedTablesEnumerator);
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhufffs();
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhuffds();
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhuffdt();
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhuffrdw();
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhuffrdh();
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhuffrdx();
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhuffrdy();
    [CompilerGeneratedAttribute]
public IHuffmanTreeNode get_Sbhuffrsize();
}
public abstract class DevExpress.Pdf.Native.JBIG2TextRegionParser`1 : object {
    private bool sbrefine;
    private int logsbstrips;
    private JBIG2Corner refcorner;
    private bool transposed;
    private int sbcombop;
    private bool sbdefpixel;
    private int sbdsoffset;
    private int sbnuminstances;
    private JBIG2RegionSegmentInfo regionInfo;
    [CompilerGeneratedAttribute]
private int <HuffmanFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JBIG2Image> <Glyphs>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Sbrat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sbrtemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sbstrips>k__BackingField;
    [CompilerGeneratedAttribute]
private JBIG2StreamHelper <StreamHelper>k__BackingField;
    protected int HuffmanFlags { get; }
    protected List`1<JBIG2Image> Glyphs { get; }
    protected Int32[] Sbrat { get; }
    protected int Sbrtemplate { get; }
    protected int Sbstrips { get; }
    protected T Decoder { get; }
    protected JBIG2StreamHelper StreamHelper { get; }
    protected JBIG2TextRegionParser`1(JBIG2StreamHelper streamHelper, JBIG2RegionSegmentInfo regionInfo, int flags, IList`1<JBIG2SymbolDictionary> sdReferred);
    protected JBIG2TextRegionParser`1(int refaggninst, int sdrtemplate, Int32[] at, List`1<JBIG2Image> glyphs, JBIG2RegionSegmentInfo regionInfo);
    [CompilerGeneratedAttribute]
protected int get_HuffmanFlags();
    [CompilerGeneratedAttribute]
protected List`1<JBIG2Image> get_Glyphs();
    [CompilerGeneratedAttribute]
protected Int32[] get_Sbrat();
    [CompilerGeneratedAttribute]
protected int get_Sbrtemplate();
    [CompilerGeneratedAttribute]
protected int get_Sbstrips();
    protected abstract virtual T get_Decoder();
    [CompilerGeneratedAttribute]
protected JBIG2StreamHelper get_StreamHelper();
    public sealed virtual JBIG2Image Process();
    private JBIG2Image RefinementDecode(JBIG2Image ib);
    protected abstract virtual void RefinementDecode(JBIG2Image ib, int dx, int dy, JBIG2Image refImage);
}
public class DevExpress.Pdf.Native.JBIG2TPGDON0Decoder : JBIG2TPGDONDecoder {
    private static Int32[] nominalGbat;
    protected int InitialContext { get; }
    protected JBIG2TPGDON0Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    private static JBIG2TPGDON0Decoder();
    public static JBIG2TPGDON0Decoder CreateTPGDON0Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual int get_InitialContext();
    protected virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
}
public class DevExpress.Pdf.Native.JBIG2TPGDON1Decoder : JBIG2TPGDONDecoder {
    protected int InitialContext { get; }
    internal JBIG2TPGDON1Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual int get_InitialContext();
    protected virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
}
public class DevExpress.Pdf.Native.JBIG2TPGDON2Decoder : JBIG2TPGDONDecoder {
    protected int InitialContext { get; }
    internal JBIG2TPGDON2Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual int get_InitialContext();
    protected virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
}
public class DevExpress.Pdf.Native.JBIG2TPGDON3Decoder : JBIG2TPGDONDecoder {
    protected int InitialContext { get; }
    internal JBIG2TPGDON3Decoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    protected virtual int get_InitialContext();
    protected virtual Int32[] CreateAdaptiveTemplate(Int32[] gbat);
}
public abstract class DevExpress.Pdf.Native.JBIG2TPGDONDecoder : JBIG2AdaptiveTemplateRegionDecoder {
    protected int InitialContext { get; }
    protected JBIG2TPGDONDecoder(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat);
    internal static JBIG2TPGDONDecoder Create(JBIG2Image image, JBIG2Decoder decoder, Int32[] gbat, int gbTemplate);
    protected abstract virtual int get_InitialContext();
    public virtual void Decode();
}
public class DevExpress.Pdf.Native.JBIG2UnknownSegment : JBIG2SegmentData {
    public JBIG2UnknownSegment(JBIG2StreamHelper streamHelper, JBIG2SegmentHeader header, JBIG2Image image);
}
public class DevExpress.Pdf.Native.JBIG2UserHuffmanTablesEnumerator : object {
    private IEnumerator`1<JBIG2HuffmanTableSegment> enumerator;
    public JBIG2UserHuffmanTablesEnumerator(IList`1<JBIG2HuffmanTableSegment> userDefinedTables);
    public IHuffmanTreeNode GetNext();
}
public abstract class DevExpress.Pdf.Native.JPXArea : object {
    private int x0;
    private int y0;
    private int x1;
    private int y1;
    public int X0 { get; protected set; }
    public int Y0 { get; protected set; }
    public int X1 { get; protected set; }
    public int Y1 { get; protected set; }
    public int Width { get; }
    public int Height { get; }
    public int get_X0();
    protected void set_X0(int value);
    public int get_Y0();
    protected void set_Y0(int value);
    public int get_X1();
    protected void set_X1(int value);
    public int get_Y1();
    protected void set_Y1(int value);
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
}
public class DevExpress.Pdf.Native.JPXBaseResolutionLevel : JPXResolutionLevel {
    private JPXLLSubBand llSubBand;
    public JPXLLSubBand LLSubBand { get; }
    public JPXBaseResolutionLevel(JPXTileComponent component, int level, JPXCodingStyleComponent codingStyle);
    public JPXLLSubBand get_LLSubBand();
}
public class DevExpress.Pdf.Native.JPXBitReader : PdfBitReader {
    public JPXBitReader(Stream stream);
    protected virtual bool GoToNextByte();
    public void AlignToByte();
}
public abstract class DevExpress.Pdf.Native.JPXBox : object {
    public static JPXBox Parse(PdfBigEndianStreamReader reader, JPXImage image);
}
public class DevExpress.Pdf.Native.JPXCodeBlock : JPXArea {
    private List`1<byte> data;
    private int zeroBitPlanes;
    private byte codingPassCount;
    private int lBlock;
    private bool isFirstTimeInclusion;
    public int ZeroBitPlanes { get; public set; }
    public int LBlock { get; public set; }
    public byte CodingPassCount { get; }
    public Byte[] EncodedData { get; }
    public bool IsFirstTimeInclusion { get; public set; }
    public JPXCodeBlock(int x, int y, int width, int height);
    public int get_ZeroBitPlanes();
    public void set_ZeroBitPlanes(int value);
    public int get_LBlock();
    public void set_LBlock(int value);
    public byte get_CodingPassCount();
    public Byte[] get_EncodedData();
    public bool get_IsFirstTimeInclusion();
    public void set_IsFirstTimeInclusion(bool value);
    public void AddChunk(JPXCodeBlockChunk chunk);
}
public class DevExpress.Pdf.Native.JPXCodeBlockChunk : object {
    private byte codingPassCount;
    private Byte[] data;
    public byte CodingPassCount { get; }
    public Byte[] Data { get; }
    public JPXCodeBlockChunk(byte codingPassCount, Byte[] data);
    public byte get_CodingPassCount();
    public Byte[] get_Data();
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.JPXCodeBlockCodingStyle : Enum {
    public int value__;
    public static JPXCodeBlockCodingStyle SelectiveArithmeticCodingBypass;
    public static JPXCodeBlockCodingStyle ResetContextProbabilities;
    public static JPXCodeBlockCodingStyle TerminationOnEachCodingPass;
    public static JPXCodeBlockCodingStyle VerticallyCausalContext;
    public static JPXCodeBlockCodingStyle PredictableTermination;
    public static JPXCodeBlockCodingStyle UseSegmentationSymbols;
}
public class DevExpress.Pdf.Native.JPXCodeBlockHeaderData : object {
    private JPXCodeBlock codeBlock;
    private byte codingPasses;
    private int chunkLength;
    public JPXCodeBlock CodeBlock { get; }
    public byte CodingPasses { get; }
    public int ChunkLength { get; }
    public JPXCodeBlockHeaderData(JPXCodeBlock codeBlock, byte codingPasses, int chunkLength);
    public JPXCodeBlock get_CodeBlock();
    public byte get_CodingPasses();
    public int get_ChunkLength();
}
public class DevExpress.Pdf.Native.JPXCodeBlocksBuilder : object {
    private int x0;
    private int x1;
    private int y0;
    private int y1;
    private int codeBlockWidth;
    private int codeBlockHeight;
    private int rightCodeBlockBand;
    private int bottomCodeBlockBand;
    private int startInnerHorizontalOffset;
    private int actualLeftBlockWidth;
    private JPXCodeBlock[] codeBlocks;
    private int codeBlockIndex;
    private JPXCodeBlocksBuilder(JPXSubBand subBand, int codeBlockWidth, int codeBlockHeight);
    public static JPXCodeBlock[] Build(JPXSubBand subBand, int codeBlockWidth, int codeBlockHeight);
    private JPXCodeBlock[] Build();
    private void AddRow(int top, int codeBlockHeight);
}
public class DevExpress.Pdf.Native.JPXCodeStreamEndMarker : JPXMarker {
    public static byte Type;
}
public class DevExpress.Pdf.Native.JPXCodingStyleComponent : object {
    private int decompositionLevelCount;
    private int codeBlockWidthExponent;
    private int codeBlockHeightExponent;
    private JPXCodeBlockCodingStyle codeBlockCodingStyle;
    private bool useWaveletTransformation;
    private JPXPrecinctSize[] precinctSizes;
    public int DecompositionLevelCount { get; }
    public int CodeBlockWidthExponent { get; }
    public int CodeBlockHeightExponent { get; }
    public JPXCodeBlockCodingStyle CodeBlockCodingStyle { get; }
    public bool UseWaveletTransformation { get; }
    public JPXPrecinctSize[] PrecinctSizes { get; }
    public JPXCodingStyleComponent(PdfBigEndianStreamReader reader, bool usePrecincts);
    public int get_DecompositionLevelCount();
    public int get_CodeBlockWidthExponent();
    public int get_CodeBlockHeightExponent();
    public JPXCodeBlockCodingStyle get_CodeBlockCodingStyle();
    public bool get_UseWaveletTransformation();
    public JPXPrecinctSize[] get_PrecinctSizes();
}
public class DevExpress.Pdf.Native.JPXCodingStyleComponentMarker : JPXMarker {
    public static byte Type;
    public JPXCodingStyleComponentMarker(PdfBigEndianStreamReader reader);
}
public class DevExpress.Pdf.Native.JPXCodingStyleDefault : ValueType {
    private int numberOfLayers;
    private JPXProgressionOrder progressionOrder;
    private bool isMultipleComponentTransformationSpecified;
    public int NumberOfLayers { get; }
    public JPXProgressionOrder ProgressionOrder { get; }
    public bool IsMultipleComponentTransformationSpecified { get; }
    public JPXCodingStyleDefault(PdfBigEndianStreamReader reader);
    public int get_NumberOfLayers();
    public JPXProgressionOrder get_ProgressionOrder();
    public bool get_IsMultipleComponentTransformationSpecified();
}
public class DevExpress.Pdf.Native.JPXCodingStyleDefaultMarker : JPXMarker {
    public static byte Type;
    public JPXCodingStyleDefaultMarker(PdfBigEndianStreamReader reader, JPXImage image);
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.JPXCodingStyleParameter : Enum {
    public int value__;
    public static JPXCodingStyleParameter UsePrecincts;
    public static JPXCodingStyleParameter UseSOPMarker;
    public static JPXCodingStyleParameter UseEPHMarker;
}
public class DevExpress.Pdf.Native.JPXCoefficient : ValueType {
    private static byte significanceMask;
    private static byte signMask;
    private static byte isNotFirstRefinementMask;
    private static byte verticalNeighborSignificanceMask;
    private static byte horizontalNeighborSignificanceMask;
    private byte flags;
    private byte bitsDecoded;
    private int magnitude;
    private byte neighborSignificance;
    private byte calculatedSignificancesStepNumber;
    private byte notZeroContextLabelPassNumber;
    public byte Significance { get; public set; }
    public byte Sign { get; public set; }
    public int Magnitude { get; public set; }
    public bool IsNotFirstRefinement { get; public set; }
    public byte BitsDecoded { get; public set; }
    public byte VerticalNeighborSignificance { get; }
    public byte HorizontalNeighborSignificance { get; }
    public byte DiagonalNeighborSignificance { get; }
    public byte RawNeighborSignificance { get; }
    public byte CalculatedSignificancesStepNumber { get; public set; }
    public byte NotZeroContextLabelPassNumber { get; public set; }
    public byte get_Significance();
    public void set_Significance(byte value);
    public byte get_Sign();
    public void set_Sign(byte value);
    public int get_Magnitude();
    public void set_Magnitude(int value);
    public bool get_IsNotFirstRefinement();
    public void set_IsNotFirstRefinement(bool value);
    public byte get_BitsDecoded();
    public void set_BitsDecoded(byte value);
    public byte get_VerticalNeighborSignificance();
    public byte get_HorizontalNeighborSignificance();
    public byte get_DiagonalNeighborSignificance();
    public byte get_RawNeighborSignificance();
    public byte get_CalculatedSignificancesStepNumber();
    public void set_CalculatedSignificancesStepNumber(byte value);
    public byte get_NotZeroContextLabelPassNumber();
    public void set_NotZeroContextLabelPassNumber(byte value);
    public void IncrementDiagonalNeighborSignificance();
    public void IncrementHorizontalNeighborSignificance();
    public void IncrementVerticalNeighborSignificance();
    public int ToInteger();
}
public class DevExpress.Pdf.Native.JPXCoefficientBitModel : object {
    private static int runLengthContexIndex;
    private static int uniformContextIndex;
    private static Byte[0...,0...] signContextLabels;
    private int codeBlockWidth;
    private int codeBlockHeight;
    private PdfArithmeticContext arithmeticContext;
    private Byte[] contextLabelLookupTable;
    private JPXCoefficient[] coefficients;
    private byte passCount;
    private JPXCoefficientBitModel(JPXCodeBlock codeBlock, Stream stream, JPXSubBand subBand);
    private static JPXCoefficientBitModel();
    public static JPXCoefficient[] Decode(JPXCodeBlock codeBlock, JPXSubBand subBand, JPXCodeBlockCodingStyle codeBlockCodingStyle);
    private static int NormalizeContribution(int contribution);
    private JPXCoefficient[] Decode(JPXCodeBlockCodingStyle codeBlockCodingStyle);
    private void CleanUpPass();
    private void SignificancePropagationPass();
    private void MagnitudeRefinementPass();
    private int GetSignContribution(int index);
    private void ReadSignBit(int x, int y);
    private JPXCoefficient ReadSignBit(int x, int y, int index, JPXCoefficient coefficient);
    private void IterateCodeBlock(Action`4<int, int, int, JPXCoefficient> action);
    [CompilerGeneratedAttribute]
private void <SignificancePropagationPass>b__14_0(int index, int x, int y, JPXCoefficient coefficient);
    [CompilerGeneratedAttribute]
private void <MagnitudeRefinementPass>b__15_0(int index, int x, int y, JPXCoefficient coefficient);
}
public class DevExpress.Pdf.Native.JPXColorSpecificationBox : JPXBox {
    public static int Type;
    public JPXColorSpecificationBox(PdfBigEndianStreamReader reader, int length);
}
public abstract class DevExpress.Pdf.Native.JPXColorTransformation : object {
    private int width;
    private int height;
    private JPXTileComponentData[] componentsData;
    protected JPXTileComponentData[] ComponentsData { get; }
    protected int Width { get; }
    protected JPXColorTransformation(int width, int height, JPXTileComponentData[] componentsData);
    public static JPXColorTransformation Create(JPXTile tile);
    protected JPXTileComponentData[] get_ComponentsData();
    protected int get_Width();
    public void Transform(Byte[] result, int startOffset, int rowWidth);
    public void TransformLine(Byte[] result, int startOffset, int v);
    protected abstract virtual void TransformColor(int v, int h, Byte[] dest, int destOffset);
}
public class DevExpress.Pdf.Native.JPXComponent : ValueType {
    private int bitsPerComponent;
    private int horizontalSeparation;
    private int verticalSeparation;
    private bool isSigned;
    public int BitsPerComponent { get; }
    public bool IsSigned { get; }
    public int HorizontalSeparation { get; }
    public int VerticalSeparation { get; }
    public JPXComponent(int bitsPerComponent, int horizontalSeparation, int verticalSeparation);
    public int get_BitsPerComponent();
    public bool get_IsSigned();
    public int get_HorizontalSeparation();
    public int get_VerticalSeparation();
}
public class DevExpress.Pdf.Native.JPXCompositeResolutionLevel : JPXResolutionLevel {
    private JPXLHSubBand lhSubBand;
    private JPXHLSubBand hlSubBand;
    private JPXHHSubBand hhSubBand;
    public JPXLHSubBand LHSubBand { get; }
    public JPXHLSubBand HLSubBand { get; }
    public JPXHHSubBand HHSubBand { get; }
    public JPXCompositeResolutionLevel(JPXTileComponent component, int level, JPXCodingStyleComponent codingStyle);
    public JPXLHSubBand get_LHSubBand();
    public JPXHLSubBand get_HLSubBand();
    public JPXHHSubBand get_HHSubBand();
}
public class DevExpress.Pdf.Native.JPXContiguousCodeStreamBox : JPXBox {
    public static int Type;
    public JPXContiguousCodeStreamBox(PdfBigEndianStreamReader reader, int length, JPXImage image);
}
public abstract class DevExpress.Pdf.Native.JPXDiscreteWaveletTransformation : object {
    private static int extendSampleCount;
    private JPXSubBandCoefficients subBandCoefficients;
    public JPXSubBandCoefficients SubBandCoefficients { get; }
    protected JPXDiscreteWaveletTransformation(IJPXSubBandCoefficients llSubBandCoefficients);
    private static void Extend(Single[] buffer, int size);
    public JPXSubBandCoefficients get_SubBandCoefficients();
    public void Append(Single[] coefficients, IJPXSubBandCoefficients llCoefficients, IJPXSubBandCoefficients hlCoefficients, IJPXSubBandCoefficients lhCoefficients, IJPXSubBandCoefficients hhCoefficients);
    private void HorizontalReconstruction(Single[] coefficients);
    private void VerticalReconstruction(Single[] coefficients);
    protected abstract virtual void Filter(Single[] y, int i0, int i1);
}
public class DevExpress.Pdf.Native.JPXFileTypeBox : JPXBox {
    public static int Type;
    public JPXFileTypeBox(PdfBigEndianStreamReader reader, int length);
}
public class DevExpress.Pdf.Native.JPXGrayColorTransformation : JPXColorTransformation {
    public JPXGrayColorTransformation(int width, int height, JPXTileComponentData[] componentData);
    protected virtual void TransformColor(int v, int h, Byte[] dest, int destOffset);
}
public class DevExpress.Pdf.Native.JPXHHSubBand : JPXSubBand {
    private static Byte[] table;
    public Byte[] LookupTable { get; }
    protected int HorizontalQuantity { get; }
    protected int VerticalQuantity { get; }
    protected int GainLog { get; }
    private static JPXHHSubBand();
    public JPXHHSubBand(JPXTileComponent component, int resolutionLevelNumber, int codeBlockWidth, int codeBlockHeight);
    private static int CalculateContextLabel(byte v, byte h, byte d);
    public virtual Byte[] get_LookupTable();
    protected virtual int get_HorizontalQuantity();
    protected virtual int get_VerticalQuantity();
    protected virtual int get_GainLog();
}
public class DevExpress.Pdf.Native.JPXHLSubBand : JPXLowPassSubBand {
    private static Byte[] table;
    public Byte[] LookupTable { get; }
    protected int HorizontalQuantity { get; }
    protected int VerticalQuantity { get; }
    protected int GainLog { get; }
    private static JPXHLSubBand();
    public JPXHLSubBand(JPXTileComponent component, int resolutionLevelNumber, int codeBlockWidth, int codeBlockHeight);
    private static int CalculateContextLabel(byte h, byte v, byte d);
    public virtual Byte[] get_LookupTable();
    protected virtual int get_HorizontalQuantity();
    protected virtual int get_VerticalQuantity();
    protected virtual int get_GainLog();
}
public class DevExpress.Pdf.Native.JPXImage : object {
    private JPXSize size;
    private JPXCodingStyleComponent[] codingStyleComponents;
    private JPXQuantizationComponentParameters[] quantizationParameters;
    private int numXTiles;
    private int numYTiles;
    private JPXCodingStyleDefault codingStyleDefault;
    private JPXTileData[] tiles;
    public JPXSize Size { get; public set; }
    public JPXCodingStyleComponent[] CodingStyleComponents { get; }
    public JPXQuantizationComponentParameters[] QuantizationParameters { get; }
    public int NumXTiles { get; }
    public int NumYTiles { get; }
    public JPXCodingStyleDefault CodingStyleDefault { get; public set; }
    public int TileCount { get; }
    public JPXTileData[] Tiles { get; }
    public static JPXImageDecodeResult Decode(Byte[] data);
    public static JPXImage DecodeImage(Byte[] data);
    public JPXSize get_Size();
    public void set_Size(JPXSize value);
    public JPXCodingStyleComponent[] get_CodingStyleComponents();
    public JPXQuantizationComponentParameters[] get_QuantizationParameters();
    public int get_NumXTiles();
    public int get_NumYTiles();
    public JPXCodingStyleDefault get_CodingStyleDefault();
    public void set_CodingStyleDefault(JPXCodingStyleDefault value);
    public int get_TileCount();
    public JPXTileData[] get_Tiles();
    public JPXTile GetTile(int index);
}
public class DevExpress.Pdf.Native.JPXImageDecodeResult : object {
    private Byte[] imageData;
    private int componentsCount;
    public Byte[] ImageData { get; }
    public int ComponentsCount { get; }
    public JPXImageDecodeResult(Byte[] imageData, int componentsCount);
    public Byte[] get_ImageData();
    public int get_ComponentsCount();
}
public class DevExpress.Pdf.Native.JPXImageHeaderBox : JPXBox {
    public static int Type;
    public JPXImageHeaderBox(PdfBigEndianStreamReader reader, int length);
}
public class DevExpress.Pdf.Native.JPXIrreversibleColorTransformation : JPXMultipleComponentTransformation {
    public JPXIrreversibleColorTransformation(int width, int height, JPXTileComponentData[] components);
    protected virtual void Transform(Byte[] data, float y0, float y1, float y2, int destOffset);
}
public class DevExpress.Pdf.Native.JPXIrreversibleDiscreteWaveletTransformation : JPXDiscreteWaveletTransformation {
    private static float alpha;
    private static float beta;
    private static float gamma;
    private static float delta;
    private static float k;
    private static float k1;
    public JPXIrreversibleDiscreteWaveletTransformation(IJPXSubBandCoefficients llSubBandCoefficients);
    protected virtual void Filter(Single[] y, int i0, int i1);
}
public abstract class DevExpress.Pdf.Native.JPXIrreversibleTransformationQuantizationComponentParameters : JPXQuantizationComponentParameters {
    protected JPXIrreversibleTransformationQuantizationComponentParameters(int guardBitCount);
    protected abstract virtual JPXQuantizationStepSize GetStepSize(int subBandIndex);
    public virtual JPXQuantizationHelper CreateHelper(int subBandGainLog, int ri, int subBandIndex);
}
public class DevExpress.Pdf.Native.JPXIrreversibleTransformationQuantizationHelper : JPXQuantizationHelper {
    private int pow;
    private float stepSize;
    public JPXIrreversibleTransformationQuantizationHelper(int subBandGainLog, int ri, JPXQuantizationStepSize quantizationStepSize, int GuardBitCount);
    public virtual float Apply(JPXCoefficient coefficient, int zeroBitPlanes);
}
public class DevExpress.Pdf.Native.JPXJP2HeaderBox : JPXBox {
    public static int Type;
    public JPXJP2HeaderBox(PdfBigEndianStreamReader reader, int length, JPXImage image);
}
public class DevExpress.Pdf.Native.JPXLayerResolutionComponentPrecinctPacketProgressionOrder : JPXPacketProgressionOrder {
    public JPXLayerResolutionComponentPrecinctPacketProgressionOrder(JPXImage image, JPXTile tile);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.JPXLayerResolutionComponentPrecinctPacketProgressionOrder/<GetEnumerator>d__1")]
public virtual IEnumerator`1<JPXPacketPosition> GetEnumerator();
}
public class DevExpress.Pdf.Native.JPXLHSubBand : JPXLowPassSubBand {
    protected int HorizontalQuantity { get; }
    protected int VerticalQuantity { get; }
    protected int GainLog { get; }
    public JPXLHSubBand(JPXTileComponent component, int resolutionLevelNumber, int codeBlockWidth, int codeBlockHeight);
    protected virtual int get_HorizontalQuantity();
    protected virtual int get_VerticalQuantity();
    protected virtual int get_GainLog();
}
public class DevExpress.Pdf.Native.JPXLLSubBand : JPXLowPassSubBand {
    protected int HorizontalQuantity { get; }
    protected int VerticalQuantity { get; }
    protected int GainLog { get; }
    public JPXLLSubBand(JPXTileComponent component, int resolutionLevelNumber, int codeBlockWidth, int codeBlockHeight);
    protected virtual int get_HorizontalQuantity();
    protected virtual int get_VerticalQuantity();
    protected virtual int get_GainLog();
}
public abstract class DevExpress.Pdf.Native.JPXLowPassSubBand : JPXSubBand {
    private static Byte[] table;
    public Byte[] LookupTable { get; }
    private static JPXLowPassSubBand();
    protected JPXLowPassSubBand(JPXTileComponent component, int resolutionLevelNumber, int codeBlockWidth, int codeBlockHeight);
    private static int CalculateContextLabel(byte v, byte h, byte d);
    public virtual Byte[] get_LookupTable();
}
public abstract class DevExpress.Pdf.Native.JPXMarker : object {
    private int dataLength;
    protected int DataLength { get; }
    protected JPXMarker(PdfBigEndianStreamReader reader);
    public static void Read(PdfBigEndianStreamReader reader, JPXImage image, byte type);
    public static JPXMarker Create(PdfBigEndianStreamReader reader, JPXImage image);
    public static JPXMarker Create(PdfBigEndianStreamReader reader, JPXImage image, Nullable`1<int> tileNumber);
    private static JPXMarker Create(PdfBigEndianStreamReader reader, JPXImage image, byte type, Nullable`1<int> tileNumber);
    protected int get_DataLength();
}
public class DevExpress.Pdf.Native.JPXMultipleComponentTransformation : JPXColorTransformation {
    private Single[] firstComponentsData;
    private Single[] secondComponentData;
    private Single[] thirdComponentData;
    public JPXMultipleComponentTransformation(int width, int height, JPXTileComponentData[] components);
    protected virtual void Transform(Byte[] data, float y0, float y1, float y2, int destOffset);
    protected virtual void TransformColor(int v, int h, Byte[] dest, int destOffset);
}
public class DevExpress.Pdf.Native.JPXPacketPosition : object {
    private int component;
    private int layer;
    private int resolutionLevel;
    private int precinct;
    public int Component { get; }
    public int Layer { get; }
    public int ResolutionLevel { get; }
    public int Precinct { get; }
    public JPXPacketPosition(int component, int layer, int resolutionLevel, int precinct);
    public int get_Component();
    public int get_Layer();
    public int get_ResolutionLevel();
    public int get_Precinct();
}
public abstract class DevExpress.Pdf.Native.JPXPacketProgressionOrder : object {
    private JPXImage image;
    private JPXTile tile;
    protected JPXImage Image { get; }
    protected JPXTile Tile { get; }
    protected int MaxResolutionLevel { get; }
    protected JPXPacketProgressionOrder(JPXImage image, JPXTile tile);
    public static JPXPacketProgressionOrder Create(JPXProgressionOrder order, JPXImage image, JPXTile tile);
    protected JPXImage get_Image();
    protected JPXTile get_Tile();
    protected int get_MaxResolutionLevel();
    public abstract virtual IEnumerator`1<JPXPacketPosition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.JPXPrecinct : JPXArea {
    private List`1<JPXCodeBlock> codeBlocks;
    private JPXTagTree inclusionTree;
    private JPXTagTree zeroBitPlaneTree;
    private int codeBlockHorizontalCount;
    private int codeBlockVerticalCount;
    private int number;
    public int CodeBlockHorizontalCount { get; }
    public int CodeBlockVerticalCount { get; }
    public List`1<JPXCodeBlock> CodeBlocks { get; }
    public JPXTagTree InclusionTree { get; }
    public JPXTagTree ZeroBitPlaneTree { get; }
    public int Number { get; }
    public JPXPrecinct(JPXSubBand subBand, int codeBlockWidth, int codeBlockHeight, int x, int y, int width, int height, int number);
    public int get_CodeBlockHorizontalCount();
    public int get_CodeBlockVerticalCount();
    public List`1<JPXCodeBlock> get_CodeBlocks();
    public JPXTagTree get_InclusionTree();
    public JPXTagTree get_ZeroBitPlaneTree();
    public int get_Number();
}
public class DevExpress.Pdf.Native.JPXPrecinctSize : ValueType {
    private int width;
    private int height;
    public int WidthExponent { get; }
    public int HeightExponent { get; }
    public JPXPrecinctSize(int value);
    public int get_WidthExponent();
    public int get_HeightExponent();
}
public enum DevExpress.Pdf.Native.JPXProgressionOrder : Enum {
    public int value__;
    [PdfFieldValueAttribute("0")]
public static JPXProgressionOrder LayerResolutionComponentPosition;
    [PdfFieldValueAttribute("1")]
public static JPXProgressionOrder ResolutionLayerComponentPosition;
    [PdfFieldValueAttribute("2")]
public static JPXProgressionOrder ResolutionPositionComponentLayer;
    [PdfFieldValueAttribute("3")]
public static JPXProgressionOrder PositionComponentResolutionLayer;
    [PdfFieldValueAttribute("4")]
public static JPXProgressionOrder ComponentPositionResolutionLayer;
}
public class DevExpress.Pdf.Native.JPXQuantizationComponentMarker : JPXMarker {
    public static byte Type;
    public JPXQuantizationComponentMarker(PdfBigEndianStreamReader reader, JPXImage image, Nullable`1<int> tileNumber);
}
public abstract class DevExpress.Pdf.Native.JPXQuantizationComponentParameters : object {
    private int guardBitCount;
    public int GuardBitCount { get; }
    protected JPXQuantizationComponentParameters(int guardBitCount);
    public static JPXQuantizationComponentParameters Create(PdfBigEndianStreamReader reader, int byteCount);
    public int get_GuardBitCount();
    public abstract virtual JPXQuantizationHelper CreateHelper(int subBandGainLog, int ri, int subBandIndex);
}
public class DevExpress.Pdf.Native.JPXQuantizationDefaultMarker : JPXMarker {
    public static byte Type;
    public JPXQuantizationDefaultMarker(PdfBigEndianStreamReader reader, JPXImage image);
}
public abstract class DevExpress.Pdf.Native.JPXQuantizationHelper : object {
    protected static float R;
    public abstract virtual float Apply(JPXCoefficient coefficient, int zeroBitPlanes);
}
public class DevExpress.Pdf.Native.JPXQuantizationStepSize : ValueType {
    private byte epsilon;
    private short mu;
    public byte Epsilon { get; }
    public short Mu { get; }
    public JPXQuantizationStepSize(byte epsilon, short mu);
    public static JPXQuantizationStepSize Create(byte v1, byte v2);
    public byte get_Epsilon();
    public short get_Mu();
}
public class DevExpress.Pdf.Native.JPXResolutionLayerComponentPrecinctPacketProgressionOrder : JPXPacketProgressionOrder {
    public JPXResolutionLayerComponentPrecinctPacketProgressionOrder(JPXImage image, JPXTile tile);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.JPXResolutionLayerComponentPrecinctPacketProgressionOrder/<GetEnumerator>d__1")]
public virtual IEnumerator`1<JPXPacketPosition> GetEnumerator();
}
public abstract class DevExpress.Pdf.Native.JPXResolutionLevel : JPXArea {
    private int levelNumber;
    private int precinctWidth;
    private int precinctHeight;
    private int codeBlockWidth;
    private int codeBlockHeight;
    private int numPrecinctsWide;
    private int numPrecinctsHigh;
    private int precinctCount;
    private List`1<JPXPrecinct> precincts;
    public int LevelNumber { get; }
    public int CodeBlockWidth { get; }
    public int CodeBlockHeight { get; }
    public int NumPrecinctsWide { get; }
    public int NumPrecinctsHigh { get; }
    public int PrecinctCount { get; }
    public IList`1<JPXPrecinct> Precincts { get; }
    protected JPXResolutionLevel(JPXTileComponent component, int levelNumber, JPXCodingStyleComponent codingStyle);
    public int get_LevelNumber();
    public int get_CodeBlockWidth();
    public int get_CodeBlockHeight();
    public int get_NumPrecinctsWide();
    public int get_NumPrecinctsHigh();
    public int get_PrecinctCount();
    public IList`1<JPXPrecinct> get_Precincts();
    protected void AppendPrecincts(JPXSubBand subBand);
}
public class DevExpress.Pdf.Native.JPXResolutionPrecinctComponentLayerPacketProgressionOrder : JPXPacketProgressionOrder {
    public JPXResolutionPrecinctComponentLayerPacketProgressionOrder(JPXImage image, JPXTile tile);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.JPXResolutionPrecinctComponentLayerPacketProgressionOrder/<GetEnumerator>d__1")]
public virtual IEnumerator`1<JPXPacketPosition> GetEnumerator();
}
public class DevExpress.Pdf.Native.JPXReversibleColorTransformation : JPXMultipleComponentTransformation {
    public JPXReversibleColorTransformation(int width, int height, JPXTileComponentData[] components);
    protected virtual void Transform(Byte[] data, float y0, float y1, float y2, int destOffset);
}
public class DevExpress.Pdf.Native.JPXReversibleDiscreteWaveletTransformation : JPXDiscreteWaveletTransformation {
    public JPXReversibleDiscreteWaveletTransformation(IJPXSubBandCoefficients llSubBandCoefficients);
    protected virtual void Filter(Single[] y, int i0, int i1);
}
public class DevExpress.Pdf.Native.JPXScalarDerivedQuantizationComponentParameters : JPXIrreversibleTransformationQuantizationComponentParameters {
    private JPXQuantizationStepSize stepSize;
    public JPXScalarDerivedQuantizationComponentParameters(int guardBitCount, PdfBigEndianStreamReader reader);
    protected virtual JPXQuantizationStepSize GetStepSize(int subBandIndex);
}
public class DevExpress.Pdf.Native.JPXScalarExpoundedQuantizationComponentParameters : JPXIrreversibleTransformationQuantizationComponentParameters {
    private JPXQuantizationStepSize[] stepSizes;
    public JPXScalarExpoundedQuantizationComponentParameters(int guardBitCount, PdfBigEndianStreamReader reader, int byteCount);
    protected virtual JPXQuantizationStepSize GetStepSize(int subBandIndex);
}
public class DevExpress.Pdf.Native.JPXSignatureBox : JPXBox {
    public static int Type;
    private static int content;
    public JPXSignatureBox(PdfBigEndianStreamReader reader, int length);
}
public class DevExpress.Pdf.Native.JPXSize : ValueType {
    private int gridWidth;
    private int gridHeight;
    private int tileWidth;
    private int tileHeight;
    private int gridHorizontalOffset;
    private int gridVerticalOffset;
    private int tileHorizontalOffset;
    private int tileVerticalOffset;
    private JPXComponent[] components;
    public int GridWidth { get; }
    public int GridHeight { get; }
    public int TileWidth { get; }
    public int TileHeight { get; }
    public int GridHorizontalOffset { get; }
    public int GridVerticalOffset { get; }
    public int TileHorizontalOffset { get; }
    public int TileVerticalOffset { get; }
    public JPXComponent[] Components { get; }
    public JPXSize(PdfBigEndianStreamReader reader);
    public int get_GridWidth();
    public int get_GridHeight();
    public int get_TileWidth();
    public int get_TileHeight();
    public int get_GridHorizontalOffset();
    public int get_GridVerticalOffset();
    public int get_TileHorizontalOffset();
    public int get_TileVerticalOffset();
    public JPXComponent[] get_Components();
}
public class DevExpress.Pdf.Native.JPXSizeMarker : JPXMarker {
    public static byte Type;
    public JPXSizeMarker(PdfBigEndianStreamReader reader, JPXImage image);
}
public class DevExpress.Pdf.Native.JPXStartOfCodeStreamMarker : JPXMarker {
    public static byte Type;
}
public class DevExpress.Pdf.Native.JPXStartOfDataMarker : JPXMarker {
    public static int Type;
}
public class DevExpress.Pdf.Native.JPXStartOfTilePartMarker : JPXMarker {
    public static byte Type;
    public JPXStartOfTilePartMarker(PdfBigEndianStreamReader reader, JPXImage image);
}
public abstract class DevExpress.Pdf.Native.JPXSubBand : JPXArea {
    private JPXTileComponent component;
    private int resolutionLevelNumber;
    private int codeBlocksWide;
    private int codeBlocksHigh;
    private JPXCodeBlock[] codeBlocks;
    public int CodeBlocksWide { get; }
    public int CodeBlocksHigh { get; }
    public JPXCodeBlock[] CodeBlocks { get; }
    public Byte[] LookupTable { get; }
    protected int HorizontalQuantity { get; }
    protected int VerticalQuantity { get; }
    protected int GainLog { get; }
    protected JPXSubBand(JPXTileComponent component, int resolutionLevelNumber, int codeBlockWidth, int codeBlockHeight);
    protected static Byte[] BuldLookupTable(Func`4<byte, byte, byte, int> calculateContextLabel);
    public int get_CodeBlocksWide();
    public int get_CodeBlocksHigh();
    public JPXCodeBlock[] get_CodeBlocks();
    public abstract virtual Byte[] get_LookupTable();
    protected abstract virtual int get_HorizontalQuantity();
    protected abstract virtual int get_VerticalQuantity();
    protected abstract virtual int get_GainLog();
    public sealed virtual void FillCoefficients(Single[] coefficients, int resultWidth);
}
public class DevExpress.Pdf.Native.JPXSubBandCoefficients : object {
    private int width;
    private int height;
    public int Width { get; }
    public int Height { get; }
    public JPXSubBandCoefficients(int width, int height);
    public int get_Width();
    public int get_Height();
    public JPXSubBandCoefficients Interleave(Single[] coefficients, IJPXSubBandCoefficients llSubBandCoefficients, IJPXSubBandCoefficients hlSubBandCoefficients, IJPXSubBandCoefficients lhSubBandCoefficients, IJPXSubBandCoefficients hhSubBandCoefficients);
    private void SparceCoefficients(Single[] coefficients, int subbandWidth, int subbandHeight, int horizontalOffset, int verticalOffset, int resultWidth);
}
public class DevExpress.Pdf.Native.JPXTagTree : object {
    private int levelCount;
    private JPXTagTreeNode[0...,0...][] data;
    private Stack`1<JPXTagTreeIndex> indexStack;
    private int currentLevel;
    public JPXTagTree(int width, int height);
    public int ReadInclusion(int x, int y, PdfBitReader bitReader, int maxValue);
    public int Read(int x, int y, PdfBitReader bitReader);
    private JPXTagTreeNode GetPreviousValue(int x, int y);
    private JPXTagTreeNode SetNextValue(int value);
}
public class DevExpress.Pdf.Native.JPXTagTreeIndex : ValueType {
    private int x;
    private int y;
    public int X { get; }
    public int Y { get; }
    public JPXTagTreeIndex(int x, int y);
    public int get_X();
    public int get_Y();
}
public class DevExpress.Pdf.Native.JPXTagTreeNode : object {
    private bool isDefined;
    private int value;
    public bool IsDefined { get; }
    public int Value { get; }
    public JPXTagTreeNode(int value, bool isDefined);
    public bool get_IsDefined();
    public int get_Value();
}
public class DevExpress.Pdf.Native.JPXTile : JPXArea {
    private JPXTileComponent[] components;
    private JPXImage image;
    private IEnumerator`1<JPXPacketPosition> packetEnumerator;
    private JPXColorTransformation colorTransformation;
    public JPXTileComponent[] Components { get; }
    public bool IsMultipleComponentTransformationSpecified { get; }
    public bool UseWaveletTransformation { get; }
    public JPXColorTransformation ColorTransformation { get; }
    public JPXTile(JPXImage image, int tileIndex);
    private static int ReadCodingPassCount(JPXBitReader reader);
    public JPXTileComponent[] get_Components();
    public bool get_IsMultipleComponentTransformationSpecified();
    public bool get_UseWaveletTransformation();
    public JPXColorTransformation get_ColorTransformation();
    public void AppendPacket(Stream stream);
    public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.JPXTileComponent : JPXArea {
    private JPXCodingStyleComponent codingStyle;
    private int bitsPerComponent;
    private JPXBaseResolutionLevel baseResolutionLevel;
    private JPXCompositeResolutionLevel[] resolutionLevels;
    private JPXQuantizationComponentParameters quantizationParameters;
    public JPXCodingStyleComponent CodingStyle { get; }
    public int BitsPerComponent { get; }
    public JPXQuantizationComponentParameters QuantizationParameters { get; public set; }
    public JPXTileComponent(JPXTile tile, JPXComponent component, JPXCodingStyleComponent codingStyle, JPXQuantizationComponentParameters quantizationParameters);
    public JPXCodingStyleComponent get_CodingStyle();
    public int get_BitsPerComponent();
    public JPXQuantizationComponentParameters get_QuantizationParameters();
    public void set_QuantizationParameters(JPXQuantizationComponentParameters value);
    public JPXResolutionLevel GetResolutionLevel(int resolutionLevelIndex);
    public Single[] Transform();
}
public class DevExpress.Pdf.Native.JPXTileComponentData : ValueType {
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Data>k__BackingField;
    private int shift;
    private float to8BppFactor;
    public int BitsPerComponent { get; }
    public Single[] Data { get; }
    public JPXTileComponentData(int bitsPerComponent, Single[] data);
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public Single[] get_Data();
    private static byte RoundAndClamp(float value);
    public byte ShiftAndConvertTo8Bpp(float value);
}
public class DevExpress.Pdf.Native.JPXTileComponentDataConstructor : object {
    private JPXTileComponent[] tileComponents;
    private JPXTileComponentData[] data;
    private JPXTileComponentDataConstructor(JPXTileComponent[] tileComponents);
    public static JPXTileComponentData[] Create(JPXTileComponent[] tileComponents);
    private JPXTileComponentData[] Create();
    private void AddTileComponentData(int componentIndex);
}
public class DevExpress.Pdf.Native.JPXTileData : object {
    private List`1<IJPXTileDataAction> packets;
    public void AppendPacket(Stream stream);
    public void AppendQuantizationParameters(int componentIndex, JPXQuantizationComponentParameters parameters);
    public void Process(JPXTile tile);
}
public class DevExpress.Pdf.Native.JPXTilePacketData : object {
    private Stream stream;
    public JPXTilePacketData(Stream stream);
    public sealed virtual void Process(JPXTile tile);
}
public class DevExpress.Pdf.Native.JPXTileQuantizationParametersData : object {
    private JPXQuantizationComponentParameters quantizationComponentParameters;
    private int componentIndex;
    public JPXTileQuantizationParametersData(int componentIndex, JPXQuantizationComponentParameters quantizationComponentParameters);
    public sealed virtual void Process(JPXTile tile);
}
public class DevExpress.Pdf.Native.JPXUnitaryStepSizeQuantizationComponentParameters : JPXQuantizationComponentParameters {
    private Int32[] stepSizeExponents;
    public JPXUnitaryStepSizeQuantizationComponentParameters(int guardBitCount, PdfBigEndianStreamReader reader, int byteCount);
    public virtual JPXQuantizationHelper CreateHelper(int subBandGainLog, int ri, int subBandIndex);
}
public class DevExpress.Pdf.Native.JPXUnitaryStepSizeQuantizationHelper : JPXQuantizationHelper {
    private float exponent;
    public JPXUnitaryStepSizeQuantizationHelper(int subBandGainLog, int stepSizeExponent, int GuardBitCount);
    public virtual float Apply(JPXCoefficient coefficient, int zeroBitPlanes);
}
public class DevExpress.Pdf.Native.JPXUnknownBox : JPXBox {
    public JPXUnknownBox(PdfBigEndianStreamReader reader, int length);
}
public class DevExpress.Pdf.Native.JPXUnknownMarker : JPXMarker {
    public JPXUnknownMarker(PdfBigEndianStreamReader reader, JPXImage image);
}
public class DevExpress.Pdf.Native.LRUCache`2 : object {
    private LinkedList`1<LRUNode<TKey, TValue>> priorityList;
    private IDictionary`2<TKey, LinkedListNode`1<LRUNode<TKey, TValue>>> cache;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public int Capacity { get; }
    public int Count { get; }
    public LRUCache`2(int capacity);
    [CompilerGeneratedAttribute]
public int get_Capacity();
    public int get_Count();
    public bool TryGetItem(TKey key, TValue& value);
    public void Remove(TKey key);
    public void AddOrReplace(TKey key, TValue value);
    private void SetMaxNodePriority(LinkedListNode`1<LRUNode<TKey, TValue>> node);
}
public class DevExpress.Pdf.Native.NullPdfValidationLogger : object {
    public static NullPdfValidationLogger Instance;
    private static NullPdfValidationLogger();
    public sealed virtual void LogValidationError(int objectNumber, int objectGeneration, string message);
}
public class DevExpress.Pdf.Native.OCSPRevocationChecker : object {
    public static void CheckRevocation(Byte[] ocspReaponce, X509Certificate certificate, X509Certificate issuerCertificate);
}
public class DevExpress.Pdf.Native.Pdf1bppImageScanlineDecoder : PdfImageScanlineDecoder {
    private int alignedStride;
    public int Stride { get; }
    public Pdf1bppImageScanlineDecoder(PdfImage image);
    public virtual int get_Stride();
    public virtual void FillNextScanline(Byte[] scanline, Byte[] sourceData, int sourceOffset);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dActivationArtworkState : Enum {
    public int value__;
    [PdfFieldNameAttribute("I")]
public static Pdf3dActivationArtworkState Instantiated;
    [PdfFieldNameAttribute("L")]
public static Pdf3dActivationArtworkState Live;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dActivationCircumstances : Enum {
    public int value__;
    [PdfFieldNameAttribute("PO")]
public static Pdf3dActivationCircumstances PageOpening;
    [PdfFieldNameAttribute("PV")]
public static Pdf3dActivationCircumstances PageVisible;
    [PdfFieldNameAttribute("XA")]
public static Pdf3dActivationCircumstances ExplicitlyActivated;
}
public class DevExpress.Pdf.Native.Pdf3dActivationParameters : PdfObject {
    private Pdf3dActivationCircumstances activationCircumstances;
    private Pdf3dActivationArtworkState activationArtworkState;
    private Pdf3dDeactivationCircumstances deactivationCircumstances;
    private Pdf3dDeactivationArtworkState deactivationArtworkState;
    private bool showToolbar;
    private bool showInterface;
    public Pdf3dActivationCircumstances ActivationCircumstances { get; }
    public Pdf3dActivationArtworkState ActivationArtworkState { get; }
    public Pdf3dDeactivationCircumstances DeactivationCircumstances { get; }
    public Pdf3dDeactivationArtworkState DeactivationArtworkState { get; }
    public bool ShowToolbar { get; }
    public bool ShowInterface { get; }
    public Pdf3dActivationParameters(PdfReaderDictionary dictionary);
    public Pdf3dActivationCircumstances get_ActivationCircumstances();
    public Pdf3dActivationArtworkState get_ActivationArtworkState();
    public Pdf3dDeactivationCircumstances get_DeactivationCircumstances();
    public Pdf3dDeactivationArtworkState get_DeactivationArtworkState();
    public bool get_ShowToolbar();
    public bool get_ShowInterface();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dAngularDimensionMeasurement : Pdf3dMeasurement {
    private Pdf3dGeometryMeasurementDataContainer geometryDataContainer;
    private IList`1<object> horizontalTextDirection;
    private bool isDegrees;
    private IList`1<object> anchor1LeaderLineDirection;
    private IList`1<object> anchor2LeaderLineDirection;
    private string anchor1Name;
    public Pdf3dMeasurementType Type { get; }
    public Pdf3dAngularDimensionMeasurement(PdfPage page, PdfReaderDictionary dictionary);
    public virtual Pdf3dMeasurementType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dAnimationStyle : PdfObject {
    private Pdf3dAnimationStyleKind kind;
    private int playCount;
    private double timeMultiplier;
    public Pdf3dAnimationStyleKind Kind { get; }
    public int PlayCount { get; }
    public double TimeMultiplier { get; }
    public Pdf3dAnimationStyle(PdfReaderDictionary dictionary);
    public Pdf3dAnimationStyleKind get_Kind();
    public int get_PlayCount();
    public double get_TimeMultiplier();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dAnimationStyleKind : Enum {
    public int value__;
    [PdfFieldNameAttribute("None")]
public static Pdf3dAnimationStyleKind None;
    [PdfFieldNameAttribute("Linear")]
public static Pdf3dAnimationStyleKind Linear;
    [PdfFieldNameAttribute("Oscillating")]
public static Pdf3dAnimationStyleKind Oscillating;
}
public class DevExpress.Pdf.Native.Pdf3dBackground : PdfObject {
    private string subtype;
    private PdfColorSpace colorSpace;
    private IList`1<object> colorArray;
    private bool entireAnnotation;
    public string Subtype { get; }
    public object ColorSpace { get; }
    public IList`1<object> ColorArray { get; }
    public bool EntireAnnotation { get; }
    public Pdf3dBackground(PdfReaderDictionary dictionary);
    public string get_Subtype();
    public object get_ColorSpace();
    public IList`1<object> get_ColorArray();
    public bool get_EntireAnnotation();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dClippingStyle : Enum {
    public int value__;
    [PdfFieldNameAttribute("ANF")]
public static Pdf3dClippingStyle Automatic;
    [PdfFieldNameAttribute("XNF")]
public static Pdf3dClippingStyle Explicit;
}
public class DevExpress.Pdf.Native.Pdf3dCommentMarkup : Pdf3dMeasurement {
    private string anchor1ModelName;
    private IList`1<object> textBoxPosition;
    public Pdf3dMeasurementType Type { get; }
    public Pdf3dCommentMarkup(PdfPage page, PdfReaderDictionary dictionary);
    public virtual Pdf3dMeasurementType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dCrossSection : PdfObject {
    private IList`1<object> cuttingPlaneCenterOfRotation;
    private IList`1<object> cuttingPlaneOrientation;
    private double cuttingPlaneOpacity;
    private IList`1<object> cuttingPlaneColor;
    private bool intersectionVisibility;
    private IList`1<object> intersectionColor;
    public IList`1<object> CuttingPlaneCenterOfRotation { get; }
    public IList`1<object> CuttingPlaneOrientation { get; }
    public double CuttingPlaneOpacity { get; }
    public IList`1<object> CuttingPlaneColor { get; }
    public bool IntersectionVisibility { get; }
    public IList`1<object> IntersectionColor { get; }
    public Pdf3dCrossSection(PdfReaderDictionary dictionary);
    public IList`1<object> get_CuttingPlaneCenterOfRotation();
    public IList`1<object> get_CuttingPlaneOrientation();
    public double get_CuttingPlaneOpacity();
    public IList`1<object> get_CuttingPlaneColor();
    public bool get_IntersectionVisibility();
    public IList`1<object> get_IntersectionColor();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.Native.Pdf3dData : PdfObject {
    public Pdf3dDataType Type { get; }
    protected Pdf3dData(PdfReaderDictionary dictionary);
    public abstract virtual Pdf3dDataType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.Native.Pdf3dDataType : Enum {
    public int value__;
    [PdfFieldNameAttribute("3D")]
public static Pdf3dDataType Stream;
    [PdfFieldNameAttribute("3DRef")]
public static Pdf3dDataType Reference;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dDeactivationArtworkState : Enum {
    public int value__;
    [PdfFieldNameAttribute("U")]
public static Pdf3dDeactivationArtworkState Uninstantiated;
    [PdfFieldNameAttribute("I")]
public static Pdf3dDeactivationArtworkState Instantiated;
    [PdfFieldNameAttribute("L")]
public static Pdf3dDeactivationArtworkState Live;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dDeactivationCircumstances : Enum {
    public int value__;
    [PdfFieldNameAttribute("PC")]
public static Pdf3dDeactivationCircumstances PageClosed;
    [PdfFieldNameAttribute("PI")]
public static Pdf3dDeactivationCircumstances PageInvisible;
    [PdfFieldNameAttribute("XD")]
public static Pdf3dDeactivationCircumstances ExplicitlyDeactivated;
}
public class DevExpress.Pdf.Native.Pdf3dGeometryMeasurementDataContainer : object {
    private IList`1<object> annotationPlane;
    private IList`1<object> anchor2;
    private string anchor2ModelName;
    private IList`1<object> textUpDirection;
    private Nullable`1<double> measurementValue;
    private int precision;
    public IList`1<object> AnnotationPlane { get; }
    public IList`1<object> Anchor2 { get; }
    public string Anchor2ModelName { get; }
    public IList`1<object> TextUpDirection { get; }
    public Nullable`1<double> MeasurementValue { get; }
    public int Precision { get; }
    public Pdf3dGeometryMeasurementDataContainer(PdfReaderDictionary dictionary);
    public IList`1<object> get_AnnotationPlane();
    public IList`1<object> get_Anchor2();
    public string get_Anchor2ModelName();
    public IList`1<object> get_TextUpDirection();
    public Nullable`1<double> get_MeasurementValue();
    public int get_Precision();
    public void FillDictionary(PdfWriterDictionary dictionary);
}
public class DevExpress.Pdf.Native.Pdf3dLightingScheme : PdfObject {
    private Pdf3dLightingSchemeType type;
    public Pdf3dLightingSchemeType Type { get; }
    public Pdf3dLightingScheme(PdfReaderDictionary dictionary);
    public Pdf3dLightingSchemeType get_Type();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.Native.Pdf3dLightingSchemeType : Enum {
    public int value__;
    public static Pdf3dLightingSchemeType None;
    public static Pdf3dLightingSchemeType Artwork;
    public static Pdf3dLightingSchemeType White;
    public static Pdf3dLightingSchemeType Day;
    public static Pdf3dLightingSchemeType Night;
    public static Pdf3dLightingSchemeType Hard;
    public static Pdf3dLightingSchemeType Primary;
    public static Pdf3dLightingSchemeType Blue;
    public static Pdf3dLightingSchemeType Red;
    public static Pdf3dLightingSchemeType Cube;
    public static Pdf3dLightingSchemeType CAD;
    public static Pdf3dLightingSchemeType Headlamp;
}
public class DevExpress.Pdf.Native.Pdf3dLinearDimensionMeasurement : Pdf3dMeasurement {
    private Pdf3dGeometryMeasurementDataContainer geometryDataContainer;
    private string anchor1Name;
    private string units;
    public Pdf3dMeasurementType Type { get; }
    public Pdf3dLinearDimensionMeasurement(PdfPage page, PdfReaderDictionary dictionary);
    public virtual Pdf3dMeasurementType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dMarkupExternalData : PdfMarkupExternalData {
    private Pdf3dAnnotation annotation;
    private string annotationName;
    private Byte[] md5;
    private Pdf3dView view;
    public PdfMarkupExternalDataType Type { get; }
    public Pdf3dMarkupExternalData(PdfPage page, PdfReaderDictionary dictionary);
    public virtual PdfMarkupExternalDataType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dMarkupGeospatialExternalData : PdfMarkupExternalData {
    public PdfMarkupExternalDataType Type { get; }
    public Pdf3dMarkupGeospatialExternalData(PdfReaderDictionary dictionary);
    public virtual PdfMarkupExternalDataType get_Type();
}
public abstract class DevExpress.Pdf.Native.Pdf3dMeasurement : PdfObject {
    private string name;
    private Pdf3dMeasurementDataContainer dataContainer;
    private PdfAnnotation annotation;
    private PdfReaderDictionary dictionary;
    private PdfPage page;
    public Pdf3dMeasurementType Type { get; }
    protected Pdf3dMeasurementDataContainer DataContainer { get; }
    private PdfAnnotation Annotation { get; }
    protected Pdf3dMeasurement(PdfPage page, PdfReaderDictionary dictionary);
    public static Pdf3dMeasurement Parse(PdfPage page, PdfReaderDictionary dictionary);
    public abstract virtual Pdf3dMeasurementType get_Type();
    protected Pdf3dMeasurementDataContainer get_DataContainer();
    private PdfAnnotation get_Annotation();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    [CompilerGeneratedAttribute]
private PdfAnnotation <get_Annotation>b__11_0(PdfReaderDictionary value);
}
public class DevExpress.Pdf.Native.Pdf3dMeasurementDataContainer : object {
    private IList`1<object> a1;
    private IList`1<object> tp;
    private double ts;
    private IList`1<object> c;
    private string ut;
    public IList`1<object> A1 { get; }
    public IList`1<object> TP { get; }
    public double TS { get; }
    public IList`1<object> C { get; }
    public string UT { get; }
    public Pdf3dMeasurementDataContainer(PdfReaderDictionary dictionary);
    public IList`1<object> get_A1();
    public IList`1<object> get_TP();
    public double get_TS();
    public IList`1<object> get_C();
    public string get_UT();
    public void FillDictionary(PdfWriterDictionary dictionary);
}
public class DevExpress.Pdf.Native.Pdf3dMeasurementExternalData : PdfMarkupExternalData {
    private Pdf3dMeasurement measurement;
    public PdfMarkupExternalDataType Type { get; }
    public Pdf3dMeasurementExternalData(PdfPage page, PdfAnnotation parent, PdfReaderDictionary dictionary);
    public virtual PdfMarkupExternalDataType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.Native.Pdf3dMeasurementType : Enum {
    public int value__;
    [PdfFieldNameAttribute("LD3")]
public static Pdf3dMeasurementType LinearDimension;
    [PdfFieldNameAttribute("PD3")]
public static Pdf3dMeasurementType PerpendicularDimension;
    [PdfFieldNameAttribute("AD3")]
public static Pdf3dMeasurementType AngularDimension;
    [PdfFieldNameAttribute("RD3")]
public static Pdf3dMeasurementType RadialDimension;
    [PdfFieldNameAttribute("3DC")]
public static Pdf3dMeasurementType Comment;
}
public class DevExpress.Pdf.Native.Pdf3dNode : PdfObject {
    private string name;
    private Nullable`1<double> opacity;
    private Nullable`1<bool> visible;
    private IList`1<object> matrix;
    public string Name { get; }
    public Nullable`1<double> Opacity { get; }
    public Nullable`1<bool> Visible { get; }
    public IList`1<object> Matrix { get; }
    public Pdf3dNode(PdfReaderDictionary dictionary);
    public string get_Name();
    public Nullable`1<double> get_Opacity();
    public Nullable`1<bool> get_Visible();
    public IList`1<object> get_Matrix();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dOrthographicBinding : Enum {
    public int value__;
    [PdfFieldNameAttribute("Absolute")]
public static Pdf3dOrthographicBinding Absolute;
    [PdfFieldNameAttribute("W")]
public static Pdf3dOrthographicBinding Width;
    [PdfFieldNameAttribute("H")]
public static Pdf3dOrthographicBinding Height;
    [PdfFieldNameAttribute("Min")]
public static Pdf3dOrthographicBinding Min;
    [PdfFieldNameAttribute("Max")]
public static Pdf3dOrthographicBinding Max;
}
public class DevExpress.Pdf.Native.Pdf3dPerpendicularDimensionMeasurement : Pdf3dMeasurement {
    private Pdf3dGeometryMeasurementDataContainer geometryDataContainer;
    private IList`1<object> leaderLinesDirection;
    private string anchor1Name;
    private string units;
    public Pdf3dMeasurementType Type { get; }
    public Pdf3dPerpendicularDimensionMeasurement(PdfPage page, PdfReaderDictionary dictionary);
    public virtual Pdf3dMeasurementType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.Pdf3dPerspectiveScaling : Enum {
    public int value__;
    [PdfFieldNameAttribute("W")]
public static Pdf3dPerspectiveScaling Width;
    [PdfFieldNameAttribute("H")]
public static Pdf3dPerspectiveScaling Height;
    [PdfFieldNameAttribute("Min")]
public static Pdf3dPerspectiveScaling Min;
    [PdfFieldNameAttribute("Max")]
public static Pdf3dPerspectiveScaling Max;
}
public class DevExpress.Pdf.Native.Pdf3dProjection : PdfObject {
    private Pdf3dProjectionType type;
    private Pdf3dClippingStyle clippingStyle;
    private Nullable`1<double> farClippingDistance;
    private Nullable`1<double> nearClippingDistance;
    private Nullable`1<double> fov;
    private object perspectiveScaling;
    private Nullable`1<double> orthographicScaling;
    private Pdf3dOrthographicBinding orthographicBinding;
    public Pdf3dProjectionType Type { get; }
    public Pdf3dClippingStyle ClippingStyle { get; }
    public Nullable`1<double> FarClippingDistance { get; }
    public Nullable`1<double> NearClippingDistance { get; }
    public Nullable`1<double> Fov { get; }
    public object PerspectiveScaling { get; }
    public Nullable`1<double> OrthographicScaling { get; }
    public Pdf3dOrthographicBinding OrthographicBinding { get; }
    public Pdf3dProjection(PdfReaderDictionary dictionary);
    public Pdf3dProjectionType get_Type();
    public Pdf3dClippingStyle get_ClippingStyle();
    public Nullable`1<double> get_FarClippingDistance();
    public Nullable`1<double> get_NearClippingDistance();
    public Nullable`1<double> get_Fov();
    public object get_PerspectiveScaling();
    public Nullable`1<double> get_OrthographicScaling();
    public Pdf3dOrthographicBinding get_OrthographicBinding();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.Native.Pdf3dProjectionType : Enum {
    public int value__;
    [PdfFieldNameAttribute("O")]
public static Pdf3dProjectionType Orthographic;
    [PdfFieldNameAttribute("P")]
public static Pdf3dProjectionType Perspective;
}
public class DevExpress.Pdf.Native.Pdf3dRadialDimensionMeasurement : Pdf3dMeasurement {
    private Pdf3dGeometryMeasurementDataContainer geometryDataContainer;
    private IList`1<object> horizontalTextDirection;
    private IList`1<object> arcStart;
    private IList`1<object> arcEnd;
    private double extensionLineLength;
    private bool isRadius;
    private bool showCircle;
    private string units;
    public Pdf3dMeasurementType Type { get; }
    public Pdf3dRadialDimensionMeasurement(PdfPage page, PdfReaderDictionary dictionary);
    public virtual Pdf3dMeasurementType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dReference : Pdf3dData {
    private Pdf3dStream stream;
    public Pdf3dDataType Type { get; }
    public Pdf3dStream Stream { get; }
    public Pdf3dReference(PdfReaderDictionary dictionary, PdfPage page);
    public virtual Pdf3dDataType get_Type();
    public Pdf3dStream get_Stream();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dRenderMode : PdfObject {
    private Pdf3dRenderModeType type;
    private IList`1<object> auxiliaryColor;
    private object faceColor;
    private double opacity;
    private double creaseValue;
    public Pdf3dRenderModeType Type { get; }
    public IList`1<object> AuxiliaryColor { get; }
    public object FaceColor { get; }
    public double Opacity { get; }
    public double CreaseValue { get; }
    public Pdf3dRenderMode(PdfReaderDictionary dictionary);
    public Pdf3dRenderModeType get_Type();
    public IList`1<object> get_AuxiliaryColor();
    public object get_FaceColor();
    public double get_Opacity();
    public double get_CreaseValue();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.Native.Pdf3dRenderModeType : Enum {
    public int value__;
    public static Pdf3dRenderModeType Solid;
    public static Pdf3dRenderModeType SolidWireframe;
    public static Pdf3dRenderModeType Transparent;
    public static Pdf3dRenderModeType TransparentWireframe;
    public static Pdf3dRenderModeType BoundingBox;
    public static Pdf3dRenderModeType TransparentBoundingBox;
    public static Pdf3dRenderModeType TransparentBoundingBoxOutline;
    public static Pdf3dRenderModeType Wireframe;
    public static Pdf3dRenderModeType ShadedWireframe;
    public static Pdf3dRenderModeType HiddenWireframe;
    public static Pdf3dRenderModeType Vertices;
    public static Pdf3dRenderModeType ShadedVertices;
    public static Pdf3dRenderModeType Illustration;
    public static Pdf3dRenderModeType SolidOutline;
    public static Pdf3dRenderModeType ShadedIllustration;
}
public class DevExpress.Pdf.Native.Pdf3dStream : Pdf3dData {
    private static string defaultViewKey;
    private string subtype;
    private IList`1<Pdf3dView> views;
    private Pdf3dView defaultView;
    private PdfDeferredSortedDictionary`2<string, object> resources;
    private Pdf3dAnimationStyle animationStyle;
    private Byte[] data;
    private Byte[] onInstatinate;
    public Pdf3dDataType Type { get; }
    public string Subtype { get; }
    public IList`1<Pdf3dView> Views { get; }
    public Pdf3dView DefaultView { get; }
    public IDictionary`2<string, object> Resources { get; }
    public Pdf3dStream(PdfReaderStream stream, PdfPage page);
    public virtual Pdf3dDataType get_Type();
    public string get_Subtype();
    public IList`1<Pdf3dView> get_Views();
    public Pdf3dView get_DefaultView();
    public IDictionary`2<string, object> get_Resources();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.Pdf3dView : PdfObject {
    private string externalName;
    private string internalName;
    private string matrixSource;
    private object u3dPath;
    private IList`1<object> c2w;
    private Nullable`1<double> distanceToCenterOfOrbit;
    private PdfForm markupForm;
    private Pdf3dProjection projection;
    private Pdf3dBackground background;
    private Pdf3dRenderMode renderMode;
    private Pdf3dLightingScheme lightingScheme;
    private IList`1<Pdf3dCrossSection> crossSections;
    private IList`1<Pdf3dNode> nodes;
    private IList`1<Pdf3dMeasurement> measurements;
    private bool resetNode;
    public string ExternalName { get; }
    public string InternalName { get; }
    public string MatrixSource { get; }
    public object U3dPath { get; }
    public IList`1<object> C2w { get; }
    public Nullable`1<double> DistanceToCenterOfOrbit { get; }
    public PdfForm MarkupForm { get; }
    public Pdf3dProjection Projection { get; }
    public Pdf3dBackground Background { get; }
    public Pdf3dRenderMode RenderMode { get; }
    public Pdf3dLightingScheme LightingScheme { get; }
    public IList`1<Pdf3dCrossSection> CrossSections { get; }
    public IList`1<Pdf3dNode> Nodes { get; }
    public bool ResetNode { get; }
    public Pdf3dView(PdfReaderDictionary dictionary, PdfPage page);
    public static Pdf3dView GetDefaultView(Pdf3dData data, PdfReaderDictionary dictionary, PdfPage page, string key);
    public string get_ExternalName();
    public string get_InternalName();
    public string get_MatrixSource();
    public object get_U3dPath();
    public IList`1<object> get_C2w();
    public Nullable`1<double> get_DistanceToCenterOfOrbit();
    public PdfForm get_MarkupForm();
    public Pdf3dProjection get_Projection();
    public Pdf3dBackground get_Background();
    public Pdf3dRenderMode get_RenderMode();
    public Pdf3dLightingScheme get_LightingScheme();
    public IList`1<Pdf3dCrossSection> get_CrossSections();
    public IList`1<Pdf3dNode> get_Nodes();
    public bool get_ResetNode();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.Native.PdfACompatibility : Enum {
    public int value__;
    public static PdfACompatibility None;
    public static PdfACompatibility PdfA1a;
    public static PdfACompatibility PdfA1b;
    public static PdfACompatibility PdfA2a;
    public static PdfACompatibility PdfA2b;
    public static PdfACompatibility PdfA3a;
    public static PdfACompatibility PdfA3b;
}
public class DevExpress.Pdf.Native.PdfAcroFormChoiceFieldController : object {
    private List`1<PdfOptionsFormFieldOption> values;
    private IList`1<int> selectedIndices;
    private bool multiSelect;
    private bool editable;
    private string editableValue;
    public List`1<PdfOptionsFormFieldOption> Values { get; }
    public IList`1<string> SelectedValues { get; }
    public IList`1<int> SelectedIndices { get; }
    public bool Editable { get; public set; }
    public bool MultiSelect { get; public set; }
    public PdfAcroFormChoiceFieldController(PdfAcroFormChoiceFieldController controller);
    public List`1<PdfOptionsFormFieldOption> get_Values();
    public IList`1<string> get_SelectedValues();
    public IList`1<int> get_SelectedIndices();
    public bool get_Editable();
    public void set_Editable(bool value);
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    public void AddValue(string displayValue, string exportValue);
    public void AddValue(string displayValue);
    public void ClearValues();
    public void SetSelected(int index, bool value);
    public bool SelectValue(string exportValue);
    public void ClearSelection();
    private void SelectIndex(int index);
}
public abstract class DevExpress.Pdf.Native.PdfAcroFormFieldCollection`1 : object {
    private IList`1<T> fields;
    private HashSet`1<string> names;
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected PdfAcroFormFieldCollection`1(PdfDocument document);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    protected abstract virtual string GetFieldName(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfAcroFormRadioGroupButton`1 : ValueType {
    private string name;
    private TLocation location;
    public string Name { get; }
    public TLocation Location { get; }
    public PdfAcroFormRadioGroupButton`1(string name, TLocation location);
    public string get_Name();
    public TLocation get_Location();
}
public class DevExpress.Pdf.Native.PdfAcroFormRadioGroupFieldController`1 : object {
    private List`1<PdfAcroFormRadioGroupButton`1<TLocation>> buttons;
    private int selectedIndex;
    public int SelectedIndex { get; public set; }
    public int ButtonCount { get; }
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public int get_ButtonCount();
    public void AddButton(string name, TLocation rect);
    public void ClearButtons();
    public PdfAcroFormRadioGroupButton`1<TLocation> GetButton(int index);
}
public class DevExpress.Pdf.Native.PdfAdditionalActions : PdfObject {
    internal static string DictionaryAdditionalActionsKey;
    private static String[] InteractiveFormFieldActionsDictionaryKeys;
    private static String[] AnnotationActionsDictionaryKeys;
    private PdfAnnotationActions annotationActions;
    private PdfInteractiveFormFieldActions interactiveFormFieldActions;
    public PdfAnnotationActions AnnotationActions { get; }
    public PdfInteractiveFormFieldActions InteractiveFormFieldActions { get; }
    internal PdfAdditionalActions(PdfInteractiveFormFieldActions interactiveFormFieldActions);
    internal PdfAdditionalActions(PdfAnnotationActions annotationActions);
    internal PdfAdditionalActions(PdfReaderDictionary dictionary);
    private static PdfAdditionalActions();
    private static bool isDictionaryContainsActions(PdfReaderDictionary dictionary, IEnumerable`1<string> actionDictionaryKeys);
    public PdfAnnotationActions get_AnnotationActions();
    public PdfInteractiveFormFieldActions get_InteractiveFormFieldActions();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.Native.PdfAnnotationAppearanceBuilder`1 : object {
    private T annotation;
    protected T Annotation { get; }
    protected PdfAnnotationAppearanceBuilder`1(T annotation);
    protected static PdfTransformationMatrix CalculateRectCenterRotationMatrix(PdfRectangle rect, int angle);
    protected T get_Annotation();
    protected abstract virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
    protected virtual PdfTransformationMatrix CreateFormMatrix();
    protected virtual PdfRectangle GetFormBBox();
    public sealed virtual void RebuildAppearance(PdfForm form);
}
public enum DevExpress.Pdf.Native.PdfAnnotationAppearanceState : Enum {
    public int value__;
    public static PdfAnnotationAppearanceState Normal;
    public static PdfAnnotationAppearanceState Rollover;
    public static PdfAnnotationAppearanceState Down;
}
public class DevExpress.Pdf.Native.PdfAnnotationBorderStyleBuilder : object {
    private static string solidStyleName;
    private static string dashedStyleName;
    private static string beveledStyleName;
    private static string insetStyleName;
    [CompilerGeneratedAttribute]
private string <StyleName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    public string StyleName { get; public set; }
    public double Width { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_StyleName();
    [CompilerGeneratedAttribute]
public void set_StyleName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    public PdfAnnotationBorderStyleBuilder SetBorderAppearance(PdfAcroFormBorderAppearance borderAppearance);
    public PdfAnnotationBorderStyle CreateBorderStyle();
}
public class DevExpress.Pdf.Native.PdfAnnotationBuilder : object {
    private PdfRectangle rect;
    private PdfAnnotationFlags flags;
    private string name;
    private PdfRGBColor color;
    private Nullable`1<DateTimeOffset> modificationDate;
    private string contents;
    private PdfAnnotationBorder border;
    public PdfRectangle Rect { get; }
    public string Name { get; public set; }
    public PdfRGBColor Color { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Contents { get; public set; }
    public PdfAnnotationFlags Flags { get; public set; }
    public PdfAnnotationBorder Border { get; public set; }
    public PdfAnnotationBuilder(PdfRectangle rect);
    public sealed virtual PdfRectangle get_Rect();
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public sealed virtual PdfRGBColor get_Color();
    public void set_Color(PdfRGBColor value);
    public sealed virtual Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public sealed virtual string get_Contents();
    public void set_Contents(string value);
    public sealed virtual PdfAnnotationFlags get_Flags();
    public void set_Flags(PdfAnnotationFlags value);
    public sealed virtual PdfAnnotationBorder get_Border();
    public void set_Border(PdfAnnotationBorder value);
}
public class DevExpress.Pdf.Native.PdfAnnotationPropertyChangingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    public string PropertyName { get; }
    public object NewValue { get; }
    public PdfAnnotationPropertyChangingEventArgs(string propertyName, object newValue);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public object get_NewValue();
}
public class DevExpress.Pdf.Native.PdfAnnotationPropertyChangingEventHandler : MulticastDelegate {
    public PdfAnnotationPropertyChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PdfAnnotationPropertyChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PdfAnnotationPropertyChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class DevExpress.Pdf.Native.PdfAnnotationReviewStatusConverter : object {
    private static string None;
    private static string Accepted;
    private static string Rejected;
    private static string Cancelled;
    private static string Completed;
    public static bool IsKnownStatus(string status);
    public static PdfAnnotationReviewStatus Convert(string status);
    public static string Convert(PdfAnnotationReviewStatus status);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfAnnotationsFacade : object {
    private PdfPageState page;
    private List`1<PdfAnnotationFacade> facades;
    private Dictionary`2<IPdfAnnotationState, PdfAnnotationFacade> facadesDictionary;
    public PdfAnnotationFacade Item { get; }
    internal PdfAnnotationFacade Item { get; }
    public int Count { get; }
    internal PdfAnnotationsFacade(PdfPageState page);
    public sealed virtual PdfAnnotationFacade get_Item(int index);
    internal PdfAnnotationFacade get_Item(IPdfAnnotationState annotation);
    public sealed virtual int get_Count();
    private void OnPageAnnotationsChanged(IPdfAnnotationState state, bool removed);
    private void CreateFacades();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfAnnotationsFacade/<GetEnumerator>d__12")]
public sealed virtual IEnumerator`1<PdfAnnotationFacade> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class DevExpress.Pdf.Native.PdfAnnotationState`1 : object {
    private PdfPageState pageState;
    private PdfAnnotationAppearanceState appearanceState;
    private Lazy`1<PdfRGBColor> color;
    private bool hidden;
    [CompilerGeneratedAttribute]
private TAnnotation <Annotation>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PdfAnnotationPropertyChangingEventHandler PropertyChanging;
    public PdfRectangle Rect { get; public set; }
    public PdfAnnotationFlags Flags { get; public set; }
    public PdfAnnotationType AnnotationType { get; }
    public bool Visible { get; }
    public bool ReadOnly { get; }
    public int PageNumber { get; }
    public TAnnotation Annotation { get; }
    public PdfAnnotationAppearanceState AppearanceState { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Contents { get; public set; }
    public PdfRGBColor Color { get; public set; }
    public bool Hidden { get; public set; }
    protected internal PdfDocumentStateBase DocumentState { get; }
    protected IPdfExportFontProvider FontSearch { get; }
    protected PdfPageState PageState { get; }
    protected PdfRgbaColor HighlightColor { get; }
    private PdfAnnotation DevExpress.Pdf.Native.IPdfAnnotationState.Annotation { get; }
    public double BorderWidth { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public double BorderEffectIntensity { get; public set; }
    public PdfAnnotationBorderEffectStyle BorderEffectStyle { get; public set; }
    private PdfAnnotationBorder Border { get; }
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    protected PdfAnnotationBorderEffect BorderEffect { get; protected set; }
    protected PdfAnnotationState`1(PdfPageState pageState, TAnnotation annotation);
    public virtual PdfRectangle get_Rect();
    public virtual void set_Rect(PdfRectangle value);
    public sealed virtual PdfAnnotationFlags get_Flags();
    public sealed virtual void set_Flags(PdfAnnotationFlags value);
    public sealed virtual PdfAnnotationType get_AnnotationType();
    public sealed virtual bool get_Visible();
    public virtual bool get_ReadOnly();
    public sealed virtual int get_PageNumber();
    [CompilerGeneratedAttribute]
public TAnnotation get_Annotation();
    public sealed virtual PdfAnnotationAppearanceState get_AppearanceState();
    public sealed virtual void set_AppearanceState(PdfAnnotationAppearanceState value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual Nullable`1<DateTimeOffset> get_ModificationDate();
    public sealed virtual void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public sealed virtual string get_Contents();
    public sealed virtual void set_Contents(string value);
    public virtual PdfRGBColor get_Color();
    public virtual void set_Color(PdfRGBColor value);
    public virtual bool get_Hidden();
    public virtual void set_Hidden(bool value);
    protected internal PdfDocumentStateBase get_DocumentState();
    protected IPdfExportFontProvider get_FontSearch();
    protected PdfPageState get_PageState();
    protected PdfRgbaColor get_HighlightColor();
    private sealed virtual override PdfAnnotation DevExpress.Pdf.Native.IPdfAnnotationState.get_Annotation();
    public sealed virtual double get_BorderWidth();
    public sealed virtual void set_BorderWidth(double value);
    public sealed virtual PdfBorderStyle get_BorderStyle();
    public sealed virtual void set_BorderStyle(PdfBorderStyle value);
    public sealed virtual double get_BorderEffectIntensity();
    public sealed virtual void set_BorderEffectIntensity(double value);
    public sealed virtual PdfAnnotationBorderEffectStyle get_BorderEffectStyle();
    public sealed virtual void set_BorderEffectStyle(PdfAnnotationBorderEffectStyle value);
    private PdfAnnotationBorder get_Border();
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
    protected virtual PdfAnnotationBorderEffect get_BorderEffect();
    protected virtual void set_BorderEffect(PdfAnnotationBorderEffect value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PdfAnnotationPropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PdfAnnotationPropertyChangingEventHandler value);
    protected virtual void OnBorderEffectChanged();
    private void UpdateAnnotationBorderStyle(PdfBorderStyle style, double width);
    private void CreateDashPattern(PdfBorderStyle borderStyle, double borderWidth);
    private void CreateDashPattern(Double[] pattern);
    private PdfBorderStyle GetDashedBorderStyle(Double[] dashPattern);
    public abstract virtual void Accept(IPdfAnnotationStateVisitor visitor);
    public virtual bool Contains(PdfPoint cropBoxPoint);
    public virtual PdfDocumentArea GetInteractiveArea();
    protected virtual bool ContainsPoint(PdfPoint point);
    protected virtual PdfForm GetDrawingForm(PdfRgbaColor highlight);
    public sealed virtual PdfAnnotationStatePaintData CreatePaintData(bool isPrinting, PdfRgbaColor highlightColor);
    public virtual IList`1<PdfPoint[]> GetSelectionPolygon();
    private bool ShouldDrawAnnotation(bool isPrinting);
    public virtual bool RemoveFromPage();
    public sealed virtual bool Flatten();
    private void RaisePropertyChanged(string propertyName);
    private bool RaisePropertyChanging(string propertyName, object newValue);
    protected void RaiseInvalidate(PdfRectangle rect);
    protected void RaiseViewPropertyChanged(string propertyName);
    private void SetObservableProperty(T currentValue, T newValue, Action setNewValue, bool setModified, String[] propertyNames);
    protected void SetObservableProperty(T currentValue, T newValue, Action setNewValue, String[] propertyNames);
    protected void SetNormalAppearance(PdfForm form);
    public virtual void RebuildAppearance();
    private void ColorChanged(object sender, PropertyChangedEventArgs e);
    private void SetColor(PdfRGBColor value);
    private Lazy`1<PdfRGBColor> CreateColorContainer();
    [CompilerGeneratedAttribute]
private PdfRGBColor <CreateColorContainer>b__101_0();
}
public class DevExpress.Pdf.Native.PdfAnnotationStateComment : object {
    private PdfAnnotationStateComment inReplyTo;
    [CompilerGeneratedAttribute]
private IPdfAnnotationStateCommentReviews <Reviews>k__BackingField;
    [CompilerGeneratedAttribute]
private IPdfAnnotationStateCommentReplies <Replies>k__BackingField;
    [CompilerGeneratedAttribute]
private IPdfMarkupAnnotationState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    public PdfAnnotationStateComment InReplyTo { get; }
    public string Type { get; }
    public PdfFilterAnnotationType FilterType { get; }
    public int PageNumber { get; }
    public bool Hidden { get; }
    public string Contents { get; public set; }
    public string Subject { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Author { get; public set; }
    public bool Marked { get; public set; }
    public IPdfAnnotationStateCommentReviews Reviews { get; }
    public IPdfAnnotationStateCommentReplies Replies { get; }
    public IPdfMarkupAnnotationState State { get; }
    public PdfAnnotationStateComment(PdfPageState page, IPdfMarkupAnnotationState state, PdfAnnotationStateComment inReplyTo);
    public sealed virtual PdfAnnotationStateComment get_InReplyTo();
    public sealed virtual string get_Type();
    public sealed virtual PdfFilterAnnotationType get_FilterType();
    public sealed virtual int get_PageNumber();
    public sealed virtual bool get_Hidden();
    public sealed virtual string get_Contents();
    public sealed virtual void set_Contents(string value);
    public sealed virtual string get_Subject();
    public sealed virtual void set_Subject(string value);
    public sealed virtual Nullable`1<DateTimeOffset> get_ModificationDate();
    public sealed virtual void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public sealed virtual string get_Author();
    public sealed virtual void set_Author(string value);
    public sealed virtual bool get_Marked();
    public sealed virtual void set_Marked(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IPdfAnnotationStateCommentReviews get_Reviews();
    [CompilerGeneratedAttribute]
public sealed virtual IPdfAnnotationStateCommentReplies get_Replies();
    [CompilerGeneratedAttribute]
public sealed virtual IPdfMarkupAnnotationState get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    private void OnPropertyEvent(string propertyName, Action`1<string> eventAction);
    private void OnStatePropertyChanging(object sender, PdfAnnotationPropertyChangingEventArgs e);
    private void OnStatePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void RaisePropertyChanging(string propertyName);
    private void RaisePropertyChanged(string propertyName);
    public sealed virtual IPdfAnnotationStateComment AddReply(string author, string contents);
    public sealed virtual void AddReview(string author, string status);
    public sealed virtual void AddReview(string author, PdfAnnotationReviewStatus status);
    public sealed virtual void RemoveFromPage();
    public void Clear();
    [CompilerGeneratedAttribute]
private void <OnStatePropertyChanging>b__43_0(string name);
    [CompilerGeneratedAttribute]
private void <OnStatePropertyChanged>b__44_0(string name);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfAnnotationStateCommentReplies : object {
    private PdfPageState pageState;
    private PdfAnnotationStateComment parentComment;
    private List`1<IPdfAnnotationStateComment> replies;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public IPdfAnnotationStateComment Item { get; }
    public PdfAnnotationStateCommentReplies(PdfPageState pageState, PdfAnnotationStateComment parentComment);
    private static bool IsCommentReply(PdfAnnotation annotation, PdfAnnotation parent);
    public sealed virtual int get_Count();
    public sealed virtual IPdfAnnotationStateComment get_Item(int index);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual IPdfAnnotationStateComment Add(string author, string reply);
    public sealed virtual bool Remove(IPdfAnnotationStateComment comment);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<IPdfAnnotationStateComment> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfAnnotationStateCommentReview : object {
    [CompilerGeneratedAttribute]
private PdfTextAnnotation <Annotation>k__BackingField;
    public string Author { get; }
    public string Status { get; }
    public PdfTextAnnotation Annotation { get; }
    public PdfAnnotationStateCommentReview(PdfTextAnnotation reviewAnnotation);
    public sealed virtual string get_Author();
    public sealed virtual string get_Status();
    [CompilerGeneratedAttribute]
public PdfTextAnnotation get_Annotation();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.PdfAnnotationStateCommentReviews : object {
    private static string stateModel;
    private PdfPageState pageState;
    private PdfAnnotation parent;
    private IDictionary`2<string, PdfAnnotationStateCommentReview> currentReviewStatus;
    private List`1<PdfAnnotationStateCommentReview> reviewHistory;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public IReadOnlyList`1<PdfAnnotationStateCommentReview> ReviewHistory { get; }
    public PdfAnnotationStateCommentReviews(PdfPageState pageState, PdfMarkupAnnotation parent);
    private static int FindIndex(ICollection`1<string> keys, string value);
    public sealed virtual int get_Count();
    public IReadOnlyList`1<PdfAnnotationStateCommentReview> get_ReviewHistory();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void AddReview(string author, PdfAnnotationReviewStatus status);
    public sealed virtual void AddReview(string author, string status);
    public sealed virtual void Clear();
    private PdfTextAnnotation AddReviewToDocument(string author, string status);
    public sealed virtual IEnumerator`1<IPdfAnnotationStateCommentReview> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfAnnotationStateFactory : PdfVisitorBasedFactory`2<PdfAnnotation, IPdfAnnotationState> {
    private PdfPageState pageState;
    private PdfAnnotationStateFactory(PdfPageState pageState);
    private static bool IsNotReply(PdfMarkupAnnotation markup);
    public static List`1<IPdfAnnotationState> Create(PdfPageState pageState, IEnumerable`1<PdfAnnotation> annotations);
    protected virtual void Visit(PdfAnnotation input);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfTextAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfCustomAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfLinkAnnotation link);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfTextMarkupAnnotation markup);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfWidgetAnnotation widget);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfInkAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfPolygonAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfPolyLineAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfRubberStampAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfFileAttachmentAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfCircleAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfSquareAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfCaretAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfLineAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfRedactAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfFreeTextAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfSoundAnnotation annotation);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationVisitor.Visit(PdfPopupAnnotation popup);
}
public class DevExpress.Pdf.Native.PdfAnnotationStatePaintData : object {
    private PdfForm form;
    private PdfTransformationMatrix matrix;
    public PdfForm Form { get; }
    public PdfTransformationMatrix Matrix { get; }
    public PdfAnnotationStatePaintData(PdfForm form, PdfTransformationMatrix matrix);
    public PdfForm get_Form();
    public PdfTransformationMatrix get_Matrix();
}
public enum DevExpress.Pdf.Native.PdfAnnotationUsageRight : Enum {
    public int value__;
    public static PdfAnnotationUsageRight Create;
    public static PdfAnnotationUsageRight Delete;
    public static PdfAnnotationUsageRight Modify;
    public static PdfAnnotationUsageRight Copy;
    public static PdfAnnotationUsageRight Import;
    public static PdfAnnotationUsageRight Export;
    public static PdfAnnotationUsageRight Online;
    public static PdfAnnotationUsageRight SummaryView;
}
public class DevExpress.Pdf.Native.PdfAnyArrayObject : PdfAnyObject {
    [CompilerGeneratedAttribute]
private List`1<object> <Values>k__BackingField;
    public List`1<object> Values { get; }
    public PdfAnyArrayObject(PdfReaderArray array, int number);
    [CompilerGeneratedAttribute]
public List`1<object> get_Values();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.PdfAnyDictionaryObject : PdfAnyObject {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Values>k__BackingField;
    public Dictionary`2<string, object> Values { get; }
    public PdfAnyDictionaryObject(PdfReaderDictionary dictionary, int number);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Values();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected PdfWriterDictionary CreateWriterDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.PdfAnyIndirectObject : PdfAnyObject {
    private object value;
    public object Value { get; }
    public PdfAnyIndirectObject(PdfObjectCollection collection, object value, int number);
    public object get_Value();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.Native.PdfAnyObject : PdfObject {
    protected PdfAnyObject(PdfObjectCollection collection, int number);
    public static PdfObject Create(PdfObjectCollection collection, object obj);
    protected static object ProcessValue(PdfObjectCollection collection, object obj);
}
public class DevExpress.Pdf.Native.PdfAnyStreamObject : PdfAnyDictionaryObject {
    private Byte[] data;
    public Byte[] Data { get; }
    public PdfAnyStreamObject(PdfReaderStream stream, int number);
    public Byte[] get_Data();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.PdfArithmeticContext : object {
    private PdfArithmeticState state;
    private Byte[] context;
    public PdfArithmeticContext(PdfArithmeticState state, int length);
    public PdfArithmeticContext(PdfArithmeticState state, Byte[] initialContext);
    public int DecodeBit(int cx);
}
public class DevExpress.Pdf.Native.PdfArithmeticDecoderResult : object {
    [CompilerGeneratedAttribute]
private int <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Code>k__BackingField;
    public int Result { get; private set; }
    public bool Code { get; private set; }
    public PdfArithmeticDecoderResult(int result, bool code);
    [CompilerGeneratedAttribute]
public int get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(int value);
    [CompilerGeneratedAttribute]
public bool get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(bool value);
}
public class DevExpress.Pdf.Native.PdfArithmeticQe : ValueType {
    private static PdfArithmeticQe[] values;
    private UInt32 qe;
    private byte mpsXor;
    private byte lpsXor;
    private byte sw;
    public static PdfArithmeticQe[] Values { get; }
    internal UInt32 Qe { get; }
    internal byte MpsXor { get; }
    internal byte LpsXor { get; }
    internal byte Switch { get; }
    private PdfArithmeticQe(UInt32 qe, byte mpsXor, byte lpsXor, byte sw);
    private static PdfArithmeticQe();
    public static PdfArithmeticQe[] get_Values();
    internal UInt32 get_Qe();
    internal byte get_MpsXor();
    internal byte get_LpsXor();
    internal byte get_Switch();
}
public class DevExpress.Pdf.Native.PdfArithmeticState : object {
    private PdfBigEndianStreamReader reader;
    private UInt32 c;
    private UInt32 ct;
    private UInt32 a;
    private UInt32 buffer0;
    private UInt32 buffer1;
    public PdfArithmeticState(PdfBigEndianStreamReader reader);
    private void ReadByte();
    private void LoadBuffer();
    internal int Decode(Byte[] cx, int index);
    private void Renormd();
}
public class DevExpress.Pdf.Native.PdfArrayCompressedData : PdfCompressedData {
    private Byte[] data;
    public Byte[] Data { get; }
    public PdfArrayCompressedData(IList`1<PdfFilter> filters, Byte[] data);
    public PdfArrayCompressedData(Byte[] data);
    public PdfArrayCompressedData(PdfReaderDictionary dictionary, Byte[] data);
    public PdfArrayCompressedData(PdfReaderStream stream);
    public virtual Byte[] get_Data();
    public PdfWriterStream CreateWriterStream(PdfWriterDictionary dictionary);
    public PdfIndirectObject`1<PdfStreamPrimitive> CreateStream(PdfObjectStorage collection);
    public virtual IPdfWritableObject CreateWritableObject(PdfWriterDictionary dictionary);
}
public class DevExpress.Pdf.Native.PdfArrayDataStream : PdfDataStream {
    private Byte[] data;
    public int CurrentByte { get; }
    public PdfArrayDataStream(Byte[] data, int length);
    public PdfArrayDataStream(Byte[] data);
    public virtual int get_CurrentByte();
    public virtual int Read(Byte[] buffer, int offset, int length);
    public virtual void Synchronize();
}
internal class DevExpress.Pdf.Native.PdfBackwardTextSearchIterator : PdfTextSearchIterator {
    private bool searchFinished;
    public PdfBackwardTextSearchIterator(PdfTextSearchIterator iterator);
    public PdfBackwardTextSearchIterator(PdfPageDataCache cache, int pageIndex);
    protected virtual bool MoveCore();
    protected virtual void Restart();
    protected virtual void MoveToNextPage();
}
public class DevExpress.Pdf.Native.PdfBGRImageDataSource : PdfImageDataSource {
    private int stride;
    private Byte[] componentsData;
    public int ComponentsCount { get; }
    public PdfBGRImageDataSource(IPdfImageScanlineSource source, int width, int stride);
    public virtual int get_ComponentsCount();
    public virtual void FillBuffer(Byte[] buffer, int scanlineCount);
}
public static class DevExpress.Pdf.Native.PdfBidiBrackets : object {
    private static IDictionary`2<char, char> bidiBrackets;
    private static PdfBidiBrackets();
    public static char TryGetMirroredBracket(char ch);
}
public enum DevExpress.Pdf.Native.PdfBidiCharacterClass : Enum {
    public int value__;
    public static PdfBidiCharacterClass Unknown;
    public static PdfBidiCharacterClass LTR;
    public static PdfBidiCharacterClass RTL;
    public static PdfBidiCharacterClass Numeric;
    public static PdfBidiCharacterClass Other;
}
public static class DevExpress.Pdf.Native.PdfBidiCharacterClasses : object {
    private static string resourcePath;
    private static int charCount;
    private static PdfBidiCharacterClass[] characterClasses;
    private static PdfBidiCharacterClasses();
    public static PdfBidiCharacterClass GetCharacterClass(char ch);
}
public class DevExpress.Pdf.Native.PdfBidiDirectedSequenceCollection : List`1<PdfBidiSequence> {
    private PdfBidiTextDirection direction;
    public PdfBidiTextDirection Direction { get; public set; }
    public PdfBidiDirectedSequenceCollection(PdfBidiTextDirection direction);
    public PdfBidiTextDirection get_Direction();
    public void set_Direction(PdfBidiTextDirection value);
    public string GetDirectedString();
}
public class DevExpress.Pdf.Native.PdfBidiSequence : ValueType {
    private PdfBidiCharacterClass characterClass;
    private StringBuilder characters;
    public PdfBidiCharacterClass CharacterClass { get; }
    public bool IsNotEmpty { get; }
    public PdfBidiSequence(PdfBidiCharacterClass characterClass);
    public PdfBidiCharacterClass get_CharacterClass();
    public bool get_IsNotEmpty();
    public void AppendChar(string unicodeChar);
    public void AppendTo(StringBuilder builder);
    public void AppendMirroredTo(StringBuilder builder);
}
public class DevExpress.Pdf.Native.PdfBidiStringBuilder : object {
    private StringBuilder resultBuilder;
    private IList`1<PdfBidiDirectedSequenceCollection> currentLine;
    private PdfBidiDirectedSequenceCollection currentDirectedSequence;
    private PdfBidiSequence currentBidiSequence;
    private bool endsWithNewLine;
    private bool empty;
    public bool Empty { get; }
    public bool EndsWithNewLine { get; }
    public bool get_Empty();
    public bool get_EndsWithNewLine();
    private void FinishSequence(PdfBidiCharacterClass newSequenceCharacterClass);
    private string FinishLineAndGetSequenceString();
    public void Append(string unicodeChar);
    public void AppendLine();
    public string EndCurrentLineAndGetString();
}
public enum DevExpress.Pdf.Native.PdfBidiTextDirection : Enum {
    public int value__;
    public static PdfBidiTextDirection Unknown;
    public static PdfBidiTextDirection LeftToRight;
    public static PdfBidiTextDirection RightToLeft;
}
public class DevExpress.Pdf.Native.PdfBigEndianStreamReader : object {
    private Stream stream;
    public long Length { get; }
    public long Position { get; public set; }
    public bool Finish { get; }
    protected Stream Stream { get; }
    public PdfBigEndianStreamReader(Stream stream);
    public long get_Length();
    public long get_Position();
    public void set_Position(long value);
    public bool get_Finish();
    protected Stream get_Stream();
    public PdfBitReader CreateBitReader();
    public Byte[] ReadBytes();
    public Byte[] ReadBytes(int count);
    public int ReadInt16();
    public int ReadInt32();
    public int ReadInt(int count);
    public byte ReadByte();
    public void Skip(int count);
}
public class DevExpress.Pdf.Native.PdfBilinearUpsamplingHorizontalInterpolator : PdfBilinearUpsamplingInterpolator {
    private int width;
    private Byte[] sourceScanline;
    public PdfBilinearUpsamplingHorizontalInterpolator(IPdfImageScanlineSource dataSource, int width, int sourceWidth);
    public virtual void FillNextScanline(Byte[] scanlineData);
}
public abstract class DevExpress.Pdf.Native.PdfBilinearUpsamplingInterpolator : PdfImageScanlineSourceDecorator {
    protected static int ConvolutionWindowSize;
    private PdfConvolutionWindowInfo[] convolutionWindowInfo;
    protected PdfConvolutionWindowInfo[] ConvolutionWindowInfo { get; }
    protected PdfBilinearUpsamplingInterpolator(IPdfImageScanlineSource dataSource, int sourceWidth, int targetDimension, int sourceDimension);
    private static float CalculateLinearInterpolationWeight(float value);
    protected PdfConvolutionWindowInfo[] get_ConvolutionWindowInfo();
}
public class DevExpress.Pdf.Native.PdfBilinearUpsamplingVerticalInterpolator : PdfBilinearUpsamplingInterpolator {
    private int sourceHeight;
    private Byte[][] sourceBuffers;
    private int currentY;
    private int currentSourceY;
    public PdfBilinearUpsamplingVerticalInterpolator(IPdfImageScanlineSource dataSource, int sourceWidth, int height, int sourceHeight);
    private Byte[] ReadNextSourceScanline();
    public virtual void FillNextScanline(Byte[] scanline);
}
public class DevExpress.Pdf.Native.PdfBinaryStream : PdfDisposableObject {
    private MemoryStream stream;
    public Byte[] Data { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PdfBinaryStream(Byte[] data);
    public PdfBinaryStream(int length);
    public Byte[] get_Data();
    public long get_Length();
    public long get_Position();
    public void set_Position(long value);
    public byte ReadByte();
    public short ReadShort();
    public int ReadUshort();
    public int Get24BitInt();
    public int ReadInt();
    public long ReadLong();
    public int ReadOffSet(int length);
    public Byte[] ReadArray(int length);
    public Int16[] ReadShortArray(int length);
    public string ReadString(int length);
    public float ReadFixed();
    public void WriteFixed(float value);
    public void WriteByte(byte value);
    public void WriteShort(short value);
    public void WriteUShort(int value);
    public void Write24BitInt(int value);
    public void WriteInt(int value);
    public void WriteLong(long value);
    public void WriteArray(Byte[] array);
    public void WriteShortArray(Int16[] array);
    public void WriteString(string str);
    public Byte[] ToAlignedArray();
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.Native.PdfBinaryToken : object {
    private Byte[] data;
    public Byte[] Data { get; }
    public PdfBinaryToken(Byte[] data);
    public Byte[] get_Data();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.Native.PdfBitReader : object {
    private static int highBitMask;
    private Stream stream;
    private byte currentByte;
    private int currentBitMask;
    protected byte CurrentByte { get; }
    protected int CurrentBitMask { get; protected set; }
    public PdfBitReader(Stream stream);
    protected byte get_CurrentByte();
    protected int get_CurrentBitMask();
    protected void set_CurrentBitMask(int value);
    public int GetBit();
    public int GetInteger(int bitCount);
    public bool IgnoreExtendedBits();
    public Byte[] ReadBytes(int value);
    internal UInt32 GetUnsignedInteger(int bitCount);
    protected virtual bool GoToNextByte();
}
public class DevExpress.Pdf.Native.PdfBookmarkList : object {
    private List`1<PdfBookmark> bookmarks;
    private IPdfBookmarkParent parent;
    public PdfDocumentCatalog DocumentCatalog { get; }
    private bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.IsReadOnly { get; }
    private int System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.Count { get; }
    private PdfBookmark System.Collections.Generic.IList<DevExpress.Pdf.PdfBookmark>.Item { get; private set; }
    public PdfBookmarkList(IPdfBookmarkParent parent);
    public PdfBookmarkList(IPdfBookmarkParent parent, IEnumerable`1<PdfBookmark> items);
    public PdfBookmarkList(IPdfBookmarkParent parent, PdfOutlineItem item);
    public static PdfOutlines CreateOutlines(IList`1<PdfBookmark> bookmarks);
    public sealed virtual PdfDocumentCatalog get_DocumentCatalog();
    public sealed virtual void Invalidate();
    private PdfBookmark PrepareAndValidateItem(PdfBookmark item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<PdfBookmark> System.Collections.Generic.IEnumerable<DevExpress.Pdf.PdfBookmark>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.Contains(PdfBookmark item);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.Add(PdfBookmark item);
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.Remove(PdfBookmark item);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfBookmark>.CopyTo(PdfBookmark[] array, int arrayIndex);
    private sealed virtual override PdfBookmark System.Collections.Generic.IList<DevExpress.Pdf.PdfBookmark>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Pdf.PdfBookmark>.set_Item(int index, PdfBookmark value);
    private sealed virtual override int System.Collections.Generic.IList<DevExpress.Pdf.PdfBookmark>.IndexOf(PdfBookmark item);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Pdf.PdfBookmark>.Insert(int index, PdfBookmark item);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Pdf.PdfBookmark>.RemoveAt(int index);
}
public class DevExpress.Pdf.Native.PdfBorderAppearanceBuilder : object {
    private PdfAnnotationBorderStyle borderStyle;
    private PdfAnnotationBorderEffect borderEffect;
    private IList`1<PdfPoint> points;
    public PdfBorderAppearanceBuilder(PdfAnnotationBorderStyle borderStyle, PdfAnnotationBorderEffect borderEffect, IList`1<PdfPoint> points);
}
public class DevExpress.Pdf.Native.PdfButtonFormFieldAppearanceBuilder : PdfWidgetAnnotationAppearanceBuilder`1<PdfButtonFormField> {
    private static double fadeFactor;
    [CompilerGeneratedAttribute]
private bool <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FadeBackgroundColor>k__BackingField;
    private bool isRadioButton;
    private bool useCircularAppearance;
    private PdfAcroFormButtonStyle buttonStyle;
    private PdfColor foreColor;
    public bool IsChecked { get; public set; }
    public bool FadeBackgroundColor { get; public set; }
    protected PdfRgbaColor BackgroundColor { get; }
    public PdfButtonFormFieldAppearanceBuilder(PdfWidgetAnnotation widget, PdfButtonFormField buttonFormField);
    private static PdfRgbaColor GetFadedColor(PdfRgbaColor color);
    private static double FadeColorComponent(double colorComponent);
    [CompilerGeneratedAttribute]
public bool get_IsChecked();
    [CompilerGeneratedAttribute]
public void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
public bool get_FadeBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_FadeBackgroundColor(bool value);
    protected virtual PdfRgbaColor get_BackgroundColor();
    protected virtual void DrawContent(PdfFormCommandConstructor constructor);
    protected virtual void FillBackground(PdfFormCommandConstructor constructor);
    protected virtual void DrawSolidBorder(PdfFormCommandConstructor constructor);
    protected virtual void DrawInsetBorder(PdfFormCommandConstructor constructor);
    protected virtual void DrawBeveledBorder(PdfFormCommandConstructor constructor);
    private void AppendEllipticStroke(PdfFormCommandConstructor constructor, PdfPoint startPoint);
    protected virtual void DrawUnderlineBorder(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfByteAlignedImageScanlineDecoder : PdfImageScanlineDecoder {
    private int step;
    public int Stride { get; }
    public PdfByteAlignedImageScanlineDecoder(PdfImage image, int componentsCount, int step);
    public virtual int get_Stride();
    public virtual void FillNextScanline(Byte[] scanline, Byte[] sourceData, int sourceOffset);
}
public class DevExpress.Pdf.Native.PdfByteArrayComparer : object {
    public sealed virtual int Compare(Byte[] x, Byte[] y);
}
public class DevExpress.Pdf.Native.PdfByteKey : ValueType {
    private static int mod;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public int Length { get; }
    public PdfByteKey(Byte[] data);
    public static PdfByteKey CheckCodeLength(Byte[] code, int expectedLength);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    public int get_Length();
    public int Distance(PdfByteKey greaterValue);
    public PdfByteKey Increment();
    public sealed virtual bool Equals(PdfByteKey other);
    public bool IsGreater(PdfByteKey other);
}
public abstract class DevExpress.Pdf.Native.PdfCache`2 : object {
    private IDictionary`2<TKey, TValue> objectStorage;
    private IList`1<TKey> queue;
    private long size;
    private long limit;
    public long Capacity { get; public set; }
    protected IDictionary`2<TKey, TValue> ObjectStorage { get; }
    protected PdfCache`2(long limit);
    public long get_Capacity();
    public void set_Capacity(long value);
    protected IDictionary`2<TKey, TValue> get_ObjectStorage();
    protected void UpdateValue(TKey key, TValue oldValue, TValue value);
    protected void AddValue(TKey key, TValue value);
    protected void Remove(TKey key);
    protected void UpdateQueue(TKey key);
    protected abstract virtual long GetSizeOfValue(TValue value);
    public void Clear(TKey key);
    public void Clear();
    protected void CheckCapacity();
    private void DisposeValue(TValue value);
}
public class DevExpress.Pdf.Native.PdfCaret : object {
    private PdfTextPosition position;
    private PdfCaretViewData viewData;
    private PdfPoint startCoordinates;
    private PdfRectangle boundingBox;
    public PdfTextPosition Position { get; }
    public PdfCaretViewData ViewData { get; }
    public PdfPoint StartCoordinates { get; }
    public PdfRectangle BoundingBox { get; }
    public PdfCaret(PdfTextPosition position, PdfCaretViewData viewData, PdfPoint startCoordinates);
    public PdfTextPosition get_Position();
    public PdfCaretViewData get_ViewData();
    public PdfPoint get_StartCoordinates();
    public PdfRectangle get_BoundingBox();
}
public class DevExpress.Pdf.Native.PdfCaretAnnotationAppearanceBuilder : PdfMarkupAnnotationAppearanceBuilder`1<PdfCaretAnnotation> {
    public PdfCaretAnnotationAppearanceBuilder(PdfCaretAnnotation markupAnnotation);
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfCaretAnnotationState : PdfMarkupAnnotationState`1<PdfCaretAnnotation> {
    public PdfCaretAnnotationState(PdfPageState pageState, PdfCaretAnnotation annotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfCaretViewData : ValueType {
    private PdfPoint topLeft;
    private double height;
    private double angle;
    public PdfPoint TopLeft { get; }
    public double Height { get; }
    public double Angle { get; }
    public PdfCaretViewData(PdfPoint topLeft, double height, double angle);
    public PdfPoint get_TopLeft();
    public double get_Height();
    public double get_Angle();
}
public class DevExpress.Pdf.Native.PdfCFFFontProgramFacade : PdfFontProgramFacade {
    [CompilerGeneratedAttribute]
private IDictionary`2<short, short> <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GlyphCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastChar>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public IDictionary`2<short, short> Charset { get; private set; }
    public int GlyphCount { get; private set; }
    public int FirstChar { get; private set; }
    public int LastChar { get; private set; }
    public Byte[] Data { get; private set; }
    private PdfCFFFontProgramFacade(PdfRectangle fontBBox, IPdfCodePointMapping mapping);
    private static PdfCFFFontProgramFacade Create(Byte[] compactFontFile, Func`2<PdfType1FontCompactFontProgram, IPdfCodePointMapping> createMapping);
    public static PdfCFFFontProgramFacade Create(PdfSimpleFont font, Byte[] compactFontFile);
    public static PdfCFFFontProgramFacade Create(PdfType0Font font, Byte[] compactFontFile);
    [CompilerGeneratedAttribute]
public IDictionary`2<short, short> get_Charset();
    [CompilerGeneratedAttribute]
private void set_Charset(IDictionary`2<short, short> value);
    [CompilerGeneratedAttribute]
public int get_GlyphCount();
    [CompilerGeneratedAttribute]
private void set_GlyphCount(int value);
    [CompilerGeneratedAttribute]
public int get_FirstChar();
    [CompilerGeneratedAttribute]
private void set_FirstChar(int value);
    [CompilerGeneratedAttribute]
public int get_LastChar();
    [CompilerGeneratedAttribute]
private void set_LastChar(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
}
public static class DevExpress.Pdf.Native.PdfCharSetStringParser : object {
    private static Nullable`1<int> ConvertToHexadecimalDigit(char c);
    public static IList`1<string> Parse(string charSetString);
}
public class DevExpress.Pdf.Native.PdfChoiceFormFieldAppearanceBuilder : PdfTextBasedFormFieldAppearanceBuilder`1<PdfChoiceFormField> {
    public static PdfColor SelectionForeColor;
    public static PdfColor SelectionBackColor;
    public PdfChoiceFormFieldAppearanceBuilder(PdfWidgetAnnotation widget, PdfChoiceFormField formField, IPdfExportFontProvider fontSearch);
    private static PdfChoiceFormFieldAppearanceBuilder();
    private void DrawTextBox(PdfFormCommandConstructor constructor, PdfRectangle clipRect, string text, PdfColor color);
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
    protected virtual void DrawContent(PdfFormCommandConstructor constructor);
}
internal class DevExpress.Pdf.Native.PdfChoiceFormFieldProperties : ValueType {
    [CompilerGeneratedAttribute]
private IList`1<PdfOptionsFormFieldOption> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TopIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SelectedValues>k__BackingField;
    public IList`1<PdfOptionsFormFieldOption> Options { get; public set; }
    public int TopIndex { get; public set; }
    public IList`1<string> SelectedValues { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<PdfOptionsFormFieldOption> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IList`1<PdfOptionsFormFieldOption> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TopIndex();
    [CompilerGeneratedAttribute]
public void set_TopIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_SelectedValues();
    [CompilerGeneratedAttribute]
public void set_SelectedValues(IList`1<string> value);
}
public class DevExpress.Pdf.Native.PdfCIDCharset : object {
    private static string charsetResourceName;
    private static ThreadLocal`1<WeakReferenceCache`2<string, PdfCIDCharset>> cache;
    public static string AdobeGB1;
    public static string AdobeCNS1;
    public static string AdobeJapan1;
    public static string AdobeKorea1;
    private static short notDef;
    private IDictionary`2<short, short> mapping;
    private PdfCIDCharset(IDictionary`2<short, short> mapping, string registryOrdering);
    private static PdfCIDCharset();
    public static PdfCIDCharset GetPredefinedCharset(PdfType0Font font);
    public static PdfCIDCharset GetPredefinedCharset(string registryOrdering);
    public static PdfFontCharset GetFontCharsetByPredefinedEncodingName(string encodingName);
    public static PdfCIDCharset GetCharsetByPredefinedEncodingName(string encodingName);
    private static PdfCIDCharset Parse(string registryOrdering);
    public short GetUnicode(short cid);
}
public class DevExpress.Pdf.Native.PdfCIDCMap : PdfCMap`1<short> {
    private static string encodingsResourceName;
    private static ThreadLocal`1<WeakReferenceCache`2<string, PdfCIDCMap>> predefinedEncodingsCache;
    private PdfCIDCMap(IList`1<Tuple`2<Byte[], short>> map);
    private static PdfCIDCMap();
    public static PdfCIDCMap Parse(Byte[] data);
    public static PdfCIDCMap GetPredefined(string cmapName);
    private static PdfCIDCMap CreatePredefined(string cmapName);
    private static string ReadPascalString(BinaryReader reader);
    private static IList`1<Tuple`2<Byte[], short>> GetPredefinedCMapData(string cmapName);
    private static bool ReadCmap(CmapPointer[] pointers, BinaryReader reader, string cmapName, IList`1<Tuple`2<Byte[], short>> cmapData);
    public PdfStringCommandData GetStringData(Byte[] data, Double[] glyphOffsets);
    public short GetCID(Byte[] code);
}
public class DevExpress.Pdf.Native.PdfCIDCMapStreamParser : PdfCMapStreamParser`1<short> {
    private PdfCIDCMapStreamParser(Byte[] data);
    public static IList`1<Tuple`2<Byte[], short>> Parse(Byte[] data);
    protected virtual short GetCIDFromArray(Byte[] bytes);
    protected virtual short GetCIDFromValue(int code);
    protected virtual PdfCMapParsingList`1<short> CreateCMapParsingList();
}
public class DevExpress.Pdf.Native.PdfCIEBasedImageScanlineSource : PdfImageScanlineSourceDecorator {
    private PdfColorSpace colorSpace;
    private Byte[] sourceScanline;
    private int sourceComponentsCount;
    public int ComponentsCount { get; }
    public PdfCIEBasedImageScanlineSource(IPdfImageScanlineSource source, PdfColorSpace colorSpace, int width, int sourceComponentsCount);
    public virtual int get_ComponentsCount();
    public virtual void FillNextScanline(Byte[] scanline);
    protected virtual void Decode(Double[] pixelBuffer, Byte[] data, int offset);
}
public class DevExpress.Pdf.Native.PdfCircleAnnotationAppearanceBuilder : PdfShapeAnnotationAppearanceBuilder {
    public PdfCircleAnnotationAppearanceBuilder(PdfCircleAnnotation squareAnnotation);
    protected virtual void RebuildShapeAppearance(PdfFormCommandConstructor constructor, PdfRectangle rect);
}
public class DevExpress.Pdf.Native.PdfCircleAnnotationState : PdfShapeAnnotationState`1<PdfCircleAnnotation> {
    public PdfCircleAnnotationState(PdfPageState pageState, PdfCircleAnnotation annotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfClonedInteractiveFormFieldsList : PdfInteractiveFormFieldsList {
    private List`1<PdfIndirectObjectId> fieldIds;
    private List`1<PdfIndirectObjectId> newFieldIds;
    private PdfClonedInteractiveFormFieldsList(List`1<PdfIndirectObjectId> fieldIds, int objectNumber);
    public PdfClonedInteractiveFormFieldsList(List`1<PdfInteractiveFormField> fields, PdfObjectCollection objectCollection);
    public virtual IEnumerable`1<PdfInteractiveFormField> GetFormFields(PdfObjectCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isCloning);
    protected internal virtual void NotifyMergeCompleted(PdfObjectCollection objects);
}
public class DevExpress.Pdf.Native.PdfCloningContext : PdfWritingContextBase {
    private Dictionary`2<string, string> renamedDestinations;
    private Dictionary`2<string, string> renamedFormField;
    private HashSet`1<string> savedDestinationNames;
    private HashSet`1<IPdfObjectId> clonedDirectObjects;
    private Guid foreignCollectionId;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenamedFonts>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenamedXObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenamedColorSpaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenamedPatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenamedShadings>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenamedGraphicsStateParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RenamedProperties>k__BackingField;
    public Guid CollectionId { get; public set; }
    public bool IsCloning { get; }
    public Dictionary`2<string, string> RenamedFonts { get; }
    public Dictionary`2<string, string> RenamedXObjects { get; }
    public Dictionary`2<string, string> RenamedColorSpaces { get; }
    public Dictionary`2<string, string> RenamedPatterns { get; }
    public Dictionary`2<string, string> RenamedShadings { get; }
    public Dictionary`2<string, string> RenamedGraphicsStateParameters { get; }
    public Dictionary`2<string, string> RenamedProperties { get; }
    public PdfCloningContext(Guid foreignCollectionId, PdfDocumentCatalog documentCatalog);
    public sealed virtual Guid get_CollectionId();
    public void set_CollectionId(Guid value);
    public sealed virtual bool get_IsCloning();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenamedFonts();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenamedXObjects();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenamedColorSpaces();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenamedPatterns();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenamedShadings();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenamedGraphicsStateParameters();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RenamedProperties();
    private PdfName GetRenamedResourceName(Dictionary`2<string, string> renamedResources, string resourceName);
    private string GetRenamedName(Dictionary`2<string, string> names, string currentName);
    public IEnumerable`1<IPdfObjectId> GetClonedDirectObjects();
    public sealed virtual Nullable`1<PdfDirectObjectId> GetRelatedObjectId(PdfObject value, int number);
    public IEnumerable`1<string> GetSavedDestinationNames();
    public void RenameFormFields(IList`1<PdfInteractiveFormField> fields, IList`1<PdfInteractiveFormField> foreignFields);
    public void RenameDestinations(IDictionary`2<string, PdfDestination> destinations, IDictionary`2<string, PdfDestination> foreignDestinations);
    public sealed virtual void AddSavedDestinationName(string name);
    public sealed virtual string GetDestinationName(string currentName);
    public sealed virtual string GetFormFieldName(string currentName);
    public sealed virtual PdfName FindGraphicsStateParametersName(string resourceName);
    public sealed virtual PdfName FindFontName(string resourceName);
    public sealed virtual PdfName FindXObjectName(string resourceName);
    public sealed virtual PdfName FindColorSpaceName(string resourceName);
    public sealed virtual PdfName FindPatternName(string resourceName);
    public sealed virtual PdfName FindShadingName(string resourceName);
    public sealed virtual PdfName FindPropertiesName(string resourceName);
}
public class DevExpress.Pdf.Native.PdfCMap`1 : object {
    private PdfCMapTreeBranch`1<TResult> mappingTree;
    private int maxCodeLength;
    internal bool IsEmpty { get; }
    protected TResult DefaultValue { get; }
    protected PdfCMap`1(IList`1<Tuple`2<Byte[], TResult>> map);
    internal bool get_IsEmpty();
    protected virtual TResult get_DefaultValue();
    protected bool TryMapCode(Byte[] code, TResult& result);
    protected virtual PdfCMapFindResult`1<TResult> Find(Byte[] code, int position);
}
public class DevExpress.Pdf.Native.PdfCMapFindResult`1 : ValueType {
    private T value;
    private int codeLength;
    public T Value { get; }
    public int CodeLength { get; }
    public PdfCMapFindResult`1(T value, int codeLength);
    public T get_Value();
    public int get_CodeLength();
}
public abstract class DevExpress.Pdf.Native.PdfCMapParsingList`1 : object {
    private IList`1<PdfCMapRangeValue`1<T>> mappingList;
    public PdfCMapRangeValue`1<T> Last { get; }
    public int Count { get; }
    private static bool CanExtend(PdfCMapRangeValue`1<T> range1, PdfCMapRangeValue`1<T> range2);
    public PdfCMapRangeValue`1<T> get_Last();
    public int get_Count();
    public bool CheckMaxCodeLength(int byteCount);
    public void Add(Byte[] start, Byte[] finish, T v);
    public void Add(Byte[] start, Byte[] finish, IList`1<T> values);
    public IList`1<Tuple`2<Byte[], T>> ToPlaneArray();
    protected abstract virtual IPdfCMapValue`1<T> CreateCMapValue(T value);
}
public class DevExpress.Pdf.Native.PdfCMapRangeValue`1 : ValueType {
    [CompilerGeneratedAttribute]
private PdfByteKey <StartCode>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfByteKey <FinishCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IPdfCMapValue`1<T> <Value>k__BackingField;
    public PdfByteKey StartCode { get; }
    public PdfByteKey FinishCode { get; }
    public int Count { get; }
    public IPdfCMapValue`1<T> Value { get; }
    public PdfCMapRangeValue`1(Byte[] code, IPdfCMapValue`1<T> value);
    public PdfCMapRangeValue`1(Byte[] start, Byte[] finish, IPdfCMapValue`1<T> value);
    [CompilerGeneratedAttribute]
public PdfByteKey get_StartCode();
    [CompilerGeneratedAttribute]
public PdfByteKey get_FinishCode();
    public int get_Count();
    [CompilerGeneratedAttribute]
public IPdfCMapValue`1<T> get_Value();
    public bool IsCodeOutOfRange(PdfByteKey code);
}
public abstract class DevExpress.Pdf.Native.PdfCMapStreamParser`1 : PdfDocumentParser {
    private bool singleByteCodesOnly;
    protected PdfCMapStreamParser`1(Byte[] data, bool singleByteCodesOnly);
    protected abstract virtual TCID GetCIDFromArray(Byte[] bytes);
    protected abstract virtual TCID GetCIDFromValue(int code);
    private Byte[] ReadHexNumber();
    protected abstract virtual PdfCMapParsingList`1<TCID> CreateCMapParsingList();
    public PdfCMapParsingList`1<TCID> Parse();
    protected virtual object ReadAlphabeticalObject(bool isHexadecimalStringSeparatedUsingWhiteSpaces, bool isIndirect);
    protected virtual bool CheckDictionaryAlphabeticalToken(string token);
}
public class DevExpress.Pdf.Native.PdfCMapTreeBranch`1 : PdfCMapTreeNode`1<T> {
    private Dictionary`2<byte, PdfCMapTreeNode`1<T>> children;
    private T defaultValue;
    public bool IsFinal { get; }
    public PdfCMapTreeBranch`1(T defaultValue);
    public virtual bool get_IsFinal();
    public virtual void Fill(Byte[] code, int position, T value);
    public virtual PdfCMapFindResult`1<T> Find(Byte[] code, int position);
}
internal class DevExpress.Pdf.Native.PdfCMapTreeLeaf`1 : PdfCMapTreeNode`1<T> {
    private T value;
    public bool IsFinal { get; }
    public PdfCMapTreeLeaf`1(T value);
    public virtual bool get_IsFinal();
    public virtual void Fill(Byte[] code, int position, T value);
    public virtual PdfCMapFindResult`1<T> Find(Byte[] code, int position);
}
public abstract class DevExpress.Pdf.Native.PdfCMapTreeNode`1 : object {
    public bool IsFinal { get; }
    public abstract virtual bool get_IsFinal();
    public abstract virtual void Fill(Byte[] code, int position, T value);
    public abstract virtual PdfCMapFindResult`1<T> Find(Byte[] code, int position);
}
public class DevExpress.Pdf.Native.PdfCMYKToRGBImageScanlineSource : PdfImageScanlineSourceDecorator {
    private int width;
    private Byte[] sourceScanline;
    public int ComponentsCount { get; }
    public PdfCMYKToRGBImageScanlineSource(IPdfImageScanlineSource source, int width);
    private static void ConvertCMYKToRGB(byte cyan, byte magenta, byte yellow, byte black, Byte[] destination, int destinationOffset);
    public virtual int get_ComponentsCount();
    public virtual void FillNextScanline(Byte[] scanline);
}
public class DevExpress.Pdf.Native.PdfColorKeyMaskedImageDataSource : PdfImageDataSource {
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfColorKeyMaskedImageDataSource(IPdfImageScanlineSource source, int width);
    public virtual int get_ComponentsCount();
    public virtual bool get_HasAlpha();
    public virtual void FillBuffer(Byte[] buffer, int scanlineCount);
}
public class DevExpress.Pdf.Native.PdfColorSpaceResourceDictionary : PdfResourceDictionary`1<PdfColorSpace> {
    protected string Prefix { get; }
    protected string ResourceKey { get; }
    public PdfColorSpaceResourceDictionary(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfColorSpaceResourceDictionary parentResourceDictionary);
    protected virtual string get_Prefix();
    protected virtual string get_ResourceKey();
    protected virtual PdfColorSpace CreateResource(object value);
    public virtual PdfColorSpace GetResource(string resourceName);
}
public class DevExpress.Pdf.Native.PdfCommandConstructor : object {
    private static double ellipticFactor;
    private static byte useEvenOddRule;
    private static byte space;
    private static Byte[] saveGraphicsStateData;
    private static Byte[] restoreGraphicsStateData;
    private static Byte[] nameData;
    private static Byte[] setGraphicsStateData;
    private static Byte[] setLineStyleData;
    private static Byte[] modifyTransformationMatrixData;
    private static Byte[] intersectClipData;
    private static Byte[] closePathWithoutFillingAndStroking;
    private static Byte[] beginPathData;
    private static Byte[] beginBezierPathData;
    private static Byte[] setPatternColorSpaceForNonStrokingOperationsData;
    private static Byte[] setPattermColorSpaceForStrokingOperationsData;
    private static Byte[] lineSegmentData;
    private static Byte[] bezierSegmentData;
    private static Byte[] closePathData;
    private static Byte[] setColorSpaceForNonStrokingOperationsData;
    private static Byte[] setColorSpaceForStrokingOperationsData;
    private static Byte[] setGrayColorSpaceForNonStrokingOperationsData;
    private static Byte[] setCMYKColorSpaceForNonStrokingOperationsData;
    private static Byte[] setRGBColorSpaceForNonStrokingOperationsData;
    private static Byte[] setGrayColorSpaceForStrokingOperationsData;
    private static Byte[] setCMYKColorSpaceForStrokingOperationsData;
    private static Byte[] setRGBColorSpaceForStrokingOperationsData;
    private static Byte[] setColorAdvancedForNonStrokingOperationsData;
    private static Byte[] setColorAdvancedForStrokingOperationsData;
    private static Byte[] setLineJoinData;
    private static Byte[] setMiterLimitData;
    private static Byte[] setRenderingIntentData;
    private static Byte[] setFlatnessToleranceData;
    private static Byte[] setTextRenderingModeData;
    private static Byte[] setLineWidthData;
    private static Byte[] drawTextData;
    private static Byte[] setLineCapData;
    private static Byte[] strokePathData;
    private static Byte[] obliqueStringData;
    private static Byte[] fillNonZeroPathData;
    private static Byte[] appendRectangleData;
    private static Byte[] drawXObjectData;
    private static Byte[] setTextFontData;
    private static Byte[] setTextMatrixData;
    private static Byte[] closeAndStrokeData;
    private static Byte[] beginMarkedContentData;
    private static Byte[] endMarkedContentData;
    private static Byte[] beginCompatGroupData;
    private static Byte[] endCompatGroupData;
    private static Byte[] setCharacterSpacingData;
    private static Byte[] setWordSpacingData;
    private static Byte[] setTextHorizontalScalingData;
    private static Byte[] setTextLeadingData;
    private static Byte[] setTextRiseData;
    private static Byte[] endTextData;
    private static Byte[] drawStringBeginTextData;
    private static Byte[] showTextCommand;
    private static Byte[] showTextWithGlyphPositioningCommand;
    private static Byte[] fillAndStrokePath;
    private static Byte[] drawShadingCommandData;
    private static Byte[] beginMarkedContentWithTagData;
    private static Byte[] beginMarkedContentWithPropertiesData;
    private static Byte[] designateMarkedContentPointWithTagData;
    private static Byte[] designateMarkedContentPointWithPropertiesData;
    private PdfStreamWriter writer;
    private IPdfResources resources;
    private Stack`1<PdfTransformationMatrix> matrixStack;
    private PdfTransformationMatrix currentTransformationMatrix;
    public IPdfDocumentCatalog DocumentCatalog { get; }
    public Byte[] Commands { get; }
    public PdfTransformationMatrix CurrentTransformationMatrix { get; }
    public PdfCommandConstructor(IPdfResources resources);
    private static PdfCommandConstructor();
    public IPdfDocumentCatalog get_DocumentCatalog();
    public Byte[] get_Commands();
    public PdfTransformationMatrix get_CurrentTransformationMatrix();
    public void AddCommands(Byte[] data);
    public void SaveGraphicsState();
    public void RestoreGraphicsState();
    private void WriteMarkedContentOperator(string tag, PdfProperties properties, Byte[] withProperties, Byte[] withTag);
    public void DesignateMarkedContentPoint(string tag, PdfProperties properties);
    public void BeginCompatibilityGroup();
    public void EndCompatibilityGroup();
    public void BeginMarkedContent();
    public void BeginMarkedContent(string tag, PdfProperties properties);
    public void EndMarkedContent();
    public void SetGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    public void ModifyTransformationMatrix(PdfTransformationMatrix matrix);
    public void IntersectClip(PdfRectangle rect);
    public void IntersectClip(PdfGraphicsPath path);
    public void IntersectClip(PdfGraphicsPath path, bool nonZero);
    public void IntersectClip(IList`1<PdfGraphicsPath> paths, bool nonZero);
    public void IntersectClipByEllipse(PdfRectangle ellipseBBox);
    private void SetColorAdvanced(PdfColor color, PdfColorSpace colorSpace, Byte[] setColorSpaceCommandData, Byte[] setColorAdvancedData);
    public void SetColorAdvancedForNonStrokingOperations(PdfColorSpace colorSpace, PdfColor color);
    public void SetColorAdvancedForStrokingOperations(PdfColorSpace colorSpace, PdfColor color);
    public void SetColorForNonStrokingOperations(PdfColor color);
    public void SetColorForNonStrokingOperations(PdfRGBColor color);
    public void SetColorForNonStrokingOperations(double gray);
    public void SetColorForStrokingOperations(PdfColor color);
    public void SetColorForStrokingOperations(PdfRGBColor color);
    public void SetCharacterSpacing(double characterSpacing);
    public void SetWordSpacing(double wordSpacing);
    public void SetTextHorizontalScaling(double textHorizontalScaling);
    public void SetTextLeading(double value);
    public void SetTextRise(double value);
    public void SetLineStyle(PdfLineStyle lineStyle);
    public void SetLineJoinStyle(PdfLineJoinStyle lineJoin);
    public void SetLineWidth(double lineWidth);
    public void SetLineCapStyle(PdfLineCapStyle capStyle);
    public void SetMiterLimit(double miterLimit);
    public void SetRenderingIntent(PdfRenderingIntent value);
    public void SetFlatnessTolerance(double value);
    public void SetTextRenderingMode(PdfTextRenderingMode mode);
    public void DrawLine(PdfPoint pt1, PdfPoint pt2);
    public void DrawLines(PdfPoint[] points);
    public void DrawRectangle(PdfRectangle rect);
    public void DrawPolygon(PdfPoint[] points);
    public void DrawEllipse(PdfRectangle rect);
    public void DrawBezier(PdfPoint start, PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint finish);
    public void DrawBeziers(PdfPoint[] points);
    public void DrawPaths(IList`1<PdfGraphicsPath> paths);
    public void FillRectangle(PdfRectangle rect);
    public void FillPolygon(PdfPoint[] points, bool nonZero);
    public void FillEllipse(PdfRectangle rect);
    public void FillPath(IList`1<PdfGraphicsPath> paths, bool nonZero);
    public void DrawImage(PdfXObject obj, PdfRectangle bounds);
    public void DrawImage(PdfXObject obj, PdfRectangle bounds, PdfTransformationMatrix transform);
    public void DrawForm(PdfXObject obj, PdfTransformationMatrix matrix);
    public void AppendRectangle(PdfRectangle rect);
    public void AppendPaths(IList`1<PdfGraphicsPath> paths);
    public void AppendPath(PdfGraphicsPath path);
    public void CloseAndStrokePath();
    public void BeginText();
    public void EndText();
    public void SetTextFont(PdfFont font, double fontSize);
    public void SetTextFont(string fontName, double fontSize);
    public void StartTextLineWithOffsets(double x, double y);
    public void ShowText(Byte[] text, Double[] glyphOffsets);
    public void SetTextMatrix(PdfTransformationMatrix matrix);
    public void SetObliqueTextMatrix(double x, double y);
    public void FillPath(bool nonZero);
    public void FillAndStrokePath(bool nonZero);
    public void StrokePath();
    public void ClosePath();
    public void ClosePathWithoutFillingAndStroking();
    public void AppendEllipse(PdfRectangle rect);
    public void DrawShading(PdfShading shading);
    public PdfTextWriter CreateTextWriter(bool useTwoByteCodePoints);
    public void AppendPolygon(PdfPoint[] points);
    public void DrawXObject(PdfXObject obj);
    public void DrawNamedXObject(string name, PdfXObject obj);
    private void DrawXObject(PdfXObject obj, PdfTransformationMatrix matrix);
    private void WriteIntersectClipCommand(bool nonZero);
    private void GeneratePathCommands(PdfGraphicsPath path);
    private void SetColorWithPattern(PdfColor color, Byte[] setColorSpaceData, Byte[] setPatternColorSpaceData, Byte[] setColorAdvancedData);
    public sealed virtual void Dispose();
}
public abstract class DevExpress.Pdf.Native.PdfCommandInterpreter : PdfDisposableObject {
    protected static double GlyphPositionToTextSpaceFactor;
    private Stack`1<PdfGraphicsState> graphicsStateStack;
    private PdfPage page;
    private PdfRectangle boundingBox;
    private PdfGraphicsState graphicsState;
    private List`1<PdfGraphicsPath> paths;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ClipUseNonZeroWindingRule>k__BackingField;
    protected Nullable`1<bool> ClipUseNonZeroWindingRule { get; private set; }
    protected int GraphicsStateStackSize { get; }
    public PdfResources PageResources { get; }
    public PdfGraphicsState GraphicsState { get; }
    public PdfPage Page { get; }
    protected IPdfRenderingFontInfoProvider RenderingFontInfoProvider { get; }
    private PdfGraphicsPath CurrentPath { get; }
    protected PdfRectangle BoundingBox { get; }
    protected IList`1<PdfGraphicsPath> Paths { get; }
    protected PdfTransformationMatrix TextSpaceMatrix { get; }
    protected int MinGraphicsStateCount { get; }
    protected PdfCommandInterpreter(PdfPage page, PdfRectangle boundingBox, PdfGraphicsState initalState);
    protected PdfCommandInterpreter(PdfPage page, PdfRectangle boundingBox);
    [CompilerGeneratedAttribute]
protected Nullable`1<bool> get_ClipUseNonZeroWindingRule();
    [CompilerGeneratedAttribute]
private void set_ClipUseNonZeroWindingRule(Nullable`1<bool> value);
    protected int get_GraphicsStateStackSize();
    public sealed virtual PdfResources get_PageResources();
    public PdfGraphicsState get_GraphicsState();
    public PdfPage get_Page();
    protected virtual IPdfRenderingFontInfoProvider get_RenderingFontInfoProvider();
    private PdfGraphicsPath get_CurrentPath();
    protected PdfRectangle get_BoundingBox();
    protected IList`1<PdfGraphicsPath> get_Paths();
    protected PdfTransformationMatrix get_TextSpaceMatrix();
    protected virtual int get_MinGraphicsStateCount();
    protected void Execute(IEnumerable`1<PdfCommand> commands);
    public sealed virtual void SetCMYKColorForNonStrokingOperations(double c, double m, double y, double k);
    public sealed virtual void SetCMYKColorForStrokingOperations(double c, double m, double y, double k);
    public sealed virtual void SetRGBColorForNonStrokingOperations(double r, double g, double b);
    public sealed virtual void SetRGBColorForStrokingOperations(double r, double g, double b);
    public sealed virtual void SetGrayColorForNonStrokingOperations(double gray);
    public sealed virtual void SetGrayColorForStrokingOperations(double gray);
    public virtual void SetColorForStrokingOperations(PdfColor color);
    public virtual void SetColorForNonStrokingOperations(PdfColor color);
    public sealed virtual void SetColorSpaceForStrokingOperations(PdfColorSpace colorSpace);
    public sealed virtual void SetColorSpaceForNonStrokingOperations(PdfColorSpace colorSpace);
    public sealed virtual void FillAndStrokePath(bool useNonZeroWindingRule);
    public sealed virtual void StrokePath();
    public sealed virtual void CloseAndStrokePath();
    public sealed virtual void CloseFillAndStrokePath(bool useNonZeroWindingRule);
    public sealed virtual void FillPath(bool useNonZeroWindingRule);
    public sealed virtual void EndPathWithoutFillingAndStroking();
    public sealed virtual void Clip(bool useNonzeroWindingRule);
    public void Execute();
    public virtual void UpdateTransformationMatrix(PdfTransformationMatrix matrix);
    public sealed virtual void SetLineWidth(double lineWidth);
    public sealed virtual void SetLineStyle(PdfLineStyle lineStyle);
    public sealed virtual void SetLineCapStyle(PdfLineCapStyle lineCapStyle);
    public sealed virtual void SetLineJoinStyle(PdfLineJoinStyle lineJoinStyle);
    public sealed virtual void SetMiterLimit(double miterLimit);
    public sealed virtual void SetFlatnessTolerance(double flatnessTolerance);
    public sealed virtual void SetRenderingIntent(PdfRenderingIntent renderingIntent);
    public sealed virtual void ApplyGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    public sealed virtual void SetCharacterSpacing(double characterSpacing);
    public sealed virtual void SetWordSpacing(double wordSpacing);
    public sealed virtual void SetTextLeading(double leading);
    public sealed virtual void SetTextHorizontalScaling(double scaling);
    public sealed virtual void SetTextRise(double rise);
    public sealed virtual void StartTextLine(double xOffset, double yOffset);
    public sealed virtual void StartTextLineWithLeading(double xOffset, double yOffset);
    public sealed virtual void ShowTextOnNextLine(Byte[] data);
    public sealed virtual void ShowTextOnNextLineWithSpacing(double wordSpacing, double characterSpacing, Byte[] data);
    public sealed virtual void StartTextLine();
    public sealed virtual void ShowText(Byte[] data, Double[] offsets);
    public void DrawForm(PdfTransformationMatrix matrix, PdfForm form);
    public virtual void SaveGraphicsState();
    public virtual void RestoreGraphicsState();
    public virtual void BeginText();
    public virtual void EndText();
    public virtual void SetTextRenderingMode(PdfTextRenderingMode renderingMode);
    public virtual void SetFont(PdfFont font, double fontSize);
    public virtual void SetTextMatrix(PdfTransformationMatrix matrix);
    public virtual void BeginPath(PdfPoint startPoint);
    public virtual void AppendPathLineSegment(PdfPoint endPoint);
    public virtual void AppendPathBezierSegment(PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint endPoint);
    public virtual void AppendPathBezierSegment(PdfPoint controlPoint2, PdfPoint endPoint);
    public virtual void ClosePath();
    public virtual void AppendRectangle(double x, double y, double width, double height);
    protected virtual void ClipAndClearPaths();
    public virtual void DrawTransparencyGroup(PdfGroupForm form);
    protected virtual void DrawType3Glyph(PdfType3FontGlyph glyph);
    protected virtual void DrawType3FontString(PdfStringData data, PdfType3Font type3Font);
    protected virtual void Dispose(bool disposing);
    protected void ClipRectangle(PdfRectangle rectangle);
    protected virtual void SetTransformationMatrix(PdfTransformationMatrix matrix);
    protected abstract virtual void StrokePaths();
    protected abstract virtual void FillPaths(bool useNonzeroWindingRule);
    protected abstract virtual void ClipPaths();
    protected abstract virtual void UpdateGraphicsState(PdfGraphicsStateChange change);
    protected abstract virtual void DrawString(PdfStringData stringData);
    public abstract virtual void DrawImage(PdfImage image);
    public sealed virtual void DrawInlineImage(PdfImage image);
    public abstract virtual void DrawShading(PdfShading shading);
    public abstract virtual void DrawForm(PdfForm form);
    public sealed virtual void DrawCompatibilityGroup(IEnumerable`1<PdfCommand> commands);
    public abstract virtual void DrawMarkedContent(IEnumerable`1<PdfCommand> commands, PdfProperties properties, string tag);
    public virtual void DesignateMarkedContentPoint(PdfProperties properties, string tag);
}
public class DevExpress.Pdf.Native.PdfComment : object {
    private string text;
    public string Text { get; }
    public PdfComment(string text);
    public string get_Text();
}
public class DevExpress.Pdf.Native.PdfCommonAnnotationState : PdfAnnotationState`1<PdfAnnotation> {
    public PdfCommonAnnotationState(PdfPageState pageState, PdfAnnotation annotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfCommonImageScanlineSource : object {
    private Byte[] sourceData;
    private PdfImageScanlineDecoder scanlineDecoder;
    private int sourceOffset;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    private PdfCommonImageScanlineSource(Byte[] sourceData, PdfImageScanlineDecoder scanlineDecoder);
    public static IPdfImageScanlineSource CreateImageScanlineSource(Byte[] sourceData, PdfImage image, int componentsCount);
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void Dispose();
    public sealed virtual void FillNextScanline(Byte[] scanlineData);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatBinaryIndex : PdfCompactFontFormatIndex {
    private IList`1<Byte[]> data;
    public IList`1<Byte[]> Data { get; }
    protected int ObjectsCount { get; }
    public PdfCompactFontFormatBinaryIndex(IList`1<Byte[]> data);
    public PdfCompactFontFormatBinaryIndex(PdfBinaryStream stream);
    public IList`1<Byte[]> get_Data();
    protected virtual int get_ObjectsCount();
    protected virtual void ProcessObjectsCount(int objectsCount);
    protected virtual void ProcessObject(int index, Byte[] objectData);
    protected virtual int GetObjectLength(int index);
    protected virtual void WriteObject(PdfBinaryStream stream, int index);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatCIDGlyphGroupDataWriter : object {
    private PdfCompactFontFormatStringIndex stringIndex;
    private List`1<PdfCompactFontFormatDictIndexOperator> operators;
    private PdfCompactFontFormatDictIndexPrivateOperator privateOperator;
    public PdfCompactFontFormatDictIndexPrivateOperator PrivateOperator { get; }
    public int DataSize { get; }
    public PdfCompactFontFormatCIDGlyphGroupDataWriter(PdfType1FontCIDGlyphGroupData data, PdfCompactFontFormatStringIndex stringIndex);
    public PdfCompactFontFormatDictIndexPrivateOperator get_PrivateOperator();
    public int get_DataSize();
    public void Write(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexBaseFontBlendOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private Double[] baseFontBlend;
    public PdfCompactFontFormatDictIndexBaseFontBlendOperator(Double[] baseFontBlend);
    public PdfCompactFontFormatDictIndexBaseFontBlendOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexBaseFontNameOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private string baseFontName;
    public PdfCompactFontFormatDictIndexBaseFontNameOperator(string baseFontName);
    public PdfCompactFontFormatDictIndexBaseFontNameOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexCharsetOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfType1FontCharset charset;
    private int offset;
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Offset { get; private set; }
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Length { get; }
    public PdfCompactFontFormatDictIndexCharsetOperator(PdfType1FontCharset charset);
    public PdfCompactFontFormatDictIndexCharsetOperator(IList`1<object> operands);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Offset();
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.set_Offset(int value);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Length();
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.WriteData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexCharStringsOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfCompactFontFormatBinaryIndex charStrings;
    private int offset;
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Offset { get; private set; }
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Length { get; }
    public PdfCompactFontFormatDictIndexCharStringsOperator(IList`1<Byte[]> charStrings);
    public PdfCompactFontFormatDictIndexCharStringsOperator(IList`1<object> operands);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Offset();
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.set_Offset(int value);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Length();
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.WriteData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexCharstringTypeOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private PdfType1FontType fontType;
    public PdfCompactFontFormatDictIndexCharstringTypeOperator(PdfType1FontType fontType);
    public PdfCompactFontFormatDictIndexCharstringTypeOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexCIDCountOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private int cidCount;
    public PdfCompactFontFormatDictIndexCIDCountOperator(int cidCount);
    public PdfCompactFontFormatDictIndexCIDCountOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexCIDFontVersionOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double cidFontVersion;
    public PdfCompactFontFormatDictIndexCIDFontVersionOperator(double cidFontVersion);
    public PdfCompactFontFormatDictIndexCIDFontVersionOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexCopyrightOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private string copyright;
    public PdfCompactFontFormatDictIndexCopyrightOperator(string copyright);
    public PdfCompactFontFormatDictIndexCopyrightOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexEncodingOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfType1FontEncoding encoding;
    private int offset;
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Offset { get; private set; }
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Length { get; }
    public PdfCompactFontFormatDictIndexEncodingOperator(PdfType1FontEncoding encoding);
    public PdfCompactFontFormatDictIndexEncodingOperator(IList`1<object> operands);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Offset();
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.set_Offset(int value);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Length();
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.WriteData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexFamilyNameOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private string familyName;
    public PdfCompactFontFormatDictIndexFamilyNameOperator(string familyName);
    public PdfCompactFontFormatDictIndexFamilyNameOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexFDArrayOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private PdfType1FontCIDGlyphGroupData[] glyphGroupData;
    private PdfCompactFontFormatStringIndex stringIndex;
    private PdfCompactFontFormatCIDGlyphGroupDataWriter[] writers;
    private int offset;
    public IList`1<ICompactFontFormatDictIndexOffsetOperator> OffsetOperators { get; }
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Offset { get; private set; }
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Length { get; }
    public PdfCompactFontFormatDictIndexFDArrayOperator(PdfType1FontCIDGlyphGroupData[] glyphGroupData, PdfCompactFontFormatStringIndex stringIndex);
    public PdfCompactFontFormatDictIndexFDArrayOperator(IList`1<object> operands);
    public IList`1<ICompactFontFormatDictIndexOffsetOperator> get_OffsetOperators();
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Offset();
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.set_Offset(int value);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Length();
    private void CreateWritersIfNeeded();
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.WriteData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexFDSelectOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private PdfType1FontCIDGlyphGroupSelector selector;
    private int offset;
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Offset { get; private set; }
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Length { get; }
    public PdfCompactFontFormatDictIndexFDSelectOperator(PdfType1FontCIDGlyphGroupSelector selector);
    public PdfCompactFontFormatDictIndexFDSelectOperator(IList`1<object> operands);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Offset();
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.set_Offset(int value);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Length();
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.WriteData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexFontBBoxOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfRectangle fontBBox;
    public PdfCompactFontFormatDictIndexFontBBoxOperator(PdfRectangle fontBBox);
    public PdfCompactFontFormatDictIndexFontBBoxOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexFontMatrixOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private PdfTransformationMatrix fontMatrix;
    public PdfCompactFontFormatDictIndexFontMatrixOperator(PdfTransformationMatrix fontMatrix);
    public PdfCompactFontFormatDictIndexFontMatrixOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexFontNameOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private string fontName;
    public PdfCompactFontFormatDictIndexFontNameOperator(string fontName);
    public PdfCompactFontFormatDictIndexFontNameOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexFullNameOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private string fullName;
    public PdfCompactFontFormatDictIndexFullNameOperator(string fullName);
    public PdfCompactFontFormatDictIndexFullNameOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexIsFixedPitchOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private bool isFixedPitch;
    public PdfCompactFontFormatDictIndexIsFixedPitchOperator(bool isFixedPitch);
    public PdfCompactFontFormatDictIndexIsFixedPitchOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexItalicAngleOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double italicAngle;
    public PdfCompactFontFormatDictIndexItalicAngleOperator(double italicAngle);
    public PdfCompactFontFormatDictIndexItalicAngleOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexNoticeOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private string notice;
    public PdfCompactFontFormatDictIndexNoticeOperator(string notice);
    public PdfCompactFontFormatDictIndexNoticeOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public abstract class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexOperator : object {
    private static string doubleFormat;
    protected static int GetInteger(IList`1<object> operands);
    protected static bool GetBoolean(IList`1<object> operands);
    protected static double GetDouble(IList`1<object> operands);
    protected static Double[] GetDoubleArray(IList`1<object> operands);
    protected static PdfType1FontGlyphZone[] GetGlyphZones(IList`1<object> operands);
    protected static PdfType1FontCompactCIDFontProgram ToCIDFontProgram(PdfType1FontCompactFontProgram fontProgram);
    protected static int CalcIntegerSize(int value);
    protected static int CalcDoubleSize(double value);
    protected static int CalcDoubleArraySize(Double[] array);
    protected static int CalcGlyphZonesSize(PdfType1FontGlyphZone[] glyphZones);
    protected static void WriteBoolean(PdfBinaryStream stream, bool value);
    protected static void WriteInteger(PdfBinaryStream stream, int value);
    protected static void WriteDouble(PdfBinaryStream stream, double value);
    protected static void WriteDoubleArray(PdfBinaryStream stream, Double[] array);
    protected static void WriteGlyphZones(PdfBinaryStream stream, PdfType1FontGlyphZone[] glyphZones);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexPaintTypeOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private PdfType1FontPaintType paintType;
    public PdfCompactFontFormatDictIndexPaintTypeOperator(PdfType1FontPaintType paintType);
    public PdfCompactFontFormatDictIndexPaintTypeOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public abstract class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexParser : object {
    private Byte[] data;
    private int currentPosition;
    protected bool HasMoreData { get; }
    protected PdfCompactFontFormatDictIndexParser(Byte[] data);
    protected bool get_HasMoreData();
    protected byte GetNextByte();
    protected IList`1<PdfCompactFontFormatDictIndexOperator> Parse();
    protected abstract virtual PdfCompactFontFormatDictIndexOperator ParseOperator(byte value, IList`1<object> operands);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexPostScriptOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private string postScript;
    public PdfCompactFontFormatDictIndexPostScriptOperator(string postScript);
    public PdfCompactFontFormatDictIndexPostScriptOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexPrivateOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private int length;
    private int offset;
    private int subrsLength;
    private PdfType1FontCompactFontPrivateData privateData;
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Offset { get; private set; }
    private int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.Length { get; }
    public PdfCompactFontFormatDictIndexPrivateOperator(PdfType1FontCompactFontPrivateData privateData);
    public PdfCompactFontFormatDictIndexPrivateOperator(IList`1<object> operands);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Offset();
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.set_Offset(int value);
    private sealed virtual override int DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.get_Length();
    private PdfType1FontCompactFontPrivateData ReadData(PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
    private sealed virtual override void DevExpress.Pdf.Native.ICompactFontFormatDictIndexOffsetOperator.WriteData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexROSOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private string registry;
    private string ordering;
    private double supplement;
    public PdfCompactFontFormatDictIndexROSOperator(string registry, string ordering, double supplement);
    public PdfCompactFontFormatDictIndexROSOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexStrokeWidthOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double strokeWidth;
    public PdfCompactFontFormatDictIndexStrokeWidthOperator(double strokeWidth);
    public PdfCompactFontFormatDictIndexStrokeWidthOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public abstract class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexTwoByteOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Marker;
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexUIDBaseOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private int uidBase;
    public PdfCompactFontFormatDictIndexUIDBaseOperator(int uidBase);
    public PdfCompactFontFormatDictIndexUIDBaseOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexUnderlinePositionOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double underlinePosition;
    public PdfCompactFontFormatDictIndexUnderlinePositionOperator(double underlinePosition);
    public PdfCompactFontFormatDictIndexUnderlinePositionOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexUnderlineThicknessOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double underlineThickness;
    public PdfCompactFontFormatDictIndexUnderlineThicknessOperator(double underlineThickness);
    public PdfCompactFontFormatDictIndexUnderlineThicknessOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexUniqueIDOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private int uniqueID;
    public PdfCompactFontFormatDictIndexUniqueIDOperator(int uniqueID);
    public PdfCompactFontFormatDictIndexUniqueIDOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCIDGlyphGroupData glyphGroupData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexVersionOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private string version;
    public PdfCompactFontFormatDictIndexVersionOperator(string version);
    public PdfCompactFontFormatDictIndexVersionOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexWeightOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private string weight;
    public PdfCompactFontFormatDictIndexWeightOperator(string weight);
    public PdfCompactFontFormatDictIndexWeightOperator(PdfCompactFontFormatStringIndex stringIndex, IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatDictIndexXUIDOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private Int32[] xuid;
    public PdfCompactFontFormatDictIndexXUIDOperator(Int32[] xuid);
    public PdfCompactFontFormatDictIndexXUIDOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontProgram fontProgram, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public abstract class DevExpress.Pdf.Native.PdfCompactFontFormatIndex : object {
    public int DataLength { get; }
    protected int ObjectsCount { get; }
    protected PdfCompactFontFormatIndex(PdfBinaryStream stream);
    public int get_DataLength();
    protected abstract virtual int get_ObjectsCount();
    public void Write(PdfBinaryStream stream);
    protected abstract virtual void ProcessObjectsCount(int objectsCount);
    protected abstract virtual void ProcessObject(int index, Byte[] objectData);
    protected abstract virtual int GetObjectLength(int index);
    protected abstract virtual void WriteObject(PdfBinaryStream stream, int index);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatNameIndex : PdfCompactFontFormatIndex {
    private String[] strings;
    public String[] Strings { get; }
    protected int ObjectsCount { get; }
    public PdfCompactFontFormatNameIndex(String[] strings);
    public PdfCompactFontFormatNameIndex(PdfBinaryStream stream);
    public String[] get_Strings();
    protected virtual int get_ObjectsCount();
    protected virtual void ProcessObjectsCount(int objectsCount);
    protected virtual void ProcessObject(int index, Byte[] objectData);
    protected virtual int GetObjectLength(int index);
    protected virtual void WriteObject(PdfBinaryStream stream, int index);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatNibbleValueConstructor : object {
    private StringBuilder stringBuilder;
    public double Result { get; }
    public double get_Result();
    public bool AddNibble(int nibble);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexBlueFuzzOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private int blueFuzz;
    public PdfCompactFontFormatPrivateDictIndexBlueFuzzOperator(int blueFuzz);
    public PdfCompactFontFormatPrivateDictIndexBlueFuzzOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexBlueScaleOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double blueScale;
    public PdfCompactFontFormatPrivateDictIndexBlueScaleOperator(double blueScale);
    public PdfCompactFontFormatPrivateDictIndexBlueScaleOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexBlueShiftOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double blueShift;
    public PdfCompactFontFormatPrivateDictIndexBlueShiftOperator(double blueShift);
    public PdfCompactFontFormatPrivateDictIndexBlueShiftOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexBlueValuesOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfType1FontGlyphZone[] blueValues;
    public PdfCompactFontFormatPrivateDictIndexBlueValuesOperator(PdfType1FontGlyphZone[] blueValues);
    public PdfCompactFontFormatPrivateDictIndexBlueValuesOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexDefaultWidthXOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private double defaultWidthX;
    public PdfCompactFontFormatPrivateDictIndexDefaultWidthXOperator(double defaultWidthX);
    public PdfCompactFontFormatPrivateDictIndexDefaultWidthXOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexExpansionFactorOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double expansionFactor;
    public PdfCompactFontFormatPrivateDictIndexExpansionFactorOperator(double expansionFactor);
    public PdfCompactFontFormatPrivateDictIndexExpansionFactorOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexFamilyBluesOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfType1FontGlyphZone[] familyBlues;
    public PdfCompactFontFormatPrivateDictIndexFamilyBluesOperator(PdfType1FontGlyphZone[] familyBlues);
    public PdfCompactFontFormatPrivateDictIndexFamilyBluesOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexFamilyOtherBluesOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfType1FontGlyphZone[] familyOtherBlues;
    public PdfCompactFontFormatPrivateDictIndexFamilyOtherBluesOperator(PdfType1FontGlyphZone[] familyOtherBlues);
    public PdfCompactFontFormatPrivateDictIndexFamilyOtherBluesOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexForceBoldOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private bool forceBold;
    public PdfCompactFontFormatPrivateDictIndexForceBoldOperator(bool forceBold);
    public PdfCompactFontFormatPrivateDictIndexForceBoldOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexForceBoldThresholdOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private double forceBoldThreshold;
    public PdfCompactFontFormatPrivateDictIndexForceBoldThresholdOperator(double forceBoldThreshold);
    public PdfCompactFontFormatPrivateDictIndexForceBoldThresholdOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexLanguageGroupOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private int languageGroup;
    public PdfCompactFontFormatPrivateDictIndexLanguageGroupOperator(int languageGroup);
    public PdfCompactFontFormatPrivateDictIndexLanguageGroupOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexNominalWidthXOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private double nominalWidthX;
    public PdfCompactFontFormatPrivateDictIndexNominalWidthXOperator(double nominalWidthX);
    public PdfCompactFontFormatPrivateDictIndexNominalWidthXOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexOtherBluesOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfType1FontGlyphZone[] otherBlues;
    public PdfCompactFontFormatPrivateDictIndexOtherBluesOperator(PdfType1FontGlyphZone[] otherBlues);
    public PdfCompactFontFormatPrivateDictIndexOtherBluesOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexParser : PdfCompactFontFormatDictIndexParser {
    private PdfCompactFontFormatPrivateDictIndexParser(Byte[] objectData);
    public static PdfType1FontCompactFontPrivateData Parse(PdfBinaryStream stream, Byte[] data);
    protected virtual PdfCompactFontFormatDictIndexOperator ParseOperator(byte value, IList`1<object> operands);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexStdHWOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private double stdHW;
    public PdfCompactFontFormatPrivateDictIndexStdHWOperator(double stdHW);
    public PdfCompactFontFormatPrivateDictIndexStdHWOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexStdVWOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private double stdVW;
    public PdfCompactFontFormatPrivateDictIndexStdVWOperator(double stdVW);
    public PdfCompactFontFormatPrivateDictIndexStdVWOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexStemSnapHOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private Double[] stemSnapH;
    public PdfCompactFontFormatPrivateDictIndexStemSnapHOperator(Double[] stemSnapH);
    public PdfCompactFontFormatPrivateDictIndexStemSnapHOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexStemSnapVOperator : PdfCompactFontFormatDictIndexTwoByteOperator {
    public static byte Code;
    private Double[] stemSnapV;
    public PdfCompactFontFormatPrivateDictIndexStemSnapVOperator(Double[] stemSnapV);
    public PdfCompactFontFormatPrivateDictIndexStemSnapVOperator(IList`1<object> operands);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexSubrsOperator : PdfCompactFontFormatDictIndexOperator {
    public static byte Code;
    private PdfCompactFontFormatBinaryIndex subrs;
    private int offset;
    public int DataLength { get; }
    public PdfCompactFontFormatPrivateDictIndexSubrsOperator(IList`1<Byte[]> subrs);
    public PdfCompactFontFormatPrivateDictIndexSubrsOperator(IList`1<object> operands);
    public int get_DataLength();
    public bool UpdateOffset(int offset);
    public void WriteData(PdfBinaryStream stream);
    public virtual void Execute(PdfType1FontCompactFontPrivateData privateData, PdfBinaryStream stream);
    public virtual int GetSize(PdfCompactFontFormatStringIndex stringIndex);
    public virtual void Write(PdfCompactFontFormatStringIndex stringIndex, PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatPrivateDictIndexWriter : object {
    private List`1<PdfCompactFontFormatDictIndexOperator> operators;
    private PdfCompactFontFormatPrivateDictIndexSubrsOperator subrsOperator;
    private int dataLength;
    public int DataLength { get; }
    public int SubrsLength { get; }
    public PdfCompactFontFormatPrivateDictIndexWriter(PdfType1FontCompactFontPrivateData data);
    public int get_DataLength();
    public int get_SubrsLength();
    public void Write(PdfBinaryStream stream);
    private void CalcDataLength();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfCompactFontFormatStringIndex : PdfCompactFontFormatNameIndex {
    public static short StandardStringsCount;
    private static String[] standardStrings;
    private static Dictionary`2<string, short> standardSIDMapping;
    private Dictionary`2<string, short> sidMapping;
    public string Item { get; }
    private static PdfCompactFontFormatStringIndex();
    public PdfCompactFontFormatStringIndex(String[] strings);
    public PdfCompactFontFormatStringIndex(PdfBinaryStream stream);
    public string get_Item(int index);
    public string GetString(IList`1<object> operands);
    public short TryGetSID(string str);
    public short GetSID(string str);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatTopDictIndex : PdfCompactFontFormatIndex {
    private Byte[] objectData;
    public Byte[] ObjectData { get; }
    protected int ObjectsCount { get; }
    public PdfCompactFontFormatTopDictIndex(Byte[] objectData);
    public PdfCompactFontFormatTopDictIndex(PdfBinaryStream stream);
    public Byte[] get_ObjectData();
    protected virtual int get_ObjectsCount();
    protected virtual void ProcessObjectsCount(int objectsCount);
    protected virtual void ProcessObject(int index, Byte[] objectData);
    protected virtual int GetObjectLength(int index);
    protected virtual void WriteObject(PdfBinaryStream stream, int index);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatTopDictIndexParser : PdfCompactFontFormatDictIndexParser {
    private PdfCompactFontFormatStringIndex stringIndex;
    private PdfCompactFontFormatTopDictIndexParser(PdfCompactFontFormatStringIndex stringIndex, Byte[] data);
    public static PdfType1FontCompactFontProgram Parse(byte majorVersion, byte minorVersion, string fontName, PdfCompactFontFormatStringIndex stringIndex, IList`1<Byte[]> globalSubrs, PdfBinaryStream stream, Byte[] objectData);
    public static PdfType1FontCIDGlyphGroupData Parse(PdfBinaryStream stream, PdfCompactFontFormatStringIndex stringIndex, Byte[] objectData);
    protected virtual PdfCompactFontFormatDictIndexOperator ParseOperator(byte value, IList`1<object> operands);
}
public class DevExpress.Pdf.Native.PdfCompactFontFormatTopDictIndexWriter : object {
    private static int headerSize;
    private static int topDictIndexSize;
    private byte majorVersion;
    private byte minorVersion;
    private string name;
    private PdfCompactFontFormatStringIndex stringIndex;
    private PdfCompactFontFormatBinaryIndex globalSubrs;
    private List`1<PdfCompactFontFormatDictIndexOperator> operators;
    private List`1<ICompactFontFormatDictIndexOffsetOperator> offsetOperators;
    private PdfCompactFontFormatTopDictIndexWriter(PdfType1FontCompactFontProgram fontProgram);
    public static Byte[] Write(PdfType1FontCompactFontProgram fontProgram);
    private void Write(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfCompatibilityOptions : object {
    private PdfACompatibility pdfACompatibility;
    private PdfUACompatibility pdfUACompatibility;
    private bool disableEmbeddingAllFonts;
    private IList`1<string> notEmbeddedFontFamilies;
    [CompilerGeneratedAttribute]
private bool <AttachmentsAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransparencyAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateAdditionalFormFieldAppearances>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeftLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOldVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTagged>k__BackingField;
    public PdfACompatibility PdfACompatibility { get; }
    public bool AttachmentsAllowed { get; }
    public bool TransparencyAllowed { get; }
    public bool MergeAllowed { get; }
    public bool CreateAdditionalFormFieldAppearances { get; }
    public bool RightToLeftLayout { get; }
    public bool UseOldVersion { get; }
    public bool IsTagged { get; }
    public PdfCompatibilityOptions(PdfCreationOptions creationOptions);
    public PdfCompatibilityOptions(IPdfCompatibilityOptionsBuilder builder);
    public static string NormalizeFontFamily(string fontFamilyName);
    public PdfACompatibility get_PdfACompatibility();
    [CompilerGeneratedAttribute]
public bool get_AttachmentsAllowed();
    [CompilerGeneratedAttribute]
public bool get_TransparencyAllowed();
    [CompilerGeneratedAttribute]
public bool get_MergeAllowed();
    [CompilerGeneratedAttribute]
public bool get_CreateAdditionalFormFieldAppearances();
    [CompilerGeneratedAttribute]
public bool get_RightToLeftLayout();
    [CompilerGeneratedAttribute]
public bool get_UseOldVersion();
    [CompilerGeneratedAttribute]
public bool get_IsTagged();
    public void UpdateMetadata(XmpDocument metadata);
    public bool EmbedFont(string fontFamily, bool isBold, bool isItalic);
}
internal class DevExpress.Pdf.Native.PdfCompatibilityOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <NotEmbeddedFontFamilies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableEmbeddingAllFonts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergePdfADocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfACompatibility <PdfACompatibility>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfUACompatibility <PdfUACompatibility>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeftLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOldVersion>k__BackingField;
    public IList`1<string> NotEmbeddedFontFamilies { get; public set; }
    public bool DisableEmbeddingAllFonts { get; public set; }
    public bool MergePdfADocuments { get; public set; }
    public PdfACompatibility PdfACompatibility { get; public set; }
    public PdfUACompatibility PdfUACompatibility { get; public set; }
    public bool RightToLeftLayout { get; public set; }
    public bool UseOldVersion { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_NotEmbeddedFontFamilies();
    [CompilerGeneratedAttribute]
public void set_NotEmbeddedFontFamilies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableEmbeddingAllFonts();
    [CompilerGeneratedAttribute]
public void set_DisableEmbeddingAllFonts(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MergePdfADocuments();
    [CompilerGeneratedAttribute]
public void set_MergePdfADocuments(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfACompatibility get_PdfACompatibility();
    [CompilerGeneratedAttribute]
public void set_PdfACompatibility(PdfACompatibility value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfUACompatibility get_PdfUACompatibility();
    [CompilerGeneratedAttribute]
public void set_PdfUACompatibility(PdfUACompatibility value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RightToLeftLayout();
    [CompilerGeneratedAttribute]
public void set_RightToLeftLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseOldVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseOldVersion(bool value);
    public PdfCompatibilityOptions Build();
}
public class DevExpress.Pdf.Native.PdfCompositeFontCodePointMapping : object {
    private Int16[] cidToGidMap;
    private IDictionary`2<short, short> mapping;
    public PdfCompositeFontCodePointMapping(Int16[] cidToGidMap, IDictionary`2<short, short> mapping);
    public sealed virtual bool UpdateCodePoints(Int16[] codePoints, bool useEmbeddedFontEncoding);
}
public abstract class DevExpress.Pdf.Native.PdfCompressedData : object {
    public static string FilterDictionaryKey;
    public static string DecodeParametersDictionaryKey;
    private IList`1<PdfFilter> filters;
    public IList`1<PdfFilter> Filters { get; }
    public Byte[] UncompressedData { get; }
    public Byte[] Data { get; }
    protected PdfCompressedData(IList`1<PdfFilter> filters);
    protected PdfCompressedData(PdfReaderDictionary dictionary);
    public IList`1<PdfFilter> get_Filters();
    public Byte[] get_UncompressedData();
    public abstract virtual Byte[] get_Data();
    public void AddFilters(PdfWriterDictionary dictionary);
    protected void AddFilters(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    public abstract virtual IPdfWritableObject CreateWritableObject(PdfWriterDictionary dictionary);
}
public class DevExpress.Pdf.Native.PdfContentStreamParser : PdfDocumentParser {
    private static Byte[] endImageToken;
    private PdfResources resources;
    private PdfStack operands;
    private bool IsCommandNameTerminate { get; }
    protected bool IsType3FontParser { get; }
    protected PdfContentStreamParser(PdfResources resources, Byte[] data);
    private static PdfContentStreamParser();
    public static PdfCommandList GetContent(PdfResources resources, Byte[] data);
    private static int ReadInteger(PdfReaderDictionary dictionary, string key, string alternativeKey);
    private bool get_IsCommandNameTerminate();
    protected virtual bool get_IsType3FontParser();
    protected PdfCommandList Parse();
    private void Parse(string expectedName, IList`1<PdfCommand> commands);
    private PdfPaintImageCommand ParseInlineImage();
    protected virtual bool TryReadKnownObject();
    private void CheckCommandTermination();
    protected virtual object ReadAlphabeticalObject(bool isHexadecimalStringSeparatedUsingWhiteSpaces, bool isIndirect);
}
public class DevExpress.Pdf.Native.PdfConvertToKeyTreeElementAction`1 : MulticastDelegate {
    public PdfConvertToKeyTreeElementAction`1(object object, IntPtr method);
    public virtual object Invoke(T value);
    public virtual IAsyncResult BeginInvoke(T value, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfConvolutionWindowInfo : ValueType {
    private PdfFixedPointNumber[] weights;
    private int startPosition;
    public PdfFixedPointNumber[] Weights { get; }
    public int StartPosition { get; }
    public PdfConvolutionWindowInfo(PdfFixedPointNumber[] weight, int startPosition);
    public PdfFixedPointNumber[] get_Weights();
    public int get_StartPosition();
}
public class DevExpress.Pdf.Native.PdfCourierFontFamily : PdfStandardFontFamily {
    private static string family;
    private static PdfMonospacedGlyphWidthProvider courierWidths;
    private static WidthsProvider widthsProvider;
    private static DescriptorProvider descriptorProvider;
    protected PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> GlyphWidthProvider { get; }
    protected PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> FontDescriptorProvider { get; }
    private static PdfCourierFontFamily();
    protected virtual PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> get_GlyphWidthProvider();
    protected virtual PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> get_FontDescriptorProvider();
}
public class DevExpress.Pdf.Native.PdfCreateTreeElementAction`1 : MulticastDelegate {
    public PdfCreateTreeElementAction`1(object object, IntPtr method);
    public virtual T Invoke(PdfDocumentCatalog catalog, object value);
    public virtual IAsyncResult BeginInvoke(PdfDocumentCatalog catalog, object value, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfCreateTreeKeyAction`1 : MulticastDelegate {
    public PdfCreateTreeKeyAction`1(object object, IntPtr method);
    public virtual K Invoke(object value);
    public virtual IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object);
    public virtual K EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfCrossReferenceDecoder : object {
    private Byte[] data;
    private int length;
    private int position;
    private PdfCrossReferenceDecoder(Byte[] data);
    public static void Decode(Byte[] data, IEnumerable`1<PdfIndexDescription> indices, PdfObjectCollection objects, int typeWeight, int offsetWeight, int generationWeight);
    private int ReadValue(int weight);
    private void Decode(IEnumerable`1<PdfIndexDescription> indices, PdfObjectCollection objects, int typeWeight, int offsetWeight, int generationWeight);
}
public enum DevExpress.Pdf.Native.PdfCursor : Enum {
    public int value__;
    public static PdfCursor Default;
    public static PdfCursor TextSelection;
    public static PdfCursor ImageSelection;
    public static PdfCursor Annotation;
    public static PdfCursor Drag;
    public static PdfCursor SelectionContext;
    public static PdfCursor HandTool;
    public static PdfCursor MarqueZoomTool;
    public static PdfCursor TextMarkupTool;
    public static PdfCursor StickyNoteTool;
}
public class DevExpress.Pdf.Native.PdfCustomAnnotationState : PdfMarkupAnnotationState`1<PdfCustomAnnotation> {
    public PdfCustomAnnotationState(PdfPageState pageState, PdfCustomAnnotation annotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfCustomPropertiesDictionary : object {
    private IDictionary`2<string, Byte[]> propertiesKeyBlob;
    public string Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal IDictionary`2<string, Byte[]> BlobDictionary { get; }
    private static Byte[] ConvertValue(string value);
    private static void CheckKey(string key, string argumentName);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    internal IDictionary`2<string, Byte[]> get_BlobDictionary();
    internal void Add(string key, Byte[] value);
    public sealed virtual void Add(string key, string value);
    public sealed virtual void Add(KeyValuePair`2<string, string> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, string> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfCustomPropertiesDictionary/<GetEnumerator>d__23")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, string> item);
    public sealed virtual bool TryGetValue(string key, String& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfCustomToUnicodeMapping : PdfToUnicodeMapping {
    [CompilerGeneratedAttribute]
private PdfCharacterMapping <CharacterMapping>k__BackingField;
    public Byte[] Data { get; }
    public PdfCharacterMapping CharacterMapping { get; }
    public PdfCustomToUnicodeMapping(Byte[] data);
    public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public virtual PdfCharacterMapping get_CharacterMapping();
    public virtual object Write(IPdfWrittenObjectsCollection objects);
    public virtual PdfPrimitive Write(PdfObjectStorage collection);
    public virtual IPdfToUnicodeCMap CreateMapping(bool oneByteCodeRangesOnly);
}
public class DevExpress.Pdf.Native.PdfDataRecognizer : PdfLegacyCommandInterpreter {
    private PdfTextParser pageTextData;
    private Dictionary`2<PdfPageImageData, int> pageImageData;
    private int imageIndex;
    private Byte[] actualText;
    private bool skipActualTextUsage;
    [CompilerGeneratedAttribute]
private IPdfRenderingFontInfoProvider <RenderingFontInfoProvider>k__BackingField;
    protected IList`1<PdfGraphicsPath> TransformedPaths { get; }
    protected IPdfRenderingFontInfoProvider RenderingFontInfoProvider { get; }
    private PdfDataRecognizer(PdfPage page, PdfRectangle textClipBox, IPdfRenderingFontInfoProvider widthProvider);
    public static PdfPageData Recognize(PdfPage page, IPdfRenderingFontInfoProvider widthProvider, bool recognizeAnnotationsData, bool clipTextByCropBox);
    protected virtual IList`1<PdfGraphicsPath> get_TransformedPaths();
    [CompilerGeneratedAttribute]
protected virtual IPdfRenderingFontInfoProvider get_RenderingFontInfoProvider();
    private void DrawAnnotation(PdfAnnotation annotation);
    protected virtual void DrawString(PdfStringData stringData);
    public virtual void DrawMarkedContent(IEnumerable`1<PdfCommand> commands, PdfProperties properties, string tag);
    protected virtual void UpdateGraphicsState(PdfGraphicsStateChange change);
    public virtual void DrawImage(PdfImage image);
    public virtual void DrawShading(PdfShading shading);
    protected virtual void StrokePaths();
    protected virtual void FillPaths(bool useNonzeroWindingRule);
    protected virtual void ClipPaths();
    protected virtual void ClipAndClearPaths();
    public virtual void AppendRectangle(double x, double y, double width, double height);
    public virtual void ClosePath();
    public virtual void BeginPath(PdfPoint startPoint);
    public virtual void AppendPathLineSegment(PdfPoint endPoint);
    public virtual void AppendPathBezierSegment(PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint endPoint);
    public virtual void AppendPathBezierSegment(PdfPoint controlPoint2, PdfPoint endPoint);
    public virtual void SetColorForNonStrokingOperations(PdfColor color);
    public virtual void SetColorForStrokingOperations(PdfColor color);
}
public class DevExpress.Pdf.Native.PdfDataSelectionEventArgs : EventArgs {
    private PdfDocumentPosition position;
    public PdfDocumentPosition Position { get; }
    public PdfDataSelectionEventArgs(PdfDocumentPosition position);
    public PdfDocumentPosition get_Position();
}
public class DevExpress.Pdf.Native.PdfDataSelectionEventHandler : MulticastDelegate {
    public PdfDataSelectionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PdfDataSelectionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PdfDataSelectionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfDataSelector : object {
    private PdfSelectionState selectionState;
    private PdfTextSelector textSelector;
    private PdfImageSelector imageSelector;
    private PdfPageDataCache pageDataCache;
    private PdfDocumentPosition startSelectionPosition;
    private bool forceTextSelection;
    [CompilerGeneratedAttribute]
private PdfDataSelectionEventHandler SelectionStarted;
    [CompilerGeneratedAttribute]
private PdfDataSelectionEventHandler SelectionContinued;
    [CompilerGeneratedAttribute]
private PdfDataSelectionEventHandler SelectionEnded;
    public bool SelectionInProgress { get; }
    public bool TextSelectionInProgress { get; }
    public bool ImageSelectionInProgress { get; }
    public bool ForceTextSelection { get; public set; }
    public PdfDataSelector(IPdfViewerLayoutInfoProvider controller, PdfDocument document, PdfSelectionState selectionState, IPdfRenderingFontInfoProvider widthProvider, PdfTextExtractionOptions textExtractionOptions);
    public bool get_SelectionInProgress();
    public bool get_TextSelectionInProgress();
    public bool get_ImageSelectionInProgress();
    public bool get_ForceTextSelection();
    public void set_ForceTextSelection(bool value);
    [CompilerGeneratedAttribute]
public void add_SelectionStarted(PdfDataSelectionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionStarted(PdfDataSelectionEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectionContinued(PdfDataSelectionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionContinued(PdfDataSelectionEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectionEnded(PdfDataSelectionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionEnded(PdfDataSelectionEventHandler value);
    public bool HasText(PdfDocumentPosition position);
    public bool HasImage(PdfDocumentPosition position);
    public void StartSelection(PdfMouseAction mouseAction);
    public void PerformSelection(PdfDocumentPosition position);
    public void EndSelection(PdfMouseAction mouseAction);
    public void StartSelection(PdfDocumentPosition startPosition);
    public void EndSelection(PdfDocumentPosition position);
    public void MoveCaret(PdfMovementDirection direction);
    public void SelectWithCaret(PdfMovementDirection direction);
    public void HideCaret();
    public void SelectWord(PdfDocumentPosition position);
    public void SelectLine(PdfDocumentPosition position);
    public void SelectPage(PdfDocumentPosition position);
    public void Select(PdfDocumentArea documentArea);
    public void SelectText(IList`1<PdfPageTextRange> textRange);
    public void SelectText(PdfDocumentPosition position1, PdfDocumentPosition position2);
    public void SelectAllText();
    public void SelectImage(PdfDocumentArea documentArea);
    public void ClearSelection();
    public PdfWord GetWord(PdfDocumentPosition position);
    public PdfTextSelection GetTextSelection(IList`1<PdfPageTextRange> textRange);
    public PdfTextSelection GetTextSelection(PdfDocumentArea documentArea);
    public PdfTextSelection GetTextSelection(PdfDocumentPosition startPosition, PdfDocumentPosition endPosition);
    public IList`1<PdfImageSelection> GetImagesSelection(PdfDocumentArea documentArea);
    public IList`1<PdfImageSelection> GetImagesSelection(PdfDocumentPosition startPosition, PdfDocumentPosition endPosition);
    public void MouseDown(PdfMouseAction action);
    public void MouseMove(PdfMouseAction action);
    public void MouseUp(PdfMouseAction action);
    public void ClearCache(int pageIndex);
    public void SetCacheCapacity(long capacity);
    private PdfSelection GetImageSelection(PdfDocumentArea documentArea);
    private void PerformSelection(PdfMouseAction mouseAction);
    private bool ShouldPerformSelection(PdfMouseAction action);
    private void RaiseSelectionEvent(PdfDataSelectionEventHandler handler, PdfDocumentPosition position);
}
public abstract class DevExpress.Pdf.Native.PdfDataStream : Stream {
    private long length;
    private long position;
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int CurrentByte { get; }
    protected PdfDataStream(long length);
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public abstract virtual int get_CurrentByte();
    public Byte[] Read(int length);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    public virtual void Flush();
    public abstract virtual void Synchronize();
}
public static class DevExpress.Pdf.Native.PdfDCTDataValidator : object {
    public static Byte[] ChangeImageHeight(Byte[] imageData, int newHeight);
}
public class DevExpress.Pdf.Native.PdfDCTDecoder : object {
    private static IPdfDCTDecoderFactory decoderFactory;
    private Byte[] imageData;
    private int imageWidth;
    private int imageHeight;
    private static PdfDCTDecoder();
    private PdfDCTDecoder(Byte[] imageData, int imageWidth, int imageHeight);
    public static IPdfImageScanlineSource CreateScanlineSource(Byte[] imageData, PdfImage image, int componentsCount);
    public static PdfDCTDecodeResult Decode(Byte[] imageData, int imageWidth, int imageHeight);
    private Bitmap CreateBitmap();
    [SecuritySafeCriticalAttribute]
private PdfDCTDecodeResult Decode();
}
public class DevExpress.Pdf.Native.PdfDCTDecodeResult : ValueType {
    private Byte[] data;
    private int stride;
    public Byte[] Data { get; }
    public int Stride { get; }
    public PdfDCTDecodeResult(Byte[] data, int stride);
    public Byte[] get_Data();
    public int get_Stride();
}
public class DevExpress.Pdf.Native.PdfDecodeImageScanlineSource : PdfImageScanlineSourceDecorator {
    private static double factor;
    private IList`1<PdfRange> decode;
    public PdfDecodeImageScanlineSource(IList`1<PdfRange> decode, int imageWidth, IPdfImageScanlineSource source);
    public virtual void FillNextScanline(Byte[] scanline);
}
[AttributeUsageAttribute("16")]
public class DevExpress.Pdf.Native.PdfDefaultFieldAttribute : Attribute {
    private object value;
    private bool canUsed;
    public object Value { get; }
    public bool CanUsed { get; }
    public PdfDefaultFieldAttribute(object value, bool canUsed);
    public PdfDefaultFieldAttribute(object value);
    public object get_Value();
    public bool get_CanUsed();
}
public class DevExpress.Pdf.Native.PdfDefaultScanlineSourceFactory : object {
    public sealed virtual IPdfImageScanlineSource CreateInterpolator(IPdfImageScanlineSource source, int targetWidth, int targetHeight, int sourceWidth, int sourceHeight, bool shouldInterpolate);
    public sealed virtual IPdfImageScanlineSource CreateIndexedScanlineSource(IPdfImageScanlineSource source, int width, int height, int bitsPerComponent, Byte[] lookupTable, int baseColorSpaceComponentsCount);
}
public class DevExpress.Pdf.Native.PdfDeferredCIDType2Font : PdfCIDType2Font {
    public PdfDeferredCIDType2Font(int objectNumber, string baseFont, PdfCompositeFontDescriptor fontDescriptor);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isCloning);
    protected internal virtual void UpdateObject(PdfObject value);
    private void UpdateFont(PdfDeferredCIDType2Font font);
}
public class DevExpress.Pdf.Native.PdfDeferredInteractiveFormFieldsList : PdfInteractiveFormFieldsList {
    private List`1<PdfInteractiveFormField> fields;
    public PdfDeferredInteractiveFormFieldsList(List`1<PdfInteractiveFormField> fields);
    public virtual IEnumerable`1<PdfInteractiveFormField> GetFormFields(PdfObjectCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isCloning);
}
public class DevExpress.Pdf.Native.PdfDeferredItem`1 : object {
    private Func`2<object, U> create;
    private object value;
    private U item;
    public U Item { get; }
    public PdfDeferredItem`1(U item);
    public PdfDeferredItem`1(object value, Func`2<object, U> create);
    public U get_Item();
}
[DefaultMemberAttribute("Item")]
public abstract class DevExpress.Pdf.Native.PdfDeferredList`1 : object {
    private List`1<T> values;
    private IEnumerator`1<object> source;
    private int sourceCount;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected PdfDeferredList`1(IEnumerator`1<object> source, int sourceCount);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public void AddRange(IEnumerable`1<T> items);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfDeferredList`1/<GetEnumerator>d__21")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected abstract virtual T ParseObject(object value);
    private void EnsureUptoIndex(int index);
    private void ResolveAll();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfDeferredSortedDictionary`2 : object {
    private static IComparer`1<string> stringComparer;
    private SortedDictionary`2<K, PdfDeferredItem`1<T>> dictionary;
    public ICollection`1<K> Keys { get; }
    public ICollection`1<T> Values { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private static PdfDeferredSortedDictionary`2();
    public sealed virtual ICollection`1<K> get_Keys();
    public sealed virtual ICollection`1<T> get_Values();
    public sealed virtual T get_Item(K key);
    public sealed virtual void set_Item(K key, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public void AddRange(PdfDeferredSortedDictionary`2<K, T> value);
    public void AddDeferred(K key, object value, Func`2<object, T> create);
    public sealed virtual void Add(K key, T value);
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual bool Remove(K key);
    public sealed virtual bool TryGetValue(K key, T& value);
    public sealed virtual void Add(KeyValuePair`2<K, T> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<K, T> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<K, T> item);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfDeferredSortedDictionary`2/<GetEnumerator>d__25")]
public sealed virtual IEnumerator`1<KeyValuePair`2<K, T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<K, PdfDeferredItem`1<T>>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K,DevExpress.Pdf.Native.PdfDeferredItem<T>>>.GetEnumerator();
    private void AddToDictionary(K key, PdfDeferredItem`1<T> value);
    internal void ResolveAll();
}
public class DevExpress.Pdf.Native.PdfDeferredTrueTypeFont : PdfTrueTypeFont {
    public PdfDeferredTrueTypeFont(int objectNumber, string baseFont, PdfSimpleFontEncoding fontEncoding, PdfFontDescriptor fontDescriptor);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isCloning);
    protected internal virtual void UpdateObject(PdfObject value);
    private void UpdateFont(PdfDeferredTrueTypeFont font);
}
public class DevExpress.Pdf.Native.PdfDestinationObject : object {
    private PdfDestination destination;
    private string destinationName;
    public string DestinationName { get; }
    public PdfDestinationObject(PdfDestination destination);
    public PdfDestinationObject(string destinationName);
    public string get_DestinationName();
    public PdfDestination GetDestination(PdfDocumentCatalog documentCatalog, bool isInternal);
    public object ToWriteableObject(PdfDocumentCatalog documentCatalog, IPdfWrittenObjectsCollection objects, bool isInternal);
}
public abstract class DevExpress.Pdf.Native.PdfDictionary : Dictionary`2<string, object> {
    public static string DictionaryTypeKey;
    public static string DictionarySubtypeKey;
    public static string DictionaryLanguageKey;
    public static string DictionaryJustificationKey;
    public static string DictionaryAppearanceKey;
    public static string DictionaryActionKey;
    public static string DictionaryAnnotationHighlightingModeKey;
    public static string DictionaryPaddingKey;
}
public class DevExpress.Pdf.Native.PdfDirectObjectId : ValueType {
    private PdfObject obj;
    public PdfDirectObjectId(PdfObject obj);
    public sealed virtual bool Equals(PdfDirectObjectId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.PdfDirectWriteGlyphRun : object {
    [CompilerGeneratedAttribute]
private Int16[] <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Int16[] <Clusters>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Widths>k__BackingField;
    [CompilerGeneratedAttribute]
private DWRITE_GLYPH_OFFSET[] <Offsets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRTL>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private DWRITE_SHAPING_GLYPH_PROPERTIES[] <ShapingProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public Int16[] Indexes { get; }
    public Int16[] Clusters { get; }
    public Single[] Widths { get; }
    public DWRITE_GLYPH_OFFSET[] Offsets { get; }
    public bool IsRTL { get; }
    public double FontSize { get; }
    public DWRITE_SHAPING_GLYPH_PROPERTIES[] ShapingProperties { get; }
    public string Text { get; }
    public PdfDirectWriteGlyphRun(string text, Int16[] indexes, Int16[] clusters, Single[] widths, DWRITE_GLYPH_OFFSET[] offsets, bool isRTL, DWRITE_SHAPING_GLYPH_PROPERTIES[] shapingProperties, double fontSize);
    [CompilerGeneratedAttribute]
public Int16[] get_Indexes();
    [CompilerGeneratedAttribute]
public Int16[] get_Clusters();
    [CompilerGeneratedAttribute]
public Single[] get_Widths();
    [CompilerGeneratedAttribute]
public DWRITE_GLYPH_OFFSET[] get_Offsets();
    [CompilerGeneratedAttribute]
public bool get_IsRTL();
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public DWRITE_SHAPING_GLYPH_PROPERTIES[] get_ShapingProperties();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual IList`1<DXCluster> GetClusters();
}
public abstract class DevExpress.Pdf.Native.PdfDisposableObject : object {
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
}
public static class DevExpress.Pdf.Native.PdfDocEncoding : object {
    private static Char[] docEncoding;
    private static IDictionary`2<char, byte> docEncodingMapping;
    private static PdfDocEncoding();
    public static bool StringCanBeEncoded(string str);
    public static string GetString(Byte[] data);
    public static Byte[] GetBytes(string value);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.Native.PdfDocumentAccessPermissions : Enum {
    public int value__;
    [PdfFieldValueAttribute("1")]
public static PdfDocumentAccessPermissions NoChanges;
    [PdfFieldValueAttribute("2")]
public static PdfDocumentAccessPermissions FormFillingAndSignatures;
    [PdfFieldValueAttribute("3")]
public static PdfDocumentAccessPermissions AnnotationsFormFillingAndSignatures;
}
public class DevExpress.Pdf.Native.PdfDocumentCatalog : PdfObject {
    private static string dictionaryType;
    private static string pagesDictionaryKey;
    private static string pageLabelsDictionaryKey;
    private static string destinationDictionaryKey;
    private static string viewerPreferencesDictionaryKey;
    private static string pageLayoutDictionaryKey;
    private static string pageModeDictionaryKey;
    private static string outlinesDictionaryKey;
    private static string threadsDictionaryKey;
    private static string openActionDictionaryKey;
    private static string additionalActionsDictionaryKey;
    private static string acroFormDictionaryKey;
    private static string structTreeRootDictionaryKey;
    private static string markInfoDictionaryKey;
    private static string outputIntentsDictionaryKey;
    private static string ocPropertiesDictionaryKey;
    private static string needsRenderingDictionaryKey;
    private static string associatedFilesKey;
    internal static string NamesDictionaryKey;
    internal static string PermissionsDictionaryKey;
    private static string portableCollectionKey;
    private static Dictionary`2<double, string> fileVersions;
    private string version;
    private Dictionary`2<string, PdfDeveloperExtension> developerExtensions;
    private PdfPageList pages;
    private PdfDeferredSortedDictionary`2<int, PdfPageLabel> pageLabels;
    private PdfViewerPreferences viewerPreferences;
    private IList`1<PdfArticleThread> threads;
    private PdfMarkInfo markInfo;
    private IList`1<PdfOutputIntent> outputIntents;
    private Dictionary`2<string, PdfPieceInfoEntry> pieceInfo;
    private PdfOptionalContentProperties optionalContentProperties;
    private bool needsRendering;
    private PdfCompatibilityOptions compatibilityOptions;
    private CultureInfo languageCulture;
    private PdfPageLayout pageLayout;
    private PdfDocumentActions actions;
    private PdfPageMode pageMode;
    private PdfFileAttachmentList fileAttachments;
    private PdfLogicalStructure logicalStructure;
    private PdfOutlines outlines;
    private PdfInteractiveForm acroForm;
    private PdfDestination openDestination;
    private PdfAction openAction;
    private PdfObjectCollection objects;
    private int lastObjectNumber;
    private PdfMetadata metadata;
    private PdfNames names;
    private IDictionary`2<string, PdfDestination> destinations;
    private PdfBookmarkList bookmarks;
    private bool bookmarksChanged;
    private PdfReaderDictionary dictionary;
    private bool ensured;
    private bool ensuredLogicalStructure;
    private bool ensuredOutlines;
    private IList`1<PdfFileSpecification> associatedFiles;
    private PdfObjectCloner cloner;
    private PdfDocumentModelObjectCache documentModelObjectCache;
    private Dictionary`2<int, PdfInteractiveFormField> resolvedInteractiveFormFields;
    [CompilerGeneratedAttribute]
private PdfObject <PortableCollection>k__BackingField;
    public string Version { get; }
    public IDictionary`2<string, PdfDeveloperExtension> DeveloperExtensions { get; }
    public PdfPageList Pages { get; }
    public PdfObjectCloner Cloner { get; }
    public PdfDocumentModelObjectCache DocumentModelObjectCache { get; }
    public IDictionary`2<int, PdfPageLabel> PageLabels { get; }
    public PdfFileAttachmentList FileAttachments { get; }
    public PdfNames Names { get; }
    public IDictionary`2<string, PdfDestination> Destinations { get; }
    public IReadOnlyCollection`1<string> DestinationNames { get; }
    public PdfViewerPreferences ViewerPreferences { get; public set; }
    public PdfPageLayout PageLayout { get; public set; }
    public PdfPageMode PageMode { get; public set; }
    public PdfOutlines Outlines { get; }
    public IList`1<PdfBookmark> Bookmarks { get; public set; }
    public IList`1<PdfArticleThread> Threads { get; }
    public PdfDocumentActions Actions { get; public set; }
    public PdfMetadata Metadata { get; internal set; }
    public PdfLogicalStructure LogicalStructure { get; }
    public PdfMarkInfo MarkInfo { get; }
    public CultureInfo LanguageCulture { get; public set; }
    public IList`1<PdfOutputIntent> OutputIntents { get; }
    public Dictionary`2<string, PdfPieceInfoEntry> PieceInfo { get; }
    public PdfOptionalContentProperties OptionalContentProperties { get; }
    internal PdfObject PortableCollection { get; }
    public bool NeedsRendering { get; }
    public PdfInteractiveForm AcroForm { get; internal set; }
    public PdfDestination OpenDestination { get; public set; }
    public PdfAction OpenAction { get; public set; }
    public PdfObjectCollection Objects { get; public set; }
    public int LastObjectNumber { get; public set; }
    public PdfCompatibilityOptions CompatibilityOptions { get; }
    public Guid Id { get; }
    private PdfDocumentCatalog DevExpress.Pdf.Native.IPdfBookmarkParent.DocumentCatalog { get; }
    public PdfDocumentCatalog(PdfObjectCollection objects, PdfCompatibilityOptions compatibilityOptions);
    public PdfDocumentCatalog(PdfReaderDictionary dictionary);
    private static PdfDocumentCatalog();
    internal static void ValidateCatalog(PdfDocumentCatalog catalog1, PdfDocumentCatalog catalog2, string argumentName);
    public string get_Version();
    public IDictionary`2<string, PdfDeveloperExtension> get_DeveloperExtensions();
    public PdfPageList get_Pages();
    public PdfObjectCloner get_Cloner();
    public PdfDocumentModelObjectCache get_DocumentModelObjectCache();
    public IDictionary`2<int, PdfPageLabel> get_PageLabels();
    public PdfFileAttachmentList get_FileAttachments();
    public PdfNames get_Names();
    public IDictionary`2<string, PdfDestination> get_Destinations();
    public IReadOnlyCollection`1<string> get_DestinationNames();
    public PdfViewerPreferences get_ViewerPreferences();
    public void set_ViewerPreferences(PdfViewerPreferences value);
    public PdfPageLayout get_PageLayout();
    public void set_PageLayout(PdfPageLayout value);
    public PdfPageMode get_PageMode();
    public void set_PageMode(PdfPageMode value);
    public PdfOutlines get_Outlines();
    public IList`1<PdfBookmark> get_Bookmarks();
    public void set_Bookmarks(IList`1<PdfBookmark> value);
    public IList`1<PdfArticleThread> get_Threads();
    public PdfDocumentActions get_Actions();
    public void set_Actions(PdfDocumentActions value);
    public PdfMetadata get_Metadata();
    internal void set_Metadata(PdfMetadata value);
    public sealed virtual PdfLogicalStructure get_LogicalStructure();
    public PdfMarkInfo get_MarkInfo();
    public CultureInfo get_LanguageCulture();
    public void set_LanguageCulture(CultureInfo value);
    public IList`1<PdfOutputIntent> get_OutputIntents();
    public Dictionary`2<string, PdfPieceInfoEntry> get_PieceInfo();
    public PdfOptionalContentProperties get_OptionalContentProperties();
    [CompilerGeneratedAttribute]
internal PdfObject get_PortableCollection();
    public bool get_NeedsRendering();
    public PdfInteractiveForm get_AcroForm();
    internal void set_AcroForm(PdfInteractiveForm value);
    public PdfDestination get_OpenDestination();
    public void set_OpenDestination(PdfDestination value);
    public PdfAction get_OpenAction();
    public void set_OpenAction(PdfAction value);
    public PdfObjectCollection get_Objects();
    public void set_Objects(PdfObjectCollection value);
    public int get_LastObjectNumber();
    public void set_LastObjectNumber(int value);
    public sealed virtual PdfCompatibilityOptions get_CompatibilityOptions();
    public sealed virtual Guid get_Id();
    private sealed virtual override PdfDocumentCatalog DevExpress.Pdf.Native.IPdfBookmarkParent.get_DocumentCatalog();
    private PdfReaderDictionary GetTopLevelPagesDictionary(PdfReaderDictionary pagesDict);
    public void ResetCloning();
    public PdfPage FindPage(object value);
    public void Append(PdfDocumentCatalog documentCatalog);
    public PdfPage AddPage(PdfRectangle mediaBox, PdfRectangle cropBox, int rotate);
    public PdfPage AddPage(int pageNumber, PdfRectangle mediaBox, PdfRectangle cropBox, int rotate);
    public void DeletePages(IEnumerable`1<int> pageNumbers);
    public void DeletePage(int pageNumber);
    public void AttachFile(PdfFileAttachment fileAttachment);
    public bool DeleteAttachment(PdfFileAttachment fileAttachment);
    public ISet`1<string> GetExistingRootFormFieldNames();
    public PdfInteractiveForm GetExistingOrCreateNewInteractiveForm();
    public void CreateSignatureFormField(PdfSignature signature);
    public void CreateSignatureFormField(PdfSignature signature, string fieldName);
    public PdfWidgetAnnotation FindWidget(int widgetObjectNumber);
    private sealed virtual override IPdfResources DevExpress.Pdf.Native.IPdfDocumentCatalog.CreateResources(bool shouldBeWritten, bool alternativeFontNames);
    public PdfResources CreateResources(bool shouldBeWritten, bool alternativeFontNames);
    private void FlushDictionary();
    private void EnsureOutlines();
    private void Ensure();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfBookmarkParent.Invalidate();
    public PdfAnnotationAppearances GetAnnotationAppearances(object value, PdfRectangle parentBBox);
    public PdfDestination GetDestination(object value);
    public PdfAction GetAction(object value);
    public PdfFileSpecification GetFileSpecification(object value);
    public PdfLogicalStructureItem GetLogicalStructureItem(PdfLogicalStructure logicalStructure, PdfLogicalStructureEntry parent, object value);
    public PdfOptionalContent GetOptionalContent(object value);
    public PdfOptionalContentGroup GetOptionalContentGroup(object value, bool ignoreCollisions);
    public T GetObject(object value, Func`2<object, T> create);
    public T GetObject(object value, Func`2<PdfReaderDictionary, T> create);
    public PdfPage GetPage(int objectNumber);
    public PdfColorSpace GetColorSpace(object value);
    public PdfAnnotation GetAnnotation(PdfPage page, object value);
    public PdfXObject GetXObject(object value, string defaultSubtype);
    public PdfForm GetForm(object value);
    public PdfInteractiveFormField GetResolvedInteractiveFormField(PdfObjectReference reference);
    public PdfInteractiveFormField GetInteractiveFormField(PdfInteractiveForm form, PdfInteractiveFormField parent, object value);
    public int AddResolvedObject(PdfObject value);
    public T GetResolvedObject(int objectNumber);
    public PdfObject GetDeferredObject(int objectNumber);
    internal PdfOptionalContentProperties EnsureOptionalContentProperties();
    [CompilerGeneratedAttribute]
private PdfOutputIntent <.ctor>b__142_1(object d);
    [CompilerGeneratedAttribute]
private PdfDestination <GetDestination>b__166_0(object o);
    [CompilerGeneratedAttribute]
private PdfColorSpace <GetColorSpace>b__175_0(object obj);
}
public class DevExpress.Pdf.Native.PdfDocumentInfo : PdfObject {
    private static HashSet`1<string> excludedKeys;
    private static string titleDictionaryKey;
    private static string authorDictionaryKey;
    private static string subjectDictionaryKey;
    private static string keywordsDictionaryKey;
    private static string creatorDictionaryKey;
    private static string producerDictionaryKey;
    private static string creationDateDictionaryKey;
    private static string modDateDictionaryKey;
    private static string trappedDictionaryKey;
    private static string trueTrappedValue;
    private static string falseTrappedValue;
    private static string dateTimeFormat;
    private PdfCustomPropertiesDictionary customPropertiesDictionary;
    private string title;
    private string author;
    private string subject;
    private string keywords;
    private string creator;
    private string producer;
    private string additionalMetadata;
    private Nullable`1<DateTimeOffset> creationDate;
    private Nullable`1<DateTimeOffset> modDate;
    private DefaultBoolean trapped;
    public string Title { get; public set; }
    public string Author { get; public set; }
    public string Subject { get; public set; }
    public string Keywords { get; public set; }
    public string Creator { get; public set; }
    public string Producer { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public Nullable`1<DateTimeOffset> ModDate { get; public set; }
    public DefaultBoolean Trapped { get; public set; }
    public string AdditionalMetadata { get; public set; }
    public IDictionary`2<string, string> CustomProperties { get; }
    public PdfDocumentInfo(PdfReaderDictionary dictionary);
    private static PdfDocumentInfo();
    private static DefaultBoolean ConvertTrappedValue(object value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public string get_Creator();
    public void set_Creator(string value);
    public string get_Producer();
    public void set_Producer(string value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ModDate();
    public void set_ModDate(Nullable`1<DateTimeOffset> value);
    public DefaultBoolean get_Trapped();
    public void set_Trapped(DefaultBoolean value);
    public string get_AdditionalMetadata();
    public void set_AdditionalMetadata(string value);
    public IDictionary`2<string, string> get_CustomProperties();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.Native.PdfDocumentItem : object {
    private int objectGeneration;
    private int objectNumber;
    protected internal int ObjectNumber { get; protected internal set; }
    protected internal int ObjectGeneration { get; }
    protected PdfDocumentItem(int number, int generation);
    protected internal int get_ObjectNumber();
    protected internal void set_ObjectNumber(int value);
    protected internal int get_ObjectGeneration();
}
public class DevExpress.Pdf.Native.PdfDocumentMDPSignatureTransformMethod : PdfSignatureTransformMethod {
    private static string permissionsDictionaryKey;
    private PdfDocumentAccessPermissions permissions;
    protected string ValidVersion { get; }
    public PdfDocumentAccessPermissions Permissions { get; }
    public PdfDocumentMDPSignatureTransformMethod(PdfReaderDictionary dictionary);
    protected virtual string get_ValidVersion();
    public PdfDocumentAccessPermissions get_Permissions();
}
public class DevExpress.Pdf.Native.PdfDocumentModelObjectCache : object {
    private PdfDocumentCatalog documentCatalog;
    private Dictionary`2<int, WeakReference> resolvedObjects;
    private Dictionary`2<IPdfObjectId, PdfObject> indirectDeferredObjects;
    private Dictionary`2<int, PdfObject> deferredObjects;
    private PdfDocumentCatalog DocumentCatalog { get; }
    private PdfObjectCollection Objects { get; }
    public PdfDocumentModelObjectCache(PdfDocumentCatalog catalog);
    private PdfDocumentCatalog get_DocumentCatalog();
    private PdfObjectCollection get_Objects();
    public T GetObject(object value, Func`2<object, T> create);
    public T GetResolvedObject(int objectNumber);
    public int AddResolvedObject(PdfObject value);
    public void AddResolvedObject(int objectNumber, PdfObject value);
    public PdfObject GetDeferredObject(int objectNumber);
    public PdfObject AddDeferredObject(PdfObject value);
    public void FinalizeWriting(PdfObjectCollection objects);
    public void NotifyDeferredObjects();
}
public class DevExpress.Pdf.Native.PdfDocumentParser : PdfObjectParser {
    protected static byte StartObject;
    protected static byte EndObject;
    private static Byte[] streamToken;
    private static Byte[] endstreamToken;
    private static Byte[] endobjToken;
    private PdfObjectCollection objects;
    private int number;
    private int generation;
    private string currentlyReadingDictionaryKey;
    protected PdfObjectCollection Objects { get; }
    protected int Number { get; }
    protected int Generation { get; }
    protected string CurrentlyReadingDictionaryKey { get; }
    protected bool CanContinueReading { get; }
    public PdfDocumentParser(PdfObjectCollection objects, int number, int generation, PdfDataStream stream, int position);
    public PdfDocumentParser(PdfObjectCollection objects, int number, int generation, PdfDataStream stream);
    private static PdfDocumentParser();
    public static PdfReaderDictionary ParseDictionary(PdfObjectCollection objects, int number, int generation, PdfDataStream stream);
    public static void SetPositionToStreamDataFirstByte(PdfDataStream stream);
    public static PdfReaderStream ParseStream(PdfObjectCollection objects, int number, int generation, PdfDataStream stream);
    public static object ParseObject(PdfObjectCollection objects, int number, int generation, PdfDataStream stream, int position);
    protected PdfObjectCollection get_Objects();
    protected int get_Number();
    protected int get_Generation();
    protected string get_CurrentlyReadingDictionaryKey();
    protected virtual bool get_CanContinueReading();
    protected virtual PdfReaderArray CreateReadArray();
    private PdfReaderDictionary ReadDictionary(bool isIndirect);
    private void SkipStreamLeadingWhiteSpace();
    private PdfReaderStream ReadStream(PdfReaderDictionary dictionary);
    private void ValidateStreamLength(PdfReaderDictionary dictionary, Nullable`1<int> lengthValue, int actualDataLength);
    private void SetPositionToStreamDataFirstByte();
    private PdfReaderStream ReadStream();
    private int FindTokenOffset(Byte[] token, IList`1<byte> buffer, int offset, int limit);
    protected virtual bool TryReadKnownObject();
    protected Byte[] ReadData(Byte[] token, bool ignoreWhiteSpace, Byte[] endOfDataToken, Func`2<List`1<byte>, bool> checkEndOfData);
    protected Byte[] ReadData(int length, Byte[] token, Byte[] alternativeToken, bool ignoreWhiteSpace);
    protected object ReadDictionaryOrStream(bool isHexadecimalStringSeparatedUsingWhiteSpaces, bool isIndirect);
    protected virtual bool CanReadObject();
    protected virtual object ReadNumericObject();
    protected virtual object ReadAlphabeticalObject(bool isHexadecimalStringSeparatedUsingWhiteSpaces, bool isIndirect);
    protected virtual PdfReaderStream CreateStream(PdfReaderDictionary dictionary, Byte[] data);
    protected virtual bool CheckDictionaryAlphabeticalToken(string token);
}
internal enum DevExpress.Pdf.Native.PdfDocumentPermissionFlags : Enum {
    public long value__;
    public static PdfDocumentPermissionFlags Printing;
    public static PdfDocumentPermissionFlags Modifying;
    public static PdfDocumentPermissionFlags DataExtraction;
    public static PdfDocumentPermissionFlags ModifyingFormFieldsAndAnnotations;
    public static PdfDocumentPermissionFlags FormFilling;
    public static PdfDocumentPermissionFlags Accessibility;
    public static PdfDocumentPermissionFlags DocumentAssembling;
    public static PdfDocumentPermissionFlags HighQualityPrinting;
}
internal class DevExpress.Pdf.Native.PdfDocumentReader : PdfDocumentStructureReader {
    private static string signature;
    private static PdfTokenDescription xrefToken;
    private static PdfTokenDescription startxrefToken;
    private static Dictionary`2<string, PdfFileVersion> versionMapping;
    private PdfGetPasswordAction getPasswordAction;
    private object encryptValue;
    private PdfFileVersion version;
    private PdfObjectReference[] idObjects;
    private object documentInfoValue;
    private Byte[][] id;
    internal PdfDocumentReader(PdfDocumentStream documentStream, PdfGetPasswordAction getPasswordAction, bool isInvalid, IPdfValidationLogger validationLogger);
    private static PdfDocumentReader();
    internal static int ConvertToInteger(object value);
    internal static double ConvertToDouble(object value);
    internal static bool IsUnicode(Byte[] value);
    internal static string ConvertToUnicodeString(Byte[] value);
    internal static string ConvertToString(Byte[] value);
    internal static string ConvertToTextString(Byte[] value);
    internal static PdfPoint CreatePoint(PdfReaderArray array, int index);
    internal static PdfPoint[] CreatePointArray(PdfReaderArray array);
    internal static PdfRange CreateDomain(PdfReaderArray array, int index);
    internal static IList`1<PdfRange> CreateDomain(PdfReaderArray array);
    internal static PdfFileVersion FindVersion(string versionString);
    internal static PdfDocument Read(Stream stream, bool detachStreamAfterLoadComplete, PdfGetPasswordAction getPasswordAction);
    internal static IPdfValidationLogger CreateLogger();
    internal static void FindObjectsFast(PdfObjectCollection objects, PdfDocumentStream streamReader);
    internal static void FindObjectsSlow(PdfObjectCollection objects, PdfDocumentStream streamReader);
    private static void FindObjects(PdfObjectCollection objects, PdfDocumentStream streamReader, Action`3<PdfObjectCollection, PdfDocumentStream, long> parseCorruptedObjects);
    private static void ParseCorruptedObjectSlow(PdfObjectCollection objects, PdfDocumentStream streamReader, long position);
    private static void ParseCorruptedObjectFast(PdfObjectCollection objects, PdfDocumentStream streamReader, long position);
    private static PdfFileVersion FindPdfVersion(string versionString);
    private void UpdateEncryptionData(PdfReaderDictionary trailerDictionary, PdfObjectCollection objects);
    protected virtual void UpdateTrailer(PdfReaderDictionary trailerDictionary, PdfObjectCollection objects);
    private void ReadCorruptedDocument(PdfObjectCollection objects);
    private void TryUpdateTrailer(PdfObjectCollection objects);
    private PdfFileVersion GetVersion(PdfDocumentStream streamReader);
    private long FindLastEndOfFile(PdfDocumentStream streamReader);
    private int GetStartXRef(PdfDocumentStream streamReader);
    private Byte[] ReadTrailerData();
    private PdfReaderDictionary ReadTrailer(long offset, bool fillCrossReferenceTable);
    private static PdfReaderDictionary ReadStreamXRef(long offset, bool fillCrossReferenceTable, PdfObjectCollection objects, PdfDocumentStream streamReader);
    private PdfDocument Read(bool detachStreamAfterLoadComplete);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfDocumentStateBase : object {
    private PdfDocument document;
    private IDictionary`2<int, PdfPageState> pageStates;
    private IPdfPlatformServiceProvider viewerServiceProvider;
    private Lazy`1<PdfOptionalContentViewState> optionalContentViewState;
    private PdfPrintableViewerBookmarkCollection bookmarks;
    private PdfFormData formData;
    private PdfDocumentFacade documentFacade;
    private List`1<PdfFileAttachmentListItem> fileAttachments;
    private int rotationAngle;
    private bool highlightFormFields;
    private PdfRgbaColor highlightedFormFieldColor;
    private bool isDocumentModified;
    [CompilerGeneratedAttribute]
private PdfGraphicsDocument <GraphicsDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPageStateInvalidateEventHandler PageInvalidate;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler PagesChanged;
    public PdfDocument Document { get; }
    public int PageCount { get; }
    public PdfPageState Item { get; }
    public PdfFormData FormData { get; }
    public PdfDocumentFacade DocumentFacade { get; }
    public IList`1<PdfFileAttachmentListItem> FileAttachments { get; }
    public PdfPrintableViewerBookmarkCollection Bookmarks { get; }
    public int RotationAngle { get; public set; }
    public bool HighlightFormFields { get; public set; }
    public PdfRgbaColor HighlightedFormFieldColor { get; public set; }
    public PdfRgbaColor ActualHighlightColor { get; }
    public IPolygonBooleanOperationProvider PolygonBooleanOperationProvider { get; }
    public PdfGraphicsDocument GraphicsDocument { get; }
    public IPdfImageCacheProvider ImageCacheProvider { get; }
    public IPdfExportFontProvider FontSearch { get; }
    public bool IsDocumentModified { get; public set; }
    public PdfOptionalContentViewState OptionalContentViewState { get; }
    public PdfDocumentStateBase(PdfDocument document, IPdfPlatformServiceProvider viewerServiceProvider);
    public PdfDocument get_Document();
    public int get_PageCount();
    public PdfPageState get_Item(int pageIndex);
    public PdfFormData get_FormData();
    public PdfDocumentFacade get_DocumentFacade();
    public IList`1<PdfFileAttachmentListItem> get_FileAttachments();
    public PdfPrintableViewerBookmarkCollection get_Bookmarks();
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    public bool get_HighlightFormFields();
    public void set_HighlightFormFields(bool value);
    public PdfRgbaColor get_HighlightedFormFieldColor();
    public void set_HighlightedFormFieldColor(PdfRgbaColor value);
    public PdfRgbaColor get_ActualHighlightColor();
    public IPolygonBooleanOperationProvider get_PolygonBooleanOperationProvider();
    [CompilerGeneratedAttribute]
public PdfGraphicsDocument get_GraphicsDocument();
    public virtual IPdfImageCacheProvider get_ImageCacheProvider();
    public virtual IPdfExportFontProvider get_FontSearch();
    public bool get_IsDocumentModified();
    public void set_IsDocumentModified(bool value);
    public PdfOptionalContentViewState get_OptionalContentViewState();
    [CompilerGeneratedAttribute]
public void add_PageInvalidate(PdfPageStateInvalidateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PageInvalidate(PdfPageStateInvalidateEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PagesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PagesChanged(EventHandler value);
    public PdfFileAttachmentAnnotationState AddAttachmentAnnotation(PdfPageState page, PdfFileAttachmentAnnotation annotation);
    public bool DeleteAttachment(PdfFileAttachment attachment);
    public IList`1<string> GetFieldNames();
    public IList`1<PdfAcroFormFieldNameCollision> CheckAcroFormFieldNameCollisions(IEnumerable`1<PdfAcroFormField> fields);
    public void AddFormFields(IEnumerable`1<PdfAcroFormField> fields);
    public bool RemoveForm(bool flatten);
    public void RemoveFormField(PdfInteractiveFormField field, bool flatten);
    private void CollectWidgetAnnotationStates(ISet`1<IPdfAnnotationState> states, PdfInteractiveFormField field);
    public bool RemoveFormField(string name, bool flatten);
    private PdfFormData CreateFormData(PdfInteractiveFormField field);
    private void CreateFormData();
    private PdfInteractiveFormField RemoveFormField(PdfInteractiveFormField field, string fieldNameToRemove, bool flatten);
    private void RaisePropertyChanged(string propertyName);
    private void OnFormFieldValueChanged(object sender, PdfInteractiveFormFieldValueChangedEventArgs e);
    private void OnPagesChanged(object sender, EventArgs e);
    private void OnPageInvalidate(object sender, PdfPageStateInvalidateEventArgs e);
    private void ClearPageStates();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private PdfFileAttachmentListItem <get_FileAttachments>b__23_0(PdfFileAttachment attachment);
}
public class DevExpress.Pdf.Native.PdfDocumentStream : object {
    private static Byte[] unicodeStringHeader;
    private static Encoding utf8encoding;
    private static Encoding unicodeEncoding;
    private static CultureInfo invariantCulture;
    private PdfStreamWriter stream;
    private long startPosition;
    private bool canRead;
    private long cachedLength;
    private PdfEncryptionInfo encryptionInfo;
    public Stream Stream { get; }
    public PdfEncryptionInfo EncryptionInfo { get; public set; }
    public long Length { get; }
    public long Position { get; public set; }
    public long StartPosition { get; }
    private PdfDocumentStream(Stream stream, bool canRead, long startPosition);
    private static PdfDocumentStream();
    public static string ReadString(Stream stream);
    public static Byte[] ConvertToArray(string str);
    public static PdfDocumentStream CreateStreamForWriting(Stream stream);
    public static PdfDocumentStream CreateStreamForReading(Stream stream);
    public static PdfDocumentStream CreateStreamForMerging(Stream stream);
    public Stream get_Stream();
    public PdfEncryptionInfo get_EncryptionInfo();
    public void set_EncryptionInfo(PdfEncryptionInfo value);
    public long get_Length();
    public long get_Position();
    public void set_Position(long value);
    public long get_StartPosition();
    private void WriteUnicodeHexadecimalString(Byte[] data, int number);
    private void InvalidateCachedLength();
    public void Reset();
    public long SetPositionFromEnd(int value);
    public void Patch(long offset, object objectToWrite);
    public int SkipSpaces();
    public void SkipEmptySpaces();
    public bool FindToken(PdfTokenDescription description);
    public long FindLastToken(PdfTokenDescription description);
    public long FindLastToken(PdfTokenDescription description, bool mustBe);
    public int ReadByte();
    public Byte[] ReadBytes(int count);
    public int ReadBytes(Byte[] buffer);
    public string ReadString();
    public int ReadNumber();
    public long ReadNumber(int digitsCount);
    public bool ReadToken(PdfTokenDescription description);
    public int ReadIndirectObjectNumber(long offset);
    public PdfIndirectObject ReadStreamBasedIndirectObject(long offset);
    public PdfObjectSlot ReadObject(long offset);
    internal void Flush();
    public void WriteStringFormat(string format, Object[] args);
    public void WriteSpace();
    public void WriteOpenBracket();
    public void WriteCloseBracket();
    public void WriteOpenDictionary();
    public void WriteCloseDictionary();
    public void WriteString(string s);
    public void WriteDouble(double value);
    public void WriteInt(int value);
    public void WriteName(PdfName name);
    public void WriteObject(object value, int number);
    public void WriteBytes(Byte[] value);
    public void WriteHexadecimalString(Byte[] data, int number);
    public void WriteByte(byte b);
    public void CopyFrom(Stream sourceStream, int length);
    public PdfObjectPointer WriteObjectContainer(PdfObjectContainer container);
}
internal abstract class DevExpress.Pdf.Native.PdfDocumentStructureReader : object {
    public static byte LineFeed;
    public static byte CarriageReturn;
    public static byte Comment;
    protected static PdfTokenDescription EofToken;
    protected static PdfTokenDescription TrailerToken;
    private PdfObjectCollection objects;
    private PdfDocumentStream documentStream;
    private PdfObjectReference rootObjectReference;
    protected PdfObjectCollection Objects { get; }
    protected PdfObjectReference RootObjectReference { get; }
    protected PdfDocumentStream DocumentStream { get; }
    protected PdfDocumentStructureReader(PdfDocumentStream documentStream);
    protected PdfDocumentStructureReader(PdfDocumentStream documentStream, IPdfValidationLogger validationLogger);
    private static PdfDocumentStructureReader();
    internal static void ThrowIncorrectDataException();
    protected PdfObjectCollection get_Objects();
    protected PdfObjectReference get_RootObjectReference();
    protected PdfDocumentStream get_DocumentStream();
    protected virtual void UpdateTrailer(PdfReaderDictionary trailerDictionary, PdfObjectCollection objects);
}
internal class DevExpress.Pdf.Native.PdfDocumentWriter : PdfObjectWriter {
    private static Byte[] headerComment;
    private PdfObjectCollection objects;
    private PdfDocument document;
    private SortedDictionary`2<int, long> xref;
    [CompilerGeneratedAttribute]
private PdfSignature <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<int> <ProgressChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableMetadataUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableModDateUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCreationDateUpdate>k__BackingField;
    public PdfSignature Signature { get; public set; }
    public Action`1<int> ProgressChanged { get; public set; }
    public bool DisableMetadataUpdate { get; public set; }
    public bool DisableModDateUpdate { get; public set; }
    public bool DisableCreationDateUpdate { get; public set; }
    internal PdfObjectCollection Objects { get; }
    internal PdfDocumentWriter(Stream stream, PdfDocument document, PdfEncryptionParameters encryptionParameters, PdfFileVersion fileVersion);
    private static PdfDocumentWriter();
    public static PdfObjectCollection Write(Stream stream, PdfDocument document, PdfSaveOptions options, Action`1<int> progressChanged);
    private static string GetVersionString(PdfFileVersion fileVersion);
    [CompilerGeneratedAttribute]
public PdfSignature get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(PdfSignature value);
    [CompilerGeneratedAttribute]
public Action`1<int> get_ProgressChanged();
    [CompilerGeneratedAttribute]
public void set_ProgressChanged(Action`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_DisableMetadataUpdate();
    [CompilerGeneratedAttribute]
public void set_DisableMetadataUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableModDateUpdate();
    [CompilerGeneratedAttribute]
public void set_DisableModDateUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableCreationDateUpdate();
    [CompilerGeneratedAttribute]
public void set_DisableCreationDateUpdate(bool value);
    internal PdfObjectCollection get_Objects();
    internal PdfObjectCollection Write();
    private void ElementWriting(object sender, EventArgs e);
    private void WriteIndirectObjects();
    private long WriteCrossReferenceTable();
    private void WriteReferencesSection(int firstNumber, List`1<string> references);
    private void WriteTrailer(PdfObjectReference info, PdfObjectReference catalog, PdfObjectReference encryptionReference);
    public virtual PdfObjectPointer WriteIndirectObject(PdfObjectContainer container);
}
public static class DevExpress.Pdf.Native.PdfElementsDictionaryWriter : object {
    public static PdfWriterDictionary Write(IDictionary source, Func`2<object, object> valueTransform);
}
public class DevExpress.Pdf.Native.PdfElementTreeBranch`2 : PdfElementTreeNode`2<K, T> {
    private PdfDeferredSortedDictionary`2<K, T> kids;
    protected PdfDeferredSortedDictionary`2<K, T> Value { get; }
    internal PdfElementTreeBranch`2(PdfReaderArray children, PdfCreateTreeKeyAction`1<K> createKey, PdfCreateTreeElementAction`1<T> createElement, string nodeName);
    protected virtual PdfDeferredSortedDictionary`2<K, T> get_Value();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfElementTreeBranch`2/<GetEnumerator>d__4")]
internal virtual IEnumerator`1<KeyValuePair`2<K, T>> GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfElementTreeLeaf`2 : PdfElementTreeNode`2<K, T> {
    private PdfDeferredSortedDictionary`2<K, T> values;
    protected PdfDeferredSortedDictionary`2<K, T> Value { get; }
    internal PdfElementTreeLeaf`2(PdfReaderArray elements, PdfCreateTreeKeyAction`1<K> createKey, PdfCreateTreeElementAction`1<T> createElement);
    protected virtual PdfDeferredSortedDictionary`2<K, T> get_Value();
    internal virtual IEnumerator`1<KeyValuePair`2<K, T>> GetEnumerator();
}
public abstract class DevExpress.Pdf.Native.PdfElementTreeNode`2 : object {
    protected PdfDeferredSortedDictionary`2<K, T> Value { get; }
    internal static PdfDeferredSortedDictionary`2<K, T> Parse(PdfReaderDictionary dictionary, PdfCreateTreeKeyAction`1<K> createKey, PdfCreateTreeElementAction`1<T> createElement, string nodeName, bool checkElementCount);
    internal static PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects, string key, PdfDeferredSortedDictionary`2<K, T> dictionary, PdfConvertToKeyTreeElementAction`1<K> convertToKeyAction, Func`3<IPdfWrittenObjectsCollection, T, object> writeAction);
    protected abstract virtual PdfDeferredSortedDictionary`2<K, T> get_Value();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<K, T>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K,T>>.GetEnumerator();
    internal abstract virtual IEnumerator`1<KeyValuePair`2<K, T>> GetEnumerator();
}
public enum DevExpress.Pdf.Native.PdfEmbeddedFileUsageRight : Enum {
    public int value__;
    public static PdfEmbeddedFileUsageRight Create;
    public static PdfEmbeddedFileUsageRight Delete;
    public static PdfEmbeddedFileUsageRight Modify;
    public static PdfEmbeddedFileUsageRight Import;
}
public static class DevExpress.Pdf.Native.PdfEmbeddedResourceProvider : object {
    private static Assembly GetExecutingAssembly();
    public static Stream GetEmbeddedResourceStream(string resourceName);
    public static Stream GetDecompressedEmbeddedResourceStream(string resourceName);
}
public class DevExpress.Pdf.Native.PdfEncryptedDocumentParser : PdfDocumentParser {
    private string nonEncryptedDictionaryKey;
    public PdfEncryptedDocumentParser(PdfObjectCollection objects, int number, int generation, PdfDataStream stream, string nonEncryptedDictionaryKey);
    protected virtual Byte[] DecryptString(List`1<byte> list);
    protected virtual PdfReaderStream CreateStream(PdfReaderDictionary dictionary, Byte[] data);
}
public class DevExpress.Pdf.Native.PdfEncryptionInfo : PdfObject {
    private static int hashLength;
    private static int validationSaltLength;
    private static int keySaltLength;
    private static int keySaltPosition;
    private static int aesV3HashLength;
    private static int passwordLimit;
    private static int encryptedPermissionsLength;
    private static int initializationVectorLength;
    private static int defaultKeyLength;
    private static string filterNameDictionaryKey;
    private static string algorithmTypeDictionaryKey;
    private static string cryptFiltersDictionaryKey;
    private static string streamFilterDictionaryKey;
    private static string stringFilterDictionaryKey;
    private static string securityHandlerRevisionDictionaryKey;
    private static string ownerPasswordHashDictionaryKey;
    private static string userPasswordHashDictionaryKey;
    private static string ownerPasswordEncryptedKeyDictionaryKey;
    private static string userPasswordEncryptedKeyDictionaryKey;
    private static string encryptedPermissionsDictionaryKey;
    private static string encryptionFlagsDictionaryKey;
    private static string encryptMetadataDictionaryKey;
    private static string cryptFilterMethodDictionaryKey;
    private static string keyLengthDictionaryKey;
    private static string standardFilterName;
    private static string identityCryptFilterName;
    private static string standardCryptFilterName;
    private static Byte[] passwordPadding;
    [ThreadStaticAttribute]
private static Aes providerValue;
    private EncryptionAlgorithm algorithm;
    private int securityHandlerRevision;
    private Byte[] ownerPasswordHash;
    private Byte[] ownerValidationSalt;
    private Byte[] ownerKeySalt;
    private Byte[] userPasswordHash;
    private Byte[] userValidationSalt;
    private Byte[] userKeySalt;
    private bool encryptMetadata;
    private Byte[][] documentID;
    private long encryptionFlags;
    private PdfDocumentPermissionFlags permissionFlags;
    private int extendedKeyLength;
    private int actualKeyLength;
    private int keyLength;
    private string streamFilterName;
    private string stringFilterName;
    private string embeddedFileFilterName;
    private Byte[] ownerPasswordEncryptedKey;
    private Byte[] userPasswordEncryptedKey;
    private Byte[] encryptedPermissions;
    private CryptMethod cryptMethod;
    private Byte[] encryptionKey;
    private static Aes Provider { get; }
    public bool EncryptMetadata { get; }
    internal PdfDocumentPermissionFlags PermissionFlags { get; }
    private Byte[] PermissionsToEncrypt { get; }
    [SecuritySafeCriticalAttribute]
public PdfEncryptionInfo(PdfReaderDictionary dictionary, Byte[][] documentID, PdfGetPasswordAction getPasswordAction);
    public PdfEncryptionInfo(Byte[][] documentID, PdfEncryptionParameters encryptionParameters);
    private static PdfEncryptionInfo();
    private static Aes get_Provider();
    private static Byte[] GenerateRandomData(int length);
    private static Byte[] EncryptAesData(CipherMode mode, PaddingMode padding, Byte[] key, Byte[] initializationVector, Byte[] data);
    private static Byte[] DecryptAesData(CipherMode mode, PaddingMode padding, Byte[] key, Byte[] initializationVector, Byte[] data, int dataPosition);
    private static bool CheckFilterExistence(PdfDictionary filterDescriptions, string filterName);
    private static Byte[] PadOrTruncatePassword(IList`1<byte> passwordString);
    private static Byte[] PadOrTruncatePassword(string passwordString);
    private static Byte[] TruncatePassword(string passwordString);
    private static PdfDocumentPermissionFlags SetRC40CompatFlag(PdfDocumentPermissionFlags source, PdfDocumentPermissionFlags flagsToSet, Enum[] flagsToCheck);
    public bool get_EncryptMetadata();
    internal PdfDocumentPermissionFlags get_PermissionFlags();
    private Byte[] get_PermissionsToEncrypt();
    private Byte[] ValidateHash(Byte[] hash);
    private void InitializeCryptFilter(PdfReaderDictionary dictionary);
    private Byte[] XorKey(Byte[] key, int value);
    private Byte[] ComputeOwnerEncryptionKey(Byte[] ownerPasswordString);
    private Byte[] ComputeUserPasswordHash(Byte[] userPasswordString);
    private bool CheckPassword(Byte[] expectedHash, Byte[] actualHash);
    private Byte[] ComputeHash(Byte[] passwordString, Byte[] data, Byte[] userKey);
    private Byte[] DecryptAesData(CipherMode mode, Byte[] key, Byte[] data);
    private bool CheckPermissions();
    private bool CheckUserPassword(Byte[] passwordString);
    private Byte[] ComputeActualEncryptionKey(int number, int generation);
    private Byte[] DecryptAesData(Byte[] key, Byte[] data);
    public Byte[] EncryptData(Byte[] data, int number);
    public Byte[] DecryptData(Byte[] data, int number, int generation);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.PdfEncryptionParameters : object {
    private string ownerPassword;
    private string userPassword;
    private PdfEncryptionAlgorithm algorithm;
    private long flags;
    public string OwnerPassword { get; }
    public string UserPassword { get; }
    public PdfEncryptionAlgorithm Algorithm { get; }
    public long Flags { get; }
    public PdfEncryptionParameters(string ownerPassword, string userPassword, PdfEncryptionAlgorithm algorithm, long flags);
    public string get_OwnerPassword();
    public string get_UserPassword();
    public PdfEncryptionAlgorithm get_Algorithm();
    public long get_Flags();
}
internal static class DevExpress.Pdf.Native.PdfEnumToStringConverter : object {
    private static A GetAttribute();
    public static bool TryParse(string str, T& value, bool useDefault);
    public static T Parse(string str, bool useDefault);
    public static Nullable`1<T> Parse(string str, bool useDefault, bool supressException);
    public static string Convert(T value, bool useDefault);
}
internal class DevExpress.Pdf.Native.PdfEnumToValueConverter : object {
    private static PdfEnumToValueConverter converter;
    private static PdfEnumToValueConverter();
    public static T Parse(Nullable`1<int> value, Nullable`1<T> defaultValue);
    public static int Convert(T value);
    protected T PerformParse(Nullable`1<int> value, Nullable`1<T> defaultValue);
    protected int PerformConvert(T value);
    protected virtual void ThrowIncorrectDataException();
}
public static class DevExpress.Pdf.Native.PdfEnvironmentHelper : object {
    private static bool shouldUseKerning;
    public static bool ShouldUseKerning { get; }
    private static PdfEnvironmentHelper();
    public static bool get_ShouldUseKerning();
}
public class DevExpress.Pdf.Native.PdfExistingSignatureDescription : PdfSignatureFieldDescription {
    private string formFieldName;
    public PdfExistingSignatureDescription(string formFieldName, PdfSignatureBuilder builder);
    internal virtual void ApplySignature(PdfDocumentCatalogObject catalog, PdfSignatureModelObject signatureModel);
}
public class DevExpress.Pdf.Native.PdfExportEmbeddedModelFont : PdfExportModelFont {
    private PdfDeferredCIDType2Font font;
    private PdfFontFile fontFile;
    private IPdfRenderFontStorage renderContext;
    public PdfFont Font { get; }
    public PdfExportEmbeddedModelFont(IPdfRenderFontStorage renderContext, IPdfExportPlatformFont platformFont);
    public virtual PdfFont get_Font();
    protected virtual void UpdateFontFile(Subset subset);
    public virtual DXGlyph CreateGlyph(int index, char unicode, float width, float advance);
    public virtual float GetGlyphWidth(int glyphIndex);
}
public class DevExpress.Pdf.Native.PdfExportFontGlyphInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Unicode>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    public string Unicode { get; }
    public float Width { get; }
    public PdfExportFontGlyphInfo(string unicode, float width);
    [CompilerGeneratedAttribute]
public string get_Unicode();
    [CompilerGeneratedAttribute]
public float get_Width();
}
public abstract class DevExpress.Pdf.Native.PdfExportModelFont : object {
    protected static string VendorPrefix;
    private Subset subset;
    [CompilerGeneratedAttribute]
private bool <UseTwoByteCodePoints>k__BackingField;
    public PdfFont Font { get; }
    public bool UseTwoByteCodePoints { get; }
    protected PdfExportModelFont(bool shouldUseTwoByteGlyphIndex);
    public abstract virtual PdfFont get_Font();
    [CompilerGeneratedAttribute]
public bool get_UseTwoByteCodePoints();
    protected virtual void UpdateFontFile(Subset subset);
    public void UpdateFont();
    public void AddGlyph(int codePoint, PdfExportFontGlyphInfo info);
    public abstract virtual DXGlyph CreateGlyph(int index, char unicode, float width, float advance);
    public abstract virtual float GetGlyphWidth(int mappedIndex);
}
public class DevExpress.Pdf.Native.PdfExportNotEmbeddedCustomEncodingModelFont : PdfExportNotEmbeddedModelFont {
    private static byte notdefCode;
    private static double notdefWidth;
    private static string uniPrefix;
    private IDictionary`2<string, int> mappingCache;
    private int lastGlyphIndex;
    public PdfExportNotEmbeddedCustomEncodingModelFont(IPdfExportPlatformFont platformFont);
    public virtual float GetGlyphWidth(int mappedIndex);
    protected virtual short MapCharacter(char unicode, float width);
    private void AddGlyphToEncoding(string glyphName, byte glyphIndex, double width);
}
public class DevExpress.Pdf.Native.PdfExportNotEmbeddedModelFont : PdfExportModelFont {
    [CompilerGeneratedAttribute]
private PdfTrueTypeFont <SimpleFont>k__BackingField;
    public PdfFont Font { get; }
    protected PdfTrueTypeFont SimpleFont { get; }
    public PdfExportNotEmbeddedModelFont(IPdfExportPlatformFont platformFont);
    public static PdfExportNotEmbeddedModelFont Create(IPdfExportPlatformFont platformFont);
    public virtual PdfFont get_Font();
    [CompilerGeneratedAttribute]
protected PdfTrueTypeFont get_SimpleFont();
    public virtual DXGlyph CreateGlyph(int index, char unicode, float width, float advance);
    protected virtual short MapCharacter(char unicode, float width);
    public virtual float GetGlyphWidth(int mappedIndex);
}
public class DevExpress.Pdf.Native.PdfFieldMDPSignatureTransformMethod : PdfSignatureTransformMethod {
    private PdfSignatureFormFieldLock formFieldLock;
    public PdfSignatureFormFieldLock Lock { get; }
    protected string ValidVersion { get; }
    public PdfFieldMDPSignatureTransformMethod(PdfReaderDictionary dictionary);
    public PdfSignatureFormFieldLock get_Lock();
    protected virtual string get_ValidVersion();
}
[AttributeUsageAttribute("256")]
public class DevExpress.Pdf.Native.PdfFieldNameAttribute : Attribute {
    private string text;
    private string alternateText;
    public string Text { get; }
    public string AlternateText { get; }
    public PdfFieldNameAttribute(string text, string alternateText);
    public PdfFieldNameAttribute(string text);
    public string get_Text();
    public string get_AlternateText();
}
[AttributeUsageAttribute("256")]
public class DevExpress.Pdf.Native.PdfFieldValueAttribute : Attribute {
    private int value;
    public int Value { get; }
    public PdfFieldValueAttribute(int value);
    public int get_Value();
}
public class DevExpress.Pdf.Native.PdfFileAttachmentAnnotationAppearanceBuilder : PdfIconAnnotationAppearanceBuilder`1<PdfFileAttachmentAnnotation> {
    private static Encoding encoding;
    public PdfFileAttachmentAnnotationAppearanceBuilder(PdfFileAttachmentAnnotation annotation);
    private static PdfFileAttachmentAnnotationAppearanceBuilder();
    protected virtual void RebuildIconBody(PdfFormCommandConstructor constructor, string opacityResourceName);
}
public class DevExpress.Pdf.Native.PdfFileAttachmentAnnotationState : PdfMarkupAnnotationState`1<PdfFileAttachmentAnnotation> {
    public string IconName { get; public set; }
    public PdfFileAttachment Attachment { get; public set; }
    public PdfFileAttachmentAnnotationState(PdfPageState pageState, PdfFileAttachmentAnnotation annotation);
    public string get_IconName();
    public void set_IconName(string value);
    public PdfFileAttachment get_Attachment();
    public void set_Attachment(PdfFileAttachment value);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
    public virtual bool RemoveFromPage();
}
public class DevExpress.Pdf.Native.PdfFileAttachmentList : object {
    private PdfDocumentCatalog documentCatalog;
    private PdfDeferredSortedDictionary`2<string, PdfFileSpecification> embeddedFiles;
    private List`1<PdfFileAttachmentAnnotation> fileAttachmentAnnotations;
    private PdfProgressChangedEventHandler searchAttachmentProgressChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public PdfProgressChangedEventHandler SearchAttachmentProgressChanged { get; public set; }
    public PdfFileAttachmentList(PdfDocumentCatalog documentCatalog);
    public PdfProgressChangedEventHandler get_SearchAttachmentProgressChanged();
    public void set_SearchAttachmentProgressChanged(PdfProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void Add(PdfFileAttachment item);
    public void Add(PdfFileAttachmentAnnotation annotation);
    public bool Delete(PdfFileAttachment item);
    public void InvalidateSearchedFileAnnotations();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfFileAttachmentList/<GetEnumerator>d__15")]
public sealed virtual IEnumerator`1<PdfFileAttachment> GetEnumerator();
    private void SearchFileAttachmentAnnotation();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfFileAttachmentListItem : object {
    private IPdfFileIconService iconService;
    private PdfFileAttachment fileAttachment;
    private string size;
    private string hint;
    public PdfFileAttachment FileAttachment { get; }
    public string Size { get; }
    public string Hint { get; }
    public string FileName { get; }
    public Byte[] Icon { get; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; }
    public string Description { get; }
    public PdfFileAttachmentListItem(PdfFileAttachment fileAttachment, IPdfFileIconService iconService);
    public PdfFileAttachment get_FileAttachment();
    public string get_Size();
    public string get_Hint();
    public string get_FileName();
    public Byte[] get_Icon();
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public string get_Description();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual string ToString();
    internal Byte[] GetIcon(int iconDimension);
}
internal abstract class DevExpress.Pdf.Native.PdfFileIconService : object {
    private IDictionary`2<Key, Byte[]> iconStorage;
    public sealed virtual Byte[] GetIcon(string extension, int dimension);
    protected abstract virtual Byte[] GetIconData(string extension, int dimension);
}
public static class DevExpress.Pdf.Native.PdfFileSizeConverter : object {
    private static PdfCoreStringId[] units;
    private static PdfFileSizeConverter();
    public static string ToString(string pattern, double fileSize);
}
public class DevExpress.Pdf.Native.PdfFileSpecificationData : PdfObject {
    private static string sizeDictionaryKey;
    private static string creationDateDictionaryKey;
    private static string modificationDateDictionaryKey;
    private static string parametersDictionaryKey;
    private static string embbededFileStreamType;
    private string mimeType;
    private Nullable`1<DateTimeOffset> creationDate;
    private Nullable`1<DateTimeOffset> modificationDate;
    private Nullable`1<int> size;
    private PdfCompressedData data;
    public bool HasData { get; }
    public Byte[] Data { get; public set; }
    public Nullable`1<int> Size { get; }
    public string MimeType { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public PdfFileSpecificationData(PdfReaderDictionary dictionary);
    public bool get_HasData();
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public Nullable`1<int> get_Size();
    public string get_MimeType();
    public void set_MimeType(string value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.PdfFixedPointNumber : ValueType {
    private static int fractionPartSize;
    private static int floatToFixedFactor;
    private static int half;
    private int value;
    private PdfFixedPointNumber(int value);
    public PdfFixedPointNumber(float value);
    public static PdfFixedPointNumber op_Addition(PdfFixedPointNumber first, PdfFixedPointNumber second);
    public static PdfFixedPointNumber op_Multiply(int first, PdfFixedPointNumber second);
    public byte RoundToByte();
}
public class DevExpress.Pdf.Native.PdfFlateDataSource : object {
    private Stream deflateStream;
    public PdfFlateDataSource(Byte[] data);
    public sealed virtual void FillBuffer(Byte[] buffer);
    public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfFlateEncoder : PdfDisposableObject {
    private MemoryStream stream;
    private DeflateStream deflateStream;
    public MemoryStream Stream { get; }
    public DeflateStream DeflateStream { get; }
    public static Byte[] Encode(Byte[] data);
    public MemoryStream get_Stream();
    public DeflateStream get_DeflateStream();
    public void Close();
    public Byte[] GetData();
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.Native.PdfFlateImageScanlineSource : object {
    private IPdfFlateDataSource source;
    private PdfImageScanlineDecoder scanlineDecoder;
    private Byte[] rowBuffer;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfFlateImageScanlineSource(IPdfFlateDataSource source, PdfImageScanlineDecoder scanlineDecoder);
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void FillNextScanline(Byte[] scanlineData);
    public sealed virtual void Dispose();
}
public abstract class DevExpress.Pdf.Native.PdfFlateLZWDecodeFilterPredictor : object {
    private int bytesPerPixel;
    private int rowLength;
    protected int BytesPerPixel { get; }
    protected int RowLength { get; }
    protected int ActualRowLength { get; }
    protected PdfFlateLZWDecodeFilterPredictor(PdfFlateLZWDecodeFilter filter);
    public static Byte[] Decode(Byte[] data, PdfFlateLZWDecodeFilter filter);
    protected int get_BytesPerPixel();
    protected int get_RowLength();
    protected abstract virtual int get_ActualRowLength();
    protected int CalcRowCount(int dataLength);
    protected abstract virtual Byte[] Decode(Byte[] data);
}
public abstract class DevExpress.Pdf.Native.PdfFlateLZWDecodeFilterPredictorDataSource : object {
    private IPdfFlateDataSource source;
    private int bytesPerPixel;
    private int rowLength;
    private Byte[] previousPixel;
    private int rowInitialOffset;
    private int bitsPerComponent;
    private Byte[] currentRow;
    private int rowOffset;
    protected int BytesPerPixel { get; }
    protected int RowLength { get; }
    protected Byte[] PreviousPixel { get; }
    protected int BitsPerComponent { get; }
    protected Byte[] CurrentRow { get; protected set; }
    protected PdfFlateLZWDecodeFilterPredictorDataSource(PdfFlateLZWDecodeFilter filter, IPdfFlateDataSource source, int rowInitialOffset);
    protected int get_BytesPerPixel();
    protected int get_RowLength();
    protected Byte[] get_PreviousPixel();
    protected int get_BitsPerComponent();
    protected Byte[] get_CurrentRow();
    protected void set_CurrentRow(Byte[] value);
    public sealed virtual void FillBuffer(Byte[] buffer);
    public sealed virtual void Dispose();
    protected abstract virtual void ProcessRow();
    protected virtual void StartNextRow();
}
public enum DevExpress.Pdf.Native.PdfFontCharset : Enum {
    public int value__;
    public static PdfFontCharset Basic;
    public static PdfFontCharset GB1;
    public static PdfFontCharset CNS1;
    public static PdfFontCharset Japan1;
    public static PdfFontCharset Korea1;
}
public class DevExpress.Pdf.Native.PdfFontCmapByteEncodingFormatEntry : PdfFontCmapShortFormatEntry {
    private Byte[] glyphIdArray;
    public Byte[] GlyphIdArray { get; }
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapByteEncodingFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public Byte[] get_GlyphIdArray();
    protected virtual PdfFontCmapFormatID get_Format();
    public virtual void Write(PdfBinaryStream tableStream);
    public virtual int MapCode(char character);
}
public abstract class DevExpress.Pdf.Native.PdfFontCmapFormatEntry : object {
    public static int NotdefGlyphIndex;
    internal static ushort SymbolicEncodingMicrosoftOffset;
    private PdfFontPlatformID platformId;
    private PdfFontEncodingID encodingId;
    public PdfFontPlatformID PlatformId { get; }
    public PdfFontEncodingID EncodingId { get; }
    public int Length { get; }
    protected PdfFontCmapFormatID Format { get; }
    protected bool IsSymbolEncoding { get; }
    protected PdfFontCmapFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId);
    public static PdfFontCmapFormatEntry CreateEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfFontCmapFormatID format, PdfBinaryStream stream);
    public PdfFontPlatformID get_PlatformId();
    public PdfFontEncodingID get_EncodingId();
    public abstract virtual int get_Length();
    protected abstract virtual PdfFontCmapFormatID get_Format();
    protected bool get_IsSymbolEncoding();
    public virtual void Write(PdfBinaryStream tableStream);
    public virtual int MapCode(char character);
}
public enum DevExpress.Pdf.Native.PdfFontCmapFormatID : Enum {
    public int value__;
    public static PdfFontCmapFormatID ByteEncoding;
    public static PdfFontCmapFormatID HighByteMappingThrough;
    public static PdfFontCmapFormatID SegmentMapping;
    public static PdfFontCmapFormatID TrimmedMapping;
    public static PdfFontCmapFormatID MixedCoverage;
    public static PdfFontCmapFormatID TrimmedArray;
    public static PdfFontCmapFormatID SegmentedCoverage;
    public static PdfFontCmapFormatID ManyToOneRangeMapping;
    public static PdfFontCmapFormatID UnicodeVariationSequences;
}
public class DevExpress.Pdf.Native.PdfFontCmapGlyphRange : ValueType {
    private short start;
    private short end;
    public short Start { get; }
    public short End { get; }
    public PdfFontCmapGlyphRange(short start, short end);
    public short get_Start();
    public short get_End();
    private sealed virtual override int System.IComparable<DevExpress.Pdf.Native.PdfFontCmapGlyphRange>.CompareTo(PdfFontCmapGlyphRange range);
}
public class DevExpress.Pdf.Native.PdfFontCmapGroup : object {
    private int startCharCode;
    private int endCharCode;
    private int glyphID;
    public int StartCharCode { get; }
    public int EndCharCode { get; }
    public int GlyphID { get; }
    public PdfFontCmapGroup(int startCharCode, int endCharCode, int glyphID);
    public static PdfFontCmapGroup[] ReadGroups(PdfBinaryStream stream, int groupsCount);
    public static void WriteGroups(PdfFontCmapGroup[] groups, PdfBinaryStream tableStream);
    public int get_StartCharCode();
    public int get_EndCharCode();
    public int get_GlyphID();
}
public class DevExpress.Pdf.Native.PdfFontCmapHighByteMappingThroughFormatEntry : PdfFontCmapShortFormatEntry {
    private static int subHeaderKeysLength;
    private static int subHeaderLength;
    private Int16[] subHeaderKeys;
    private PdfFontCmapHighByteMappingThroughSubHeader[] subHeaders;
    private Int16[] glyphIndexArray;
    public Int16[] SubHeaderKeys { get; }
    public PdfFontCmapHighByteMappingThroughSubHeader[] SubHeaders { get; }
    public Int16[] GlyphIndexArray { get; }
    public int Length { get; }
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapHighByteMappingThroughFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public Int16[] get_SubHeaderKeys();
    public PdfFontCmapHighByteMappingThroughSubHeader[] get_SubHeaders();
    public Int16[] get_GlyphIndexArray();
    public virtual int get_Length();
    protected virtual PdfFontCmapFormatID get_Format();
    private PdfFontCmapHighByteMappingThroughSubHeader ReadSubHeader(PdfBinaryStream stream, int endOfSubheadersPosition);
    public virtual void Write(PdfBinaryStream tableStream);
    public virtual int MapCode(char character);
}
public class DevExpress.Pdf.Native.PdfFontCmapHighByteMappingThroughSubHeader : object {
    private short firstCode;
    private short entryCount;
    private short idDelta;
    private short idRangeOffset;
    private int glyphOffset;
    public short FirstCode { get; }
    public short EntryCount { get; }
    public short IdDelta { get; }
    public short IdRangeOffset { get; }
    public int GlyphOffset { get; }
    public PdfFontCmapHighByteMappingThroughSubHeader(short firstCode, short entryCount, short idDelta, short idRangeOffset, int glyphOffset);
    public short get_FirstCode();
    public short get_EntryCount();
    public short get_IdDelta();
    public short get_IdRangeOffset();
    public int get_GlyphOffset();
    public int CalcGlyphIndexArraySize(int offset);
}
public abstract class DevExpress.Pdf.Native.PdfFontCmapLongFormatEntry : PdfFontCmapFormatEntry {
    private int language;
    public int Language { get; }
    protected PdfFontCmapLongFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public int get_Language();
    public virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontCmapManyToOneRangeMappingFormatEntry : PdfFontCmapRangeMappingFormatEntry {
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapManyToOneRangeMappingFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    protected virtual PdfFontCmapFormatID get_Format();
    public virtual int MapCode(char character);
}
public class DevExpress.Pdf.Native.PdfFontCmapMixedCoverageFormatEntry : PdfFontCmapLongFormatEntry {
    private static int headerLength;
    private Byte[] is32;
    private PdfFontCmapGroup[] groups;
    public Byte[] Is32 { get; }
    public PdfFontCmapGroup[] Groups { get; }
    public int Length { get; }
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapMixedCoverageFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public Byte[] get_Is32();
    public PdfFontCmapGroup[] get_Groups();
    public virtual int get_Length();
    protected virtual PdfFontCmapFormatID get_Format();
    public virtual void Write(PdfBinaryStream tableStream);
}
public abstract class DevExpress.Pdf.Native.PdfFontCmapRangeMappingFormatEntry : PdfFontCmapLongFormatEntry {
    private static int headerLength;
    private PdfFontCmapGroup[] groups;
    public PdfFontCmapGroup[] Groups { get; }
    public int Length { get; }
    protected PdfFontCmapRangeMappingFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public PdfFontCmapGroup[] get_Groups();
    public virtual int get_Length();
    public virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontCmapSegmentedCoverageFormatEntry : PdfFontCmapRangeMappingFormatEntry {
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapSegmentedCoverageFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    protected virtual PdfFontCmapFormatID get_Format();
    public virtual int MapCode(char character);
}
public class DevExpress.Pdf.Native.PdfFontCmapSegmentMappingFormatEntry : PdfFontCmapShortFormatEntry {
    private static short finalCode;
    private static short finalDelta;
    private static IDictionary`2<char, byte> standardEncodingUnicodeToSID;
    private int segCount;
    private Int16[] endCode;
    private Int16[] startCode;
    private Int16[] idDelta;
    private Int16[] idRangeOffset;
    private Int16[] glyphIdArray;
    private Int32[] segmentOffsets;
    private int SegmentsLength { get; }
    internal List`1<PdfFontCmapGlyphRange> GlyphRanges { get; }
    public int SegCount { get; }
    public Int16[] EndCode { get; }
    public Int16[] StartCode { get; }
    public Int16[] IdDelta { get; }
    public Int16[] IdRangeOffset { get; }
    public Int16[] GlyphIdArray { get; }
    public int Length { get; }
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapSegmentMappingFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public PdfFontCmapSegmentMappingFormatEntry(PdfFontEncodingID encodingID);
    public PdfFontCmapSegmentMappingFormatEntry(PdfFontEncodingID encodingID, PdfFontCmapTrimmedMappingFormatEntry formatEntry);
    public PdfFontCmapSegmentMappingFormatEntry(PdfFontEncodingID encodingID, PdfFontCmapByteEncodingFormatEntry formatEntry);
    public PdfFontCmapSegmentMappingFormatEntry(PdfFontEncodingID encodingID, PdfFontCmapSegmentMappingFormatEntry formatEntry);
    public PdfFontCmapSegmentMappingFormatEntry(IDictionary`2<short, short> charset);
    private static PdfFontCmapSegmentMappingFormatEntry();
    private int get_SegmentsLength();
    internal List`1<PdfFontCmapGlyphRange> get_GlyphRanges();
    public int get_SegCount();
    public Int16[] get_EndCode();
    public Int16[] get_StartCode();
    public Int16[] get_IdDelta();
    public Int16[] get_IdRangeOffset();
    public Int16[] get_GlyphIdArray();
    public virtual int get_Length();
    protected virtual PdfFontCmapFormatID get_Format();
    internal IDictionary`2<string, ushort> GetGlyphMapping(IList`1<string> glyphNames);
    private Int16[] ReadSegmentsArray(PdfBinaryStream cmapStream);
    public virtual void Write(PdfBinaryStream tableStream);
    public virtual int MapCode(char character);
}
public abstract class DevExpress.Pdf.Native.PdfFontCmapShortFormatEntry : PdfFontCmapFormatEntry {
    protected static int HeaderLength;
    private int bodyLength;
    private short language;
    protected int BodyLength { get; }
    public short Language { get; }
    public int Length { get; }
    protected PdfFontCmapShortFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    protected PdfFontCmapShortFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, short language);
    protected int get_BodyLength();
    public short get_Language();
    public virtual int get_Length();
    public virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontCmapTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private short version;
    private List`1<PdfFontCmapFormatEntry> cMapTables;
    public List`1<PdfFontCmapFormatEntry> CMapTables { get; }
    public PdfFontCmapTableDirectoryEntry(Byte[] tableData);
    public PdfFontCmapTableDirectoryEntry(IDictionary`2<short, short> charset);
    public PdfFontCmapTableDirectoryEntry(PdfFontCmapSegmentMappingFormatEntry segmentMappingFormatEntry);
    public List`1<PdfFontCmapFormatEntry> get_CMapTables();
    protected virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontCmapTrimmedArrayFormatEntry : PdfFontCmapLongFormatEntry {
    private static int headerLength;
    private int characterCount;
    private Int16[] glyphs;
    private int startCharacterCode;
    public int CharacterCount { get; }
    public Int16[] Glyphs { get; }
    public int Length { get; }
    public int StartCharacterCode { get; }
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapTrimmedArrayFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public int get_CharacterCount();
    public Int16[] get_Glyphs();
    public virtual int get_Length();
    public int get_StartCharacterCode();
    protected virtual PdfFontCmapFormatID get_Format();
    public virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontCmapTrimmedMappingFormatEntry : PdfFontCmapShortFormatEntry {
    private ushort firstCode;
    private short entryCount;
    private Int16[] glyphIdArray;
    public short FirstCode { get; }
    public short EntryCount { get; }
    public Int16[] GlyphIdArray { get; }
    public int Length { get; }
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapTrimmedMappingFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public short get_FirstCode();
    public short get_EntryCount();
    public Int16[] get_GlyphIdArray();
    public virtual int get_Length();
    protected virtual PdfFontCmapFormatID get_Format();
    public virtual void Write(PdfBinaryStream tableStream);
    public virtual int MapCode(char character);
}
public class DevExpress.Pdf.Native.PdfFontCmapUnicodeVariationSelectorDefaultTable : object {
    private int startUnicodeValue;
    private byte additionalCount;
    public int StartUnicodeValue { get; }
    public byte AdditionalCount { get; }
    public PdfFontCmapUnicodeVariationSelectorDefaultTable(int startUnicodeValue, byte additionalCount);
    public int get_StartUnicodeValue();
    public byte get_AdditionalCount();
    public void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontCmapUnicodeVariationSelectorNonDefaultTable : object {
    private int unicodeValue;
    private short glyphId;
    public int UnicodeValue { get; }
    public short GlyphId { get; }
    public PdfFontCmapUnicodeVariationSelectorNonDefaultTable(int unicodeValue, short glyphId);
    public int get_UnicodeValue();
    public short get_GlyphId();
    public void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontCmapUnicodeVariationSelectorRecord : object {
    private int varSelector;
    private PdfFontCmapUnicodeVariationSelectorDefaultTable[] defaultTables;
    private PdfFontCmapUnicodeVariationSelectorNonDefaultTable[] nonDefaultTables;
    public int VarSelector { get; }
    public PdfFontCmapUnicodeVariationSelectorDefaultTable[] DefaultTables { get; }
    public PdfFontCmapUnicodeVariationSelectorNonDefaultTable[] NonDefaultTables { get; }
    public PdfFontCmapUnicodeVariationSelectorRecord(int varSelector, PdfFontCmapUnicodeVariationSelectorDefaultTable[] defaultTables, PdfFontCmapUnicodeVariationSelectorNonDefaultTable[] nonDefaultTables);
    public int get_VarSelector();
    public PdfFontCmapUnicodeVariationSelectorDefaultTable[] get_DefaultTables();
    public PdfFontCmapUnicodeVariationSelectorNonDefaultTable[] get_NonDefaultTables();
    public int Write(PdfBinaryStream tableStream, int offset);
}
public class DevExpress.Pdf.Native.PdfFontCmapUnicodeVariationSequencesFormatEntry : PdfFontCmapFormatEntry {
    private static int headerLength;
    private static int variationSelectorRecordSize;
    private PdfFontCmapUnicodeVariationSelectorRecord[] variationSelectorRecords;
    public PdfFontCmapUnicodeVariationSelectorRecord[] VariationSelectorRecords { get; }
    public int Length { get; }
    protected PdfFontCmapFormatID Format { get; }
    public PdfFontCmapUnicodeVariationSequencesFormatEntry(PdfFontPlatformID platformId, PdfFontEncodingID encodingId, PdfBinaryStream stream);
    public PdfFontCmapUnicodeVariationSelectorRecord[] get_VariationSelectorRecords();
    public virtual int get_Length();
    protected virtual PdfFontCmapFormatID get_Format();
    public virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontDescriptorData : object {
    [CompilerGeneratedAttribute]
private string <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFontFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ItalicAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ascent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Descent>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BBox>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumGlyphs>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CapHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <XHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StemV>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StemH>k__BackingField;
    public string FontFamily { get; public set; }
    public PdfFontFlags Flags { get; public set; }
    public double ItalicAngle { get; public set; }
    public bool Bold { get; public set; }
    public double Ascent { get; public set; }
    public double Descent { get; public set; }
    public PdfRectangle BBox { get; public set; }
    public int NumGlyphs { get; public set; }
    public double CapHeight { get; public set; }
    public double XHeight { get; public set; }
    public double StemV { get; public set; }
    public double StemH { get; public set; }
    public PdfFontDescriptorData(PdfFontMetrics fontMetrics, PdfFontFlags fontFlags, double italicAngle, bool bold, int numGlyphs);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfFontFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(PdfFontFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_ItalicAngle();
    [CompilerGeneratedAttribute]
public void set_ItalicAngle(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Ascent();
    [CompilerGeneratedAttribute]
public void set_Ascent(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Descent();
    [CompilerGeneratedAttribute]
public void set_Descent(double value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfRectangle get_BBox();
    [CompilerGeneratedAttribute]
public void set_BBox(PdfRectangle value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumGlyphs();
    [CompilerGeneratedAttribute]
public void set_NumGlyphs(int value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_CapHeight();
    [CompilerGeneratedAttribute]
public void set_CapHeight(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_XHeight();
    [CompilerGeneratedAttribute]
public void set_XHeight(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_StemV();
    [CompilerGeneratedAttribute]
public void set_StemV(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_StemH();
    [CompilerGeneratedAttribute]
public void set_StemH(double value);
}
public enum DevExpress.Pdf.Native.PdfFontDirectionHint : Enum {
    public int value__;
    public static PdfFontDirectionHint FullyMixedDirectionalGlyphs;
    public static PdfFontDirectionHint OnlyStronglyLeftToRight;
    public static PdfFontDirectionHint OnlyStronglyLeftToRightButAlsoContainsNeutrals;
    public static PdfFontDirectionHint OnlyStronglyRightToLeft;
    public static PdfFontDirectionHint OnlyStronglyRightToLeftButAlsoContainsNeutrals;
}
public enum DevExpress.Pdf.Native.PdfFontEncodingID : Enum {
    public int value__;
    public static PdfFontEncodingID Symbol;
    public static PdfFontEncodingID UGL;
}
public class DevExpress.Pdf.Native.PdfFontFile : PdfDisposableObject {
    private static int tableDirectoryOffset;
    private static Byte[] openTypeVersion;
    private static Byte[] ttfVersion;
    private static SortedSet`1<string> trueTypeSubsetTableTags;
    private static SortedSet`1<string> cffSubsetTableTags;
    private Byte[] version;
    private SortedDictionary`2<string, PdfFontTableDirectoryEntry> tableDictionary;
    private long initalFontSize;
    private PdfFontHheaTableDirectoryEntry hhea;
    private PdfFontCmapTableDirectoryEntry cMap;
    private PdfFontKernTableDirectoryEntry kern;
    private PdfFontHmtxTableDirectoryEntry hmtx;
    public static Byte[] TTFVersion { get; }
    internal SortedDictionary`2<string, PdfFontTableDirectoryEntry> TableDictionary { get; }
    public bool IsTrueTypeFont { get; }
    public PdfFontHeadTableDirectoryEntry Head { get; }
    public PdfFontMaxpTableDirectoryEntry Maxp { get; }
    public PdfFontOS2TableDirectoryEntry OS2 { get; }
    public PdfFontPostTableDirectoryEntry Post { get; }
    public PdfFontNameTableDirectoryEntry Name { get; }
    public PdfTrueTypeLocaTableDirectoryEntry Loca { get; }
    public PdfTrueTypeGlyfTableDirectoryEntry Glyf { get; }
    public PdfOpenTypeCFFTableDirectoryEntry CFF { get; }
    public PdfFontHheaTableDirectoryEntry Hhea { get; }
    public PdfFontCmapTableDirectoryEntry CMap { get; }
    public PdfFontKernTableDirectoryEntry Kern { get; }
    public PdfFontHmtxTableDirectoryEntry Hmtx { get; }
    public Byte[] Version { get; public set; }
    public bool Italic { get; }
    public bool Bold { get; }
    public PdfFontFile(PdfFont font, Byte[] cffData, string fontName);
    public PdfFontFile(PdfCFFFontProgramFacade compactFontProgram, PdfFont font, string fontName, Byte[] cffData);
    private PdfFontFile(PdfFont font, PdfRectangle fontProgramBBox, int firstChar, int lastChar, Byte[] cffData, int glyphCount);
    public PdfFontFile(Byte[] data);
    public PdfFontFile(PdfBinaryStream stream);
    private static PdfFontFile();
    public static bool AreEqual(PdfFontFile fontFile1, PdfFontFile fontFile2);
    public static Byte[] get_TTFVersion();
    private static bool CheckVersion(Byte[] fontFileData, Byte[] versionData);
    public static bool IsOpenType(Byte[] fontFileData);
    public static bool IsTrueType(Byte[] fontFileData);
    public static Byte[] GetCFFDataFromOpenType(Byte[] fontFileData);
    public static Byte[] GetValidCFFData(Byte[] fontFileData);
    internal SortedDictionary`2<string, PdfFontTableDirectoryEntry> get_TableDictionary();
    public bool get_IsTrueTypeFont();
    public PdfFontHeadTableDirectoryEntry get_Head();
    public PdfFontMaxpTableDirectoryEntry get_Maxp();
    public PdfFontOS2TableDirectoryEntry get_OS2();
    public PdfFontPostTableDirectoryEntry get_Post();
    public PdfFontNameTableDirectoryEntry get_Name();
    public PdfTrueTypeLocaTableDirectoryEntry get_Loca();
    public PdfTrueTypeGlyfTableDirectoryEntry get_Glyf();
    public PdfOpenTypeCFFTableDirectoryEntry get_CFF();
    public PdfFontHheaTableDirectoryEntry get_Hhea();
    public PdfFontCmapTableDirectoryEntry get_CMap();
    public PdfFontKernTableDirectoryEntry get_Kern();
    public PdfFontHmtxTableDirectoryEntry get_Hmtx();
    public Byte[] get_Version();
    public void set_Version(Byte[] value);
    public bool get_Italic();
    public bool get_Bold();
    public void AddTable(PdfFontTableDirectoryEntry table);
    public PdfFontFileSubset CreateSubset(ICollection`1<int> glyphIndices);
    public Byte[] GetData();
    public IPdfCodePointMapping GetSimpleMapping(PdfSimpleFontEncoding encoding, bool isSymbolic);
    private void ReadTables(PdfBinaryStream stream);
    private T GetTable(string key);
    private Byte[] GetData(ICollection`1<string> tablesToWrite);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.Native.PdfFontFileSubset : ValueType {
    [CompilerGeneratedAttribute]
private PdfFontFileSubsetType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public PdfFontFileSubsetType Type { get; }
    public Byte[] Data { get; }
    public PdfFontFileSubset(PdfFontFileSubsetType type, Byte[] data);
    [CompilerGeneratedAttribute]
public PdfFontFileSubsetType get_Type();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
}
public enum DevExpress.Pdf.Native.PdfFontFileSubsetType : Enum {
    public int value__;
    public static PdfFontFileSubsetType Empty;
    public static PdfFontFileSubsetType TrueType;
    public static PdfFontFileSubsetType CFF;
}
public class DevExpress.Pdf.Native.PdfFontHeadTableDirectoryEntry : PdfFontTableDirectoryEntry {
    internal static string EntryTag;
    private static DateTime minDateTime;
    private int version;
    private int fontRevision;
    private int checkSumAdjustment;
    private int magicNumber;
    private PdfFontHeadTableDirectoryEntryFlags flags;
    private short unitsPerEm;
    private long created;
    private long modified;
    private PdfFontHeadTableDirectoryEntryMacStyle macStyle;
    private short lowestRecPPEM;
    private PdfFontDirectionHint fontDirectionHint;
    private PdfIndexToLocFormat indexToLocFormat;
    private short glyphDataFormat;
    private short xMin;
    private short yMin;
    private short xMax;
    private short yMax;
    public int Version { get; }
    public int FontRevision { get; }
    public int CheckSumAdjustment { get; }
    public int MagicNumber { get; }
    public PdfFontHeadTableDirectoryEntryFlags Flags { get; }
    public short UnitsPerEm { get; }
    public long Created { get; }
    public long Modified { get; }
    public PdfFontHeadTableDirectoryEntryMacStyle MacStyle { get; }
    public short LowestRecPPEM { get; }
    public PdfFontDirectionHint FontDirectionHint { get; }
    public PdfIndexToLocFormat IndexToLocFormat { get; }
    public short GlyphDataFormat { get; }
    public short XMin { get; public set; }
    public short YMin { get; public set; }
    public short XMax { get; public set; }
    public short YMax { get; public set; }
    public PdfFontHeadTableDirectoryEntry(Byte[] tableData);
    public PdfFontHeadTableDirectoryEntry(PdfRectangle fontBBox);
    private static PdfFontHeadTableDirectoryEntry();
    public int get_Version();
    public int get_FontRevision();
    public int get_CheckSumAdjustment();
    public int get_MagicNumber();
    public PdfFontHeadTableDirectoryEntryFlags get_Flags();
    public short get_UnitsPerEm();
    public long get_Created();
    public long get_Modified();
    public PdfFontHeadTableDirectoryEntryMacStyle get_MacStyle();
    public short get_LowestRecPPEM();
    public PdfFontDirectionHint get_FontDirectionHint();
    public PdfIndexToLocFormat get_IndexToLocFormat();
    public short get_GlyphDataFormat();
    public short get_XMin();
    public void set_XMin(short value);
    public short get_YMin();
    public void set_YMin(short value);
    public short get_XMax();
    public void set_XMax(short value);
    public short get_YMax();
    public void set_YMax(short value);
    protected virtual void Write(PdfBinaryStream tableStream);
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.PdfFontHeadTableDirectoryEntryFlags : Enum {
    public int value__;
    public static PdfFontHeadTableDirectoryEntryFlags Empty;
    public static PdfFontHeadTableDirectoryEntryFlags BaselineForFontAt0;
    public static PdfFontHeadTableDirectoryEntryFlags LeftSidebearingPointAt0;
    public static PdfFontHeadTableDirectoryEntryFlags InstructionsMayDependOnPointSize;
    public static PdfFontHeadTableDirectoryEntryFlags ForcePPEMToIntegerValues;
    public static PdfFontHeadTableDirectoryEntryFlags InstructionsMayAlterAdvanceWidth;
    public static PdfFontHeadTableDirectoryEntryFlags FontDataIsLossless;
    public static PdfFontHeadTableDirectoryEntryFlags ProduceCompatibleMetrics;
    public static PdfFontHeadTableDirectoryEntryFlags OptimizedForClearType;
    public static PdfFontHeadTableDirectoryEntryFlags LastResort;
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.PdfFontHeadTableDirectoryEntryMacStyle : Enum {
    public int value__;
    public static PdfFontHeadTableDirectoryEntryMacStyle Empty;
    public static PdfFontHeadTableDirectoryEntryMacStyle Bold;
    public static PdfFontHeadTableDirectoryEntryMacStyle Italic;
    public static PdfFontHeadTableDirectoryEntryMacStyle Underline;
    public static PdfFontHeadTableDirectoryEntryMacStyle Outline;
    public static PdfFontHeadTableDirectoryEntryMacStyle Shadow;
    public static PdfFontHeadTableDirectoryEntryMacStyle Condensed;
    public static PdfFontHeadTableDirectoryEntryMacStyle Extended;
}
public class DevExpress.Pdf.Native.PdfFontHheaTableDirectoryEntry : PdfFontTableDirectoryEntry {
    internal static string EntryTag;
    private int version;
    private short lineGap;
    private short advanceWidthMax;
    private short minLeftSideBearing;
    private short minRightSideBearing;
    private short xMaxExtent;
    private short caretSlopeRise;
    private short caretSlopeRun;
    private short metricDataFormat;
    private int numberOfHMetrics;
    private short ascender;
    private short descender;
    public int Version { get; }
    public short LineGap { get; }
    public short AdvanceWidthMax { get; }
    public short MinLeftSideBearing { get; }
    public short MinRightSideBearing { get; }
    public short XMaxExtent { get; }
    public short CaretSlopeRise { get; }
    public short CaretSlopeRun { get; }
    public short MetricDataFormat { get; }
    public int NumberOfHMetrics { get; }
    public short Ascender { get; public set; }
    public short Descender { get; public set; }
    public PdfFontHheaTableDirectoryEntry(Byte[] tableData);
    public PdfFontHheaTableDirectoryEntry(PdfFont font, int glyphCount, short ascent, short descent);
    public int get_Version();
    public short get_LineGap();
    public short get_AdvanceWidthMax();
    public short get_MinLeftSideBearing();
    public short get_MinRightSideBearing();
    public short get_XMaxExtent();
    public short get_CaretSlopeRise();
    public short get_CaretSlopeRun();
    public short get_MetricDataFormat();
    public int get_NumberOfHMetrics();
    public short get_Ascender();
    public void set_Ascender(short value);
    public short get_Descender();
    public void set_Descender(short value);
    protected virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontHmtxTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private Int16[] advanceWidths;
    public Int16[] AdvanceWidths { get; }
    public PdfFontHmtxTableDirectoryEntry(Byte[] tableData);
    public PdfFontHmtxTableDirectoryEntry(int glyphCount);
    public Int16[] get_AdvanceWidths();
    public Int16[] FillAdvanceWidths(int hMetricsCount, int glyphsCount);
}
public class DevExpress.Pdf.Native.PdfFontKernTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private Dictionary`2<int, short> kerning;
    public PdfFontKernTableDirectoryEntry(Byte[] tableData);
    public short GetKerning(int glyphIndex1, int glyphIndex2);
}
public enum DevExpress.Pdf.Native.PdfFontLanguageID : Enum {
    public int value__;
    public static PdfFontLanguageID English;
    public static PdfFontLanguageID EnglishUnitedStates;
}
public class DevExpress.Pdf.Native.PdfFontMaxpTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private static int numGlyphsOffset;
    public int NumGlyphs { get; public set; }
    public PdfFontMaxpTableDirectoryEntry(Byte[] tableData);
    public PdfFontMaxpTableDirectoryEntry(int glyphCount);
    public int get_NumGlyphs();
    public void set_NumGlyphs(int value);
}
public class DevExpress.Pdf.Native.PdfFontMetrics : object {
    private double ascent;
    private double descent;
    private double lineSpacing;
    private double unitsPerEm;
    private PdfRectangle emBBox;
    public double EmAscent { get; }
    public double EmDescent { get; }
    public PdfRectangle EmBBox { get; }
    public PdfFontMetrics(double ascent, double descent, double lineSpacing, double unitsPerEm, PdfRectangle emBBox);
    public PdfFontMetrics(PdfFontFile fontFile);
    public PdfFontMetrics(PdfFontMetrics metrics, double lineSpacing);
    public double get_EmAscent();
    public double get_EmDescent();
    public PdfRectangle get_EmBBox();
    public double GetAscent(double fontSize);
    public double GetDescent(double fontSize);
    public double GetLineSpacing(double fontSize);
}
public class DevExpress.Pdf.Native.PdfFontMetricsMetadata : object {
    private double height;
    private double ascent;
    private double descent;
    public double Height { get; }
    public double Ascent { get; }
    public double Descent { get; }
    public PdfFontMetricsMetadata(double ascent, double descent);
    public double get_Height();
    public double get_Ascent();
    public double get_Descent();
}
public enum DevExpress.Pdf.Native.PdfFontNameID : Enum {
    public int value__;
    public static PdfFontNameID Copyright;
    public static PdfFontNameID FontFamily;
    public static PdfFontNameID FontSubfamily;
    public static PdfFontNameID UniqueFontId;
    public static PdfFontNameID FullFontName;
    public static PdfFontNameID Version;
    public static PdfFontNameID PostscriptName;
    public static PdfFontNameID Trademark;
}
public class DevExpress.Pdf.Native.PdfFontNameRecord : object {
    private PdfFontPlatformID platformID;
    private PdfFontLanguageID languageID;
    private PdfFontNameID nameID;
    private PdfFontEncodingID encodingID;
    private Byte[] nameBytes;
    private string name;
    public PdfFontPlatformID PlatformID { get; }
    public PdfFontLanguageID LanguageID { get; }
    public PdfFontNameID NameID { get; }
    public PdfFontEncodingID EncodingID { get; }
    public Byte[] NameBytes { get; }
    public string Name { get; }
    public PdfFontNameRecord(PdfFontPlatformID platformID, PdfFontLanguageID languageID, PdfFontNameID nameID, PdfFontEncodingID encodingID, Byte[] nameBytes);
    public PdfFontNameRecord(PdfBinaryStream stream, int dataOffset);
    public PdfFontPlatformID get_PlatformID();
    public PdfFontLanguageID get_LanguageID();
    public PdfFontNameID get_NameID();
    public PdfFontEncodingID get_EncodingID();
    public Byte[] get_NameBytes();
    public string get_Name();
}
public class DevExpress.Pdf.Native.PdfFontNameTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private static string nameFontSubfamily;
    private static string nameVersion;
    private List`1<PdfFontNameRecord> namingTable;
    private string familyName;
    private string subFamilyName;
    private string macFamilyName;
    private string postScriptName;
    public IList`1<PdfFontNameRecord> Names { get; }
    public string FamilyName { get; }
    public string SubFamilyName { get; }
    public string MacFamilyName { get; }
    public string PostScriptName { get; }
    public PdfFontNameTableDirectoryEntry(Byte[] tableData);
    public PdfFontNameTableDirectoryEntry(PdfFontCmapTableDirectoryEntry cmapEntry, string fontName);
    public IList`1<PdfFontNameRecord> get_Names();
    public string get_FamilyName();
    public string get_SubFamilyName();
    public string get_MacFamilyName();
    public string get_PostScriptName();
    public void Create(PdfFontCmapTableDirectoryEntry cmapEntry, string fontName);
    public bool ContainsFontFamilyName(string name, Nullable`1<int> maxNameLength);
    private string FindName(PdfFontPlatformID platform, PdfFontEncodingID encoding, PdfFontLanguageID language, PdfFontNameID id);
    protected virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfFontOS2TableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static int BoldWeight;
    internal static string EntryTag;
    private static short normalFontWeight;
    private static short boldFontWeight;
    private Version version;
    private short avgCharWidth;
    private short weightClass;
    private WidthClass widthClass;
    private EmbeddingType embeddingType;
    private short subscriptXSize;
    private short subscriptYSize;
    private short subscriptXOffset;
    private short subscriptYOffset;
    private short superscriptXSize;
    private short superscriptYSize;
    private short superscriptXOffset;
    private short superscriptYOffset;
    private short strikeoutSize;
    private short strikeoutPosition;
    private PdfFontFamilyClass familyClass;
    private PdfPanose panose;
    private UnicodeRange1 unicodeRange1;
    private UnicodeRange2 unicodeRange2;
    private UnicodeRange3 unicodeRange3;
    private UnicodeRange4 unicodeRange4;
    private string vendor;
    private Selection selection;
    private int firstCharIndex;
    private int lastCharIndex;
    private short typoAscender;
    private short typoDescender;
    private short typoLineGap;
    private CodePageRange1 codePageRange1;
    private CodePageRange2 codePageRange2;
    private short xHeight;
    private short capHeight;
    private short defaultChar;
    private short breakChar;
    private short maxContext;
    private short winAscent;
    private short winDescent;
    public PdfPanose Panose { get; }
    public short TypoLineGap { get; }
    public short TypoAscender { get; }
    public short TypoDescender { get; }
    public bool UseTypoMetrics { get; }
    public bool IsSymbolic { get; }
    public bool IsBold { get; }
    public bool IsItalic { get; }
    public short WeightClass { get; }
    public short WinAscent { get; public set; }
    public short WinDescent { get; public set; }
    public PdfFontOS2TableDirectoryEntry(Byte[] tableData);
    public PdfFontOS2TableDirectoryEntry(PdfFont font, int firstChar, int lastChar, short ascent, short descent);
    public PdfPanose get_Panose();
    public short get_TypoLineGap();
    public short get_TypoAscender();
    public short get_TypoDescender();
    public bool get_UseTypoMetrics();
    public bool get_IsSymbolic();
    public bool get_IsBold();
    public bool get_IsItalic();
    public short get_WeightClass();
    public short get_WinAscent();
    public void set_WinAscent(short value);
    public short get_WinDescent();
    public void set_WinDescent(short value);
    protected virtual void Write(PdfBinaryStream tableStream);
}
public enum DevExpress.Pdf.Native.PdfFontPlatformID : Enum {
    public int value__;
    public static PdfFontPlatformID AppleUnicode;
    public static PdfFontPlatformID Macintosh;
    public static PdfFontPlatformID ISO;
    public static PdfFontPlatformID Microsoft;
}
public class DevExpress.Pdf.Native.PdfFontPostTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private static int version3;
    private static String[] standardMacCharacterSet;
    private float italicAngle;
    private short underlinePosition;
    private short underlineThickness;
    private bool isFixedPitch;
    private int minMemType42;
    private int maxMemType42;
    private int minMemType1;
    private int maxMemType1;
    private String[] glyphNames;
    public float ItalicAngle { get; }
    public short UnderlinePosition { get; }
    public short UnderlineThickness { get; }
    public bool IsFixedPitch { get; }
    public int MinMemType42 { get; }
    public int MaxMemType42 { get; }
    public int MinMemType1 { get; }
    public int MaxMemType1 { get; }
    public IList`1<string> GlyphNames { get; }
    public PdfFontPostTableDirectoryEntry(Byte[] tableData);
    public PdfFontPostTableDirectoryEntry(PdfFont font);
    private static PdfFontPostTableDirectoryEntry();
    public float get_ItalicAngle();
    public short get_UnderlinePosition();
    public short get_UnderlineThickness();
    public bool get_IsFixedPitch();
    public int get_MinMemType42();
    public int get_MaxMemType42();
    public int get_MinMemType1();
    public int get_MaxMemType1();
    public IList`1<string> get_GlyphNames();
}
public abstract class DevExpress.Pdf.Native.PdfFontProgramFacade : object {
    private IPdfCodePointMapping mapping;
    private PdfRectangle fontBBox;
    private Nullable`1<double> top;
    private Nullable`1<double> bottom;
    public PdfRectangle FontBBox { get; }
    public Nullable`1<double> Top { get; }
    public Nullable`1<double> Bottom { get; }
    protected PdfFontProgramFacade(PdfRectangle fontBBox, Nullable`1<double> top, Nullable`1<double> bottom, IPdfCodePointMapping mapping);
    public static Int16[] GetUnicodeMapping(PdfSimpleFontEncoding encoding);
    public PdfRectangle get_FontBBox();
    public Nullable`1<double> get_Top();
    public Nullable`1<double> get_Bottom();
    public bool UpdateCodePoints(Int16[] codePoints, bool useEmbeddedFontEncoding);
}
public class DevExpress.Pdf.Native.PdfFontResourceDictionary : PdfResourceDictionary`1<PdfFont> {
    private bool alternativeFontNames;
    protected string Prefix { get; }
    protected string ResourceKey { get; }
    public PdfFontResourceDictionary(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfFontResourceDictionary parentResourceDictionary, bool alternativeFontNames);
    protected virtual string get_Prefix();
    protected virtual string get_ResourceKey();
    protected virtual PdfFont CreateResource(object value);
}
public class DevExpress.Pdf.Native.PdfFontTableDirectoryEntry : PdfDisposableObject {
    protected static double Ratio;
    protected static double TypoLineGapRatio;
    private string tag;
    private PdfBinaryStream tableStream;
    [CompilerGeneratedAttribute]
private bool <ShouldWrite>k__BackingField;
    protected PdfBinaryStream TableStream { get; }
    protected bool ShouldWrite { get; protected set; }
    public string Tag { get; }
    public int Length { get; }
    public Byte[] TableData { get; }
    public Byte[] AlignedTableData { get; }
    public PdfFontTableDirectoryEntry(string tag);
    public PdfFontTableDirectoryEntry(string tag, Byte[] tableData);
    public static PdfFontTableDirectoryEntry Create(string tag, Byte[] array);
    protected PdfBinaryStream get_TableStream();
    [CompilerGeneratedAttribute]
protected bool get_ShouldWrite();
    [CompilerGeneratedAttribute]
protected void set_ShouldWrite(bool value);
    public string get_Tag();
    public int get_Length();
    public Byte[] get_TableData();
    public Byte[] get_AlignedTableData();
    protected void SetProperty(T& property, T value);
    public int GetWritingTableSize();
    public int Write(PdfBinaryStream stream, int offset);
    private void ApplyChanges();
    protected virtual void Write(PdfBinaryStream tableStream);
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.Native.PdfFormCommandConstructor : PdfCommandConstructor {
    private PdfRectangle contentSquare;
    private PdfForm form;
    public PdfRectangle BoundingBox { get; }
    public PdfRectangle ContentSquare { get; }
    public PdfForm Form { get; }
    public PdfFormCommandConstructor(PdfForm form);
    public PdfRectangle get_BoundingBox();
    public PdfRectangle get_ContentSquare();
    public PdfForm get_Form();
}
public static class DevExpress.Pdf.Native.PdfFormDataReader : object {
    private static char tabulationCharacter;
    private static char quotaCharacter;
    private static string originalAttributeName;
    private static string nameAttributeName;
    private static XNamespace xfdfNamespace;
    private static PdfFormDataReader();
    public static void Load(PdfFormData formData, Stream stream, PdfFormDataFormat format);
    private static void ReadTxt(Stream stream, PdfFormData formData);
    private static void ReadXml(Stream stream, PdfFormData formData);
}
public abstract class DevExpress.Pdf.Native.PdfFormDataWriter : object {
    [CompilerGeneratedAttribute]
private PdfFormData <FormData>k__BackingField;
    protected PdfFormData FormData { get; }
    protected PdfFormDataWriter(PdfFormData formData);
    public static void Save(PdfFormData formData, Stream stream, PdfFormDataFormat format);
    [CompilerGeneratedAttribute]
protected PdfFormData get_FormData();
    protected void WriteFields(Action`2<string, object> fieldWriter);
    public abstract virtual void Write(Stream stream);
}
internal class DevExpress.Pdf.Native.PdfForwardTextSearchIterator : PdfTextSearchIterator {
    private bool searchStarted;
    public PdfForwardTextSearchIterator(PdfTextSearchIterator iterator);
    public PdfForwardTextSearchIterator(PdfPageDataCache cache, int pageIndex);
    protected virtual bool MoveCore();
    protected virtual void Restart();
    protected virtual void MoveToNextPage();
}
public class DevExpress.Pdf.Native.PdfFreeObject : PdfDocumentItem {
    public PdfFreeObject(int number, int generation);
}
public class DevExpress.Pdf.Native.PdfFreeTextAnnotationAppearanceBuilder : PdfMarkupAnnotationAppearanceBuilder`1<PdfFreeTextAnnotation> {
    private static double defaultFontSize;
    private PdfRectangle contentRectangle;
    private double borderWidth;
    private IPdfExportFontProvider fontSearch;
    private IPdfPathAnnotationAppearanceBuilderStrategy borderStrategy;
    public PdfFreeTextAnnotationAppearanceBuilder(PdfFreeTextAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfRectangle GetFormBBox();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfFreeTextAnnotationState : PdfMarkupAnnotationState`1<PdfFreeTextAnnotation> {
    public PdfRGBColor InteriorColor { get; public set; }
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    protected PdfAnnotationBorderEffect BorderEffect { get; protected set; }
    public PdfTextJustification TextJustification { get; public set; }
    public PdfFreeTextAnnotationIntent FreeTextIntent { get; public set; }
    public PdfRectangle TextRectangle { get; public set; }
    public PdfFreeTextAnnotationState(PdfPageState pageState, PdfFreeTextAnnotation annotation);
    public PdfRGBColor get_InteriorColor();
    public void set_InteriorColor(PdfRGBColor value);
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
    protected virtual PdfAnnotationBorderEffect get_BorderEffect();
    protected virtual void set_BorderEffect(PdfAnnotationBorderEffect value);
    public PdfTextJustification get_TextJustification();
    public void set_TextJustification(PdfTextJustification value);
    public PdfFreeTextAnnotationIntent get_FreeTextIntent();
    public void set_FreeTextIntent(PdfFreeTextAnnotationIntent value);
    public PdfRectangle get_TextRectangle();
    public void set_TextRectangle(PdfRectangle value);
    protected virtual void OnBorderEffectChanged();
    private void RecalculateRectAndPadding(PdfRectangle textRect);
    public void SetCallout(PdfAnnotationLineEndingStyle calloutLineEndingStyle, PdfPoint startPoint);
    public void SetCallout(PdfAnnotationLineEndingStyle calloutLineEndingStyle, PdfPoint startPoint, Nullable`1<PdfPoint> kneePoint, PdfPoint endPoint);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfGDIPlusDCTDecoderFactory : object {
    public sealed virtual IPdfImageScanlineSource CreateSource(Byte[] imageData, PdfImage image);
}
public class DevExpress.Pdf.Native.PdfGDIPlusImageScanlineSource : object {
    private PdfDCTDecodeResult sourceData;
    private int width;
    private int componentsCount;
    private IList`1<PdfRange> colorKeyMask;
    private int offset;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfGDIPlusImageScanlineSource(Byte[] imageData, PdfImage image);
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void Dispose();
    public sealed virtual void FillNextScanline(Byte[] scanlineData);
}
public class DevExpress.Pdf.Native.PdfGlyphDescription : object {
    internal static int HeaderSize;
    private static ushort ARG_1_AND_2_ARE_WORDS;
    private static ushort WE_HAVE_A_SCALE;
    private static ushort MORE_COMPONENTS;
    private static ushort WE_HAVE_AN_X_AND_Y_SCALE;
    private static ushort WE_HAVE_A_TWO_BY_TWO;
    private short numberOfContours;
    private Byte[] data;
    private List`1<int> glyphIndexList;
    private bool isInvalid;
    private bool isBoundingBoxParsed;
    private Nullable`1<short> xMin;
    private Nullable`1<short> yMin;
    private Nullable`1<short> xMax;
    private Nullable`1<short> yMax;
    public bool IsEmpty { get; }
    public int Size { get; }
    public IEnumerable`1<int> AdditionalGlyphIndices { get; }
    public Nullable`1<short> XMin { get; }
    public Nullable`1<short> YMin { get; }
    public Nullable`1<short> XMax { get; }
    public Nullable`1<short> YMax { get; }
    public PdfGlyphDescription(PdfBinaryStream stream, int glyphDataSize, int glyphCount);
    public bool get_IsEmpty();
    public int get_Size();
    public IEnumerable`1<int> get_AdditionalGlyphIndices();
    public Nullable`1<short> get_XMin();
    public Nullable`1<short> get_YMin();
    public Nullable`1<short> get_XMax();
    public Nullable`1<short> get_YMax();
    public void Write(PdfBinaryStream stream);
    private void ReadBoundingBox();
}
public static class DevExpress.Pdf.Native.PdfGlyphNames : object {
    internal static string _notdef;
    internal static string _001_000;
    internal static string _001_001;
    internal static string _001_002;
    internal static string _001_003;
    internal static string A;
    internal static string AE;
    internal static string AEacute;
    internal static string AEmacron;
    internal static string AEsmall;
    internal static string Aacute;
    internal static string Aacutesmall;
    internal static string Abreve;
    internal static string Abreveacute;
    internal static string Abrevecyrillic;
    internal static string Abrevedotbelow;
    internal static string Abrevegrave;
    internal static string Abrevehookabove;
    internal static string Abrevetilde;
    internal static string Acaron;
    internal static string Acircle;
    internal static string Acircumflex;
    internal static string Acircumflexacute;
    internal static string Acircumflexdotbelow;
    internal static string Acircumflexgrave;
    internal static string Acircumflexhookabove;
    internal static string Acircumflexsmall;
    internal static string Acircumflextilde;
    internal static string Acute;
    internal static string Acutesmall;
    internal static string Acyrillic;
    internal static string Adblgrave;
    internal static string Adieresis;
    internal static string Adieresiscyrillic;
    internal static string Adieresismacron;
    internal static string Adieresissmall;
    internal static string Adotbelow;
    internal static string Adotmacron;
    internal static string Agrave;
    internal static string Agravesmall;
    internal static string Ahookabove;
    internal static string Aiecyrillic;
    internal static string Ainvertedbreve;
    internal static string Alpha;
    internal static string Alphatonos;
    internal static string Amacron;
    internal static string Amonospace;
    internal static string Aogonek;
    internal static string Aring;
    internal static string Aringacute;
    internal static string Aringbelow;
    internal static string Aringsmall;
    internal static string Asmall;
    internal static string Atilde;
    internal static string Atildesmall;
    internal static string Aybarmenian;
    internal static string B;
    internal static string Bcircle;
    internal static string Bdotaccent;
    internal static string Bdotbelow;
    internal static string Becyrillic;
    internal static string Benarmenian;
    internal static string Beta;
    internal static string Bhook;
    internal static string Black;
    internal static string Blinebelow;
    internal static string Bmonospace;
    internal static string Bold;
    internal static string Book;
    internal static string Brevesmall;
    internal static string Bsmall;
    internal static string Btopbar;
    internal static string C;
    internal static string Caarmenian;
    internal static string Cacute;
    internal static string Caron;
    internal static string Caronsmall;
    internal static string Ccaron;
    internal static string Ccedilla;
    internal static string Ccedillaacute;
    internal static string Ccedillasmall;
    internal static string Ccircle;
    internal static string Ccircumflex;
    internal static string Cdot;
    internal static string Cdotaccent;
    internal static string Cedillasmall;
    internal static string Chaarmenian;
    internal static string Cheabkhasiancyrillic;
    internal static string Checyrillic;
    internal static string Chedescenderabkhasiancyrillic;
    internal static string Chedescendercyrillic;
    internal static string Chedieresiscyrillic;
    internal static string Cheharmenian;
    internal static string Chekhakassiancyrillic;
    internal static string Cheverticalstrokecyrillic;
    internal static string Chi;
    internal static string Chook;
    internal static string Circumflexsmall;
    internal static string Cmonospace;
    internal static string Coarmenian;
    internal static string Csmall;
    internal static string D;
    internal static string DZ;
    internal static string DZcaron;
    internal static string Daarmenian;
    internal static string Dafrican;
    internal static string Dcaron;
    internal static string Dcedilla;
    internal static string Dcircle;
    internal static string Dcircumflexbelow;
    internal static string Dcroat;
    internal static string Ddotaccent;
    internal static string Ddotbelow;
    internal static string Decyrillic;
    internal static string Deicoptic;
    internal static string Delta;
    internal static string Deltagreek;
    internal static string Dhook;
    internal static string Dieresis;
    internal static string DieresisAcute;
    internal static string DieresisGrave;
    internal static string Dieresissmall;
    internal static string Digammagreek;
    internal static string Djecyrillic;
    internal static string Dlinebelow;
    internal static string Dmonospace;
    internal static string Dotaccentsmall;
    internal static string Dslash;
    internal static string Dsmall;
    internal static string Dtopbar;
    internal static string Dz;
    internal static string Dzcaron;
    internal static string Dzeabkhasiancyrillic;
    internal static string Dzecyrillic;
    internal static string Dzhecyrillic;
    internal static string E;
    internal static string Eacute;
    internal static string Eacutesmall;
    internal static string Ebreve;
    internal static string Ecaron;
    internal static string Ecedillabreve;
    internal static string Echarmenian;
    internal static string Ecircle;
    internal static string Ecircumflex;
    internal static string Ecircumflexacute;
    internal static string Ecircumflexbelow;
    internal static string Ecircumflexdotbelow;
    internal static string Ecircumflexgrave;
    internal static string Ecircumflexhookabove;
    internal static string Ecircumflexsmall;
    internal static string Ecircumflextilde;
    internal static string Ecyrillic;
    internal static string Edblgrave;
    internal static string Edieresis;
    internal static string Edieresissmall;
    internal static string Edot;
    internal static string Edotaccent;
    internal static string Edotbelow;
    internal static string Efcyrillic;
    internal static string Egrave;
    internal static string Egravesmall;
    internal static string Eharmenian;
    internal static string Ehookabove;
    internal static string Eightroman;
    internal static string Einvertedbreve;
    internal static string Eiotifiedcyrillic;
    internal static string Elcyrillic;
    internal static string Elevenroman;
    internal static string Emacron;
    internal static string Emacronacute;
    internal static string Emacrongrave;
    internal static string Emcyrillic;
    internal static string Emonospace;
    internal static string Encyrillic;
    internal static string Endescendercyrillic;
    internal static string Eng;
    internal static string Enghecyrillic;
    internal static string Enhookcyrillic;
    internal static string Eogonek;
    internal static string Eopen;
    internal static string Epsilon;
    internal static string Epsilontonos;
    internal static string Ercyrillic;
    internal static string Ereversed;
    internal static string Ereversedcyrillic;
    internal static string Escyrillic;
    internal static string Esdescendercyrillic;
    internal static string Esh;
    internal static string Esmall;
    internal static string Eta;
    internal static string Etarmenian;
    internal static string Etatonos;
    internal static string Eth;
    internal static string Ethsmall;
    internal static string Etilde;
    internal static string Etildebelow;
    internal static string Euro;
    internal static string Ezh;
    internal static string Ezhcaron;
    internal static string Ezhreversed;
    internal static string F;
    internal static string Fcircle;
    internal static string Fdotaccent;
    internal static string Feharmenian;
    internal static string Feicoptic;
    internal static string Fhook;
    internal static string Fitacyrillic;
    internal static string Fmonospace;
    internal static string Fourroman;
    internal static string Fsmall;
    internal static string G;
    internal static string GBsquare;
    internal static string Gamma;
    internal static string Gammaafrican;
    internal static string Gangiacoptic;
    internal static string Gbreve;
    internal static string Gacute;
    internal static string Gcaron;
    internal static string Gcedilla;
    internal static string Gcircle;
    internal static string Gcircumflex;
    internal static string Gcommaaccent;
    internal static string Gdot;
    internal static string Gdotaccent;
    internal static string Gecyrillic;
    internal static string Ghadarmenian;
    internal static string Ghemiddlehookcyrillic;
    internal static string Ghestrokecyrillic;
    internal static string Gheupturncyrillic;
    internal static string Ghook;
    internal static string Gimarmenian;
    internal static string Gjecyrillic;
    internal static string Gmacron;
    internal static string Gmonospace;
    internal static string Grave;
    internal static string Gravesmall;
    internal static string Gsmall;
    internal static string Gsmallhook;
    internal static string Gstroke;
    internal static string H;
    internal static string H18533;
    internal static string H18543;
    internal static string H18551;
    internal static string H22073;
    internal static string HPsquare;
    internal static string Hadescendercyrillic;
    internal static string Hardsigncyrillic;
    internal static string Hbar;
    internal static string Hbrevebelow;
    internal static string Hcedilla;
    internal static string Hcircle;
    internal static string Hcircumflex;
    internal static string Hdieresis;
    internal static string Hdotaccent;
    internal static string Hdotbelow;
    internal static string Hmonospace;
    internal static string Hoarmenian;
    internal static string Horicoptic;
    internal static string Hsmall;
    internal static string Hungarumlaut;
    internal static string Hungarumlautsmall;
    internal static string Hzsquare;
    internal static string I;
    internal static string IJ;
    internal static string IUcyrillic;
    internal static string Iacute;
    internal static string Iacutesmall;
    internal static string IAcyrillic;
    internal static string Ibreve;
    internal static string Icaron;
    internal static string Icircle;
    internal static string Icircumflex;
    internal static string Icircumflexsmall;
    internal static string Icyrillic;
    internal static string Idblgrave;
    internal static string Idieresis;
    internal static string Idieresisacute;
    internal static string Idieresiscyrillic;
    internal static string Idieresissmall;
    internal static string Idot;
    internal static string Idotaccent;
    internal static string Idotbelow;
    internal static string Iebrevecyrillic;
    internal static string Iecyrillic;
    internal static string Ifraktur;
    internal static string Igrave;
    internal static string Igravesmall;
    internal static string Ihookabove;
    internal static string Iicyrillic;
    internal static string Iinvertedbreve;
    internal static string Imacron;
    internal static string Imacroncyrillic;
    internal static string Imonospace;
    internal static string Iniarmenian;
    internal static string Iocyrillic;
    internal static string Iogonek;
    internal static string Iota;
    internal static string Iotaafrican;
    internal static string Iotadieresis;
    internal static string Iotatonos;
    internal static string Ismall;
    internal static string Istroke;
    internal static string Itilde;
    internal static string Itildebelow;
    internal static string Izhitsacyrillic;
    internal static string Izhitsadblgravecyrillic;
    internal static string J;
    internal static string Jaarmenian;
    internal static string Jcircle;
    internal static string Jcircumflex;
    internal static string Jecyrillic;
    internal static string Jheharmenian;
    internal static string Jmonospace;
    internal static string Jsmall;
    internal static string K;
    internal static string KBsquare;
    internal static string KKsquare;
    internal static string Kabashkircyrillic;
    internal static string Kacute;
    internal static string Kacyrillic;
    internal static string Kadescendercyrillic;
    internal static string Kahookcyrillic;
    internal static string Kappa;
    internal static string Kastrokecyrillic;
    internal static string Kaverticalstrokecyrillic;
    internal static string Kcaron;
    internal static string Kcedilla;
    internal static string Kcircle;
    internal static string Kcommaaccent;
    internal static string Kdotbelow;
    internal static string Keharmenian;
    internal static string Khacyrillic;
    internal static string Kheicoptic;
    internal static string Khook;
    internal static string Kjecyrillic;
    internal static string Klinebelow;
    internal static string Kmonospace;
    internal static string Koppacyrillic;
    internal static string Koppagreek;
    internal static string Ksicyrillic;
    internal static string Ksmall;
    internal static string L;
    internal static string LJ;
    internal static string LL;
    internal static string Lacute;
    internal static string Lambda;
    internal static string Lcaron;
    internal static string Lcedilla;
    internal static string Lcircle;
    internal static string Lcircumflexbelow;
    internal static string Lcommaaccent;
    internal static string Ldot;
    internal static string Ldotaccent;
    internal static string Ldotbelow;
    internal static string Ldotbelowmacron;
    internal static string Light;
    internal static string Liwnarmenian;
    internal static string Lj;
    internal static string Ljecyrillic;
    internal static string Llinebelow;
    internal static string Lslash;
    internal static string Lslashsmall;
    internal static string Lsmall;
    internal static string M;
    internal static string MBsquare;
    internal static string Macron;
    internal static string Macronsmall;
    internal static string Macute;
    internal static string Mcircle;
    internal static string Mdotaccent;
    internal static string Mdotbelow;
    internal static string Medium;
    internal static string Menarmenian;
    internal static string Mmonospace;
    internal static string Msmall;
    internal static string Mturned;
    internal static string Mu;
    internal static string N;
    internal static string NJ;
    internal static string Nacute;
    internal static string Ncaron;
    internal static string Ncedilla;
    internal static string Ncircle;
    internal static string Ncircumflexbelow;
    internal static string Ncommaaccent;
    internal static string Ndotaccent;
    internal static string Ndotbelow;
    internal static string Nhookleft;
    internal static string Nineroman;
    internal static string Nj;
    internal static string Njecyrillic;
    internal static string Nlinebelow;
    internal static string Nmonospace;
    internal static string Nowarmenian;
    internal static string Nsmall;
    internal static string Ntilde;
    internal static string Ntildesmall;
    internal static string Nu;
    internal static string Null;
    internal static string O;
    internal static string OE;
    internal static string OEsmall;
    internal static string Oacute;
    internal static string Oacutesmall;
    internal static string Obarredcyrillic;
    internal static string Obarreddieresiscyrillic;
    internal static string Obreve;
    internal static string Ocaron;
    internal static string Ocenteredtilde;
    internal static string Ocircle;
    internal static string Ocircumflex;
    internal static string Ocircumflexacute;
    internal static string Ocircumflexdotbelow;
    internal static string Ocircumflexgrave;
    internal static string Ocircumflexhookabove;
    internal static string Ocircumflexsmall;
    internal static string Ocircumflextilde;
    internal static string Ocyrillic;
    internal static string Odblacute;
    internal static string Odblgrave;
    internal static string Odieresis;
    internal static string Odieresiscyrillic;
    internal static string Odieresissmall;
    internal static string Odotbelow;
    internal static string Ogoneksmall;
    internal static string Ograve;
    internal static string Ogravesmall;
    internal static string Oharmenian;
    internal static string Ohm;
    internal static string Ohookabove;
    internal static string Ohorn;
    internal static string Ohornacute;
    internal static string Ohorndotbelow;
    internal static string Ohorngrave;
    internal static string Ohornhookabove;
    internal static string Ohorntilde;
    internal static string Ohungarumlaut;
    internal static string Oi;
    internal static string Oinvertedbreve;
    internal static string Omacron;
    internal static string Omacronacute;
    internal static string Omacrongrave;
    internal static string Omega;
    internal static string Omegacyrillic;
    internal static string Omegagreek;
    internal static string Omegaroundcyrillic;
    internal static string Omegatitlocyrillic;
    internal static string Omegatonos;
    internal static string Omicron;
    internal static string Omicrontonos;
    internal static string Omonospace;
    internal static string Oneroman;
    internal static string Oogonek;
    internal static string Oogonekmacron;
    internal static string Oopen;
    internal static string Oslash;
    internal static string Oslashacute;
    internal static string Oslashsmall;
    internal static string Osmall;
    internal static string Ostrokeacute;
    internal static string Otcyrillic;
    internal static string Otilde;
    internal static string Otildeacute;
    internal static string Otildedieresis;
    internal static string Otildesmall;
    internal static string P;
    internal static string Pacute;
    internal static string Pcircle;
    internal static string Pdotaccent;
    internal static string Pecyrillic;
    internal static string Peharmenian;
    internal static string Pemiddlehookcyrillic;
    internal static string Phi;
    internal static string Phook;
    internal static string Pi;
    internal static string Piwrarmenian;
    internal static string Pmonospace;
    internal static string Psi;
    internal static string Psicyrillic;
    internal static string Psmall;
    internal static string Q;
    internal static string Qcircle;
    internal static string Qmonospace;
    internal static string Qsmall;
    internal static string R;
    internal static string Raarmenian;
    internal static string Racute;
    internal static string Rcaron;
    internal static string Rcedilla;
    internal static string Rcircle;
    internal static string Rcommaaccent;
    internal static string Rdblgrave;
    internal static string Rdotaccent;
    internal static string Rdotbelow;
    internal static string Rdotbelowmacron;
    internal static string Regular;
    internal static string Reharmenian;
    internal static string Rfraktur;
    internal static string Rho;
    internal static string Ringsmall;
    internal static string Rinvertedbreve;
    internal static string Rlinebelow;
    internal static string Rmonospace;
    internal static string Roman;
    internal static string Rsmall;
    internal static string Rsmallinverted;
    internal static string Rsmallinvertedsuperior;
    internal static string S;
    internal static string SF010000;
    internal static string SF020000;
    internal static string SF030000;
    internal static string SF040000;
    internal static string SF050000;
    internal static string SF060000;
    internal static string SF070000;
    internal static string SF080000;
    internal static string SF090000;
    internal static string SF100000;
    internal static string SF110000;
    internal static string SF190000;
    internal static string SF200000;
    internal static string SF210000;
    internal static string SF220000;
    internal static string SF230000;
    internal static string SF240000;
    internal static string SF250000;
    internal static string SF260000;
    internal static string SF270000;
    internal static string SF280000;
    internal static string SF360000;
    internal static string SF370000;
    internal static string SF380000;
    internal static string SF390000;
    internal static string SF400000;
    internal static string SF410000;
    internal static string SF420000;
    internal static string SF430000;
    internal static string SF440000;
    internal static string SF450000;
    internal static string SF460000;
    internal static string SF470000;
    internal static string SF480000;
    internal static string SF490000;
    internal static string SF500000;
    internal static string SF510000;
    internal static string SF520000;
    internal static string SF530000;
    internal static string SF540000;
    internal static string Sacute;
    internal static string Sacutedotaccent;
    internal static string Sampigreek;
    internal static string Scaron;
    internal static string Scarondotaccent;
    internal static string Scaronsmall;
    internal static string Scedilla;
    internal static string Schwa;
    internal static string Schwacyrillic;
    internal static string Schwadieresiscyrillic;
    internal static string Scircle;
    internal static string Scircumflex;
    internal static string Scommaaccent;
    internal static string Sdotaccent;
    internal static string Sdotbelow;
    internal static string Sdotbelowdotaccent;
    internal static string Seharmenian;
    internal static string Semibold;
    internal static string Sevenroman;
    internal static string Shaarmenian;
    internal static string Shacyrillic;
    internal static string Shchacyrillic;
    internal static string Sheicoptic;
    internal static string Shhacyrillic;
    internal static string Shimacoptic;
    internal static string Sigma;
    internal static string Sixroman;
    internal static string Smonospace;
    internal static string Softsigncyrillic;
    internal static string Ssmall;
    internal static string Stigmagreek;
    internal static string T;
    internal static string Tau;
    internal static string Tbar;
    internal static string Tcaron;
    internal static string Tcedilla;
    internal static string Tcircle;
    internal static string Tcircumflexbelow;
    internal static string Tcommaaccent;
    internal static string Tdotaccent;
    internal static string Tdotbelow;
    internal static string Tecyrillic;
    internal static string Tedescendercyrillic;
    internal static string Tenroman;
    internal static string Tetsecyrillic;
    internal static string Theta;
    internal static string Thook;
    internal static string Thorn;
    internal static string Thornsmall;
    internal static string Threeroman;
    internal static string Tildesmall;
    internal static string Tiwnarmenian;
    internal static string Tlinebelow;
    internal static string Tmonospace;
    internal static string Toarmenian;
    internal static string Tonefive;
    internal static string Tonesix;
    internal static string Tonetwo;
    internal static string Tretroflexhook;
    internal static string Tsecyrillic;
    internal static string Tshecyrillic;
    internal static string Tsmall;
    internal static string Twelveroman;
    internal static string Tworoman;
    internal static string U;
    internal static string Uacute;
    internal static string Uacutesmall;
    internal static string Ubreve;
    internal static string Ucaron;
    internal static string Ucircle;
    internal static string Ucircumflex;
    internal static string Ucircumflexbelow;
    internal static string Ucircumflexsmall;
    internal static string Ucyrillic;
    internal static string Udblacute;
    internal static string Udblgrave;
    internal static string Udieresis;
    internal static string Udieresisacute;
    internal static string Udieresisbelow;
    internal static string Udieresiscaron;
    internal static string Udieresiscyrillic;
    internal static string Udieresisgrave;
    internal static string Udieresismacron;
    internal static string Udieresissmall;
    internal static string Udotbelow;
    internal static string Ugrave;
    internal static string Ugravesmall;
    internal static string Uhookabove;
    internal static string Uhorn;
    internal static string Uhornacute;
    internal static string Uhorndotbelow;
    internal static string Uhorngrave;
    internal static string Uhornhookabove;
    internal static string Uhorntilde;
    internal static string Uhungarumlaut;
    internal static string Uhungarumlautcyrillic;
    internal static string Uinvertedbreve;
    internal static string Ukcyrillic;
    internal static string Umacron;
    internal static string Umacroncyrillic;
    internal static string Umacrondieresis;
    internal static string Umonospace;
    internal static string Uogonek;
    internal static string Upsilon;
    internal static string Upsilon1;
    internal static string Upsilonacutehooksymbolgreek;
    internal static string Upsilonafrican;
    internal static string Upsilondieresis;
    internal static string Upsilondieresishooksymbolgreek;
    internal static string Upsilonhooksymbol;
    internal static string Upsilontonos;
    internal static string Uring;
    internal static string Ushortcyrillic;
    internal static string Usmall;
    internal static string Ustraightcyrillic;
    internal static string Ustraightstrokecyrillic;
    internal static string Utilde;
    internal static string Utildeacute;
    internal static string Utildebelow;
    internal static string V;
    internal static string Vcircle;
    internal static string Vdotbelow;
    internal static string Vecyrillic;
    internal static string Vewarmenian;
    internal static string Vhook;
    internal static string Vmonospace;
    internal static string Voarmenian;
    internal static string Vsmall;
    internal static string Vtilde;
    internal static string W;
    internal static string Wacute;
    internal static string Wcircle;
    internal static string Wcircumflex;
    internal static string Wdieresis;
    internal static string Wdotaccent;
    internal static string Wdotbelow;
    internal static string Wgrave;
    internal static string Wmonospace;
    internal static string Wsmall;
    internal static string X;
    internal static string Xcircle;
    internal static string Xdieresis;
    internal static string Xdotaccent;
    internal static string Xeharmenian;
    internal static string Xi;
    internal static string Xmonospace;
    internal static string Xsmall;
    internal static string Y;
    internal static string Yacute;
    internal static string Yacutesmall;
    internal static string Yatcyrillic;
    internal static string Ycircle;
    internal static string Ycircumflex;
    internal static string Ydieresis;
    internal static string Ydieresissmall;
    internal static string Ydotaccent;
    internal static string Ydotbelow;
    internal static string Yericyrillic;
    internal static string Yerudieresiscyrillic;
    internal static string Ygrave;
    internal static string Yhook;
    internal static string Yhookabove;
    internal static string Yiarmenian;
    internal static string Yicyrillic;
    internal static string Yiwnarmenian;
    internal static string Ymonospace;
    internal static string Ysmall;
    internal static string Ytilde;
    internal static string Yusbigcyrillic;
    internal static string Yusbigiotifiedcyrillic;
    internal static string Yuslittlecyrillic;
    internal static string Yuslittleiotifiedcyrillic;
    internal static string Z;
    internal static string Zaarmenian;
    internal static string Zacute;
    internal static string Zcaron;
    internal static string Zcaronsmall;
    internal static string Zcircle;
    internal static string Zcircumflex;
    internal static string Zdot;
    internal static string Zdotaccent;
    internal static string Zdotbelow;
    internal static string Zecyrillic;
    internal static string Zedescendercyrillic;
    internal static string Zedieresiscyrillic;
    internal static string Zeta;
    internal static string Zhearmenian;
    internal static string Zhebrevecyrillic;
    internal static string Zhecyrillic;
    internal static string Zhedescendercyrillic;
    internal static string Zhedieresiscyrillic;
    internal static string Zlinebelow;
    internal static string Zmonospace;
    internal static string Zsmall;
    internal static string Zstroke;
    internal static string a;
    internal static string a1;
    internal static string a10;
    internal static string a100;
    internal static string a101;
    internal static string a102;
    internal static string a103;
    internal static string a104;
    internal static string a105;
    internal static string a106;
    internal static string a107;
    internal static string a108;
    internal static string a109;
    internal static string a11;
    internal static string a110;
    internal static string a111;
    internal static string a112;
    internal static string a117;
    internal static string a118;
    internal static string a119;
    internal static string a12;
    internal static string a120;
    internal static string a121;
    internal static string a122;
    internal static string a123;
    internal static string a124;
    internal static string a125;
    internal static string a126;
    internal static string a127;
    internal static string a128;
    internal static string a129;
    internal static string a13;
    internal static string a130;
    internal static string a131;
    internal static string a132;
    internal static string a133;
    internal static string a134;
    internal static string a135;
    internal static string a136;
    internal static string a137;
    internal static string a138;
    internal static string a139;
    internal static string a14;
    internal static string a140;
    internal static string a141;
    internal static string a142;
    internal static string a143;
    internal static string a144;
    internal static string a145;
    internal static string a146;
    internal static string a147;
    internal static string a148;
    internal static string a149;
    internal static string a15;
    internal static string a150;
    internal static string a151;
    internal static string a152;
    internal static string a153;
    internal static string a154;
    internal static string a155;
    internal static string a156;
    internal static string a157;
    internal static string a158;
    internal static string a159;
    internal static string a16;
    internal static string a160;
    internal static string a161;
    internal static string a162;
    internal static string a163;
    internal static string a164;
    internal static string a165;
    internal static string a166;
    internal static string a167;
    internal static string a168;
    internal static string a169;
    internal static string a17;
    internal static string a170;
    internal static string a171;
    internal static string a172;
    internal static string a173;
    internal static string a174;
    internal static string a175;
    internal static string a176;
    internal static string a177;
    internal static string a178;
    internal static string a179;
    internal static string a18;
    internal static string a180;
    internal static string a181;
    internal static string a182;
    internal static string a183;
    internal static string a184;
    internal static string a185;
    internal static string a186;
    internal static string a187;
    internal static string a188;
    internal static string a189;
    internal static string a19;
    internal static string a190;
    internal static string a191;
    internal static string a192;
    internal static string a193;
    internal static string a194;
    internal static string a195;
    internal static string a196;
    internal static string a197;
    internal static string a198;
    internal static string a199;
    internal static string a2;
    internal static string a20;
    internal static string a200;
    internal static string a201;
    internal static string a202;
    internal static string a203;
    internal static string a204;
    internal static string a205;
    internal static string a206;
    internal static string a21;
    internal static string a22;
    internal static string a23;
    internal static string a24;
    internal static string a25;
    internal static string a26;
    internal static string a27;
    internal static string a28;
    internal static string a29;
    internal static string a3;
    internal static string a30;
    internal static string a31;
    internal static string a32;
    internal static string a33;
    internal static string a34;
    internal static string a35;
    internal static string a36;
    internal static string a37;
    internal static string a38;
    internal static string a39;
    internal static string a4;
    internal static string a40;
    internal static string a41;
    internal static string a42;
    internal static string a43;
    internal static string a44;
    internal static string a45;
    internal static string a46;
    internal static string a47;
    internal static string a48;
    internal static string a49;
    internal static string a5;
    internal static string a50;
    internal static string a51;
    internal static string a52;
    internal static string a53;
    internal static string a54;
    internal static string a55;
    internal static string a56;
    internal static string a57;
    internal static string a58;
    internal static string a59;
    internal static string a6;
    internal static string a60;
    internal static string a61;
    internal static string a62;
    internal static string a63;
    internal static string a64;
    internal static string a65;
    internal static string a66;
    internal static string a67;
    internal static string a68;
    internal static string a69;
    internal static string a7;
    internal static string a70;
    internal static string a71;
    internal static string a72;
    internal static string a73;
    internal static string a74;
    internal static string a75;
    internal static string a76;
    internal static string a77;
    internal static string a78;
    internal static string a79;
    internal static string a8;
    internal static string a81;
    internal static string a82;
    internal static string a83;
    internal static string a84;
    internal static string a85;
    internal static string a86;
    internal static string a87;
    internal static string a88;
    internal static string a89;
    internal static string a9;
    internal static string a90;
    internal static string a91;
    internal static string a92;
    internal static string a93;
    internal static string a94;
    internal static string a95;
    internal static string a96;
    internal static string a97;
    internal static string a98;
    internal static string a99;
    internal static string aabengali;
    internal static string aacute;
    internal static string aadeva;
    internal static string aagujarati;
    internal static string aagurmukhi;
    internal static string aamatragurmukhi;
    internal static string aarusquare;
    internal static string aavowelsignbengali;
    internal static string aavowelsigndeva;
    internal static string aavowelsigngujarati;
    internal static string abbreviationmarkarmenian;
    internal static string abbreviationsigndeva;
    internal static string abengali;
    internal static string abopomofo;
    internal static string abreve;
    internal static string abreveacute;
    internal static string abrevecyrillic;
    internal static string abrevedotbelow;
    internal static string abrevegrave;
    internal static string abrevehookabove;
    internal static string abrevetilde;
    internal static string acaron;
    internal static string acircle;
    internal static string acircumflex;
    internal static string acircumflexacute;
    internal static string acircumflexdotbelow;
    internal static string acircumflexgrave;
    internal static string acircumflexhookabove;
    internal static string acircumflextilde;
    internal static string acute;
    internal static string acutebelowcmb;
    internal static string acutecmb;
    internal static string acutecomb;
    internal static string acutedeva;
    internal static string acutelowmod;
    internal static string acutetonecmb;
    internal static string acyrillic;
    internal static string adblgrave;
    internal static string addakgurmukhi;
    internal static string adeva;
    internal static string adieresis;
    internal static string adieresiscyrillic;
    internal static string adieresismacron;
    internal static string adotbelow;
    internal static string adotmacron;
    internal static string ae;
    internal static string aeacute;
    internal static string aekorean;
    internal static string aemacron;
    internal static string afii00208;
    internal static string afii08941;
    internal static string afii10017;
    internal static string afii10018;
    internal static string afii10019;
    internal static string afii10020;
    internal static string afii10021;
    internal static string afii10022;
    internal static string afii10023;
    internal static string afii10024;
    internal static string afii10025;
    internal static string afii10026;
    internal static string afii10027;
    internal static string afii10028;
    internal static string afii10029;
    internal static string afii10030;
    internal static string afii10031;
    internal static string afii10032;
    internal static string afii10033;
    internal static string afii10034;
    internal static string afii10035;
    internal static string afii10036;
    internal static string afii10037;
    internal static string afii10038;
    internal static string afii10039;
    internal static string afii10040;
    internal static string afii10041;
    internal static string afii10042;
    internal static string afii10043;
    internal static string afii10044;
    internal static string afii10045;
    internal static string afii10046;
    internal static string afii10047;
    internal static string afii10048;
    internal static string afii10049;
    internal static string afii10050;
    internal static string afii10051;
    internal static string afii10052;
    internal static string afii10053;
    internal static string afii10054;
    internal static string afii10055;
    internal static string afii10056;
    internal static string afii10057;
    internal static string afii10058;
    internal static string afii10059;
    internal static string afii10060;
    internal static string afii10061;
    internal static string afii10062;
    internal static string afii10063;
    internal static string afii10064;
    internal static string afii10065;
    internal static string afii10066;
    internal static string afii10067;
    internal static string afii10068;
    internal static string afii10069;
    internal static string afii10070;
    internal static string afii10071;
    internal static string afii10072;
    internal static string afii10073;
    internal static string afii10074;
    internal static string afii10075;
    internal static string afii10076;
    internal static string afii10077;
    internal static string afii10078;
    internal static string afii10079;
    internal static string afii10080;
    internal static string afii10081;
    internal static string afii10082;
    internal static string afii10083;
    internal static string afii10084;
    internal static string afii10085;
    internal static string afii10086;
    internal static string afii10087;
    internal static string afii10088;
    internal static string afii10089;
    internal static string afii10090;
    internal static string afii10091;
    internal static string afii10092;
    internal static string afii10093;
    internal static string afii10094;
    internal static string afii10095;
    internal static string afii10096;
    internal static string afii10097;
    internal static string afii10098;
    internal static string afii10099;
    internal static string afii10100;
    internal static string afii10101;
    internal static string afii10102;
    internal static string afii10103;
    internal static string afii10104;
    internal static string afii10105;
    internal static string afii10106;
    internal static string afii10107;
    internal static string afii10108;
    internal static string afii10109;
    internal static string afii10110;
    internal static string afii10145;
    internal static string afii10146;
    internal static string afii10147;
    internal static string afii10148;
    internal static string afii10192;
    internal static string afii10193;
    internal static string afii10194;
    internal static string afii10195;
    internal static string afii10196;
    internal static string afii10831;
    internal static string afii10832;
    internal static string afii10846;
    internal static string afii299;
    internal static string afii300;
    internal static string afii301;
    internal static string afii57381;
    internal static string afii57388;
    internal static string afii57392;
    internal static string afii57393;
    internal static string afii57394;
    internal static string afii57395;
    internal static string afii57396;
    internal static string afii57397;
    internal static string afii57398;
    internal static string afii57399;
    internal static string afii57400;
    internal static string afii57401;
    internal static string afii57403;
    internal static string afii57407;
    internal static string afii57409;
    internal static string afii57410;
    internal static string afii57411;
    internal static string afii57412;
    internal static string afii57413;
    internal static string afii57414;
    internal static string afii57415;
    internal static string afii57416;
    internal static string afii57417;
    internal static string afii57418;
    internal static string afii57419;
    internal static string afii57420;
    internal static string afii57421;
    internal static string afii57422;
    internal static string afii57423;
    internal static string afii57424;
    internal static string afii57425;
    internal static string afii57426;
    internal static string afii57427;
    internal static string afii57428;
    internal static string afii57429;
    internal static string afii57430;
    internal static string afii57431;
    internal static string afii57432;
    internal static string afii57433;
    internal static string afii57434;
    internal static string afii57440;
    internal static string afii57441;
    internal static string afii57442;
    internal static string afii57443;
    internal static string afii57444;
    internal static string afii57445;
    internal static string afii57446;
    internal static string afii57448;
    internal static string afii57449;
    internal static string afii57450;
    internal static string afii57451;
    internal static string afii57452;
    internal static string afii57453;
    internal static string afii57454;
    internal static string afii57455;
    internal static string afii57456;
    internal static string afii57457;
    internal static string afii57458;
    internal static string afii57470;
    internal static string afii57505;
    internal static string afii57506;
    internal static string afii57507;
    internal static string afii57508;
    internal static string afii57509;
    internal static string afii57511;
    internal static string afii57512;
    internal static string afii57513;
    internal static string afii57514;
    internal static string afii57519;
    internal static string afii57534;
    internal static string afii57636;
    internal static string afii57645;
    internal static string afii57658;
    internal static string afii57664;
    internal static string afii57665;
    internal static string afii57666;
    internal static string afii57667;
    internal static string afii57668;
    internal static string afii57669;
    internal static string afii57670;
    internal static string afii57671;
    internal static string afii57672;
    internal static string afii57673;
    internal static string afii57674;
    internal static string afii57675;
    internal static string afii57676;
    internal static string afii57677;
    internal static string afii57678;
    internal static string afii57679;
    internal static string afii57680;
    internal static string afii57681;
    internal static string afii57682;
    internal static string afii57683;
    internal static string afii57684;
    internal static string afii57685;
    internal static string afii57686;
    internal static string afii57687;
    internal static string afii57688;
    internal static string afii57689;
    internal static string afii57690;
    internal static string afii57694;
    internal static string afii57695;
    internal static string afii57700;
    internal static string afii57705;
    internal static string afii57716;
    internal static string afii57717;
    internal static string afii57718;
    internal static string afii57723;
    internal static string afii57793;
    internal static string afii57794;
    internal static string afii57795;
    internal static string afii57796;
    internal static string afii57797;
    internal static string afii57798;
    internal static string afii57799;
    internal static string afii57800;
    internal static string afii57801;
    internal static string afii57802;
    internal static string afii57803;
    internal static string afii57804;
    internal static string afii57806;
    internal static string afii57807;
    internal static string afii57839;
    internal static string afii57841;
    internal static string afii57842;
    internal static string afii57929;
    internal static string afii61248;
    internal static string afii61289;
    internal static string afii61352;
    internal static string afii61573;
    internal static string afii61574;
    internal static string afii61575;
    internal static string afii61664;
    internal static string afii63167;
    internal static string afii64937;
    internal static string agrave;
    internal static string agujarati;
    internal static string agurmukhi;
    internal static string ahiragana;
    internal static string ahookabove;
    internal static string aibengali;
    internal static string aibopomofo;
    internal static string aideva;
    internal static string aiecyrillic;
    internal static string aigujarati;
    internal static string aigurmukhi;
    internal static string aimatragurmukhi;
    internal static string ainarabic;
    internal static string ainfinalarabic;
    internal static string aininitialarabic;
    internal static string ainmedialarabic;
    internal static string ainvertedbreve;
    internal static string aivowelsignbengali;
    internal static string aivowelsigndeva;
    internal static string aivowelsigngujarati;
    internal static string akatakana;
    internal static string akatakanahalfwidth;
    internal static string akorean;
    internal static string alef;
    internal static string alefarabic;
    internal static string alefdageshhebrew;
    internal static string aleffinalarabic;
    internal static string alefhamzaabovearabic;
    internal static string alefhamzaabovefinalarabic;
    internal static string alefhamzabelowarabic;
    internal static string alefhamzabelowfinalarabic;
    internal static string alefhebrew;
    internal static string aleflamedhebrew;
    internal static string alefmaddaabovearabic;
    internal static string alefmaddaabovefinalarabic;
    internal static string alefmaksuraarabic;
    internal static string alefmaksurafinalarabic;
    internal static string alefmaksurainitialarabic;
    internal static string alefmaksuramedialarabic;
    internal static string alefpatahhebrew;
    internal static string alefqamatshebrew;
    internal static string aleph;
    internal static string allequal;
    internal static string alpha;
    internal static string alphatonos;
    internal static string amacron;
    internal static string amonospace;
    internal static string ampersand;
    internal static string ampersandmonospace;
    internal static string ampersandsmall;
    internal static string amsquare;
    internal static string anbopomofo;
    internal static string angbopomofo;
    internal static string angkhankhuthai;
    internal static string angle;
    internal static string anglebracketleft;
    internal static string anglebracketleftvertical;
    internal static string anglebracketright;
    internal static string anglebracketrightvertical;
    internal static string angleleft;
    internal static string angleright;
    internal static string angstrom;
    internal static string anoteleia;
    internal static string anudattadeva;
    internal static string anusvarabengali;
    internal static string anusvaradeva;
    internal static string anusvaragujarati;
    internal static string aogonek;
    internal static string apaatosquare;
    internal static string aparen;
    internal static string apostrophearmenian;
    internal static string apostrophemod;
    internal static string apple;
    internal static string approaches;
    internal static string approxequal;
    internal static string approxequalorimage;
    internal static string approximatelyequal;
    internal static string araeaekorean;
    internal static string araeakorean;
    internal static string arc;
    internal static string arighthalfring;
    internal static string aring;
    internal static string aringacute;
    internal static string aringbelow;
    internal static string arrowboth;
    internal static string arrowdashdown;
    internal static string arrowdashleft;
    internal static string arrowdashright;
    internal static string arrowdashup;
    internal static string arrowdblboth;
    internal static string arrowdbldown;
    internal static string arrowdblleft;
    internal static string arrowdblright;
    internal static string arrowdblup;
    internal static string arrowdown;
    internal static string arrowdownleft;
    internal static string arrowdownright;
    internal static string arrowdownwhite;
    internal static string arrowheaddownmod;
    internal static string arrowheadleftmod;
    internal static string arrowheadrightmod;
    internal static string arrowheadupmod;
    internal static string arrowhorizex;
    internal static string arrowleft;
    internal static string arrowleftdbl;
    internal static string arrowleftdblstroke;
    internal static string arrowleftoverright;
    internal static string arrowleftwhite;
    internal static string arrowright;
    internal static string arrowrightdblstroke;
    internal static string arrowrightheavy;
    internal static string arrowrightoverleft;
    internal static string arrowrightwhite;
    internal static string arrowtableft;
    internal static string arrowtabright;
    internal static string arrowup;
    internal static string arrowupdn;
    internal static string arrowupdnbse;
    internal static string arrowupdownbase;
    internal static string arrowupleft;
    internal static string arrowupleftofdown;
    internal static string arrowupright;
    internal static string arrowupwhite;
    internal static string arrowvertex;
    internal static string asciicircum;
    internal static string asciicircummonospace;
    internal static string asciitilde;
    internal static string asciitildemonospace;
    internal static string ascript;
    internal static string ascriptturned;
    internal static string asmallhiragana;
    internal static string asmallkatakana;
    internal static string asmallkatakanahalfwidth;
    internal static string asterisk;
    internal static string asteriskaltonearabic;
    internal static string asteriskarabic;
    internal static string asteriskmath;
    internal static string asteriskmonospace;
    internal static string asterisksmall;
    internal static string asterism;
    internal static string asuperior;
    internal static string asymptoticallyequal;
    internal static string at;
    internal static string atilde;
    internal static string atmonospace;
    internal static string atsmall;
    internal static string aturned;
    internal static string aubengali;
    internal static string aubopomofo;
    internal static string audeva;
    internal static string augujarati;
    internal static string augurmukhi;
    internal static string aulengthmarkbengali;
    internal static string aumatragurmukhi;
    internal static string auvowelsignbengali;
    internal static string auvowelsigndeva;
    internal static string auvowelsigngujarati;
    internal static string avagrahadeva;
    internal static string aybarmenian;
    internal static string ayin;
    internal static string ayinaltonehebrew;
    internal static string ayinhebrew;
    internal static string b;
    internal static string babengali;
    internal static string backslash;
    internal static string backslashmonospace;
    internal static string badeva;
    internal static string bagujarati;
    internal static string bagurmukhi;
    internal static string bahiragana;
    internal static string bahtthai;
    internal static string bakatakana;
    internal static string bar;
    internal static string barmonospace;
    internal static string bbopomofo;
    internal static string bcircle;
    internal static string bdotaccent;
    internal static string bdotbelow;
    internal static string beamedsixteenthnotes;
    internal static string because;
    internal static string becyrillic;
    internal static string beharabic;
    internal static string behfinalarabic;
    internal static string behinitialarabic;
    internal static string behiragana;
    internal static string behmedialarabic;
    internal static string behmeeminitialarabic;
    internal static string behmeemisolatedarabic;
    internal static string behnoonfinalarabic;
    internal static string bekatakana;
    internal static string benarmenian;
    internal static string bet;
    internal static string beta;
    internal static string betasymbolgreek;
    internal static string betdagesh;
    internal static string betdageshhebrew;
    internal static string bethebrew;
    internal static string betrafehebrew;
    internal static string bhabengali;
    internal static string bhadeva;
    internal static string bhagujarati;
    internal static string bhagurmukhi;
    internal static string bhook;
    internal static string bihiragana;
    internal static string bikatakana;
    internal static string bilabialclick;
    internal static string bindigurmukhi;
    internal static string birusquare;
    internal static string blackcircle;
    internal static string blackdiamond;
    internal static string blackdownpointingtriangle;
    internal static string blackleftpointingpointer;
    internal static string blackleftpointingtriangle;
    internal static string blacklenticularbracketleft;
    internal static string blacklenticularbracketleftvertical;
    internal static string blacklenticularbracketright;
    internal static string blacklenticularbracketrightvertical;
    internal static string blacklowerlefttriangle;
    internal static string blacklowerrighttriangle;
    internal static string blackrectangle;
    internal static string blackrightpointingpointer;
    internal static string blackrightpointingtriangle;
    internal static string blacksmallsquare;
    internal static string blacksmilingface;
    internal static string blacksquare;
    internal static string blackstar;
    internal static string blackupperlefttriangle;
    internal static string blackupperrighttriangle;
    internal static string blackuppointingsmalltriangle;
    internal static string blackuppointingtriangle;
    internal static string blank;
    internal static string blinebelow;
    internal static string block;
    internal static string bmonospace;
    internal static string bobaimaithai;
    internal static string bohiragana;
    internal static string bokatakana;
    internal static string bparen;
    internal static string bqsquare;
    internal static string braceex;
    internal static string braceleft;
    internal static string braceleftbt;
    internal static string braceleftmid;
    internal static string braceleftmonospace;
    internal static string braceleftsmall;
    internal static string bracelefttp;
    internal static string braceleftvertical;
    internal static string braceright;
    internal static string bracerightbt;
    internal static string bracerightmid;
    internal static string bracerightmonospace;
    internal static string bracerightsmall;
    internal static string bracerighttp;
    internal static string bracerightvertical;
    internal static string bracketleft;
    internal static string bracketleftbt;
    internal static string bracketleftex;
    internal static string bracketleftmonospace;
    internal static string bracketlefttp;
    internal static string bracketright;
    internal static string bracketrightbt;
    internal static string bracketrightex;
    internal static string bracketrightmonospace;
    internal static string bracketrighttp;
    internal static string breve;
    internal static string brevebelowcmb;
    internal static string brevecmb;
    internal static string breveinvertedbelowcmb;
    internal static string breveinvertedcmb;
    internal static string breveinverteddoublecmb;
    internal static string bridgebelowcmb;
    internal static string bridgeinvertedbelowcmb;
    internal static string brokenbar;
    internal static string bstroke;
    internal static string bsuperior;
    internal static string btopbar;
    internal static string buhiragana;
    internal static string bukatakana;
    internal static string bullet;
    internal static string bulletinverse;
    internal static string bulletoperator;
    internal static string bullseye;
    internal static string c;
    internal static string caarmenian;
    internal static string cabengali;
    internal static string cacute;
    internal static string cadeva;
    internal static string cagujarati;
    internal static string cagurmukhi;
    internal static string calsquare;
    internal static string candrabindubengali;
    internal static string candrabinducmb;
    internal static string candrabindudeva;
    internal static string candrabindugujarati;
    internal static string capslock;
    internal static string careof;
    internal static string caron;
    internal static string caronbelowcmb;
    internal static string caroncmb;
    internal static string carriagereturn;
    internal static string cbopomofo;
    internal static string ccaron;
    internal static string ccedilla;
    internal static string ccedillaacute;
    internal static string ccircle;
    internal static string ccircumflex;
    internal static string ccurl;
    internal static string cdot;
    internal static string cdotaccent;
    internal static string cdsquare;
    internal static string cedilla;
    internal static string cedillacmb;
    internal static string cent;
    internal static string centigrade;
    internal static string centinferior;
    internal static string centmonospace;
    internal static string centoldstyle;
    internal static string centsuperior;
    internal static string chaarmenian;
    internal static string chabengali;
    internal static string chadeva;
    internal static string chagujarati;
    internal static string chagurmukhi;
    internal static string chbopomofo;
    internal static string cheabkhasiancyrillic;
    internal static string checkmark;
    internal static string checyrillic;
    internal static string chedescenderabkhasiancyrillic;
    internal static string chedescendercyrillic;
    internal static string chedieresiscyrillic;
    internal static string cheharmenian;
    internal static string chekhakassiancyrillic;
    internal static string cheverticalstrokecyrillic;
    internal static string chi;
    internal static string chieuchacirclekorean;
    internal static string chieuchaparenkorean;
    internal static string chieuchcirclekorean;
    internal static string chieuchkorean;
    internal static string chieuchparenkorean;
    internal static string chochangthai;
    internal static string chochanthai;
    internal static string chochingthai;
    internal static string chochoethai;
    internal static string chook;
    internal static string cieucacirclekorean;
    internal static string cieucaparenkorean;
    internal static string cieuccirclekorean;
    internal static string cieuckorean;
    internal static string cieucparenkorean;
    internal static string cieucuparenkorean;
    internal static string circle;
    internal static string circlemultiply;
    internal static string circleot;
    internal static string circleplus;
    internal static string circlepostalmark;
    internal static string circlewithlefthalfblack;
    internal static string circlewithrighthalfblack;
    internal static string circumflex;
    internal static string circumflexbelowcmb;
    internal static string circumflexcmb;
    internal static string clear;
    internal static string clickalveolar;
    internal static string clickdental;
    internal static string clicklateral;
    internal static string clickretroflex;
    internal static string club;
    internal static string clubsuitblack;
    internal static string clubsuitwhite;
    internal static string cmcubedsquare;
    internal static string cmonospace;
    internal static string cmsquaredsquare;
    internal static string coarmenian;
    internal static string colon;
    internal static string colonmonetary;
    internal static string colonmonospace;
    internal static string colonsign;
    internal static string colonsmall;
    internal static string colontriangularhalfmod;
    internal static string colontriangularmod;
    internal static string comma;
    internal static string commaabovecmb;
    internal static string commaaboverightcmb;
    internal static string commaaccent;
    internal static string commaarabic;
    internal static string commaarmenian;
    internal static string commainferior;
    internal static string commamonospace;
    internal static string commareversedabovecmb;
    internal static string commareversedmod;
    internal static string commasmall;
    internal static string commasuperior;
    internal static string commaturnedabovecmb;
    internal static string commaturnedmod;
    internal static string compass;
    internal static string congruent;
    internal static string contourintegral;
    internal static string control;
    internal static string controlACK;
    internal static string controlBEL;
    internal static string controlBS;
    internal static string controlCAN;
    internal static string controlCR;
    internal static string controlDC1;
    internal static string controlDC2;
    internal static string controlDC3;
    internal static string controlDC4;
    internal static string controlDEL;
    internal static string controlDLE;
    internal static string controlEM;
    internal static string controlENQ;
    internal static string controlEOT;
    internal static string controlESC;
    internal static string controlETB;
    internal static string controlETX;
    internal static string controlFF;
    internal static string controlFS;
    internal static string controlGS;
    internal static string controlHT;
    internal static string controlLF;
    internal static string controlNAK;
    internal static string controlRS;
    internal static string controlSI;
    internal static string controlSO;
    internal static string controlSOT;
    internal static string controlSTX;
    internal static string controlSUB;
    internal static string controlSYN;
    internal static string controlUS;
    internal static string controlVT;
    internal static string copyright;
    internal static string copyrightsans;
    internal static string copyrightserif;
    internal static string cornerbracketleft;
    internal static string cornerbracketlefthalfwidth;
    internal static string cornerbracketleftvertical;
    internal static string cornerbracketright;
    internal static string cornerbracketrighthalfwidth;
    internal static string cornerbracketrightvertical;
    internal static string corporationsquare;
    internal static string cosquare;
    internal static string coverkgsquare;
    internal static string cparen;
    internal static string cruzeiro;
    internal static string cstretched;
    internal static string curlyand;
    internal static string curlyor;
    internal static string currency;
    internal static string cyrbreve;
    internal static string cyrBreve;
    internal static string cyrflex;
    internal static string cyrFlex;
    internal static string d;
    internal static string daarmenian;
    internal static string dabengali;
    internal static string dadarabic;
    internal static string dadeva;
    internal static string dadfinalarabic;
    internal static string dadinitialarabic;
    internal static string dadmedialarabic;
    internal static string dagesh;
    internal static string dageshhebrew;
    internal static string dagger;
    internal static string daggerdbl;
    internal static string dagujarati;
    internal static string dagurmukhi;
    internal static string dahiragana;
    internal static string dakatakana;
    internal static string dalarabic;
    internal static string dalet;
    internal static string daletdagesh;
    internal static string daletdageshhebrew;
    internal static string dalethebrew;
    internal static string dalfinalarabic;
    internal static string dammaarabic;
    internal static string dammalowarabic;
    internal static string dammatanaltonearabic;
    internal static string dammatanarabic;
    internal static string danda;
    internal static string dargahebrew;
    internal static string dargalefthebrew;
    internal static string dasiapneumatacyrilliccmb;
    internal static string dblanglebracketleft;
    internal static string dblanglebracketleftvertical;
    internal static string dblanglebracketright;
    internal static string dblanglebracketrightvertical;
    internal static string dblarchinvertedbelowcmb;
    internal static string dblarrowleft;
    internal static string dblarrowright;
    internal static string dbldanda;
    internal static string dblgrave;
    internal static string dblGrave;
    internal static string dblgravecmb;
    internal static string dblintegral;
    internal static string dbllowline;
    internal static string dbllowlinecmb;
    internal static string dbloverlinecmb;
    internal static string dblprimemod;
    internal static string dblverticalbar;
    internal static string dblverticallineabovecmb;
    internal static string dbopomofo;
    internal static string dbsquare;
    internal static string dcaron;
    internal static string dcedilla;
    internal static string dcircle;
    internal static string dcircumflexbelow;
    internal static string dcroat;
    internal static string ddabengali;
    internal static string ddadeva;
    internal static string ddagujarati;
    internal static string ddagurmukhi;
    internal static string ddalarabic;
    internal static string ddalfinalarabic;
    internal static string dddhadeva;
    internal static string ddhabengali;
    internal static string ddhadeva;
    internal static string ddhagujarati;
    internal static string ddhagurmukhi;
    internal static string ddotaccent;
    internal static string ddotbelow;
    internal static string decimalseparatorarabic;
    internal static string decimalseparatorpersian;
    internal static string decyrillic;
    internal static string degree;
    internal static string dehihebrew;
    internal static string dehiragana;
    internal static string deicoptic;
    internal static string dekatakana;
    internal static string deleteleft;
    internal static string deleteright;
    internal static string delta;
    internal static string deltaturned;
    internal static string denominatorminusonenumeratorbengali;
    internal static string dezh;
    internal static string dhabengali;
    internal static string dhadeva;
    internal static string dhagujarati;
    internal static string dhagurmukhi;
    internal static string dhook;
    internal static string dialytikatonos;
    internal static string dialytikatonoscmb;
    internal static string diamond;
    internal static string diamondsuitwhite;
    internal static string dieresis;
    internal static string dieresisacute;
    internal static string dieresisbelowcmb;
    internal static string dieresiscmb;
    internal static string dieresisgrave;
    internal static string dieresistonos;
    internal static string dihiragana;
    internal static string dikatakana;
    internal static string dittomark;
    internal static string divide;
    internal static string divides;
    internal static string divisionslash;
    internal static string djecyrillic;
    internal static string dkshade;
    internal static string dlinebelow;
    internal static string dlsquare;
    internal static string dmacron;
    internal static string dmonospace;
    internal static string dnblock;
    internal static string dochadathai;
    internal static string dodekthai;
    internal static string dohiragana;
    internal static string dokatakana;
    internal static string dollar;
    internal static string dollarinferior;
    internal static string dollarmonospace;
    internal static string dollaroldstyle;
    internal static string dollarsmall;
    internal static string dollarsuperior;
    internal static string dong;
    internal static string dorusquare;
    internal static string dotaccent;
    internal static string dotaccentcmb;
    internal static string dotbelowcmb;
    internal static string dotbelowcomb;
    internal static string dotkatakana;
    internal static string dotlessi;
    internal static string dotlessj;
    internal static string dotlessjstrokehook;
    internal static string dotmath;
    internal static string dottedcircle;
    internal static string doubleyodpatah;
    internal static string doubleyodpatahhebrew;
    internal static string downtackbelowcmb;
    internal static string downtackmod;
    internal static string dparen;
    internal static string dsuperior;
    internal static string dtail;
    internal static string dtopbar;
    internal static string duhiragana;
    internal static string dukatakana;
    internal static string dz;
    internal static string dzaltone;
    internal static string dzcaron;
    internal static string dzcurl;
    internal static string dzeabkhasiancyrillic;
    internal static string dzecyrillic;
    internal static string dzhecyrillic;
    internal static string e;
    internal static string eacute;
    internal static string earth;
    internal static string ebengali;
    internal static string ebopomofo;
    internal static string ebreve;
    internal static string ecandradeva;
    internal static string ecandragujarati;
    internal static string ecandravowelsigndeva;
    internal static string ecandravowelsigngujarati;
    internal static string ecaron;
    internal static string ecedillabreve;
    internal static string echarmenian;
    internal static string echyiwnarmenian;
    internal static string ecircle;
    internal static string ecircumflex;
    internal static string ecircumflexacute;
    internal static string ecircumflexbelow;
    internal static string ecircumflexdotbelow;
    internal static string ecircumflexgrave;
    internal static string ecircumflexhookabove;
    internal static string ecircumflextilde;
    internal static string ecyrillic;
    internal static string edblgrave;
    internal static string edeva;
    internal static string edieresis;
    internal static string edot;
    internal static string edotaccent;
    internal static string edotbelow;
    internal static string eegurmukhi;
    internal static string eematragurmukhi;
    internal static string efcyrillic;
    internal static string egrave;
    internal static string egujarati;
    internal static string eharmenian;
    internal static string ehbopomofo;
    internal static string ehiragana;
    internal static string ehookabove;
    internal static string eibopomofo;
    internal static string eight;
    internal static string eightarabic;
    internal static string eightbengali;
    internal static string eightcircle;
    internal static string eightcircleinversesansserif;
    internal static string eightdeva;
    internal static string eighteencircle;
    internal static string eighteenparen;
    internal static string eighteenperiod;
    internal static string eightgujarati;
    internal static string eightgurmukhi;
    internal static string eighthackarabic;
    internal static string eighthangzhou;
    internal static string eighthnotebeamed;
    internal static string eightideographicparen;
    internal static string eightinferior;
    internal static string eightmonospace;
    internal static string eightoldstyle;
    internal static string eightparen;
    internal static string eightperiod;
    internal static string eightpersian;
    internal static string eightroman;
    internal static string eightsuperior;
    internal static string eightthai;
    internal static string einvertedbreve;
    internal static string eiotifiedcyrillic;
    internal static string ekatakana;
    internal static string ekatakanahalfwidth;
    internal static string ekonkargurmukhi;
    internal static string ekorean;
    internal static string elcyrillic;
    internal static string element;
    internal static string elevencircle;
    internal static string elevenparen;
    internal static string elevenperiod;
    internal static string elevenroman;
    internal static string ellipsis;
    internal static string ellipsisvertical;
    internal static string emacron;
    internal static string emacronacute;
    internal static string emacrongrave;
    internal static string emcyrillic;
    internal static string emdash;
    internal static string emdashvertical;
    internal static string emonospace;
    internal static string emphasismarkarmenian;
    internal static string emptyset;
    internal static string enbopomofo;
    internal static string encyrillic;
    internal static string endash;
    internal static string endashvertical;
    internal static string endescendercyrillic;
    internal static string eng;
    internal static string engbopomofo;
    internal static string enghecyrillic;
    internal static string enhookcyrillic;
    internal static string enspace;
    internal static string eogonek;
    internal static string eokorean;
    internal static string eopen;
    internal static string eopenclosed;
    internal static string eopenreversed;
    internal static string eopenreversedclosed;
    internal static string eopenreversedhook;
    internal static string eparen;
    internal static string epsilon;
    internal static string epsilontonos;
    internal static string equal;
    internal static string equalmonospace;
    internal static string equalsmall;
    internal static string equalsuperior;
    internal static string equivalence;
    internal static string erbopomofo;
    internal static string ercyrillic;
    internal static string ereversed;
    internal static string ereversedcyrillic;
    internal static string escyrillic;
    internal static string esdescendercyrillic;
    internal static string esh;
    internal static string eshcurl;
    internal static string eshortdeva;
    internal static string eshortvowelsigndeva;
    internal static string eshreversedloop;
    internal static string eshsquatreversed;
    internal static string esmallhiragana;
    internal static string esmallkatakana;
    internal static string esmallkatakanahalfwidth;
    internal static string estimated;
    internal static string esuperior;
    internal static string eta;
    internal static string etarmenian;
    internal static string etatonos;
    internal static string eth;
    internal static string etilde;
    internal static string etildebelow;
    internal static string etnahtafoukhhebrew;
    internal static string etnahtafoukhlefthebrew;
    internal static string etnahtahebrew;
    internal static string etnahtalefthebrew;
    internal static string eturned;
    internal static string eukorean;
    internal static string euro;
    internal static string evowelsignbengali;
    internal static string evowelsigndeva;
    internal static string evowelsigngujarati;
    internal static string exclam;
    internal static string exclamarmenian;
    internal static string exclamdbl;
    internal static string exclamdown;
    internal static string exclamdownsmall;
    internal static string exclammonospace;
    internal static string exclamsmall;
    internal static string existential;
    internal static string ezh;
    internal static string ezhcaron;
    internal static string ezhcurl;
    internal static string ezhreversed;
    internal static string ezhtail;
    internal static string f;
    internal static string fadeva;
    internal static string fagurmukhi;
    internal static string fahrenheit;
    internal static string fathaarabic;
    internal static string fathalowarabic;
    internal static string fathatanarabic;
    internal static string fbopomofo;
    internal static string fcircle;
    internal static string fdotaccent;
    internal static string feharabic;
    internal static string feharmenian;
    internal static string fehfinalarabic;
    internal static string fehinitialarabic;
    internal static string fehmedialarabic;
    internal static string feicoptic;
    internal static string female;
    internal static string ff;
    internal static string ffi;
    internal static string ffl;
    internal static string fi;
    internal static string fifteencircle;
    internal static string fifteenparen;
    internal static string fifteenperiod;
    internal static string figuredash;
    internal static string filledbox;
    internal static string filledrect;
    internal static string finalkaf;
    internal static string finalkafdagesh;
    internal static string finalkafdageshhebrew;
    internal static string finalkafhebrew;
    internal static string finalmem;
    internal static string finalmemhebrew;
    internal static string finalnun;
    internal static string finalnunhebrew;
    internal static string finalpe;
    internal static string finalpehebrew;
    internal static string finaltsadi;
    internal static string finaltsadihebrew;
    internal static string firsttonechinese;
    internal static string fisheye;
    internal static string fitacyrillic;
    internal static string five;
    internal static string fivearabic;
    internal static string fivebengali;
    internal static string fivecircle;
    internal static string fivecircleinversesansserif;
    internal static string fivedeva;
    internal static string fiveeighths;
    internal static string fivegujarati;
    internal static string fivegurmukhi;
    internal static string fivehackarabic;
    internal static string fivehangzhou;
    internal static string fiveideographicparen;
    internal static string fiveinferior;
    internal static string fivemonospace;
    internal static string fiveoldstyle;
    internal static string fiveparen;
    internal static string fiveperiod;
    internal static string fivepersian;
    internal static string fiveroman;
    internal static string Fiveroman;
    internal static string fivesuperior;
    internal static string fivethai;
    internal static string fl;
    internal static string florin;
    internal static string fmonospace;
    internal static string fmsquare;
    internal static string fofanthai;
    internal static string fofathai;
    internal static string fongmanthai;
    internal static string forall;
    internal static string four;
    internal static string fourarabic;
    internal static string fourbengali;
    internal static string fourcircle;
    internal static string fourcircleinversesansserif;
    internal static string fourdeva;
    internal static string fourgujarati;
    internal static string fourgurmukhi;
    internal static string fourhackarabic;
    internal static string fourhangzhou;
    internal static string fourideographicparen;
    internal static string fourinferior;
    internal static string fourmonospace;
    internal static string fournumeratorbengali;
    internal static string fouroldstyle;
    internal static string fourparen;
    internal static string fourperiod;
    internal static string fourpersian;
    internal static string fourroman;
    internal static string foursuperior;
    internal static string fourteencircle;
    internal static string fourteenparen;
    internal static string fourteenperiod;
    internal static string fourthai;
    internal static string fourthtonechinese;
    internal static string fparen;
    internal static string fraction;
    internal static string franc;
    internal static string g;
    internal static string gabengali;
    internal static string gacute;
    internal static string gadeva;
    internal static string gafarabic;
    internal static string gaffinalarabic;
    internal static string gafinitialarabic;
    internal static string gafmedialarabic;
    internal static string gagujarati;
    internal static string gagurmukhi;
    internal static string gahiragana;
    internal static string gakatakana;
    internal static string gamma;
    internal static string gammalatinsmall;
    internal static string gammasuperior;
    internal static string gangiacoptic;
    internal static string gbopomofo;
    internal static string gbreve;
    internal static string gcaron;
    internal static string gcedilla;
    internal static string gcircle;
    internal static string gcircumflex;
    internal static string gcommaaccent;
    internal static string gdot;
    internal static string gdotaccent;
    internal static string gecyrillic;
    internal static string gehiragana;
    internal static string gekatakana;
    internal static string geometricallyequal;
    internal static string gereshaccenthebrew;
    internal static string gereshhebrew;
    internal static string gereshmuqdamhebrew;
    internal static string germandbls;
    internal static string gershayimaccenthebrew;
    internal static string gershayimhebrew;
    internal static string getamark;
    internal static string ghabengali;
    internal static string ghadarmenian;
    internal static string ghadeva;
    internal static string ghagujarati;
    internal static string ghagurmukhi;
    internal static string ghainarabic;
    internal static string ghainfinalarabic;
    internal static string ghaininitialarabic;
    internal static string ghainmedialarabic;
    internal static string ghemiddlehookcyrillic;
    internal static string ghestrokecyrillic;
    internal static string gheupturncyrillic;
    internal static string ghhadeva;
    internal static string ghhagurmukhi;
    internal static string ghook;
    internal static string ghzsquare;
    internal static string gihiragana;
    internal static string gikatakana;
    internal static string gimarmenian;
    internal static string gimel;
    internal static string gimeldagesh;
    internal static string gimeldageshhebrew;
    internal static string gimelhebrew;
    internal static string gjecyrillic;
    internal static string glottalinvertedstroke;
    internal static string glottalstop;
    internal static string glottalstopinverted;
    internal static string glottalstopmod;
    internal static string glottalstopreversed;
    internal static string glottalstopreversedmod;
    internal static string glottalstopreversedsuperior;
    internal static string glottalstopstroke;
    internal static string glottalstopstrokereversed;
    internal static string gmacron;
    internal static string gmonospace;
    internal static string gohiragana;
    internal static string gokatakana;
    internal static string gparen;
    internal static string gpasquare;
    internal static string gradient;
    internal static string grave;
    internal static string gravebelowcmb;
    internal static string gravecmb;
    internal static string gravecomb;
    internal static string gravedeva;
    internal static string gravelowmod;
    internal static string gravemonospace;
    internal static string gravetonecmb;
    internal static string greater;
    internal static string greaterequal;
    internal static string greaterequalorless;
    internal static string greatermonospace;
    internal static string greaterorequivalent;
    internal static string greaterorless;
    internal static string greateroverequal;
    internal static string greatersmall;
    internal static string gscript;
    internal static string gstroke;
    internal static string guhiragana;
    internal static string guillemotleft;
    internal static string guillemotright;
    internal static string guilsinglleft;
    internal static string guilsinglright;
    internal static string gukatakana;
    internal static string guramusquare;
    internal static string gysquare;
    internal static string h;
    internal static string haabkhasiancyrillic;
    internal static string Haabkhasiancyrillic;
    internal static string haaltonearabic;
    internal static string habengali;
    internal static string hadescendercyrillic;
    internal static string hadeva;
    internal static string hagujarati;
    internal static string hagurmukhi;
    internal static string haharabic;
    internal static string hahfinalarabic;
    internal static string hahinitialarabic;
    internal static string hahiragana;
    internal static string hahmedialarabic;
    internal static string haitusquare;
    internal static string hakatakana;
    internal static string hakatakanahalfwidth;
    internal static string halantgurmukhi;
    internal static string hamzaarabic;
    internal static string hamzalowarabic;
    internal static string hangulfiller;
    internal static string hardsigncyrillic;
    internal static string harpoonleftbarbup;
    internal static string harpoonrightbarbup;
    internal static string hasquare;
    internal static string hatafpatah;
    internal static string hatafpatah16;
    internal static string hatafpatah23;
    internal static string hatafpatah2f;
    internal static string hatafpatahhebrew;
    internal static string hatafpatahnarrowhebrew;
    internal static string hatafpatahquarterhebrew;
    internal static string hatafpatahwidehebrew;
    internal static string hatafqamats;
    internal static string hatafqamats1b;
    internal static string hatafqamats28;
    internal static string hatafqamats34;
    internal static string hatafqamatshebrew;
    internal static string hatafqamatsnarrowhebrew;
    internal static string hatafqamatsquarterhebrew;
    internal static string hatafqamatswidehebrew;
    internal static string hatafsegol;
    internal static string hatafsegol17;
    internal static string hatafsegol24;
    internal static string hatafsegol30;
    internal static string hatafsegolhebrew;
    internal static string hatafsegolnarrowhebrew;
    internal static string hatafsegolquarterhebrew;
    internal static string hatafsegolwidehebrew;
    internal static string hbar;
    internal static string hbopomofo;
    internal static string hbrevebelow;
    internal static string hcedilla;
    internal static string hcircle;
    internal static string hcircumflex;
    internal static string hdieresis;
    internal static string hdotaccent;
    internal static string hdotbelow;
    internal static string he;
    internal static string heart;
    internal static string heartsuitblack;
    internal static string heartsuitwhite;
    internal static string hedagesh;
    internal static string hedageshhebrew;
    internal static string hehaltonearabic;
    internal static string heharabic;
    internal static string hehebrew;
    internal static string hehfinalaltonearabic;
    internal static string hehfinalalttwoarabic;
    internal static string hehfinalarabic;
    internal static string hehhamzaabovefinalarabic;
    internal static string hehhamzaaboveisolatedarabic;
    internal static string hehinitialaltonearabic;
    internal static string hehinitialarabic;
    internal static string hehiragana;
    internal static string hehmedialaltonearabic;
    internal static string hehmedialarabic;
    internal static string heiseierasquare;
    internal static string hekatakana;
    internal static string hekatakanahalfwidth;
    internal static string hekutaarusquare;
    internal static string henghook;
    internal static string herutusquare;
    internal static string het;
    internal static string hethebrew;
    internal static string hhook;
    internal static string hhooksuperior;
    internal static string hieuhacirclekorean;
    internal static string hieuhaparenkorean;
    internal static string hieuhcirclekorean;
    internal static string hieuhkorean;
    internal static string hieuhparenkorean;
    internal static string hihiragana;
    internal static string hikatakana;
    internal static string hikatakanahalfwidth;
    internal static string hiriq;
    internal static string hiriq14;
    internal static string hiriq21;
    internal static string hiriq2d;
    internal static string hiriqhebrew;
    internal static string hiriqnarrowhebrew;
    internal static string hiriqquarterhebrew;
    internal static string hiriqwidehebrew;
    internal static string hlinebelow;
    internal static string hmonospace;
    internal static string hoarmenian;
    internal static string hohipthai;
    internal static string hohiragana;
    internal static string hokatakana;
    internal static string hokatakanahalfwidth;
    internal static string holam;
    internal static string holam19;
    internal static string holam26;
    internal static string holam32;
    internal static string holamhebrew;
    internal static string holamnarrowhebrew;
    internal static string holamquarterhebrew;
    internal static string holamwidehebrew;
    internal static string honokhukthai;
    internal static string hookabovecomb;
    internal static string hookcmb;
    internal static string hookpalatalizedbelowcmb;
    internal static string hookretroflexbelowcmb;
    internal static string hoonsquare;
    internal static string horicoptic;
    internal static string horizontalbar;
    internal static string horncmb;
    internal static string hotsprings;
    internal static string house;
    internal static string hparen;
    internal static string hsuperior;
    internal static string hturned;
    internal static string huhiragana;
    internal static string huiitosquare;
    internal static string hukatakana;
    internal static string hukatakanahalfwidth;
    internal static string hungarumlaut;
    internal static string hungarumlautcmb;
    internal static string hv;
    internal static string hyphen;
    internal static string hypheninferior;
    internal static string hyphenmonospace;
    internal static string hyphensmall;
    internal static string hyphensuperior;
    internal static string hyphentwo;
    internal static string i;
    internal static string iacute;
    internal static string iacyrillic;
    internal static string ibengali;
    internal static string ibopomofo;
    internal static string ibreve;
    internal static string icaron;
    internal static string icircle;
    internal static string icircumflex;
    internal static string icyrillic;
    internal static string idblgrave;
    internal static string ideographearthcircle;
    internal static string ideographfirecircle;
    internal static string ideographicallianceparen;
    internal static string ideographiccallparen;
    internal static string ideographiccentrecircle;
    internal static string ideographicclose;
    internal static string ideographiccomma;
    internal static string ideographiccommaleft;
    internal static string ideographiccongratulationparen;
    internal static string ideographiccorrectcircle;
    internal static string ideographicearthparen;
    internal static string ideographicenterpriseparen;
    internal static string ideographicexcellentcircle;
    internal static string ideographicfestivalparen;
    internal static string ideographicfinancialcircle;
    internal static string ideographicfinancialparen;
    internal static string ideographicfireparen;
    internal static string ideographichaveparen;
    internal static string ideographichighcircle;
    internal static string ideographiciterationmark;
    internal static string ideographiclaborcircle;
    internal static string ideographiclaborparen;
    internal static string ideographicleftcircle;
    internal static string ideographiclowcircle;
    internal static string ideographicmedicinecircle;
    internal static string ideographicmetalparen;
    internal static string ideographicmoonparen;
    internal static string ideographicnameparen;
    internal static string ideographicperiod;
    internal static string ideographicprintcircle;
    internal static string ideographicreachparen;
    internal static string ideographicrepresentparen;
    internal static string ideographicresourceparen;
    internal static string ideographicrightcircle;
    internal static string ideographicsecretcircle;
    internal static string ideographicselfparen;
    internal static string ideographicsocietyparen;
    internal static string ideographicspace;
    internal static string ideographicspecialparen;
    internal static string ideographicstockparen;
    internal static string ideographicstudyparen;
    internal static string ideographicsunparen;
    internal static string ideographicsuperviseparen;
    internal static string ideographicwaterparen;
    internal static string ideographicwoodparen;
    internal static string ideographiczero;
    internal static string ideographmetalcircle;
    internal static string ideographmooncircle;
    internal static string ideographnamecircle;
    internal static string ideographsuncircle;
    internal static string ideographwatercircle;
    internal static string ideographwoodcircle;
    internal static string ideva;
    internal static string idieresis;
    internal static string idieresisacute;
    internal static string idieresiscyrillic;
    internal static string idotbelow;
    internal static string iebrevecyrillic;
    internal static string iecyrillic;
    internal static string ieungacirclekorean;
    internal static string ieungaparenkorean;
    internal static string ieungcirclekorean;
    internal static string ieungkorean;
    internal static string ieungparenkorean;
    internal static string igrave;
    internal static string igujarati;
    internal static string igurmukhi;
    internal static string ihiragana;
    internal static string ihookabove;
    internal static string iibengali;
    internal static string iicyrillic;
    internal static string iideva;
    internal static string iigujarati;
    internal static string iigurmukhi;
    internal static string iimatragurmukhi;
    internal static string iinvertedbreve;
    internal static string iishortcyrillic;
    internal static string Iishortcyrillic;
    internal static string iivowelsignbengali;
    internal static string iivowelsigndeva;
    internal static string iivowelsigngujarati;
    internal static string ij;
    internal static string ikatakana;
    internal static string ikatakanahalfwidth;
    internal static string ikorean;
    internal static string ilde;
    internal static string iluyhebrew;
    internal static string imacron;
    internal static string imacroncyrillic;
    internal static string imageorapproximatelyequal;
    internal static string imatragurmukhi;
    internal static string imonospace;
    internal static string increment;
    internal static string infinity;
    internal static string iniarmenian;
    internal static string integral;
    internal static string integralbottom;
    internal static string integralbt;
    internal static string integralex;
    internal static string integraltop;
    internal static string integraltp;
    internal static string intersection;
    internal static string intisquare;
    internal static string invbullet;
    internal static string invcircle;
    internal static string invsmileface;
    internal static string iocyrillic;
    internal static string iogonek;
    internal static string iota;
    internal static string iotadieresis;
    internal static string iotadieresistonos;
    internal static string iotalatin;
    internal static string iotatonos;
    internal static string iparen;
    internal static string irigurmukhi;
    internal static string ismallhiragana;
    internal static string ismallkatakana;
    internal static string ismallkatakanahalfwidth;
    internal static string issharbengali;
    internal static string istroke;
    internal static string isuperior;
    internal static string iterationhiragana;
    internal static string iterationkatakana;
    internal static string itilde;
    internal static string itildebelow;
    internal static string iubopomofo;
    internal static string iucyrillic;
    internal static string ivowelsignbengali;
    internal static string ivowelsigndeva;
    internal static string ivowelsigngujarati;
    internal static string izhitsacyrillic;
    internal static string izhitsadblgravecyrillic;
    internal static string j;
    internal static string jaarmenian;
    internal static string jabengali;
    internal static string jadeva;
    internal static string jagujarati;
    internal static string jagurmukhi;
    internal static string jbopomofo;
    internal static string jcaron;
    internal static string jcircle;
    internal static string jcircumflex;
    internal static string jcrossedtail;
    internal static string jdotlessstroke;
    internal static string jecyrillic;
    internal static string jeemarabic;
    internal static string jeemfinalarabic;
    internal static string jeeminitialarabic;
    internal static string jeemmedialarabic;
    internal static string jeharabic;
    internal static string jehfinalarabic;
    internal static string jhabengali;
    internal static string jhadeva;
    internal static string jhagujarati;
    internal static string jhagurmukhi;
    internal static string jheharmenian;
    internal static string jis;
    internal static string jmonospace;
    internal static string jparen;
    internal static string jsuperior;
    internal static string k;
    internal static string kabashkircyrillic;
    internal static string kabengali;
    internal static string kacute;
    internal static string kacyrillic;
    internal static string kadescendercyrillic;
    internal static string kadeva;
    internal static string kaf;
    internal static string kafarabic;
    internal static string kafdagesh;
    internal static string kafdageshhebrew;
    internal static string kaffinalarabic;
    internal static string kafhebrew;
    internal static string kafinitialarabic;
    internal static string kafmedialarabic;
    internal static string kafrafehebrew;
    internal static string kagujarati;
    internal static string kagurmukhi;
    internal static string kahiragana;
    internal static string kahookcyrillic;
    internal static string kakatakana;
    internal static string kakatakanahalfwidth;
    internal static string kappa;
    internal static string kappasymbolgreek;
    internal static string kapyeounmieumkorean;
    internal static string kapyeounphieuphkorean;
    internal static string kapyeounpieupkorean;
    internal static string kapyeounssangpieupkorean;
    internal static string karoriisquare;
    internal static string kashidaautoarabic;
    internal static string kashidaautonosidebearingarabic;
    internal static string kasmallkatakana;
    internal static string kasquare;
    internal static string kasraarabic;
    internal static string kasratanarabic;
    internal static string kastrokecyrillic;
    internal static string katahiraprolongmarkhalfwidth;
    internal static string kaverticalstrokecyrillic;
    internal static string kbopomofo;
    internal static string kcalsquare;
    internal static string kcaron;
    internal static string kcedilla;
    internal static string kcircle;
    internal static string kcommaaccent;
    internal static string kdotbelow;
    internal static string keharmenian;
    internal static string kehiragana;
    internal static string kekatakana;
    internal static string kekatakanahalfwidth;
    internal static string kenarmenian;
    internal static string Kenarmenian;
    internal static string kesmallkatakana;
    internal static string kgreenlandic;
    internal static string khabengali;
    internal static string khacyrillic;
    internal static string khadeva;
    internal static string khagujarati;
    internal static string khagurmukhi;
    internal static string khaharabic;
    internal static string khahfinalarabic;
    internal static string khahinitialarabic;
    internal static string khahmedialarabic;
    internal static string kheicoptic;
    internal static string khhadeva;
    internal static string khhagurmukhi;
    internal static string khieukhacirclekorean;
    internal static string khieukhaparenkorean;
    internal static string khieukhcirclekorean;
    internal static string khieukhkorean;
    internal static string khieukhparenkorean;
    internal static string khokhaithai;
    internal static string khokhonthai;
    internal static string khokhuatthai;
    internal static string khokhwaithai;
    internal static string khomutthai;
    internal static string khook;
    internal static string khorakhangthai;
    internal static string khzsquare;
    internal static string kihiragana;
    internal static string kikatakana;
    internal static string kikatakanahalfwidth;
    internal static string kiroguramusquare;
    internal static string kiromeetorusquare;
    internal static string kirosquare;
    internal static string kiyeokacirclekorean;
    internal static string kiyeokaparenkorean;
    internal static string kiyeokcirclekorean;
    internal static string kiyeokkorean;
    internal static string kiyeokparenkorean;
    internal static string kiyeoksioskorean;
    internal static string kjecyrillic;
    internal static string klinebelow;
    internal static string klsquare;
    internal static string kmcubedsquare;
    internal static string kmonospace;
    internal static string kmsquaredsquare;
    internal static string kohiragana;
    internal static string kohmsquare;
    internal static string kokaithai;
    internal static string kokatakana;
    internal static string kokatakanahalfwidth;
    internal static string kooposquare;
    internal static string koppacyrillic;
    internal static string koreanstandardsymbol;
    internal static string koroniscmb;
    internal static string kparen;
    internal static string kpasquare;
    internal static string ksicyrillic;
    internal static string ktsquare;
    internal static string kturned;
    internal static string kuhiragana;
    internal static string kukatakana;
    internal static string kukatakanahalfwidth;
    internal static string kvsquare;
    internal static string kwsquare;
    internal static string l;
    internal static string labengali;
    internal static string lacute;
    internal static string ladeva;
    internal static string lagujarati;
    internal static string lagurmukhi;
    internal static string lakkhangyaothai;
    internal static string lamaleffinalarabic;
    internal static string lamalefhamzaabovefinalarabic;
    internal static string lamalefhamzaaboveisolatedarabic;
    internal static string lamalefhamzabelowfinalarabic;
    internal static string lamalefhamzabelowisolatedarabic;
    internal static string lamalefisolatedarabic;
    internal static string lamalefmaddaabovefinalarabic;
    internal static string lamalefmaddaaboveisolatedarabic;
    internal static string lamarabic;
    internal static string lambda;
    internal static string lambdastroke;
    internal static string lamed;
    internal static string lameddagesh;
    internal static string lameddageshhebrew;
    internal static string lamedhebrew;
    internal static string lamfinalarabic;
    internal static string lamhahinitialarabic;
    internal static string laminitialarabic;
    internal static string lamjeeminitialarabic;
    internal static string lamkhahinitialarabic;
    internal static string lamlamhehisolatedarabic;
    internal static string lammedialarabic;
    internal static string lammeemhahinitialarabic;
    internal static string lammeeminitialarabic;
    internal static string largecircle;
    internal static string lbar;
    internal static string lbelt;
    internal static string lbopomofo;
    internal static string lcaron;
    internal static string lcedilla;
    internal static string lcircle;
    internal static string lcircumflexbelow;
    internal static string lcommaaccent;
    internal static string ldot;
    internal static string ldotaccent;
    internal static string ldotbelow;
    internal static string ldotbelowmacron;
    internal static string leftangleabovecmb;
    internal static string lefttackbelowcmb;
    internal static string less;
    internal static string lessequal;
    internal static string lessequalorgreater;
    internal static string lessmonospace;
    internal static string lessorequivalent;
    internal static string lessorgreater;
    internal static string lessoverequal;
    internal static string lesssmall;
    internal static string lezh;
    internal static string lfblock;
    internal static string lhookretroflex;
    internal static string lira;
    internal static string liwnarmenian;
    internal static string lj;
    internal static string ljecyrillic;
    internal static string ll;
    internal static string lladeva;
    internal static string llagujarati;
    internal static string llinebelow;
    internal static string llladeva;
    internal static string llvocalicbengali;
    internal static string llvocalicdeva;
    internal static string llvocalicvowelsignbengali;
    internal static string llvocalicvowelsigndeva;
    internal static string lmiddletilde;
    internal static string lmonospace;
    internal static string Lmonospace;
    internal static string lmsquare;
    internal static string lochulathai;
    internal static string logicaland;
    internal static string logicalnot;
    internal static string logicalnotreversed;
    internal static string logicalor;
    internal static string lolingthai;
    internal static string longs;
    internal static string lowlinecenterline;
    internal static string lowlinecmb;
    internal static string lowlinedashed;
    internal static string lozenge;
    internal static string lparen;
    internal static string lslash;
    internal static string lsquare;
    internal static string lsuperior;
    internal static string ltshade;
    internal static string luthai;
    internal static string lvocalicbengali;
    internal static string lvocalicdeva;
    internal static string lvocalicvowelsignbengali;
    internal static string lvocalicvowelsigndeva;
    internal static string lxsquare;
    internal static string m;
    internal static string mabengali;
    internal static string macron;
    internal static string macronbelowcmb;
    internal static string macroncmb;
    internal static string macronlowmod;
    internal static string macronmonospace;
    internal static string macute;
    internal static string madeva;
    internal static string magujarati;
    internal static string magurmukhi;
    internal static string mahapakhhebrew;
    internal static string mahapakhlefthebrew;
    internal static string mahiragana;
    internal static string maichattawalowleftthai;
    internal static string maichattawalowrightthai;
    internal static string maichattawathai;
    internal static string maichattawaupperleftthai;
    internal static string maieklowleftthai;
    internal static string maieklowrightthai;
    internal static string maiekthai;
    internal static string maiekupperleftthai;
    internal static string maihanakatleftthai;
    internal static string maihanakatthai;
    internal static string maitaikhuleftthai;
    internal static string maitaikhuthai;
    internal static string maitholowleftthai;
    internal static string maitholowrightthai;
    internal static string maithothai;
    internal static string maithoupperleftthai;
    internal static string maitrilowleftthai;
    internal static string maitrilowrightthai;
    internal static string maitrithai;
    internal static string maitriupperleftthai;
    internal static string maiyamokthai;
    internal static string makatakana;
    internal static string makatakanahalfwidth;
    internal static string male;
    internal static string mansyonsquare;
    internal static string maqafhebrew;
    internal static string mars;
    internal static string masoracirclehebrew;
    internal static string masquare;
    internal static string mbopomofo;
    internal static string mbsquare;
    internal static string mcircle;
    internal static string mcubedsquare;
    internal static string mdotaccent;
    internal static string mdotbelow;
    internal static string meemarabic;
    internal static string meemfinalarabic;
    internal static string meeminitialarabic;
    internal static string meemmedialarabic;
    internal static string meemmeeminitialarabic;
    internal static string meemmeemisolatedarabic;
    internal static string meetorusquare;
    internal static string mehiragana;
    internal static string meizierasquare;
    internal static string mekatakana;
    internal static string mekatakanahalfwidth;
    internal static string mem;
    internal static string memdagesh;
    internal static string memdageshhebrew;
    internal static string memhebrew;
    internal static string menarmenian;
    internal static string merkhahebrew;
    internal static string merkhakefulahebrew;
    internal static string merkhakefulalefthebrew;
    internal static string merkhalefthebrew;
    internal static string mhook;
    internal static string mhzsquare;
    internal static string middledotkatakanahalfwidth;
    internal static string middot;
    internal static string mieumacirclekorean;
    internal static string mieumaparenkorean;
    internal static string mieumcirclekorean;
    internal static string mieumkorean;
    internal static string mieumpansioskorean;
    internal static string mieumparenkorean;
    internal static string mieumpieupkorean;
    internal static string mieumsioskorean;
    internal static string mihiragana;
    internal static string mikatakana;
    internal static string mikatakanahalfwidth;
    internal static string minus;
    internal static string minusbelowcmb;
    internal static string minuscircle;
    internal static string minusmod;
    internal static string minusplus;
    internal static string minute;
    internal static string miribaarusquare;
    internal static string mirisquare;
    internal static string mlonglegturned;
    internal static string mlsquare;
    internal static string mmcubedsquare;
    internal static string mmonospace;
    internal static string mmsquaredsquare;
    internal static string mohiragana;
    internal static string mohmsquare;
    internal static string mokatakana;
    internal static string mokatakanahalfwidth;
    internal static string molsquare;
    internal static string momathai;
    internal static string moverssquare;
    internal static string moverssquaredsquare;
    internal static string mparen;
    internal static string mpasquare;
    internal static string mssquare;
    internal static string msuperior;
    internal static string mturned;
    internal static string mu;
    internal static string mu1;
    internal static string muasquare;
    internal static string muchgreater;
    internal static string muchless;
    internal static string mufsquare;
    internal static string mugreek;
    internal static string mugsquare;
    internal static string muhiragana;
    internal static string mukatakana;
    internal static string mukatakanahalfwidth;
    internal static string mulsquare;
    internal static string multiply;
    internal static string mumsquare;
    internal static string munahhebrew;
    internal static string munahlefthebrew;
    internal static string musicalnote;
    internal static string musicalnotedbl;
    internal static string musicflatsign;
    internal static string musicsharpsign;
    internal static string mussquare;
    internal static string muvsquare;
    internal static string muwsquare;
    internal static string mvmegasquare;
    internal static string mvsquare;
    internal static string mwmegasquare;
    internal static string mwsquare;
    internal static string n;
    internal static string nabengali;
    internal static string nabla;
    internal static string nacute;
    internal static string nadeva;
    internal static string nagujarati;
    internal static string nagurmukhi;
    internal static string nahiragana;
    internal static string nakatakana;
    internal static string nakatakanahalfwidth;
    internal static string napostrophe;
    internal static string nasquare;
    internal static string nbopomofo;
    internal static string nbspace;
    internal static string ncaron;
    internal static string ncedilla;
    internal static string ncircle;
    internal static string ncircumflexbelow;
    internal static string ncommaaccent;
    internal static string ndotaccent;
    internal static string ndotbelow;
    internal static string nehiragana;
    internal static string nekatakana;
    internal static string nekatakanahalfwidth;
    internal static string newsheqelsign;
    internal static string nfsquare;
    internal static string ngabengali;
    internal static string ngadeva;
    internal static string ngagujarati;
    internal static string ngagurmukhi;
    internal static string ngonguthai;
    internal static string nhiragana;
    internal static string nhookleft;
    internal static string nhookretroflex;
    internal static string nieunacirclekorean;
    internal static string nieunaparenkorean;
    internal static string nieuncieuckorean;
    internal static string nieuncirclekorean;
    internal static string nieunhieuhkorean;
    internal static string nieunkorean;
    internal static string nieunpansioskorean;
    internal static string nieunparenkorean;
    internal static string nieunsioskorean;
    internal static string nieuntikeutkorean;
    internal static string nihiragana;
    internal static string nikatakana;
    internal static string nikatakanahalfwidth;
    internal static string nikhahitleftthai;
    internal static string nikhahitthai;
    internal static string nine;
    internal static string ninearabic;
    internal static string ninebengali;
    internal static string ninecircle;
    internal static string ninecircleinversesansserif;
    internal static string ninedeva;
    internal static string ninegujarati;
    internal static string ninegurmukhi;
    internal static string ninehackarabic;
    internal static string ninehangzhou;
    internal static string nineideographicparen;
    internal static string nineinferior;
    internal static string ninemonospace;
    internal static string nineoldstyle;
    internal static string nineparen;
    internal static string nineperiod;
    internal static string ninepersian;
    internal static string nineroman;
    internal static string ninesuperior;
    internal static string nineteencircle;
    internal static string nineteenparen;
    internal static string nineteenperiod;
    internal static string ninethai;
    internal static string nj;
    internal static string njecyrillic;
    internal static string nkatakana;
    internal static string nkatakanahalfwidth;
    internal static string nlegrightlong;
    internal static string nlinebelow;
    internal static string nmonospace;
    internal static string nmsquare;
    internal static string nnabengali;
    internal static string nnadeva;
    internal static string nnagujarati;
    internal static string nnagurmukhi;
    internal static string nnnadeva;
    internal static string nohiragana;
    internal static string nokatakana;
    internal static string nokatakanahalfwidth;
    internal static string nonbreakingspace;
    internal static string nonenthai;
    internal static string nonmarkingreturn;
    internal static string nonuthai;
    internal static string noonarabic;
    internal static string noonfinalarabic;
    internal static string noonghunnaarabic;
    internal static string noonghunnafinalarabic;
    internal static string nooninitialarabic;
    internal static string noonjeeminitialarabic;
    internal static string noonjeemisolatedarabic;
    internal static string noonmedialarabic;
    internal static string noonmeeminitialarabic;
    internal static string noonmeemisolatedarabic;
    internal static string noonnoonfinalarabic;
    internal static string notcontains;
    internal static string notelement;
    internal static string notelementof;
    internal static string notequal;
    internal static string notgreater;
    internal static string notgreaternorequal;
    internal static string notgreaternorless;
    internal static string notidentical;
    internal static string notless;
    internal static string notlessnorequal;
    internal static string notparallel;
    internal static string notprecedes;
    internal static string notsubset;
    internal static string notsucceeds;
    internal static string notsuperset;
    internal static string nowarmenian;
    internal static string nparen;
    internal static string nssquare;
    internal static string nsuperior;
    internal static string ntilde;
    internal static string nu;
    internal static string nuhiragana;
    internal static string nukatakana;
    internal static string nukatakanahalfwidth;
    internal static string nuktabengali;
    internal static string nuktadeva;
    internal static string nuktagujarati;
    internal static string nuktagurmukhi;
    internal static string numbersign;
    internal static string numbersignmonospace;
    internal static string numbersignsmall;
    internal static string numeralsigngreek;
    internal static string numeralsignlowergreek;
    internal static string numero;
    internal static string nun;
    internal static string nundagesh;
    internal static string nundageshhebrew;
    internal static string nunhebrew;
    internal static string nvsquare;
    internal static string nwsquare;
    internal static string nyabengali;
    internal static string nyadeva;
    internal static string nyagujarati;
    internal static string nyagurmukhi;
    internal static string o;
    internal static string oacute;
    internal static string oangthai;
    internal static string obarred;
    internal static string obarredcyrillic;
    internal static string obarreddieresiscyrillic;
    internal static string obengali;
    internal static string obopomofo;
    internal static string obreve;
    internal static string ocandradeva;
    internal static string ocandragujarati;
    internal static string ocandravowelsigndeva;
    internal static string ocandravowelsigngujarati;
    internal static string ocaron;
    internal static string ocircle;
    internal static string ocircumflex;
    internal static string ocircumflexacute;
    internal static string ocircumflexdotbelow;
    internal static string ocircumflexgrave;
    internal static string ocircumflexhookabove;
    internal static string ocircumflextilde;
    internal static string ocyrillic;
    internal static string odblacute;
    internal static string odblgrave;
    internal static string odeva;
    internal static string odieresis;
    internal static string odieresiscyrillic;
    internal static string odotbelow;
    internal static string oe;
    internal static string oekorean;
    internal static string ogonek;
    internal static string ogonekcmb;
    internal static string ograve;
    internal static string ogujarati;
    internal static string oharmenian;
    internal static string ohiragana;
    internal static string ohookabove;
    internal static string ohorn;
    internal static string ohornacute;
    internal static string ohorndotbelow;
    internal static string ohorngrave;
    internal static string ohornhookabove;
    internal static string ohorntilde;
    internal static string ohungarumlaut;
    internal static string oi;
    internal static string oinvertedbreve;
    internal static string okatakana;
    internal static string okatakanahalfwidth;
    internal static string okorean;
    internal static string olehebrew;
    internal static string omacron;
    internal static string omacronacute;
    internal static string omacrongrave;
    internal static string omdeva;
    internal static string omega;
    internal static string omega1;
    internal static string omegacyrillic;
    internal static string omegalatinclosed;
    internal static string omegaroundcyrillic;
    internal static string omegatitlocyrillic;
    internal static string omegatonos;
    internal static string omgujarati;
    internal static string omicron;
    internal static string omicrontonos;
    internal static string omonospace;
    internal static string one;
    internal static string onearabic;
    internal static string onebengali;
    internal static string onecircle;
    internal static string onecircleinversesansserif;
    internal static string onedeva;
    internal static string onedotenleader;
    internal static string oneeighth;
    internal static string onefitted;
    internal static string onegujarati;
    internal static string onegurmukhi;
    internal static string onehackarabic;
    internal static string onehalf;
    internal static string onehangzhou;
    internal static string oneideographicparen;
    internal static string oneinferior;
    internal static string onemonospace;
    internal static string onenumeratorbengali;
    internal static string oneoldstyle;
    internal static string oneparen;
    internal static string oneperiod;
    internal static string onepersian;
    internal static string onequarter;
    internal static string oneroman;
    internal static string onesuperior;
    internal static string onethai;
    internal static string onethird;
    internal static string oogonek;
    internal static string oogonekmacron;
    internal static string oogurmukhi;
    internal static string oomatragurmukhi;
    internal static string oopen;
    internal static string oparen;
    internal static string openbullet;
    internal static string option;
    internal static string ordfeminine;
    internal static string ordmasculine;
    internal static string orthogonal;
    internal static string oshortdeva;
    internal static string oshortvowelsigndeva;
    internal static string oslash;
    internal static string oslashacute;
    internal static string osmallhiragana;
    internal static string osmallkatakana;
    internal static string osmallkatakanahalfwidth;
    internal static string ostrokeacute;
    internal static string osuperior;
    internal static string otcyrillic;
    internal static string otilde;
    internal static string otildeacute;
    internal static string otildedieresis;
    internal static string oubopomofo;
    internal static string overline;
    internal static string overlinecenterline;
    internal static string overlinecmb;
    internal static string overlinedashed;
    internal static string overlinedblwavy;
    internal static string overlinewavy;
    internal static string overscore;
    internal static string ovowelsignbengali;
    internal static string ovowelsigndeva;
    internal static string ovowelsigngujarati;
    internal static string p;
    internal static string paampssquare;
    internal static string paasentosquare;
    internal static string pabengali;
    internal static string pacute;
    internal static string padeva;
    internal static string pagedown;
    internal static string pageup;
    internal static string pagujarati;
    internal static string pagurmukhi;
    internal static string pahiragana;
    internal static string paiyannoithai;
    internal static string pakatakana;
    internal static string palatalizationcyrilliccmb;
    internal static string palochkacyrillic;
    internal static string pansioskorean;
    internal static string paragraph;
    internal static string parallel;
    internal static string parenleft;
    internal static string parenleftaltonearabic;
    internal static string parenleftbt;
    internal static string parenleftex;
    internal static string parenleftinferior;
    internal static string parenleftmonospace;
    internal static string parenleftsmall;
    internal static string parenleftsuperior;
    internal static string parenlefttp;
    internal static string parenleftvertical;
    internal static string parenright;
    internal static string parenrightaltonearabic;
    internal static string parenrightbt;
    internal static string parenrightex;
    internal static string parenrightinferior;
    internal static string parenrightmonospace;
    internal static string parenrightsmall;
    internal static string parenrightsuperior;
    internal static string parenrighttp;
    internal static string parenrightvertical;
    internal static string partialdiff;
    internal static string paseqhebrew;
    internal static string pashtahebrew;
    internal static string pasquare;
    internal static string patah;
    internal static string patah11;
    internal static string patah1d;
    internal static string patah2a;
    internal static string patahhebrew;
    internal static string patahnarrowhebrew;
    internal static string patahquarterhebrew;
    internal static string patahwidehebrew;
    internal static string pazerhebrew;
    internal static string pbopomofo;
    internal static string pcircle;
    internal static string pdotaccent;
    internal static string pe;
    internal static string pecyrillic;
    internal static string pedagesh;
    internal static string pedageshhebrew;
    internal static string peezisquare;
    internal static string pefinaldageshhebrew;
    internal static string peharabic;
    internal static string peharmenian;
    internal static string pehebrew;
    internal static string pehfinalarabic;
    internal static string pehinitialarabic;
    internal static string pehiragana;
    internal static string pehmedialarabic;
    internal static string pekatakana;
    internal static string pemiddlehookcyrillic;
    internal static string perafehebrew;
    internal static string percent;
    internal static string percentarabic;
    internal static string percentmonospace;
    internal static string percentsmall;
    internal static string period;
    internal static string periodarmenian;
    internal static string periodcentered;
    internal static string periodhalfwidth;
    internal static string periodinferior;
    internal static string periodmonospace;
    internal static string periodsmall;
    internal static string periodsuperior;
    internal static string perispomenigreekcmb;
    internal static string perpendicular;
    internal static string perthousand;
    internal static string peseta;
    internal static string pfsquare;
    internal static string phabengali;
    internal static string phadeva;
    internal static string phagujarati;
    internal static string phagurmukhi;
    internal static string phi;
    internal static string phi1;
    internal static string phieuphacirclekorean;
    internal static string phieuphaparenkorean;
    internal static string phieuphcirclekorean;
    internal static string phieuphkorean;
    internal static string phieuphparenkorean;
    internal static string philatin;
    internal static string phinthuthai;
    internal static string phisymbolgreek;
    internal static string phook;
    internal static string phophanthai;
    internal static string phophungthai;
    internal static string phosamphaothai;
    internal static string pi;
    internal static string pieupacirclekorean;
    internal static string pieupaparenkorean;
    internal static string pieupcieuckorean;
    internal static string pieupcirclekorean;
    internal static string pieupkiyeokkorean;
    internal static string pieupkorean;
    internal static string pieupparenkorean;
    internal static string pieupsioskiyeokkorean;
    internal static string pieupsioskorean;
    internal static string pieupsiostikeutkorean;
    internal static string pieupthieuthkorean;
    internal static string pieuptikeutkorean;
    internal static string pihiragana;
    internal static string pikatakana;
    internal static string pisymbolgreek;
    internal static string piwrarmenian;
    internal static string plus;
    internal static string plusbelowcmb;
    internal static string pluscircle;
    internal static string plusminus;
    internal static string plusmod;
    internal static string plusmonospace;
    internal static string plussmall;
    internal static string plussuperior;
    internal static string pmonospace;
    internal static string pmsquare;
    internal static string pohiragana;
    internal static string pointingindexdownwhite;
    internal static string pointingindexleftwhite;
    internal static string pointingindexrightwhite;
    internal static string pointingindexupwhite;
    internal static string pokatakana;
    internal static string poplathai;
    internal static string postalmark;
    internal static string postalmarkface;
    internal static string pparen;
    internal static string precedes;
    internal static string prescription;
    internal static string primemod;
    internal static string primereversed;
    internal static string product;
    internal static string projective;
    internal static string prolongedkana;
    internal static string propellor;
    internal static string propersubset;
    internal static string propersuperset;
    internal static string proportion;
    internal static string proportional;
    internal static string psi;
    internal static string psicyrillic;
    internal static string psilipneumatacyrilliccmb;
    internal static string pssquare;
    internal static string puhiragana;
    internal static string pukatakana;
    internal static string pvsquare;
    internal static string pwsquare;
    internal static string q;
    internal static string qadeva;
    internal static string qadmahebrew;
    internal static string qafarabic;
    internal static string qaffinalarabic;
    internal static string qafinitialarabic;
    internal static string qafmedialarabic;
    internal static string qamats;
    internal static string qamats10;
    internal static string qamats1a;
    internal static string qamats1c;
    internal static string qamats27;
    internal static string qamats29;
    internal static string qamats33;
    internal static string qamatsde;
    internal static string qamatshebrew;
    internal static string qamatsnarrowhebrew;
    internal static string qamatsqatanhebrew;
    internal static string qamatsqatannarrowhebrew;
    internal static string qamatsqatanquarterhebrew;
    internal static string qamatsqatanwidehebrew;
    internal static string qamatsquarterhebrew;
    internal static string qamatswidehebrew;
    internal static string qarneyparahebrew;
    internal static string qbopomofo;
    internal static string qcircle;
    internal static string qhook;
    internal static string qmonospace;
    internal static string qof;
    internal static string qofdagesh;
    internal static string qofdageshhebrew;
    internal static string qofhebrew;
    internal static string qparen;
    internal static string quarternote;
    internal static string qubuts;
    internal static string qubuts18;
    internal static string qubuts25;
    internal static string qubuts31;
    internal static string qubutshebrew;
    internal static string qubutsnarrowhebrew;
    internal static string qubutsquarterhebrew;
    internal static string qubutswidehebrew;
    internal static string question;
    internal static string questionarabic;
    internal static string questionarmenian;
    internal static string questiondown;
    internal static string questiondownsmall;
    internal static string questiongreek;
    internal static string questionmonospace;
    internal static string questionsmall;
    internal static string quotedbl;
    internal static string quotedblbase;
    internal static string quotedblleft;
    internal static string quotedblmonospace;
    internal static string quotedblprime;
    internal static string quotedblprimereversed;
    internal static string quotedblright;
    internal static string quoteleft;
    internal static string quoteleftreversed;
    internal static string quotereversed;
    internal static string quoteright;
    internal static string quoterightn;
    internal static string quotesinglbase;
    internal static string quotesingle;
    internal static string quotesinglemonospace;
    internal static string r;
    internal static string raarmenian;
    internal static string rabengali;
    internal static string racute;
    internal static string radeva;
    internal static string radical;
    internal static string radicalex;
    internal static string radoverssquare;
    internal static string radoverssquaredsquare;
    internal static string radsquare;
    internal static string rafe;
    internal static string rafehebrew;
    internal static string ragujarati;
    internal static string ragurmukhi;
    internal static string rahiragana;
    internal static string rakatakana;
    internal static string rakatakanahalfwidth;
    internal static string ralowerdiagonalbengali;
    internal static string ramiddlediagonalbengali;
    internal static string ramshorn;
    internal static string ratio;
    internal static string rbopomofo;
    internal static string rcaron;
    internal static string rcedilla;
    internal static string rcircle;
    internal static string rcommaaccent;
    internal static string rdblgrave;
    internal static string rdotaccent;
    internal static string rdotbelow;
    internal static string rdotbelowmacron;
    internal static string referencemark;
    internal static string reflexsubset;
    internal static string reflexsuperset;
    internal static string registered;
    internal static string registersans;
    internal static string registerserif;
    internal static string reharabic;
    internal static string reharmenian;
    internal static string rehfinalarabic;
    internal static string rehiragana;
    internal static string rekatakana;
    internal static string rekatakanahalfwidth;
    internal static string resh;
    internal static string reshdageshhebrew;
    internal static string reshhebrew;
    internal static string reversedtilde;
    internal static string reviahebrew;
    internal static string reviamugrashhebrew;
    internal static string revlogicalnot;
    internal static string rfishhook;
    internal static string rfishhookreversed;
    internal static string rhabengali;
    internal static string rhadeva;
    internal static string rho;
    internal static string rhook;
    internal static string rhookturned;
    internal static string rhookturnedsuperior;
    internal static string rhosymbolgreek;
    internal static string rhotichookmod;
    internal static string rieulacirclekorean;
    internal static string rieulaparenkorean;
    internal static string rieulcirclekorean;
    internal static string rieulhieuhkorean;
    internal static string rieulkiyeokkorean;
    internal static string rieulkiyeoksioskorean;
    internal static string rieulkorean;
    internal static string rieulmieumkorean;
    internal static string rieulpansioskorean;
    internal static string rieulparenkorean;
    internal static string rieulphieuphkorean;
    internal static string rieulpieupkorean;
    internal static string rieulpieupsioskorean;
    internal static string rieulsioskorean;
    internal static string rieulthieuthkorean;
    internal static string rieultikeutkorean;
    internal static string rieulyeorinhieuhkorean;
    internal static string rightangle;
    internal static string righttackbelowcmb;
    internal static string righttriangle;
    internal static string rihiragana;
    internal static string rikatakana;
    internal static string rikatakanahalfwidth;
    internal static string ring;
    internal static string ringbelowcmb;
    internal static string ringcmb;
    internal static string ringhalfleft;
    internal static string ringhalfleftarmenian;
    internal static string ringhalfleftbelowcmb;
    internal static string ringhalfleftcentered;
    internal static string ringhalfright;
    internal static string ringhalfrightbelowcmb;
    internal static string ringhalfrightcentered;
    internal static string rinvertedbreve;
    internal static string rittorusquare;
    internal static string rlinebelow;
    internal static string rlongleg;
    internal static string rlonglegturned;
    internal static string rmonospace;
    internal static string rohiragana;
    internal static string rokatakana;
    internal static string rokatakanahalfwidth;
    internal static string roruathai;
    internal static string rparen;
    internal static string rrabengali;
    internal static string rradeva;
    internal static string rragurmukhi;
    internal static string rreharabic;
    internal static string rrehfinalarabic;
    internal static string rrvocalicbengali;
    internal static string rrvocalicdeva;
    internal static string rrvocalicgujarati;
    internal static string rrvocalicvowelsignbengali;
    internal static string rrvocalicvowelsigndeva;
    internal static string rrvocalicvowelsigngujarati;
    internal static string rsuperior;
    internal static string rtblock;
    internal static string rturned;
    internal static string rturnedsuperior;
    internal static string ruhiragana;
    internal static string rukatakana;
    internal static string rukatakanahalfwidth;
    internal static string rupeemarkbengali;
    internal static string rupeesignbengali;
    internal static string rupiah;
    internal static string ruthai;
    internal static string rvocalicbengali;
    internal static string rvocalicdeva;
    internal static string rvocalicgujarati;
    internal static string rvocalicvowelsignbengali;
    internal static string rvocalicvowelsigndeva;
    internal static string rvocalicvowelsigngujarati;
    internal static string s;
    internal static string sabengali;
    internal static string sacute;
    internal static string sacutedotaccent;
    internal static string sadarabic;
    internal static string sadeva;
    internal static string sadfinalarabic;
    internal static string sadinitialarabic;
    internal static string sadmedialarabic;
    internal static string sagujarati;
    internal static string sagurmukhi;
    internal static string sahiragana;
    internal static string sakatakana;
    internal static string sakatakanahalfwidth;
    internal static string sallallahoualayhewasallamarabic;
    internal static string samekh;
    internal static string samekhdagesh;
    internal static string samekhdageshhebrew;
    internal static string samekhhebrew;
    internal static string saraaathai;
    internal static string saraaethai;
    internal static string saraaimaimalaithai;
    internal static string saraaimaimuanthai;
    internal static string saraamthai;
    internal static string saraathai;
    internal static string saraethai;
    internal static string saraiileftthai;
    internal static string saraiithai;
    internal static string saraileftthai;
    internal static string saraithai;
    internal static string saraothai;
    internal static string saraueeleftthai;
    internal static string saraueethai;
    internal static string saraueleftthai;
    internal static string sarauethai;
    internal static string sarauthai;
    internal static string sarauuthai;
    internal static string sbopomofo;
    internal static string scaron;
    internal static string scarondotaccent;
    internal static string scedilla;
    internal static string schwa;
    internal static string schwacyrillic;
    internal static string schwadieresiscyrillic;
    internal static string schwahook;
    internal static string scircle;
    internal static string scircumflex;
    internal static string scommaaccent;
    internal static string sdotaccent;
    internal static string sdotbelow;
    internal static string sdotbelowdotaccent;
    internal static string seagullbelowcmb;
    internal static string second;
    internal static string secondtonechinese;
    internal static string section;
    internal static string seenarabic;
    internal static string seenfinalarabic;
    internal static string seeninitialarabic;
    internal static string seenmedialarabic;
    internal static string segol;
    internal static string segol13;
    internal static string segol1f;
    internal static string segol2c;
    internal static string segolhebrew;
    internal static string segolnarrowhebrew;
    internal static string segolquarterhebrew;
    internal static string segoltahebrew;
    internal static string segolwidehebrew;
    internal static string seharmenian;
    internal static string sehiragana;
    internal static string sekatakana;
    internal static string sekatakanahalfwidth;
    internal static string semicolon;
    internal static string semicolonarabic;
    internal static string semicolonmonospace;
    internal static string semicolonsmall;
    internal static string semivoicedmarkkana;
    internal static string semivoicedmarkkanahalfwidth;
    internal static string sentisquare;
    internal static string sentosquare;
    internal static string seven;
    internal static string sevenarabic;
    internal static string sevenbengali;
    internal static string sevencircle;
    internal static string sevencircleinversesansserif;
    internal static string sevendeva;
    internal static string seveneighths;
    internal static string sevengujarati;
    internal static string sevengurmukhi;
    internal static string sevenhackarabic;
    internal static string sevenhangzhou;
    internal static string sevenideographicparen;
    internal static string seveninferior;
    internal static string sevenmonospace;
    internal static string sevenoldstyle;
    internal static string sevenparen;
    internal static string sevenperiod;
    internal static string sevenpersian;
    internal static string sevenroman;
    internal static string sevensuperior;
    internal static string seventeencircle;
    internal static string seventeenparen;
    internal static string seventeenperiod;
    internal static string seventhai;
    internal static string sfthyphen;
    internal static string shaarmenian;
    internal static string shabengali;
    internal static string shacyrillic;
    internal static string shaddaarabic;
    internal static string shaddadammaarabic;
    internal static string shaddadammatanarabic;
    internal static string shaddafathaarabic;
    internal static string shaddakasraarabic;
    internal static string shaddakasratanarabic;
    internal static string shade;
    internal static string shadedark;
    internal static string shadelight;
    internal static string shademedium;
    internal static string shadeva;
    internal static string shagujarati;
    internal static string shagurmukhi;
    internal static string shalshelethebrew;
    internal static string shbopomofo;
    internal static string shchacyrillic;
    internal static string sheenarabic;
    internal static string sheenfinalarabic;
    internal static string sheeninitialarabic;
    internal static string sheenmedialarabic;
    internal static string sheicoptic;
    internal static string sheqel;
    internal static string sheqelhebrew;
    internal static string sheva;
    internal static string sheva115;
    internal static string sheva15;
    internal static string sheva22;
    internal static string sheva2e;
    internal static string shevahebrew;
    internal static string shevanarrowhebrew;
    internal static string shevaquarterhebrew;
    internal static string shevawidehebrew;
    internal static string shhacyrillic;
    internal static string shimacoptic;
    internal static string shin;
    internal static string shindagesh;
    internal static string shindageshhebrew;
    internal static string shindageshshindot;
    internal static string shindageshshindothebrew;
    internal static string shindageshsindot;
    internal static string shindageshsindothebrew;
    internal static string shindothebrew;
    internal static string shinhebrew;
    internal static string shinshindot;
    internal static string shinshindothebrew;
    internal static string shinsindot;
    internal static string shinsindothebrew;
    internal static string shook;
    internal static string sigma;
    internal static string sigma1;
    internal static string sigmafinal;
    internal static string sigmalunatesymbolgreek;
    internal static string sihiragana;
    internal static string sikatakana;
    internal static string sikatakanahalfwidth;
    internal static string siluqhebrew;
    internal static string siluqlefthebrew;
    internal static string similar;
    internal static string sindothebrew;
    internal static string siosacirclekorean;
    internal static string siosaparenkorean;
    internal static string sioscieuckorean;
    internal static string sioscirclekorean;
    internal static string sioskiyeokkorean;
    internal static string sioskorean;
    internal static string siosnieunkorean;
    internal static string siosparenkorean;
    internal static string siospieupkorean;
    internal static string siostikeutkorean;
    internal static string six;
    internal static string sixarabic;
    internal static string sixbengali;
    internal static string sixcircle;
    internal static string sixcircleinversesansserif;
    internal static string sixdeva;
    internal static string sixgujarati;
    internal static string sixgurmukhi;
    internal static string sixhackarabic;
    internal static string sixhangzhou;
    internal static string sixideographicparen;
    internal static string sixinferior;
    internal static string sixmonospace;
    internal static string sixoldstyle;
    internal static string sixparen;
    internal static string sixperiod;
    internal static string sixpersian;
    internal static string sixroman;
    internal static string sixsuperior;
    internal static string sixteencircle;
    internal static string sixteencurrencydenominatorbengali;
    internal static string sixteenparen;
    internal static string sixteenperiod;
    internal static string sixthai;
    internal static string slash;
    internal static string slashmonospace;
    internal static string slong;
    internal static string slongdotaccent;
    internal static string smileface;
    internal static string smonospace;
    internal static string sofpasuqhebrew;
    internal static string softhyphen;
    internal static string softsigncyrillic;
    internal static string sohiragana;
    internal static string sokatakana;
    internal static string sokatakanahalfwidth;
    internal static string soliduslongoverlaycmb;
    internal static string solidusshortoverlaycmb;
    internal static string sorusithai;
    internal static string sosalathai;
    internal static string sosothai;
    internal static string sosuathai;
    internal static string space;
    internal static string spacehackarabic;
    internal static string spade;
    internal static string spadesuitblack;
    internal static string spadesuitwhite;
    internal static string sparen;
    internal static string squarebelowcmb;
    internal static string squarecc;
    internal static string squarecm;
    internal static string squarediagonalcrosshatchfill;
    internal static string squarehorizontalfill;
    internal static string squarekg;
    internal static string squarekm;
    internal static string squarekmcapital;
    internal static string squareln;
    internal static string squarelog;
    internal static string squaremg;
    internal static string squaremil;
    internal static string squaremm;
    internal static string squaremsquared;
    internal static string squareorthogonalcrosshatchfill;
    internal static string squareupperlefttolowerrightfill;
    internal static string squareupperrighttolowerleftfill;
    internal static string squareverticalfill;
    internal static string squarewhitewithsmallblack;
    internal static string srsquare;
    internal static string ssabengali;
    internal static string ssadeva;
    internal static string ssagujarati;
    internal static string ssangcieuckorean;
    internal static string ssanghieuhkorean;
    internal static string ssangieungkorean;
    internal static string ssangkiyeokkorean;
    internal static string ssangnieunkorean;
    internal static string ssangpieupkorean;
    internal static string ssangsioskorean;
    internal static string ssangtikeutkorean;
    internal static string ssuperior;
    internal static string sterling;
    internal static string sterlingmonospace;
    internal static string strokelongoverlaycmb;
    internal static string strokeshortoverlaycmb;
    internal static string subset;
    internal static string subsetnotequal;
    internal static string subsetorequal;
    internal static string succeeds;
    internal static string suchthat;
    internal static string suhiragana;
    internal static string sukatakana;
    internal static string sukatakanahalfwidth;
    internal static string sukunarabic;
    internal static string summation;
    internal static string sun;
    internal static string superset;
    internal static string supersetnotequal;
    internal static string supersetorequal;
    internal static string svsquare;
    internal static string syouwaerasquare;
    internal static string t;
    internal static string tabengali;
    internal static string tackdown;
    internal static string tackleft;
    internal static string tadeva;
    internal static string tagujarati;
    internal static string tagurmukhi;
    internal static string taharabic;
    internal static string tahfinalarabic;
    internal static string tahinitialarabic;
    internal static string tahiragana;
    internal static string tahmedialarabic;
    internal static string taisyouerasquare;
    internal static string takatakana;
    internal static string takatakanahalfwidth;
    internal static string tatweelarabic;
    internal static string tau;
    internal static string tav;
    internal static string tavdages;
    internal static string tavdagesh;
    internal static string tavdageshhebrew;
    internal static string tavhebrew;
    internal static string tbar;
    internal static string tbopomofo;
    internal static string tcaron;
    internal static string tccurl;
    internal static string tcedilla;
    internal static string tcheharabic;
    internal static string tchehfinalarabic;
    internal static string tchehinitialarabic;
    internal static string tchehmedialarabic;
    internal static string tcircle;
    internal static string tcircumflexbelow;
    internal static string tcommaaccent;
    internal static string tdieresis;
    internal static string tdotaccent;
    internal static string tdotbelow;
    internal static string tecyrillic;
    internal static string tedescendercyrillic;
    internal static string teharabic;
    internal static string tehfinalarabic;
    internal static string tehhahinitialarabic;
    internal static string tehhahisolatedarabic;
    internal static string tehinitialarabic;
    internal static string tehiragana;
    internal static string tehjeeminitialarabic;
    internal static string tehjeemisolatedarabic;
    internal static string tehmarbutaarabic;
    internal static string tehmarbutafinalarabic;
    internal static string tehmedialarabic;
    internal static string tehmeeminitialarabic;
    internal static string tehmeemisolatedarabic;
    internal static string tehnoonfinalarabic;
    internal static string tekatakana;
    internal static string tekatakanahalfwidth;
    internal static string telephone;
    internal static string telephoneblack;
    internal static string telishagedolahebrew;
    internal static string telishaqetanahebrew;
    internal static string tencircle;
    internal static string tenideographicparen;
    internal static string tenparen;
    internal static string tenperiod;
    internal static string tenroman;
    internal static string tesh;
    internal static string tet;
    internal static string tetdagesh;
    internal static string tetdageshhebrew;
    internal static string tethebrew;
    internal static string tetsecyrillic;
    internal static string tevirhebrew;
    internal static string tevirlefthebrew;
    internal static string thabengali;
    internal static string thadeva;
    internal static string thagujarati;
    internal static string thagurmukhi;
    internal static string thalarabic;
    internal static string thalfinalarabic;
    internal static string thanthakhatlowleftthai;
    internal static string thanthakhatlowrightthai;
    internal static string thanthakhatthai;
    internal static string thanthakhatupperleftthai;
    internal static string theharabic;
    internal static string thehfinalarabic;
    internal static string thehinitialarabic;
    internal static string thehmedialarabic;
    internal static string thereexists;
    internal static string therefore;
    internal static string theta;
    internal static string theta1;
    internal static string thetasymbolgreek;
    internal static string thieuthacirclekorean;
    internal static string thieuthaparenkorean;
    internal static string thieuthcirclekorean;
    internal static string thieuthkorean;
    internal static string thieuthparenkorean;
    internal static string thirteencircle;
    internal static string thirteenparen;
    internal static string thirteenperiod;
    internal static string thonangmonthothai;
    internal static string thook;
    internal static string thophuthaothai;
    internal static string thorn;
    internal static string thothahanthai;
    internal static string thothanthai;
    internal static string thothongthai;
    internal static string thothungthai;
    internal static string thousandcyrillic;
    internal static string thousandsseparatorarabic;
    internal static string thousandsseparatorpersian;
    internal static string three;
    internal static string threearabic;
    internal static string threebengali;
    internal static string threecircle;
    internal static string threecircleinversesansserif;
    internal static string threedeva;
    internal static string threeeighths;
    internal static string threegujarati;
    internal static string threegurmukhi;
    internal static string threehackarabic;
    internal static string threehangzhou;
    internal static string threeideographicparen;
    internal static string threeinferior;
    internal static string threemonospace;
    internal static string threenumeratorbengali;
    internal static string threeoldstyle;
    internal static string threeparen;
    internal static string threeperiod;
    internal static string threepersian;
    internal static string threequarters;
    internal static string threequartersemdash;
    internal static string threeroman;
    internal static string threesuperior;
    internal static string threethai;
    internal static string thzsquare;
    internal static string tihiragana;
    internal static string tikatakana;
    internal static string tikatakanahalfwidth;
    internal static string tikeutacirclekorean;
    internal static string tikeutaparenkorean;
    internal static string tikeutcirclekorean;
    internal static string tikeutkorean;
    internal static string tikeutparenkorean;
    internal static string tilde;
    internal static string tildebelowcmb;
    internal static string tildecmb;
    internal static string tildecomb;
    internal static string tildedoublecmb;
    internal static string tildeoperator;
    internal static string tildeoverlaycmb;
    internal static string tildeverticalcmb;
    internal static string timescircle;
    internal static string tipehahebrew;
    internal static string tipehalefthebrew;
    internal static string tippigurmukhi;
    internal static string titlocyrilliccmb;
    internal static string tiwnarmenian;
    internal static string tlinebelow;
    internal static string tmonospace;
    internal static string toarmenian;
    internal static string tohiragana;
    internal static string tokatakana;
    internal static string tokatakanahalfwidth;
    internal static string tonebarextrahighmod;
    internal static string tonebarextralowmod;
    internal static string tonebarhighmod;
    internal static string tonebarlowmod;
    internal static string tonebarmidmod;
    internal static string tonefive;
    internal static string tonesix;
    internal static string tonetwo;
    internal static string tonos;
    internal static string tonsquare;
    internal static string topatakthai;
    internal static string tortoiseshellbracketleft;
    internal static string tortoiseshellbracketleftsmall;
    internal static string tortoiseshellbracketleftvertical;
    internal static string tortoiseshellbracketright;
    internal static string tortoiseshellbracketrightsmall;
    internal static string tortoiseshellbracketrightvertical;
    internal static string totaothai;
    internal static string tpalatalhook;
    internal static string tparen;
    internal static string trademark;
    internal static string trademarksans;
    internal static string trademarkserif;
    internal static string tretroflexhook;
    internal static string triagdn;
    internal static string triaglf;
    internal static string triagrt;
    internal static string triagup;
    internal static string ts;
    internal static string tsadi;
    internal static string tsadidagesh;
    internal static string tsadidageshhebrew;
    internal static string tsadihebrew;
    internal static string tsecyrillic;
    internal static string tsere;
    internal static string tsere12;
    internal static string tsere1e;
    internal static string tsere2b;
    internal static string tserehebrew;
    internal static string tserenarrowhebrew;
    internal static string tserequarterhebrew;
    internal static string tserewidehebrew;
    internal static string tshecyrillic;
    internal static string tsuperior;
    internal static string ttabengali;
    internal static string ttadeva;
    internal static string ttagujarati;
    internal static string ttagurmukhi;
    internal static string tteharabic;
    internal static string ttehfinalarabic;
    internal static string ttehinitialarabic;
    internal static string ttehmedialarabic;
    internal static string tthabengali;
    internal static string tthadeva;
    internal static string tthagujarati;
    internal static string tthagurmukhi;
    internal static string tturned;
    internal static string tuhiragana;
    internal static string tukatakana;
    internal static string tukatakanahalfwidth;
    internal static string tusmallhiragana;
    internal static string tusmallkatakana;
    internal static string tusmallkatakanahalfwidth;
    internal static string twelvecircle;
    internal static string twelveparen;
    internal static string twelveperiod;
    internal static string twelveroman;
    internal static string twentycircle;
    internal static string twentyhangzhou;
    internal static string twentyparen;
    internal static string twentyperiod;
    internal static string two;
    internal static string twoarabic;
    internal static string twobengali;
    internal static string twocircle;
    internal static string twocircleinversesansserif;
    internal static string twodeva;
    internal static string twodotenleader;
    internal static string twodotleader;
    internal static string twodotleadervertical;
    internal static string twogujarati;
    internal static string twogurmukhi;
    internal static string twohackarabic;
    internal static string twohangzhou;
    internal static string twoideographicparen;
    internal static string twoinferior;
    internal static string twomonospace;
    internal static string twonumeratorbengali;
    internal static string twooldstyle;
    internal static string twoparen;
    internal static string twoperiod;
    internal static string twopersian;
    internal static string tworoman;
    internal static string twostroke;
    internal static string twosuperior;
    internal static string twothai;
    internal static string twothirds;
    internal static string u;
    internal static string uacute;
    internal static string ubar;
    internal static string ubengali;
    internal static string ubopomofo;
    internal static string ubreve;
    internal static string ucaron;
    internal static string ucircle;
    internal static string ucircumflex;
    internal static string ucircumflexbelow;
    internal static string ucyrillic;
    internal static string udattadeva;
    internal static string udblacute;
    internal static string udblgrave;
    internal static string udeva;
    internal static string udieresis;
    internal static string udieresisacute;
    internal static string udieresisbelow;
    internal static string udieresiscaron;
    internal static string udieresiscyrillic;
    internal static string udieresisgrave;
    internal static string udieresismacron;
    internal static string udotbelow;
    internal static string ugrave;
    internal static string ugujarati;
    internal static string ugurmukhi;
    internal static string uhiragana;
    internal static string uhookabove;
    internal static string uhorn;
    internal static string uhornacute;
    internal static string uhorndotbelow;
    internal static string uhorngrave;
    internal static string uhornhookabove;
    internal static string uhorntilde;
    internal static string uhungarumlaut;
    internal static string uhungarumlautcyrillic;
    internal static string uinvertedbreve;
    internal static string ukatakana;
    internal static string ukatakanahalfwidth;
    internal static string ukcyrillic;
    internal static string ukorean;
    internal static string umacron;
    internal static string umacroncyrillic;
    internal static string umacrondieresis;
    internal static string umatragurmukhi;
    internal static string umonospace;
    internal static string underscore;
    internal static string underscoredbl;
    internal static string underscoremonospace;
    internal static string underscorevertical;
    internal static string underscorewavy;
    internal static string uni00A0;
    internal static string union;
    internal static string universal;
    internal static string uogonek;
    internal static string uparen;
    internal static string upblock;
    internal static string upperdothebrew;
    internal static string upsilon;
    internal static string upsilondieresis;
    internal static string upsilondieresistonos;
    internal static string upsilonlatin;
    internal static string upsilontonos;
    internal static string uptackbelowcmb;
    internal static string uptackmod;
    internal static string uragurmukhi;
    internal static string uring;
    internal static string ushortcyrillic;
    internal static string usmallhiragana;
    internal static string usmallkatakana;
    internal static string usmallkatakanahalfwidth;
    internal static string ustraightcyrillic;
    internal static string ustraightstrokecyrillic;
    internal static string utilde;
    internal static string utildeacute;
    internal static string utildebelow;
    internal static string uubengali;
    internal static string uudeva;
    internal static string uugujarati;
    internal static string uugurmukhi;
    internal static string uumatragurmukhi;
    internal static string uuvowelsignbengali;
    internal static string uuvowelsigndeva;
    internal static string uuvowelsigngujarati;
    internal static string uvowelsignbengali;
    internal static string uvowelsigndeva;
    internal static string uvowelsigngujarati;
    internal static string v;
    internal static string vadeva;
    internal static string vagujarati;
    internal static string vagurmukhi;
    internal static string vakatakana;
    internal static string vav;
    internal static string vavdagesh;
    internal static string vavdagesh65;
    internal static string vavdageshhebrew;
    internal static string vavhebrew;
    internal static string vavholam;
    internal static string vavholamhebrew;
    internal static string vavvavhebrew;
    internal static string vavyodhebrew;
    internal static string vcircle;
    internal static string vdotbelow;
    internal static string vecyrillic;
    internal static string veharabic;
    internal static string vehfinalarabic;
    internal static string vehinitialarabic;
    internal static string vehmedialarabic;
    internal static string vekatakana;
    internal static string venus;
    internal static string verticalbar;
    internal static string verticallineabovecmb;
    internal static string verticallinebelowcmb;
    internal static string verticallinelowmod;
    internal static string verticallinemod;
    internal static string vewarmenian;
    internal static string vhook;
    internal static string vikatakana;
    internal static string viramabengali;
    internal static string viramadeva;
    internal static string viramagujarati;
    internal static string visargabengali;
    internal static string visargadeva;
    internal static string visargagujarati;
    internal static string vmonospace;
    internal static string voarmenian;
    internal static string voicediterationhiragana;
    internal static string voicediterationkatakana;
    internal static string voicedmarkkana;
    internal static string voicedmarkkanahalfwidth;
    internal static string vokatakana;
    internal static string vparen;
    internal static string vtilde;
    internal static string vturned;
    internal static string vuhiragana;
    internal static string vukatakana;
    internal static string w;
    internal static string wacute;
    internal static string waekorean;
    internal static string wahiragana;
    internal static string wakatakana;
    internal static string wakatakanahalfwidth;
    internal static string wakorean;
    internal static string wasmallhiragana;
    internal static string wasmallkatakana;
    internal static string wattosquare;
    internal static string wavedash;
    internal static string wavyunderscorevertical;
    internal static string wawarabic;
    internal static string wawfinalarabic;
    internal static string wawhamzaabovearabic;
    internal static string wawhamzaabovefinalarabic;
    internal static string wbsquare;
    internal static string wcircle;
    internal static string wcircumflex;
    internal static string wdieresis;
    internal static string wdotaccent;
    internal static string wdotbelow;
    internal static string wehiragana;
    internal static string weierstrass;
    internal static string wekatakana;
    internal static string wekorean;
    internal static string weokorean;
    internal static string wgrave;
    internal static string whitebullet;
    internal static string whitecircle;
    internal static string whitecircleinverse;
    internal static string whitecornerbracketleft;
    internal static string whitecornerbracketleftvertical;
    internal static string whitecornerbracketright;
    internal static string whitecornerbracketrightvertical;
    internal static string whitediamond;
    internal static string whitediamondcontainingblacksmalldiamond;
    internal static string whitedownpointingsmalltriangle;
    internal static string whitedownpointingtriangle;
    internal static string whiteleftpointingsmalltriangle;
    internal static string whiteleftpointingtriangle;
    internal static string whitelenticularbracketleft;
    internal static string whitelenticularbracketright;
    internal static string whiterightpointingsmalltriangle;
    internal static string whiterightpointingtriangle;
    internal static string whitesmallsquare;
    internal static string whitesmilingface;
    internal static string whitesquare;
    internal static string whitestar;
    internal static string whitetelephone;
    internal static string whitetortoiseshellbracketleft;
    internal static string whitetortoiseshellbracketright;
    internal static string whiteuppointingsmalltriangle;
    internal static string whiteuppointingtriangle;
    internal static string wihiragana;
    internal static string wikatakana;
    internal static string wikorean;
    internal static string wmonospace;
    internal static string wohiragana;
    internal static string wokatakana;
    internal static string wokatakanahalfwidth;
    internal static string won;
    internal static string wonmonospace;
    internal static string wowaenthai;
    internal static string wparen;
    internal static string wring;
    internal static string wsuperior;
    internal static string wturned;
    internal static string wynn;
    internal static string x;
    internal static string xabovecmb;
    internal static string xbopomofo;
    internal static string xcircle;
    internal static string xdieresis;
    internal static string xdotaccent;
    internal static string xeharmenian;
    internal static string xi;
    internal static string xmonospace;
    internal static string xparen;
    internal static string xsuperior;
    internal static string y;
    internal static string yaadosquare;
    internal static string yabengali;
    internal static string yacute;
    internal static string yadeva;
    internal static string yaekorean;
    internal static string yagujarati;
    internal static string yagurmukhi;
    internal static string yahiragana;
    internal static string yakatakana;
    internal static string yakatakanahalfwidth;
    internal static string yakorean;
    internal static string yamakkanthai;
    internal static string yasmallhiragana;
    internal static string yasmallkatakana;
    internal static string yasmallkatakanahalfwidth;
    internal static string yatcyrillic;
    internal static string ycircle;
    internal static string ycircumflex;
    internal static string ydieresis;
    internal static string ydotaccent;
    internal static string ydotbelow;
    internal static string yeharabic;
    internal static string yehbarreearabic;
    internal static string yehbarreefinalarabic;
    internal static string yehfinalarabic;
    internal static string yehhamzaabovearabic;
    internal static string yehhamzaabovefinalarabic;
    internal static string yehhamzaaboveinitialarabic;
    internal static string yehhamzaabovemedialarabic;
    internal static string yehinitialarabic;
    internal static string yehmedialarabic;
    internal static string yehmeeminitialarabic;
    internal static string yehmeemisolatedarabic;
    internal static string yehnoonfinalarabic;
    internal static string yehthreedotsbelowarabic;
    internal static string yekorean;
    internal static string yen;
    internal static string yenmonospace;
    internal static string yeokorean;
    internal static string yeorinhieuhkorean;
    internal static string yerahbenyomohebrew;
    internal static string yerahbenyomolefthebrew;
    internal static string yericyrillic;
    internal static string yerudieresiscyrillic;
    internal static string yesieungkorean;
    internal static string yesieungpansioskorean;
    internal static string yesieungsioskorean;
    internal static string yetivhebrew;
    internal static string ygrave;
    internal static string yhook;
    internal static string yhookabove;
    internal static string yiarmenian;
    internal static string yicyrillic;
    internal static string yikorean;
    internal static string yinyang;
    internal static string yiwnarmenian;
    internal static string ymonospace;
    internal static string yod;
    internal static string yoddagesh;
    internal static string yoddageshhebrew;
    internal static string yodhebrew;
    internal static string yodyodhebrew;
    internal static string yodyodpatahhebrew;
    internal static string yohiragana;
    internal static string yoikorean;
    internal static string yokatakana;
    internal static string yokatakanahalfwidth;
    internal static string yokorean;
    internal static string yosmallhiragana;
    internal static string yosmallkatakana;
    internal static string yosmallkatakanahalfwidth;
    internal static string yotgreek;
    internal static string yoyaekorean;
    internal static string yoyakorean;
    internal static string yoyakthai;
    internal static string yoyingthai;
    internal static string yparen;
    internal static string ypogegrammeni;
    internal static string ypogegrammenigreekcmb;
    internal static string yr;
    internal static string yring;
    internal static string ysuperior;
    internal static string ytilde;
    internal static string yturned;
    internal static string yuhiragana;
    internal static string yuikorean;
    internal static string yukatakana;
    internal static string yukatakanahalfwidth;
    internal static string yukorean;
    internal static string yusbigcyrillic;
    internal static string yusbigiotifiedcyrillic;
    internal static string yuslittlecyrillic;
    internal static string yuslittleiotifiedcyrillic;
    internal static string yusmallhiragana;
    internal static string yusmallkatakana;
    internal static string yusmallkatakanahalfwidth;
    internal static string yuyekorean;
    internal static string yuyeokorean;
    internal static string yyabengali;
    internal static string yyadeva;
    internal static string z;
    internal static string zaarmenian;
    internal static string zacute;
    internal static string zadeva;
    internal static string zagurmukhi;
    internal static string zaharabic;
    internal static string zahfinalarabic;
    internal static string zahinitialarabic;
    internal static string zahiragana;
    internal static string zahmedialarabic;
    internal static string zainarabic;
    internal static string zainfinalarabic;
    internal static string zakatakana;
    internal static string zaqefgadolhebrew;
    internal static string zaqefqatanhebrew;
    internal static string zarqahebrew;
    internal static string zayin;
    internal static string zayindagesh;
    internal static string zayindageshhebrew;
    internal static string zayinhebrew;
    internal static string zbopomofo;
    internal static string zcaron;
    internal static string zcircle;
    internal static string zcircumflex;
    internal static string zcurl;
    internal static string zdot;
    internal static string zdotaccent;
    internal static string zdotbelow;
    internal static string zecyrillic;
    internal static string zedescendercyrillic;
    internal static string zedieresiscyrillic;
    internal static string zehiragana;
    internal static string zekatakana;
    internal static string zero;
    internal static string zeroarabic;
    internal static string zerobengali;
    internal static string zerodeva;
    internal static string zerogujarati;
    internal static string zerogurmukhi;
    internal static string zerohackarabic;
    internal static string zeroinferior;
    internal static string zeromonospace;
    internal static string zerooldstyle;
    internal static string zeropersian;
    internal static string zerosuperior;
    internal static string zerothai;
    internal static string zerowidthjoiner;
    internal static string zerowidthnonjoiner;
    internal static string zerowidthspace;
    internal static string zeta;
    internal static string zhbopomofo;
    internal static string zhearmenian;
    internal static string zhebrevecyrillic;
    internal static string zhecyrillic;
    internal static string zhedescendercyrillic;
    internal static string zhedieresiscyrillic;
    internal static string zihiragana;
    internal static string zikatakana;
    internal static string zinorhebrew;
    internal static string zlinebelow;
    internal static string zmonospace;
    internal static string zohiragana;
    internal static string zokatakana;
    internal static string zparen;
    internal static string zretroflexhook;
    internal static string zstroke;
    internal static string zuhiragana;
    internal static string zukatakana;
}
public class DevExpress.Pdf.Native.PdfGouraudShadedTriangleMeshWriter : PdfDisposableObject {
    private PdfGouraudShadedTriangleMesh mesh;
    private int bitsPerFlag;
    private int bitsPerCoordinate;
    private int bitsPerComponent;
    private double minX;
    private double xFactor;
    private double minY;
    private double yFactor;
    private Double[] minC;
    private Double[] cFactor;
    private Byte[] data;
    private MemoryStream stream;
    private BinaryWriter writer;
    private byte writingByte;
    private int currentBitOffset;
    private PdfGouraudShadedTriangleMeshWriter(PdfGouraudShadedTriangleMesh mesh);
    public static Byte[] Write(PdfGouraudShadedTriangleMesh mesh);
    private void WriteByte();
    private void WriteBits(UInt32 value, int bitsCount);
    private void Write(PdfVertex value);
    private Byte[] Write();
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.Native.PdfGraphicsPolygon : ValueType {
    [CompilerGeneratedAttribute]
private IList`1<PdfGraphicsPath> <Paths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonZero>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutlineOnly>k__BackingField;
    public IList`1<PdfGraphicsPath> Paths { get; }
    public bool NonZero { get; }
    public bool OutlineOnly { get; }
    public PdfGraphicsPolygon(IList`1<PdfGraphicsPath> paths, bool nonZero, bool outlineOnly);
    [CompilerGeneratedAttribute]
public IList`1<PdfGraphicsPath> get_Paths();
    [CompilerGeneratedAttribute]
public bool get_NonZero();
    [CompilerGeneratedAttribute]
public bool get_OutlineOnly();
    public PdfRectangle GetBBox();
    public PdfGraphicsPolygon Transform(PdfTransformationMatrix transform);
    public PdfGraphicsPolygon Clip(PdfRectangle rect);
}
public class DevExpress.Pdf.Native.PdfGraphicsState : object {
    private PdfTransformationMatrix transformationMatrix;
    private PdfColorSpace strokingColorSpace;
    private PdfColorSpace nonStrokingColorSpace;
    private PdfColor strokingColor;
    private PdfColor nonStrokingColor;
    private PdfTextState textState;
    private double lineWidth;
    private PdfLineCapStyle lineCap;
    private PdfLineJoinStyle lineJoin;
    private double miterLimit;
    private PdfLineStyle lineStyle;
    private PdfRenderingIntent renderingIntent;
    private bool strokeAdjustment;
    private PdfBlendMode blendMode;
    private PdfSoftMask softMask;
    private double strokingAlphaConstant;
    private double nonStrokingAlphaConstant;
    private bool alphaSource;
    private bool strokingOverprint;
    private bool nonStrokingOverprint;
    private PdfOverprintMode overprintMode;
    private PdfFunction blackGenerationFunction;
    private PdfFunction undercolorRemovalFunction;
    private PdfFunction[] transferFunction;
    private PdfHalftone halftone;
    private double flatnessTolerance;
    private double smoothnessTolerance;
    private bool textKnockout;
    private PdfTransformationMatrix softMaskTransformationMatrix;
    private bool isDefaultNonStrokingColor;
    public PdfTransformationMatrix TransformationMatrix { get; internal set; }
    public PdfColorSpace StrokingColorSpace { get; internal set; }
    public PdfColorSpace NonStrokingColorSpace { get; internal set; }
    public PdfColor StrokingColor { get; internal set; }
    public PdfColor NonStrokingColor { get; internal set; }
    public PdfTextState TextState { get; }
    public double LineWidth { get; internal set; }
    public PdfLineCapStyle LineCap { get; internal set; }
    public PdfLineJoinStyle LineJoin { get; public set; }
    public double MiterLimit { get; internal set; }
    public PdfLineStyle LineStyle { get; internal set; }
    public PdfRenderingIntent RenderingIntent { get; internal set; }
    public bool StrokeAdjustment { get; }
    public PdfBlendMode BlendMode { get; }
    public PdfSoftMask SoftMask { get; }
    public double StrokingAlphaConstant { get; }
    public double NonStrokingAlphaConstant { get; }
    public bool AlphaSource { get; }
    public bool StrokingOverprint { get; }
    public bool NonStrokingOverprint { get; }
    public PdfOverprintMode OverprintMode { get; }
    public PdfFunction BlackGenerationFunction { get; }
    public PdfFunction UndercolorRemovalFunction { get; }
    public PdfFunction[] TransferFunction { get; }
    public PdfHalftone Halftone { get; }
    public double FlatnessTolerance { get; internal set; }
    public double SmoothnessTolerance { get; }
    public bool TextKnockout { get; }
    public PdfTransformationMatrix SoftMaskTransformationMatrix { get; }
    public bool IsDefaultNonStrokingColor { get; }
    public PdfTransformationMatrix get_TransformationMatrix();
    internal void set_TransformationMatrix(PdfTransformationMatrix value);
    public PdfColorSpace get_StrokingColorSpace();
    internal void set_StrokingColorSpace(PdfColorSpace value);
    public PdfColorSpace get_NonStrokingColorSpace();
    internal void set_NonStrokingColorSpace(PdfColorSpace value);
    public PdfColor get_StrokingColor();
    internal void set_StrokingColor(PdfColor value);
    public PdfColor get_NonStrokingColor();
    internal void set_NonStrokingColor(PdfColor value);
    public PdfTextState get_TextState();
    public double get_LineWidth();
    internal void set_LineWidth(double value);
    public PdfLineCapStyle get_LineCap();
    internal void set_LineCap(PdfLineCapStyle value);
    public PdfLineJoinStyle get_LineJoin();
    public void set_LineJoin(PdfLineJoinStyle value);
    public double get_MiterLimit();
    internal void set_MiterLimit(double value);
    public PdfLineStyle get_LineStyle();
    internal void set_LineStyle(PdfLineStyle value);
    public PdfRenderingIntent get_RenderingIntent();
    internal void set_RenderingIntent(PdfRenderingIntent value);
    public bool get_StrokeAdjustment();
    public PdfBlendMode get_BlendMode();
    public PdfSoftMask get_SoftMask();
    public double get_StrokingAlphaConstant();
    public double get_NonStrokingAlphaConstant();
    public bool get_AlphaSource();
    public bool get_StrokingOverprint();
    public bool get_NonStrokingOverprint();
    public PdfOverprintMode get_OverprintMode();
    public PdfFunction get_BlackGenerationFunction();
    public PdfFunction get_UndercolorRemovalFunction();
    public PdfFunction[] get_TransferFunction();
    public PdfHalftone get_Halftone();
    public double get_FlatnessTolerance();
    internal void set_FlatnessTolerance(double value);
    public double get_SmoothnessTolerance();
    public bool get_TextKnockout();
    public PdfTransformationMatrix get_SoftMaskTransformationMatrix();
    public bool get_IsDefaultNonStrokingColor();
    public PdfGraphicsState Clone();
    public PdfGraphicsState CloneForTransparencyGroupRendering();
    internal PdfGraphicsStateChange ApplyParameters(PdfGraphicsStateParameters parameters);
    private PdfGraphicsStateChange ApplyParameter(T& parameter, Nullable`1<T> value, PdfGraphicsStateChange change);
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.PdfGraphicsStateChange : Enum {
    public int value__;
    public static PdfGraphicsStateChange None;
    public static PdfGraphicsStateChange Pen;
    public static PdfGraphicsStateChange RenderingIntent;
    public static PdfGraphicsStateChange Overprint;
    public static PdfGraphicsStateChange Font;
    public static PdfGraphicsStateChange BlackGenerationFunction;
    public static PdfGraphicsStateChange UndercolorRemovalFunction;
    public static PdfGraphicsStateChange TransferFunction;
    public static PdfGraphicsStateChange Halftone;
    public static PdfGraphicsStateChange FlatnessTolerance;
    public static PdfGraphicsStateChange SmoothnessTolerance;
    public static PdfGraphicsStateChange StrokeAdjustment;
    public static PdfGraphicsStateChange BlendMode;
    public static PdfGraphicsStateChange SoftMask;
    public static PdfGraphicsStateChange Alpha;
    public static PdfGraphicsStateChange TextKnockout;
}
public class DevExpress.Pdf.Native.PdfGraphicsStateParametersResourceDictionary : PdfResourceDictionary`1<PdfGraphicsStateParameters> {
    protected string Prefix { get; }
    protected string ResourceKey { get; }
    public PdfGraphicsStateParametersResourceDictionary(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfGraphicsStateParametersResourceDictionary parentResourceDictionary);
    protected virtual string get_Prefix();
    protected virtual string get_ResourceKey();
    protected virtual PdfGraphicsStateParameters CreateResource(object value);
}
public class DevExpress.Pdf.Native.PdfGrayToRGBImageScanlineSource : PdfImageScanlineSourceDecorator {
    private Byte[] sourceScanline;
    public int ComponentsCount { get; }
    public PdfGrayToRGBImageScanlineSource(IPdfImageScanlineSource source, int width);
    public virtual int get_ComponentsCount();
    public virtual void FillNextScanline(Byte[] scanlineData);
}
public static class DevExpress.Pdf.Native.PdfHashAlgorithmUtils : object {
    public static ArgumentException CreateHashAlgorithmNotSupportedException(HashAlgorithmType hashAlgorithm);
    public static string GetRSASigningAlgorithmOID(HashAlgorithmType hashAlgorithm);
    public static string GetECDSASigningAlgorithmOID(HashAlgorithmType hashAlgorithm);
    public static string GetHashOid(HashAlgorithmType hashAlgorithm);
}
public class DevExpress.Pdf.Native.PdfHelveticaFontFamily : PdfStandardFontFamily {
    private static string family;
    private static PdfVariableGlyphWidthProvider helveticaWidths;
    private static PdfVariableGlyphWidthProvider helveticaBoldWidths;
    private static WidthsProvider widthsProvider;
    private static DescriptorProvider descriptorProvider;
    protected PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> FontDescriptorProvider { get; }
    protected PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> GlyphWidthProvider { get; }
    private static PdfHelveticaFontFamily();
    protected virtual PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> get_FontDescriptorProvider();
    protected virtual PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> get_GlyphWidthProvider();
}
public abstract class DevExpress.Pdf.Native.PdfHighlight : object {
    private int pageIndex;
    public int PageIndex { get; }
    public IList`1<PdfOrientedRectangle> Rectangles { get; }
    public IList`1<PdfOrientedRectangle> MarkupRectangles { get; }
    protected PdfHighlight(int pageIndex);
    public int get_PageIndex();
    public abstract virtual IList`1<PdfOrientedRectangle> get_Rectangles();
    public virtual IList`1<PdfOrientedRectangle> get_MarkupRectangles();
}
public class DevExpress.Pdf.Native.PdfHighlightedWidgetAppearanceBuilderFactory : PdfVisitorBasedFactory`2<PdfInteractiveFormField, IPdfAnnotationAppearanceBuilder> {
    private IPdfExportFontProvider fontSearch;
    private PdfRgbaColor backgroundColor;
    public PdfHighlightedWidgetAppearanceBuilderFactory(IPdfExportFontProvider fontSearch, PdfRgbaColor backgroundColor);
    protected virtual void Visit(PdfInteractiveFormField input);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfInteractiveFormFieldVisitor.Visit(PdfChoiceFormField formField);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfInteractiveFormFieldVisitor.Visit(PdfTextFormField formField);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfInteractiveFormFieldVisitor.Visit(PdfButtonFormField formField);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfInteractiveFormFieldVisitor.Visit(PdfInteractiveFormField formField);
}
public class DevExpress.Pdf.Native.PdfHuffmanTreeBranch : PdfHuffmanTreeNode {
    private PdfHuffmanTreeNode zero;
    private PdfHuffmanTreeNode one;
    public PdfHuffmanTreeNode Zero { get; }
    public PdfHuffmanTreeNode One { get; }
    public PdfHuffmanTreeNode get_Zero();
    public PdfHuffmanTreeNode get_One();
    public void Fill(string sequence, int runLength);
    public void Fill(IDictionary`2<string, int> dictionary);
}
public class DevExpress.Pdf.Native.PdfHuffmanTreeLeaf : PdfHuffmanTreeNode {
    private int runLength;
    public int RunLength { get; }
    public PdfHuffmanTreeLeaf(int runLength);
    public int get_RunLength();
}
public abstract class DevExpress.Pdf.Native.PdfHuffmanTreeNode : object {
}
public abstract class DevExpress.Pdf.Native.PdfIconAnnotationAppearanceBuilder`1 : PdfMarkupAnnotationAppearanceBuilder`1<T> {
    private static double defaultAppearanceAlphaConstant;
    private static PdfRectangle iconBox;
    private static Encoding encoding;
    private static Byte[] startApperanceData;
    public PdfIconAnnotationAppearanceBuilder`1(T annotation);
    private static PdfIconAnnotationAppearanceBuilder`1();
    protected virtual PdfRectangle GetFormBBox();
    protected abstract virtual void RebuildIconBody(PdfFormCommandConstructor constructor, string opacityResourceName);
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfIconFitBuilder : object {
    [CompilerGeneratedAttribute]
private PdfIconScalingCircumstances <ScalingCircumstances>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfIconScalingType <ScalingType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FitToAnnotationBounds>k__BackingField;
    public PdfIconScalingCircumstances ScalingCircumstances { get; public set; }
    public PdfIconScalingType ScalingType { get; public set; }
    public double HorizontalPosition { get; public set; }
    public double VerticalPosition { get; public set; }
    public bool FitToAnnotationBounds { get; public set; }
    [CompilerGeneratedAttribute]
public PdfIconScalingCircumstances get_ScalingCircumstances();
    [CompilerGeneratedAttribute]
public void set_ScalingCircumstances(PdfIconScalingCircumstances value);
    [CompilerGeneratedAttribute]
public PdfIconScalingType get_ScalingType();
    [CompilerGeneratedAttribute]
public void set_ScalingType(PdfIconScalingType value);
    [CompilerGeneratedAttribute]
public double get_HorizontalPosition();
    [CompilerGeneratedAttribute]
public void set_HorizontalPosition(double value);
    [CompilerGeneratedAttribute]
public double get_VerticalPosition();
    [CompilerGeneratedAttribute]
public void set_VerticalPosition(double value);
    [CompilerGeneratedAttribute]
public bool get_FitToAnnotationBounds();
    [CompilerGeneratedAttribute]
public void set_FitToAnnotationBounds(bool value);
}
public abstract class DevExpress.Pdf.Native.PdfImageCache`1 : object {
    private IDictionary`2<PdfImage, ImageCacheItem<TValue>> objectStorage;
    private LinkedList`1<PdfImage> recentImages;
    private long capacity;
    private long size;
    public long Capacity { get; public set; }
    protected PdfImageCache`1(long capacity);
    public long get_Capacity();
    public void set_Capacity(long value);
    public PdfImageCacheItem<TValue> GetImage(PdfImage image, PdfImageParameters imageParameters);
    protected abstract virtual ImageCacheItem<TValue> CreateValue(PdfImage image, PdfImageParameters imageParameters);
    protected virtual bool ShouldReplaceImage(PdfImageParameters imageParameters, PdfImageParameters oldParameters);
    private void RemoveItem(PdfImage image, ImageCacheItem<TValue> value);
    private void TrimCache();
    public sealed virtual void Dispose();
    public void Clear();
}
public class DevExpress.Pdf.Native.PdfImageColor : object {
    private byte red;
    private byte green;
    private byte blue;
    private byte alpha;
    public byte Red { get; }
    public byte Green { get; }
    public byte Blue { get; }
    public byte Alpha { get; }
    public PdfImageColor(byte red, byte green, byte blue, byte alpha);
    public PdfImageColor(byte red, byte green, byte blue);
    public static PdfImageColor FromArgb(byte a, byte r, byte g, byte b);
    public byte get_Red();
    public byte get_Green();
    public byte get_Blue();
    public byte get_Alpha();
}
public class DevExpress.Pdf.Native.PdfImageData : object {
    private PdfImageDataSource data;
    private int width;
    private int height;
    private int stride;
    private PdfPixelFormat pixelFormat;
    private PdfImageColor[] palette;
    public PdfImageDataSource Data { get; }
    public int Width { get; }
    public int Height { get; }
    public int Stride { get; }
    public PdfPixelFormat PixelFormat { get; }
    public PdfImageColor[] Palette { get; }
    public PdfImageData(PdfImageDataSource data, int width, int height, int stride, PdfPixelFormat pixelFormat, PdfImageColor[] palette);
    public PdfImageDataSource get_Data();
    public int get_Width();
    public int get_Height();
    public int get_Stride();
    public PdfPixelFormat get_PixelFormat();
    public PdfImageColor[] get_Palette();
}
public abstract class DevExpress.Pdf.Native.PdfImageDataSource : object {
    protected static int BaseSourceComponentsCount;
    private IPdfImageScanlineSource source;
    private int width;
    private Byte[] sourceScanline;
    protected int Width { get; }
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    protected int SourceComponentsCount { get; }
    protected bool SourceHasAlpha { get; }
    protected PdfImageDataSource(IPdfImageScanlineSource source, int width);
    protected int get_Width();
    public abstract virtual int get_ComponentsCount();
    public virtual bool get_HasAlpha();
    protected int get_SourceComponentsCount();
    protected bool get_SourceHasAlpha();
    protected Byte[] GetNextSourceScanline();
    public sealed virtual void FillNextScanline(Byte[] scanlineData);
    public abstract virtual void FillBuffer(Byte[] buffer, int scanlineCount);
    public virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfImageHighlight : PdfHighlight {
    private PdfOrientedRectangle rectangle;
    public IList`1<PdfOrientedRectangle> Rectangles { get; }
    internal PdfImageHighlight(int pageIndex, PdfOrientedRectangle rectangle);
    public virtual IList`1<PdfOrientedRectangle> get_Rectangles();
}
public class DevExpress.Pdf.Native.PdfImageParameters : ValueType {
    private int width;
    private int height;
    private bool shouldInterpolate;
    public int Width { get; }
    public int Height { get; }
    public bool ShouldInterpolate { get; }
    public PdfImageParameters(int width, int height, bool shouldInterpolate);
    public int get_Width();
    public int get_Height();
    public bool get_ShouldInterpolate();
}
public class DevExpress.Pdf.Native.PdfImageScanline : object {
    private Byte[] scanlineData;
    private Byte[] maskData;
    public Byte[] ScanlineData { get; }
    public Byte[] MaskData { get; }
    public PdfImageScanline(int width, int componentsCount);
    public Byte[] get_ScanlineData();
    public Byte[] get_MaskData();
}
public abstract class DevExpress.Pdf.Native.PdfImageScanlineDecoder : object {
    private IList`1<PdfRange> colorKey;
    private bool isColorKeyPresent;
    private int width;
    private int componentsCount;
    protected IList`1<PdfRange> ColorKey { get; }
    protected int Width { get; }
    public bool IsColorKeyPresent { get; }
    public int ComponentsCount { get; }
    public int Stride { get; }
    protected PdfImageScanlineDecoder(PdfImage image, int componentsCount);
    public static PdfImageScanlineDecoder CreateImageScanlineDecoder(PdfImage image, int componentsCount);
    protected IList`1<PdfRange> get_ColorKey();
    protected int get_Width();
    public bool get_IsColorKeyPresent();
    public int get_ComponentsCount();
    public abstract virtual int get_Stride();
    public abstract virtual void FillNextScanline(Byte[] scanline, Byte[] sourceData, int sourceOffset);
}
public abstract class DevExpress.Pdf.Native.PdfImageScanlineSourceDecorator : object {
    private IPdfImageScanlineSource source;
    private int sourceWidth;
    public bool HasAlpha { get; }
    public int ComponentsCount { get; }
    protected int SourceWidth { get; }
    protected IPdfImageScanlineSource Source { get; }
    protected PdfImageScanlineSourceDecorator(IPdfImageScanlineSource source, int sourceWidth);
    public sealed virtual bool get_HasAlpha();
    public virtual int get_ComponentsCount();
    protected int get_SourceWidth();
    protected IPdfImageScanlineSource get_Source();
    public sealed virtual void Dispose();
    public abstract virtual void FillNextScanline(Byte[] scanlineData);
}
public static class DevExpress.Pdf.Native.PdfImageScanlineSourceFactory : object {
    private static ThreadLocal`1<IPdfImageScanlineSourceFactory> factory;
    private static PdfImageScanlineSourceFactory();
    private static IPdfImageScanlineSourceFactory CreateFactory();
    public static IPdfImageScanlineSource CreateInterpolator(IPdfImageScanlineSource source, int targetWidth, int targetHeight, int sourceWidth, int sourceHeight, bool shouldInterpolate);
    public static IPdfImageScanlineSource CreateIndexedScanlineSource(IPdfImageScanlineSource source, int width, int height, int bitsPerComponent, Byte[] lookupTable, int baseColorSpaceComponentsCount);
}
public class DevExpress.Pdf.Native.PdfImageSelection : PdfSelection {
    private int pageIndex;
    private PdfPageImageData pageImageData;
    [CompilerGeneratedAttribute]
private PdfRectangle <SelectedBBox>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfHighlight> <Highlights>k__BackingField;
    public PdfPageImageData PageImageData { get; }
    public PdfRectangle SelectedBBox { get; }
    public PdfDocumentContentType ContentType { get; }
    public IList`1<PdfHighlight> Highlights { get; }
    public PdfImageSelection(int pageIndex, PdfPageImageData pageImageData, PdfRectangle selectedBBox);
    public static bool AreEqual(PdfImageSelection selection1, PdfImageSelection selection2);
    public PdfPageImageData get_PageImageData();
    [CompilerGeneratedAttribute]
public PdfRectangle get_SelectedBBox();
    public virtual PdfDocumentContentType get_ContentType();
    [CompilerGeneratedAttribute]
public virtual IList`1<PdfHighlight> get_Highlights();
}
public class DevExpress.Pdf.Native.PdfImageSelector : object {
    private static double selectionPrecision;
    private IPdfViewerLayoutInfoProvider controller;
    private PdfPageDataCache pageDataCache;
    private PdfSelectionState selectionState;
    private bool selectionInProgress;
    private PdfDocumentPosition selectionStartPosition;
    private int selectionStartImageIndex;
    public bool SelectionInProgress { get; public set; }
    public PdfImageSelector(IPdfViewerLayoutInfoProvider controller, PdfPageDataCache pageDataCache, PdfSelectionState selectionState);
    private static PdfRectangle GetImageSelectionRectangle(PdfRectangle imageRectangle, PdfRectangle rect);
    public bool get_SelectionInProgress();
    public void set_SelectionInProgress(bool value);
    public bool HasContent(PdfDocumentPosition position);
    public bool StartSelection(PdfDocumentPosition position);
    public bool PerformSelection(PdfDocumentPosition position);
    public void EndSelection();
    public IList`1<PdfImageSelection> SelectImages(PdfDocumentArea documentArea);
    public IList`1<PdfImageSelection> SelectImages(PdfDocumentPosition startPosition, PdfDocumentPosition endPosition);
    private int FindImageByPosition(PdfDocumentPosition position);
    private IList`1<PdfImageSelection> SelectImagesOnPageBetweenPoints(PdfDocumentPosition startPosition, PdfDocumentPosition endPosition);
}
public enum DevExpress.Pdf.Native.PdfImageSMaskInDataType : Enum {
    public int value__;
    public static PdfImageSMaskInDataType None;
    public static PdfImageSMaskInDataType FromImage;
    public static PdfImageSMaskInDataType FromImagePreblended;
}
public abstract class DevExpress.Pdf.Native.PdfImmediateRenderCommandInterpreter : PdfCommandInterpreter {
    protected bool IsPrinting { get; }
    protected PdfImmediateRenderCommandInterpreter(PdfPage page, PdfRectangle boundingBox, PdfGraphicsState initalState);
    protected PdfImmediateRenderCommandInterpreter(PdfPage page, PdfRectangle boundingBox);
    protected abstract virtual bool get_IsPrinting();
    public virtual void DrawMarkedContent(IEnumerable`1<PdfCommand> commands, PdfProperties properties, string tag);
}
public class DevExpress.Pdf.Native.PdfIndexDescription : ValueType {
    private int startValue;
    private int count;
    public int StartValue { get; }
    public int Count { get; }
    public PdfIndexDescription(int startValue, int count);
    public int get_StartValue();
    public int get_Count();
}
public class DevExpress.Pdf.Native.PdfIndexedColorSpaceImageScanlineSource : PdfImageScanlineSourceDecorator {
    private int baseColorSpaceComponentsCount;
    private Byte[] buffer;
    private Byte[] lookupTable;
    private int shift;
    public int ComponentsCount { get; }
    public PdfIndexedColorSpaceImageScanlineSource(IPdfImageScanlineSource source, int width, int bitsPerComponent, Byte[] lookupTable, int baseColorSpaceComponentsCount);
    public virtual int get_ComponentsCount();
    public virtual void FillNextScanline(Byte[] scanlineData);
}
public enum DevExpress.Pdf.Native.PdfIndexToLocFormat : Enum {
    public int value__;
    public static PdfIndexToLocFormat Short;
    public static PdfIndexToLocFormat Long;
}
public class DevExpress.Pdf.Native.PdfIndirectObject : PdfObjectPointer {
    private PdfDataStream stream;
    public PdfDataStream Stream { get; }
    public PdfIndirectObject(int number, int generation, long offset, PdfDataStream stream);
    public PdfDataStream get_Stream();
}
public class DevExpress.Pdf.Native.PdfIndirectObjectId : ValueType {
    private int number;
    private Guid collectionId;
    public PdfIndirectObjectId(Guid collectionId, int number);
    public sealed virtual bool Equals(PdfIndirectObjectId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.PdfInkAnnotationAppearanceBuilder : PdfMarkupAnnotationAppearanceBuilder`1<PdfInkAnnotation> {
    public PdfInkAnnotationAppearanceBuilder(PdfInkAnnotation markupAnnotation);
    protected virtual PdfRectangle GetFormBBox();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfInkAnnotationState : PdfMarkupAnnotationState`1<PdfInkAnnotation> {
    private PdfObservableCollectionWrapper`1<PdfPoint[]> inks;
    public IList`1<PdfPoint[]> Inks { get; }
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    public PdfRectangle Rect { get; public set; }
    public PdfInkAnnotationState(PdfPageState pageState, PdfInkAnnotation annotation);
    public IList`1<PdfPoint[]> get_Inks();
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
    public virtual PdfRectangle get_Rect();
    public virtual void set_Rect(PdfRectangle value);
    private void InksChanged(object sender, PdfObservableCollectionEventArgs`1<PdfPoint[]> e);
    private PdfRectangle CalcRect();
    private void UpdateRect();
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfInMemoryObjectCloningCollection : PdfObjectCloningCollection {
    public PdfInMemoryObjectCloningCollection(PdfObjectCollection collection, Dictionary`2<IPdfObjectId, int> clonedObjects);
    protected virtual PdfObjectReference AddObjectToWrite(object value, int number);
}
public class DevExpress.Pdf.Native.PdfInMemoryObjectWritingStrategy : object {
    private PdfObjectCollection collection;
    internal PdfInMemoryObjectWritingStrategy(PdfObjectCollection collection);
    public sealed virtual PdfObjectReference AddObjectToWrite(object value, int number);
    public sealed virtual PdfObjectCloningCollection CreateCloningCollection(Dictionary`2<IPdfObjectId, int> clonedObjects);
    public sealed virtual void WriteIndirectObject(PdfObject value);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfInteractiveFormFieldCollection : PdfObject {
    private List`1<PdfInteractiveFormField> fields;
    public PdfInteractiveFormField Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfInteractiveFormField>.IsReadOnly { get; }
    private PdfInteractiveFormFieldCollection(int objectNumber);
    public PdfInteractiveFormFieldCollection(PdfReaderArray fieldsArray, PdfInteractiveForm form, PdfInteractiveFormField parent, PdfObjectCollection objects);
    public sealed virtual PdfInteractiveFormField get_Item(int index);
    public sealed virtual void set_Item(int index, PdfInteractiveFormField value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfInteractiveFormField>.get_IsReadOnly();
    public void AddFieldWithAncestors(PdfInteractiveFormField formField);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isClonning);
    private sealed virtual override int System.Collections.Generic.IList<DevExpress.Pdf.PdfInteractiveFormField>.IndexOf(PdfInteractiveFormField item);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Pdf.PdfInteractiveFormField>.Insert(int index, PdfInteractiveFormField item);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Pdf.PdfInteractiveFormField>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfInteractiveFormField>.Add(PdfInteractiveFormField item);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfInteractiveFormField>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfInteractiveFormField>.Contains(PdfInteractiveFormField item);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfInteractiveFormField>.CopyTo(PdfInteractiveFormField[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfInteractiveFormField>.Remove(PdfInteractiveFormField item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<PdfInteractiveFormField> System.Collections.Generic.IEnumerable<DevExpress.Pdf.PdfInteractiveFormField>.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfInteractiveFormFieldProperties : object {
    [CompilerGeneratedAttribute]
private PdfDocumentCatalog <DocumentCatalog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfInteractiveFormFieldFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternateName>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfWidgetAnnotation <Widget>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfInteractiveFormField <ValuesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfInteractiveFormField <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfTextJustification> <TextJustification>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AppearanceCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAdditionalActions <AdditionalActions>k__BackingField;
    public PdfDocumentCatalog DocumentCatalog { get; }
    public string Name { get; }
    public PdfInteractiveFormFieldFlags Flags { get; public set; }
    public string AlternateName { get; public set; }
    public PdfWidgetAnnotation Widget { get; public set; }
    public PdfInteractiveFormField ValuesProvider { get; public set; }
    public PdfInteractiveFormField Parent { get; public set; }
    public Nullable`1<PdfTextJustification> TextJustification { get; public set; }
    public Byte[] AppearanceCommands { get; public set; }
    public PdfAdditionalActions AdditionalActions { get; public set; }
    public PdfInteractiveFormFieldProperties(PdfDocumentCatalog documentCatalog, string name);
    [CompilerGeneratedAttribute]
public sealed virtual PdfDocumentCatalog get_DocumentCatalog();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual PdfInteractiveFormFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(PdfInteractiveFormFieldFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AlternateName();
    [CompilerGeneratedAttribute]
public void set_AlternateName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfWidgetAnnotation get_Widget();
    [CompilerGeneratedAttribute]
public void set_Widget(PdfWidgetAnnotation value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfInteractiveFormField get_ValuesProvider();
    [CompilerGeneratedAttribute]
public void set_ValuesProvider(PdfInteractiveFormField value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfInteractiveFormField get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(PdfInteractiveFormField value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PdfTextJustification> get_TextJustification();
    [CompilerGeneratedAttribute]
public void set_TextJustification(Nullable`1<PdfTextJustification> value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_AppearanceCommands();
    [CompilerGeneratedAttribute]
public void set_AppearanceCommands(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfAdditionalActions get_AdditionalActions();
    [CompilerGeneratedAttribute]
public void set_AdditionalActions(PdfAdditionalActions value);
}
public abstract class DevExpress.Pdf.Native.PdfInteractiveFormFieldsList : PdfObject {
    protected PdfInteractiveFormFieldsList(int number);
    public abstract virtual IEnumerable`1<PdfInteractiveFormField> GetFormFields(PdfObjectCollection objects);
}
public class DevExpress.Pdf.Native.PdfInteractiveFormFieldTextAppearance : object {
    [CompilerGeneratedAttribute]
private PdfFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CharacterSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WordSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalScaling>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRGBColor <FontColor>k__BackingField;
    public PdfFont Font { get; public set; }
    public double FontSize { get; public set; }
    public double CharacterSpacing { get; public set; }
    public double WordSpacing { get; public set; }
    public double HorizontalScaling { get; public set; }
    public PdfRGBColor FontColor { get; public set; }
    public PdfInteractiveFormFieldTextAppearance(PdfInteractiveFormFieldTextState state);
    [CompilerGeneratedAttribute]
public PdfFont get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(PdfFont value);
    [CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public double get_CharacterSpacing();
    [CompilerGeneratedAttribute]
public void set_CharacterSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_WordSpacing();
    [CompilerGeneratedAttribute]
public void set_WordSpacing(double value);
    [CompilerGeneratedAttribute]
public double get_HorizontalScaling();
    [CompilerGeneratedAttribute]
public void set_HorizontalScaling(double value);
    [CompilerGeneratedAttribute]
public PdfRGBColor get_FontColor();
    [CompilerGeneratedAttribute]
public void set_FontColor(PdfRGBColor value);
}
public class DevExpress.Pdf.Native.PdfInteractiveFormFieldTextState : object {
    public static double DefaultFontSize;
    private PdfSetTextFontCommand fontCommand;
    private double characterSpacing;
    private double wordSpacing;
    private double horizontalScaling;
    private PdfColor fontColor;
    private Byte[] commandsToFill;
    public PdfSetTextFontCommand FontCommand { get; }
    public double CharacterSpacing { get; }
    public double WordSpacing { get; }
    public double HorizontalScaling { get; }
    public double FontSize { get; }
    public PdfColor FontColor { get; }
    public PdfInteractiveFormFieldTextState(PdfInteractiveFormField formField);
    public PdfSetTextFontCommand get_FontCommand();
    public double get_CharacterSpacing();
    public double get_WordSpacing();
    public double get_HorizontalScaling();
    public double get_FontSize();
    public PdfColor get_FontColor();
    public void FillCommands(PdfCommandConstructor constructor);
    private IEnumerable`1<PdfCommand> GetAppearanceCommandsInheritable(PdfInteractiveFormField formField);
}
public enum DevExpress.Pdf.Native.PdfInteractiveFormFieldUsageRight : Enum {
    public int value__;
    public static PdfInteractiveFormFieldUsageRight Add;
    public static PdfInteractiveFormFieldUsageRight Delete;
    public static PdfInteractiveFormFieldUsageRight FillIn;
    public static PdfInteractiveFormFieldUsageRight Import;
    public static PdfInteractiveFormFieldUsageRight Export;
    public static PdfInteractiveFormFieldUsageRight SubmitStandalone;
    public static PdfInteractiveFormFieldUsageRight SpawnTemplate;
    public static PdfInteractiveFormFieldUsageRight BarcodePlaintext;
    public static PdfInteractiveFormFieldUsageRight Online;
}
public class DevExpress.Pdf.Native.PdfInteractiveFormFieldValueChangedEventArgs : EventArgs {
    private string fieldName;
    private object oldValue;
    private object newValue;
    public string FieldName { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public PdfInteractiveFormFieldValueChangedEventArgs(string fieldName, object oldValue, object newValue);
    public string get_FieldName();
    public object get_OldValue();
    public object get_NewValue();
}
internal class DevExpress.Pdf.Native.PdfInteractiveFormFieldValueChangedEventHandler : MulticastDelegate {
    public PdfInteractiveFormFieldValueChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PdfInteractiveFormFieldValueChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PdfInteractiveFormFieldValueChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfInteractiveFormFieldValueChangingEventArgs : CancelEventArgs {
    private string fieldName;
    private object oldValue;
    private object newValue;
    public string FieldName { get; }
    public object OldValue { get; }
    public object NewValue { get; public set; }
    public PdfInteractiveFormFieldValueChangingEventArgs(string fieldName, object oldValue, object newValue);
    public string get_FieldName();
    public object get_OldValue();
    public object get_NewValue();
    public void set_NewValue(object value);
}
internal class DevExpress.Pdf.Native.PdfInteractiveFormFieldValueChangingEventHandler : MulticastDelegate {
    public PdfInteractiveFormFieldValueChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PdfInteractiveFormFieldValueChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PdfInteractiveFormFieldValueChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfInteractiveOperation : object {
    private PdfAction action;
    private PdfDestination destination;
    public PdfAction Action { get; }
    public PdfDestination Destination { get; }
    public PdfInteractiveOperation(PdfAction action, PdfDestination destination);
    public PdfInteractiveOperation(PdfAction action);
    public static PdfInteractiveOperation Create(PdfOutline outline);
    public PdfAction get_Action();
    public PdfDestination get_Destination();
}
public class DevExpress.Pdf.Native.PdfInvertedImageScanlineSource : object {
    private IPdfImageScanlineSource source;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfInvertedImageScanlineSource(IPdfImageScanlineSource source);
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void FillNextScanline(Byte[] scanline);
    public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfJPXImageScanlineSource : object {
    private JPXImage image;
    private int offset;
    private JPXTile[] tiles;
    private int startTileIndex;
    [CompilerGeneratedAttribute]
private bool <HasAlpha>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ComponentsCount>k__BackingField;
    public bool HasAlpha { get; }
    public int ComponentsCount { get; }
    public PdfJPXImageScanlineSource(JPXImage image, int componentsCount, bool hasAlpha);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasAlpha();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ComponentsCount();
    private void FillNextTileRow();
    public sealed virtual void FillNextScanline(Byte[] scanline);
    private void DisposeTiles();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <FillNextTileRow>b__11_0(int i);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfKidsStateList : PdfObject {
    private IList`1<KidState> sourceKidStates;
    private IList`1<KidState> kidStates;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    private PdfKidsStateList(IList`1<KidState> sourcekidStates, int objectNumber);
    public PdfKidsStateList(IList`1<PdfInteractiveFormField> kids, PdfObjectCollection objectCollection);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isCloning);
    protected internal virtual void NotifyMergeCompleted(PdfObjectCollection objects);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfLabColorSpaceImageScanlineSource : PdfCIEBasedImageScanlineSource {
    private IList`1<PdfRange> decode;
    public PdfLabColorSpaceImageScanlineSource(IPdfImageScanlineSource source, PdfColorSpace colorSpace, IList`1<PdfRange> decode, int width);
    protected virtual void Decode(Double[] pixelBuffer, Byte[] data, int offset);
}
public abstract class DevExpress.Pdf.Native.PdfLegacyCommandInterpreter : PdfImmediateRenderCommandInterpreter {
    private Stack`1<PdfTransformationMatrix> tilingPatternTransformationMatrixStack;
    private PdfPolygonClipper boundingBoxClipper;
    private Nullable`1<int> currentFormObjectNumber;
    private PdfTransformationMatrix patternTransformationMatrix;
    private int graphicsStateStackLock;
    public PdfTransformationMatrix PatternTransformationMatrix { get; }
    protected int MinGraphicsStateCount { get; }
    protected IList`1<PdfGraphicsPath> TransformedPaths { get; }
    protected bool IsPrinting { get; }
    protected IList`1<PdfGraphicsPath> BoundsClippedTransformedPaths { get; }
    protected PdfLegacyCommandInterpreter(PdfPage page, int rotateAngle, PdfRectangle boundingBox);
    public PdfTransformationMatrix get_PatternTransformationMatrix();
    protected virtual int get_MinGraphicsStateCount();
    protected virtual IList`1<PdfGraphicsPath> get_TransformedPaths();
    protected virtual bool get_IsPrinting();
    protected IList`1<PdfGraphicsPath> get_BoundsClippedTransformedPaths();
    public virtual void DrawForm(PdfForm form);
    protected void UpdatePatternTransformationMatrix();
}
public class DevExpress.Pdf.Native.PdfLibJpegTurboDCTDecoderFactory : object {
    private Func`1<LibJpegTurboWrapper> wrapperFactory;
    private PdfLibJpegTurboDCTDecoderFactory(Func`1<LibJpegTurboWrapper> wrapperFactory);
    public static PdfLibJpegTurboDCTDecoderFactory Create();
    public sealed virtual IPdfImageScanlineSource CreateSource(Byte[] imageData, PdfImage image);
}
public class DevExpress.Pdf.Native.PdfLibJpegTurboImageScanlineSource : object {
    private LibJpegTurboWrapper wrapper;
    private int width;
    private int componentsCount;
    private IList`1<PdfRange> colorKeyMask;
    private Byte[] buffer;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfLibJpegTurboImageScanlineSource(Byte[] imageData, PdfImage image, Func`1<LibJpegTurboWrapper> wrapperFactory);
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void FillNextScanline(Byte[] scanlineData);
    public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfLineAnnotationBuilder : PdfPathAnnotationBuilder {
    [CompilerGeneratedAttribute]
private PdfPoint <StartPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <EndPoint>k__BackingField;
    public PdfPoint StartPoint { get; public set; }
    public PdfPoint EndPoint { get; public set; }
    public PdfLineAnnotationBuilder(PdfPoint startPoint, PdfPoint endPoint);
    [CompilerGeneratedAttribute]
public sealed virtual PdfPoint get_StartPoint();
    [CompilerGeneratedAttribute]
public void set_StartPoint(PdfPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfPoint get_EndPoint();
    [CompilerGeneratedAttribute]
public void set_EndPoint(PdfPoint value);
}
public class DevExpress.Pdf.Native.PdfLineAnnotationState : PdfUnclosedPathAnnotationState`1<PdfLineAnnotation> {
    public PdfLineAnnotationState(PdfPageState pageState, PdfLineAnnotation pathAnnotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfLineSegment : ValueType {
    private PdfPoint point1;
    private PdfPoint point2;
    public double Length { get; }
    public PdfRectangle BoundingBox { get; }
    public PdfPoint Point1 { get; }
    public PdfPoint Point2 { get; }
    public PdfLineSegment(PdfPoint point1, PdfPoint point2);
    public double get_Length();
    public PdfRectangle get_BoundingBox();
    public PdfPoint get_Point1();
    public PdfPoint get_Point2();
    public PdfLineSegment Transform(PdfTransformationMatrix matrix);
}
public class DevExpress.Pdf.Native.PdfLinkAnnotationBuilder : PdfAnnotationBuilder {
    [CompilerGeneratedAttribute]
private PdfDestinationObject <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public PdfDestinationObject Destination { get; }
    public string Uri { get; }
    public PdfLinkAnnotationBuilder(PdfRectangle rect, PdfDestinationObject destinationObject);
    public PdfLinkAnnotationBuilder(PdfRectangle rect, string uri);
    [CompilerGeneratedAttribute]
public sealed virtual PdfDestinationObject get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uri();
}
public class DevExpress.Pdf.Native.PdfLinkAnnotationState : PdfAnnotationState`1<PdfLinkAnnotation> {
    private Lazy`1<PdfInteractiveOperation> interactiveOperation;
    private string hintText;
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    public PdfAnnotationHighlightingMode HighlightMode { get; public set; }
    public PdfInteractiveOperation InteractiveOperation { get; }
    public string HintText { get; }
    public PdfLinkAnnotationState(PdfPageState pageState, PdfLinkAnnotation linkAnnotation);
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
    public PdfAnnotationHighlightingMode get_HighlightMode();
    public void set_HighlightMode(PdfAnnotationHighlightingMode value);
    public PdfInteractiveOperation get_InteractiveOperation();
    public string get_HintText();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfLinkAnnotationState/<IterateActions>d__12")]
private IEnumerable`1<PdfAction> IterateActions();
    public void SetUri(string uri);
    public string FindUri();
    public PdfDestination FindDestination();
    public void SetDestination(PdfDestination destination);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfListBoxEditValue : object {
    private int topIndex;
    private IList`1<string> selectedValues;
    public int TopIndex { get; }
    public IList`1<string> SelectedValues { get; }
    public PdfListBoxEditValue(int topIndex, IList`1<string> selectedValues);
    public int get_TopIndex();
    public IList`1<string> get_SelectedValues();
}
public class DevExpress.Pdf.Native.PdfMarkupAnnotationAppearanceBuilder`1 : PdfAnnotationAppearanceBuilder`1<T> {
    protected PdfMarkupAnnotationAppearanceBuilder`1(T markupAnnotation);
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfMarkupAnnotationBuilder : PdfAnnotationBuilder {
    private Nullable`1<DateTimeOffset> creationDate;
    [CompilerGeneratedAttribute]
private double <Opacity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAnnotation <InReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfMarkupAnnotationReplyType <ReplyType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rotate>k__BackingField;
    public double Opacity { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public PdfAnnotation InReplyTo { get; public set; }
    public PdfMarkupAnnotationReplyType ReplyType { get; public set; }
    public int Rotate { get; public set; }
    public PdfMarkupAnnotationBuilder(PdfRectangle bounds);
    public PdfMarkupAnnotationBuilder(PdfMarkupAnnotation annotation);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Opacity();
    [CompilerGeneratedAttribute]
public void set_Opacity(double value);
    public sealed virtual Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfAnnotation get_InReplyTo();
    [CompilerGeneratedAttribute]
public void set_InReplyTo(PdfAnnotation value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfMarkupAnnotationReplyType get_ReplyType();
    [CompilerGeneratedAttribute]
public void set_ReplyType(PdfMarkupAnnotationReplyType value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Rotate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Rotate(int value);
}
public class DevExpress.Pdf.Native.PdfMarkupAnnotationDataFactory : PdfVisitorBasedFactory`2<IPdfAnnotationState, PdfMarkupAnnotationData> {
    protected virtual void Visit(IPdfAnnotationState input);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfCommonAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfLinkAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfTextMarkupAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfWidgetAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfTextAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(IPdfMarkupAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfFreeTextAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfRubberStampAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfSquareAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfCircleAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfPolygonAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfPolyLineAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfLineAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfSoundAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfFileAttachmentAnnotationState state);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfAnnotationStateVisitor.Visit(PdfInkAnnotationState state);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfMarkupAnnotationReplyCollection : object {
    private IPdfAnnotationStateCommentReplies replies;
    public int Count { get; }
    public PdfMarkupAnnotationComment Item { get; }
    internal PdfMarkupAnnotationReplyCollection(IPdfAnnotationStateCommentReplies replies);
    public sealed virtual int get_Count();
    public sealed virtual PdfMarkupAnnotationComment get_Item(int index);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfMarkupAnnotationReplyCollection/<GetEnumerator>d__6")]
public sealed virtual IEnumerator`1<PdfMarkupAnnotationComment> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.Native.PdfMarkupAnnotationReviewCollection : object {
    private IPdfAnnotationStateCommentReviews reviews;
    public int Count { get; }
    internal PdfMarkupAnnotationReviewCollection(IPdfAnnotationStateCommentReviews reviews);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfMarkupAnnotationReviewCollection/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<PdfMarkupAnnotationReview> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class DevExpress.Pdf.Native.PdfMarkupAnnotationState`1 : PdfAnnotationState`1<TMarkupAnnotation> {
    private static string markedStateModel;
    private static string markedState;
    private static string unmarkedState;
    private Lazy`1<PdfAnnotationStateComment> comment;
    private List`1<IPdfMarkupAnnotationState> groupedAnnotations;
    private PdfTextAnnotation markedStateAnnotation;
    public string Type { get; }
    public PdfFilterAnnotationType FilterType { get; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public string Author { get; public set; }
    public string Subject { get; public set; }
    public int Rotate { get; public set; }
    public bool Marked { get; public set; }
    public PdfRGBColor Color { get; public set; }
    public bool Hidden { get; public set; }
    public double Opacity { get; public set; }
    public IPdfAnnotationStateComment Comment { get; }
    public IEnumerable`1<IPdfMarkupAnnotationState> GroupedAnnotations { get; }
    public PdfMarkupAnnotationState`1(PdfPageState pageState, TMarkupAnnotation markupAnnotation, PdfAnnotationStateComment parentComment);
    public sealed virtual string get_Type();
    public sealed virtual PdfFilterAnnotationType get_FilterType();
    public virtual Nullable`1<DateTimeOffset> get_CreationDate();
    public virtual void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public virtual string get_Author();
    public virtual void set_Author(string value);
    public sealed virtual string get_Subject();
    public sealed virtual void set_Subject(string value);
    public sealed virtual int get_Rotate();
    public sealed virtual void set_Rotate(int value);
    public sealed virtual bool get_Marked();
    public sealed virtual void set_Marked(bool value);
    public virtual PdfRGBColor get_Color();
    public virtual void set_Color(PdfRGBColor value);
    public virtual bool get_Hidden();
    public virtual void set_Hidden(bool value);
    public virtual double get_Opacity();
    public virtual void set_Opacity(double value);
    public sealed virtual IPdfAnnotationStateComment get_Comment();
    public sealed virtual IEnumerable`1<IPdfMarkupAnnotationState> get_GroupedAnnotations();
    public virtual bool RemoveFromPage();
    public virtual bool Contains(PdfPoint cropBoxPoint);
    public void NotifyPropertyChanged();
    public virtual PdfDocumentArea GetInteractiveArea();
    public virtual IList`1<PdfPoint[]> GetSelectionPolygon();
    private void SetKidProperties(Action`1<IPdfMarkupAnnotationState> stateAction);
}
public abstract class DevExpress.Pdf.Native.PdfMarkupExternalData : PdfObject {
    public PdfMarkupExternalDataType Type { get; }
    protected PdfMarkupExternalData(PdfReaderDictionary dictionary);
    public static PdfMarkupExternalData Parse(PdfPage page, PdfAnnotation parent, PdfReaderDictionary dictionary);
    public abstract virtual PdfMarkupExternalDataType get_Type();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.Native.PdfMarkupExternalDataType : Enum {
    public int value__;
    [PdfFieldNameAttribute("Markup3D")]
public static PdfMarkupExternalDataType Comment3D;
    [PdfFieldNameAttribute("3DM")]
public static PdfMarkupExternalDataType Measurement3D;
    [PdfFieldNameAttribute("MarkupGeo")]
public static PdfMarkupExternalDataType Geospatial3D;
}
public static class DevExpress.Pdf.Native.PdfMathUtils : object {
    public static byte ToByte(double value);
    public static int ToInt32(double value);
    public static double Min(double value1, double value2);
    public static double Max(double value1, double value2);
    public static double NormalizeAngle(double angle);
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.PdfModifierKeys : Enum {
    public int value__;
    public static PdfModifierKeys None;
    public static PdfModifierKeys Alt;
    public static PdfModifierKeys Control;
    public static PdfModifierKeys Shift;
    public static PdfModifierKeys Windows;
}
public class DevExpress.Pdf.Native.PdfMouseAction : ValueType {
    private PdfDocumentPosition documentPosition;
    private PdfMouseButton button;
    private PdfModifierKeys modifierKeys;
    private int clicks;
    private bool isOutsideOfView;
    public PdfDocumentPosition DocumentPosition { get; }
    public PdfMouseButton Button { get; }
    public PdfModifierKeys ModifierKeys { get; }
    public int Clicks { get; }
    public bool IsOutsideOfView { get; }
    public PdfMouseAction(PdfDocumentPosition documentPosition, PdfMouseButton button, PdfModifierKeys modifierKeys, int clicks, bool isOutsideOfView);
    public PdfMouseAction(PdfDocumentPosition documentPosition, PdfMouseButton button, PdfModifierKeys modifierKeys, int clicks);
    public PdfDocumentPosition get_DocumentPosition();
    public PdfMouseButton get_Button();
    public PdfModifierKeys get_ModifierKeys();
    public int get_Clicks();
    public bool get_IsOutsideOfView();
}
public enum DevExpress.Pdf.Native.PdfMouseButton : Enum {
    public int value__;
    public static PdfMouseButton None;
    public static PdfMouseButton Left;
    public static PdfMouseButton Right;
    public static PdfMouseButton Middle;
}
public enum DevExpress.Pdf.Native.PdfMovementDirection : Enum {
    public int value__;
    public static PdfMovementDirection Left;
    public static PdfMovementDirection Down;
    public static PdfMovementDirection Right;
    public static PdfMovementDirection Up;
    public static PdfMovementDirection NextWord;
    public static PdfMovementDirection PreviousWord;
    public static PdfMovementDirection LineStart;
    public static PdfMovementDirection LineEnd;
    public static PdfMovementDirection DocumentStart;
    public static PdfMovementDirection DocumentEnd;
}
public class DevExpress.Pdf.Native.PdfMultilineTextBoxContentMetrics : object {
    [CompilerGeneratedAttribute]
private PdfFontMetrics <FontMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <ContentRectangle>k__BackingField;
    public PdfFontMetrics FontMetrics { get; }
    public PdfRectangle ContentRectangle { get; }
    public PdfMultilineTextBoxContentMetrics(PdfFontMetrics fontMetrics, PdfRectangle contentRectangle);
    [CompilerGeneratedAttribute]
public PdfFontMetrics get_FontMetrics();
    [CompilerGeneratedAttribute]
public PdfRectangle get_ContentRectangle();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfNameTree`1 : object {
    private static PdfNameTreeEncoding encoding;
    private IDictionary`2<string, PdfDeferredItem`1<T>> newItems;
    private IPdfNameTreeNode`1<T, T> rootNode;
    public T Item { get; public set; }
    public IReadOnlyCollection`1<string> Names { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<T> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public PdfNameTree`1(PdfReaderDictionary root, PdfCreateTreeElementAction`1<T> createElement);
    private static PdfNameTree`1();
    private static IPdfNameTreeNode`1<T, VType> Parse(PdfReaderDictionary root, PdfCreateTreeElementAction`1<VType> createElement);
    private static string ConvertToName(object key);
    private static object ConvertFromName(string value);
    private static int Compare(string x, string y);
    public sealed virtual T get_Item(string key);
    public sealed virtual void set_Item(string key, T value);
    public IReadOnlyCollection`1<string> get_Names();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<T> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(string key, T value);
    public sealed virtual void Add(KeyValuePair`2<string, T> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, T> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfNameTree`1/<GetEnumerator>d__34")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, T>> GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, T> item);
    public sealed virtual bool TryGetValue(string key, T& value);
    public void RemoveAll(Func`2<T, bool> condition);
    public object Write(IPdfWrittenObjectsCollection collection);
    private void Add(string key, PdfDeferredItem`1<T> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private bool RootNodeContains(KeyValuePair`2<string, T> item);
    private bool NewItemsContains(KeyValuePair`2<string, T> item);
}
public class DevExpress.Pdf.Native.PdfNameTreeEncoding : Encoding {
    [CompilerGeneratedAttribute]
private static PdfNameTreeEncoding <Instance>k__BackingField;
    public static PdfNameTreeEncoding Instance { get; }
    private static PdfNameTreeEncoding();
    [CompilerGeneratedAttribute]
public static PdfNameTreeEncoding get_Instance();
    public virtual int GetMaxCharCount(int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
}
public static class DevExpress.Pdf.Native.PdfNameTreeNode`1 : object {
    private static string namesKey;
    private static string ConvertToName(object key);
    private static object ConvertFromName(string value);
    internal static PdfDeferredSortedDictionary`2<string, T> Parse(PdfReaderDictionary dictionary, PdfCreateTreeElementAction`1<T> createElement);
    internal static PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects, PdfDeferredSortedDictionary`2<string, T> dictionary);
}
public class DevExpress.Pdf.Native.PdfNameTreeWrapper`1 : object {
    private PdfNameTree`1<T> nameTree;
    public int Count { get; }
    public PdfNameTreeWrapper`1(PdfNameTree`1<T> pdfNameTree);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfNewSignatureFieldDescription : PdfSignatureFieldDescription {
    [CompilerGeneratedAttribute]
private PdfSignatureFieldInfo <Info>k__BackingField;
    protected PdfSignatureFieldInfo Info { get; }
    public PdfNewSignatureFieldDescription(PdfSignatureFieldInfo info, PdfSignatureBuilder builder);
    [CompilerGeneratedAttribute]
protected PdfSignatureFieldInfo get_Info();
    internal virtual void ApplySignature(PdfDocumentCatalogObject catalog, PdfSignatureModelObject signatureModel);
    private PdfIndirectObjectIdentifier CreateSignatureFormFieldDictionary(PdfDocumentCatalogObject catalog, PdfSignatureModelObject signatureObject);
    protected virtual string GenerateNewFieldName(PdfDocumentCatalogObject catalog);
}
public class DevExpress.Pdf.Native.PdfNonByteAlignedImageScanlineDecoder : PdfImageScanlineDecoder {
    private int bitsPerComponent;
    private int mask;
    private int factor;
    private int alignedStride;
    public int Stride { get; }
    public PdfNonByteAlignedImageScanlineDecoder(PdfImage image, int componentsCount);
    public virtual int get_Stride();
    public virtual void FillNextScanline(Byte[] scanline, Byte[] sourceData, int sourceOffset);
}
public class DevExpress.Pdf.Native.PdfNonEmbeddedCIDFontCodePointMapping : object {
    private PdfCIDCharset charset;
    public PdfNonEmbeddedCIDFontCodePointMapping(PdfCIDCharset charset);
    public sealed virtual bool UpdateCodePoints(Int16[] codePoints, bool useEmbeddedFontEncoding);
}
public class DevExpress.Pdf.Native.PdfNonEmbeddedFontProgramFacade : PdfFontProgramFacade {
    private PdfNonEmbeddedFontProgramFacade(PdfSimpleFont font);
    private PdfNonEmbeddedFontProgramFacade(PdfType0Font font, IPdfCodePointMapping mapping);
    public static PdfNonEmbeddedFontProgramFacade Create(PdfSimpleFont font);
    public static PdfNonEmbeddedFontProgramFacade Create(PdfType0Font font);
}
public static class DevExpress.Pdf.Native.PdfNumberTreeNode`1 : object {
    private static string numsKey;
    private static int ConvertToInt(object key);
    internal static PdfDeferredSortedDictionary`2<int, T> Parse(PdfReaderDictionary dictionary, PdfCreateTreeElementAction`1<T> createElement, bool checkElementCount);
    internal static PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects, PdfDeferredSortedDictionary`2<int, T> dictionary, Func`3<IPdfWrittenObjectsCollection, T, object> writeAction);
}
public abstract class DevExpress.Pdf.Native.PdfObject : PdfDocumentItem {
    internal static int DirectObjectNumber;
    protected PdfObject(int number);
    protected internal abstract virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isCloning);
    protected internal virtual void UpdateObject(PdfObject value);
    protected internal virtual void NotifyMergeCompleted(PdfObjectCollection objects);
}
public class DevExpress.Pdf.Native.PdfObjectCloner : object {
    private PdfDocumentCatalog documentCatalog;
    private HashSet`1<IPdfObjectId> clonedPageIds;
    private Dictionary`2<IPdfObjectId, int> clonedObjects;
    public PdfObjectCloner(PdfDocumentCatalog documentCatalog);
    public PdfForm ClonePageToForm(PdfPage source);
    private void CloneOptionalContentGroups(IList`1<PdfPage> destPages, IList`1<PdfPage> sourcePages, PdfDocumentCatalog catalog, PdfOptionalContentProperties sourceOCP);
    public IList`1<PdfPage> ClonePages(IList`1<PdfPage> pages, bool cloneNonPageContentElements);
    private void CloneOutlines(PdfObjectCloningCollection collection, IList`1<PdfBookmark> bookmarks, IList`1<PdfBookmark> foreignBookmarks);
}
public abstract class DevExpress.Pdf.Native.PdfObjectCloningCollection : object {
    private PdfObjectCollection collection;
    private Dictionary`2<int, int> skipObjects;
    private Dictionary`2<IPdfObjectId, int> clonedObjects;
    protected PdfObjectCollection Collection { get; }
    public int LastObjectNumber { get; }
    public IPdfWritingContext WritingContext { get; }
    public PdfEncryptionInfo EncryptionInfo { get; }
    public PdfObjectCloningCollection(PdfObjectCollection collection, Dictionary`2<IPdfObjectId, int> writtenObjects);
    public static IPdfObjectId CreateObjectId(PdfObject value, Guid collectionId);
    protected PdfObjectCollection get_Collection();
    public int get_LastObjectNumber();
    public sealed virtual IPdfWritingContext get_WritingContext();
    public sealed virtual PdfEncryptionInfo get_EncryptionInfo();
    public sealed virtual PdfObjectReference AddObject(PdfObject value);
    public sealed virtual PdfObjectReference AddObject(int objectNumber, Func`1<PdfObject> getObject);
    public sealed virtual PdfObjectReference AddObjectToWrite(object value);
    public sealed virtual PdfObjectReference GetSavedObjectReference(PdfIndirectObjectId objectId);
    public void SkipObjects(IEnumerable`1<int> objectNumbers, Guid foreignCollectionId);
    private PdfObjectReference SkipObject(int objectNumber);
    protected abstract virtual PdfObjectReference AddObjectToWrite(object value, int number);
}
public class DevExpress.Pdf.Native.PdfObjectCollection : object {
    internal static string TrailerSizeKey;
    internal static string TrailerInfoKey;
    internal static string TrailerRootKey;
    private Guid id;
    private IDictionary`2<int, PdfDocumentItem> collection;
    private Dictionary`2<IPdfObjectId, int> writtenObjects;
    private PdfDocumentCatalog documentCatalog;
    private PdfEncryptionInfo encryptionInfo;
    private int lastObjectNumber;
    private bool isDetached;
    private IPdfObjectWritingStrategy writingStrategy;
    [CompilerGeneratedAttribute]
private IPdfWritingContext <WritingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfDocumentStream <DocumentStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInvalidDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private IPdfValidationLogger <ValidationLogger>k__BackingField;
    public IPdfWritingContext WritingContext { get; public set; }
    public Guid Id { get; }
    public int Count { get; }
    public PdfDocumentCatalog DocumentCatalog { get; public set; }
    public PdfEncryptionInfo EncryptionInfo { get; public set; }
    public PdfDocumentStream DocumentStream { get; private set; }
    public int LastObjectNumber { get; public set; }
    public int WrittenObjectsCount { get; }
    public IEnumerator`1<PdfObjectContainer> EnumeratorOfContainers { get; }
    public bool IsInvalidDocument { get; public set; }
    public IPdfValidationLogger ValidationLogger { get; }
    internal PdfObjectCollection(PdfDocumentStream documentStream);
    internal PdfObjectCollection(PdfDocumentStream documentStream, IPdfValidationLogger validationLogger);
    internal PdfObjectCollection(PdfDocumentStream documentStream, Func`2<PdfObjectContainer, PdfObjectPointer> writeIndirectObject);
    public static IPdfObjectId CreateObjectId(PdfObject value, Guid collectionId);
    [CompilerGeneratedAttribute]
public IPdfWritingContext get_WritingContext();
    [CompilerGeneratedAttribute]
public void set_WritingContext(IPdfWritingContext value);
    public Guid get_Id();
    public int get_Count();
    public PdfDocumentCatalog get_DocumentCatalog();
    public void set_DocumentCatalog(PdfDocumentCatalog value);
    public PdfEncryptionInfo get_EncryptionInfo();
    public void set_EncryptionInfo(PdfEncryptionInfo value);
    [CompilerGeneratedAttribute]
public PdfDocumentStream get_DocumentStream();
    [CompilerGeneratedAttribute]
private void set_DocumentStream(PdfDocumentStream value);
    public int get_LastObjectNumber();
    public void set_LastObjectNumber(int value);
    public int get_WrittenObjectsCount();
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfObjectCollection/<get_EnumeratorOfContainers>d__36")]
public IEnumerator`1<PdfObjectContainer> get_EnumeratorOfContainers();
    [CompilerGeneratedAttribute]
public bool get_IsInvalidDocument();
    [CompilerGeneratedAttribute]
public void set_IsInvalidDocument(bool value);
    [CompilerGeneratedAttribute]
public IPdfValidationLogger get_ValidationLogger();
    public int GetNextObjectNumber();
    public void AddItem(PdfDocumentItem obj, bool force);
    public void AddFreeObject(int number, int generation);
    public void RemoveCorruptedObjects();
    public object TryResolve(object value, string nonEncryptedKey);
    private object TryResolve(object value, string nonEncryptedKey, HashSet`1<int> resolvedReferences);
    private PdfDocumentItem ResolveObject(int number);
    public PdfEncryptionInfo EnsureEncryptionInfo(object value, Byte[][] id, PdfGetPasswordAction getPasswordAction);
    public void PrepareToWrite(PdfDocumentCatalog documentCatalog);
    public void UpdateStream(Stream stream);
    public void MarkAsWritten(int number);
    public void DetachStream();
    public virtual void FinalizeWritingAndClearWriteParameters();
    public PdfObjectReference GetSavedObjectReference(PdfIndirectObjectId objectId);
    public PdfIndirectObject GetIndirectObject(int number);
    public PdfIndirectObjectId GetObjectId(int objectNumber);
    public double GetDouble(object value);
    public IList`1<double> GetDoubleArray(object value);
    private PdfIndirectObject ReadIndirectObject(PdfObjectSlot slot);
    private void ReplaceCollectionItem(PdfDocumentItem obj);
    private PdfDocumentItem ResolveSlot(PdfObjectSlot slot, Func`2<PdfObjectSlot, PdfIndirectObject> readObject);
    private object GetObject(int objectNumber, HashSet`1<int> resolvedReferences, string nonEncryptedDictionaryKey);
    public PdfObjectReference AddObjectToWrite(object value);
    public PdfObjectReference AddObjectToWrite(object value, int number);
    public PdfObjectCloningCollection CreateCloningCollection(Dictionary`2<IPdfObjectId, int> clonedObjects);
    public Tuple`2<bool, int> AddToWrittenObject(PdfObject value);
    private int GetIndirectWrittenObjectNumber(PdfIndirectObjectId id);
    public void WriteIndirectObject(PdfObject value);
    public bool ContainsNumber(int objectNumber);
    public void SetInMemoryWritingStrategy();
}
public class DevExpress.Pdf.Native.PdfObjectContainer : PdfObjectPointer {
    private object value;
    public object Value { get; }
    public PdfObjectContainer(int number, int generation, object value);
    public PdfObjectContainer(int number, int generation, object value, long offset);
    public object get_Value();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfObjectList`1 : PdfObject {
    private List`1<T> objectList;
    public T Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual void Add(T item);
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfObjectParser : object {
    private static byte plus;
    private static byte period;
    private static byte digitStart;
    private static byte digitEnd;
    private static byte hexadecimalDigitStart;
    private static byte hexadecimalDigitEnd;
    private static byte octalDigitEnd;
    private static byte lowercaseHexadecimalDigitStart;
    private static byte lowercaseHexadecimalDigitEnd;
    private static byte numberSign;
    private static byte escape;
    private static byte horizontalTab;
    private static byte endString;
    protected static byte Minus;
    protected static byte StartString;
    protected static byte StartArray;
    protected static byte EndArray;
    protected static byte CarriageReturn;
    protected static byte LineFeed;
    protected static byte Space;
    protected static byte Comment;
    protected static byte NameIdentifier;
    private static Byte[] nullToken;
    private static Byte[] trueToken;
    private static Byte[] falseToken;
    private static PdfTokenDescription startxrefToken;
    private PdfDataStream stream;
    private byte current;
    public long CurrentPosition { get; public set; }
    private byte Digit { get; }
    private bool IsHexadecimalDigit { get; }
    private bool IsPeriod { get; }
    protected PdfDataStream Stream { get; }
    protected byte Current { get; }
    protected bool IsSpace { get; }
    protected bool IsDigit { get; }
    protected byte HexadecimalDigit { get; }
    protected bool CanContinueReading { get; }
    protected bool IgnoreIncorrectSymbolsInNames { get; }
    protected PdfObjectParser(PdfDataStream stream, long position);
    private static PdfObjectParser();
    protected static bool IsOctalDigitSymbol(byte symbol);
    public static bool IsSpaceSymbol(byte symbol);
    public static bool IsDigitSymbol(byte symbol);
    public static byte ConvertToDigit(byte symbol);
    public static bool IsHexadecimalDigitSymbol(byte symbol);
    public static byte ConvertToHexadecimalDigit(byte symbol);
    public static String[] ParseNameArray(Byte[] data);
    public static Nullable`1<int> ParseStartXRef(Byte[] data);
    public long get_CurrentPosition();
    public void set_CurrentPosition(long value);
    private byte get_Digit();
    private bool get_IsHexadecimalDigit();
    private bool get_IsPeriod();
    protected PdfDataStream get_Stream();
    protected byte get_Current();
    protected bool get_IsSpace();
    protected bool get_IsDigit();
    protected byte get_HexadecimalDigit();
    protected virtual bool get_CanContinueReading();
    protected virtual bool get_IgnoreIncorrectSymbolsInNames();
    public object ReadObject(bool isHexadecimalStringSeparatedUsingWhiteSpaces, bool isIndirect);
    public int ReadInteger();
    private void SkipLineFeed();
    private Byte[] ReadString();
    protected virtual PdfReaderArray CreateReadArray();
    private PdfReaderArray ReadArray();
    private String[] ReadNameArray();
    private Nullable`1<int> ReadStartXRef();
    private double ReadReal(int initialValue);
    protected bool ReadNext();
    protected bool ReadPrev();
    protected bool SkipSpaces();
    protected bool ReadToken(Byte[] token);
    protected string ReadToken();
    protected object ReadNumber();
    protected PdfName ReadName();
    protected virtual Byte[] DecryptString(List`1<byte> list);
    protected virtual bool CanReadObject();
    protected virtual object ReadNumericObject();
    protected virtual object ReadAlphabeticalObject(bool isHexadecimalStringSeparatedUsingWhiteSpaces, bool isIndirect);
}
public abstract class DevExpress.Pdf.Native.PdfObjectPointer : PdfDocumentItem {
    private long offset;
    private bool applyEncryption;
    internal bool ApplyEncryption { get; internal set; }
    internal long Offset { get; }
    protected PdfObjectPointer(int number, int generation, long offset);
    internal bool get_ApplyEncryption();
    internal void set_ApplyEncryption(bool value);
    internal long get_Offset();
}
public class DevExpress.Pdf.Native.PdfObjectReference : object {
    private int number;
    private int generation;
    public int Number { get; }
    public int Generation { get; }
    public PdfObjectReference(int number, int generation);
    public PdfObjectReference(int number);
    public int get_Number();
    public int get_Generation();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.Native.PdfObjectSlot : PdfObjectPointer {
    public PdfObjectSlot(int number, int generation, long offset);
}
public class DevExpress.Pdf.Native.PdfObjectStream : PdfDocumentItem {
    private List`1<object> objects;
    public IList`1<object> Objects { get; }
    public PdfObjectStream(PdfReaderStream stream);
    public IList`1<object> get_Objects();
}
public class DevExpress.Pdf.Native.PdfObjectStreamElement : PdfDocumentItem {
    private int elementIndex;
    private int objectStreamNumber;
    public int ElementIndex { get; }
    public int ObjectStreamNumber { get; }
    public PdfObjectStreamElement(int number, int objectStreamNumber, int elementIndex);
    public int get_ElementIndex();
    public int get_ObjectStreamNumber();
}
internal class DevExpress.Pdf.Native.PdfObjectWriter : object {
    public static string EndOfLine;
    private PdfDocumentStream stream;
    public PdfDocumentStream Stream { get; }
    public PdfObjectWriter(PdfDocumentStream stream);
    public PdfObjectWriter(Stream stream);
    public PdfDocumentStream get_Stream();
    protected void WriteEndOfDocument();
    public virtual PdfObjectPointer WriteIndirectObject(PdfObjectContainer container);
}
public class DevExpress.Pdf.Native.PdfObservableCollectionEventArgs`1 : EventArgs {
    private T item;
    public T Item { get; }
    public PdfObservableCollectionEventArgs`1(T item);
    public T get_Item();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfObservableCollectionWrapper`1 : object {
    private IList`1<T> collection;
    [CompilerGeneratedAttribute]
private EventHandler`1<PdfObservableCollectionEventArgs`1<T>> ItemChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PdfObservableCollectionEventArgs`1<T>> ItemAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<PdfObservableCollectionEventArgs`1<T>> ItemRemoved;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public PdfObservableCollectionWrapper`1(IList`1<T> collection);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void add_ItemChanged(EventHandler`1<PdfObservableCollectionEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_ItemChanged(EventHandler`1<PdfObservableCollectionEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void add_ItemAdded(EventHandler`1<PdfObservableCollectionEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_ItemAdded(EventHandler`1<PdfObservableCollectionEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void add_ItemRemoved(EventHandler`1<PdfObservableCollectionEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_ItemRemoved(EventHandler`1<PdfObservableCollectionEventArgs`1<T>> value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void RaiseItemChanged(T value);
    private void RaiseItemAdded(T value);
    private void RaiseItemRemoved(T value);
}
public static class DevExpress.Pdf.Native.PdfOID : object {
    public static string PKCS9AtContentType;
    public static string PKCS9AtMessageDigest;
    public static string PKCS9AtSigningTime;
    public static string PKCS1RsaEncryption;
    public static string DSA;
    public static string PKCS1RsassaPss;
    public static string PKCS1Mgf1;
    public static string PKCS7IdData;
    public static string PKCS7IdSignedData;
    public static string SHA1;
    public static string SHA256;
    public static string SHA384;
    public static string SHA512;
    public static string RIPEMD160;
    public static string IdAATimeStampToken;
    public static string SHA1WithRSAEncryption;
    public static string SHA256WithRSAEncryption;
    public static string SHA384WithRSAEncryption;
    public static string SHA512WithRSAEncryption;
    public static string RIPEMD160WithRSAEncryption;
    public static string ECDSAWithSHA1;
    public static string ECDSAWithSHA256;
    public static string ECDSAWithSHA384;
    public static string ECDSAWithSHA512;
    public static string AdbeRevocationInfoArchival;
    public static string IdAASigningCertificateV2;
    public static string IdAdOcspOID;
}
public class DevExpress.Pdf.Native.PdfOpenTypeCFFTableDirectoryEntry : PdfFontTableDirectoryEntry {
    internal static string EntryTag;
    private Byte[] originalTableData;
    private Byte[] subsetData;
    public PdfOpenTypeCFFTableDirectoryEntry(Byte[] tableData);
    public void CreateSubset(ICollection`1<int> glyphIndices);
    protected virtual void Write(PdfBinaryStream tableStream);
}
public static class DevExpress.Pdf.Native.PdfOpenTypeFontCreator : object {
    public static Byte[] Create(PdfFont font, PdfCFFFontProgramFacade cffFacade, string fontName, Byte[] cff);
    public static Byte[] Create(PdfFont font, Byte[] cffData, string fontName);
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.PdfOptionalContentGroupFlags : Enum {
    public int value__;
    public static PdfOptionalContentGroupFlags Off;
    public static PdfOptionalContentGroupFlags On;
    public static PdfOptionalContentGroupFlags View;
    public static PdfOptionalContentGroupFlags Print;
}
public class DevExpress.Pdf.Native.PdfOptionalContentViewState : object {
    private IDictionary`2<PdfOptionalContentGroup, GroupState> state;
    public PdfOptionalContentViewState(PdfOptionalContentProperties optionalContentProperties);
    private static Nullable`1<bool> ToBool(DefaultBoolean boolean);
    public bool ShouldRender(PdfOptionalContent optionalContent, bool isPrinting);
    public PdfOptionalContentGroupFlags GetStateFlags(PdfOptionalContent optionalContent);
    private PdfOptionalContentGroupFlags GetStateFlags(PdfOptionalContentGroup contentGroup);
    private void ApplyUsage(PdfOptionalContentUsageApplication usageApplication, string cateogry, Action`2<GroupState, PdfOptionalContentUsage> applyUsage);
    [CompilerGeneratedAttribute]
private PdfOptionalContentGroupFlags <GetStateFlags>b__5_0(PdfOptionalContentGroupFlags f, PdfOptionalContentGroup g);
    [CompilerGeneratedAttribute]
private PdfOptionalContentGroupFlags <GetStateFlags>b__5_1(PdfOptionalContentGroupFlags f, PdfOptionalContentGroup g);
    [CompilerGeneratedAttribute]
private PdfOptionalContentGroupFlags <GetStateFlags>b__5_2(PdfOptionalContentGroupFlags f, PdfOptionalContentGroup g);
    [CompilerGeneratedAttribute]
private PdfOptionalContentGroupFlags <GetStateFlags>b__5_3(PdfOptionalContentGroupFlags f, PdfOptionalContentGroup g);
}
public class DevExpress.Pdf.Native.PdfOrientedRectangleList : List`1<PdfOrientedRectangle> {
}
public class DevExpress.Pdf.Native.PdfOutlineEnumerator : object {
    private PdfOutline outline;
    public PdfOutlineEnumerator(PdfOutline outline);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfOutlineEnumerator/<System-Collections-IEnumerable-GetEnumerator>d__2")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfPageData : object {
    private IList`1<PdfTextLine> textData;
    private IList`1<PdfPageImageData> imageData;
    private List`1<PdfWord> words;
    public IList`1<PdfTextLine> TextData { get; }
    public IList`1<PdfPageImageData> ImageData { get; }
    public IList`1<PdfWord> Words { get; }
    public PdfPageData(IList`1<PdfTextLine> textData, IList`1<PdfPageImageData> imageData);
    private static bool IsWordWrap(PdfWordPart prev, PdfWordPart cur);
    public IList`1<PdfTextLine> get_TextData();
    public IList`1<PdfPageImageData> get_ImageData();
    public IList`1<PdfWord> get_Words();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfPageDataCache : PdfCache`2<int, PdfPageData> {
    public static long DefaultLimit;
    private IList`1<PdfPage> documentPages;
    private bool recognizeAnnotationsData;
    private bool clipTextToCropBox;
    private IPdfRenderingFontInfoProvider widthProvider;
    public IList`1<PdfPage> DocumentPages { get; }
    public PdfPageData Item { get; }
    public PdfPageDataCache(IList`1<PdfPage> documentPages, IPdfRenderingFontInfoProvider widthProvider, bool recognizeAnnotationsData, bool clipTextToCropBox);
    public IList`1<PdfPage> get_DocumentPages();
    public PdfPageData get_Item(int key);
    public IList`1<PdfTextLine> GetPageLines(int pageIndex);
    public IList`1<PdfPageImageData> GetImageData(int pageIndex);
    protected PdfPageData GetData(int key);
    protected virtual long GetSizeOfValue(PdfPageData value);
}
public class DevExpress.Pdf.Native.PdfPageImageData : object {
    [CompilerGeneratedAttribute]
private PdfImage <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfTransformationMatrix <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Alpha>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingRectangle>k__BackingField;
    public PdfImage Image { get; }
    public PdfTransformationMatrix Transform { get; }
    public PdfColor Color { get; }
    public double Alpha { get; }
    public PdfRectangle BoundingRectangle { get; }
    public PdfPageImageData(PdfImage image, PdfTransformationMatrix matrix, double alpha, PdfColor color);
    [CompilerGeneratedAttribute]
public PdfImage get_Image();
    [CompilerGeneratedAttribute]
public PdfTransformationMatrix get_Transform();
    [CompilerGeneratedAttribute]
public PdfColor get_Color();
    [CompilerGeneratedAttribute]
public double get_Alpha();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingRectangle();
    public sealed virtual bool Equals(PdfPageImageData imageData);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfPageList : object {
    private Dictionary`2<PdfPage, int> pageIndexMap;
    private List`1<PdfPage> pages;
    private PdfDocumentCatalog documentCatalog;
    private int nodeObjectNumber;
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    public PdfPage Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfPage>.IsReadOnly { get; }
    private Dictionary`2<PdfPage, int> PageIndexMap { get; }
    public PdfPageList(PdfDocumentCatalog documentCatalog);
    public PdfPageList(PdfPageTreeNode source, PdfDocumentCatalog documentCatalog);
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler value);
    public sealed virtual PdfPage get_Item(int index);
    public sealed virtual void set_Item(int index, PdfPage value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfPage>.get_IsReadOnly();
    private Dictionary`2<PdfPage, int> get_PageIndexMap();
    public sealed virtual bool Contains(PdfPage item);
    public int IndexOf(PdfPage page);
    public PdfPage Add(PdfPage item);
    public PdfPage Insert(int index, PdfPage item);
    public void AppendDocument(PdfDocumentCatalog catalog);
    public PdfPage AddNewPage(PdfPage item);
    public PdfPage InsertNewPage(int index, PdfPage item);
    private void CheckPageNumber(int pageNumber);
    public void DeletePage(int pageNumber);
    public void DeletePages(IEnumerable`1<int> pageNumbers);
    public PdfPageTreeNode GetPageNode(PdfObjectCollection objects, bool withPages);
    public PdfPage FindPage(int objectNumber);
    private int GetNodeNumber(PdfObjectCollection objects);
    private PdfPage ClonePage(PdfPage page);
    private bool DeletePage(PdfPage page);
    private void RemoveItems(IList`1<T> list, Func`2<T, bool> predicate);
    private void RemoveItems(IDictionary`2<Tkey, Tvalue> dictionary, Func`2<Tvalue, bool> predicate);
    private void DeleteFromOutlines(PdfOutlineItem item, PdfPage page);
    private bool CheckItem(PdfArticleThread articleThread, PdfPage page);
    private bool CheckItem(PdfInteractiveFormField element, PdfPage page);
    private bool CheckItem(PdfLogicalStructureItem item, PdfPage page);
    private bool CheckItem(PdfLogicalStructureElementList elements, PdfPage page);
    private void RaiseChanged();
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Pdf.PdfPage>.Insert(int index, PdfPage item);
    private sealed virtual override int System.Collections.Generic.IList<DevExpress.Pdf.PdfPage>.IndexOf(PdfPage item);
    private sealed virtual override void System.Collections.Generic.IList<DevExpress.Pdf.PdfPage>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfPage>.Add(PdfPage item);
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfPage>.Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<DevExpress.Pdf.PdfPage>.CopyTo(PdfPage[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<DevExpress.Pdf.PdfPage>.Remove(PdfPage item);
    private sealed virtual override IEnumerator`1<PdfPage> System.Collections.Generic.IEnumerable<DevExpress.Pdf.PdfPage>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private PdfPage <DeletePages>b__27_0(int pageNumber);
}
public class DevExpress.Pdf.Native.PdfPageState : object {
    private PdfDocumentStateBase documentState;
    private PdfPage page;
    private int pageIndex;
    private Lazy`1<List`1<IPdfAnnotationState>> annotationStates;
    [CompilerGeneratedAttribute]
private PdfPageStateInvalidateEventHandler Invalidate;
    [CompilerGeneratedAttribute]
private PdfPageStateAnnotationsChangedEventHandler AnnotationsChanged;
    public PdfDocumentStateBase DocumentState { get; }
    public PdfPage Page { get; }
    public int Rotate { get; }
    public int PageIndex { get; }
    public IReadOnlyList`1<IPdfAnnotationState> AnnotationStates { get; }
    public PdfPageState(PdfDocumentStateBase documentState, PdfPage page, int pageIndex);
    public PdfDocumentStateBase get_DocumentState();
    public PdfPage get_Page();
    public int get_Rotate();
    public int get_PageIndex();
    public IReadOnlyList`1<IPdfAnnotationState> get_AnnotationStates();
    [CompilerGeneratedAttribute]
public void add_Invalidate(PdfPageStateInvalidateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Invalidate(PdfPageStateInvalidateEventHandler value);
    [CompilerGeneratedAttribute]
public void add_AnnotationsChanged(PdfPageStateAnnotationsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AnnotationsChanged(PdfPageStateAnnotationsChangedEventHandler value);
    public IList`1<PdfMarkupAnnotationData> CreateMarkupAnnotationData();
    public bool RemoveWidgetAnnotations(bool flatten);
    private bool FlattenAnnotationStates(PdfPage page, IEnumerable`1<IPdfAnnotationState> annotations);
    private bool FlattenAnnotation(PdfCommandConstructor constructor, IPdfAnnotationState annotation);
    public PdfTextMarkupAnnotationState AddTextMarkupAnnotation(IPdfTextMarkupAnnotationBuilder builder);
    public PdfTextAnnotationState AddTextAnnotation(IPdfTextAnnotationBuilder builder);
    public PdfCaretAnnotationState AddCaretAnnotation(IPdfMarkupAnnotationBuilder builder);
    public PdfCircleAnnotationState AddCircleAnnotation(IPdfMarkupAnnotationBuilder builder);
    public PdfSquareAnnotationState AddSquareAnnotation(IPdfMarkupAnnotationBuilder builder);
    public PdfLineAnnotationState AddLineAnnotation(IPdfLineAnnotationBuilder builder);
    public PdfPolyLineAnnotationState AddPolyLineAnnotation(IPdfPathAnnotationBuilder builder);
    public PdfPolygonAnnotationState AddPolygonAnnotation(IPdfPathAnnotationBuilder builder);
    public PdfInkAnnotationState AddInkAnnotation(IList`1<IList`1<PdfPoint>> inks);
    public PdfLinkAnnotationState AddLinkAnnotation(PdfRectangle rect, PdfDestination destination);
    public PdfLinkAnnotationState AddLinkAnnotation(PdfRectangle rect, string uri);
    public PdfFileAttachmentAnnotationState AddFileAttachmentAnnotation(PdfMarkupAnnotationBuilder builder, PdfFileAttachment file, string iconName);
    public PdfSoundAnnotationState AddSoundAnnotation(PdfMarkupAnnotationBuilder builder, PdfSound sound, string iconName);
    public PdfFreeTextAnnotationState AddFreeTextAnnotation(PdfMarkupAnnotationBuilder builder);
    public PdfRubberStampAnnotationState AddRubberStampAnnotation(PdfMarkupAnnotationBuilder builder, string iconName, string pdfFileName, int pageNumber, bool keepAspectRatio);
    public PdfRubberStampAnnotationState AddRubberStampAnnotation(PdfMarkupAnnotationBuilder builder, string iconName, Stream pdfStream, int pageNumber, bool keepAspectRatio);
    private TState AddAnnotation(Func`1<TAnnotation> createAnnotation, Func`2<TAnnotation, TState> createState);
    public void RaiseInvalidate(PdfRectangle rect);
    private void RaiseInvalidateContent();
    public bool FlattenAnnotationState(IPdfAnnotationState state);
    public void RemoveAnnotationState(IPdfAnnotationState state);
    public PdfSize GetViewSize();
    private List`1<IPdfAnnotationState> CreateAnnotationStates();
    public void ClearContent(PdfClearContentRegions regions, PdfClearContentOptions options);
    [CompilerGeneratedAttribute]
private PdfTextMarkupAnnotationState <AddTextMarkupAnnotation>b__25_1(PdfTextMarkupAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfTextAnnotationState <AddTextAnnotation>b__26_1(PdfTextAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfCaretAnnotationState <AddCaretAnnotation>b__27_1(PdfCaretAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfCircleAnnotationState <AddCircleAnnotation>b__28_1(PdfCircleAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfSquareAnnotationState <AddSquareAnnotation>b__29_1(PdfSquareAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfLineAnnotationState <AddLineAnnotation>b__30_1(PdfLineAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfPolyLineAnnotationState <AddPolyLineAnnotation>b__31_1(PdfPolyLineAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfPolygonAnnotationState <AddPolygonAnnotation>b__32_1(PdfPolygonAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfInkAnnotationState <AddInkAnnotation>b__33_1(PdfInkAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfLinkAnnotationState <AddLinkAnnotation>b__34_1(PdfLinkAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfLinkAnnotationState <AddLinkAnnotation>b__35_1(PdfLinkAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfFileAttachmentAnnotationState <AddFileAttachmentAnnotation>b__36_1(PdfFileAttachmentAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfSoundAnnotationState <AddSoundAnnotation>b__37_1(PdfSoundAnnotation annotation);
    [CompilerGeneratedAttribute]
private PdfFreeTextAnnotationState <AddFreeTextAnnotation>b__38_1(PdfFreeTextAnnotation annotation);
}
public class DevExpress.Pdf.Native.PdfPageStateAnnotationsChangedEventHandler : MulticastDelegate {
    public PdfPageStateAnnotationsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(IPdfAnnotationState state, bool removed);
    public virtual IAsyncResult BeginInvoke(IPdfAnnotationState state, bool removed, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfPageStateInvalidateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <InvalidateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <Rectangle>k__BackingField;
    public bool InvalidateContent { get; }
    public int PageIndex { get; }
    public PdfRectangle Rectangle { get; }
    public PdfPageStateInvalidateEventArgs(int pageIndex, PdfRectangle rect, bool invalidateContent);
    [CompilerGeneratedAttribute]
public bool get_InvalidateContent();
    [CompilerGeneratedAttribute]
public int get_PageIndex();
    [CompilerGeneratedAttribute]
public PdfRectangle get_Rectangle();
}
public class DevExpress.Pdf.Native.PdfPageStateInvalidateEventHandler : MulticastDelegate {
    public PdfPageStateInvalidateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PdfPageStateInvalidateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PdfPageStateInvalidateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfPageTextCharacter : object {
    [CompilerGeneratedAttribute]
private PdfTextBlock <Block>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <BaselineLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfOrientedRectangle <Rectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnicodeData>k__BackingField;
    public PdfTextBlock Block { get; }
    public PdfPoint BaselineLocation { get; }
    public PdfOrientedRectangle Rectangle { get; }
    public string UnicodeData { get; }
    public PdfPageTextCharacter(PdfTextBlock block, PdfPoint baselineLocation, string unicodeData, PdfOrientedRectangle boundingBox);
    public static PdfOrientedRectangle CreateRectangle(IList`1<PdfPageTextCharacter> chars);
    [CompilerGeneratedAttribute]
public PdfTextBlock get_Block();
    [CompilerGeneratedAttribute]
public PdfPoint get_BaselineLocation();
    [CompilerGeneratedAttribute]
public PdfOrientedRectangle get_Rectangle();
    [CompilerGeneratedAttribute]
public string get_UnicodeData();
}
public class DevExpress.Pdf.Native.PdfPageTextCluster : ValueType {
    private IList`1<PdfPageTextCharacter> chars;
    [CompilerGeneratedAttribute]
private PdfOrientedRectangle <Rectangle>k__BackingField;
    public IList`1<PdfPageTextCharacter> Chars { get; }
    public bool IsWhitespace { get; }
    public bool IsRTL { get; }
    public bool IsSeparator { get; }
    public bool IsCJK { get; }
    public PdfOrientedRectangle Rectangle { get; }
    public PdfPoint BaselineLocation { get; }
    public PdfTextBlock Block { get; }
    public PdfPageTextCluster(IList`1<PdfPageTextCharacter> chars);
    public IList`1<PdfPageTextCharacter> get_Chars();
    public bool get_IsWhitespace();
    public bool get_IsRTL();
    public bool get_IsSeparator();
    public bool get_IsCJK();
    [CompilerGeneratedAttribute]
public PdfOrientedRectangle get_Rectangle();
    public PdfPoint get_BaselineLocation();
    public PdfTextBlock get_Block();
    public void Append(PdfRectangle cropBox, PdfPageWordBuilder wordBuilder);
}
public class DevExpress.Pdf.Native.PdfPageTextLine : object {
    private IList`1<PdfPageTextCharacter> lineCharacters;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    public PdfRectangle BoundingBox { get; }
    public PdfPageTextLine(IReadOnlyList`1<PdfTextBlock> textBlocks);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfPageTextLine/<RemoveDuplicateCharacters>d__0")]
private static IEnumerable`1<PdfPageTextCharacter> RemoveDuplicateCharacters(IReadOnlyList`1<PdfTextBlock> lineBlocks);
    private static void AddReturnedChar(PdfPageTextCharacter c, Dictionary`2<string, IList`1<PdfPageTextCharacter>> duplicates);
    private static bool IsDuplicate(PdfPageTextCharacter c, Dictionary`2<string, IList`1<PdfPageTextCharacter>> returnedChars);
    private static bool IsDuplicate(PdfPageTextCharacter ch1, PdfPageTextCharacter ch2);
    private static string GetCharkKey(PdfPageTextCharacter c);
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    public bool IsDuplicateWith(PdfPageTextLine line);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfPageTextLine/<EnumerateClusters>d__11")]
public IEnumerable`1<PdfPageTextCluster> EnumerateClusters();
}
public class DevExpress.Pdf.Native.PdfPageTextLineBuilder : object {
    private int wordNumber;
    private int currentDistancesCount;
    private double currentDistancesSum;
    private static bool OverlapsWithPreviousWords(IEnumerable`1<PdfWordPart> parts, PdfWordPart word);
    public PdfTextLine CreateLine(IEnumerable`1<PdfPageTextCluster> lineClusters, PdfRectangle cropBox);
    private bool CheckHorizontalPosition(PdfPageWordBuilder wordBuilder, PdfPageTextCluster prevCluster, PdfPageTextCluster curCluster);
}
public static class DevExpress.Pdf.Native.PdfPageTextLineSplitter : object {
    private static bool IsIndex(PdfTextBlock previousCharacterBlock, PdfTextBlock currentCharacterBlock);
    private static bool IsNewLine(PdfTextBlock previousCharacterBlock, PdfTextBlock currentCharacterBlock);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfPageTextLineSplitter/<SplitTextLines>d__3")]
public static IEnumerable`1<PdfPageTextLine> SplitTextLines(IList`1<PdfTextBlock> pageBlocks);
    private static bool IsDuplicateLine(List`1<PdfPageTextLine> prevLines, PdfPageTextLine line);
}
public class DevExpress.Pdf.Native.PdfPageTextPosition : object {
    private int wordNumber;
    private int offset;
    public int WordNumber { get; }
    public int Offset { get; }
    public PdfPageTextPosition(int wordNumber, int offset);
    public static bool AreEqual(PdfPageTextPosition p1, PdfPageTextPosition p2);
    public int get_WordNumber();
    public int get_Offset();
}
public class DevExpress.Pdf.Native.PdfPageTextRange : object {
    private int pageIndex;
    private PdfPageTextPosition startTextPosition;
    private PdfPageTextPosition endTextPosition;
    private bool wholePage;
    public int PageIndex { get; }
    public PdfPageTextPosition StartTextPosition { get; }
    public PdfPageTextPosition EndTextPosition { get; }
    public int StartWordNumber { get; }
    public int EndWordNumber { get; }
    public int StartOffset { get; }
    public int EndOffset { get; }
    public bool WholePage { get; }
    public PdfPageTextRange(int pageIndex, PdfPageTextPosition startTextPosition, PdfPageTextPosition endTextPosition);
    public PdfPageTextRange(int pageIndex, int startWordNumber, int startOffset, int endWordNumber, int endOffset);
    public PdfPageTextRange(int pageIndex);
    public static bool AreEqual(PdfPageTextRange t1, PdfPageTextRange t2);
    public int get_PageIndex();
    public PdfPageTextPosition get_StartTextPosition();
    public PdfPageTextPosition get_EndTextPosition();
    public int get_StartWordNumber();
    public int get_EndWordNumber();
    public int get_StartOffset();
    public int get_EndOffset();
    public bool get_WholePage();
}
public class DevExpress.Pdf.Native.PdfPageTreeNode : PdfPageTreeObject {
    internal static string PageTreeNodeType;
    internal static string KidsDictionaryKey;
    private static string countDictionaryKey;
    private IList`1<PdfPageTreeObject> kids;
    private int count;
    public int Count { get; }
    internal PdfPageTreeNode(int objectNumber, PdfDocumentCatalog documentCatalog, PdfRectangle mediaBox, PdfRectangle cropBox, int rotate, IEnumerable`1<PdfPage> pages);
    internal PdfPageTreeNode(PdfPageTreeNode parent, PdfReaderDictionary dictionary);
    public int get_Count();
    internal void RemovePage(PdfPage page);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfPageTreeNode/<System-Collections-Generic-IEnumerable<DevExpress-Pdf-PdfPage>-GetEnumerator>d__11")]
private sealed virtual override IEnumerator`1<PdfPage> System.Collections.Generic.IEnumerable<DevExpress.Pdf.PdfPage>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfPageTreeObjectList : PdfDeferredList`1<PdfPageTreeObject> {
    private PdfObjectCollection objects;
    private PdfPageTreeNode parent;
    public PdfPageTreeObjectList(PdfReaderArray kids, PdfPageTreeNode parent);
    private PdfPageTreeObject CreatePage(PdfReaderDictionary kidDictionary);
    protected virtual PdfPageTreeObject ParseObject(object value);
}
public class DevExpress.Pdf.Native.PdfPageWordBuilder : object {
    private List`1<PdfCharacter> characters;
    private double wordMinX;
    private double wordMaxX;
    private double wordMinY;
    private double wordMaxY;
    private double wordAngle;
    private bool needsSorting;
    private bool hasRealCharacters;
    public PdfPoint LeftBoundary { get; }
    public PdfPoint RightBoundary { get; }
    public IEnumerable`1<PdfCharacter> Characters { get; }
    private static bool HasFormatCharacters(string unicodeData);
    public PdfPoint get_LeftBoundary();
    public PdfPoint get_RightBoundary();
    public IEnumerable`1<PdfCharacter> get_Characters();
    public void AppendChar(PdfRectangle cropBox, PdfPageTextCharacter character);
    public PdfWordPart CreatePart(bool wordEnded);
}
public abstract class DevExpress.Pdf.Native.PdfPathAnnotationAppearanceBuilder`1 : PdfMarkupAnnotationAppearanceBuilder`1<T> {
    private IPdfPathAnnotationAppearanceBuilderStrategy annotationBuilderStrategy;
    protected IPdfPathAnnotationAppearanceBuilderStrategy AnnotationBuilderStrategy { get; }
    public PdfPathAnnotationAppearanceBuilder`1(T markupAnnotation);
    protected IPdfPathAnnotationAppearanceBuilderStrategy get_AnnotationBuilderStrategy();
    protected virtual PdfRectangle GetFormBBox();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
    protected abstract virtual PdfRectangle GetFormBBoxCore();
    protected abstract virtual IPdfPathAnnotationAppearanceBuilderStrategy CreateAnnotationBuilderStrategy();
}
public class DevExpress.Pdf.Native.PdfPathAnnotationAppearanceBuilderCloudyLineStrategy : PdfPathAnnotationAppearanceBuilderStrategy`1<PdfPolygonAnnotation> {
    private bool ccw;
    private double intensity;
    private double Intensity { get; }
    public PdfPathAnnotationAppearanceBuilderCloudyLineStrategy(IList`1<PdfPoint> vertices, bool closePath, double intensity);
    private double get_Intensity();
    public virtual PdfGraphicsPath BuildPath();
    public virtual PdfRectangle GetBBox();
    public virtual void DrawLine(PdfPoint point1, PdfPoint point2);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfPathAnnotationAppearanceBuilderCloudyLineStrategy/<GetPoints>d__8")]
private IEnumerable`1<PdfPoint> GetPoints(PdfPoint point1, PdfPoint point2);
}
public class DevExpress.Pdf.Native.PdfPathAnnotationAppearanceBuilderLineStrategy : PdfPathAnnotationAppearanceBuilderStrategy`1<PdfPathAnnotation> {
    public PdfPathAnnotationAppearanceBuilderLineStrategy(IList`1<PdfPoint> vertices, bool closePath);
    public virtual void DrawLine(PdfPoint point1, PdfPoint point2);
    public virtual PdfRectangle GetBBox();
}
public abstract class DevExpress.Pdf.Native.PdfPathAnnotationAppearanceBuilderStrategy : object {
    public static IPdfPathAnnotationAppearanceBuilderStrategy Create(IList`1<PdfPoint> vertices, PdfAnnotationBorderEffect borderEffect, bool closePath);
}
public abstract class DevExpress.Pdf.Native.PdfPathAnnotationAppearanceBuilderStrategy`1 : PdfPathAnnotationAppearanceBuilderStrategy {
    [CompilerGeneratedAttribute]
private PdfGraphicsPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClosePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfPoint> <ActualVerticies>k__BackingField;
    protected PdfGraphicsPath Path { get; }
    protected bool ClosePath { get; }
    protected IList`1<PdfPoint> ActualVerticies { get; }
    protected PdfPathAnnotationAppearanceBuilderStrategy`1(IList`1<PdfPoint> vertices, bool closePath);
    [CompilerGeneratedAttribute]
protected PdfGraphicsPath get_Path();
    [CompilerGeneratedAttribute]
protected bool get_ClosePath();
    [CompilerGeneratedAttribute]
protected IList`1<PdfPoint> get_ActualVerticies();
    public virtual PdfGraphicsPath BuildPath();
    public abstract virtual PdfRectangle GetBBox();
    public abstract virtual void DrawLine(PdfPoint point1, PdfPoint point2);
}
public class DevExpress.Pdf.Native.PdfPathAnnotationBuilder : PdfMarkupAnnotationBuilder {
    [CompilerGeneratedAttribute]
private IList`1<PdfPoint> <Points>k__BackingField;
    public IList`1<PdfPoint> Points { get; }
    public PdfPathAnnotationBuilder(IList`1<PdfPoint> points);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<PdfPoint> get_Points();
}
public abstract class DevExpress.Pdf.Native.PdfPathAnnotationState`1 : PdfMarkupAnnotationState`1<T> {
    private PdfObservableCollectionWrapper`1<PdfPoint> vertices;
    public IList`1<PdfPoint> Vertices { get; }
    public PdfColor InteriorColor { get; public set; }
    public PdfRectilinearMeasure Measure { get; }
    public PdfRectangle Rect { get; public set; }
    protected PdfPathAnnotationState`1(PdfPageState pageState, T pathAnnotation);
    public sealed virtual IList`1<PdfPoint> get_Vertices();
    public sealed virtual PdfColor get_InteriorColor();
    public sealed virtual void set_InteriorColor(PdfColor value);
    public PdfRectilinearMeasure get_Measure();
    public virtual PdfRectangle get_Rect();
    public virtual void set_Rect(PdfRectangle value);
    private void OnVerticesItemChanged(object sender, PdfObservableCollectionEventArgs`1<PdfPoint> e);
}
public class DevExpress.Pdf.Native.PdfPatternResourceDictionary : PdfResourceDictionary`1<PdfPattern> {
    protected string Prefix { get; }
    protected string ResourceKey { get; }
    public PdfPatternResourceDictionary(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfPatternResourceDictionary parentResourceDictionary);
    protected virtual string get_Prefix();
    protected virtual string get_ResourceKey();
    protected virtual PdfPattern CreateResource(object value);
}
public enum DevExpress.Pdf.Native.PdfPixelFormat : Enum {
    public int value__;
    public static PdfPixelFormat Unknown;
    public static PdfPixelFormat Gray8bit;
    public static PdfPixelFormat Argb24bpp;
    public static PdfPixelFormat Argb32bpp;
}
public class DevExpress.Pdf.Native.PdfPlaceholder : object {
    private int length;
    private int offset;
    public int Length { get; }
    public int Offset { get; }
    public PdfPlaceholder(int length);
    public int get_Length();
    public int get_Offset();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.Native.PdfPngPredictor : PdfFlateLZWDecodeFilterPredictor {
    protected int ActualRowLength { get; }
    public PdfPngPredictor(PdfFlateLZWDecodeFilter filter);
    protected virtual int get_ActualRowLength();
    protected virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.Native.PdfPngPredictorDataSource : PdfFlateLZWDecodeFilterPredictorDataSource {
    private Byte[] topLeftPixel;
    private Byte[] previousRow;
    private PngPrediction pngPrediction;
    public PdfPngPredictorDataSource(PdfFlateLZWDecodeFilter filter, IPdfFlateDataSource source);
    protected virtual void StartNextRow();
    protected virtual void ProcessRow();
}
public class DevExpress.Pdf.Native.PdfPolygon : object {
    private List`1<PdfPoint> points;
    private PdfPoint lastPoint;
    public IList`1<PdfPoint> Points { get; }
    public IList`1<PdfPoint> get_Points();
    public void AddPoint(double x, double y);
}
public class DevExpress.Pdf.Native.PdfPolygonAnnotationAppearanceBuilder : PdfPathAnnotationAppearanceBuilder`1<PdfPolygonAnnotation> {
    public PdfPolygonAnnotationAppearanceBuilder(PdfPolygonAnnotation annotation);
    protected virtual PdfRectangle GetFormBBoxCore();
    protected virtual IPdfPathAnnotationAppearanceBuilderStrategy CreateAnnotationBuilderStrategy();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfPolygonAnnotationState : PdfPathAnnotationState`1<PdfPolygonAnnotation> {
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    protected PdfAnnotationBorderEffect BorderEffect { get; protected set; }
    public PdfPolygonAnnotationState(PdfPageState pageState, PdfPolygonAnnotation pathAnnotation);
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
    protected virtual PdfAnnotationBorderEffect get_BorderEffect();
    protected virtual void set_BorderEffect(PdfAnnotationBorderEffect value);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfPolygonClipper : object {
    private static PdfPolygonClipperEdge[] edges;
    private PdfRectangle bounds;
    private Dictionary`2<PdfPoint, PdfPolygonClipperEdge> pointEdges;
    private PdfPolygon polygon;
    public PdfPolygonClipper(PdfRectangle bounds);
    private static PdfPolygonClipper();
    internal bool IsInside(PdfPoint point, PdfPolygonClipperEdge edge);
    private void AddIntersection(PdfPolygonClipperEdge edge, PdfPoint point1, PdfPoint point2);
    private bool ClipEdge(PdfPolygonClipperEdge edge, bool isPreviousPointInside, PdfPoint previousPoint, PdfPoint currentPoint);
    public PdfGraphicsPath Clip(PdfGraphicsPath path);
}
[FlagsAttribute]
internal enum DevExpress.Pdf.Native.PdfPolygonClipperEdge : Enum {
    public int value__;
    public static PdfPolygonClipperEdge None;
    public static PdfPolygonClipperEdge Left;
    public static PdfPolygonClipperEdge Right;
    public static PdfPolygonClipperEdge Bottom;
    public static PdfPolygonClipperEdge Top;
}
public class DevExpress.Pdf.Native.PdfPolyLineAnnotationAppearanceBuilder : PdfPathAnnotationAppearanceBuilder`1<PdfUnclosedPathAnnotation> {
    public PdfPolyLineAnnotationAppearanceBuilder(PdfUnclosedPathAnnotation annotation);
    protected virtual IPdfPathAnnotationAppearanceBuilderStrategy CreateAnnotationBuilderStrategy();
    protected virtual PdfRectangle GetFormBBoxCore();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfPolyLineAnnotationState : PdfUnclosedPathAnnotationState`1<PdfPolyLineAnnotation> {
    public PdfPolyLineAnnotationState(PdfPageState pageState, PdfPolyLineAnnotation pathAnnotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfPredefinedToUnicodeMapping : PdfToUnicodeMapping {
    [CompilerGeneratedAttribute]
private PdfName <CMapName>k__BackingField;
    public PdfCharacterMapping CharacterMapping { get; }
    public PdfName CMapName { get; }
    internal PdfPredefinedToUnicodeMapping(PdfName cMapName);
    public virtual PdfCharacterMapping get_CharacterMapping();
    [CompilerGeneratedAttribute]
public PdfName get_CMapName();
    public virtual object Write(IPdfWrittenObjectsCollection objects);
    public virtual PdfPrimitive Write(PdfObjectStorage collection);
    public virtual IPdfToUnicodeCMap CreateMapping(bool oneByteCodeRangesOnly);
}
public class DevExpress.Pdf.Native.PdfPrintableViewerBookmarkCollection : PdfViewerBookmarkCollection {
    private IList`1<PdfPage> pages;
    public PdfPrintableViewerBookmarkCollection(PdfDocumentStateBase documentState);
    public bool CanPrintPages(IEnumerable`1<PdfViewerBookmark> items, bool printSection);
    public Int32[] GetPrintPageNumbers(IEnumerable`1<PdfViewerBookmark> items, bool printSection);
    private int GetPageNumber(PdfOutline outline);
    private int GetNextPageNumber(PdfOutline outline);
    private bool CanPrintPages(PdfOutline outline, bool printSection);
}
public class DevExpress.Pdf.Native.PdfProgressChangedEventArgs : EventArgs {
    private int progressValue;
    public int ProgressValue { get; }
    public PdfProgressChangedEventArgs(int progressValue);
    public int get_ProgressValue();
}
public class DevExpress.Pdf.Native.PdfProgressChangedEventHandler : MulticastDelegate {
    public PdfProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PdfProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PdfProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.Native.PdfPropertiesResourceDictionary : PdfResourceDictionary`1<PdfProperties> {
    protected string Prefix { get; }
    protected string ResourceKey { get; }
    public PdfPropertiesResourceDictionary(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfPropertiesResourceDictionary parentResourceDictionary);
    protected virtual string get_Prefix();
    protected virtual string get_ResourceKey();
    protected virtual PdfProperties CreateResource(object value);
}
public class DevExpress.Pdf.Native.PdfPushButtonFormFieldAppearanceBuilder : PdfTextBasedFormFieldAppearanceBuilder`1<PdfButtonFormField> {
    public PdfPushButtonFormFieldAppearanceBuilder(PdfWidgetAnnotation widget, PdfButtonFormField buttonFormField, IPdfExportFontProvider fontSearch);
    private static PdfPoint CalculateScale(PdfRectangle contentRectangle, double width, double height, PdfIconFit iconFit);
    private void DrawTextBox(PdfFormCommandConstructor constructor, double xOffset, double yOffset, string text);
    private void DrawCenteredTextBox(PdfFormCommandConstructor constructor, PdfRectangle contentRectangle, double textWidth, string text);
    private void DrawIcon(PdfFormCommandConstructor constructor, PdfRectangle contentRectangle);
    protected virtual PdfRectangle GetAppearanceContentRectangle();
    protected virtual void DrawContent(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfRadioGroupFieldAppearance : object {
    private bool shouldGeneratePressedAppearance;
    private PdfAcroFormButtonStyle buttonStyle;
    private PdfAcroFormFieldAppearance appearance;
    public bool ShouldGeneratePressedAppearance { get; }
    public PdfAcroFormButtonStyle ButtonStyle { get; }
    public PdfAcroFormFieldAppearance Appearance { get; }
    public PdfRadioGroupFieldAppearance(bool shouldGeneratePressedAppearance, PdfAcroFormButtonStyle buttonStyle, PdfAcroFormFieldAppearance appearance);
    public PdfRadioGroupFieldAppearance(PdfAcroFormRadioGroupField field);
    public bool get_ShouldGeneratePressedAppearance();
    public PdfAcroFormButtonStyle get_ButtonStyle();
    public PdfAcroFormFieldAppearance get_Appearance();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfReaderArray : object {
    private PdfObjectCollection objects;
    private IList`1<object> values;
    public PdfObjectCollection Objects { get; }
    public PdfDocumentCatalog DocumentCatalog { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    internal PdfReaderArray(IList`1<object> values);
    internal PdfReaderArray(PdfObjectCollection objects);
    internal PdfReaderArray(PdfObjectCollection objects, IList`1<object> values);
    public PdfObjectCollection get_Objects();
    public PdfDocumentCatalog get_DocumentCatalog();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public PdfObjectReference GetReference(int index);
    private object Resolve(object value);
    public T GetObject(int index, Func`2<PdfReaderDictionary, T> create);
    public object GetDirectValue(int index);
    public object GetResolvedValue(int index);
    public Byte[] GetBytes(int index);
    public Nullable`1<bool> GetBool(int index);
    public PdfReaderArray GetList(int index);
    public PdfReaderDictionary GetDictionary(int index);
    public PdfReaderStream GetStream(int index);
    public PdfName GetName(int index);
    public double GetDouble(int index);
    public Nullable`1<double> GetNullableDouble(int index);
    public int GetInteger(int index);
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfReaderArray/<GetEnumerator>d__35")]
public sealed virtual IEnumerator`1<object> GetEnumerator();
    public sealed virtual int IndexOf(object item);
    public sealed virtual void Insert(int index, object item);
    public sealed virtual bool Remove(object item);
    public sealed virtual void RemoveAt(int index);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfReaderArray/<System-Collections-IEnumerable-GetEnumerator>d__40")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Native.PdfReaderDictionary : PdfDictionary {
    private static string timeZonePattern;
    private PdfObjectCollection objects;
    private int number;
    private int generation;
    public PdfObjectCollection Objects { get; }
    public PdfDocumentCatalog DocumentCatalog { get; }
    public int Number { get; }
    public int Generation { get; }
    public PdfReaderDictionary(PdfObjectCollection objects, int number, int generation);
    private static bool IsDigit(char chr);
    private static int ConvertToDigit(char chr);
    private static int GetDateComponent(string str, int offset);
    private static int GetTimeComponent(string str, int offset, char delimiter);
    private static DateTimeOffset ParseDate(string str);
    public static CultureInfo ConvertToCultureInfo(string language);
    public PdfObjectCollection get_Objects();
    public PdfDocumentCatalog get_DocumentCatalog();
    public int get_Number();
    public int get_Generation();
    public T GetObject(string key, Func`2<PdfReaderStream, T> create);
    public T GetObject(string key, Func`2<PdfReaderDictionary, T> create);
    public string GetName(string key);
    public Nullable`1<bool> GetBoolean(string key);
    public Nullable`1<int> GetInteger(string key);
    public Nullable`1<double> GetNumber(string key);
    public Byte[] GetBytes(string key);
    public string GetString(string key);
    public string GetTextString(string key);
    public string GetStringAdvanced(string key);
    public Nullable`1<DateTimeOffset> GetDate(string key);
    public PdfObjectReference GetObjectReference(string key);
    public T GetDeferredObject(string key);
    public PdfReaderArray GetArray(string key);
    public IList`1<double> GetDoubleArray(string key);
    public IList`1<T> GetArray(string key, Func`2<object, T> create);
    public IList`1<PdfRange> GetRanges(string key);
    public PdfRectangle GetRectangle(string key);
    public PdfPadding GetPadding(string key);
    public PdfPadding GetPadding();
    public PdfReaderDictionary GetDictionary(string key, string nonEncryptedKey);
    public PdfReaderDictionary GetDictionary(string key);
    public PdfReaderStream GetStream(string key);
    public PdfReaderDictionary GetStreamDictionary(string key);
    public PdfColorSpace GetColorSpace(string key);
    public PdfMetadata GetMetadata();
    public CultureInfo GetLanguageCulture();
    public PdfTextJustification GetTextJustification();
    public PdfAnnotationHighlightingMode GetAnnotationHighlightingMode();
    public Nullable`1<PdfRichMediaContentType> GetRichMediaContentType();
    public PdfOptionalContent GetOptionalContent();
    public PdfOptionalContentIntent GetOptionalContentIntent(string key);
    public PdfGraphicsStateParameters GetGraphicsStateParameters(string key);
    public IList`1<PdfFilter> GetFilters(string key, string decodeParamsKey);
    public PdfCommandList GetAppearance(PdfResources resources);
    public PdfObjectList`1<PdfCustomFunction> GetFunctions(string functionDictionaryKey, bool mustBeArray);
    public PdfDestinationObject GetDestination(string key);
    public PdfAction GetAction(string actionDictionary);
    public PdfAdditionalActions GetAdditionalActions(PdfAnnotation parent);
    public PdfJavaScriptAction GetJavaScriptAction(string key);
    public PdfHalftone GetHalftone(string key);
    public PdfResources GetResources(string key, PdfResources parentResources, bool shouldBeWritten);
    public PdfResources GetActualResources(string key, PdfResources parentResources, bool shouldBeWritten);
    public PdfToUnicodeMapping GetToUnicodeMapping(string key);
    public bool ContainsArrayNamedElement(string key, string name);
    public T GetEnumName(string key);
    private T Resolve(string key);
    private object Resolve(string key);
    private PdfObjectList`1<PdfCustomFunction> CreateFunctions(bool mustBeArray, object value);
    internal void LogValidationError(string message);
}
public class DevExpress.Pdf.Native.PdfReaderStream : PdfStream {
    private PdfReaderDictionary dictionary;
    private PdfEncryptionInfo encryptionInfo;
    public PdfReaderDictionary Dictionary { get; }
    public Byte[] DecryptedData { get; }
    public Byte[] UncompressedData { get; }
    public PdfReaderStream(PdfReaderDictionary dictionary, Byte[] data, PdfEncryptionInfo encryptionInfo);
    public PdfReaderStream(PdfReaderDictionary dictionary, Byte[] data);
    public PdfReaderDictionary get_Dictionary();
    public Byte[] get_DecryptedData();
    public Byte[] get_UncompressedData();
    private Byte[] GetUncompressedData(bool shouldDecrypt);
    public Byte[] TryDecrypt();
    public Byte[] TryGetUncompressedData(bool shouldDecrypt);
}
public class DevExpress.Pdf.Native.PdfRedactAnnotationState : PdfMarkupAnnotationState`1<PdfRedactAnnotation> {
    public PdfRedactAnnotationState(PdfPageState pageState, PdfRedactAnnotation annotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfReplyAnnotationState : PdfMarkupAnnotationState`1<PdfMarkupAnnotation> {
    public PdfReplyAnnotationState(PdfPageState pageState, PdfMarkupAnnotation markupAnnotation, PdfAnnotationStateComment parentComment);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public abstract class DevExpress.Pdf.Native.PdfResourceDictionary`1 : object {
    private Dictionary`2<string, DictionaryItem<T>> dictionary;
    private PdfResources resources;
    private object subDictionarySource;
    private PdfReaderDictionary subDictionary;
    private int nextResourceNumber;
    protected PdfReaderDictionary SubDictionary { get; }
    protected PdfResources Resources { get; }
    protected string ResourceKey { get; }
    protected string Prefix { get; }
    protected PdfObjectCollection Objects { get; }
    protected PdfDocumentCatalog DocumentCatalog { get; }
    public IEnumerable`1<int> ObjectNumbers { get; }
    public ICollection`1<string> Names { get; }
    private string NextUncheckedName { get; }
    private string NextName { get; }
    public PdfResourceDictionary`1(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfResourceDictionary`1<T> parentResourceDictionary);
    protected PdfReaderDictionary get_SubDictionary();
    protected PdfResources get_Resources();
    protected abstract virtual string get_ResourceKey();
    protected abstract virtual string get_Prefix();
    protected PdfObjectCollection get_Objects();
    protected PdfDocumentCatalog get_DocumentCatalog();
    public IEnumerable`1<int> get_ObjectNumbers();
    public ICollection`1<string> get_Names();
    private string get_NextUncheckedName();
    private string get_NextName();
    public void Clear();
    public void Add(string resourceName, int objectNumber);
    private DictionaryItem<T> GetItemByObjectNumber(int objectNumber);
    private DictionaryItem<T> GetItemByObject(T resourceObject);
    public string Add(T resource);
    public void Add(string name, T resource);
    public void Add(PdfObjectCloningCollection collection, PdfResourceDictionary`1<T> resourceDictionary, Dictionary`2<string, string> renamedResources);
    public string GetResourceName(int objectNumber);
    protected abstract virtual T CreateResource(object value);
    public virtual T GetResource(string resourceName);
    public void ResolveResource();
    public void CopyTo(PdfResourceDictionary`1<T> destinationDictionary);
    private string GenerateName(string name, ICollection`1<string> names);
    private void FillResourcesWriterDictionary(PdfWriterDictionary writerDictionary, IPdfWrittenObjectsCollection objects);
    public PdfWriterDictionary CreateResourceWriterDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.PdfResources : PdfObject {
    private static string graphicsStateParametersDictionaryName;
    private static string colorSpacesDictionaryName;
    private static string patternsDictionaryName;
    private static string shadingsDictionaryName;
    private static string xObjectsDictionaryName;
    private static string fontsDictionaryName;
    private static string propertiesDictionaryName;
    private PdfDocumentCatalog documentCatalog;
    private bool shouldBeWritten;
    private PdfGraphicsStateParametersResourceDictionary graphicsStateParameters;
    private PdfColorSpaceResourceDictionary colorSpaces;
    private PdfPatternResourceDictionary patterns;
    private PdfShadingResourceDictionary shadings;
    private PdfXObjectResourceDictionary xObjects;
    private PdfFontResourceDictionary fonts;
    private PdfPropertiesResourceDictionary properties;
    public PdfDocumentCatalog DocumentCatalog { get; }
    public IEnumerable`1<int> ObjectNumbers { get; }
    private IPdfDocumentCatalog DevExpress.Pdf.Native.IPdfResources.DocumentCatalog { get; }
    public PdfResources(PdfDocumentCatalog documentCatalog, PdfResources parentResources, bool shouldBeWritten, PdfReaderDictionary dictionary, bool alternativeFontNames);
    public PdfResources(PdfDocumentCatalog documentCatalog, bool shouldBeWritten, bool alternativeFontNames);
    public PdfDocumentCatalog get_DocumentCatalog();
    public IEnumerable`1<int> get_ObjectNumbers();
    private sealed virtual override IPdfDocumentCatalog DevExpress.Pdf.Native.IPdfResources.get_DocumentCatalog();
    public PdfGraphicsStateParameters GetGraphicsStateParameters(string graphicsStateParametersName);
    public PdfColorSpace GetColorSpace(string colorSpaceName);
    public PdfPattern GetPattern(string patternName);
    public PdfShading GetShading(string shadingName);
    public PdfXObject GetXObject(string xObjectName);
    public PdfFont GetFont(string fontName);
    public IEnumerable`1<string> GetAllPropertiesNames();
    public PdfProperties GetProperties(string propertiesName);
    public sealed virtual string AddGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    public sealed virtual string AddPattern(PdfPattern pattern);
    public sealed virtual string AddShading(PdfShading shading);
    public sealed virtual string AddXObject(PdfXObject obj);
    public sealed virtual void AddNamedXObject(string name, PdfXObject obj);
    public sealed virtual string AddFont(PdfFont font);
    public sealed virtual string AddColorSpace(PdfColorSpace colorSpace);
    public sealed virtual string AddProperties(PdfProperties customProperties);
    public void Clear();
    public void FillResources(PdfResources resources);
    public void AppendResources(PdfObjectCloningCollection collection, PdfResources appendedResources, PdfCloningContext cloningContext);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    public sealed virtual PdfObject ToWritableObject();
    public sealed virtual PdfResources AsResources();
}
public class DevExpress.Pdf.Native.PdfRgbaColor : object {
    private double a;
    private double r;
    private double g;
    private double b;
    public double A { get; }
    public double R { get; }
    public double G { get; }
    public double B { get; }
    public PdfRgbaColor(double r, double g, double b, double a);
    private PdfRgbaColor(PdfRGBColorData data);
    public static PdfRgbaColor Create(PdfColor color);
    public double get_A();
    public double get_R();
    public double get_G();
    public double get_B();
    public PdfColor ToPdfColor();
}
public class DevExpress.Pdf.Native.PdfRGBColorData : ValueType {
    private double red;
    private double green;
    private double blue;
    public double R { get; }
    public double G { get; }
    public double B { get; }
    public PdfRGBColorData(PdfColor color);
    public double get_R();
    public double get_G();
    public double get_B();
}
public class DevExpress.Pdf.Native.PdfRGBImageDataSource : PdfImageDataSource {
    private int stride;
    public int ComponentsCount { get; }
    public PdfRGBImageDataSource(IPdfImageScanlineSource source, int width, int stride);
    public virtual int get_ComponentsCount();
    public virtual void FillBuffer(Byte[] buffer, int scanlineCount);
}
public abstract class DevExpress.Pdf.Native.PdfRubberStampAnnotationAppearanceBuilder : PdfMarkupAnnotationAppearanceBuilder`1<PdfRubberStampAnnotation> {
    protected static string greenColorCommand;
    protected static string redColorCommand;
    protected static string blueColorCommand;
    protected static double defaultAppearanceAlphaConstant;
    protected static Encoding encoding;
    [CompilerGeneratedAttribute]
private PdfRectangle <BBox>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DXTextLine> <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfExportFont <FontData>k__BackingField;
    protected PdfRectangle BBox { get; protected set; }
    protected IReadOnlyList`1<DXTextLine> Lines { get; }
    protected PdfExportFont FontData { get; }
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    protected PdfRubberStampAnnotationAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    private static PdfRubberStampAnnotationAppearanceBuilder();
    public static PdfRubberStampAnnotationAppearanceBuilder Create(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    [CompilerGeneratedAttribute]
protected PdfRectangle get_BBox();
    [CompilerGeneratedAttribute]
protected void set_BBox(PdfRectangle value);
    [CompilerGeneratedAttribute]
protected IReadOnlyList`1<DXTextLine> get_Lines();
    [CompilerGeneratedAttribute]
protected PdfExportFont get_FontData();
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
    protected virtual PdfRectangle GetFormBBox();
    protected string CreateOpacityResource(PdfFormCommandConstructor constructor);
    protected virtual PdfTransformationMatrix CreateFormMatrix();
    private static PdfTransformationMatrix CalculateRotationMatrix(PdfRectangle rect, int rotationAngle);
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationApprovedAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationApprovedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public abstract class DevExpress.Pdf.Native.PdfRubberStampAnnotationArrowBasedAppearanceBuilder : PdfRubberStampAnnotationFrameBasedAppearanceBuilder {
    protected string FrameCommands { get; }
    protected PdfRubberStampAnnotationArrowBasedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual string get_FrameCommands();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationAsIsAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationAsIsAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public abstract class DevExpress.Pdf.Native.PdfRubberStampAnnotationBoxBasedAppearanceBuilder : PdfRubberStampAnnotationFrameBasedAppearanceBuilder {
    protected string FrameCommands { get; }
    protected PdfRubberStampAnnotationBoxBasedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual string get_FrameCommands();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationConfidentialAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationConfidentialAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationDApprovedAppearanceBuilder : PdfRubberStampAnnotationDynamicAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    protected PdfCoreStringId CredentialsStringId { get; }
    public PdfRubberStampAnnotationDApprovedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
    protected virtual PdfCoreStringId get_CredentialsStringId();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationDConfidentialAppearanceBuilder : PdfRubberStampAnnotationDynamicAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    protected PdfCoreStringId CredentialsStringId { get; }
    public PdfRubberStampAnnotationDConfidentialAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
    protected virtual PdfCoreStringId get_CredentialsStringId();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationDepartmentalAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationDepartmentalAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationDraftAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationDraftAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationDReceivedAppearanceBuilder : PdfRubberStampAnnotationDynamicAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    protected PdfCoreStringId CredentialsStringId { get; }
    public PdfRubberStampAnnotationDReceivedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
    protected virtual PdfCoreStringId get_CredentialsStringId();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationDReviewedAppearanceBuilder : PdfRubberStampAnnotationDynamicAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    protected PdfCoreStringId CredentialsStringId { get; }
    public PdfRubberStampAnnotationDReviewedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
    protected virtual PdfCoreStringId get_CredentialsStringId();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationDRevisedAppearanceBuilder : PdfRubberStampAnnotationDynamicAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    protected PdfCoreStringId CredentialsStringId { get; }
    public PdfRubberStampAnnotationDRevisedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
    protected virtual PdfCoreStringId get_CredentialsStringId();
}
public abstract class DevExpress.Pdf.Native.PdfRubberStampAnnotationDynamicAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    private IReadOnlyList`1<DXTextLine> credentialStringLines;
    private PdfRectangle bBox;
    protected PdfCoreStringId CredentialsStringId { get; }
    protected PdfRubberStampAnnotationDynamicAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected abstract virtual PdfCoreStringId get_CredentialsStringId();
    protected virtual PdfRectangle GetFormBBox();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationExperimentalAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationExperimentalAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationExpiredAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationExpiredAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationFinalAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationFinalAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationForCommentAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationForCommentAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationForPublicReleaseAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationForPublicReleaseAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public abstract class DevExpress.Pdf.Native.PdfRubberStampAnnotationFrameBasedAppearanceBuilder : PdfRubberStampAnnotationAppearanceBuilder {
    protected string FrameCommands { get; }
    protected PdfRubberStampAnnotationFrameBasedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected abstract virtual string get_FrameCommands();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationNotApprovedAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationNotApprovedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationNotForPublicReleaseAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationNotForPublicReleaseAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationSHAcceptedAppearanceBuilder : PdfRubberStampAnnotationAppearanceBuilder {
    public PdfRubberStampAnnotationSHAcceptedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfRectangle GetFormBBox();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationSHInitialHereAppearanceBuilder : PdfRubberStampAnnotationArrowBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationSHInitialHereAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationSHRejectedAppearanceBuilder : PdfRubberStampAnnotationAppearanceBuilder {
    public PdfRubberStampAnnotationSHRejectedAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfRectangle GetFormBBox();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationSHSignHereAppearanceBuilder : PdfRubberStampAnnotationArrowBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationSHSignHereAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationSHWitnessHereAppearanceBuilder : PdfRubberStampAnnotationArrowBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationSHWitnessHereAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationSoldAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationSoldAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationState : PdfMarkupAnnotationState`1<PdfRubberStampAnnotation> {
    private bool keepAspectRatio;
    private PdfCustomIconAppearanceManager customIconApperanceManager;
    public string IconName { get; public set; }
    public string Author { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public bool KeepAspectRatio { get; public set; }
    public PdfRubberStampAnnotationState(PdfPageState pageState, PdfRubberStampAnnotation annotation, bool keepAspectRatio);
    public static PdfRubberStampAnnotationState Create(PdfPageState pageState, PdfRubberStampAnnotation annotation, string pdfFileName, int pageNumber, bool keepAspectRatio);
    public static PdfRubberStampAnnotationState Create(PdfPageState pageState, PdfRubberStampAnnotation annotation, Stream stream, int pageNumber, bool keepAspectRatio);
    public string get_IconName();
    public void set_IconName(string value);
    public virtual string get_Author();
    public virtual void set_Author(string value);
    public virtual Nullable`1<DateTimeOffset> get_CreationDate();
    public virtual void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public bool get_KeepAspectRatio();
    public void set_KeepAspectRatio(bool value);
    public virtual void RebuildAppearance();
    private void UpdateAspectRatio();
    private void UpdateCustomAppearance();
    public void SetCustomIcon(Stream stream, int pageNumber);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfRubberStampAnnotationTopSecretAppearanceBuilder : PdfRubberStampAnnotationBoxBasedAppearanceBuilder {
    protected PdfCoreStringId LocalizedStringId { get; }
    protected string ColorCommand { get; }
    public PdfRubberStampAnnotationTopSecretAppearanceBuilder(PdfRubberStampAnnotation annotation, IPdfExportFontProvider fontSearch);
    protected virtual PdfCoreStringId get_LocalizedStringId();
    protected virtual string get_ColorCommand();
}
public abstract class DevExpress.Pdf.Native.PdfSampledDataConverter : object {
    private int bitsPerSample;
    private int samplesCount;
    protected int BitsPerSample { get; }
    protected int SamplesCount { get; }
    protected PdfSampledDataConverter(int bitsPerSample, int samplesCount);
    private static PdfSampledDataConverter Create(int bitsPerSample, int samplesCount);
    public static Int64[] Convert(int bitsPerSample, int samplesCount, Byte[] data);
    public static Byte[] ConvertBack(int bitsPerSample, int samplesCount, Int64[] data);
    protected int get_BitsPerSample();
    protected int get_SamplesCount();
    protected abstract virtual Int64[] Convert(Byte[] data);
    protected abstract virtual Byte[] ConvertBack(Int64[] data);
}
public class DevExpress.Pdf.Native.PdfSampledDataHighBitsCountConverter : PdfSampledDataConverter {
    private int multiplier;
    public PdfSampledDataHighBitsCountConverter(int bitsPerSample, int samplesCount);
    protected virtual Int64[] Convert(Byte[] data);
    protected virtual Byte[] ConvertBack(Int64[] data);
}
public class DevExpress.Pdf.Native.PdfSampledDataLowBitsCountConverter : PdfSampledDataConverter {
    private int divisor;
    private int dataLength;
    private int lastElementSize;
    public PdfSampledDataLowBitsCountConverter(int bitsPerSample, int samplesCount);
    protected virtual Int64[] Convert(Byte[] data);
    protected virtual Byte[] ConvertBack(Int64[] data);
}
public class DevExpress.Pdf.Native.PdfSampledDataSingleByteConverter : PdfSampledDataConverter {
    public PdfSampledDataSingleByteConverter(int bitsPerSample, int samplesCount);
    protected virtual Int64[] Convert(Byte[] data);
    protected virtual Byte[] ConvertBack(Int64[] data);
}
public class DevExpress.Pdf.Native.PdfScanlineTransformationResult : object {
    private IPdfImageScanlineSource scanlineSource;
    private PdfPixelFormat pixelFormat;
    public IPdfImageScanlineSource ScanlineSource { get; }
    public PdfPixelFormat PixelFormat { get; }
    public PdfScanlineTransformationResult(IPdfImageScanlineSource scanlineSource, PdfPixelFormat pixelFormat);
    public PdfScanlineTransformationResult(IPdfImageScanlineSource scanlineSource);
    public IPdfImageScanlineSource get_ScanlineSource();
    public PdfPixelFormat get_PixelFormat();
}
public static class DevExpress.Pdf.Native.PdfSecureStringAccessor : object {
    public static SecureString ToSecureString(string str);
    [SecuritySafeCriticalAttribute]
public static string FromSecureString(SecureString password);
}
public abstract class DevExpress.Pdf.Native.PdfSelection : object {
    public PdfDocumentContentType ContentType { get; }
    public IList`1<PdfHighlight> Highlights { get; }
    public static bool AreEqual(PdfSelection selection1, PdfSelection selection2);
    public abstract virtual PdfDocumentContentType get_ContentType();
    public abstract virtual IList`1<PdfHighlight> get_Highlights();
    public bool Contains(PdfDocumentPosition position);
}
public class DevExpress.Pdf.Native.PdfSelectionState : object {
    private PdfSelection selection;
    private PdfCaret caret;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public bool HasSelection { get; }
    public bool HasCaret { get; }
    public PdfSelection Selection { get; public set; }
    public PdfCaret Caret { get; public set; }
    public bool get_HasSelection();
    public bool get_HasCaret();
    public PdfSelection get_Selection();
    public void set_Selection(PdfSelection value);
    public PdfCaret get_Caret();
    public void set_Caret(PdfCaret value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
    private void RaiseSelectionChanged();
    public bool Contains(PdfDocumentPosition position);
}
public class DevExpress.Pdf.Native.PdfShadingResourceDictionary : PdfResourceDictionary`1<PdfShading> {
    protected string Prefix { get; }
    protected string ResourceKey { get; }
    public PdfShadingResourceDictionary(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfShadingResourceDictionary parentResourceDictionary);
    protected virtual string get_Prefix();
    protected virtual string get_ResourceKey();
    protected virtual PdfShading CreateResource(object value);
}
public abstract class DevExpress.Pdf.Native.PdfShapeAnnotationAppearanceBuilder : PdfMarkupAnnotationAppearanceBuilder`1<PdfShapeAnnotation> {
    protected PdfShapeAnnotationAppearanceBuilder(PdfShapeAnnotation shapeAnnotation);
    protected abstract virtual void RebuildShapeAppearance(PdfFormCommandConstructor constructor, PdfRectangle rect);
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public abstract class DevExpress.Pdf.Native.PdfShapeAnnotationState`1 : PdfMarkupAnnotationState`1<T> {
    public PdfColor InteriorColor { get; public set; }
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    protected PdfAnnotationBorderEffect BorderEffect { get; protected set; }
    protected PdfShapeAnnotationState`1(PdfPageState pageState, T annotation);
    public sealed virtual PdfColor get_InteriorColor();
    public sealed virtual void set_InteriorColor(PdfColor value);
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
    protected virtual PdfAnnotationBorderEffect get_BorderEffect();
    protected virtual void set_BorderEffect(PdfAnnotationBorderEffect value);
}
public class DevExpress.Pdf.Native.PdfShortCMapValue : ValueType {
    [CompilerGeneratedAttribute]
private short <Value>k__BackingField;
    public short Value { get; }
    public PdfShortCMapValue(short value);
    [CompilerGeneratedAttribute]
public sealed virtual short get_Value();
    public sealed virtual IPdfCMapValue`1<short> Increment(int count);
}
public abstract class DevExpress.Pdf.Native.PdfSignatureAppearanceBase : object {
    private PdfRectangle signatureBounds;
    private int pageIndex;
    public PdfRectangle SignatureBounds { get; }
    public int PageIndex { get; }
    protected PdfSignatureAppearanceBase(PdfRectangle signatureBounds, int pageIndex);
    public static PdfSignatureAppearanceBase Create(Byte[] data, PdfOrientedRectangle signatureBounds, int pageIndex);
    public static PdfSignatureAppearanceBase Create(Stream data, PdfOrientedRectangle signatureBounds, int pageIndex);
    public PdfRectangle get_SignatureBounds();
    public int get_PageIndex();
    protected abstract virtual PdfSignatureAppearanceBuilderBase CreateBuilder(PdfForm appearanceForm);
    public void CreateAppearance(PdfForm appearanceForm);
}
public class DevExpress.Pdf.Native.PdfSignatureBuildProperties : object {
    private PdfSignatureBuildPropertiesData filter;
    private PdfSignatureBuildPropertiesData pubSec;
    private PdfSignatureBuildPropertiesAppData app;
    private PdfSignatureBuildPropertiesSigQData sigQ;
    public PdfSignatureBuildPropertiesData Filter { get; }
    public PdfSignatureBuildPropertiesData PubSec { get; }
    public PdfSignatureBuildPropertiesAppData App { get; }
    public PdfSignatureBuildPropertiesSigQData SigQ { get; }
    public PdfSignatureBuildProperties(PdfReaderDictionary dictionary);
    public PdfSignatureBuildPropertiesData get_Filter();
    public PdfSignatureBuildPropertiesData get_PubSec();
    public PdfSignatureBuildPropertiesAppData get_App();
    public PdfSignatureBuildPropertiesSigQData get_SigQ();
}
public class DevExpress.Pdf.Native.PdfSignatureBuildPropertiesAppData : PdfSignatureBuildPropertiesData {
    private string implementationVersion;
    public string ImplementationVersion { get; }
    public PdfSignatureBuildPropertiesAppData(PdfReaderDictionary dictionary);
    public string get_ImplementationVersion();
}
public class DevExpress.Pdf.Native.PdfSignatureBuildPropertiesData : object {
    private static string operationSystemKey;
    private string name;
    private string date;
    private Nullable`1<double> revision;
    private bool preRelease;
    private IList`1<string> os;
    private bool nonEmbeddedFontNoWarning;
    private bool trustedMode;
    private Nullable`1<double> version;
    public string Name { get; }
    public string Date { get; }
    public Nullable`1<double> Revision { get; }
    public bool PreRelease { get; }
    public IList`1<string> OS { get; }
    public bool NonEmbeddedFontNoWarning { get; }
    public bool TrustedMode { get; }
    public Nullable`1<double> Version { get; }
    public PdfSignatureBuildPropertiesData(PdfReaderDictionary dictionary);
    public string get_Name();
    public string get_Date();
    public Nullable`1<double> get_Revision();
    public bool get_PreRelease();
    public IList`1<string> get_OS();
    public bool get_NonEmbeddedFontNoWarning();
    public bool get_TrustedMode();
    public Nullable`1<double> get_Version();
}
public class DevExpress.Pdf.Native.PdfSignatureBuildPropertiesSigQData : PdfSignatureBuildPropertiesData {
    private bool preview;
    public bool Preview { get; }
    public PdfSignatureBuildPropertiesSigQData(PdfReaderDictionary dictionary);
    public bool get_Preview();
}
public class DevExpress.Pdf.Native.PdfSignatureByteRange : ValueType {
    private int start;
    private int length;
    public int Start { get; }
    public int Length { get; }
    public PdfSignatureByteRange(int start, int length);
    public int get_Start();
    public int get_Length();
}
public abstract class DevExpress.Pdf.Native.PdfSignatureFieldDescription : object {
    private PdfSignatureBuilder builder;
    private PdfImageDataWrapper image;
    private PdfSignatureAppearance appearance;
    protected PdfSignatureFieldDescription(PdfSignatureBuilder builder);
    protected static PdfInteractiveFormFieldObject FindSignatureFormField(PdfDocumentCatalogObject catalog, string signatureFormFieldName);
    public void SetImageData(Byte[] imageData);
    public void SetImageData(Stream imageStream);
    public void SetImageData(string filePath);
    public void SetSignatureAppearance(PdfSignatureAppearance appearance);
    internal abstract virtual void ApplySignature(PdfDocumentCatalogObject catalog, PdfSignatureModelObject signatureModel);
    protected void CreateAppearance(PdfDocumentCatalogObject catalog, PdfInteractiveFormFieldObject formField);
    private void CreateAppearance(PdfDocumentCatalogObject catalog, PdfWidgetAnnotationObject widget);
    public void CreateAppearance(PdfForm appearanceForm);
    private void CreateAppearance(PdfForm appearanceForm, PdfTransformationMatrix matrix);
}
public class DevExpress.Pdf.Native.PdfSignatureFormFieldAppearanceBuilder : PdfTextFieldAppearanceBuilder`1<PdfSignatureFormField> {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAcroFormStringAlignment <LineAlignment>k__BackingField;
    protected bool Multiline { get; }
    public string Content { get; public set; }
    public PdfAcroFormStringAlignment LineAlignment { get; public set; }
    public PdfSignatureFormFieldAppearanceBuilder(PdfSignatureFormField formField, IPdfExportFontProvider fontSearch);
    protected virtual bool get_Multiline();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public PdfAcroFormStringAlignment get_LineAlignment();
    [CompilerGeneratedAttribute]
public void set_LineAlignment(PdfAcroFormStringAlignment value);
    protected virtual void DrawContent(PdfFormCommandConstructor constructor);
    protected virtual DXStringFormat CreateStringFormat();
}
public class DevExpress.Pdf.Native.PdfSignatureReference : PdfObject {
    private PdfSignatureTransformMethod transformMethod;
    private string digestMethod;
    public PdfSignatureTransformMethod TransformMethod { get; }
    public string DigestMethod { get; }
    private PdfSignatureReference(PdfSignatureTransformMethod transformMethod, string digestMethod, int number);
    public static PdfSignatureReference Create(PdfReaderDictionary dictionary);
    public PdfSignatureTransformMethod get_TransformMethod();
    public string get_DigestMethod();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.Native.PdfSignatureTransformMethod : object {
    protected string ValidVersion { get; }
    protected PdfSignatureTransformMethod(PdfReaderDictionary dictionary);
    protected abstract virtual string get_ValidVersion();
}
public class DevExpress.Pdf.Native.PdfSimpleFontCodePointMapping : object {
    private Int16[] glyphIndicesMapping;
    private Int16[] unicodeMapping;
    public PdfSimpleFontCodePointMapping(Int16[] glyphIndicesMapping, Int16[] unicodeMapping);
    private static void MapCodes(Int16[] codePoints, Int16[] mappingTable);
    public sealed virtual bool UpdateCodePoints(Int16[] codePoints, bool useEmbeddedFontEncoding);
}
public class DevExpress.Pdf.Native.PdfSize : ValueType {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Width { get; }
    public double Height { get; }
    public PdfSize(double width, double height);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public double get_Height();
}
public class DevExpress.Pdf.Native.PdfSoundAnnotationAppearanceBuilder : PdfIconAnnotationAppearanceBuilder`1<PdfSoundAnnotation> {
    private static Encoding encoding;
    public PdfSoundAnnotationAppearanceBuilder(PdfSoundAnnotation annotation);
    private static PdfSoundAnnotationAppearanceBuilder();
    protected virtual void RebuildIconBody(PdfFormCommandConstructor constructor, string opacityResourceName);
}
public class DevExpress.Pdf.Native.PdfSoundAnnotationState : PdfMarkupAnnotationState`1<PdfSoundAnnotation> {
    public string IconName { get; public set; }
    public PdfSound Sound { get; public set; }
    public PdfSoundAnnotationState(PdfPageState pageState, PdfSoundAnnotation annotation);
    public string get_IconName();
    public void set_IconName(string value);
    public PdfSound get_Sound();
    public void set_Sound(PdfSound value);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfSourceImagePixelInfo : ValueType {
    private int index;
    private PdfFixedPointNumber factor;
    public int Index { get; }
    public PdfFixedPointNumber Factor { get; }
    public PdfSourceImagePixelInfo(int index, PdfFixedPointNumber factor);
    public int get_Index();
    public PdfFixedPointNumber get_Factor();
}
public class DevExpress.Pdf.Native.PdfSourceImageScanlineInfo : ValueType {
    private PdfSourceImagePixelInfo[] pixelInfo;
    private int startIndex;
    private int endIndex;
    public PdfSourceImagePixelInfo[] PixelInfo { get; }
    public int StartIndex { get; }
    public int EndIndex { get; }
    public PdfSourceImageScanlineInfo(PdfSourceImagePixelInfo[] pixelInfo, int startIndex, int endIndex);
    public PdfSourceImagePixelInfo[] get_PixelInfo();
    public int get_StartIndex();
    public int get_EndIndex();
}
public class DevExpress.Pdf.Native.PdfSquareAnnotationAppearanceBuilder : PdfShapeAnnotationAppearanceBuilder {
    public PdfSquareAnnotationAppearanceBuilder(PdfSquareAnnotation squareAnnotation);
    protected virtual void RebuildShapeAppearance(PdfFormCommandConstructor constructor, PdfRectangle rect);
}
public class DevExpress.Pdf.Native.PdfSquareAnnotationState : PdfShapeAnnotationState`1<PdfSquareAnnotation> {
    public PdfSquareAnnotationState(PdfPageState pageState, PdfSquareAnnotation annotation);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public class DevExpress.Pdf.Native.PdfStack : object {
    private List`1<object> list;
    private int count;
    public int Count { get; }
    public int get_Count();
    public void Clear();
    public void Push(object obj);
    public object PeekAtIndex(int index);
    public object Peek();
    public object Pop(bool throwException);
    public double PopDouble();
    public int PopInt();
    public string PopName(bool throwException);
    public void Exchange();
}
public class DevExpress.Pdf.Native.PdfStackedWrittenObjectCollection : PdfWriteDeferredObjectCollection {
    public PdfStackedWrittenObjectCollection(PdfObjectCollection targetCollection);
    public virtual PdfObjectReference AddObject(PdfObject value);
}
public abstract class DevExpress.Pdf.Native.PdfStandardFontFamily : object {
    private static IDictionary`2<string, PdfStandardFontFamily> nameMapping;
    protected PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> GlyphWidthProvider { get; }
    protected PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> FontDescriptorProvider { get; }
    private static PdfStandardFontFamily();
    private static PdfStandardFontFamily GetFamily(string fontFamily);
    private static PdfFontStyle GetStyle(string baseFont);
    public static PdfFontDescriptorData GetFontDescriptorData(string baseFont);
    public static IPdfGlyphWidthProvider GetGlyphWidthProvider(string baseFont);
    protected abstract virtual PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> get_GlyphWidthProvider();
    protected abstract virtual PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> get_FontDescriptorProvider();
    private PdfFontDescriptorData GetFontDescriptorData(PdfFontStyle fontStyle);
    private IPdfGlyphWidthProvider GetGlyphWidthProvider(PdfFontStyle fontStyle);
}
public abstract class DevExpress.Pdf.Native.PdfStream : object {
    public static string DictionaryLengthKey;
    private Byte[] data;
    public Byte[] Data { get; }
    protected PdfStream(Byte[] data);
    public Byte[] get_Data();
}
public class DevExpress.Pdf.Native.PdfStreamCompressedData : PdfCompressedData {
    private PdfDocumentCatalog documentCatalog;
    private int objectNumber;
    private int decryptedDataLength;
    public Byte[] Data { get; }
    public int DecryptedDataLength { get; }
    public PdfStreamCompressedData(PdfReaderDictionary dictionary);
    public virtual Byte[] get_Data();
    public int get_DecryptedDataLength();
    public virtual IPdfWritableObject CreateWritableObject(PdfWriterDictionary dictionary);
    public void WriteData(PdfDocumentStream stream);
}
public class DevExpress.Pdf.Native.PdfStreamCopier : object {
    private PdfWriterDictionary dictionary;
    private PdfStreamCompressedData data;
    public PdfStreamCopier(PdfWriterDictionary dictionary, PdfStreamCompressedData data);
    public sealed virtual void Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.Native.PdfStreamingDataStream : PdfDataStream {
    private static int tailLength;
    private Stream stream;
    private long streamOffset;
    private Byte[] tail;
    private int currentTailPosition;
    private long streamPosition;
    public int CurrentByte { get; }
    public PdfStreamingDataStream(Stream stream, long length);
    public virtual int get_CurrentByte();
    public virtual int Read(Byte[] buffer, int offset, int length);
    public virtual void Synchronize();
}
public class DevExpress.Pdf.Native.PdfStreamingObjectCloningCollection : PdfObjectCloningCollection {
    public PdfStreamingObjectCloningCollection(PdfObjectCollection collection, Dictionary`2<IPdfObjectId, int> clonedObjects);
    protected virtual PdfObjectReference AddObjectToWrite(object value, int number);
}
public class DevExpress.Pdf.Native.PdfStreamingObjectWritingStrategy : object {
    private Func`2<PdfObjectContainer, PdfObjectPointer> writeIndirectObject;
    private PdfObjectCollection collection;
    internal PdfStreamingObjectWritingStrategy(PdfObjectCollection collection, Func`2<PdfObjectContainer, PdfObjectPointer> writeIndirectObject);
    public sealed virtual PdfObjectReference AddObjectToWrite(object value, int number);
    public sealed virtual PdfObjectCloningCollection CreateCloningCollection(Dictionary`2<IPdfObjectId, int> clonedObjects);
    public sealed virtual void WriteIndirectObject(PdfObject value);
}
public class DevExpress.Pdf.Native.PdfStreamWriter : object {
    private static Encoding utf8encoding;
    private static CultureInfo invariantCulture;
    private static byte space;
    private static byte closeBracket;
    private static byte openBracket;
    private static int intToStringBufferSize;
    private Stream stream;
    private Byte[] intBuffer;
    public Stream Stream { get; }
    public Byte[] Commands { get; }
    public PdfStreamWriter(Stream stream);
    private static PdfStreamWriter();
    public Stream get_Stream();
    public Byte[] get_Commands();
    public void WriteDouble(double value, bool prependSpace);
    public void WriteHexadecimalString(IList`1<byte> data);
    public void WriteString(string s);
    private FloatingPointNumberFormatInfo GetFloatingPointNumberFormatInfo(double value);
    public void Write(Byte[] data, int offset, int length);
    public void Write(Byte[] data);
    public void WriteByte(byte space);
    public void WriteDoubleArray(Double[] data);
    public void WriteDoubleArray(Double[] data, int count);
    public void WriteSpace();
    public void WriteOpenBracket();
    public void WriteClosedBracket();
    public void WriteInt(int value);
    public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfStringCMapValue : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public PdfStringCMapValue(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    public sealed virtual IPdfCMapValue`1<string> Increment(int count);
}
public class DevExpress.Pdf.Native.PdfStringCommandData : ValueType {
    private Byte[][] charCodes;
    private Int16[] str;
    private Double[] offsets;
    public Byte[][] CharCodes { get; }
    public Int16[] Str { get; }
    public Double[] Offsets { get; }
    public PdfStringCommandData(Byte[][] charCodes, Int16[] str, Double[] offsets);
    public Byte[][] get_CharCodes();
    public Int16[] get_Str();
    public Double[] get_Offsets();
}
public class DevExpress.Pdf.Native.PdfStringData : ValueType {
    private PdfStringCommandData commandData;
    [CompilerGeneratedAttribute]
private Double[] <Widths>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Advances>k__BackingField;
    public Byte[][] CharCodes { get; }
    public Int16[] Str { get; }
    public Double[] Offsets { get; }
    public Double[] Widths { get; }
    public Double[] Advances { get; }
    public PdfStringData(PdfStringCommandData codePointData, Double[] widths, Double[] advances);
    public Byte[][] get_CharCodes();
    public Int16[] get_Str();
    public Double[] get_Offsets();
    [CompilerGeneratedAttribute]
public Double[] get_Widths();
    [CompilerGeneratedAttribute]
public Double[] get_Advances();
}
public class DevExpress.Pdf.Native.PdfSuperSamplingHorizontalInterpolator : PdfSuperSamplingInterpolator {
    private Byte[] sourceScanline;
    private int width;
    public PdfSuperSamplingHorizontalInterpolator(IPdfImageScanlineSource dataSource, int width, int sourceWidth);
    public virtual void FillNextScanline(Byte[] scanline);
}
public abstract class DevExpress.Pdf.Native.PdfSuperSamplingInterpolator : object {
    private IPdfImageScanlineSource dataSource;
    private int windowSize;
    private PdfSourceImageScanlineInfo[] pixelInfo;
    protected IPdfImageScanlineSource DataSource { get; }
    protected int WindowSize { get; }
    protected PdfSourceImageScanlineInfo[] PixelInfo { get; }
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    protected PdfSuperSamplingInterpolator(IPdfImageScanlineSource dataSource, int targetDimension, int sourceDimension);
    protected IPdfImageScanlineSource get_DataSource();
    protected int get_WindowSize();
    protected PdfSourceImageScanlineInfo[] get_PixelInfo();
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    public sealed virtual void Dispose();
    public abstract virtual void FillNextScanline(Byte[] scanlineData);
}
public class DevExpress.Pdf.Native.PdfSuperSamplingVerticalInterpolator : PdfSuperSamplingInterpolator {
    private int sourceWidth;
    private Byte[][] sourceScanlines;
    private int currentY;
    private int lastRowIndex;
    private int previousLastIndex;
    public PdfSuperSamplingVerticalInterpolator(IPdfImageScanlineSource dataSource, int sourceWidth, int height, int sourceHeight);
    private void FillBuffers(PdfSourceImageScanlineInfo scanlineInfo);
    public virtual void FillNextScanline(Byte[] scanline);
}
[AttributeUsageAttribute("16")]
public class DevExpress.Pdf.Native.PdfSupportUndefinedValueAttribute : Attribute {
}
public class DevExpress.Pdf.Native.PdfSymbolFontFamily : PdfStandardFontFamily {
    private static string family;
    private static PdfVariableGlyphWidthProvider symbolWidths;
    private static WidthsProvider widthsProvider;
    private static DescriptorProvider descriptorProvider;
    protected PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> GlyphWidthProvider { get; }
    protected PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> FontDescriptorProvider { get; }
    private static PdfSymbolFontFamily();
    protected virtual PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> get_GlyphWidthProvider();
    protected virtual PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> get_FontDescriptorProvider();
}
public class DevExpress.Pdf.Native.PdfTabbedStringFormatter : object {
    private PdfExportFontInfo fontInfo;
    private float tabStopSize;
    private bool shouldUseKerning;
    private bool rightToLeft;
    public PdfTabbedStringFormatter(PdfExportFontInfo fontInfo, float tabStopSize, bool rightToLeft, bool shouldUseKerning);
    public IList`1<DXCluster> FormatString(string line);
}
public class DevExpress.Pdf.Native.PdfTarget : object {
    private PdfTargetMode mode;
    private int pageIndex;
    private Nullable`1<double> x;
    private Nullable`1<double> y;
    private double width;
    private double height;
    private Nullable`1<double> zoom;
    public PdfTargetMode Mode { get; }
    public int PageIndex { get; }
    public Nullable`1<double> X { get; }
    public Nullable`1<double> Y { get; }
    public double Width { get; }
    public double Height { get; }
    public Nullable`1<double> Zoom { get; }
    private PdfTarget(PdfTargetMode mode, int pageIndex, Nullable`1<double> x, Nullable`1<double> y, double width, double height, Nullable`1<double> zoom);
    public PdfTarget(int pageIndex, Nullable`1<double> x, Nullable`1<double> y, Nullable`1<double> zoom);
    public PdfTarget(PdfTargetMode mode, int pageIndex, PdfRectangle rectangle);
    public PdfTarget(PdfTargetMode mode, int pageIndex);
    public PdfTarget(PdfTargetMode mode, int pageIndex, Nullable`1<double> x, Nullable`1<double> y);
    public PdfTargetMode get_Mode();
    public int get_PageIndex();
    public Nullable`1<double> get_X();
    public Nullable`1<double> get_Y();
    public double get_Width();
    public double get_Height();
    public Nullable`1<double> get_Zoom();
}
public enum DevExpress.Pdf.Native.PdfTargetMode : Enum {
    public int value__;
    public static PdfTargetMode XYZ;
    public static PdfTargetMode Fit;
    public static PdfTargetMode FitHorizontally;
    public static PdfTargetMode FitVertically;
    public static PdfTargetMode FitRectangle;
    public static PdfTargetMode FitBBox;
    public static PdfTargetMode FitBBoxHorizontally;
    public static PdfTargetMode FitBBoxVertically;
}
public class DevExpress.Pdf.Native.PdfTask : PdfDisposableObject {
    private int index;
    private Action`1<int> action;
    private AutoResetEvent completedEvent;
    private Task task;
    private Exception exception;
    private IntPtr CompletedEventHandle { get; }
    private PdfTask(int index, Action`1<int> action);
    [SecuritySafeCriticalAttribute]
public static void Execute(Action`1<int> action, int count);
    [SecuritySafeCriticalAttribute]
private IntPtr get_CompletedEventHandle();
    private void Execute();
    private void Run();
    protected virtual void Dispose(bool disposing);
}
public static class DevExpress.Pdf.Native.PdfTaskHelper : object {
    public static void RunParallel(int elementsCount, T sharedData, Action`3<int, int, T> action);
}
public class DevExpress.Pdf.Native.PdfTextAnnotationAppearanceBuilder : PdfIconAnnotationAppearanceBuilder`1<PdfTextAnnotation> {
    private static Encoding encoding;
    public PdfTextAnnotationAppearanceBuilder(PdfTextAnnotation annotation);
    private static PdfTextAnnotationAppearanceBuilder();
    protected virtual void RebuildIconBody(PdfFormCommandConstructor constructor, string opacityResourceName);
}
public class DevExpress.Pdf.Native.PdfTextAnnotationBuilder : PdfMarkupAnnotationBuilder {
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconName>k__BackingField;
    public string State { get; public set; }
    public string StateModel { get; public set; }
    public string IconName { get; public set; }
    public PdfTextAnnotationBuilder(PdfRectangle bounds);
    private PdfTextAnnotationBuilder(PdfMarkupAnnotation inReplyTo, string contents, string author, PdfAnnotationFlags flags);
    public PdfTextAnnotationBuilder(PdfMarkupAnnotation inReplyTo, string contents, string author);
    public PdfTextAnnotationBuilder(PdfMarkupAnnotation inReplyTo, string stateModel, string state, string author);
    [CompilerGeneratedAttribute]
public sealed virtual string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StateModel();
    [CompilerGeneratedAttribute]
public void set_StateModel(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IconName();
    [CompilerGeneratedAttribute]
public void set_IconName(string value);
}
public class DevExpress.Pdf.Native.PdfTextAnnotationState : PdfMarkupAnnotationState`1<PdfTextAnnotation> {
    public static int IconSizeDimension;
    public string IconName { get; public set; }
    public PdfTextAnnotationState(PdfPageState pageState, PdfTextAnnotation textAnnotation);
    public string get_IconName();
    public void set_IconName(string value);
    public virtual void RebuildAppearance();
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
}
public abstract class DevExpress.Pdf.Native.PdfTextBasedFormFieldAppearanceBuilder`1 : PdfWidgetAnnotationAppearanceBuilder`1<T> {
    private PdfExportFontInfo fontInfo;
    protected double FontSize { get; }
    protected PdfExportFont Font { get; }
    protected PdfExportFontInfo FontInfo { get; }
    protected PdfTextBasedFormFieldAppearanceBuilder`1(PdfWidgetAnnotation widget, T formField, IPdfExportFontProvider fontSearch);
    protected double get_FontSize();
    protected PdfExportFont get_Font();
    protected PdfExportFontInfo get_FontInfo();
    protected double CalculateCenteredLineYOffset(PdfRectangle clipRect);
    protected double GetTextWidth(string text);
    protected void StartDrawTextBox(PdfFormCommandConstructor constructor, PdfColor foreColor);
    protected void DrawTextBoxText(PdfFormCommandConstructor constructor, double xOffset, double yOffset, string text);
    protected void EndDrawTextBox(PdfFormCommandConstructor constructor);
    protected virtual void FillBackground(PdfFormCommandConstructor constructor);
    protected virtual void DrawSolidBorder(PdfFormCommandConstructor constructor);
    protected virtual void DrawInsetBorder(PdfFormCommandConstructor constructor);
    protected virtual void DrawBeveledBorder(PdfFormCommandConstructor constructor);
    protected virtual void DrawUnderlineBorder(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfTextBlock : object {
    private PdfPageTextCharacter[] characters;
    private PdfFont font;
    private double angle;
    private double characterSpacing;
    private double minSpaceWidth;
    private double maxSpaceWidth;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    public IList`1<PdfPageTextCharacter> Characters { get; }
    public PdfPoint Location { get; }
    public double Angle { get; }
    public double CharacterSpacing { get; }
    public double FontSize { get; }
    public double MinSpaceWidth { get; }
    public double MaxSpaceWidth { get; }
    public PdfFont Font { get; }
    public PdfRectangle BoundingBox { get; }
    public PdfTextBlock(PdfStringData data, Byte[] actualText, PdfGraphicsState graphicsState, IPdfRenderingFontInfoProvider widthProvider);
    public IList`1<PdfPageTextCharacter> get_Characters();
    public PdfPoint get_Location();
    public double get_Angle();
    public double get_CharacterSpacing();
    [CompilerGeneratedAttribute]
public double get_FontSize();
    public double get_MinSpaceWidth();
    public double get_MaxSpaceWidth();
    public PdfFont get_Font();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    private static PdfTransformationMatrix GetTranslatedMatrix(PdfTransformationMatrix textSpaceMatrix, PdfTransformationMatrix textToUser, PdfPoint delta);
}
public abstract class DevExpress.Pdf.Native.PdfTextFieldAppearanceBuilder`1 : PdfTextBasedFormFieldAppearanceBuilder`1<T> {
    protected bool Multiline { get; }
    protected PdfTextFieldAppearanceBuilder`1(PdfWidgetAnnotation widget, T formField, IPdfExportFontProvider fontSearch);
    protected abstract virtual bool get_Multiline();
    protected void DrawTextField(PdfFormCommandConstructor constructor, PdfRectangle contentRectangle, string text);
    protected virtual DXStringFormat CreateStringFormat();
}
public class DevExpress.Pdf.Native.PdfTextFieldMeasurer : object {
    private DXStringFormat format;
    private PdfInteractiveFormField formField;
    private PdfRectangle contentRectangle;
    private bool multiline;
    private PdfFont appearanceFont;
    public PdfTextFieldMeasurer(DXStringFormat format, PdfInteractiveFormField formField, PdfRectangle contentRectangle, bool multiline);
    public static PdfMultilineTextBoxContentMetrics GetActualMetrics(PdfExportFont font, PdfFont apperanceFont, PdfRectangle contentRectangle, float fontSize, PdfInteractiveFormFieldFlags flags);
    public static DXStringFormat CreateTextFieldStringFormat(PdfInteractiveFormField formField, bool multiline);
    private PdfMultilineTextBoxContentMetrics GetActualMetrics(PdfExportFont font, float fontSize);
    public bool IsTextFit(string text, PdfExportFontInfo fontInfo);
    public float CalcFontSize(string newValue, PdfExportFont fontData, float currentFontSize);
    private SizeF MeasureString(string text, PdfExportFontInfo fontInfo, PdfFontMetrics metrics, DXStringFormat format, SizeF size);
}
public class DevExpress.Pdf.Native.PdfTextFormFieldAppearanceBuilder : PdfTextFieldAppearanceBuilder`1<PdfTextFormField> {
    protected bool Multiline { get; }
    public PdfTextFormFieldAppearanceBuilder(PdfWidgetAnnotation widget, PdfTextFormField formField, IPdfExportFontProvider fontSearch);
    protected virtual bool get_Multiline();
    protected virtual void DrawSolidBorder(PdfFormCommandConstructor constructor);
    protected virtual void DrawContent(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfTextHighlight : PdfHighlight {
    private PdfPageDataCache pageDataCache;
    private PdfPageTextRange wordRange;
    private IList`1<PdfOrientedRectangle> rectangles;
    public IList`1<PdfOrientedRectangle> Rectangles { get; }
    public IList`1<PdfOrientedRectangle> MarkupRectangles { get; }
    public PdfTextHighlight(PdfPageDataCache pageDataCache, PdfPageTextRange wordRange);
    public virtual IList`1<PdfOrientedRectangle> get_Rectangles();
    public virtual IList`1<PdfOrientedRectangle> get_MarkupRectangles();
    public IList`1<PdfOrientedRectangle> GetRectangles(bool splitRectangles);
}
public class DevExpress.Pdf.Native.PdfTextLine : object {
    private IList`1<PdfWordPart> wordParts;
    private int startWordNumber;
    private int endWordNumber;
    private PdfOrientedRectangle rectangle;
    public IList`1<PdfWordPart> WordParts { get; }
    public PdfOrientedRectangle Rectangle { get; }
    public int StartWordNumber { get; }
    public int EndWordNumber { get; }
    public PdfTextLine(IList`1<PdfWordPart> parts);
    public IList`1<PdfWordPart> get_WordParts();
    public PdfOrientedRectangle get_Rectangle();
    public int get_StartWordNumber();
    public int get_EndWordNumber();
    public IList`1<PdfOrientedRectangle> GetHighlightRectangles(int sWordIndex, int sOffset, int eWordIndex, int eOffset, bool splitRectangles);
    public IList`1<PdfOrientedRectangle> GetHighlightRectangles(int sWordIndex, int sOffset, bool splitRectangles);
    public bool IsPositionInLine(int wordNumber, int offset);
    public PdfPageTextRange GetTextRange(int pageIndex, PdfRectangle area);
    public PdfTextPosition GetTextPosition(int pageIndex, PdfPoint point);
}
public class DevExpress.Pdf.Native.PdfTextMarkupAnnotationAppearanceBuilder : PdfMarkupAnnotationAppearanceBuilder`1<PdfTextMarkupAnnotation> {
    public PdfTextMarkupAnnotationAppearanceBuilder(PdfTextMarkupAnnotation annotation);
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfTextMarkupAnnotationBuilder : PdfMarkupAnnotationBuilder {
    private static double xScaleFactor;
    private PdfTextMarkupAnnotationType style;
    private IList`1<PdfQuadrilateral> quads;
    public PdfTextMarkupAnnotationType Style { get; public set; }
    public IList`1<PdfQuadrilateral> Quads { get; }
    public PdfTextMarkupAnnotationBuilder(IEnumerable`1<PdfQuadrilateral> quads, PdfTextMarkupAnnotationType style);
    public PdfTextMarkupAnnotationBuilder(IEnumerable`1<PdfOrientedRectangle> rectangles, PdfTextMarkupAnnotationType style);
    private PdfTextMarkupAnnotationBuilder(PdfRectangle bounds, PdfTextMarkupAnnotationType style);
    private static PdfRectangle GetTextMarkupBounds(IEnumerable`1<PdfOrientedRectangle> textRectangles);
    private static PdfRectangle GetTextMarkupBounds(IEnumerable`1<PdfQuadrilateral> quads);
    public sealed virtual PdfTextMarkupAnnotationType get_Style();
    public void set_Style(PdfTextMarkupAnnotationType value);
    public sealed virtual IList`1<PdfQuadrilateral> get_Quads();
    public void Apply(PdfTextMarkupAnnotation annotation);
}
public class DevExpress.Pdf.Native.PdfTextMarkupAnnotationState : PdfMarkupAnnotationState`1<PdfTextMarkupAnnotation> {
    private static double selectionXFactor;
    private static double selectionYFactor;
    private IList`1<PdfPoint[]> selectionPolygon;
    private ReadOnlyCollection`1<PdfQuadrilateral> quads;
    public PdfTextMarkupAnnotationType MarkupType { get; public set; }
    public IList`1<PdfQuadrilateral> Quads { get; }
    public PdfTextMarkupAnnotationState(PdfPageState pageState, PdfTextMarkupAnnotation annotation);
    private static PdfPoint CalcOffsetPoint(PdfPoint point, PdfPoint horizontalPoint, PdfPoint verticalPoint, double height);
    public PdfTextMarkupAnnotationType get_MarkupType();
    public void set_MarkupType(PdfTextMarkupAnnotationType value);
    public IList`1<PdfQuadrilateral> get_Quads();
    protected virtual bool ContainsPoint(PdfPoint point);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
    public virtual IList`1<PdfPoint[]> GetSelectionPolygon();
}
public abstract class DevExpress.Pdf.Native.PdfTextMarkupAppearanceBuilderStrategy : object {
    private static double underlineFactor;
    private static double strikeoutFactor;
    private PdfTextMarkupAnnotation annotation;
    private PdfFormCommandConstructor constructor;
    protected PdfFormCommandConstructor Constructor { get; }
    protected PdfTextMarkupAnnotation Annotation { get; }
    protected PdfTextMarkupAppearanceBuilderStrategy(PdfTextMarkupAnnotation annotation, PdfFormCommandConstructor constructor);
    public static PdfTextMarkupAppearanceBuilderStrategy Create(PdfTextMarkupAnnotation annotation, PdfFormCommandConstructor constructor);
    protected PdfFormCommandConstructor get_Constructor();
    protected PdfTextMarkupAnnotation get_Annotation();
    protected virtual void BeginRebuildAppearance();
    protected virtual void EndRebuildAppearance();
    protected abstract virtual void RebuildQuad(PdfQuadrilateral quad);
    public void RebuildAppearance();
    public virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfTextMarkupHighlightAppearanceBuilderStrategy : PdfTextMarkupAppearanceBuilderStrategy {
    private static double bezierOffsetFactor;
    private PdfGroupForm groupForm;
    private PdfFormCommandConstructor groupFormCommandConstructor;
    public PdfTextMarkupHighlightAppearanceBuilderStrategy(PdfTextMarkupAnnotation annotation, PdfFormCommandConstructor constructor);
    protected virtual void BeginRebuildAppearance();
    protected virtual void EndRebuildAppearance();
    protected virtual void RebuildQuad(PdfQuadrilateral quad);
    public virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfTextMarkupSquigglyAppearanceBuilderStrategy : PdfTextMarkupAppearanceBuilderStrategy {
    private static double radToDegFactor;
    private static double widthToHeightFactor;
    private static double patternHeight;
    private PdfTilingPattern pattern;
    public PdfTextMarkupSquigglyAppearanceBuilderStrategy(PdfTextMarkupAnnotation annotation, PdfFormCommandConstructor constructor);
    protected virtual void RebuildQuad(PdfQuadrilateral quad);
}
public class DevExpress.Pdf.Native.PdfTextMarkupUnderlineAppearanceBuilderStrategy : PdfTextMarkupAppearanceBuilderStrategy {
    private static double lineWidthFactor;
    private double heightFactor;
    public PdfTextMarkupUnderlineAppearanceBuilderStrategy(PdfTextMarkupAnnotation annotation, PdfFormCommandConstructor constructor, double heightFactor);
    protected virtual void BeginRebuildAppearance();
    protected virtual void RebuildQuad(PdfQuadrilateral quad);
}
public class DevExpress.Pdf.Native.PdfTextParser : object {
    private PdfRectangle cropBox;
    private List`1<PdfTextBlock> pageBlocks;
    public PdfTextParser(PdfRectangle pageCropBox);
    public void AddBlock(PdfStringData data, Byte[] actualText, PdfGraphicsState graphicsState, IPdfRenderingFontInfoProvider widthProvider);
    public IList`1<PdfTextLine> Parse();
}
public class DevExpress.Pdf.Native.PdfTextPosition : PdfPageTextPosition {
    private int pageIndex;
    public int PageIndex { get; }
    public PdfTextPosition(int pageIndex, int wordNumber, int offset);
    public PdfTextPosition(int pageIndex, PdfPageTextPosition position);
    public int get_PageIndex();
}
public class DevExpress.Pdf.Native.PdfTextRange : object {
    private PdfTextPosition startPosition;
    private PdfTextPosition endPosition;
    public PdfTextPosition StartPosition { get; }
    public PdfTextPosition EndPosition { get; }
    public PdfTextRange(PdfTextPosition startPosition, PdfTextPosition endPosition);
    public PdfTextRange(int startPageIndex, int startWordNumber, int startOffset, int endPageIndex, int endWordNumber, int endOffset);
    public PdfTextPosition get_StartPosition();
    public PdfTextPosition get_EndPosition();
}
public class DevExpress.Pdf.Native.PdfTextSearch : object {
    private PdfPageDataCache cache;
    private Lazy`1<bool> documentIsEmpty;
    private IList`1<string> searchWordParts;
    private PdfTextSearchParameters searchParameters;
    private string searchString;
    private PdfTextSearchIterator currentSearch;
    private bool hasResults;
    private bool reset;
    private PdfTextSearchComparer comparer;
    public PdfPageDataCache Cache { get; }
    public PdfTextSearch(IList`1<PdfPage> pages, IPdfRenderingFontInfoProvider widthProvider);
    private static IList`1<string> GetDocumentString(PdfBidiStringBuilder documentTextBuilder);
    private static IList`1<string> GetDocumentStringUsingWords(IList`1<PdfWord> words);
    private static IList`1<string> GetDocumentStringUsingWordParts(IList`1<PdfWord> words);
    private static bool IsEmpty(PdfPageDataCache cache);
    public PdfPageDataCache get_Cache();
    public PdfTextSearchResults Find(string text, PdfTextSearchParameters parameters, int searchStartPage, int currentPage, Func`2<int, bool> terminate);
    private PdfTextSearchResults FinishAndCreateResults(IList`1<PdfWord> words);
    public PdfTextSearchResults Find(string text, PdfTextSearchParameters parameters, int currentPage);
    public void Reset();
    public void SetCacheCapacity(long capacity);
    public void ClearCache(int pageIndex);
    private bool TryCompare(IList`1<string> documentText);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__15_0();
    [CompilerGeneratedAttribute]
private bool <ClearCache>b__21_0();
}
public abstract class DevExpress.Pdf.Native.PdfTextSearchComparer : object {
    private StringComparison comparisonType;
    protected PdfTextSearchComparer(StringComparison comparisonType);
    public static PdfTextSearchComparer Create(PdfTextSearchParameters parameters);
    private static string CheckSeparators(string pageWord, string searchWord);
    protected abstract virtual bool CompareSingleWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected abstract virtual bool CompareFirstWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected abstract virtual bool CompareMiddleWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected abstract virtual bool CompareLastWord(string documentWord, string searchWord, StringComparison comparisonType);
    public bool Compare(IList`1<string> searchWords, IList`1<string> documentWords);
}
public class DevExpress.Pdf.Native.PdfTextSearchGenericComparer : PdfTextSearchComparer {
    public PdfTextSearchGenericComparer(StringComparison comparisonType);
    protected virtual bool CompareFirstWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected virtual bool CompareLastWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected virtual bool CompareMiddleWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected virtual bool CompareSingleWord(string documentWord, string searchWord, StringComparison comparisonType);
}
internal abstract class DevExpress.Pdf.Native.PdfTextSearchIterator : object {
    private PdfPageDataCache cache;
    private PdfPageData activePage;
    private int activePageIndex;
    [CompilerGeneratedAttribute]
private SearchPosition <StartPos>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchPosition <CurrentPos>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfTextSearchDirection <Direction>k__BackingField;
    protected int PageCount { get; }
    protected SearchPosition StartPos { get; private set; }
    protected SearchPosition CurrentPos { get; protected set; }
    protected PdfPageData CurrentPage { get; }
    public PdfTextSearchDirection Direction { get; }
    public int PageIndex { get; }
    protected PdfTextSearchIterator(PdfPageDataCache cache, int pageIndex, PdfTextSearchDirection direction);
    protected PdfTextSearchIterator(PdfTextSearchIterator iterator, PdfTextSearchDirection direction);
    public static PdfTextSearchIterator Create(PdfPageDataCache cache, int pageIndex, PdfTextSearchDirection direction);
    public static PdfTextSearchIterator Flip(PdfTextSearchIterator iterator);
    protected int get_PageCount();
    [CompilerGeneratedAttribute]
protected SearchPosition get_StartPos();
    [CompilerGeneratedAttribute]
private void set_StartPos(SearchPosition value);
    [CompilerGeneratedAttribute]
protected SearchPosition get_CurrentPos();
    [CompilerGeneratedAttribute]
protected void set_CurrentPos(SearchPosition value);
    protected PdfPageData get_CurrentPage();
    [CompilerGeneratedAttribute]
public PdfTextSearchDirection get_Direction();
    public int get_PageIndex();
    protected void MoveToNonEmptyPage();
    public bool Move();
    public PdfTextSearchVariations GetTextVariations(int segmentCount);
    private void UpdatePage();
    protected abstract virtual bool MoveCore();
    protected abstract virtual void Restart();
    protected abstract virtual void MoveToNextPage();
}
[FlagsAttribute]
public enum DevExpress.Pdf.Native.PdfTextSearchOptions : Enum {
    public int value__;
    public static PdfTextSearchOptions None;
    public static PdfTextSearchOptions CaseSensitive;
    public static PdfTextSearchOptions WholeWords;
}
public class DevExpress.Pdf.Native.PdfTextSearchVariations : object {
    [CompilerGeneratedAttribute]
private IList`1<PdfWord> <ByWords>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfWord> <ByParts>k__BackingField;
    public IList`1<PdfWord> ByWords { get; }
    public IList`1<PdfWord> ByParts { get; }
    public PdfTextSearchVariations(IList`1<PdfWord> byWords, IList`1<PdfWord> byParts);
    [CompilerGeneratedAttribute]
public IList`1<PdfWord> get_ByWords();
    [CompilerGeneratedAttribute]
public IList`1<PdfWord> get_ByParts();
}
public class DevExpress.Pdf.Native.PdfTextSearchWholeWordsTextComparer : PdfTextSearchComparer {
    public PdfTextSearchWholeWordsTextComparer(StringComparison comparisonType);
    protected virtual bool CompareFirstWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected virtual bool CompareLastWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected virtual bool CompareMiddleWord(string documentWord, string searchWord, StringComparison comparisonType);
    protected virtual bool CompareSingleWord(string documentWord, string searchWord, StringComparison comparisonType);
}
public class DevExpress.Pdf.Native.PdfTextSelection : PdfSelection {
    private PdfPageDataCache pageDataCache;
    private IList`1<PdfPageTextRange> textRange;
    private string text;
    private IList`1<PdfHighlight> highlights;
    public IList`1<PdfPageTextRange> TextRange { get; }
    public string Text { get; }
    public PdfDocumentContentType ContentType { get; }
    public IList`1<PdfHighlight> Highlights { get; }
    public PdfTextSelection(PdfPageDataCache pageDataCache, IList`1<PdfPageTextRange> textRange);
    public static bool AreEqual(PdfTextSelection selection1, PdfTextSelection selection2);
    private static void AppendWordPart(PdfBidiStringBuilder builder, PdfWordPart part, int startOffset, int endOffset);
    public IList`1<PdfPageTextRange> get_TextRange();
    public string get_Text();
    public virtual PdfDocumentContentType get_ContentType();
    public virtual IList`1<PdfHighlight> get_Highlights();
    public string GetPageText(int pageIndex);
    private string GetText(Func`2<int, bool> pageSelector);
}
public class DevExpress.Pdf.Native.PdfTextSelector : object {
    private IPdfViewerLayoutInfoProvider controller;
    private PdfPageDataCache pageDataCache;
    private PdfSelectionState selectionState;
    private bool selectionInProgress;
    private int selectionStartPageIndex;
    private PdfPoint selectionStartPoint;
    private PdfTextPosition selectionStartTextPosition;
    private int PageCount { get; }
    public bool SelectionInProgress { get; public set; }
    private double TextExpansionFactorX { get; }
    private double TextExpansionFactorY { get; }
    public PdfTextSelector(IPdfViewerLayoutInfoProvider controller, PdfPageDataCache pageDataCache, PdfSelectionState selectionState);
    private int get_PageCount();
    public bool get_SelectionInProgress();
    public void set_SelectionInProgress(bool value);
    private double get_TextExpansionFactorX();
    private double get_TextExpansionFactorY();
    public bool HasContent(PdfDocumentPosition position);
    public PdfWord GetWord(PdfDocumentPosition position);
    public PdfTextSelection GetSelection(IList`1<PdfPageTextRange> textRange);
    public PdfTextSelection GetSelection(PdfDocumentArea documentArea);
    public void MoveCaret(PdfMovementDirection direction);
    public void SelectWithCaret(PdfMovementDirection direction);
    public PdfTextPosition FindClosestTextPosition(PdfDocumentPosition position, PdfTextPosition textPosition);
    public bool StartSelection(PdfDocumentPosition position, bool forceSelection);
    public void PerformSelection(PdfDocumentPosition position);
    public void SelectWord(PdfDocumentPosition position);
    private PdfWord GetWord(PdfTextPosition textPosition);
    public void SelectLine(PdfDocumentPosition position);
    public void SelectPage(PdfDocumentPosition position);
    public void Select(PdfDocumentArea documentArea);
    public void SelectText(PdfPageTextRange pageTextRange);
    public void SelectText(IList`1<PdfPageTextRange> textRange);
    public void SelectAllText();
    public IList`1<PdfPageTextRange> GetPageTextRanges(PdfTextPosition startTextPosition, PdfDocumentPosition endPosition);
    private PdfTextPosition FindClosestTextPosition(PdfDocumentPosition position);
    private IList`1<PdfPageTextRange> GetPageTextRanges(PdfTextPosition startTextPosition, PdfTextPosition endTextPosition);
    private bool IsPositionInLine(int pageIndex, int lineIndex, int wordNumber, int offset);
    private PdfTextLine FindLine(PdfTextPosition position);
    private PdfTextLine FindLine(PdfDocumentPosition position);
    private PdfTextPosition FindStartTextPosition(PdfDocumentPosition position);
    private PdfCaretViewData GetCaretViewData(PdfTextPosition position);
    private void PerformCaretMoveAction(Action moveAction);
    private void MoveCaret(PdfTextPosition position);
    private void SetSelectionCaret(PdfTextPosition position);
    private void MoveCaretAndEnsureVisibility(PdfTextPosition position);
    private void UpdateSelection(PdfTextPosition position);
    private bool MoveCaretToLeft();
    private bool MoveCaretToRight();
    private void StoreSelectionStartTextPosition();
    private int GetWordEndPosition(PdfTextPosition position);
    private void MoveLeft();
    private bool MoveRight(IList`1<PdfWordPart> wordParts, int pageIndex, int lineIndex, int wordNumber, int offset, bool processLastWordPart);
    private void MoveRight();
    private void MoveDown();
    private void MoveUp();
    private void MoveToLineStart();
    private void MoveToLineEnd();
    private void MoveToNextWord();
    private void MoveToPreviousWord();
    private void MoveToDocumentStart();
    private void MoveToDocumentEnd();
    private void EnsureCaretVisibility();
    private PdfTextSelection GetSelection(PdfPageTextRange pageTextRange);
    private void SetSelection(PdfTextSelection textSelection);
}
public class DevExpress.Pdf.Native.PdfTextState : object {
    private double characterSpacing;
    private double wordSpacing;
    private double absoluteHorizontalScaling;
    private double horizontalScaling;
    private double leading;
    private PdfFont font;
    private double absoluteFontSize;
    private double fontSize;
    private PdfTextRenderingMode renderingMode;
    private double rise;
    private double knockout;
    private PdfTransformationMatrix textLineMatrix;
    private PdfTransformationMatrix textMatrix;
    public double CharacterSpacing { get; public set; }
    public double WordSpacing { get; public set; }
    public double AbsoluteHorizontalScaling { get; public set; }
    public double HorizontalScaling { get; public set; }
    public double Leading { get; public set; }
    public PdfFont Font { get; public set; }
    public double AbsoluteFontSize { get; }
    public double FontSize { get; public set; }
    public PdfTextRenderingMode RenderingMode { get; public set; }
    public double Rise { get; public set; }
    public double Knockout { get; public set; }
    public PdfTransformationMatrix TextLineMatrix { get; public set; }
    public PdfTransformationMatrix TextMatrix { get; public set; }
    public PdfTransformationMatrix TextSpaceMatrix { get; }
    public double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public double get_WordSpacing();
    public void set_WordSpacing(double value);
    public double get_AbsoluteHorizontalScaling();
    public void set_AbsoluteHorizontalScaling(double value);
    public double get_HorizontalScaling();
    public void set_HorizontalScaling(double value);
    public double get_Leading();
    public void set_Leading(double value);
    public PdfFont get_Font();
    public void set_Font(PdfFont value);
    public double get_AbsoluteFontSize();
    public double get_FontSize();
    public void set_FontSize(double value);
    public PdfTextRenderingMode get_RenderingMode();
    public void set_RenderingMode(PdfTextRenderingMode value);
    public double get_Rise();
    public void set_Rise(double value);
    public double get_Knockout();
    public void set_Knockout(double value);
    public PdfTransformationMatrix get_TextLineMatrix();
    public void set_TextLineMatrix(PdfTransformationMatrix value);
    public PdfTransformationMatrix get_TextMatrix();
    public void set_TextMatrix(PdfTransformationMatrix value);
    public PdfTransformationMatrix get_TextSpaceMatrix();
    public PdfTextState Clone();
}
public static class DevExpress.Pdf.Native.PdfTextUtils : object {
    private static string separatorsRegexString;
    private static string cjkRegexString;
    private static string cjkSeperatorsRegexString;
    private static string whitespaceRegexString;
    private static Regex separator;
    private static Regex cjkSeparator;
    private static Regex endsWithSeparator;
    private static Regex whitespace;
    private static Regex CJK;
    private static Regex searchSplit;
    private static string wordWrappers;
    private static Dictionary`2<char, char> arabicNumericsReplacements;
    private static PdfTextUtils();
    public static string NormalizeAndDecompose(string text);
    public static string NormalizeAndCompose(string text);
    public static PdfPoint RotatePoint(PdfPoint point, double angle);
    public static double GetOrientedDistance(PdfPoint first, PdfPoint second, double angle);
    public static bool HasRTLMark(string unicodeChar);
    public static bool HasCJKSymbols(string unicodeChar);
    public static bool EndsWithSeparator(string str);
    public static bool IsSeparator(string unicodeChar);
    public static bool IsWhitespace(string unicodeChar);
    public static bool IsWrapSymbol(string unicodeChar);
    public static bool IsNonSpacingMark(string unicodeChar);
    public static bool DoOverlap(PdfOrientedRectangle rect1, PdfOrientedRectangle rect2);
    private static string ReplaceArabicNumbers(string text);
    public static IList`1<string> PrepareStringForTextSearch(string inputString);
}
public class DevExpress.Pdf.Native.PdfTextWriter : object {
    private static Byte[] showTextCommand;
    private static Byte[] showTextWithGlyphPositioningCommand;
    private PdfStreamWriter streamWriter;
    private bool useTwoByteCodePoints;
    private List`1<byte> textBuffer;
    private bool useGlyphOffsets;
    public PdfTextWriter(PdfStreamWriter streamWriter, bool useTwoByteCodePoints);
    private static PdfTextWriter();
    internal void AppendGlyph(ushort index);
    public void AppendOffset(float offset);
    public void EndText();
    private void AppendTextBuffer();
}
public class DevExpress.Pdf.Native.PdfTiffPredictor : PdfFlateLZWDecodeFilterPredictor {
    private int bitsPerComponent;
    private int componentsCount;
    protected int ActualRowLength { get; }
    public PdfTiffPredictor(PdfFlateLZWDecodeFilter filter);
    protected virtual int get_ActualRowLength();
    protected virtual Byte[] Decode(Byte[] data);
    private Byte[] Decode16bpp(Byte[] data);
}
public class DevExpress.Pdf.Native.PdfTiffPredictorDataSource : PdfFlateLZWDecodeFilterPredictorDataSource {
    public PdfTiffPredictorDataSource(PdfFlateLZWDecodeFilter filter, IPdfFlateDataSource source);
    protected virtual void ProcessRow();
    private void Process16bppRow();
}
public class DevExpress.Pdf.Native.PdfTimesFontFamily : PdfStandardFontFamily {
    private static string family;
    private static PdfVariableGlyphWidthProvider timesRomanWidths;
    private static PdfVariableGlyphWidthProvider timesBoldWidths;
    private static PdfVariableGlyphWidthProvider timesItalicWidths;
    private static PdfVariableGlyphWidthProvider timesBoldItalicWidths;
    private static WidthsProvider widthsProvider;
    private static DescriptorProvider descriptorProvider;
    protected PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> FontDescriptorProvider { get; }
    protected PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> GlyphWidthProvider { get; }
    private static PdfTimesFontFamily();
    protected virtual PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> get_FontDescriptorProvider();
    protected virtual PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> get_GlyphWidthProvider();
}
public class DevExpress.Pdf.Native.PdfToken : object {
    private string name;
    public string Name { get; }
    public PdfToken(string name);
    public string get_Name();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.Native.PdfTokenDescription : object {
    public static PdfTokenDescription EndObjToken;
    public static PdfTokenDescription ObjToken;
    public static PdfTokenDescription EndStreamToken;
    private Byte[] token;
    private int length;
    private int indexToCompare;
    private byte currentComparingSymbol;
    public bool IsStartWithComment { get; }
    public int Length { get; }
    public PdfTokenDescription(Byte[] token);
    private static PdfTokenDescription();
    public static PdfTokenDescription BeginCompare(PdfTokenDescription description);
    public bool get_IsStartWithComment();
    public int get_Length();
    public bool Compare(byte symbol);
    private void BeginCompare();
}
public class DevExpress.Pdf.Native.PdfToolTipSettings : object {
    private string title;
    private string text;
    private PdfDocumentArea documentArea;
    public string Title { get; }
    public string Text { get; }
    public PdfDocumentArea DocumentArea { get; }
    public PdfToolTipSettings(string title, string text, PdfDocumentArea documentArea);
    public string get_Title();
    public string get_Text();
    public PdfDocumentArea get_DocumentArea();
}
public class DevExpress.Pdf.Native.PdfToUnicodeCMap : PdfCMap`1<string> {
    protected string DefaultValue { get; }
    private bool DevExpress.Pdf.Native.IPdfToUnicodeCMap.IsEmpty { get; }
    private PdfToUnicodeCMap(IList`1<Tuple`2<Byte[], string>> map);
    public static Byte[] CreateCharacterMappingData(IDictionary`2<int, string> charMap, string fontName, bool shouldUseTwoByteGlyphIndex);
    public static IPdfToUnicodeCMap Parse(Byte[] data, bool singleByteCodesOnly);
    protected virtual string get_DefaultValue();
    private sealed virtual override bool DevExpress.Pdf.Native.IPdfToUnicodeCMap.get_IsEmpty();
    public sealed virtual string GetUnicode(Byte[] code);
}
public class DevExpress.Pdf.Native.PdfToUnicodeCMapStreamParser : PdfCMapStreamParser`1<string> {
    private PdfToUnicodeCMapStreamParser(Byte[] data, bool singleByteCodesOnly);
    public static PdfCMapParsingList`1<string> Parse(Byte[] data, bool singleByteCodesOnly);
    private static string GetUnicodeValues(Byte[] bytes);
    protected virtual string GetCIDFromArray(Byte[] bytes);
    protected virtual string GetCIDFromValue(int code);
    protected virtual PdfCMapParsingList`1<string> CreateCMapParsingList();
}
public class DevExpress.Pdf.Native.PdfToUnicodeIdentityCMap : object {
    private PdfCMapRangeValue`1<string> value;
    public bool IsEmpty { get; }
    public PdfToUnicodeIdentityCMap(PdfCMapRangeValue`1<string> value);
    public sealed virtual bool get_IsEmpty();
    public sealed virtual string GetUnicode(Byte[] code);
}
public abstract class DevExpress.Pdf.Native.PdfToUnicodeMapping : object {
    public PdfCharacterMapping CharacterMapping { get; }
    public static PdfToUnicodeMapping Create(object value, PdfObjectCollection objects);
    public abstract virtual PdfCharacterMapping get_CharacterMapping();
    public abstract virtual object Write(IPdfWrittenObjectsCollection objects);
    public abstract virtual PdfPrimitive Write(PdfObjectStorage collection);
    public abstract virtual IPdfToUnicodeCMap CreateMapping(bool oneByteCodeRangesOnly);
}
public class DevExpress.Pdf.Native.PdfToUnicodePlainCMap : object {
    private Dictionary`2<UInt32, string> dictionary;
    public bool IsEmpty { get; }
    public PdfToUnicodePlainCMap(IList`1<Tuple`2<Byte[], string>> values);
    private static UInt32 CreateKey(Byte[] code);
    public sealed virtual bool get_IsEmpty();
    public sealed virtual string GetUnicode(Byte[] code);
}
public class DevExpress.Pdf.Native.PdfTransparentImageDataSource : PdfImageDataSource {
    private IPdfImageScanlineSource maskSource;
    private Byte[] maskScanline;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfTransparentImageDataSource(IPdfImageScanlineSource source, IPdfImageScanlineSource maskSource, int width);
    public virtual int get_ComponentsCount();
    public virtual bool get_HasAlpha();
    public virtual void FillBuffer(Byte[] buffer, int scanlineCount);
    public virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfTransparentMatteImageDataSource : PdfImageDataSource {
    private IPdfImageScanlineSource maskSource;
    private Byte[] maskScanline;
    private IList`1<double> matte;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfTransparentMatteImageDataSource(IPdfImageScanlineSource source, IPdfImageScanlineSource maskSource, int width, IList`1<double> matte);
    public virtual int get_ComponentsCount();
    public virtual bool get_HasAlpha();
    public virtual void FillBuffer(Byte[] buffer, int scanlineCount);
    public virtual void Dispose();
}
public static class DevExpress.Pdf.Native.PdfTrueTypeCollectionFontFile : object {
    public static PdfFontFile ReadFontFile(Byte[] fileData, int index);
    public static PdfFontFile ReadFontFile(Byte[] fileData, string fontName, FontStyle style, Nullable`1<int> maxNameLength);
}
public class DevExpress.Pdf.Native.PdfTrueTypeFontProgramFacade : PdfFontProgramFacade {
    private Byte[] fontFileData;
    public Byte[] Data { get; }
    private PdfTrueTypeFontProgramFacade(PdfRectangle fontBBox, Nullable`1<double> top, Nullable`1<double> bottom, IPdfCodePointMapping mapping, Byte[] fontFileData);
    private static PdfTrueTypeFontProgramFacade Create(PdfFont font, Byte[] fontFileData, Func`2<PdfFontFile, IPdfCodePointMapping> createMapping);
    public static PdfTrueTypeFontProgramFacade Create(PdfSimpleFont font, Byte[] trueTypeFontFile);
    public static PdfTrueTypeFontProgramFacade Create(PdfType0Font font, Byte[] trueTypeFontFile);
    public Byte[] get_Data();
}
public class DevExpress.Pdf.Native.PdfTrueTypeGlyfTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private IDictionary`2<int, PdfGlyphDescription> glyphs;
    private IDictionary`2<int, PdfGlyphDescription> subsetGlyphs;
    private Int32[] glyphOffsets;
    public IDictionary`2<int, PdfGlyphDescription> Glyphs { get; }
    public PdfTrueTypeGlyfTableDirectoryEntry(Byte[] tableData);
    private static int Pad4(int val);
    public IDictionary`2<int, PdfGlyphDescription> get_Glyphs();
    public void ReadGlyphs(PdfFontFile fontFile);
    public void CreateSubset(PdfFontFile fontFile, ICollection`1<int> glyphIndices);
    private Int32[] CalculateOffsets(int glyphCount);
    protected virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfTrueTypeLocaTableDirectoryEntry : PdfFontTableDirectoryEntry {
    public static string EntryTag;
    private bool isShortFormat;
    private Int32[] glyphOffsets;
    public Int32[] GlyphOffsets { get; public set; }
    public PdfTrueTypeLocaTableDirectoryEntry(Byte[] tableData);
    public Int32[] get_GlyphOffsets();
    public void set_GlyphOffsets(Int32[] value);
    public void ReadOffsets(PdfFontFile fontFile);
    protected virtual void Write(PdfBinaryStream tableStream);
}
public class DevExpress.Pdf.Native.PdfType1CharstringCallGlobalSubrOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringCallOthersubrOperator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringCallsubrOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringClosepathOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringDivOperator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringDotsectionOperator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringDouble : PdfType1CharstringOperand`1<double> {
    public PdfType1CharstringDouble(double value);
    public virtual void Write(PdfType2CharstringBinaryWriter writer);
}
public class DevExpress.Pdf.Native.PdfType1CharstringEndcharOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringHLineToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringHMoveToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringHsbwOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringHstem3Operator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringHstemOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringHVCurveToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringInteger : PdfType1CharstringOperand`1<int> {
    public PdfType1CharstringInteger(int value);
    public virtual void Write(PdfType2CharstringBinaryWriter writer);
}
public abstract class DevExpress.Pdf.Native.PdfType1CharstringInterpreter : object {
    private bool characterEnded;
    private bool returnFromSubroutine;
    [CompilerGeneratedAttribute]
private PdfStack <CharstringStack>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfStack <PostScriptStack>k__BackingField;
    public PdfStack CharstringStack { get; }
    public PdfStack PostScriptStack { get; }
    [CompilerGeneratedAttribute]
public PdfStack get_CharstringStack();
    [CompilerGeneratedAttribute]
public PdfStack get_PostScriptStack();
    public void EndCharacter(double adx, double ady, int bchar, int achar);
    public virtual void EndCharacter();
    public void Return();
    protected void ExecSubr(IEnumerable`1<IPdfType1CharstringToken> tokens);
    public void Execute(IEnumerable`1<IPdfType1CharstringToken> tokens);
    public void SetSidebearing(double sbx, double wx);
    public void CallOtherSubr(int index, int n);
    public abstract virtual void CallGlobalSubr(int index);
    public abstract virtual void CallSubr(int index);
    public abstract virtual void SetSidebearing(double sbx, double sby, double wx, double wy);
    public abstract virtual void RelativeMoveTo(double dx, double dy);
    public abstract virtual void RelativeLineTo(double dx, double dy);
    public abstract virtual void RelativeCurveTo(double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
    public abstract virtual void ClosePath();
    public abstract virtual void Seac(double asb, double adx, double ady, int bchar, int achar);
    protected abstract virtual void CallOtherSubr(int index, IList`1<object> parameters);
}
[DebuggerDisplayAttribute("{Value}")]
public abstract class DevExpress.Pdf.Native.PdfType1CharstringOperand`1 : object {
    private TValue value;
    public TValue Value { get; }
    public PdfType1CharstringOperand`1(TValue value);
    public TValue get_Value();
    public sealed virtual void Execute(PdfType1CharstringInterpreter interpreter);
    public abstract virtual void Write(PdfType2CharstringBinaryWriter writer);
}
public class DevExpress.Pdf.Native.PdfType1CharstringParser : object {
    private PdfBinaryStream stream;
    public bool Ended { get; }
    protected PdfBinaryStream Stream { get; }
    protected PdfType1CharstringParser(Byte[] charstring);
    public static IList`1<IPdfType1CharstringToken> ParseType1(Byte[] charstring);
    public bool get_Ended();
    protected PdfBinaryStream get_Stream();
    public sealed virtual void Dispose();
    protected IList`1<IPdfType1CharstringToken> Parse();
    protected IPdfType1CharstringToken GetNextToken();
    protected virtual IPdfType1CharstringToken CreateSingleByteOperator(byte code);
    protected virtual IPdfType1CharstringToken CreateTwoByteOperator(byte code);
    protected virtual IPdfType1CharstringToken ParseFourByteOperand();
}
public class DevExpress.Pdf.Native.PdfType1CharstringPopOperator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringReturnOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringRLineToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringRMoveToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringRRCurveToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringSbwOperator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringSeacOperator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringSetCurrentPointOperator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
[DebuggerDisplayAttribute("{((DevExpress.Pdf.Native.PdfType1SingleByteCharstringOperatorCode)OperationCode)}")]
public abstract class DevExpress.Pdf.Native.PdfType1CharstringSingleByteOperator : object {
    private byte operationCode;
    public byte OperationCode { get; }
    protected PdfType1CharstringSingleByteOperator(byte operationCode);
    public static PdfType1CharstringSingleByteOperator CreateSingleByteOperator(byte operationCode);
    public byte get_OperationCode();
    public abstract virtual void Execute(PdfType1CharstringInterpreter interpreter);
    public virtual void Write(PdfType2CharstringBinaryWriter writer);
}
public class DevExpress.Pdf.Native.PdfType1CharstringSubroutine : ValueType {
    private Byte[] data;
    private int lenIV;
    public PdfType1CharstringSubroutine(Byte[] data, int lenIV);
    public IList`1<IPdfType1CharstringToken> GetTokens();
}
[DebuggerDisplayAttribute("{((DevExpress.Pdf.Native.PdfTypeTwoByteCharstringOperatorCode)OperationCode)}")]
public abstract class DevExpress.Pdf.Native.PdfType1CharstringTwoByteOperator : PdfType1CharstringSingleByteOperator {
    public static byte TwoByteOperatorPrefix;
    protected PdfType1CharstringTwoByteOperator(byte operationCode);
    public static PdfType1CharstringTwoByteOperator CreateTwoByteOperator(byte operationCode);
    public virtual void Write(PdfType2CharstringBinaryWriter writer);
}
public class DevExpress.Pdf.Native.PdfType1CharstringVHCurveToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringVLineToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringVMoveToOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringVstem3Operator : PdfType1CharstringTwoByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
public class DevExpress.Pdf.Native.PdfType1CharstringVstemOperator : PdfType1CharstringSingleByteOperator {
    public static byte Code;
    public virtual void Execute(PdfType1CharstringInterpreter interpreter);
}
internal class DevExpress.Pdf.Native.PdfType1ClassicCIDFontDictionary : object {
    [CompilerGeneratedAttribute]
private PdfTransformationMatrix <FontMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfType1FontClassicCIDFontPrivateData <Private>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    public PdfTransformationMatrix FontMatrix { get; private set; }
    public PdfType1FontClassicCIDFontPrivateData Private { get; private set; }
    public string FontName { get; private set; }
    public PdfType1ClassicCIDFontDictionary(PostScriptDictionary dict);
    [CompilerGeneratedAttribute]
public PdfTransformationMatrix get_FontMatrix();
    [CompilerGeneratedAttribute]
private void set_FontMatrix(PdfTransformationMatrix value);
    [CompilerGeneratedAttribute]
public PdfType1FontClassicCIDFontPrivateData get_Private();
    [CompilerGeneratedAttribute]
private void set_Private(PdfType1FontClassicCIDFontPrivateData value);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
private void set_FontName(string value);
    internal void UpdateSubrs(Byte[] data);
}
public class DevExpress.Pdf.Native.PdfType1FontArrayCharset : PdfType1FontCharset {
    internal static byte Id;
    private Int16[] charset;
    private Dictionary`2<short, short> cidToGidMapping;
    public IDictionary`2<short, short> SidToGidMapping { get; }
    public int DataLength { get; }
    public PdfType1FontArrayCharset(PdfBinaryStream stream, int size);
    public PdfType1FontArrayCharset(Int16[] charset);
    public virtual IDictionary`2<short, short> get_SidToGidMapping();
    public virtual int get_DataLength();
    public virtual void Write(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfType1FontArrayEncoding : PdfType1FontCustomEncoding {
    internal static byte Id;
    private Byte[] array;
    protected byte EncodingID { get; }
    protected Int16[] CodeToGIDMapping { get; }
    public int DataLength { get; }
    public PdfType1FontArrayEncoding(PdfBinaryStream stream);
    public PdfType1FontArrayEncoding(Byte[] array);
    protected virtual byte get_EncodingID();
    protected virtual Int16[] get_CodeToGIDMapping();
    public virtual int get_DataLength();
    protected virtual void WriteEncodingData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfType1FontByteRangeCharset : PdfType1FontCharset {
    internal static byte Id;
    private List`1<Range> ranges;
    private Dictionary`2<short, short> cidToGidMapping;
    public IDictionary`2<short, short> SidToGidMapping { get; }
    public int DataLength { get; }
    public PdfType1FontByteRangeCharset(PdfBinaryStream stream, int size);
    public virtual IDictionary`2<short, short> get_SidToGidMapping();
    public virtual int get_DataLength();
    public virtual void Write(PdfBinaryStream stream);
}
public abstract class DevExpress.Pdf.Native.PdfType1FontCharset : object {
    public bool IsDefault { get; }
    public int Offset { get; }
    public IDictionary`2<short, short> SidToGidMapping { get; }
    public int DataLength { get; }
    public static PdfType1FontCharset Parse(PdfBinaryStream stream, int size);
    public virtual bool get_IsDefault();
    public virtual int get_Offset();
    public abstract virtual IDictionary`2<short, short> get_SidToGidMapping();
    public abstract virtual int get_DataLength();
    public abstract virtual void Write(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfType1FontCIDGlyphGroupArraySelector : PdfType1FontCIDGlyphGroupSelector {
    internal static int Format;
    private Byte[] glyphGroupIndices;
    public Byte[] GlyphGroupIndices { get; }
    public int DataLength { get; }
    internal PdfType1FontCIDGlyphGroupArraySelector(Byte[] glyphGroupIndices);
    public virtual Byte[] get_GlyphGroupIndices();
    public virtual int get_DataLength();
    public virtual void Write(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfType1FontCIDGlyphGroupData : object {
    private double underlinePosition;
    private double underlineThickness;
    private PdfRectangle fontBBox;
    private PdfType1FontType fontType;
    private PdfTransformationMatrix fontMatrix;
    private int uniqueID;
    private PdfType1FontCompactFontPrivateData privateData;
    private int cidCount;
    private string fontName;
    public double UnderlinePosition { get; internal set; }
    public double UnderlineThickness { get; internal set; }
    public PdfRectangle FontBBox { get; internal set; }
    public PdfType1FontType FontType { get; internal set; }
    public PdfTransformationMatrix FontMatrix { get; internal set; }
    public int UniqueID { get; internal set; }
    public PdfType1FontCompactFontPrivateData Private { get; internal set; }
    public int CIDCount { get; internal set; }
    public string FontName { get; internal set; }
    public double get_UnderlinePosition();
    internal void set_UnderlinePosition(double value);
    public double get_UnderlineThickness();
    internal void set_UnderlineThickness(double value);
    public PdfRectangle get_FontBBox();
    internal void set_FontBBox(PdfRectangle value);
    public PdfType1FontType get_FontType();
    internal void set_FontType(PdfType1FontType value);
    public PdfTransformationMatrix get_FontMatrix();
    internal void set_FontMatrix(PdfTransformationMatrix value);
    public int get_UniqueID();
    internal void set_UniqueID(int value);
    public PdfType1FontCompactFontPrivateData get_Private();
    internal void set_Private(PdfType1FontCompactFontPrivateData value);
    public int get_CIDCount();
    internal void set_CIDCount(int value);
    public string get_FontName();
    internal void set_FontName(string value);
}
public class DevExpress.Pdf.Native.PdfType1FontCIDGlyphGroupRangeSelector : PdfType1FontCIDGlyphGroupSelector {
    internal static int Format;
    private Range[] ranges;
    private ushort sentinel;
    public Byte[] GlyphGroupIndices { get; }
    public int DataLength { get; }
    internal PdfType1FontCIDGlyphGroupRangeSelector(PdfBinaryStream stream, int cidCount);
    public virtual Byte[] get_GlyphGroupIndices();
    public virtual int get_DataLength();
    public virtual void Write(PdfBinaryStream stream);
}
public abstract class DevExpress.Pdf.Native.PdfType1FontCIDGlyphGroupSelector : object {
    public Byte[] GlyphGroupIndices { get; }
    public int DataLength { get; }
    public static PdfType1FontCIDGlyphGroupSelector Parse(PdfBinaryStream stream, int cidCount);
    public abstract virtual Byte[] get_GlyphGroupIndices();
    public abstract virtual int get_DataLength();
    public abstract virtual void Write(PdfBinaryStream stream);
}
public abstract class DevExpress.Pdf.Native.PdfType1FontCipher : object {
    internal static ushort C1;
    internal static ushort C2;
    private Byte[] data;
    private int endPosition;
    private int currentPosition;
    private ushort r;
    protected int R { get; protected set; }
    protected int SkipBytesCount { get; }
    protected int BytesPerResultByte { get; }
    protected int InitialR { get; }
    protected PdfType1FontCipher(Byte[] data, int startPosition, int dataLength);
    protected PdfType1FontCipher(Byte[] data);
    protected int get_R();
    protected void set_R(int value);
    protected virtual int get_SkipBytesCount();
    protected abstract virtual int get_BytesPerResultByte();
    protected abstract virtual int get_InitialR();
    private short DecryptNextChar();
    public Byte[] Decrypt();
    protected short NextByte();
    protected abstract virtual short NextChar();
}
internal class DevExpress.Pdf.Native.PdfType1FontClassicCIDFontPrivateData : PdfType1FontPrivateData {
    private int uniqueID;
    private int lenIV;
    private PostScriptArray erode;
    private string source;
    [CompilerGeneratedAttribute]
private PostScriptArray <OtherSubrs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfType1CharstringSubroutine> <Subrs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubrCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SDBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubrMapOffset>k__BackingField;
    public int UniqueID { get; }
    public int LenIV { get; }
    internal PostScriptArray Erode { get; }
    public string Source { get; }
    public PostScriptArray OtherSubrs { get; private set; }
    public IList`1<PdfType1CharstringSubroutine> Subrs { get; private set; }
    private int SubrCount { get; private set; }
    private int SDBytes { get; private set; }
    public int SubrMapOffset { get; public set; }
    internal PdfType1FontClassicCIDFontPrivateData(PostScriptDictionary dictionary);
    private static PdfType1FontGlyphZone[] ToGlyphZones(PostScriptObject value);
    private static double ToStemWidth(PostScriptObject value);
    private static Double[] ToStemSnap(PostScriptObject value);
    public int get_UniqueID();
    public int get_LenIV();
    internal PostScriptArray get_Erode();
    public string get_Source();
    [CompilerGeneratedAttribute]
public PostScriptArray get_OtherSubrs();
    [CompilerGeneratedAttribute]
private void set_OtherSubrs(PostScriptArray value);
    [CompilerGeneratedAttribute]
public IList`1<PdfType1CharstringSubroutine> get_Subrs();
    [CompilerGeneratedAttribute]
private void set_Subrs(IList`1<PdfType1CharstringSubroutine> value);
    [CompilerGeneratedAttribute]
private int get_SubrCount();
    [CompilerGeneratedAttribute]
private void set_SubrCount(int value);
    [CompilerGeneratedAttribute]
private int get_SDBytes();
    [CompilerGeneratedAttribute]
private void set_SDBytes(int value);
    [CompilerGeneratedAttribute]
public int get_SubrMapOffset();
    [CompilerGeneratedAttribute]
public void set_SubrMapOffset(int value);
    internal void UpdateSubrs(Byte[] data);
}
internal class DevExpress.Pdf.Native.PdfType1FontClassicCIDFontProgram : PdfType1FontProgram {
    private int gdBytes;
    private int cidMapOffset;
    private int fdBytes;
    private Byte[] glyphData;
    [CompilerGeneratedAttribute]
private int <CIDFontType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CIDFontName>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <CIDSystemInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UIDBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <XUID>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfType1FontCompactCIDCharstring> <CharStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CIDCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfType1ClassicCIDFontDictionary> <FDArray>k__BackingField;
    public int CIDFontType { get; private set; }
    public string CIDFontName { get; private set; }
    public PostScriptDictionary CIDSystemInfo { get; private set; }
    public PdfType1FontType FontType { get; }
    public int UIDBase { get; private set; }
    public int WMode { get; private set; }
    public Int32[] XUID { get; private set; }
    public IList`1<PdfType1FontCompactCIDCharstring> CharStrings { get; private set; }
    public int CIDCount { get; private set; }
    public IList`1<PdfType1ClassicCIDFontDictionary> FDArray { get; private set; }
    public PdfType1FontClassicCIDFontProgram(PostScriptDictionary dict);
    public static int GetInt(Byte[] data, int offset, int length);
    public static PdfType1FontClassicCIDFontProgram Create(string fontName, Byte[] data);
    [CompilerGeneratedAttribute]
public int get_CIDFontType();
    [CompilerGeneratedAttribute]
private void set_CIDFontType(int value);
    [CompilerGeneratedAttribute]
public string get_CIDFontName();
    [CompilerGeneratedAttribute]
private void set_CIDFontName(string value);
    [CompilerGeneratedAttribute]
public PostScriptDictionary get_CIDSystemInfo();
    [CompilerGeneratedAttribute]
private void set_CIDSystemInfo(PostScriptDictionary value);
    public virtual PdfType1FontType get_FontType();
    [CompilerGeneratedAttribute]
public int get_UIDBase();
    [CompilerGeneratedAttribute]
private void set_UIDBase(int value);
    [CompilerGeneratedAttribute]
public int get_WMode();
    [CompilerGeneratedAttribute]
private void set_WMode(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_XUID();
    [CompilerGeneratedAttribute]
private void set_XUID(Int32[] value);
    [CompilerGeneratedAttribute]
public IList`1<PdfType1FontCompactCIDCharstring> get_CharStrings();
    [CompilerGeneratedAttribute]
private void set_CharStrings(IList`1<PdfType1FontCompactCIDCharstring> value);
    [CompilerGeneratedAttribute]
public int get_CIDCount();
    [CompilerGeneratedAttribute]
private void set_CIDCount(int value);
    [CompilerGeneratedAttribute]
public IList`1<PdfType1ClassicCIDFontDictionary> get_FDArray();
    [CompilerGeneratedAttribute]
private void set_FDArray(IList`1<PdfType1ClassicCIDFontDictionary> value);
    private static Byte[] GetArraySubRange(Byte[] data, int offset, int length);
    public virtual IPdfCodePointMapping GetSimpleMapping(PdfSimpleFontEncoding fontEncoding);
}
public class DevExpress.Pdf.Native.PdfType1FontClassicFontPrivateData : PdfType1FontPrivateData {
    public static string RDToken;
    public static string RDAltToken;
    public static string NDToken;
    public static string NDAltToken;
    public static string NPToken;
    public static string NPAltToken;
    private PostScriptArray rd;
    private PostScriptArray nd;
    private PostScriptArray np;
    private PostScriptArray subrs;
    private PostScriptArray otherSubrs;
    private int uniqueID;
    private int lenIV;
    private PostScriptArray erode;
    private string source;
    internal PostScriptArray RD { get; }
    internal PostScriptArray ND { get; }
    internal PostScriptArray NP { get; }
    internal PostScriptArray Subrs { get; }
    internal PostScriptArray OtherSubrs { get; }
    public int UniqueID { get; }
    public int LenIV { get; }
    internal PostScriptArray Erode { get; }
    public string Source { get; }
    internal PdfType1FontClassicFontPrivateData(PostScriptDictionary dictionary);
    private static PdfType1FontGlyphZone[] ToGlyphZones(PostScriptObject value);
    private static double ToStemWidth(PostScriptObject value);
    private static Double[] ToStemSnap(PostScriptObject value);
    internal PostScriptArray get_RD();
    internal PostScriptArray get_ND();
    internal PostScriptArray get_NP();
    internal PostScriptArray get_Subrs();
    internal PostScriptArray get_OtherSubrs();
    public int get_UniqueID();
    public int get_LenIV();
    internal PostScriptArray get_Erode();
    public string get_Source();
}
internal class DevExpress.Pdf.Native.PdfType1FontClassicFontProgram : PdfType1FontProgram {
    internal static string SerializationPattern;
    internal static string EncodingDictionaryKey;
    internal static string CharStringsDictionaryKey;
    private static string fontInfoDictionaryKey;
    private static string fontNameDictionaryKey;
    private static string paintTypeDictionaryKey;
    private static string fontTypeDictionaryKey;
    private static string fontMatrixDictionaryKey;
    private static string fontBBoxDictionaryKey;
    private static string uniqueIDDictionaryKey;
    private static string metricsDictionaryKey;
    private static string strokeWidthDictionaryKey;
    private static string privateDictionaryKey;
    private static string wModeDictionaryKey;
    private List`1<string> encoding;
    private PostScriptDictionary metrics;
    private PostScriptDictionary charStrings;
    private PdfType1FontWMode wMode;
    private PdfType1FontClassicFontPrivateData privateData;
    public List`1<string> Encoding { get; }
    public PostScriptDictionary Metrics { get; }
    public PostScriptDictionary CharStrings { get; }
    public PdfType1FontWMode WMode { get; }
    public PdfType1FontType FontType { get; }
    public PdfType1FontClassicFontPrivateData Private { get; internal set; }
    internal PdfType1FontClassicFontProgram(PostScriptDictionary dictionary);
    public static PdfType1FontClassicFontProgram Create(string fontName, PdfType1FontFileData fontFileData);
    private static PdfType1FontClassicFontProgram Create(string fontName, PdfType1FontFileData fontFileData, bool forceCharstringTermination);
    public List`1<string> get_Encoding();
    public PostScriptDictionary get_Metrics();
    public PostScriptDictionary get_CharStrings();
    public PdfType1FontWMode get_WMode();
    public virtual PdfType1FontType get_FontType();
    public PdfType1FontClassicFontPrivateData get_Private();
    internal void set_Private(PdfType1FontClassicFontPrivateData value);
    public string ToPostScript();
    public void Validate(PdfFont font, string fontName);
    public virtual IPdfCodePointMapping GetSimpleMapping(PdfSimpleFontEncoding fontEncoding);
    public virtual IPdfCodePointMapping GetCompositeMapping(Int16[] cidToGidMap);
    public IList`1<PdfType1CharstringSubroutine> GetSubroutineArray();
}
internal class DevExpress.Pdf.Native.PdfType1FontCompactCIDCharstring : ValueType {
    [CompilerGeneratedAttribute]
private int <FDIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Charstring>k__BackingField;
    public int FDIndex { get; public set; }
    public Byte[] Charstring { get; public set; }
    [CompilerGeneratedAttribute]
public int get_FDIndex();
    [CompilerGeneratedAttribute]
public void set_FDIndex(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Charstring();
    [CompilerGeneratedAttribute]
public void set_Charstring(Byte[] value);
}
public class DevExpress.Pdf.Native.PdfType1FontCompactCIDFontProgram : PdfType1FontCompactFontProgram {
    public static double DefaultCIDFontVersion;
    public static int DefaultCIDCount;
    private string registry;
    private string ordering;
    private double supplement;
    private double cidFontVersion;
    private int cidCount;
    private Nullable`1<int> uidBase;
    private PdfType1FontCIDGlyphGroupData[] glyphGroupData;
    private PdfType1FontCIDGlyphGroupSelector glyphGroupSelector;
    public string Registry { get; internal set; }
    public string Ordering { get; internal set; }
    public double Supplement { get; internal set; }
    public double CIDFontVersion { get; internal set; }
    public int CIDCount { get; internal set; }
    public Nullable`1<int> UIDBase { get; internal set; }
    public PdfType1FontCIDGlyphGroupData[] GlyphGroupData { get; internal set; }
    public PdfType1FontCIDGlyphGroupSelector GlyphGroupSelector { get; internal set; }
    internal PdfType1FontCompactCIDFontProgram(byte majorVersion, byte minorVersion, string fontName, PdfCompactFontFormatStringIndex stringIndex, IList`1<Byte[]> globalSubrs);
    public string get_Registry();
    internal void set_Registry(string value);
    public string get_Ordering();
    internal void set_Ordering(string value);
    public double get_Supplement();
    internal void set_Supplement(double value);
    public double get_CIDFontVersion();
    internal void set_CIDFontVersion(double value);
    public int get_CIDCount();
    internal void set_CIDCount(int value);
    public Nullable`1<int> get_UIDBase();
    internal void set_UIDBase(Nullable`1<int> value);
    public PdfType1FontCIDGlyphGroupData[] get_GlyphGroupData();
    internal void set_GlyphGroupData(PdfType1FontCIDGlyphGroupData[] value);
    public PdfType1FontCIDGlyphGroupSelector get_GlyphGroupSelector();
    internal void set_GlyphGroupSelector(PdfType1FontCIDGlyphGroupSelector value);
    public virtual bool Validate();
    public virtual IPdfCodePointMapping GetCompositeMapping(Int16[] cidToGidMap);
}
public class DevExpress.Pdf.Native.PdfType1FontCompactFontPrivateData : PdfType1FontPrivateData {
    public static int DefaultBlueFuzz;
    public static double DefaultDefaultWidthX;
    public static double DefaultNominalWidthX;
    private IList`1<Byte[]> subrs;
    private double defaultWidthX;
    private double nominalWidthX;
    public IList`1<Byte[]> Subrs { get; internal set; }
    public double DefaultWidthX { get; internal set; }
    public double NominalWidthX { get; internal set; }
    public IList`1<Byte[]> get_Subrs();
    internal void set_Subrs(IList`1<Byte[]> value);
    public double get_DefaultWidthX();
    internal void set_DefaultWidthX(double value);
    public double get_NominalWidthX();
    internal void set_NominalWidthX(double value);
    protected internal virtual bool Patch();
}
public class DevExpress.Pdf.Native.PdfType1FontCompactFontProgram : PdfType1FontProgram {
    public static PdfType1FontType DefaultFontType;
    private static PdfTransformationMatrix defaultFontMatrix;
    private static PdfRectangle defaultFontBBox;
    private static Byte[] emptySubr;
    private byte majorVersion;
    private byte minorVersion;
    private PdfCompactFontFormatStringIndex stringIndex;
    private IList`1<Byte[]> globalSubrs;
    private Int32[] xuid;
    private PdfType1FontCharset charset;
    private PdfType1FontEncoding encoding;
    private IList`1<Byte[]> charStrings;
    private string postScript;
    private Double[] baseFontBlend;
    private string cidFontName;
    private PdfType1FontType fontType;
    private PdfType1FontCompactFontPrivateData privateData;
    public static PdfTransformationMatrix DefaultFontMatrix { get; }
    public static PdfRectangle DefaultFontBBox { get; }
    public byte MajorVersion { get; }
    public byte MinorVersion { get; }
    public PdfCompactFontFormatStringIndex StringIndex { get; }
    public IList`1<Byte[]> GlobalSubrs { get; }
    public Int32[] XUID { get; internal set; }
    public PdfType1FontCharset Charset { get; internal set; }
    public PdfType1FontEncoding Encoding { get; internal set; }
    public IList`1<Byte[]> CharStrings { get; internal set; }
    public string PostScript { get; internal set; }
    public Double[] BaseFontBlend { get; internal set; }
    public string CIDFontName { get; internal set; }
    public PdfType1FontCompactFontPrivateData Private { get; internal set; }
    public PdfType1FontType FontType { get; }
    internal PdfType1FontCompactFontProgram(byte majorVersion, byte minorVersion, string fontName, PdfCompactFontFormatStringIndex stringIndex, IList`1<Byte[]> globalSubrs);
    private static PdfType1FontCompactFontProgram();
    public static PdfTransformationMatrix get_DefaultFontMatrix();
    public static PdfRectangle get_DefaultFontBBox();
    private static void ReplaceListItems(IList`1<T> list, ISet`1<int> ignoredIndices, T value);
    public static Byte[] CreateSubset(Byte[] fontData, IEnumerable`1<int> glyphIndices);
    public static PdfType1FontCompactFontProgram Parse(Byte[] data);
    public static Byte[] Write(PdfType1FontCompactFontProgram fontProgram);
    public byte get_MajorVersion();
    public byte get_MinorVersion();
    public PdfCompactFontFormatStringIndex get_StringIndex();
    public IList`1<Byte[]> get_GlobalSubrs();
    public Int32[] get_XUID();
    internal void set_XUID(Int32[] value);
    public PdfType1FontCharset get_Charset();
    internal void set_Charset(PdfType1FontCharset value);
    public PdfType1FontEncoding get_Encoding();
    internal void set_Encoding(PdfType1FontEncoding value);
    public IList`1<Byte[]> get_CharStrings();
    internal void set_CharStrings(IList`1<Byte[]> value);
    public string get_PostScript();
    internal void set_PostScript(string value);
    public Double[] get_BaseFontBlend();
    internal void set_BaseFontBlend(Double[] value);
    public string get_CIDFontName();
    internal void set_CIDFontName(string value);
    public PdfType1FontCompactFontPrivateData get_Private();
    internal void set_Private(PdfType1FontCompactFontPrivateData value);
    public virtual PdfType1FontType get_FontType();
    internal void SetFontType(PdfType1FontType fontType);
    public int GetGlyphIndex(string glyphName);
    public virtual IPdfCodePointMapping GetSimpleMapping(PdfSimpleFontEncoding fontEncoding);
    public virtual bool Validate();
}
public abstract class DevExpress.Pdf.Native.PdfType1FontCustomEncoding : PdfType1FontEncoding {
    private static byte supplementDataFlag;
    private static byte idMask;
    private SupplementDataEntry[] supplementData;
    protected int SupplementDataLength { get; }
    protected byte EncodingID { get; }
    protected Int16[] CodeToGIDMapping { get; }
    public static PdfType1FontCustomEncoding Parse(PdfBinaryStream stream);
    protected static void FillEntry(Int16[] mapping, byte code, short gid);
    protected int get_SupplementDataLength();
    protected abstract virtual byte get_EncodingID();
    protected abstract virtual Int16[] get_CodeToGIDMapping();
    private void ReadSupplementData(PdfBinaryStream stream);
    public void Write(PdfBinaryStream stream);
    public virtual Int16[] GetCodeToGIDMapping(PdfType1FontCharset charset, PdfCompactFontFormatStringIndex stringIndex);
    protected abstract virtual void WriteEncodingData(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfType1FontEexecASCIICipher : PdfType1FontEexecCipher {
    protected int BytesPerResultByte { get; }
    public PdfType1FontEexecASCIICipher(Byte[] data, int startPosition, int dataLength, int lenIV);
    protected virtual int get_BytesPerResultByte();
    private short ActualNextByte();
    protected virtual short NextChar();
}
public class DevExpress.Pdf.Native.PdfType1FontEexecBinaryCipher : PdfType1FontEexecCipher {
    protected int BytesPerResultByte { get; }
    public PdfType1FontEexecBinaryCipher(Byte[] data, int startPosition, int dataLength, int lenIV);
    public PdfType1FontEexecBinaryCipher(Byte[] data);
    protected virtual int get_BytesPerResultByte();
    public Byte[] Encrypt();
    private byte Encrypt(byte p);
    protected virtual short NextChar();
}
public abstract class DevExpress.Pdf.Native.PdfType1FontEexecCipher : PdfType1FontCipher {
    private static int kindBytesCount;
    private int len4;
    protected int SkipBytesCount { get; }
    protected int InitialR { get; }
    protected PdfType1FontEexecCipher(Byte[] data, int startPosition, int dataLength, int len4);
    protected PdfType1FontEexecCipher(Byte[] data);
    protected static bool IsASCIISymbol(byte c);
    public static bool IsASCIICipher(Byte[] data, int startPosition);
    public static PdfType1FontEexecCipher Create(Byte[] data, int startPosition, int dataLength);
    public static PdfType1FontEexecCipher Create(Byte[] data, int startPosition, int dataLength, int lenIV);
    public static Byte[] DecryptCharstring(Byte[] charstring, int lenIV);
    protected virtual int get_SkipBytesCount();
    protected virtual int get_InitialR();
}
public abstract class DevExpress.Pdf.Native.PdfType1FontEncoding : object {
    public bool IsDefault { get; }
    public int Offset { get; }
    public int DataLength { get; }
    public virtual bool get_IsDefault();
    public virtual int get_Offset();
    public abstract virtual int get_DataLength();
    public abstract virtual Int16[] GetCodeToGIDMapping(PdfType1FontCharset charset, PdfCompactFontFormatStringIndex stringIndex);
}
public class DevExpress.Pdf.Native.PdfType1FontFileData : object {
    private static string fontFileDictionaryKey;
    private static string length1DictionaryKey;
    private static string length2DictionaryKey;
    private static string length3DictionaryKey;
    private Byte[] data;
    private int plainTextLength;
    private int cipherTextLength;
    private int nullSegmentLength;
    [CompilerGeneratedAttribute]
private bool <IsCIDData>k__BackingField;
    public Byte[] Data { get; }
    public int PlainTextLength { get; }
    public int CipherTextLength { get; }
    public int NullSegmentLength { get; }
    public bool IsCIDData { get; }
    public PdfType1FontFileData(Byte[] data, bool isCIDData);
    public PdfType1FontFileData(Byte[] data, int plainTextLength, int cipherTextLength, int nullSegmentLength);
    public static bool IsPfbData(Byte[] data);
    public static PdfType1FontFileData Parse(PdfReaderDictionary dictionary);
    public Byte[] get_Data();
    public int get_PlainTextLength();
    public int get_CipherTextLength();
    public int get_NullSegmentLength();
    [CompilerGeneratedAttribute]
public bool get_IsCIDData();
    public void Write(PdfWriterDictionary dictionary);
    public void Write(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.Native.PdfType1FontGlyphZone : ValueType {
    private double bottom;
    private double top;
    public double Bottom { get; }
    public double Top { get; }
    public PdfType1FontGlyphZone(double bottom, double top);
    public double get_Bottom();
    public double get_Top();
}
public class DevExpress.Pdf.Native.PdfType1FontInfo : object {
    private static string versionDictionaryKey;
    private static string noticeDictionaryKey;
    private static string copyrightDictionaryKey;
    private static string fullNameDictionaryKey;
    private static string familyNameDictionaryKey;
    private static string baseFontNameDictionaryKey;
    private static string weightDictionaryKey;
    private static string italicAngleDictionaryKey;
    private static string isFixedPitchDictionaryKey;
    private static string underlinePositionDictionaryKey;
    private static string underlineThicknessDictionaryKey;
    public static double DefaultItalicAngle;
    public static double DefaultUnderlinePosition;
    public static double DefaultUnderlineThickness;
    private string version;
    private string notice;
    private string copyright;
    private string fullName;
    private string familyName;
    private string baseFontName;
    private string weight;
    private double italicAngle;
    private bool isFixedPitch;
    private double underlinePosition;
    private double underlineThickness;
    public string Version { get; internal set; }
    public string Notice { get; internal set; }
    public string Copyright { get; internal set; }
    public string FullName { get; internal set; }
    public string FamilyName { get; internal set; }
    public string BaseFontName { get; internal set; }
    public string Weight { get; internal set; }
    public double ItalicAngle { get; internal set; }
    public bool IsFixedPitch { get; internal set; }
    public double UnderlinePosition { get; internal set; }
    public double UnderlineThickness { get; internal set; }
    internal PdfType1FontInfo(PostScriptDictionary dictionary);
    private static void SerializeString(StringBuilder sb, string key, string value);
    private static void SerializeDouble(StringBuilder sb, string key, double value);
    public string get_Version();
    internal void set_Version(string value);
    public string get_Notice();
    internal void set_Notice(string value);
    public string get_Copyright();
    internal void set_Copyright(string value);
    public string get_FullName();
    internal void set_FullName(string value);
    public string get_FamilyName();
    internal void set_FamilyName(string value);
    public string get_BaseFontName();
    internal void set_BaseFontName(string value);
    public string get_Weight();
    internal void set_Weight(string value);
    public double get_ItalicAngle();
    internal void set_ItalicAngle(double value);
    public bool get_IsFixedPitch();
    internal void set_IsFixedPitch(bool value);
    public double get_UnderlinePosition();
    internal void set_UnderlinePosition(double value);
    public double get_UnderlineThickness();
    internal void set_UnderlineThickness(double value);
    internal string Serialize();
}
public enum DevExpress.Pdf.Native.PdfType1FontPaintType : Enum {
    public int value__;
    public static PdfType1FontPaintType Invalid;
    public static PdfType1FontPaintType Filled;
    public static PdfType1FontPaintType Stroked;
}
public class DevExpress.Pdf.Native.PdfType1FontPredefinedCharset : PdfType1FontCharset {
    private static Dictionary`2<short, short> isoAdobeCharset;
    private static Dictionary`2<short, short> expertCharset;
    private static Dictionary`2<short, short> expertSubsetCharset;
    private PdfType1FontPredefinedCharsetID id;
    public PdfType1FontPredefinedCharsetID ID { get; }
    public bool IsDefault { get; }
    public int Offset { get; }
    public int DataLength { get; }
    public IDictionary`2<short, short> SidToGidMapping { get; }
    public PdfType1FontPredefinedCharset(PdfType1FontPredefinedCharsetID id);
    private static PdfType1FontPredefinedCharset();
    public PdfType1FontPredefinedCharsetID get_ID();
    public virtual bool get_IsDefault();
    public virtual int get_Offset();
    public virtual int get_DataLength();
    public virtual IDictionary`2<short, short> get_SidToGidMapping();
    public virtual void Write(PdfBinaryStream stream);
}
public enum DevExpress.Pdf.Native.PdfType1FontPredefinedCharsetID : Enum {
    public int value__;
    public static PdfType1FontPredefinedCharsetID ISOAdobe;
    public static PdfType1FontPredefinedCharsetID Expert;
    public static PdfType1FontPredefinedCharsetID ExpertSubset;
}
public class DevExpress.Pdf.Native.PdfType1FontPredefinedEncoding : PdfType1FontEncoding {
    private static SortedList`2<byte, string> standardEncoding;
    private static SortedList`2<byte, string> expertEncoding;
    private PdfType1FontPredefinedEncodingID id;
    public static IDictionary`2<byte, string> StandardEncoding { get; }
    public PdfType1FontPredefinedEncodingID ID { get; }
    public bool IsDefault { get; }
    public int Offset { get; }
    public int DataLength { get; }
    public PdfType1FontPredefinedEncoding(PdfType1FontPredefinedEncodingID id);
    private static PdfType1FontPredefinedEncoding();
    public static IDictionary`2<byte, string> get_StandardEncoding();
    public PdfType1FontPredefinedEncodingID get_ID();
    public virtual bool get_IsDefault();
    public virtual int get_Offset();
    public virtual int get_DataLength();
    public virtual Int16[] GetCodeToGIDMapping(PdfType1FontCharset charset, PdfCompactFontFormatStringIndex stringIndex);
}
public enum DevExpress.Pdf.Native.PdfType1FontPredefinedEncodingID : Enum {
    public int value__;
    public static PdfType1FontPredefinedEncodingID StandardEncoding;
    public static PdfType1FontPredefinedEncodingID ExpertEncoding;
}
public abstract class DevExpress.Pdf.Native.PdfType1FontPrivateData : object {
    public static double DefaultBlueScale;
    public static double DefaultBlueShift;
    public static int DefaultLanguageGroup;
    public static double DefaultExpansionFactor;
    private PdfType1FontGlyphZone[] blueValues;
    private PdfType1FontGlyphZone[] otherBlues;
    private PdfType1FontGlyphZone[] familyBlues;
    private PdfType1FontGlyphZone[] familyOtherBlues;
    private double blueScale;
    private double blueShift;
    private int blueFuzz;
    private Nullable`1<double> stdHW;
    private Nullable`1<double> stdVW;
    private Double[] stemSnapH;
    private Double[] stemSnapV;
    private bool forceBold;
    private Nullable`1<double> forceBoldThreshold;
    private int languageGroup;
    private double expansionFactor;
    public PdfType1FontGlyphZone[] BlueValues { get; internal set; }
    public PdfType1FontGlyphZone[] OtherBlues { get; internal set; }
    public PdfType1FontGlyphZone[] FamilyBlues { get; internal set; }
    public PdfType1FontGlyphZone[] FamilyOtherBlues { get; internal set; }
    public double BlueScale { get; internal set; }
    public double BlueShift { get; internal set; }
    public int BlueFuzz { get; internal set; }
    public Nullable`1<double> StdHW { get; internal set; }
    public Nullable`1<double> StdVW { get; internal set; }
    public Double[] StemSnapH { get; internal set; }
    public Double[] StemSnapV { get; internal set; }
    public bool ForceBold { get; internal set; }
    public Nullable`1<double> ForceBoldThreshold { get; internal set; }
    public int LanguageGroup { get; internal set; }
    public double ExpansionFactor { get; internal set; }
    private static bool IsInvalidStemSnap(Double[] stemSnap);
    private static bool IsInvalidBlueValues(PdfType1FontGlyphZone[] blueValues);
    private static bool IsInvalidOtherBlues(PdfType1FontGlyphZone[] otherBlues);
    public PdfType1FontGlyphZone[] get_BlueValues();
    internal void set_BlueValues(PdfType1FontGlyphZone[] value);
    public PdfType1FontGlyphZone[] get_OtherBlues();
    internal void set_OtherBlues(PdfType1FontGlyphZone[] value);
    public PdfType1FontGlyphZone[] get_FamilyBlues();
    internal void set_FamilyBlues(PdfType1FontGlyphZone[] value);
    public PdfType1FontGlyphZone[] get_FamilyOtherBlues();
    internal void set_FamilyOtherBlues(PdfType1FontGlyphZone[] value);
    public double get_BlueScale();
    internal void set_BlueScale(double value);
    public double get_BlueShift();
    internal void set_BlueShift(double value);
    public int get_BlueFuzz();
    internal void set_BlueFuzz(int value);
    public Nullable`1<double> get_StdHW();
    internal void set_StdHW(Nullable`1<double> value);
    public Nullable`1<double> get_StdVW();
    internal void set_StdVW(Nullable`1<double> value);
    public Double[] get_StemSnapH();
    internal void set_StemSnapH(Double[] value);
    public Double[] get_StemSnapV();
    internal void set_StemSnapV(Double[] value);
    public bool get_ForceBold();
    internal void set_ForceBold(bool value);
    public Nullable`1<double> get_ForceBoldThreshold();
    internal void set_ForceBoldThreshold(Nullable`1<double> value);
    public int get_LanguageGroup();
    internal void set_LanguageGroup(int value);
    public double get_ExpansionFactor();
    internal void set_ExpansionFactor(double value);
    protected void Validate();
    protected internal virtual bool Patch();
}
public abstract class DevExpress.Pdf.Native.PdfType1FontProgram : object {
    public static int DefaultUniqueID;
    public static double DefaultStrokeWidth;
    internal static Byte[] EmptyCharstring;
    private string fontName;
    private PdfType1FontInfo fontInfo;
    private PdfType1FontPaintType paintType;
    private PdfTransformationMatrix fontMatrix;
    private PdfRectangle fontBBox;
    private int uniqueID;
    private double strokeWidth;
    public string FontName { get; protected set; }
    public PdfType1FontInfo FontInfo { get; public set; }
    public PdfType1FontPaintType PaintType { get; internal set; }
    public PdfTransformationMatrix FontMatrix { get; internal set; }
    public PdfRectangle FontBBox { get; internal set; }
    public int UniqueID { get; internal set; }
    public double StrokeWidth { get; internal set; }
    public PdfType1FontType FontType { get; }
    private static PdfType1FontProgram();
    private static PdfType1GlyphDescription ParseDescription(PdfType1FontClassicCIDFontPrivateData p, Byte[] charstring);
    private static Byte[] ConvertCharstring(PdfType1FontClassicCIDFontPrivateData p, Byte[] ch);
    private static PdfType1FontCompactFontPrivateData ConvertPrivate(PdfType1FontClassicCIDFontPrivateData privateData);
    private static Byte[] ConvertType1CIDToCFF(string fontName, Byte[] fontData);
    private static Byte[] ConvertType1ToCFF(string fontName, PdfType1FontFileData fontFileData);
    public static Byte[] ConvertToCFF(string fontName, PdfType1FontFileData file);
    public string get_FontName();
    protected void set_FontName(string value);
    public PdfType1FontInfo get_FontInfo();
    public void set_FontInfo(PdfType1FontInfo value);
    public PdfType1FontPaintType get_PaintType();
    internal void set_PaintType(PdfType1FontPaintType value);
    public PdfTransformationMatrix get_FontMatrix();
    internal void set_FontMatrix(PdfTransformationMatrix value);
    public PdfRectangle get_FontBBox();
    internal void set_FontBBox(PdfRectangle value);
    public int get_UniqueID();
    internal void set_UniqueID(int value);
    public double get_StrokeWidth();
    internal void set_StrokeWidth(double value);
    public abstract virtual PdfType1FontType get_FontType();
    public abstract virtual IPdfCodePointMapping GetSimpleMapping(PdfSimpleFontEncoding fontEncoding);
    public virtual IPdfCodePointMapping GetCompositeMapping(Int16[] cidToGidMap);
}
public class DevExpress.Pdf.Native.PdfType1FontProgramFacade : PdfFontProgramFacade {
    [CompilerGeneratedAttribute]
private PdfType1FontFileData <Data>k__BackingField;
    public PdfType1FontFileData Data { get; private set; }
    private PdfType1FontProgramFacade(PdfRectangle fontBBox, IPdfCodePointMapping mapping);
    private static PdfType1FontProgramFacade Create(PdfFont font, PdfType1FontFileData fontFileData, Func`2<PdfType1FontProgram, IPdfCodePointMapping> createMapping);
    public static PdfType1FontProgramFacade Create(PdfSimpleFont font, PdfType1FontFileData fontFileData);
    public static PdfType1FontProgramFacade Create(PdfType0Font font, PdfType1FontFileData fontFileData);
    [CompilerGeneratedAttribute]
public PdfType1FontFileData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(PdfType1FontFileData value);
}
public class DevExpress.Pdf.Native.PdfType1FontRangeEncoding : PdfType1FontCustomEncoding {
    internal static byte Id;
    private Range[] ranges;
    protected byte EncodingID { get; }
    protected Int16[] CodeToGIDMapping { get; }
    public int DataLength { get; }
    public PdfType1FontRangeEncoding(PdfBinaryStream stream);
    protected virtual byte get_EncodingID();
    protected virtual Int16[] get_CodeToGIDMapping();
    public virtual int get_DataLength();
    protected virtual void WriteEncodingData(PdfBinaryStream stream);
}
public enum DevExpress.Pdf.Native.PdfType1FontType : Enum {
    public int value__;
    public static PdfType1FontType Invalid;
    public static PdfType1FontType Type1;
    public static PdfType1FontType Type2;
}
internal enum DevExpress.Pdf.Native.PdfType1FontWMode : Enum {
    public int value__;
    public static PdfType1FontWMode Horizontal;
    public static PdfType1FontWMode Vertical;
}
public class DevExpress.Pdf.Native.PdfType1FontWordRangeCharset : PdfType1FontCharset {
    internal static byte Id;
    private List`1<Range> ranges;
    private Dictionary`2<short, short> cidToGidMapping;
    public IDictionary`2<short, short> SidToGidMapping { get; }
    public int DataLength { get; }
    public PdfType1FontWordRangeCharset(PdfBinaryStream stream, int size);
    public virtual IDictionary`2<short, short> get_SidToGidMapping();
    public virtual int get_DataLength();
    public virtual void Write(PdfBinaryStream stream);
}
public class DevExpress.Pdf.Native.PdfType1GlyphDescription : object {
    private IList`1<PdfType1GlyphSubpath> subpaths;
    private PdfType1GlyphSubpath currentSubpath;
    private IList`1<PdfPoint> flexOperators;
    private PdfPoint flexPoint;
    private bool flexDetectionStarted;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <Sidebearing>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfType1StandardAccentedGlyphInfo <SeacInfo>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public PdfPoint Sidebearing { get; public set; }
    public PdfType1StandardAccentedGlyphInfo SeacInfo { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public PdfPoint get_Sidebearing();
    [CompilerGeneratedAttribute]
public void set_Sidebearing(PdfPoint value);
    [CompilerGeneratedAttribute]
public PdfType1StandardAccentedGlyphInfo get_SeacInfo();
    [CompilerGeneratedAttribute]
public void set_SeacInfo(PdfType1StandardAccentedGlyphInfo value);
    public void CreateNewSubpath();
    public void AddLineTo(double dx, double dy);
    public void AddMoveTo(double dx, double dy);
    public void AddRRCurveTo(double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
    public void AddCallothersubrMark(int otherSubrIndex, IList`1<object> otherSubrParams);
    public Byte[] ConvertToType2Charstring(IDictionary`2<string, PdfType1GlyphDescription> fontGlyphDescriptions);
    private PdfType1GlyphDescription GetStandardEncodingGlyph(int code, IDictionary`2<string, PdfType1GlyphDescription> fontGlyphDescriptions);
    private PdfPoint AppendSubpaths(PdfType2CharstringBinaryWriter charstringStream, IDictionary`2<string, PdfType1GlyphDescription> fontGlyphDescriptions, PdfPoint currentPoint);
    private void ClearFlexDetection();
}
public class DevExpress.Pdf.Native.PdfType1GlyphDescriptionParser : PdfType1CharstringInterpreter {
    private IList`1<PdfType1CharstringSubroutine> fontSubroutines;
    private PdfType1GlyphDescription glyphDescription;
    public PdfType1GlyphDescription GlyphDescription { get; }
    public PdfType1GlyphDescriptionParser(IList`1<PdfType1CharstringSubroutine> fontSubroutines);
    internal static PdfType1GlyphDescription ParseDescription(PdfType1FontClassicFontProgram program, Byte[] charstring);
    public PdfType1GlyphDescription get_GlyphDescription();
    public virtual void CallSubr(int index);
    public virtual void CallGlobalSubr(int index);
    public virtual void ClosePath();
    public virtual void RelativeLineTo(double dx, double dy);
    public virtual void RelativeMoveTo(double dx, double dy);
    protected virtual void CallOtherSubr(int index, IList`1<object> parameters);
    public virtual void RelativeCurveTo(double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
    public virtual void SetSidebearing(double sbx, double sby, double wx, double wy);
    public virtual void Seac(double asb, double adx, double ady, int bchar, int achar);
}
public class DevExpress.Pdf.Native.PdfType1GlyphPathSegment : ValueType {
    private IList`1<PdfPoint> points;
    private byte code;
    private PdfType1GlyphPathSegment(IList`1<PdfPoint> points, byte code);
    public static PdfType1GlyphPathSegment CreateLineTo(double dx, double dy);
    public static PdfType1GlyphPathSegment CreateMoveTo(double dx, double dy);
    public static PdfType1GlyphPathSegment CreateCurveTo(double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
    public static PdfType1GlyphPathSegment CreateFlexSegment(IList`1<PdfPoint> flexPoints);
    public void Write(PdfType2CharstringBinaryWriter stream, IDictionary`2<string, PdfType1GlyphDescription> fontGlyphDescriptions);
    public PdfPoint MovePoint(PdfPoint point);
}
public class DevExpress.Pdf.Native.PdfType1GlyphSubpath : object {
    private IList`1<PdfType1GlyphPathSegment> segments;
    public bool IsEmpty { get; }
    public bool get_IsEmpty();
    public void Add(PdfType1GlyphPathSegment segment);
    public void Write(PdfType2CharstringBinaryWriter stream, IDictionary`2<string, PdfType1GlyphDescription> fontGlyphDescriptions);
    public PdfPoint MovePoint(PdfPoint point);
}
internal enum DevExpress.Pdf.Native.PdfType1SingleByteCharstringOperatorCode : Enum {
    public byte value__;
    public static PdfType1SingleByteCharstringOperatorCode HStem;
    public static PdfType1SingleByteCharstringOperatorCode VStem;
    public static PdfType1SingleByteCharstringOperatorCode VMoveTo;
    public static PdfType1SingleByteCharstringOperatorCode RLineTo;
    public static PdfType1SingleByteCharstringOperatorCode HLineTo;
    public static PdfType1SingleByteCharstringOperatorCode VLineTo;
    public static PdfType1SingleByteCharstringOperatorCode RRCurveTo;
    public static PdfType1SingleByteCharstringOperatorCode ClosePath;
    public static PdfType1SingleByteCharstringOperatorCode CallSubr;
    public static PdfType1SingleByteCharstringOperatorCode Return;
    public static PdfType1SingleByteCharstringOperatorCode Escape;
    public static PdfType1SingleByteCharstringOperatorCode Hsbw;
    public static PdfType1SingleByteCharstringOperatorCode EndChar;
    public static PdfType1SingleByteCharstringOperatorCode RMoveTo;
    public static PdfType1SingleByteCharstringOperatorCode HMoveTo;
    public static PdfType1SingleByteCharstringOperatorCode CallGlobalSubr;
    public static PdfType1SingleByteCharstringOperatorCode VHCurveTo;
    public static PdfType1SingleByteCharstringOperatorCode HVCurveTo;
}
public class DevExpress.Pdf.Native.PdfType1StandardAccentedGlyphInfo : object {
    private int baseGlyph;
    private int accentGlyph;
    private PdfPoint accentDelta;
    private double accentSidebearing;
    public int BaseGlyph { get; }
    public int AccentGlyph { get; }
    public PdfPoint AccentDelta { get; }
    public double AccentSidebearing { get; }
    public PdfType1StandardAccentedGlyphInfo(int baseGlyph, int accentGlyph, PdfPoint accentDelta, double accentSidebearing);
    public int get_BaseGlyph();
    public int get_AccentGlyph();
    public PdfPoint get_AccentDelta();
    public double get_AccentSidebearing();
}
public class DevExpress.Pdf.Native.PdfType2CharstringBinaryWriter : object {
    private PdfBinaryStream binaryStream;
    public Byte[] Data { get; }
    public Byte[] get_Data();
    public void WriteByte(byte b);
    public void WritePoint(PdfPoint point);
    public void WriteDouble(double value);
    public void WriteInt(int value);
    public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfType2CharstringParser : PdfType1CharstringParser {
    private PdfType2CharstringParser(Byte[] charstring);
    public static IList`1<IPdfType1CharstringToken> ParseType2(Byte[] charstring);
    protected virtual IPdfType1CharstringToken CreateSingleByteOperator(byte code);
    protected virtual IPdfType1CharstringToken ParseFourByteOperand();
}
public class DevExpress.Pdf.Native.PdfType3FontContentStreamParser : PdfContentStreamParser {
    protected bool IsType3FontParser { get; }
    private PdfType3FontContentStreamParser(PdfResources resources, Byte[] bytes);
    public static PdfCommandList ParseGlyph(PdfResources resources, Byte[] data);
    protected virtual bool get_IsType3FontParser();
}
public class DevExpress.Pdf.Native.PdfType3FontGlyph : object {
    private PdfCommandList commands;
    private Nullable`1<bool> isSafeForCaching;
    public PdfCommandList Commands { get; }
    public bool IsSafeForCaching { get; }
    public PdfType3FontGlyph(PdfCommandList commands);
    public PdfCommandList get_Commands();
    public bool get_IsSafeForCaching();
}
internal enum DevExpress.Pdf.Native.PdfTypeTwoByteCharstringOperatorCode : Enum {
    public byte value__;
    public static PdfTypeTwoByteCharstringOperatorCode DotSection;
    public static PdfTypeTwoByteCharstringOperatorCode VStem3;
    public static PdfTypeTwoByteCharstringOperatorCode HStem;
    public static PdfTypeTwoByteCharstringOperatorCode Seac;
    public static PdfTypeTwoByteCharstringOperatorCode Sbw;
    public static PdfTypeTwoByteCharstringOperatorCode Div;
    public static PdfTypeTwoByteCharstringOperatorCode CallOtherSubr;
    public static PdfTypeTwoByteCharstringOperatorCode Pop;
    public static PdfTypeTwoByteCharstringOperatorCode SetCurrentPoint;
}
public enum DevExpress.Pdf.Native.PdfUACompatibility : Enum {
    public int value__;
    public static PdfUACompatibility None;
    public static PdfUACompatibility PdfUA1;
}
public abstract class DevExpress.Pdf.Native.PdfUnclosedPathAnnotationState`1 : PdfPathAnnotationState`1<T> {
    private T annotation;
    public PdfAnnotationLineEndingStyle StartLineEnding { get; public set; }
    public PdfAnnotationLineEndingStyle FinishLineEnding { get; public set; }
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    public PdfUnclosedPathAnnotationState`1(PdfPageState pageState, T annotation);
    public sealed virtual PdfAnnotationLineEndingStyle get_StartLineEnding();
    public sealed virtual void set_StartLineEnding(PdfAnnotationLineEndingStyle value);
    public sealed virtual PdfAnnotationLineEndingStyle get_FinishLineEnding();
    public sealed virtual void set_FinishLineEnding(PdfAnnotationLineEndingStyle value);
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
}
public class DevExpress.Pdf.Native.PdfUnencryptedDataToken : object {
    private Byte[] data;
    public PdfUnencryptedDataToken(Byte[] data);
    public sealed virtual void Write(PdfDocumentStream stream, int number);
}
public static class DevExpress.Pdf.Native.PdfUnicodeConverter : object {
    internal static Dictionary`2<string, ushort> GlyphCodes;
    private static HashSet`1<string> excludedGlyphNames;
    private static IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) glyphNames;
    private static Regex uniRegex;
    private static IDictionary`2<ushort, string> GlyphNames { get; }
    private static PdfUnicodeConverter();
    private static IDictionary`2<ushort, string> get_GlyphNames();
    internal static short GetGlyphCode(short str, PdfSimpleFontEncoding encoding);
    internal static bool TryGetGlyphCode(string glyphName, Int16& glyphCode);
    internal static string GetGlyphName(short glyphCode);
}
public class DevExpress.Pdf.Native.PdfUniscribeGlyphRun : object {
    private static double pdfDPI;
    private Int32[] glyphIndices;
    private Int32[] glyphPositions;
    private Int32[] order;
    private double dpiScale;
    private bool shouldProcessVerticalOffset;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public PdfUniscribeGlyphRun(string text, Int32[] glyphIndices, Int32[] glyphPositions, Int32[] order, double contextDPI, double fontSize, bool shouldProcessVerticalOffset);
    private static bool IsWritingOrderControl(char c);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual IList`1<DXCluster> GetClusters();
}
public class DevExpress.Pdf.Native.PdfUnsignedDocumentStream : Stream {
    private PdfDocumentStream stream;
    private long skipOffset;
    private int skipLength;
    private long skipEnd;
    private long initialPosition;
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PdfUnsignedDocumentStream(PdfDocumentStream stream, long skipOffset, int skipLength);
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual void SetLength(long value);
}
public class DevExpress.Pdf.Native.PdfUsageRightsSignatureTransformMethod : PdfSignatureTransformMethod {
    private bool allowFullSave;
    private string message;
    private IList`1<PdfAnnotationUsageRight> annotationUsageRights;
    private IList`1<PdfInteractiveFormFieldUsageRight> interactiveFormFieldUsageRights;
    private bool allowModifySignature;
    private IList`1<PdfEmbeddedFileUsageRight> embeddedFileUsageRights;
    private bool restrictOtherPermissions;
    public bool AllowFullSave { get; }
    public string Message { get; }
    public IList`1<PdfAnnotationUsageRight> AnnotationUsageRights { get; }
    public IList`1<PdfInteractiveFormFieldUsageRight> InteractiveFormFieldUsageRights { get; }
    public bool AllowModifySignature { get; }
    public IList`1<PdfEmbeddedFileUsageRight> EmbeddedFileUsageRights { get; }
    public bool RestrictOtherPermissions { get; }
    protected string ValidVersion { get; }
    public PdfUsageRightsSignatureTransformMethod(PdfReaderDictionary dictionary);
    private static bool ParseSinglePermission(PdfReaderDictionary dictionary, string key, string expectedValue);
    private static T ConvertToEnum(object value);
    public bool get_AllowFullSave();
    public string get_Message();
    public IList`1<PdfAnnotationUsageRight> get_AnnotationUsageRights();
    public IList`1<PdfInteractiveFormFieldUsageRight> get_InteractiveFormFieldUsageRights();
    public bool get_AllowModifySignature();
    public IList`1<PdfEmbeddedFileUsageRight> get_EmbeddedFileUsageRights();
    public bool get_RestrictOtherPermissions();
    protected virtual string get_ValidVersion();
}
public class DevExpress.Pdf.Native.PdfValidationLogger : object {
    private List`1<Error> errors;
    public IList`1<Error> ValidationErrors { get; }
    public IList`1<Error> get_ValidationErrors();
    public sealed virtual void LogValidationError(int objectNumber, int objectGeneration, string message);
}
public class DevExpress.Pdf.Native.PdfVerticalGlyphMetrics : ValueType {
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <Displacement>k__BackingField;
    public double Height { get; }
    public PdfPoint Displacement { get; }
    public PdfVerticalGlyphMetrics(double width, PdfPoint displacement);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public PdfPoint get_Displacement();
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Native.PdfViewerBookmarkCollection : object {
    private List`1<PdfViewerBookmark> bookmarks;
    public PdfViewerBookmark Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    private object System.Collections.IList.Item { get; private set; }
    public PdfViewerBookmarkCollection(PdfOutlineItem outlines);
    public sealed virtual PdfViewerBookmark get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual IEnumerator`1<PdfViewerBookmark> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void Clear();
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void CopyTo(Array array, int index);
}
public enum DevExpress.Pdf.Native.PdfViewerTool : Enum {
    public int value__;
    public static PdfViewerTool Hand;
    public static PdfViewerTool Selection;
    public static PdfViewerTool MarqueeZoom;
    public static PdfViewerTool HighlightText;
    public static PdfViewerTool StrikethroughText;
    public static PdfViewerTool UnderlineText;
    public static PdfViewerTool StickyNote;
}
public abstract class DevExpress.Pdf.Native.PdfVisitorBasedFactory`2 : object {
    private TOutput result;
    protected void SetResult(TOutput result);
    protected abstract virtual void Visit(TInput input);
    public TOutput Create(TInput input);
}
public class DevExpress.Pdf.Native.PdfWICBitmapSource : ComCallableWrapperBase {
    private IPdfImageScanlineSource source;
    private Guid pixelFormat;
    private int width;
    private int height;
    private Byte[] scanline;
    private Int32[] palette;
    private int horizontalOffset;
    private bool sharedSource;
    public IntPtr NativeObject { get; }
    private PdfWICBitmapSource(IPdfImageScanlineSource source, int width, int height, Int32[] palette);
    private PdfWICBitmapSource(IPdfImageScanlineSource source, Guid pixelFormat, int width, int height);
    private PdfWICBitmapSource(IPdfImageScanlineSource source, Guid pixelFormat, int width, int height, int sourceWidth, int horizontalOffset, int verticalOffset, bool sharedSource);
    public static CCWWrapper`1<PdfWICBitmapSource> Create(IPdfImageScanlineSource source, int width, int height, Int32[] palette);
    public static CCWWrapper`1<PdfWICBitmapSource> Create(IPdfImageScanlineSource source, Guid pixelFormat, int width, int height);
    public static CCWWrapper`1<PdfWICBitmapSource> Create(IPdfImageScanlineSource source, Guid pixelFormat, int width, int height, int sourceWidth, int horizontalOffset, int verticalOffset);
    public static CCWWrapper`1<PdfWICBitmapSource> Create(IPdfImageScanlineSource source, Guid pixelFormat, int width, int height, int sourceWidth, int horizontalOffset, int verticalOffset, bool sharedSource);
    public sealed virtual IntPtr get_NativeObject();
    public sealed virtual int GetSize(Int32& width, Int32& height);
    public sealed virtual int GetPixelFormat(Guid& pixelFormat);
    public sealed virtual int GetResolution(Double& dpiX, Double& dpiY);
    [SecuritySafeCriticalAttribute]
public sealed virtual int CopyPalette(IntPtr palette);
    [SecuritySafeCriticalAttribute]
public sealed virtual int CopyPixels(WICRect& prc, int stride, int bufferSize, IntPtr buffer);
    protected virtual void FreeResources();
}
public class DevExpress.Pdf.Native.PdfWICDCTDecoderFactory : object {
    public sealed virtual IPdfImageScanlineSource CreateSource(Byte[] imageData, PdfImage image);
}
public class DevExpress.Pdf.Native.PdfWICImageInterpolator : object {
    private CCWWrapper`1<PdfWICBitmapSource> source;
    private int targetWidth;
    private IPdfImageScanlineSource scanlineSource;
    private WICBitmapScaler scaler;
    private WICFormatConverter formatConverter;
    private int currentY;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    [SecuritySafeCriticalAttribute]
public PdfWICImageInterpolator(IPdfImageScanlineSource scanlineSource, int targetWidth, int targetHeight, int sourceWidth, int sourceHeight, WICImagingFactory factory, bool shouldInterpolate);
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    [SecuritySafeCriticalAttribute]
public sealed virtual void FillNextScanline(Byte[] scanlineData);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfWICIndexedImageScanlineSource : object {
    private static int alphaMask;
    private static Guid WICPixelFormat24bppRGB;
    private int width;
    private CCWWrapper`1<PdfWICBitmapSource> bitmapSource;
    private WICFormatConverter converter;
    private WICPalette palette;
    private int currentY;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    [SecuritySafeCriticalAttribute]
public PdfWICIndexedImageScanlineSource(WICImagingFactory factory, IPdfImageScanlineSource source, int width, int height, int bitsPerComponent, Byte[] lookupTable);
    private static PdfWICIndexedImageScanlineSource();
    public sealed virtual int get_ComponentsCount();
    public sealed virtual bool get_HasAlpha();
    [SecuritySafeCriticalAttribute]
public sealed virtual void FillNextScanline(Byte[] scanlineData);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
}
public class DevExpress.Pdf.Native.PdfWICJpegColorKeyedScanlineSource : PdfWICJpegScanlineSource {
    private Byte[] buffer;
    private PdfByteAlignedImageScanlineDecoder decoder;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    public PdfWICJpegColorKeyedScanlineSource(PdfImage image, WICBitmapSource bitmap, bool isYCCK);
    public virtual int get_ComponentsCount();
    public virtual bool get_HasAlpha();
    public virtual void FillNextScanline(Byte[] scanlineData);
}
public class DevExpress.Pdf.Native.PdfWICJpegScanlineSource : object {
    private WICBitmapSource bitmap;
    private int width;
    private int componentsCount;
    private bool isYCCK;
    private int column;
    public int ComponentsCount { get; }
    public bool HasAlpha { get; }
    protected PdfWICJpegScanlineSource(PdfImage image, WICBitmapSource bitmap, bool isYCCK);
    public static IPdfImageScanlineSource CreateScanlineSource(PdfImage image, Byte[] data);
    private static IPdfImageScanlineSource CreateScanlineSource(PdfImage image, WICBitmapSource bitmap, bool isYCCK);
    private static IPdfImageScanlineSource CreateScanlineSourceCore(PdfImage image, Byte[] data);
    public virtual int get_ComponentsCount();
    public virtual bool get_HasAlpha();
    public sealed virtual void Dispose();
    public virtual void FillNextScanline(Byte[] scanlineData);
}
public class DevExpress.Pdf.Native.PdfWICScanlineSourceFactory : object {
    private PdfDefaultScanlineSourceFactory defaultFactory;
    private WICImagingFactory factory;
    public sealed virtual IPdfImageScanlineSource CreateInterpolator(IPdfImageScanlineSource source, int targetWidth, int targetHeight, int sourceWidth, int sourceHeight, bool shouldInterpolate);
    public sealed virtual IPdfImageScanlineSource CreateIndexedScanlineSource(IPdfImageScanlineSource source, int width, int height, int bitsPerComponent, Byte[] lookupTable, int baseColorSpaceComponentsCount);
}
public abstract class DevExpress.Pdf.Native.PdfWidgetAnnotationAppearanceBuilder`1 : PdfAnnotationAppearanceBuilder`1<PdfWidgetAnnotation> {
    private double borderWidth;
    private T formField;
    [CompilerGeneratedAttribute]
private PdfRgbaColor <CustomBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <ContentRectangle>k__BackingField;
    public PdfRgbaColor CustomBackgroundColor { get; public set; }
    protected T FormField { get; }
    protected double BorderWidth { get; }
    protected PdfRgbaColor BackgroundColor { get; }
    protected PdfRectangle ContentRectangle { get; }
    protected PdfWidgetAnnotationAppearanceBuilder`1(PdfWidgetAnnotation widget, T formField);
    [CompilerGeneratedAttribute]
public PdfRgbaColor get_CustomBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_CustomBackgroundColor(PdfRgbaColor value);
    protected T get_FormField();
    protected double get_BorderWidth();
    protected virtual PdfRgbaColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
protected PdfRectangle get_ContentRectangle();
    protected virtual PdfRectangle GetAppearanceContentRectangle();
    protected virtual void RebuildAppearance(PdfFormCommandConstructor constructor);
    protected virtual PdfTransformationMatrix CreateFormMatrix();
    protected void FillBackgroundRectangle(PdfFormCommandConstructor constructor, PdfRectangle rect);
    protected void FillBackgroundEllipse(PdfFormCommandConstructor constructor, PdfRectangle rect);
    protected void DrawTextCombs(PdfFormCommandConstructor constructor, PdfRectangle contentRectangle, int maxLen);
    protected void DrawBorder(PdfFormCommandConstructor constructor);
    protected void DrawRectangularBorderStroke(PdfFormCommandConstructor constructor);
    protected void DrawRectangularInsetBorder(PdfFormCommandConstructor constructor);
    protected void DrawRectangularBeveledBorder(PdfFormCommandConstructor constructor);
    protected void DrawRectangularUnderlineBorder(PdfFormCommandConstructor constructor);
    private void DrawRectangularBorderUpperLeftStroke(PdfFormCommandConstructor constructor);
    private void DrawRectangularBorderBottomRightStroke(PdfFormCommandConstructor constructor);
    private void SetNonStrokingColor(PdfRgbaColor color, PdfFormCommandConstructor constructor);
    protected abstract virtual void DrawContent(PdfFormCommandConstructor constructor);
    protected abstract virtual void FillBackground(PdfFormCommandConstructor constructor);
    protected abstract virtual void DrawSolidBorder(PdfFormCommandConstructor constructor);
    protected abstract virtual void DrawInsetBorder(PdfFormCommandConstructor constructor);
    protected abstract virtual void DrawBeveledBorder(PdfFormCommandConstructor constructor);
    protected abstract virtual void DrawUnderlineBorder(PdfFormCommandConstructor constructor);
}
public class DevExpress.Pdf.Native.PdfWidgetAnnotationBuilder : PdfAnnotationBuilder {
    private PdfAnnotationBorderStyleBuilder borderStyleBuilder;
    private PdfWidgetAppearanceCharacteristicsBuilder appearanceCharacteristicsBuilder;
    private PdfAnnotationBorderStyleBuilder BorderStyleBuilder { get; }
    private PdfWidgetAppearanceCharacteristicsBuilder AppearanceCharacteristicsBuilder { get; }
    public PdfWidgetAnnotationBuilder(PdfRectangle rect);
    private PdfAnnotationBorderStyleBuilder get_BorderStyleBuilder();
    private PdfWidgetAppearanceCharacteristicsBuilder get_AppearanceCharacteristicsBuilder();
    public PdfWidgetAnnotationBuilder SetAppearance(PdfAcroFormFieldAppearance appearance);
    public PdfWidgetAnnotationBuilder SetButtonStyle(PdfAcroFormButtonStyle buttonStyle);
    public PdfWidgetAnnotationBuilder SetRotation(PdfAcroFormFieldRotation rotation);
    public PdfWidgetAnnotationBuilder SetTextPosition(PdfWidgetAnnotationTextPosition textPosition);
    public PdfWidgetAnnotationBuilder SetIconFit(PdfIconFitBuilder iconFitBuilder);
    public PdfWidgetAnnotationBuilder SetNormalIcon(PdfXObject normalIcon);
    public sealed virtual PdfAnnotationBorderStyle CreateBorderStyle();
    public sealed virtual PdfWidgetAppearanceCharacteristics CreateAppearanceCharacteristics();
}
public class DevExpress.Pdf.Native.PdfWidgetAnnotationState : PdfAnnotationState`1<PdfWidgetAnnotation> {
    private Lazy`1<PdfInteractiveOperation> interactiveOperation;
    private PdfInteractiveFormField formField;
    private PdfForm highlightedForm;
    private PdfRgbaColor formHighlightColor;
    public PdfExportFontInfo Font { get; }
    public PdfInteractiveFormField FormField { get; }
    public bool ReadOnly { get; }
    public bool SummaryRotationIsZero { get; }
    public int SummaryRotationAngle { get; }
    public PdfInteractiveOperation InteractiveOperation { get; }
    private bool IsEditableFormField { get; }
    public int RotationAngle { get; public set; }
    public string Caption { get; public set; }
    public string AlternateCaption { get; public set; }
    public string RolloverCaption { get; public set; }
    public PdfWidgetAnnotationTextPosition TextPosition { get; public set; }
    public PdfRGBColor BackgroundColor { get; public set; }
    public PdfRGBColor BorderColor { get; public set; }
    public PdfIconScalingCircumstances IconScaleCondition { get; public set; }
    public PdfIconScalingType IconScaleType { get; public set; }
    public double IconHorizontalPosition { get; public set; }
    public double IconVerticalPosition { get; public set; }
    public bool IconFitToAnnotationBounds { get; public set; }
    private IPdfXObjectResourceCache ImageCache { get; }
    protected PdfAnnotationBorderStyle AnnotationBorderStyle { get; protected set; }
    private PdfInteractiveFormField DevExpress.Pdf.Native.IPdfFormFieldProvider.FormField { get; }
    public PdfWidgetAnnotationState(PdfPageState pageState, PdfWidgetAnnotation annotation, PdfInteractiveFormField formField);
    public PdfExportFontInfo get_Font();
    public PdfInteractiveFormField get_FormField();
    public virtual bool get_ReadOnly();
    public bool get_SummaryRotationIsZero();
    public int get_SummaryRotationAngle();
    public PdfInteractiveOperation get_InteractiveOperation();
    private bool get_IsEditableFormField();
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    public string get_Caption();
    public void set_Caption(string value);
    public string get_AlternateCaption();
    public void set_AlternateCaption(string value);
    public string get_RolloverCaption();
    public void set_RolloverCaption(string value);
    public PdfWidgetAnnotationTextPosition get_TextPosition();
    public void set_TextPosition(PdfWidgetAnnotationTextPosition value);
    public PdfRGBColor get_BackgroundColor();
    public void set_BackgroundColor(PdfRGBColor value);
    public PdfRGBColor get_BorderColor();
    public void set_BorderColor(PdfRGBColor value);
    public PdfIconScalingCircumstances get_IconScaleCondition();
    public void set_IconScaleCondition(PdfIconScalingCircumstances value);
    public PdfIconScalingType get_IconScaleType();
    public void set_IconScaleType(PdfIconScalingType value);
    public double get_IconHorizontalPosition();
    public void set_IconHorizontalPosition(double value);
    public double get_IconVerticalPosition();
    public void set_IconVerticalPosition(double value);
    public bool get_IconFitToAnnotationBounds();
    public void set_IconFitToAnnotationBounds(bool value);
    private IPdfXObjectResourceCache get_ImageCache();
    protected virtual PdfAnnotationBorderStyle get_AnnotationBorderStyle();
    protected virtual void set_AnnotationBorderStyle(PdfAnnotationBorderStyle value);
    private T GetIconFitValue(Func`2<PdfIconFit, Nullable`1<T>> getter);
    private PdfIconFit EnsureIconFit();
    private void SetIconFitValue(Action`1<PdfIconFit> setter);
    private T GetAppearanceCharacteristicsValue(Func`2<PdfWidgetAppearanceCharacteristics, Nullable`1<T>> getter);
    private T GetAppearanceCharacteristicsValue(Func`2<PdfWidgetAppearanceCharacteristics, T> getter);
    private PdfWidgetAppearanceCharacteristics EnsureAppearanceCharacteristics();
    private void SetAppearanceCharacteristicsValue(Action`1<PdfWidgetAppearanceCharacteristics> setter);
    public void SetNormalIcon(Byte[] imageData);
    public void SetNormalIcon(Stream stream);
    public void SetAlternateIcon(Byte[] imageData);
    public void SetAlternateIcon(Stream stream);
    public void SetRolloverIcon(Byte[] imageData);
    public void SetRolloverIcon(Stream stream);
    private void OnDocumentStatePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual PdfForm GetDrawingForm(PdfRgbaColor highlight);
    public virtual void Accept(IPdfAnnotationStateVisitor visitor);
    public void SetValue(object value);
    private void OnFormFieldValueChanged(object sender, EventArgs args);
    private bool CompareHighlightColor(PdfRgbaColor highlight);
    private void RebuildHighlightedAppearance(PdfRgbaColor highlight);
    private sealed virtual override PdfInteractiveFormField DevExpress.Pdf.Native.IPdfFormFieldProvider.get_FormField();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfFormFieldProvider.ResetValue();
    private void ResetFormField(PdfInteractiveFormField field);
}
public class DevExpress.Pdf.Native.PdfWidgetAppearanceCharacteristicsBuilder : object {
    [CompilerGeneratedAttribute]
private PdfColor <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfColor <BorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RotationAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfWidgetAnnotationTextPosition <TextPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfXObject <NormalIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfIconFitBuilder <IconFitBuilder>k__BackingField;
    public PdfColor BackgroundColor { get; private set; }
    public PdfColor BorderColor { get; private set; }
    public int RotationAngle { get; private set; }
    public string Caption { get; private set; }
    public PdfWidgetAnnotationTextPosition TextPosition { get; private set; }
    public PdfXObject NormalIcon { get; private set; }
    public PdfIconFitBuilder IconFitBuilder { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual PdfColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
private void set_BackgroundColor(PdfColor value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfColor get_BorderColor();
    [CompilerGeneratedAttribute]
private void set_BorderColor(PdfColor value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RotationAngle();
    [CompilerGeneratedAttribute]
private void set_RotationAngle(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Caption();
    [CompilerGeneratedAttribute]
private void set_Caption(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfWidgetAnnotationTextPosition get_TextPosition();
    [CompilerGeneratedAttribute]
private void set_TextPosition(PdfWidgetAnnotationTextPosition value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfXObject get_NormalIcon();
    [CompilerGeneratedAttribute]
private void set_NormalIcon(PdfXObject value);
    [CompilerGeneratedAttribute]
public sealed virtual PdfIconFitBuilder get_IconFitBuilder();
    [CompilerGeneratedAttribute]
private void set_IconFitBuilder(PdfIconFitBuilder value);
    public PdfWidgetAppearanceCharacteristicsBuilder SetButtonStyle(PdfAcroFormButtonStyle buttonStyle);
    public PdfWidgetAppearanceCharacteristicsBuilder SetAppearance(PdfAcroFormFieldAppearance appearance);
    public PdfWidgetAppearanceCharacteristicsBuilder SetTextPosition(PdfWidgetAnnotationTextPosition textPosition);
    public PdfWidgetAppearanceCharacteristicsBuilder SetNormalIcon(PdfXObject normalIcon);
    public PdfWidgetAppearanceCharacteristicsBuilder SetIconFit(PdfIconFitBuilder iconFitBuilder);
    public PdfWidgetAppearanceCharacteristicsBuilder SetRotation(PdfAcroFormFieldRotation rotation);
    public PdfWidgetAppearanceCharacteristics CreateAppearanceCharacteristics();
}
public class DevExpress.Pdf.Native.PdfWidgetLineFormatterFont : PdfLineFormatterFont {
    private float charSpacing;
    private float wordSpacing;
    private float horizontalScalingFactor;
    public PdfWidgetLineFormatterFont(PdfExportFont font, float size, PdfInteractiveFormFieldTextState textState);
    public virtual IList`1<DXCluster> ShapeText(string text, bool directionRightToLeft, bool useKerning);
}
public class DevExpress.Pdf.Native.PdfWordPart : object {
    private PdfOrientedRectangle rectangle;
    private IList`1<PdfCharacter> characters;
    private string text;
    private bool wordEnded;
    [CompilerGeneratedAttribute]
private int <WordNumber>k__BackingField;
    public int WordNumber { get; public set; }
    public int Length { get; }
    public PdfOrientedRectangle Rectangle { get; }
    public bool WordEnded { get; }
    public int EndWordPosition { get; }
    public string Text { get; }
    public IList`1<PdfCharacter> Characters { get; }
    public bool IsNotEmpty { get; }
    private bool WordHasNonDigitCharacters { get; }
    public bool IsWrapped { get; }
    internal PdfWordPart(PdfOrientedRectangle rectangle, IList`1<PdfCharacter> characters, bool wordEnded);
    [CompilerGeneratedAttribute]
public int get_WordNumber();
    [CompilerGeneratedAttribute]
public void set_WordNumber(int value);
    public int get_Length();
    public PdfOrientedRectangle get_Rectangle();
    public bool get_WordEnded();
    public int get_EndWordPosition();
    public string get_Text();
    public IList`1<PdfCharacter> get_Characters();
    public bool get_IsNotEmpty();
    private bool get_WordHasNonDigitCharacters();
    public bool get_IsWrapped();
    public bool IsSuitable(int wordNumber, int offset);
    private bool CharactersAreEqual(IList`1<PdfCharacter> anotherWordCharacters);
    internal bool Overlaps(PdfWordPart word);
}
public class DevExpress.Pdf.Native.PdfWritableArray : PdfWritableArray`1<object> {
    public PdfWritableArray(IEnumerable`1<object> enumerable);
    public PdfWritableArray(IEnumerable value);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfWritableArray/<GetEnumerable>d__0")]
private static IEnumerable`1<object> GetEnumerable(IEnumerable value);
    protected virtual void WriteItem(PdfDocumentStream documentStream, object value, int number);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Native.PdfWritableArray/<System-Collections-Generic-IEnumerable<System-Object>-GetEnumerator>d__4")]
private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
}
public abstract class DevExpress.Pdf.Native.PdfWritableArray`1 : object {
    private IEnumerable`1<T> value;
    protected PdfWritableArray`1(IEnumerable`1<T> value);
    public sealed virtual void Write(PdfDocumentStream stream, int number);
    public sealed virtual IEnumerator GetEnumerator();
    protected abstract virtual void WriteItem(PdfDocumentStream documentStream, T value, int number);
}
public class DevExpress.Pdf.Native.PdfWritableConvertibleArray`1 : PdfWritableArray`1<object> {
    public PdfWritableConvertibleArray`1(IEnumerable`1<T> value, Func`2<T, object> convert);
    private static IEnumerable`1<object> DoConvert(IEnumerable`1<T> value, Func`2<T, object> convert);
    protected virtual void WriteItem(PdfDocumentStream documentStream, object value, int number);
}
public class DevExpress.Pdf.Native.PdfWritableDoubleArray : PdfWritableArray`1<double> {
    public PdfWritableDoubleArray(IEnumerable`1<double> value);
    public PdfWritableDoubleArray(Double[] value);
    protected virtual void WriteItem(PdfDocumentStream documentStream, double value, int number);
}
public class DevExpress.Pdf.Native.PdfWritableObjectArray : PdfWritableConvertibleArray`1<PdfObject> {
    public PdfWritableObjectArray(IEnumerable`1<PdfObject> value, IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.Native.PdfWritablePointsArray : PdfWritableArray`1<PdfPoint> {
    public PdfWritablePointsArray(IEnumerable`1<PdfPoint> value);
    protected virtual void WriteItem(PdfDocumentStream documentStream, PdfPoint value, int number);
}
public class DevExpress.Pdf.Native.PdfWritableSignatureByteRangeArray : PdfWritableArray`1<PdfSignatureByteRange> {
    public PdfWritableSignatureByteRangeArray(IEnumerable`1<PdfSignatureByteRange> value);
    protected virtual void WriteItem(PdfDocumentStream documentStream, PdfSignatureByteRange value, int number);
}
public class DevExpress.Pdf.Native.PdfWriteDeferredObjectCollection : object {
    private PdfObjectCollection targetCollection;
    private Stack`1<Tuple`2<int, PdfObject>> objectsToWrite;
    private Dictionary`2<IPdfObjectId, int> writtenObjects;
    [CompilerGeneratedAttribute]
private EventHandler ElementWriting;
    public IPdfWritingContext WritingContext { get; }
    public PdfEncryptionInfo EncryptionInfo { get; }
    protected PdfObjectCollection TargetCollection { get; }
    public PdfWriteDeferredObjectCollection(PdfObjectCollection targetCollection);
    [CompilerGeneratedAttribute]
public void add_ElementWriting(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ElementWriting(EventHandler value);
    public sealed virtual IPdfWritingContext get_WritingContext();
    public sealed virtual PdfEncryptionInfo get_EncryptionInfo();
    protected PdfObjectCollection get_TargetCollection();
    public sealed virtual PdfObjectReference AddObjectToWrite(object obj);
    private void RaiseElementWriting();
    public virtual PdfObjectReference AddObject(PdfObject value);
    public sealed virtual PdfObjectReference AddObject(int objectNumber, Func`1<PdfObject> getObject);
    public sealed virtual PdfObjectReference GetSavedObjectReference(PdfIndirectObjectId objectId);
    public void FinalizeWriting();
}
public class DevExpress.Pdf.Native.PdfWriterDictionary : PdfDictionary {
    private IPdfWrittenObjectsCollection objects;
    public IPdfWrittenObjectsCollection Objects { get; }
    public PdfWriterDictionary(IPdfWrittenObjectsCollection objects);
    public IPdfWrittenObjectsCollection get_Objects();
    public void AddObjectOrValue(string key, object value);
    public void Add(string key, object value, object defaultValue);
    public void Add(string key, PdfObject value);
    public void Add(string key, PdfRectangle value);
    public void Add(string key, PdfRectangle value, PdfRectangle defaultValue);
    public void Add(string key, PdfStream value);
    public void Add(string key, PdfWriterStream value);
    public void Add(string key, PdfObject value, PdfObject defaultValue);
    public void Add(string key, PdfColor color);
    public void Add(string key, IEnumerable`1<double> value);
    public void AddIfPresent(string key, object value);
    public void AddNotNullOrEmptyString(string key, string value);
    public void AddLanguage(CultureInfo culture);
    public void AddNullable(string key, Nullable`1<T> value);
    public void AddEnumName(string key, T value, bool useDefaultValue);
    public void AddEnumName(string key, T value);
    public void AddIntent(string key, PdfOptionalContentIntent value);
    public void AddName(string key, string value);
    public void AddName(string key, string value, string defaultValue);
    public void AddStream(string key, string data);
    public void AddRequiredList(string key, IList`1<T> value);
    public void AddList(string key, IList`1<T> value);
    public void AddList(string key, IList`1<T> value, Func`2<T, object> converter);
    public void AddEnumerable(string key, IEnumerable`1<T> value, Func`2<T, object> converter);
    public void AddASCIIString(string key, string value);
    public void AddPDFDocEncodedString(string key, string value);
    private void AddReference(string key, PdfStream value);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.Native.PdfWriterStream : PdfStream {
    public static string BeginStreamMarker;
    public static string EndStreamMarker;
    private PdfWriterDictionary dictionary;
    public PdfWriterStream(PdfWriterDictionary dictionary, Byte[] data);
    public static PdfWriterStream CreateCompressedStream(PdfWriterDictionary dictionary, Byte[] data);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.Native.PdfWritingContext : PdfWritingContextBase {
    public static IPdfWritingContext Instance;
    private Guid collectionId;
    public bool IsCloning { get; }
    public Guid CollectionId { get; }
    private PdfWritingContext(PdfDocumentCatalog documentCatalog);
    public PdfWritingContext(Guid collectionId, PdfDocumentCatalog documentCatalog);
    private static PdfWritingContext();
    public sealed virtual bool get_IsCloning();
    public sealed virtual Guid get_CollectionId();
    public virtual void AddSavedDestinationName(string name);
    public virtual string GetFormFieldName(string currentName);
    public virtual string GetDestinationName(string currentName);
    public virtual PdfName FindColorSpaceName(string resourceName);
    public virtual PdfName FindFontName(string resourceName);
    public virtual PdfName FindGraphicsStateParametersName(string resourceName);
    public virtual PdfName FindPatternName(string resourceName);
    public virtual PdfName FindPropertiesName(string resourceName);
    public virtual PdfName FindShadingName(string resourceName);
    public virtual PdfName FindXObjectName(string resourceName);
    public virtual Nullable`1<PdfDirectObjectId> GetRelatedObjectId(PdfObject value, int number);
}
public class DevExpress.Pdf.Native.PdfWritingContextBase : object {
    private PdfDocumentCatalog documentCatalog;
    public PdfPageTreeNode PagesRootNode { get; }
    public PdfWritingContextBase(PdfDocumentCatalog documentCatalog);
    protected static Nullable`1<PdfDirectObjectId> GetRelatedObjectId(PdfObject value);
    public sealed virtual PdfPageTreeNode get_PagesRootNode();
}
public class DevExpress.Pdf.Native.PdfXObjectResourceDictionary : PdfResourceDictionary`1<PdfXObject> {
    protected string Prefix { get; }
    protected string ResourceKey { get; }
    public PdfXObjectResourceDictionary(PdfResources resources, PdfReaderDictionary resourcesDictionary, PdfXObjectResourceDictionary parentResourceDictionary);
    protected virtual string get_Prefix();
    protected virtual string get_ResourceKey();
    protected virtual PdfXObject CreateResource(object value);
}
public class DevExpress.Pdf.Native.PdfZapfFontFamily : PdfStandardFontFamily {
    private static string family;
    private static PdfVariableGlyphWidthProvider zapfDingbatsWidths;
    private static WidthsProvider widthsProvider;
    private static DescriptorProvider descriptorProvider;
    protected PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> GlyphWidthProvider { get; }
    protected PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> FontDescriptorProvider { get; }
    private static PdfZapfFontFamily();
    protected virtual PdfStandardFontFamilyDataProvider`1<IPdfGlyphWidthProvider> get_GlyphWidthProvider();
    protected virtual PdfStandardFontFamilyDataProvider`1<PdfFontDescriptorData> get_FontDescriptorProvider();
}
public enum DevExpress.Pdf.Native.PngPrediction : Enum {
    public int value__;
    public static PngPrediction None;
    public static PngPrediction Sub;
    public static PngPrediction Up;
    public static PngPrediction Average;
    public static PngPrediction Paeth;
}
internal class DevExpress.Pdf.Native.PolygonBooleanOperationProvider : object {
    private static PolygonBooleanOperationProvider instance;
    public static PolygonBooleanOperationProvider Instance { get; }
    private static PolygonBooleanOperationProvider();
    public static PolygonBooleanOperationProvider get_Instance();
    public sealed virtual PdfGraphicsPolygon Difference(PdfGraphicsPolygon subjectPolygon, PdfGraphicsPolygon clipPolygon);
    public sealed virtual void Dispose();
}
internal interface DevExpress.Pdf.Native.PostScript.IPostScriptComparable {
    public abstract virtual int CompareWith(PostScriptString str);
    public abstract virtual int CompareWith(PostScriptNumber num);
    public abstract virtual int CompareWith(PostScriptObject obj);
}
internal interface DevExpress.Pdf.Native.PostScript.IPostScriptEquatable {
    public abstract virtual bool EqualsTo(PostScriptString str);
    public abstract virtual bool EqualsTo(PostScriptName name);
    public abstract virtual bool EqualsTo(PostScriptNumber num);
    public abstract virtual bool EqualsTo(PostScriptObject obj);
}
internal interface DevExpress.Pdf.Native.PostScript.IPostScriptInterpreter {
    public PostScriptFile CurrentFile { get; }
    public PostScriptStack ExecutionStack { get; }
    public PostScriptStack OperandStack { get; }
    public PostScriptStack`1<PostScriptDictionary> DictionaryStack { get; }
    public PostScriptDictionary FontDirectory { get; }
    public PostScriptDictionary ResourceDirectory { get; }
    public PostScriptDictionary InternalDict { get; }
    public PostScriptDictionary SystemDict { get; }
    public PostScriptDictionary UserDict { get; }
    public PostScriptDictionary GlobalDict { get; }
    public abstract virtual PostScriptFile get_CurrentFile();
    public abstract virtual PostScriptStack get_ExecutionStack();
    public abstract virtual PostScriptStack get_OperandStack();
    public abstract virtual PostScriptStack`1<PostScriptDictionary> get_DictionaryStack();
    public abstract virtual PostScriptDictionary get_FontDirectory();
    public abstract virtual PostScriptDictionary get_ResourceDirectory();
    public abstract virtual PostScriptDictionary get_InternalDict();
    public abstract virtual PostScriptDictionary get_SystemDict();
    public abstract virtual PostScriptDictionary get_UserDict();
    public abstract virtual PostScriptDictionary get_GlobalDict();
    public abstract virtual void ProcessFile(PostScriptFile file);
    public abstract virtual void Reset();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptAbsOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptAddOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Pdf.Native.PostScript.PostScriptArray : PostScriptObject {
    private IList`1<PostScriptObject> list;
    public PostScriptObject Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public PostScriptArray(int length);
    public PostScriptArray(IList`1<PostScriptObject> list);
    public sealed virtual PostScriptObject get_Item(int index);
    public sealed virtual void set_Item(int index, PostScriptObject value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(PostScriptObject item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(PostScriptObject item);
    public sealed virtual void CopyTo(PostScriptObject[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<PostScriptObject> GetEnumerator();
    public sealed virtual int IndexOf(PostScriptObject item);
    public sealed virtual void Insert(int index, PostScriptObject item);
    public sealed virtual bool Remove(PostScriptObject item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual PostScriptObject ConvertToExecutable();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptArrayOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptBeginArray : PostScriptObject {
    public static PostScriptBeginArray Instance;
    private static PostScriptBeginArray();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptBeginDictionary : PostScriptObject {
    public static PostScriptBeginDictionary Instance;
    private static PostScriptBeginDictionary();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptBeginOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptBool : PostScriptValueObject`1<bool> {
    public static PostScriptBool True;
    public static PostScriptBool False;
    private PostScriptBool(bool val);
    private static PostScriptBool();
    public virtual PostScriptObject Not();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptCloseFileOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptCopyOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptCurrentDictOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptCurrentFileOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptCviOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptCvrOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptCvxOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptDefineFontOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptDefOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Pdf.Native.PostScript.PostScriptDictionary : PostScriptObject {
    private List`1<KeyValuePair`2<string, PostScriptObject>> list;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    public PostScriptObject Item { get; }
    public int Count { get; }
    public int MaxLength { get; }
    public PostScriptDictionary(int vmMaxLength);
    public PostScriptObject get_Item(string key);
    public int get_Count();
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    public void Add(string key, Byte[] str);
    public void Add(string key, int num);
    public void Add(string key, double num);
    public void AddName(string key, string name);
    public void Add(string key, string str);
    public void Add(string key, bool b);
    public void Add(string key, PostScriptObject value);
    public void Clear();
    public bool ContainsKey(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, PostScriptObject>> GetEnumerator();
    public bool Remove(string key);
    public bool TryGetValue(string key, PostScriptObject& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptDictOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptDivOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptDtransformOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptDupOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptEExecOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptEndArray : PostScriptObject {
    public static PostScriptEndArray Instance;
    private static PostScriptEndArray();
    public virtual void DirectExecute(IPostScriptInterpreter psContext);
    public virtual void IndirectExecute(IPostScriptInterpreter psInterpreter);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptEndDictionary : PostScriptObject {
    public static PostScriptEndDictionary Instance;
    private static PostScriptEndDictionary();
    public virtual void DirectExecute(IPostScriptInterpreter psContext);
    public virtual void IndirectExecute(IPostScriptInterpreter psInterpreter);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptEndOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptEqOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptException : Exception {
    [CompilerGeneratedAttribute]
private PostScriptExceptionType <Type>k__BackingField;
    public PostScriptExceptionType Type { get; }
    public PostScriptException(PostScriptExceptionType type);
    [CompilerGeneratedAttribute]
public PostScriptExceptionType get_Type();
}
internal enum DevExpress.Pdf.Native.PostScript.PostScriptExceptionType : Enum {
    public int value__;
    public static PostScriptExceptionType StackOverflow;
    public static PostScriptExceptionType StackUnderflow;
    public static PostScriptExceptionType TypeCheck;
    public static PostScriptExceptionType RangeCheck;
    public static PostScriptExceptionType Undefined;
    public static PostScriptExceptionType SyntaxError;
    public static PostScriptExceptionType DictStackUnderflow;
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptExchOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptExecOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptExecutableName : PostScriptName {
    public PostScriptExecutableName(string name);
    private static bool Execute(IPostScriptInterpreter psContext, PostScriptDictionary dict, string key);
    public virtual void DirectExecute(IPostScriptInterpreter psContext);
    public virtual void IndirectExecute(IPostScriptInterpreter psContext);
    private void Execute(IPostScriptInterpreter psContext);
    private static string GetAlternativeName(string key);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptExecuteOnlyOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptExpOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptFile : PostScriptObject {
    private PostScriptScanner scanner;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; }
    public PostScriptFile(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    public PostScriptFile CreateDecryptedFile();
    public Byte[] ReadData(int length);
    public PostScriptObject GetNextElement();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptFindFontOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptFindResourceOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptFontDirectoryOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptForOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptGeOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptGetOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptGtOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptIfElseOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptIfOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptIndexOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptInternalDictOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptInterpreter : object {
    [CompilerGeneratedAttribute]
private PostScriptStack <ExecutionStack>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptStack`1<PostScriptDictionary> <DictionaryStack>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptStack <OperandStack>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <FontDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <ResourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <InternalDict>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <SystemDict>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <UserDict>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <GlobalDict>k__BackingField;
    [CompilerGeneratedAttribute]
private PostScriptDictionary <ErrorDict>k__BackingField;
    private CharstringTerminationFix charstringTerminationFix;
    public PostScriptFile CurrentFile { get; }
    public PostScriptStack ExecutionStack { get; }
    public PostScriptStack`1<PostScriptDictionary> DictionaryStack { get; }
    public PostScriptStack OperandStack { get; }
    public PostScriptDictionary FontDirectory { get; }
    public PostScriptDictionary ResourceDirectory { get; }
    public PostScriptDictionary InternalDict { get; }
    public PostScriptDictionary SystemDict { get; }
    public PostScriptDictionary UserDict { get; }
    public PostScriptDictionary GlobalDict { get; }
    public PostScriptDictionary ErrorDict { get; }
    public PostScriptInterpreter(bool forceCharstringTermination);
    private static void AddOperator(PostScriptDictionary dict, PostScriptPredefinedOperator op);
    private static PostScriptDictionary CreateSystemDict();
    private static PostScriptDictionary CreateResourceDictionary();
    public sealed virtual PostScriptFile get_CurrentFile();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptStack get_ExecutionStack();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptStack`1<PostScriptDictionary> get_DictionaryStack();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptStack get_OperandStack();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptDictionary get_FontDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptDictionary get_ResourceDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptDictionary get_InternalDict();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptDictionary get_SystemDict();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptDictionary get_UserDict();
    [CompilerGeneratedAttribute]
public sealed virtual PostScriptDictionary get_GlobalDict();
    [CompilerGeneratedAttribute]
public PostScriptDictionary get_ErrorDict();
    public sealed virtual void ProcessFile(PostScriptFile file);
    private void ProcessFile(PostScriptFile file, IList`1<PostScriptObject> storage);
    public IList`1<PostScriptObject> CreateProgram(PostScriptFile file);
    public sealed virtual void Reset();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptKnownOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptLengthOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptLeOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptLtOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptMark : PostScriptObject {
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptMarkOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptMaxLengthOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptMulOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptName : PostScriptValueObject`1<string> {
    public PostScriptName(Byte[] data);
    public PostScriptName(string name);
    public virtual bool EqualsTo(IPostScriptEquatable equatable);
    protected virtual bool EqualsTo(PostScriptName name);
    protected virtual bool EqualsTo(PostScriptString str);
    public virtual PostScriptObject ConvertToExecutable();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptNoAccessOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptNotOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptNumber : PostScriptValueObject`1<double> {
    public PostScriptNumber(double num);
    public virtual bool EqualsTo(IPostScriptEquatable equatable);
    protected virtual bool EqualsTo(PostScriptNumber num);
    public virtual int CompareTo(IPostScriptComparable comparable);
    protected virtual int CompareWith(PostScriptNumber num);
    public virtual int ConvertToInt();
    public virtual double ConvertToDouble();
    public virtual PostScriptObject Not();
}
internal abstract class DevExpress.Pdf.Native.PostScript.PostScriptObject : object {
    public static PostScriptObject Null;
    private static PostScriptObject();
    public static PostScriptObject op_Implicit(int val);
    public static PostScriptObject op_Implicit(double val);
    public static PostScriptObject op_Implicit(string val);
    public static PostScriptObject op_Implicit(bool val);
    public virtual void DirectExecute(IPostScriptInterpreter psContext);
    public virtual void IndirectExecute(IPostScriptInterpreter psContext);
    public virtual double ConvertToDouble();
    public virtual int ConvertToInt();
    public virtual PostScriptObject ConvertToExecutable();
    public virtual bool EqualsTo(IPostScriptEquatable equatable);
    protected virtual bool EqualsTo(PostScriptString str);
    protected virtual bool EqualsTo(PostScriptName name);
    protected virtual bool EqualsTo(PostScriptNumber num);
    protected bool EqualsTo(PostScriptObject obj);
    private sealed virtual override bool DevExpress.Pdf.Native.PostScript.IPostScriptEquatable.EqualsTo(PostScriptString str);
    private sealed virtual override bool DevExpress.Pdf.Native.PostScript.IPostScriptEquatable.EqualsTo(PostScriptName name);
    private sealed virtual override bool DevExpress.Pdf.Native.PostScript.IPostScriptEquatable.EqualsTo(PostScriptNumber num);
    private sealed virtual override bool DevExpress.Pdf.Native.PostScript.IPostScriptEquatable.EqualsTo(PostScriptObject obj);
    public virtual int CompareTo(IPostScriptComparable comparable);
    protected virtual int CompareWith(PostScriptString str);
    protected virtual int CompareWith(PostScriptNumber num);
    protected int CompareWith(PostScriptObject obj);
    private sealed virtual override int DevExpress.Pdf.Native.PostScript.IPostScriptComparable.CompareWith(PostScriptString str);
    private sealed virtual override int DevExpress.Pdf.Native.PostScript.IPostScriptComparable.CompareWith(PostScriptNumber num);
    private sealed virtual override int DevExpress.Pdf.Native.PostScript.IPostScriptComparable.CompareWith(PostScriptObject obj);
    public virtual PostScriptObject Not();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptPopOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal abstract class DevExpress.Pdf.Native.PostScript.PostScriptPredefinedOperator : PostScriptObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    protected PostScriptPredefinedOperator(string token);
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual void DirectExecute(IPostScriptInterpreter psContext);
    public virtual void IndirectExecute(IPostScriptInterpreter psContext);
    protected abstract virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptProcedure : PostScriptArray {
    public PostScriptProcedure(IList`1<PostScriptObject> list);
    public virtual void IndirectExecute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptPutOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptReadonlyOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptReadStringOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptRollOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptSaveOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptScanner : BasicParser {
    private static byte beginProcedure;
    private static byte endProcedure;
    private static byte octalDigitEnd;
    private static byte horizontalTab;
    private static byte smallT;
    private static byte smallN;
    private static byte smallF;
    private static byte numberSign;
    private static byte zero;
    private static byte one;
    private static byte exponentialSign;
    private static ParserCharTable postScriptSeparators;
    public bool IsNotEnded { get; }
    public long Position { get; }
    public PostScriptScanner(Byte[] data);
    private static PostScriptScanner();
    public bool get_IsNotEnded();
    public long get_Position();
    public Byte[] GetData(int length);
    private PostScriptObject ParseNumeric();
    private PostScriptObject ParseName();
    private PostScriptObject ParseBoolean();
    private PostScriptObject ParseNull();
    public PostScriptObject GetNextElement();
    private PostScriptObject ReadTokenObject();
    public void SetPosition(long position);
    public void SkipNewLines();
    private PostScriptObject ReadProcedure();
    private static bool IsOctalDigitSymbol(byte symbol);
    private void SkipLineFeed();
    private PostScriptObject ParseLiteralString();
    private PostScriptObject ReadHexadecimalString();
    private int ReadRadixNumber(Func`2<byte, bool> checkByte, Func`3<int, byte, int> accumulate);
    [CompilerGeneratedAttribute]
private int <ParseNumeric>b__18_1(int result, byte current);
    [CompilerGeneratedAttribute]
private int <ParseNumeric>b__18_3(int result, byte current);
    [CompilerGeneratedAttribute]
private bool <ParseNumeric>b__18_4(byte current);
    [CompilerGeneratedAttribute]
private int <ParseNumeric>b__18_5(int result, byte current);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptStack : PostScriptStack`1<PostScriptObject> {
    public PostScriptStack(int limit);
    public void Push(double op);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptStack`1 : object {
    private Stack`1<T> stack;
    [CompilerGeneratedAttribute]
private int <Limit>k__BackingField;
    public int Count { get; }
    public int Limit { get; }
    public PostScriptStack`1(int limit);
    public int get_Count();
    [CompilerGeneratedAttribute]
public int get_Limit();
    public T ElementAtIndex(int index);
    public T Peek();
    public double PopDouble();
    public int PopInt();
    public string PopString();
    public PostScriptString PopStringObject();
    public bool PopBool();
    public string PopName();
    public PostScriptDictionary PopDictionary();
    public PostScriptArray PopArray();
    public PostScriptProcedure PopProcedure();
    public PostScriptObject PopObject();
    public PostScriptFile PopFile();
    private TType Pop(Func`2<T, TType> getValue);
    private TValType PopValue(Func`2<T, Nullable`1<TValType>> getValue);
    public void Push(T op);
    public void Clear();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Exchange();
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptStandardEncodingOperator : PostScriptPredefinedOperator {
    public static string Token;
    private static PostScriptArray array;
    private static PostScriptStandardEncodingOperator();
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptStartDataCIDFontOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptString : PostScriptObject {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public string Str { get; }
    public Byte[] Data { get; }
    public PostScriptString(string data);
    public PostScriptString(Byte[] data);
    public string get_Str();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    public virtual int CompareTo(IPostScriptComparable comparable);
    protected virtual int CompareWith(PostScriptString str);
    public virtual int ConvertToInt();
    public virtual double ConvertToDouble();
    public virtual bool EqualsTo(IPostScriptEquatable equatable);
    protected virtual bool EqualsTo(PostScriptString str);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptStringOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptSubOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptSystemDictOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal class DevExpress.Pdf.Native.PostScript.PostScriptUserDictOperator : PostScriptPredefinedOperator {
    public static string Token;
    protected virtual void Execute(IPostScriptInterpreter psContext);
}
internal abstract class DevExpress.Pdf.Native.PostScript.PostScriptValueObject`1 : PostScriptObject {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    protected PostScriptValueObject`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(PostScriptValueObject`1<T> other);
}
internal static class DevExpress.Pdf.Native.PostScriptConvert : object {
    public static int ToInt(PostScriptObject obj);
    public static double ToDouble(PostScriptObject obj);
    public static string ToString(PostScriptObject obj);
    public static bool ToBool(PostScriptObject obj);
    public static PdfTransformationMatrix ToMatrix(PostScriptObject obj);
    public static PdfRectangle ToRectangle(PostScriptObject obj);
    public static T Convert(PostScriptObject o);
}
internal abstract class DevExpress.Pdf.Native.RawImageDataSource : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Stride>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ComponentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAlphaChannel>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public int Stride { get; }
    public int BitsPerComponent { get; }
    public int ComponentCount { get; }
    public bool HasAlphaChannel { get; }
    protected RawImageDataSource(PdfImage image);
    protected RawImageDataSource(PdfImage image, int componentCount, bool hasAlpha);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public int get_Stride();
    [CompilerGeneratedAttribute]
public int get_BitsPerComponent();
    [CompilerGeneratedAttribute]
public int get_ComponentCount();
    [CompilerGeneratedAttribute]
public bool get_HasAlphaChannel();
    public abstract virtual void FillScanline(Byte[] scanline);
    public abstract virtual void Dispose();
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.CombinedSegmentLists : object {
    [CompilerGeneratedAttribute]
private SegmentList <Combined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inverted1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inverted2>k__BackingField;
    public SegmentList Combined { get; public set; }
    public bool Inverted1 { get; public set; }
    public bool Inverted2 { get; public set; }
    [CompilerGeneratedAttribute]
public SegmentList get_Combined();
    [CompilerGeneratedAttribute]
public void set_Combined(SegmentList value);
    [CompilerGeneratedAttribute]
public bool get_Inverted1();
    [CompilerGeneratedAttribute]
public void set_Inverted1(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inverted2();
    [CompilerGeneratedAttribute]
public void set_Inverted2(bool value);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.Contour : object {
    [CompilerGeneratedAttribute]
private IList`1<PdfPoint> <Points>k__BackingField;
    public IList`1<PdfPoint> Points { get; }
    public Contour(IList`1<PdfPoint> points);
    public Contour(PdfRectangle rect);
    public Contour(PdfGraphicsPath path);
    [CompilerGeneratedAttribute]
public IList`1<PdfPoint> get_Points();
    public PdfGraphicsPath ToPath();
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.EventStorage : LinkedListBase`1<SweepEvent> {
    public void InsertBefore(LinkedListItem`1<SweepEvent> node, PdfPoint pt);
    public void DivideEvent(LinkedListItem`1<SweepEvent> ev, PdfPoint pt);
    public void AddContour(IList`1<PdfPoint> contour);
    public void AddSegment(Segment seg, bool primary);
    private bool ShouldInsertBefore(LinkedListItem`1<SweepEvent> target, LinkedListItem`1<SweepEvent> item, PdfPoint pt);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.Intersection : object {
    [CompilerGeneratedAttribute]
private PdfPoint <Point>k__BackingField;
    [CompilerGeneratedAttribute]
private IntersectionKind <AlongA>k__BackingField;
    [CompilerGeneratedAttribute]
private IntersectionKind <AlongB>k__BackingField;
    public PdfPoint Point { get; }
    public IntersectionKind AlongA { get; }
    public IntersectionKind AlongB { get; }
    public Intersection(PdfPoint point, IntersectionKind alongA, IntersectionKind alongB);
    [CompilerGeneratedAttribute]
public PdfPoint get_Point();
    [CompilerGeneratedAttribute]
public IntersectionKind get_AlongA();
    [CompilerGeneratedAttribute]
public IntersectionKind get_AlongB();
}
internal enum DevExpress.Pdf.Native.Redaction.Algorithms.IntersectionKind : Enum {
    public int value__;
    public static IntersectionKind BeforeFirstPoint;
    public static IntersectionKind ExactlyFirstPoint;
    public static IntersectionKind BetweenPoints;
    public static IntersectionKind ExactlySecondPoint;
    public static IntersectionKind AfterSecondPoint;
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.LinkedListBase`1 : object {
    private LinkedListItem`1<T> root;
    protected LinkedListItem`1<T> Root { get; }
    public bool IsEmpty { get; }
    public LinkedListItem`1<T> First { get; }
    protected LinkedListItem`1<T> get_Root();
    public bool get_IsEmpty();
    public LinkedListItem`1<T> get_First();
    public bool Exists(LinkedListItem`1<T> node);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.LinkedListItem`1 : object {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkedListItem`1<T> <Prev>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkedListItem`1<T> <Next>k__BackingField;
    public T Data { get; }
    public LinkedListItem`1<T> Prev { get; public set; }
    public LinkedListItem`1<T> Next { get; public set; }
    public LinkedListItem`1(T data);
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
public LinkedListItem`1<T> get_Prev();
    [CompilerGeneratedAttribute]
public void set_Prev(LinkedListItem`1<T> value);
    [CompilerGeneratedAttribute]
public LinkedListItem`1<T> get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(LinkedListItem`1<T> value);
    public void Remove();
}
internal static class DevExpress.Pdf.Native.Redaction.Algorithms.MathHelpers : object {
    private static double eps;
    public static bool PointIsAboveOrOnLine(PdfPoint pt, PdfPoint left, PdfPoint right);
    public static bool PointInBetween(PdfPoint pt, PdfPoint left, PdfPoint right);
    public static bool PointsAreSame(PdfPoint p1, PdfPoint p2);
    public static int ComparePoints(PdfPoint p1, PdfPoint p2);
    public static bool PointsAreCollinear(PdfPoint p1, PdfPoint p2, PdfPoint p3);
    public static Intersection IntersectLines(PdfPoint a0, PdfPoint a1, PdfPoint b0, PdfPoint b1);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.Polygon : object {
    [CompilerGeneratedAttribute]
private List`1<Contour> <Contours>k__BackingField;
    public List`1<Contour> Contours { get; }
    public Polygon(IList`1<PdfPoint> points);
    public Polygon(PdfRectangle rectangle);
    public Polygon(List`1<List`1<PdfPoint>> data);
    public Polygon(IList`1<PdfGraphicsPath> paths);
    [CompilerGeneratedAttribute]
public List`1<Contour> get_Contours();
    public IList`1<PdfGraphicsPath> ToPaths();
}
internal static class DevExpress.Pdf.Native.Redaction.Algorithms.PolygonClipper : object {
    private static SegmentList SelectDifference(CombinedSegmentLists combined);
    public static PdfGraphicsPolygon Difference(PdfGraphicsPolygon subject, PdfGraphicsPolygon clip);
    public static IList`1<PdfGraphicsPath> Difference(IList`1<PdfGraphicsPath> polygon, ICutPolygon cutPolygon);
    public static IList`1<PdfGraphicsPath> Difference(IList`1<PdfGraphicsPath> polygon, PdfRectangle rect);
    private static Polygon Calculate(Polygon poly1, Polygon poly2, Func`2<CombinedSegmentLists, SegmentList> selector);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.Segment : object {
    [CompilerGeneratedAttribute]
private PdfPoint <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <End>k__BackingField;
    [CompilerGeneratedAttribute]
private SegmentFill <MyFill>k__BackingField;
    [CompilerGeneratedAttribute]
private SegmentFill <OtherFill>k__BackingField;
    public PdfPoint Start { get; }
    public PdfPoint End { get; public set; }
    public SegmentFill MyFill { get; public set; }
    public SegmentFill OtherFill { get; public set; }
    public Segment(PdfPoint start, PdfPoint end);
    public Segment(PdfPoint start, PdfPoint end, SegmentFill myFill);
    public Segment(PdfPoint start, PdfPoint end, Segment seg);
    [CompilerGeneratedAttribute]
public PdfPoint get_Start();
    [CompilerGeneratedAttribute]
public PdfPoint get_End();
    [CompilerGeneratedAttribute]
public void set_End(PdfPoint value);
    [CompilerGeneratedAttribute]
public SegmentFill get_MyFill();
    [CompilerGeneratedAttribute]
public void set_MyFill(SegmentFill value);
    [CompilerGeneratedAttribute]
public SegmentFill get_OtherFill();
    [CompilerGeneratedAttribute]
public void set_OtherFill(SegmentFill value);
}
internal static class DevExpress.Pdf.Native.Redaction.Algorithms.SegmentBuilder : object {
    public static SegmentList CreateSegments(Polygon polygon);
    public static CombinedSegmentLists Combine(SegmentList segments1, SegmentList segments2);
    private static LinkedListItem`1<SweepEvent> GetIntersection(EventStorage events, LinkedListItem`1<SweepEvent> ev1, LinkedListItem`1<SweepEvent> ev2);
    private static LinkedListItem`1<SweepEvent> CheckBothIntersections(EventStorage events, LinkedListItem`1<SweepEvent> ev, LinkedListItem`1<SweepEvent> above, LinkedListItem`1<SweepEvent> below);
    private static SegmentList Calculate(EventStorage events, bool selfIntersection, bool primaryPolyInverted, bool secondaryPolyInverted);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.SegmentChainer : object {
    private List`1<List`1<PdfPoint>> chains;
    private List`1<List`1<PdfPoint>> regions;
    private Match first_match;
    private Match second_match;
    private Match next_match;
    public static List`1<List`1<PdfPoint>> Chain(SegmentList segments);
    private List`1<List`1<PdfPoint>> Process(SegmentList segments);
    private void Reverse(int index);
    private bool SetMatch(int index, bool matches_head, bool matches_pt1);
    private void AppendChain(int index1, int index2);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.SegmentFill : object {
    [CompilerGeneratedAttribute]
private bool <IsAbove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBelow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProcessed>k__BackingField;
    public bool IsAbove { get; public set; }
    public bool IsBelow { get; public set; }
    public bool IsProcessed { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsAbove();
    [CompilerGeneratedAttribute]
public void set_IsAbove(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBelow();
    [CompilerGeneratedAttribute]
public void set_IsBelow(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsProcessed();
    [CompilerGeneratedAttribute]
public void set_IsProcessed(bool value);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.SegmentList : List`1<Segment> {
    [CompilerGeneratedAttribute]
private bool <Inverted>k__BackingField;
    public bool Inverted { get; public set; }
    public SegmentList(int capacity);
    [CompilerGeneratedAttribute]
public bool get_Inverted();
    [CompilerGeneratedAttribute]
public void set_Inverted(bool value);
}
internal static class DevExpress.Pdf.Native.Redaction.Algorithms.SegmentSelector : object {
    private static Int32[] union_select_table;
    private static Int32[] intersect_select_table;
    private static Int32[] difference_select_table;
    private static Int32[] differenceRev_select_table;
    private static Int32[] xor_select_table;
    private static SegmentSelector();
    public static SegmentList Union(SegmentList segments);
    public static SegmentList Intersect(SegmentList segments);
    public static SegmentList Difference(SegmentList segments);
    public static SegmentList DifferenceRev(SegmentList segments);
    public static SegmentList Xor(SegmentList segments);
    private static SegmentList Select(SegmentList segments, Int32[] selection);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.StatusStorage : LinkedListBase`1<LinkedListItem`1<SweepEvent>> {
    public LinkedListItem`1<LinkedListItem`1<SweepEvent>> Insert(Transition surrounding, LinkedListItem`1<SweepEvent> ev);
    public Transition FindTransition(LinkedListItem`1<SweepEvent> ev);
    private bool CompareStatuses(LinkedListItem`1<SweepEvent> ev1, LinkedListItem`1<SweepEvent> ev2);
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.SweepEvent : object {
    public PdfPoint Point;
    public Segment Segment;
    public bool IsStart;
    public bool IsSubjectPolygon;
    public LinkedListItem`1<SweepEvent> Other;
    public LinkedListItem`1<LinkedListItem`1<SweepEvent>> Status;
}
internal class DevExpress.Pdf.Native.Redaction.Algorithms.Transition : ValueType {
    [CompilerGeneratedAttribute]
private LinkedListItem`1<SweepEvent> <Before>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkedListItem`1<SweepEvent> <After>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkedListItem`1<LinkedListItem`1<SweepEvent>> <Prev>k__BackingField;
    [CompilerGeneratedAttribute]
private LinkedListItem`1<LinkedListItem`1<SweepEvent>> <Here>k__BackingField;
    public LinkedListItem`1<SweepEvent> Before { get; }
    public LinkedListItem`1<SweepEvent> After { get; }
    public LinkedListItem`1<LinkedListItem`1<SweepEvent>> Prev { get; }
    public LinkedListItem`1<LinkedListItem`1<SweepEvent>> Here { get; }
    public Transition(LinkedListItem`1<SweepEvent> before, LinkedListItem`1<SweepEvent> after, LinkedListItem`1<LinkedListItem`1<SweepEvent>> prev, LinkedListItem`1<LinkedListItem`1<SweepEvent>> here);
    [CompilerGeneratedAttribute]
public LinkedListItem`1<SweepEvent> get_Before();
    [CompilerGeneratedAttribute]
public LinkedListItem`1<SweepEvent> get_After();
    [CompilerGeneratedAttribute]
public LinkedListItem`1<LinkedListItem`1<SweepEvent>> get_Prev();
    [CompilerGeneratedAttribute]
public LinkedListItem`1<LinkedListItem`1<SweepEvent>> get_Here();
}
internal class DevExpress.Pdf.Native.Redaction.ConvexCutPolygon : CutPolygon {
    private IList`1<PdfPoint> points;
    private PdfRectangle bbox;
    public PdfRectangle BBox { get; }
    public ConvexCutPolygon(IList`1<PdfPoint> points);
    public virtual PdfRectangle get_BBox();
    private static bool PointInsideConvexPolygon(IList`1<PdfPoint> polygonPoints, PdfPoint pt);
    public virtual bool Contains(ICutPolygon polygon);
    public virtual ICutPolygon Transform(PdfTransformationMatrix transform);
    private static Nullable`1<PdfPoint> GetSegmentIntersection(PdfPoint a1, PdfPoint a2, PdfPoint b1, PdfPoint b2);
    public virtual Tuple`2<int, int> GetScanlineIntersection(int imageWidth, int scanlineY);
    public virtual IList`1<PdfPoint> ToPointList();
}
internal abstract class DevExpress.Pdf.Native.Redaction.CutPolygon : object {
    public PdfRectangle BBox { get; }
    public abstract virtual PdfRectangle get_BBox();
    public abstract virtual Tuple`2<int, int> GetScanlineIntersection(int imageWidth, int scanlineY);
    public abstract virtual IList`1<PdfPoint> ToPointList();
    public abstract virtual ICutPolygon Transform(PdfTransformationMatrix transform);
    public abstract virtual bool Contains(ICutPolygon polygon);
    private static void FillAxes(IList`1<PdfPoint> storage, IList`1<PdfPoint> polygon);
    public virtual bool Intersects(ICutPolygon polygon);
}
internal class DevExpress.Pdf.Native.Redaction.GraphicsState : object {
    [CompilerGeneratedAttribute]
private PdfTransformationMatrix <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfColorSpace <StrokingColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfColorSpace <NonStrokingColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfColor <StrokingColor>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfColor <NonStrokingColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <LineWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfLineCapStyle> <LineCap>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfLineJoinStyle> <LineJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MiterLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfLineStyle <LineStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfRenderingIntent> <RenderingIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <FlatnessTolerance>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <CharacterSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <WordSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <HorizontalScaling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <TextLeading>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfTextRenderingMode> <TextRenderingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <TextRise>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TextKnockout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AlphaSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StrokingAlphaConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <NonStrokingAlphaConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfSoftMask <SoftMask>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfTransformationMatrix <SoftMaskTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfBlendMode> <BlendMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StrokeAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SmoothnessTolerance>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfHalftone <Halftone>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction[] <TransferFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction <BlackGenerationFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFunction <UndercolorRemovalFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NonStrokingOverprint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StrokingOverprint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdfOverprintMode> <OverprintMode>k__BackingField;
    private IList`1<PdfPageContentClipNode> nodes;
    private PdfPageContentObjectClip clip;
    public PdfTransformationMatrix Transform { get; public set; }
    public PdfColorSpace StrokingColorSpace { get; public set; }
    public PdfColorSpace NonStrokingColorSpace { get; public set; }
    public PdfColor StrokingColor { get; public set; }
    public PdfColor NonStrokingColor { get; public set; }
    public Nullable`1<double> LineWidth { get; public set; }
    public Nullable`1<PdfLineCapStyle> LineCap { get; public set; }
    public Nullable`1<PdfLineJoinStyle> LineJoin { get; public set; }
    public Nullable`1<double> MiterLimit { get; public set; }
    public PdfLineStyle LineStyle { get; public set; }
    public Nullable`1<PdfRenderingIntent> RenderingIntent { get; public set; }
    public Nullable`1<double> FlatnessTolerance { get; public set; }
    public Nullable`1<double> CharacterSpacing { get; public set; }
    public Nullable`1<double> WordSpacing { get; public set; }
    public Nullable`1<double> HorizontalScaling { get; public set; }
    public Nullable`1<double> TextLeading { get; public set; }
    public Nullable`1<PdfTextRenderingMode> TextRenderingMode { get; public set; }
    public Nullable`1<double> TextRise { get; public set; }
    public PdfFont Font { get; public set; }
    public Nullable`1<double> FontSize { get; public set; }
    public Nullable`1<bool> TextKnockout { get; public set; }
    public Nullable`1<bool> AlphaSource { get; public set; }
    public Nullable`1<double> StrokingAlphaConstant { get; public set; }
    public Nullable`1<double> NonStrokingAlphaConstant { get; public set; }
    public PdfSoftMask SoftMask { get; public set; }
    public PdfTransformationMatrix SoftMaskTransform { get; public set; }
    public Nullable`1<PdfBlendMode> BlendMode { get; public set; }
    public Nullable`1<bool> StrokeAdjustment { get; public set; }
    public Nullable`1<double> SmoothnessTolerance { get; public set; }
    public PdfHalftone Halftone { get; public set; }
    public PdfFunction[] TransferFunction { get; public set; }
    public PdfFunction BlackGenerationFunction { get; public set; }
    public PdfFunction UndercolorRemovalFunction { get; public set; }
    public Nullable`1<bool> NonStrokingOverprint { get; public set; }
    public Nullable`1<bool> StrokingOverprint { get; public set; }
    public Nullable`1<PdfOverprintMode> OverprintMode { get; public set; }
    private GraphicsState(IList`1<PdfPageContentClipNode> nodes, PdfPageContentObjectClip clip);
    [CompilerGeneratedAttribute]
public PdfTransformationMatrix get_Transform();
    [CompilerGeneratedAttribute]
public void set_Transform(PdfTransformationMatrix value);
    [CompilerGeneratedAttribute]
public PdfColorSpace get_StrokingColorSpace();
    [CompilerGeneratedAttribute]
public void set_StrokingColorSpace(PdfColorSpace value);
    [CompilerGeneratedAttribute]
public PdfColorSpace get_NonStrokingColorSpace();
    [CompilerGeneratedAttribute]
public void set_NonStrokingColorSpace(PdfColorSpace value);
    [CompilerGeneratedAttribute]
public PdfColor get_StrokingColor();
    [CompilerGeneratedAttribute]
public void set_StrokingColor(PdfColor value);
    [CompilerGeneratedAttribute]
public PdfColor get_NonStrokingColor();
    [CompilerGeneratedAttribute]
public void set_NonStrokingColor(PdfColor value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_LineWidth();
    [CompilerGeneratedAttribute]
public void set_LineWidth(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PdfLineCapStyle> get_LineCap();
    [CompilerGeneratedAttribute]
public void set_LineCap(Nullable`1<PdfLineCapStyle> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PdfLineJoinStyle> get_LineJoin();
    [CompilerGeneratedAttribute]
public void set_LineJoin(Nullable`1<PdfLineJoinStyle> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MiterLimit();
    [CompilerGeneratedAttribute]
public void set_MiterLimit(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public PdfLineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public void set_LineStyle(PdfLineStyle value);
    [CompilerGeneratedAttribute]
public Nullable`1<PdfRenderingIntent> get_RenderingIntent();
    [CompilerGeneratedAttribute]
public void set_RenderingIntent(Nullable`1<PdfRenderingIntent> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_FlatnessTolerance();
    [CompilerGeneratedAttribute]
public void set_FlatnessTolerance(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_CharacterSpacing();
    [CompilerGeneratedAttribute]
public void set_CharacterSpacing(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_WordSpacing();
    [CompilerGeneratedAttribute]
public void set_WordSpacing(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_HorizontalScaling();
    [CompilerGeneratedAttribute]
public void set_HorizontalScaling(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_TextLeading();
    [CompilerGeneratedAttribute]
public void set_TextLeading(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PdfTextRenderingMode> get_TextRenderingMode();
    [CompilerGeneratedAttribute]
public void set_TextRenderingMode(Nullable`1<PdfTextRenderingMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_TextRise();
    [CompilerGeneratedAttribute]
public void set_TextRise(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public PdfFont get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(PdfFont value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TextKnockout();
    [CompilerGeneratedAttribute]
public void set_TextKnockout(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AlphaSource();
    [CompilerGeneratedAttribute]
public void set_AlphaSource(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_StrokingAlphaConstant();
    [CompilerGeneratedAttribute]
public void set_StrokingAlphaConstant(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_NonStrokingAlphaConstant();
    [CompilerGeneratedAttribute]
public void set_NonStrokingAlphaConstant(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public PdfSoftMask get_SoftMask();
    [CompilerGeneratedAttribute]
public void set_SoftMask(PdfSoftMask value);
    [CompilerGeneratedAttribute]
public PdfTransformationMatrix get_SoftMaskTransform();
    [CompilerGeneratedAttribute]
public void set_SoftMaskTransform(PdfTransformationMatrix value);
    [CompilerGeneratedAttribute]
public Nullable`1<PdfBlendMode> get_BlendMode();
    [CompilerGeneratedAttribute]
public void set_BlendMode(Nullable`1<PdfBlendMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StrokeAdjustment();
    [CompilerGeneratedAttribute]
public void set_StrokeAdjustment(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SmoothnessTolerance();
    [CompilerGeneratedAttribute]
public void set_SmoothnessTolerance(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public PdfHalftone get_Halftone();
    [CompilerGeneratedAttribute]
public void set_Halftone(PdfHalftone value);
    [CompilerGeneratedAttribute]
public PdfFunction[] get_TransferFunction();
    [CompilerGeneratedAttribute]
public void set_TransferFunction(PdfFunction[] value);
    [CompilerGeneratedAttribute]
public PdfFunction get_BlackGenerationFunction();
    [CompilerGeneratedAttribute]
public void set_BlackGenerationFunction(PdfFunction value);
    [CompilerGeneratedAttribute]
public PdfFunction get_UndercolorRemovalFunction();
    [CompilerGeneratedAttribute]
public void set_UndercolorRemovalFunction(PdfFunction value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NonStrokingOverprint();
    [CompilerGeneratedAttribute]
public void set_NonStrokingOverprint(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StrokingOverprint();
    [CompilerGeneratedAttribute]
public void set_StrokingOverprint(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PdfOverprintMode> get_OverprintMode();
    [CompilerGeneratedAttribute]
public void set_OverprintMode(Nullable`1<PdfOverprintMode> value);
    public PdfPageContentObjectClip GetClip();
    public void AddClipNode(PdfPageContentClipNode node);
    public GraphicsState Clone();
}
internal interface DevExpress.Pdf.Native.Redaction.ICutPolygon {
    public PdfRectangle BBox { get; }
    public abstract virtual PdfRectangle get_BBox();
    public abstract virtual ICutPolygon Transform(PdfTransformationMatrix transform);
    public abstract virtual bool Intersects(ICutPolygon polygon);
    public abstract virtual bool Contains(ICutPolygon polygon);
    public abstract virtual Tuple`2<int, int> GetScanlineIntersection(int imageWidth, int scanlineY);
    public abstract virtual IList`1<PdfPoint> ToPointList();
}
internal static class DevExpress.Pdf.Native.Redaction.ImageCut : object {
    public static PdfArrayCompressedData CutImageDataAndCompress(RawImageDataSource source, ICutPolygon cutPolygon);
}
internal interface DevExpress.Pdf.Native.Redaction.IPdfPageContentClipNodeVisitor {
    public abstract virtual void Visit(PdfPageContentClipPathNode pathNode);
    public abstract virtual void Visit(PdfPageContentClipTextNode textNode);
}
internal interface DevExpress.Pdf.Native.Redaction.IPdfPageContentElement {
    public abstract virtual void Accept(IPdfPageContentElementVisitor visitor);
}
internal interface DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor {
    public abstract virtual void Visit(PdfPageContentPathElement pathElement);
    public abstract virtual void Visit(PdfPageContentTextElement textElement);
    public abstract virtual void Visit(PdfPageContentFormElement formElement);
    public abstract virtual void Visit(PdfPageContentShadingElement shadingElement);
    public abstract virtual void Visit(PdfPageContentImageElement imageElement);
    public abstract virtual void Visit(PdfPageContentBeginMarkedContentElement bmcElement);
    public abstract virtual void Visit(PdfPageContentEndMarkedContentElement emcElement);
    public abstract virtual void Visit(PdfPageContentMarkedContentPointElement mpElement);
    public abstract virtual void Visit(PdfPageContentBeginCompatibilityGroupElement compatBegin);
    public abstract virtual void Visit(PdfPageContentEndCompatibilityGroupElement compatEnd);
}
internal interface DevExpress.Pdf.Native.Redaction.IPdfPageContentVisibleElement {
    public abstract virtual PdfRectangle GetBoundingBox();
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentBeginCompatibilityGroupElement : object {
    public static PdfPageContentBeginCompatibilityGroupElement Instance;
    private static PdfPageContentBeginCompatibilityGroupElement();
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElement.Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentBeginMarkedContentElement : object {
    [CompilerGeneratedAttribute]
private PdfProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public PdfProperties Properties { get; }
    public string Tag { get; }
    public PdfPageContentBeginMarkedContentElement(PdfProperties properties, string tag);
    [CompilerGeneratedAttribute]
public PdfProperties get_Properties();
    [CompilerGeneratedAttribute]
public string get_Tag();
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElement.Accept(IPdfPageContentElementVisitor visitor);
}
internal abstract class DevExpress.Pdf.Native.Redaction.PdfPageContentClipNode : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    public PdfRectangle Bounds { get; }
    protected PdfPageContentClipNode(PdfRectangle bounds);
    [CompilerGeneratedAttribute]
public PdfRectangle get_Bounds();
    public abstract virtual void Accept(IPdfPageContentClipNodeVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentClipPathNode : PdfPageContentClipNode {
    [CompilerGeneratedAttribute]
private PdfTransformationMatrix <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfGraphicsPath> <Paths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNonZeroWindingRule>k__BackingField;
    public PdfTransformationMatrix Transform { get; }
    public IList`1<PdfGraphicsPath> Paths { get; }
    public bool UseNonZeroWindingRule { get; }
    internal PdfPageContentClipPathNode(IList`1<PdfGraphicsPath> paths, bool useNonZeroWindingRule, PdfTransformationMatrix transform);
    [CompilerGeneratedAttribute]
public PdfTransformationMatrix get_Transform();
    [CompilerGeneratedAttribute]
public IList`1<PdfGraphicsPath> get_Paths();
    [CompilerGeneratedAttribute]
public bool get_UseNonZeroWindingRule();
    public virtual void Accept(IPdfPageContentClipNodeVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentClipTextNode : PdfPageContentClipNode {
    [CompilerGeneratedAttribute]
private IList`1<PdfPageContentGlyphRun> <GlyphRuns>k__BackingField;
    public IList`1<PdfPageContentGlyphRun> GlyphRuns { get; }
    public PdfPageContentClipTextNode(IList`1<PdfPageContentGlyphRun> textClip);
    [CompilerGeneratedAttribute]
public IList`1<PdfPageContentGlyphRun> get_GlyphRuns();
    public virtual void Accept(IPdfPageContentClipNodeVisitor visitor);
}
internal abstract class DevExpress.Pdf.Native.Redaction.PdfPageContentElement : object {
    private GraphicsState graphicsState;
    private PdfRectangle bounds;
    public GraphicsState GraphicsState { get; }
    protected PdfTransformationMatrix BBoxTransform { get; }
    protected PdfPageContentElement(GraphicsState graphicsState, PdfRectangle bounds);
    public GraphicsState get_GraphicsState();
    protected virtual PdfTransformationMatrix get_BBoxTransform();
    public sealed virtual PdfRectangle GetBoundingBox();
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElement.Accept(IPdfPageContentElementVisitor visitor);
    internal abstract virtual void Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentElementReader : object {
    private PdfPage page;
    private List`1<IPdfPageContentElement> objects;
    private Stack`1<GraphicsState> stateStack;
    private int objectNumber;
    private TextObjectBuilder textObjectBulder;
    private List`1<PdfGraphicsPath> paths;
    private GraphicsState graphicsState;
    private ClipPathFlag clipFlag;
    private PdfGraphicsPath CurrentPath { get; }
    public PdfResources PageResources { get; }
    private PdfPageContentElementReader(PdfPage page);
    private PdfPageContentElementReader(PdfPage page, int objectNumber, GraphicsState initalState);
    public static IList`1<IPdfPageContentElement> ReadElements(PdfPage page);
    public static IList`1<IPdfPageContentElement> ReadElements(PdfPage page, PdfForm form, GraphicsState initalGraphicsState);
    private PdfGraphicsPath get_CurrentPath();
    public sealed virtual PdfResources get_PageResources();
    private void Execute(IEnumerable`1<PdfCommand> commands);
    public sealed virtual void BeginPath(PdfPoint startPoint);
    public sealed virtual void AppendPathBezierSegment(PdfPoint controlPoint2, PdfPoint endPoint);
    public sealed virtual void AppendPathBezierSegment(PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint endPoint);
    public sealed virtual void AppendPathLineSegment(PdfPoint endPoint);
    public sealed virtual void AppendRectangle(double x, double y, double width, double height);
    public sealed virtual void ClosePath();
    public sealed virtual void StrokePath();
    public sealed virtual void CloseAndStrokePath();
    public sealed virtual void CloseFillAndStrokePath(bool useNonzeroWindingRule);
    private void ApplyClipAndClearPaths();
    private void AddPathObject(PdfPageContentPathElementAction action, bool nonZero);
    public sealed virtual void FillPath(bool useNonzeroWindingRule);
    public sealed virtual void FillAndStrokePath(bool useNonzeroWindingRule);
    public sealed virtual void EndPathWithoutFillingAndStroking();
    public sealed virtual void Clip(bool useNonzeroWindingRule);
    public sealed virtual void BeginText();
    public sealed virtual void EndText();
    public sealed virtual void ShowText(Byte[] data, Double[] offsets);
    public sealed virtual void ShowTextOnNextLine(Byte[] data);
    public sealed virtual void ShowTextOnNextLineWithSpacing(double wordSpacing, double characterSpacing, Byte[] data);
    public sealed virtual void StartTextLine();
    public sealed virtual void StartTextLine(double xOffset, double yOffset);
    public sealed virtual void StartTextLineWithLeading(double xOffset, double yOffset);
    public sealed virtual void SetTextMatrix(PdfTransformationMatrix matrix);
    public sealed virtual void SetFont(PdfFont font, double fontSize);
    public sealed virtual void SetCharacterSpacing(double characterSpacing);
    public sealed virtual void SetWordSpacing(double wordSpacing);
    public sealed virtual void SetTextHorizontalScaling(double scaling);
    public sealed virtual void SetTextLeading(double leading);
    public sealed virtual void SetTextRenderingMode(PdfTextRenderingMode renderingMode);
    public sealed virtual void SetTextRise(double rise);
    public sealed virtual void SetCMYKColorForNonStrokingOperations(double c, double m, double y, double k);
    public sealed virtual void SetCMYKColorForStrokingOperations(double c, double m, double y, double k);
    public sealed virtual void SetRGBColorForNonStrokingOperations(double r, double g, double b);
    public sealed virtual void SetRGBColorForStrokingOperations(double r, double g, double b);
    public sealed virtual void SetGrayColorForNonStrokingOperations(double gray);
    public sealed virtual void SetGrayColorForStrokingOperations(double gray);
    public sealed virtual void SetColorForNonStrokingOperations(PdfColor color);
    public sealed virtual void SetColorForStrokingOperations(PdfColor color);
    public sealed virtual void SetColorSpaceForNonStrokingOperations(PdfColorSpace colorSpace);
    public sealed virtual void SetColorSpaceForStrokingOperations(PdfColorSpace colorSpace);
    public sealed virtual void SetFlatnessTolerance(double flatnessTolerance);
    public sealed virtual void SetLineCapStyle(PdfLineCapStyle lineCapStyle);
    public sealed virtual void SetLineJoinStyle(PdfLineJoinStyle lineJoinStyle);
    public sealed virtual void SetLineStyle(PdfLineStyle lineStyle);
    public sealed virtual void SetLineWidth(double lineWidth);
    public sealed virtual void SetMiterLimit(double miterLimit);
    public sealed virtual void SetRenderingIntent(PdfRenderingIntent renderingIntent);
    public sealed virtual void ApplyGraphicsStateParameters(PdfGraphicsStateParameters parameters);
    public sealed virtual void UpdateTransformationMatrix(PdfTransformationMatrix matrix);
    public sealed virtual void RestoreGraphicsState();
    public sealed virtual void SaveGraphicsState();
    public sealed virtual void DrawForm(PdfForm form);
    public sealed virtual void DrawTransparencyGroup(PdfGroupForm form);
    public sealed virtual void DrawImage(PdfImage image);
    public sealed virtual void DrawInlineImage(PdfImage image);
    public sealed virtual void DrawShading(PdfShading shading);
    public sealed virtual void DrawMarkedContent(IEnumerable`1<PdfCommand> commands, PdfProperties properties, string tag);
    public sealed virtual void DrawCompatibilityGroup(IEnumerable`1<PdfCommand> commands);
    public sealed virtual void DesignateMarkedContentPoint(PdfProperties properties, string tag);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentElementWriter : object {
    private IElementWriterContext context;
    private Dictionary`2<ExtGSParamsKey, PdfGraphicsStateParameters> extGSStorage;
    private Dictionary`2<PdfSoftMask, PdfGraphicsStateParameters> softMaskParametersStorage;
    private PdfCommandConstructor constructor;
    private GraphicsState currentState;
    private Stack`1<GraphicsState> stack;
    private PdfPageContentElementWriter(IElementWriterContext context);
    public static void WriteElements(PdfForm form, IList`1<IPdfPageContentElement> elements);
    public static void WriteElements(PdfPage page, IList`1<IPdfPageContentElement> elements);
    private static void WriteElements(PdfPageContentElementWriter writer, IList`1<IPdfPageContentElement> elements);
    private static bool IsSpecialColorSpace(PdfColorSpace colorSpace);
    private static bool IsNonDefaultMatrix(PdfTransformationMatrix matrix);
    public void FinishWrite();
    private void SaveGS();
    private void RestoreGS();
    private void SetCommonGSParameters(GraphicsState graphicsState);
    private void SetTextGSParameters(GraphicsState graphicsState, bool includeRenderingMode);
    private void SetExtGSParameters(GraphicsState graphicsState);
    private void BeginWriteElement(GraphicsState graphicsState);
    private void EndWriteElement();
    private void SetClip(PdfPageContentObjectClip clip);
    private PdfTransformationMatrix SetSoftMaskAndGetObjectTransform(GraphicsState graphicsState);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentTextElement textElement);
    private void WriteSimpleElement(T element, Action`1<T> writeAction);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentPathElement pathElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentFormElement formElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentShadingElement shadingElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentImageElement imageElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentBeginMarkedContentElement bmcElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentEndMarkedContentElement emcElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentMarkedContentPointElement mpElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentBeginCompatibilityGroupElement compatBegin);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentEndCompatibilityGroupElement compatEnd);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentClipNodeVisitor.Visit(PdfPageContentClipPathNode pathNode);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentClipNodeVisitor.Visit(PdfPageContentClipTextNode textNode);
    [CompilerGeneratedAttribute]
private void <DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit>b__28_0(PdfPageContentPathElement pElem);
    [CompilerGeneratedAttribute]
private void <DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit>b__29_0(PdfPageContentFormElement f);
    [CompilerGeneratedAttribute]
private void <DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit>b__30_0(PdfPageContentShadingElement s);
    [CompilerGeneratedAttribute]
private void <DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit>b__31_0(PdfPageContentImageElement i);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentEndCompatibilityGroupElement : object {
    public static PdfPageContentEndCompatibilityGroupElement Instance;
    private static PdfPageContentEndCompatibilityGroupElement();
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElement.Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentEndMarkedContentElement : object {
    public static PdfPageContentEndMarkedContentElement Instance;
    private static PdfPageContentEndMarkedContentElement();
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElement.Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentFormElement : PdfPageContentElement {
    private PdfPage page;
    [CompilerGeneratedAttribute]
private PdfForm <Form>k__BackingField;
    public PdfForm Form { get; }
    protected PdfTransformationMatrix BBoxTransform { get; }
    public PdfPageContentFormElement(PdfPage page, PdfForm form, GraphicsState formGs);
    [CompilerGeneratedAttribute]
public PdfForm get_Form();
    protected virtual PdfTransformationMatrix get_BBoxTransform();
    public IList`1<IPdfPageContentElement> GetObjects();
    internal virtual void Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentGlyph : ValueType {
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CharCode>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <Delta>k__BackingField;
    public PdfRectangle BoundingBox { get; }
    public double Offset { get; }
    public Byte[] CharCode { get; }
    public PdfPoint Delta { get; }
    public PdfPageContentGlyph(PdfRectangle glyphBounds, double offset, Byte[] charCode, PdfPoint delta);
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    [CompilerGeneratedAttribute]
public double get_Offset();
    [CompilerGeneratedAttribute]
public Byte[] get_CharCode();
    [CompilerGeneratedAttribute]
public PdfPoint get_Delta();
}
[DebuggerDisplayAttribute("{GetString()}")]
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentGlyphRun : ValueType {
    [CompilerGeneratedAttribute]
private IList`1<PdfPageContentGlyph> <Glyphs>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphicsState <GraphicsState>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfTransformationMatrix <TextMatrix>k__BackingField;
    public IList`1<PdfPageContentGlyph> Glyphs { get; }
    public GraphicsState GraphicsState { get; }
    public PdfTransformationMatrix TextMatrix { get; }
    public PdfPoint Delta { get; }
    public PdfPageContentGlyphRun(IList`1<PdfPageContentGlyph> glyphs, GraphicsState graphicsState, PdfTransformationMatrix textMatrix);
    public static PdfPageContentGlyphRun Create(GraphicsState graphicsState, PdfTransformationMatrix textMatrix, Byte[] data, Double[] offsets);
    [CompilerGeneratedAttribute]
public IList`1<PdfPageContentGlyph> get_Glyphs();
    [CompilerGeneratedAttribute]
public GraphicsState get_GraphicsState();
    [CompilerGeneratedAttribute]
public PdfTransformationMatrix get_TextMatrix();
    public PdfPoint get_Delta();
    public PdfRectangle GetBoundingBox();
    public string GetString();
    public Byte[] GetData();
    public Double[] GetOffsets();
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentImageElement : PdfPageContentElement {
    [CompilerGeneratedAttribute]
private PdfImage <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInlineImage>k__BackingField;
    public PdfImage Image { get; }
    public bool IsInlineImage { get; }
    public PdfPageContentImageElement(PdfImage image, GraphicsState graphicsState, bool isInlineImage);
    [CompilerGeneratedAttribute]
public PdfImage get_Image();
    [CompilerGeneratedAttribute]
public bool get_IsInlineImage();
    internal virtual void Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentMarkedContentPointElement : object {
    [CompilerGeneratedAttribute]
private PdfProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public PdfProperties Properties { get; }
    public string Tag { get; }
    public PdfPageContentMarkedContentPointElement(PdfProperties properties, string tag);
    [CompilerGeneratedAttribute]
public PdfProperties get_Properties();
    [CompilerGeneratedAttribute]
public string get_Tag();
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElement.Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentObjectClip : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfPageContentClipNode> <ClipNodes>k__BackingField;
    public PdfRectangle Bounds { get; }
    public IList`1<PdfPageContentClipNode> ClipNodes { get; }
    public bool IsEmpty { get; }
    internal PdfPageContentObjectClip(IList`1<PdfPageContentClipNode> clipNodes);
    [CompilerGeneratedAttribute]
public PdfRectangle get_Bounds();
    [CompilerGeneratedAttribute]
public IList`1<PdfPageContentClipNode> get_ClipNodes();
    public bool get_IsEmpty();
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentPathElement : PdfPageContentElement {
    [CompilerGeneratedAttribute]
private PdfPageContentPathElementAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfGraphicsPath> <Paths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonZeroWindingRule>k__BackingField;
    public PdfPageContentPathElementAction Action { get; }
    public IList`1<PdfGraphicsPath> Paths { get; }
    public bool NonZeroWindingRule { get; }
    public PdfPageContentPathElement(IList`1<PdfGraphicsPath> paths, bool nonZeroWindingRule, PdfPageContentPathElementAction action, GraphicsState graphicsState);
    private static PdfRectangle GetBounds(IList`1<PdfGraphicsPath> paths, PdfPageContentPathElementAction action, GraphicsState graphicsState);
    [CompilerGeneratedAttribute]
public PdfPageContentPathElementAction get_Action();
    [CompilerGeneratedAttribute]
public IList`1<PdfGraphicsPath> get_Paths();
    [CompilerGeneratedAttribute]
public bool get_NonZeroWindingRule();
    internal virtual void Accept(IPdfPageContentElementVisitor visitor);
}
internal enum DevExpress.Pdf.Native.Redaction.PdfPageContentPathElementAction : Enum {
    public int value__;
    public static PdfPageContentPathElementAction Fill;
    public static PdfPageContentPathElementAction Stroke;
    public static PdfPageContentPathElementAction FillAndStroke;
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentRemover : object {
    private PdfPage page;
    private IList`1<IPdfPageContentElement> result;
    private PdfClearContentOptions options;
    private bool applyClip;
    private bool removeText;
    private bool removeImages;
    private bool removeGraphics;
    private IEnumerable`1<ICutPolygon> clearRegions;
    private IPolygonBooleanOperationProvider provider;
    private PdfPageContentRemover(IPolygonBooleanOperationProvider provider, PdfPage page, IEnumerable`1<ICutPolygon> clearRegions, PdfClearContentOptions options, bool applyClip);
    public static IList`1<IPdfPageContentElement> RemoveElements(IPolygonBooleanOperationProvider boolOperationProvider, PdfPage page, IList`1<IPdfPageContentElement> elements, PdfClearContentRegions regions, PdfClearContentOptions options);
    private static IList`1<IPdfPageContentElement> RemoveElements(IPolygonBooleanOperationProvider boolOperationProvider, PdfPage page, IList`1<IPdfPageContentElement> elements, IEnumerable`1<ICutPolygon> cutPolygons, PdfClearContentOptions options, bool applyClip);
    private void ProcessElement(bool removeElement, bool forceIfEmptyBbox, T element, Action`2<T, IEnumerable`1<ICutPolygon>> clearAction, bool forceClearAction);
    private PdfPageContentTextElement ProcessTextElement(PdfPageContentTextElement textElement, ICutPolygon polygon);
    private void ProcessTextElement(PdfPageContentTextElement textElement, IEnumerable`1<ICutPolygon> intersectedPolygons);
    private void ProcessPathElement(PdfPageContentPathElement pathElement, IEnumerable`1<ICutPolygon> intersectedPolygons);
    private void ProcessFormElement(PdfPageContentFormElement formElement, IEnumerable`1<ICutPolygon> intersectedPolygons);
    private GraphicsState ApplyClip(GraphicsState gs, IEnumerable`1<ICutPolygon> polygons);
    private void ProcessShadingElement(PdfPageContentShadingElement shadingElement, IEnumerable`1<ICutPolygon> polygons);
    private void ProcessImageElement(PdfPageContentImageElement imageElement, IEnumerable`1<ICutPolygon> polygons);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentTextElement textElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentPathElement pathElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentFormElement formElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentShadingElement shadingElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentImageElement imageElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentBeginMarkedContentElement bmcElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentEndMarkedContentElement emcElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentMarkedContentPointElement mpElement);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentBeginCompatibilityGroupElement compatBegin);
    private sealed virtual override void DevExpress.Pdf.Native.Redaction.IPdfPageContentElementVisitor.Visit(PdfPageContentEndCompatibilityGroupElement compatEnd);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentShadingElement : PdfPageContentElement {
    [CompilerGeneratedAttribute]
private PdfShading <Shading>k__BackingField;
    public PdfShading Shading { get; }
    public PdfPageContentShadingElement(PdfShading shading, GraphicsState graphicsState);
    [CompilerGeneratedAttribute]
public PdfShading get_Shading();
    internal virtual void Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.PdfPageContentTextElement : object {
    private PdfPageContentObjectClip clip;
    [CompilerGeneratedAttribute]
private IList`1<PdfPageContentGlyphRun> <GlyphRuns>k__BackingField;
    public IList`1<PdfPageContentGlyphRun> GlyphRuns { get; }
    public PdfPageContentObjectClip Clip { get; }
    public PdfPageContentTextElement(PdfPageContentObjectClip clip, IList`1<PdfPageContentGlyphRun> glyphRuns);
    [CompilerGeneratedAttribute]
public IList`1<PdfPageContentGlyphRun> get_GlyphRuns();
    public PdfPageContentObjectClip get_Clip();
    public sealed virtual PdfRectangle GetBoundingBox();
    public sealed virtual void Accept(IPdfPageContentElementVisitor visitor);
}
internal class DevExpress.Pdf.Native.Redaction.RectCutPolygon : CutPolygon {
    private PdfRectangle rect;
    public PdfRectangle BBox { get; }
    public RectCutPolygon(PdfRectangle rect);
    public virtual PdfRectangle get_BBox();
    public virtual ICutPolygon Transform(PdfTransformationMatrix transform);
    public virtual bool Intersects(ICutPolygon polygon);
    public virtual Tuple`2<int, int> GetScanlineIntersection(int imageWidth, int scanlineY);
    public virtual IList`1<PdfPoint> ToPointList();
    public virtual bool Contains(ICutPolygon polygon);
}
internal abstract class DevExpress.Pdf.Native.Redaction.ScanlineCutStrategy : object {
    public static ScanlineCutStrategy Create(int bitsPerComponent);
    public abstract virtual void CutPixels(Byte[] scanline, int componentCount, int startPixel, int endPixel);
}
internal class DevExpress.Pdf.Native.ScanlineRawDataSource : RawImageDataSource {
    private IPdfImageScanlineSource source;
    public ScanlineRawDataSource(PdfImage image, IPdfImageScanlineSource source);
    public virtual void FillScanline(Byte[] scanline);
    public virtual void Dispose();
}
public class DevExpress.Pdf.Native.SkippingStream : Stream {
    private Stream stream;
    private long skipOffset;
    private int skipLength;
    private long skipEnd;
    private long initialPosition;
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SkippingStream(Stream stream, long skipOffset, int skipLength);
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual void SetLength(long value);
}
public enum DevExpress.Pdf.Native.StickyNoteIconName : Enum {
    public int value__;
    public static StickyNoteIconName Check;
    public static StickyNoteIconName Circle;
    public static StickyNoteIconName Comment;
    public static StickyNoteIconName Cross;
    public static StickyNoteIconName CrossHairs;
    public static StickyNoteIconName Help;
    public static StickyNoteIconName Insert;
    public static StickyNoteIconName Key;
    public static StickyNoteIconName NewParagraph;
    public static StickyNoteIconName Note;
    public static StickyNoteIconName Paragraph;
    public static StickyNoteIconName RightArrow;
    public static StickyNoteIconName RightPointer;
    public static StickyNoteIconName Star;
    public static StickyNoteIconName UpArrow;
    public static StickyNoteIconName UpLeftArrow;
}
public class DevExpress.Pdf.Native.StreamSegment : Stream {
    private Stream underlyingStream;
    private long streamOffset;
    private long length;
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamSegment(Stream underlyingStream, long offset, long length);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    [CompilerGeneratedAttribute]
public virtual long get_Position();
    [CompilerGeneratedAttribute]
public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public static class DevExpress.Pdf.Native.TextMeasurer : object {
    public static double GetTextWidth(string text, PdfExportFont exportFont, float fontSize, PdfInteractiveFormFieldTextState textState);
    public static SizeF MeasureString(string text, Nullable`1<SizeF> size, PdfExportFont exportFont, PdfFontMetrics metrics, float fontSize, PdfInteractiveFormFieldTextState textState);
}
internal static class DevExpress.Pdf.Native.Utils.PdfDebugTrace : object {
    [CompilerGeneratedAttribute]
private static Feature <OutputMask>k__BackingField;
    public static Feature OutputMask { get; public set; }
    private static PdfDebugTrace();
    [CompilerGeneratedAttribute]
public static Feature get_OutputMask();
    [CompilerGeneratedAttribute]
public static void set_OutputMask(Feature value);
    [ConditionalAttribute("DEBUG")]
public static void TraceIf(bool condition, string message, Feature level);
    [ConditionalAttribute("DEBUG")]
public static void TraceIf(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void Trace(string message, Feature level);
    [ConditionalAttribute("DEBUG")]
public static void Trace(string message);
}
[ExtensionAttribute]
internal static class DevExpress.Pdf.Native.Utils.PdfSignatureBuilderExtensions : object {
    [ExtensionAttribute]
public static X509Name GetSubjectDistinguishedName(PdfSignatureBuilder builder);
    [ExtensionAttribute]
public static string GetCommonName(PdfSignatureBuilder builder);
}
public class DevExpress.Pdf.Native.WeakReferenceCache`2 : object {
    private IDictionary`2<TKey, WeakReference`1<TValue>> cache;
    private Func`2<TKey, TValue> factoryFunc;
    public WeakReferenceCache`2(Func`2<TKey, TValue> factoryFunc);
    public TValue GetValue(TKey key);
}
internal static class DevExpress.Pdf.Native.ZugferdHelpers : object {
    public static ZugferdVariables GetVariables(PdfZugferdVersion version, PdfZugferdConformanceLevel conformanceLevel);
    private static string GetAttachNameForVersion(PdfZugferdVersion version, PdfZugferdConformanceLevel level);
    private static string GetVersion(PdfZugferdVersion version);
    private static string GetPrefix(PdfZugferdVersion version);
    private static string GetNamespaceUri(PdfZugferdVersion version);
    private static string GetConformanceString(PdfZugferdConformanceLevel level);
    private static PdfZugferdConformanceLevel GetActualConformanceLevel(PdfZugferdVersion version, PdfZugferdConformanceLevel level);
}
public class DevExpress.Pdf.Pdf3dAnnotation : PdfAnnotation {
    internal static string Type;
    private static string dataKey;
    private static string defaultViewKey;
    private static string activationKey;
    private static string interactiveKey;
    private static string viewBoxKey;
    private Pdf3dData data;
    private Pdf3dActivationParameters activationParameters;
    private Pdf3dView defaultView;
    private bool isInteractive;
    private PdfRectangle viewBox;
    protected internal string SubtypeName { get; }
    internal Pdf3dData Data { get; }
    internal Pdf3dView DefaultView { get; }
    internal Pdf3dActivationParameters ActivationParameters { get; }
    internal bool IsInteractive { get; }
    internal PdfRectangle ViewBox { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal Pdf3dAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    protected internal virtual string get_SubtypeName();
    internal Pdf3dData get_Data();
    internal Pdf3dView get_DefaultView();
    internal Pdf3dActivationParameters get_ActivationParameters();
    internal bool get_IsInteractive();
    internal PdfRectangle get_ViewBox();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfAcroFormBorderAppearance : object {
    private PdfAcroFormBorderStyle style;
    private double width;
    private PdfRGBColor color;
    public PdfAcroFormBorderStyle Style { get; public set; }
    public double Width { get; public set; }
    public PdfRGBColor Color { get; public set; }
    internal bool IsVisible { get; }
    public PdfAcroFormBorderStyle get_Style();
    public void set_Style(PdfAcroFormBorderStyle value);
    public double get_Width();
    public void set_Width(double value);
    public PdfRGBColor get_Color();
    public void set_Color(PdfRGBColor value);
    internal bool get_IsVisible();
}
public enum DevExpress.Pdf.PdfAcroFormBorderStyle : Enum {
    public int value__;
    public static PdfAcroFormBorderStyle Solid;
    public static PdfAcroFormBorderStyle Inset;
    public static PdfAcroFormBorderStyle Beveled;
    public static PdfAcroFormBorderStyle Dashed;
}
public enum DevExpress.Pdf.PdfAcroFormButtonStyle : Enum {
    public int value__;
    public static PdfAcroFormButtonStyle Circle;
    public static PdfAcroFormButtonStyle Check;
    public static PdfAcroFormButtonStyle Star;
    public static PdfAcroFormButtonStyle Cross;
    public static PdfAcroFormButtonStyle Diamond;
    public static PdfAcroFormButtonStyle Square;
}
public class DevExpress.Pdf.PdfAcroFormCheckBoxField : PdfAcroFormCommonVisualField {
    private PdfAcroFormButtonStyle buttonStyle;
    private string exportValue;
    private bool shouldGeneratePressedAppearance;
    [CompilerGeneratedAttribute]
private bool <IsChecked>k__BackingField;
    public bool IsChecked { get; public set; }
    public PdfAcroFormButtonStyle ButtonStyle { get; public set; }
    public bool ShouldGeneratePressedAppearance { get; public set; }
    public string ExportValue { get; public set; }
    public PdfAcroFormCheckBoxField(string name, int pageNumber, PdfRectangle rect);
    internal static void ValidateExportValue(string exportName);
    [CompilerGeneratedAttribute]
public bool get_IsChecked();
    [CompilerGeneratedAttribute]
public void set_IsChecked(bool value);
    public PdfAcroFormButtonStyle get_ButtonStyle();
    public void set_ButtonStyle(PdfAcroFormButtonStyle value);
    public bool get_ShouldGeneratePressedAppearance();
    public void set_ShouldGeneratePressedAppearance(bool value);
    public string get_ExportValue();
    public void set_ExportValue(string value);
    public void AddWidget(PdfRectangle rectangle);
    public void AddWidget(int pageNumber, PdfRectangle rectangle);
    public void ClearWidgets();
    protected virtual PdfInteractiveFormField CreateCommonVisualField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormFieldProperties properties);
    protected virtual PdfWidgetAnnotationBuilder CreateWidgetBuilder(PdfRectangle rect);
    protected virtual Byte[] CreateAppearanceCommands(IPdfExportFontProvider fontSearch, PdfDocument document);
}
public abstract class DevExpress.Pdf.PdfAcroFormChoiceField : PdfAcroFormCommonVisualField {
    private PdfAcroFormChoiceFieldController controller;
    protected PdfAcroFormChoiceFieldController Controller { get; }
    internal List`1<PdfOptionsFormFieldOption> Values { get; }
    internal IList`1<string> SelectedValues { get; }
    internal bool IsMultiSelect { get; }
    protected PdfAcroFormChoiceField(string name, int pageNumber, PdfRectangle rectangle);
    protected PdfAcroFormChoiceFieldController get_Controller();
    internal List`1<PdfOptionsFormFieldOption> get_Values();
    internal IList`1<string> get_SelectedValues();
    internal bool get_IsMultiSelect();
    public void AddValue(string displayValue, string exportValue);
    public void AddValue(string displayValue);
    public void ClearValues();
    public void SetSelected(int index, bool value);
    public bool SelectValue(string exportValue);
    public void ClearSelection();
    public void AddWidget(PdfRectangle rectangle);
    public void AddWidget(int pageNumber, PdfRectangle rectangle);
    public void ClearWidgets();
    internal void ApplyController(PdfAcroFormChoiceFieldController controller);
}
public class DevExpress.Pdf.PdfAcroFormComboBoxField : PdfAcroFormChoiceField {
    [CompilerGeneratedAttribute]
private PdfAcroFormValueFormat <ValueFormat>k__BackingField;
    public bool Editable { get; public set; }
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    public PdfAcroFormValueFormat ValueFormat { get; public set; }
    public PdfAcroFormComboBoxField(string name, int pageNumber, PdfRectangle rect);
    public bool get_Editable();
    public void set_Editable(bool value);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public PdfAcroFormValueFormat get_ValueFormat();
    [CompilerGeneratedAttribute]
public void set_ValueFormat(PdfAcroFormValueFormat value);
    protected virtual PdfInteractiveFormField CreateCommonVisualField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormFieldProperties properties);
    protected virtual PdfAdditionalActions CreateAdditionalActions(PdfDocument document);
}
public abstract class DevExpress.Pdf.PdfAcroFormCommonVisualField : PdfAcroFormVisualField {
    private PdfRectangle _rectangle;
    private List`1<WidgetLocation> widgetLocations;
    [CompilerGeneratedAttribute]
private PdfAcroFormStringAlignment <TextAlignment>k__BackingField;
    public PdfRectangle Rectangle { get; public set; }
    public PdfAcroFormStringAlignment TextAlignment { get; public set; }
    protected PdfTextJustification TextJustification { get; }
    protected PdfAcroFormCommonVisualField(string name, int pageNumber, PdfRectangle rectangle);
    public PdfRectangle get_Rectangle();
    public void set_Rectangle(PdfRectangle value);
    [CompilerGeneratedAttribute]
public PdfAcroFormStringAlignment get_TextAlignment();
    [CompilerGeneratedAttribute]
public void set_TextAlignment(PdfAcroFormStringAlignment value);
    protected PdfTextJustification get_TextJustification();
    protected void AddWidgetLocation(int pageNumber, PdfRectangle rectangle);
    protected void AddWidgetLocation(PdfRectangle rect);
    protected void ClearWidgetLocations();
    protected virtual Byte[] CreateAppearanceCommands(IPdfExportFontProvider fontSearch, PdfDocument document);
    private PdfWidgetAnnotation CreateMainWidget(PdfDocument document);
    protected virtual PdfAdditionalActions CreateAdditionalActions(PdfDocument document);
    protected internal virtual PdfInteractiveFormField CreateFormField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormField parent);
    protected abstract virtual PdfInteractiveFormField CreateCommonVisualField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormFieldProperties properties);
}
public enum DevExpress.Pdf.PdfAcroFormCurrencyStyle : Enum {
    public int value__;
    public static PdfAcroFormCurrencyStyle None;
    public static PdfAcroFormCurrencyStyle Before;
    public static PdfAcroFormCurrencyStyle BeforeWithSpace;
    public static PdfAcroFormCurrencyStyle After;
    public static PdfAcroFormCurrencyStyle AfterWithSpace;
}
public class DevExpress.Pdf.PdfAcroFormFacade : object {
    private PdfDocumentStateBase state;
    private Dictionary`2<string, PdfFormFieldFacade> fields;
    private PdfFormFieldFacadeTreeNode facadeTree;
    internal PdfAcroFormFacade(PdfDocumentStateBase state);
    private void CreateFacadeTree();
    public IEnumerable`1<string> GetNames();
    public PdfFormFieldFacade GetFormField(string fullName);
    public PdfButtonFormFieldFacade GetButtonFormField(string fullName);
    public PdfCheckBoxFormFieldFacade GetCheckBoxFormField(string fullName);
    public PdfRadioGroupFormFieldFacade GetRadioGroupFormField(string fullName);
    public PdfComboBoxFormFieldFacade GetComboBoxFormField(string fullName);
    public PdfListBoxFormFieldFacade GetListBoxFormField(string fullName);
    public PdfTextFormFieldFacade GetTextFormField(string fullName);
    public PdfSignatureFormFieldFacade GetSignatureFormField(string fullName);
    public IEnumerable`1<PdfFormFieldFacade> GetFields();
    internal void Flatten(string fullName);
    internal void ResetFormFieldCache();
}
public abstract class DevExpress.Pdf.PdfAcroFormField : object {
    private static string period;
    private string name;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string Name { get; public set; }
    public string ToolTip { get; public set; }
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    protected PdfAcroFormField(string name);
    public static PdfAcroFormTextBoxField CreateTextBox(string name, int pageNumber, PdfRectangle rect);
    public static PdfAcroFormListBoxField CreateListBox(string name, int pageNumber, PdfRectangle rect);
    public static PdfAcroFormComboBoxField CreateComboBox(string name, int pageNumber, PdfRectangle rect);
    public static PdfAcroFormCheckBoxField CreateCheckBox(string name, int pageNumber, PdfRectangle rect);
    public static PdfAcroFormRadioGroupField CreateRadioGroup(string name, int pageNumber);
    public static PdfAcroFormSignatureField CreateSignature(string name, int pageNumber, PdfRectangle rect);
    public static PdfAcroFormGroupField CreateGroup(string name);
    internal static void ValidateName(string name);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
public void set_ToolTip(string value);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
    internal virtual void CollectNameCollisionInfo(IList`1<PdfAcroFormFieldNameCollision> infos);
    protected internal abstract virtual PdfInteractiveFormField CreateFormField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormField parent);
}
public class DevExpress.Pdf.PdfAcroFormFieldAppearance : object {
    private PdfAcroFormBorderAppearance borderAppearance;
    private string fontFamily;
    private double fontSize;
    [CompilerGeneratedAttribute]
private PdfRGBColor <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRGBColor <ForeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfFontStyle <FontStyle>k__BackingField;
    public PdfRGBColor BackgroundColor { get; public set; }
    public PdfRGBColor ForeColor { get; public set; }
    public PdfFontStyle FontStyle { get; public set; }
    public PdfAcroFormBorderAppearance BorderAppearance { get; public set; }
    public string FontFamily { get; public set; }
    public double FontSize { get; public set; }
    [CompilerGeneratedAttribute]
public PdfRGBColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(PdfRGBColor value);
    [CompilerGeneratedAttribute]
public PdfRGBColor get_ForeColor();
    [CompilerGeneratedAttribute]
public void set_ForeColor(PdfRGBColor value);
    [CompilerGeneratedAttribute]
public PdfFontStyle get_FontStyle();
    [CompilerGeneratedAttribute]
public void set_FontStyle(PdfFontStyle value);
    public PdfAcroFormBorderAppearance get_BorderAppearance();
    public void set_BorderAppearance(PdfAcroFormBorderAppearance value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public double get_FontSize();
    public void set_FontSize(double value);
}
public class DevExpress.Pdf.PdfAcroFormFieldNameCollision : ValueType {
    private PdfAcroFormField field;
    private ISet`1<string> forbiddenNames;
    public PdfAcroFormField Field { get; }
    public ISet`1<string> ForbiddenNames { get; }
    internal PdfAcroFormFieldNameCollision(PdfAcroFormField field, ISet`1<string> forbiddenNames);
    public PdfAcroFormField get_Field();
    public ISet`1<string> get_ForbiddenNames();
}
public enum DevExpress.Pdf.PdfAcroFormFieldRotation : Enum {
    public int value__;
    public static PdfAcroFormFieldRotation Rotate0;
    public static PdfAcroFormFieldRotation Rotate90;
    public static PdfAcroFormFieldRotation Rotate180;
    public static PdfAcroFormFieldRotation Rotate270;
}
public class DevExpress.Pdf.PdfAcroFormGroupField : PdfAcroFormField {
    private PdfAcroFormGroupFieldChildrenCollection children;
    public IList`1<PdfAcroFormField> Children { get; }
    public PdfAcroFormGroupField(string name);
    public IList`1<PdfAcroFormField> get_Children();
    internal virtual void CollectNameCollisionInfo(IList`1<PdfAcroFormFieldNameCollision> infoes);
    protected internal virtual PdfInteractiveFormField CreateFormField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormField parent);
}
public class DevExpress.Pdf.PdfAcroFormListBoxField : PdfAcroFormChoiceField {
    private int topIndex;
    public int TopIndex { get; public set; }
    public bool MultiSelect { get; public set; }
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    public PdfAcroFormListBoxField(string name, int pageNumber, PdfRectangle rectangle);
    public int get_TopIndex();
    public void set_TopIndex(int value);
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
    protected virtual PdfInteractiveFormField CreateCommonVisualField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormFieldProperties properties);
}
[FlagsAttribute]
public enum DevExpress.Pdf.PdfAcroFormNegativeNumberStyle : Enum {
    public int value__;
    public static PdfAcroFormNegativeNumberStyle None;
    public static PdfAcroFormNegativeNumberStyle UseRedText;
    public static PdfAcroFormNegativeNumberStyle ShowParentheses;
}
public enum DevExpress.Pdf.PdfAcroFormNumberSeparatorStyle : Enum {
    public int value__;
    public static PdfAcroFormNumberSeparatorStyle CommaDot;
    public static PdfAcroFormNumberSeparatorStyle Dot;
    public static PdfAcroFormNumberSeparatorStyle DotComma;
    public static PdfAcroFormNumberSeparatorStyle Comma;
    public static PdfAcroFormNumberSeparatorStyle ApostropheDot;
}
public class DevExpress.Pdf.PdfAcroFormRadioGroupField : PdfAcroFormVisualField {
    private PdfAcroFormRadioGroupFieldController`1<WidgetLocation> buttonController;
    private PdfAcroFormButtonStyle buttonStyle;
    private bool shouldPressedAppearance;
    public PdfAcroFormButtonStyle ButtonStyle { get; public set; }
    public int SelectedIndex { get; public set; }
    public int RadioButtonCount { get; }
    public bool ShouldGeneratePressedAppearance { get; public set; }
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    public PdfAcroFormRadioGroupField(string name, int pageNumber);
    public PdfAcroFormButtonStyle get_ButtonStyle();
    public void set_ButtonStyle(PdfAcroFormButtonStyle value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public int get_RadioButtonCount();
    public bool get_ShouldGeneratePressedAppearance();
    public void set_ShouldGeneratePressedAppearance(bool value);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
    public void AddButton(string name, PdfRectangle rect);
    public void AddButton(string name, int pageNumber, PdfRectangle rect);
    public void ClearButtons();
    protected virtual PdfWidgetAnnotationBuilder CreateWidgetBuilder(PdfRectangle rect);
    protected internal virtual PdfInteractiveFormField CreateFormField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormField parent);
}
public class DevExpress.Pdf.PdfAcroFormSignatureField : PdfAcroFormCommonVisualField {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAcroFormStringAlignment <LineAlignment>k__BackingField;
    public string Text { get; public set; }
    public PdfAcroFormStringAlignment LineAlignment { get; public set; }
    public PdfAcroFormSignatureField(string name, int pageNumber, PdfRectangle rect);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public PdfAcroFormStringAlignment get_LineAlignment();
    [CompilerGeneratedAttribute]
public void set_LineAlignment(PdfAcroFormStringAlignment value);
    protected virtual PdfInteractiveFormField CreateCommonVisualField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormFieldProperties properties);
}
public enum DevExpress.Pdf.PdfAcroFormSpecialFormatType : Enum {
    public int value__;
    public static PdfAcroFormSpecialFormatType FiveDigitZipCode;
    public static PdfAcroFormSpecialFormatType NineDigitZipCode;
    public static PdfAcroFormSpecialFormatType PhoneNumber;
    public static PdfAcroFormSpecialFormatType SocialSecurityNumber;
}
public enum DevExpress.Pdf.PdfAcroFormStringAlignment : Enum {
    public int value__;
    public static PdfAcroFormStringAlignment Near;
    public static PdfAcroFormStringAlignment Center;
    public static PdfAcroFormStringAlignment Far;
}
public class DevExpress.Pdf.PdfAcroFormTextBoxField : PdfAcroFormCommonVisualField {
    private int maxLength;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SpellCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Scrollable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiline>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAcroFormTextFieldType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAcroFormValueFormat <ValueFormat>k__BackingField;
    public string Text { get; public set; }
    public bool SpellCheck { get; public set; }
    public bool Scrollable { get; public set; }
    public bool Multiline { get; public set; }
    public PdfAcroFormTextFieldType Type { get; public set; }
    public int MaxLength { get; public set; }
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    public PdfAcroFormValueFormat ValueFormat { get; public set; }
    public PdfAcroFormTextBoxField(string name, int pageNumber, PdfRectangle rectangle);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_SpellCheck();
    [CompilerGeneratedAttribute]
public void set_SpellCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_Scrollable();
    [CompilerGeneratedAttribute]
public void set_Scrollable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Multiline();
    [CompilerGeneratedAttribute]
public void set_Multiline(bool value);
    [CompilerGeneratedAttribute]
public PdfAcroFormTextFieldType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PdfAcroFormTextFieldType value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
    [CompilerGeneratedAttribute]
public PdfAcroFormValueFormat get_ValueFormat();
    [CompilerGeneratedAttribute]
public void set_ValueFormat(PdfAcroFormValueFormat value);
    public void AddWidget(PdfRectangle rectangle);
    public void AddWidget(int pageNumber, PdfRectangle rectangle);
    public void ClearWidgets();
    protected virtual PdfInteractiveFormField CreateCommonVisualField(IPdfExportFontProvider fontSearch, PdfDocument document, PdfInteractiveFormFieldProperties properties);
    protected virtual PdfAdditionalActions CreateAdditionalActions(PdfDocument document);
}
public enum DevExpress.Pdf.PdfAcroFormTextFieldType : Enum {
    public int value__;
    public static PdfAcroFormTextFieldType PlainText;
    public static PdfAcroFormTextFieldType Password;
    public static PdfAcroFormTextFieldType FileSelect;
}
public class DevExpress.Pdf.PdfAcroFormValueFormat : object {
    [CompilerGeneratedAttribute]
private string <KeystrokeScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidateScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CalculateScript>k__BackingField;
    public string KeystrokeScript { get; public set; }
    public string FormatScript { get; public set; }
    public string ValidateScript { get; public set; }
    public string CalculateScript { get; public set; }
    public static PdfAcroFormValueFormat CreateDateTimeFormat(string format);
    public static PdfAcroFormValueFormat CreateTimeFormat(string format);
    public static PdfAcroFormValueFormat CreatePercentFormat(int decimalPlaces, PdfAcroFormNumberSeparatorStyle separatorStyle);
    public static PdfAcroFormValueFormat CreateSpecialFormat(PdfAcroFormSpecialFormatType format);
    public static PdfAcroFormValueFormat CreateSpecialFormat(string formatMask);
    public static PdfAcroFormValueFormat CreateNumberFormat(int decimalPlaces, PdfAcroFormNumberSeparatorStyle separatorStyle);
    public static PdfAcroFormValueFormat CreateNumberFormat(int decimalPlaces, PdfAcroFormNumberSeparatorStyle separatorStyle, string currencySymbol, PdfAcroFormCurrencyStyle currencyStyle, PdfAcroFormNegativeNumberStyle negativeNumberStyle);
    [CompilerGeneratedAttribute]
public string get_KeystrokeScript();
    [CompilerGeneratedAttribute]
public void set_KeystrokeScript(string value);
    [CompilerGeneratedAttribute]
public string get_FormatScript();
    [CompilerGeneratedAttribute]
public void set_FormatScript(string value);
    [CompilerGeneratedAttribute]
public string get_ValidateScript();
    [CompilerGeneratedAttribute]
public void set_ValidateScript(string value);
    [CompilerGeneratedAttribute]
public string get_CalculateScript();
    [CompilerGeneratedAttribute]
public void set_CalculateScript(string value);
}
public abstract class DevExpress.Pdf.PdfAcroFormVisualField : PdfAcroFormField {
    private int pageNumber;
    private bool readOnly;
    private bool required;
    private bool visible;
    private bool print;
    private PdfAcroFormFieldAppearance appearance;
    [CompilerGeneratedAttribute]
private PdfAcroFormFieldRotation <Rotation>k__BackingField;
    public int PageNumber { get; public set; }
    public bool ReadOnly { get; public set; }
    public bool Required { get; public set; }
    public bool Visible { get; public set; }
    public bool Print { get; public set; }
    public PdfAcroFormFieldAppearance Appearance { get; public set; }
    public PdfAcroFormFieldRotation Rotation { get; public set; }
    protected internal PdfInteractiveFormFieldFlags Flags { get; }
    protected PdfAnnotationFlags AnnotationFlags { get; }
    protected PdfAcroFormVisualField(string name, int pageNumber);
    private static void ValidatePageNumber(int pageNumber);
    public int get_PageNumber();
    public void set_PageNumber(int value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool get_Print();
    public void set_Print(bool value);
    public PdfAcroFormFieldAppearance get_Appearance();
    public void set_Appearance(PdfAcroFormFieldAppearance value);
    [CompilerGeneratedAttribute]
public PdfAcroFormFieldRotation get_Rotation();
    [CompilerGeneratedAttribute]
public void set_Rotation(PdfAcroFormFieldRotation value);
    protected internal virtual PdfInteractiveFormFieldFlags get_Flags();
    protected virtual PdfAnnotationFlags get_AnnotationFlags();
    protected PdfWidgetAnnotation CreateWidget(PdfDocument document, int pageIndex, PdfRectangle rectangle);
    protected virtual PdfWidgetAnnotationBuilder CreateWidgetBuilder(PdfRectangle rect);
}
public abstract class DevExpress.Pdf.PdfAction : PdfObject {
    internal static string DictionaryType;
    internal static string ActionTypeDictionaryKey;
    private static string nextActionDictionaryKey;
    private PdfDocumentCatalog documentCatalog;
    private List`1<PdfAction> next;
    private object nextValue;
    public IEnumerable`1<PdfAction> Next { get; }
    internal PdfDocumentCatalog DocumentCatalog { get; }
    protected string ActionType { get; }
    protected PdfAction(PdfDocument document);
    protected PdfAction(PdfDocumentCatalog documentCatalog);
    protected PdfAction(PdfReaderDictionary dictionary);
    internal static PdfAction Parse(PdfReaderDictionary actionDictionary);
    public IEnumerable`1<PdfAction> get_Next();
    internal PdfDocumentCatalog get_DocumentCatalog();
    protected abstract virtual string get_ActionType();
    private void EnsureNextActions();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual void Execute(IPdfInteractiveOperationController interactiveOperationController, IList`1<PdfPage> pages);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfAlphaSoftMask : PdfCustomSoftMask {
    internal static string Name;
    protected string ActualName { get; }
    internal PdfAlphaSoftMask(PdfReaderDictionary dictionary);
    protected virtual string get_ActualName();
}
public abstract class DevExpress.Pdf.PdfAnnotation : PdfObject {
    internal static string DictionaryType;
    internal static string PageDictionaryKey;
    private static string rectDictionaryKey;
    private static string contentsDictionaryKey;
    private static string nameDictionaryKey;
    private static string modifiedDictionaryKey;
    private static string flagsDictionaryKey;
    private static string appearanceNameDictionaryKey;
    private static string appearanceDictionaryKey;
    private static string borderDictionaryKey;
    private static string colorDictionaryKey;
    private static string structParentDictionaryKey;
    private PdfDocumentCatalog documentCatalog;
    private PdfPage page;
    private PdfRectangle rect;
    private string contents;
    private string name;
    private Nullable`1<DateTimeOffset> modified;
    private PdfAnnotationFlags flags;
    private PdfAnnotationBorder border;
    private PdfColor color;
    private Nullable`1<int> structParent;
    private PdfOptionalContent optionalContent;
    private PdfAnnotationAppearances appearance;
    private string appearanceName;
    private PdfReaderDictionary dictionary;
    private EditAppearanceStorage editAppearances;
    public PdfPage Page { get; }
    public PdfRectangle Rect { get; internal set; }
    public string Contents { get; internal set; }
    public string Name { get; internal set; }
    public Nullable`1<DateTimeOffset> Modified { get; internal set; }
    public PdfAnnotationFlags Flags { get; public set; }
    public PdfAnnotationBorder Border { get; internal set; }
    public PdfColor Color { get; internal set; }
    public Nullable`1<int> StructParent { get; }
    public PdfOptionalContent OptionalContent { get; }
    public PdfAnnotationAppearances Appearance { get; }
    public string AppearanceName { get; public set; }
    protected PdfDocumentCatalog DocumentCatalog { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    private Nullable`1<int> DevExpress.Pdf.Native.IPdfStructureElementOwner.StructParents { get; private set; }
    protected PdfAnnotation(PdfPage page, IPdfAnnotationBuilder builder);
    protected PdfAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    internal static PdfAnnotation Parse(PdfPage page, PdfReaderDictionary dictionary);
    internal static PdfColor ParseColor(PdfReaderDictionary dictionary, string key);
    public PdfPage get_Page();
    public PdfRectangle get_Rect();
    internal void set_Rect(PdfRectangle value);
    public string get_Contents();
    internal void set_Contents(string value);
    public string get_Name();
    internal void set_Name(string value);
    public Nullable`1<DateTimeOffset> get_Modified();
    internal void set_Modified(Nullable`1<DateTimeOffset> value);
    public PdfAnnotationFlags get_Flags();
    public void set_Flags(PdfAnnotationFlags value);
    public PdfAnnotationBorder get_Border();
    internal void set_Border(PdfAnnotationBorder value);
    public PdfColor get_Color();
    internal void set_Color(PdfColor value);
    public Nullable`1<int> get_StructParent();
    public PdfOptionalContent get_OptionalContent();
    public PdfAnnotationAppearances get_Appearance();
    public string get_AppearanceName();
    public void set_AppearanceName(string value);
    protected PdfDocumentCatalog get_DocumentCatalog();
    protected internal abstract virtual string get_SubtypeName();
    internal abstract virtual PdfAnnotationType get_AnnotationType();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Ensure();
    protected virtual void ResolveDictionary(PdfReaderDictionary dictionary);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    private sealed virtual override Nullable`1<int> DevExpress.Pdf.Native.IPdfStructureElementOwner.get_StructParents();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfStructureElementOwner.set_StructParents(Nullable`1<int> value);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
    protected internal virtual PdfRectangle GetAppearanceFormBoundingBox();
    internal void SetAppearanceForm(PdfAnnotationAppearanceState appearanceState, string appearanceName, PdfForm form);
    internal virtual PdfForm EnsurePaintForm(IPdfExportFontProvider fontProvider, PdfAnnotationAppearanceState appearanceState);
    internal virtual PdfForm GetAppearanceForm(PdfAnnotationAppearanceState appearanceState);
    protected PdfForm GetAppearanceForm(PdfAnnotationAppearanceState appearanceState, string appearanceName);
    protected virtual bool ShouldRecreateAppearance(PdfForm form, PdfAnnotationAppearanceState appearanceState, string appearanceName);
    protected PdfForm EnsurePaintForm(IPdfExportFontProvider fontProvider, PdfAnnotationAppearanceState appearanceState, string appearanceName);
    protected PdfForm RebuildAppearance(IPdfExportFontProvider fontProvider, PdfAnnotationAppearanceState appearanceState, string appearanceName, bool forceCreateForm);
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    internal virtual void RebuildAppearance(IPdfExportFontProvider fontProvider);
    internal PdfForm CreateAppearanceForm(PdfAnnotationAppearanceState state, string appearanceName);
    internal PdfForm CreateAppearanceForm(PdfAnnotationAppearanceState state);
}
public class DevExpress.Pdf.PdfAnnotationActions : object {
    internal static string CursorEnteredDictionaryKey;
    internal static string CursorExitedDictionaryKey;
    internal static string MouseButtonPressedDictionaryKey;
    internal static string MouseButtonReleasedDictionaryKey;
    internal static string InputFocusReceivedDictionaryKey;
    internal static string InputFocusLostDictionaryKey;
    internal static string PageOpenedDictionaryKey;
    internal static string PageClosedDictionaryKey;
    internal static string PageBecameVisibleDictionaryKey;
    internal static string PageBecameInvisibleDictionaryKey;
    private PdfAction cursorEntered;
    private PdfAction cursorExited;
    private PdfAction mouseButtonPressed;
    private PdfAction mouseButtonReleased;
    private PdfAction inputFocusReceived;
    private PdfAction inputFocusLost;
    private PdfAction pageOpened;
    private PdfAction pageClosed;
    private PdfAction pageBecameVisible;
    private PdfAction pageBecameInvisible;
    public PdfAction CursorEntered { get; }
    public PdfAction CursorExited { get; }
    public PdfAction MouseButtonPressed { get; }
    public PdfAction MouseButtonReleased { get; }
    public PdfAction InputFocusReceived { get; }
    public PdfAction InputFocusLost { get; }
    public PdfAction PageOpened { get; }
    public PdfAction PageClosed { get; }
    public PdfAction PageBecameVisible { get; }
    public PdfAction PageBecameInvisible { get; }
    internal PdfAnnotationActions(PdfReaderDictionary dictionary);
    internal PdfAnnotationActions(PdfAction mouseButtonReleased);
    public PdfAction get_CursorEntered();
    public PdfAction get_CursorExited();
    public PdfAction get_MouseButtonPressed();
    public PdfAction get_MouseButtonReleased();
    public PdfAction get_InputFocusReceived();
    public PdfAction get_InputFocusLost();
    public PdfAction get_PageOpened();
    public PdfAction get_PageClosed();
    public PdfAction get_PageBecameVisible();
    public PdfAction get_PageBecameInvisible();
    internal PdfWriterDictionary FillDictionary(PdfWriterDictionary dictionary);
}
public class DevExpress.Pdf.PdfAnnotationAppearance : object {
    private PdfForm defaultForm;
    private Dictionary`2<string, PdfForm> forms;
    public PdfForm DefaultForm { get; }
    public IDictionary`2<string, PdfForm> Forms { get; }
    private PdfAnnotationAppearance(PdfForm defaultForm, Dictionary`2<string, PdfForm> forms);
    internal PdfAnnotationAppearance(PdfDocumentCatalog documentCatalog, PdfRectangle bBox);
    internal static PdfAnnotationAppearance Parse(PdfReaderDictionary dictionary, string key);
    public PdfForm get_DefaultForm();
    public IDictionary`2<string, PdfForm> get_Forms();
    internal void SetForm(string name, PdfForm form);
    internal List`1<string> GetNames(string defaultName);
    internal object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfAnnotationAppearances : PdfObject {
    internal static string NormalAppearanceDictionaryKey;
    private static string rolloverAppearanceDictionaryKey;
    private static string downAppearanceDictionaryKey;
    private PdfAnnotationAppearance normal;
    private PdfAnnotationAppearance rollover;
    private PdfAnnotationAppearance down;
    private PdfForm form;
    public PdfAnnotationAppearance Normal { get; }
    public PdfAnnotationAppearance Rollover { get; }
    public PdfAnnotationAppearance Down { get; }
    public PdfForm Form { get; }
    internal IList`1<string> Names { get; }
    internal PdfAnnotationAppearances(PdfDocumentCatalog documentCatalog, PdfRectangle bBox);
    internal PdfAnnotationAppearances(PdfReaderDictionary dictionary, PdfRectangle parentBBox);
    internal PdfAnnotationAppearances(PdfForm form);
    public PdfAnnotationAppearance get_Normal();
    public PdfAnnotationAppearance get_Rollover();
    public PdfAnnotationAppearance get_Down();
    public PdfForm get_Form();
    internal IList`1<string> get_Names();
    internal void SetForm(PdfAnnotationAppearanceState state, string name, PdfForm form);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfAnnotationBorder : object {
    private static double defaultHorizontalCornerRadius;
    private static double defaultVerticalCornerRadius;
    private static double defaultLineWidth;
    private double horizontalCornerRadius;
    private double verticalCornerRadius;
    private double lineWidth;
    private PdfLineStyle lineStyle;
    public double HorizontalCornerRadius { get; }
    public double VerticalCornerRadius { get; }
    public double LineWidth { get; }
    public PdfLineStyle LineStyle { get; }
    public bool IsDefault { get; }
    internal PdfAnnotationBorder(double width);
    internal PdfAnnotationBorder(PdfReaderArray values);
    public double get_HorizontalCornerRadius();
    public double get_VerticalCornerRadius();
    public double get_LineWidth();
    public PdfLineStyle get_LineStyle();
    public bool get_IsDefault();
    protected internal object ToWritableObject();
}
public class DevExpress.Pdf.PdfAnnotationBorderEffect : object {
    internal static string DictionaryKey;
    private static string styleKey;
    private static string intensityKey;
    private PdfAnnotationBorderEffectStyle style;
    private double intensity;
    public PdfAnnotationBorderEffectStyle Style { get; public set; }
    public double Intensity { get; public set; }
    internal PdfAnnotationBorderEffect(PdfAnnotationBorderEffectStyle style, double intensity);
    private PdfAnnotationBorderEffect(PdfReaderDictionary dictionary);
    internal static PdfAnnotationBorderEffect Parse(PdfReaderDictionary dictionary);
    public PdfAnnotationBorderEffectStyle get_Style();
    public void set_Style(PdfAnnotationBorderEffectStyle value);
    public double get_Intensity();
    public void set_Intensity(double value);
    internal PdfWriterDictionary ToWritableObject();
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfAnnotationBorderEffectStyle : Enum {
    public int value__;
    [PdfFieldNameAttribute("S")]
public static PdfAnnotationBorderEffectStyle NoEffect;
    [PdfFieldNameAttribute("C")]
public static PdfAnnotationBorderEffectStyle CloudyEffect;
}
public class DevExpress.Pdf.PdfAnnotationBorderStyle : PdfObject {
    internal static string DictionaryKey;
    private static string widthDictionaryKey;
    private static string styleDictionaryKey;
    private static string lineStyleDictionaryKey;
    public static string SolidStyleName;
    public static string DashedStyleName;
    public static string BeveledStyleName;
    public static string InsetStyleName;
    public static string UnderlineStyleName;
    private static double defaultWidth;
    private double width;
    private string styleName;
    private PdfLineStyle lineStyle;
    public double Width { get; internal set; }
    public string StyleName { get; internal set; }
    public PdfLineStyle LineStyle { get; internal set; }
    internal double BorderWidth { get; }
    internal PdfAnnotationBorderStyle(IPdfAnnotationBorderStyleBuilder builder);
    private PdfAnnotationBorderStyle(PdfReaderDictionary dictionary);
    internal static PdfAnnotationBorderStyle Parse(PdfReaderDictionary dictionary);
    internal static PdfLineStyle ParseLineStyle(PdfReaderArray array);
    public double get_Width();
    internal void set_Width(double value);
    public string get_StyleName();
    internal void set_StyleName(string value);
    public PdfLineStyle get_LineStyle();
    internal void set_LineStyle(PdfLineStyle value);
    internal double get_BorderWidth();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfAnnotationCallout : object {
    private PdfPoint startPoint;
    private Nullable`1<PdfPoint> kneePoint;
    private PdfPoint endPoint;
    public PdfPoint StartPoint { get; }
    public Nullable`1<PdfPoint> KneePoint { get; }
    public PdfPoint EndPoint { get; }
    internal PdfAnnotationCallout(PdfPoint startPoint, Nullable`1<PdfPoint> kneePoint, PdfPoint endPoint);
    internal PdfAnnotationCallout(PdfReaderArray array);
    public PdfPoint get_StartPoint();
    public Nullable`1<PdfPoint> get_KneePoint();
    public PdfPoint get_EndPoint();
    internal IList`1<double> ToWritableObject();
}
public class DevExpress.Pdf.PdfAnnotationData : object {
    private IPdfAnnotationState state;
    public PdfRectangle Bounds { get; }
    public PdfAnnotationType AnnotationType { get; }
    public string Name { get; public set; }
    public PdfRGBColor Color { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Contents { get; public set; }
    internal Guid CollectionID { get; }
    internal PdfAnnotationData(IPdfAnnotationState state);
    public PdfRectangle get_Bounds();
    public PdfAnnotationType get_AnnotationType();
    public string get_Name();
    public void set_Name(string value);
    public PdfRGBColor get_Color();
    public void set_Color(PdfRGBColor value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public string get_Contents();
    public void set_Contents(string value);
    internal Guid get_CollectionID();
    internal void Remove();
}
public class DevExpress.Pdf.PdfAnnotationFacade : object {
    private IPdfAnnotationState annotationState;
    public PdfAnnotationType Type { get; }
    public PdfRectangle Rectangle { get; public set; }
    public string Name { get; public set; }
    public PdfRGBColor Color { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Contents { get; public set; }
    public PdfAnnotationFlags Flags { get; public set; }
    internal IPdfAnnotationState AnnotationState { get; }
    protected PdfAnnotationFacade(IPdfAnnotationState annotation);
    internal static PdfAnnotationFacade Create(IPdfAnnotationState state);
    public PdfAnnotationType get_Type();
    public PdfRectangle get_Rectangle();
    public void set_Rectangle(PdfRectangle value);
    public string get_Name();
    public void set_Name(string value);
    public PdfRGBColor get_Color();
    public void set_Color(PdfRGBColor value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public string get_Contents();
    public void set_Contents(string value);
    public PdfAnnotationFlags get_Flags();
    public void set_Flags(PdfAnnotationFlags value);
    internal IPdfAnnotationState get_AnnotationState();
    public void Flatten();
    public void Remove();
    public void RebuildAppearance();
}
[FlagsAttribute]
public enum DevExpress.Pdf.PdfAnnotationFlags : Enum {
    public int value__;
    public static PdfAnnotationFlags None;
    public static PdfAnnotationFlags Invisible;
    public static PdfAnnotationFlags Hidden;
    public static PdfAnnotationFlags Print;
    public static PdfAnnotationFlags NoZoom;
    public static PdfAnnotationFlags NoRotate;
    public static PdfAnnotationFlags NoView;
    public static PdfAnnotationFlags ReadOnly;
    public static PdfAnnotationFlags Locked;
    public static PdfAnnotationFlags ToggleNoView;
    public static PdfAnnotationFlags LockedContents;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfAnnotationHighlightingMode : Enum {
    public int value__;
    [PdfFieldNameAttribute("N")]
public static PdfAnnotationHighlightingMode None;
    [PdfFieldNameAttribute("I")]
public static PdfAnnotationHighlightingMode Invert;
    [PdfFieldNameAttribute("O")]
public static PdfAnnotationHighlightingMode Outline;
    [PdfFieldNameAttribute("P")]
public static PdfAnnotationHighlightingMode Push;
    [PdfFieldNameAttribute("T")]
public static PdfAnnotationHighlightingMode Toggle;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfAnnotationLineEndingStyle : Enum {
    public int value__;
    public static PdfAnnotationLineEndingStyle None;
    public static PdfAnnotationLineEndingStyle Square;
    public static PdfAnnotationLineEndingStyle Circle;
    public static PdfAnnotationLineEndingStyle Diamond;
    public static PdfAnnotationLineEndingStyle OpenArrow;
    public static PdfAnnotationLineEndingStyle ClosedArrow;
    public static PdfAnnotationLineEndingStyle Butt;
    public static PdfAnnotationLineEndingStyle ROpenArrow;
    public static PdfAnnotationLineEndingStyle RClosedArrow;
    public static PdfAnnotationLineEndingStyle Slash;
}
public enum DevExpress.Pdf.PdfAnnotationReviewStatus : Enum {
    public int value__;
    public static PdfAnnotationReviewStatus None;
    public static PdfAnnotationReviewStatus Accepted;
    public static PdfAnnotationReviewStatus Rejected;
    public static PdfAnnotationReviewStatus Cancelled;
    public static PdfAnnotationReviewStatus Completed;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfAnnotationTabOrder : Enum {
    public int value__;
    [PdfFieldNameAttribute("R")]
public static PdfAnnotationTabOrder RowOrder;
    [PdfFieldNameAttribute("C")]
public static PdfAnnotationTabOrder ColumnOrder;
    [PdfFieldNameAttribute("S")]
public static PdfAnnotationTabOrder StructureOrder;
    [PdfFieldNameAttribute("A")]
public static PdfAnnotationTabOrder ArrayOrder;
    [PdfFieldNameAttribute("W")]
public static PdfAnnotationTabOrder WidgetOrder;
}
public enum DevExpress.Pdf.PdfAnnotationType : Enum {
    public int value__;
    public static PdfAnnotationType Link;
    public static PdfAnnotationType Widget;
    public static PdfAnnotationType Text;
    public static PdfAnnotationType TextMarkup;
    public static PdfAnnotationType Line;
    public static PdfAnnotationType Polygon;
    public static PdfAnnotationType PolyLine;
    public static PdfAnnotationType Square;
    public static PdfAnnotationType Circle;
    public static PdfAnnotationType FileAttachment;
    public static PdfAnnotationType FreeText;
    public static PdfAnnotationType Ink;
    public static PdfAnnotationType Redaction;
    public static PdfAnnotationType RubberStamp;
    public static PdfAnnotationType Sound;
    public static PdfAnnotationType Caret;
    public static PdfAnnotationType Movie;
    public static PdfAnnotationType Popup;
    public static PdfAnnotationType Screen;
    public static PdfAnnotationType PrinterMark;
    public static PdfAnnotationType TrapNet;
    public static PdfAnnotationType Watermark;
    public static PdfAnnotationType Annotation3D;
    public static PdfAnnotationType RichMedia;
    public static PdfAnnotationType Custom;
}
public class DevExpress.Pdf.PdfAppendBezierCurveCommand : PdfCommand {
    internal static string Name;
    private double x1;
    private double y1;
    private double x2;
    private double y2;
    private double x3;
    private double y3;
    public double X1 { get; }
    public double Y1 { get; }
    public double X2 { get; }
    public double Y2 { get; }
    public double X3 { get; }
    public double Y3 { get; }
    public PdfAppendBezierCurveCommand(double x1, double y1, double x2, double y2, double x3, double y3);
    internal PdfAppendBezierCurveCommand(PdfStack operands);
    public double get_X1();
    public double get_Y1();
    public double get_X2();
    public double get_Y2();
    public double get_X3();
    public double get_Y3();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfAppendBezierCurveWithNextControlPointCommand : PdfCommand {
    internal static string Name;
    private double x1;
    private double y1;
    private double x3;
    private double y3;
    public double X1 { get; }
    public double Y1 { get; }
    public double X3 { get; }
    public double Y3 { get; }
    public PdfAppendBezierCurveWithNextControlPointCommand(double x1, double y1, double x3, double y3);
    internal PdfAppendBezierCurveWithNextControlPointCommand(PdfStack operands);
    public double get_X1();
    public double get_Y1();
    public double get_X3();
    public double get_Y3();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfAppendBezierCurveWithPreviousControlPointCommand : PdfCommand {
    internal static string Name;
    private double x2;
    private double y2;
    private double x3;
    private double y3;
    public double X2 { get; }
    public double Y2 { get; }
    public double X3 { get; }
    public double Y3 { get; }
    public PdfAppendBezierCurveWithPreviousControlPointCommand(double x2, double y2, double x3, double y3);
    internal PdfAppendBezierCurveWithPreviousControlPointCommand(PdfStack operands);
    public double get_X2();
    public double get_Y2();
    public double get_X3();
    public double get_Y3();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfAppendLineSegmentCommand : PdfCommand {
    internal static string Name;
    private PdfPoint endPoint;
    public PdfPoint EndPoint { get; }
    public PdfAppendLineSegmentCommand(PdfPoint endPoint);
    internal PdfAppendLineSegmentCommand(PdfStack operands);
    public PdfPoint get_EndPoint();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfAppendRectangleCommand : PdfCommand {
    internal static string Name;
    private double x;
    private double y;
    private double width;
    private double height;
    public double X { get; }
    public double Y { get; }
    public double Width { get; }
    public double Height { get; }
    public PdfAppendRectangleCommand(double x, double y, double width, double height);
    internal PdfAppendRectangleCommand(PdfStack operands);
    public double get_X();
    public double get_Y();
    public double get_Width();
    public double get_Height();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfArticleThread : PdfObject {
    private static string firstBeadDictionaryKey;
    private static string threadInfoDictionaryKey;
    private PdfDocumentInfo threadInfo;
    private PdfBead firstBead;
    public string Title { get; public set; }
    public string Author { get; public set; }
    public string Subject { get; public set; }
    public string Keywords { get; public set; }
    public string Creator { get; public set; }
    public string Producer { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public Nullable`1<DateTimeOffset> ModDate { get; public set; }
    public DefaultBoolean Trapped { get; public set; }
    public PdfBead FirstBead { get; internal set; }
    internal PdfArticleThread(PdfReaderDictionary dictionary);
    internal static IList`1<PdfArticleThread> Parse(PdfDocumentCatalog catalog, PdfReaderArray array);
    public string get_Title();
    public void set_Title(string value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public string get_Creator();
    public void set_Creator(string value);
    public string get_Producer();
    public void set_Producer(string value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ModDate();
    public void set_ModDate(Nullable`1<DateTimeOffset> value);
    public DefaultBoolean get_Trapped();
    public void set_Trapped(DefaultBoolean value);
    public PdfBead get_FirstBead();
    internal void set_FirstBead(PdfBead value);
    private PdfBead CreateBead(PdfDocumentCatalog catalog, PdfObjectReference reference);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    [CompilerGeneratedAttribute]
private PdfBead <CreateBead>b__36_0(PdfReaderDictionary dictionary);
}
public class DevExpress.Pdf.PdfASCII85DecodeFilter : PdfFilter {
    internal static string Name;
    internal static string ShortName;
    private static int bufferSize;
    private static long maxAllowedValue;
    private static long multiplier1;
    private static long multiplier2;
    private static long multiplier3;
    private static long multiplier4;
    private static byte endBracket;
    private static Byte[] endToken;
    protected internal string FilterName { get; }
    internal Byte[] EodToken { get; }
    private static PdfASCII85DecodeFilter();
    private static bool IsSpaceSymbol(byte symbol);
    private static void DecodeBuffer(List`1<byte> result, Byte[] buffer, int count);
    protected internal virtual string get_FilterName();
    internal virtual Byte[] get_EodToken();
    protected internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.PdfASCIIHexDecodeFilter : PdfFilter {
    internal static string Name;
    internal static string ShortName;
    private static byte nullSymbol;
    private static byte horizontalTab;
    private static byte lineFeed;
    private static byte formFeed;
    private static byte carriageReturn;
    private static byte space;
    private static byte zero;
    private static byte one;
    private static byte two;
    private static byte three;
    private static byte four;
    private static byte five;
    private static byte six;
    private static byte seven;
    private static byte eight;
    private static byte nine;
    private static byte a;
    private static byte b;
    private static byte c;
    private static byte d;
    private static byte e;
    private static byte f;
    private static byte capitalA;
    private static byte capitalB;
    private static byte capitalC;
    private static byte capitalD;
    private static byte capitalE;
    private static byte capitalF;
    private static byte eod;
    private static Byte[] endToken;
    protected internal string FilterName { get; }
    internal Byte[] EodToken { get; }
    private static PdfASCIIHexDecodeFilter();
    protected internal virtual string get_FilterName();
    internal virtual Byte[] get_EodToken();
    protected internal virtual Byte[] Decode(Byte[] data);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfAssociatedFileRelationship : Enum {
    public int value__;
    public static PdfAssociatedFileRelationship Source;
    public static PdfAssociatedFileRelationship Data;
    public static PdfAssociatedFileRelationship Alternative;
    public static PdfAssociatedFileRelationship Supplement;
    public static PdfAssociatedFileRelationship EncryptedPayload;
    public static PdfAssociatedFileRelationship Unspecified;
}
public class DevExpress.Pdf.PdfAxialShading : PdfGradientShading {
    internal static int Type;
    private PdfPoint axisStart;
    private PdfPoint axisEnd;
    public PdfPoint AxisStart { get; }
    public PdfPoint AxisEnd { get; }
    protected int ShadingType { get; }
    internal PdfAxialShading(PdfReaderDictionary dictionary);
    internal PdfAxialShading(PdfPoint axisStart, PdfPoint axisEnd, PdfObjectList`1<PdfCustomFunction> blendFunctions);
    public PdfPoint get_AxisStart();
    public PdfPoint get_AxisEnd();
    protected virtual int get_ShadingType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfBaseEncoding : Enum {
    public int value__;
    public static PdfBaseEncoding Standard;
    public static PdfBaseEncoding MacRoman;
    public static PdfBaseEncoding WinAnsi;
}
public class DevExpress.Pdf.PdfBead : PdfObject {
    private static string dictionaryTypeName;
    private static string threadDictionaryKey;
    private static string nextDictionaryKey;
    private static string previousDictionaryKey;
    private static string pageDictionaryKey;
    private static string locationDictionaryKey;
    private int nextNumber;
    private int prevNumber;
    private PdfArticleThread thread;
    private PdfPage page;
    private PdfRectangle location;
    private PdfBead next;
    private PdfBead previous;
    internal int NextNumber { get; }
    internal int PrevNumber { get; }
    public PdfArticleThread Thread { get; }
    public PdfPage Page { get; }
    public PdfRectangle Location { get; }
    public PdfBead Next { get; internal set; }
    public PdfBead Previous { get; internal set; }
    internal PdfBead(PdfArticleThread thread, PdfReaderDictionary dictionary);
    internal int get_NextNumber();
    internal int get_PrevNumber();
    public PdfArticleThread get_Thread();
    public PdfPage get_Page();
    public PdfRectangle get_Location();
    public PdfBead get_Next();
    internal void set_Next(PdfBead value);
    public PdfBead get_Previous();
    internal void set_Previous(PdfBead value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfBeginPathCommand : PdfCommand {
    internal static string Name;
    private PdfPoint startPoint;
    public PdfPoint StartPoint { get; }
    public PdfBeginPathCommand(PdfPoint startPoint);
    internal PdfBeginPathCommand(PdfStack operands);
    public PdfPoint get_StartPoint();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfBeginTextCommand : PdfCommand {
    internal static string Name;
    private static PdfBeginTextCommand instance;
    internal static PdfBeginTextCommand Instance { get; }
    private static PdfBeginTextCommand();
    internal static PdfBeginTextCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfBezierCurve : ValueType {
    private PdfVertex vertex1;
    private PdfPoint controlPoint1;
    private PdfPoint controlPoint2;
    private PdfVertex vertex2;
    public PdfVertex Vertex1 { get; }
    public PdfPoint ControlPoint1 { get; }
    public PdfPoint ControlPoint2 { get; }
    public PdfVertex Vertex2 { get; }
    internal PdfBezierCurve(PdfVertex vertex1, PdfPoint controlPoint1, PdfPoint controlPoint2, PdfVertex vertex2);
    public PdfVertex get_Vertex1();
    public PdfPoint get_ControlPoint1();
    public PdfPoint get_ControlPoint2();
    public PdfVertex get_Vertex2();
}
public class DevExpress.Pdf.PdfBezierGraphicsPathSegment : PdfGraphicsPathSegment {
    private PdfPoint controlPoint1;
    private PdfPoint controlPoint2;
    public PdfPoint ControlPoint1 { get; }
    public PdfPoint ControlPoint2 { get; }
    protected internal bool Flat { get; }
    public PdfBezierGraphicsPathSegment(PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint endPoint);
    public PdfPoint get_ControlPoint1();
    public PdfPoint get_ControlPoint2();
    protected internal virtual bool get_Flat();
    protected internal virtual void GeneratePathSegmentCommands(IList`1<PdfCommand> commands);
    protected internal virtual void AddSegmentPoints(IList`1<PdfPoint> points);
}
public enum DevExpress.Pdf.PdfBlendMode : Enum {
    public int value__;
    public static PdfBlendMode Normal;
    public static PdfBlendMode Compatible;
    public static PdfBlendMode Multiply;
    public static PdfBlendMode Screen;
    public static PdfBlendMode Overlay;
    public static PdfBlendMode Darken;
    public static PdfBlendMode Lighten;
    public static PdfBlendMode ColorDodge;
    public static PdfBlendMode ColorBurn;
    public static PdfBlendMode HardLight;
    public static PdfBlendMode SoftLight;
    public static PdfBlendMode Difference;
    public static PdfBlendMode Exclusion;
    public static PdfBlendMode Hue;
    public static PdfBlendMode Saturation;
    public static PdfBlendMode Color;
    public static PdfBlendMode Luminosity;
}
public class DevExpress.Pdf.PdfBLSELayoutLogicalStructureElementAttribute : PdfLayoutLogicalStructureElementAttribute {
    private static string spaceBeforeKey;
    private static string spaceAfterKey;
    private static string startIndentKey;
    private static string endIndentKey;
    private static string textIndentKey;
    private static string textAlignKey;
    private static string bBoxKey;
    private static string widthKey;
    private static string heightKey;
    private static string blockAlignKey;
    private static string inlineAlignKey;
    private static string tBorderStyleKey;
    private static string tPaddingKey;
    internal static String[] Keys;
    private double spaceBefore;
    private double spaceAfter;
    private double startIndent;
    private double endIndent;
    private double textIndent;
    private PdfBLSELayoutLogicalStructureElementAttributeTextAlign textAlign;
    private PdfRectangle bBox;
    private Nullable`1<double> width;
    private Nullable`1<double> height;
    private PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign tableCellBlockAlign;
    private PdfBLSELayoutLogicalStructureElementAttributeTableCellInlineAlign tableCellInlineAlign;
    public double SpaceBefore { get; }
    public double SpaceAfter { get; }
    public double StartIndent { get; }
    public double EndIndent { get; }
    public double TextIndent { get; }
    public PdfBLSELayoutLogicalStructureElementAttributeTextAlign TextAlign { get; }
    public PdfRectangle BBox { get; }
    public Nullable`1<double> Width { get; }
    public Nullable`1<double> Height { get; }
    public PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign TableCellBlockAlign { get; }
    public PdfBLSELayoutLogicalStructureElementAttributeTableCellInlineAlign InlineAlign { get; }
    internal PdfBLSELayoutLogicalStructureElementAttribute(PdfReaderDictionary dictionary);
    private static PdfBLSELayoutLogicalStructureElementAttribute();
    private static Nullable`1<double> GetElementSize(object value);
    public double get_SpaceBefore();
    public double get_SpaceAfter();
    public double get_StartIndent();
    public double get_EndIndent();
    public double get_TextIndent();
    public PdfBLSELayoutLogicalStructureElementAttributeTextAlign get_TextAlign();
    public PdfRectangle get_BBox();
    public Nullable`1<double> get_Width();
    public Nullable`1<double> get_Height();
    public PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign get_TableCellBlockAlign();
    public PdfBLSELayoutLogicalStructureElementAttributeTableCellInlineAlign get_InlineAlign();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign : Enum {
    public int value__;
    public static PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign Before;
    public static PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign Middle;
    public static PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign After;
    public static PdfBLSELayoutLogicalStructureElementAttributeTableCellBlockAlign Justify;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfBLSELayoutLogicalStructureElementAttributeTableCellInlineAlign : Enum {
    public int value__;
    public static PdfBLSELayoutLogicalStructureElementAttributeTableCellInlineAlign Start;
    public static PdfBLSELayoutLogicalStructureElementAttributeTableCellInlineAlign Center;
    public static PdfBLSELayoutLogicalStructureElementAttributeTableCellInlineAlign End;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
[PdfSupportUndefinedValueAttribute]
public enum DevExpress.Pdf.PdfBLSELayoutLogicalStructureElementAttributeTextAlign : Enum {
    public int value__;
    public static PdfBLSELayoutLogicalStructureElementAttributeTextAlign Start;
    public static PdfBLSELayoutLogicalStructureElementAttributeTextAlign Center;
    public static PdfBLSELayoutLogicalStructureElementAttributeTextAlign End;
    public static PdfBLSELayoutLogicalStructureElementAttributeTextAlign Justify;
}
public class DevExpress.Pdf.PdfBookmark : object {
    private PdfAction action;
    private PdfBookmarkList children;
    private string title;
    private bool isItalic;
    private bool isBold;
    private bool isInitiallyClosed;
    private PdfDestinationObject destinationObject;
    private IPdfBookmarkParent parent;
    private PdfRGBColor textColor;
    internal IPdfBookmarkParent Parent { get; internal set; }
    internal PdfDestinationObject DestinationObject { get; }
    public string Title { get; public set; }
    public PdfDestination Destination { get; public set; }
    public PdfAction Action { get; }
    public bool IsItalic { get; public set; }
    public bool IsBold { get; public set; }
    public bool IsInitiallyClosed { get; public set; }
    public IList`1<PdfBookmark> Children { get; public set; }
    public PdfRGBColor TextColor { get; public set; }
    private PdfDocumentCatalog DevExpress.Pdf.Native.IPdfBookmarkParent.DocumentCatalog { get; }
    internal PdfBookmark(IPdfBookmarkParent parent, PdfOutline outline);
    internal PdfBookmark(PdfBookmark bookmark, PdfDestinationObject destinationObject, PdfAction action);
    internal PdfBookmark(PdfDestinationObject destinationObject);
    internal IPdfBookmarkParent get_Parent();
    internal void set_Parent(IPdfBookmarkParent value);
    internal PdfDestinationObject get_DestinationObject();
    public string get_Title();
    public void set_Title(string value);
    public PdfDestination get_Destination();
    public void set_Destination(PdfDestination value);
    public PdfAction get_Action();
    public bool get_IsItalic();
    public void set_IsItalic(bool value);
    public bool get_IsBold();
    public void set_IsBold(bool value);
    public bool get_IsInitiallyClosed();
    public void set_IsInitiallyClosed(bool value);
    public IList`1<PdfBookmark> get_Children();
    public void set_Children(IList`1<PdfBookmark> value);
    public PdfRGBColor get_TextColor();
    public void set_TextColor(PdfRGBColor value);
    private sealed virtual override PdfDocumentCatalog DevExpress.Pdf.Native.IPdfBookmarkParent.get_DocumentCatalog();
    private void Invalidate();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfBookmarkParent.Invalidate();
}
public enum DevExpress.Pdf.PdfBorderStyle : Enum {
    public int value__;
    public static PdfBorderStyle Solid;
    public static PdfBorderStyle Dot;
    public static PdfBorderStyle Dash;
    public static PdfBorderStyle DashDot;
    public static PdfBorderStyle DashDotDot;
    public static PdfBorderStyle Beveled;
    public static PdfBorderStyle Inset;
    public static PdfBorderStyle Underline;
}
public class DevExpress.Pdf.PdfButtonFormField : PdfInteractiveFormField {
    internal static string FormFieldType;
    internal static string OffStateName;
    private PdfButtonFormField valuesProvider;
    private string defaultState;
    private PdfKidsStateList kidsState;
    private string state;
    public PdfFormFieldType Type { get; }
    public string DefaultState { get; }
    public IList`1<string> KidsState { get; }
    public string State { get; }
    public IList`1<PdfFormFieldItem> Items { get; }
    public bool ToggleToOff { get; public set; }
    public bool RadiosInUnison { get; public set; }
    internal string OnState { get; }
    protected internal object Value { get; }
    protected internal object DefaultValue { get; }
    protected string FieldType { get; }
    internal PdfButtonFormField(IPdfInteractiveFormFieldProperties properties);
    internal PdfButtonFormField(IPdfInteractiveFormFieldProperties properties, string onStateName, bool shouldGeneratePressedAppearances);
    internal PdfButtonFormField(PdfInteractiveForm form, PdfInteractiveFormField parent, PdfReaderDictionary dictionary, PdfObjectReference valueReference);
    private static string ReadState(PdfReaderDictionary dictionary, string key);
    private static string ConvertToKidState(object option, PdfWidgetAnnotation widget);
    public virtual PdfFormFieldType get_Type();
    public string get_DefaultState();
    public IList`1<string> get_KidsState();
    public string get_State();
    public IList`1<PdfFormFieldItem> get_Items();
    public bool get_ToggleToOff();
    public void set_ToggleToOff(bool value);
    public bool get_RadiosInUnison();
    public void set_RadiosInUnison(bool value);
    internal string get_OnState();
    protected internal virtual object get_Value();
    protected internal virtual object get_DefaultValue();
    protected virtual string get_FieldType();
    private bool HasAppearance(string value);
    private string FindOption(string onAppearanceName);
    protected internal virtual void SetExportValue(object value, IPdfExportFontProvider fontSearch);
    protected internal virtual void SetValue(object value, IPdfExportFontProvider fontSearch);
    protected internal virtual void FillDictionary(PdfWriterDictionary dictionary, IPdfWritingContext writingContext);
    protected internal virtual void Accept(IPdfInteractiveFormFieldVisitor visitor);
    internal virtual IList`1<PdfFormFieldItem> GetItems();
}
public class DevExpress.Pdf.PdfButtonFormFieldFacade : PdfFormFieldFacade`2<PdfButtonWidgetFacade, PdfButtonFormField> {
    public PdfFormFieldType Type { get; }
    internal PdfButtonFormFieldFacade(PdfDocumentStateBase documentState, PdfButtonFormField field, PdfAcroFormFacade acroForm);
    public virtual PdfFormFieldType get_Type();
    protected virtual PdfButtonWidgetFacade CreateWidget(PdfDocumentStateBase documentState, PdfButtonFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfButtonWidgetFacade : PdfWidgetFacade {
    private PdfButtonWidgetIconOptions iconOptions;
    public string Caption { get; public set; }
    public string AlternateCaption { get; public set; }
    public string RolloverCaption { get; public set; }
    public PdfWidgetAnnotationTextPosition TextPosition { get; public set; }
    public PdfButtonWidgetIconOptions IconOptions { get; }
    internal PdfButtonWidgetFacade(PdfDocumentStateBase documentState, PdfButtonFormField formField, PdfWidgetAnnotationState state);
    public string get_Caption();
    public void set_Caption(string value);
    public string get_AlternateCaption();
    public void set_AlternateCaption(string value);
    public string get_RolloverCaption();
    public void set_RolloverCaption(string value);
    public PdfWidgetAnnotationTextPosition get_TextPosition();
    public void set_TextPosition(PdfWidgetAnnotationTextPosition value);
    public PdfButtonWidgetIconOptions get_IconOptions();
    public void SetNormalIcon(string fileName);
    public void SetNormalIcon(Byte[] imageData);
    public void SetNormalIcon(Stream stream);
    public void SetAlternateIcon(string fileName);
    public void SetAlternateIcon(Byte[] imageData);
    public void SetAlternateIcon(Stream stream);
    public void SetRolloverIcon(string fileName);
    public void SetRolloverIcon(Byte[] imageData);
    public void SetRolloverIcon(Stream stream);
    [CompilerGeneratedAttribute]
private PdfWidgetAnnotationState <.ctor>b__15_0();
}
public class DevExpress.Pdf.PdfButtonWidgetIconOptions : object {
    private Func`1<PdfWidgetAnnotationState> widgetStateResolver;
    private PdfWidgetAnnotationState WidgetState { get; }
    public PdfIconScalingCircumstances ScaleCondition { get; public set; }
    public PdfIconScalingType ScaleType { get; public set; }
    public double HorizontalPosition { get; public set; }
    public double VerticalPosition { get; public set; }
    public bool FitToAnnotationBounds { get; public set; }
    internal PdfButtonWidgetIconOptions(Func`1<PdfWidgetAnnotationState> widgetStateResolver);
    private PdfWidgetAnnotationState get_WidgetState();
    public PdfIconScalingCircumstances get_ScaleCondition();
    public void set_ScaleCondition(PdfIconScalingCircumstances value);
    public PdfIconScalingType get_ScaleType();
    public void set_ScaleType(PdfIconScalingType value);
    public double get_HorizontalPosition();
    public void set_HorizontalPosition(double value);
    public double get_VerticalPosition();
    public void set_VerticalPosition(double value);
    public bool get_FitToAnnotationBounds();
    public void set_FitToAnnotationBounds(bool value);
}
public class DevExpress.Pdf.PdfCalGrayColorSpace : PdfCIEBasedColorSpace {
    internal static string TypeName;
    private static double oneThird;
    private double gamma;
    public double Gamma { get; }
    public int ComponentsCount { get; }
    protected string Name { get; }
    internal PdfCalGrayColorSpace(PdfReaderDictionary dictionary);
    public double get_Gamma();
    public virtual int get_ComponentsCount();
    protected virtual string get_Name();
    protected internal virtual PdfScanlineTransformationResult Transform(IPdfImageScanlineSource data, int width);
    protected internal virtual PdfColor Transform(PdfColor color);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfCalRGBColorSpace : PdfCIEBasedColorSpace {
    internal static string TypeName;
    private static string matrixDictionaryKey;
    private PdfGamma gamma;
    private PdfColorSpaceMatrix matrix;
    public PdfGamma Gamma { get; }
    public PdfColorSpaceMatrix Matrix { get; }
    public int ComponentsCount { get; }
    protected string Name { get; }
    internal PdfCalRGBColorSpace(PdfReaderDictionary dictionary);
    private static double ColorComponentTransferFunction(double component);
    public PdfGamma get_Gamma();
    public PdfColorSpaceMatrix get_Matrix();
    public virtual int get_ComponentsCount();
    protected virtual string get_Name();
    protected internal virtual PdfScanlineTransformationResult Transform(IPdfImageScanlineSource data, int width);
    protected internal virtual PdfColor Transform(PdfColor color);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfCaretAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfCaretAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    internal PdfCaretAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfCaretAnnotationFacade : PdfMarkupAnnotationFacade {
    internal PdfCaretAnnotationFacade(PdfCaretAnnotationState annotation);
}
public class DevExpress.Pdf.PdfCCITTFaxDecodeFilter : PdfFilter {
    internal static string Name;
    internal static string ShortName;
    private static int defaultColumns;
    private static string encodingSchemeDictionaryKey;
    private static string endOfLineDictionaryKey;
    private static string encodedByteAlignDictionaryKey;
    private static string columnsDictionaryKey;
    private static string rowsDictionaryKey;
    private static string endOfBlockDictionaryKey;
    private static string blackIs1DictionaryKey;
    private static string damagedRowsBeforeErrorDictionaryKey;
    private PdfCCITTFaxEncodingScheme encodingScheme;
    private int twoDimensionalLineCount;
    private bool endOfLine;
    private bool encodedByteAlign;
    private int columns;
    private int rows;
    private bool endOfBlock;
    private bool blackIs1;
    private int damagedRowsBeforeError;
    public PdfCCITTFaxEncodingScheme EncodingScheme { get; }
    public int TwoDimensionalLineCount { get; }
    public bool EndOfLine { get; }
    public bool EncodedByteAlign { get; }
    public int Columns { get; }
    public int Rows { get; }
    public bool EndOfBlock { get; }
    public bool BlackIs1 { get; }
    public int DamagedRowsBeforeError { get; }
    protected internal string FilterName { get; }
    internal PdfCCITTFaxDecodeFilter(PdfReaderDictionary parameters);
    internal PdfCCITTFaxDecodeFilter(CCITTFilterParameters parameters);
    public PdfCCITTFaxEncodingScheme get_EncodingScheme();
    public int get_TwoDimensionalLineCount();
    public bool get_EndOfLine();
    public bool get_EncodedByteAlign();
    public int get_Columns();
    public int get_Rows();
    public bool get_EndOfBlock();
    public bool get_BlackIs1();
    public int get_DamagedRowsBeforeError();
    protected internal virtual string get_FilterName();
    protected internal virtual PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
    protected internal virtual Byte[] Decode(Byte[] data);
}
public enum DevExpress.Pdf.PdfCCITTFaxEncodingScheme : Enum {
    public int value__;
    public static PdfCCITTFaxEncodingScheme TwoDimensional;
    public static PdfCCITTFaxEncodingScheme OneDimensional;
    public static PdfCCITTFaxEncodingScheme Mixed;
}
public enum DevExpress.Pdf.PdfCertificationLevel : Enum {
    public int value__;
    public static PdfCertificationLevel NoCertification;
    public static PdfCertificationLevel NoChangesAllowed;
    public static PdfCertificationLevel FillForms;
    public static PdfCertificationLevel FillFormsAndAnnotate;
}
public class DevExpress.Pdf.PdfCharacter : object {
    private string unicodeData;
    private PdfFont font;
    private double fontSize;
    private PdfOrientedRectangle rectangle;
    public string UnicodeData { get; }
    public PdfFont Font { get; }
    public double FontSize { get; }
    public PdfOrientedRectangle Rectangle { get; }
    public PdfCharacter(string unicodeData, PdfFont font, double fontSize, PdfOrientedRectangle rectangle);
    public string get_UnicodeData();
    public PdfFont get_Font();
    public double get_FontSize();
    public PdfOrientedRectangle get_Rectangle();
}
public class DevExpress.Pdf.PdfCharacterMapping : object {
    private Byte[] data;
    public Byte[] Data { get; }
    internal PdfCharacterMapping(Byte[] data);
    public Byte[] get_Data();
}
public class DevExpress.Pdf.PdfCheckBoxFormFieldFacade : PdfFormFieldFacade`2<PdfCheckBoxWidgetFacade, PdfButtonFormField> {
    public PdfFormFieldType Type { get; }
    public bool ToggleToOff { get; public set; }
    public bool IsChecked { get; public set; }
    internal PdfCheckBoxFormFieldFacade(PdfDocumentStateBase documentState, PdfButtonFormField field, PdfAcroFormFacade acroForm);
    public virtual PdfFormFieldType get_Type();
    public bool get_ToggleToOff();
    public void set_ToggleToOff(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    protected virtual PdfCheckBoxWidgetFacade CreateWidget(PdfDocumentStateBase documentState, PdfButtonFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfCheckBoxWidgetFacade : PdfWidgetFacade {
    public Nullable`1<PdfAcroFormButtonStyle> ButtonStyle { get; public set; }
    internal PdfCheckBoxWidgetFacade(PdfDocumentStateBase documenState, PdfButtonFormField formField, PdfWidgetAnnotationState state);
    private static string ConvertButtonStyleToCaption(Nullable`1<PdfAcroFormButtonStyle> buttonStyle);
    public Nullable`1<PdfAcroFormButtonStyle> get_ButtonStyle();
    public void set_ButtonStyle(Nullable`1<PdfAcroFormButtonStyle> value);
}
public class DevExpress.Pdf.PdfChoiceFormField : PdfInteractiveFormField {
    internal static string FormFieldType;
    private static string topIndexDictionaryKey;
    private static string selectedIndicesDictionaryKey;
    private PdfChoiceFormField valuesProvider;
    private IList`1<string> defaultValues;
    private IList`1<PdfOptionsFormFieldOption> options;
    private int topIndex;
    private IList`1<int> selectedIndices;
    private IList`1<string> selectedValues;
    public PdfFormFieldType Type { get; }
    public IList`1<string> DefaultValues { get; }
    public IList`1<PdfOptionsFormFieldOption> Options { get; }
    public int TopIndex { get; }
    public IList`1<int> SelectedIndices { get; }
    public IList`1<string> SelectedValues { get; }
    public IList`1<PdfFormFieldItem> Items { get; }
    internal bool IsCombo { get; }
    protected internal object Value { get; }
    protected internal object DefaultValue { get; }
    protected string FieldType { get; }
    public bool MultiSelect { get; public set; }
    public bool Editable { get; public set; }
    public bool Sorted { get; public set; }
    public bool SpellCheck { get; public set; }
    public bool CommitOnSelectionChange { get; public set; }
    internal PdfChoiceFormField(IPdfInteractiveFormFieldProperties fieldProperties, IPdfChoiceFormFieldProperties choiceProperties, IPdfExportFontProvider fontSearch);
    internal PdfChoiceFormField(PdfInteractiveForm form, PdfInteractiveFormField parent, PdfReaderDictionary dictionary, PdfObjectReference valueReference);
    public virtual PdfFormFieldType get_Type();
    public IList`1<string> get_DefaultValues();
    public IList`1<PdfOptionsFormFieldOption> get_Options();
    public int get_TopIndex();
    public IList`1<int> get_SelectedIndices();
    public IList`1<string> get_SelectedValues();
    public IList`1<PdfFormFieldItem> get_Items();
    internal bool get_IsCombo();
    protected internal virtual object get_Value();
    protected internal virtual object get_DefaultValue();
    protected virtual string get_FieldType();
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    public bool get_Editable();
    public void set_Editable(bool value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public bool get_SpellCheck();
    public void set_SpellCheck(bool value);
    public bool get_CommitOnSelectionChange();
    public void set_CommitOnSelectionChange(bool value);
    private static bool HaveDuplicateExportValue(IList`1<PdfOptionsFormFieldOption> options);
    private static bool CheckOptionExportValue(IList`1<PdfOptionsFormFieldOption> options, int index, string expectedValue);
    private void SetTopIndex(int topIndex, IPdfExportFontProvider fontSearch);
    private string ConvertToString(object value);
    private IList`1<string> GetValues(PdfReaderDictionary dictionary, string key);
    private void WriteValues(PdfWriterDictionary dictionary, string key, IList`1<string> values);
    protected virtual bool AcceptValue(object value);
    protected internal virtual void SetValue(object value, IPdfExportFontProvider fontSearch);
    protected internal virtual void FillDictionary(PdfWriterDictionary dictionary, IPdfWritingContext writingContext);
    protected internal virtual void Accept(IPdfInteractiveFormFieldVisitor visitor);
    internal virtual IList`1<PdfFormFieldItem> GetItems();
}
public abstract class DevExpress.Pdf.PdfChoiceFormFieldFacade`1 : PdfFormFieldFacade`2<T, PdfChoiceFormField> {
    public IList`1<PdfFormFieldItem> Items { get; }
    public bool Sorted { get; public set; }
    public bool CommitOnSelectionChange { get; public set; }
    public Nullable`1<PdfTextJustification> TextJustification { get; public set; }
    protected PdfChoiceFormFieldFacade`1(PdfDocumentStateBase documentState, PdfChoiceFormField field, PdfAcroFormFacade acroForm);
    public IList`1<PdfFormFieldItem> get_Items();
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public bool get_CommitOnSelectionChange();
    public void set_CommitOnSelectionChange(bool value);
    public Nullable`1<PdfTextJustification> get_TextJustification();
    public void set_TextJustification(Nullable`1<PdfTextJustification> value);
}
public class DevExpress.Pdf.PdfCIDSystemInfo : PdfObject {
    internal static string RegistryKey;
    internal static string OrderingKey;
    internal static string SupplementKey;
    private string registry;
    private string ordering;
    private int supplement;
    public string Registry { get; }
    public string Ordering { get; }
    public int Supplement { get; }
    internal PdfCIDSystemInfo(PdfReaderDictionary dictionary);
    internal PdfCIDSystemInfo(string registry, string ordering, int supplement);
    public string get_Registry();
    public string get_Ordering();
    public int get_Supplement();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfCIDType0Font : PdfType0Font {
    private PdfType1FontFileData fontFileData;
    private Byte[] compactFontFileData;
    private Byte[] openTypeFontFileData;
    private Double[] widths;
    public Byte[] FontFileData { get; }
    public int PlainTextLength { get; }
    public int CipherTextLength { get; }
    public int NullSegmentLength { get; }
    public Byte[] CompactFontFileData { get; }
    public Byte[] OpenTypeFontFileData { get; }
    protected string CIDSubType { get; }
    protected internal IEnumerable`1<double> GlyphWidths { get; }
    internal PdfCIDType0Font(int objectNumber, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfCompositeFontEncoding encoding, PdfReaderDictionary dictionary);
    public Byte[] get_FontFileData();
    public int get_PlainTextLength();
    public int get_CipherTextLength();
    public int get_NullSegmentLength();
    public Byte[] get_CompactFontFileData();
    public Byte[] get_OpenTypeFontFileData();
    protected virtual string get_CIDSubType();
    protected internal virtual IEnumerable`1<double> get_GlyphWidths();
    protected virtual PdfFontProgramFacade CreateFontProgramFacade();
    protected internal virtual void UpdateFontDescriptorDictionary(PdfWriterDictionary dictionary);
    protected internal virtual void UpdateFontDescriptorDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfCIDType2Font : PdfType0Font {
    private Byte[] openTypeFontFileData;
    private Byte[] fontFileData;
    private Byte[] compactFontFileData;
    public Byte[] OpenTypeFontFileData { get; }
    public Byte[] FontFileData { get; internal set; }
    protected string CIDSubType { get; }
    protected PdfCIDType2Font(int objectNumber, string baseFont, PdfCompositeFontDescriptor fontDescriptor);
    internal PdfCIDType2Font(int objectNumber, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfCompositeFontEncoding encoding, PdfReaderDictionary dictionary);
    public Byte[] get_OpenTypeFontFileData();
    public Byte[] get_FontFileData();
    internal void set_FontFileData(Byte[] value);
    protected virtual string get_CIDSubType();
    public void SetOpenTypeCFFData(Byte[] data);
    protected virtual PdfFontProgramFacade CreateFontProgramFacade();
    protected internal virtual void UpdateFontDescriptorDictionary(PdfWriterDictionary dictionary);
    protected internal virtual void UpdateFontDescriptorDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    protected virtual PdfWriterDictionary CreateDescendantDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDescendantDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfCIEBasedColorSpace : PdfCustomColorSpace {
    protected static string GammaDictionaryKey;
    private static string writePointDictionaryKey;
    private static string blackPointDictionaryKey;
    private PdfCIEColor whitePoint;
    private PdfCIEColor blackPoint;
    public PdfCIEColor WhitePoint { get; }
    public PdfCIEColor BlackPoint { get; }
    protected string Name { get; }
    protected PdfCIEBasedColorSpace(PdfReaderDictionary dictionary);
    public PdfCIEColor get_WhitePoint();
    public PdfCIEColor get_BlackPoint();
    protected abstract virtual string get_Name();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfCIEColor : object {
    private double x;
    private double y;
    private double z;
    public double X { get; }
    public double Y { get; }
    public double Z { get; }
    internal bool IsEmpty { get; }
    internal PdfCIEColor(PdfReaderArray array);
    public double get_X();
    public double get_Y();
    public double get_Z();
    internal bool get_IsEmpty();
    internal Double[] ToArray();
}
public class DevExpress.Pdf.PdfCircleAnnotation : PdfShapeAnnotation {
    internal static string Type;
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfCircleAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    internal PdfCircleAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfCircleAnnotationFacade : PdfShapeAnnotationFacade {
    internal PdfCircleAnnotationFacade(PdfCircleAnnotationState annotation);
}
public class DevExpress.Pdf.PdfClearContentOptions : object {
    [CompilerGeneratedAttribute]
private bool <ClearGraphics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearImages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearAnnotations>k__BackingField;
    public bool ClearGraphics { get; public set; }
    public bool ClearText { get; public set; }
    public bool ClearImages { get; public set; }
    public bool ClearAnnotations { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ClearGraphics();
    [CompilerGeneratedAttribute]
public void set_ClearGraphics(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClearText();
    [CompilerGeneratedAttribute]
public void set_ClearText(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClearImages();
    [CompilerGeneratedAttribute]
public void set_ClearImages(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClearAnnotations();
    [CompilerGeneratedAttribute]
public void set_ClearAnnotations(bool value);
}
public class DevExpress.Pdf.PdfClearContentRegions : object {
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<PdfRectangle, bool>> <Rectangles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<PdfOrientedRectangle, bool>> <OrientedRectangles>k__BackingField;
    internal List`1<Tuple`2<PdfRectangle, bool>> Rectangles { get; }
    internal List`1<Tuple`2<PdfOrientedRectangle, bool>> OrientedRectangles { get; }
    [CompilerGeneratedAttribute]
internal List`1<Tuple`2<PdfRectangle, bool>> get_Rectangles();
    [CompilerGeneratedAttribute]
internal List`1<Tuple`2<PdfOrientedRectangle, bool>> get_OrientedRectangles();
    public void Add(PdfRectangle rectangle, bool usePageCoordinateSystem);
    public void Add(PdfOrientedRectangle rectangle, bool usePageCoordinateSystem);
    public void Add(PdfRectangle rectangle);
    public void Add(PdfOrientedRectangle rectangle);
    public void Add(IEnumerable`1<PdfRectangle> rectangles, bool usePageCoordinateSystem);
    public void Add(IEnumerable`1<PdfOrientedRectangle> rectangles, bool usePageCoordinateSystem);
    public void Add(IEnumerable`1<PdfRectangle> rectangles);
    public void Add(IEnumerable`1<PdfOrientedRectangle> rectangles);
    internal IList`1<PdfRectangle> GetBoundingBoxes(PdfPoint pageOffset);
}
public class DevExpress.Pdf.PdfCloseAndStrokePathCommand : PdfCommand {
    internal static string Name;
    private static PdfCloseAndStrokePathCommand instance;
    internal static PdfCloseAndStrokePathCommand Instance { get; }
    private static PdfCloseAndStrokePathCommand();
    internal static PdfCloseAndStrokePathCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfCloseFillAndStrokePathUsingEvenOddRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfCloseFillAndStrokePathUsingEvenOddRuleCommand instance;
    internal static PdfCloseFillAndStrokePathUsingEvenOddRuleCommand Instance { get; }
    private static PdfCloseFillAndStrokePathUsingEvenOddRuleCommand();
    internal static PdfCloseFillAndStrokePathUsingEvenOddRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfCloseFillAndStrokePathUsingNonzeroWindingNumberRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfCloseFillAndStrokePathUsingNonzeroWindingNumberRuleCommand instance;
    internal static PdfCloseFillAndStrokePathUsingNonzeroWindingNumberRuleCommand Instance { get; }
    private static PdfCloseFillAndStrokePathUsingNonzeroWindingNumberRuleCommand();
    internal static PdfCloseFillAndStrokePathUsingNonzeroWindingNumberRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfClosePathCommand : PdfCommand {
    internal static string Name;
    private static PdfClosePathCommand instance;
    internal static PdfClosePathCommand Instance { get; }
    private static PdfClosePathCommand();
    internal static PdfClosePathCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfColor : object {
    private PdfPattern pattern;
    private Double[] components;
    public PdfPattern Pattern { get; }
    public Double[] Components { get; }
    public PdfColor(PdfPattern pattern, Double[] components);
    public PdfColor(Double[] components);
    internal PdfColor(IList`1<double> components);
    internal PdfColor(PdfRGBColor rgbColor);
    internal static double ClipColorComponent(double component);
    internal static PdfColor FromXYZ(double x, double y, double z, double whitePointZ);
    private static double ColorComponentTransferFunction(double component);
    public PdfPattern get_Pattern();
    public Double[] get_Components();
    internal object ToWritableObject();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PdfColor other);
    public virtual int GetHashCode();
}
public abstract class DevExpress.Pdf.PdfColorSpace : PdfObject {
    internal static string GrayColorSpaceAbbreviation;
    internal static string RgbColorSpaceAbbreviation;
    internal static string CmykColorSpaceAbbreviation;
    private static string indexedColorSpaceAbbreviation;
    private static PdfColorSpace defaultColorSpace;
    public int ComponentsCount { get; }
    private static PdfColorSpace();
    private static PdfReaderDictionary ResolveColorSpaceDictionary(PdfReaderArray array);
    private static PdfReaderStream ResolveColorSpaceStream(PdfReaderArray array);
    internal static PdfColorSpace CreateColorSpace(string name);
    internal static PdfColorSpace Parse(PdfDocumentCatalog catalog, object value);
    private static PdfICCBasedColorSpace CrateIccColorSpace(object stream);
    public abstract virtual int get_ComponentsCount();
    protected internal virtual PdfScanlineTransformationResult Transform(PdfImage image, IPdfImageScanlineSource data, PdfImageParameters parameters);
    protected virtual IPdfImageScanlineSource GetDecodedImageScanlineSource(IPdfImageScanlineSource decoratingSource, PdfImage image, int width);
    protected internal virtual PdfScanlineTransformationResult Transform(IPdfImageScanlineSource data, int width);
    protected internal virtual PdfColor Transform(PdfColor color);
    protected internal virtual PdfColor AlternateTransform(PdfColor color);
    protected internal virtual PdfRange[] CreateDefaultDecodeArray(int bitsPerComponent);
    protected internal abstract virtual object Write(IPdfWrittenObjectsCollection collection);
    protected internal abstract virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfColorSpaceMatrix : object {
    private double xa;
    private double ya;
    private double za;
    private double xb;
    private double yb;
    private double zb;
    private double xc;
    private double yc;
    private double zc;
    public double Xa { get; }
    public double Ya { get; }
    public double Za { get; }
    public double Xb { get; }
    public double Yb { get; }
    public double Zb { get; }
    public double Xc { get; }
    public double Yc { get; }
    public double Zc { get; }
    public bool IsIdentity { get; }
    internal PdfColorSpaceMatrix(PdfReaderArray array);
    public double get_Xa();
    public double get_Ya();
    public double get_Za();
    public double get_Xb();
    public double get_Yb();
    public double get_Zb();
    public double get_Xc();
    public double get_Yc();
    public double get_Zc();
    public bool get_IsIdentity();
    internal Double[] ToArray();
}
public class DevExpress.Pdf.PdfColumnLayoutLogicalStructureElementAttribute : PdfLayoutLogicalStructureElementAttribute {
    private static string columnCountKey;
    private static string columnGapKey;
    private static string columnWidthsKey;
    internal static String[] Keys;
    private int columnCount;
    private IList`1<double> columnGap;
    private IList`1<double> columnWidths;
    public int ColumnCount { get; }
    public IList`1<double> ColumnGap { get; }
    public IList`1<double> ColumnWidths { get; }
    internal PdfColumnLayoutLogicalStructureElementAttribute(PdfReaderDictionary dictionary);
    private static PdfColumnLayoutLogicalStructureElementAttribute();
    public int get_ColumnCount();
    public IList`1<double> get_ColumnGap();
    public IList`1<double> get_ColumnWidths();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    private IList`1<double> GetValues(object value, int listLength, PdfObjectCollection collection);
    private object WriteValues(IList`1<double> value);
}
public class DevExpress.Pdf.PdfComboBoxFormFieldFacade : PdfChoiceFormFieldFacade`1<PdfComboBoxWidgetFacade> {
    public PdfFormFieldType Type { get; }
    public bool Editable { get; public set; }
    public bool SpellCheck { get; public set; }
    public string Value { get; public set; }
    internal PdfComboBoxFormFieldFacade(PdfDocumentStateBase documentState, PdfChoiceFormField field, PdfAcroFormFacade acroForm);
    public virtual PdfFormFieldType get_Type();
    public bool get_Editable();
    public void set_Editable(bool value);
    public bool get_SpellCheck();
    public void set_SpellCheck(bool value);
    public string get_Value();
    public void set_Value(string value);
    protected virtual PdfComboBoxWidgetFacade CreateWidget(PdfDocumentStateBase documentState, PdfChoiceFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfComboBoxWidgetFacade : PdfWidgetFacade {
    internal PdfComboBoxWidgetFacade(PdfDocumentStateBase documentState, PdfChoiceFormField formField, PdfWidgetAnnotationState state);
}
public abstract class DevExpress.Pdf.PdfCommand : object {
    internal static bool IsKnownCommand(string name);
    internal static PdfCommand Create(PdfResources resources, string name, PdfStack operands, bool supportType3FontCommands);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected internal abstract virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public abstract class DevExpress.Pdf.PdfCommandGroup : PdfCommand {
    private PdfCommandList children;
    public PdfCommandList Children { get; }
    protected string Suffix { get; }
    public PdfCommandList get_Children();
    protected abstract virtual string get_Suffix();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal abstract virtual void ExecuteCommandGroup(IPdfCommandInterpreter interpreter);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected abstract virtual IEnumerable`1<object> GetPrefix(IPdfWritingContext writingContext);
}
public class DevExpress.Pdf.PdfCommandList : List`1<PdfCommand> {
    public PdfCommandList(IEnumerable`1<PdfCommand> commands);
    internal Byte[] ToByteArray(IPdfWritingContext context);
}
public enum DevExpress.Pdf.PdfCompatibility : Enum {
    public int value__;
    public static PdfCompatibility Pdf;
    public static PdfCompatibility PdfA1b;
    public static PdfCompatibility PdfA2b;
    public static PdfCompatibility PdfA3b;
}
public class DevExpress.Pdf.PdfCompatibilityCommandGroup : PdfCommandGroup {
    protected string Suffix { get; }
    protected virtual string get_Suffix();
    protected virtual IEnumerable`1<object> GetPrefix(IPdfWritingContext writingContext);
    protected internal virtual void ExecuteCommandGroup(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfCompositeFontDescriptor : PdfFontDescriptor {
    private static string styleDictionaryKey;
    private static string fontDescriptorsDictionaryKey;
    internal static string PanoseDictionaryKey;
    private PdfFontFamilyClass fontFamilyClass;
    private PdfPanose panose;
    private CultureInfo languageCulture;
    private IDictionary`2<string, PdfFontDescriptor> fontDescriptors;
    public PdfFontFamilyClass FontFamilyClass { get; }
    public PdfPanose Panose { get; }
    public CultureInfo LanguageCulture { get; }
    public IDictionary`2<string, PdfFontDescriptor> FontDescriptors { get; }
    internal PdfCompositeFontDescriptor(PdfType0Font font, PdfReaderDictionary dictionary);
    internal PdfCompositeFontDescriptor(IPdfFontDescriptorBuilder fontDescriptorBuilder);
    internal PdfCompositeFontDescriptor(PdfFontDescriptorData fontDescriptorData);
    public PdfFontFamilyClass get_FontFamilyClass();
    public PdfPanose get_Panose();
    public CultureInfo get_LanguageCulture();
    public IDictionary`2<string, PdfFontDescriptor> get_FontDescriptors();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfCompositeFontEncoding : PdfEncoding {
    protected internal bool ShouldUseEmbeddedFontEncoding { get; }
    public bool IsVertical { get; }
    internal static PdfCompositeFontEncoding Create(PdfDocumentCatalog catalog, object value);
    protected internal virtual bool get_ShouldUseEmbeddedFontEncoding();
    public abstract virtual bool get_IsVertical();
    internal abstract virtual short GetCID(Byte[] code);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.PdfContentHorizontalAlignment : Enum {
    public int value__;
    public static PdfContentHorizontalAlignment Left;
    public static PdfContentHorizontalAlignment Center;
    public static PdfContentHorizontalAlignment Right;
}
public enum DevExpress.Pdf.PdfContentVerticalAlignment : Enum {
    public int value__;
    public static PdfContentVerticalAlignment Top;
    public static PdfContentVerticalAlignment Center;
    public static PdfContentVerticalAlignment Bottom;
}
public class DevExpress.Pdf.PdfCoonsPatch : object {
    private PdfBezierCurve left;
    private PdfBezierCurve top;
    private PdfBezierCurve right;
    private PdfBezierCurve bottom;
    public PdfBezierCurve Left { get; }
    public PdfBezierCurve Top { get; }
    public PdfBezierCurve Right { get; }
    public PdfBezierCurve Bottom { get; }
    internal PdfCoonsPatch(PdfBezierCurve left, PdfBezierCurve top, PdfBezierCurve right, PdfBezierCurve bottom);
    public PdfBezierCurve get_Left();
    public PdfBezierCurve get_Top();
    public PdfBezierCurve get_Right();
    public PdfBezierCurve get_Bottom();
}
public class DevExpress.Pdf.PdfCoonsPatchMesh : PdfMeshShading {
    internal static int Type;
    private IList`1<PdfCoonsPatch> patches;
    public IList`1<PdfCoonsPatch> Patches { get; }
    protected int ShadingType { get; }
    protected bool HasBitsPerFlag { get; }
    internal PdfCoonsPatchMesh(PdfReaderStream stream);
    public IList`1<PdfCoonsPatch> get_Patches();
    protected virtual int get_ShadingType();
    protected virtual bool get_HasBitsPerFlag();
}
public class DevExpress.Pdf.PdfCreationOptions : object {
    private PdfCompatibilityOptions compatibilityOptions;
    private IList`1<string> notEmbeddedFontFamilies;
    [CompilerGeneratedAttribute]
private bool <DisableEmbeddingAllFonts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergePdfADocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfCompatibility <Compatibility>k__BackingField;
    public bool DisableEmbeddingAllFonts { get; public set; }
    public bool MergePdfADocuments { get; public set; }
    public PdfCompatibility Compatibility { get; public set; }
    public IList`1<string> NotEmbeddedFontFamilies { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableEmbeddingAllFonts();
    [CompilerGeneratedAttribute]
public void set_DisableEmbeddingAllFonts(bool value);
    [CompilerGeneratedAttribute]
public bool get_MergePdfADocuments();
    [CompilerGeneratedAttribute]
public void set_MergePdfADocuments(bool value);
    [CompilerGeneratedAttribute]
public PdfCompatibility get_Compatibility();
    [CompilerGeneratedAttribute]
public void set_Compatibility(PdfCompatibility value);
    public IList`1<string> get_NotEmbeddedFontFamilies();
    public void set_NotEmbeddedFontFamilies(IList`1<string> value);
}
public class DevExpress.Pdf.PdfCryptFilter : PdfFilter {
    internal static string Name;
    protected internal string FilterName { get; }
    protected internal virtual string get_FilterName();
    protected internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.PdfCuePoint : object {
    private static string cuePointDictionaryName;
    private static string timeKey;
    private static string nameKey;
    private double time;
    private PdfCuePointKind kind;
    private string name;
    private PdfAction action;
    public double Time { get; }
    public PdfCuePointKind Kind { get; }
    public string Name { get; }
    public PdfAction Action { get; }
    internal PdfCuePoint(PdfReaderDictionary dictionary);
    public double get_Time();
    public PdfCuePointKind get_Kind();
    public string get_Name();
    public PdfAction get_Action();
    internal PdfWriterDictionary Write(IPdfWrittenObjectsCollection collection);
    private string CuePointKindToString();
}
public enum DevExpress.Pdf.PdfCuePointKind : Enum {
    public int value__;
    public static PdfCuePointKind Navigation;
    public static PdfCuePointKind Event;
}
public class DevExpress.Pdf.PdfCustomAnnotation : PdfMarkupAnnotation {
    private string subtype;
    private PdfMarkupExternalData exData;
    public PdfFilterAnnotationType FilterType { get; }
    internal PdfAnnotationType AnnotationType { get; }
    protected internal string SubtypeName { get; }
    internal PdfCustomAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public virtual PdfFilterAnnotationType get_FilterType();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected internal virtual string get_SubtypeName();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public abstract class DevExpress.Pdf.PdfCustomColorSpace : PdfColorSpace {
    protected internal virtual object Write(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfCustomCompositeFontEncoding : PdfCompositeFontEncoding {
    private static string dictionaryType;
    private static string nameDictionaryKey;
    private static string cidSystemInfoDictionaryKey;
    private static string wModeDictionaryKey;
    private static string useCMapDictionaryKey;
    private string name;
    private PdfCIDSystemInfo cidSysteminfo;
    private PdfCompositeFontEncoding baseEncoding;
    private PdfCharacterMapping characterMapping;
    private bool isVertical;
    private Lazy`1<PdfCIDCMap> cmap;
    public string Name { get; }
    public PdfCIDSystemInfo CIDSystemInfo { get; }
    public PdfCompositeFontEncoding BaseEncoding { get; }
    public PdfCharacterMapping CharacterMapping { get; }
    public bool IsVertical { get; }
    internal PdfCustomCompositeFontEncoding(PdfReaderStream stream);
    public string get_Name();
    public PdfCIDSystemInfo get_CIDSystemInfo();
    public PdfCompositeFontEncoding get_BaseEncoding();
    public PdfCharacterMapping get_CharacterMapping();
    public virtual bool get_IsVertical();
    internal virtual short GetCID(Byte[] code);
    protected internal virtual PdfStringCommandData GetStringData(Byte[] bytes, Double[] glyphOffsets);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection);
    [CompilerGeneratedAttribute]
private PdfCIDCMap <.ctor>b__21_0();
}
public abstract class DevExpress.Pdf.PdfCustomFunction : PdfFunction {
    private static string domainDictionaryKey;
    private static string rangeDictionaryKey;
    private IList`1<PdfRange> domain;
    private IList`1<PdfRange> range;
    private Double[] argumentsBuffer;
    public IList`1<PdfRange> Domain { get; }
    public IList`1<PdfRange> Range { get; }
    protected internal int RangeSize { get; }
    protected bool ShouldCheckEmptyRange { get; }
    protected int FunctionType { get; }
    internal bool IsIdentity { get; }
    protected PdfCustomFunction(IList`1<PdfRange> domain, IList`1<PdfRange> range);
    protected PdfCustomFunction(PdfReaderDictionary dictionary);
    private static void Restrict(Double[] values, IList`1<PdfRange> ranges);
    protected static double Interpolate(double x, double xmin, double xmax, PdfRange yRange);
    protected static bool CompareRanges(IList`1<PdfRange> range1, IList`1<PdfRange> range2);
    protected static IList`1<object> ToObjectArray(IList`1<PdfRange> ranges);
    internal static PdfCustomFunction PerformParse(object value);
    internal static PdfCustomFunction Parse(PdfObjectCollection objects, object value);
    public IList`1<PdfRange> get_Domain();
    public IList`1<PdfRange> get_Range();
    protected internal virtual int get_RangeSize();
    protected virtual bool get_ShouldCheckEmptyRange();
    protected abstract virtual int get_FunctionType();
    protected internal virtual bool IsSame(PdfFunction function);
    protected internal virtual Double[] Transform(Double[] arguments);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected virtual PdfWriterDictionary FillDictionary(IPdfWrittenObjectsCollection objects);
    protected abstract virtual Double[] PerformTransformation(Double[] arguments);
    internal virtual bool get_IsIdentity();
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfCustomLogicalStructureElementAttribute : PdfLogicalStructureElementAttribute {
    private string owner;
    private PdfPrivateData attributes;
    public string Owner { get; }
    public PdfPrivateData Attributes { get; }
    internal PdfCustomLogicalStructureElementAttribute(string owner, PdfReaderDictionary dictionary);
    public string get_Owner();
    public PdfPrivateData get_Attributes();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfCustomProperties : PdfProperties {
    private IDictionary`2<string, object> dictionary;
    public IDictionary`2<string, object> Dictionary { get; }
    internal PdfCustomProperties(PdfReaderDictionary dictionary);
    internal PdfCustomProperties(IDictionary`2<string, object> dictionary);
    private static object ToWritableObject(IPdfWrittenObjectsCollection collection, object obj);
    public IDictionary`2<string, object> get_Dictionary();
    protected internal virtual object Write(IPdfWrittenObjectsCollection collection);
    private PdfPrimitive ToPrimitive(object value);
    protected virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfCustomSoftMask : PdfSoftMask {
    private static string transparencyGroupDictionaryKey;
    private static string transferFunctionDictionaryKey;
    private PdfGroupForm transparencyGroup;
    private PdfFunction transferFunction;
    public PdfGroupForm TransparencyGroup { get; }
    public PdfFunction TransferFunction { get; }
    protected string ActualName { get; }
    protected PdfCustomSoftMask(PdfReaderDictionary dictionary);
    protected PdfCustomSoftMask(PdfGroupForm groupForm);
    public PdfGroupForm get_TransparencyGroup();
    public PdfFunction get_TransferFunction();
    protected abstract virtual string get_ActualName();
    protected internal virtual bool IsSame(PdfSoftMask softMask);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfDCTDecodeFilter : PdfFilter {
    internal static string Name;
    internal static string ShortName;
    private static string colorTransformDictionaryKey;
    private bool colorTransform;
    public bool ColorTransform { get; }
    protected internal string FilterName { get; }
    internal PdfDCTDecodeFilter(PdfReaderDictionary parameters);
    private static Byte[] RemoveLeadingSpaces(Byte[] data);
    public bool get_ColorTransform();
    protected internal virtual string get_FilterName();
    protected internal virtual PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
    protected internal virtual PdfScanlineTransformationResult CreateScanlineSource(PdfImage image, int componentsCount, Byte[] data);
    protected internal virtual Byte[] Decode(Byte[] data);
    internal virtual RawImageDataSource CreateRawDataSource(PdfImage image, Byte[] data);
}
public class DevExpress.Pdf.PdfDecodeRange : PdfRange {
    private int bitsCount;
    public PdfDecodeRange(double min, double max, int bitsCount);
    public double DecodeValue(double value);
}
public class DevExpress.Pdf.PdfDefaultHalftone : PdfHalftone {
    internal static string Id;
    private static PdfDefaultHalftone instance;
    public static PdfDefaultHalftone Instance { get; }
    private static PdfDefaultHalftone();
    public static PdfDefaultHalftone get_Instance();
    protected internal virtual bool IsSame(PdfHalftone halftone);
    protected internal virtual object CreateWriteableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfDeferredSignatureBuilder : PdfSignatureBuilder {
    [CompilerGeneratedAttribute]
private ExternalSignerInfo <SignerInfo>k__BackingField;
    internal ExternalSignerInfo SignerInfo { get; }
    public PdfDeferredSignatureBuilder(ExternalSignerInfo signerInfo);
    public PdfDeferredSignatureBuilder(ExternalSignerInfo signerInfo, string formFieldName);
    public PdfDeferredSignatureBuilder(ExternalSignerInfo signerInfo, PdfSignatureFieldInfo info);
    [CompilerGeneratedAttribute]
internal ExternalSignerInfo get_SignerInfo();
}
public class DevExpress.Pdf.PdfDesignateMarkedContentPointCommand : PdfCommand {
    internal static string Name;
    private string tag;
    public string Tag { get; }
    public PdfDesignateMarkedContentPointCommand(string tag);
    internal PdfDesignateMarkedContentPointCommand(PdfStack operands);
    public string get_Tag();
    protected void ParseTag(PdfStack operands);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public class DevExpress.Pdf.PdfDesignateMarkerContentPointWithParametersCommand : PdfDesignateMarkedContentPointCommand {
    internal static string Name;
    private string propertiesName;
    private PdfProperties properties;
    public PdfProperties Properties { get; }
    internal PdfDesignateMarkerContentPointWithParametersCommand(PdfResources resources, PdfStack operands);
    public PdfProperties get_Properties();
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public abstract class DevExpress.Pdf.PdfDestination : PdfObject {
    private PdfDocumentCatalog documentCatalog;
    private Nullable`1<PdfIndirectObjectId> pageId;
    private object pageObject;
    private PdfPage page;
    private int pageIndex;
    public PdfPage Page { get; }
    public int PageIndex { get; }
    internal PdfDocumentCatalog DocumentCatalog { get; }
    protected PdfDestination(PdfPage page);
    protected PdfDestination(PdfDocumentCatalog documentCatalog, object pageObject);
    protected PdfDestination(PdfDocumentCatalog documentCatalog, PdfDestination destination, int objectNumber);
    protected static void AddParameter(IList`1<object> parameters, Nullable`1<double> parameter);
    internal static PdfDestination Parse(PdfDocumentCatalog documentCatalog, object value);
    internal static PdfDeferredSortedDictionary`2<string, PdfDestination> Parse(PdfReaderDictionary dictionary);
    public PdfPage get_Page();
    public int get_PageIndex();
    internal PdfDocumentCatalog get_DocumentCatalog();
    protected int CalculatePageIndex(IList`1<PdfPage> pages);
    protected Nullable`1<double> ValidateVerticalCoordinate(Nullable`1<double> top);
    private void ResolvePage();
    internal void ResolveInternalPage();
    protected internal virtual bool IsDeferredObject(bool isCloning);
    protected internal virtual PdfObject GetDeferredSavedObject(PdfObjectCollection objects, bool isClonning);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal abstract virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected abstract virtual PdfDestination CreateDuplicate(PdfDocumentCatalog newCatalow, int objectNumber);
    protected abstract virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfDeveloperExtension : object {
    private static string baseVersionKey;
    private static string extensionLevelKey;
    private PdfFileVersion baseVersion;
    private int extensionLevel;
    public PdfFileVersion BaseVersion { get; }
    public int ExtensionLevel { get; }
    private PdfDeveloperExtension(PdfFileVersion baseVersion, int extensionLevel);
    internal static Dictionary`2<string, PdfDeveloperExtension> Parse(PdfReaderDictionary dictionary);
    private static PdfDeveloperExtension Create(PdfReaderDictionary dictionary);
    public PdfFileVersion get_BaseVersion();
    public int get_ExtensionLevel();
    internal PdfDictionary Write(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfDeviceColorSpace : PdfColorSpace {
    internal static string GrayName;
    internal static string RGBName;
    internal static string CMYKName;
    private PdfDeviceColorSpaceKind kind;
    public PdfDeviceColorSpaceKind Kind { get; }
    public int ComponentsCount { get; }
    public PdfDeviceColorSpace(PdfDeviceColorSpaceKind kind);
    public static PdfColor TransformToRGB(PdfColor color);
    public PdfDeviceColorSpaceKind get_Kind();
    public virtual int get_ComponentsCount();
    protected internal virtual PdfColor Transform(PdfColor color);
    protected internal virtual PdfColor AlternateTransform(PdfColor color);
    protected internal virtual PdfScanlineTransformationResult Transform(IPdfImageScanlineSource data, int width);
    protected internal virtual object Write(IPdfWrittenObjectsCollection collection);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfDeviceColorSpaceKind : Enum {
    public int value__;
    [PdfFieldNameAttribute("DeviceGray")]
public static PdfDeviceColorSpaceKind Gray;
    [PdfFieldNameAttribute("DeviceRGB")]
public static PdfDeviceColorSpaceKind RGB;
    [PdfFieldNameAttribute("DeviceCMYK")]
public static PdfDeviceColorSpaceKind CMYK;
}
public class DevExpress.Pdf.PdfDeviceNColorSpace : PdfSpecialColorSpace {
    internal static string TypeName;
    private static string noneName;
    private String[] names;
    public String[] Names { get; }
    public int ComponentsCount { get; }
    internal PdfDeviceNColorSpace(PdfReaderArray array);
    public String[] get_Names();
    public virtual int get_ComponentsCount();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected virtual bool CheckArraySize(int actualSize);
    protected virtual IList`1<object> CreateListToWrite(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfDirection : Enum {
    public int value__;
    [PdfFieldNameAttribute("L2R")]
public static PdfDirection LeftToRight;
    [PdfFieldNameAttribute("R2L")]
public static PdfDirection RightToLeft;
}
public class DevExpress.Pdf.PdfDocument : object {
    private static PdfDocumentPermissionFlags defaultFlags;
    private PdfFileVersion version;
    private PdfDocumentInfo documentInfo;
    private PdfDocumentCatalog documentCatalog;
    private PdfDocumentPermissionFlags permissionFlags;
    private Byte[][] id;
    private PdfDocumentWriter writer;
    public PdfFileVersion Version { get; }
    public string Title { get; public set; }
    public string Author { get; public set; }
    public string Subject { get; public set; }
    public string Keywords { get; public set; }
    public string Creator { get; public set; }
    public string Producer { get; public set; }
    internal string AdditionalMetadata { get; internal set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; }
    public Nullable`1<DateTimeOffset> ModDate { get; }
    public DefaultBoolean Trapped { get; public set; }
    public IList`1<PdfPage> Pages { get; }
    public IDictionary`2<int, PdfPageLabel> PageLabels { get; }
    public PdfNames Names { get; }
    public IDictionary`2<string, PdfDestination> Destinations { get; }
    public PdfViewerPreferences ViewerPreferences { get; public set; }
    public PdfPageLayout PageLayout { get; public set; }
    public PdfPageMode PageMode { get; public set; }
    public PdfOutlines Outlines { get; }
    public IList`1<PdfBookmark> Bookmarks { get; public set; }
    public IList`1<PdfArticleThread> Threads { get; }
    public PdfDestination OpenDestination { get; }
    public PdfAction OpenAction { get; public set; }
    public PdfDocumentActions Actions { get; public set; }
    public CultureInfo LanguageCulture { get; public set; }
    public PdfInteractiveForm AcroForm { get; internal set; }
    public PdfMetadata Metadata { get; }
    public PdfLogicalStructure LogicalStructure { get; }
    public PdfMarkInfo MarkInfo { get; }
    public IList`1<PdfOutputIntent> OutputIntents { get; }
    public IDictionary`2<string, PdfPieceInfoEntry> PieceInfo { get; }
    public PdfOptionalContentProperties OptionalContentProperties { get; }
    public bool NeedsRendering { get; }
    public bool AllowPrinting { get; }
    public bool AllowModifying { get; }
    public bool AllowDataExtraction { get; }
    public bool AllowAnnotationsAndFormsModifying { get; }
    public bool AllowFormsFilling { get; }
    public bool AllowAccessibility { get; }
    public bool AllowDocumentAssembling { get; }
    public bool AllowHighQualityPrinting { get; }
    public IEnumerable`1<PdfFileAttachment> FileAttachments { get; }
    public IDictionary`2<string, string> CustomProperties { get; }
    internal PdfDocumentCatalog DocumentCatalog { get; }
    internal IPdfValidationLogger ValidationLogger { get; }
    internal Byte[][] ID { get; }
    internal PdfDocument(PdfFileVersion version, PdfDocumentInfo documentInfo, PdfDocumentCatalog documentCatalog, PdfEncryptionInfo encryptionInfo, Byte[][] id);
    internal PdfDocument(Stream stream, PdfCompatibilityOptions compatibilityOptions, PdfSignature signature, PdfEncryptionParameters encryptionParameters);
    internal PdfDocument(Stream stream, PdfCreationOptions creationOptions, PdfSignature signature, PdfEncryptionParameters encryptionParameters);
    internal PdfDocument(PdfCompatibilityOptions options);
    public PdfFileVersion get_Version();
    public string get_Title();
    public void set_Title(string value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public string get_Creator();
    public void set_Creator(string value);
    public string get_Producer();
    public void set_Producer(string value);
    internal string get_AdditionalMetadata();
    internal void set_AdditionalMetadata(string value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public Nullable`1<DateTimeOffset> get_ModDate();
    public DefaultBoolean get_Trapped();
    public void set_Trapped(DefaultBoolean value);
    public IList`1<PdfPage> get_Pages();
    public IDictionary`2<int, PdfPageLabel> get_PageLabels();
    public PdfNames get_Names();
    public IDictionary`2<string, PdfDestination> get_Destinations();
    public PdfViewerPreferences get_ViewerPreferences();
    public void set_ViewerPreferences(PdfViewerPreferences value);
    public PdfPageLayout get_PageLayout();
    public void set_PageLayout(PdfPageLayout value);
    public PdfPageMode get_PageMode();
    public void set_PageMode(PdfPageMode value);
    public PdfOutlines get_Outlines();
    public IList`1<PdfBookmark> get_Bookmarks();
    public void set_Bookmarks(IList`1<PdfBookmark> value);
    public IList`1<PdfArticleThread> get_Threads();
    public PdfDestination get_OpenDestination();
    public PdfAction get_OpenAction();
    public void set_OpenAction(PdfAction value);
    public PdfDocumentActions get_Actions();
    public void set_Actions(PdfDocumentActions value);
    public CultureInfo get_LanguageCulture();
    public void set_LanguageCulture(CultureInfo value);
    public PdfInteractiveForm get_AcroForm();
    internal void set_AcroForm(PdfInteractiveForm value);
    public PdfMetadata get_Metadata();
    public PdfLogicalStructure get_LogicalStructure();
    public PdfMarkInfo get_MarkInfo();
    public IList`1<PdfOutputIntent> get_OutputIntents();
    public IDictionary`2<string, PdfPieceInfoEntry> get_PieceInfo();
    public PdfOptionalContentProperties get_OptionalContentProperties();
    public bool get_NeedsRendering();
    public bool get_AllowPrinting();
    public bool get_AllowModifying();
    public bool get_AllowDataExtraction();
    public bool get_AllowAnnotationsAndFormsModifying();
    public bool get_AllowFormsFilling();
    public bool get_AllowAccessibility();
    public bool get_AllowDocumentAssembling();
    public bool get_AllowHighQualityPrinting();
    public IEnumerable`1<PdfFileAttachment> get_FileAttachments();
    public IDictionary`2<string, string> get_CustomProperties();
    internal PdfDocumentCatalog get_DocumentCatalog();
    internal IPdfValidationLogger get_ValidationLogger();
    internal Byte[][] get_ID();
    internal void UpdateObjects(PdfObjectCollection objects);
    internal PdfPage AddPage(PdfRectangle mediaBox, PdfRectangle cropBox, int rotate);
    internal PdfPage AddPage(PdfRectangle mediaBox);
    internal PdfPage InsertPage(int pageNumber, PdfRectangle mediaBox, PdfRectangle cropBox, int rotate);
    internal PdfPage InsertPage(int pageNumber, PdfRectangle mediaBox);
    internal void DeletePages(IEnumerable`1<int> pages);
    internal void DeletePage(int pageNumber);
    internal void Append(PdfDocument document);
    internal void AttachFile(PdfFileAttachment attachment);
    internal bool DeleteAttachment(PdfFileAttachment attachment);
    internal void FinalizeDocument();
    internal void SetCreationDate(DateTimeOffset date);
    internal void SetModDate(DateTimeOffset date);
    internal PdfObjectReference[] Write(IPdfWrittenObjectsCollection objects);
    internal void UpdatePermissionFlags(PdfObjectCollection objects);
    private void CheckOptions(PdfCreationOptions creationOptions, PdfEncryptionParameters encryptionParameters);
    private XmpDocument GetDocumentMetadata();
    internal void UpdateMetadata();
    private void SetMetadata(string metadata, bool updateDocumentProperties);
    private void SetMetadata(XmpDocument xmpDocument, bool updateDocumentProperties);
    private void SetMetadata(XmpMetadata xmpMetadata, bool updateDocumentProperties);
    public void SetMetadata(string metadata);
    public void SetMetadata(XmpDocument xmpDocument);
    public void SetMetadata(XmpMetadata xmpMetadata);
    public void AttachZugferdInvoice(Stream invoiceStream);
    public void AttachZugferdInvoice(Stream invoiceStream, PdfZugferdVersion version, PdfZugferdConformanceLevel conformanceLevel);
    public void AttachZugferdInvoice(Byte[] invoiceData);
    public void AttachZugferdInvoice(Byte[] invoiceData, PdfZugferdVersion version, PdfZugferdConformanceLevel conformanceLevel);
    private void UpdateDocumentProperties(XmpDocument document);
}
public class DevExpress.Pdf.PdfDocumentActions : PdfObject {
    private static string documentClosingDictionaryKey;
    private static string documentSavingDictionaryKey;
    private static string documentSavedDictionaryKey;
    private static string documentPrintingDictionaryKey;
    private static string documentPrintedDictionaryKey;
    private PdfJavaScriptAction documentClosing;
    private PdfJavaScriptAction documentSaving;
    private PdfJavaScriptAction documentSaved;
    private PdfJavaScriptAction documentPrinting;
    private PdfJavaScriptAction documentPrinted;
    private PdfDocumentCatalog documentCatalog;
    public PdfJavaScriptAction DocumentClosing { get; public set; }
    public PdfJavaScriptAction DocumentSaving { get; public set; }
    public PdfJavaScriptAction DocumentSaved { get; public set; }
    public PdfJavaScriptAction DocumentPrinting { get; public set; }
    public PdfJavaScriptAction DocumentPrinted { get; public set; }
    internal PdfDocumentCatalog DocumentCatalog { get; }
    public PdfDocumentActions(PdfDocument document);
    internal PdfDocumentActions(PdfReaderDictionary dictionary);
    public PdfJavaScriptAction get_DocumentClosing();
    public void set_DocumentClosing(PdfJavaScriptAction value);
    public PdfJavaScriptAction get_DocumentSaving();
    public void set_DocumentSaving(PdfJavaScriptAction value);
    public PdfJavaScriptAction get_DocumentSaved();
    public void set_DocumentSaved(PdfJavaScriptAction value);
    public PdfJavaScriptAction get_DocumentPrinting();
    public void set_DocumentPrinting(PdfJavaScriptAction value);
    public PdfJavaScriptAction get_DocumentPrinted();
    public void set_DocumentPrinted(PdfJavaScriptAction value);
    internal PdfDocumentCatalog get_DocumentCatalog();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfDocumentArea : object {
    private int pageNumber;
    private PdfRectangle area;
    internal int PageIndex { get; }
    public int PageNumber { get; }
    public PdfRectangle Area { get; }
    public PdfDocumentArea(int pageNumber, PdfRectangle area);
    public static PdfDocumentArea Create(PdfDocumentPosition position1, PdfDocumentPosition position2);
    internal int get_PageIndex();
    public int get_PageNumber();
    public PdfRectangle get_Area();
}
public class DevExpress.Pdf.PdfDocumentContent : object {
    private PdfDocumentPosition documentPosition;
    private PdfDocumentContentType contentType;
    private bool selected;
    public PdfDocumentPosition DocumentPosition { get; }
    public PdfDocumentContentType ContentType { get; }
    public bool IsSelected { get; }
    internal PdfCursor Cursor { get; }
    public PdfDocumentContent(PdfDocumentPosition documentPosition, PdfDocumentContentType contentType, bool selected);
    public PdfDocumentPosition get_DocumentPosition();
    public PdfDocumentContentType get_ContentType();
    public bool get_IsSelected();
    internal PdfCursor get_Cursor();
}
public enum DevExpress.Pdf.PdfDocumentContentType : Enum {
    public int value__;
    public static PdfDocumentContentType None;
    public static PdfDocumentContentType Text;
    public static PdfDocumentContentType Image;
    public static PdfDocumentContentType Annotation;
}
public enum DevExpress.Pdf.PdfDocumentDataExtractionPermissions : Enum {
    public int value__;
    public static PdfDocumentDataExtractionPermissions NotAllowed;
    public static PdfDocumentDataExtractionPermissions Accessibility;
    public static PdfDocumentDataExtractionPermissions Allowed;
}
public class DevExpress.Pdf.PdfDocumentFacade : object {
    private PdfDocumentStateBase state;
    private PdfPagesFacade pages;
    private PdfAcroFormFacade acroForm;
    public PdfAcroFormFacade AcroForm { get; }
    public IReadOnlyList`1<PdfPageFacade> Pages { get; }
    internal PdfDocumentFacade(PdfDocumentStateBase state);
    public PdfAcroFormFacade get_AcroForm();
    public IReadOnlyList`1<PdfPageFacade> get_Pages();
    internal void ResetPagesCache();
    public void FlattenAnnotations(Func`2<PdfAnnotationFacade, bool> predicate);
    public void FlattenAnnotations();
    public void FlattenAnnotations(String[] names);
    public void FlattenAnnotations(PdfAnnotationType[] types);
}
public enum DevExpress.Pdf.PdfDocumentInteractivityPermissions : Enum {
    public int value__;
    public static PdfDocumentInteractivityPermissions NotAllowed;
    public static PdfDocumentInteractivityPermissions FormFillingAndSigning;
    public static PdfDocumentInteractivityPermissions Allowed;
}
public enum DevExpress.Pdf.PdfDocumentModificationPermissions : Enum {
    public int value__;
    public static PdfDocumentModificationPermissions NotAllowed;
    public static PdfDocumentModificationPermissions DocumentAssembling;
    public static PdfDocumentModificationPermissions Allowed;
}
public class DevExpress.Pdf.PdfDocumentPosition : object {
    private static int nearDistance;
    private int pageNumber;
    private PdfPoint point;
    internal int PageIndex { get; }
    public int PageNumber { get; }
    public PdfPoint Point { get; }
    public PdfDocumentPosition(int pageNumber, PdfPoint point);
    internal int get_PageIndex();
    public int get_PageNumber();
    public PdfPoint get_Point();
    internal bool NearTo(PdfDocumentPosition position);
}
public enum DevExpress.Pdf.PdfDocumentPrintingPermissions : Enum {
    public int value__;
    public static PdfDocumentPrintingPermissions NotAllowed;
    public static PdfDocumentPrintingPermissions LowQuality;
    public static PdfDocumentPrintingPermissions Allowed;
}
public class DevExpress.Pdf.PdfDocumentProcessorHelper : object {
    private PdfDocumentStateBase state;
    private Func`3<Stream, PdfSaveOptions, bool> saveToStreamAction;
    private Func`3<string, PdfSaveOptions, bool> saveToPathAction;
    internal PdfDocumentFacade DocumentFacade { get; }
    internal PdfDocumentProcessorHelper(Func`3<Stream, PdfSaveOptions, bool> saveToStreamAction, Func`3<string, PdfSaveOptions, bool> saveToPathAction, PdfDocumentStateBase state);
    internal PdfDocumentFacade get_DocumentFacade();
    internal PdfFormData GetFormData();
    internal bool Save(Stream stream, PdfSaveOptions options);
    internal bool Save(string path, PdfSaveOptions options);
}
public class DevExpress.Pdf.PdfDouble : object {
    private double value;
    public double Value { get; }
    public PdfDouble(object value);
    public double get_Value();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.PdfEmbeddedGoToAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfEmbeddedGoToAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public class DevExpress.Pdf.PdfEmptySoftMask : PdfSoftMask {
    internal static string Name;
    private static PdfEmptySoftMask instance;
    public static PdfEmptySoftMask Instance { get; }
    private static PdfEmptySoftMask();
    public static PdfEmptySoftMask get_Instance();
    protected internal virtual bool IsSame(PdfSoftMask softMask);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfEncoding : PdfObject {
    protected internal bool ShouldUseEmbeddedFontEncoding { get; }
    protected internal abstract virtual bool get_ShouldUseEmbeddedFontEncoding();
    protected internal abstract virtual PdfStringCommandData GetStringData(Byte[] bytes, Double[] glyphOffsets);
    protected internal abstract virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal abstract virtual PdfPrimitive Write(PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfEncryptionAlgorithm : Enum {
    public int value__;
    public static PdfEncryptionAlgorithm ARC4;
    public static PdfEncryptionAlgorithm AES128;
    public static PdfEncryptionAlgorithm AES256;
}
public class DevExpress.Pdf.PdfEncryptionOptions : object {
    private string ownerPassword;
    private string userPassword;
    private PdfEncryptionAlgorithm algorithm;
    private PdfDocumentPrintingPermissions printingPermissions;
    private PdfDocumentDataExtractionPermissions dataExtractionPermissions;
    private PdfDocumentModificationPermissions modificationPermissions;
    private PdfDocumentInteractivityPermissions interactivityPermissions;
    [ObsoleteAttribute("The OwnerPassword property is now obsolete. Use the OwnerPasswordString property instead.")]
public SecureString OwnerPassword { get; public set; }
    [ObsoleteAttribute("The UserPassword property is now obsolete. Use the UserPasswordString property instead.")]
public SecureString UserPassword { get; public set; }
    public string OwnerPasswordString { get; public set; }
    public string UserPasswordString { get; public set; }
    public PdfEncryptionAlgorithm Algorithm { get; public set; }
    public PdfDocumentPrintingPermissions PrintingPermissions { get; public set; }
    public PdfDocumentDataExtractionPermissions DataExtractionPermissions { get; public set; }
    public PdfDocumentModificationPermissions ModificationPermissions { get; public set; }
    public PdfDocumentInteractivityPermissions InteractivityPermissions { get; public set; }
    internal PdfEncryptionParameters EncryptionParameters { get; }
    public SecureString get_OwnerPassword();
    public void set_OwnerPassword(SecureString value);
    public SecureString get_UserPassword();
    public void set_UserPassword(SecureString value);
    public string get_OwnerPasswordString();
    public void set_OwnerPasswordString(string value);
    public string get_UserPasswordString();
    public void set_UserPasswordString(string value);
    public PdfEncryptionAlgorithm get_Algorithm();
    public void set_Algorithm(PdfEncryptionAlgorithm value);
    public PdfDocumentPrintingPermissions get_PrintingPermissions();
    public void set_PrintingPermissions(PdfDocumentPrintingPermissions value);
    public PdfDocumentDataExtractionPermissions get_DataExtractionPermissions();
    public void set_DataExtractionPermissions(PdfDocumentDataExtractionPermissions value);
    public PdfDocumentModificationPermissions get_ModificationPermissions();
    public void set_ModificationPermissions(PdfDocumentModificationPermissions value);
    public PdfDocumentInteractivityPermissions get_InteractivityPermissions();
    public void set_InteractivityPermissions(PdfDocumentInteractivityPermissions value);
    internal PdfEncryptionParameters get_EncryptionParameters();
}
public class DevExpress.Pdf.PdfEndPathWithoutFillingAndStrokingCommand : PdfCommand {
    internal static string Name;
    private static PdfEndPathWithoutFillingAndStrokingCommand instance;
    internal static PdfEndPathWithoutFillingAndStrokingCommand Instance { get; }
    private static PdfEndPathWithoutFillingAndStrokingCommand();
    internal static PdfEndPathWithoutFillingAndStrokingCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfEndTextCommand : PdfCommand {
    internal static string Name;
    private static PdfEndTextCommand instance;
    internal static PdfEndTextCommand Instance { get; }
    private static PdfEndTextCommand();
    internal static PdfEndTextCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfExponentialInterpolationFunction : PdfCustomFunction {
    internal static int Number;
    private static string c0DictionaryKey;
    private static string c1DictionaryKey;
    private static string exponentDictionaryKey;
    private IList`1<double> c0;
    private IList`1<double> c1;
    private double exponent;
    public IList`1<double> C0 { get; }
    public IList`1<double> C1 { get; }
    public double Exponent { get; }
    protected internal int RangeSize { get; }
    protected bool ShouldCheckEmptyRange { get; }
    protected int FunctionType { get; }
    internal PdfExponentialInterpolationFunction(PdfReaderDictionary dictionary);
    internal PdfExponentialInterpolationFunction(IList`1<double> c0, IList`1<double> c1, double exponent, IList`1<PdfRange> domain, IList`1<PdfRange> range);
    private static IList`1<double> CreateArray(PdfReaderArray cArray, int n);
    private static bool CompareArrays(IList`1<double> array1, IList`1<double> array2);
    private static IList`1<object> ToObjectArray(IList`1<double> array);
    public IList`1<double> get_C0();
    public IList`1<double> get_C1();
    public double get_Exponent();
    protected internal virtual int get_RangeSize();
    protected virtual bool get_ShouldCheckEmptyRange();
    protected virtual int get_FunctionType();
    protected internal virtual bool IsSame(PdfFunction function);
    protected virtual Double[] PerformTransformation(Double[] arguments);
    protected virtual PdfWriterDictionary FillDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfFileAttachment : object {
    private PdfFileSpecification fileSpecification;
    internal PdfFileSpecification FileSpecification { get; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string MimeType { get; public set; }
    public Byte[] Data { get; public set; }
    public int Size { get; }
    public string FileName { get; public set; }
    public PdfAssociatedFileRelationship Relationship { get; public set; }
    public string Description { get; public set; }
    internal PdfFileAttachment(PdfFileSpecification fileSpecification);
    internal PdfFileSpecification get_FileSpecification();
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public string get_MimeType();
    public void set_MimeType(string value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public int get_Size();
    public string get_FileName();
    public void set_FileName(string value);
    public PdfAssociatedFileRelationship get_Relationship();
    public void set_Relationship(PdfAssociatedFileRelationship value);
    public string get_Description();
    public void set_Description(string value);
}
public class DevExpress.Pdf.PdfFileAttachmentAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    private static string fileSpecificationDictionaryKey;
    private static string iconNameDictionaryKey;
    private static string defaultIconName;
    private PdfFileSpecification fileSpecification;
    private string iconName;
    public PdfFileSpecification FileSpecification { get; internal set; }
    public string IconName { get; internal set; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfFileAttachmentAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    internal PdfFileAttachmentAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public PdfFileSpecification get_FileSpecification();
    internal void set_FileSpecification(PdfFileSpecification value);
    public string get_IconName();
    internal void set_IconName(string value);
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfFileAttachmentAnnotationFacade : PdfMarkupAnnotationFacade {
    private PdfFileAttachmentAnnotationState annotationState;
    public string IconName { get; public set; }
    public PdfFileAttachment Attachment { get; public set; }
    internal PdfFileAttachmentAnnotationFacade(PdfFileAttachmentAnnotationState annotation);
    public string get_IconName();
    public void set_IconName(string value);
    public PdfFileAttachment get_Attachment();
    public void set_Attachment(PdfFileAttachment value);
}
public static class DevExpress.Pdf.PdfFileAttachmentAnnotationIconName : object {
    public static string Graph;
    public static string PushPin;
    public static string PaperClip;
    public static string Tag;
}
public class DevExpress.Pdf.PdfFileSpecification : PdfObject {
    private static string dictionaryType;
    private static string fileSystemDictionaryKey;
    private static string fileNameDictionaryKey;
    private static string unicodeFileNameDictionaryKey;
    private static string embeddedFileDictionaryKey;
    private static string descriptionDictionaryKey;
    private static string collectionItemDictionaryKey;
    private static string relationshipDictionaryKey;
    private static string indexDictionaryKey;
    private static string encryptedPayloadKey;
    private string fileSystem;
    private int index;
    private string fileName;
    private string description;
    private PdfAssociatedFileRelationship relationship;
    private PdfFileAttachment attachment;
    private PdfFileSpecificationData fileSpecificationData;
    [CompilerGeneratedAttribute]
private PdfObject <EncryptedPayload>k__BackingField;
    public string FileSystem { get; }
    public int Index { get; }
    public string FileName { get; internal set; }
    public string MimeType { get; internal set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; internal set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; internal set; }
    public Byte[] FileData { get; internal set; }
    public int Size { get; }
    public string Description { get; internal set; }
    public PdfAssociatedFileRelationship Relationship { get; internal set; }
    internal PdfFileAttachment Attachment { get; internal set; }
    internal PdfObject EncryptedPayload { get; }
    private PdfFileSpecification(PdfReaderDictionary dictionary);
    internal PdfFileSpecification(string fileName);
    internal static PdfFileSpecification Parse(object value);
    internal static PdfFileSpecification Parse(PdfReaderDictionary dictionary, string key, bool required);
    public string get_FileSystem();
    public int get_Index();
    public string get_FileName();
    internal void set_FileName(string value);
    public string get_MimeType();
    internal void set_MimeType(string value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    internal void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    internal void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public Byte[] get_FileData();
    internal void set_FileData(Byte[] value);
    public int get_Size();
    public string get_Description();
    internal void set_Description(string value);
    public PdfAssociatedFileRelationship get_Relationship();
    internal void set_Relationship(PdfAssociatedFileRelationship value);
    internal PdfFileAttachment get_Attachment();
    internal void set_Attachment(PdfFileAttachment value);
    [CompilerGeneratedAttribute]
internal PdfObject get_EncryptedPayload();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.PdfFileVersion : Enum {
    public int value__;
    public static PdfFileVersion Pdf_1_0;
    public static PdfFileVersion Pdf_1_1;
    public static PdfFileVersion Pdf_1_2;
    public static PdfFileVersion Pdf_1_3;
    public static PdfFileVersion Pdf_1_4;
    public static PdfFileVersion Pdf_1_5;
    public static PdfFileVersion Pdf_1_6;
    public static PdfFileVersion Pdf_1_7;
    public static PdfFileVersion Pdf_2_0;
    public static PdfFileVersion Unknown;
}
public class DevExpress.Pdf.PdfFillAndStrokePathUsingEvenOddRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfFillAndStrokePathUsingEvenOddRuleCommand instance;
    internal static PdfFillAndStrokePathUsingEvenOddRuleCommand Instance { get; }
    private static PdfFillAndStrokePathUsingEvenOddRuleCommand();
    internal static PdfFillAndStrokePathUsingEvenOddRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfFillAndStrokePathUsingNonzeroWindingNumberRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfFillAndStrokePathUsingNonzeroWindingNumberRuleCommand instance;
    internal static PdfFillAndStrokePathUsingNonzeroWindingNumberRuleCommand Instance { get; }
    private static PdfFillAndStrokePathUsingNonzeroWindingNumberRuleCommand();
    internal static PdfFillAndStrokePathUsingNonzeroWindingNumberRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfFillPathUsingEvenOddRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfFillPathUsingEvenOddRuleCommand instance;
    internal static PdfFillPathUsingEvenOddRuleCommand Instance { get; }
    private static PdfFillPathUsingEvenOddRuleCommand();
    internal static PdfFillPathUsingEvenOddRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfFillPathUsingNonzeroWindingNumberRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfFillPathUsingNonzeroWindingNumberRuleCommand instance;
    internal static PdfFillPathUsingNonzeroWindingNumberRuleCommand Instance { get; }
    private static PdfFillPathUsingNonzeroWindingNumberRuleCommand();
    internal static PdfFillPathUsingNonzeroWindingNumberRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public abstract class DevExpress.Pdf.PdfFilter : object {
    protected internal string FilterName { get; }
    internal Byte[] EodToken { get; }
    internal static PdfFilter Create(string name, PdfReaderDictionary parameters);
    protected internal abstract virtual string get_FilterName();
    internal virtual Byte[] get_EodToken();
    internal virtual RawImageDataSource CreateRawDataSource(PdfImage image, Byte[] data);
    protected internal virtual PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
    protected internal virtual PdfScanlineTransformationResult CreateScanlineSource(PdfImage image, int componentsCount, Byte[] data);
    protected internal abstract virtual Byte[] Decode(Byte[] data);
}
public enum DevExpress.Pdf.PdfFilterAnnotationType : Enum {
    public int value__;
    public static PdfFilterAnnotationType Text;
    public static PdfFilterAnnotationType FreeText;
    public static PdfFilterAnnotationType Line;
    public static PdfFilterAnnotationType Square;
    public static PdfFilterAnnotationType Circle;
    public static PdfFilterAnnotationType Polygon;
    public static PdfFilterAnnotationType PolyLine;
    public static PdfFilterAnnotationType Highlight;
    public static PdfFilterAnnotationType Underline;
    public static PdfFilterAnnotationType Squiggly;
    public static PdfFilterAnnotationType StrikeOut;
    public static PdfFilterAnnotationType Stamp;
    public static PdfFilterAnnotationType Caret;
    public static PdfFilterAnnotationType Ink;
    public static PdfFilterAnnotationType FileAttachment;
    public static PdfFilterAnnotationType Sound;
    public static PdfFilterAnnotationType Redact;
    public static PdfFilterAnnotationType Custom;
}
public class DevExpress.Pdf.PdfFitBBoxDestination : PdfDestination {
    internal static string Name;
    public PdfFitBBoxDestination(PdfPage page);
    internal PdfFitBBoxDestination(PdfDocumentCatalog documentCatalog, object pageObject);
    private PdfFitBBoxDestination(PdfDocumentCatalog catalog, PdfFitBBoxDestination destination, int objectNumber);
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog catalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfFitBBoxHorizontallyDestination : PdfDestination {
    internal static string Name;
    private Nullable`1<double> top;
    public Nullable`1<double> Top { get; }
    public PdfFitBBoxHorizontallyDestination(PdfPage page, Nullable`1<double> top);
    internal PdfFitBBoxHorizontallyDestination(PdfDocumentCatalog documentCatalog, object pageObject, Nullable`1<double> top);
    private PdfFitBBoxHorizontallyDestination(PdfDocumentCatalog catalog, PdfFitBBoxHorizontallyDestination destination, int objectNumber);
    public Nullable`1<double> get_Top();
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog catalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfFitBBoxVerticallyDestination : PdfDestination {
    internal static string Name;
    private Nullable`1<double> left;
    public Nullable`1<double> Left { get; }
    public PdfFitBBoxVerticallyDestination(PdfPage page, Nullable`1<double> left);
    internal PdfFitBBoxVerticallyDestination(PdfDocumentCatalog documentCatalog, object pageObject, Nullable`1<double> left);
    private PdfFitBBoxVerticallyDestination(PdfDocumentCatalog catalog, PdfFitBBoxVerticallyDestination destination, int objectNumber);
    public Nullable`1<double> get_Left();
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog catalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfFitDestination : PdfDestination {
    internal static string Name;
    public PdfFitDestination(PdfPage page);
    internal PdfFitDestination(PdfDocumentCatalog documentCatalog, object pageObject);
    private PdfFitDestination(PdfDocumentCatalog catalog, PdfFitDestination destination, int objectNumber);
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog catalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfFitHorizontallyDestination : PdfDestination {
    internal static string Name;
    private Nullable`1<double> top;
    public Nullable`1<double> Top { get; }
    public PdfFitHorizontallyDestination(PdfPage page, Nullable`1<double> top);
    internal PdfFitHorizontallyDestination(PdfDocumentCatalog documentCatalog, object pageObject, Nullable`1<double> top);
    private PdfFitHorizontallyDestination(PdfDocumentCatalog catalog, PdfFitHorizontallyDestination destination, int objectNumber);
    public Nullable`1<double> get_Top();
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog catalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfFitRectangleDestination : PdfDestination {
    internal static string Name;
    private PdfRectangle rectangle;
    public PdfRectangle Rectangle { get; }
    public PdfFitRectangleDestination(PdfPage page, PdfRectangle rectangle);
    internal PdfFitRectangleDestination(PdfDocumentCatalog documentCatalog, object pageObject, PdfRectangle rectangle);
    private PdfFitRectangleDestination(PdfDocumentCatalog catalog, PdfFitRectangleDestination destination, int objectNumber);
    public PdfRectangle get_Rectangle();
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog catalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfFitVerticallyDestination : PdfDestination {
    internal static string Name;
    private Nullable`1<double> left;
    public Nullable`1<double> Left { get; }
    public PdfFitVerticallyDestination(PdfPage page, Nullable`1<double> left);
    internal PdfFitVerticallyDestination(PdfDocumentCatalog documentCatalog, object pageObject, Nullable`1<double> left);
    private PdfFitVerticallyDestination(PdfDocumentCatalog catalog, PdfFitVerticallyDestination destination, int objectNumber);
    public Nullable`1<double> get_Left();
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog catalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public class DevExpress.Pdf.PdfFlateDecodeFilter : PdfFlateLZWDecodeFilter {
    internal static string Name;
    internal static string ShortName;
    protected internal string FilterName { get; }
    internal PdfFlateDecodeFilter(PdfReaderDictionary parameters);
    internal PdfFlateDecodeFilter(PdfFlateLZWFilterPredictor predictor, int colors, int bitsPerComponent, int columns);
    protected internal virtual string get_FilterName();
    protected virtual Byte[] PerformDecode(Byte[] data);
    private IPdfFlateDataSource CreateFlateDataSource(Byte[] data);
    internal virtual RawImageDataSource CreateRawDataSource(PdfImage image, Byte[] data);
    protected internal virtual PdfScanlineTransformationResult CreateScanlineSource(PdfImage image, int componentsCount, Byte[] data);
}
public abstract class DevExpress.Pdf.PdfFlateLZWDecodeFilter : PdfFilter {
    private static PdfFlateLZWFilterPredictor defaultPredictor;
    private static int defaultColors;
    private static int defaultBitsPerComponent;
    private static int defaultColumns;
    private static string predictorDictionaryKey;
    private static string colorsDictionaryKey;
    private static string bitsPerComponentDictionaryKey;
    private static string columnsDictionaryKey;
    private PdfFlateLZWFilterPredictor predictor;
    private int colors;
    private int bitsPerComponent;
    private int columns;
    public PdfFlateLZWFilterPredictor Predictor { get; }
    public int Colors { get; }
    public int BitsPerComponent { get; }
    public int Columns { get; }
    protected PdfFlateLZWDecodeFilter(PdfFlateLZWFilterPredictor predictor, int colors, int bitsPerComponent, int columns);
    protected PdfFlateLZWDecodeFilter(PdfReaderDictionary parameters);
    public PdfFlateLZWFilterPredictor get_Predictor();
    public int get_Colors();
    public int get_BitsPerComponent();
    public int get_Columns();
    protected internal virtual PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
    protected internal virtual Byte[] Decode(Byte[] data);
    internal bool IsFullEncodedData(Byte[] data, int expectedSize);
    protected abstract virtual Byte[] PerformDecode(Byte[] data);
}
public enum DevExpress.Pdf.PdfFlateLZWFilterPredictor : Enum {
    public int value__;
    public static PdfFlateLZWFilterPredictor NoPrediction;
    public static PdfFlateLZWFilterPredictor TiffPredictor;
    public static PdfFlateLZWFilterPredictor PngNonePrediction;
    public static PdfFlateLZWFilterPredictor PngSubPrediction;
    public static PdfFlateLZWFilterPredictor PngUpPrediction;
    public static PdfFlateLZWFilterPredictor PngAveragePrediction;
    public static PdfFlateLZWFilterPredictor PngPaethPrediction;
    public static PdfFlateLZWFilterPredictor PngOptimumPrediction;
}
public abstract class DevExpress.Pdf.PdfFont : PdfObject {
    internal static string DictionaryType;
    internal static string BaseFontDictionaryKey;
    protected static string FontDescriptorDictionaryKey;
    protected static string ToUnicodeDictionaryKey;
    protected static string FontFile3DictionaryKey;
    private static string encodingDictionaryKey;
    private static string openTypeFontSubtype;
    private static int subsetNameLength;
    private static int subsetPrefixLength;
    private string baseFont;
    private string subsetName;
    private string fontName;
    private PdfFontDescriptor fontDescriptor;
    private PdfToUnicodeMapping toUnicode;
    private PdfFontProgramFacade fontProgramFacade;
    private PdfFontMetricsMetadata metrics;
    private Lazy`1<IPdfToUnicodeCMap> cmap;
    protected PdfFontDescriptor RawFontDescriptor { get; }
    public string BaseFont { get; }
    public string SubsetName { get; }
    public string FontName { get; }
    public PdfCharacterMapping ToUnicode { get; }
    public PdfFontDescriptor FontDescriptor { get; }
    protected internal double WidthFactor { get; }
    protected internal double HeightFactor { get; }
    protected internal bool HasSizeAttributes { get; }
    protected internal string Subtype { get; }
    protected internal IEnumerable`1<double> GlyphWidths { get; }
    protected internal PdfEncoding ActualEncoding { get; }
    internal bool IsVerticalFont { get; }
    internal bool IsSymbolic { get; }
    internal PdfFontCharset Charset { get; }
    internal PdfFontProgramFacade FontProgramFacade { get; internal set; }
    internal PdfToUnicodeMapping ToUnicodeMapping { get; internal set; }
    private PdfFont(int objectNumber, string baseFont);
    protected PdfFont(int objectNumber, string baseFont, PdfFontDescriptor fontDescriptor);
    protected PdfFont(int objectNumber, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptorDictionary);
    internal static object GetEncodingValue(PdfReaderDictionary dictionary);
    internal static string GetFontName(PdfReaderDictionary dictionary, string dictionaryKey);
    internal static PdfFont CreateFont(PdfReaderDictionary fontDictionary);
    internal static PdfFont CreateFallbackRenderingFont();
    internal static string GetFontNameWithoutSubset(string fontName);
    private static Tuple`2<string, string> GetSubsetAndFontName(string fontName);
    protected PdfFontDescriptor get_RawFontDescriptor();
    public string get_BaseFont();
    public string get_SubsetName();
    public string get_FontName();
    public PdfCharacterMapping get_ToUnicode();
    public virtual PdfFontDescriptor get_FontDescriptor();
    protected internal virtual double get_WidthFactor();
    protected internal virtual double get_HeightFactor();
    protected internal virtual bool get_HasSizeAttributes();
    protected internal abstract virtual string get_Subtype();
    protected internal abstract virtual IEnumerable`1<double> get_GlyphWidths();
    protected internal abstract virtual PdfEncoding get_ActualEncoding();
    internal virtual bool get_IsVerticalFont();
    internal bool get_IsSymbolic();
    internal virtual PdfFontCharset get_Charset();
    internal PdfFontProgramFacade get_FontProgramFacade();
    internal void set_FontProgramFacade(PdfFontProgramFacade value);
    internal PdfToUnicodeMapping get_ToUnicodeMapping();
    internal void set_ToUnicodeMapping(PdfToUnicodeMapping value);
    private void SetCMap(PdfToUnicodeMapping mapping);
    protected Byte[] GetOpenTypeFontFileData(PdfReaderStream stream, bool suppressException);
    protected Byte[] GetOpenTypeFontFileData(PdfReaderDictionary dictionary, bool suppressException);
    protected bool WriteOpenTypeFontData(PdfWriterDictionary dictionary, Byte[] openTypeFontData);
    protected bool WriteOpenTypeFontData(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection, Byte[] openTypeFontData);
    protected virtual PdfFontDescriptor CreateFontDescriptor(PdfReaderDictionary dictionary);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual void UpdateFontDescriptorDictionary(PdfWriterDictionary dictionary);
    protected internal virtual void UpdateFontDescriptorDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    internal PdfFontMetricsMetadata GetValidatedMetrics(IPdfRenderingFontInfoProvider widthProvider);
    protected virtual PdfFontMetricsMetadata CreateValidatedMetrics(IPdfRenderingFontInfoProvider widthProvider);
    private static bool MetricsEqualsToFontFileBbox(double ascent, double descent, PdfRectangle fontBbox);
    private static bool IsValidHeight(double ascent, double descent);
    protected abstract virtual PdfFontProgramFacade CreateFontProgramFacade();
    internal virtual PdfVerticalGlyphMetrics GetVerticalGlyphMetrics(int charCode);
    internal double GetCharacterWidth(IPdfRenderingFontInfoProvider widthProvider, int charCode);
    protected abstract virtual Nullable`1<double> GetCharacterWidth(int charCode);
    protected abstract virtual string GetCharacterUnicodeFallback(Byte[] character);
    internal string GetCharacterUnicode(Byte[] character);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfFontDescriptor : PdfObject {
    internal static int FontWeightNormal;
    internal static string FontDescriptorDictionaryType;
    internal static string FlagsDictionaryKey;
    internal static string ItalicAngleDictionaryKey;
    internal static string AscentDictionaryKey;
    internal static string DescentDictionaryKey;
    internal static string FontBBoxDictionaryKey;
    internal static string FontWeightDictionaryKey;
    internal static string CapHeightDictionaryKey;
    internal static string StemVDictionaryKey;
    private static string fontNameDictionaryKey;
    private static string fontFamilyDictionaryKey;
    private static string fontStretchDictionaryKey;
    private static string leadingDictionaryKey;
    private static string xHeightDictionaryKey;
    private static string stemHDictionaryKey;
    private static string avgWidthDictionaryKey;
    private static string maxWidthDictionaryKey;
    private static string missingWidthDictionaryKey;
    private static string charSetDictionaryKey;
    private static string cidSetKey;
    private PdfFontStretch fontStretch;
    private int fontWeight;
    private PdfFontFlags flags;
    private PdfRectangle fontBBox;
    private double italicAngle;
    private double ascent;
    private double descent;
    private double leading;
    private double capHeight;
    private double xHeight;
    private double stemV;
    private double stemH;
    private double avgWidth;
    private double maxWidth;
    private double missingWidth;
    private IList`1<string> charSet;
    private Byte[] cidSetData;
    private PdfFont font;
    private string fontName;
    private string fontFamily;
    private IDictionary`2<short, short> cidMapping;
    public PdfFontStretch FontStretch { get; }
    public int FontWeight { get; }
    public PdfFontFlags Flags { get; }
    public PdfRectangle FontBBox { get; }
    public double ItalicAngle { get; }
    public double Ascent { get; }
    public double Descent { get; }
    public double Leading { get; }
    public double CapHeight { get; }
    public double XHeight { get; }
    public double StemV { get; }
    public double StemH { get; }
    public double AvgWidth { get; }
    public double MaxWidth { get; }
    public double MissingWidth { get; }
    public IList`1<string> CharSet { get; }
    public IDictionary`2<short, short> CIDMapping { get; }
    public string FontName { get; }
    public string FontFamily { get; internal set; }
    internal PdfFontDescriptor(PdfFont font, PdfReaderDictionary dictionary);
    internal PdfFontDescriptor(IPdfFontDescriptorBuilder descriptorBuilder);
    public PdfFontStretch get_FontStretch();
    public int get_FontWeight();
    public PdfFontFlags get_Flags();
    public PdfRectangle get_FontBBox();
    public double get_ItalicAngle();
    public double get_Ascent();
    public double get_Descent();
    public double get_Leading();
    public double get_CapHeight();
    public double get_XHeight();
    public double get_StemV();
    public double get_StemH();
    public double get_AvgWidth();
    public double get_MaxWidth();
    public double get_MissingWidth();
    public IList`1<string> get_CharSet();
    public IDictionary`2<short, short> get_CIDMapping();
    public string get_FontName();
    public string get_FontFamily();
    internal void set_FontFamily(string value);
    internal void SetFont(PdfFont font);
    private void UnpackCIDMapping();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfFontFamilyClass : Enum {
    public int value__;
    public static PdfFontFamilyClass NoClassification;
    public static PdfFontFamilyClass OldStyleSerifNoClassification;
    public static PdfFontFamilyClass OldStyleSerifIBMRoundedLegibility;
    public static PdfFontFamilyClass OldStyleSerifGaralde;
    public static PdfFontFamilyClass OldStyleSerifVenetian;
    public static PdfFontFamilyClass OldStyleSerifModifiedVenetian;
    public static PdfFontFamilyClass OldStyleSerifDutchModern;
    public static PdfFontFamilyClass OldStyleSerifDutchTraditional;
    public static PdfFontFamilyClass OldStyleSerifContemporary;
    public static PdfFontFamilyClass OldStyleSerifCalligraphic;
    public static PdfFontFamilyClass OldStyleSerifMiscellaneous;
    public static PdfFontFamilyClass TransitionalSerifNoClassification;
    public static PdfFontFamilyClass TransitionalSerifDirectLine;
    public static PdfFontFamilyClass TransitionalSerifScript;
    public static PdfFontFamilyClass TransitionalSerifMiscellaneous;
    public static PdfFontFamilyClass ModernSerifNoClassification;
    public static PdfFontFamilyClass ModernSerifItalian;
    public static PdfFontFamilyClass ModernSerifScript;
    public static PdfFontFamilyClass ModernSerifMiscellaneous;
    public static PdfFontFamilyClass ClarendonSerifNoClassification;
    public static PdfFontFamilyClass ClarendonSerifClarendon;
    public static PdfFontFamilyClass ClarendonSerifModern;
    public static PdfFontFamilyClass ClarendonSerifTraditional;
    public static PdfFontFamilyClass ClarendonSerifNewspaper;
    public static PdfFontFamilyClass ClarendonSerifStubSerif;
    public static PdfFontFamilyClass ClarendonSerifMonotone;
    public static PdfFontFamilyClass ClarendonSerifTypewriter;
    public static PdfFontFamilyClass ClarendonSerifMiscellaneous;
    public static PdfFontFamilyClass SlabSerifNoClassification;
    public static PdfFontFamilyClass SlabSerifMonotone;
    public static PdfFontFamilyClass SlabSerifHumanist;
    public static PdfFontFamilyClass SlabSerifGeometric;
    public static PdfFontFamilyClass SlabSerifSwiss;
    public static PdfFontFamilyClass SlabSerifTypewriter;
    public static PdfFontFamilyClass SlabSerifMiscellaneous;
    public static PdfFontFamilyClass FreeformSerifNoClassification;
    public static PdfFontFamilyClass FreeformSerifModern;
    public static PdfFontFamilyClass FreeformSerifMiscellaneous;
    public static PdfFontFamilyClass SansSerifNoClassification;
    public static PdfFontFamilyClass SansSerifIBMNewGrotesqueGothic;
    public static PdfFontFamilyClass SansSerifHumanist;
    public static PdfFontFamilyClass SansSerifLowXRoundGeometric;
    public static PdfFontFamilyClass SansSerifHighXRoundGeometric;
    public static PdfFontFamilyClass SansSerifNeoGrotesqueGothic;
    public static PdfFontFamilyClass SansSerifModifiedNeoGrotesqueGothic;
    public static PdfFontFamilyClass SansSerifTypewriterGothic;
    public static PdfFontFamilyClass SansSerifMatrix;
    public static PdfFontFamilyClass SansSerifMiscellaneous;
    public static PdfFontFamilyClass OrnamentalNoClassification;
    public static PdfFontFamilyClass OrnamentalEngraver;
    public static PdfFontFamilyClass OrnamentalBlackLetter;
    public static PdfFontFamilyClass OrnamentalDecorative;
    public static PdfFontFamilyClass OrnamentalThreeDimensional;
    public static PdfFontFamilyClass OrnamentalMiscellaneous;
    public static PdfFontFamilyClass ScriptNoClassification;
    public static PdfFontFamilyClass ScriptUncial;
    public static PdfFontFamilyClass ScriptBrushJoined;
    public static PdfFontFamilyClass ScriptFormalJoined;
    public static PdfFontFamilyClass ScriptMonotoneJoined;
    public static PdfFontFamilyClass ScriptCalligraphic;
    public static PdfFontFamilyClass ScriptBrushUnjoined;
    public static PdfFontFamilyClass ScriptFormalUnjoined;
    public static PdfFontFamilyClass ScriptMonotoneUnjoined;
    public static PdfFontFamilyClass ScriptMiscellaneous;
    public static PdfFontFamilyClass SymbolicNoClassification;
    public static PdfFontFamilyClass SymbolicMixedSerif;
    public static PdfFontFamilyClass SymbolicOldstyleSerif;
    public static PdfFontFamilyClass SymbolicNeoGrotesqueSansSerif;
    public static PdfFontFamilyClass SymbolicMiscellaneous;
}
[FlagsAttribute]
public enum DevExpress.Pdf.PdfFontFlags : Enum {
    public int value__;
    public static PdfFontFlags None;
    public static PdfFontFlags FixedPitch;
    public static PdfFontFlags Serif;
    public static PdfFontFlags Symbolic;
    public static PdfFontFlags Script;
    public static PdfFontFlags Nonsymbolic;
    public static PdfFontFlags Italic;
    public static PdfFontFlags AllCap;
    public static PdfFontFlags SmallCap;
    public static PdfFontFlags ForceBold;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfFontStretch : Enum {
    public int value__;
    public static PdfFontStretch UltraCondensed;
    public static PdfFontStretch ExtraCondensed;
    public static PdfFontStretch Condensed;
    public static PdfFontStretch SemiCondensed;
    public static PdfFontStretch Normal;
    public static PdfFontStretch SemiExpanded;
    public static PdfFontStretch Expanded;
    public static PdfFontStretch ExtraExpanded;
    public static PdfFontStretch UltraExpanded;
}
[FlagsAttribute]
public enum DevExpress.Pdf.PdfFontStyle : Enum {
    public int value__;
    public static PdfFontStyle Regular;
    public static PdfFontStyle Bold;
    public static PdfFontStyle Italic;
    public static PdfFontStyle Underline;
    public static PdfFontStyle Strikeout;
}
public class DevExpress.Pdf.PdfForm : PdfXObject {
    internal static string Type;
    private static string bBoxDictionaryKey;
    private static string matrixDictionaryKey;
    private static string resourceDictionaryString;
    private static string lastModifiedDictionaryKey;
    private static string structParentsDictionaryKey;
    private Dictionary`2<string, PdfPieceInfoEntry> pieceInfo;
    private Nullable`1<DateTimeOffset> lastModified;
    private IPdfDocumentCatalog documentCatalog;
    private IPdfResources parentResources;
    private PdfArrayCompressedData commandsData;
    private PdfCommandList commands;
    private PdfRectangle bBox;
    private PdfTransformationMatrix matrix;
    private IPdfResources resources;
    private Nullable`1<int> structParents;
    public Dictionary`2<string, PdfPieceInfoEntry> PieceInfo { get; }
    public Nullable`1<DateTimeOffset> LastModified { get; }
    private Nullable`1<int> DevExpress.Pdf.Native.IPdfStructureElementOwner.StructParents { get; private set; }
    public Nullable`1<int> StructParents { get; }
    public PdfCommandList Commands { get; }
    public PdfRectangle BBox { get; internal set; }
    public PdfTransformationMatrix Matrix { get; internal set; }
    internal Byte[] CommandsData { get; }
    internal IPdfResources Resources { get; }
    internal IPdfDocumentCatalog DocumentCatalog { get; }
    internal PdfForm(IPdfDocumentCatalog documentCatalog, PdfRectangle bBox);
    internal PdfForm(PdfForm form);
    internal PdfForm(PdfDocumentCatalog catalog, PdfPage page);
    internal PdfForm(PdfReaderStream stream, PdfResources parentResources);
    internal static PdfForm Create(PdfReaderStream stream, PdfResources parentResources);
    public Dictionary`2<string, PdfPieceInfoEntry> get_PieceInfo();
    public Nullable`1<DateTimeOffset> get_LastModified();
    private sealed virtual override Nullable`1<int> DevExpress.Pdf.Native.IPdfStructureElementOwner.get_StructParents();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfStructureElementOwner.set_StructParents(Nullable`1<int> value);
    public Nullable`1<int> get_StructParents();
    public PdfCommandList get_Commands();
    public PdfRectangle get_BBox();
    internal void set_BBox(PdfRectangle value);
    public PdfTransformationMatrix get_Matrix();
    internal void set_Matrix(PdfTransformationMatrix value);
    internal Byte[] get_CommandsData();
    internal IPdfResources get_Resources();
    internal IPdfDocumentCatalog get_DocumentCatalog();
    internal void ReplaceCommands(Byte[] data);
    internal PdfRectangle GetTransformedBBox();
    internal PdfTransformationMatrix GetTrasformationMatrix(PdfRectangle annotationRect);
    internal IPdfResources CreateEmptyResources();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual PdfStream CreateStream(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    protected virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.PdfFormData : object {
    private static Char[] fieldNameDelimiter;
    private IValueWrapper valueWrapper;
    private bool allowAddNewKids;
    private string name;
    private Dictionary`2<string, PdfFormData> kids;
    internal static Char[] FieldNameDelimiter { get; }
    internal bool AllowAddNewKids { get; internal set; }
    public string Name { get; }
    public object Value { get; public set; }
    public PdfFormFieldType FormFieldType { get; }
    public IList`1<PdfFormFieldItem> Items { get; }
    public PdfFormData Item { get; public set; }
    internal IDictionary`2<string, PdfFormData> Kids { get; }
    internal bool IsPasswordFormField { get; }
    internal PdfFormData(bool allowAddNewKids);
    internal PdfFormData(PdfInteractiveFormField formField, IPdfExportFontProvider fontSearch);
    public PdfFormData(Stream stream, PdfFormDataFormat format);
    public PdfFormData(Stream stream);
    public PdfFormData(string fileName);
    public PdfFormData(string fileName, PdfFormDataFormat format);
    private static PdfFormData();
    internal static Char[] get_FieldNameDelimiter();
    private static PdfFormDataFormat Detect(Stream stream);
    internal bool get_AllowAddNewKids();
    internal void set_AllowAddNewKids(bool value);
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public PdfFormFieldType get_FormFieldType();
    public IList`1<PdfFormFieldItem> get_Items();
    public PdfFormData get_Item(string name);
    public void set_Item(string name, PdfFormData value);
    internal IDictionary`2<string, PdfFormData> get_Kids();
    internal bool get_IsPasswordFormField();
    public void Save(Stream stream, PdfFormDataFormat format);
    public void Save(string fileName, PdfFormDataFormat format);
    public IList`1<string> GetFieldNames();
    internal void AddKid(string name, PdfFormData kid);
    internal void Reset();
    internal void Apply(PdfFormData data);
}
public enum DevExpress.Pdf.PdfFormDataFormat : Enum {
    public int value__;
    public static PdfFormDataFormat Fdf;
    public static PdfFormDataFormat Xml;
    public static PdfFormDataFormat Xfdf;
    public static PdfFormDataFormat Txt;
}
public abstract class DevExpress.Pdf.PdfFormFieldFacade : object {
    [CompilerGeneratedAttribute]
private PdfDocumentStateBase <DocumentState>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAcroFormFacade <AcroForm>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfInteractiveFormField <InteractiveFormField>k__BackingField;
    protected PdfDocumentStateBase DocumentState { get; }
    public PdfAcroFormFacade AcroForm { get; }
    public PdfFormFieldType Type { get; }
    protected PdfInteractiveFormField InteractiveFormField { get; }
    public string FullName { get; }
    public PdfInteractiveFormFieldFlags Flags { get; public set; }
    public bool ReadOnly { get; public set; }
    public bool Required { get; public set; }
    public bool Export { get; public set; }
    protected PdfFormFieldFacade(PdfDocumentStateBase documentState, PdfInteractiveFormField field, PdfAcroFormFacade acroForm);
    internal static PdfFormFieldFacade Create(PdfDocumentStateBase documentState, PdfInteractiveFormField field, PdfAcroFormFacade acroForm);
    [CompilerGeneratedAttribute]
protected PdfDocumentStateBase get_DocumentState();
    [CompilerGeneratedAttribute]
public PdfAcroFormFacade get_AcroForm();
    public abstract virtual PdfFormFieldType get_Type();
    [CompilerGeneratedAttribute]
protected PdfInteractiveFormField get_InteractiveFormField();
    public string get_FullName();
    public PdfInteractiveFormFieldFlags get_Flags();
    public void set_Flags(PdfInteractiveFormFieldFlags value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_Export();
    public void set_Export(bool value);
    public void Flatten();
    protected void SetValue(object value);
    public void RebuildAppearance();
    public abstract virtual IEnumerator`1<PdfWidgetFacade> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class DevExpress.Pdf.PdfFormFieldFacade`2 : PdfFormFieldFacade {
    private List`1<TWidget> widgets;
    [CompilerGeneratedAttribute]
private TField <Field>k__BackingField;
    public TField Field { get; }
    public IList`1<TWidget> Widgets { get; }
    protected PdfFormFieldFacade`2(PdfDocumentStateBase documentState, TField field, PdfAcroFormFacade acroForm);
    [CompilerGeneratedAttribute]
public TField get_Field();
    public IList`1<TWidget> get_Widgets();
    protected abstract virtual TWidget CreateWidget(PdfDocumentStateBase documentState, TField formField, PdfWidgetAnnotationState state);
    protected void SetAppearanceProperty(T oldValue, T newValue, Action`1<T> setValue);
    private List`1<TWidget> ResolveWidgets();
    private void ResolveWidget(List`1<TWidget> list, PdfInteractiveFormField field);
    private PdfWidgetAnnotationState FindWidgetAnnotationState(PdfWidgetAnnotation annotation);
    [IteratorStateMachineAttribute("DevExpress.Pdf.PdfFormFieldFacade`2/<GetEnumerator>d__12")]
public virtual IEnumerator`1<PdfWidgetFacade> GetEnumerator();
}
public class DevExpress.Pdf.PdfFormFieldItem : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayText>k__BackingField;
    public string Value { get; }
    public string DisplayText { get; }
    internal PdfFormFieldItem(string value, string displayText);
    internal PdfFormFieldItem(string text);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_DisplayText();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum DevExpress.Pdf.PdfFormFieldType : Enum {
    public int value__;
    public static PdfFormFieldType Unknown;
    public static PdfFormFieldType Node;
    public static PdfFormFieldType PushButton;
    public static PdfFormFieldType CheckBox;
    public static PdfFormFieldType RadioGroup;
    public static PdfFormFieldType ListBox;
    public static PdfFormFieldType ComboBox;
    public static PdfFormFieldType Text;
    public static PdfFormFieldType Signature;
}
public enum DevExpress.Pdf.PdfFormSubmissionType : Enum {
    public int value__;
    [PdfFieldValueAttribute("0")]
public static PdfFormSubmissionType None;
    [PdfFieldValueAttribute("1")]
public static PdfFormSubmissionType HttpGet;
    [PdfFieldValueAttribute("2")]
public static PdfFormSubmissionType HttpPost;
}
public class DevExpress.Pdf.PdfFreeFormGouraudShadedTriangleMesh : PdfGouraudShadedTriangleMesh {
    internal static int Type;
    protected int ShadingType { get; }
    protected bool HasBitsPerFlag { get; }
    internal PdfFreeFormGouraudShadedTriangleMesh(PdfReaderStream stream);
    internal PdfFreeFormGouraudShadedTriangleMesh(PdfObjectList`1<PdfCustomFunction> functions, int bitsPerFlag, int bitsPerCoordinate, int bitsPerComponent, PdfDecodeRange decodeX, PdfDecodeRange decodeY, PdfDecodeRange[] decodeC, IList`1<PdfTriangle> triangles);
    protected virtual int get_ShadingType();
    protected virtual bool get_HasBitsPerFlag();
}
public class DevExpress.Pdf.PdfFreeTextAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    private static string defaultStyleDictionaryKey;
    private static string calloutDictionaryKey;
    private static string calloutLineEndingStyleDictionaryKey;
    private static string rectangleDifference;
    private PdfTextJustification textJustification;
    private string defaultStyle;
    private PdfAnnotationCallout callout;
    private PdfPadding padding;
    private PdfAnnotationBorderStyle borderStyle;
    private PdfAnnotationBorderEffect borderEffect;
    private PdfAnnotationLineEndingStyle calloutLineEndingStyle;
    private PdfAnnotationLineEndingStyle finishCalloutLineEndingStyle;
    private PdfCommandList appearanceCommands;
    private Byte[] commandsData;
    public IList`1<PdfCommand> AppearanceCommands { get; }
    public PdfTextJustification TextJustification { get; public set; }
    public string DefaultStyle { get; }
    public PdfAnnotationCallout Callout { get; public set; }
    public PdfFreeTextAnnotationIntent FreeTextIntent { get; public set; }
    public PdfAnnotationBorderEffect BorderEffect { get; public set; }
    public PdfPadding Padding { get; public set; }
    public PdfAnnotationBorderStyle BorderStyle { get; public set; }
    public PdfAnnotationLineEndingStyle CalloutLineEndingStyle { get; public set; }
    public PdfAnnotationLineEndingStyle FinishCalloutLineEndingStyle { get; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfRGBColor InteriorColor { get; internal set; }
    internal PdfSetTextFontCommand SetTextFontCommand { get; }
    internal PdfFreeTextAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    internal PdfFreeTextAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    private static PdfAnnotationLineEndingStyle ParseCalloutLineEndingStyle(object value);
    public IList`1<PdfCommand> get_AppearanceCommands();
    public PdfTextJustification get_TextJustification();
    public void set_TextJustification(PdfTextJustification value);
    public string get_DefaultStyle();
    public PdfAnnotationCallout get_Callout();
    public void set_Callout(PdfAnnotationCallout value);
    public PdfFreeTextAnnotationIntent get_FreeTextIntent();
    public void set_FreeTextIntent(PdfFreeTextAnnotationIntent value);
    public PdfAnnotationBorderEffect get_BorderEffect();
    public void set_BorderEffect(PdfAnnotationBorderEffect value);
    public PdfPadding get_Padding();
    public void set_Padding(PdfPadding value);
    public PdfAnnotationBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfAnnotationBorderStyle value);
    public PdfAnnotationLineEndingStyle get_CalloutLineEndingStyle();
    public void set_CalloutLineEndingStyle(PdfAnnotationLineEndingStyle value);
    public PdfAnnotationLineEndingStyle get_FinishCalloutLineEndingStyle();
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    internal PdfRGBColor get_InteriorColor();
    internal void set_InteriorColor(PdfRGBColor value);
    internal PdfSetTextFontCommand get_SetTextFontCommand();
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfFreeTextAnnotationFacade : PdfMarkupAnnotationFacade {
    private PdfFreeTextAnnotationState annotationState;
    public double BorderWidth { get; public set; }
    public PdfRGBColor InteriorColor { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public double BorderEffectIntensity { get; public set; }
    public PdfAnnotationBorderEffectStyle BorderEffectStyle { get; public set; }
    public PdfTextJustification TextJustification { get; public set; }
    public int RotationAngle { get; public set; }
    public PdfFreeTextAnnotationIntent Intent { get; public set; }
    public PdfRectangle TextRectangle { get; public set; }
    internal PdfFreeTextAnnotationFacade(PdfFreeTextAnnotationState annotation);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public PdfRGBColor get_InteriorColor();
    public void set_InteriorColor(PdfRGBColor value);
    public PdfBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfBorderStyle value);
    public double get_BorderEffectIntensity();
    public void set_BorderEffectIntensity(double value);
    public PdfAnnotationBorderEffectStyle get_BorderEffectStyle();
    public void set_BorderEffectStyle(PdfAnnotationBorderEffectStyle value);
    public PdfTextJustification get_TextJustification();
    public void set_TextJustification(PdfTextJustification value);
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    public PdfFreeTextAnnotationIntent get_Intent();
    public void set_Intent(PdfFreeTextAnnotationIntent value);
    public PdfRectangle get_TextRectangle();
    public void set_TextRectangle(PdfRectangle value);
    public void SetCallout(PdfAnnotationLineEndingStyle calloutLineEndingStyle, PdfPoint startPoint, Nullable`1<PdfPoint> kneePoint, PdfPoint endPoint);
    public void SetCallout(PdfAnnotationLineEndingStyle calloutLineEndingStyle, PdfPoint startPoint);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfFreeTextAnnotationIntent : Enum {
    public int value__;
    public static PdfFreeTextAnnotationIntent FreeText;
    public static PdfFreeTextAnnotationIntent FreeTextCallout;
    [PdfFieldNameAttribute("FreeTextTypewriter", "FreeTextTypeWriter")]
public static PdfFreeTextAnnotationIntent FreeTextTypewriter;
}
public abstract class DevExpress.Pdf.PdfFunction : PdfObject {
    protected static string FunctionTypeDictionaryKey;
    internal bool IsIdentity { get; }
    protected PdfFunction(int objectNumber);
    internal static PdfFunction Parse(PdfObjectCollection objects, object value, bool expectDefault);
    protected internal abstract virtual bool IsSame(PdfFunction function);
    protected internal abstract virtual Double[] Transform(Double[] arguments);
    protected internal abstract virtual object Write(IPdfWrittenObjectsCollection objects);
    internal abstract virtual bool get_IsIdentity();
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
    protected internal abstract virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfFunctionBasedShading : PdfShading {
    internal static int Type;
    private static string domainDictionaryKey;
    private static string matrixDictionaryKey;
    private PdfRange domainX;
    private PdfRange domainY;
    private PdfTransformationMatrix matrix;
    public PdfRange DomainX { get; }
    public PdfRange DomainY { get; }
    public PdfTransformationMatrix Matrix { get; }
    protected int ShadingType { get; }
    protected int FunctionDomainDimension { get; }
    internal PdfFunctionBasedShading(PdfReaderDictionary dictionary);
    public PdfRange get_DomainX();
    public PdfRange get_DomainY();
    public PdfTransformationMatrix get_Matrix();
    protected virtual int get_ShadingType();
    protected virtual int get_FunctionDomainDimension();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfGamma : object {
    internal static double Default;
    private double red;
    private double green;
    private double blue;
    public double Red { get; }
    public double Green { get; }
    public double Blue { get; }
    internal bool IsDefault { get; }
    internal PdfGamma(PdfReaderArray array);
    public double get_Red();
    public double get_Green();
    public double get_Blue();
    internal bool get_IsDefault();
    internal Double[] ToArray();
}
public class DevExpress.Pdf.PdfGetPasswordAction : MulticastDelegate {
    public PdfGetPasswordAction(object object, IntPtr method);
    public virtual string Invoke(int tryNumber);
    public virtual IAsyncResult BeginInvoke(int tryNumber, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class DevExpress.Pdf.PdfGoTo3dViewAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfGoTo3dViewAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public class DevExpress.Pdf.PdfGoToAction : PdfJumpAction {
    internal static string Name;
    protected string ActionType { get; }
    protected bool IsInternal { get; }
    public PdfGoToAction(PdfDocument document, PdfDestination destination);
    internal PdfGoToAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
    protected virtual bool get_IsInternal();
    protected internal virtual void Execute(IPdfInteractiveOperationController interactiveOperationController, IList`1<PdfPage> pages);
}
public abstract class DevExpress.Pdf.PdfGouraudShadedTriangleMesh : PdfMeshShading {
    private IList`1<PdfTriangle> triangles;
    public IList`1<PdfTriangle> Triangles { get; }
    protected PdfGouraudShadedTriangleMesh(PdfReaderStream stream);
    protected PdfGouraudShadedTriangleMesh(PdfObjectList`1<PdfCustomFunction> functions, int bitsPerFlag, int bitsPerCoordinate, int bitsPerComponent, PdfDecodeRange decodeX, PdfDecodeRange decodeY, PdfDecodeRange[] decodeC, IList`1<PdfTriangle> triangles);
    public IList`1<PdfTriangle> get_Triangles();
    protected virtual Byte[] GetData();
}
public abstract class DevExpress.Pdf.PdfGradientShading : PdfShading {
    protected static string CoordsDictionaryKey;
    private static string domainDictionaryKey;
    private static string extendDictionaryKey;
    private PdfRange domain;
    private bool extendX;
    private bool extendY;
    public PdfRange Domain { get; }
    public bool ExtendX { get; }
    public bool ExtendY { get; }
    protected PdfGradientShading(PdfReaderDictionary dictionary);
    protected PdfGradientShading(PdfObjectList`1<PdfCustomFunction> blendFunctions);
    public PdfRange get_Domain();
    public bool get_ExtendX();
    public bool get_ExtendY();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfGraphicsPath : object {
    private List`1<PdfGraphicsPathSegment> segments;
    private PdfPoint startPoint;
    private bool closed;
    public IList`1<PdfGraphicsPathSegment> Segments { get; }
    public PdfPoint StartPoint { get; }
    internal PdfPoint EndPoint { get; }
    internal bool Closed { get; internal set; }
    public PdfGraphicsPath(PdfPoint startPoint);
    internal static PdfGraphicsPath FromPointList(IList`1<PdfPoint> points, bool closed);
    internal static PdfRectangle GetBoundingBox(IList`1<PdfGraphicsPath> paths);
    public static IList`1<PdfGraphicsPath> Transform(IList`1<PdfGraphicsPath> paths, PdfTransformationMatrix matrix);
    internal static PdfGraphicsPath Transform(PdfGraphicsPath path, PdfTransformationMatrix matrix);
    internal static PdfGraphicsPath Flatten(PdfGraphicsPath path, double flatnessTolerance);
    public IList`1<PdfGraphicsPathSegment> get_Segments();
    public PdfPoint get_StartPoint();
    internal PdfPoint get_EndPoint();
    internal bool get_Closed();
    internal void set_Closed(bool value);
    public void AppendLineSegment(PdfPoint endPoint);
    public void AppendBezierSegment(PdfPoint controlPoint1, PdfPoint controlPoint2, PdfPoint endPoint);
    internal Nullable`1<PdfLineSegment> ToLineSegment();
    protected internal virtual bool IsFlat(bool forFilling);
    protected internal virtual void GeneratePathCommands(IList`1<PdfCommand> commands);
    internal virtual PdfRectangle GetAxisAlignedRectangle();
    internal virtual bool IsRectangle();
    private static bool CheckSegment(PdfGraphicsPathSegment segment, PdfPoint referencePoint);
}
public abstract class DevExpress.Pdf.PdfGraphicsPathSegment : object {
    private PdfPoint endPoint;
    public PdfPoint EndPoint { get; }
    protected internal bool Flat { get; }
    protected PdfGraphicsPathSegment(PdfPoint endPoint);
    public static PdfGraphicsPathSegment Transform(PdfGraphicsPathSegment segment, PdfTransformationMatrix matrix);
    public PdfPoint get_EndPoint();
    protected internal abstract virtual bool get_Flat();
    protected internal virtual void AddSegmentPoints(IList`1<PdfPoint> points);
    protected internal abstract virtual void GeneratePathSegmentCommands(IList`1<PdfCommand> commands);
}
public class DevExpress.Pdf.PdfGraphicsStateParameters : PdfObject {
    private static string dictionaryType;
    private static string lineWidthDictionaryKey;
    private static string lineCapDictionaryKey;
    private static string lineJoinDictionaryKey;
    private static string miterLimitDictionaryKey;
    private static string dashPatternDictionaryKey;
    private static string renderingIntentDictionaryKey;
    private static string strokingOverprintDictionaryKey;
    private static string nonStrokingOverprintDictionaryKey;
    private static string overprintModeDictionaryKey;
    private static string fontDictionaryKey;
    private static string blackGenerationFunctionDictionaryKey;
    private static string undercolorRemovalFunctionDictionaryKey;
    private static string transferFunctionDictionaryKey;
    private static string halftoneDictionaryKey;
    private static string flatnessToleranceDictionaryKey;
    private static string smoothnessToleranceDictionaryKey;
    private static string strokeAdjustmentDictionaryKey;
    private static string softMaskDictionaryKey;
    private static string strokingAlphaConstantDictionaryKey;
    private static string nonStrokingAlphaConstantDictionaryKey;
    private static string alphaSourceDictionaryKey;
    private static string textKnockoutDictionaryKey;
    private static string blendModeDictionaryKey;
    private static string useBlackPtCompKey;
    private Nullable`1<double> lineWidth;
    private Nullable`1<PdfLineCapStyle> lineCap;
    private Nullable`1<PdfLineJoinStyle> lineJoin;
    private Nullable`1<double> miterLimit;
    private PdfLineStyle lineStyle;
    private Nullable`1<PdfRenderingIntent> renderingIntent;
    private Nullable`1<bool> strokingOverprint;
    private Nullable`1<bool> nonStrokingOverprint;
    private Nullable`1<PdfOverprintMode> overprintMode;
    private PdfFont font;
    private Nullable`1<double> fontSize;
    private PdfFunction blackGenerationFunction;
    private PdfFunction undercolorRemovalFunction;
    private PdfFunction[] transferFunction;
    private PdfHalftone halftone;
    private Nullable`1<double> flatnessTolerance;
    private Nullable`1<double> smoothnessTolerance;
    private Nullable`1<bool> strokeAdjustment;
    private IList`1<string> blendModeArray;
    private Nullable`1<PdfBlendMode> blendMode;
    private PdfSoftMask softMask;
    private Nullable`1<double> strokingAlphaConstant;
    private Nullable`1<double> nonStrokingAlphaConstant;
    private Nullable`1<bool> alphaSource;
    private Nullable`1<bool> textKnockout;
    private string useBlackPtComp;
    public Nullable`1<double> LineWidth { get; public set; }
    public Nullable`1<PdfLineCapStyle> LineCap { get; public set; }
    public Nullable`1<PdfLineJoinStyle> LineJoin { get; public set; }
    public Nullable`1<double> MiterLimit { get; public set; }
    public PdfLineStyle LineStyle { get; public set; }
    public Nullable`1<PdfRenderingIntent> RenderingIntent { get; public set; }
    public Nullable`1<bool> StrokingOverprint { get; public set; }
    public Nullable`1<bool> NonStrokingOverprint { get; public set; }
    public Nullable`1<PdfOverprintMode> OverprintMode { get; public set; }
    public PdfFont Font { get; public set; }
    public Nullable`1<double> FontSize { get; public set; }
    public PdfFunction BlackGenerationFunction { get; public set; }
    public PdfFunction UndercolorRemovalFunction { get; public set; }
    public PdfFunction[] TransferFunction { get; public set; }
    public PdfHalftone Halftone { get; public set; }
    public Nullable`1<double> FlatnessTolerance { get; public set; }
    public Nullable`1<double> SmoothnessTolerance { get; public set; }
    public Nullable`1<bool> StrokeAdjustment { get; public set; }
    public Nullable`1<PdfBlendMode> BlendMode { get; public set; }
    public PdfSoftMask SoftMask { get; public set; }
    public Nullable`1<double> StrokingAlphaConstant { get; public set; }
    public Nullable`1<double> NonStrokingAlphaConstant { get; public set; }
    public Nullable`1<bool> AlphaSource { get; public set; }
    public Nullable`1<bool> TextKnockout { get; public set; }
    internal PdfGraphicsStateParameters(PdfReaderDictionary dictionary);
    private static PdfFunction ResolveFunction(PdfReaderDictionary dictionary, string key);
    private static PdfFunction[] ResolveFunctions(PdfReaderDictionary dictionary, string key);
    public Nullable`1<double> get_LineWidth();
    public void set_LineWidth(Nullable`1<double> value);
    public Nullable`1<PdfLineCapStyle> get_LineCap();
    public void set_LineCap(Nullable`1<PdfLineCapStyle> value);
    public Nullable`1<PdfLineJoinStyle> get_LineJoin();
    public void set_LineJoin(Nullable`1<PdfLineJoinStyle> value);
    public Nullable`1<double> get_MiterLimit();
    public void set_MiterLimit(Nullable`1<double> value);
    public PdfLineStyle get_LineStyle();
    public void set_LineStyle(PdfLineStyle value);
    public Nullable`1<PdfRenderingIntent> get_RenderingIntent();
    public void set_RenderingIntent(Nullable`1<PdfRenderingIntent> value);
    public Nullable`1<bool> get_StrokingOverprint();
    public void set_StrokingOverprint(Nullable`1<bool> value);
    public Nullable`1<bool> get_NonStrokingOverprint();
    public void set_NonStrokingOverprint(Nullable`1<bool> value);
    public Nullable`1<PdfOverprintMode> get_OverprintMode();
    public void set_OverprintMode(Nullable`1<PdfOverprintMode> value);
    public PdfFont get_Font();
    public void set_Font(PdfFont value);
    public Nullable`1<double> get_FontSize();
    public void set_FontSize(Nullable`1<double> value);
    public PdfFunction get_BlackGenerationFunction();
    public void set_BlackGenerationFunction(PdfFunction value);
    public PdfFunction get_UndercolorRemovalFunction();
    public void set_UndercolorRemovalFunction(PdfFunction value);
    public PdfFunction[] get_TransferFunction();
    public void set_TransferFunction(PdfFunction[] value);
    public PdfHalftone get_Halftone();
    public void set_Halftone(PdfHalftone value);
    public Nullable`1<double> get_FlatnessTolerance();
    public void set_FlatnessTolerance(Nullable`1<double> value);
    public Nullable`1<double> get_SmoothnessTolerance();
    public void set_SmoothnessTolerance(Nullable`1<double> value);
    public Nullable`1<bool> get_StrokeAdjustment();
    public void set_StrokeAdjustment(Nullable`1<bool> value);
    public Nullable`1<PdfBlendMode> get_BlendMode();
    public void set_BlendMode(Nullable`1<PdfBlendMode> value);
    public PdfSoftMask get_SoftMask();
    public void set_SoftMask(PdfSoftMask value);
    public Nullable`1<double> get_StrokingAlphaConstant();
    public void set_StrokingAlphaConstant(Nullable`1<double> value);
    public Nullable`1<double> get_NonStrokingAlphaConstant();
    public void set_NonStrokingAlphaConstant(Nullable`1<double> value);
    public Nullable`1<bool> get_AlphaSource();
    public void set_AlphaSource(Nullable`1<bool> value);
    public Nullable`1<bool> get_TextKnockout();
    public void set_TextKnockout(Nullable`1<bool> value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfGraphicsTextOrigin : Enum {
    public int value__;
    public static PdfGraphicsTextOrigin TopLeftCorner;
    public static PdfGraphicsTextOrigin Baseline;
}
public class DevExpress.Pdf.PdfGroupForm : PdfForm {
    internal static string DictionaryKey;
    private PdfTransparencyGroup group;
    public PdfTransparencyGroup Group { get; }
    internal PdfGroupForm(PdfReaderStream stream, PdfReaderDictionary groupDictionary, PdfResources parentResources);
    internal PdfGroupForm(IPdfDocumentCatalog catalog, PdfRectangle bBox);
    internal PdfGroupForm(IPdfDocumentCatalog catalog, PdfRectangle bBox, PdfTransparencyGroup group);
    internal PdfGroupForm(PdfDocumentCatalog catalog, PdfPage page);
    public PdfTransparencyGroup get_Group();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfHalftone : PdfObject {
    protected static string HalftoneTypeDictionaryKey;
    protected static string HalftoneNameDictionaryKey;
    private static string halftoneType;
    private string name;
    public string Name { get; }
    protected PdfHalftone(string name);
    protected PdfHalftone(PdfReaderDictionary dictionary);
    internal static PdfHalftone Parse(object value);
    public string get_Name();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsSame(PdfHalftone halftone);
    protected internal virtual object CreateWriteableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfHideAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfHideAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public enum DevExpress.Pdf.PdfHotkeyPrefix : Enum {
    public int value__;
    public static PdfHotkeyPrefix None;
    public static PdfHotkeyPrefix Hide;
}
public class DevExpress.Pdf.PdfICCBasedColorSpace : PdfCustomColorSpace {
    internal static string TypeName;
    private static string componentsCountDictionaryKey;
    private static string alternateDictionaryKey;
    private static string rangeDictionaryKey;
    internal static PdfICCBasedColorSpace DefaultIccRgb;
    private int componentsCount;
    private PdfColorSpace alternate;
    private IList`1<PdfRange> range;
    private PdfMetadata metadata;
    private Byte[] data;
    public PdfColorSpace Alternate { get; }
    public IEnumerable`1<PdfRange> Range { get; }
    public PdfMetadata Metadata { get; }
    public Byte[] Data { get; }
    public int ComponentsCount { get; }
    private static PdfICCBasedColorSpace();
    private PdfICCBasedColorSpace(int componentsCount, PdfColorSpace alternate, IList`1<PdfRange> range, Byte[] data, PdfMetadata metadata);
    public PdfColorSpace get_Alternate();
    public IEnumerable`1<PdfRange> get_Range();
    public PdfMetadata get_Metadata();
    public Byte[] get_Data();
    public virtual int get_ComponentsCount();
    internal static PdfICCBasedColorSpace Read(PdfReaderStream stream);
    private static PdfColorSpace CreateAlternateColorSpace(int componentsCount);
    private static IList`1<PdfRange> CreateRange(int componentsCount);
    private static bool IsValidComponents(int componentsCount);
    internal PdfObjectReference CreateStream(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfColor Transform(PdfColor color);
    protected internal virtual PdfScanlineTransformationResult Transform(IPdfImageScanlineSource data, int width);
    protected internal virtual PdfRange[] CreateDefaultDecodeArray(int bitsPerComponent);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfIconFit : PdfObject {
    private static string scalingCircumstancesDictionaryKey;
    private static string scalingTypeDictionaryKey;
    private static string positionDictionaryKey;
    private static string fitToAnnotationBoundsDictionaryKey;
    private static double defaultPosition;
    private PdfIconScalingCircumstances scalingCircumstances;
    private PdfIconScalingType scalingType;
    private double horizontalPosition;
    private double verticalPosition;
    private bool fitToAnnotationBounds;
    public PdfIconScalingCircumstances ScalingCircumstances { get; internal set; }
    public PdfIconScalingType ScalingType { get; internal set; }
    public double HorizontalPosition { get; internal set; }
    public double VerticalPosition { get; internal set; }
    public bool FitToAnnotationBounds { get; internal set; }
    internal PdfIconFit(PdfIconFitBuilder builder);
    internal PdfIconFit(PdfReaderDictionary dictionary);
    private static double ConvertToPosition(double position);
    public PdfIconScalingCircumstances get_ScalingCircumstances();
    internal void set_ScalingCircumstances(PdfIconScalingCircumstances value);
    public PdfIconScalingType get_ScalingType();
    internal void set_ScalingType(PdfIconScalingType value);
    public double get_HorizontalPosition();
    internal void set_HorizontalPosition(double value);
    public double get_VerticalPosition();
    internal void set_VerticalPosition(double value);
    public bool get_FitToAnnotationBounds();
    internal void set_FitToAnnotationBounds(bool value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfIconScalingCircumstances : Enum {
    public int value__;
    [PdfFieldNameAttribute("A")]
public static PdfIconScalingCircumstances Always;
    [PdfFieldNameAttribute("B")]
public static PdfIconScalingCircumstances BiggerThanAnnotationRectangle;
    [PdfFieldNameAttribute("S")]
public static PdfIconScalingCircumstances SmallerThanAnnotationRectangle;
    [PdfFieldNameAttribute("N")]
public static PdfIconScalingCircumstances Never;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfIconScalingType : Enum {
    public int value__;
    [PdfFieldNameAttribute("A")]
public static PdfIconScalingType Anamorphic;
    [PdfFieldNameAttribute("P")]
public static PdfIconScalingType Proportional;
}
public class DevExpress.Pdf.PdfIdentityEncoding : PdfCompositeFontEncoding {
    internal static string HorizontalIdentityName;
    internal static string VerticalIdentityName;
    private static PdfIdentityEncoding horizontalIdentity;
    private static PdfIdentityEncoding verticalIdentity;
    private bool isVertical;
    public static PdfIdentityEncoding HorizontalIdentity { get; }
    public static PdfIdentityEncoding VerticalIdentity { get; }
    public bool IsVertical { get; }
    private PdfIdentityEncoding(bool isVertical);
    private static PdfIdentityEncoding();
    public static PdfIdentityEncoding get_HorizontalIdentity();
    public static PdfIdentityEncoding get_VerticalIdentity();
    public virtual bool get_IsVertical();
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection);
    internal virtual short GetCID(Byte[] code);
    protected internal virtual PdfStringCommandData GetStringData(Byte[] bytes, Double[] glyphOffsets);
}
public class DevExpress.Pdf.PdfILSELayoutLogicalStructureElementAttribute : PdfLayoutLogicalStructureElementAttribute {
    private static string baselineShiftKey;
    private static string lineHeightKey;
    private static string textDecorationColorKey;
    private static string textDecorationThicknessKey;
    private static string textDecorationTypeKey;
    private static string rubyAlignKey;
    private static string rubyPositionKey;
    private static string glyphOrientationVerticalKey;
    internal static String[] Keys;
    private double baselineShift;
    private Nullable`1<double> lineHeight;
    private PdfColor textDecorationColor;
    private Nullable`1<double> textDecorationThickness;
    private PdfILSELayoutLogicalStructureElementAttributeTextDecorationType textDecorationType;
    private PdfILSELayoutLogicalStructureElementAttributeRubyAlign rubyAlign;
    private PdfILSELayoutLogicalStructureElementAttributeRubyPosition rubyPosition;
    private object glyphOrientationVertical;
    public double BaselineShift { get; }
    public Nullable`1<double> LineHeight { get; }
    public object TextDecorationColor { get; }
    public Nullable`1<double> TextDecorationThickness { get; }
    public PdfILSELayoutLogicalStructureElementAttributeTextDecorationType TextDecorationType { get; }
    public PdfILSELayoutLogicalStructureElementAttributeRubyAlign RubyAlign { get; }
    public PdfILSELayoutLogicalStructureElementAttributeRubyPosition RubyPosition { get; }
    public object GlyphOrientationVertical { get; }
    internal PdfILSELayoutLogicalStructureElementAttribute(PdfReaderDictionary dictionary);
    private static PdfILSELayoutLogicalStructureElementAttribute();
    public double get_BaselineShift();
    public Nullable`1<double> get_LineHeight();
    public object get_TextDecorationColor();
    public Nullable`1<double> get_TextDecorationThickness();
    public PdfILSELayoutLogicalStructureElementAttributeTextDecorationType get_TextDecorationType();
    public PdfILSELayoutLogicalStructureElementAttributeRubyAlign get_RubyAlign();
    public PdfILSELayoutLogicalStructureElementAttributeRubyPosition get_RubyPosition();
    public object get_GlyphOrientationVertical();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfILSELayoutLogicalStructureElementAttributeRubyAlign : Enum {
    public int value__;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyAlign Start;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyAlign Center;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyAlign End;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyAlign Justify;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyAlign Distribute;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfILSELayoutLogicalStructureElementAttributeRubyPosition : Enum {
    public int value__;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyPosition Before;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyPosition After;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyPosition Warichu;
    public static PdfILSELayoutLogicalStructureElementAttributeRubyPosition Inline;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfILSELayoutLogicalStructureElementAttributeTextDecorationType : Enum {
    public int value__;
    public static PdfILSELayoutLogicalStructureElementAttributeTextDecorationType None;
    public static PdfILSELayoutLogicalStructureElementAttributeTextDecorationType Underline;
    public static PdfILSELayoutLogicalStructureElementAttributeTextDecorationType Overline;
    public static PdfILSELayoutLogicalStructureElementAttributeTextDecorationType LineThrough;
}
public class DevExpress.Pdf.PdfImage : PdfXObject {
    internal static string Type;
    internal static string WidthDictionaryKey;
    internal static string HeightDictionaryKey;
    internal static string ColorSpaceDictionaryKey;
    internal static string BitsPerComponentDictionaryKey;
    internal static string WidthDictionaryAbbreviation;
    internal static string HeightDictionaryAbbreviation;
    internal static string ColorSpaceDictionaryAbbreviation;
    internal static string BitsPerComponentDictionaryAbbreviation;
    internal static string DecodeDictionaryKey;
    internal static string DecodeDictionaryAbbreviation;
    internal static string IntentDictionaryKey;
    internal static string ImageMaskDictionaryKey;
    internal static string ImageMaskDictionaryAbbreviation;
    internal static string InterpolateDictionaryKey;
    internal static string InterpolateDictionaryAbbreviation;
    private static string maskDictionaryKey;
    private static string sMaskDictionaryKey;
    private static string matteDictionaryKey;
    private static string sMaskInDataDictionaryKey;
    private int width;
    private int height;
    private PdfColorSpace colorSpace;
    private Nullable`1<PdfRenderingIntent> intent;
    private bool isMask;
    private PdfImage mask;
    private IList`1<PdfRange> decode;
    private bool interpolate;
    private PdfImage sMask;
    private IList`1<double> matte;
    private IList`1<PdfRange> colorKeyMask;
    private int bitsPerComponent;
    private PdfArrayCompressedData compressedData;
    [CompilerGeneratedAttribute]
private PdfImageSMaskInDataType <SMaskInData>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public PdfColorSpace ColorSpace { get; }
    public int BitsPerComponent { get; }
    public Nullable`1<PdfRenderingIntent> Intent { get; }
    public bool IsMask { get; }
    public PdfImage Mask { get; }
    public IList`1<PdfRange> Decode { get; }
    public bool Interpolate { get; }
    public PdfImage SMask { get; }
    public IList`1<double> Matte { get; }
    public IList`1<PdfFilter> Filters { get; }
    public Byte[] Data { get; }
    public IList`1<PdfRange> ColorKeyMask { get; }
    internal PdfCompressedData CompressedData { get; }
    internal PdfImageSMaskInDataType SMaskInData { get; }
    private bool HasValidStencilMask { get; }
    private PdfImage(int width, int height, PdfColorSpace colorSpace, int bitsPerComponent, PdfArrayCompressedData compressedData);
    internal PdfImage(ImageInfo imageInfo);
    internal PdfImage(PdfReaderStream stream);
    internal PdfImage(int width, int height, PdfColorSpace colorSpace, int bitsPerComponent, bool isMask, PdfArrayCompressedData data, PdfReaderDictionary dictionary);
    private static int GetDimension(PdfReaderDictionary dictionary, string key);
    private static IList`1<PdfRange> ReadColorKeyMask(PdfReaderArray array, int bitsPerComponent, int componentsCount);
    public int get_Width();
    public int get_Height();
    public PdfColorSpace get_ColorSpace();
    public int get_BitsPerComponent();
    public Nullable`1<PdfRenderingIntent> get_Intent();
    public bool get_IsMask();
    public PdfImage get_Mask();
    public IList`1<PdfRange> get_Decode();
    public bool get_Interpolate();
    public PdfImage get_SMask();
    public IList`1<double> get_Matte();
    public IList`1<PdfFilter> get_Filters();
    public Byte[] get_Data();
    public IList`1<PdfRange> get_ColorKeyMask();
    internal PdfCompressedData get_CompressedData();
    [CompilerGeneratedAttribute]
internal PdfImageSMaskInDataType get_SMaskInData();
    private bool get_HasValidStencilMask();
    internal PdfImageParameters GetActualSize(PdfImageParameters parameters);
    internal PdfImageData GetActualData(PdfImageParameters parameters, bool invertRGB);
    internal IPdfImageScanlineSource GetInterpolatedScanlineSource(IPdfImageScanlineSource data, PdfImageParameters parameters);
    private PdfScanlineTransformationResult GetTransformedData(PdfImageParameters parameters);
    private PdfImageData ApplyMask(IPdfImageScanlineSource maskScanlineSource, PdfImageParameters parameters, IList`1<double> matte);
    private Nullable`1<PdfRenderingIntent> CreateIntent(PdfReaderDictionary dictionary);
    private IList`1<PdfRange> CreateDecode(PdfReaderArray decodeArray);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual PdfStream CreateStream(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    protected virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
    internal void CutPolygon(ICutPolygon cutPolygon, PdfTransformationMatrix imageTransform);
}
public class DevExpress.Pdf.PdfImageSet : PdfSpiderSet {
    protected string SubType { get; }
    internal PdfImageSet(PdfReaderDictionary dictionary);
    protected virtual string get_SubType();
}
public class DevExpress.Pdf.PdfImportDataAction : PdfAction {
    internal static string Name;
    private static string fileDictionaryKey;
    private PdfFileSpecification fileSpecification;
    protected string ActionType { get; }
    public PdfFileSpecification FileSpecification { get; }
    internal PdfImportDataAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
    public PdfFileSpecification get_FileSpecification();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfIncludedImageQuality : Enum {
    public int value__;
    [PdfFieldValueAttribute("1")]
public static PdfIncludedImageQuality Low;
    [PdfFieldValueAttribute("2")]
public static PdfIncludedImageQuality Normal;
    [PdfFieldValueAttribute("3")]
public static PdfIncludedImageQuality High;
}
public class DevExpress.Pdf.PdfIncorrectPasswordException : Exception {
}
public class DevExpress.Pdf.PdfIndexedColorSpace : PdfCustomColorSpace {
    internal static string TypeName;
    private PdfColorSpace baseColorSpace;
    private int maxIndex;
    private Byte[] lookupTable;
    public PdfColorSpace BaseColorSpace { get; }
    public int MaxIndex { get; }
    public Byte[] LookupTable { get; }
    public int ComponentsCount { get; }
    internal PdfIndexedColorSpace(PdfDeviceColorSpace baseColorSpace, int maxIndex, Byte[] lookupTable);
    internal PdfIndexedColorSpace(PdfReaderArray array);
    public PdfColorSpace get_BaseColorSpace();
    public int get_MaxIndex();
    public Byte[] get_LookupTable();
    public virtual int get_ComponentsCount();
    protected internal virtual PdfColor Transform(PdfColor color);
    protected internal virtual PdfScanlineTransformationResult Transform(PdfImage image, IPdfImageScanlineSource data, PdfImageParameters parameters);
    protected internal virtual PdfRange[] CreateDefaultDecodeArray(int bitsPerComponent);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfInkAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    private static string inksDictionaryKey;
    private IList`1<PdfPoint[]> inks;
    private PdfAnnotationBorderStyle borderStyle;
    public IList`1<PdfPoint[]> Inks { get; }
    public PdfAnnotationBorderStyle BorderStyle { get; public set; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfInkAnnotation(PdfPage page, IList`1<IList`1<PdfPoint>> inks);
    internal PdfInkAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public IList`1<PdfPoint[]> get_Inks();
    public PdfAnnotationBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfAnnotationBorderStyle value);
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfInkAnnotationFacade : PdfMarkupAnnotationFacade {
    private PdfInkAnnotationState state;
    public double BorderWidth { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public IList`1<PdfPoint[]> Inks { get; }
    internal PdfInkAnnotationFacade(PdfInkAnnotationState annotation);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public PdfBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfBorderStyle value);
    public IList`1<PdfPoint[]> get_Inks();
}
public class DevExpress.Pdf.PdfIntegerStreamReader : PdfDisposableObject {
    private int bitsPerFlag;
    private int bitsPerCoordinate;
    private int bitsPerComponent;
    private PdfDecodeRange decodeX;
    private PdfDecodeRange decodeY;
    private PdfDecodeRange[] decodeC;
    private PdfBitReader bitReader;
    private Stream stream;
    public int BytesPerVertex { get; }
    public PdfIntegerStreamReader(int bitsPerFlag, int bitsPerCoordinate, int bitsPerComponent, PdfDecodeRange decodeX, PdfDecodeRange decodeY, PdfDecodeRange[] decodeC, Byte[] data);
    public int get_BytesPerVertex();
    public PdfPoint ReadPoint();
    public PdfColor ReadColor();
    public int ReadEdgeFlag();
    public PdfVertex ReadVertex();
    public bool IgnoreExtendedBits();
    protected virtual void Dispose(bool disposing);
}
public class DevExpress.Pdf.PdfInteractiveForm : PdfObject {
    private static string fieldsKey;
    private static string resourceKey;
    private static string needAppearancesKey;
    private static string signatureFlagsKey;
    private static string xfaKey;
    private static string calculationOrderKey;
    private Dictionary`2<string, PdfInteractiveFormField> formFieldCache;
    private PdfInteractiveFormFieldCollection fields;
    private Byte[] defaultAppearanceCommandsData;
    private PdfCommandList defaultAppearanceCommands;
    private PdfTextJustification defaultTextJustification;
    private PdfXFAForm xfaForm;
    private IList`1<PdfInteractiveFormField> calculationOrder;
    private bool needAppearances;
    private PdfSignatureFlags signatureFlags;
    private PdfResources resources;
    [CompilerGeneratedAttribute]
private PdfInteractiveFormFieldValueChangingEventHandler FormFieldValueChanging;
    [CompilerGeneratedAttribute]
private PdfInteractiveFormFieldValueChangedEventHandler FormFieldValueChanged;
    public IList`1<PdfInteractiveFormField> Fields { get; }
    public IEnumerable`1<PdfCommand> DefaultAppearanceCommands { get; }
    public PdfTextJustification DefaultTextJustification { get; }
    public PdfXFAForm XFAForm { get; }
    public bool NeedAppearances { get; internal set; }
    public PdfSignatureFlags SignatureFlags { get; internal set; }
    internal Byte[] DefaultAppearanceCommandsData { get; }
    internal IList`1<PdfInteractiveFormField> CalculationOrder { get; }
    internal PdfResources Resources { get; }
    internal PdfInteractiveForm(PdfDocumentCatalog documentCatalog);
    internal PdfInteractiveForm(PdfReaderDictionary dictionary);
    public IList`1<PdfInteractiveFormField> get_Fields();
    public IEnumerable`1<PdfCommand> get_DefaultAppearanceCommands();
    public PdfTextJustification get_DefaultTextJustification();
    public PdfXFAForm get_XFAForm();
    public bool get_NeedAppearances();
    internal void set_NeedAppearances(bool value);
    public PdfSignatureFlags get_SignatureFlags();
    internal void set_SignatureFlags(PdfSignatureFlags value);
    internal Byte[] get_DefaultAppearanceCommandsData();
    internal IList`1<PdfInteractiveFormField> get_CalculationOrder();
    internal PdfResources get_Resources();
    [CompilerGeneratedAttribute]
internal void add_FormFieldValueChanging(PdfInteractiveFormFieldValueChangingEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FormFieldValueChanging(PdfInteractiveFormFieldValueChangingEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_FormFieldValueChanged(PdfInteractiveFormFieldValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FormFieldValueChanged(PdfInteractiveFormFieldValueChangedEventHandler value);
    internal void AddInteractiveFormField(PdfInteractiveFormField formField);
    internal bool RaiseFormFieldValueChanging(PdfInteractiveFormFieldValueChangingEventArgs args);
    internal void RaiseFormFieldValueChanged(string fieldName, object oldValue, object newValue);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    internal void ResetFormFieldCache();
    private void CreateFormFieldInfos(IList`1<PdfInteractiveFormField> fields);
    public PdfInteractiveFormField GetFormField(string name);
}
public class DevExpress.Pdf.PdfInteractiveFormField : PdfObject {
    internal static char FieldNameDelimiter;
    internal static string ParentDictionaryKey;
    protected static string ValueDictionaryKey;
    protected static string DefaultValueDictionaryKey;
    protected static string OptionsDictionaryKey;
    protected static double MinFontSize;
    private static string formTypeDictionaryKey;
    private static string kidsDictionaryKey;
    private static string nameDictionaryKey;
    private static string alternateNameDictionaryKey;
    private static string mappingNameDictionaryKey;
    private static string flagsDictionaryKey;
    private static string defaultStyleDictionaryKey;
    private static string richTextDataDictionaryKey;
    private PdfDocumentCatalog documentCatalog;
    private PdfInteractiveForm form;
    private PdfInteractiveFormField parent;
    private PdfWidgetAnnotation widget;
    private string alternateName;
    private string mappingName;
    private PdfAdditionalActions actions;
    private string defaultStyle;
    private string richTextData;
    private PdfInteractiveFormField valuesProvider;
    private PdfInteractiveFormFieldCollection kids;
    private Nullable`1<PdfTextJustification> textJustification;
    private string name;
    private PdfCommandList appearanceCommands;
    private PdfInteractiveFormFieldTextState textState;
    private Nullable`1<PdfInteractiveFormFieldFlags> flags;
    [CompilerGeneratedAttribute]
private EventHandler WidgetAppearanceChanged;
    public PdfFormFieldType Type { get; }
    public PdfInteractiveForm Form { get; }
    public PdfInteractiveFormField Parent { get; }
    public PdfWidgetAnnotation Widget { get; }
    public string AlternateName { get; }
    public string MappingName { get; }
    public PdfInteractiveFormFieldFlags Flags { get; public set; }
    public bool ReadOnly { get; public set; }
    public bool Required { get; public set; }
    public bool Export { get; public set; }
    public PdfInteractiveFormFieldActions Actions { get; }
    public PdfTextJustification TextJustification { get; }
    internal Nullable`1<PdfTextJustification> TextJustificationInternal { get; internal set; }
    public string DefaultStyle { get; }
    public string RichTextData { get; }
    public IList`1<PdfInteractiveFormField> Kids { get; }
    public IEnumerable`1<PdfCommand> AppearanceCommands { get; }
    public string Name { get; internal set; }
    internal string FullName { get; }
    internal PdfInteractiveFormFieldTextState TextState { get; }
    protected PdfInteractiveFormField ValuesProvider { get; }
    protected string FieldType { get; }
    protected internal object DefaultValue { get; }
    protected internal object Value { get; }
    internal PdfInteractiveFormField(PdfInteractiveForm form, PdfInteractiveFormField parent, PdfReaderDictionary dictionary, PdfObjectReference valueReference);
    internal PdfInteractiveFormField(IPdfInteractiveFormFieldProperties properties);
    internal static PdfInteractiveFormField Parse(PdfInteractiveForm form, PdfInteractiveFormField parent, PdfReaderDictionary dictionary, PdfObjectReference reference);
    public virtual PdfFormFieldType get_Type();
    public PdfInteractiveForm get_Form();
    public PdfInteractiveFormField get_Parent();
    public PdfWidgetAnnotation get_Widget();
    public string get_AlternateName();
    public string get_MappingName();
    public PdfInteractiveFormFieldFlags get_Flags();
    public void set_Flags(PdfInteractiveFormFieldFlags value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_Export();
    public void set_Export(bool value);
    public PdfInteractiveFormFieldActions get_Actions();
    public PdfTextJustification get_TextJustification();
    internal Nullable`1<PdfTextJustification> get_TextJustificationInternal();
    internal void set_TextJustificationInternal(Nullable`1<PdfTextJustification> value);
    public string get_DefaultStyle();
    public string get_RichTextData();
    public IList`1<PdfInteractiveFormField> get_Kids();
    public IEnumerable`1<PdfCommand> get_AppearanceCommands();
    public string get_Name();
    internal void set_Name(string value);
    internal string get_FullName();
    internal PdfInteractiveFormFieldTextState get_TextState();
    protected PdfInteractiveFormField get_ValuesProvider();
    protected virtual string get_FieldType();
    protected internal virtual object get_DefaultValue();
    protected internal virtual object get_Value();
    [CompilerGeneratedAttribute]
internal void add_WidgetAppearanceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_WidgetAppearanceChanged(EventHandler value);
    internal PdfExportFontInfo GetFontInfo(IPdfExportFontProvider fontSearch);
    protected internal virtual double CalcFontSize(string text, PdfRectangle layoutRect, PdfExportFont fontData);
    protected bool RaiseFieldChanging(PdfInteractiveFormFieldValueChangingEventArgs args);
    protected internal void RaiseFieldChanged(object oldValue, object newValue);
    internal void UpdateWidgetAppearances(IPdfExportFontProvider fontSearch, bool rebuildAppearance);
    internal void RaiseWidgetAppearanceChanged();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual void FillDictionary(PdfWriterDictionary dictionary, IPdfWritingContext writingContext);
    protected internal virtual void SetExportValue(object value, IPdfExportFontProvider fontSearch);
    protected internal virtual void SetValue(object value, IPdfExportFontProvider fontSearch);
    protected virtual bool AcceptValue(object value);
    protected internal virtual void Accept(IPdfInteractiveFormFieldVisitor visitor);
    internal IList`1<string> GetFieldNames();
    internal virtual IList`1<PdfFormFieldItem> GetItems();
    protected bool GetFlag(PdfInteractiveFormFieldFlags flag);
    protected void SetFlag(PdfInteractiveFormFieldFlags flag, bool value);
    internal void SetTextAppearance(PdfInteractiveFormFieldTextAppearance appearance);
    internal void AddChildFormField(PdfInteractiveFormField formField);
}
public class DevExpress.Pdf.PdfInteractiveFormFieldActions : object {
    internal static string CharacterChangedDictionaryKey;
    internal static string FieldFormattingDictionaryKey;
    internal static string FieldValueChangedDictionaryKey;
    internal static string FieldValueRecalculatingDictionaryKey;
    [CompilerGeneratedAttribute]
private PdfJavaScriptAction <CharacterChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfJavaScriptAction <FieldFormatting>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfJavaScriptAction <FiledValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfJavaScriptAction <FieldValueRecalculating>k__BackingField;
    public PdfJavaScriptAction CharacterChanged { get; }
    public PdfJavaScriptAction FieldFormatting { get; }
    public PdfJavaScriptAction FiledValueChanged { get; }
    public PdfJavaScriptAction FieldValueRecalculating { get; }
    internal PdfInteractiveFormFieldActions(PdfAcroFormValueFormat format, PdfDocument document);
    internal PdfInteractiveFormFieldActions(PdfReaderDictionary dictionary);
    [CompilerGeneratedAttribute]
public PdfJavaScriptAction get_CharacterChanged();
    [CompilerGeneratedAttribute]
public PdfJavaScriptAction get_FieldFormatting();
    [CompilerGeneratedAttribute]
public PdfJavaScriptAction get_FiledValueChanged();
    [CompilerGeneratedAttribute]
public PdfJavaScriptAction get_FieldValueRecalculating();
    internal PdfWriterDictionary FillDictionary(PdfWriterDictionary dictionary);
}
[FlagsAttribute]
public enum DevExpress.Pdf.PdfInteractiveFormFieldFlags : Enum {
    public int value__;
    public static PdfInteractiveFormFieldFlags None;
    public static PdfInteractiveFormFieldFlags ReadOnly;
    public static PdfInteractiveFormFieldFlags Required;
    public static PdfInteractiveFormFieldFlags NoExport;
    public static PdfInteractiveFormFieldFlags Multiline;
    public static PdfInteractiveFormFieldFlags Password;
    public static PdfInteractiveFormFieldFlags NoToggleToOff;
    public static PdfInteractiveFormFieldFlags Radio;
    public static PdfInteractiveFormFieldFlags PushButton;
    public static PdfInteractiveFormFieldFlags Combo;
    public static PdfInteractiveFormFieldFlags Edit;
    public static PdfInteractiveFormFieldFlags Sort;
    public static PdfInteractiveFormFieldFlags FileSelect;
    public static PdfInteractiveFormFieldFlags MultiSelect;
    public static PdfInteractiveFormFieldFlags DoNotSpellCheck;
    public static PdfInteractiveFormFieldFlags DoNotScroll;
    public static PdfInteractiveFormFieldFlags Comb;
    public static PdfInteractiveFormFieldFlags RichText;
    public static PdfInteractiveFormFieldFlags RadiosInUnison;
    public static PdfInteractiveFormFieldFlags CommitOnSelChange;
}
public class DevExpress.Pdf.PdfJavaScriptAction : PdfAction {
    internal static string Name;
    private static string jsDictionaryKey;
    private string javaScript;
    private bool storeAsStream;
    public string JavaScript { get; }
    protected string ActionType { get; }
    public PdfJavaScriptAction(string javaScript, PdfDocument document);
    internal PdfJavaScriptAction(string javaScript, PdfDocumentCatalog documentCatalog);
    internal PdfJavaScriptAction(PdfReaderDictionary dictionary);
    public string get_JavaScript();
    protected virtual string get_ActionType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfJBIG2DecodeFilter : PdfFilter {
    private static string globalSegmentsDictionaryKey;
    internal static string Name;
    private PdfJBIG2GlobalSegments globalSegments;
    public PdfJBIG2GlobalSegments GlobalSegments { get; }
    protected internal string FilterName { get; }
    internal PdfJBIG2DecodeFilter(PdfReaderDictionary parameters);
    public PdfJBIG2GlobalSegments get_GlobalSegments();
    protected internal virtual string get_FilterName();
    protected internal virtual PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
    protected internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.PdfJBIG2GlobalSegments : PdfObject {
    private Byte[] data;
    private Dictionary`2<int, JBIG2SegmentHeader> segments;
    public Byte[] Data { get; }
    internal Dictionary`2<int, JBIG2SegmentHeader> Segments { get; }
    internal PdfJBIG2GlobalSegments(Byte[] data);
    internal static PdfJBIG2GlobalSegments Parse(PdfDocumentCatalog catalog, object value);
    public Byte[] get_Data();
    internal Dictionary`2<int, JBIG2SegmentHeader> get_Segments();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfJPXDecodeFilter : PdfFilter {
    internal static string Name;
    protected internal string FilterName { get; }
    protected internal virtual string get_FilterName();
    protected internal virtual PdfScanlineTransformationResult CreateScanlineSource(PdfImage image, int componentsCount, Byte[] data);
    private PdfJPXImageScanlineSource CreateJPXSource(PdfImage image, Byte[] data);
    internal virtual RawImageDataSource CreateRawDataSource(PdfImage image, Byte[] data);
    protected internal virtual Byte[] Decode(Byte[] data);
}
public abstract class DevExpress.Pdf.PdfJumpAction : PdfAction {
    private static string destinationDictionaryKey;
    private PdfDestinationObject destination;
    protected bool IsInternal { get; }
    public PdfDestination Destination { get; }
    protected PdfJumpAction(PdfDocument document, PdfDestination destination);
    protected PdfJumpAction(PdfReaderDictionary dictionary);
    protected abstract virtual bool get_IsInternal();
    public PdfDestination get_Destination();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfLabColorSpace : PdfCIEBasedColorSpace {
    internal static string TypeName;
    private static string rangeDictionaryKey;
    private static double min;
    private static double max;
    private static double sixDivTwentyNine;
    private static double fourDivTwentyNine;
    private static double oneHundredEightDivEightHundredFortyOne;
    private PdfRange rangeA;
    private PdfRange rangeB;
    public PdfRange RangeA { get; }
    public PdfRange RangeB { get; }
    public int ComponentsCount { get; }
    protected string Name { get; }
    internal PdfLabColorSpace(PdfReaderDictionary dictionary);
    private static double CorrectRange(PdfRange range, double value);
    private static double GammaFunction(double x);
    public PdfRange get_RangeA();
    public PdfRange get_RangeB();
    public virtual int get_ComponentsCount();
    protected virtual string get_Name();
    protected internal virtual PdfRange[] CreateDefaultDecodeArray(int bitsPerComponent);
    protected internal virtual PdfColor Transform(PdfColor color);
    protected virtual IPdfImageScanlineSource GetDecodedImageScanlineSource(IPdfImageScanlineSource decoratingSource, PdfImage image, int width);
    protected internal virtual PdfScanlineTransformationResult Transform(IPdfImageScanlineSource data, int width);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfLatticeFormGouraudShadedTriangleMesh : PdfGouraudShadedTriangleMesh {
    internal static int Type;
    private static string verticesPerRowDictionaryKey;
    private int verticesPerRow;
    protected int ShadingType { get; }
    internal PdfLatticeFormGouraudShadedTriangleMesh(PdfReaderStream stream);
    protected virtual int get_ShadingType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfLaunchAction : PdfAction {
    internal static string Name;
    private static string fileDictionaryKey;
    private static string windowsDictionaryKey;
    private static string fileNameDictionaryKey;
    private static string defaultDirectoryDictionaryKey;
    private static string operationDictionaryKey;
    private static string parametersDictionaryKey;
    private static string newWindowDictionaryKey;
    private PdfFileSpecification fileSpecification;
    private string fileName;
    private string defaultDirectory;
    private PdfLaunchOperation operation;
    private string parameters;
    private DefaultBoolean newWindow;
    protected string ActionType { get; }
    public PdfFileSpecification FileSpecification { get; }
    public string FileName { get; }
    public string DefaultDirectory { get; }
    public PdfLaunchOperation Operation { get; }
    public string Parameters { get; }
    public DefaultBoolean NewWindow { get; }
    internal PdfLaunchAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
    public PdfFileSpecification get_FileSpecification();
    public string get_FileName();
    public string get_DefaultDirectory();
    public PdfLaunchOperation get_Operation();
    public string get_Parameters();
    public DefaultBoolean get_NewWindow();
    protected internal virtual void Execute(IPdfInteractiveOperationController interactiveOperationController, IList`1<PdfPage> pages);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument", "False")]
public enum DevExpress.Pdf.PdfLaunchOperation : Enum {
    public int value__;
    public static PdfLaunchOperation None;
    [PdfFieldNameAttribute("open")]
public static PdfLaunchOperation Open;
    [PdfFieldNameAttribute("print")]
public static PdfLaunchOperation Print;
}
public class DevExpress.Pdf.PdfLayoutLogicalStructureElementAttribute : PdfLogicalStructureElementAttribute {
    internal static string Owner;
    private static string placementKey;
    private static string writingModeKey;
    private static string backgroundColorKey;
    private static string borderColorKey;
    private static string borderStyleKey;
    private static string borderThicknessKey;
    private static string paddingKey;
    private static string colorKey;
    private PdfLayoutLogicalStructureElementAttributePlacement placement;
    private PdfLayoutLogicalStructureElementAttributeWritingMode writingMode;
    private PdfColor backgroundColor;
    private PdfColor borderColorBefore;
    private PdfColor borderColorAfter;
    private PdfColor borderColorStart;
    private PdfColor borderColorEnd;
    private PdfLayoutLogicalStructureElementAttributeBorderStyle borderStyleBefore;
    private PdfLayoutLogicalStructureElementAttributeBorderStyle borderStyleAfter;
    private PdfLayoutLogicalStructureElementAttributeBorderStyle borderStyleStart;
    private PdfLayoutLogicalStructureElementAttributeBorderStyle borderStyleEnd;
    private double borderThicknessBefore;
    private double borderThicknessAfter;
    private double borderThicknessStart;
    private double borderThicknessEnd;
    private double paddingBefore;
    private double paddingAfter;
    private double paddingStart;
    private double paddingEnd;
    private PdfColor colorText;
    public PdfLayoutLogicalStructureElementAttributePlacement Placement { get; }
    public PdfLayoutLogicalStructureElementAttributeWritingMode WritingMode { get; }
    public PdfColor BackgroundColor { get; }
    public PdfColor BorderColorBefore { get; }
    public PdfColor BorderColorAfter { get; }
    public PdfColor BorderColorStart { get; }
    public PdfColor BorderColorEnd { get; }
    public PdfLayoutLogicalStructureElementAttributeBorderStyle BorderStyleBefore { get; }
    public PdfLayoutLogicalStructureElementAttributeBorderStyle BorderStyleAfter { get; }
    public PdfLayoutLogicalStructureElementAttributeBorderStyle BorderStyleStart { get; }
    public PdfLayoutLogicalStructureElementAttributeBorderStyle BorderStyleEnd { get; }
    public double BorderThicknessBefore { get; }
    public double BorderThicknessAfter { get; }
    public double BorderThicknessStart { get; }
    public double BorderThicknessEnd { get; }
    public double PaddingBefore { get; }
    public double PaddingAfter { get; }
    public double PaddingStart { get; }
    public double PaddingEnd { get; }
    public PdfColor ColorText { get; }
    protected PdfLayoutLogicalStructureElementAttribute(PdfReaderDictionary dictionary);
    public PdfLayoutLogicalStructureElementAttributePlacement get_Placement();
    public PdfLayoutLogicalStructureElementAttributeWritingMode get_WritingMode();
    public PdfColor get_BackgroundColor();
    public PdfColor get_BorderColorBefore();
    public PdfColor get_BorderColorAfter();
    public PdfColor get_BorderColorStart();
    public PdfColor get_BorderColorEnd();
    public PdfLayoutLogicalStructureElementAttributeBorderStyle get_BorderStyleBefore();
    public PdfLayoutLogicalStructureElementAttributeBorderStyle get_BorderStyleAfter();
    public PdfLayoutLogicalStructureElementAttributeBorderStyle get_BorderStyleStart();
    public PdfLayoutLogicalStructureElementAttributeBorderStyle get_BorderStyleEnd();
    public double get_BorderThicknessBefore();
    public double get_BorderThicknessAfter();
    public double get_BorderThicknessStart();
    public double get_BorderThicknessEnd();
    public double get_PaddingBefore();
    public double get_PaddingAfter();
    public double get_PaddingStart();
    public double get_PaddingEnd();
    public PdfColor get_ColorText();
    internal static PdfLayoutLogicalStructureElementAttribute ParseAttribute(PdfReaderDictionary dictionary);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected PdfColor ConvertToColor(IList`1<double> components);
    private double ConvertToDouble(PdfObjectCollection objects, object value);
    private IList`1<PdfColor> GetEdgeColors(PdfReaderDictionary dictionary, string key);
    private IList`1<T> GetEdgeOptions(PdfReaderDictionary dictionary, string key, Func`3<PdfObjectCollection, object, T> convertFunction);
    private object WriteEdgeParams(T before, T after, T start, T end, Func`2<T, object> prepareFunction, T defaultValue);
    private string ConvertToString(PdfObjectCollection objects, object value);
    [CompilerGeneratedAttribute]
private PdfLayoutLogicalStructureElementAttributeBorderStyle <.ctor>b__70_0(PdfObjectCollection objects, object o);
    [CompilerGeneratedAttribute]
private PdfColor <GetEdgeColors>b__74_0(PdfObjectCollection objects, object o);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfLayoutLogicalStructureElementAttributeBorderStyle : Enum {
    public int value__;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle None;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Hidden;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Dotted;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Dashed;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Solid;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Double;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Groove;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Ridge;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Inset;
    public static PdfLayoutLogicalStructureElementAttributeBorderStyle Outset;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfLayoutLogicalStructureElementAttributePlacement : Enum {
    public int value__;
    public static PdfLayoutLogicalStructureElementAttributePlacement Block;
    public static PdfLayoutLogicalStructureElementAttributePlacement Inline;
    public static PdfLayoutLogicalStructureElementAttributePlacement Before;
    public static PdfLayoutLogicalStructureElementAttributePlacement Start;
    public static PdfLayoutLogicalStructureElementAttributePlacement End;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfLayoutLogicalStructureElementAttributeWritingMode : Enum {
    public int value__;
    [PdfFieldNameAttribute("LrTb")]
public static PdfLayoutLogicalStructureElementAttributeWritingMode LeftToRight;
    [PdfFieldNameAttribute("RlTb")]
public static PdfLayoutLogicalStructureElementAttributeWritingMode RightToLeft;
    [PdfFieldNameAttribute("TbRl")]
public static PdfLayoutLogicalStructureElementAttributeWritingMode TopToBottom;
}
public class DevExpress.Pdf.PdfLineAnnotation : PdfUnclosedPathAnnotation {
    internal static string Type;
    private static string leaderLinesLengthDictionaryKey;
    private static string leaderLineExtensionsLengthDictionaryKey;
    private static string showCaptionDictionaryKey;
    private static string leaderLineOffsetDictionaryKey;
    private static string captionPositionDictionaryKey;
    private static string captionOffsetsDictionaryKey;
    private double leaderLinesLength;
    private double leaderLineExtensionsLength;
    private bool showCaption;
    private PdfLineAnnotationIntent lineIntent;
    private double leaderLineOffset;
    private PdfLineAnnotationCaptionPosition captionPosition;
    private double horizontalCaptionOffset;
    private double verticalCaptionOffset;
    public double LeaderLinesLength { get; }
    public double LeaderLineExtensionsLength { get; }
    public bool ShowCaption { get; }
    public PdfLineAnnotationIntent LineIntent { get; }
    public double LeaderLineOffset { get; }
    public PdfLineAnnotationCaptionPosition CaptionPosition { get; }
    public double HorizontalCaptionOffset { get; }
    public double VerticalCaptionOffset { get; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    protected string VerticesDictionaryKey { get; }
    internal PdfLineAnnotation(PdfPage page, IPdfLineAnnotationBuilder builder);
    internal PdfLineAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public double get_LeaderLinesLength();
    public double get_LeaderLineExtensionsLength();
    public bool get_ShowCaption();
    public PdfLineAnnotationIntent get_LineIntent();
    public double get_LeaderLineOffset();
    public PdfLineAnnotationCaptionPosition get_CaptionPosition();
    public double get_HorizontalCaptionOffset();
    public double get_VerticalCaptionOffset();
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual string get_VerticesDictionaryKey();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfLineAnnotationCaptionPosition : Enum {
    public int value__;
    public static PdfLineAnnotationCaptionPosition Inline;
    public static PdfLineAnnotationCaptionPosition Top;
}
public class DevExpress.Pdf.PdfLineAnnotationFacade : PdfPathAnnotationFacade {
    private PdfLineAnnotationState annotation;
    public PdfAnnotationLineEndingStyle LineStartStyle { get; public set; }
    public PdfAnnotationLineEndingStyle LineEndStyle { get; public set; }
    internal PdfLineAnnotationFacade(PdfLineAnnotationState annotation);
    public PdfAnnotationLineEndingStyle get_LineStartStyle();
    public void set_LineStartStyle(PdfAnnotationLineEndingStyle value);
    public PdfAnnotationLineEndingStyle get_LineEndStyle();
    public void set_LineEndStyle(PdfAnnotationLineEndingStyle value);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument", "False")]
public enum DevExpress.Pdf.PdfLineAnnotationIntent : Enum {
    public int value__;
    public static PdfLineAnnotationIntent None;
    public static PdfLineAnnotationIntent LineArrow;
    public static PdfLineAnnotationIntent LineDimension;
}
public enum DevExpress.Pdf.PdfLineCapStyle : Enum {
    public int value__;
    public static PdfLineCapStyle Butt;
    public static PdfLineCapStyle Round;
    public static PdfLineCapStyle ProjectingSquare;
}
public class DevExpress.Pdf.PdfLineGraphicsPathSegment : PdfGraphicsPathSegment {
    protected internal bool Flat { get; }
    public PdfLineGraphicsPathSegment(PdfPoint endPoint);
    protected internal virtual bool get_Flat();
    protected internal virtual void GeneratePathSegmentCommands(IList`1<PdfCommand> commands);
}
public enum DevExpress.Pdf.PdfLineJoinStyle : Enum {
    public int value__;
    public static PdfLineJoinStyle Miter;
    public static PdfLineJoinStyle Round;
    public static PdfLineJoinStyle Bevel;
}
public class DevExpress.Pdf.PdfLineStyle : object {
    private Double[] dashPattern;
    private double dashPhase;
    public bool IsDashed { get; }
    public Double[] DashPattern { get; }
    public double DashPhase { get; }
    internal IList`1<object> Data { get; }
    private PdfLineStyle(Double[] dashPattern, double dashPhase);
    public static PdfLineStyle CreateSolid();
    public static PdfLineStyle CreateDashed(double dashLength, double gapLength, double dashPhase);
    public static PdfLineStyle CreateDashed(Double[] dashPattern, double dashPhase);
    internal static Double[] ParseDashPattern(PdfReaderArray dashArray);
    internal static PdfLineStyle Parse(PdfReaderArray parameters);
    public bool get_IsDashed();
    public Double[] get_DashPattern();
    public double get_DashPhase();
    internal IList`1<object> get_Data();
    internal bool IsSame(PdfLineStyle lineStyle);
    internal PdfPrimitive ToPrimitive(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
}
public class DevExpress.Pdf.PdfLinkAnnotation : PdfAnnotation {
    private static string destinationDictionaryKey;
    private static string uriActionDictionaryKey;
    internal static string Type;
    private PdfAction action;
    private PdfDestinationObject destination;
    private PdfAnnotationHighlightingMode highlightingMode;
    private PdfUriAction uriAction;
    private IList`1<PdfQuadrilateral> region;
    private PdfAnnotationBorderStyle borderStyle;
    public PdfAction Action { get; }
    public PdfDestination Destination { get; }
    public PdfAnnotationHighlightingMode HighlightingMode { get; internal set; }
    public PdfUriAction UriAction { get; }
    public IList`1<PdfQuadrilateral> Region { get; }
    public PdfAnnotationBorderStyle BorderStyle { get; public set; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfLinkAnnotation(PdfPage page, PdfRectangle rect, PdfDestinationObject destination);
    internal PdfLinkAnnotation(PdfPage page, PdfRectangle rect, string uri);
    private PdfLinkAnnotation(PdfPage page, IPdfLinkAnnotationBuilder linkBuilder);
    internal PdfLinkAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public PdfAction get_Action();
    public PdfDestination get_Destination();
    public PdfAnnotationHighlightingMode get_HighlightingMode();
    internal void set_HighlightingMode(PdfAnnotationHighlightingMode value);
    public PdfUriAction get_UriAction();
    public IList`1<PdfQuadrilateral> get_Region();
    public PdfAnnotationBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfAnnotationBorderStyle value);
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    internal void SetUri(string uri);
    internal void SetDestination(PdfDestination dest);
    protected virtual void ResolveDictionary(PdfReaderDictionary dictionary);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfLinkAnnotationFacade : PdfAnnotationFacade {
    private PdfLinkAnnotationState annotationState;
    public double BorderWidth { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public PdfAnnotationHighlightingMode HighlightMode { get; public set; }
    internal PdfLinkAnnotationFacade(PdfLinkAnnotationState annotation);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public PdfBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfBorderStyle value);
    public PdfAnnotationHighlightingMode get_HighlightMode();
    public void set_HighlightMode(PdfAnnotationHighlightingMode value);
    public string FindUri();
    public void SetUri(string uri);
    public PdfDestination FindDestination();
    public void SetDestination(PdfDestination destination);
}
public class DevExpress.Pdf.PdfListBoxFormFieldFacade : PdfChoiceFormFieldFacade`1<PdfListBoxWidgetFacade> {
    public PdfFormFieldType Type { get; }
    public IList`1<string> Values { get; public set; }
    public bool MultiSelect { get; public set; }
    internal PdfListBoxFormFieldFacade(PdfDocumentStateBase documentState, PdfChoiceFormField field, PdfAcroFormFacade acroForm);
    public virtual PdfFormFieldType get_Type();
    public IList`1<string> get_Values();
    public void set_Values(IList`1<string> value);
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    protected virtual PdfListBoxWidgetFacade CreateWidget(PdfDocumentStateBase documentState, PdfChoiceFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfListBoxWidgetFacade : PdfWidgetFacade {
    internal PdfListBoxWidgetFacade(PdfDocumentStateBase documentState, PdfChoiceFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfListLogicalStructureElementAttribute : PdfLogicalStructureElementAttribute {
    internal static string Owner;
    private static string listNumberingKey;
    private PdfListLogicalStructureElementAttributeNumbering listNumbering;
    public PdfListLogicalStructureElementAttributeNumbering ListNumbering { get; }
    internal PdfListLogicalStructureElementAttribute(PdfReaderDictionary dictionary);
    public PdfListLogicalStructureElementAttributeNumbering get_ListNumbering();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfListLogicalStructureElementAttributeNumbering : Enum {
    public int value__;
    public static PdfListLogicalStructureElementAttributeNumbering None;
    [PdfFieldNameAttribute("Disc")]
public static PdfListLogicalStructureElementAttributeNumbering SolidCircularBullet;
    [PdfFieldNameAttribute("Circle")]
public static PdfListLogicalStructureElementAttributeNumbering OpenCircularBullet;
    [PdfFieldNameAttribute("Square")]
public static PdfListLogicalStructureElementAttributeNumbering SolidSquareBullet;
    public static PdfListLogicalStructureElementAttributeNumbering Decimal;
    public static PdfListLogicalStructureElementAttributeNumbering UpperRoman;
    public static PdfListLogicalStructureElementAttributeNumbering LowerRoman;
    public static PdfListLogicalStructureElementAttributeNumbering UpperAlpha;
    public static PdfListLogicalStructureElementAttributeNumbering LowerAlpha;
}
public class DevExpress.Pdf.PdfLogicalStructure : PdfLogicalStructureEntry {
    private static string dictionaryType;
    private static string idTreeDictionaryKey;
    private static string parentTreeDictionaryKey;
    private static string roleMapDictionaryKey;
    private static string attributeClassMapDictionaryKey;
    private static string parentTreeNextDictionaryKey;
    private PdfDeferredSortedDictionary`2<string, PdfLogicalStructureItem> elements;
    private PdfDeferredSortedDictionary`2<int, PdfLogicalStructureElementList> parents;
    private PdfReaderDictionary idTreeDictionary;
    private PdfReaderDictionary parentTreeDictionary;
    private int parentTreeNextKey;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RoleMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, PdfLogicalStructureElementAttribute[]> <AttributeClassMap>k__BackingField;
    internal IDictionary`2<string, PdfLogicalStructureItem> Elements { get; }
    public IDictionary`2<int, PdfLogicalStructureElementList> Parents { get; }
    public IDictionary`2<string, string> RoleMap { get; internal set; }
    public IDictionary`2<string, PdfLogicalStructureElementAttribute[]> AttributeClassMap { get; internal set; }
    internal PdfLogicalStructure(PdfReaderDictionary dictionary);
    internal PdfLogicalStructure(PdfDocumentCatalog documentCatalog);
    private static object WriteParents(IPdfWrittenObjectsCollection collection, List`1<PdfLogicalStructureElement> parents);
    internal IDictionary`2<string, PdfLogicalStructureItem> get_Elements();
    public IDictionary`2<int, PdfLogicalStructureElementList> get_Parents();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RoleMap();
    [CompilerGeneratedAttribute]
internal void set_RoleMap(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, PdfLogicalStructureElementAttribute[]> get_AttributeClassMap();
    [CompilerGeneratedAttribute]
internal void set_AttributeClassMap(IDictionary`2<string, PdfLogicalStructureElementAttribute[]> value);
    private PdfLogicalStructureElementList GetParents(PdfDocumentCatalog catalog, object value);
    internal void AddStructureElementOwner(PdfLogicalStructureElement element, IPdfStructureElementOwner owner);
    internal void AddElementWithId(PdfLogicalStructureElement element);
    protected internal virtual void Resolve();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    [CompilerGeneratedAttribute]
private PdfLogicalStructureItem <Resolve>b__29_0(PdfDocumentCatalog collection, object value);
    [CompilerGeneratedAttribute]
private PdfLogicalStructureElementList <Resolve>b__29_1(PdfDocumentCatalog collection, object value);
}
public class DevExpress.Pdf.PdfLogicalStructureContentItem : PdfLogicalStructureItem {
    internal static string Type;
    private static string contentPageDictionaryKey;
    private static string contentObjectDictionaryKey;
    private PdfPage page;
    private PdfObject content;
    public PdfPage Page { get; }
    public object Content { get; }
    protected internal PdfPage ContainingPage { get; }
    internal PdfLogicalStructureContentItem(PdfPage elementPage, PdfReaderDictionary dictionary);
    internal PdfLogicalStructureContentItem(PdfObject content, PdfPage elementPage);
    public PdfPage get_Page();
    public object get_Content();
    protected internal virtual PdfPage get_ContainingPage();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfLogicalStructureElement : PdfLogicalStructureEntry {
    private static string structureTypeDictionaryKey;
    private static string parentDictionaryKey;
    private static string idDictionaryKey;
    private static string pageDictionaryKey;
    private static string attributesDictionaryKey;
    private static string attributeClassesDictionaryKey;
    private static string revisionNumberDictionaryKey;
    private static string titleDictionaryKey;
    private static string alternateDescriptionDictionaryKey;
    private static string abbreviationDictionaryKey;
    private static string actualTextDictionaryKey;
    private Nullable`1<int> structureTypeObject;
    private List`1<PdfLogicalStructureElementAttribute> attributes;
    [CompilerGeneratedAttribute]
private PdfLogicalStructureEntry <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StructureType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AttributeClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RevisionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <LanguageCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternateDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Abbreviation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualText>k__BackingField;
    public PdfLogicalStructureEntry Parent { get; internal set; }
    public string StructureType { get; }
    public Byte[] ID { get; private set; }
    public PdfPage Page { get; private set; }
    public IEnumerable`1<PdfLogicalStructureElementAttribute> Attributes { get; }
    public IList`1<string> AttributeClasses { get; }
    public int RevisionNumber { get; }
    public string Title { get; internal set; }
    public CultureInfo LanguageCulture { get; internal set; }
    public string AlternateDescription { get; internal set; }
    public string Abbreviation { get; internal set; }
    public string ActualText { get; internal set; }
    internal string StringID { get; internal set; }
    protected internal PdfPage ContainingPage { get; }
    private PdfLogicalStructureElement(PdfLogicalStructure logicalStructure, PdfLogicalStructureEntry parent, PdfReaderDictionary dictionary, string structureType, Nullable`1<int> structureTypeObject);
    internal PdfLogicalStructureElement(string structureType, PdfDocumentCatalog catalog);
    internal static PdfLogicalStructureElement Create(PdfLogicalStructure logicalStructure, PdfLogicalStructureEntry parent, PdfReaderDictionary dictionary);
    [CompilerGeneratedAttribute]
public PdfLogicalStructureEntry get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(PdfLogicalStructureEntry value);
    [CompilerGeneratedAttribute]
public string get_StructureType();
    [CompilerGeneratedAttribute]
public Byte[] get_ID();
    [CompilerGeneratedAttribute]
private void set_ID(Byte[] value);
    [CompilerGeneratedAttribute]
public PdfPage get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(PdfPage value);
    public IEnumerable`1<PdfLogicalStructureElementAttribute> get_Attributes();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AttributeClasses();
    [CompilerGeneratedAttribute]
public int get_RevisionNumber();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
internal void set_Title(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_LanguageCulture();
    [CompilerGeneratedAttribute]
internal void set_LanguageCulture(CultureInfo value);
    [CompilerGeneratedAttribute]
public string get_AlternateDescription();
    [CompilerGeneratedAttribute]
internal void set_AlternateDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Abbreviation();
    [CompilerGeneratedAttribute]
internal void set_Abbreviation(string value);
    [CompilerGeneratedAttribute]
public string get_ActualText();
    [CompilerGeneratedAttribute]
internal void set_ActualText(string value);
    internal string get_StringID();
    internal void set_StringID(string value);
    protected internal virtual PdfPage get_ContainingPage();
    internal void AddLeaf(int mcid, PdfForm form);
    internal void AddLeaf(int mcid, PdfPage page);
    internal void AddAttribute(PdfLogicalStructureElementAttribute attribute);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public abstract class DevExpress.Pdf.PdfLogicalStructureElementAttribute : PdfObject {
    protected static string OwnerKey;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    public int Revision { get; internal set; }
    protected PdfLogicalStructureElementAttribute(int objectNumber);
    [CompilerGeneratedAttribute]
public int get_Revision();
    [CompilerGeneratedAttribute]
internal void set_Revision(int value);
    private static PdfLogicalStructureElementAttribute ParseAttribute(PdfObjectCollection objects, object value);
    internal static PdfLogicalStructureElementAttribute Parse(PdfReaderDictionary dictionary);
    internal static PdfLogicalStructureElementAttribute[] Parse(PdfObjectCollection objects, object value);
    internal static PdfWritableArray BuildWritableCollection(IPdfWrittenObjectsCollection collection, IList`1<PdfLogicalStructureElementAttribute> attributes);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected abstract virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfLogicalStructureElementList : List`1<PdfLogicalStructureElement> {
}
public abstract class DevExpress.Pdf.PdfLogicalStructureEntry : PdfLogicalStructureItem {
    private static string kidsDictionaryKey;
    private PdfLogicalStructure logicalStructure;
    private PdfDocumentCatalog documentCatalog;
    private IList`1<PdfLogicalStructureItem> kids;
    private object kidsValue;
    public IList`1<PdfLogicalStructureItem> Kids { get; }
    protected PdfLogicalStructure LogicalStructure { get; }
    internal PdfDocumentCatalog DocumentCatalog { get; }
    protected PdfLogicalStructureEntry(PdfLogicalStructure logicalStructure, PdfReaderDictionary dictionary);
    protected PdfLogicalStructureEntry(PdfDocumentCatalog documentCatalog);
    public IList`1<PdfLogicalStructureItem> get_Kids();
    protected PdfLogicalStructure get_LogicalStructure();
    internal PdfDocumentCatalog get_DocumentCatalog();
    protected void WriteKids(PdfWriterDictionary dictionary, IPdfWrittenObjectsCollection collection);
    internal void AddKid(PdfLogicalStructureElement item);
    protected internal virtual void Resolve();
}
public abstract class DevExpress.Pdf.PdfLogicalStructureItem : PdfObject {
    protected internal PdfPage ContainingPage { get; }
    protected PdfLogicalStructureItem(int objectNumber);
    internal static PdfLogicalStructureItem Parse(PdfObjectCollection objects, PdfLogicalStructure logicalStructure, PdfLogicalStructureEntry parent, object value);
    protected internal virtual PdfPage get_ContainingPage();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Resolve();
    protected internal virtual object Write(IPdfWrittenObjectsCollection collection);
    protected abstract virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfLogicalStructureMarkedContentReference : PdfLogicalStructureItem {
    internal static string Type;
    private static string pageDictionaryKey;
    private static string streamDictionaryKey;
    private static string mcidDictionaryKey;
    private PdfPage page;
    private PdfForm form;
    private int mcid;
    public PdfPage Page { get; }
    public PdfForm Form { get; }
    public int Mcid { get; }
    protected internal PdfPage ContainingPage { get; }
    internal PdfLogicalStructureMarkedContentReference(PdfReaderDictionary dictionary);
    internal PdfLogicalStructureMarkedContentReference(PdfPage page, int mcid);
    internal PdfLogicalStructureMarkedContentReference(PdfForm form, int mcid);
    public PdfPage get_Page();
    public PdfForm get_Form();
    public int get_Mcid();
    protected internal virtual PdfPage get_ContainingPage();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfLogicalStructureMcidContent : PdfLogicalStructureItem {
    private int mcid;
    public int Mcid { get; }
    internal PdfLogicalStructureMcidContent(int mcid);
    public int get_Mcid();
    protected internal virtual object Write(IPdfWrittenObjectsCollection collection);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfLuminositySoftMask : PdfCustomSoftMask {
    internal static string Name;
    private static string backdropColorDictionaryKey;
    private PdfColor backdropColor;
    public PdfColor BackdropColor { get; }
    protected string ActualName { get; }
    internal PdfLuminositySoftMask(PdfReaderDictionary dictionary);
    internal PdfLuminositySoftMask(PdfGroupForm groupForm);
    public PdfColor get_BackdropColor();
    protected virtual string get_ActualName();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfLZWDecodeFilter : PdfFlateLZWDecodeFilter {
    internal static string Name;
    internal static string ShortName;
    private static int defaultEarlyChange;
    private static string earlyChangeDictionaryKey;
    private bool earlyChange;
    public bool EarlyChange { get; }
    protected internal string FilterName { get; }
    internal PdfLZWDecodeFilter(bool earlyChange, PdfFlateLZWFilterPredictor predictor, int colors, int bitsPerComponent, int columns);
    internal PdfLZWDecodeFilter(PdfReaderDictionary parameters);
    public bool get_EarlyChange();
    protected internal virtual string get_FilterName();
    protected internal virtual PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection, Nullable`1<PdfIndirectObjectIdentifier> containeReference);
    protected virtual Byte[] PerformDecode(Byte[] data);
}
public class DevExpress.Pdf.PdfMarkedContentCommand : PdfCommandGroup {
    internal static string EndToken;
    private string tag;
    private string propertiesName;
    private PdfProperties properties;
    public string Tag { get; }
    public PdfProperties Properties { get; }
    protected string Suffix { get; }
    private PdfMarkedContentCommand(string tag);
    private PdfMarkedContentCommand(string tag, PdfProperties properties, string propertiesName);
    private static string ParseTag(PdfStack operands);
    internal static PdfMarkedContentCommand Parse(PdfStack operands);
    internal static PdfMarkedContentCommand Parse(PdfStack operands, PdfResources resources);
    public string get_Tag();
    public PdfProperties get_Properties();
    protected virtual string get_Suffix();
    protected virtual IEnumerable`1<object> GetPrefix(IPdfWritingContext writingContext);
    protected internal virtual void ExecuteCommandGroup(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfMarkInfo : object {
    private static string markedDictionaryKey;
    private static string userPropertiesDictionaryKey;
    private static string suspectsDictionaryKey;
    private bool isTagged;
    private bool containsUserProperties;
    private bool containsTagSuspects;
    public bool IsTagged { get; }
    public bool ContainsUserProperties { get; }
    public bool ContainsTagSuspects { get; }
    internal PdfMarkInfo(bool isTagged);
    internal PdfMarkInfo(PdfReaderDictionary dictionary);
    public bool get_IsTagged();
    public bool get_ContainsUserProperties();
    public bool get_ContainsTagSuspects();
    internal PdfWriterDictionary Write();
}
public abstract class DevExpress.Pdf.PdfMarkupAnnotation : PdfAnnotation {
    private static string titleDictionaryKey;
    private static string popupDictionaryKey;
    private static string opacityDictionaryKey;
    private static string richTextDictionaryKey;
    private static string creationDateDictionaryKey;
    private static string inReplyToDictionaryKey;
    private static string subjectDictionaryKey;
    private static string replyTypeDictionaryKey;
    private static string intentDictionaryKey;
    private static string rotateDictionaryKey;
    private static double defaultOpacity;
    private string richTextData;
    private string intent;
    private PdfMarkupAnnotationReplyType replyType;
    private int popupAnnotationNumber;
    private int inReplyToAnnotationNumber;
    private string title;
    private Nullable`1<DateTimeOffset> creationDate;
    private double opacity;
    private string subject;
    private PdfPopupAnnotation popup;
    private PdfAnnotation inReplyTo;
    [CompilerGeneratedAttribute]
private int <Rotate>k__BackingField;
    public PdfFilterAnnotationType FilterType { get; }
    public string RichTextData { get; }
    public string Intent { get; public set; }
    public PdfMarkupAnnotationReplyType ReplyType { get; }
    public PdfPopupAnnotation Popup { get; }
    public PdfAnnotation InReplyTo { get; }
    public string Title { get; internal set; }
    public double Opacity { get; internal set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; internal set; }
    public string Subject { get; internal set; }
    internal int Rotate { get; internal set; }
    protected PdfMarkupAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    protected PdfMarkupAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public abstract virtual PdfFilterAnnotationType get_FilterType();
    public string get_RichTextData();
    public string get_Intent();
    public void set_Intent(string value);
    public PdfMarkupAnnotationReplyType get_ReplyType();
    public PdfPopupAnnotation get_Popup();
    public PdfAnnotation get_InReplyTo();
    public string get_Title();
    internal void set_Title(string value);
    public double get_Opacity();
    internal void set_Opacity(double value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    internal void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public string get_Subject();
    internal void set_Subject(string value);
    [CompilerGeneratedAttribute]
internal int get_Rotate();
    [CompilerGeneratedAttribute]
internal void set_Rotate(int value);
    private PdfAnnotation Find(int number);
    internal IEnumerable`1<PdfTextAnnotation> GetReviews(string stateModel);
    protected internal virtual void Ensure();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfMarkupAnnotationComment : object {
    [CompilerGeneratedAttribute]
private IPdfAnnotationStateComment <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PdfMarkupAnnotationComment> <Replies>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<PdfMarkupAnnotationReview> <Reviews>k__BackingField;
    internal IPdfAnnotationStateComment Comment { get; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Contents { get; public set; }
    public string Subject { get; public set; }
    public string Author { get; public set; }
    public IReadOnlyList`1<PdfMarkupAnnotationComment> Replies { get; }
    public IReadOnlyCollection`1<PdfMarkupAnnotationReview> Reviews { get; }
    internal PdfMarkupAnnotationComment(IPdfAnnotationStateComment comment);
    [CompilerGeneratedAttribute]
internal IPdfAnnotationStateComment get_Comment();
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public string get_Contents();
    public void set_Contents(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Author();
    public void set_Author(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PdfMarkupAnnotationComment> get_Replies();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<PdfMarkupAnnotationReview> get_Reviews();
    public PdfMarkupAnnotationComment AddReply(string author, string contents);
    public bool RemoveReply(PdfMarkupAnnotationComment reply);
    public void AddReview(string author, string status);
    public void AddReview(string author, PdfAnnotationReviewStatus status);
    public void ClearReviews();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class DevExpress.Pdf.PdfMarkupAnnotationData : PdfAnnotationData {
    private IPdfMarkupAnnotationState markupAnnotationState;
    private PdfMarkupAnnotationComment comment;
    public double Opacity { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public string Author { get; public set; }
    public string Subject { get; public set; }
    public IReadOnlyList`1<PdfMarkupAnnotationComment> Replies { get; }
    public IReadOnlyCollection`1<PdfMarkupAnnotationReview> Reviews { get; }
    internal PdfMarkupAnnotationData(IPdfMarkupAnnotationState state);
    public double get_Opacity();
    public void set_Opacity(double value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public IReadOnlyList`1<PdfMarkupAnnotationComment> get_Replies();
    public IReadOnlyCollection`1<PdfMarkupAnnotationReview> get_Reviews();
    public PdfMarkupAnnotationComment AddReply(string author, string contents);
    public bool RemoveReply(PdfMarkupAnnotationComment reply);
    public void AddReview(string author, PdfAnnotationReviewStatus reviewStatus);
    public void AddReview(string author, string reviewStatus);
    public void ClearReviews();
}
[ExtensionAttribute]
public static class DevExpress.Pdf.PdfMarkupAnnotationDataExtensions : object {
    [ExtensionAttribute]
public static PdfTextAnnotationData AsTextAnnotation(PdfMarkupAnnotationData data);
    [ExtensionAttribute]
public static PdfTextMarkupAnnotationData AsTextMarkupAnnotation(PdfMarkupAnnotationData data);
}
public class DevExpress.Pdf.PdfMarkupAnnotationFacade : PdfAnnotationFacade {
    private IPdfMarkupAnnotationState annotationState;
    private PdfMarkupAnnotationComment comment;
    public double Opacity { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public string Author { get; public set; }
    public string Subject { get; public set; }
    public IReadOnlyList`1<PdfMarkupAnnotationComment> Replies { get; }
    public IReadOnlyCollection`1<PdfMarkupAnnotationReview> Reviews { get; }
    internal PdfMarkupAnnotationFacade(IPdfMarkupAnnotationState annotationState);
    public double get_Opacity();
    public void set_Opacity(double value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public IReadOnlyList`1<PdfMarkupAnnotationComment> get_Replies();
    public IReadOnlyCollection`1<PdfMarkupAnnotationReview> get_Reviews();
    public PdfMarkupAnnotationComment AddReply(string author, string contents);
    public bool RemoveReply(PdfMarkupAnnotationComment reply);
    public void AddReview(string author, PdfAnnotationReviewStatus reviewStatus);
    public void AddReview(string author, string reviewStatus);
    public void ClearReviews();
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfMarkupAnnotationReplyType : Enum {
    public int value__;
    [PdfFieldNameAttribute("R")]
public static PdfMarkupAnnotationReplyType Reply;
    public static PdfMarkupAnnotationReplyType Group;
}
public class DevExpress.Pdf.PdfMarkupAnnotationReview : object {
    private PdfAnnotationStateCommentReview review;
    public string Author { get; }
    public string Status { get; }
    internal PdfMarkupAnnotationReview(PdfAnnotationStateCommentReview review);
    public string get_Author();
    public string get_Status();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class DevExpress.Pdf.PdfMeshShading : PdfShading {
    private static string bitsPerCoordinateDictionaryKey;
    private static string bitsPerComponentDictionaryKey;
    private static string bitsPerFlagDictionaryKey;
    private static string decodeDictionaryKey;
    private static List`1<int> validBitsPerCoordinate;
    private static List`1<int> validBitsPerComponent;
    private static List`1<int> validBitsPerFlag;
    private int bitsPerFlag;
    private int bitsPerCoordinate;
    private int bitsPerComponent;
    private PdfDecodeRange decodeX;
    private PdfDecodeRange decodeY;
    private PdfDecodeRange[] decodeC;
    private Byte[] data;
    internal int BitsPerFlag { get; }
    internal int BitsPerCoordinate { get; }
    internal int BitsPerComponent { get; }
    internal PdfDecodeRange DecodeX { get; }
    internal PdfDecodeRange DecodeY { get; }
    internal PdfDecodeRange[] DecodeC { get; }
    protected Byte[] Data { get; }
    protected bool IsFunctionRequired { get; }
    protected bool HasBitsPerFlag { get; }
    protected PdfMeshShading(PdfReaderStream stream);
    protected PdfMeshShading(PdfObjectList`1<PdfCustomFunction> functions, int bitsPerFlag, int bitsPerCoordinate, int bitsPerComponent, PdfDecodeRange decodeX, PdfDecodeRange decodeY, PdfDecodeRange[] decodeC);
    private static PdfMeshShading();
    internal int get_BitsPerFlag();
    internal int get_BitsPerCoordinate();
    internal int get_BitsPerComponent();
    internal PdfDecodeRange get_DecodeX();
    internal PdfDecodeRange get_DecodeY();
    internal PdfDecodeRange[] get_DecodeC();
    protected Byte[] get_Data();
    protected virtual bool get_IsFunctionRequired();
    protected virtual bool get_HasBitsPerFlag();
    protected PdfIntegerStreamReader CreateIntegerStreamReader();
    protected virtual Byte[] GetData();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfMetadata : PdfObject {
    internal static string Name;
    private static string subtypeValue;
    private string data;
    public string Data { get; internal set; }
    internal PdfMetadata(string data);
    internal PdfMetadata(PdfReaderStream stream);
    public string get_Data();
    internal void set_Data(string value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfMMType1Font : PdfType1Font {
    internal static string Name;
    protected internal string Subtype { get; }
    internal PdfMMType1Font(PdfReaderDictionary dictionary, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfSimpleFontEncoding encoding, int firstChar, int lastChar, Double[] widths);
    protected internal virtual string get_Subtype();
}
public class DevExpress.Pdf.PdfModifyClippingPathUsingEvenOddRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfModifyClippingPathUsingEvenOddRuleCommand instance;
    internal static PdfModifyClippingPathUsingEvenOddRuleCommand Instance { get; }
    private static PdfModifyClippingPathUsingEvenOddRuleCommand();
    internal static PdfModifyClippingPathUsingEvenOddRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfModifyClippingPathUsingNonzeroWindingNumberRuleCommand : PdfCommand {
    internal static string Name;
    private static PdfModifyClippingPathUsingNonzeroWindingNumberRuleCommand instance;
    internal static PdfModifyClippingPathUsingNonzeroWindingNumberRuleCommand Instance { get; }
    private static PdfModifyClippingPathUsingNonzeroWindingNumberRuleCommand();
    internal static PdfModifyClippingPathUsingNonzeroWindingNumberRuleCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfModifyTransformationMatrixCommand : PdfCommand {
    internal static string Name;
    private PdfTransformationMatrix matrix;
    public PdfTransformationMatrix Matrix { get; }
    public PdfModifyTransformationMatrixCommand(PdfTransformationMatrix matrix);
    public PdfTransformationMatrix get_Matrix();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfMotionDirection : Enum {
    public int value__;
    [PdfFieldNameAttribute("I")]
public static PdfMotionDirection Inward;
    [PdfFieldNameAttribute("O")]
public static PdfMotionDirection Outward;
}
public class DevExpress.Pdf.PdfMovieAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfMovieAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public class DevExpress.Pdf.PdfMovieAnnotation : PdfAnnotation {
    internal static string Type;
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfMovieAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
}
public class DevExpress.Pdf.PdfName : object {
    private string name;
    public string Name { get; }
    public PdfName(string name);
    private static void WriteChar(PdfDocumentStream stream, char c);
    public string get_Name();
    internal void Write(PdfDocumentStream stream);
    private sealed virtual override void DevExpress.Pdf.Native.IPdfWritableObject.Write(PdfDocumentStream stream, int number);
}
public class DevExpress.Pdf.PdfNamedAction : PdfAction {
    internal static string Name;
    private static string actionNameDictionaryKey;
    private string actionName;
    public string ActionName { get; }
    protected string ActionType { get; }
    internal PdfNamedAction(PdfReaderDictionary dictionary);
    public string get_ActionName();
    protected virtual string get_ActionType();
    protected internal virtual void Execute(IPdfInteractiveOperationController interactiveOperationController, IList`1<PdfPage> pages);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfNames : object {
    private static string pageDestinationKey;
    private static string annotationAppearanceKey;
    private static string javaScriptKey;
    private static string pageNamesKey;
    private static string idsKey;
    private static string urlsKey;
    private static string embeddedKey;
    private PdfNameTree`1<PdfDestination> pageDestinations;
    private PdfDeferredSortedDictionary`2<string, PdfAnnotationAppearances> annotationAppearances;
    private PdfDeferredSortedDictionary`2<string, PdfJavaScriptAction> javaScriptActions;
    private PdfDeferredSortedDictionary`2<string, PdfPage> pageNames;
    private PdfDeferredSortedDictionary`2<string, PdfSpiderSet> webCaptureContentSetsIds;
    private PdfDeferredSortedDictionary`2<string, PdfSpiderSet> webCaptureContentSetsUrls;
    private PdfDeferredSortedDictionary`2<string, PdfFileSpecification> embeddedFiles;
    private List`1<PdfDestination> unresolvedInternalDestinations;
    public IDictionary`2<string, PdfDestination> PageDestinations { get; }
    public IDictionary`2<string, PdfAnnotationAppearances> AnnotationAppearances { get; }
    public IDictionary`2<string, PdfJavaScriptAction> JavaScriptActions { get; }
    public IDictionary`2<string, PdfPage> PageNames { get; }
    public IDictionary`2<string, PdfSpiderSet> WebCaptureContentSetsIds { get; }
    public IDictionary`2<string, PdfSpiderSet> WebCaptureContentSetsUrls { get; }
    public IDictionary`2<string, PdfFileSpecification> EmbeddedFiles { get; }
    internal IReadOnlyCollection`1<string> DestinationNames { get; }
    internal PdfNames(PdfReaderDictionary dictionary);
    internal static string NewKey(IDictionary`2<string, Q> source, string prefix);
    public IDictionary`2<string, PdfDestination> get_PageDestinations();
    public IDictionary`2<string, PdfAnnotationAppearances> get_AnnotationAppearances();
    public IDictionary`2<string, PdfJavaScriptAction> get_JavaScriptActions();
    public IDictionary`2<string, PdfPage> get_PageNames();
    public IDictionary`2<string, PdfSpiderSet> get_WebCaptureContentSetsIds();
    public IDictionary`2<string, PdfSpiderSet> get_WebCaptureContentSetsUrls();
    public IDictionary`2<string, PdfFileSpecification> get_EmbeddedFiles();
    internal IReadOnlyCollection`1<string> get_DestinationNames();
    internal PdfWriterDictionary Write(IPdfWrittenObjectsCollection collection);
    internal string AddDestination(PdfDestination destination, string destinationName);
    internal void RemoveDestinations(Func`2<PdfDestination, bool> condition);
}
public class DevExpress.Pdf.PdfNChannelColorSpace : PdfDeviceNColorSpace {
    internal static string TypeName;
    private static string colorantsDictionaryKey;
    private static string processDictionaryKey;
    private static string colorSpaceDictionaryKey;
    private static string componentsDictionaryKey;
    private PdfSeparationColorSpace[] colorants;
    private String[] processComponentsNames;
    private PdfColorSpace processColorSpace;
    public PdfSeparationColorSpace[] Colorants { get; }
    public String[] ProcessComponentsNames { get; }
    public PdfColorSpace ProcessColorSpace { get; }
    internal PdfNChannelColorSpace(PdfReaderArray array, PdfReaderDictionary dictionary);
    public PdfSeparationColorSpace[] get_Colorants();
    public String[] get_ProcessComponentsNames();
    public PdfColorSpace get_ProcessColorSpace();
    protected virtual bool CheckArraySize(int actualSize);
    protected virtual IList`1<object> CreateListToWrite(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfNonFullScreenPageMode : Enum {
    public int value__;
    [PdfFieldNameAttribute("UseNone", "None")]
public static PdfNonFullScreenPageMode UseNone;
    [PdfFieldNameAttribute("UseOutlines", "Outlines")]
public static PdfNonFullScreenPageMode UseOutlines;
    [PdfFieldNameAttribute("UseThumbs", "Thumbs")]
public static PdfNonFullScreenPageMode UseThumbs;
    [PdfFieldNameAttribute("UseOC", "OC")]
public static PdfNonFullScreenPageMode UseOC;
}
public class DevExpress.Pdf.PdfNumberFormat : PdfObject {
    private static string labelDictionaryKey;
    private static string conversionFactorDictionaryKey;
    private static string displayFormatDictionaryKey;
    private static string precisionDictionaryKey;
    private static string truncateLowOrderZerosDictionaryKey;
    private static string digitalGroupingDelimiterDictionaryKey;
    private static string decimalDelimiterDictionaryKey;
    private static string prefixDictionaryKey;
    private static string suffixDictionaryKey;
    private static string labelPositionDictionaryKey;
    private static int defaultPrecision;
    private static int defaultDenominator;
    private static string defaultDigitalGroupingDelimiter;
    private static string defaultDecimalDelimiter;
    private static string defaultPrefixSuffix;
    private string label;
    private double conversionFactor;
    private PdfNumberFormatDisplayFormat displayFormat;
    private int precision;
    private int denominator;
    private bool truncateLowOrderZeros;
    private string digitalGroupingDelimiter;
    private string decimalDelimiter;
    private string prefix;
    private string suffix;
    private PdfNumberFormatLabelPosition labelPosition;
    public string Label { get; }
    public double ConversionFactor { get; }
    public PdfNumberFormatDisplayFormat DisplayFormat { get; }
    public int Precision { get; }
    public int Denominator { get; }
    public bool TruncateLowOrderZeros { get; }
    public string DigitalGroupingDelimiter { get; }
    public string DecimalDelimiter { get; }
    public string Prefix { get; }
    public string Suffix { get; }
    public PdfNumberFormatLabelPosition LabelPosition { get; }
    internal PdfNumberFormat(PdfReaderDictionary dictionary);
    public string get_Label();
    public double get_ConversionFactor();
    public PdfNumberFormatDisplayFormat get_DisplayFormat();
    public int get_Precision();
    public int get_Denominator();
    public bool get_TruncateLowOrderZeros();
    public string get_DigitalGroupingDelimiter();
    public string get_DecimalDelimiter();
    public string get_Prefix();
    public string get_Suffix();
    public PdfNumberFormatLabelPosition get_LabelPosition();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfNumberFormatDisplayFormat : Enum {
    public int value__;
    [PdfFieldNameAttribute("D")]
public static PdfNumberFormatDisplayFormat ShowAsDecimal;
    [PdfFieldNameAttribute("F")]
public static PdfNumberFormatDisplayFormat ShowAsFraction;
    [PdfFieldNameAttribute("R")]
public static PdfNumberFormatDisplayFormat Round;
    [PdfFieldNameAttribute("T")]
public static PdfNumberFormatDisplayFormat Truncate;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfNumberFormatLabelPosition : Enum {
    public int value__;
    [PdfFieldNameAttribute("S")]
public static PdfNumberFormatLabelPosition Suffix;
    [PdfFieldNameAttribute("P")]
public static PdfNumberFormatLabelPosition Prefix;
}
public class DevExpress.Pdf.PdfOpenPrepressInterface : PdfObject {
    private static string version13DictionaryKey;
    private static string version20DictionaryKey;
    private static string versionDictionaryKey;
    private static string fileSpecificationDictionaryKey;
    private static string sizeDictionaryKey;
    private static string cropRectDictionaryKey;
    private static string overprintDictionaryKey;
    private static string cropFixedDictionaryKey;
    private static string positionDictionaryKey;
    private static string resolutionDictionaryKey;
    private static string tintDictionaryKey;
    private static string imageTypeDictionaryKey;
    private static string transparencyDictionaryKey;
    private static string inksDictionaryKey;
    private static string includedImageQualityDictionaryKey;
    private static string monochromeInkName;
    private double version;
    private PdfFileSpecification fileSpecification;
    private double width;
    private double height;
    private PdfRectangle cropRect;
    private bool overprint;
    private PdfRectangle cropFixed;
    private PdfParallelogram position;
    private double horizontalResolution;
    private double verticalResolution;
    private double tint;
    private int samplesPerPixel;
    private int bitsPerSample;
    private bool transparency;
    private string inksName;
    private Dictionary`2<string, double> inks;
    private PdfIncludedImageQuality includedImageQuality;
    public PdfFileSpecification FileSpecification { get; }
    public double Width { get; }
    public double Height { get; }
    public PdfRectangle CropRect { get; }
    public bool Overprint { get; }
    public PdfRectangle CropFixed { get; }
    public PdfParallelogram Position { get; }
    public double HorizontalResolution { get; }
    public double VerticalResolution { get; }
    public double Tint { get; }
    public int SamplesPerPixel { get; }
    public int BitsPerSample { get; }
    public bool Transparency { get; }
    public string InksName { get; }
    public IDictionary`2<string, double> Inks { get; }
    public PdfIncludedImageQuality IncludedImageQuality { get; }
    private PdfOpenPrepressInterface(PdfReaderDictionary dictionary);
    internal static PdfOpenPrepressInterface Create(PdfReaderDictionary dictionary);
    public PdfFileSpecification get_FileSpecification();
    public double get_Width();
    public double get_Height();
    public PdfRectangle get_CropRect();
    public bool get_Overprint();
    public PdfRectangle get_CropFixed();
    public PdfParallelogram get_Position();
    public double get_HorizontalResolution();
    public double get_VerticalResolution();
    public double get_Tint();
    public int get_SamplesPerPixel();
    public int get_BitsPerSample();
    public bool get_Transparency();
    public string get_InksName();
    public IDictionary`2<string, double> get_Inks();
    public PdfIncludedImageQuality get_IncludedImageQuality();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.PdfOptionalContent : PdfProperties {
    internal static string DictionaryKey;
    protected PdfOptionalContent(int objectNumber);
    internal static PdfOptionalContent ParseOptionalContent(PdfReaderDictionary dictionary);
}
public class DevExpress.Pdf.PdfOptionalContentConfiguration : object {
    private static string nameDictionaryKey;
    private static string creatorDictionaryKey;
    private static string baseStateDictionaryKey;
    private static string onGroupsDictionaryKey;
    private static string offGroupsDictionaryKey;
    private static string intentDictionaryKey;
    private static string usageApplicationDictionaryKey;
    private static string orderDictionaryKey;
    private static string orderListModeDictionaryKey;
    private static string radioButtonGroupsDictionaryKey;
    private static string lockedDictionaryKey;
    private string name;
    private string creator;
    private PdfOptionalContentState baseState;
    private IList`1<PdfOptionalContentGroup> onGroups;
    private IList`1<PdfOptionalContentGroup> offGroups;
    private PdfOptionalContentIntent intent;
    private IList`1<PdfOptionalContentUsageApplication> usageApplication;
    private PdfOptionalContentOrder order;
    private PdfOptionalContentOrderListMode orderListMode;
    private IList`1<PdfOptionalContentRadioButtonGroup> radioButtonGroups;
    private IList`1<PdfOptionalContentGroup> locked;
    public string Name { get; }
    public string Creator { get; }
    public PdfOptionalContentState BaseState { get; }
    public IList`1<PdfOptionalContentGroup> On { get; }
    public IList`1<PdfOptionalContentGroup> Off { get; }
    public PdfOptionalContentIntent Intent { get; }
    public IList`1<PdfOptionalContentUsageApplication> UsageApplication { get; }
    public PdfOptionalContentOrder Order { get; }
    public PdfOptionalContentOrderListMode OrderListMode { get; }
    public IList`1<PdfOptionalContentRadioButtonGroup> RadioButtonGroups { get; }
    public IList`1<PdfOptionalContentGroup> Locked { get; }
    internal PdfOptionalContentConfiguration(PdfReaderDictionary dictionary);
    public string get_Name();
    public string get_Creator();
    public PdfOptionalContentState get_BaseState();
    public IList`1<PdfOptionalContentGroup> get_On();
    public IList`1<PdfOptionalContentGroup> get_Off();
    public PdfOptionalContentIntent get_Intent();
    public IList`1<PdfOptionalContentUsageApplication> get_UsageApplication();
    public PdfOptionalContentOrder get_Order();
    public PdfOptionalContentOrderListMode get_OrderListMode();
    public IList`1<PdfOptionalContentRadioButtonGroup> get_RadioButtonGroups();
    public IList`1<PdfOptionalContentGroup> get_Locked();
    internal PdfOptionalContentOrder GetOrCreateOrder();
    internal object Write(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfOptionalContentGroup : PdfOptionalContent {
    internal static string Type;
    private static string nameDictionaryKey;
    private static string intentDictionaryKey;
    private static string usageDictionaryKey;
    private string name;
    private PdfOptionalContentIntent intent;
    private PdfOptionalContentUsage usage;
    public string Name { get; }
    public PdfOptionalContentIntent Intent { get; }
    public PdfOptionalContentUsage Usage { get; }
    internal PdfOptionalContentGroup(PdfReaderDictionary dictionary);
    public string get_Name();
    public PdfOptionalContentIntent get_Intent();
    public PdfOptionalContentUsage get_Usage();
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
}
[FlagsAttribute]
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfOptionalContentIntent : Enum {
    public int value__;
    public static PdfOptionalContentIntent View;
    public static PdfOptionalContentIntent Design;
    public static PdfOptionalContentIntent All;
}
public class DevExpress.Pdf.PdfOptionalContentMembership : PdfOptionalContent {
    internal static string Type;
    private static string groupsDictionaryKey;
    private static string visibilityPolicyDictionaryName;
    private static string visibilityExpressionDictionaryName;
    private IList`1<PdfOptionalContentGroup> groups;
    private PdfOptionalContentVisibilityPolicy visibilityPolicy;
    private PdfOptionalContentVisibilityExpression visibilityExpression;
    public IList`1<PdfOptionalContentGroup> Groups { get; }
    public PdfOptionalContentVisibilityPolicy VisibilityPolicy { get; }
    public PdfOptionalContentVisibilityExpression VisibilityExpression { get; }
    internal PdfOptionalContentMembership(PdfReaderDictionary dictionary);
    public IList`1<PdfOptionalContentGroup> get_Groups();
    public PdfOptionalContentVisibilityPolicy get_VisibilityPolicy();
    public PdfOptionalContentVisibilityExpression get_VisibilityExpression();
    private void AddGroup(PdfReaderDictionary dictionary);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfOptionalContentOrder : PdfOptionalContent {
    private string name;
    private IList`1<PdfOptionalContent> items;
    public string Name { get; internal set; }
    public IList`1<PdfOptionalContent> Items { get; }
    internal PdfOptionalContentOrder(PdfReaderArray list);
    public string get_Name();
    internal void set_Name(string value);
    public IList`1<PdfOptionalContent> get_Items();
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfOptionalContentOrderListMode : Enum {
    public int value__;
    public static PdfOptionalContentOrderListMode AllPages;
    public static PdfOptionalContentOrderListMode VisiblePages;
}
public class DevExpress.Pdf.PdfOptionalContentProperties : object {
    private static string groupsDictionaryKey;
    private static string defaultConfigurationDictionaryKey;
    private static string configurationsDictionaryKey;
    private IList`1<PdfOptionalContentGroup> groups;
    private PdfOptionalContentConfiguration defaultConfiguration;
    private IList`1<PdfOptionalContentConfiguration> configurations;
    public IList`1<PdfOptionalContentGroup> Groups { get; }
    public PdfOptionalContentConfiguration DefaultConfiguration { get; }
    public IList`1<PdfOptionalContentConfiguration> Configurations { get; }
    internal PdfOptionalContentProperties(PdfReaderDictionary dictionary);
    public IList`1<PdfOptionalContentGroup> get_Groups();
    public PdfOptionalContentConfiguration get_DefaultConfiguration();
    public IList`1<PdfOptionalContentConfiguration> get_Configurations();
    internal PdfWriterDictionary Write(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfOptionalContentRadioButtonGroup : List`1<PdfOptionalContentGroup> {
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfOptionalContentState : Enum {
    public int value__;
    [PdfFieldNameAttribute("ON")]
public static PdfOptionalContentState On;
    [PdfFieldNameAttribute("OFF")]
public static PdfOptionalContentState Off;
    public static PdfOptionalContentState Unchanged;
}
public class DevExpress.Pdf.PdfOptionalContentUsage : PdfObject {
    private static string creatorInfoDictionaryKey;
    private static string languageDictionaryKey;
    private static string languagePreferredDictionaryKey;
    private static string exportDictionaryKey;
    private static string exportStateDictionaryKey;
    private static string zoomDictionaryKey;
    private static string minZoomDictionaryKey;
    private static string maxZoomDictionaryKey;
    private static string printDictionaryKey;
    private static string printStateDictionaryKey;
    private static string viewDictionaryKey;
    private static string viewStateDictionaryKey;
    private static string pageElementDictionaryKey;
    private static string onValue;
    private static string offValue;
    private static double defaultMinZoom;
    private static double defaultMaxZoom;
    private PdfOptionalContentUsageCreatorInfo creatorInfo;
    private CultureInfo languageCulture;
    private bool isLanguagePreferred;
    private DefaultBoolean exportState;
    private double minZoom;
    private double maxZoom;
    private string printContentKind;
    private DefaultBoolean printState;
    private DefaultBoolean viewState;
    private PdfPageElement pageElement;
    public PdfOptionalContentUsageCreatorInfo CreatorInfo { get; }
    public CultureInfo LanguageCulture { get; }
    public bool IsLanguagePreferred { get; }
    public DefaultBoolean ExportState { get; }
    public double MinZoom { get; }
    public double MaxZoom { get; }
    public string PrintContentKind { get; }
    public DefaultBoolean PrintState { get; }
    public DefaultBoolean ViewState { get; }
    public PdfPageElement PageElement { get; }
    internal PdfOptionalContentUsage(PdfReaderDictionary dictionary);
    private static DefaultBoolean ParseOnOff(PdfReaderDictionary dictionary, string key);
    private static void WriteOnOffState(PdfDictionary dictionary, string key, DefaultBoolean state);
    public PdfOptionalContentUsageCreatorInfo get_CreatorInfo();
    public CultureInfo get_LanguageCulture();
    public bool get_IsLanguagePreferred();
    public DefaultBoolean get_ExportState();
    public double get_MinZoom();
    public double get_MaxZoom();
    public string get_PrintContentKind();
    public DefaultBoolean get_PrintState();
    public DefaultBoolean get_ViewState();
    public PdfPageElement get_PageElement();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfOptionalContentUsageApplication : object {
    private static string eventDictionaryKey;
    private static string groupsDictionaryKey;
    private static string categoryDictionaryKey;
    private PdfOptionalContentUsageApplicationEvent usageEvent;
    private IList`1<PdfOptionalContentGroup> groups;
    private IList`1<string> category;
    public PdfOptionalContentUsageApplicationEvent Event { get; internal set; }
    public IList`1<PdfOptionalContentGroup> Groups { get; }
    public IList`1<string> Category { get; internal set; }
    internal PdfOptionalContentUsageApplication(PdfReaderDictionary dictionary);
    public PdfOptionalContentUsageApplicationEvent get_Event();
    internal void set_Event(PdfOptionalContentUsageApplicationEvent value);
    public IList`1<PdfOptionalContentGroup> get_Groups();
    public IList`1<string> get_Category();
    internal void set_Category(IList`1<string> value);
    private string ReadCategory(PdfObjectCollection objects, object o);
    internal object Write(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.PdfOptionalContentUsageApplicationEvent : Enum {
    public int value__;
    public static PdfOptionalContentUsageApplicationEvent View;
    public static PdfOptionalContentUsageApplicationEvent Print;
    public static PdfOptionalContentUsageApplicationEvent Export;
}
public class DevExpress.Pdf.PdfOptionalContentUsageCreatorInfo : PdfObject {
    private static string creatorDictionaryKey;
    private static string incorrectSubtypeDictionaryKey;
    private string creator;
    private string contentType;
    private Dictionary`2<string, object> customProperties;
    public string Creator { get; }
    public string ContentType { get; }
    public IDictionary`2<string, object> CustomProperties { get; }
    internal PdfOptionalContentUsageCreatorInfo(PdfReaderDictionary dictionary);
    private static string GetContentType(PdfReaderDictionary dictionary, string key);
    public string get_Creator();
    public string get_ContentType();
    public IDictionary`2<string, object> get_CustomProperties();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfOptionalContentVisibilityExpression : PdfOptionalContent {
    private PdfOptionalContentVisibilityExpressionOperator operation;
    private List`1<PdfOptionalContent> operands;
    public PdfOptionalContentVisibilityExpressionOperator Operation { get; }
    public IList`1<PdfOptionalContent> Operands { get; }
    internal PdfOptionalContentVisibilityExpression(PdfReaderArray array);
    public PdfOptionalContentVisibilityExpressionOperator get_Operation();
    public IList`1<PdfOptionalContent> get_Operands();
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.PdfOptionalContentVisibilityExpressionOperator : Enum {
    public int value__;
    public static PdfOptionalContentVisibilityExpressionOperator And;
    public static PdfOptionalContentVisibilityExpressionOperator Or;
    public static PdfOptionalContentVisibilityExpressionOperator Not;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfOptionalContentVisibilityPolicy : Enum {
    public int value__;
    public static PdfOptionalContentVisibilityPolicy AllOn;
    public static PdfOptionalContentVisibilityPolicy AnyOn;
    public static PdfOptionalContentVisibilityPolicy AnyOff;
    public static PdfOptionalContentVisibilityPolicy AllOff;
}
public class DevExpress.Pdf.PdfOptionsFormFieldOption : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportText>k__BackingField;
    public string Text { get; }
    public string ExportText { get; }
    internal PdfOptionsFormFieldOption(string text, string exportText);
    internal PdfOptionsFormFieldOption(object value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_ExportText();
    internal object Write();
}
public class DevExpress.Pdf.PdfOrientedRectangle : object {
    private double top;
    private double left;
    private double width;
    private double height;
    private double angle;
    private PdfRectangle boundingRectangle;
    private IList`1<PdfPoint> vertices;
    public double Left { get; }
    public double Top { get; }
    public double Width { get; }
    public double Height { get; }
    public double Angle { get; }
    public IList`1<PdfPoint> Vertices { get; }
    public PdfRectangle BoundingRectangle { get; }
    internal PdfPoint TopLeft { get; }
    internal double Bottom { get; }
    internal double Right { get; }
    internal PdfPoint TopRight { get; }
    internal PdfPoint BottomLeft { get; }
    public PdfOrientedRectangle(PdfPoint topLeft, double width, double height);
    public PdfOrientedRectangle(PdfPoint topLeft, double width, double height, double angle);
    public double get_Left();
    public double get_Top();
    public double get_Width();
    public double get_Height();
    public double get_Angle();
    public IList`1<PdfPoint> get_Vertices();
    public PdfRectangle get_BoundingRectangle();
    internal PdfPoint get_TopLeft();
    internal double get_Bottom();
    internal double get_Right();
    internal PdfPoint get_TopRight();
    internal PdfPoint get_BottomLeft();
    public bool Contains(PdfPoint point);
    public bool Contains(PdfOrientedRectangle rectangle);
    internal bool PointIsInRect(PdfPoint point, double expandX, double expandY);
    internal IList`1<PdfPoint> GetBoundingBoxPoints(double widthFactor, double heightFactor);
    private PdfPoint CalcTopRight(double sin, double cos);
    private PdfPoint CalcBottomLeft(double sin, double cos);
    private double OffsetTop(double width, double height);
    private double OffsetLeft(double width, double height);
}
public class DevExpress.Pdf.PdfOutline : PdfOutlineItem {
    internal static string NextDictionaryKey;
    private static string titleDictionaryKey;
    private static string prevDictionaryKey;
    private static string destinationDictionaryKey;
    private static string actionDictionaryKey;
    private static string colorDictionaryKey;
    private static string flagsDictionaryKey;
    private static int italicFlag;
    private static int boldFlag;
    private PdfDocumentCatalog documentCatalog;
    private string title;
    private PdfOutlineItem parent;
    private PdfDestinationObject destination;
    private PdfAction action;
    private PdfColor color;
    private bool isItalic;
    private bool isBold;
    private PdfOutline prev;
    private PdfOutline next;
    internal PdfDocumentCatalog DocumentCatalog { get; }
    internal PdfDestinationObject DestinationObject { get; }
    internal PdfDestination ActualDestination { get; }
    public string Title { get; }
    public PdfOutlineItem Parent { get; }
    public PdfDestination Destination { get; }
    public PdfAction Action { get; }
    public PdfColor Color { get; }
    public bool IsItalic { get; }
    public bool IsBold { get; }
    public PdfOutline Prev { get; internal set; }
    public PdfOutline Next { get; internal set; }
    private PdfOutline(PdfOutlineItem parent, PdfOutline prev, PdfBookmark bookmark);
    internal PdfOutline(PdfOutlineItem parent, PdfOutline prev, PdfReaderDictionary dictionary);
    internal static PdfOutline CreateOutlineTree(PdfOutlineItem parent, IList`1<PdfBookmark> bookmarks);
    internal PdfDocumentCatalog get_DocumentCatalog();
    internal PdfDestinationObject get_DestinationObject();
    internal PdfDestination get_ActualDestination();
    public string get_Title();
    public PdfOutlineItem get_Parent();
    public PdfDestination get_Destination();
    public PdfAction get_Action();
    public PdfColor get_Color();
    public bool get_IsItalic();
    public bool get_IsBold();
    public PdfOutline get_Prev();
    internal void set_Prev(PdfOutline value);
    public PdfOutline get_Next();
    internal void set_Next(PdfOutline value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.PdfOutlineItem : PdfObject {
    private static string firstDictionaryKey;
    private static string lastDictionaryKey;
    protected static string CountDictionaryKey;
    private bool closed;
    private PdfOutline first;
    private PdfOutline last;
    private int count;
    public bool Closed { get; public set; }
    public PdfOutline First { get; internal set; }
    public PdfOutline Last { get; internal set; }
    public int Count { get; }
    protected PdfOutlineItem(PdfReaderDictionary dictionary);
    public bool get_Closed();
    public void set_Closed(bool value);
    public PdfOutline get_First();
    internal void set_First(PdfOutline value);
    public PdfOutline get_Last();
    internal void set_Last(PdfOutline value);
    public int get_Count();
    internal int UpdateCount();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfOutlines : PdfOutlineItem {
    internal PdfOutlines(IList`1<PdfBookmark> bookmarks);
    internal PdfOutlines(PdfReaderDictionary dictionary);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfOutputIntent : object {
    private static string subtypeKey;
    private static string outputConditionKey;
    private static string outputConditionIdentifierKey;
    private static string registryNameKey;
    private static string infoKey;
    private static string destOutputProfileKey;
    private static string defaultOutputConditionIdentifier;
    private static string defaultSubtype;
    private string subtype;
    private string outputCondition;
    private string outputConditionIdentifier;
    private string registryName;
    private string info;
    private PdfICCBasedColorSpace destOutputProfile;
    public string Subtype { get; }
    public string OutputCondition { get; }
    public string OutputConditionIdentifier { get; }
    public string RegistryName { get; }
    public string Info { get; }
    public PdfICCBasedColorSpace DestOutputProfile { get; }
    internal PdfOutputIntent(PdfReaderDictionary dictionary);
    public string get_Subtype();
    public string get_OutputCondition();
    public string get_OutputConditionIdentifier();
    public string get_RegistryName();
    public string get_Info();
    public PdfICCBasedColorSpace get_DestOutputProfile();
    internal object Write(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.PdfOverprintMode : Enum {
    public int value__;
    [PdfFieldValueAttribute("0")]
public static PdfOverprintMode Erase;
    [PdfFieldValueAttribute("1")]
public static PdfOverprintMode Leave;
}
public class DevExpress.Pdf.PdfPadding : object {
    private double left;
    private double bottom;
    private double right;
    private double top;
    public double Left { get; }
    public double Bottom { get; }
    public double Right { get; }
    public double Top { get; }
    public bool IsEmpty { get; }
    public PdfPadding(double left, double bottom, double right, double top);
    internal static PdfPadding Parse(PdfReaderArray array, int startIndex);
    public double get_Left();
    public double get_Bottom();
    public double get_Right();
    public double get_Top();
    public bool get_IsEmpty();
    public PdfRectangle Apply(PdfRectangle rect);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected internal PdfWritableDoubleArray ToWritableObject();
    internal Double[] ToArray();
}
public class DevExpress.Pdf.PdfPage : PdfPageTreeObject {
    internal static string PageTreeNodeType;
    private static string lastModifiedDictionaryKey;
    private static string bleedBoxDictionaryKey;
    private static string trimBoxDictionaryKey;
    private static string artBoxDictionaryKey;
    private static string contentsDictionaryKey;
    private static string groupDictionaryKey;
    private static string thumbDictionaryKey;
    private static string articleBeadsDictionaryKey;
    private static string displayDurationDictionaryKey;
    private static string transDictionaryKey;
    private static string annotsDictionaryKey;
    private static string additionalActionsDictionaryKey;
    private static string structParentsDictionaryKey;
    private static string idDictionaryKey;
    private static string preferredZoomDictionaryKey;
    private static string tabsDictionaryKey;
    private static string userUnitDictionaryKey;
    private static byte space;
    private double userUnit;
    private List`1<PdfAnnotation> annotations;
    private PdfPageActions actions;
    private PdfRectangle bleedBox;
    private PdfRectangle trimBox;
    private PdfRectangle artBox;
    private Nullable`1<DateTimeOffset> lastModified;
    private PdfTransparencyGroup transparencyGroup;
    private PdfImage thumbnailImage;
    private IList`1<int> articleBeadsObjectNumbers;
    private PdfBead[] articleBeads;
    private double displayDuration;
    private PdfPagePresentation trans;
    private PdfMetadata metadata;
    private Nullable`1<int> structParents;
    private Dictionary`2<string, PdfPieceInfoEntry> pieceInfo;
    private Byte[] id;
    private Nullable`1<double> preferredZoomFactor;
    private PdfAnnotationTabOrder annotationTabOrder;
    private IList`1<PdfArrayCompressedData> contents;
    private PdfObjectReference contentsReference;
    private WeakReference commands;
    private PdfReaderDictionary dictionary;
    private bool ensuredAnnotations;
    private bool ensured;
    public double UserUnit { get; }
    public IList`1<PdfAnnotation> Annotations { get; }
    public PdfPageActions Actions { get; }
    public PdfRectangle BleedBox { get; public set; }
    public PdfRectangle TrimBox { get; public set; }
    public PdfRectangle ArtBox { get; public set; }
    public Nullable`1<DateTimeOffset> LastModified { get; public set; }
    public PdfCommandList Commands { get; }
    public PdfTransparencyGroup TransparencyGroup { get; }
    public PdfImage ThumbnailImage { get; }
    public IList`1<PdfBead> ArticleBeads { get; }
    public double DisplayDuration { get; }
    public PdfPagePresentation Trans { get; }
    public PdfMetadata Metadata { get; }
    private Nullable`1<int> DevExpress.Pdf.Native.IPdfStructureElementOwner.StructParents { get; private set; }
    public Nullable`1<int> StructParents { get; internal set; }
    public Byte[] ID { get; }
    public Nullable`1<double> PreferredZoomFactor { get; }
    public PdfAnnotationTabOrder AnnotationTabOrder { get; internal set; }
    public IDictionary`2<string, PdfPieceInfoEntry> PieceInfo { get; }
    internal PdfPage(PdfDocumentCatalog documentCatalog, PdfRectangle mediaBox, PdfRectangle cropBox, int rotate);
    internal PdfPage(PdfPageTreeNode parent, PdfReaderDictionary dictionary);
    public double get_UserUnit();
    public IList`1<PdfAnnotation> get_Annotations();
    public PdfPageActions get_Actions();
    public PdfRectangle get_BleedBox();
    public void set_BleedBox(PdfRectangle value);
    public PdfRectangle get_TrimBox();
    public void set_TrimBox(PdfRectangle value);
    public PdfRectangle get_ArtBox();
    public void set_ArtBox(PdfRectangle value);
    public Nullable`1<DateTimeOffset> get_LastModified();
    public void set_LastModified(Nullable`1<DateTimeOffset> value);
    public PdfCommandList get_Commands();
    public PdfTransparencyGroup get_TransparencyGroup();
    public PdfImage get_ThumbnailImage();
    public IList`1<PdfBead> get_ArticleBeads();
    public double get_DisplayDuration();
    public PdfPagePresentation get_Trans();
    public PdfMetadata get_Metadata();
    private sealed virtual override Nullable`1<int> DevExpress.Pdf.Native.IPdfStructureElementOwner.get_StructParents();
    private sealed virtual override void DevExpress.Pdf.Native.IPdfStructureElementOwner.set_StructParents(Nullable`1<int> value);
    public Nullable`1<int> get_StructParents();
    internal void set_StructParents(Nullable`1<int> value);
    public Byte[] get_ID();
    public Nullable`1<double> get_PreferredZoomFactor();
    public PdfAnnotationTabOrder get_AnnotationTabOrder();
    internal void set_AnnotationTabOrder(PdfAnnotationTabOrder value);
    public IDictionary`2<string, PdfPieceInfoEntry> get_PieceInfo();
    internal void EnsureAnnotations();
    internal PdfPoint FromUserSpace(PdfPoint point, double factor, int angle);
    internal PdfPoint ToUserSpace(PdfPoint point, double factor, int angle);
    internal PdfPoint GetTopLeftCorner(int rotationAngle);
    internal PdfSize GetSize(int rotationAngle);
    internal void InsertCommandsAtBegin(Byte[] commands);
    internal void AddCommandsToEnd(Byte[] commands);
    internal void ReplaceCommands(Byte[] commands);
    internal Byte[] GetCommandsData();
    private void EnsurePage();
    private void AddCommands(Byte[] commandsData, int index);
    private PdfWritableConvertibleArray`1<PdfArrayCompressedData> CreateContentsArray(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual void FlushPageData(IPdfWrittenObjectsCollection objects);
    protected virtual void UpdateBoxes();
    private void TransformPage(PdfTransformationMatrix matrix);
    private void TransformContent(PdfTransformationMatrix matrix);
    public void ScaleContent(double scaleX, double scaleY);
    public void OffsetContent(double dx, double dy);
    public void RotateContent(double x, double y, double degree);
    public void Resize(PdfRectangle mediaBox, PdfContentHorizontalAlignment horizontalAlignment, PdfContentVerticalAlignment verticalAlignment);
    public int GetPageIndex();
}
public class DevExpress.Pdf.PdfPageActions : object {
    internal static string OpenedKey;
    internal static string ClosedKey;
    private PdfAction opened;
    private PdfAction closed;
    public PdfAction Opened { get; }
    public PdfAction Closed { get; }
    internal PdfPageActions(PdfReaderDictionary dictionary);
    public PdfAction get_Opened();
    public PdfAction get_Closed();
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument", "False")]
public enum DevExpress.Pdf.PdfPageElement : Enum {
    public int value__;
    public static PdfPageElement None;
    [PdfFieldNameAttribute("HF")]
public static PdfPageElement HeaderFooter;
    [PdfFieldNameAttribute("FG")]
public static PdfPageElement Foreground;
    [PdfFieldNameAttribute("BG")]
public static PdfPageElement Background;
    [PdfFieldNameAttribute("L")]
public static PdfPageElement Logo;
}
public class DevExpress.Pdf.PdfPageFacade : object {
    private PdfDocumentStateBase state;
    private PdfPageState page;
    private PdfAnnotationsFacade annotations;
    [CompilerGeneratedAttribute]
private int <PageNumber>k__BackingField;
    public int PageNumber { get; }
    public int RotationAngle { get; }
    public IReadOnlyList`1<PdfAnnotationFacade> Annotations { get; }
    internal PdfPageFacade(PdfDocumentStateBase state, PdfPageState page);
    [CompilerGeneratedAttribute]
public int get_PageNumber();
    public int get_RotationAngle();
    public IReadOnlyList`1<PdfAnnotationFacade> get_Annotations();
    private void CreateAnnotations();
    private void CheckMarkupStyle(PdfTextMarkupAnnotationType style);
    public void FlattenAnnotations();
    public void FlattenAnnotations(PdfAnnotationType[] types);
    public void FlattenAnnotations(String[] names);
    public void FlattenAnnotations(Func`2<PdfAnnotationFacade, bool> predicate);
    private PdfRectangle GetIconRect(PdfPoint point);
    public PdfFreeTextAnnotationFacade AddFreeTextAnnotation(PdfRectangle rect, string text);
    public PdfTextAnnotationFacade AddTextAnnotation(PdfRectangle rect);
    public PdfTextAnnotationFacade AddTextAnnotation(PdfRectangle rect, string iconName);
    public PdfTextAnnotationFacade AddTextAnnotation(PdfPoint point);
    public PdfTextAnnotationFacade AddTextAnnotation(PdfPoint point, string iconName);
    public PdfTextMarkupAnnotationFacade AddTextMarkupAnnotation(IEnumerable`1<PdfOrientedRectangle> textRectangles, PdfTextMarkupAnnotationType style);
    public PdfTextMarkupAnnotationFacade AddTextMarkupAnnotation(PdfOrientedRectangle textRectangle, PdfTextMarkupAnnotationType style);
    public PdfTextMarkupAnnotationFacade AddTextMarkupAnnotation(PdfRectangle rectangle, PdfTextMarkupAnnotationType style);
    public PdfTextMarkupAnnotationFacade AddTextMarkupAnnotation(IEnumerable`1<PdfQuadrilateral> quads, PdfTextMarkupAnnotationType style);
    public PdfCaretAnnotationFacade AddCaretAnnotation(PdfRectangle rect);
    public PdfCircleAnnotationFacade AddCircleAnnotation(PdfRectangle rect);
    public PdfSquareAnnotationFacade AddSquareAnnotation(PdfRectangle rect);
    public PdfLineAnnotationFacade AddLineAnnotation(PdfPoint start, PdfPoint end);
    public PdfPolyLineAnnotationFacade AddPolyLineAnnotation(PdfPoint[] points);
    public PdfPolygonAnnotationFacade AddPolygonAnnotation(PdfPoint[] points);
    public PdfFileAttachmentAnnotationFacade AddFileAttachmentAnnotation(PdfRectangle rect, PdfFileAttachment file);
    public PdfFileAttachmentAnnotationFacade AddFileAttachmentAnnotation(PdfRectangle rect, PdfFileAttachment file, string iconName);
    public PdfFileAttachmentAnnotationFacade AddFileAttachmentAnnotation(PdfPoint point, PdfFileAttachment file);
    public PdfFileAttachmentAnnotationFacade AddFileAttachmentAnnotation(PdfPoint point, PdfFileAttachment file, string iconName);
    public PdfInkAnnotationFacade AddInkAnnotation(IList`1<IList`1<PdfPoint>> inks);
    public PdfLinkAnnotationFacade AddLinkAnnotation(PdfRectangle rect, string uri);
    public PdfLinkAnnotationFacade AddLinkAnnotation(PdfRectangle rect, PdfDestination destination);
    public PdfRubberStampAnnotationFacade AddRubberStampAnnotation(PdfPoint point, string iconName);
    public PdfRubberStampAnnotationFacade AddRubberStampAnnotation(PdfRectangle rect, string iconName);
    public PdfRubberStampAnnotationFacade AddRubberStampAnnotation(PdfRectangle rect, string iconName, bool keepAspectRatio);
    public PdfRubberStampAnnotationFacade AddRubberStampAnnotation(PdfRectangle rect, string pdfFileName, int pageNumber);
    public PdfRubberStampAnnotationFacade AddRubberStampAnnotation(PdfRectangle rect, string pdfFileName, int pageNumber, bool keepAspectRatio);
    public PdfRubberStampAnnotationFacade AddRubberStampAnnotation(PdfRectangle rect, Stream pdfStream, int pageNumber);
    public PdfRubberStampAnnotationFacade AddRubberStampAnnotation(PdfRectangle rect, Stream pdfStream, int pageNumber, bool keepAspectRatio);
    public PdfXYZDestination CreateXYZDestination(float destinationX, float destinationY);
    public PdfXYZDestination CreateXYZDestination(float destinationX, float destinationY, float zoom);
    public PdfXYZDestination CreateXYZDestination(float zoom);
    public PdfXYZDestination CreateXYZDestination();
    public PdfFitDestination CreateFitDestination();
    public PdfFitHorizontallyDestination CreateFitHorizontallyDestination();
    public PdfFitHorizontallyDestination CreateFitHorizontallyDestination(float top);
    public PdfFitVerticallyDestination CreateFitVerticallyDestination();
    public PdfFitVerticallyDestination CreateFitVerticallyDestination(float left);
    public PdfFitBBoxDestination CreateFitBBoxDestination();
    public PdfFitRectangleDestination CreateFitRectangleDestination(PdfRectangle rectangle);
    public PdfFitBBoxHorizontallyDestination CreateFitBBoxHorizontallyDestination();
    public PdfFitBBoxHorizontallyDestination CreateFitBBoxHorizontallyDestination(float top);
    public PdfFitBBoxVerticallyDestination CreateFitBBoxVerticallyDestination();
    public PdfFitBBoxVerticallyDestination CreateFitBBoxVerticallyDestination(float left);
    public void ClearContent(PdfClearContentRegions regions, PdfClearContentOptions options);
    public void ClearContent(PdfClearContentRegions regions);
    public void ClearContent(PdfRectangle rect, bool usePageCoordinateSystem, PdfClearContentOptions options);
    public void ClearContent(PdfRectangle rect, bool usePageCoordinateSystem);
    public void ClearContent(PdfRectangle rect, PdfClearContentOptions options);
    public void ClearContent(PdfRectangle rect);
    public void ClearContent(PdfOrientedRectangle rect, bool usePageCoordinateSystem, PdfClearContentOptions options);
    public void ClearContent(PdfOrientedRectangle rect, bool usePageCoordinateSystem);
    public void ClearContent(PdfOrientedRectangle rect, PdfClearContentOptions options);
    public void ClearContent(PdfOrientedRectangle rect);
}
public class DevExpress.Pdf.PdfPageInfo : object {
    [CompilerGeneratedAttribute]
private PdfRectangle <CropBox>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RotationAngle>k__BackingField;
    public PdfRectangle CropBox { get; }
    public int RotationAngle { get; }
    public PdfPageInfo(PdfRectangle cropBox, int rotationAngle);
    [CompilerGeneratedAttribute]
public PdfRectangle get_CropBox();
    [CompilerGeneratedAttribute]
public int get_RotationAngle();
}
public class DevExpress.Pdf.PdfPageLabel : PdfObject {
    private static string dictionaryName;
    private static string styleKey;
    private static string prefixKey;
    private static string firstNumberKey;
    private PdfPageNumberingStyle numberingStyle;
    private string prefix;
    private int firstNumber;
    public PdfPageNumberingStyle NumberingStyle { get; }
    public string Prefix { get; }
    public int FirstNumber { get; }
    internal PdfPageLabel(PdfObjectCollection objects, object value);
    public PdfPageNumberingStyle get_NumberingStyle();
    public string get_Prefix();
    public int get_FirstNumber();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
[PdfSupportUndefinedValueAttribute]
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfPageLayout : Enum {
    public int value__;
    public static PdfPageLayout SinglePage;
    public static PdfPageLayout OneColumn;
    public static PdfPageLayout TwoColumnLeft;
    public static PdfPageLayout TwoColumnRight;
    public static PdfPageLayout TwoPageLeft;
    public static PdfPageLayout TwoPageRight;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfPageMode : Enum {
    public int value__;
    [PdfFieldNameAttribute("UseNone", "None")]
public static PdfPageMode UseNone;
    public static PdfPageMode UseOutlines;
    public static PdfPageMode UseThumbs;
    public static PdfPageMode FullScreen;
    [PdfFieldNameAttribute("UseOC", "UseOCG")]
public static PdfPageMode UseOC;
    [PdfFieldNameAttribute("UseAttachments", "UseAtachments")]
public static PdfPageMode UseAttachments;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfPageNumberingStyle : Enum {
    public int value__;
    public static PdfPageNumberingStyle None;
    [PdfFieldNameAttribute("D")]
public static PdfPageNumberingStyle DecimalArabic;
    [PdfFieldNameAttribute("R")]
public static PdfPageNumberingStyle UppercaseRoman;
    [PdfFieldNameAttribute("r")]
public static PdfPageNumberingStyle LowercaseRoman;
    [PdfFieldNameAttribute("A")]
public static PdfPageNumberingStyle UppercaseLetters;
    [PdfFieldNameAttribute("a")]
public static PdfPageNumberingStyle LowercaseLetters;
}
public class DevExpress.Pdf.PdfPagePresentation : object {
    private static string dictionaryName;
    private static string transitionStyleKey;
    private static string durationKey;
    private static string dimensionKey;
    private static string motionDirectionKey;
    private static string transitionDirectionKey;
    private static string scaleKey;
    private static string isRectAndOpaqueKey;
    private PdfTransitionStyle transitionStyle;
    private double duration;
    private PdfTransitionDimension dimension;
    private PdfMotionDirection motionDirection;
    private PdfTransitionDirection transitionDirection;
    private PdfRange changesScale;
    private bool isRectAndOpaque;
    public PdfTransitionStyle TransitionStyle { get; }
    public double Duration { get; }
    public PdfTransitionDimension Dimension { get; }
    public PdfMotionDirection MotionDirection { get; }
    public PdfTransitionDirection TransitionDirection { get; }
    public PdfRange ChangesScale { get; }
    public bool IsRectAndOpaque { get; }
    internal PdfPagePresentation(PdfReaderDictionary dictionary);
    public PdfTransitionStyle get_TransitionStyle();
    public double get_Duration();
    public PdfTransitionDimension get_Dimension();
    public PdfMotionDirection get_MotionDirection();
    public PdfTransitionDirection get_TransitionDirection();
    public PdfRange get_ChangesScale();
    public bool get_IsRectAndOpaque();
    internal PdfDictionary Write();
    private object TransitionDirectionToWritableObject();
    private PdfTransitionDirection GetTransitionDirection(PdfReaderDictionary dictionary);
}
public class DevExpress.Pdf.PdfPageSet : PdfSpiderSet {
    private string title;
    public string Title { get; }
    protected string SubType { get; }
    internal PdfPageSet(PdfReaderDictionary dictionary);
    public string get_Title();
    protected virtual string get_SubType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.PdfPagesFacade : object {
    private PdfDocumentStateBase state;
    private Dictionary`2<PdfPageState, PdfPageFacade> facades;
    public PdfPageFacade Item { get; }
    public int Count { get; }
    internal PdfPagesFacade(PdfDocumentStateBase state);
    public sealed virtual PdfPageFacade get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("DevExpress.Pdf.PdfPagesFacade/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<PdfPageFacade> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class DevExpress.Pdf.PdfPageTreeObject : PdfObject {
    internal static string ParentDictionaryKey;
    private static string resourcesDictionaryKey;
    private static string mediaBoxDictionaryKey;
    private static string cropBoxDictionaryKey;
    private static string rotateDictionaryKey;
    private PdfDocumentCatalog documentCatalog;
    private PdfResources resources;
    private PdfObjectReference resourcesReference;
    private PdfPageTreeNode parent;
    private PdfRectangle mediaBox;
    private PdfRectangle cropBox;
    private int rotate;
    internal PdfDocumentCatalog DocumentCatalog { get; }
    internal PdfResources Resources { get; }
    internal PdfPageTreeNode Parent { get; internal set; }
    public PdfRectangle MediaBox { get; public set; }
    public PdfRectangle CropBox { get; public set; }
    public int Rotate { get; public set; }
    protected PdfPageTreeObject(int objectNumber, PdfDocumentCatalog documentCatalog, PdfRectangle mediaBox, PdfRectangle cropBox, int rotate);
    protected PdfPageTreeObject(PdfPageTreeNode parent, PdfReaderDictionary dictionary);
    internal static int NormalizeRotate(int rotate);
    internal static bool CheckRotate(int rotate);
    internal PdfDocumentCatalog get_DocumentCatalog();
    internal PdfResources get_Resources();
    internal PdfPageTreeNode get_Parent();
    internal void set_Parent(PdfPageTreeNode value);
    public PdfRectangle get_MediaBox();
    public void set_MediaBox(PdfRectangle value);
    public PdfRectangle get_CropBox();
    public void set_CropBox(PdfRectangle value);
    public int get_Rotate();
    public void set_Rotate(int value);
    protected void CheckBox(PdfRectangle box, PdfCoreStringId messageId);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual void FlushPageData(IPdfWrittenObjectsCollection objects);
    protected virtual void UpdateBoxes();
}
public class DevExpress.Pdf.PdfPaintImageCommand : PdfCommand {
    private PdfImage image;
    private string colorSpaceName;
    public PdfImage Image { get; }
    internal PdfPaintImageCommand(PdfImage image, string colorSpaceName);
    public PdfImage get_Image();
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    private object ConvertFilter(object obj);
}
public class DevExpress.Pdf.PdfPaintShadingPatternCommand : PdfCommand {
    internal static string Name;
    private string shadingName;
    private PdfShading shading;
    public PdfShading Shading { get; }
    internal PdfPaintShadingPatternCommand(PdfResources resources, PdfStack operands);
    public PdfShading get_Shading();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfPaintXObjectCommand : PdfCommand {
    internal static string Name;
    private string xObjectName;
    private PdfXObject xObject;
    public string XObjectName { get; }
    public PdfXObject XObject { get; }
    internal PdfPaintXObjectCommand(PdfResources resources, PdfStack operands);
    public string get_XObjectName();
    public PdfXObject get_XObject();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfPanose : ValueType {
    private static int length;
    [CompilerGeneratedAttribute]
private PdfPanoseFamilyKind <FamilyKind>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseSerifStyle <SerifStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseWeight <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseProportion <Proportion>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseContrast <Contrast>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseStrokeVariation <StrokeVariation>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseArmStyle <ArmStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseLetterform <LetterForm>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseMidline <Midline>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPanoseXHeight <XHeight>k__BackingField;
    public PdfPanoseFamilyKind FamilyKind { get; public set; }
    public PdfPanoseSerifStyle SerifStyle { get; public set; }
    public PdfPanoseWeight Weight { get; public set; }
    public PdfPanoseProportion Proportion { get; public set; }
    public PdfPanoseContrast Contrast { get; public set; }
    public PdfPanoseStrokeVariation StrokeVariation { get; public set; }
    public PdfPanoseArmStyle ArmStyle { get; public set; }
    public PdfPanoseLetterform LetterForm { get; public set; }
    public PdfPanoseMidline Midline { get; public set; }
    public PdfPanoseXHeight XHeight { get; public set; }
    internal bool IsDefault { get; }
    internal PdfPanose(PdfBinaryStream stream);
    [CompilerGeneratedAttribute]
public PdfPanoseFamilyKind get_FamilyKind();
    [CompilerGeneratedAttribute]
public void set_FamilyKind(PdfPanoseFamilyKind value);
    [CompilerGeneratedAttribute]
public PdfPanoseSerifStyle get_SerifStyle();
    [CompilerGeneratedAttribute]
public void set_SerifStyle(PdfPanoseSerifStyle value);
    [CompilerGeneratedAttribute]
public PdfPanoseWeight get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(PdfPanoseWeight value);
    [CompilerGeneratedAttribute]
public PdfPanoseProportion get_Proportion();
    [CompilerGeneratedAttribute]
public void set_Proportion(PdfPanoseProportion value);
    [CompilerGeneratedAttribute]
public PdfPanoseContrast get_Contrast();
    [CompilerGeneratedAttribute]
public void set_Contrast(PdfPanoseContrast value);
    [CompilerGeneratedAttribute]
public PdfPanoseStrokeVariation get_StrokeVariation();
    [CompilerGeneratedAttribute]
public void set_StrokeVariation(PdfPanoseStrokeVariation value);
    [CompilerGeneratedAttribute]
public PdfPanoseArmStyle get_ArmStyle();
    [CompilerGeneratedAttribute]
public void set_ArmStyle(PdfPanoseArmStyle value);
    [CompilerGeneratedAttribute]
public PdfPanoseLetterform get_LetterForm();
    [CompilerGeneratedAttribute]
public void set_LetterForm(PdfPanoseLetterform value);
    [CompilerGeneratedAttribute]
public PdfPanoseMidline get_Midline();
    [CompilerGeneratedAttribute]
public void set_Midline(PdfPanoseMidline value);
    [CompilerGeneratedAttribute]
public PdfPanoseXHeight get_XHeight();
    [CompilerGeneratedAttribute]
public void set_XHeight(PdfPanoseXHeight value);
    internal bool get_IsDefault();
    internal void Write(PdfBinaryStream stream);
}
public enum DevExpress.Pdf.PdfPanoseArmStyle : Enum {
    public int value__;
    public static PdfPanoseArmStyle Any;
    public static PdfPanoseArmStyle NoFit;
    public static PdfPanoseArmStyle StraightArmsHorizontal;
    public static PdfPanoseArmStyle StraightArmsWedge;
    public static PdfPanoseArmStyle StraightArmsVertical;
    public static PdfPanoseArmStyle StraightArmsSingleSerif;
    public static PdfPanoseArmStyle StraightArmsDoubleSerif;
    public static PdfPanoseArmStyle NonStraightHorizontal;
    public static PdfPanoseArmStyle NonStraightWedge;
    public static PdfPanoseArmStyle NonStraightVertical;
    public static PdfPanoseArmStyle NonStraightSingleSerif;
    public static PdfPanoseArmStyle NonStraightDoubleSerif;
}
public enum DevExpress.Pdf.PdfPanoseContrast : Enum {
    public int value__;
    public static PdfPanoseContrast Any;
    public static PdfPanoseContrast NoFit;
    public static PdfPanoseContrast None;
    public static PdfPanoseContrast VeryLow;
    public static PdfPanoseContrast Low;
    public static PdfPanoseContrast MediumLow;
    public static PdfPanoseContrast Medium;
    public static PdfPanoseContrast MediumHigh;
    public static PdfPanoseContrast High;
    public static PdfPanoseContrast VeryHigh;
}
public enum DevExpress.Pdf.PdfPanoseFamilyKind : Enum {
    public int value__;
    public static PdfPanoseFamilyKind Any;
    public static PdfPanoseFamilyKind NoFit;
    public static PdfPanoseFamilyKind LatinText;
    public static PdfPanoseFamilyKind LatinHandWritten;
    public static PdfPanoseFamilyKind LatinDecorative;
    public static PdfPanoseFamilyKind LatinSymbol;
}
public enum DevExpress.Pdf.PdfPanoseLetterform : Enum {
    public int value__;
    public static PdfPanoseLetterform Any;
    public static PdfPanoseLetterform NoFit;
    public static PdfPanoseLetterform NormalContact;
    public static PdfPanoseLetterform NormalWeighted;
    public static PdfPanoseLetterform NormalBoxed;
    public static PdfPanoseLetterform NormalFlattened;
    public static PdfPanoseLetterform NormalRounded;
    public static PdfPanoseLetterform NormalOffCenter;
    public static PdfPanoseLetterform NormalSquare;
    public static PdfPanoseLetterform ObliqueContact;
    public static PdfPanoseLetterform ObliqueWeighted;
    public static PdfPanoseLetterform ObliqueBoxed;
    public static PdfPanoseLetterform ObliqueFlattened;
    public static PdfPanoseLetterform ObliqueRounded;
    public static PdfPanoseLetterform ObliqueOffCenter;
    public static PdfPanoseLetterform ObliqueSquare;
}
public enum DevExpress.Pdf.PdfPanoseMidline : Enum {
    public int value__;
    public static PdfPanoseMidline Any;
    public static PdfPanoseMidline NoFit;
    public static PdfPanoseMidline StandardTrimmer;
    public static PdfPanoseMidline StandardPointed;
    public static PdfPanoseMidline StandardSerifed;
    public static PdfPanoseMidline HighTrimmed;
    public static PdfPanoseMidline HighPointed;
    public static PdfPanoseMidline HighSerifed;
    public static PdfPanoseMidline ConstantTrimmed;
    public static PdfPanoseMidline ConstantPointed;
    public static PdfPanoseMidline ConstantSerifed;
    public static PdfPanoseMidline LowTrimmed;
    public static PdfPanoseMidline LowPointed;
    public static PdfPanoseMidline LowSerifed;
}
public enum DevExpress.Pdf.PdfPanoseProportion : Enum {
    public int value__;
    public static PdfPanoseProportion Any;
    public static PdfPanoseProportion NoFit;
    public static PdfPanoseProportion OldStyle;
    public static PdfPanoseProportion Modern;
    public static PdfPanoseProportion EvenWidth;
    public static PdfPanoseProportion Extended;
    public static PdfPanoseProportion Condensed;
    public static PdfPanoseProportion VeryExtended;
    public static PdfPanoseProportion VeryCondensed;
    public static PdfPanoseProportion Monospaced;
}
public enum DevExpress.Pdf.PdfPanoseSerifStyle : Enum {
    public int value__;
    public static PdfPanoseSerifStyle Any;
    public static PdfPanoseSerifStyle NoFit;
    public static PdfPanoseSerifStyle Cove;
    public static PdfPanoseSerifStyle ObtuseCove;
    public static PdfPanoseSerifStyle SquareCove;
    public static PdfPanoseSerifStyle ObtuseSquareCove;
    public static PdfPanoseSerifStyle Square;
    public static PdfPanoseSerifStyle Thin;
    public static PdfPanoseSerifStyle Oval;
    public static PdfPanoseSerifStyle Exaggerated;
    public static PdfPanoseSerifStyle Triangle;
    public static PdfPanoseSerifStyle NormalSans;
    public static PdfPanoseSerifStyle ObtuseSans;
    public static PdfPanoseSerifStyle PerpendicularSans;
    public static PdfPanoseSerifStyle Flared;
    public static PdfPanoseSerifStyle Rounded;
}
public enum DevExpress.Pdf.PdfPanoseStrokeVariation : Enum {
    public int value__;
    public static PdfPanoseStrokeVariation Any;
    public static PdfPanoseStrokeVariation NoFit;
    public static PdfPanoseStrokeVariation NoVariation;
    public static PdfPanoseStrokeVariation GradualDiagonal;
    public static PdfPanoseStrokeVariation GradualTransitional;
    public static PdfPanoseStrokeVariation GradualVertical;
    public static PdfPanoseStrokeVariation GradualHorizontal;
    public static PdfPanoseStrokeVariation RapidVertical;
    public static PdfPanoseStrokeVariation RapidHorizontal;
    public static PdfPanoseStrokeVariation InstantVertical;
    public static PdfPanoseStrokeVariation InstantHorizontal;
}
public enum DevExpress.Pdf.PdfPanoseWeight : Enum {
    public int value__;
    public static PdfPanoseWeight Any;
    public static PdfPanoseWeight NoFit;
    public static PdfPanoseWeight VeryLight;
    public static PdfPanoseWeight Light;
    public static PdfPanoseWeight Thin;
    public static PdfPanoseWeight Book;
    public static PdfPanoseWeight Medium;
    public static PdfPanoseWeight Demi;
    public static PdfPanoseWeight Bold;
    public static PdfPanoseWeight Heavy;
    public static PdfPanoseWeight Black;
    public static PdfPanoseWeight ExtraBlack;
}
public enum DevExpress.Pdf.PdfPanoseXHeight : Enum {
    public int value__;
    public static PdfPanoseXHeight Any;
    public static PdfPanoseXHeight NoFit;
    public static PdfPanoseXHeight ConstantSmall;
    public static PdfPanoseXHeight ConstantStandard;
    public static PdfPanoseXHeight ConstantLarge;
    public static PdfPanoseXHeight DuckingSmall;
    public static PdfPanoseXHeight DuckingStandard;
    public static PdfPanoseXHeight DuckingLarge;
}
public static class DevExpress.Pdf.PdfPaperSize : object {
    public static PdfRectangle A2;
    public static PdfRectangle A3;
    public static PdfRectangle A3Extra;
    public static PdfRectangle A3ExtraTransverse;
    public static PdfRectangle A3Rotated;
    public static PdfRectangle A3Transverse;
    public static PdfRectangle A4;
    public static PdfRectangle A4Extra;
    public static PdfRectangle A4Plus;
    public static PdfRectangle A4Rotated;
    public static PdfRectangle A4Small;
    public static PdfRectangle A4Transverse;
    public static PdfRectangle A5;
    public static PdfRectangle A5Extra;
    public static PdfRectangle A5Rotated;
    public static PdfRectangle A5Transverse;
    public static PdfRectangle A6;
    public static PdfRectangle A6Rotated;
    public static PdfRectangle APlus;
    public static PdfRectangle B4;
    public static PdfRectangle B4Envelope;
    public static PdfRectangle B4JisRotated;
    public static PdfRectangle B5;
    public static PdfRectangle B5Envelope;
    public static PdfRectangle B5Extra;
    public static PdfRectangle B5JisRotated;
    public static PdfRectangle B5Transverse;
    public static PdfRectangle B6Envelope;
    public static PdfRectangle B6Jis;
    public static PdfRectangle B6JisRotated;
    public static PdfRectangle BPlus;
    public static PdfRectangle C3Envelope;
    public static PdfRectangle C4Envelope;
    public static PdfRectangle C5Envelope;
    public static PdfRectangle C65Envelope;
    public static PdfRectangle C6Envelope;
    public static PdfRectangle CSheet;
    public static PdfRectangle DLEnvelope;
    public static PdfRectangle DSheet;
    public static PdfRectangle ESheet;
    public static PdfRectangle Executive;
    public static PdfRectangle Folio;
    public static PdfRectangle GermanLegalFanfold;
    public static PdfRectangle GermanStandardFanfold;
    public static PdfRectangle InviteEnvelope;
    public static PdfRectangle IsoB4;
    public static PdfRectangle ItalyEnvelope;
    public static PdfRectangle JapaneseDoublePostcard;
    public static PdfRectangle JapaneseDoublePostcardRotated;
    public static PdfRectangle JapanesePostcard;
    public static PdfRectangle JapanesePostcardRotated;
    public static PdfRectangle Ledger;
    public static PdfRectangle Legal;
    public static PdfRectangle LegalExtra;
    public static PdfRectangle Letter;
    public static PdfRectangle LetterExtra;
    public static PdfRectangle LetterExtraTransverse;
    public static PdfRectangle LetterPlus;
    public static PdfRectangle LetterRotated;
    public static PdfRectangle LetterSmall;
    public static PdfRectangle LetterTransverse;
    public static PdfRectangle MonarchEnvelope;
    public static PdfRectangle Note;
    public static PdfRectangle Number10Envelope;
    public static PdfRectangle Number11Envelope;
    public static PdfRectangle Number12Envelope;
    public static PdfRectangle Number9Envelope;
    public static PdfRectangle PersonalEnvelope;
    public static PdfRectangle Prc16K;
    public static PdfRectangle Prc16KRotated;
    public static PdfRectangle Prc32K;
    public static PdfRectangle Prc32KBig;
    public static PdfRectangle Prc32KBigRotated;
    public static PdfRectangle Prc32KRotated;
    public static PdfRectangle PrcEnvelopeNumber1;
    public static PdfRectangle PrcEnvelopeNumber10;
    public static PdfRectangle PrcEnvelopeNumber10Rotated;
    public static PdfRectangle PrcEnvelopeNumber1Rotated;
    public static PdfRectangle PrcEnvelopeNumber2;
    public static PdfRectangle PrcEnvelopeNumber2Rotated;
    public static PdfRectangle PrcEnvelopeNumber3;
    public static PdfRectangle PrcEnvelopeNumber3Rotated;
    public static PdfRectangle PrcEnvelopeNumber4;
    public static PdfRectangle PrcEnvelopeNumber4Rotated;
    public static PdfRectangle PrcEnvelopeNumber5;
    public static PdfRectangle PrcEnvelopeNumber5Rotated;
    public static PdfRectangle PrcEnvelopeNumber6;
    public static PdfRectangle PrcEnvelopeNumber6Rotated;
    public static PdfRectangle PrcEnvelopeNumber7;
    public static PdfRectangle PrcEnvelopeNumber7Rotated;
    public static PdfRectangle PrcEnvelopeNumber8;
    public static PdfRectangle PrcEnvelopeNumber8Rotated;
    public static PdfRectangle PrcEnvelopeNumber9;
    public static PdfRectangle PrcEnvelopeNumber9Rotated;
    public static PdfRectangle Quarto;
    public static PdfRectangle Standard10x11;
    public static PdfRectangle Standard10x14;
    public static PdfRectangle Standard11x17;
    public static PdfRectangle Standard12x11;
    public static PdfRectangle Standard15x11;
    public static PdfRectangle Statement;
    public static PdfRectangle Tabloid;
    public static PdfRectangle TabloidExtra;
    public static PdfRectangle USStandardFanfold;
    private static PdfPaperSize();
}
public class DevExpress.Pdf.PdfParallelogram : object {
    private double lowerLeftX;
    private double lowerLeftY;
    private double upperLeftX;
    private double upperLeftY;
    private double upperRightX;
    private double upperRightY;
    private double lowerRightX;
    private double lowerRightY;
    public double LowerLeftX { get; }
    public double LowerLeftY { get; }
    public double UpperLeftX { get; }
    public double UpperLeftY { get; }
    public double UpperRightX { get; }
    public double UpperRightY { get; }
    public double LowerRightX { get; }
    public double LowerRightY { get; }
    internal PdfParallelogram(PdfReaderArray array);
    public double get_LowerLeftX();
    public double get_LowerLeftY();
    public double get_UpperLeftX();
    public double get_UpperLeftY();
    public double get_UpperRightX();
    public double get_UpperRightY();
    public double get_LowerRightX();
    public double get_LowerRightY();
    internal Double[] ToWriteableObject();
}
public class DevExpress.Pdf.PdfPasswordRequestedEventArgs : EventArgs {
    private string filePath;
    private string fileName;
    private int passwordRequestsCount;
    private string password;
    public string FilePath { get; }
    public string FileName { get; }
    public int PasswordRequestsCount { get; }
    public string PasswordString { get; public set; }
    [ObsoleteAttribute("The Password property is now obsolete. Use the PasswordString property instead.")]
public SecureString Password { get; public set; }
    internal PdfPasswordRequestedEventArgs(string filePath, string fileName, int passwordRequestsCount);
    public string get_FilePath();
    public string get_FileName();
    public int get_PasswordRequestsCount();
    public string get_PasswordString();
    public void set_PasswordString(string value);
    public SecureString get_Password();
    public void set_Password(SecureString value);
}
public class DevExpress.Pdf.PdfPasswordRequestedEventHandler : MulticastDelegate {
    public PdfPasswordRequestedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PdfPasswordRequestedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PdfPasswordRequestedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class DevExpress.Pdf.PdfPathAnnotation : PdfMarkupAnnotation {
    private static string interiorColorDictionaryKey;
    private static string measureDictionaryKey;
    private IList`1<PdfPoint> vertices;
    private PdfColor interiorColor;
    private PdfRectilinearMeasure measure;
    private PdfAnnotationBorderStyle borderStyle;
    public IList`1<PdfPoint> Vertices { get; }
    public PdfAnnotationBorderStyle BorderStyle { get; internal set; }
    public PdfColor InteriorColor { get; public set; }
    public PdfRectilinearMeasure Measure { get; }
    protected string VerticesDictionaryKey { get; }
    internal PdfPathAnnotation(PdfPage page, IPdfPathAnnotationBuilder builder);
    protected PdfPathAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public IList`1<PdfPoint> get_Vertices();
    public PdfAnnotationBorderStyle get_BorderStyle();
    internal void set_BorderStyle(PdfAnnotationBorderStyle value);
    public PdfColor get_InteriorColor();
    public void set_InteriorColor(PdfColor value);
    public PdfRectilinearMeasure get_Measure();
    protected virtual string get_VerticesDictionaryKey();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public abstract class DevExpress.Pdf.PdfPathAnnotationFacade : PdfMarkupAnnotationFacade {
    private IPdfPathAnnotationState annotation;
    public double BorderWidth { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public PdfRGBColor InteriorColor { get; public set; }
    public IList`1<PdfPoint> Vertices { get; }
    protected PdfPathAnnotationFacade(IPdfPathAnnotationState annotation);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public PdfBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfBorderStyle value);
    public PdfRGBColor get_InteriorColor();
    public void set_InteriorColor(PdfRGBColor value);
    public IList`1<PdfPoint> get_Vertices();
}
public abstract class DevExpress.Pdf.PdfPattern : PdfObject {
    private static string patternTypeDictionaryKey;
    private static string matrixDictionaryKey;
    private static int shadingPatternType;
    private PdfTransformationMatrix matrix;
    public PdfTransformationMatrix Matrix { get; }
    protected int PatternType { get; }
    protected PdfPattern(PdfReaderDictionary dictionary);
    protected PdfPattern(PdfTransformationMatrix matrix);
    internal static PdfPattern Parse(object value);
    public PdfTransformationMatrix get_Matrix();
    protected abstract virtual int get_PatternType();
    protected virtual PdfWriterDictionary GetDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage objects);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
    protected internal abstract virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfPatternColorSpace : PdfCustomColorSpace {
    internal static string Name;
    private PdfColorSpace alternateColorSpace;
    public PdfColorSpace AlternateColorSpace { get; }
    public int ComponentsCount { get; }
    internal PdfPatternColorSpace(PdfColorSpace alternateColorSpace);
    public PdfColorSpace get_AlternateColorSpace();
    public virtual int get_ComponentsCount();
    protected internal virtual PdfColor Transform(PdfColor color);
    protected internal virtual object Write(IPdfWrittenObjectsCollection collection);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfPieceInfoEntry : object {
    private static string lastModifiedKey;
    private static string privateKey;
    private static string pieceInfoKey;
    private PdfDocumentCatalog catalog;
    private Nullable`1<DateTimeOffset> lastModified;
    private object data;
    private object dataValue;
    public Nullable`1<DateTimeOffset> LastModified { get; }
    public object Data { get; }
    internal PdfPieceInfoEntry(PdfReaderDictionary dictionary);
    internal static Dictionary`2<string, PdfPieceInfoEntry> Parse(PdfReaderDictionary dictionary);
    internal static void WritePieceInfo(PdfWriterDictionary dictionary, Dictionary`2<string, PdfPieceInfoEntry> pieceInfo);
    public Nullable`1<DateTimeOffset> get_LastModified();
    public object get_Data();
    internal PdfDictionary Write(IPdfWrittenObjectsCollection objects);
    private object WriteObject(IPdfWrittenObjectsCollection objects, object obj);
}
[DebuggerDisplayAttribute("X = {X}, Y = {Y}")]
public class DevExpress.Pdf.PdfPoint : ValueType {
    internal static PdfPoint Empty;
    private double x;
    private double y;
    public double X { get; }
    public double Y { get; }
    public PdfPoint(double x, double y);
    internal PdfPoint(PdfStack operands);
    private static PdfPoint();
    public static bool op_Equality(PdfPoint left, PdfPoint right);
    public static bool op_Inequality(PdfPoint left, PdfPoint right);
    public static PdfPoint op_Addition(PdfPoint left, PdfPoint right);
    public static PdfPoint op_UnaryNegation(PdfPoint value);
    public static PdfPoint op_Subtraction(PdfPoint left, PdfPoint right);
    public static PdfPoint op_Multiply(PdfPoint left, double right);
    public static PdfPoint op_Multiply(PdfPoint left, PdfPoint right);
    public static PdfPoint op_Multiply(double left, PdfPoint right);
    public static PdfPoint op_Division(PdfPoint left, PdfPoint right);
    public static PdfPoint op_Division(PdfPoint value1, double value2);
    internal static PdfPoint Add(PdfPoint vec1, PdfPoint vec2);
    internal static PdfPoint Sub(PdfPoint vec1, PdfPoint vec2);
    internal static PdfPoint Lerp(PdfPoint vec1, PdfPoint vec2, double t);
    internal static double Dot(PdfPoint vec1, PdfPoint vec2);
    internal static double Cross(PdfPoint vec1, PdfPoint vec2);
    internal static double Distance(PdfPoint vec1, PdfPoint vec2);
    internal static double Distance(PdfRectangle rect, PdfPoint point);
    private static double Distance(PdfPoint point, double startX, double startY, double endX, double endY);
    public double get_X();
    public double get_Y();
    internal double Length();
    public sealed virtual bool Equals(PdfPoint pt);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.PdfPolygonAnnotation : PdfPathAnnotation {
    internal static string Type;
    private PdfAnnotationBorderEffect borderEffect;
    private PdfPolygonAnnotationIntent polygonIntent;
    public PdfAnnotationBorderEffect BorderEffect { get; public set; }
    public PdfPolygonAnnotationIntent PolygonIntent { get; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfPolygonAnnotation(PdfPage page, IPdfPathAnnotationBuilder builder);
    internal PdfPolygonAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public PdfAnnotationBorderEffect get_BorderEffect();
    public void set_BorderEffect(PdfAnnotationBorderEffect value);
    public PdfPolygonAnnotationIntent get_PolygonIntent();
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfPolygonAnnotationFacade : PdfPathAnnotationFacade {
    private PdfPolygonAnnotationState annotationState;
    public double BorderEffectIntensity { get; public set; }
    public PdfAnnotationBorderEffectStyle BorderEffectStyle { get; public set; }
    internal PdfPolygonAnnotationFacade(PdfPolygonAnnotationState annotation);
    public double get_BorderEffectIntensity();
    public void set_BorderEffectIntensity(double value);
    public PdfAnnotationBorderEffectStyle get_BorderEffectStyle();
    public void set_BorderEffectStyle(PdfAnnotationBorderEffectStyle value);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument", "False")]
public enum DevExpress.Pdf.PdfPolygonAnnotationIntent : Enum {
    public int value__;
    public static PdfPolygonAnnotationIntent None;
    public static PdfPolygonAnnotationIntent PolygonCloud;
    public static PdfPolygonAnnotationIntent PolygonDimension;
}
public class DevExpress.Pdf.PdfPolyLineAnnotation : PdfUnclosedPathAnnotation {
    internal static string Type;
    private PdfPolyLineAnnotationIntent polyLineIntent;
    public PdfPolyLineAnnotationIntent PolyLineIntent { get; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfPolyLineAnnotation(PdfPage page, IPdfPathAnnotationBuilder builder);
    internal PdfPolyLineAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public PdfPolyLineAnnotationIntent get_PolyLineIntent();
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfPolyLineAnnotationFacade : PdfPathAnnotationFacade {
    private PdfPolyLineAnnotationState annotation;
    public PdfAnnotationLineEndingStyle LineStartStyle { get; public set; }
    public PdfAnnotationLineEndingStyle LineEndStyle { get; public set; }
    internal PdfPolyLineAnnotationFacade(PdfPolyLineAnnotationState annotation);
    public PdfAnnotationLineEndingStyle get_LineStartStyle();
    public void set_LineStartStyle(PdfAnnotationLineEndingStyle value);
    public PdfAnnotationLineEndingStyle get_LineEndStyle();
    public void set_LineEndStyle(PdfAnnotationLineEndingStyle value);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument", "False")]
public enum DevExpress.Pdf.PdfPolyLineAnnotationIntent : Enum {
    public int value__;
    public static PdfPolyLineAnnotationIntent None;
    public static PdfPolyLineAnnotationIntent PolyLineDimension;
}
public class DevExpress.Pdf.PdfPopupAnnotation : PdfAnnotation {
    internal static string Type;
    private int parentNumber;
    private bool open;
    private PdfAnnotation parent;
    public bool Open { get; }
    public PdfAnnotation Parent { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfPopupAnnotation(PdfPage page, PdfAnnotation parent);
    internal PdfPopupAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    private static PdfRectangle CreatePopupRectangle(PdfRectangle parent);
    public bool get_Open();
    public PdfAnnotation get_Parent();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    private void ResolveParent();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
    [CompilerGeneratedAttribute]
private PdfAnnotation <ResolveParent>b__15_0(PdfReaderDictionary dictionary);
}
public class DevExpress.Pdf.PdfPostScriptCalculatorFunction : PdfCustomFunction {
    internal static int Number;
    private Byte[] code;
    private PostScriptInterpreter interpreter;
    private IList`1<PostScriptObject> program;
    public Byte[] Code { get; }
    protected int FunctionType { get; }
    internal PdfPostScriptCalculatorFunction(PdfReaderDictionary dictionary, Byte[] code);
    public Byte[] get_Code();
    protected virtual int get_FunctionType();
    protected internal virtual bool IsSame(PdfFunction function);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
    protected virtual Double[] PerformTransformation(Double[] arguments);
}
public class DevExpress.Pdf.PdfPostScriptGrayToCMYKColorFunction : PdfPostScriptCalculatorFunction {
    internal static string StringData;
    internal static string AlternateStringData;
    internal PdfPostScriptGrayToCMYKColorFunction(PdfReaderDictionary dictionary, Byte[] data);
    private static PdfPostScriptGrayToCMYKColorFunction();
    protected virtual Double[] PerformTransformation(Double[] arguments);
}
public class DevExpress.Pdf.PdfPredefinedCompositeFontEncoding : PdfCompositeFontEncoding {
    private string name;
    private bool isVertical;
    private Lazy`1<PdfCIDCMap> encoding;
    public string Name { get; }
    public bool IsVertical { get; }
    internal PdfPredefinedCompositeFontEncoding(string name);
    public string get_Name();
    public virtual bool get_IsVertical();
    protected internal virtual PdfStringCommandData GetStringData(Byte[] bytes, Double[] glyphOffsets);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection);
    internal virtual short GetCID(Byte[] code);
}
public class DevExpress.Pdf.PdfPredefinedFunction : PdfFunction {
    internal static string DefaultFunctionName;
    internal static string IdentityFunctionName;
    private static PdfPredefinedFunction defaultFunction;
    private static PdfPredefinedFunction identityFunction;
    public static PdfFunction Default { get; }
    public static PdfFunction Identity { get; }
    internal bool IsIdentity { get; }
    private static PdfPredefinedFunction();
    public static PdfFunction get_Default();
    public static PdfFunction get_Identity();
    internal virtual bool get_IsIdentity();
    protected internal virtual bool IsSame(PdfFunction function);
    protected internal virtual Double[] Transform(Double[] arguments);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfPredefinedSpotFunction : PdfFunction {
    private static double doublePi;
    private PdfPredefinedSpotFunctionKind kind;
    public PdfPredefinedSpotFunctionKind Kind { get; }
    internal bool IsIdentity { get; }
    public PdfPredefinedSpotFunction(PdfPredefinedSpotFunctionKind kind);
    internal PdfPredefinedSpotFunction(string name);
    public PdfPredefinedSpotFunctionKind get_Kind();
    internal virtual bool get_IsIdentity();
    protected internal virtual Double[] Transform(Double[] arguments);
    protected internal virtual bool IsSame(PdfFunction function);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfPredefinedSpotFunctionKind : Enum {
    public int value__;
    public static PdfPredefinedSpotFunctionKind SimpleDot;
    public static PdfPredefinedSpotFunctionKind InvertedSimpleDot;
    public static PdfPredefinedSpotFunctionKind DoubleDot;
    public static PdfPredefinedSpotFunctionKind InvertedDoubleDot;
    public static PdfPredefinedSpotFunctionKind CosineDot;
    public static PdfPredefinedSpotFunctionKind Double;
    public static PdfPredefinedSpotFunctionKind InvertedDouble;
    public static PdfPredefinedSpotFunctionKind Line;
    public static PdfPredefinedSpotFunctionKind LineX;
    public static PdfPredefinedSpotFunctionKind LineY;
    public static PdfPredefinedSpotFunctionKind Round;
    public static PdfPredefinedSpotFunctionKind Ellipse;
    public static PdfPredefinedSpotFunctionKind EllipseA;
    public static PdfPredefinedSpotFunctionKind InvertedEllipseA;
    public static PdfPredefinedSpotFunctionKind EllipseB;
    public static PdfPredefinedSpotFunctionKind EllipseC;
    public static PdfPredefinedSpotFunctionKind InvertedEllipseC;
    public static PdfPredefinedSpotFunctionKind Square;
    public static PdfPredefinedSpotFunctionKind Cross;
    public static PdfPredefinedSpotFunctionKind Rhomboid;
    public static PdfPredefinedSpotFunctionKind Diamond;
}
public class DevExpress.Pdf.PdfPrinterMarkAnnotation : PdfAnnotation {
    internal static string Type;
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfPrinterMarkAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
}
public class DevExpress.Pdf.PdfPrintFieldLogicalStructureElementAttribute : PdfLogicalStructureElementAttribute {
    internal static string Owner;
    private static string roleKey;
    private static string checkedKed;
    private static string nameKey;
    private Nullable`1<PdfPrintFieldLogicalStructureElementAttributeRole> role;
    private PdfPrintFieldLogicalStructureElementAttributeRadioButtonState radioButtonSate;
    private string name;
    internal PdfPrintFieldLogicalStructureElementAttribute(PdfReaderDictionary dictionary);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfPrintFieldLogicalStructureElementAttributeRadioButtonState : Enum {
    public int value__;
    [PdfFieldNameAttribute("on")]
public static PdfPrintFieldLogicalStructureElementAttributeRadioButtonState On;
    [PdfFieldNameAttribute("off")]
public static PdfPrintFieldLogicalStructureElementAttributeRadioButtonState Off;
    [PdfFieldNameAttribute("neutral")]
public static PdfPrintFieldLogicalStructureElementAttributeRadioButtonState Neutral;
}
public enum DevExpress.Pdf.PdfPrintFieldLogicalStructureElementAttributeRole : Enum {
    public int value__;
    [PdfFieldNameAttribute("rb")]
public static PdfPrintFieldLogicalStructureElementAttributeRole RadioButton;
    [PdfFieldNameAttribute("cb")]
public static PdfPrintFieldLogicalStructureElementAttributeRole CheckBox;
    [PdfFieldNameAttribute("pb")]
public static PdfPrintFieldLogicalStructureElementAttributeRole PushButton;
    [PdfFieldNameAttribute("tv")]
public static PdfPrintFieldLogicalStructureElementAttributeRole TextValueField;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfPrintMode : Enum {
    public int value__;
    public static PdfPrintMode None;
    public static PdfPrintMode Simplex;
    public static PdfPrintMode DuplexFlipShortEdge;
    public static PdfPrintMode DuplexFlipLongEdge;
}
public class DevExpress.Pdf.PdfPrintPageRange : object {
    private int start;
    private int end;
    public int Start { get; }
    public int End { get; }
    public PdfPrintPageRange(int start, int end);
    public int get_Start();
    public int get_End();
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfPrintScaling : Enum {
    public int value__;
    public static PdfPrintScaling None;
    public static PdfPrintScaling AppDefault;
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.PdfPrivateData : PdfObject {
    private PdfPrivateData parent;
    private int objectNumber;
    private Byte[] rawData;
    private PdfDocumentCatalog documentCatalog;
    private Dictionary`2<string, object> dictionary;
    public Byte[] RawData { get; }
    public object Item { get; }
    internal PdfPrivateData(PdfPrivateData parent, PdfReaderDictionary readerDictionary);
    internal PdfPrivateData(PdfPrivateData parent, PdfReaderStream readerStream);
    internal static object TryResolve(PdfPrivateData parent, PdfDocumentCatalog catalog, object value);
    public Byte[] get_RawData();
    public object get_Item(string key);
    internal PdfWriterDictionary CreateWriterDictionary(IPdfWrittenObjectsCollection collection);
    internal void Remove(string key);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    private object ToWritableObject(IPdfWrittenObjectsCollection collection, object obj);
}
public abstract class DevExpress.Pdf.PdfProperties : PdfObject {
    protected PdfProperties(int objectNumber);
    internal static PdfProperties ParseProperties(PdfReaderDictionary dictionary);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal abstract virtual object Write(IPdfWrittenObjectsCollection collection);
    protected virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfQuadrilateral : object {
    private static string dictionaryKey;
    private PdfPoint p1;
    private PdfPoint p2;
    private PdfPoint p3;
    private PdfPoint p4;
    public PdfPoint P1 { get; }
    public PdfPoint P2 { get; }
    public PdfPoint P3 { get; }
    public PdfPoint P4 { get; }
    internal Double[] Data { get; }
    public PdfQuadrilateral(PdfPoint p1, PdfPoint p2, PdfPoint p3, PdfPoint p4);
    internal PdfQuadrilateral(PdfOrientedRectangle rectangle);
    private static bool TriangleContainsPoint(PdfPoint pt1, PdfPoint pt2, PdfPoint pt3, PdfPoint targetPoint);
    internal static IList`1<PdfQuadrilateral> ParseArray(PdfReaderDictionary dictionary);
    internal static void Write(PdfWriterDictionary dictionary, IList`1<PdfQuadrilateral> region);
    public PdfPoint get_P1();
    public PdfPoint get_P2();
    public PdfPoint get_P3();
    public PdfPoint get_P4();
    internal Double[] get_Data();
    internal bool Contains(PdfPoint pt);
}
public class DevExpress.Pdf.PdfRadialShading : PdfGradientShading {
    internal static int Type;
    [CompilerGeneratedAttribute]
private PdfPoint <StartingCircleCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartingCircleRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPoint <EndingCircleCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EndingCircleRadius>k__BackingField;
    public PdfPoint StartingCircleCenter { get; }
    public double StartingCircleRadius { get; }
    public PdfPoint EndingCircleCenter { get; }
    public double EndingCircleRadius { get; }
    protected int ShadingType { get; }
    internal PdfRadialShading(PdfReaderDictionary dictionary);
    internal PdfRadialShading(PdfPoint startingCircleCenter, double startingCircleRadius, PdfPoint endingCircleCenter, double endingCircleRadius, PdfObjectList`1<PdfCustomFunction> blendFunctions);
    [CompilerGeneratedAttribute]
public PdfPoint get_StartingCircleCenter();
    [CompilerGeneratedAttribute]
public double get_StartingCircleRadius();
    [CompilerGeneratedAttribute]
public PdfPoint get_EndingCircleCenter();
    [CompilerGeneratedAttribute]
public double get_EndingCircleRadius();
    protected virtual int get_ShadingType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfRadioButtonWidgetFacade : PdfCheckBoxWidgetFacade {
    private PdfRadioGroupFormFieldFacade radioGroup;
    public bool IsChecked { get; public set; }
    internal PdfRadioButtonWidgetFacade(PdfDocumentStateBase documentState, PdfButtonFormField formField, PdfRadioGroupFormFieldFacade radioGroup, PdfWidgetAnnotationState state);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
}
public class DevExpress.Pdf.PdfRadioGroupFormFieldFacade : PdfFormFieldFacade`2<PdfRadioButtonWidgetFacade, PdfButtonFormField> {
    public PdfFormFieldType Type { get; }
    public bool ToggleToOff { get; public set; }
    public bool RadiosInUnison { get; public set; }
    public string Value { get; public set; }
    public IEnumerable`1<PdfFormFieldItem> Items { get; }
    internal PdfRadioGroupFormFieldFacade(PdfDocumentStateBase documentState, PdfButtonFormField field, PdfAcroFormFacade acroForm);
    public virtual PdfFormFieldType get_Type();
    public bool get_ToggleToOff();
    public void set_ToggleToOff(bool value);
    public bool get_RadiosInUnison();
    public void set_RadiosInUnison(bool value);
    public string get_Value();
    public void set_Value(string value);
    public IEnumerable`1<PdfFormFieldItem> get_Items();
    protected virtual PdfRadioButtonWidgetFacade CreateWidget(PdfDocumentStateBase documentState, PdfButtonFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfRange : object {
    private double min;
    private double max;
    public double Min { get; }
    public double Max { get; }
    public PdfRange(double min, double max);
    internal static PdfWritableDoubleArray ToArray(IEnumerable`1<PdfRange> ranges);
    internal static IList`1<PdfPrimitive> ToPrimitiveArray(IEnumerable`1<PdfRange> ranges);
    public double get_Min();
    public double get_Max();
    internal bool IsSame(PdfRange range);
    internal bool Contains(int value);
}
public class DevExpress.Pdf.PdfRectangle : object {
    [CompilerGeneratedAttribute]
private static PdfRectangle <Infinite>k__BackingField;
    [CompilerGeneratedAttribute]
private static PdfRectangle <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PdfRectangle <ImageRect>k__BackingField;
    private double left;
    private double bottom;
    private double right;
    private double top;
    internal static PdfRectangle Infinite { get; }
    internal static PdfRectangle Empty { get; }
    internal static PdfRectangle ImageRect { get; }
    public double Left { get; }
    public double Bottom { get; }
    public double Right { get; }
    public double Top { get; }
    public double Width { get; }
    public double Height { get; }
    public PdfPoint BottomLeft { get; }
    public PdfPoint TopLeft { get; }
    public PdfPoint BottomRight { get; }
    public PdfPoint TopRight { get; }
    public PdfPoint Center { get; }
    public PdfRectangle(double left, double bottom, double right, double top);
    internal PdfRectangle(PdfPoint point1, PdfPoint point2);
    private PdfRectangle(double left, double bottom, double right, double top, bool shoudlValidate);
    private static PdfRectangle();
    [CompilerGeneratedAttribute]
internal static PdfRectangle get_Infinite();
    [CompilerGeneratedAttribute]
internal static PdfRectangle get_Empty();
    [CompilerGeneratedAttribute]
internal static PdfRectangle get_ImageRect();
    private static bool CheckNumbers(double a, double b, double eps);
    internal static PdfRectangle Union(PdfRectangle rect1, PdfRectangle rect2);
    internal static PdfRectangle Parse(PdfReaderArray array, int startIndex);
    internal static bool AreEqual(PdfRectangle r1, PdfRectangle r2, double eps);
    internal static PdfRectangle Intersect(PdfRectangle r1, PdfRectangle r2);
    internal static PdfRectangle Inflate(PdfRectangle rect, double amount);
    internal static PdfRectangle CreateBoundingBox(PdfPoint[] points);
    internal static PdfRectangle CreateBoundingBox(IEnumerable`1<PdfPoint> points);
    internal static PdfRectangle Move(PdfRectangle rect, double dx, double dy);
    public double get_Left();
    public double get_Bottom();
    public double get_Right();
    public double get_Top();
    public double get_Width();
    public double get_Height();
    public PdfPoint get_BottomLeft();
    public PdfPoint get_TopLeft();
    public PdfPoint get_BottomRight();
    public PdfPoint get_TopRight();
    public PdfPoint get_Center();
    internal bool Contains(PdfRectangle rectangle);
    internal bool Intersects(PdfRectangle rectangle);
    internal PdfRectangle Trim(PdfRectangle rectangle);
    public bool Contains(PdfPoint point);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected internal PdfWritableDoubleArray ToWritableObject();
    internal Double[] ToArray();
}
public class DevExpress.Pdf.PdfRectangularGraphicsPath : PdfGraphicsPath {
    private PdfRectangle rectangle;
    public PdfRectangle Rectangle { get; }
    public PdfRectangularGraphicsPath(double left, double bottom, double width, double height);
    public PdfRectangle get_Rectangle();
    protected internal virtual bool IsFlat(bool forFilling);
    protected internal virtual void GeneratePathCommands(IList`1<PdfCommand> commands);
    internal virtual PdfRectangle GetAxisAlignedRectangle();
    internal virtual bool IsRectangle();
}
public class DevExpress.Pdf.PdfRectilinearMeasure : PdfObject {
    private static string scaleRatioDictionaryKey;
    private static string xAxisNumberFormatDictionaryKey;
    private static string yAxisNumberFormatDictionaryKey;
    private static string distanceNumberFormatsDictionaryKey;
    private static string areaNumberFormatsDictionaryKey;
    private static string angleNumberFormatsDictionaryKey;
    private static string lineSlopeNumberFormatsDictionaryKey;
    private static string originDictionaryKey;
    private static string yToXFactorDictionaryKey;
    private string scaleRatio;
    private PdfNumberFormat[] xAxisNumberFormats;
    private PdfNumberFormat[] yAxisNumberFormats;
    private PdfNumberFormat[] distanceNumberFormats;
    private PdfNumberFormat[] areaNumberFormats;
    private PdfNumberFormat[] angleNumberFormats;
    private PdfNumberFormat[] lineSlopeNumberFormats;
    private Nullable`1<PdfPoint> origin;
    private Nullable`1<double> yToXFactor;
    public string ScaleRatio { get; }
    public PdfNumberFormat[] XAxisNumberFormats { get; }
    public PdfNumberFormat[] YAxisNumberFormats { get; }
    public PdfNumberFormat[] DistanceNumberFormats { get; }
    public PdfNumberFormat[] AreaNumberFormats { get; }
    public PdfNumberFormat[] AngleNumberFormats { get; }
    public PdfNumberFormat[] LineSlopeNumberFormats { get; }
    public Nullable`1<PdfPoint> Origin { get; }
    public Nullable`1<double> YToXFactor { get; }
    internal PdfRectilinearMeasure(PdfReaderDictionary dictionary);
    private static PdfNumberFormat[] ParseNumberFormats(PdfReaderDictionary dictionary, string key);
    public string get_ScaleRatio();
    public PdfNumberFormat[] get_XAxisNumberFormats();
    public PdfNumberFormat[] get_YAxisNumberFormats();
    public PdfNumberFormat[] get_DistanceNumberFormats();
    public PdfNumberFormat[] get_AreaNumberFormats();
    public PdfNumberFormat[] get_AngleNumberFormats();
    public PdfNumberFormat[] get_LineSlopeNumberFormats();
    public Nullable`1<PdfPoint> get_Origin();
    public Nullable`1<double> get_YToXFactor();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfRedactAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfRedactAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfRedactAnnotationFacade : PdfMarkupAnnotationFacade {
    internal PdfRedactAnnotationFacade(PdfRedactAnnotationState annotation);
}
public class DevExpress.Pdf.PdfRemoteGoToAction : PdfJumpAction {
    internal static string Name;
    private static string fileDictionaryKey;
    private static string newWindowKey;
    private PdfFileSpecification fileSpecification;
    private bool openInNewWindow;
    protected string ActionType { get; }
    protected bool IsInternal { get; }
    public PdfFileSpecification FileSpecification { get; }
    public bool OpenInNewWindow { get; }
    internal PdfRemoteGoToAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
    protected virtual bool get_IsInternal();
    public PdfFileSpecification get_FileSpecification();
    public bool get_OpenInNewWindow();
    protected internal virtual void Execute(IPdfInteractiveOperationController interactiveOperationController, IList`1<PdfPage> pages);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
[PdfSupportUndefinedValueAttribute]
public enum DevExpress.Pdf.PdfRenderingIntent : Enum {
    public int value__;
    public static PdfRenderingIntent AbsoluteColorimetric;
    public static PdfRenderingIntent RelativeColorimetric;
    public static PdfRenderingIntent Saturation;
    public static PdfRenderingIntent Perceptual;
}
public static class DevExpress.Pdf.PdfRenderingSettings : object {
    private static bool useExternalDctDecoder;
    [CompilerGeneratedAttribute]
private static string <ExternalDctDecoderModulePath>k__BackingField;
    public static bool UseExternalDctDecoder { get; public set; }
    [ObsoleteAttribute("This API is now obsolete.")]
public static string ExternalDctDecoderModulePath { get; public set; }
    private static PdfRenderingSettings();
    public static bool get_UseExternalDctDecoder();
    public static void set_UseExternalDctDecoder(bool value);
    [CompilerGeneratedAttribute]
public static string get_ExternalDctDecoderModulePath();
    [CompilerGeneratedAttribute]
public static void set_ExternalDctDecoderModulePath(string value);
}
public class DevExpress.Pdf.PdfRenditionAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfRenditionAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public class DevExpress.Pdf.PdfResetFormAction : PdfAction {
    internal static string Name;
    private static string fieldsDictionaryKey;
    private static string flagsDictionaryKey;
    private static int excludeFieldsValue;
    private static int defaultFlag;
    private int flags;
    private List`1<PdfInteractiveFormField> fields;
    private PdfReaderArray formFieldObjects;
    private PdfInteractiveFormFieldsList fieldsList;
    public bool ExcludeFields { get; }
    public IEnumerable`1<PdfInteractiveFormField> Fields { get; }
    protected string ActionType { get; }
    internal PdfResetFormAction(PdfReaderDictionary dictionary);
    private static PdfInteractiveFormField FindFieldByName(string fullName, IList`1<PdfInteractiveFormField> fields);
    public bool get_ExcludeFields();
    public IEnumerable`1<PdfInteractiveFormField> get_Fields();
    protected virtual string get_ActionType();
    private void FillFormFields();
    protected internal virtual void Execute(IPdfInteractiveOperationController interactiveOperationController, IList`1<PdfPage> pages);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfRestoreGraphicsStateCommand : PdfCommand {
    internal static string Name;
    private static PdfRestoreGraphicsStateCommand instance;
    internal static PdfRestoreGraphicsStateCommand Instance { get; }
    private static PdfRestoreGraphicsStateCommand();
    internal static PdfRestoreGraphicsStateCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfRGBColor : object {
    private static string redComponentName;
    private static string greenComponentName;
    private static string blueComponentName;
    private double red;
    private double green;
    private double blue;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public double R { get; public set; }
    public double G { get; public set; }
    public double B { get; public set; }
    internal PdfRGBColor(PdfColor color);
    public PdfRGBColor(double r, double g, double b);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public double get_R();
    public void set_R(double value);
    public double get_G();
    public void set_G(double value);
    public double get_B();
    public void set_B(double value);
    internal PdfColor ToColor();
    internal PdfRgbaColor ToRgbaColor();
    private void RaisePropertyChanged(string propertyName);
    private void ValidateColorComponent(double component, string componentName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class DevExpress.Pdf.PdfRichMediaActivation : PdfObject {
    private static string richMediaActivationDictionaryName;
    private static string conditionKey;
    private static string configurationKey;
    private PdfRichMediaActivationCondition condition;
    private PdfRichMediaConfiguration configuration;
    public PdfRichMediaActivationCondition Condition { get; }
    public PdfRichMediaConfiguration Configuration { get; }
    internal PdfRichMediaActivation(PdfRichMediaAnnotation annotation, PdfReaderDictionary dictionary);
    public PdfRichMediaActivationCondition get_Condition();
    public PdfRichMediaConfiguration get_Configuration();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfRichMediaActivationCondition : Enum {
    public int value__;
    [PdfFieldNameAttribute("XA")]
public static PdfRichMediaActivationCondition Explicitly;
    [PdfFieldNameAttribute("PO")]
public static PdfRichMediaActivationCondition PageBecomeCurrent;
    [PdfFieldNameAttribute("PV")]
public static PdfRichMediaActivationCondition PageBecomeVisible;
}
public class DevExpress.Pdf.PdfRichMediaAnnotation : PdfAnnotation {
    internal static string Type;
    private static string richMediaContentDictionaryKey;
    private static string richMediaSettingsDictionaryKey;
    private static string assetsDictionaryKey;
    private static string configurationsDictionaryKey;
    private PdfDeferredSortedDictionary`2<string, PdfFileSpecification> assets;
    private List`1<PdfRichMediaConfiguration> configurations;
    private PdfRichMediaSettings settings;
    public IDictionary`2<string, PdfFileSpecification> Assets { get; }
    public IList`1<PdfRichMediaConfiguration> Configurations { get; }
    public PdfRichMediaSettings Settings { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfRichMediaAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public IDictionary`2<string, PdfFileSpecification> get_Assets();
    public IList`1<PdfRichMediaConfiguration> get_Configurations();
    public PdfRichMediaSettings get_Settings();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfRichMediaBinding : Enum {
    public int value__;
    public static PdfRichMediaBinding None;
    public static PdfRichMediaBinding Foreground;
    public static PdfRichMediaBinding Background;
    public static PdfRichMediaBinding Material;
}
public class DevExpress.Pdf.PdfRichMediaConfiguration : PdfObject {
    private static string nameDictionaryKey;
    private static string instancesDictionaryKey;
    private int number;
    private string name;
    private List`1<PdfRichMediaInstance> instances;
    private PdfRichMediaContentType contentType;
    internal int Number { get; }
    public string Name { get; }
    public IList`1<PdfRichMediaInstance> Instances { get; }
    public PdfRichMediaContentType ContentType { get; }
    internal PdfRichMediaConfiguration(IEnumerable`1<KeyValuePair`2<string, PdfFileSpecification>> assets, PdfReaderDictionary dictionary);
    internal int get_Number();
    public string get_Name();
    public IList`1<PdfRichMediaInstance> get_Instances();
    public PdfRichMediaContentType get_ContentType();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.PdfRichMediaContentType : Enum {
    public int value__;
    [PdfFieldNameAttribute("3D")]
public static PdfRichMediaContentType Media3D;
    public static PdfRichMediaContentType Flash;
    public static PdfRichMediaContentType Sound;
    public static PdfRichMediaContentType Video;
    [PdfFieldNameAttribute("html5")]
public static PdfRichMediaContentType HTML5;
}
public class DevExpress.Pdf.PdfRichMediaDeactivation : PdfObject {
    internal PdfRichMediaDeactivation(PdfReaderDictionary dictionary);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfRichMediaInstance : PdfObject {
    private static string assetDictionaryKey;
    private static string parametersDictionaryKey;
    private PdfFileSpecification asset;
    private PdfRichMediaContentType contentType;
    private PdfRichMediaParams parameters;
    public PdfFileSpecification Asset { get; }
    public PdfRichMediaContentType ContentType { get; }
    public PdfRichMediaParams Parameters { get; }
    internal PdfRichMediaInstance(IEnumerable`1<KeyValuePair`2<string, PdfFileSpecification>> assets, PdfReaderDictionary dictionary);
    public PdfFileSpecification get_Asset();
    public PdfRichMediaContentType get_ContentType();
    public PdfRichMediaParams get_Parameters();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfRichMediaParams : PdfObject {
    private static string flashVarsKey;
    private static string bindingMaterialNameKey;
    private static string bindingKey;
    private static string cuePointsKey;
    private static string settingsKey;
    private string flashVars;
    private PdfRichMediaBinding binding;
    private string bindingMaterialName;
    private List`1<PdfCuePoint> cuePoints;
    private string settings;
    public string FlashVars { get; }
    public PdfRichMediaBinding Binding { get; }
    public string BindingMaterialName { get; }
    public IList`1<PdfCuePoint> CuePoints { get; }
    public string Settings { get; }
    internal PdfRichMediaParams(PdfReaderDictionary dictionary);
    public string get_FlashVars();
    public PdfRichMediaBinding get_Binding();
    public string get_BindingMaterialName();
    public IList`1<PdfCuePoint> get_CuePoints();
    public string get_Settings();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfRichMediaSettings : PdfObject {
    private static string richMediaSettingsDictionaryName;
    private static string activationKey;
    private static string deactivationKey;
    private PdfRichMediaActivation activation;
    private PdfRichMediaDeactivation deactivation;
    public PdfRichMediaActivation Activation { get; }
    public PdfRichMediaDeactivation Deactivation { get; }
    internal PdfRichMediaSettings(PdfRichMediaAnnotation annotation, PdfReaderDictionary dictionary);
    public PdfRichMediaActivation get_Activation();
    public PdfRichMediaDeactivation get_Deactivation();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfRubberStampAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    private static string iconNameKey;
    internal static string CustomIconName;
    private string iconName;
    public string IconName { get; public set; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfRubberStampAnnotation(PdfPage page, PdfMarkupAnnotationBuilder builder, string iconName);
    internal PdfRubberStampAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public string get_IconName();
    public void set_IconName(string value);
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfRubberStampAnnotationFacade : PdfMarkupAnnotationFacade {
    private PdfRubberStampAnnotationState annotationState;
    public string IconName { get; public set; }
    public bool KeepAspectRatio { get; public set; }
    public int RotationAngle { get; public set; }
    internal PdfRubberStampAnnotationFacade(PdfRubberStampAnnotationState annotation);
    public string get_IconName();
    public void set_IconName(string value);
    public bool get_KeepAspectRatio();
    public void set_KeepAspectRatio(bool value);
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    public void SetCustomIcon(Stream pdfStream);
    public void SetCustomIcon(Stream pdfStream, int pageNumber);
    public void SetCustomIcon(string pdfFileName);
    public void SetCustomIcon(string pdfFileName, int pageNumber);
}
public static class DevExpress.Pdf.PdfRubberStampAnnotationIconName : object {
    private static HashSet`1<string> fields;
    public static string SHRejected;
    public static string SHAccepted;
    public static string DRevised;
    public static string DReceived;
    public static string DReviewed;
    public static string DApproved;
    public static string DConfidential;
    public static string Approved;
    public static string Experimental;
    public static string NotApproved;
    public static string AsIs;
    public static string Expired;
    public static string NotForPublicRelease;
    public static string Confidential;
    public static string Final;
    public static string Sold;
    public static string Departmental;
    public static string ForComment;
    public static string TopSecret;
    public static string ForPublicRelease;
    public static string SHInitialHere;
    public static string SHWitness;
    public static string SHSignHere;
    public static string Draft;
    private static PdfRubberStampAnnotationIconName();
    internal static bool IsKnownName(string name);
}
public class DevExpress.Pdf.PdfRunLengthDecodeFilter : PdfFilter {
    internal static string Name;
    internal static string ShortName;
    protected internal string FilterName { get; }
    protected internal virtual string get_FilterName();
    protected internal virtual Byte[] Decode(Byte[] data);
}
public class DevExpress.Pdf.PdfSampledFunction : PdfCustomFunction {
    internal static int Number;
    private static string sizeDictionaryKey;
    private static string bitsPerSampleDictionaryKey;
    private static string orderDictionaryKey;
    private static string encodeDictionaryKey;
    private static string decodeDictionaryKey;
    [CompilerGeneratedAttribute]
private IList`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCubicInterpolation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfRange> <Encode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PdfRange> <Decode>k__BackingField;
    [CompilerGeneratedAttribute]
private Int64[] <Samples>k__BackingField;
    public IList`1<int> Size { get; }
    public int BitsPerSample { get; }
    public bool IsCubicInterpolation { get; }
    public IList`1<PdfRange> Encode { get; }
    public IList`1<PdfRange> Decode { get; }
    public Int64[] Samples { get; }
    private int SamplesCount { get; }
    private long MaxSampleValue { get; }
    protected int FunctionType { get; }
    internal PdfSampledFunction(IList`1<PdfRange> domain, IList`1<PdfRange> range, IList`1<int> size, int bitsPerSample, Int64[] samples);
    internal PdfSampledFunction(IList`1<PdfRange> domain, IList`1<PdfRange> range, IList`1<int> size, int bitsPerSample, Int64[] samples, IList`1<PdfRange> encode, IList`1<PdfRange> decode);
    internal PdfSampledFunction(PdfReaderDictionary dictionary, Byte[] data);
    private static IList`1<PdfRange> CreateRangeArray(PdfReaderArray array, int size);
    [CompilerGeneratedAttribute]
public IList`1<int> get_Size();
    [CompilerGeneratedAttribute]
public int get_BitsPerSample();
    [CompilerGeneratedAttribute]
public bool get_IsCubicInterpolation();
    [CompilerGeneratedAttribute]
public IList`1<PdfRange> get_Encode();
    [CompilerGeneratedAttribute]
public IList`1<PdfRange> get_Decode();
    [CompilerGeneratedAttribute]
public Int64[] get_Samples();
    private int get_SamplesCount();
    private long get_MaxSampleValue();
    protected virtual int get_FunctionType();
    private static IList`1<PdfRange> CreateEncode(IList`1<int> size);
    protected internal virtual bool IsSame(PdfFunction function);
    protected virtual Double[] PerformTransformation(Double[] arguments);
    protected virtual PdfWriterDictionary FillDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    private double Interpolate(double argument, double argumentMin, double argumentMax, PdfRange code, double valueMin, double valueMax);
    private Double[] InterpolateSamples(Double[] coordinates);
    private double Normalize(double value, double min, double max);
}
public class DevExpress.Pdf.PdfSaveGraphicsStateCommand : PdfCommand {
    internal static string Name;
    private static PdfSaveGraphicsStateCommand instance;
    internal static PdfSaveGraphicsStateCommand Instance { get; }
    private static PdfSaveGraphicsStateCommand();
    internal static PdfSaveGraphicsStateCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSaveOptions : ValueType {
    [CompilerGeneratedAttribute]
private PdfEncryptionOptions <EncryptionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfSignature <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableMetadataUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableModDateUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCreationDateUpdate>k__BackingField;
    public PdfEncryptionOptions EncryptionOptions { get; public set; }
    public PdfSignature Signature { get; public set; }
    public bool DisableMetadataUpdate { get; public set; }
    public bool DisableModDateUpdate { get; public set; }
    public bool DisableCreationDateUpdate { get; public set; }
    [CompilerGeneratedAttribute]
public PdfEncryptionOptions get_EncryptionOptions();
    [CompilerGeneratedAttribute]
public void set_EncryptionOptions(PdfEncryptionOptions value);
    [CompilerGeneratedAttribute]
public PdfSignature get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(PdfSignature value);
    [CompilerGeneratedAttribute]
public bool get_DisableMetadataUpdate();
    [CompilerGeneratedAttribute]
public void set_DisableMetadataUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableModDateUpdate();
    [CompilerGeneratedAttribute]
public void set_DisableModDateUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableCreationDateUpdate();
    [CompilerGeneratedAttribute]
public void set_DisableCreationDateUpdate(bool value);
}
public class DevExpress.Pdf.PdfScreenAnnotation : PdfAnnotation {
    internal static string Type;
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfScreenAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
}
public class DevExpress.Pdf.PdfSeparateHalftone : PdfHalftone {
    internal static int Number;
    private static string defaultDictionaryKey;
    private IDictionary`2<string, PdfHalftone> components;
    private PdfHalftone defaultHalftone;
    public IDictionary`2<string, PdfHalftone> Components { get; }
    public PdfHalftone Default { get; }
    internal PdfSeparateHalftone(PdfReaderDictionary dictionary);
    public IDictionary`2<string, PdfHalftone> get_Components();
    public PdfHalftone get_Default();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsSame(PdfHalftone halftone);
}
public class DevExpress.Pdf.PdfSeparationColorSpace : PdfSpecialColorSpace {
    internal static string TypeName;
    private string name;
    public string Name { get; }
    public int ComponentsCount { get; }
    internal PdfSeparationColorSpace(PdfReaderArray array);
    public string get_Name();
    public virtual int get_ComponentsCount();
    protected virtual bool CheckArraySize(int actualSize);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfSetCacheDeviceCommand : PdfCommand {
    internal static string Name;
    private double charHeight;
    [CompilerGeneratedAttribute]
private double <CharWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <BoundingBox>k__BackingField;
    public double CharWidth { get; }
    public PdfRectangle BoundingBox { get; }
    public PdfSetCacheDeviceCommand(double charWidth, PdfRectangle boundingBox);
    internal PdfSetCacheDeviceCommand(PdfStack operands);
    [CompilerGeneratedAttribute]
public double get_CharWidth();
    [CompilerGeneratedAttribute]
public PdfRectangle get_BoundingBox();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public class DevExpress.Pdf.PdfSetCharacterSpacingCommand : PdfCommand {
    internal static string Name;
    private double characterSpacing;
    public double CharacterSpacing { get; }
    public PdfSetCharacterSpacingCommand(double characterSpacing);
    internal PdfSetCharacterSpacingCommand(PdfStack operands);
    public double get_CharacterSpacing();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetCharWidthCommand : PdfCommand {
    internal static string Name;
    private double charWidth;
    public double CharWidth { get; }
    public PdfSetCharWidthCommand(double charWidth);
    internal PdfSetCharWidthCommand(PdfStack operands);
    public double get_CharWidth();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public abstract class DevExpress.Pdf.PdfSetCMYKColorSpaceCommand : PdfCommand {
    private double c;
    private double m;
    private double y;
    private double k;
    public double C { get; }
    public double M { get; }
    public double Y { get; }
    public double K { get; }
    protected PdfSetCMYKColorSpaceCommand(double c, double m, double y, double k);
    protected PdfSetCMYKColorSpaceCommand(PdfStack operands);
    public double get_C();
    public double get_M();
    public double get_Y();
    public double get_K();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public class DevExpress.Pdf.PdfSetCMYKColorSpaceForNonStrokingOperationsCommand : PdfSetCMYKColorSpaceCommand {
    internal static string Name;
    public PdfSetCMYKColorSpaceForNonStrokingOperationsCommand(double c, double m, double y, double k);
    internal PdfSetCMYKColorSpaceForNonStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetCMYKColorSpaceForStrokingOperationsCommand : PdfSetCMYKColorSpaceCommand {
    internal static string Name;
    public PdfSetCMYKColorSpaceForStrokingOperationsCommand(double c, double m, double y, double k);
    internal PdfSetCMYKColorSpaceForStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public abstract class DevExpress.Pdf.PdfSetColorAdvancedCommand : PdfSetColorCommand {
    private string patternName;
    private PdfPattern pattern;
    public PdfPattern Pattern { get; }
    protected PdfSetColorAdvancedCommand(PdfResources resources, PdfStack operands);
    public PdfPattern get_Pattern();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected abstract virtual void Execute(IPdfCommandInterpreter interpreter, PdfColor color);
}
public class DevExpress.Pdf.PdfSetColorAdvancedForNonStrokingOperationsCommand : PdfSetColorAdvancedCommand {
    internal static string Name;
    internal PdfSetColorAdvancedForNonStrokingOperationsCommand(PdfResources resources, PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected virtual void Execute(IPdfCommandInterpreter interpreter, PdfColor color);
}
public class DevExpress.Pdf.PdfSetColorAdvancedForStrokingOperationsCommand : PdfSetColorAdvancedCommand {
    internal static string Name;
    internal PdfSetColorAdvancedForStrokingOperationsCommand(PdfResources resources, PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected virtual void Execute(IPdfCommandInterpreter interpreter, PdfColor color);
}
public abstract class DevExpress.Pdf.PdfSetColorCommand : PdfCommand {
    private Double[] components;
    public Double[] Components { get; }
    protected PdfColor Color { get; }
    protected PdfSetColorCommand(PdfStack operands);
    public Double[] get_Components();
    protected PdfColor get_Color();
    protected void Parse(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public class DevExpress.Pdf.PdfSetColorForNonStrokingOperationsCommand : PdfSetColorCommand {
    internal static string Name;
    internal PdfSetColorForNonStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetColorForStrokingOperationsCommand : PdfSetColorCommand {
    internal static string Name;
    internal PdfSetColorForStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public abstract class DevExpress.Pdf.PdfSetColorSpaceCommand : PdfCommand {
    private string colorSpaceName;
    private PdfColorSpace colorSpace;
    public PdfColorSpace ColorSpace { get; }
    protected PdfSetColorSpaceCommand(PdfColorSpace colorSpace);
    protected PdfSetColorSpaceCommand(PdfResources resources, PdfStack operands);
    public PdfColorSpace get_ColorSpace();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected abstract virtual void Execute(IPdfCommandInterpreter interpreter, PdfColorSpace colorSpace);
}
public class DevExpress.Pdf.PdfSetColorSpaceForNonStrokingOperationsCommand : PdfSetColorSpaceCommand {
    internal static string Name;
    public PdfSetColorSpaceForNonStrokingOperationsCommand(PdfColorSpace colorSpace);
    internal PdfSetColorSpaceForNonStrokingOperationsCommand(PdfResources resources, PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected virtual void Execute(IPdfCommandInterpreter interpreter, PdfColorSpace colorSpace);
}
public class DevExpress.Pdf.PdfSetColorSpaceForStrokingOperationsCommand : PdfSetColorSpaceCommand {
    internal static string Name;
    public PdfSetColorSpaceForStrokingOperationsCommand(PdfColorSpace colorSpace);
    internal PdfSetColorSpaceForStrokingOperationsCommand(PdfResources resources, PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected virtual void Execute(IPdfCommandInterpreter interpreter, PdfColorSpace colorSpace);
}
public class DevExpress.Pdf.PdfSetFlatnessToleranceCommand : PdfCommand {
    internal static string Name;
    private double flatnessTolerance;
    public double FlatnessTolerance { get; }
    public PdfSetFlatnessToleranceCommand(double flatnessTolerance);
    internal PdfSetFlatnessToleranceCommand(PdfStack operands);
    private static bool ValidateFlatnessTolerance(double flatnessTolerance);
    public double get_FlatnessTolerance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetGraphicsStateParametersCommand : PdfCommand {
    internal static string Name;
    private string parametersName;
    private PdfGraphicsStateParameters parameters;
    public PdfGraphicsStateParameters Parameters { get; }
    internal PdfSetGraphicsStateParametersCommand(PdfResources resources, PdfStack operands);
    public PdfGraphicsStateParameters get_Parameters();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public abstract class DevExpress.Pdf.PdfSetGrayColorSpaceCommand : PdfCommand {
    private double gray;
    public double Gray { get; }
    protected PdfSetGrayColorSpaceCommand(double gray);
    protected PdfSetGrayColorSpaceCommand(PdfStack operands);
    public double get_Gray();
}
public class DevExpress.Pdf.PdfSetGrayColorSpaceForNonStrokingOperationsCommand : PdfSetGrayColorSpaceCommand {
    internal static string Name;
    public PdfSetGrayColorSpaceForNonStrokingOperationsCommand(double gray);
    internal PdfSetGrayColorSpaceForNonStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetGrayColorSpaceForStrokingOperationsCommand : PdfSetGrayColorSpaceCommand {
    internal static string Name;
    public PdfSetGrayColorSpaceForStrokingOperationsCommand(double gray);
    internal PdfSetGrayColorSpaceForStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetLineCapStyleCommand : PdfCommand {
    internal static string Name;
    private static List`1<int> supportedStyles;
    private PdfLineCapStyle lineCapStyle;
    public PdfLineCapStyle LineCapStyle { get; }
    private static PdfSetLineCapStyleCommand();
    public PdfSetLineCapStyleCommand(PdfLineCapStyle lineCapStyle);
    internal PdfSetLineCapStyleCommand(PdfStack operands);
    internal static PdfLineCapStyle ConvertToLineCapStyle(int styleIndex);
    public PdfLineCapStyle get_LineCapStyle();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetLineJoinStyleCommand : PdfCommand {
    internal static string Name;
    private static List`1<int> supportedStyles;
    private PdfLineJoinStyle lineJoinStyle;
    public PdfLineJoinStyle LineJoinStyle { get; }
    private static PdfSetLineJoinStyleCommand();
    public PdfSetLineJoinStyleCommand(PdfLineJoinStyle lineJoinStyle);
    internal PdfSetLineJoinStyleCommand(PdfStack operands);
    internal static PdfLineJoinStyle ConvertToLineJoinStyle(int styleIndex);
    public PdfLineJoinStyle get_LineJoinStyle();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetLineStyleCommand : PdfCommand {
    internal static string Name;
    private PdfLineStyle lineStyle;
    public PdfLineStyle LineStyle { get; }
    public PdfSetLineStyleCommand(PdfLineStyle lineStyle);
    internal PdfSetLineStyleCommand(PdfStack operands);
    public PdfLineStyle get_LineStyle();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetLineWidthCommand : PdfCommand {
    internal static string Name;
    private double lineWidth;
    public double LineWidth { get; }
    public PdfSetLineWidthCommand(double lineWidth);
    internal PdfSetLineWidthCommand(PdfStack operands);
    public double get_LineWidth();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetMiterLimitCommand : PdfCommand {
    internal static string Name;
    private double miterLimit;
    public double MiterLimit { get; }
    public PdfSetMiterLimitCommand(double miterLimit);
    internal PdfSetMiterLimitCommand(PdfStack operands);
    public double get_MiterLimit();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetOcgStateAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfSetOcgStateAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public class DevExpress.Pdf.PdfSetRenderingIntentCommand : PdfCommand {
    internal static string Name;
    private PdfRenderingIntent renderingIntent;
    public PdfRenderingIntent RenderingIntent { get; }
    public PdfSetRenderingIntentCommand(PdfRenderingIntent renderingIntent);
    internal PdfSetRenderingIntentCommand(PdfStack operands);
    public PdfRenderingIntent get_RenderingIntent();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public abstract class DevExpress.Pdf.PdfSetRGBColorSpaceCommand : PdfCommand {
    private double r;
    private double g;
    private double b;
    public double R { get; }
    public double G { get; }
    public double B { get; }
    protected PdfSetRGBColorSpaceCommand(double r, double g, double b);
    protected PdfSetRGBColorSpaceCommand(PdfStack operands);
    public double get_R();
    public double get_G();
    public double get_B();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public class DevExpress.Pdf.PdfSetRGBColorSpaceForNonStrokingOperationsCommand : PdfSetRGBColorSpaceCommand {
    internal static string Name;
    public PdfSetRGBColorSpaceForNonStrokingOperationsCommand(double r, double g, double b);
    internal PdfSetRGBColorSpaceForNonStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetRGBColorSpaceForStrokingOperationsCommand : PdfSetRGBColorSpaceCommand {
    internal static string Name;
    public PdfSetRGBColorSpaceForStrokingOperationsCommand(double r, double g, double b);
    internal PdfSetRGBColorSpaceForStrokingOperationsCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetTextFontCommand : PdfCommand {
    internal static string Name;
    private PdfFont font;
    private double fontSize;
    private string fontName;
    public PdfFont Font { get; }
    public double FontSize { get; }
    internal string FontName { get; }
    internal PdfSetTextFontCommand(PdfResources resources, PdfStack operands);
    public PdfFont get_Font();
    public double get_FontSize();
    internal string get_FontName();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetTextHorizontalScalingCommand : PdfCommand {
    internal static string Name;
    private double horizontalScaling;
    public double HorizontalScaling { get; }
    public PdfSetTextHorizontalScalingCommand(double horizontalScaling);
    internal PdfSetTextHorizontalScalingCommand(PdfStack operands);
    public double get_HorizontalScaling();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetTextLeadingCommand : PdfCommand {
    internal static string Name;
    private double textLeading;
    public double TextLeading { get; }
    public PdfSetTextLeadingCommand(double textLeading);
    internal PdfSetTextLeadingCommand(PdfStack operands);
    public double get_TextLeading();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetTextMatrixCommand : PdfCommand {
    internal static string Name;
    private PdfTransformationMatrix textMatrix;
    public PdfTransformationMatrix TextMatrix { get; }
    public PdfSetTextMatrixCommand(PdfTransformationMatrix textMatrix);
    public PdfTransformationMatrix get_TextMatrix();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetTextRenderingModeCommand : PdfCommand {
    internal static string Name;
    private static List`1<int> supportedModes;
    private PdfTextRenderingMode textRenderingMode;
    public PdfTextRenderingMode TextRenderingMode { get; }
    private static PdfSetTextRenderingModeCommand();
    public PdfSetTextRenderingModeCommand(PdfTextRenderingMode textRenderingMode);
    internal PdfSetTextRenderingModeCommand(PdfStack operands);
    public PdfTextRenderingMode get_TextRenderingMode();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSetTextRiseCommand : PdfCommand {
    internal static string Name;
    private double textRise;
    public double TextRise { get; }
    public PdfSetTextRiseCommand(double textRise);
    internal PdfSetTextRiseCommand(PdfStack operands);
    public double get_TextRise();
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public class DevExpress.Pdf.PdfSetWordSpacingCommand : PdfCommand {
    internal static string Name;
    private double wordSpacing;
    public double WordSpacing { get; }
    public PdfSetWordSpacingCommand(double wordSpacing);
    internal PdfSetWordSpacingCommand(PdfStack operands);
    public double get_WordSpacing();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public abstract class DevExpress.Pdf.PdfShading : PdfObject {
    private static string shadingTypeDictionaryKey;
    private static string colorSpaceDictionaryKey;
    private static string backgroundDictionaryKey;
    private static string boundingBoxDictionaryKey;
    private static string antiAliasDictionaryKey;
    private static string functionDictionaryKey;
    private PdfColorSpace colorSpace;
    private PdfColor background;
    private PdfRectangle boundingBox;
    private bool antiAlias;
    private PdfObjectList`1<PdfCustomFunction> function;
    public PdfColorSpace ColorSpace { get; }
    public PdfColor Background { get; }
    public PdfRectangle BoundingBox { get; }
    public bool AntiAlias { get; }
    public IList`1<PdfCustomFunction> Function { get; }
    protected bool IsFunctionRequired { get; }
    protected int FunctionDomainDimension { get; }
    protected int ShadingType { get; }
    protected PdfShading(PdfReaderDictionary dictionary);
    protected PdfShading(PdfObjectList`1<PdfCustomFunction> blendFunctions);
    private static void CheckStreamPresence(PdfReaderStream stream);
    private static void CheckStreamAbsence(PdfReaderStream stream);
    internal static PdfShading Parse(object value);
    public PdfColorSpace get_ColorSpace();
    public PdfColor get_Background();
    public PdfRectangle get_BoundingBox();
    public bool get_AntiAlias();
    public IList`1<PdfCustomFunction> get_Function();
    protected virtual bool get_IsFunctionRequired();
    protected virtual int get_FunctionDomainDimension();
    protected abstract virtual int get_ShadingType();
    internal PdfColor TransformFunction(Double[] arguments);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfShadingPattern : PdfPattern {
    private static string shadingDictionaryKey;
    private static string graphicsStateDictionaryKey;
    private PdfShading shading;
    private PdfGraphicsStateParameters graphicsState;
    public PdfShading Shading { get; }
    public PdfGraphicsStateParameters GraphicsState { get; }
    protected int PatternType { get; }
    internal PdfShadingPattern(PdfReaderDictionary dictionary);
    internal PdfShadingPattern(PdfShading shading, PdfTransformationMatrix matrix);
    public PdfShading get_Shading();
    public PdfGraphicsStateParameters get_GraphicsState();
    protected virtual int get_PatternType();
    protected virtual PdfWriterDictionary GetDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfShapeAnnotation : PdfMarkupAnnotation {
    private static string interiorColorDictionaryKey;
    private PdfAnnotationBorderEffect borderEffect;
    private PdfPadding padding;
    private PdfAnnotationBorderStyle borderStyle;
    private PdfColor interiorColor;
    public PdfAnnotationBorderStyle BorderStyle { get; public set; }
    public PdfColor InteriorColor { get; public set; }
    public PdfAnnotationBorderEffect BorderEffect { get; public set; }
    public PdfPadding Padding { get; }
    protected PdfShapeAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    protected PdfShapeAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public PdfAnnotationBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfAnnotationBorderStyle value);
    public PdfColor get_InteriorColor();
    public void set_InteriorColor(PdfColor value);
    public PdfAnnotationBorderEffect get_BorderEffect();
    public void set_BorderEffect(PdfAnnotationBorderEffect value);
    public PdfPadding get_Padding();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public abstract class DevExpress.Pdf.PdfShapeAnnotationFacade : PdfMarkupAnnotationFacade {
    private IPdfShapeAnnotationState shapeAnnotationState;
    public double BorderWidth { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public double BorderEffectIntensity { get; public set; }
    public PdfAnnotationBorderEffectStyle BorderEffectStyle { get; public set; }
    public PdfRGBColor InteriorColor { get; public set; }
    protected PdfShapeAnnotationFacade(IPdfShapeAnnotationState annotation);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public PdfBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfBorderStyle value);
    public double get_BorderEffectIntensity();
    public void set_BorderEffectIntensity(double value);
    public PdfAnnotationBorderEffectStyle get_BorderEffectStyle();
    public void set_BorderEffectStyle(PdfAnnotationBorderEffectStyle value);
    public PdfRGBColor get_InteriorColor();
    public void set_InteriorColor(PdfRGBColor value);
}
public class DevExpress.Pdf.PdfShowTextCommand : PdfCommand {
    internal static string Name;
    private Byte[] text;
    public Byte[] Text { get; protected set; }
    public PdfShowTextCommand(Byte[] text);
    internal PdfShowTextCommand(PdfStack operands);
    public Byte[] get_Text();
    protected void set_Text(Byte[] value);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfShowTextOnNextLineCommand : PdfShowTextCommand {
    internal static string Name;
    public PdfShowTextOnNextLineCommand(Byte[] text);
    internal PdfShowTextOnNextLineCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfShowTextOnNextLineWithSpacingCommand : PdfShowTextCommand {
    internal static string Name;
    private double wordSpacing;
    private double characterSpacing;
    public double WordSpacing { get; }
    public double CharacterSpacing { get; }
    public PdfShowTextOnNextLineWithSpacingCommand(Byte[] text, double wordSpacing, double characterSpacing);
    internal PdfShowTextOnNextLineWithSpacingCommand(PdfStack operands);
    public double get_WordSpacing();
    public double get_CharacterSpacing();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfShowTextWithGlyphPositioningCommand : PdfShowTextCommand {
    internal static string Name;
    private Double[] glyphOffsets;
    public Double[] GlyphOffsets { get; }
    public PdfShowTextWithGlyphPositioningCommand(Byte[] text, Double[] glyphOffsets);
    internal PdfShowTextWithGlyphPositioningCommand(PdfStack operands);
    public Double[] get_GlyphOffsets();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSignature : PdfObject {
    internal static string ContentsDictionaryKey;
    private static string filterDictionaryKey;
    private static string subFilterDictionaryKey;
    private static string byteRangeDictionaryKey;
    private static string nameDictionaryKey;
    private static string signingTimeDictionaryKey;
    private static string locationDictionaryKey;
    private static string reasonDictionaryKey;
    private static string contactInfoDictionaryKey;
    private IExternalSigner signer;
    private string filter;
    private string subFilter;
    private PdfSignatureReference[] reference;
    private Nullable`1<int> alteredPagesCount;
    private Nullable`1<int> alteredInteractiveFormFieldsCount;
    private Nullable`1<int> filledInInteractiveFormFieldsCount;
    private Nullable`1<int> handlerVersion;
    private bool shouldUseReference;
    private PdfSignatureBuildProperties buildProperties;
    private PdfPlaceholder contentsPlaceHolder;
    private PdfPlaceholder byteRangePlaceHolder;
    private Byte[] contents;
    private PdfSignatureByteRange[] byteRange;
    private string name;
    private Nullable`1<DateTimeOffset> signingTime;
    private string location;
    private string reason;
    private string contactInfo;
    private PdfSignatureAppearanceBase appearance;
    private PdfAnnotationFlags annotationFlags;
    public string Name { get; public set; }
    public Nullable`1<DateTimeOffset> SigningTime { get; }
    public string Location { get; public set; }
    public string Reason { get; public set; }
    public string ContactInfo { get; public set; }
    public PdfAnnotationFlags AnnotationFlags { get; public set; }
    internal string Filter { get; }
    internal string SubFilter { get; }
    internal Byte[] Contents { get; }
    internal PdfSignatureByteRange[] ByteRange { get; }
    internal PdfSignatureReference[] Reference { get; }
    internal Nullable`1<int> AlteredPagesCount { get; }
    internal Nullable`1<int> AlteredInteractiveFormFieldsCount { get; }
    internal Nullable`1<int> FilledInInteractiveFormFieldsCount { get; }
    internal Nullable`1<int> HandlerVersion { get; }
    internal bool ShouldUseReference { get; }
    internal PdfSignatureBuildProperties BuildProperties { get; }
    internal PdfSignatureAppearanceBase Appearance { get; internal set; }
    public PdfSignature(IExternalSigner signer);
    public PdfSignature(X509Certificate2 certificate);
    public PdfSignature(X509Certificate2 certificate, Byte[] imageData, int pageNumber, PdfRectangle signatureBounds);
    public PdfSignature(X509Certificate2 certificate, Stream imageData, int pageNumber, PdfRectangle signatureBounds);
    public PdfSignature(X509Certificate2 certificate, Byte[] imageData, int pageNumber, PdfOrientedRectangle signatureBounds);
    public PdfSignature(X509Certificate2 certificate, Stream imageData, int pageNumber, PdfOrientedRectangle signatureBounds);
    public PdfSignature(IExternalSigner signer, Byte[] imageData, int pageNumber, PdfRectangle signatureBounds);
    public PdfSignature(IExternalSigner signer, Stream imageData, int pageNumber, PdfRectangle signatureBounds);
    public PdfSignature(IExternalSigner signer, Byte[] imageData, int pageNumber, PdfOrientedRectangle signatureBounds);
    public PdfSignature(IExternalSigner signer, Stream imageData, int pageNumber, PdfOrientedRectangle signatureBounds);
    internal PdfSignature(PdfReaderDictionary dictionary);
    private static void ValidateParameters(object imageData, int pageNumber, object signatureBounds);
    public string get_Name();
    public void set_Name(string value);
    public Nullable`1<DateTimeOffset> get_SigningTime();
    public string get_Location();
    public void set_Location(string value);
    public string get_Reason();
    public void set_Reason(string value);
    public string get_ContactInfo();
    public void set_ContactInfo(string value);
    public PdfAnnotationFlags get_AnnotationFlags();
    public void set_AnnotationFlags(PdfAnnotationFlags value);
    internal string get_Filter();
    internal string get_SubFilter();
    internal Byte[] get_Contents();
    internal PdfSignatureByteRange[] get_ByteRange();
    internal PdfSignatureReference[] get_Reference();
    internal Nullable`1<int> get_AlteredPagesCount();
    internal Nullable`1<int> get_AlteredInteractiveFormFieldsCount();
    internal Nullable`1<int> get_FilledInInteractiveFormFieldsCount();
    internal Nullable`1<int> get_HandlerVersion();
    internal bool get_ShouldUseReference();
    internal PdfSignatureBuildProperties get_BuildProperties();
    internal PdfSignatureAppearanceBase get_Appearance();
    internal void set_Appearance(PdfSignatureAppearanceBase value);
    internal void PatchStream(PdfDocumentStream stream);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfSignatureAppearance : object {
    [CompilerGeneratedAttribute]
private bool <ShowName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowDistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowReason>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeftTextDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfSignatureAppearanceType <AppearanceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfSignatureFontSettings <SignatureNameFont>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfSignatureFontSettings <SignatureDetailsFont>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfImageDataWrapper <BackgroundImage>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfImageDataWrapper <Image>k__BackingField;
    [DefaultValueAttribute("True")]
public bool ShowName { get; public set; }
    [DefaultValueAttribute("False")]
public bool ShowDistinguishedName { get; public set; }
    [DefaultValueAttribute("False")]
public bool ShowReason { get; public set; }
    [DefaultValueAttribute("False")]
public bool ShowLocation { get; public set; }
    [DefaultValueAttribute("True")]
public bool ShowDate { get; public set; }
    [DefaultValueAttribute("")]
public string ApplicationVersion { get; public set; }
    [DefaultValueAttribute("True")]
public bool ShowLabels { get; public set; }
    [DefaultValueAttribute("False")]
public bool RightToLeftTextDirection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PdfSignatureAppearanceType AppearanceType { get; public set; }
    [DefaultValueAttribute("yyyy'.'MM'.'dd HH':'mm':'ss zzz")]
public string DateTimeFormat { get; public set; }
    public PdfSignatureFontSettings SignatureNameFont { get; public set; }
    public PdfSignatureFontSettings SignatureDetailsFont { get; public set; }
    internal PdfImageDataWrapper BackgroundImage { get; private set; }
    internal PdfImageDataWrapper Image { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_ShowName();
    [CompilerGeneratedAttribute]
public void set_ShowName(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowDistinguishedName();
    [CompilerGeneratedAttribute]
public void set_ShowDistinguishedName(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowReason();
    [CompilerGeneratedAttribute]
public void set_ShowReason(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLocation();
    [CompilerGeneratedAttribute]
public void set_ShowLocation(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowDate();
    [CompilerGeneratedAttribute]
public void set_ShowDate(bool value);
    [CompilerGeneratedAttribute]
public string get_ApplicationVersion();
    [CompilerGeneratedAttribute]
public void set_ApplicationVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowLabels();
    [CompilerGeneratedAttribute]
public void set_ShowLabels(bool value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeftTextDirection();
    [CompilerGeneratedAttribute]
public void set_RightToLeftTextDirection(bool value);
    [CompilerGeneratedAttribute]
public PdfSignatureAppearanceType get_AppearanceType();
    [CompilerGeneratedAttribute]
public void set_AppearanceType(PdfSignatureAppearanceType value);
    [CompilerGeneratedAttribute]
public string get_DateTimeFormat();
    [CompilerGeneratedAttribute]
public void set_DateTimeFormat(string value);
    [CompilerGeneratedAttribute]
public PdfSignatureFontSettings get_SignatureNameFont();
    [CompilerGeneratedAttribute]
public void set_SignatureNameFont(PdfSignatureFontSettings value);
    [CompilerGeneratedAttribute]
public PdfSignatureFontSettings get_SignatureDetailsFont();
    [CompilerGeneratedAttribute]
public void set_SignatureDetailsFont(PdfSignatureFontSettings value);
    [CompilerGeneratedAttribute]
internal PdfImageDataWrapper get_BackgroundImage();
    [CompilerGeneratedAttribute]
private void set_BackgroundImage(PdfImageDataWrapper value);
    [CompilerGeneratedAttribute]
internal PdfImageDataWrapper get_Image();
    [CompilerGeneratedAttribute]
private void set_Image(PdfImageDataWrapper value);
    public void SetBackgroundImageData(Byte[] imageData);
    public void SetBackgroundImageData(Stream imageData);
    public void SetBackgroundImageData(string filePath);
    public void SetImageData(Byte[] imageData);
    public void SetImageData(Stream imageData);
    public void SetImageData(string filePath);
}
public enum DevExpress.Pdf.PdfSignatureAppearanceType : Enum {
    public int value__;
    public static PdfSignatureAppearanceType Name;
    public static PdfSignatureAppearanceType Image;
    public static PdfSignatureAppearanceType None;
}
public class DevExpress.Pdf.PdfSignatureBuilder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContactInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfCertificationLevel <CertificationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SigningTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalSigner <Signer>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfSignatureFieldDescription <Description>k__BackingField;
    public string Name { get; public set; }
    public string Location { get; public set; }
    public string Reason { get; public set; }
    public string ContactInfo { get; public set; }
    public PdfCertificationLevel CertificationLevel { get; public set; }
    public string ApplicationName { get; public set; }
    public Nullable`1<DateTimeOffset> SigningTime { get; public set; }
    internal IExternalSigner Signer { get; internal set; }
    internal PdfSignatureFieldDescription Description { get; }
    protected PdfSignatureBuilder(string formFieldName);
    protected PdfSignatureBuilder(PdfSignatureFieldInfo info);
    public PdfSignatureBuilder(IExternalSigner signer);
    public PdfSignatureBuilder(IExternalSigner signer, string formFieldName);
    public PdfSignatureBuilder(IExternalSigner signer, PdfSignatureFieldInfo info);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
    [CompilerGeneratedAttribute]
public string get_ContactInfo();
    [CompilerGeneratedAttribute]
public void set_ContactInfo(string value);
    [CompilerGeneratedAttribute]
public PdfCertificationLevel get_CertificationLevel();
    [CompilerGeneratedAttribute]
public void set_CertificationLevel(PdfCertificationLevel value);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SigningTime();
    [CompilerGeneratedAttribute]
public void set_SigningTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
internal IExternalSigner get_Signer();
    [CompilerGeneratedAttribute]
internal void set_Signer(IExternalSigner value);
    [CompilerGeneratedAttribute]
internal PdfSignatureFieldDescription get_Description();
    public void SetImageData(Byte[] imageData);
    public void SetImageData(Stream imageData);
    public void SetImageData(string fileName);
    public void SetSignatureAppearance(PdfSignatureAppearance appearance);
}
public class DevExpress.Pdf.PdfSignatureFieldInfo : object {
    [CompilerGeneratedAttribute]
private PdfAnnotationFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRectangle <SignatureBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfAcroFormFieldRotation <RotationAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <PageNumbers>k__BackingField;
    public PdfAnnotationFlags Flags { get; public set; }
    public string Name { get; public set; }
    public PdfRectangle SignatureBounds { get; public set; }
    public PdfAcroFormFieldRotation RotationAngle { get; public set; }
    internal IList`1<int> PageNumbers { get; }
    public PdfSignatureFieldInfo(int pageNumber);
    public PdfSignatureFieldInfo(IList`1<int> pageNumbers);
    [CompilerGeneratedAttribute]
public PdfAnnotationFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(PdfAnnotationFlags value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public PdfRectangle get_SignatureBounds();
    [CompilerGeneratedAttribute]
public void set_SignatureBounds(PdfRectangle value);
    [CompilerGeneratedAttribute]
public PdfAcroFormFieldRotation get_RotationAngle();
    [CompilerGeneratedAttribute]
public void set_RotationAngle(PdfAcroFormFieldRotation value);
    [CompilerGeneratedAttribute]
internal IList`1<int> get_PageNumbers();
}
[FlagsAttribute]
public enum DevExpress.Pdf.PdfSignatureFlags : Enum {
    public int value__;
    public static PdfSignatureFlags None;
    public static PdfSignatureFlags SignaturesExist;
    public static PdfSignatureFlags AppendOnly;
}
public class DevExpress.Pdf.PdfSignatureFontSettings : object {
    [CompilerGeneratedAttribute]
private static PdfSignatureFontSettings <DefaultSansSerif>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfRGBColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Size>k__BackingField;
    internal static PdfSignatureFontSettings DefaultSansSerif { get; }
    public string FamilyName { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public PdfRGBColor Color { get; public set; }
    public Nullable`1<float> Size { get; public set; }
    internal PdfFontStyle FontStyle { get; }
    private static PdfSignatureFontSettings();
    public PdfSignatureFontSettings(string familyName);
    [CompilerGeneratedAttribute]
internal static PdfSignatureFontSettings get_DefaultSansSerif();
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public PdfRGBColor get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(PdfRGBColor value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<float> value);
    internal PdfFontStyle get_FontStyle();
    public PdfSignatureFontSettings Clone();
}
public class DevExpress.Pdf.PdfSignatureFormField : PdfInteractiveFormField {
    internal static string FormFieldType;
    private static string lockDictionaryKey;
    private PdfSignature signature;
    private PdfSignatureFormFieldLock formFieldLock;
    private bool shouldWriteSignature;
    public PdfFormFieldType Type { get; }
    public PdfSignature Signature { get; }
    public PdfSignatureFormFieldLock Lock { get; }
    protected string FieldType { get; }
    internal PdfSignatureFormField(PdfInteractiveForm form, PdfInteractiveFormField parent, PdfReaderDictionary dictionary, PdfObjectReference valueReference);
    internal PdfSignatureFormField(IPdfInteractiveFormFieldProperties properties, PdfSignature signature);
    internal PdfSignatureFormField(IPdfInteractiveFormFieldProperties properties);
    public static string CreateSignatureFormFieldName(PdfInteractiveForm form);
    public virtual PdfFormFieldType get_Type();
    public PdfSignature get_Signature();
    public PdfSignatureFormFieldLock get_Lock();
    protected virtual string get_FieldType();
    protected internal virtual void FillDictionary(PdfWriterDictionary dictionary, IPdfWritingContext writingContext);
}
public class DevExpress.Pdf.PdfSignatureFormFieldFacade : PdfFormFieldFacade`2<PdfSignatureWidgetFacade, PdfSignatureFormField> {
    public PdfFormFieldType Type { get; }
    internal PdfSignatureFormFieldFacade(PdfDocumentStateBase documentState, PdfSignatureFormField field, PdfAcroFormFacade acroForm);
    public virtual PdfFormFieldType get_Type();
    protected virtual PdfSignatureWidgetFacade CreateWidget(PdfDocumentStateBase documentState, PdfSignatureFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfSignatureFormFieldLock : PdfObject {
    private static string actionDictionaryKey;
    private static string fieldsDictionaryKey;
    private PdfSignatureFormFieldLockRange range;
    private IList`1<string> fieldNames;
    public PdfSignatureFormFieldLockRange Range { get; }
    public IList`1<string> FieldNames { get; }
    internal PdfSignatureFormFieldLock(PdfReaderDictionary dictionary);
    public PdfSignatureFormFieldLockRange get_Range();
    public IList`1<string> get_FieldNames();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public enum DevExpress.Pdf.PdfSignatureFormFieldLockRange : Enum {
    public int value__;
    public static PdfSignatureFormFieldLockRange All;
    public static PdfSignatureFormFieldLockRange Include;
    public static PdfSignatureFormFieldLockRange Exclude;
}
public class DevExpress.Pdf.PdfSignatureInfo : object {
    private static string filterDictionaryKey;
    private static string subFilterDictionaryKey;
    private static string nameDictionaryKey;
    private static string signingTimeDictionaryKey;
    private static string locationDictionaryKey;
    private static string reasonDictionaryKey;
    private static string contactInfoDictionaryKey;
    private Lazy`1<Byte[]> contents;
    private string signerName;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfCertificationLevel <CertificationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <SigningTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContactInfo>k__BackingField;
    public string FieldName { get; }
    public string Filter { get; }
    public string SubFilter { get; }
    public PdfCertificationLevel CertificationLevel { get; }
    public string SignerName { get; }
    public Nullable`1<DateTimeOffset> SigningTime { get; }
    public string Location { get; }
    public string Reason { get; }
    public string ContactInfo { get; }
    public Byte[] Contents { get; }
    internal PdfSignatureInfo(PdfDictionaryPrimitive signatureDictionary, string fieldName);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public string get_SubFilter();
    [CompilerGeneratedAttribute]
public PdfCertificationLevel get_CertificationLevel();
    public string get_SignerName();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_SigningTime();
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public string get_ContactInfo();
    public Byte[] get_Contents();
    private string GetSubjectDn();
    private PdfCertificationLevel GetCertificationLevel(PdfDictionaryPrimitive signatureDictionary);
}
public enum DevExpress.Pdf.PdfSignatureProfile : Enum {
    public int value__;
    public static PdfSignatureProfile Pdf;
    public static PdfSignatureProfile PAdES_BES;
}
public enum DevExpress.Pdf.PdfSignatureType : Enum {
    public int value__;
    public static PdfSignatureType Pkcs7;
    public static PdfSignatureType PAdES;
    public static PdfSignatureType Timestamp;
}
public class DevExpress.Pdf.PdfSignatureWidgetFacade : PdfWidgetFacade {
    internal PdfSignatureWidgetFacade(PdfDocumentStateBase documentState, PdfInteractiveFormField formField, PdfWidgetAnnotationState state);
}
public abstract class DevExpress.Pdf.PdfSimpleFont : PdfFont {
    private static string firstCharDictionaryKey;
    private static string lastCharDictionaryKey;
    private static string widthsDictionaryKey;
    internal static string CourierNewFontName;
    internal static string HelveticaFontName;
    internal static string HelveticaBoldFontName;
    internal static string ArialFontName;
    internal static string TimesNewRomanFontName;
    protected static string ArialBoldFontName;
    protected static string TimesNewRomanBoldFontName;
    private PdfSimpleFontEncoding encoding;
    private Nullable`1<int> firstChar;
    private Nullable`1<int> lastChar;
    private Double[] widths;
    private PdfFontDescriptor predefinedFontDescriptor;
    private Double[] actualWidths;
    public PdfFontDescriptor FontDescriptor { get; }
    public PdfSimpleFontEncoding Encoding { get; }
    public int FirstChar { get; }
    public int LastChar { get; }
    public Double[] Widths { get; }
    protected internal IEnumerable`1<double> GlyphWidths { get; }
    protected internal PdfEncoding ActualEncoding { get; }
    protected PdfSimpleFont(int objectNumber, string baseFont, PdfSimpleFontEncoding encoding, PdfFontDescriptor fontDescriptor, int firstChar, Double[] widths);
    protected PdfSimpleFont(int objectNumber, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfSimpleFontEncoding encoding, Nullable`1<int> firstChar, Nullable`1<int> lastChar, Double[] widths);
    internal static PdfSimpleFont Create(string subtype, string baseFont, PdfReaderDictionary dictionary);
    public virtual PdfFontDescriptor get_FontDescriptor();
    public PdfSimpleFontEncoding get_Encoding();
    public int get_FirstChar();
    public int get_LastChar();
    public Double[] get_Widths();
    protected internal virtual IEnumerable`1<double> get_GlyphWidths();
    protected internal virtual PdfEncoding get_ActualEncoding();
    protected virtual Nullable`1<double> GetCharacterWidth(int charCode);
    protected virtual string GetCharacterUnicodeFallback(Byte[] character);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfSimpleFontEncoding : PdfEncoding {
    private static string baseEncodingDictionaryKey;
    private static string differencesDictionaryKey;
    private static string macRomanEncodingName;
    private static string winAnsiEncodingName;
    internal static Dictionary`2<string, byte> MacReversedEncoding;
    internal static Dictionary`2<byte, string> MacRomanEncoding;
    private static Dictionary`2<byte, string> winAnsiEncoding;
    private static Dictionary`2<byte, string> symbolEncoding;
    private static Dictionary`2<byte, string> zapfDingbatsEncoding;
    private PdfBaseEncoding baseEncoding;
    private IDictionary`2<int, string> differences;
    private IDictionary`2<byte, string> baseEncodingDictionary;
    public PdfBaseEncoding BaseEncoding { get; }
    public IDictionary`2<int, string> Differences { get; }
    internal bool IsEmpty { get; }
    protected internal bool ShouldUseEmbeddedFontEncoding { get; }
    internal PdfSimpleFontEncoding(string baseFont, string encodingName, IDictionary`2<int, string> differences);
    private static PdfSimpleFontEncoding();
    internal static PdfSimpleFontEncoding CreateWinAnsiEncoding(string baseFont);
    internal static PdfSimpleFontEncoding Create(string baseFont, object value);
    public PdfBaseEncoding get_BaseEncoding();
    public IDictionary`2<int, string> get_Differences();
    internal bool get_IsEmpty();
    protected internal virtual bool get_ShouldUseEmbeddedFontEncoding();
    internal string GetGlyphName(byte code);
    protected internal virtual PdfStringCommandData GetStringData(Byte[] bytes, Double[] glyphOffsets);
    protected internal virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal virtual PdfPrimitive Write(PdfObjectStorage collection);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.PdfSoftMask : PdfObject {
    internal static string SoftMaskTypeDictionaryKey;
    internal static string DictionaryType;
    internal static PdfSoftMask Create(PdfDocumentCatalog catalog, object value);
    protected internal abstract virtual bool IsSame(PdfSoftMask softMask);
    protected internal abstract virtual object Write(IPdfWrittenObjectsCollection objects);
    protected internal abstract virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfSound : PdfObject {
    private static string samplingRateKey;
    private static string soundChannelsKey;
    private static string bitsPerSampleKey;
    private static string encodingKey;
    [CompilerGeneratedAttribute]
private double <SamplingRate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SoundChannels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfSoundEncoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public double SamplingRate { get; public set; }
    public int SoundChannels { get; public set; }
    public int BitsPerSample { get; public set; }
    public PdfSoundEncoding Encoding { get; public set; }
    public Byte[] Data { get; public set; }
    internal PdfSound(PdfReaderStream stream);
    [CompilerGeneratedAttribute]
public double get_SamplingRate();
    [CompilerGeneratedAttribute]
public void set_SamplingRate(double value);
    [CompilerGeneratedAttribute]
public int get_SoundChannels();
    [CompilerGeneratedAttribute]
public void set_SoundChannels(int value);
    [CompilerGeneratedAttribute]
public int get_BitsPerSample();
    [CompilerGeneratedAttribute]
public void set_BitsPerSample(int value);
    [CompilerGeneratedAttribute]
public PdfSoundEncoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(PdfSoundEncoding value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfSoundAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfSoundAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public class DevExpress.Pdf.PdfSoundAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    private static string soundKey;
    private static string iconNameDictionaryKey;
    private static string defaultIconName;
    private string iconName;
    [CompilerGeneratedAttribute]
private PdfSound <Sound>k__BackingField;
    public PdfFilterAnnotationType FilterType { get; }
    public string IconName { get; internal set; }
    public PdfSound Sound { get; internal set; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfSoundAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    internal PdfSoundAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public virtual PdfFilterAnnotationType get_FilterType();
    public string get_IconName();
    internal void set_IconName(string value);
    [CompilerGeneratedAttribute]
public PdfSound get_Sound();
    [CompilerGeneratedAttribute]
internal void set_Sound(PdfSound value);
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfSoundAnnotationFacade : PdfMarkupAnnotationFacade {
    private PdfSoundAnnotationState annotationState;
    public string IconName { get; public set; }
    public PdfSound Sound { get; public set; }
    internal PdfSoundAnnotationFacade(PdfSoundAnnotationState annotation);
    public string get_IconName();
    public void set_IconName(string value);
    public PdfSound get_Sound();
    public void set_Sound(PdfSound value);
}
public static class DevExpress.Pdf.PdfSoundAnnotationIconName : object {
    public static string Speaker;
    public static string Mic;
    public static string Headphone;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfSoundEncoding : Enum {
    public int value__;
    [PdfFieldNameAttribute("open")]
public static PdfSoundEncoding Raw;
    [PdfFieldNameAttribute("Signed")]
public static PdfSoundEncoding Signed;
    [PdfFieldNameAttribute("muLaw")]
public static PdfSoundEncoding MuLaw;
    [PdfFieldNameAttribute("ALaw")]
public static PdfSoundEncoding ALaw;
}
public class DevExpress.Pdf.PdfSourceInformation : PdfObject {
    private static string urlKey;
    private static string timeStampKey;
    private static string expirationStampKey;
    private static string submissionTypeKey;
    private string url;
    private Nullable`1<DateTimeOffset> timeStamp;
    private Nullable`1<DateTimeOffset> expirationStamp;
    private PdfFormSubmissionType formSubmissionType;
    public string Url { get; }
    public Nullable`1<DateTimeOffset> TimeStamp { get; }
    public Nullable`1<DateTimeOffset> ExpirationStamp { get; }
    public PdfFormSubmissionType FormSubmissionType { get; }
    internal PdfSourceInformation(PdfReaderDictionary dictionary);
    public string get_Url();
    public Nullable`1<DateTimeOffset> get_TimeStamp();
    public Nullable`1<DateTimeOffset> get_ExpirationStamp();
    public PdfFormSubmissionType get_FormSubmissionType();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public abstract class DevExpress.Pdf.PdfSpecialColorSpace : PdfCustomColorSpace {
    private PdfColorSpace alternateSpace;
    private PdfCustomFunction tintTransform;
    public PdfColorSpace AlternateSpace { get; }
    public PdfCustomFunction TintTransform { get; }
    protected PdfSpecialColorSpace(PdfReaderArray array);
    public PdfColorSpace get_AlternateSpace();
    public PdfCustomFunction get_TintTransform();
    protected internal virtual PdfColor Transform(PdfColor color);
    protected internal virtual PdfScanlineTransformationResult Transform(IPdfImageScanlineSource data, int width);
    protected abstract virtual bool CheckArraySize(int actualSize);
}
public abstract class DevExpress.Pdf.PdfSpiderSet : PdfObject {
    private static string dictionaryName;
    private static string idKey;
    private static string contentTypeKey;
    private static string timeStampKey;
    private static string sourceInformationKey;
    private static string pagesKey;
    private Byte[] id;
    private List`1<PdfPage> pageSet;
    private List`1<PdfSourceInformation> sourceInformation;
    private string contentType;
    private Nullable`1<DateTimeOffset> timeStamp;
    public Byte[] ID { get; }
    public IEnumerable`1<PdfPage> PageSet { get; }
    public IEnumerable`1<PdfSourceInformation> SourceInformation { get; }
    public string ContentType { get; }
    public Nullable`1<DateTimeOffset> TimeStamp { get; }
    protected string SubType { get; }
    protected PdfSpiderSet(PdfReaderDictionary dictionary);
    internal static PdfSpiderSet Create(PdfDocumentCatalog catalog, object value);
    public Byte[] get_ID();
    public IEnumerable`1<PdfPage> get_PageSet();
    public IEnumerable`1<PdfSourceInformation> get_SourceInformation();
    public string get_ContentType();
    public Nullable`1<DateTimeOffset> get_TimeStamp();
    protected abstract virtual string get_SubType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfSquareAnnotation : PdfShapeAnnotation {
    internal static string Type;
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfSquareAnnotation(PdfPage page, IPdfMarkupAnnotationBuilder builder);
    internal PdfSquareAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfSquareAnnotationFacade : PdfShapeAnnotationFacade {
    internal PdfSquareAnnotationFacade(PdfSquareAnnotationState annotation);
}
public class DevExpress.Pdf.PdfStandardHalftone : PdfHalftone {
    internal static int Number;
    private static string frequencyDictionaryKey;
    private static string angleDictionaryKey;
    private static string spotFunctionDictionaryKey;
    private static string accurateScreensDictionaryKey;
    private static string transferFunctionDictionaryKey;
    private double frequency;
    private double angle;
    private PdfFunction spotFunction;
    private bool accurateScreens;
    private PdfFunction transferFunction;
    public double Frequency { get; }
    public double Angle { get; }
    public PdfFunction SpotFunction { get; }
    public bool AccurateScreens { get; }
    public PdfFunction TransferFunction { get; }
    internal PdfStandardHalftone(PdfReaderDictionary dictionary);
    public double get_Frequency();
    public double get_Angle();
    public PdfFunction get_SpotFunction();
    public bool get_AccurateScreens();
    public PdfFunction get_TransferFunction();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual bool IsSame(PdfHalftone halftone);
}
public class DevExpress.Pdf.PdfStartTextLineCommand : PdfCommand {
    internal static string Name;
    private static PdfStartTextLineCommand instance;
    internal static PdfStartTextLineCommand Instance { get; }
    private static PdfStartTextLineCommand();
    internal static PdfStartTextLineCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfStartTextLineWithOffsetsAndLeadingCommand : PdfStartTextLineWithOffsetsCommand {
    internal static string Name;
    public PdfStartTextLineWithOffsetsAndLeadingCommand(double xOffset, double yOffset);
    internal PdfStartTextLineWithOffsetsAndLeadingCommand(PdfStack operands);
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfStartTextLineWithOffsetsCommand : PdfCommand {
    internal static string Name;
    private double xOffset;
    private double yOffset;
    public double XOffset { get; }
    public double YOffset { get; }
    public PdfStartTextLineWithOffsetsCommand(double xOffset, double yOffset);
    internal PdfStartTextLineWithOffsetsCommand(PdfStack operands);
    public double get_XOffset();
    public double get_YOffset();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfStitchingFunction : PdfCustomFunction {
    internal static int Number;
    private static string functionsDictionaryKey;
    private static string boundsDictionaryKey;
    private static string encodeDictionaryKey;
    private PdfObjectList`1<PdfCustomFunction> functions;
    private IList`1<double> bounds;
    private IList`1<PdfRange> encode;
    protected int FunctionType { get; }
    protected bool ShouldCheckEmptyRange { get; }
    public IList`1<PdfCustomFunction> Functions { get; }
    public IList`1<double> Bounds { get; }
    public IList`1<PdfRange> Encode { get; }
    protected internal int RangeSize { get; }
    internal PdfStitchingFunction(PdfReaderDictionary dictionary);
    internal PdfStitchingFunction(IList`1<double> bounds, IList`1<PdfRange> encode, PdfObjectList`1<PdfCustomFunction> functions, IList`1<PdfRange> domain, IList`1<PdfRange> range);
    protected virtual int get_FunctionType();
    protected virtual bool get_ShouldCheckEmptyRange();
    public IList`1<PdfCustomFunction> get_Functions();
    public IList`1<double> get_Bounds();
    public IList`1<PdfRange> get_Encode();
    protected internal virtual int get_RangeSize();
    protected virtual Double[] PerformTransformation(Double[] arguments);
    protected virtual PdfWriterDictionary FillDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfStringAlignment : Enum {
    public int value__;
    public static PdfStringAlignment Near;
    public static PdfStringAlignment Center;
    public static PdfStringAlignment Far;
}
public class DevExpress.Pdf.PdfStringFormat : object {
    private static PdfStringFormat genericDefault;
    private static PdfStringFormat genericTypographic;
    private double leadingMarginFactor;
    private double trailingMarginFactor;
    private PdfStringFormatFlags formatFlags;
    private PdfStringAlignment alignment;
    private PdfStringAlignment lineAlignment;
    private PdfStringTrimming trimming;
    private PdfHotkeyPrefix hotkeyPrefix;
    private double tabStopInterval;
    private bool directionRightToLeft;
    public static PdfStringFormat GenericDefault { get; }
    public static PdfStringFormat GenericTypographic { get; }
    public PdfStringFormatFlags FormatFlags { get; public set; }
    public PdfStringAlignment Alignment { get; public set; }
    public PdfStringAlignment LineAlignment { get; public set; }
    public PdfStringTrimming Trimming { get; public set; }
    public PdfHotkeyPrefix HotkeyPrefix { get; public set; }
    public double LeadingMarginFactor { get; public set; }
    public double TrailingMarginFactor { get; public set; }
    internal double TabStopInterval { get; internal set; }
    internal bool DirectionRightToLeft { get; internal set; }
    private static PdfStringFormat();
    public PdfStringFormat(PdfStringFormatFlags formatFlags);
    public PdfStringFormat(PdfStringFormat format);
    public static PdfStringFormat get_GenericDefault();
    public static PdfStringFormat get_GenericTypographic();
    public PdfStringFormatFlags get_FormatFlags();
    public void set_FormatFlags(PdfStringFormatFlags value);
    public PdfStringAlignment get_Alignment();
    public void set_Alignment(PdfStringAlignment value);
    public PdfStringAlignment get_LineAlignment();
    public void set_LineAlignment(PdfStringAlignment value);
    public PdfStringTrimming get_Trimming();
    public void set_Trimming(PdfStringTrimming value);
    public PdfHotkeyPrefix get_HotkeyPrefix();
    public void set_HotkeyPrefix(PdfHotkeyPrefix value);
    public double get_LeadingMarginFactor();
    public void set_LeadingMarginFactor(double value);
    public double get_TrailingMarginFactor();
    public void set_TrailingMarginFactor(double value);
    internal double get_TabStopInterval();
    internal void set_TabStopInterval(double value);
    internal bool get_DirectionRightToLeft();
    internal void set_DirectionRightToLeft(bool value);
    public sealed virtual object Clone();
}
[FlagsAttribute]
public enum DevExpress.Pdf.PdfStringFormatFlags : Enum {
    public int value__;
    public static PdfStringFormatFlags MeasureTrailingSpaces;
    public static PdfStringFormatFlags NoWrap;
    public static PdfStringFormatFlags LineLimit;
    public static PdfStringFormatFlags NoClip;
}
public enum DevExpress.Pdf.PdfStringTrimming : Enum {
    public int value__;
    public static PdfStringTrimming None;
    public static PdfStringTrimming Character;
    public static PdfStringTrimming Word;
    public static PdfStringTrimming EllipsisCharacter;
    public static PdfStringTrimming EllipsisWord;
}
public class DevExpress.Pdf.PdfStrokePathCommand : PdfCommand {
    internal static string Name;
    private static PdfStrokePathCommand instance;
    internal static PdfStrokePathCommand Instance { get; }
    private static PdfStrokePathCommand();
    internal static PdfStrokePathCommand get_Instance();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
    protected internal virtual void Execute(IPdfCommandInterpreter interpreter);
}
public class DevExpress.Pdf.PdfSubmitFormAction : PdfAction {
    internal static string Name;
    private static string fileSpecificationDictionaryKey;
    private static string flagsDictionaryKey;
    private static int defaultFlag;
    private PdfFileSpecification fileSpecification;
    private int flags;
    public PdfFileSpecification FileSpecification { get; }
    public int Flags { get; }
    protected string ActionType { get; }
    internal PdfSubmitFormAction(PdfReaderDictionary dictionary);
    public PdfFileSpecification get_FileSpecification();
    public int get_Flags();
    protected virtual string get_ActionType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfTableLogicalStructureElementAttribute : PdfLogicalStructureElementAttribute {
    internal static string Owner;
    private static string rowSpanKey;
    private static string colSpanKey;
    private static string headersKey;
    private static string scopeKey;
    private static string summaryKey;
    private IList`1<string> headers;
    private Nullable`1<PdfTableLogicalStructureElementAttributeScope> scope;
    private string summary;
    private int rowSpan;
    private int colSpan;
    public int RowSpan { get; internal set; }
    public int ColSpan { get; internal set; }
    public IList`1<string> Headers { get; }
    public Nullable`1<PdfTableLogicalStructureElementAttributeScope> Scope { get; }
    public string Summary { get; }
    internal PdfTableLogicalStructureElementAttribute(PdfReaderDictionary dictionary);
    public int get_RowSpan();
    internal void set_RowSpan(int value);
    public int get_ColSpan();
    internal void set_ColSpan(int value);
    public IList`1<string> get_Headers();
    public Nullable`1<PdfTableLogicalStructureElementAttributeScope> get_Scope();
    public string get_Summary();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public enum DevExpress.Pdf.PdfTableLogicalStructureElementAttributeScope : Enum {
    public int value__;
    public static PdfTableLogicalStructureElementAttributeScope Row;
    public static PdfTableLogicalStructureElementAttributeScope Column;
    public static PdfTableLogicalStructureElementAttributeScope Both;
}
public class DevExpress.Pdf.PdfTensorProductPatch : object {
    private PdfPoint[0...,0...] controlPoints;
    private PdfColor[] colors;
    public PdfPoint[0...,0...] ControlPoints { get; }
    public PdfColor[] Colors { get; }
    internal PdfTensorProductPatch(PdfPoint[0...,0...] controlPoints, PdfColor[] colors);
    public PdfPoint[0...,0...] get_ControlPoints();
    public PdfColor[] get_Colors();
}
public class DevExpress.Pdf.PdfTensorProductPatchMesh : PdfMeshShading {
    internal static int Type;
    private IList`1<PdfTensorProductPatch> patches;
    public IList`1<PdfTensorProductPatch> Patches { get; }
    protected int ShadingType { get; }
    protected bool HasBitsPerFlag { get; }
    internal PdfTensorProductPatchMesh(PdfReaderStream stream);
    public IList`1<PdfTensorProductPatch> get_Patches();
    protected virtual int get_ShadingType();
    protected virtual bool get_HasBitsPerFlag();
}
public class DevExpress.Pdf.PdfTextAnnotation : PdfMarkupAnnotation {
    internal static string Type;
    private static string isOpenedDictionaryKey;
    private static string iconNameDictionaryKey;
    private static string stateDictionaryKey;
    private static string stateModelDictionaryKey;
    private static bool defaultOpenedState;
    private static string defaultIconName;
    private bool isOpened;
    private string stateModel;
    private string iconName;
    private string state;
    public bool IsOpened { get; }
    public string IconName { get; internal set; }
    public string State { get; internal set; }
    public string StateModel { get; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfTextAnnotation(PdfPage page, IPdfTextAnnotationBuilder builder);
    internal PdfTextAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public bool get_IsOpened();
    public string get_IconName();
    internal void set_IconName(string value);
    public string get_State();
    internal void set_State(string value);
    public string get_StateModel();
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual bool ShouldRecreateAppearance(PdfForm form, PdfAnnotationAppearanceState appearanceState, string appearanceName);
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfTextAnnotationData : PdfMarkupAnnotationData {
    private PdfTextAnnotationState annotationState;
    internal static PdfColor StickyNoteDefaultColor { get; }
    internal static string DefaultSubject { get; }
    internal static string DefaultIconName { get; }
    public string IconName { get; public set; }
    internal PdfTextAnnotationData(PdfTextAnnotationState annotationState);
    internal static PdfColor get_StickyNoteDefaultColor();
    internal static string get_DefaultSubject();
    internal static string get_DefaultIconName();
    public string get_IconName();
    public void set_IconName(string value);
}
public class DevExpress.Pdf.PdfTextAnnotationFacade : PdfMarkupAnnotationFacade {
    private PdfTextAnnotationState annotationState;
    public string IconName { get; public set; }
    internal PdfTextAnnotationFacade(PdfTextAnnotationState annotation);
    public string get_IconName();
    public void set_IconName(string value);
}
public static class DevExpress.Pdf.PdfTextAnnotationIconName : object {
    public static string Check;
    public static string Circle;
    public static string Comment;
    public static string Cross;
    public static string CrossHairs;
    public static string Help;
    public static string Insert;
    public static string Key;
    public static string NewParagraph;
    public static string Note;
    public static string Paragraph;
    public static string RightArrow;
    public static string RightPointer;
    public static string Star;
    public static string UpArrow;
    public static string UpLeftArrow;
}
public class DevExpress.Pdf.PdfTextExtractionOptions : object {
    [CompilerGeneratedAttribute]
private bool <ClipToCropBox>k__BackingField;
    public bool ClipToCropBox { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ClipToCropBox();
    [CompilerGeneratedAttribute]
public void set_ClipToCropBox(bool value);
}
public enum DevExpress.Pdf.PdfTextFieldInputType : Enum {
    public int value__;
    public static PdfTextFieldInputType PlainText;
    public static PdfTextFieldInputType RichText;
    public static PdfTextFieldInputType Password;
    public static PdfTextFieldInputType FileSelect;
    public static PdfTextFieldInputType Comb;
}
public class DevExpress.Pdf.PdfTextFormField : PdfInteractiveFormField {
    internal static string FormFieldType;
    private static string maxLenDictionaryKey;
    private static int maxMultilineFieldAutoFontSize;
    private static float multilineFieldAutoFontSizeStep;
    private PdfTextFormField valuesProvider;
    private string defaultText;
    private string text;
    private Nullable`1<int> maxLen;
    public PdfFormFieldType Type { get; }
    public string DefaultText { get; }
    public string Text { get; }
    public Nullable`1<int> MaxLen { get; public set; }
    public bool SpellCheck { get; public set; }
    public bool Scrollable { get; public set; }
    public bool Multiline { get; public set; }
    public PdfTextFieldInputType InputType { get; public set; }
    protected internal object Value { get; }
    protected internal object DefaultValue { get; }
    protected string FieldType { get; }
    internal PdfTextFormField(IPdfInteractiveFormFieldProperties properties, int maxLen, string text, IPdfExportFontProvider fontSearch);
    internal PdfTextFormField(PdfInteractiveForm form, PdfInteractiveFormField parent, PdfReaderDictionary dictionary, PdfObjectReference valueReference);
    private static string GetText(PdfReaderDictionary dictionary, string key);
    public virtual PdfFormFieldType get_Type();
    public string get_DefaultText();
    public string get_Text();
    public Nullable`1<int> get_MaxLen();
    public void set_MaxLen(Nullable`1<int> value);
    public bool get_SpellCheck();
    public void set_SpellCheck(bool value);
    public bool get_Scrollable();
    public void set_Scrollable(bool value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public PdfTextFieldInputType get_InputType();
    public void set_InputType(PdfTextFieldInputType value);
    protected internal virtual object get_Value();
    protected internal virtual object get_DefaultValue();
    protected virtual string get_FieldType();
    private void SetValue(object value, IPdfExportFontProvider fontSearch, bool forceSet);
    protected internal virtual double CalcFontSize(string text, PdfRectangle layoutRect, PdfExportFont font);
    protected virtual bool AcceptValue(object value);
    protected internal virtual void SetValue(object value, IPdfExportFontProvider fontSearch);
    protected internal virtual void FillDictionary(PdfWriterDictionary dictionary, IPdfWritingContext writingContext);
    protected internal virtual void Accept(IPdfInteractiveFormFieldVisitor visitor);
}
public class DevExpress.Pdf.PdfTextFormFieldFacade : PdfFormFieldFacade`2<PdfTextWidgetFacade, PdfTextFormField> {
    public PdfFormFieldType Type { get; }
    public Nullable`1<int> MaxLength { get; public set; }
    public bool Multiline { get; public set; }
    public PdfTextFieldInputType InputType { get; public set; }
    public Nullable`1<PdfTextJustification> TextJustification { get; public set; }
    public bool SpellCheck { get; public set; }
    public bool Scrollable { get; public set; }
    public string Value { get; public set; }
    internal PdfTextFormFieldFacade(PdfDocumentStateBase documentState, PdfTextFormField field, PdfAcroFormFacade acroForm);
    public virtual PdfFormFieldType get_Type();
    public Nullable`1<int> get_MaxLength();
    public void set_MaxLength(Nullable`1<int> value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public PdfTextFieldInputType get_InputType();
    public void set_InputType(PdfTextFieldInputType value);
    public Nullable`1<PdfTextJustification> get_TextJustification();
    public void set_TextJustification(Nullable`1<PdfTextJustification> value);
    public bool get_SpellCheck();
    public void set_SpellCheck(bool value);
    public bool get_Scrollable();
    public void set_Scrollable(bool value);
    public string get_Value();
    public void set_Value(string value);
    protected virtual PdfTextWidgetFacade CreateWidget(PdfDocumentStateBase documentState, PdfTextFormField formField, PdfWidgetAnnotationState state);
    [CompilerGeneratedAttribute]
private void <set_MaxLength>b__4_0(Nullable`1<int> val);
    [CompilerGeneratedAttribute]
private void <set_Multiline>b__7_0(bool val);
    [CompilerGeneratedAttribute]
private void <set_InputType>b__10_0(PdfTextFieldInputType val);
    [CompilerGeneratedAttribute]
private void <set_TextJustification>b__13_0(Nullable`1<PdfTextJustification> val);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfTextJustification : Enum {
    public int value__;
    [PdfFieldValueAttribute("0")]
public static PdfTextJustification LeftJustified;
    [PdfFieldValueAttribute("1")]
public static PdfTextJustification Centered;
    [PdfFieldValueAttribute("2")]
public static PdfTextJustification RightJustified;
}
public class DevExpress.Pdf.PdfTextMarkupAnnotation : PdfMarkupAnnotation {
    internal static string HighlightType;
    internal static string UnderlineType;
    internal static string SquigglyType;
    internal static string StrikeOutType;
    private IList`1<PdfQuadrilateral> quads;
    private PdfTextMarkupAnnotationType type;
    public PdfTextMarkupAnnotationType Type { get; internal set; }
    public IList`1<PdfQuadrilateral> Quads { get; }
    public PdfFilterAnnotationType FilterType { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfTextMarkupAnnotation(PdfPage page, IPdfTextMarkupAnnotationBuilder builder);
    internal PdfTextMarkupAnnotation(PdfPage page, PdfTextMarkupAnnotationType type, PdfReaderDictionary dictionary);
    public PdfTextMarkupAnnotationType get_Type();
    internal void set_Type(PdfTextMarkupAnnotationType value);
    public IList`1<PdfQuadrilateral> get_Quads();
    public virtual PdfFilterAnnotationType get_FilterType();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
}
public class DevExpress.Pdf.PdfTextMarkupAnnotationData : PdfMarkupAnnotationData {
    private PdfTextMarkupAnnotationState annotationState;
    internal static PdfColor UnderlineDefaultColor { get; }
    internal static PdfColor StrikeOutDefaultColor { get; }
    internal static PdfColor HighlightDefaultColor { get; }
    public PdfTextMarkupAnnotationType MarkupType { get; public set; }
    public IList`1<PdfQuadrilateral> Quads { get; }
    internal PdfTextMarkupAnnotationData(PdfTextMarkupAnnotationState annotationState);
    internal static PdfColor get_UnderlineDefaultColor();
    internal static PdfColor get_StrikeOutDefaultColor();
    internal static PdfColor get_HighlightDefaultColor();
    internal static string GetSubject(PdfTextMarkupAnnotationType type);
    public PdfTextMarkupAnnotationType get_MarkupType();
    public void set_MarkupType(PdfTextMarkupAnnotationType value);
    public IList`1<PdfQuadrilateral> get_Quads();
}
public class DevExpress.Pdf.PdfTextMarkupAnnotationFacade : PdfMarkupAnnotationFacade {
    private PdfTextMarkupAnnotationState annotationState;
    public PdfTextMarkupAnnotationType MarkupType { get; public set; }
    internal PdfTextMarkupAnnotationFacade(PdfTextMarkupAnnotationState annotation);
    public PdfTextMarkupAnnotationType get_MarkupType();
    public void set_MarkupType(PdfTextMarkupAnnotationType value);
}
public enum DevExpress.Pdf.PdfTextMarkupAnnotationType : Enum {
    public int value__;
    public static PdfTextMarkupAnnotationType Highlight;
    public static PdfTextMarkupAnnotationType Underline;
    public static PdfTextMarkupAnnotationType Squiggly;
    public static PdfTextMarkupAnnotationType StrikeOut;
}
public enum DevExpress.Pdf.PdfTextRenderingMode : Enum {
    public int value__;
    public static PdfTextRenderingMode Fill;
    public static PdfTextRenderingMode Stroke;
    public static PdfTextRenderingMode FillAndStroke;
    public static PdfTextRenderingMode Invisible;
    public static PdfTextRenderingMode FillAndClip;
    public static PdfTextRenderingMode StrokeAndClip;
    public static PdfTextRenderingMode FillStrokeAndClip;
    public static PdfTextRenderingMode Clip;
}
public enum DevExpress.Pdf.PdfTextSearchDirection : Enum {
    public int value__;
    public static PdfTextSearchDirection Forward;
    public static PdfTextSearchDirection Backward;
}
public class DevExpress.Pdf.PdfTextSearchParameters : object {
    private PdfTextSearchDirection direction;
    private PdfTextSearchOptions options;
    public PdfTextSearchDirection Direction { get; public set; }
    public bool CaseSensitive { get; public set; }
    public bool WholeWords { get; public set; }
    public PdfTextSearchDirection get_Direction();
    public void set_Direction(PdfTextSearchDirection value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public bool get_WholeWords();
    public void set_WholeWords(bool value);
    private bool GetOption(PdfTextSearchOptions option);
    private void SetOption(PdfTextSearchOptions option, bool value);
    internal bool EqualsTo(PdfTextSearchParameters newParams);
    internal PdfTextSearchParameters CloneParameters();
}
public class DevExpress.Pdf.PdfTextSearchResults : object {
    internal static PdfTextSearchResults NotFound;
    internal static PdfTextSearchResults Finished;
    private PdfPage page;
    private int pageNumber;
    private IList`1<PdfWord> words;
    private IList`1<PdfOrientedRectangle> rectangles;
    private PdfTextSearchStatus status;
    private PdfRectangle boundingRectangle;
    public PdfPage Page { get; }
    [ObsoleteAttribute("The PageIndex property is now obsolete. Use the PageNumber property instead.")]
public int PageIndex { get; }
    public int PageNumber { get; }
    public IList`1<PdfWord> Words { get; }
    public IList`1<PdfOrientedRectangle> Rectangles { get; }
    public PdfTextSearchStatus Status { get; }
    internal PdfRectangle BoundingRectangle { get; }
    internal PdfPoint Position { get; }
    internal PdfTextSearchResults(PdfPage page, int pageNumber, IList`1<PdfWord> words, IList`1<PdfOrientedRectangle> rectangles);
    private PdfTextSearchResults(PdfTextSearchStatus status);
    private static PdfTextSearchResults();
    public PdfPage get_Page();
    public int get_PageIndex();
    public int get_PageNumber();
    public IList`1<PdfWord> get_Words();
    public IList`1<PdfOrientedRectangle> get_Rectangles();
    public PdfTextSearchStatus get_Status();
    internal PdfRectangle get_BoundingRectangle();
    internal PdfPoint get_Position();
}
public enum DevExpress.Pdf.PdfTextSearchStatus : Enum {
    public int value__;
    public static PdfTextSearchStatus Found;
    public static PdfTextSearchStatus NotFound;
    public static PdfTextSearchStatus Finished;
}
public class DevExpress.Pdf.PdfTextWidgetFacade : PdfWidgetFacade {
    internal PdfTextWidgetFacade(PdfDocumentStateBase documentState, PdfTextFormField formField, PdfWidgetAnnotationState state);
}
public class DevExpress.Pdf.PdfThreadAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfThreadAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
public class DevExpress.Pdf.PdfTilingPattern : PdfPattern {
    private static string paintTypeDictionaryKey;
    private static string tilingTypeDictionaryKey;
    private static string boundingBoxDictionaryKey;
    private static string xStepDictionaryKey;
    private static string yStepDictionaryKey;
    private static string resourcesDictionaryKey;
    private static int coloredPaintType;
    private static int uncoloredPaintType;
    private bool colored;
    private PdfTilingType tilingType;
    private PdfRectangle boundingBox;
    private double xStep;
    private double yStep;
    private IPdfResources resources;
    private Byte[] commandsData;
    private PdfCommandList commands;
    public bool Colored { get; }
    public PdfTilingType TilingType { get; }
    public PdfRectangle BoundingBox { get; }
    public double XStep { get; }
    public double YStep { get; }
    public PdfCommandList Commands { get; }
    internal IPdfResources Resources { get; }
    protected int PatternType { get; }
    internal PdfTilingPattern(PdfReaderStream stream);
    internal PdfTilingPattern(PdfTransformationMatrix matrix, PdfRectangle boundingBox, double xStep, double yStep, bool colored, IPdfDocumentCatalog documentCatalog);
    internal PdfTilingPattern(PdfTransformationMatrix matrix, PdfRectangle boundingBox, double xStep, double yStep, IPdfDocumentCatalog documentCatalog);
    public bool get_Colored();
    public PdfTilingType get_TilingType();
    public PdfRectangle get_BoundingBox();
    public double get_XStep();
    public double get_YStep();
    public PdfCommandList get_Commands();
    internal IPdfResources get_Resources();
    protected virtual int get_PatternType();
    internal void ReplaceCommands(Byte[] commandsData);
    protected virtual PdfWriterDictionary GetDictionary(IPdfWrittenObjectsCollection objects);
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage objects);
    protected internal virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public enum DevExpress.Pdf.PdfTilingType : Enum {
    public int value__;
    [PdfFieldValueAttribute("1")]
public static PdfTilingType ConstantSpacing;
    [PdfFieldValueAttribute("2")]
public static PdfTilingType NoDistortion;
    [PdfFieldValueAttribute("3")]
public static PdfTilingType FasterTiling;
}
public class DevExpress.Pdf.PdfTimeStamp : object {
    private ITsaClient tsaClient;
    public string Type { get; }
    public string Filter { get; }
    public string SubFilter { get; }
    public PdfTimeStamp(ITsaClient tsaClient);
    public sealed virtual string get_Type();
    public sealed virtual string get_Filter();
    public sealed virtual string get_SubFilter();
    public sealed virtual Byte[] BuildSignature(Stream stream);
    public sealed virtual Byte[] BuildSignature(Byte[] digest, string digestAlgorithmOID);
    public virtual int GetSignatureSize();
}
public class DevExpress.Pdf.PdfTransformationMatrix : object {
    private static PdfTransformationMatrix identity;
    private double a;
    private double b;
    private double c;
    private double d;
    private double e;
    private double f;
    internal static PdfTransformationMatrix Identity { get; }
    public double A { get; }
    public double B { get; }
    public double C { get; }
    public double D { get; }
    public double E { get; }
    public double F { get; }
    internal bool IsDefault { get; }
    internal IList`1<object> Data { get; }
    internal bool IsInvertable { get; }
    internal bool IsNotRotated { get; }
    internal bool IsOnlyScaleAndTranslate { get; }
    internal double Determinant { get; }
    internal double Sx { get; }
    internal double Sy { get; }
    internal PdfTransformationMatrix(IList`1<object> array);
    internal PdfTransformationMatrix(PdfReaderArray array);
    internal PdfTransformationMatrix(PdfStack operands);
    public PdfTransformationMatrix(double a, double b, double c, double d, double e, double f);
    private static PdfTransformationMatrix();
    internal static PdfTransformationMatrix get_Identity();
    public static PdfTransformationMatrix Translate(PdfTransformationMatrix matrix, double translateX, double translateY);
    public static PdfTransformationMatrix Scale(PdfTransformationMatrix matrix, double scaleX, double scaleY);
    public static PdfTransformationMatrix Multiply(PdfTransformationMatrix matrix1, PdfTransformationMatrix matrix2);
    internal static PdfTransformationMatrix CreateTranslate(double dx, double dy);
    internal static PdfTransformationMatrix CreateRotate(double degree);
    internal static PdfTransformationMatrix CreateRotateRadians(double radians);
    internal static PdfTransformationMatrix CreateScale(double scaleX, double scaleY);
    internal static PdfTransformationMatrix Rotate(PdfTransformationMatrix matrix, double degree);
    internal static PdfTransformationMatrix Invert(PdfTransformationMatrix matrix);
    private static bool IsZeroComponent(double component);
    public double get_A();
    public double get_B();
    public double get_C();
    public double get_D();
    public double get_E();
    public double get_F();
    internal bool get_IsDefault();
    internal IList`1<object> get_Data();
    internal bool get_IsInvertable();
    internal bool get_IsNotRotated();
    internal bool get_IsOnlyScaleAndTranslate();
    internal double get_Determinant();
    internal double get_Sx();
    internal double get_Sy();
    public PdfTransformationMatrix Clone();
    public PdfPoint Transform(PdfPoint point);
    public PdfPoint[] Transform(IList`1<PdfPoint> points);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal PdfRectangle TransformBoundingBox(PdfRectangle boundingBox);
    internal PdfPoint Transform(double x, double y);
    internal bool Equals(PdfTransformationMatrix matrix);
    internal void Write(PdfDocumentStream writer);
}
public class DevExpress.Pdf.PdfTransitionAction : PdfAction {
    internal static string Name;
    protected string ActionType { get; }
    internal PdfTransitionAction(PdfReaderDictionary dictionary);
    protected virtual string get_ActionType();
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfTransitionDimension : Enum {
    public int value__;
    [PdfFieldNameAttribute("H")]
public static PdfTransitionDimension Horizontal;
    [PdfFieldNameAttribute("V")]
public static PdfTransitionDimension Vertical;
}
public enum DevExpress.Pdf.PdfTransitionDirection : Enum {
    public int value__;
    public static PdfTransitionDirection None;
    public static PdfTransitionDirection LeftToRight;
    public static PdfTransitionDirection BottomToTop;
    public static PdfTransitionDirection RightToLeft;
    public static PdfTransitionDirection TopToBottom;
    public static PdfTransitionDirection TopLeftToBottomRight;
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfTransitionStyle : Enum {
    public int value__;
    public static PdfTransitionStyle Split;
    public static PdfTransitionStyle Blinds;
    public static PdfTransitionStyle Box;
    public static PdfTransitionStyle Wipe;
    public static PdfTransitionStyle Dissolve;
    public static PdfTransitionStyle Glitter;
    public static PdfTransitionStyle R;
    public static PdfTransitionStyle Fly;
    public static PdfTransitionStyle Push;
    public static PdfTransitionStyle Cover;
    public static PdfTransitionStyle Uncover;
    public static PdfTransitionStyle Fade;
}
public class DevExpress.Pdf.PdfTransparencyGroup : PdfObject {
    private static string dictionaryType;
    private static string dictionarySubtype;
    private static string subtypeDictionaryKey;
    private static string colorSpaceDictionaryKey;
    private static string isolatedDictionaryKey;
    private static string knockoutDictionaryKey;
    private PdfColorSpace colorSpace;
    private bool isolated;
    private bool knockout;
    public PdfColorSpace ColorSpace { get; }
    public bool Isolated { get; }
    public bool Knockout { get; }
    internal PdfTransparencyGroup(PdfReaderDictionary dictionary);
    public PdfColorSpace get_ColorSpace();
    public bool get_Isolated();
    public bool get_Knockout();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection collection);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfTrapNetAnnotation : PdfAnnotation {
    internal static string Type;
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfTrapNetAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
}
public class DevExpress.Pdf.PdfTriangle : object {
    private PdfVertex vertex1;
    private PdfVertex vertex2;
    private PdfVertex vertex3;
    public PdfVertex Vertex1 { get; }
    public PdfVertex Vertex2 { get; }
    public PdfVertex Vertex3 { get; }
    internal PdfTriangle(PdfVertex vertex1, PdfVertex vertex2, PdfVertex vertex3);
    public PdfVertex get_Vertex1();
    public PdfVertex get_Vertex2();
    public PdfVertex get_Vertex3();
}
public class DevExpress.Pdf.PdfTrueTypeFont : PdfSimpleFont {
    internal static string Name;
    internal static string FontFile2DictionaryKey;
    private static string length1DictionaryKey;
    private Byte[] fontFileData;
    private Byte[] openTypeFontFileData;
    private PdfType1FontFileData type1FontFileData;
    private PdfMetadata metadata;
    private Byte[] compactFontFileData;
    public Byte[] FontFileData { get; }
    public Byte[] OpenTypeFontFileData { get; }
    public PdfMetadata Metadata { get; }
    protected internal string Subtype { get; }
    internal PdfTrueTypeFont(int objectNumber, string baseFont, PdfSimpleFontEncoding fontEncoding, PdfFontDescriptor fontDescriptor, int firstChar, Double[] widths);
    internal PdfTrueTypeFont(int objectNumber, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfSimpleFontEncoding encoding, Nullable`1<int> firstChar, Nullable`1<int> lastChar, Double[] widths);
    internal static void WriteFontData(PdfWriterDictionary dictionary, Byte[] fontFileData);
    internal static void WriteFontData(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection, Byte[] fontFileData);
    public Byte[] get_FontFileData();
    public Byte[] get_OpenTypeFontFileData();
    public PdfMetadata get_Metadata();
    protected internal virtual string get_Subtype();
    protected virtual PdfFontProgramFacade CreateFontProgramFacade();
    protected internal virtual void UpdateFontDescriptorDictionary(PdfWriterDictionary dictionary);
    protected internal virtual void UpdateFontDescriptorDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfType0Font : PdfFont {
    internal static string Name;
    protected static string Subtype0Name;
    protected static string Subtype2Name;
    protected static string CidToGIDMapDictionaryKey;
    protected static string cffFontSubtype;
    private static string descendantFontsDictionaryKey;
    private static string cidSystemInfoDictionaryKey;
    private static string defaultWidthDictionaryKey;
    private static string defaultVerticalWidthDictionaryKey;
    private static string widthsDictionaryKey;
    private static string verticalWidthsDictionaryKey;
    private PdfCompositeFontEncoding encoding;
    private string cidBaseFont;
    private PdfCIDSystemInfo systemInfo;
    private int defaultWidth;
    private Int16[] cidToGidMap;
    private Lazy`1<PdfCIDCharset> charset;
    private Nullable`1<PdfPoint> defaultVerticalWidth;
    private IDictionary`2<int, PdfVerticalGlyphMetrics> verticalWidths;
    private IDictionary`2<int, double> widths;
    public PdfCompositeFontEncoding Encoding { get; }
    public string CIDBaseFont { get; }
    public PdfCIDSystemInfo SystemInfo { get; }
    public int DefaultWidth { get; }
    public IDictionary`2<int, double> Widths { get; internal set; }
    public Int16[] CidToGidMap { get; }
    protected internal IEnumerable`1<double> GlyphWidths { get; }
    protected internal PdfEncoding ActualEncoding { get; }
    protected internal string Subtype { get; }
    internal bool IsVerticalFont { get; }
    protected string CIDSubType { get; }
    internal PdfFontCharset Charset { get; }
    protected PdfType0Font(int objectNumber, string baseFont, PdfCompositeFontDescriptor fontDescriptor);
    protected PdfType0Font(int objectNumber, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfCompositeFontEncoding encoding, PdfReaderDictionary dictionary);
    private static bool TryConvertToInt(object value, Int32& res);
    internal static PdfType0Font Create(string baseFont, PdfReaderDictionary dictionary);
    private static IDictionary`2<int, double> ParseWidths(PdfReaderArray widthsArray);
    private static IDictionary`2<int, PdfVerticalGlyphMetrics> ParseVerticalWidths(PdfReaderArray widthsArray);
    private static void AddWidth(IDictionary`2<int, T> widths, int key, T width);
    public PdfCompositeFontEncoding get_Encoding();
    public string get_CIDBaseFont();
    public PdfCIDSystemInfo get_SystemInfo();
    public int get_DefaultWidth();
    public IDictionary`2<int, double> get_Widths();
    internal void set_Widths(IDictionary`2<int, double> value);
    public Int16[] get_CidToGidMap();
    protected internal virtual IEnumerable`1<double> get_GlyphWidths();
    protected internal virtual PdfEncoding get_ActualEncoding();
    protected internal virtual string get_Subtype();
    internal virtual bool get_IsVerticalFont();
    protected abstract virtual string get_CIDSubType();
    internal virtual PdfFontCharset get_Charset();
    internal virtual PdfVerticalGlyphMetrics GetVerticalGlyphMetrics(int charCode);
    protected virtual Nullable`1<double> GetCharacterWidth(int charCode);
    protected virtual string GetCharacterUnicodeFallback(Byte[] character);
    protected virtual PdfFontDescriptor CreateFontDescriptor(PdfReaderDictionary dictionary);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    private static List`1<object> ConvertWidthsToArray(IDictionary`2<int, T> widths, Action`2<List`1<object>, T> addValue);
    protected virtual PdfWriterDictionary CreateDescendantDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    private static List`1<PdfPrimitive> ConvertWidthsToArrayPrimitive(IDictionary`2<int, T> widths, PdfDictionaryPrimitive dictionary, PdfObjectStorage collection, Action`2<PdfArrayPrimitive, T> addValue);
    protected virtual void FillDescendantDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    [CompilerGeneratedAttribute]
private PdfCIDCharset <.ctor>b__50_0();
    [CompilerGeneratedAttribute]
private PdfCIDCharset <.ctor>b__51_0();
}
public class DevExpress.Pdf.PdfType1Font : PdfSimpleFont {
    internal static string Name;
    internal static string TimesRomanFontName;
    internal static string TimesBoldFontName;
    internal static string TimesItalicFontName;
    internal static string TimesBoldItalicFontName;
    internal static string HelveticaObliqueFontName;
    internal static string HelveticaBoldObliqueFontName;
    internal static string CourierFontName;
    internal static string CourierBoldFontName;
    internal static string CourierObliqueFontName;
    internal static string CourierBoldObliqueFontName;
    internal static string SymbolFontName;
    internal static string ZapfDingbatsFontName;
    internal static string FontFileSubtype;
    private PdfType1FontFileData fontFileData;
    private Byte[] compactFontFileData;
    private Byte[] openTypeFontFileData;
    private PdfMetadata metadata;
    public Byte[] FontFileData { get; }
    public int PlainTextLength { get; }
    public int CipherTextLength { get; }
    public int NullSegmentLength { get; }
    public Byte[] CompactFontFileData { get; }
    public Byte[] OpenTypeFontFileData { get; }
    public PdfMetadata Metadata { get; }
    protected internal string Subtype { get; }
    internal PdfType1Font(PdfReaderDictionary dictionary, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfSimpleFontEncoding encoding, Nullable`1<int> firstChar, Nullable`1<int> lastChar, Double[] widths);
    public Byte[] get_FontFileData();
    public int get_PlainTextLength();
    public int get_CipherTextLength();
    public int get_NullSegmentLength();
    public Byte[] get_CompactFontFileData();
    public Byte[] get_OpenTypeFontFileData();
    public PdfMetadata get_Metadata();
    protected internal virtual string get_Subtype();
    private static Byte[] GetCompactFontFileData(PdfReaderStream fontFile3);
    protected virtual PdfFontProgramFacade CreateFontProgramFacade();
    protected internal virtual void UpdateFontDescriptorDictionary(PdfWriterDictionary dictionary);
    protected internal virtual void UpdateFontDescriptorDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfType3Font : PdfSimpleFont {
    internal static string Name;
    private static string fontBBoxDictionaryKey;
    private static string fontMatrixDictionaryKey;
    private static string charProcsDictionaryKey;
    private static string resourcesDictionaryKey;
    private PdfRectangle fontBBox;
    private PdfTransformationMatrix fontMatrix;
    private Dictionary`2<string, PdfCommandList> charProcs;
    private Dictionary`2<string, Byte[]> charProcsData;
    private Dictionary`2<string, PdfType3FontGlyph> glyphs;
    private PdfResources resources;
    private double widthFactor;
    private double heightFactor;
    public PdfRectangle FontBBox { get; }
    public PdfTransformationMatrix FontMatrix { get; }
    public IDictionary`2<string, PdfCommandList> CharProcs { get; }
    protected internal double WidthFactor { get; }
    protected internal double HeightFactor { get; }
    protected internal bool HasSizeAttributes { get; }
    protected internal string Subtype { get; }
    internal PdfType3Font(int objectNumber, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfSimpleFontEncoding encoding, int firstChar, int lastChar, Double[] widths, PdfReaderDictionary dictionary);
    public PdfRectangle get_FontBBox();
    public PdfTransformationMatrix get_FontMatrix();
    public IDictionary`2<string, PdfCommandList> get_CharProcs();
    protected internal virtual double get_WidthFactor();
    protected internal virtual double get_HeightFactor();
    protected internal virtual bool get_HasSizeAttributes();
    protected internal virtual string get_Subtype();
    internal PdfType3FontGlyph GetGlyph(string name);
    protected virtual PdfFontProgramFacade CreateFontProgramFacade();
    protected virtual PdfFontMetricsMetadata CreateValidatedMetrics(IPdfRenderingFontInfoProvider widthProvider);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
}
public abstract class DevExpress.Pdf.PdfUnclosedPathAnnotation : PdfPathAnnotation {
    private static string lineEndingDictionaryKey;
    private PdfAnnotationLineEndingStyle startLineEnding;
    private PdfAnnotationLineEndingStyle finishLineEnding;
    public PdfAnnotationLineEndingStyle StartLineEnding { get; internal set; }
    public PdfAnnotationLineEndingStyle FinishLineEnding { get; internal set; }
    internal PdfUnclosedPathAnnotation(PdfPage page, IPdfPathAnnotationBuilder builder);
    protected PdfUnclosedPathAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    private static PdfAnnotationLineEndingStyle ParseLineEnding(PdfName name);
    public PdfAnnotationLineEndingStyle get_StartLineEnding();
    internal void set_StartLineEnding(PdfAnnotationLineEndingStyle value);
    public PdfAnnotationLineEndingStyle get_FinishLineEnding();
    internal void set_FinishLineEnding(PdfAnnotationLineEndingStyle value);
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfUnknownCommand : PdfCommand {
    private string name;
    private List`1<object> parameters;
    public string Name { get; }
    public IList`1<object> Parameters { get; }
    internal PdfUnknownCommand(string name, PdfStack operands);
    public string get_Name();
    public IList`1<object> get_Parameters();
    protected internal virtual void Write(PdfDocumentStream writer, IPdfWritingContext context);
}
public class DevExpress.Pdf.PdfUnknownFont : PdfType1Font {
    protected internal string Subtype { get; }
    internal PdfUnknownFont(PdfReaderDictionary dictionary, string baseFont, PdfToUnicodeMapping toUnicode, PdfReaderDictionary fontDescriptor, PdfSimpleFontEncoding encoding, Nullable`1<int> firstChar, Nullable`1<int> lastChar, Double[] widths);
    protected internal virtual string get_Subtype();
}
public class DevExpress.Pdf.PdfUriAction : PdfAction {
    internal static string Name;
    private static string uriDictionaryKey;
    private static string isMapDictionaryKey;
    private string uri;
    private bool isMap;
    public string Uri { get; }
    public bool IsMap { get; }
    protected string ActionType { get; }
    internal PdfUriAction(PdfDocumentCatalog documentCatalog, Uri uri);
    internal PdfUriAction(PdfDocumentCatalog documentCatalog, string uri);
    internal PdfUriAction(PdfReaderDictionary dictionary);
    public string get_Uri();
    public bool get_IsMap();
    protected virtual string get_ActionType();
    protected internal virtual void Execute(IPdfInteractiveOperationController interactiveOperationController, IList`1<PdfPage> pages);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
}
public class DevExpress.Pdf.PdfVertex : ValueType {
    private PdfPoint point;
    private PdfColor color;
    public PdfPoint Point { get; }
    public PdfColor Color { get; }
    internal PdfVertex(PdfPoint point, PdfColor color);
    public PdfPoint get_Point();
    public PdfColor get_Color();
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfViewArea : Enum {
    public int value__;
    public static PdfViewArea MediaBox;
    public static PdfViewArea CropBox;
    public static PdfViewArea BleedBox;
    public static PdfViewArea TrimBox;
    public static PdfViewArea ArtBox;
}
public class DevExpress.Pdf.PdfViewerBookmark : object {
    private PdfOutline outline;
    private Lazy`1<IReadOnlyList`1<PdfViewerBookmark>> children;
    private Lazy`1<PdfInteractiveOperation> interactiveOperation;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal PdfOutline Outline { get; }
    public string Title { get; }
    public bool Italic { get; }
    public bool Bold { get; }
    public PdfColor ForeColor { get; }
    public bool Expanded { get; public set; }
    public IReadOnlyList`1<PdfViewerBookmark> Children { get; }
    internal PdfInteractiveOperation InteractiveOperation { get; }
    internal PdfViewerBookmark(PdfOutline outline);
    internal PdfOutline get_Outline();
    public string get_Title();
    public bool get_Italic();
    public bool get_Bold();
    public PdfColor get_ForeColor();
    public bool get_Expanded();
    public void set_Expanded(bool value);
    public IReadOnlyList`1<PdfViewerBookmark> get_Children();
    internal PdfInteractiveOperation get_InteractiveOperation();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void RaisePropertyChanged(string propertyName);
}
[ExtensionAttribute]
public static class DevExpress.Pdf.PdfViewerBookmarkExtensions : object {
    [ExtensionAttribute]
public static PdfViewerBookmark FindBookmark(IEnumerable`1<PdfViewerBookmark> bookmarks, Func`2<PdfViewerBookmark, bool> predicate);
}
public class DevExpress.Pdf.PdfViewerPreferences : object {
    private static string hideToolbarDictionaryKey;
    private static string hideMenubarDictionaryKey;
    private static string hideWindowUIDictionaryKey;
    private static string fitWindowDictionaryKey;
    private static string centerWindowDictionaryKey;
    private static string displayDocTitleDictionaryKey;
    private static string nonFullScreenPageModeDictionaryKey;
    private static string directionDictionaryKey;
    private static string viewAreaDictionaryKey;
    private static string viewClipDictionaryKey;
    private static string printAreaDictionaryKey;
    private static string printClipDictionaryKey;
    private static string printScalingDictionaryKey;
    private static string printModeDictionaryKey;
    private static string pickTrayByPDFSizeDictionaryKey;
    private static string printPageRangeDictionaryKey;
    private static string printNumCopiesDictionaryKey;
    private List`1<PdfPrintPageRange> printPageRange;
    [CompilerGeneratedAttribute]
private bool <HideToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideMenubar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideWindowUI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FitWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CenterWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayDocTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfNonFullScreenPageMode <NonFullScreenPageMode>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfViewArea <ViewArea>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfViewArea <ViewClip>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfViewArea <PrintArea>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfViewArea <PrintClip>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPrintScaling <PrintScaling>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfPrintMode <PrintMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PickTrayByPDFSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrintNumCopies>k__BackingField;
    public bool HideToolbar { get; public set; }
    public bool HideMenubar { get; public set; }
    public bool HideWindowUI { get; public set; }
    public bool FitWindow { get; public set; }
    public bool CenterWindow { get; public set; }
    public bool DisplayDocTitle { get; public set; }
    public PdfNonFullScreenPageMode NonFullScreenPageMode { get; public set; }
    public PdfDirection Direction { get; public set; }
    public PdfViewArea ViewArea { get; public set; }
    public PdfViewArea ViewClip { get; public set; }
    public PdfViewArea PrintArea { get; public set; }
    public PdfViewArea PrintClip { get; public set; }
    public PdfPrintScaling PrintScaling { get; public set; }
    public PdfPrintMode PrintMode { get; public set; }
    public bool PickTrayByPDFSize { get; public set; }
    public int PrintNumCopies { get; public set; }
    public IList`1<PdfPrintPageRange> PrintPageRange { get; }
    internal PdfViewerPreferences(PdfReaderDictionary dictionary);
    [CompilerGeneratedAttribute]
public bool get_HideToolbar();
    [CompilerGeneratedAttribute]
public void set_HideToolbar(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideMenubar();
    [CompilerGeneratedAttribute]
public void set_HideMenubar(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideWindowUI();
    [CompilerGeneratedAttribute]
public void set_HideWindowUI(bool value);
    [CompilerGeneratedAttribute]
public bool get_FitWindow();
    [CompilerGeneratedAttribute]
public void set_FitWindow(bool value);
    [CompilerGeneratedAttribute]
public bool get_CenterWindow();
    [CompilerGeneratedAttribute]
public void set_CenterWindow(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisplayDocTitle();
    [CompilerGeneratedAttribute]
public void set_DisplayDocTitle(bool value);
    [CompilerGeneratedAttribute]
public PdfNonFullScreenPageMode get_NonFullScreenPageMode();
    [CompilerGeneratedAttribute]
public void set_NonFullScreenPageMode(PdfNonFullScreenPageMode value);
    [CompilerGeneratedAttribute]
public PdfDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(PdfDirection value);
    [CompilerGeneratedAttribute]
public PdfViewArea get_ViewArea();
    [CompilerGeneratedAttribute]
public void set_ViewArea(PdfViewArea value);
    [CompilerGeneratedAttribute]
public PdfViewArea get_ViewClip();
    [CompilerGeneratedAttribute]
public void set_ViewClip(PdfViewArea value);
    [CompilerGeneratedAttribute]
public PdfViewArea get_PrintArea();
    [CompilerGeneratedAttribute]
public void set_PrintArea(PdfViewArea value);
    [CompilerGeneratedAttribute]
public PdfViewArea get_PrintClip();
    [CompilerGeneratedAttribute]
public void set_PrintClip(PdfViewArea value);
    [CompilerGeneratedAttribute]
public PdfPrintScaling get_PrintScaling();
    [CompilerGeneratedAttribute]
public void set_PrintScaling(PdfPrintScaling value);
    [CompilerGeneratedAttribute]
public PdfPrintMode get_PrintMode();
    [CompilerGeneratedAttribute]
public void set_PrintMode(PdfPrintMode value);
    [CompilerGeneratedAttribute]
public bool get_PickTrayByPDFSize();
    [CompilerGeneratedAttribute]
public void set_PickTrayByPDFSize(bool value);
    [CompilerGeneratedAttribute]
public int get_PrintNumCopies();
    [CompilerGeneratedAttribute]
public void set_PrintNumCopies(int value);
    public IList`1<PdfPrintPageRange> get_PrintPageRange();
    internal PdfDictionary Write();
}
public class DevExpress.Pdf.PdfWatermarkAnnotation : PdfAnnotation {
    internal static string Type;
    private static string fixedPrintDictionaryKey;
    private static string horizontalTranslationDictionaryKey;
    private static string verticalTranslationDictionaryKey;
    private double horizontalTranslationPercent;
    private double verticalTranslationPercent;
    public double HorizontalTranslationPercent { get; }
    public double VerticalTranslationPercent { get; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfWatermarkAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    public double get_HorizontalTranslationPercent();
    public double get_VerticalTranslationPercent();
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
}
public class DevExpress.Pdf.PdfWidgetAnnotation : PdfAnnotation {
    internal static string Type;
    private static string appearanceCharacteristicsDictionaryKey;
    private PdfAnnotationHighlightingMode highlightingMode;
    private PdfAction action;
    private PdfAdditionalActions actions;
    private PdfAnnotationBorderStyle borderStyle;
    private PdfWidgetAppearanceCharacteristics appearanceCharacteristics;
    private PdfInteractiveFormField interactiveFormField;
    public PdfAnnotationHighlightingMode HighlightingMode { get; }
    public PdfAction Action { get; }
    public PdfAnnotationActions Actions { get; }
    public PdfAnnotationBorderStyle BorderStyle { get; internal set; }
    public PdfWidgetAppearanceCharacteristics AppearanceCharacteristics { get; internal set; }
    public PdfInteractiveFormField InteractiveFormField { get; internal set; }
    internal PdfColor BackgroundColor { get; }
    internal string OnAppearanceName { get; }
    internal double BorderWidth { get; }
    internal Nullable`1<PdfAcroFormButtonStyle> ButtonStyle { get; internal set; }
    protected internal string SubtypeName { get; }
    internal PdfAnnotationType AnnotationType { get; }
    internal PdfWidgetAnnotation(PdfPage page, IPdfWidgetAnnotationBuilder widgetBuilder);
    internal PdfWidgetAnnotation(PdfPage page, PdfReaderDictionary dictionary);
    internal static string GetCaptionFromButtonStyle(PdfAcroFormButtonStyle style);
    public PdfAnnotationHighlightingMode get_HighlightingMode();
    public PdfAction get_Action();
    public PdfAnnotationActions get_Actions();
    public PdfAnnotationBorderStyle get_BorderStyle();
    internal void set_BorderStyle(PdfAnnotationBorderStyle value);
    public PdfWidgetAppearanceCharacteristics get_AppearanceCharacteristics();
    internal void set_AppearanceCharacteristics(PdfWidgetAppearanceCharacteristics value);
    public PdfInteractiveFormField get_InteractiveFormField();
    internal void set_InteractiveFormField(PdfInteractiveFormField value);
    internal PdfColor get_BackgroundColor();
    internal string get_OnAppearanceName();
    internal double get_BorderWidth();
    internal Nullable`1<PdfAcroFormButtonStyle> get_ButtonStyle();
    internal void set_ButtonStyle(Nullable`1<PdfAcroFormButtonStyle> value);
    protected internal virtual string get_SubtypeName();
    internal virtual PdfAnnotationType get_AnnotationType();
    private PdfInteractiveFormField ResolveInteractiveFormField(PdfObjectReference reference, HashSet`1<int> resolvedParentReference);
    protected internal virtual void Accept(IPdfAnnotationVisitor visitor);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection collection);
    protected internal virtual PdfRectangle GetAppearanceFormBoundingBox();
    internal PdfRectangle GetAppearanceContentRectangle();
    protected virtual bool ShouldRecreateAppearance(PdfForm form, PdfAnnotationAppearanceState appearanceState, string appearanceName);
    internal virtual void RebuildAppearance(IPdfExportFontProvider fontProvider);
    internal virtual PdfForm GetAppearanceForm(PdfAnnotationAppearanceState appearanceState);
    internal virtual PdfForm EnsurePaintForm(IPdfExportFontProvider fontProvider, PdfAnnotationAppearanceState appearanceState);
    protected virtual IPdfAnnotationAppearanceBuilder CreateAppearanceBuilder(PdfAnnotationAppearanceState appearanceState, string appearanceName, IPdfExportFontProvider fontProvider);
}
[PdfDefaultFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
public enum DevExpress.Pdf.PdfWidgetAnnotationTextPosition : Enum {
    public int value__;
    [PdfFieldValueAttribute("0")]
public static PdfWidgetAnnotationTextPosition NoIcon;
    [PdfFieldValueAttribute("1")]
public static PdfWidgetAnnotationTextPosition NoCaption;
    [PdfFieldValueAttribute("2")]
public static PdfWidgetAnnotationTextPosition CaptionBelowTheIcon;
    [PdfFieldValueAttribute("3")]
public static PdfWidgetAnnotationTextPosition CaptionAboveTheIcon;
    [PdfFieldValueAttribute("4")]
public static PdfWidgetAnnotationTextPosition CaptionToTheRightOfTheIcon;
    [PdfFieldValueAttribute("5")]
public static PdfWidgetAnnotationTextPosition CaptionToTheLeftOfTheIcon;
    [PdfFieldValueAttribute("6")]
public static PdfWidgetAnnotationTextPosition CaptionOverlaidDirectlyOnTheIcon;
}
public class DevExpress.Pdf.PdfWidgetAppearanceCharacteristics : object {
    private static string rotationAngleDictionaryKey;
    private static string borderColorDictionaryKey;
    private static string backgroundColorDictionaryKey;
    private static string captionDictionaryKey;
    private static string rolloverCaptionDictionaryKey;
    private static string alternateCaptionDictionaryKey;
    private static string normalIconDictionaryKey;
    private static string rolloverIconDictionaryKey;
    private static string alternateIconDictionaryKey;
    private static string iconFitDictionaryKey;
    private static string textPositionDictionaryKey;
    private PdfColor borderColor;
    private PdfColor backgroundColor;
    private string rolloverCaption;
    private string alternateCaption;
    private PdfXObject normalIcon;
    private PdfXObject rolloverIcon;
    private PdfXObject alternateIcon;
    private PdfIconFit iconFit;
    private PdfWidgetAnnotationTextPosition textPosition;
    private string caption;
    private int rotationAngle;
    public int RotationAngle { get; internal set; }
    public PdfColor BorderColor { get; internal set; }
    public PdfColor BackgroundColor { get; internal set; }
    public string Caption { get; internal set; }
    public string RolloverCaption { get; internal set; }
    public string AlternateCaption { get; internal set; }
    public PdfXObject NormalIcon { get; internal set; }
    public PdfXObject RolloverIcon { get; internal set; }
    public PdfXObject AlternateIcon { get; internal set; }
    public PdfIconFit IconFit { get; internal set; }
    public PdfWidgetAnnotationTextPosition TextPosition { get; internal set; }
    internal PdfWidgetAppearanceCharacteristics(IPdfWidgetAppearanceCharacteristicsBuilder builder);
    internal PdfWidgetAppearanceCharacteristics(PdfReaderDictionary dictionary);
    public int get_RotationAngle();
    internal void set_RotationAngle(int value);
    public PdfColor get_BorderColor();
    internal void set_BorderColor(PdfColor value);
    public PdfColor get_BackgroundColor();
    internal void set_BackgroundColor(PdfColor value);
    public string get_Caption();
    internal void set_Caption(string value);
    public string get_RolloverCaption();
    internal void set_RolloverCaption(string value);
    public string get_AlternateCaption();
    internal void set_AlternateCaption(string value);
    public PdfXObject get_NormalIcon();
    internal void set_NormalIcon(PdfXObject value);
    public PdfXObject get_RolloverIcon();
    internal void set_RolloverIcon(PdfXObject value);
    public PdfXObject get_AlternateIcon();
    internal void set_AlternateIcon(PdfXObject value);
    public PdfIconFit get_IconFit();
    internal void set_IconFit(PdfIconFit value);
    public PdfWidgetAnnotationTextPosition get_TextPosition();
    internal void set_TextPosition(PdfWidgetAnnotationTextPosition value);
    internal PdfWriterDictionary ToWritableObject(IPdfWrittenObjectsCollection collection);
}
public abstract class DevExpress.Pdf.PdfWidgetFacade : object {
    private PdfDocumentStateBase documentState;
    private string fontName;
    private bool fontBold;
    private bool fontItalic;
    private double fontSize;
    private double characterSpacing;
    private double wordSpacing;
    private double horizontalScaling;
    private PdfRGBColor fontColor;
    [CompilerGeneratedAttribute]
private PdfWidgetAnnotationState <WidgetAnnotationState>k__BackingField;
    [CompilerGeneratedAttribute]
private PdfInteractiveFormField <FormField>k__BackingField;
    protected PdfWidgetAnnotationState WidgetAnnotationState { get; }
    protected PdfInteractiveFormField FormField { get; }
    public int PageNumber { get; }
    public PdfAnnotationFlags Flags { get; public set; }
    public int RotationAngle { get; public set; }
    public PdfRGBColor BackgroundColor { get; public set; }
    public PdfRGBColor BorderColor { get; public set; }
    public double BorderWidth { get; public set; }
    public PdfBorderStyle BorderStyle { get; public set; }
    public PdfRectangle Rectangle { get; public set; }
    public string FontName { get; public set; }
    public bool FontBold { get; public set; }
    public bool FontItalic { get; public set; }
    public double FontSize { get; public set; }
    public double CharacterSpacing { get; public set; }
    public double WordSpacing { get; public set; }
    public double HorizontalScaling { get; public set; }
    public PdfRGBColor FontColor { get; public set; }
    public Nullable`1<PdfTextJustification> TextJustification { get; public set; }
    internal PdfWidgetFacade(PdfDocumentStateBase documentState, PdfInteractiveFormField formField, PdfWidgetAnnotationState annotationState);
    [CompilerGeneratedAttribute]
protected PdfWidgetAnnotationState get_WidgetAnnotationState();
    [CompilerGeneratedAttribute]
protected PdfInteractiveFormField get_FormField();
    public int get_PageNumber();
    public PdfAnnotationFlags get_Flags();
    public void set_Flags(PdfAnnotationFlags value);
    public int get_RotationAngle();
    public void set_RotationAngle(int value);
    public PdfRGBColor get_BackgroundColor();
    public void set_BackgroundColor(PdfRGBColor value);
    public PdfRGBColor get_BorderColor();
    public void set_BorderColor(PdfRGBColor value);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public PdfBorderStyle get_BorderStyle();
    public void set_BorderStyle(PdfBorderStyle value);
    public PdfRectangle get_Rectangle();
    public void set_Rectangle(PdfRectangle value);
    public string get_FontName();
    public void set_FontName(string value);
    public bool get_FontBold();
    public void set_FontBold(bool value);
    public bool get_FontItalic();
    public void set_FontItalic(bool value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public double get_CharacterSpacing();
    public void set_CharacterSpacing(double value);
    public double get_WordSpacing();
    public void set_WordSpacing(double value);
    public double get_HorizontalScaling();
    public void set_HorizontalScaling(double value);
    public PdfRGBColor get_FontColor();
    public void set_FontColor(PdfRGBColor value);
    public Nullable`1<PdfTextJustification> get_TextJustification();
    public void set_TextJustification(Nullable`1<PdfTextJustification> value);
    private void SetTextAppearance(Action`1<PdfInteractiveFormFieldTextAppearance> setter);
    private void UpdateFont();
}
public class DevExpress.Pdf.PdfWord : object {
    private IList`1<PdfWordPart> parts;
    private Lazy`1<IList`1<PdfWordSegment>> segments;
    private string text;
    private IList`1<PdfOrientedRectangle> rectangles;
    private List`1<PdfCharacter> characters;
    public IList`1<PdfWordSegment> Segments { get; }
    public string Text { get; }
    public IList`1<PdfOrientedRectangle> Rectangles { get; }
    public IList`1<PdfCharacter> Characters { get; }
    internal IList`1<PdfWordPart> Parts { get; }
    internal PdfWord(IList`1<PdfWordPart> parts);
    public IList`1<PdfWordSegment> get_Segments();
    public string get_Text();
    public IList`1<PdfOrientedRectangle> get_Rectangles();
    public IList`1<PdfCharacter> get_Characters();
    internal IList`1<PdfWordPart> get_Parts();
}
public class DevExpress.Pdf.PdfWordSegment : object {
    private PdfWordPart part;
    public PdfOrientedRectangle Rectangle { get; }
    public IList`1<PdfCharacter> Characters { get; }
    public string Text { get; }
    internal PdfWordSegment(PdfWordPart part);
    public PdfOrientedRectangle get_Rectangle();
    public IList`1<PdfCharacter> get_Characters();
    public string get_Text();
}
public class DevExpress.Pdf.PdfXFAForm : object {
    private string content;
    public string Content { get; }
    internal PdfXFAForm(Byte[] data);
    internal PdfXFAForm(PdfReaderArray array);
    public string get_Content();
    internal PdfWriterStream Write(IPdfWrittenObjectsCollection objects);
}
public abstract class DevExpress.Pdf.PdfXObject : PdfObject {
    internal static string DictionaryType;
    private static string structParentDictionaryKey;
    private static string openPrepressInterfaceDictionaryKey;
    private PdfMetadata metadata;
    private Nullable`1<int> structParent;
    private PdfOpenPrepressInterface openPrepressInterface;
    private PdfOptionalContent optionalContent;
    public PdfMetadata Metadata { get; }
    public Nullable`1<int> StructParent { get; }
    public PdfOpenPrepressInterface OpenPrepressInterface { get; }
    public PdfOptionalContent OptionalContent { get; }
    internal PdfXObject(XObjectInfo info);
    protected PdfXObject(PdfReaderDictionary dictionary);
    internal static PdfXObject Parse(PdfReaderStream stream, PdfResources parentResources, string defaultSubtype);
    public PdfMetadata get_Metadata();
    public Nullable`1<int> get_StructParent();
    public PdfOpenPrepressInterface get_OpenPrepressInterface();
    public PdfOptionalContent get_OptionalContent();
    protected internal virtual object ToWritableObject(IPdfWrittenObjectsCollection objects);
    protected virtual PdfWriterDictionary CreateDictionary(IPdfWrittenObjectsCollection objects);
    protected abstract virtual PdfStream CreateStream(IPdfWrittenObjectsCollection objects);
    private sealed virtual override PdfIndirectObjectIdentifier DevExpress.Pdf.Native.DocumentSigning.IPdfObject.Write(PdfObjectStorage collection);
    protected virtual void FillDictionary(PdfDictionaryPrimitive dictionary, PdfObjectStorage collection);
    protected abstract virtual PdfIndirectObjectIdentifier Write(PdfObjectStorage collection);
}
public class DevExpress.Pdf.PdfXYZDestination : PdfDestination {
    internal static string Name;
    private Nullable`1<double> left;
    private Nullable`1<double> top;
    private Nullable`1<double> zoom;
    public Nullable`1<double> Left { get; }
    public Nullable`1<double> Top { get; }
    public Nullable`1<double> Zoom { get; }
    public PdfXYZDestination(PdfPage page, Nullable`1<double> left, Nullable`1<double> top, Nullable`1<double> zoom);
    internal PdfXYZDestination(PdfDocumentCatalog documentCatalog, object pageObject, Nullable`1<double> left, Nullable`1<double> top, Nullable`1<double> zoom);
    private PdfXYZDestination(PdfDocumentCatalog documentCatalog, PdfXYZDestination destination, int objectNumber);
    internal static void ValidateZoomValue(Nullable`1<double> zoom);
    public Nullable`1<double> get_Left();
    public Nullable`1<double> get_Top();
    public Nullable`1<double> get_Zoom();
    protected virtual PdfDestination CreateDuplicate(PdfDocumentCatalog documentCatalog, int objectNumber);
    protected internal virtual PdfTarget CreateTarget(IList`1<PdfPage> pages);
    protected virtual void AddWriteableParameters(IList`1<object> parameters);
}
public enum DevExpress.Pdf.PdfZugferdConformanceLevel : Enum {
    public int value__;
    public static PdfZugferdConformanceLevel None;
    public static PdfZugferdConformanceLevel Minimum;
    public static PdfZugferdConformanceLevel Basic;
    public static PdfZugferdConformanceLevel Comfort;
    public static PdfZugferdConformanceLevel Extended;
    public static PdfZugferdConformanceLevel BasicWL;
    public static PdfZugferdConformanceLevel EN16931;
    public static PdfZugferdConformanceLevel XRechnung;
}
public enum DevExpress.Pdf.PdfZugferdVersion : Enum {
    public int value__;
    public static PdfZugferdVersion Version1_0;
    public static PdfZugferdVersion Version2_0_1;
    public static PdfZugferdVersion Version2_1;
}
public class DevExpress.Pdf.Pkcs7Signer : Pkcs7SignerBase {
    private static MethodInfo ecdsaGetPrivateKeyMethod;
    private static MethodInfo rsaGetPrivateKeyMethod;
    private static Type hashAlgorithmType;
    private static Type rsaSignaturePaddingType;
    private static object rsaSignaturePkcs1Padding;
    private IEnumerable`1<Byte[]> certificates;
    private SignatureHelper signatureHelper;
    [CompilerGeneratedAttribute]
private IDigestCalculator <DigestCalculator>k__BackingField;
    protected IDigestCalculator DigestCalculator { get; }
    protected string SigningAlgorithmOID { get; }
    private static Pkcs7Signer();
    public Pkcs7Signer(X509Certificate2 certificate, ICertificateStoreProvider provider, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient, IOcspClient ocspClient, ICrlClient crlClient, PdfSignatureProfile profile);
    public Pkcs7Signer(X509Certificate2 certificate, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient, IOcspClient ocspClient, ICrlClient crlClient, PdfSignatureProfile profile);
    public Pkcs7Signer(X509Certificate2 certificate, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient);
    public Pkcs7Signer(X509Certificate2 certificate);
    public Pkcs7Signer(Stream stream, string password, ICertificateStoreProvider provider, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient, IOcspClient ocspClient, ICrlClient crlClient, PdfSignatureProfile profile);
    public Pkcs7Signer(Stream stream, string password, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient, IOcspClient ocspClient, ICrlClient crlClient, PdfSignatureProfile profile);
    public Pkcs7Signer(string fileName, string password, ICertificateStoreProvider provider, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient, IOcspClient ocspClient, ICrlClient crlClient, PdfSignatureProfile profile);
    public Pkcs7Signer(string fileName, string password, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient, IOcspClient ocspClient, ICrlClient crlClient, PdfSignatureProfile profile);
    public Pkcs7Signer(Stream stream, string password, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient);
    public Pkcs7Signer(Stream stream, string password);
    public Pkcs7Signer(string fileName, string password, HashAlgorithmType hashAlgorithm, ITsaClient tsaClient);
    public Pkcs7Signer(string fileName, string password);
    public Pkcs7Signer(X509Certificate2 certificate, HashAlgorithmType hashAlgorithm);
    public Pkcs7Signer(Stream stream, string password, HashAlgorithmType hashAlgorithm);
    public Pkcs7Signer(string fileName, string password, HashAlgorithmType hashAlgorithm);
    private static RSA GetRSAPrivateKey(X509Certificate2 certificate);
    private static Byte[] ReadFromStream(Stream stream);
    private static ECDsa GetECDsaPrivateKey(X509Certificate2 certificate);
    private static SignatureHelper CreateSignatureHelper(X509Certificate2 certificate, HashAlgorithmType hashAlgorithm);
    private static IList`1<X509Certificate2> BuildCertificateChain(Stream stream, string password, ICertificateStoreProvider provider);
    private static bool IsSelfSignedCertificate(X509Certificate2 certificate);
    private static IList`1<X509Certificate2> BuildCertificateChain(X509Certificate2 certificate, ICertificateStoreProvider provider);
    private static IList`1<X509Certificate2> BuildCertificateChain(X509Certificate2 certificate, Func`2<Byte[], X509Certificate2> getCertificateBySubjectDN);
    [SecuritySafeCriticalAttribute]
private static List`1<X509Certificate2> BuildSystemCertificateChain(X509Certificate2 certificate);
    [CompilerGeneratedAttribute]
protected virtual IDigestCalculator get_DigestCalculator();
    protected virtual string get_SigningAlgorithmOID();
    protected virtual Byte[] SignDigest(Byte[] digest);
    protected virtual IEnumerable`1<Byte[]> GetCertificates();
}
public abstract class DevExpress.Pdf.Pkcs7SignerBase : object {
    private ITsaClient tsaClient;
    private IOcspClient ocspClient;
    private ICrlClient crlClient;
    private bool isPades;
    private Lazy`1<IList`1<X509Certificate>> certificateChain;
    private Lazy`1<IList`1<Byte[]>> crlList;
    private Lazy`1<BerSet> certificateVector;
    public string Type { get; }
    public string Filter { get; }
    public string SubFilter { get; }
    protected IDigestCalculator DigestCalculator { get; }
    protected string SigningAlgorithmOID { get; }
    internal IList`1<X509Certificate> CertificateChain { get; }
    private IList`1<Byte[]> CrlList { get; }
    private BerSet CertificateVector { get; }
    protected Pkcs7SignerBase(ITsaClient tsaClient, IOcspClient ocspClient, ICrlClient crlClient, PdfSignatureProfile profile);
    public sealed virtual string get_Type();
    public virtual string get_Filter();
    public virtual string get_SubFilter();
    protected abstract virtual IDigestCalculator get_DigestCalculator();
    protected abstract virtual string get_SigningAlgorithmOID();
    internal IList`1<X509Certificate> get_CertificateChain();
    private IList`1<Byte[]> get_CrlList();
    private BerSet get_CertificateVector();
    public sealed virtual Byte[] BuildSignature(Stream stream);
    public sealed virtual Byte[] BuildSignature(Byte[] digest, string digestAlgorithmOID);
    public virtual int GetSignatureSize();
    private DerSet BuildUnsignedAttributes(Byte[] signedDigest);
    private DerSet BuildSignedAttributes(Byte[] dataHash, DerSequence revocationInfoArchival, X509Certificate signingCertificate);
    private Byte[] CreateSignature(Byte[] dataDigest, string hashOid);
    private BerSet BuildCertificatesVector();
    private IList`1<X509Certificate> BuildCertificateChain();
    private DerSequence BuildRevocationInfoArchival();
    private IList`1<Byte[]> GetCrl();
    private IssuerAndSerialNumber GetIssuerAndSerialNumber(X509Certificate certificate);
    protected abstract virtual Byte[] SignDigest(Byte[] digest);
    protected abstract virtual IEnumerable`1<Byte[]> GetCertificates();
}
public class DevExpress.Pdf.Xmp.AdobePdfProperties : object {
    private XmpNamespaceHelper namespaceHelper;
    public string PDFVersion { get; public set; }
    public string Keywords { get; public set; }
    public string Producer { get; public set; }
    public Nullable`1<bool> Trapped { get; public set; }
    internal AdobePdfProperties(XmpDocument document);
    public string get_PDFVersion();
    public void set_PDFVersion(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public string get_Producer();
    public void set_Producer(string value);
    public Nullable`1<bool> get_Trapped();
    public void set_Trapped(Nullable`1<bool> value);
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Xmp.CustomProperties : object {
    private XmpNamespaceHelper namespaceHelper;
    public string Item { get; public set; }
    public CustomProperties(XmpDocument document, string namespaceUri);
    internal CustomProperties(XmpDocument document);
    public string get_Item(string localName);
    public void set_Item(string localName, string value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class DevExpress.Pdf.Xmp.DublinCoreProperties : object {
    private XmpNamespaceHelper namespaceHelper;
    public XmpArray Contributor { get; }
    public string Coverage { get; public set; }
    public XmpArray Creator { get; }
    public XmpArray Date { get; }
    public XmpLanguageAlternative Description { get; }
    public string Format { get; public set; }
    public string Identifier { get; public set; }
    public XmpArray Language { get; }
    public XmpArray Publisher { get; }
    public XmpArray Relation { get; }
    public XmpLanguageAlternative Rights { get; }
    public string Source { get; public set; }
    public XmpArray Subject { get; }
    public XmpLanguageAlternative Title { get; }
    public XmpArray Type { get; }
    internal DublinCoreProperties(XmpDocument document);
    public XmpArray get_Contributor();
    public string get_Coverage();
    public void set_Coverage(string value);
    public XmpArray get_Creator();
    public XmpArray get_Date();
    public XmpLanguageAlternative get_Description();
    public string get_Format();
    public void set_Format(string value);
    public string get_Identifier();
    public void set_Identifier(string value);
    public XmpArray get_Language();
    public XmpArray get_Publisher();
    public XmpArray get_Relation();
    public XmpLanguageAlternative get_Rights();
    public string get_Source();
    public void set_Source(string value);
    public XmpArray get_Subject();
    public XmpLanguageAlternative get_Title();
    public XmpArray get_Type();
}
internal static class DevExpress.Pdf.Xmp.Internal.Constants : object {
}
internal interface DevExpress.Pdf.Xmp.Internal.IXmpElementRootProvider {
    public XElement NewItemsContainer { get; }
    public abstract virtual XElement get_NewItemsContainer();
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Pdf.Xmp.Internal.XmpArrayStorage : XmpValueStorage`1<int> {
    private List`1<XmpValueNode> values;
    public IReadOnlyList`1<XmpValueNode> Values { get; }
    public XmpValueNode Item { get; }
    public int Count { get; }
    public XmpArrayStorage(XmpDocumentManager documentManager, XElement arrayElement, List`1<XmpValueNode> values);
    public IReadOnlyList`1<XmpValueNode> get_Values();
    public virtual XmpValueNode get_Item(int index);
    public virtual int get_Count();
    public void Add(DateTime date);
    public void Add(string value);
    public void Add(int value);
    public void Add(float value);
    public void Add(bool value);
    public XmpStructure AddStructure();
    public XmpArray AddArray();
    public XmpArray AddArray(XmpArrayType arrayType);
    public XmpSimpleNode AddSimpleValue(string value);
    public bool Contains(XmpValueNode item);
    public bool Remove(XmpValueNode item);
    public void Clear();
    public void RemoveAt(int index);
    private T AddValue(T node);
}
internal class DevExpress.Pdf.Xmp.Internal.XmpAttributeQualifier : XmpQualifier {
    private XAttribute attribute;
    public string Value { get; public set; }
    internal XmpAttributeQualifier(XmpDocumentManager document, XAttribute attribute);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void RemoveFromParent();
    internal virtual void Serialize(XmpSerializationContext context);
}
internal static class DevExpress.Pdf.Xmp.Internal.XmpDocumentHelpers : object {
    public static void AppendPdfAExtension(XmpDocument document, XmpPdfAExtension extension);
    public static XElement CreateRDFElement();
    public static XAttribute CreateNamespaceDeclaration(string namespaceUri, string prefix);
    public static XmpSimpleNode CreateSimpleElement(XmpDocumentManager document, XElement parent, XmpName name, string value, bool isUri);
    public static XmpStructure CreateStructure(XmpDocumentManager document, XElement parent, XmpName name);
    public static XmpArray CreateArray(XmpDocumentManager document, XElement parent, XmpName name, XmpArrayType arrayType);
}
internal class DevExpress.Pdf.Xmp.Internal.XmpDocumentManager : object {
    private static IDictionary`2<string, string> knownNamespaces;
    private XElement root;
    private IDictionary`2<string, string> namespaceToPrefix;
    private IDictionary`2<string, string> prefixToNamespace;
    [CompilerGeneratedAttribute]
private string <DefaultNamespacePrefix>k__BackingField;
    private XElement descriptionElement;
    public string DefaultNamespacePrefix { get; public set; }
    public XElement Root { get; }
    private XElement DevExpress.Pdf.Xmp.Internal.IXmpElementRootProvider.NewItemsContainer { get; }
    public XmpDocumentManager(XElement rdfElement);
    private static XmpDocumentManager();
    [CompilerGeneratedAttribute]
public string get_DefaultNamespacePrefix();
    [CompilerGeneratedAttribute]
public void set_DefaultNamespacePrefix(string value);
    public XElement get_Root();
    public bool ContainsNamespace(string nsUri);
    public bool RegisterNamespace(string nsUri, string preferredPrefix);
    public string GetKnownNamespacePrefix(string namespaceUri);
    public string GetUserDefinedPrefixForNamespace(string namespaceUri);
    public string GetUserDefinedNamespaceForPrefix(string prefix);
    public string GetDocumentNamespaceForPrefix(string prefix);
    public string GetDocumentPrefixForNamespace(string namespaceUri);
    public string CreateNewPrefixForNamespace(XElement parent, string namespaceUri);
    public void RemoveEmptyRoots();
    private sealed virtual override XElement DevExpress.Pdf.Xmp.Internal.IXmpElementRootProvider.get_NewItemsContainer();
}
internal class DevExpress.Pdf.Xmp.Internal.XmpDocumentParser : object {
    private XDocument document;
    private XmpDocumentParser(XDocument document);
    private static RdfTermType GetTermType(XName name);
    private static bool IsCoreSyntaxTerm(RdfTermType term);
    private static bool IsSyntaxTerm(RdfTermType term);
    private static bool IsOldTerm(RdfTermType term);
    private static bool IsPropertyElementName(RdfTermType term);
    private static bool IsWhitespaceNode(XNode node);
    public static IList`1<XmpDocument> Parse(XDocument document);
    [IteratorStateMachineAttribute("DevExpress.Pdf.Xmp.Internal.XmpDocumentParser/<FindRdfRoots>d__11")]
private IEnumerable`1<XElement> FindRdfRoots(XElement root);
    private IList`1<XmpDocument> ParseXmpDocuments();
    private XmpDocument ParseRdf(XElement rdfElement);
    private Dictionary`2<XmpName, XmpValueNode> ParseNodeElementList(XmpDocumentManager xmpDocument, XElement rdfElement, XmpNodeBuilder builder);
    private void ParseNodeElement(XmpDocumentManager xmpDocument, XElement element, XmpNodeBuilder nodeBuilder);
    private void ParseNodeElementAttribs(XmpDocumentManager xmpDocument, XElement element, XmpNodeBuilder nodeBuilder);
    private void ParsePropertyElementList(XmpDocumentManager xmpDocument, XElement element, XmpNodeBuilder nodeBuilder);
    private void ParsePropertyElement(XmpDocumentManager xmpDocument, XElement propertyElement, XmpNodeBuilder nodeBuilder);
    private XmpNodeBuilder CreateBuilder(XmpNodeBuilder parent, XmpDocumentManager xmpDocument, XElement element);
    private void ParseResourcePropertyElement(XmpDocumentManager xmpDocument, XElement element, XmpNodeBuilder parentNodeBuilder);
    private void ParseEmptyPropertyElement(XmpDocumentManager xmpDocument, XElement element, XmpNodeBuilder nodeBuilder);
    private void ParseLiteralPropertyElement(XmpDocumentManager xmpDocument, XElement element, XmpNodeBuilder nodeBuilder);
    private void ParseTypeResourcePropertyElement(XmpDocumentManager xmpDocument, XElement element, XmpNodeBuilder nodeBuilder);
    [CompilerGeneratedAttribute]
private XmpDocument <ParseXmpDocuments>b__12_0(XElement rdfRoot);
}
internal class DevExpress.Pdf.Xmp.Internal.XmpElementQualifier : XmpQualifier {
    private XElement element;
    public string Value { get; public set; }
    internal XmpElementQualifier(XmpDocumentManager document, XElement element);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void RemoveFromParent();
    internal virtual void Serialize(XmpSerializationContext context);
}
[ExtensionAttribute]
internal static class DevExpress.Pdf.Xmp.Internal.XmpExtensions : object {
    private static Nullable`1<T> Parse(string val, TryParse`1<T> tryParse);
    [ExtensionAttribute]
public static Nullable`1<bool> ToBoolean(string value);
    [ExtensionAttribute]
public static Nullable`1<DateTime> ToDate(string value);
    [ExtensionAttribute]
public static Nullable`1<int> ToInteger(string value);
    [ExtensionAttribute]
public static Nullable`1<float> ToFloat(string value);
    [ExtensionAttribute]
public static Nullable`1<Guid> ToGuid(string value);
    [ExtensionAttribute]
public static string ToXmpDate(Nullable`1<DateTime> value);
    [ExtensionAttribute]
public static string ToXmpInteger(Nullable`1<int> value);
    [ExtensionAttribute]
public static string ToXmpFloat(Nullable`1<float> value);
    [ExtensionAttribute]
public static string ToXmpBoolean(Nullable`1<bool> value);
    [ExtensionAttribute]
public static string ToXmpDate(DateTime value);
    [ExtensionAttribute]
public static string ToXmpInteger(int value);
    [ExtensionAttribute]
public static string ToXmpReal(float value);
    [ExtensionAttribute]
public static string ToXmpBoolean(bool value);
}
internal class DevExpress.Pdf.Xmp.Internal.XmpNamespaceHelper : object {
    private XmpStructureStorage storage;
    private string namespaceUri;
    public XmpNamespaceHelper(XmpStructureStorage storage, string namespaceUri);
    private XmpName GetName(string localName);
    private XmpSimpleNode EnsureSimpleNode(string localName);
    public XmpArray EnsureArray(string localName, XmpArrayType type);
    public XmpStructure EnsureStructure(string localName);
    public XmpLanguageAlternative GetLanguageAlternative(string localName);
    public string GetText(string localName);
    public void SetText(string localName, string value);
    public Nullable`1<DateTime> GetDate(string localName);
    public void SetDate(string localName, Nullable`1<DateTime> time);
    public Nullable`1<int> GetInteger(string localName);
    public void SetInteger(string localName, Nullable`1<int> value);
    public Nullable`1<float> GetFloat(string localName);
    public void SetFloat(string localName, Nullable`1<float> value);
    public Nullable`1<bool> GetBoolean(string localName);
    public void SetBoolean(string localName, Nullable`1<bool> value);
    public IEnumerator`1<KeyValuePair`2<string, string>> GetSimpleValueEnumerator();
    [CompilerGeneratedAttribute]
private bool <GetSimpleValueEnumerator>b__18_0(KeyValuePair`2<XmpName, XmpValueNode> val);
}
internal class DevExpress.Pdf.Xmp.Internal.XmpPdfAExtension : object {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XmpPdfAExtensionProperty> <Properties>k__BackingField;
    public string Schema { get; public set; }
    public string NamespaceUri { get; public set; }
    public string Prefix { get; public set; }
    public IList`1<XmpPdfAExtensionProperty> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_NamespaceUri();
    [CompilerGeneratedAttribute]
public void set_NamespaceUri(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public IList`1<XmpPdfAExtensionProperty> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IList`1<XmpPdfAExtensionProperty> value);
}
internal class DevExpress.Pdf.Xmp.Internal.XmpPdfAExtensionProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; public set; }
    public string ValueType { get; public set; }
    public string Category { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
internal class DevExpress.Pdf.Xmp.Internal.XmpSerializationContext : object {
    private XElement root;
    private XElement element;
    [CompilerGeneratedAttribute]
private XmpSerializationOptions <Options>k__BackingField;
    public XmpSerializationOptions Options { get; }
    private XmpSerializationContext(XElement root, XElement element, XmpSerializationOptions options);
    public XmpSerializationContext(XElement element, XmpSerializationOptions options);
    [CompilerGeneratedAttribute]
public XmpSerializationOptions get_Options();
    public XmpSerializationContext CreateChildContext(XmpName name, string prefix);
    public XmpSerializationContext AddSimpleElement(XmpName name, string prefix, string value);
    public void AddAttributeElement(XmpName name, string prefix, string value);
    private void EnsureNamespace(string namespaceUri, string prefix);
}
[DefaultMemberAttribute("Item")]
internal class DevExpress.Pdf.Xmp.Internal.XmpStructureStorage : XmpValueStorage`1<XmpName> {
    private Dictionary`2<XmpName, XmpValueNode> values;
    public int Count { get; }
    public IReadOnlyDictionary`2<XmpName, XmpValueNode> Values { get; }
    public XmpValueNode Item { get; }
    public XmpValueNode Item { get; }
    public XmpStructureStorage(XmpDocumentManager manager, IXmpElementRootProvider provider, Dictionary`2<XmpName, XmpValueNode> values);
    public XmpStructureStorage(XmpDocumentManager manager, XElement itemsElement, Dictionary`2<XmpName, XmpValueNode> values);
    public virtual int get_Count();
    public IReadOnlyDictionary`2<XmpName, XmpValueNode> get_Values();
    public virtual XmpValueNode get_Item(XmpName name);
    public XmpValueNode get_Item(string qualifiedName);
    public bool ContainsKey(XmpName name);
    public XmpArray GetArray(string qualifiedName);
    public XmpSimpleNode GetSimpleValue(string qualifiedName);
    public XmpStructure GetStructure(string qualifiedName);
    public string GetString(string qualifiedName);
    public Nullable`1<bool> GetBoolean(string qualifiedName);
    public Nullable`1<DateTime> GetDate(string qualifiedName);
    public Nullable`1<int> GetInteger(string qualifiedName);
    public Nullable`1<float> GetFloat(string qualifiedName);
    public void Add(string qualifiedName, string value);
    public void Add(string qualifiedName, bool value);
    public void Add(string qualifiedName, int value);
    public void Add(string qualifiedName, float value);
    public void Add(string qualifiedName, DateTime value);
    public void Add(XmpName name, string value);
    public void Add(XmpName name, bool value);
    public void Add(XmpName name, int value);
    public void Add(XmpName name, float value);
    public void Add(XmpName name, DateTime value);
    public XmpStructure CreateStructure(string qualifiedName);
    public XmpStructure CreateStructure(XmpName name);
    public XmpArray CreateArray(string qualifiedName);
    public XmpArray CreateArray(string qualifiedName, XmpArrayType arrayType);
    public XmpArray CreateArray(XmpName name);
    public XmpArray CreateArray(XmpName name, XmpArrayType arrayType);
    public XmpSimpleNode CreateSimpleValue(string qualifiedName, string value, bool isUri);
    public XmpSimpleNode CreateSimpleValue(string qualifiedName, string value);
    public XmpSimpleNode CreateSimpleValue(XmpName name, string value, bool isUri);
    public XmpSimpleNode CreateSimpleValue(XmpName name, string value);
    private T CreateValue(T node);
    public void Clear();
    public bool Remove(XmpName key);
    public bool Remove(string qualifiedName);
}
[DefaultMemberAttribute("Item")]
internal abstract class DevExpress.Pdf.Xmp.Internal.XmpValueStorage`1 : object {
    private IXmpElementRootProvider elementRootProvider;
    [CompilerGeneratedAttribute]
private XmpDocumentManager <DocumentManager>k__BackingField;
    protected XmpDocumentManager DocumentManager { get; }
    public int Count { get; }
    public XmpValueNode Item { get; }
    protected XmpValueStorage`1(XmpDocumentManager manager, XElement itemsElement);
    protected XmpValueStorage`1(XmpDocumentManager manager, IXmpElementRootProvider elementRootProvider);
    [CompilerGeneratedAttribute]
protected XmpDocumentManager get_DocumentManager();
    public abstract virtual int get_Count();
    public abstract virtual XmpValueNode get_Item(TIndex index);
    public string GetString(TIndex index);
    public Nullable`1<bool> GetBoolean(TIndex index);
    public Nullable`1<DateTime> GetDate(TIndex index);
    public Nullable`1<int> GetInteger(TIndex index);
    public Nullable`1<float> GetFloat(TIndex index);
    public XmpArray GetArray(TIndex index);
    public XmpSimpleNode GetSimpleValue(TIndex index);
    public XmpStructure GetStructure(TIndex index);
    protected XmpStructure CreateNewStructure(XmpName name);
    protected XmpArray CreateNewArray(XmpName name, XmpArrayType arrayType);
    protected XmpSimpleNode CreateNewSimpleElement(XmpName name, string value, bool isUri);
    protected XmpName GetXmpNameFromString(string qualifiedName, bool throwExceptionIfPrefixNotFound);
    private XElement GetTopLevelDescription(XElement element);
    private T CreateValue(XmpName name, Func`3<XmpDocumentManager, XElement, T> createValue);
}
internal enum DevExpress.Pdf.Xmp.Internal.XmpXpacketSerializationMode : Enum {
    public int value__;
    public static XmpXpacketSerializationMode Omit;
    public static XmpXpacketSerializationMode Read;
    public static XmpXpacketSerializationMode Write;
}
public class DevExpress.Pdf.Xmp.PdfAProperties : object {
    private XmpNamespaceHelper namespaceHelper;
    public Nullable`1<int> Part { get; public set; }
    public string Conformance { get; public set; }
    internal PdfAProperties(XmpDocument document);
    public Nullable`1<int> get_Part();
    public void set_Part(Nullable`1<int> value);
    public string get_Conformance();
    public void set_Conformance(string value);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{NamespacePrefix,nq}:{Name.LocalName,nq}, Array, {ArrayType}, Count = {Count}")]
public class DevExpress.Pdf.Xmp.XmpArray : XmpValueNode {
    private XmpArrayStorage storage;
    private XElement element;
    [CompilerGeneratedAttribute]
private XmpArrayType <ArrayType>k__BackingField;
    public XmpValueType Type { get; }
    public IReadOnlyList`1<XmpValueNode> Values { get; }
    public XmpArrayType ArrayType { get; }
    public int Count { get; }
    public XmpValueNode Item { get; }
    internal XmpArray(XmpDocumentManager document, XElement element, XElement arrayElement, List`1<XmpValueNode> array, XmpArrayType arrayType, List`1<XmpQualifier> qualifiers);
    public virtual XmpValueType get_Type();
    public IReadOnlyList`1<XmpValueNode> get_Values();
    [CompilerGeneratedAttribute]
public XmpArrayType get_ArrayType();
    public int get_Count();
    public XmpValueNode get_Item(int index);
    public string GetString(int index);
    public Nullable`1<DateTime> GetDate(int index);
    public Nullable`1<int> GetInteger(int index);
    public Nullable`1<float> GetFloat(int index);
    public XmpArray GetArray(int index);
    public XmpSimpleNode GetSimpleValue(int index);
    public XmpStructure GetStructure(int index);
    public void Add(string value);
    public void Add(bool value);
    public void Add(DateTime value);
    public void Add(int value);
    public void Add(float value);
    public XmpStructure AddStructure();
    public XmpArray AddArray();
    public XmpArray AddArray(XmpArrayType arrayType);
    public XmpSimpleNode AddSimpleValue(string value);
    public void Clear();
    public bool Contains(XmpValueNode item);
    public bool Remove(XmpValueNode item);
    public void RemoveAt(int index);
    internal virtual void RemoveFromParent();
    internal virtual void Serialize(XmpSerializationContext context);
    protected virtual void AddLanguageAttribute(XAttribute attribute);
}
public enum DevExpress.Pdf.Xmp.XmpArrayType : Enum {
    public int value__;
    public static XmpArrayType Undefined;
    public static XmpArrayType Unordered;
    public static XmpArrayType Ordered;
    public static XmpArrayType Alternative;
}
[DefaultMemberAttribute("Item")]
public class DevExpress.Pdf.Xmp.XmpDocument : object {
    private XmpStructureStorage storage;
    private XmpDocumentManager documentManager;
    private Lazy`1<DublinCoreProperties> dublinCoreNamespace;
    private Lazy`1<XmpProperties> xmpProperties;
    private Lazy`1<AdobePdfProperties> pdfProperties;
    private Lazy`1<XmpRightsManagementProperties> rightsManagementProperties;
    private Lazy`1<CustomProperties> customProperties;
    private Lazy`1<PdfAProperties> pdfAProperties;
    internal XmpStructureStorage Storage { get; }
    public int Count { get; }
    public IReadOnlyDictionary`2<XmpName, XmpValueNode> Values { get; }
    public XmpValueNode Item { get; }
    public XmpValueNode Item { get; }
    public DublinCoreProperties DublinCoreProperties { get; }
    public XmpProperties XmpProperties { get; }
    public AdobePdfProperties PdfProperties { get; }
    public XmpRightsManagementProperties RightsManagementProperties { get; }
    public CustomProperties CustomProperties { get; }
    public PdfAProperties PdfAProperties { get; }
    internal XmpDocument(XmpDocumentManager documentManager, Dictionary`2<XmpName, XmpValueNode> values);
    public static XmpDocument FromString(string xmlString);
    public static XmpDocument FromStream(Stream xmlStream);
    internal XmpStructureStorage get_Storage();
    public int get_Count();
    public IReadOnlyDictionary`2<XmpName, XmpValueNode> get_Values();
    public XmpValueNode get_Item(XmpName name);
    public XmpValueNode get_Item(string qualifiedName);
    public DublinCoreProperties get_DublinCoreProperties();
    public XmpProperties get_XmpProperties();
    public AdobePdfProperties get_PdfProperties();
    public XmpRightsManagementProperties get_RightsManagementProperties();
    public CustomProperties get_CustomProperties();
    public PdfAProperties get_PdfAProperties();
    internal void RemoveEmptyRoots();
    public bool RegisterNamespace(string namespaceUri, string preferredPrefix);
    public void Serialize(Stream stream);
    public void Serialize(Stream stream, XmpSerializationOptions options);
    public virtual string ToString();
    public string ToString(XmpSerializationOptions options);
    private void WriteTo(XmlWriter writer, XmpSerializationOptions options);
    private XElement ToXElement(XmpSerializationOptions options);
    public bool ContainsKey(XmpName name);
    public XmpArray GetArray(string qualifiedName);
    public XmpArray GetArray(XmpName name);
    public XmpSimpleNode GetSimpleValue(string qualifiedName);
    public XmpSimpleNode GetSimpleValue(XmpName name);
    public XmpStructure GetStructure(string qualifiedName);
    public XmpStructure GetStructure(XmpName name);
    public XmpStructure CreateStructure(string qualifiedName);
    public XmpStructure CreateStructure(XmpName name);
    public XmpArray CreateArray(string qualifiedName);
    public XmpArray CreateArray(string qualifiedName, XmpArrayType arrayType);
    public XmpArray CreateArray(XmpName name);
    public XmpArray CreateArray(XmpName name, XmpArrayType arrayType);
    public XmpSimpleNode CreateSimpleValue(string qualifiedName, string value);
    public XmpSimpleNode CreateSimpleValue(string qualifiedName, string value, bool isUri);
    public XmpSimpleNode CreateSimpleValue(XmpName name, string value);
    public XmpSimpleNode CreateSimpleValue(XmpName name, string value, bool isUri);
    public string GetString(string qualifiedName);
    public Nullable`1<bool> GetBoolean(string qualifiedName);
    public Nullable`1<DateTime> GetDate(string qualifiedName);
    public Nullable`1<int> GetInteger(string qualifiedName);
    public Nullable`1<float> GetFloat(string qualifiedName);
    public string GetString(XmpName name);
    public Nullable`1<bool> GetBoolean(XmpName name);
    public Nullable`1<DateTime> GetDate(XmpName name);
    public Nullable`1<int> GetInteger(XmpName name);
    public Nullable`1<float> GetFloat(XmpName name);
    public void Add(string qualifiedName, string value);
    public void Add(string qualifiedName, bool value);
    public void Add(string qualifiedName, int value);
    public void Add(string qualifiedName, float value);
    public void Add(string qualifiedName, DateTime value);
    public void Add(XmpName name, string value);
    public void Add(XmpName name, bool value);
    public void Add(XmpName name, int value);
    public void Add(XmpName name, float value);
    public void Add(XmpName name, DateTime value);
    public void Clear();
    public bool Remove(XmpName name);
    public bool Remove(string qualifiedName);
    [CompilerGeneratedAttribute]
private DublinCoreProperties <.ctor>b__33_0();
    [CompilerGeneratedAttribute]
private XmpProperties <.ctor>b__33_1();
    [CompilerGeneratedAttribute]
private AdobePdfProperties <.ctor>b__33_2();
    [CompilerGeneratedAttribute]
private XmpRightsManagementProperties <.ctor>b__33_3();
    [CompilerGeneratedAttribute]
private CustomProperties <.ctor>b__33_4();
    [CompilerGeneratedAttribute]
private PdfAProperties <.ctor>b__33_5();
}
public class DevExpress.Pdf.Xmp.XmpLanguageAlternative : object {
    [CompilerGeneratedAttribute]
private XmpArray <Array>k__BackingField;
    public XmpArray Array { get; }
    internal XmpLanguageAlternative(XmpArray array);
    [CompilerGeneratedAttribute]
public XmpArray get_Array();
    public string GetString(string language);
    public void AddString(string value, string language);
}
public class DevExpress.Pdf.Xmp.XmpMetadata : object {
    private XDocument xDocument;
    private IList`1<XmpDocument> xmpDocuments;
    public XmpDocument Document { get; }
    public IEnumerable`1<XmpDocument> Documents { get; }
    private XmpMetadata(XDocument document, IList`1<XmpDocument> documents);
    public static XmpMetadata FromString(string xmlString);
    public static XmpMetadata FromStream(Stream xmlStream);
    public XmpDocument get_Document();
    public IEnumerable`1<XmpDocument> get_Documents();
    public void Save(string path);
    public void Save(Stream stream);
    public void Serialize(Stream stream, XmpSerializationOptions options);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{NamespaceUri}:{LocalName}")]
public class DevExpress.Pdf.Xmp.XmpName : object {
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceUri>k__BackingField;
    public string LocalName { get; }
    public string NamespaceUri { get; }
    private XmpName(string localName, string namespaceUri);
    public static XmpName op_Implicit(XName name);
    public static XName op_Implicit(XmpName name);
    public static XmpName Get(string localName, string namespaceUri);
    [CompilerGeneratedAttribute]
public string get_LocalName();
    [CompilerGeneratedAttribute]
public string get_NamespaceUri();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XmpName other);
}
public abstract class DevExpress.Pdf.Xmp.XmpNode : object {
    [CompilerGeneratedAttribute]
private XmpName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private XmpDocumentManager <DocumentManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespacePrefix>k__BackingField;
    public XmpName Name { get; }
    internal XmpDocumentManager DocumentManager { get; }
    internal string NamespacePrefix { get; }
    internal XmpNode(XmpDocumentManager document, XElement element);
    internal XmpNode(XmpDocumentManager document, XAttribute attribute);
    [CompilerGeneratedAttribute]
public XmpName get_Name();
    [CompilerGeneratedAttribute]
internal XmpDocumentManager get_DocumentManager();
    [CompilerGeneratedAttribute]
internal string get_NamespacePrefix();
    internal abstract virtual void RemoveFromParent();
    internal abstract virtual void Serialize(XmpSerializationContext context);
}
public class DevExpress.Pdf.Xmp.XmpProperties : object {
    private XmpNamespaceHelper namespaceHelper;
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public string CreatorTool { get; public set; }
    public XmpArray Identifier { get; }
    public string Label { get; public set; }
    public Nullable`1<DateTime> MetadataDate { get; public set; }
    public Nullable`1<DateTime> ModifyDate { get; public set; }
    public string Rating { get; public set; }
    internal XmpProperties(XmpDocument document);
    public Nullable`1<DateTime> get_CreateDate();
    public void set_CreateDate(Nullable`1<DateTime> value);
    public string get_CreatorTool();
    public void set_CreatorTool(string value);
    public XmpArray get_Identifier();
    public string get_Label();
    public void set_Label(string value);
    public Nullable`1<DateTime> get_MetadataDate();
    public void set_MetadataDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_ModifyDate();
    public void set_ModifyDate(Nullable`1<DateTime> value);
    public string get_Rating();
    public void set_Rating(string value);
}
[DebuggerDisplayAttribute("{NamespacePrefix,nq}:{Name.LocalName,nq} = "{Value}"")]
public abstract class DevExpress.Pdf.Xmp.XmpQualifier : XmpNode {
    public string Value { get; public set; }
    public bool IsLanguageQualifier { get; }
    internal XmpQualifier(XmpDocumentManager document, XElement element);
    internal XmpQualifier(XmpDocumentManager document, XAttribute attribute);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public bool get_IsLanguageQualifier();
}
public class DevExpress.Pdf.Xmp.XmpRightsManagementProperties : object {
    private XmpNamespaceHelper namespaceHelper;
    public string Certificate { get; public set; }
    public Nullable`1<bool> Marked { get; public set; }
    public XmpArray Owner { get; }
    public XmpLanguageAlternative UsageTerms { get; }
    public string WebStatement { get; public set; }
    internal XmpRightsManagementProperties(XmpDocument document);
    public string get_Certificate();
    public void set_Certificate(string value);
    public Nullable`1<bool> get_Marked();
    public void set_Marked(Nullable`1<bool> value);
    public XmpArray get_Owner();
    public XmpLanguageAlternative get_UsageTerms();
    public string get_WebStatement();
    public void set_WebStatement(string value);
}
public class DevExpress.Pdf.Xmp.XmpSerializationOptions : object {
    [CompilerGeneratedAttribute]
private bool <WriteXmpMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseParseTypeResourceInStructs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitEmptyProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private XmpXpacketSerializationMode <XpacketMode>k__BackingField;
    public bool WriteXmpMeta { get; public set; }
    public bool UseParseTypeResourceInStructs { get; public set; }
    internal bool OmitEmptyProperties { get; internal set; }
    internal string AdditionalMetadata { get; internal set; }
    internal XmpXpacketSerializationMode XpacketMode { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_WriteXmpMeta();
    [CompilerGeneratedAttribute]
public void set_WriteXmpMeta(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseParseTypeResourceInStructs();
    [CompilerGeneratedAttribute]
public void set_UseParseTypeResourceInStructs(bool value);
    [CompilerGeneratedAttribute]
internal bool get_OmitEmptyProperties();
    [CompilerGeneratedAttribute]
internal void set_OmitEmptyProperties(bool value);
    [CompilerGeneratedAttribute]
internal string get_AdditionalMetadata();
    [CompilerGeneratedAttribute]
internal void set_AdditionalMetadata(string value);
    [CompilerGeneratedAttribute]
internal XmpXpacketSerializationMode get_XpacketMode();
    [CompilerGeneratedAttribute]
internal void set_XpacketMode(XmpXpacketSerializationMode value);
}
[DebuggerDisplayAttribute("{NamespacePrefix,nq}:{Name.LocalName,nq} = "{Value}"")]
public class DevExpress.Pdf.Xmp.XmpSimpleNode : XmpValueNode {
    private XElement element;
    private XElement valueElement;
    private XAttribute attribute;
    private bool isUri;
    public XmpValueType Type { get; }
    public bool IsUri { get; public set; }
    public string Value { get; public set; }
    internal XmpSimpleNode(XmpDocumentManager document, XAttribute attribute);
    internal XmpSimpleNode(XmpDocumentManager document, XElement element, XElement valueElement, List`1<XmpQualifier> qualifiers);
    internal XmpSimpleNode(XmpDocumentManager document, XElement element, XAttribute attribute, List`1<XmpQualifier> qualifiers, bool isUri);
    public virtual XmpValueType get_Type();
    public bool get_IsUri();
    public void set_IsUri(bool value);
    public string get_Value();
    public void set_Value(string value);
    public void SetUri(string uri);
    public void SetValue(string value);
    internal virtual void Serialize(XmpSerializationContext context);
    internal virtual void RemoveFromParent();
    protected virtual void AddLanguageAttribute(XAttribute attribute);
}
[DebuggerDisplayAttribute("{NamespacePrefix,nq}:{Name.LocalName,nq}, Struct, Count = {Values.Count}")]
public class DevExpress.Pdf.Xmp.XmpStructure : XmpValueNode {
    private XmpStructureStorage storage;
    private XElement structElement;
    internal XmpStructureStorage Storage { get; }
    public XmpValueType Type { get; }
    public IReadOnlyDictionary`2<XmpName, XmpValueNode> Values { get; }
    public int Count { get; }
    internal XmpStructure(XmpDocumentManager document, XElement structElement, XElement elementListElement, Dictionary`2<XmpName, XmpValueNode> elements, List`1<XmpQualifier> qualifiers);
    internal XmpStructureStorage get_Storage();
    public virtual XmpValueType get_Type();
    public IReadOnlyDictionary`2<XmpName, XmpValueNode> get_Values();
    public int get_Count();
    internal virtual void Serialize(XmpSerializationContext context);
    internal virtual void RemoveFromParent();
    public bool ContainsKey(XmpName name);
    public XmpArray GetArray(string qualifiedName);
    public XmpArray GetArray(XmpName name);
    public XmpSimpleNode GetSimpleValue(string qualifiedName);
    public XmpSimpleNode GetSimpleValue(XmpName name);
    public XmpStructure GetStructure(string qualifiedName);
    public XmpStructure GetStructure(XmpName name);
    public XmpStructure CreateStructure(string qualifiedName);
    public XmpStructure CreateStructure(XmpName name);
    public XmpArray CreateArray(string qualifiedName);
    public XmpArray CreateArray(string qualifiedName, XmpArrayType arrayType);
    public XmpArray CreateArray(XmpName name);
    public XmpArray CreateArray(XmpName name, XmpArrayType arrayType);
    public XmpSimpleNode CreateSimpleValue(string qualifiedName, string value);
    public XmpSimpleNode CreateSimpleValue(string qualifiedName, string value, bool isUri);
    public XmpSimpleNode CreateSimpleValue(XmpName name, string value);
    public XmpSimpleNode CreateSimpleValue(XmpName name, string value, bool isUri);
    public string GetString(string qualifiedName);
    public Nullable`1<bool> GetBoolean(string qualifiedName);
    public Nullable`1<DateTime> GetDate(string qualifiedName);
    public Nullable`1<int> GetInteger(string qualifiedName);
    public Nullable`1<float> GetFloat(string qualifiedName);
    public string GetString(XmpName name);
    public Nullable`1<bool> GetBoolean(XmpName name);
    public Nullable`1<DateTime> GetDate(XmpName name);
    public Nullable`1<int> GetInteger(XmpName name);
    public Nullable`1<float> GetFloat(XmpName name);
    public void Add(string qualifiedName, string value);
    public void Add(string qualifiedName, bool value);
    public void Add(string qualifiedName, int value);
    public void Add(string qualifiedName, float value);
    public void Add(string qualifiedName, DateTime value);
    public void Add(XmpName name, string value);
    public void Add(XmpName name, bool value);
    public void Add(XmpName name, int value);
    public void Add(XmpName name, float value);
    public void Add(XmpName name, DateTime value);
    public void Clear();
    public bool Remove(XmpName name);
    public bool Remove(string qualifiedName);
    protected virtual void AddLanguageAttribute(XAttribute attribute);
}
public abstract class DevExpress.Pdf.Xmp.XmpValueNode : XmpNode {
    private List`1<XmpQualifier> qualifiers;
    public IReadOnlyList`1<XmpQualifier> Qualifiers { get; }
    public XmpValueType Type { get; }
    private XmpQualifier LangQualifier { get; }
    protected bool HasLanguage { get; }
    public string Language { get; public set; }
    internal XmpValueNode(XmpDocumentManager document, XAttribute attribute);
    internal XmpValueNode(XmpDocumentManager document, XElement node, List`1<XmpQualifier> qualifiers);
    public IReadOnlyList`1<XmpQualifier> get_Qualifiers();
    public abstract virtual XmpValueType get_Type();
    private XmpQualifier get_LangQualifier();
    protected bool get_HasLanguage();
    public string get_Language();
    public void set_Language(string value);
    protected abstract virtual void AddLanguageAttribute(XAttribute attribute);
}
public enum DevExpress.Pdf.Xmp.XmpValueType : Enum {
    public int value__;
    public static XmpValueType Simple;
    public static XmpValueType Array;
    public static XmpValueType Structure;
}
