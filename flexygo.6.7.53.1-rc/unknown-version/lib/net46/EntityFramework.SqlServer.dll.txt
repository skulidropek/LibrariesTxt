internal class System.Data.Entity.SqlServer.DbGeographyAdapter : object {
    private DbGeography _value;
    public bool IsGeography { get; }
    public object ProviderValue { get; }
    public Nullable`1<int> CoordinateSystemId { get; }
    public string WellKnownText { get; }
    public Byte[] WellKnownBinary { get; }
    public string GmlString { get; }
    internal DbGeographyAdapter(DbGeography value);
    public sealed virtual bool get_IsGeography();
    public sealed virtual object get_ProviderValue();
    public sealed virtual Nullable`1<int> get_CoordinateSystemId();
    public sealed virtual string get_WellKnownText();
    public sealed virtual Byte[] get_WellKnownBinary();
    public sealed virtual string get_GmlString();
    public sealed virtual Exception NotSqlCompatible();
    [CompilerGeneratedAttribute]
private object <get_ProviderValue>b__0();
    [CompilerGeneratedAttribute]
private Nullable`1<int> <get_CoordinateSystemId>b__1();
    [CompilerGeneratedAttribute]
private string <get_WellKnownText>b__2();
    [CompilerGeneratedAttribute]
private string <get_WellKnownText>b__3();
    [CompilerGeneratedAttribute]
private Byte[] <get_WellKnownBinary>b__4();
    [CompilerGeneratedAttribute]
private string <get_GmlString>b__5();
}
internal class System.Data.Entity.SqlServer.DbGeometryAdapter : object {
    private DbGeometry _value;
    public bool IsGeography { get; }
    public object ProviderValue { get; }
    public Nullable`1<int> CoordinateSystemId { get; }
    public string WellKnownText { get; }
    public Byte[] WellKnownBinary { get; }
    public string GmlString { get; }
    internal DbGeometryAdapter(DbGeometry value);
    public sealed virtual bool get_IsGeography();
    public sealed virtual object get_ProviderValue();
    public sealed virtual Nullable`1<int> get_CoordinateSystemId();
    public sealed virtual string get_WellKnownText();
    public sealed virtual Byte[] get_WellKnownBinary();
    public sealed virtual string get_GmlString();
    public sealed virtual Exception NotSqlCompatible();
    [CompilerGeneratedAttribute]
private object <get_ProviderValue>b__0();
    [CompilerGeneratedAttribute]
private Nullable`1<int> <get_CoordinateSystemId>b__1();
    [CompilerGeneratedAttribute]
private string <get_WellKnownText>b__2();
    [CompilerGeneratedAttribute]
private string <get_WellKnownText>b__3();
    [CompilerGeneratedAttribute]
private Byte[] <get_WellKnownBinary>b__4();
    [CompilerGeneratedAttribute]
private string <get_GmlString>b__5();
}
internal class System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy : object {
    public bool RetriesOnFailure { get; }
    public sealed virtual bool get_RetriesOnFailure();
    public sealed virtual void Execute(Action operation);
    public sealed virtual TResult Execute(Func`1<TResult> operation);
    public sealed virtual Task ExecuteAsync(Func`1<Task> operation, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy/<ExecuteAsyncImplementation>d__9`1")]
[DebuggerStepThroughAttribute]
private Task`1<TResult> ExecuteAsyncImplementation(Func`1<Task`1<TResult>> func);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Expressions : object {
    internal static Expression Null();
    internal static Expression Null(Type nullType);
    internal static Expression`1<Func`2<TArg, TResult>> Lambda(string argumentName, Func`2<ParameterExpression, Expression> createLambdaBodyGivenParameter);
    [ExtensionAttribute]
internal static Expression Call(Expression exp, string methodName);
    [ExtensionAttribute]
internal static Expression ConvertTo(Expression exp, Type convertToType);
    [ExtensionAttribute]
internal static Expression ConvertTo(Expression exp);
    [ExtensionAttribute]
internal static ConditionalExpressionBuilder IfTrueThen(Expression conditionExp, Expression resultIfTrue);
    [ExtensionAttribute]
internal static Expression Property(Expression exp, string propertyName);
}
internal interface System.Data.Entity.SqlServer.IDbSpatialValue {
    public bool IsGeography { get; }
    public object ProviderValue { get; }
    public Nullable`1<int> CoordinateSystemId { get; }
    public string WellKnownText { get; }
    public Byte[] WellKnownBinary { get; }
    public string GmlString { get; }
    public abstract virtual bool get_IsGeography();
    public abstract virtual object get_ProviderValue();
    public abstract virtual Nullable`1<int> get_CoordinateSystemId();
    public abstract virtual string get_WellKnownText();
    public abstract virtual Byte[] get_WellKnownBinary();
    public abstract virtual string get_GmlString();
    public abstract virtual Exception NotSqlCompatible();
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.IDbSpatialValueExtensionMethods : object {
    [ExtensionAttribute]
internal static IDbSpatialValue AsSpatialValue(DbGeography geographyValue);
    [ExtensionAttribute]
internal static IDbSpatialValue AsSpatialValue(DbGeometry geometryValue);
}
[GeneratedCodeAttribute("Resources.SqlServer.tt", "1.0.0.0")]
internal class System.Data.Entity.SqlServer.Resources.EntityRes : object {
    internal static string ArgumentIsNullOrWhitespace;
    internal static string SqlProvider_GeographyValueNotSqlCompatible;
    internal static string SqlProvider_GeometryValueNotSqlCompatible;
    internal static string ProviderReturnedNullForGetDbInformation;
    internal static string ProviderDoesNotSupportType;
    internal static string NoStoreTypeForEdmType;
    internal static string Mapping_Provider_WrongManifestType;
    internal static string ADP_InternalProviderError;
    internal static string UnableToDetermineStoreVersion;
    internal static string SqlProvider_NeedSqlDataReader;
    internal static string SqlProvider_Sql2008RequiredForSpatial;
    internal static string SqlProvider_SqlTypesAssemblyNotFound;
    internal static string SqlProvider_IncompleteCreateDatabase;
    internal static string SqlProvider_IncompleteCreateDatabaseAggregate;
    internal static string SqlProvider_DdlGeneration_MissingInitialCatalog;
    internal static string SqlProvider_DdlGeneration_CannotDeleteDatabaseNoInitialCatalog;
    internal static string SqlProvider_DdlGeneration_CannotTellIfDatabaseExists;
    internal static string SqlProvider_CredentialsMissingForMasterConnection;
    internal static string SqlProvider_InvalidGeographyColumn;
    internal static string SqlProvider_InvalidGeometryColumn;
    internal static string Mapping_Provider_WrongConnectionType;
    internal static string Update_NotSupportedServerGenKey;
    internal static string Update_NotSupportedIdentityType;
    internal static string Update_SqlEntitySetWithoutDmlFunctions;
    internal static string Cqt_General_UnsupportedExpression;
    internal static string SqlGen_ApplyNotSupportedOnSql8;
    internal static string SqlGen_NiladicFunctionsCannotHaveParameters;
    internal static string SqlGen_InvalidDatePartArgumentExpression;
    internal static string SqlGen_InvalidDatePartArgumentValue;
    internal static string SqlGen_TypedNaNNotSupported;
    internal static string SqlGen_TypedPositiveInfinityNotSupported;
    internal static string SqlGen_TypedNegativeInfinityNotSupported;
    internal static string SqlGen_PrimitiveTypeNotSupportedPriorSql10;
    internal static string SqlGen_CanonicalFunctionNotSupportedPriorSql10;
    internal static string SqlGen_ParameterForLimitNotSupportedOnSql8;
    internal static string SqlGen_ParameterForSkipNotSupportedOnSql8;
    internal static string Spatial_WellKnownGeographyValueNotValid;
    internal static string Spatial_WellKnownGeometryValueNotValid;
    internal static string SqlSpatialServices_ProviderValueNotSqlType;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt;
    internal static string TransientExceptionDetected;
    internal static string ELinq_DbFunctionDirectCall;
    internal static string AutomaticMigration;
    internal static string InvalidDatabaseName;
    internal static string SqlServerMigrationSqlGenerator_UnknownOperation;
    private static EntityRes loader;
    private ResourceManager resources;
    private static CultureInfo Culture { get; }
    public static ResourceManager Resources { get; }
    private static EntityRes GetLoader();
    private static CultureInfo get_Culture();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[GeneratedCodeAttribute("Resources.SqlServer.tt", "1.0.0.0")]
internal static class System.Data.Entity.SqlServer.Resources.Error : object {
    internal static Exception InvalidDatabaseName(object p0);
    internal static Exception SqlServerMigrationSqlGenerator_UnknownOperation(object p0, object p1);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
}
[GeneratedCodeAttribute("Resources.SqlServer.tt", "1.0.0.0")]
internal static class System.Data.Entity.SqlServer.Resources.Strings : object {
    internal static string SqlProvider_GeographyValueNotSqlCompatible { get; }
    internal static string SqlProvider_GeometryValueNotSqlCompatible { get; }
    internal static string UnableToDetermineStoreVersion { get; }
    internal static string SqlProvider_Sql2008RequiredForSpatial { get; }
    internal static string SqlProvider_SqlTypesAssemblyNotFound { get; }
    internal static string SqlProvider_IncompleteCreateDatabase { get; }
    internal static string SqlProvider_IncompleteCreateDatabaseAggregate { get; }
    internal static string SqlProvider_DdlGeneration_MissingInitialCatalog { get; }
    internal static string SqlProvider_DdlGeneration_CannotDeleteDatabaseNoInitialCatalog { get; }
    internal static string SqlProvider_DdlGeneration_CannotTellIfDatabaseExists { get; }
    internal static string SqlProvider_CredentialsMissingForMasterConnection { get; }
    internal static string SqlGen_ApplyNotSupportedOnSql8 { get; }
    internal static string SqlGen_NiladicFunctionsCannotHaveParameters { get; }
    internal static string SqlGen_ParameterForLimitNotSupportedOnSql8 { get; }
    internal static string SqlGen_ParameterForSkipNotSupportedOnSql8 { get; }
    internal static string Spatial_WellKnownGeographyValueNotValid { get; }
    internal static string Spatial_WellKnownGeometryValueNotValid { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt { get; }
    internal static string TransientExceptionDetected { get; }
    internal static string ELinq_DbFunctionDirectCall { get; }
    internal static string AutomaticMigration { get; }
    internal static string ArgumentIsNullOrWhitespace(object p0);
    internal static string get_SqlProvider_GeographyValueNotSqlCompatible();
    internal static string get_SqlProvider_GeometryValueNotSqlCompatible();
    internal static string ProviderReturnedNullForGetDbInformation(object p0);
    internal static string ProviderDoesNotSupportType(object p0);
    internal static string NoStoreTypeForEdmType(object p0, object p1);
    internal static string Mapping_Provider_WrongManifestType(object p0);
    internal static string ADP_InternalProviderError(object p0);
    internal static string get_UnableToDetermineStoreVersion();
    internal static string SqlProvider_NeedSqlDataReader(object p0);
    internal static string get_SqlProvider_Sql2008RequiredForSpatial();
    internal static string get_SqlProvider_SqlTypesAssemblyNotFound();
    internal static string get_SqlProvider_IncompleteCreateDatabase();
    internal static string get_SqlProvider_IncompleteCreateDatabaseAggregate();
    internal static string get_SqlProvider_DdlGeneration_MissingInitialCatalog();
    internal static string get_SqlProvider_DdlGeneration_CannotDeleteDatabaseNoInitialCatalog();
    internal static string get_SqlProvider_DdlGeneration_CannotTellIfDatabaseExists();
    internal static string get_SqlProvider_CredentialsMissingForMasterConnection();
    internal static string SqlProvider_InvalidGeographyColumn(object p0);
    internal static string SqlProvider_InvalidGeometryColumn(object p0);
    internal static string Mapping_Provider_WrongConnectionType(object p0);
    internal static string Update_NotSupportedServerGenKey(object p0);
    internal static string Update_NotSupportedIdentityType(object p0, object p1);
    internal static string Update_SqlEntitySetWithoutDmlFunctions(object p0, object p1, object p2);
    internal static string Cqt_General_UnsupportedExpression(object p0);
    internal static string get_SqlGen_ApplyNotSupportedOnSql8();
    internal static string get_SqlGen_NiladicFunctionsCannotHaveParameters();
    internal static string SqlGen_InvalidDatePartArgumentExpression(object p0, object p1);
    internal static string SqlGen_InvalidDatePartArgumentValue(object p0, object p1, object p2);
    internal static string SqlGen_TypedNaNNotSupported(object p0);
    internal static string SqlGen_TypedPositiveInfinityNotSupported(object p0, object p1);
    internal static string SqlGen_TypedNegativeInfinityNotSupported(object p0, object p1);
    internal static string SqlGen_PrimitiveTypeNotSupportedPriorSql10(object p0);
    internal static string SqlGen_CanonicalFunctionNotSupportedPriorSql10(object p0);
    internal static string get_SqlGen_ParameterForLimitNotSupportedOnSql8();
    internal static string get_SqlGen_ParameterForSkipNotSupportedOnSql8();
    internal static string get_Spatial_WellKnownGeographyValueNotValid();
    internal static string get_Spatial_WellKnownGeometryValueNotValid();
    internal static string SqlSpatialServices_ProviderValueNotSqlType(object p0);
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid();
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt();
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid();
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt();
    internal static string get_TransientExceptionDetected();
    internal static string get_ELinq_DbFunctionDirectCall();
    internal static string get_AutomaticMigration();
    internal static string InvalidDatabaseName(object p0);
    internal static string SqlServerMigrationSqlGenerator_UnknownOperation(object p0, object p1);
}
internal enum System.Data.Entity.SqlServer.ServerType : Enum {
    public int value__;
    public static ServerType OnPremises;
    public static ServerType Cloud;
}
public class System.Data.Entity.SqlServer.SqlAzureExecutionStrategy : DbExecutionStrategy {
    public SqlAzureExecutionStrategy(int maxRetryCount, TimeSpan maxDelay);
    protected virtual bool ShouldRetryOn(Exception exception);
}
internal static class System.Data.Entity.SqlServer.SqlAzureRetriableExceptionDetector : object {
    public static bool ShouldRetryOn(Exception ex);
}
internal class System.Data.Entity.SqlServer.SqlDdlBuilder : object {
    private StringBuilder unencodedStringBuilder;
    private HashSet`1<EntitySet> ignoredEntitySets;
    [CompilerGeneratedAttribute]
private static Func`2<EntitySet, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<EntitySet, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<EntitySet, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<AssociationSet, string> CS$<>9__CachedAnonymousMethodDelegate9;
    internal static string CreateObjectsScript(StoreItemCollection itemCollection, bool createSchemas);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
internal static string CreateDatabaseScript(string databaseName, string dataFileName, string logFileName);
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
internal static string SetDatabaseOptionsScript(SqlVersion sqlVersion, string databaseName);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
private static string SetReadCommittedSnapshotScript(string databaseName);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
internal static string CreateDatabaseExistsScript(string databaseName, bool useDeprecatedSystemTable);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
private static void AppendSysDatabases(SqlDdlBuilder builder, bool useDeprecatedSystemTable);
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
internal static string CreateGetDatabaseNamesBasedOnFileNameScript(string databaseFileName, bool useDeprecatedSystemTable);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
internal static string CreateCountDatabasesBasedOnFileNameScript(string databaseFileName, bool useDeprecatedSystemTable);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
internal static string DropDatabaseScript(string databaseName);
    internal string GetCommandText();
    internal static string GetSchemaName(EntitySet entitySet);
    internal static string GetTableName(EntitySet entitySet);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private void AppendCreateForeignKeys(AssociationSet associationSet);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private void AppendCreateTable(EntitySet entitySet);
    [SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
[SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private void AppendCreateSchema(string schema);
    private void AppendIdentifier(EntitySet table);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private void AppendIdentifier(EntitySet table, Action`1<string> AppendIdentifierEscape);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private void AppendStringLiteral(string literalValue);
    private void AppendIdentifiers(IEnumerable`1<EdmProperty> properties);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private void AppendIdentifier(string identifier);
    private void AppendIdentifierEscapeNewLine(string identifier);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private void AppendFileName(string path);
    private void AppendJoin(IEnumerable`1<T> elements, Action`1<T> appendElement, string unencodedSeparator);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
private void AppendType(EdmProperty column);
    private void AppendSql(string text);
    private void AppendNewLine();
    private void AppendSqlInvariantFormat(string format, Object[] args);
    [CompilerGeneratedAttribute]
private static string <CreateObjectsScript>b__0(EntitySet s);
    [CompilerGeneratedAttribute]
private static string <CreateObjectsScript>b__1(EntitySet s);
    [CompilerGeneratedAttribute]
private static string <CreateObjectsScript>b__2(string s);
    [CompilerGeneratedAttribute]
private static string <CreateObjectsScript>b__3(EntitySet s);
    [CompilerGeneratedAttribute]
private static string <CreateObjectsScript>b__4(AssociationSet s);
    [CompilerGeneratedAttribute]
private void <AppendCreateTable>b__a(EdmMember k);
    [CompilerGeneratedAttribute]
private void <AppendIdentifiers>b__c(EdmProperty p);
}
public static class System.Data.Entity.SqlServer.SqlFunctions : object {
    [DbFunctionAttribute("SqlServer", "CHECKSUM_AGG")]
public static Nullable`1<int> ChecksumAggregate(IEnumerable`1<int> arg);
    [DbFunctionAttribute("SqlServer", "CHECKSUM_AGG")]
[SuppressMessageAttribute("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
public static Nullable`1<int> ChecksumAggregate(IEnumerable`1<Nullable`1<int>> arg);
    private static TOut BootstrapFunction(Expression`1<Func`2<IEnumerable`1<TIn>, TOut>> methodExpression, IEnumerable`1<TIn> arg);
    [DbFunctionAttribute("SqlServer", "ASCII")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static Nullable`1<int> Ascii(string arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHAR")]
public static string Char(Nullable`1<int> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHARINDEX")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> CharIndex(string toSearch, string target);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(Byte[] toSearch, Byte[] target);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(string toSearch, string target, Nullable`1<int> startLocation);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHARINDEX")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> CharIndex(Byte[] toSearch, Byte[] target, Nullable`1<int> startLocation);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<long> CharIndex(string toSearch, string target, Nullable`1<long> startLocation);
    [DbFunctionAttribute("SqlServer", "CHARINDEX")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<long> CharIndex(Byte[] toSearch, Byte[] target, Nullable`1<long> startLocation);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DIFFERENCE")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Difference(string string1, string string2);
    [DbFunctionAttribute("SqlServer", "NCHAR")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string NChar(Nullable`1<int> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "PATINDEX")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
public static Nullable`1<int> PatIndex(string stringPattern, string target);
    [DbFunctionAttribute("SqlServer", "QUOTENAME")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string QuoteName(string stringArg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "QUOTENAME")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string QuoteName(string stringArg, string quoteCharacter);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "REPLICATE")]
public static string Replicate(string target, Nullable`1<int> count);
    [DbFunctionAttribute("SqlServer", "SOUNDEX")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string SoundCode(string arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "SPACE")]
public static string Space(Nullable`1<int> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<double> number);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<decimal> number);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "STR")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string StringConvert(Nullable`1<double> number, Nullable`1<int> length);
    [DbFunctionAttribute("SqlServer", "STR")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string StringConvert(Nullable`1<decimal> number, Nullable`1<int> length);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "STR")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string StringConvert(Nullable`1<double> number, Nullable`1<int> length, Nullable`1<int> decimalArg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<decimal> number, Nullable`1<int> length, Nullable`1<int> decimalArg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "STUFF")]
public static string Stuff(string stringInput, Nullable`1<int> start, Nullable`1<int> length, string stringReplacement);
    [DbFunctionAttribute("SqlServer", "UNICODE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Unicode(string arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "ACOS")]
public static Nullable`1<double> Acos(Nullable`1<double> arg1);
    [DbFunctionAttribute("SqlServer", "ACOS")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Acos(Nullable`1<decimal> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "ASIN")]
public static Nullable`1<double> Asin(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "ASIN")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Asin(Nullable`1<decimal> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "ATAN")]
public static Nullable`1<double> Atan(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "ATAN")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Atan(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "ATN2")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Atan2(Nullable`1<double> arg1, Nullable`1<double> arg2);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "ATN2")]
public static Nullable`1<double> Atan2(Nullable`1<decimal> arg1, Nullable`1<decimal> arg2);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "COS")]
public static Nullable`1<double> Cos(Nullable`1<double> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "COS")]
public static Nullable`1<double> Cos(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "COT")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Cot(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "COT")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Cot(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "DEGREES")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Degrees(Nullable`1<int> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DEGREES")]
public static Nullable`1<long> Degrees(Nullable`1<long> arg1);
    [DbFunctionAttribute("SqlServer", "DEGREES")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<decimal> Degrees(Nullable`1<decimal> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DEGREES")]
public static Nullable`1<double> Degrees(Nullable`1<double> arg1);
    [DbFunctionAttribute("SqlServer", "EXP")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static Nullable`1<double> Exp(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "EXP")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Exp(Nullable`1<decimal> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "LOG")]
public static Nullable`1<double> Log(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "LOG")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Log(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "LOG10")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Log10(Nullable`1<double> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "LOG10")]
public static Nullable`1<double> Log10(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "PI")]
public static Nullable`1<double> Pi();
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "RADIANS")]
public static Nullable`1<int> Radians(Nullable`1<int> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "RADIANS")]
public static Nullable`1<long> Radians(Nullable`1<long> arg);
    [DbFunctionAttribute("SqlServer", "RADIANS")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<decimal> Radians(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "RADIANS")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Radians(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "RAND")]
public static Nullable`1<double> Rand();
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "RAND")]
public static Nullable`1<double> Rand(Nullable`1<int> seed);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "SIGN")]
public static Nullable`1<int> Sign(Nullable`1<int> arg);
    [DbFunctionAttribute("SqlServer", "SIGN")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<long> Sign(Nullable`1<long> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "SIGN")]
public static Nullable`1<decimal> Sign(Nullable`1<decimal> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "SIGN")]
public static Nullable`1<double> Sign(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "SIN")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Sin(Nullable`1<decimal> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "SIN")]
public static Nullable`1<double> Sin(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "SQRT")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> SquareRoot(Nullable`1<double> arg);
    [DbFunctionAttribute("SqlServer", "SQRT")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> SquareRoot(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "SQUARE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Square(Nullable`1<double> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "SQUARE")]
public static Nullable`1<double> Square(Nullable`1<decimal> arg1);
    [DbFunctionAttribute("SqlServer", "TAN")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> Tan(Nullable`1<double> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "TAN")]
public static Nullable`1<double> Tan(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "DATEADD")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<DateTime> DateAdd(string datePartArg, Nullable`1<double> number, Nullable`1<DateTime> date);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEADD")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<TimeSpan> DateAdd(string datePartArg, Nullable`1<double> number, Nullable`1<TimeSpan> time);
    [DbFunctionAttribute("SqlServer", "DATEADD")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<DateTimeOffset> DateAdd(string datePartArg, Nullable`1<double> number, Nullable`1<DateTimeOffset> dateTimeOffsetArg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEADD")]
public static Nullable`1<DateTime> DateAdd(string datePartArg, Nullable`1<double> number, string date);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, Nullable`1<TimeSpan> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, Nullable`1<DateTime> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, Nullable`1<DateTimeOffset> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, Nullable`1<TimeSpan> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, string endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, string endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, string endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, string endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, Nullable`1<DateTime> endDate);
    [DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, Nullable`1<DateTimeOffset> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, Nullable`1<TimeSpan> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, Nullable`1<TimeSpan> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, Nullable`1<DateTimeOffset> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTime> endDate);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATENAME")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string DateName(string datePartArg, Nullable`1<DateTime> date);
    [DbFunctionAttribute("SqlServer", "DATENAME")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string DateName(string datePartArg, string date);
    [DbFunctionAttribute("SqlServer", "DATENAME")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string DateName(string datePartArg, Nullable`1<TimeSpan> date);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATENAME")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string DateName(string datePartArg, Nullable`1<DateTimeOffset> date);
    [DbFunctionAttribute("SqlServer", "DATEPART")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DatePart(string datePartArg, Nullable`1<DateTime> date);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEPART")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DatePart(string datePartArg, Nullable`1<DateTimeOffset> date);
    [DbFunctionAttribute("SqlServer", "DATEPART")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DatePart(string datePartArg, string date);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATEPART")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DatePart(string datePartArg, Nullable`1<TimeSpan> date);
    [DbFunctionAttribute("SqlServer", "GETDATE")]
[SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
public static Nullable`1<DateTime> GetDate();
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
[DbFunctionAttribute("SqlServer", "GETUTCDATE")]
public static Nullable`1<DateTime> GetUtcDate();
    [DbFunctionAttribute("SqlServer", "DATALENGTH")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DataLength(Nullable`1<bool> arg);
    [DbFunctionAttribute("SqlServer", "DATALENGTH")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DataLength(Nullable`1<double> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<decimal> arg);
    [DbFunctionAttribute("SqlServer", "DATALENGTH")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DataLength(Nullable`1<DateTime> arg);
    [DbFunctionAttribute("SqlServer", "DATALENGTH")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DataLength(Nullable`1<TimeSpan> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<DateTimeOffset> arg);
    [DbFunctionAttribute("SqlServer", "DATALENGTH")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DataLength(string arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Byte[] arg);
    [DbFunctionAttribute("SqlServer", "DATALENGTH")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> DataLength(Nullable`1<Guid> arg);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<bool> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<double> arg1);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<decimal> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(string arg1);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<DateTime> arg1);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<TimeSpan> arg1);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<DateTimeOffset> arg1);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Byte[] arg1);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<Guid> arg1);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<bool> arg1, Nullable`1<bool> arg2);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<double> arg1, Nullable`1<double> arg2);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<decimal> arg1, Nullable`1<decimal> arg2);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(string arg1, string arg2);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<DateTime> arg1, Nullable`1<DateTime> arg2);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<TimeSpan> arg1, Nullable`1<TimeSpan> arg2);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<DateTimeOffset> arg1, Nullable`1<DateTimeOffset> arg2);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Byte[] arg1, Byte[] arg2);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<Guid> arg1, Nullable`1<Guid> arg2);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<bool> arg1, Nullable`1<bool> arg2, Nullable`1<bool> arg3);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<double> arg1, Nullable`1<double> arg2, Nullable`1<double> arg3);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<decimal> arg1, Nullable`1<decimal> arg2, Nullable`1<decimal> arg3);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(string arg1, string arg2, string arg3);
    [DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<DateTime> arg1, Nullable`1<DateTime> arg2, Nullable`1<DateTime> arg3);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<DateTimeOffset> arg1, Nullable`1<DateTimeOffset> arg2, Nullable`1<DateTimeOffset> arg3);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> Checksum(Nullable`1<TimeSpan> arg1, Nullable`1<TimeSpan> arg2, Nullable`1<TimeSpan> arg3);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Byte[] arg1, Byte[] arg2, Byte[] arg3);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<Guid> arg1, Nullable`1<Guid> arg2, Nullable`1<Guid> arg3);
    [DbFunctionAttribute("SqlServer", "CURRENT_TIMESTAMP")]
public static Nullable`1<DateTime> CurrentTimestamp();
    [DbFunctionAttribute("SqlServer", "CURRENT_USER")]
public static string CurrentUser();
    [DbFunctionAttribute("SqlServer", "HOST_NAME")]
public static string HostName();
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "USER_NAME")]
public static string UserName(Nullable`1<int> arg);
    [DbFunctionAttribute("SqlServer", "USER_NAME")]
public static string UserName();
    [DbFunctionAttribute("SqlServer", "ISNUMERIC")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> IsNumeric(string arg);
    [DbFunctionAttribute("SqlServer", "ISDATE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> IsDate(string arg);
}
internal class System.Data.Entity.SqlServer.SqlGen.BoolWrapper : object {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    internal bool Value { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(bool value);
}
internal class System.Data.Entity.SqlServer.SqlGen.DmlFunctionSqlGenerator : object {
    private SqlGenerator _sqlGenerator;
    [CompilerGeneratedAttribute]
private static Func`2<DbInsertCommandTree, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<DbSetClause, DbExpression> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<EdmProperty, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<DbUpdateCommandTree, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    public DmlFunctionSqlGenerator(SqlGenerator sqlGenerator);
    public string GenerateInsert(ICollection`1<DbInsertCommandTree> commandTrees);
    private string IntroduceRequiredLocalVariables(EntityType entityType, DbInsertCommandTree commandTree);
    public string GenerateUpdate(ICollection`1<DbUpdateCommandTree> commandTrees, string rowsAffectedParameter);
    public string GenerateDelete(ICollection`1<DbDeleteCommandTree> commandTrees, string rowsAffectedParameter);
    private static void AppendSetRowsAffected(StringBuilder sql, string rowsAffectedParameter);
    [CompilerGeneratedAttribute]
private static bool <GenerateInsert>b__0(DbInsertCommandTree ct);
    [CompilerGeneratedAttribute]
private static DbExpression <GenerateInsert>b__2(DbSetClause sc);
    [CompilerGeneratedAttribute]
private static bool <IntroduceRequiredLocalVariables>b__9(EdmProperty p);
    [CompilerGeneratedAttribute]
private static bool <GenerateUpdate>b__b(DbUpdateCommandTree ct);
}
internal static class System.Data.Entity.SqlServer.SqlGen.DmlSqlGenerator : object {
    private static int CommandTextBuilderInitialCapacity;
    private static string GeneratedValuesVariableName;
    [CompilerGeneratedAttribute]
private static Func`2<DbSetClause, EdmMember> CS$<>9__CachedAnonymousMethodDelegate4;
    internal static string GenerateUpdateSql(DbUpdateCommandTree tree, SqlGenerator sqlGenerator, List`1& parameters, bool generateReturningSql, bool upperCaseKeywords);
    internal static string GenerateDeleteSql(DbDeleteCommandTree tree, SqlGenerator sqlGenerator, List`1& parameters, bool upperCaseKeywords, bool createParameters);
    internal static string GenerateInsertSql(DbInsertCommandTree tree, SqlGenerator sqlGenerator, List`1& parameters, bool generateReturningSql, bool upperCaseKeywords, bool createParameters);
    internal static string GetVariableType(SqlGenerator sqlGenerator, EdmMember column);
    internal static bool UseGeneratedValuesVariable(DbInsertCommandTree tree, SqlVersion sqlVersion);
    internal static string GenerateMemberTSql(EdmMember member);
    internal static void GenerateReturningSql(SqlStringBuilder commandText, DbModificationCommandTree tree, EntityType tableType, ExpressionTranslator translator, DbExpression returning, bool useGeneratedValuesVariable);
    private static bool IsValidScopeIdentityColumnType(TypeUsage typeUsage);
    [CompilerGeneratedAttribute]
private static EdmMember <UseGeneratedValuesVariable>b__3(DbSetClause s);
}
internal interface System.Data.Entity.SqlServer.SqlGen.ISqlFragment {
    public abstract virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.Entity.SqlServer.SqlGen.JoinSymbol : Symbol {
    private List`1<Symbol> columnList;
    private List`1<Symbol> extentList;
    private List`1<Symbol> flattenedExtentList;
    private Dictionary`2<string, Symbol> nameToExtent;
    [CompilerGeneratedAttribute]
private bool <IsNestedJoin>k__BackingField;
    internal List`1<Symbol> ColumnList { get; internal set; }
    internal List`1<Symbol> ExtentList { get; }
    internal List`1<Symbol> FlattenedExtentList { get; internal set; }
    internal Dictionary`2<string, Symbol> NameToExtent { get; }
    internal bool IsNestedJoin { get; internal set; }
    public JoinSymbol(string name, TypeUsage type, List`1<Symbol> extents);
    internal List`1<Symbol> get_ColumnList();
    internal void set_ColumnList(List`1<Symbol> value);
    internal List`1<Symbol> get_ExtentList();
    internal List`1<Symbol> get_FlattenedExtentList();
    internal void set_FlattenedExtentList(List`1<Symbol> value);
    internal Dictionary`2<string, Symbol> get_NameToExtent();
    [CompilerGeneratedAttribute]
internal bool get_IsNestedJoin();
    [CompilerGeneratedAttribute]
internal void set_IsNestedJoin(bool value);
}
internal class System.Data.Entity.SqlServer.SqlGen.OptionalColumn : object {
    private SymbolUsageManager m_usageManager;
    private SqlBuilder m_builder;
    private Symbol m_symbol;
    internal OptionalColumn(SymbolUsageManager usageManager, Symbol symbol);
    internal void Append(object s);
    internal void MarkAsUsed();
    public bool WriteSqlIfUsed(SqlWriter writer, SqlGenerator sqlGenerator, string separator);
}
internal class System.Data.Entity.SqlServer.SqlGen.Sql8ConformanceChecker : DbExpressionVisitor`1<bool> {
    internal static bool NeedsRewrite(DbExpression expr);
    private bool VisitUnaryExpression(DbUnaryExpression expr);
    private bool VisitBinaryExpression(DbBinaryExpression expr);
    private bool VisitAggregate(DbAggregate aggregate);
    private bool VisitExpressionBinding(DbExpressionBinding expressionBinding);
    private bool VisitExpression(DbExpression expression);
    private bool VisitSortClause(DbSortClause sortClause);
    private static bool VisitList(ListElementHandler`1<TElementType> handler, IList`1<TElementType> list);
    private bool VisitAggregateList(IList`1<DbAggregate> list);
    private bool VisitExpressionBindingList(IList`1<DbExpressionBinding> list);
    private bool VisitExpressionList(IList`1<DbExpression> list);
    private bool VisitSortClauseList(IList`1<DbSortClause> list);
    public virtual bool Visit(DbExpression expression);
    public virtual bool Visit(DbAndExpression expression);
    public virtual bool Visit(DbApplyExpression expression);
    public virtual bool Visit(DbArithmeticExpression expression);
    public virtual bool Visit(DbCaseExpression expression);
    public virtual bool Visit(DbCastExpression expression);
    public virtual bool Visit(DbComparisonExpression expression);
    public virtual bool Visit(DbConstantExpression expression);
    public virtual bool Visit(DbCrossJoinExpression expression);
    public virtual bool Visit(DbDerefExpression expression);
    public virtual bool Visit(DbDistinctExpression expression);
    public virtual bool Visit(DbElementExpression expression);
    public virtual bool Visit(DbEntityRefExpression expression);
    public virtual bool Visit(DbExceptExpression expression);
    public virtual bool Visit(DbFilterExpression expression);
    public virtual bool Visit(DbFunctionExpression expression);
    public virtual bool Visit(DbLambdaExpression expression);
    public virtual bool Visit(DbGroupByExpression expression);
    public virtual bool Visit(DbIntersectExpression expression);
    public virtual bool Visit(DbIsEmptyExpression expression);
    public virtual bool Visit(DbIsNullExpression expression);
    public virtual bool Visit(DbIsOfExpression expression);
    public virtual bool Visit(DbJoinExpression expression);
    public virtual bool Visit(DbLikeExpression expression);
    public virtual bool Visit(DbLimitExpression expression);
    public virtual bool Visit(DbNewInstanceExpression expression);
    public virtual bool Visit(DbNotExpression expression);
    public virtual bool Visit(DbNullExpression expression);
    public virtual bool Visit(DbOfTypeExpression expression);
    public virtual bool Visit(DbOrExpression expression);
    public virtual bool Visit(DbInExpression expression);
    public virtual bool Visit(DbParameterReferenceExpression expression);
    public virtual bool Visit(DbProjectExpression expression);
    public virtual bool Visit(DbPropertyExpression expression);
    public virtual bool Visit(DbQuantifierExpression expression);
    public virtual bool Visit(DbRefExpression expression);
    public virtual bool Visit(DbRefKeyExpression expression);
    public virtual bool Visit(DbRelationshipNavigationExpression expression);
    public virtual bool Visit(DbScanExpression expression);
    public virtual bool Visit(DbSkipExpression expression);
    public virtual bool Visit(DbSortExpression expression);
    public virtual bool Visit(DbTreatExpression expression);
    public virtual bool Visit(DbUnionAllExpression expression);
    public virtual bool Visit(DbVariableReferenceExpression expression);
}
internal class System.Data.Entity.SqlServer.SqlGen.Sql8ExpressionRewriter : DbExpressionRebinder {
    private Sql8ExpressionRewriter(MetadataWorkspace metadata);
    internal static DbQueryCommandTree Rewrite(DbQueryCommandTree originalTree);
    public virtual DbExpression Visit(DbExceptExpression e);
    public virtual DbExpression Visit(DbIntersectExpression e);
    public virtual DbExpression Visit(DbSkipExpression e);
    private DbExpression TransformIntersectOrExcept(DbExpression left, DbExpression right, DbExpressionKind expressionKind);
    private DbExpression TransformIntersectOrExcept(DbExpression left, DbExpression right, DbExpressionKind expressionKind, IList`1<DbPropertyExpression> sortExpressionsOverLeft, string sortExpressionsBindingVariableName);
    private void FlattenProperties(DbExpression input, IList`1<DbPropertyExpression> flattenedProperties);
    private static bool RemoveNonSortProperties(IList`1<DbPropertyExpression> list1, IList`1<DbPropertyExpression> list2, IList`1<DbPropertyExpression> sortList, string list1BindingVariableName, string sortExpressionsBindingVariableName);
    private static bool HasMatchInList(DbPropertyExpression expr, IList`1<DbPropertyExpression> list, string exprBindingVariableName, string listExpressionsBindingVariableName);
    private static bool AreMatching(DbPropertyExpression expr1, DbPropertyExpression expr2, string expr1BindingVariableName, string expr2BindingVariableName);
    private static DbExpressionBinding CapWithProject(DbExpressionBinding inputBinding, IList`1<DbPropertyExpression> flattenedProperties);
}
internal class System.Data.Entity.SqlServer.SqlGen.SqlBuilder : object {
    private List`1<object> _sqlFragments;
    private List`1<object> sqlFragments { get; }
    public bool IsEmpty { get; }
    private List`1<object> get_sqlFragments();
    public void Append(object s);
    public void AppendLine();
    public virtual bool get_IsEmpty();
    public virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal static class System.Data.Entity.SqlServer.SqlGen.SqlFunctionCallHandler : object {
    private static Dictionary`2<string, FunctionHandler> _storeFunctionHandlers;
    private static Dictionary`2<string, FunctionHandler> _canonicalFunctionHandlers;
    private static Dictionary`2<string, string> _functionNameToOperatorDictionary;
    private static Dictionary`2<string, string> _dateAddFunctionNameToDatepartDictionary;
    private static Dictionary`2<string, string> _dateDiffFunctionNameToDatepartDictionary;
    private static Dictionary`2<string, FunctionHandler> _geographyFunctionNameToStaticMethodHandlerDictionary;
    private static Dictionary`2<string, string> _geographyFunctionNameToInstancePropertyNameDictionary;
    private static Dictionary`2<string, string> _geographyRenamedInstanceMethodFunctionDictionary;
    private static Dictionary`2<string, FunctionHandler> _geometryFunctionNameToStaticMethodHandlerDictionary;
    private static Dictionary`2<string, string> _geometryFunctionNameToInstancePropertyNameDictionary;
    private static Dictionary`2<string, string> _geometryRenamedInstanceMethodFunctionDictionary;
    private static ISet`1<string> _datepartKeywords;
    private static ISet`1<string> _functionRequiresReturnTypeCastToInt64;
    private static ISet`1<string> _functionRequiresReturnTypeCastToInt32;
    private static ISet`1<string> _functionRequiresReturnTypeCastToInt16;
    private static ISet`1<string> _functionRequiresReturnTypeCastToSingle;
    private static ISet`1<string> _maxTypeNames;
    private static DbExpression _defaultGeographySridExpression;
    private static DbExpression _defaultGeometrySridExpression;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate42;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate44;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate47;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate4d;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static FunctionHandler CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<TypeUsage, bool> CS$<>9__CachedAnonymousMethodDelegate58;
    private static SqlFunctionCallHandler();
    private static Dictionary`2<string, FunctionHandler> InitializeStoreFunctionHandlers();
    private static Dictionary`2<string, FunctionHandler> InitializeCanonicalFunctionHandlers();
    private static Dictionary`2<string, string> InitializeFunctionNameToOperatorDictionary();
    private static Dictionary`2<string, string> InitializeDateAddFunctionNameToDatepartDictionary();
    private static Dictionary`2<string, string> InitializeDateDiffFunctionNameToDatepartDictionary();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private static Dictionary`2<string, FunctionHandler> InitializeGeographyStaticMethodFunctionsDictionary();
    private static Dictionary`2<string, string> InitializeGeographyInstancePropertyFunctionsDictionary();
    private static Dictionary`2<string, string> InitializeRenamedGeographyInstanceMethodFunctions();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private static Dictionary`2<string, FunctionHandler> InitializeGeometryStaticMethodFunctionsDictionary();
    private static Dictionary`2<string, string> InitializeGeometryInstancePropertyFunctionsDictionary();
    private static Dictionary`2<string, string> InitializeRenamedGeometryInstanceMethodFunctions();
    private static ISqlFragment HandleSpatialFromTextFunction(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    private static ISqlFragment HandleSpatialFromGmlFunction(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    private static ISqlFragment HandleSpatialFromBinaryFunction(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    private static ISqlFragment HandleSpatialStaticMethodFunctionAppendSrid(SqlGenerator sqlgen, DbFunctionExpression functionExpression, string functionName);
    internal static ISqlFragment GenerateFunctionCallSql(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    private static bool IsSpecialStoreFunction(DbFunctionExpression e);
    private static bool IsSpecialCanonicalFunction(DbFunctionExpression e);
    private static bool IsSpatialCanonicalFunction(DbFunctionExpression e, PrimitiveTypeKind& spatialTypeKind);
    private static ISqlFragment HandleFunctionDefault(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleFunctionDefaultGivenName(SqlGenerator sqlgen, DbFunctionExpression e, string functionName);
    private static ISqlFragment HandleFunctionDefaultCastReturnValue(SqlGenerator sqlgen, DbFunctionExpression e, string functionName, string returnType);
    private static ISqlFragment WrapWithCast(string returnType, Action`1<SqlBuilder> toWrap);
    private static void HandleFunctionArgumentsDefault(SqlGenerator sqlgen, DbFunctionExpression e, SqlBuilder result);
    private static void WriteFunctionArguments(SqlGenerator sqlgen, IEnumerable`1<DbExpression> functionArguments, SqlBuilder result);
    private static ISqlFragment HandleFunctionGivenNameBasedOnVersion(SqlGenerator sqlgen, DbFunctionExpression e, string preKatmaiName, string katmaiName);
    private static ISqlFragment HandleSpecialStoreFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleSpecialCanonicalFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleSpecialFunction(Dictionary`2<string, FunctionHandler> handlers, SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleSpatialCanonicalFunction(SqlGenerator sqlgen, DbFunctionExpression functionExpression, PrimitiveTypeKind spatialTypeKind);
    private static ISqlFragment HandleSpatialCanonicalFunction(SqlGenerator sqlgen, DbFunctionExpression functionExpression, Dictionary`2<string, FunctionHandler> staticMethodsMap, Dictionary`2<string, string> instancePropertiesMap, Dictionary`2<string, string> renamedInstanceMethodsMap);
    private static ISqlFragment WriteInstanceFunctionCall(SqlGenerator sqlgen, string functionName, DbFunctionExpression functionExpression, bool isPropertyAccess);
    private static ISqlFragment WriteInstanceFunctionCall(SqlGenerator sqlgen, string functionName, DbFunctionExpression functionExpression, bool isPropertyAccess, string castReturnTypeTo);
    private static ISqlFragment HandleSpecialFunctionToOperator(SqlGenerator sqlgen, DbFunctionExpression e, bool parenthesiseArguments);
    private static ISqlFragment HandleConcatFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionBitwise(SqlGenerator sqlgen, DbFunctionExpression e);
    internal static ISqlFragment HandleDatepartDateFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private static ISqlFragment HandleCanonicalFunctionDatepart(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionGetTotalOffsetMinutes(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDatepart(SqlGenerator sqlgen, string datepart, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionCurrentDateTime(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionCurrentUtcDateTime(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionCurrentDateTimeOffset(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionCreateDateTime(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionCreateDateTimeOffset(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionCreateTime(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDateTimeTypeCreation(SqlGenerator sqlgen, string typeName, IList`1<DbExpression> args, bool hasDatePart, bool hasTimeZonePart);
    private static void AppendConvertToVarchar(SqlGenerator sqlgen, SqlBuilder result, DbExpression e);
    private static ISqlFragment HandleCanonicalFunctionTruncateTime(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDateAddKatmaiOrNewer(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDateAdd(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDateDiffKatmaiOrNewer(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDateDiff(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionIndexOf(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionNewGuid(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionLength(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionRound(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionTruncate(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionRoundOrTruncate(SqlGenerator sqlgen, DbFunctionExpression e, bool round);
    private static ISqlFragment HandleCanonicalFunctionAbs(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionTrim(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionToLower(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionToUpper(SqlGenerator sqlgen, DbFunctionExpression e);
    private static void TranslateConstantParameterForLike(SqlGenerator sqlgen, DbExpression targetExpression, DbConstantExpression constSearchParamExpression, SqlBuilder result, bool insertPercentStart, bool insertPercentEnd);
    private static ISqlFragment HandleCanonicalFunctionContains(SqlGenerator sqlgen, DbFunctionExpression e);
    private static SqlBuilder HandleCanonicalFunctionContains(SqlGenerator sqlgen, IList`1<DbExpression> args, SqlBuilder result);
    private static ISqlFragment HandleCanonicalFunctionStartsWith(SqlGenerator sqlgen, DbFunctionExpression e);
    private static SqlBuilder HandleCanonicalFunctionStartsWith(SqlGenerator sqlgen, IList`1<DbExpression> args, SqlBuilder result);
    private static ISqlFragment HandleCanonicalFunctionEndsWith(SqlGenerator sqlgen, DbFunctionExpression e);
    private static SqlBuilder HandleCanonicalFunctionEndsWith(SqlGenerator sqlgen, IList`1<DbExpression> args, SqlBuilder result);
    private static ISqlFragment WrapPredicate(Func`4<SqlGenerator, IList`1<DbExpression>, SqlBuilder, SqlBuilder> predicateTranslator, SqlGenerator sqlgen, DbFunctionExpression e);
    internal static void WriteFunctionName(SqlBuilder result, EdmFunction function);
    internal static bool IsStoreFunction(EdmFunction function);
    internal static bool CastReturnTypeToInt64(DbFunctionExpression e);
    internal static bool CastReturnTypeToInt32(SqlGenerator sqlgen, DbFunctionExpression e);
    internal static bool CastReturnTypeToInt16(DbFunctionExpression e);
    internal static bool CastReturnTypeToSingle(DbFunctionExpression e);
    private static bool CastReturnTypeToGivenType(DbFunctionExpression e, ISet`1<string> functionsRequiringReturnTypeCast, PrimitiveTypeKind type);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__0(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__1(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__2(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__3(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__4(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__5(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__6(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__7(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__8(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__9(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__a(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeStoreFunctionHandlers>b__b(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__18(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__19(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__1a(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__1b(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__1c(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__1d(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__1e(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__1f(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__20(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__21(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__22(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__23(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__24(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeographyStaticMethodFunctionsDictionary>b__25(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__34(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__35(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__36(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__37(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__38(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__39(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__3a(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__3b(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__3c(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__3d(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__3e(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__3f(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__40(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static ISqlFragment <InitializeGeometryStaticMethodFunctionsDictionary>b__41(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    [CompilerGeneratedAttribute]
private static bool <CastReturnTypeToInt32>b__57(TypeUsage storeType);
}
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
internal class System.Data.Entity.SqlServer.SqlGen.SqlGenerator : DbExpressionVisitor`1<ISqlFragment> {
    private static byte DefaultDecimalPrecision;
    private Stack`1<SqlSelectStatement> selectStatementStack;
    private Stack`1<bool> isParentAJoinStack;
    private Dictionary`2<string, int> allExtentNames;
    private Dictionary`2<string, int> allColumnNames;
    private SymbolTable symbolTable;
    private bool isVarRefSingle;
    private SymbolUsageManager optionalColumnUsageManager;
    private Dictionary`2<string, bool> _candidateParametersToForceNonUnicode;
    private bool _forceNonUnicode;
    private bool _ignoreForceNonUnicodeFlag;
    private static Char[] _hexDigits;
    private List`1<string> _targets;
    private static ISet`1<string> _canonicalAndStoreStringFunctionsOneArg;
    private SqlVersion _sqlVersion;
    private TypeUsage _integerType;
    private StoreItemCollection _storeItemCollection;
    [CompilerGeneratedAttribute]
private static Func`2<PrimitiveType, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, bool>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, bool>, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<DbExpression, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<DbExpression, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<DbExpression, IEnumerable`1<DbExpression>> CS$<>9__CachedAnonymousMethodDelegate14;
    private SqlSelectStatement CurrentSelectStatement { get; }
    private bool IsParentAJoin { get; }
    internal Dictionary`2<string, int> AllExtentNames { get; }
    internal Dictionary`2<string, int> AllColumnNames { get; }
    public List`1<string> Targets { get; }
    internal SqlVersion SqlVersion { get; }
    internal bool IsPreKatmai { get; }
    internal TypeUsage IntegerType { get; }
    internal StoreItemCollection StoreItemCollection { get; }
    internal SqlGenerator(SqlVersion sqlVersion);
    private static SqlGenerator();
    private SqlSelectStatement get_CurrentSelectStatement();
    private bool get_IsParentAJoin();
    internal Dictionary`2<string, int> get_AllExtentNames();
    internal Dictionary`2<string, int> get_AllColumnNames();
    public List`1<string> get_Targets();
    internal SqlVersion get_SqlVersion();
    internal bool get_IsPreKatmai();
    internal TypeUsage get_IntegerType();
    internal virtual StoreItemCollection get_StoreItemCollection();
    internal static string GenerateSql(DbCommandTree tree, SqlVersion sqlVersion, List`1& parameters, CommandType& commandType, HashSet`1& paramsToForceNonUnicode);
    private static string GenerateFunctionSql(DbFunctionCommandTree tree, CommandType& commandType);
    internal string GenerateSql(DbQueryCommandTree tree, HashSet`1& paramsToForceNonUnicode);
    internal SqlWriter WriteSql(SqlWriter writer, ISqlFragment sqlStatement);
    public virtual ISqlFragment Visit(DbAndExpression e);
    public virtual ISqlFragment Visit(DbApplyExpression e);
    public virtual ISqlFragment Visit(DbArithmeticExpression e);
    public virtual ISqlFragment Visit(DbCaseExpression e);
    public virtual ISqlFragment Visit(DbCastExpression e);
    public virtual ISqlFragment Visit(DbComparisonExpression e);
    private bool CheckIfForceNonUnicodeRequired(DbExpression e);
    private bool MatchPatternForForcingNonUnicode(DbExpression e);
    internal bool MatchTargetPatternForForcingNonUnicode(DbExpression expr);
    private static bool MatchSourcePatternForForcingNonUnicode(DbExpression argument);
    internal static bool IsConstParamOrNullExpressionUnicodeNotSpecified(DbExpression argument);
    private ISqlFragment VisitConstant(DbConstantExpression e, bool isCastOptional);
    private void AppendSpatialConstant(SqlBuilder result, IDbSpatialValue spatialValue);
    private static void AssertValidDouble(double value);
    private static void AssertValidSingle(float value);
    private static void WrapWithCastIfNeeded(bool cast, string value, string typeName, SqlBuilder result);
    public virtual ISqlFragment Visit(DbConstantExpression e);
    public virtual ISqlFragment Visit(DbDerefExpression e);
    public virtual ISqlFragment Visit(DbDistinctExpression e);
    public virtual ISqlFragment Visit(DbElementExpression e);
    public virtual ISqlFragment Visit(DbExceptExpression e);
    public virtual ISqlFragment Visit(DbExpression e);
    public virtual ISqlFragment Visit(DbScanExpression e);
    internal static string GetTargetTSql(EntitySetBase entitySetBase);
    public virtual ISqlFragment Visit(DbFilterExpression e);
    public virtual ISqlFragment Visit(DbFunctionExpression e);
    public virtual ISqlFragment Visit(DbLambdaExpression expression);
    public virtual ISqlFragment Visit(DbEntityRefExpression e);
    public virtual ISqlFragment Visit(DbRefKeyExpression e);
    public virtual ISqlFragment Visit(DbGroupByExpression e);
    public virtual ISqlFragment Visit(DbIntersectExpression e);
    public virtual ISqlFragment Visit(DbIsEmptyExpression e);
    public virtual ISqlFragment Visit(DbIsNullExpression e);
    public virtual ISqlFragment Visit(DbIsOfExpression e);
    public virtual ISqlFragment Visit(DbCrossJoinExpression e);
    public virtual ISqlFragment Visit(DbJoinExpression e);
    public virtual ISqlFragment Visit(DbLikeExpression e);
    public virtual ISqlFragment Visit(DbLimitExpression e);
    public virtual ISqlFragment Visit(DbNewInstanceExpression e);
    public virtual ISqlFragment Visit(DbNotExpression e);
    public virtual ISqlFragment Visit(DbNullExpression e);
    public virtual ISqlFragment Visit(DbOfTypeExpression e);
    public virtual ISqlFragment Visit(DbOrExpression e);
    public virtual ISqlFragment Visit(DbInExpression e);
    internal static IDictionary`2<DbExpression, IList`1<DbExpression>> HasBuiltMapForIn(DbOrExpression expression);
    private bool TryTranslateIntoIn(DbOrExpression e, ISqlFragment& sqlFragment);
    private void HandleInValue(SqlBuilder sqlBuilder, DbExpression value, bool isSameEdmType, bool forceNonUnicodeOnQualifyingValues);
    private void HandleInKey(SqlBuilder sqlBuilder, DbExpression key, bool forceNonUnicodeOnKey);
    private void ForcingNonUnicode(Action action, bool forceNonUnicode);
    private void ParenthesizeExpressionWithoutRedundantConstantCasts(DbExpression value, SqlBuilder sqlBuilder, bool isSameEdmType);
    internal static bool IsKeyForIn(DbExpression e);
    internal static bool TryAddExpressionForIn(DbBinaryExpression e, IDictionary`2<DbExpression, IList`1<DbExpression>> values);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
internal static bool HasBuiltMapForIn(DbExpression e, IDictionary`2<DbExpression, IList`1<DbExpression>> values);
    public virtual ISqlFragment Visit(DbParameterReferenceExpression e);
    public virtual ISqlFragment Visit(DbProjectExpression e);
    public virtual ISqlFragment Visit(DbPropertyExpression e);
    public virtual ISqlFragment Visit(DbQuantifierExpression e);
    public virtual ISqlFragment Visit(DbRefExpression e);
    public virtual ISqlFragment Visit(DbRelationshipNavigationExpression e);
    public virtual ISqlFragment Visit(DbSkipExpression e);
    public virtual ISqlFragment Visit(DbSortExpression e);
    public virtual ISqlFragment Visit(DbTreatExpression e);
    public virtual ISqlFragment Visit(DbUnionAllExpression e);
    public virtual ISqlFragment Visit(DbVariableReferenceExpression e);
    private static SqlBuilder VisitAggregate(DbAggregate aggregate, object aggregateArgument);
    internal void ParenthesizeExpressionIfNeeded(DbExpression e, SqlBuilder result);
    private SqlBuilder VisitBinaryExpression(string op, DbExpressionKind expressionKind, DbExpression left, DbExpression right);
    private static IEnumerable`1<DbExpression> FlattenAssociativeExpression(DbExpressionKind kind, DbExpression left, DbExpression right);
    private static void ExtractAssociativeArguments(DbExpressionKind expressionKind, List`1<DbExpression> argumentList, DbExpression expression);
    private SqlBuilder VisitComparisonExpression(string op, DbExpression left, DbExpression right);
    private SqlSelectStatement VisitInputExpression(DbExpression inputExpression, string inputVarName, TypeUsage inputVarType, Symbol& fromSymbol);
    private SqlBuilder VisitIsEmptyExpression(DbIsEmptyExpression e, bool negate);
    private ISqlFragment VisitCollectionConstructor(DbNewInstanceExpression e);
    private SqlBuilder VisitIsNullExpression(DbIsNullExpression e, bool negate);
    private ISqlFragment VisitJoinExpression(IList`1<DbExpressionBinding> inputs, DbExpressionKind joinKind, string joinString, DbExpression joinCondition);
    private void ProcessJoinInputResult(ISqlFragment fromExtentFragment, SqlSelectStatement result, DbExpressionBinding input, int fromSymbolStart);
    private ISqlFragment VisitNewInstanceExpression(DbNewInstanceExpression e, bool aliasesNeedRenaming, Dictionary`2& newColumns);
    private ISqlFragment VisitSetOpExpression(DbExpression left, DbExpression right, string separator);
    private void AddColumns(SqlSelectStatement selectStatement, Symbol symbol, List`1<Symbol> columnList, Dictionary`2<string, Symbol> columnDictionary);
    private OptionalColumn CreateOptionalColumn(Symbol inputColumnSymbol, Symbol column);
    private void AddColumn(SqlSelectStatement selectStatement, Symbol symbol, List`1<Symbol> columnList, Dictionary`2<string, Symbol> columnDictionary, string columnName);
    private List`1<Symbol> AddDefaultColumns(SqlSelectStatement selectStatement);
    private void AddFromSymbol(SqlSelectStatement selectStatement, string inputVarName, Symbol fromSymbol);
    private void AddFromSymbol(SqlSelectStatement selectStatement, string inputVarName, Symbol fromSymbol, bool addToSymbolTable);
    private void AddSortKeys(SqlBuilder orderByClause, IList`1<DbSortClause> sortKeys);
    private SqlSelectStatement CreateNewSelectStatement(SqlSelectStatement oldStatement, string inputVarName, TypeUsage inputVarType, Symbol& fromSymbol);
    private SqlSelectStatement CreateNewSelectStatement(SqlSelectStatement oldStatement, string inputVarName, TypeUsage inputVarType, bool finalizeOldStatement, Symbol& fromSymbol);
    private static string EscapeSingleQuote(string s, bool isUnicode);
    private string GetSqlPrimitiveType(TypeUsage type);
    internal static string GenerateSqlForStoreType(SqlVersion sqlVersion, TypeUsage storeTypeUsage);
    private ISqlFragment HandleCountExpression(DbExpression e);
    private static bool IsApplyExpression(DbExpression e);
    private static bool IsJoinExpression(DbExpression e);
    private static bool IsComplexExpression(DbExpression e);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private static bool IsCompatible(SqlSelectStatement result, DbExpressionKind expressionKind);
    internal static string QuoteIdentifier(string name);
    private SqlSelectStatement VisitExpressionEnsureSqlStatement(DbExpression e);
    private SqlSelectStatement VisitExpressionEnsureSqlStatement(DbExpression e, bool addDefaultColumns, bool markAllDefaultColumnsAsUsed);
    private SqlSelectStatement VisitFilterExpression(DbExpressionBinding input, DbExpression predicate, bool negatePredicate);
    private static void WrapNonQueryExtent(SqlSelectStatement result, ISqlFragment sqlFragment, DbExpressionKind expressionKind);
    private static string ByteArrayToBinaryString(Byte[] binaryArray);
    private static bool GroupByAggregatesNeedInnerQuery(IList`1<DbAggregate> aggregates, string inputVarRefName);
    private static bool GroupByAggregateNeedsInnerQuery(DbExpression expression, string inputVarRefName);
    private static bool GroupByKeysNeedInnerQuery(IList`1<DbExpression> keys, string inputVarRefName);
    private static bool GroupByKeyNeedsInnerQuery(DbExpression expression, string inputVarRefName);
    private static bool GroupByExpressionNeedsInnerQuery(DbExpression expression, string inputVarRefName, bool allowConstants);
    private void AssertKatmaiOrNewer(PrimitiveTypeKind primitiveTypeKind);
    private static void AssertKatmaiOrNewer(SqlVersion sqlVersion, PrimitiveTypeKind primitiveTypeKind);
    internal void AssertKatmaiOrNewer(DbFunctionExpression e);
    [CompilerGeneratedAttribute]
private static bool <get_IntegerType>b__0(PrimitiveType t);
    [CompilerGeneratedAttribute]
private static bool <GenerateSql>b__2(KeyValuePair`2<string, bool> p);
    [CompilerGeneratedAttribute]
private static string <GenerateSql>b__3(KeyValuePair`2<string, bool> q);
    [CompilerGeneratedAttribute]
private static bool <TryTranslateIntoIn>b__6(DbExpression v);
    [CompilerGeneratedAttribute]
private static bool <TryTranslateIntoIn>b__7(DbExpression v);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<DbExpression> <ExtractAssociativeArguments>b__13(DbExpression exp);
}
internal class System.Data.Entity.SqlServer.SqlGen.SqlSelectClauseBuilder : SqlBuilder {
    private List`1<OptionalColumn> m_optionalColumns;
    private TopClause m_top;
    private Func`1<bool> m_isPartOfTopMostStatement;
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    internal TopClause Top { get; internal set; }
    internal bool IsDistinct { get; internal set; }
    public bool IsEmpty { get; }
    internal SqlSelectClauseBuilder(Func`1<bool> isPartOfTopMostStatement);
    internal void AddOptionalColumn(OptionalColumn column);
    internal TopClause get_Top();
    internal void set_Top(TopClause value);
    [CompilerGeneratedAttribute]
internal bool get_IsDistinct();
    [CompilerGeneratedAttribute]
internal void set_IsDistinct(bool value);
    public virtual bool get_IsEmpty();
    public virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
    private bool WriteOptionalColumns(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.Entity.SqlServer.SqlGen.SqlSelectStatement : object {
    private List`1<Symbol> fromExtents;
    private Dictionary`2<Symbol, bool> outerExtents;
    private SqlSelectClauseBuilder select;
    private SqlBuilder from;
    private SqlBuilder where;
    private SqlBuilder groupBy;
    private SqlBuilder orderBy;
    [CompilerGeneratedAttribute]
private bool <OutputColumnsRenamed>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Symbol> <OutputColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Symbol> <AllJoinExtents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTopMost>k__BackingField;
    internal bool OutputColumnsRenamed { get; internal set; }
    internal Dictionary`2<string, Symbol> OutputColumns { get; internal set; }
    internal List`1<Symbol> AllJoinExtents { get; internal set; }
    internal List`1<Symbol> FromExtents { get; }
    internal Dictionary`2<Symbol, bool> OuterExtents { get; }
    internal SqlSelectClauseBuilder Select { get; }
    internal SqlBuilder From { get; }
    internal SqlBuilder Where { get; }
    internal SqlBuilder GroupBy { get; }
    public SqlBuilder OrderBy { get; }
    internal bool IsTopMost { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_OutputColumnsRenamed();
    [CompilerGeneratedAttribute]
internal void set_OutputColumnsRenamed(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Symbol> get_OutputColumns();
    [CompilerGeneratedAttribute]
internal void set_OutputColumns(Dictionary`2<string, Symbol> value);
    [CompilerGeneratedAttribute]
internal List`1<Symbol> get_AllJoinExtents();
    [CompilerGeneratedAttribute]
internal void set_AllJoinExtents(List`1<Symbol> value);
    internal List`1<Symbol> get_FromExtents();
    internal Dictionary`2<Symbol, bool> get_OuterExtents();
    internal SqlSelectClauseBuilder get_Select();
    internal SqlBuilder get_From();
    internal SqlBuilder get_Where();
    internal SqlBuilder get_GroupBy();
    public SqlBuilder get_OrderBy();
    [CompilerGeneratedAttribute]
internal bool get_IsTopMost();
    [CompilerGeneratedAttribute]
internal void set_IsTopMost(bool value);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0();
}
internal class System.Data.Entity.SqlServer.SqlGen.SqlStringBuilder : object {
    private StringBuilder _sql;
    [CompilerGeneratedAttribute]
private bool <UpperCaseKeywords>k__BackingField;
    public bool UpperCaseKeywords { get; public set; }
    internal StringBuilder InnerBuilder { get; }
    public int Length { get; }
    public SqlStringBuilder(int capacity);
    [CompilerGeneratedAttribute]
public bool get_UpperCaseKeywords();
    [CompilerGeneratedAttribute]
public void set_UpperCaseKeywords(bool value);
    internal StringBuilder get_InnerBuilder();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public SqlStringBuilder AppendKeyword(string keyword);
    public SqlStringBuilder AppendLine();
    public SqlStringBuilder AppendLine(string s);
    public SqlStringBuilder Append(string s);
    public int get_Length();
    public virtual string ToString();
}
internal class System.Data.Entity.SqlServer.SqlGen.SqlWriter : IndentedTextWriter {
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
public SqlWriter(StringBuilder b);
}
internal class System.Data.Entity.SqlServer.SqlGen.Symbol : object {
    private Dictionary`2<string, Symbol> columns;
    private Dictionary`2<string, Symbol> outputColumns;
    private string name;
    [CompilerGeneratedAttribute]
private bool <NeedsRenaming>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputColumnsRenamed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeUsage <Type>k__BackingField;
    internal Dictionary`2<string, Symbol> Columns { get; }
    internal Dictionary`2<string, Symbol> OutputColumns { get; }
    internal bool NeedsRenaming { get; internal set; }
    internal bool OutputColumnsRenamed { get; internal set; }
    public string Name { get; }
    public string NewName { get; public set; }
    internal TypeUsage Type { get; internal set; }
    public Symbol(string name, TypeUsage type);
    public Symbol(string name, TypeUsage type, Dictionary`2<string, Symbol> outputColumns, bool outputColumnsRenamed);
    internal Dictionary`2<string, Symbol> get_Columns();
    internal Dictionary`2<string, Symbol> get_OutputColumns();
    [CompilerGeneratedAttribute]
internal bool get_NeedsRenaming();
    [CompilerGeneratedAttribute]
internal void set_NeedsRenaming(bool value);
    [CompilerGeneratedAttribute]
internal bool get_OutputColumnsRenamed();
    [CompilerGeneratedAttribute]
internal void set_OutputColumnsRenamed(bool value);
    public string get_Name();
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public void set_NewName(string value);
    [CompilerGeneratedAttribute]
internal TypeUsage get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(TypeUsage value);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.Entity.SqlServer.SqlGen.SymbolPair : object {
    public Symbol Source;
    public Symbol Column;
    public SymbolPair(Symbol source, Symbol column);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.Entity.SqlServer.SqlGen.SymbolTable : object {
    private List`1<Dictionary`2<string, Symbol>> symbols;
    internal void EnterScope();
    internal void ExitScope();
    internal void Add(string name, Symbol value);
    internal Symbol Lookup(string name);
}
internal class System.Data.Entity.SqlServer.SqlGen.SymbolUsageManager : object {
    private Dictionary`2<Symbol, BoolWrapper> optionalColumnUsage;
    internal bool ContainsKey(Symbol key);
    internal bool TryGetValue(Symbol key, Boolean& value);
    internal void Add(Symbol sourceSymbol, Symbol symbolToAdd);
    internal void MarkAsUsed(Symbol key);
    internal bool IsUsed(Symbol key);
}
internal class System.Data.Entity.SqlServer.SqlGen.TopClause : object {
    private ISqlFragment topCount;
    private bool withTies;
    internal bool WithTies { get; }
    internal ISqlFragment TopCount { get; }
    internal TopClause(ISqlFragment topCount, bool withTies);
    internal TopClause(int topCount, bool withTies);
    internal bool get_WithTies();
    internal ISqlFragment get_TopCount();
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.Entity.SqlServer.SqlProviderManifest : DbXmlEnabledProviderManifest {
    internal static string TokenSql8;
    internal static string TokenSql9;
    internal static string TokenSql10;
    internal static string TokenSql11;
    internal static string TokenAzure11;
    internal static char LikeEscapeChar;
    internal static string LikeEscapeCharToString;
    private static int varcharMaxSize;
    private static int nvarcharMaxSize;
    private static int binaryMaxSize;
    private SqlVersion _version;
    private ReadOnlyCollection`1<PrimitiveType> _primitiveTypes;
    private ReadOnlyCollection`1<EdmFunction> _functions;
    [CompilerGeneratedAttribute]
private static Predicate`1<PrimitiveType> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Predicate`1<PrimitiveType> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<EdmFunction, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<EdmFunction, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<FunctionParameter, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    internal SqlVersion SqlVersion { get; }
    public SqlProviderManifest(string manifestToken);
    private void Initialize();
    internal SqlVersion get_SqlVersion();
    private static XmlReader GetXmlResource(string resourceName);
    internal static XmlReader GetProviderManifest();
    internal static XmlReader GetStoreSchemaMapping(string mslName);
    internal XmlReader GetStoreSchemaDescription(string ssdlName);
    internal static string EscapeLikeText(string text, bool alwaysEscapeEscapeChar, Boolean& usedEscapeChar);
    protected virtual XmlReader GetDbInformation(string informationType);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    private static bool IsKatmaiOrNewer(EdmFunction edmFunction);
    private static bool IsYukonOrNewer(EdmFunction edmFunction);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
[SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public virtual TypeUsage GetEdmType(TypeUsage storeType);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public virtual TypeUsage GetStoreType(TypeUsage edmType);
    private TypeUsage GetStorePrimitiveTypeIfPostSql9(string storeTypeName, string nameForException, PrimitiveTypeKind primitiveTypeKind);
    public virtual bool SupportsEscapingLikeArgument(Char& escapeCharacter);
    public virtual string EscapeLikeArgument(string argument);
    public virtual bool SupportsInExpression();
    [CompilerGeneratedAttribute]
private static bool <Initialize>b__0(PrimitiveType primitiveType);
    [CompilerGeneratedAttribute]
private static bool <Initialize>b__1(PrimitiveType primitiveType);
    [CompilerGeneratedAttribute]
private static bool <Initialize>b__2(EdmFunction f);
    [CompilerGeneratedAttribute]
private static bool <Initialize>b__3(EdmFunction f);
    [CompilerGeneratedAttribute]
private static bool <IsKatmaiOrNewer>b__8(FunctionParameter p);
}
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
public class System.Data.Entity.SqlServer.SqlProviderServices : DbProviderServices {
    public static string ProviderInvariantName;
    private ConcurrentDictionary`2<string, SqlProviderManifest> _providerManifests;
    private static SqlProviderServices _providerInstance;
    private static bool _truncateDecimalsToScale;
    [CompilerGeneratedAttribute]
private static Func`1<DefaultSqlExecutionStrategy> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`1<MigrationSqlGenerator> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<string, SqlProviderManifest> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Action`1<DbConnection> CS$<>9__CachedAnonymousMethodDelegate1e;
    public static SqlProviderServices Instance { get; }
    public static bool TruncateDecimalsToScale { get; public set; }
    private static SqlProviderServices();
    public static SqlProviderServices get_Instance();
    public static bool get_TruncateDecimalsToScale();
    public static void set_TruncateDecimalsToScale(bool value);
    public virtual void RegisterInfoMessageHandler(DbConnection connection, Action`1<string> handler);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
protected virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
[SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
private static DbCommand CreateCommand(DbProviderManifest providerManifest, DbCommandTree commandTree);
    protected virtual void SetDbParameterValue(DbParameter parameter, TypeUsage parameterType, object value);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
protected virtual string GetDbProviderManifestToken(DbConnection connection);
    private static string QueryForManifestToken(DbConnection conn);
    protected virtual DbProviderManifest GetDbProviderManifest(string versionHint);
    protected virtual DbSpatialDataReader GetDbSpatialDataReader(DbDataReader fromReader, string versionHint);
    [ObsoleteAttribute("Return DbSpatialServices from the GetService method. See http://go.microsoft.com/fwlink/?LinkId=260882 for more information.")]
protected virtual DbSpatialServices DbGetSpatialServices(string versionHint);
    private static bool SupportsSpatial(string versionHint);
    internal static SqlParameter CreateSqlParameter(string name, TypeUsage type, ParameterMode mode, object value, bool preventTruncation, SqlVersion version);
    private static ParameterDirection ParameterModeToParameterDirection(ParameterMode mode);
    internal static object EnsureSqlParameterValue(object value);
    private static SqlDbType GetSqlDbType(TypeUsage type, bool isOutParam, SqlVersion version, Nullable`1& size, Nullable`1& precision, Nullable`1& scale, String& udtName);
    private static Nullable`1<int> GetParameterSize(TypeUsage type, bool isOutParam);
    private static int GetNonMaxLength(SqlDbType type);
    private static int GetDefaultStringMaxLength(SqlVersion version, SqlDbType type);
    private static int GetDefaultBinaryMaxLength(SqlVersion version);
    private static Nullable`1<byte> GetKatmaiDateTimePrecision(TypeUsage type, bool isOutParam);
    private static Nullable`1<byte> GetParameterPrecision(TypeUsage type, Nullable`1<byte> defaultIfUndefined);
    private static Nullable`1<byte> GetScale(TypeUsage type);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private static SqlDbType GetStringDbType(TypeUsage type);
    private static SqlDbType GetBinaryDbType(TypeUsage type);
    protected virtual string DbCreateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection);
    protected virtual void DbCreateDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    private static void GetOrGenerateDatabaseNameAndGetFileNames(SqlConnection sqlConnection, String& databaseName, String& dataFileName, String& logFileName);
    private static string GetLdfFileName(string dataFileName);
    private static string GenerateDatabaseName(string mdfFileName);
    private static string GetMdfFileName(string attachDBFile);
    internal static SqlVersion CreateDatabaseFromScript(Nullable`1<int> commandTimeout, DbConnection sqlConnection, string createDatabaseScript);
    protected virtual bool DbDatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    private static bool CheckDatabaseExists(SqlConnection sqlConnection, Nullable`1<int> commandTimeout, string databaseName);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
protected virtual void DbDeleteDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    private static void DropDatabase(SqlConnection sqlConnection, Nullable`1<int> commandTimeout, string databaseName);
    private static string CreateObjectsScript(SqlVersion version, StoreItemCollection storeItemCollection);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
[SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
private static DbCommand CreateCommand(DbConnection sqlConnection, string commandText, Nullable`1<int> commandTimeout);
    private static void UsingConnection(DbConnection sqlConnection, Action`1<DbConnection> act);
    private static void UsingMasterConnection(DbConnection sqlConnection, Action`1<DbConnection> act);
    [CompilerGeneratedAttribute]
private static DefaultSqlExecutionStrategy <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static MigrationSqlGenerator <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(object k);
    [CompilerGeneratedAttribute]
private static SqlProviderManifest <GetDbProviderManifest>b__f(string s);
    [CompilerGeneratedAttribute]
private static void <DbDatabaseExists>b__1c(DbConnection con);
}
internal class System.Data.Entity.SqlServer.SqlProviderUtilities : object {
    internal static SqlConnection GetRequiredSqlConnection(DbConnection connection);
}
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
public class System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator : MigrationSqlGenerator {
    private static string BatchTerminator;
    internal static string DateTimeFormat;
    internal static string DateTimeOffsetFormat;
    private SqlGenerator _sqlGenerator;
    private List`1<MigrationStatement> _statements;
    private HashSet`1<string> _generatedSchemas;
    private string _providerManifestToken;
    private int _variableCounter;
    protected string GuidColumnDefault { get; }
    public virtual IEnumerable`1<MigrationStatement> Generate(IEnumerable`1<MigrationOperation> migrationOperations, string providerManifestToken);
    private void GenerateStatements(IEnumerable`1<MigrationOperation> migrationOperations);
    public virtual string GenerateProcedureBody(ICollection`1<DbModificationCommandTree> commandTrees, string rowsAffectedParameter, string providerManifestToken);
    private void InitializeProviderServices(string providerManifestToken);
    private string GenerateFunctionSql(ICollection`1<DbModificationCommandTree> commandTrees, string rowsAffectedParameter);
    protected virtual void Generate(UpdateDatabaseOperation updateDatabaseOperation);
    protected virtual void Generate(MigrationOperation migrationOperation);
    protected virtual DbConnection CreateConnection();
    protected virtual void Generate(CreateProcedureOperation createProcedureOperation);
    protected virtual void Generate(AlterProcedureOperation alterProcedureOperation);
    private void Generate(ProcedureOperation procedureOperation, string modifier);
    private void Generate(ParameterModel parameterModel, IndentedTextWriter writer);
    protected virtual void Generate(DropProcedureOperation dropProcedureOperation);
    protected virtual void Generate(CreateTableOperation createTableOperation);
    private void WriteCreateTable(CreateTableOperation createTableOperation, IndentedTextWriter writer);
    protected internal virtual void Generate(AlterTableOperation alterTableOperation);
    protected virtual void GenerateMakeSystemTable(CreateTableOperation createTableOperation, IndentedTextWriter writer);
    protected virtual void GenerateCreateSchema(string schema);
    protected virtual void Generate(AddForeignKeyOperation addForeignKeyOperation);
    protected virtual void Generate(DropForeignKeyOperation dropForeignKeyOperation);
    protected virtual void Generate(CreateIndexOperation createIndexOperation);
    protected virtual void Generate(DropIndexOperation dropIndexOperation);
    protected virtual void Generate(AddPrimaryKeyOperation addPrimaryKeyOperation);
    protected virtual void Generate(DropPrimaryKeyOperation dropPrimaryKeyOperation);
    protected virtual void Generate(AddColumnOperation addColumnOperation);
    protected virtual void Generate(DropColumnOperation dropColumnOperation);
    protected virtual void Generate(AlterColumnOperation alterColumnOperation);
    protected internal virtual void DropDefaultConstraint(string table, string column, IndentedTextWriter writer);
    protected virtual void Generate(DropTableOperation dropTableOperation);
    protected virtual void Generate(SqlOperation sqlOperation);
    protected virtual void Generate(RenameColumnOperation renameColumnOperation);
    protected virtual void Generate(RenameIndexOperation renameIndexOperation);
    protected virtual void Generate(RenameTableOperation renameTableOperation);
    private static void WriteRenameTable(RenameTableOperation renameTableOperation, IndentedTextWriter writer);
    protected virtual void Generate(RenameProcedureOperation renameProcedureOperation);
    protected virtual void Generate(MoveProcedureOperation moveProcedureOperation);
    protected virtual void Generate(MoveTableOperation moveTableOperation);
    protected internal virtual void Generate(ColumnModel column, IndentedTextWriter writer);
    protected virtual string get_GuidColumnDefault();
    protected virtual void Generate(HistoryOperation historyOperation);
    protected virtual string Generate(Byte[] defaultValue);
    protected virtual string Generate(bool defaultValue);
    protected virtual string Generate(DateTime defaultValue);
    protected virtual string Generate(DateTimeOffset defaultValue);
    protected virtual string Generate(Guid defaultValue);
    protected virtual string Generate(string defaultValue);
    protected virtual string Generate(TimeSpan defaultValue);
    protected virtual string Generate(DbGeography defaultValue);
    protected virtual string Generate(DbGeometry defaultValue);
    protected virtual string Generate(object defaultValue);
    protected virtual string BuildColumnType(ColumnModel columnModel);
    private string BuildPropertyType(PropertyModel propertyModel);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
protected virtual string Name(string name);
    protected virtual string Quote(string identifier);
    private static string Escape(string s);
    private static string Indent(string s, string indentation);
    [SuppressMessageAttribute("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
protected void Statement(string sql, bool suppressTransaction, string batchTerminator);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
protected static IndentedTextWriter Writer();
    [SuppressMessageAttribute("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
protected void Statement(IndentedTextWriter writer, string batchTerminator);
    private static IEnumerable`1<MigrationOperation> DetectHistoryRebuild(IEnumerable`1<MigrationOperation> operations);
    private void Generate(HistoryRebuildOperationSequence sequence);
    private static CreateTableOperation ResolveNameConflicts(CreateTableOperation source);
    [CompilerGeneratedAttribute]
private void <GenerateStatements>b__2(object o);
}
internal class System.Data.Entity.SqlServer.SqlSpatialDataReader : DbSpatialDataReader {
    private static string GeometrySqlType;
    private static string GeographySqlType;
    private static Lazy`1<Func`2<BinaryReader, object>> _sqlGeographyFromBinaryReader;
    private static Lazy`1<Func`2<BinaryReader, object>> _sqlGeometryFromBinaryReader;
    private DbSpatialServices _spatialServices;
    private SqlDataReaderWrapper _reader;
    private Boolean[] _geographyColumns;
    private Boolean[] _geometryColumns;
    [CompilerGeneratedAttribute]
private static Func`1<Func`2<BinaryReader, object>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`1<Func`2<BinaryReader, object>> CS$<>9__CachedAnonymousMethodDelegate3;
    internal SqlSpatialDataReader(DbSpatialServices spatialServices, SqlDataReaderWrapper underlyingReader);
    private static SqlSpatialDataReader();
    public virtual DbGeography GetGeography(int ordinal);
    public virtual DbGeometry GetGeometry(int ordinal);
    public virtual bool IsGeographyColumn(int ordinal);
    public virtual bool IsGeometryColumn(int ordinal);
    private void EnsureGeographyColumn(int ordinal);
    private void EnsureGeometryColumn(int ordinal);
    private static Func`2<BinaryReader, object> CreateBinaryReadDelegate(Type spatialType);
    [CompilerGeneratedAttribute]
private static Func`2<BinaryReader, object> <.cctor>b__0();
    [CompilerGeneratedAttribute]
private static Func`2<BinaryReader, object> <.cctor>b__1();
}
public static class System.Data.Entity.SqlServer.SqlSpatialFunctions : object {
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "POINTGEOGRAPHY")]
public static DbGeography PointGeography(Nullable`1<double> latitude, Nullable`1<double> longitude, Nullable`1<int> spatialReferenceId);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "ASTEXTZM")]
public static string AsTextZM(DbGeography geographyValue);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "BUFFERWITHTOLERANCE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static DbGeography BufferWithTolerance(DbGeography geographyValue, Nullable`1<double> distance, Nullable`1<double> tolerance, Nullable`1<bool> relative);
    [DbFunctionAttribute("SqlServer", "ENVELOPEANGLE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<double> EnvelopeAngle(DbGeography geographyValue);
    [DbFunctionAttribute("SqlServer", "ENVELOPECENTER")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static DbGeography EnvelopeCenter(DbGeography geographyValue);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "FILTER")]
public static Nullable`1<bool> Filter(DbGeography geographyValue, DbGeography geographyOther);
    [DbFunctionAttribute("SqlServer", "INSTANCEOF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<bool> InstanceOf(DbGeography geographyValue, string geometryTypeName);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
[DbFunctionAttribute("SqlServer", "NUMRINGS")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<int> NumRings(DbGeography geographyValue);
    [DbFunctionAttribute("SqlServer", "REDUCE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static DbGeography Reduce(DbGeography geographyValue, Nullable`1<double> tolerance);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "RINGN")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static DbGeography RingN(DbGeography geographyValue, Nullable`1<int> index);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
[DbFunctionAttribute("SqlServer", "POINTGEOMETRY")]
public static DbGeometry PointGeometry(Nullable`1<double> xCoordinate, Nullable`1<double> yCoordinate, Nullable`1<int> spatialReferenceId);
    [DbFunctionAttribute("SqlServer", "ASTEXTZM")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static string AsTextZM(DbGeometry geometryValue);
    [DbFunctionAttribute("SqlServer", "BUFFERWITHTOLERANCE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static DbGeometry BufferWithTolerance(DbGeometry geometryValue, Nullable`1<double> distance, Nullable`1<double> tolerance, Nullable`1<bool> relative);
    [DbFunctionAttribute("SqlServer", "INSTANCEOF")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static Nullable`1<bool> InstanceOf(DbGeometry geometryValue, string geometryTypeName);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "FILTER")]
public static Nullable`1<bool> Filter(DbGeometry geometryValue, DbGeometry geometryOther);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[DbFunctionAttribute("SqlServer", "MAKEVALID")]
public static DbGeometry MakeValid(DbGeometry geometryValue);
    [DbFunctionAttribute("SqlServer", "REDUCE")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public static DbGeometry Reduce(DbGeometry geometryValue, Nullable`1<double> tolerance);
}
public class System.Data.Entity.SqlServer.SqlSpatialServices : DbSpatialServices {
    internal static SqlSpatialServices Instance;
    private static Dictionary`2<string, SqlSpatialServices> _otherSpatialServices;
    private SqlTypesAssemblyLoader _loader;
    [CompilerGeneratedAttribute]
private static Func`1<Exception> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`1<Exception> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`4<int, Byte[], string, DbGeographyWellKnownValue> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`1<Exception> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`1<Exception> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`4<int, Byte[], string, DbGeometryWellKnownValue> CS$<>9__CachedAnonymousMethodDelegatee;
    public bool NativeTypesAvailable { get; }
    internal SqlTypesAssembly SqlTypes { get; }
    internal SqlSpatialServices(SqlTypesAssemblyLoader loader);
    private static SqlSpatialServices();
    public virtual bool get_NativeTypesAvailable();
    private static bool TryGetSpatialServiceFromAssembly(Assembly assembly, SqlSpatialServices& services);
    internal SqlTypesAssembly get_SqlTypes();
    public virtual object CreateProviderValue(DbGeographyWellKnownValue wellKnownValue);
    public virtual DbGeography GeographyFromProviderValue(object providerValue);
    private object NormalizeProviderValue(object providerValue, Type expectedSpatialType);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
public virtual DbGeographyWellKnownValue CreateWellKnownValue(DbGeography geographyValue);
    public virtual object CreateProviderValue(DbGeometryWellKnownValue wellKnownValue);
    public virtual DbGeometry GeometryFromProviderValue(object providerValue);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
public virtual DbGeometryWellKnownValue CreateWellKnownValue(DbGeometry geometryValue);
    private static TValue CreateWellKnownValue(IDbSpatialValue spatialValue, Func`1<Exception> onMissingcoordinateSystemId, Func`1<Exception> onMissingWkbAndWkt, Func`4<int, Byte[], string, TValue> onValidValue);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeography geographyValue);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeometry geometryValue);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
private object ConvertToSqlValue(DbGeography geographyValue, string argumentName);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
private object ConvertToSqlValue(DbGeometry geometryValue, string argumentName);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
private object ConvertToSqlBytes(Byte[] binaryValue, string argumentName);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
private object ConvertToSqlChars(string stringValue, string argumentName);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
private object ConvertToSqlString(string stringValue, string argumentName);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
private object ConvertToSqlXml(string stringValue, string argumentName);
    private bool ConvertSqlBooleanToBoolean(object sqlBoolean);
    private Nullable`1<bool> ConvertSqlBooleanToNullableBoolean(object sqlBoolean);
    private Byte[] ConvertSqlBytesToBinary(object sqlBytes);
    private string ConvertSqlCharsToString(object sqlCharsValue);
    private string ConvertSqlStringToString(object sqlCharsValue);
    private double ConvertSqlDoubleToDouble(object sqlDoubleValue);
    private Nullable`1<double> ConvertSqlDoubleToNullableDouble(object sqlDoubleValue);
    private int ConvertSqlInt32ToInt(object sqlInt32Value);
    private Nullable`1<int> ConvertSqlInt32ToNullableInt(object sqlInt32Value);
    private string ConvertSqlXmlToString(object sqlXmlValue);
    public virtual DbGeography GeographyFromText(string wellKnownText);
    public virtual DbGeography GeographyFromText(string wellKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyPointFromText(string pointWellKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyLineFromText(string lineWellKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyPolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyMultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyMultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyMultiPolygonFromText(string multiPolygonKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyCollectionFromText(string geographyCollectionWellKnownText, int coordinateSystemId);
    public virtual DbGeography GeographyFromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyFromBinary(Byte[] wellKnownBinary);
    public virtual DbGeography GeographyPointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyLineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyPolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyMultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyMultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyMultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyCollectionFromBinary(Byte[] geographyCollectionWellKnownBinary, int coordinateSystemId);
    public virtual DbGeography GeographyFromGml(string geographyMarkup);
    public virtual DbGeography GeographyFromGml(string geographyMarkup, int coordinateSystemId);
    public virtual int GetCoordinateSystemId(DbGeography geographyValue);
    public virtual string GetSpatialTypeName(DbGeography geographyValue);
    public virtual int GetDimension(DbGeography geographyValue);
    public virtual Byte[] AsBinary(DbGeography geographyValue);
    public virtual string AsGml(DbGeography geographyValue);
    public virtual string AsText(DbGeography geographyValue);
    public virtual bool GetIsEmpty(DbGeography geographyValue);
    public virtual bool SpatialEquals(DbGeography geographyValue, DbGeography otherGeography);
    public virtual bool Disjoint(DbGeography geographyValue, DbGeography otherGeography);
    public virtual bool Intersects(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Buffer(DbGeography geographyValue, double distance);
    public virtual double Distance(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Intersection(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Union(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Difference(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography SymmetricDifference(DbGeography geographyValue, DbGeography otherGeography);
    public virtual Nullable`1<int> GetElementCount(DbGeography geographyValue);
    public virtual DbGeography ElementAt(DbGeography geographyValue, int index);
    public virtual Nullable`1<double> GetLatitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLongitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetElevation(DbGeography geographyValue);
    public virtual Nullable`1<double> GetMeasure(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLength(DbGeography geographyValue);
    public virtual DbGeography GetStartPoint(DbGeography geographyValue);
    public virtual DbGeography GetEndPoint(DbGeography geographyValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeography geographyValue);
    public virtual Nullable`1<int> GetPointCount(DbGeography geographyValue);
    public virtual DbGeography PointAt(DbGeography geographyValue, int index);
    public virtual Nullable`1<double> GetArea(DbGeography geographyValue);
    public virtual DbGeometry GeometryFromText(string wellKnownText);
    public virtual DbGeometry GeometryFromText(string wellKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryPointFromText(string pointWellKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryLineFromText(string lineWellKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryPolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryMultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryMultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryMultiPolygonFromText(string multiPolygonKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryCollectionFromText(string geometryCollectionWellKnownText, int coordinateSystemId);
    public virtual DbGeometry GeometryFromBinary(Byte[] wellKnownBinary);
    public virtual DbGeometry GeometryFromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryPointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryLineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryPolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryMultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryMultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryMultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryCollectionFromBinary(Byte[] geometryCollectionWellKnownBinary, int coordinateSystemId);
    public virtual DbGeometry GeometryFromGml(string geometryMarkup);
    public virtual DbGeometry GeometryFromGml(string geometryMarkup, int coordinateSystemId);
    public virtual int GetCoordinateSystemId(DbGeometry geometryValue);
    public virtual string GetSpatialTypeName(DbGeometry geometryValue);
    public virtual int GetDimension(DbGeometry geometryValue);
    public virtual DbGeometry GetEnvelope(DbGeometry geometryValue);
    public virtual Byte[] AsBinary(DbGeometry geometryValue);
    public virtual string AsGml(DbGeometry geometryValue);
    public virtual string AsText(DbGeometry geometryValue);
    public virtual bool GetIsEmpty(DbGeometry geometryValue);
    public virtual bool GetIsSimple(DbGeometry geometryValue);
    public virtual DbGeometry GetBoundary(DbGeometry geometryValue);
    public virtual bool GetIsValid(DbGeometry geometryValue);
    public virtual bool SpatialEquals(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Disjoint(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Intersects(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Touches(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Crosses(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Within(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Contains(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Overlaps(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Relate(DbGeometry geometryValue, DbGeometry otherGeometry, string matrix);
    public virtual DbGeometry Buffer(DbGeometry geometryValue, double distance);
    public virtual double Distance(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry GetConvexHull(DbGeometry geometryValue);
    public virtual DbGeometry Intersection(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry Union(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry Difference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry SymmetricDifference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual Nullable`1<int> GetElementCount(DbGeometry geometryValue);
    public virtual DbGeometry ElementAt(DbGeometry geometryValue, int index);
    public virtual Nullable`1<double> GetXCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetYCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetElevation(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetMeasure(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetLength(DbGeometry geometryValue);
    public virtual DbGeometry GetStartPoint(DbGeometry geometryValue);
    public virtual DbGeometry GetEndPoint(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetPointCount(DbGeometry geometryValue);
    public virtual DbGeometry PointAt(DbGeometry geometryValue, int index);
    public virtual Nullable`1<double> GetArea(DbGeometry geometryValue);
    public virtual DbGeometry GetCentroid(DbGeometry geometryValue);
    public virtual DbGeometry GetPointOnSurface(DbGeometry geometryValue);
    public virtual DbGeometry GetExteriorRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetInteriorRingCount(DbGeometry geometryValue);
    public virtual DbGeometry InteriorRingAt(DbGeometry geometryValue, int index);
    [CompilerGeneratedAttribute]
private static Exception <CreateWellKnownValue>b__2();
    [CompilerGeneratedAttribute]
private static Exception <CreateWellKnownValue>b__3();
    [CompilerGeneratedAttribute]
private static DbGeographyWellKnownValue <CreateWellKnownValue>b__4(int coordinateSystemId, Byte[] wkb, string wkt);
    [CompilerGeneratedAttribute]
private static Exception <CreateWellKnownValue>b__9();
    [CompilerGeneratedAttribute]
private static Exception <CreateWellKnownValue>b__a();
    [CompilerGeneratedAttribute]
private static DbGeometryWellKnownValue <CreateWellKnownValue>b__b(int coordinateSystemId, Byte[] wkb, string wkt);
}
internal class System.Data.Entity.SqlServer.SqlTypesAssembly : object {
    private Func`2<object, bool> sqlBooleanToBoolean;
    private Func`2<object, Nullable`1<bool>> sqlBooleanToNullableBoolean;
    private Func`2<Byte[], object> sqlBytesFromByteArray;
    private Func`2<object, Byte[]> sqlBytesToByteArray;
    private Func`2<string, object> sqlStringFromString;
    private Func`2<string, object> sqlCharsFromString;
    private Func`2<object, string> sqlCharsToString;
    private Func`2<object, string> sqlStringToString;
    private Func`2<object, double> sqlDoubleToDouble;
    private Func`2<object, Nullable`1<double>> sqlDoubleToNullableDouble;
    private Func`2<object, int> sqlInt32ToInt;
    private Func`2<object, Nullable`1<int>> sqlInt32ToNullableInt;
    private Func`2<XmlReader, object> sqlXmlFromXmlReader;
    private Func`2<object, string> sqlXmlToString;
    private Func`2<object, bool> isSqlGeographyNull;
    private Func`2<object, bool> isSqlGeometryNull;
    private Func`2<object, object> geographyAsTextZMAsSqlChars;
    private Func`2<object, object> geometryAsTextZMAsSqlChars;
    private Func`3<string, int, object> sqlGeographyFromWKTString;
    private Func`3<Byte[], int, object> sqlGeographyFromWKBByteArray;
    private Func`3<XmlReader, int, object> sqlGeographyFromGMLReader;
    private Func`3<string, int, object> sqlGeometryFromWKTString;
    private Func`3<Byte[], int, object> sqlGeometryFromWKBByteArray;
    private Func`3<XmlReader, int, object> sqlGeometryFromGMLReader;
    private Lazy`1<MethodInfo> _smiSqlGeographyParse;
    private Lazy`1<MethodInfo> _smiSqlGeographyStGeomFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStPointFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStLineFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStPolyFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStmPointFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStmLineFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStmPolyFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStGeomCollFromText;
    private Lazy`1<MethodInfo> _smiSqlGeographyStGeomFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyStPointFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyStLineFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyStPolyFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyStmPointFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyStmLineFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyStmPolyFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyStGeomCollFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeographyGeomFromGml;
    private Lazy`1<PropertyInfo> _ipiSqlGeographyStSrid;
    private Lazy`1<MethodInfo> _imiSqlGeographyStGeometryType;
    private Lazy`1<MethodInfo> _imiSqlGeographyStDimension;
    private Lazy`1<MethodInfo> _imiSqlGeographyStAsBinary;
    private Lazy`1<MethodInfo> _imiSqlGeographyAsGml;
    private Lazy`1<MethodInfo> _imiSqlGeographyStAsText;
    private Lazy`1<MethodInfo> _imiSqlGeographyStIsEmpty;
    private Lazy`1<MethodInfo> _imiSqlGeographyStEquals;
    private Lazy`1<MethodInfo> _imiSqlGeographyStDisjoint;
    private Lazy`1<MethodInfo> _imiSqlGeographyStIntersects;
    private Lazy`1<MethodInfo> _imiSqlGeographyStBuffer;
    private Lazy`1<MethodInfo> _imiSqlGeographyStDistance;
    private Lazy`1<MethodInfo> _imiSqlGeographyStIntersection;
    private Lazy`1<MethodInfo> _imiSqlGeographyStUnion;
    private Lazy`1<MethodInfo> _imiSqlGeographyStDifference;
    private Lazy`1<MethodInfo> _imiSqlGeographyStSymDifference;
    private Lazy`1<MethodInfo> _imiSqlGeographyStNumGeometries;
    private Lazy`1<MethodInfo> _imiSqlGeographyStGeometryN;
    private Lazy`1<PropertyInfo> _ipiSqlGeographyLat;
    private Lazy`1<PropertyInfo> _ipiSqlGeographyLong;
    private Lazy`1<PropertyInfo> _ipiSqlGeographyZ;
    private Lazy`1<PropertyInfo> _ipiSqlGeographyM;
    private Lazy`1<MethodInfo> _imiSqlGeographyStLength;
    private Lazy`1<MethodInfo> _imiSqlGeographyStStartPoint;
    private Lazy`1<MethodInfo> _imiSqlGeographyStEndPoint;
    private Lazy`1<MethodInfo> _imiSqlGeographyStIsClosed;
    private Lazy`1<MethodInfo> _imiSqlGeographyStNumPoints;
    private Lazy`1<MethodInfo> _imiSqlGeographyStPointN;
    private Lazy`1<MethodInfo> _imiSqlGeographyStArea;
    private Lazy`1<MethodInfo> _smiSqlGeometryParse;
    private Lazy`1<MethodInfo> _smiSqlGeometryStGeomFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStPointFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStLineFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStPolyFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStmPointFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStmLineFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStmPolyFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStGeomCollFromText;
    private Lazy`1<MethodInfo> _smiSqlGeometryStGeomFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryStPointFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryStLineFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryStPolyFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryStmPointFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryStmLineFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryStmPolyFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryStGeomCollFromWkb;
    private Lazy`1<MethodInfo> _smiSqlGeometryGeomFromGml;
    private Lazy`1<PropertyInfo> _ipiSqlGeometryStSrid;
    private Lazy`1<MethodInfo> _imiSqlGeometryStGeometryType;
    private Lazy`1<MethodInfo> _imiSqlGeometryStDimension;
    private Lazy`1<MethodInfo> _imiSqlGeometryStEnvelope;
    private Lazy`1<MethodInfo> _imiSqlGeometryStAsBinary;
    private Lazy`1<MethodInfo> _imiSqlGeometryAsGml;
    private Lazy`1<MethodInfo> _imiSqlGeometryStAsText;
    private Lazy`1<MethodInfo> _imiSqlGeometryStIsEmpty;
    private Lazy`1<MethodInfo> _imiSqlGeometryStIsSimple;
    private Lazy`1<MethodInfo> _imiSqlGeometryStBoundary;
    private Lazy`1<MethodInfo> _imiSqlGeometryStIsValid;
    private Lazy`1<MethodInfo> _imiSqlGeometryStEquals;
    private Lazy`1<MethodInfo> _imiSqlGeometryStDisjoint;
    private Lazy`1<MethodInfo> _imiSqlGeometryStIntersects;
    private Lazy`1<MethodInfo> _imiSqlGeometryStTouches;
    private Lazy`1<MethodInfo> _imiSqlGeometryStCrosses;
    private Lazy`1<MethodInfo> _imiSqlGeometryStWithin;
    private Lazy`1<MethodInfo> _imiSqlGeometryStContains;
    private Lazy`1<MethodInfo> _imiSqlGeometryStOverlaps;
    private Lazy`1<MethodInfo> _imiSqlGeometryStRelate;
    private Lazy`1<MethodInfo> _imiSqlGeometryStBuffer;
    private Lazy`1<MethodInfo> _imiSqlGeometryStDistance;
    private Lazy`1<MethodInfo> _imiSqlGeometryStConvexHull;
    private Lazy`1<MethodInfo> _imiSqlGeometryStIntersection;
    private Lazy`1<MethodInfo> _imiSqlGeometryStUnion;
    private Lazy`1<MethodInfo> _imiSqlGeometryStDifference;
    private Lazy`1<MethodInfo> _imiSqlGeometryStSymDifference;
    private Lazy`1<MethodInfo> _imiSqlGeometryStNumGeometries;
    private Lazy`1<MethodInfo> _imiSqlGeometryStGeometryN;
    private Lazy`1<PropertyInfo> _ipiSqlGeometryStx;
    private Lazy`1<PropertyInfo> _ipiSqlGeometrySty;
    private Lazy`1<PropertyInfo> _ipiSqlGeometryZ;
    private Lazy`1<PropertyInfo> _ipiSqlGeometryM;
    private Lazy`1<MethodInfo> _imiSqlGeometryStLength;
    private Lazy`1<MethodInfo> _imiSqlGeometryStStartPoint;
    private Lazy`1<MethodInfo> _imiSqlGeometryStEndPoint;
    private Lazy`1<MethodInfo> _imiSqlGeometryStIsClosed;
    private Lazy`1<MethodInfo> _imiSqlGeometryStIsRing;
    private Lazy`1<MethodInfo> _imiSqlGeometryStNumPoints;
    private Lazy`1<MethodInfo> _imiSqlGeometryStPointN;
    private Lazy`1<MethodInfo> _imiSqlGeometryStArea;
    private Lazy`1<MethodInfo> _imiSqlGeometryStCentroid;
    private Lazy`1<MethodInfo> _imiSqlGeometryStPointOnSurface;
    private Lazy`1<MethodInfo> _imiSqlGeometryStExteriorRing;
    private Lazy`1<MethodInfo> _imiSqlGeometryStNumInteriorRing;
    private Lazy`1<MethodInfo> _imiSqlGeometryStInteriorRingN;
    [CompilerGeneratedAttribute]
private Type <SqlBooleanType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlBytesType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlCharsType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlStringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlDoubleType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlInt32Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlXmlType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlGeographyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlGeometryType>k__BackingField;
    internal Type SqlBooleanType { get; private set; }
    internal Type SqlBytesType { get; private set; }
    internal Type SqlCharsType { get; private set; }
    internal Type SqlStringType { get; private set; }
    internal Type SqlDoubleType { get; private set; }
    internal Type SqlInt32Type { get; private set; }
    internal Type SqlXmlType { get; private set; }
    internal Type SqlGeographyType { get; private set; }
    internal Type SqlGeometryType { get; private set; }
    public Lazy`1<MethodInfo> SmiSqlGeographyParse { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStGeomFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStPointFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStLineFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStPolyFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStmPointFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStmLineFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStmPolyFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStGeomCollFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStGeomFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStPointFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStLineFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStPolyFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStmPointFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStmLineFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStmPolyFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyStGeomCollFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeographyGeomFromGml { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeographyStSrid { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStGeometryType { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStDimension { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStAsBinary { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyAsGml { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStAsText { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStIsEmpty { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStEquals { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStDisjoint { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStIntersects { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStBuffer { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStDistance { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStIntersection { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStUnion { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStDifference { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStSymDifference { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStNumGeometries { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStGeometryN { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeographyLat { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeographyLong { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeographyZ { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeographyM { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStLength { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStStartPoint { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStEndPoint { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStIsClosed { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStNumPoints { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStPointN { get; }
    public Lazy`1<MethodInfo> ImiSqlGeographyStArea { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryParse { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStGeomFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStPointFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStLineFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStPolyFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStmPointFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStmLineFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStmPolyFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStGeomCollFromText { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStGeomFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStPointFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStLineFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStPolyFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStmPointFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStmLineFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStmPolyFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryStGeomCollFromWkb { get; }
    public Lazy`1<MethodInfo> SmiSqlGeometryGeomFromGml { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeometryStSrid { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStGeometryType { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStDimension { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStEnvelope { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStAsBinary { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryAsGml { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStAsText { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStIsEmpty { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStIsSimple { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStBoundary { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStIsValid { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStEquals { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStDisjoint { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStIntersects { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStTouches { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStCrosses { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStWithin { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStContains { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStOverlaps { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStRelate { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStBuffer { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStDistance { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStConvexHull { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStIntersection { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStUnion { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStDifference { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStSymDifference { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStNumGeometries { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStGeometryN { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeometryStx { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeometrySty { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeometryZ { get; }
    public Lazy`1<PropertyInfo> IpiSqlGeometryM { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStLength { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStStartPoint { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStEndPoint { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStIsClosed { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStIsRing { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStNumPoints { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStPointN { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStArea { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStCentroid { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStPointOnSurface { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStExteriorRing { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStNumInteriorRing { get; }
    public Lazy`1<MethodInfo> ImiSqlGeometryStInteriorRingN { get; }
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
[SuppressMessageAttribute("Microsoft.Performance", "CA1809:AvoidExcessiveLocals")]
public SqlTypesAssembly(Assembly sqlSpatialAssembly);
    [CompilerGeneratedAttribute]
internal Type get_SqlBooleanType();
    [CompilerGeneratedAttribute]
private void set_SqlBooleanType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlBytesType();
    [CompilerGeneratedAttribute]
private void set_SqlBytesType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlCharsType();
    [CompilerGeneratedAttribute]
private void set_SqlCharsType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlStringType();
    [CompilerGeneratedAttribute]
private void set_SqlStringType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlDoubleType();
    [CompilerGeneratedAttribute]
private void set_SqlDoubleType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlInt32Type();
    [CompilerGeneratedAttribute]
private void set_SqlInt32Type(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlXmlType();
    [CompilerGeneratedAttribute]
private void set_SqlXmlType(Type value);
    internal bool SqlBooleanToBoolean(object sqlBooleanValue);
    internal Nullable`1<bool> SqlBooleanToNullableBoolean(object sqlBooleanValue);
    internal object SqlBytesFromByteArray(Byte[] binaryValue);
    internal Byte[] SqlBytesToByteArray(object sqlBytesValue);
    internal object SqlStringFromString(string stringValue);
    internal object SqlCharsFromString(string stringValue);
    internal string SqlCharsToString(object sqlCharsValue);
    internal string SqlStringToString(object sqlStringValue);
    internal double SqlDoubleToDouble(object sqlDoubleValue);
    internal Nullable`1<double> SqlDoubleToNullableDouble(object sqlDoubleValue);
    internal int SqlInt32ToInt(object sqlInt32Value);
    internal Nullable`1<int> SqlInt32ToNullableInt(object sqlInt32Value);
    internal object SqlXmlFromString(string stringValue);
    internal string SqlXmlToString(object sqlXmlValue);
    internal bool IsSqlGeographyNull(object sqlGeographyValue);
    internal bool IsSqlGeometryNull(object sqlGeometryValue);
    internal string GeographyAsTextZM(DbGeography geographyValue);
    internal string GeometryAsTextZM(DbGeometry geometryValue);
    [CompilerGeneratedAttribute]
internal Type get_SqlGeographyType();
    [CompilerGeneratedAttribute]
private void set_SqlGeographyType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlGeometryType();
    [CompilerGeneratedAttribute]
private void set_SqlGeometryType(Type value);
    internal object ConvertToSqlTypesGeography(DbGeography geographyValue);
    internal object SqlTypesGeographyFromBinary(Byte[] wellKnownBinary, int srid);
    internal object SqlTypesGeographyFromText(string wellKnownText, int srid);
    internal object ConvertToSqlTypesGeometry(DbGeometry geometryValue);
    internal object SqlTypesGeometryFromBinary(Byte[] wellKnownBinary, int srid);
    internal object SqlTypesGeometryFromText(string wellKnownText, int srid);
    private object GetSqlTypesSpatialValue(IDbSpatialValue spatialValue, Type requiredProviderValueType);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
private static XmlReader XmlReaderFromString(string stringValue);
    private static Func`3<TArg, int, object> CreateStaticConstructorDelegate(Type spatialType, string methodName);
    private static Expression BuildConvertToSqlType(Expression toConvert, Type convertTo);
    private static Expression BuildConvertToSqlBytes(Expression toConvert, Type sqlBytesType);
    private static Expression BuildConvertToSqlChars(Expression toConvert, Type sqlCharsType);
    private static Expression BuildConvertToSqlString(Expression toConvert, Type sqlStringType);
    private static Expression BuildConvertToSqlXml(Expression toConvert, Type sqlXmlType);
    public Lazy`1<MethodInfo> get_SmiSqlGeographyParse();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStGeomFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStPointFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStLineFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStPolyFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStmPointFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStmLineFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStmPolyFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStGeomCollFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStGeomFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStPointFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStLineFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStPolyFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStmPointFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStmLineFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStmPolyFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyStGeomCollFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeographyGeomFromGml();
    public Lazy`1<PropertyInfo> get_IpiSqlGeographyStSrid();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStGeometryType();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStDimension();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStAsBinary();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyAsGml();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStAsText();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStIsEmpty();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStEquals();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStDisjoint();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStIntersects();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStBuffer();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStDistance();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStIntersection();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStUnion();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStDifference();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStSymDifference();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStNumGeometries();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStGeometryN();
    public Lazy`1<PropertyInfo> get_IpiSqlGeographyLat();
    public Lazy`1<PropertyInfo> get_IpiSqlGeographyLong();
    public Lazy`1<PropertyInfo> get_IpiSqlGeographyZ();
    public Lazy`1<PropertyInfo> get_IpiSqlGeographyM();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStLength();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStStartPoint();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStEndPoint();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStIsClosed();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStNumPoints();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStPointN();
    public Lazy`1<MethodInfo> get_ImiSqlGeographyStArea();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryParse();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStGeomFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStPointFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStLineFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStPolyFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStmPointFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStmLineFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStmPolyFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStGeomCollFromText();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStGeomFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStPointFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStLineFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStPolyFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStmPointFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStmLineFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStmPolyFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryStGeomCollFromWkb();
    public Lazy`1<MethodInfo> get_SmiSqlGeometryGeomFromGml();
    public Lazy`1<PropertyInfo> get_IpiSqlGeometryStSrid();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStGeometryType();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStDimension();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStEnvelope();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStAsBinary();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryAsGml();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStAsText();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStIsEmpty();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStIsSimple();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStBoundary();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStIsValid();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStEquals();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStDisjoint();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStIntersects();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStTouches();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStCrosses();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStWithin();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStContains();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStOverlaps();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStRelate();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStBuffer();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStDistance();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStConvexHull();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStIntersection();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStUnion();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStDifference();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStSymDifference();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStNumGeometries();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStGeometryN();
    public Lazy`1<PropertyInfo> get_IpiSqlGeometryStx();
    public Lazy`1<PropertyInfo> get_IpiSqlGeometrySty();
    public Lazy`1<PropertyInfo> get_IpiSqlGeometryZ();
    public Lazy`1<PropertyInfo> get_IpiSqlGeometryM();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStLength();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStStartPoint();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStEndPoint();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStIsClosed();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStIsRing();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStNumPoints();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStPointN();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStArea();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStCentroid();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStPointOnSurface();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStExteriorRing();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStNumInteriorRing();
    public Lazy`1<MethodInfo> get_ImiSqlGeometryStInteriorRingN();
    private MethodInfo FindSqlGeographyMethod(string methodName, Type[] argTypes);
    private MethodInfo FindSqlGeographyStaticMethod(string methodName, Type[] argTypes);
    private PropertyInfo FindSqlGeographyProperty(string propertyName);
    private MethodInfo FindSqlGeometryStaticMethod(string methodName, Type[] argTypes);
    private MethodInfo FindSqlGeometryMethod(string methodName, Type[] argTypes);
    private PropertyInfo FindSqlGeometryProperty(string propertyName);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__0(ParameterExpression bytesVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__1(ParameterExpression stringVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__2(ParameterExpression stringVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__3(ParameterExpression readerVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__4(ParameterExpression sqlBoolVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__5(ParameterExpression sqlBoolVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__6(ParameterExpression sqlBytesVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__7(ParameterExpression sqlCharsVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__8(ParameterExpression sqlStringVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__9(ParameterExpression sqlDoubleVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__a(ParameterExpression sqlDoubleVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__b(ParameterExpression sqlInt32Val);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__c(ParameterExpression sqlInt32Val);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__d(ParameterExpression sqlXmlVal);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__e(ParameterExpression sqlGeographyValue);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__f(ParameterExpression sqlGeometryValue);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__10(ParameterExpression sqlGeographyValue);
    [CompilerGeneratedAttribute]
private Expression <.ctor>b__11(ParameterExpression sqlGeometryValue);
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__12();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__13();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__14();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__15();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__16();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__17();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__18();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__19();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__1a();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__1b();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__1c();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__1d();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__1e();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__1f();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__20();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__21();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__22();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__23();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__24();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__25();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__26();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__27();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__28();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__29();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__2a();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__2b();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__2c();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__2d();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__2e();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__2f();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__30();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__31();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__32();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__33();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__34();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__35();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__36();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__37();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__38();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__39();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__3a();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__3b();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__3c();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__3d();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__3e();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__3f();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__40();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__41();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__42();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__43();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__44();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__45();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__46();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__47();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__48();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__49();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__4a();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__4b();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__4c();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__4d();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__4e();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__4f();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__50();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__51();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__52();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__53();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__54();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__55();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__56();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__57();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__58();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__59();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__5a();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__5b();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__5c();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__5d();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__5e();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__5f();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__60();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__61();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__62();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__63();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__64();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__65();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__66();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__67();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__68();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__69();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__6a();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__6b();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__6c();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__6d();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__6e();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__6f();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__70();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__71();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__72();
    [CompilerGeneratedAttribute]
private PropertyInfo <.ctor>b__73();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__74();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__75();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__76();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__77();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__78();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__79();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__7a();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__7b();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__7c();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__7d();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__7e();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__7f();
    [CompilerGeneratedAttribute]
private MethodInfo <.ctor>b__80();
}
internal class System.Data.Entity.SqlServer.SqlTypesAssemblyLoader : object {
    private static SqlTypesAssemblyLoader _instance;
    private IEnumerable`1<string> _preferredSqlTypesAssemblies;
    private Lazy`1<SqlTypesAssembly> _latestVersion;
    public static SqlTypesAssemblyLoader DefaultInstance { get; }
    public SqlTypesAssemblyLoader(IEnumerable`1<string> assemblyNames);
    public SqlTypesAssemblyLoader(SqlTypesAssembly assembly);
    private static SqlTypesAssemblyLoader();
    public static SqlTypesAssemblyLoader get_DefaultInstance();
    public virtual SqlTypesAssembly TryGetSqlTypesAssembly();
    public virtual SqlTypesAssembly GetSqlTypesAssembly();
    public virtual bool TryGetSqlTypesAssembly(Assembly assembly, SqlTypesAssembly& sqlAssembly);
    private SqlTypesAssembly BindToLatest();
    private bool IsKnownAssembly(Assembly assembly);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static bool AssemblyNamesMatch(string infoRowProviderAssemblyName, AssemblyName targetAssemblyName);
}
internal enum System.Data.Entity.SqlServer.SqlVersion : Enum {
    public int value__;
    public static SqlVersion Sql8;
    public static SqlVersion Sql9;
    public static SqlVersion Sql10;
    public static SqlVersion Sql11;
}
internal static class System.Data.Entity.SqlServer.SqlVersionUtils : object {
    internal static SqlVersion GetSqlVersion(DbConnection connection);
    internal static ServerType GetServerType(DbConnection connection);
    internal static string GetVersionHint(SqlVersion version, ServerType serverType);
    internal static SqlVersion GetSqlVersion(string versionHint);
    internal static bool IsPreKatmai(SqlVersion sqlVersion);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.ByteExtensions : object {
    [ExtensionAttribute]
public static string ToHexString(IEnumerable`1<byte> bytes);
}
internal class System.Data.Entity.SqlServer.Utilities.Check : object {
    public static T NotNull(T value, string parameterName);
    public static Nullable`1<T> NotNull(Nullable`1<T> value, string parameterName);
    public static string NotEmpty(string value, string parameterName);
}
internal class System.Data.Entity.SqlServer.Utilities.DatabaseName : object {
    private static string NamePartRegex;
    private static Regex _partExtractor;
    private string _name;
    private string _schema;
    public string Name { get; }
    public string Schema { get; }
    public DatabaseName(string name);
    public DatabaseName(string name, string schema);
    private static DatabaseName();
    public static DatabaseName Parse(string name);
    public string get_Name();
    public string get_Schema();
    public virtual string ToString();
    private static string Escape(string name);
    public bool Equals(DatabaseName other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.DbExpressionExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<DbExpression> GetLeafNodes(DbExpression root, DbExpressionKind kind, Func`2<DbExpression, IEnumerable`1<DbExpression>> getChildNodes);
}
internal class System.Data.Entity.SqlServer.Utilities.DebugCheck : object {
    [ConditionalAttribute("DEBUG")]
public static void NotNull(T value);
    [ConditionalAttribute("DEBUG")]
public static void NotNull(Nullable`1<T> value);
    [ConditionalAttribute("DEBUG")]
public static void NotEmpty(string value);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.EdmFunctionExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<MetadataProperty, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
internal static bool IsCSpace(EdmFunction function);
    [ExtensionAttribute]
internal static bool IsCanonicalFunction(EdmFunction function);
    [CompilerGeneratedAttribute]
private static bool <IsCSpace>b__0(MetadataProperty p);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.FuncExtensions : object {
    [ExtensionAttribute]
internal static TResult NullIfNotImplemented(Func`1<TResult> func);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.IDictionaryExtensions : object {
    [ExtensionAttribute]
internal static void Add(IDictionary`2<TKey, IList`1<TValue>> map, TKey key, TValue value);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.IEnumerableExtensions : object {
    [ExtensionAttribute]
public static string Uniquify(IEnumerable`1<string> inputStrings, string targetString);
    [ExtensionAttribute]
public static void Each(IEnumerable`1<T> ts, Action`2<T, int> action);
    [ExtensionAttribute]
public static void Each(IEnumerable`1<T> ts, Action`1<T> action);
    [ExtensionAttribute]
public static void Each(IEnumerable`1<T> ts, Func`2<T, S> action);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<T> ts, Func`2<T, string> selector, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Append(IEnumerable`1<TSource> source, TSource value);
    [CompilerGeneratedAttribute]
private static string <Join>b__3(T t);
    [CompilerGeneratedAttribute]
private static bool <Join>b__4(T t);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.MetdataItemExtensions : object {
    [ExtensionAttribute]
public static T GetMetadataPropertyValue(MetadataItem item, string propertyName);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.PrimitiveTypeExtensions : object {
    [ExtensionAttribute]
internal static bool IsSpatialType(PrimitiveType type);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.PropertyInfoExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<PropertyInfo, MethodInfo>, PropertyInfo> CS$<>9__CachedAnonymousMethodDelegate9;
    [ExtensionAttribute]
public static bool IsSameAs(PropertyInfo propertyInfo, PropertyInfo otherPropertyInfo);
    [ExtensionAttribute]
public static bool ContainsSame(IEnumerable`1<PropertyInfo> enumerable, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidStructuralProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidInterfaceStructuralProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidEdmScalarProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool IsValidEdmNavigationProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static EdmProperty AsEdmPrimitiveProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool CanWriteExtended(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyInfoForSet(PropertyInfo propertyInfo);
    private static PropertyInfo GetDeclaredProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(PropertyInfo property);
    private static void CollectProperties(PropertyInfo property, IList`1<PropertyInfo> collection);
    private static void FindNextProperty(PropertyInfo property, IList`1<PropertyInfo> collection, bool getter);
    [ExtensionAttribute]
public static MethodInfo Getter(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo Setter(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsPublic(PropertyInfo property);
    [CompilerGeneratedAttribute]
private static PropertyInfo <FindNextProperty>b__7(<>f__AnonymousType0`2<PropertyInfo, MethodInfo> <>h__TransparentIdentifier4);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Entity.SqlServer.Utilities.SqlDataReaderWrapper : MarshalByRefObject {
    private SqlDataReader _sqlDataReader;
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public SqlDataReaderWrapper(SqlDataReader sqlDataReader);
    public virtual IDataReader GetData(int i);
    public virtual void Dispose();
    public virtual Task`1<T> GetFieldValueAsync(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal);
    public virtual Task`1<bool> ReadAsync();
    public virtual Task`1<bool> NextResultAsync();
    public virtual void Close();
    public virtual string GetDataTypeName(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    public virtual string GetName(int i);
    public virtual Type GetProviderSpecificFieldType(int i);
    public virtual int GetOrdinal(string name);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual bool GetBoolean(int i);
    public virtual XmlReader GetXmlReader(int i);
    public virtual Stream GetStream(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual TextReader GetTextReader(int i);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual SqlBoolean GetSqlBoolean(int i);
    public virtual SqlBinary GetSqlBinary(int i);
    public virtual SqlByte GetSqlByte(int i);
    public virtual SqlBytes GetSqlBytes(int i);
    public virtual SqlChars GetSqlChars(int i);
    public virtual SqlDateTime GetSqlDateTime(int i);
    public virtual SqlDecimal GetSqlDecimal(int i);
    public virtual SqlGuid GetSqlGuid(int i);
    public virtual SqlDouble GetSqlDouble(int i);
    public virtual SqlInt16 GetSqlInt16(int i);
    public virtual SqlInt32 GetSqlInt32(int i);
    public virtual SqlInt64 GetSqlInt64(int i);
    public virtual SqlMoney GetSqlMoney(int i);
    public virtual SqlSingle GetSqlSingle(int i);
    public virtual SqlString GetSqlString(int i);
    public virtual SqlXml GetSqlXml(int i);
    public virtual object GetSqlValue(int i);
    public virtual int GetSqlValues(Object[] values);
    public virtual string GetString(int i);
    public virtual T GetFieldValue(int i);
    public virtual object GetValue(int i);
    public virtual TimeSpan GetTimeSpan(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.StringExtensions : object {
    private static string StartCharacterExp;
    private static string OtherCharacterExp;
    private static string NameExp;
    private static Regex _undottedNameValidator;
    private static Regex _migrationIdPattern;
    private static String[] _lineEndings;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool EqualsIgnoreCase(string s1, string s2);
    [ExtensionAttribute]
internal static bool EqualsOrdinal(string s1, string s2);
    [ExtensionAttribute]
public static string MigrationName(string migrationId);
    [ExtensionAttribute]
public static string RestrictTo(string s, int size);
    [ExtensionAttribute]
public static void EachLine(string s, Action`1<string> action);
    [ExtensionAttribute]
public static bool IsValidMigrationId(string migrationId);
    [ExtensionAttribute]
public static bool IsAutomaticMigration(string migrationId);
    [ExtensionAttribute]
public static string ToAutomaticMigrationId(string migrationId);
    [ExtensionAttribute]
public static bool IsValidUndottedName(string name);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.TypeExtensions : object {
    private static Dictionary`2<Type, PrimitiveType> _primitiveTypesMap;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    [SuppressMessageAttribute("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
private static TypeExtensions();
    [ExtensionAttribute]
public static bool IsCollection(Type type);
    [ExtensionAttribute]
public static bool IsCollection(Type type, Type& elementType);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetNonIndexerProperties(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static Type GetTargetType(Type type);
    [ExtensionAttribute]
public static bool TryUnwrapNullableType(Type type, Type& underlyingType);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsValidStructuralType(Type type);
    [ExtensionAttribute]
public static bool IsValidStructuralPropertyType(Type type);
    [ExtensionAttribute]
public static bool IsPrimitiveType(Type type, PrimitiveType& primitiveType);
    [ExtensionAttribute]
public static bool IsValidEdmScalarType(Type type);
    [ExtensionAttribute]
public static string NestingNamespace(Type type);
    [ExtensionAttribute]
public static string FullNameWithNesting(Type type);
    [ExtensionAttribute]
public static bool OverridesEqualsOrGetHashCode(Type type);
    [ExtensionAttribute]
public static bool IsPublic(Type type);
    [ExtensionAttribute]
public static bool IsNotPublic(Type type);
    [ExtensionAttribute]
public static MethodInfo GetOnlyDeclaredMethod(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetDeclaredMethod(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInfo GetPublicInstanceMethod(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static MethodInfo GetRuntimeMethod(Type type, string name, Func`2<MethodInfo, bool> predicate, Type[][] parameterTypes);
    [ExtensionAttribute]
private static MethodInfo GetRuntimeMethod(Type type, string name, Func`2<MethodInfo, bool> predicate, Type[] parameterTypes);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetDeclaredMethods(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetDeclaredMethods(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetDeclaredProperty(Type type, string name);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetDeclaredProperties(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetInstanceProperties(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetInstanceProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetStaticProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetTopProperty(Type type, string name);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static TypeAttributes Attributes(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsSerializable(Type type);
    [ExtensionAttribute]
public static bool IsGenericParameter(Type type);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<ConstructorInfo> GetDeclaredConstructors(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static ConstructorInfo GetPublicConstructor(Type type, Type[] parameterTypes);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Func`2<ConstructorInfo, bool> predicate, Type[][] parameterTypes);
    [ExtensionAttribute]
public static bool IsSubclassOf(Type type, Type otherType);
    [CompilerGeneratedAttribute]
private static bool <GetNonIndexerProperties>b__0(PropertyInfo p);
    [CompilerGeneratedAttribute]
private static bool <OverridesEqualsOrGetHashCode>b__9(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <GetPublicInstanceMethod>b__10(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <GetRuntimeMethod>b__13(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <GetInstanceProperties>b__20(PropertyInfo p);
}
[ExtensionAttribute]
internal static class System.Data.Entity.SqlServer.Utilities.TypeUsageExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Facet, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Facet, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Facet, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Facet, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [ExtensionAttribute]
internal static byte GetPrecision(TypeUsage type);
    [ExtensionAttribute]
internal static byte GetScale(TypeUsage type);
    [ExtensionAttribute]
internal static int GetMaxLength(TypeUsage type);
    [ExtensionAttribute]
internal static T GetFacetValue(TypeUsage type, string facetName);
    [ExtensionAttribute]
internal static bool IsFixedLength(TypeUsage type);
    [ExtensionAttribute]
internal static bool TryGetPrecision(TypeUsage type, Byte& precision);
    [ExtensionAttribute]
internal static bool TryGetScale(TypeUsage type, Byte& scale);
    [ExtensionAttribute]
internal static bool TryGetFacetValue(TypeUsage type, string facetName, T& value);
    [ExtensionAttribute]
internal static bool IsPrimitiveType(TypeUsage type, PrimitiveTypeKind primitiveTypeKind);
    [ExtensionAttribute]
internal static bool IsPrimitiveType(TypeUsage type);
    [ExtensionAttribute]
internal static bool IsNullable(TypeUsage type);
    [ExtensionAttribute]
internal static PrimitiveTypeKind GetPrimitiveTypeKind(TypeUsage type);
    [ExtensionAttribute]
internal static bool TryGetIsUnicode(TypeUsage type, Boolean& isUnicode);
    [ExtensionAttribute]
internal static bool TryGetMaxLength(TypeUsage type, Int32& maxLength);
    [ExtensionAttribute]
internal static IEnumerable`1<EdmProperty> GetProperties(TypeUsage type);
    [ExtensionAttribute]
internal static TypeUsage GetElementTypeUsage(TypeUsage type);
    [ExtensionAttribute]
internal static bool MustFacetBeConstant(TypeUsage type, string facetName);
    [ExtensionAttribute]
internal static bool IsSpatialType(TypeUsage type);
    [ExtensionAttribute]
internal static bool IsSpatialType(TypeUsage type, PrimitiveTypeKind& spatialType);
    [ExtensionAttribute]
internal static TypeUsage ForceNonUnicode(TypeUsage typeUsage);
    [CompilerGeneratedAttribute]
private static bool <IsFixedLength>b__0(Facet f);
    [CompilerGeneratedAttribute]
private static bool <IsNullable>b__2(Facet f);
    [CompilerGeneratedAttribute]
private static bool <ForceNonUnicode>b__7(Facet f);
    [CompilerGeneratedAttribute]
private static bool <ForceNonUnicode>b__8(Facet f);
}
