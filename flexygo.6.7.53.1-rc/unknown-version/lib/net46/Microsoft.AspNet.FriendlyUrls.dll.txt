internal class Microsoft.AspNet.FriendlyUrls.Abstractions.BuildManagerWrapper : object {
    public sealed virtual IWebObjectFactory GetObjectFactory(string virtualPath, bool throwIfNotFound);
}
internal class Microsoft.AspNet.FriendlyUrls.Abstractions.CacheWrapper : object {
    private Cache _cache;
    public sealed virtual object Get(string key);
    public sealed virtual void Insert(string key, object value, CacheDependency dependencies);
}
internal class Microsoft.AspNet.FriendlyUrls.Abstractions.HostingEnvironmentWrapper : object {
    public VirtualPathProvider VirtualPathProvider { get; }
    public sealed virtual VirtualPathProvider get_VirtualPathProvider();
    public sealed virtual void RegisterObject(IRegisteredObject obj);
    public sealed virtual void UnregisterObject(IRegisteredObject obj);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.IAuthorizationModule {
    public abstract virtual bool CheckUrlAccessForPrincipal(string virtualPath, IPrincipal user, string verb);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.IBuildManager {
    public abstract virtual IWebObjectFactory GetObjectFactory(string virtualPath, bool throwIfNotFound);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.ICache {
    public abstract virtual object Get(string key);
    public abstract virtual void Insert(string key, object value, CacheDependency dependencies);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.IFriendlyUrlRoute {
    public FriendlyUrlSettings Settings { get; }
    public abstract virtual FriendlyUrlSettings get_Settings();
    public abstract virtual RouteData GetRouteData(HttpContextBase httpContext, string pathOverride);
    public abstract virtual string ResolveUrl(string virtualPath);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.IFriendlyUrlRouteSupportFunctions {
    public abstract virtual IWebObjectFactory GetWebObjectFactory(HttpContextBase httpContext, string modifiedVirtualPath);
    public abstract virtual ResolveResult Resolve(HttpContextBase httpContext, IList`1<string> extensions, string virtualPathOverride);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.IHostingEnvironment {
    public VirtualPathProvider VirtualPathProvider { get; }
    public abstract virtual VirtualPathProvider get_VirtualPathProvider();
    public abstract virtual void RegisterObject(IRegisteredObject obj);
    public abstract virtual void UnregisterObject(IRegisteredObject obj);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.IVirtualPathUtility {
    public abstract virtual string Combine(string basePath, string relativePath);
    public abstract virtual string GetExtension(string url);
    public abstract virtual bool IsAppRelative(string virtualPath);
    public abstract virtual string MakeRelative(string fromPath, string toPath);
    public abstract virtual string ToAbsolute(string virtualPath, string applicationPath);
    public abstract virtual string ToAppRelative(string virtualPath);
}
internal interface Microsoft.AspNet.FriendlyUrls.Abstractions.IWebConfigurationManager {
    public abstract virtual object GetWebApplicationSection(string sectionName);
}
internal class Microsoft.AspNet.FriendlyUrls.Abstractions.UrlAuthorizationModuleWrapper : object {
    public sealed virtual bool CheckUrlAccessForPrincipal(string virtualPath, IPrincipal user, string verb);
}
internal class Microsoft.AspNet.FriendlyUrls.Abstractions.VirtualPathUtilityWrapper : object {
    public sealed virtual string Combine(string basePath, string relativePath);
    public sealed virtual string GetExtension(string virtualPath);
    public sealed virtual bool IsAppRelative(string virtualPath);
    public sealed virtual string MakeRelative(string fromPath, string toPath);
    public sealed virtual string ToAbsolute(string virtualPath, string applicationPath);
    public sealed virtual string ToAppRelative(string virtualPath);
}
internal class Microsoft.AspNet.FriendlyUrls.Abstractions.WebConfigurationManagerWrapper : object {
    public sealed virtual object GetWebApplicationSection(string sectionName);
}
internal class Microsoft.AspNet.FriendlyUrls.Caching.ContentPathResolver : object {
    private static Char[] _queryAndFragmentChars;
    private static UrlRewriterHelper _urlRewriterHelper;
    private IVirtualPathUtility _vpu;
    public ContentPathResolver(IVirtualPathUtility virtualPathUtility);
    private static ContentPathResolver();
    public sealed virtual string GenerateClientUrl(HttpContextBase httpContext, string contentPath);
    private string GenerateClientUrlInternal(HttpContextBase httpContext, string contentPath);
    private string MakeAbsolute(string basePath, string relativePath);
    private string MakeRelative(string fromPath, string toPath);
    private static string StripQueryAndFragment(string path, String& queryAndFragment);
}
internal class Microsoft.AspNet.FriendlyUrls.Caching.DynamicFileCache : object {
    private static string CacheKeyPrefix;
    private ICache _cache;
    private VirtualPathProvider _vpp;
    [CompilerGeneratedAttribute]
private static Func`2<VirtualDirectory, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<VirtualFile, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public DynamicFileCache(VirtualPathProvider virtualPathProvider, ICache cache);
    public sealed virtual bool DoesFileExist(string virtualPath);
    private bool DoesFileExistRecursive(string input, int indexOfDirSeparator);
    private static DynamicFileCacheEntry CreateDynamicFileCacheEntryFromVirtualDirectory(VirtualDirectory virtualDirectory);
    [CompilerGeneratedAttribute]
private static string <CreateDynamicFileCacheEntryFromVirtualDirectory>b__0(VirtualDirectory dir);
    [CompilerGeneratedAttribute]
private static string <CreateDynamicFileCacheEntryFromVirtualDirectory>b__1(VirtualFile file);
}
internal class Microsoft.AspNet.FriendlyUrls.Caching.DynamicFileCacheEntry : object {
    private Dictionary`2<string, DynamicFileCacheEntryType> _children;
    public DynamicFileCacheEntry(IEnumerable`1<string> directories, IEnumerable`1<string> files);
    public DynamicFileCacheEntryType LookupChild(string input);
    private void PopulateChildDictionary(IEnumerable`1<string> inputs, DynamicFileCacheEntryType type);
}
internal enum Microsoft.AspNet.FriendlyUrls.Caching.DynamicFileCacheEntryType : Enum {
    public int value__;
    public static DynamicFileCacheEntryType DoesNotExist;
    public static DynamicFileCacheEntryType File;
    public static DynamicFileCacheEntryType Directory;
}
internal class Microsoft.AspNet.FriendlyUrls.Caching.FallbackFileCache : object {
    private VirtualPathProvider _vpp;
    public FallbackFileCache(VirtualPathProvider virtualPathProvider);
    public sealed virtual bool DoesFileExist(string virtualPath);
}
internal interface Microsoft.AspNet.FriendlyUrls.Caching.IContentPathResolver {
    public abstract virtual string GenerateClientUrl(HttpContextBase httpContext, string contentPath);
}
internal interface Microsoft.AspNet.FriendlyUrls.Caching.IFileCache {
    public abstract virtual bool DoesFileExist(string virtualPath);
}
internal class Microsoft.AspNet.FriendlyUrls.Caching.StaticFileCache : object {
    private IFileCache _fallbackCache;
    private HashSet`1<string> _knownFiles;
    internal HashSet`1<string> KnownFiles { get; internal set; }
    public StaticFileCache(StaticFileCacheRunner runner, IFileCache fallbackCache);
    internal HashSet`1<string> get_KnownFiles();
    internal void set_KnownFiles(HashSet`1<string> value);
    public sealed virtual bool DoesFileExist(string virtualPath);
}
internal class Microsoft.AspNet.FriendlyUrls.Caching.StaticFileCacheRunner : object {
    private CancellationTokenSource _cts;
    private IHostingEnvironment _hostingEnvironment;
    private HashSet`1<string> _knownFiles;
    private IVirtualPathUtility _vpu;
    public StaticFileCacheRunner(IHostingEnvironment hostingEnvironment, IVirtualPathUtility virtualPathUtility);
    public HashSet`1<string> GetAllFilenamesInApplication();
    private void RecurseIntoDirectory(VirtualDirectory directory);
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
}
internal static class Microsoft.AspNet.FriendlyUrls.Dependencies : object {
    private static Lazy`1<IAuthorizationModule> _authorizationModuleLazy;
    private static Lazy`1<IBuildManager> _buildManagerLazy;
    private static Lazy`1<ICache> _cacheLazy;
    private static Lazy`1<IContentPathResolver> _contentPathResolver;
    private static Lazy`1<IFileCache> _dynamicFileCacheLazy;
    private static Lazy`1<IFileCache> _fallbackFileCacheLazy;
    private static Lazy`1<IHostingEnvironment> _hostingEnvironmentLazy;
    private static Lazy`1<IFileCache> _staticFileCacheLazy;
    private static Lazy`1<VirtualPathProvider> _virtualPathProviderLazy;
    private static Lazy`1<IVirtualPathUtility> _virtualPathUtilityLazy;
    private static Lazy`1<IWebConfigurationManager> _webConfigurationManagerLazy;
    public static IAuthorizationModule AuthorizationModule { get; }
    public static IBuildManager BuildManager { get; }
    public static ICache Cache { get; }
    public static IContentPathResolver ContentPathResolver { get; }
    public static IHostingEnvironment HostingEnvironment { get; }
    public static VirtualPathProvider VirtualPathProvider { get; }
    public static IVirtualPathUtility VirtualPathUtility { get; }
    public static IWebConfigurationManager WebConfigurationManager { get; }
    private static Dependencies();
    public static IAuthorizationModule get_AuthorizationModule();
    public static IBuildManager get_BuildManager();
    public static ICache get_Cache();
    public static IContentPathResolver get_ContentPathResolver();
    public static IHostingEnvironment get_HostingEnvironment();
    public static VirtualPathProvider get_VirtualPathProvider();
    public static IVirtualPathUtility get_VirtualPathUtility();
    public static IWebConfigurationManager get_WebConfigurationManager();
    private static IAuthorizationModule CreateDefaultAuthorizationModule();
    private static IBuildManager CreateDefaultBuildManager();
    private static ICache CreateDefaultCache();
    private static IContentPathResolver CreateDefaultContentPathResolver();
    private static IFileCache CreateDefaultDynamicFileCache();
    private static IFileCache CreateDefaultFallbackFileCache();
    private static IHostingEnvironment CreateDefaultHostingEnvironment();
    private static IFileCache CreateDefaultStaticFileCache();
    private static VirtualPathProvider CreateDefaultVirtualPathProvider();
    private static IVirtualPathUtility CreateDefaultVirtualPathUtility();
    private static IWebConfigurationManager CreateDefaultWebConfigurationManager();
    public static IFileCache FileCache(ResolverCachingMode cachingMode);
}
internal static class Microsoft.AspNet.FriendlyUrls.Errors : object {
    public static ArgumentOutOfRangeException FriendlyUrl_ValidateVirtualPath_Failed();
    public static HttpException Generic_AccessDenied();
    public static HttpException BadRequest();
}
public static class Microsoft.AspNet.FriendlyUrls.FriendlyUrl : object {
    internal static string FriendlyUrlRouteName;
    public static IList`1<string> Segments { get; }
    public static string Href(string virtualPath, Object[] segments);
    internal static string Href(string virtualPath, string applicationPath, Object[] segments, IContentPathResolver resolver, IVirtualPathUtility virtualPathUtility, HttpContextBase httpContext);
    public static string Resolve(string virtualPath);
    internal static string Resolve(string virtualPath, RouteCollection routes, IVirtualPathUtility vpu, string appDomainAppVirtualPath);
    private static void ValidateVirtualPath(string virtualPath);
    public static IList`1<string> get_Segments();
}
internal class Microsoft.AspNet.FriendlyUrls.FriendlyUrlRoute : RouteBase {
    private static String[] _singletonStringArr;
    private static IPrincipal _dummyPrincipal;
    private IFriendlyUrlResolver[] _urlResolvers;
    private IBuildManager _buildManager;
    private IFileCache _fileCache;
    private IAuthorizationModule _authorizationModule;
    private IVirtualPathUtility _virtualPathUtility;
    [CompilerGeneratedAttribute]
private FriendlyUrlSettings <Settings>k__BackingField;
    public FriendlyUrlSettings Settings { get; private set; }
    internal FriendlyUrlRoute(IBuildManager buildManager, IFileCache fileCache, IAuthorizationModule authorizationModule, IVirtualPathUtility virtualPathUtility, FriendlyUrlSettings settings, IFriendlyUrlResolver[] resolvers);
    private static FriendlyUrlRoute();
    [CompilerGeneratedAttribute]
public sealed virtual FriendlyUrlSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(FriendlyUrlSettings value);
    public virtual RouteData GetRouteData(HttpContextBase httpContext);
    public sealed virtual RouteData GetRouteData(HttpContextBase httpContext, string pathOverride);
    internal RouteData GetRouteData(HttpContextBase httpContext, string pathOverride, IFriendlyUrlRouteSupportFunctions supportFunctions);
    public virtual VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
    public sealed virtual IWebObjectFactory GetWebObjectFactory(HttpContextBase httpContext, string modifiedVirtualPath);
    private static void MarkUnauthorizedAndCompleteRequest(HttpContextBase httpContext);
    internal static ResolveResult Resolve(HttpContextBase httpContext, IList`1<string> extensions, string virtualPathOverride, IFriendlyUrlRouteSupportFunctions supportFunctions);
    public sealed virtual string ResolveUrl(string virtualPath);
    internal string ResolveUrl(string virtualPath, string appDomainAppVirtualPath);
    private sealed virtual override ResolveResult Microsoft.AspNet.FriendlyUrls.Abstractions.IFriendlyUrlRouteSupportFunctions.Resolve(HttpContextBase httpContext, IList`1<string> extensions, string virtualPathOverride);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public class Microsoft.AspNet.FriendlyUrls.FriendlyUrlSettings : object {
    private ResolverCachingMode _cachingMode;
    private RedirectMode _redirectMode;
    [CompilerGeneratedAttribute]
private string <SwitchViewRouteName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchViewUrl>k__BackingField;
    public string SwitchViewRouteName { get; public set; }
    public string SwitchViewUrl { get; public set; }
    public RedirectMode AutoRedirectMode { get; public set; }
    public ResolverCachingMode ResolverCachingMode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SwitchViewRouteName();
    [CompilerGeneratedAttribute]
public void set_SwitchViewRouteName(string value);
    [CompilerGeneratedAttribute]
public string get_SwitchViewUrl();
    [CompilerGeneratedAttribute]
public void set_SwitchViewUrl(string value);
    public RedirectMode get_AutoRedirectMode();
    public void set_AutoRedirectMode(RedirectMode value);
    public ResolverCachingMode get_ResolverCachingMode();
    public void set_ResolverCachingMode(ResolverCachingMode value);
}
internal class Microsoft.AspNet.FriendlyUrls.FriendlyUrlsModule : object {
    internal static object RouteDataItemsKey;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    private static FriendlyUrlsModule();
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication context);
    internal static void RedirectToFriendlyUrl(HttpContextBase httpContext, IFriendlyUrlRoute route, IVirtualPathUtility virtualPathUtility);
    [CompilerGeneratedAttribute]
private static void <Init>b__0(object sender, EventArgs e);
}
internal class Microsoft.AspNet.FriendlyUrls.FriendlyUrlsViewSwitcherRoute : Route {
    private static string ViewSwitcherMagicKey;
    public FriendlyUrlsViewSwitcherRoute(string url, RouteValueDictionary defaults, IRouteHandler routeHandler);
    public virtual VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.FriendlyUrls.HttpRequestExtensions : object {
    internal static string FriendlyUrlSegmentsKey;
    internal static string FriendlyUrlFileExtensionKey;
    internal static string FriendlyUrlFileVirtualPath;
    private static String[] _emptyParts;
    private static HttpRequestExtensions();
    [ExtensionAttribute]
public static IList`1<string> GetFriendlyUrlSegments(HttpRequest httpRequest);
    [ExtensionAttribute]
public static IList`1<string> GetFriendlyUrlSegments(HttpRequestBase httpRequest);
    [ExtensionAttribute]
public static string GetFriendlyUrlFileExtension(HttpRequest httpRequest);
    [ExtensionAttribute]
public static string GetFriendlyUrlFileExtension(HttpRequestBase httpRequest);
    [ExtensionAttribute]
public static string GetFriendlyUrlFileVirtualPath(HttpRequest httpRequest);
    [ExtensionAttribute]
public static string GetFriendlyUrlFileVirtualPath(HttpRequestBase httpRequest);
    [ExtensionAttribute]
internal static RouteData GetRouteData(HttpRequest httpRequest);
    [ExtensionAttribute]
internal static RouteData GetRouteData(HttpRequestBase httpRequest);
}
[AttributeUsageAttribute("2048")]
public class Microsoft.AspNet.FriendlyUrls.ModelBinding.FriendlyUrlSegmentsAttribute : ValueProviderSourceAttribute {
    private int _index;
    public int Index { get; }
    public FriendlyUrlSegmentsAttribute(int index);
    public int get_Index();
    public virtual IValueProvider GetValueProvider(ModelBindingExecutionContext modelBindingExecutionContext);
}
public class Microsoft.AspNet.FriendlyUrls.ModelBinding.FriendlyUrlSegmentsValueProvider : SimpleValueProvider {
    private int _index;
    public FriendlyUrlSegmentsValueProvider(ModelBindingExecutionContext modelBindingExecutionContext, int index);
    protected virtual object FetchValue(string key);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.AspNet.FriendlyUrls.PreApplicationStartCode : object {
    private static bool _startCalled;
    public static void Start();
}
public enum Microsoft.AspNet.FriendlyUrls.RedirectMode : Enum {
    public int value__;
    public static RedirectMode Permanent;
    public static RedirectMode Temporary;
    public static RedirectMode Off;
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNet.FriendlyUrls.Res : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BadRequest { get; }
    internal static string Common_ArgumentMustNotBeNullOrEmpty { get; }
    internal static string Common_ExtensionMustContainLeadingPeriod { get; }
    internal static string EmptyEnumerableArgument { get; }
    internal static string FileExtensions_BadFormat { get; }
    internal static string FriendlyUrl_ValidateVirtualPath_Failed { get; }
    internal static string Generic_AccessDenied { get; }
    internal static string InvalidMasterPageExtension { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BadRequest();
    internal static string get_Common_ArgumentMustNotBeNullOrEmpty();
    internal static string get_Common_ExtensionMustContainLeadingPeriod();
    internal static string get_EmptyEnumerableArgument();
    internal static string get_FileExtensions_BadFormat();
    internal static string get_FriendlyUrl_ValidateVirtualPath_Failed();
    internal static string get_Generic_AccessDenied();
    internal static string get_InvalidMasterPageExtension();
}
public enum Microsoft.AspNet.FriendlyUrls.ResolverCachingMode : Enum {
    public int value__;
    public static ResolverCachingMode Static;
    public static ResolverCachingMode Dynamic;
    public static ResolverCachingMode Disabled;
}
internal class Microsoft.AspNet.FriendlyUrls.ResolveResult : object {
    [CompilerGeneratedAttribute]
private IWebObjectFactory <WebObjectFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvedExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvedVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Segments>k__BackingField;
    public IWebObjectFactory WebObjectFactory { get; public set; }
    public string ResolvedExtension { get; public set; }
    public string ResolvedVirtualPath { get; public set; }
    public IList`1<string> Segments { get; private set; }
    [CompilerGeneratedAttribute]
public IWebObjectFactory get_WebObjectFactory();
    [CompilerGeneratedAttribute]
public void set_WebObjectFactory(IWebObjectFactory value);
    [CompilerGeneratedAttribute]
public string get_ResolvedExtension();
    [CompilerGeneratedAttribute]
public void set_ResolvedExtension(string value);
    [CompilerGeneratedAttribute]
public string get_ResolvedVirtualPath();
    [CompilerGeneratedAttribute]
public void set_ResolvedVirtualPath(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Segments();
    [CompilerGeneratedAttribute]
private void set_Segments(IList`1<string> value);
}
public class Microsoft.AspNet.FriendlyUrls.Resolvers.FriendlyUrlResolver : object {
    private string _fileExtension;
    private IList`1<string> _fileExtensions;
    public FriendlyUrlResolver(string fileExtension);
    public virtual string ConvertToFriendlyUrl(string path);
    public virtual IList`1<string> GetExtensions(HttpContextBase httpContext);
    public virtual void PreprocessRequest(HttpContextBase httpContext, IHttpHandler httpHandler);
}
public class Microsoft.AspNet.FriendlyUrls.Resolvers.GenericHandlerFriendlyUrlResolver : FriendlyUrlResolver {
}
public interface Microsoft.AspNet.FriendlyUrls.Resolvers.IFriendlyUrlResolver {
    public abstract virtual string ConvertToFriendlyUrl(string path);
    public abstract virtual IList`1<string> GetExtensions(HttpContextBase httpContext);
    public abstract virtual void PreprocessRequest(HttpContextBase httpContext, IHttpHandler httpHandler);
}
public class Microsoft.AspNet.FriendlyUrls.Resolvers.WebFormsFriendlyUrlResolver : FriendlyUrlResolver {
    private static string IsMobileKey;
    private static string AspxExtension;
    private static string MasterExtension;
    private static string MobileSuffix;
    private static string MobileAspxExtension;
    public static string ViewSwitcherCookieName;
    private IFileCache _fileCache;
    private IVirtualPathUtility _vpu;
    internal WebFormsFriendlyUrlResolver(IFileCache fileCache, IVirtualPathUtility virtualPathUtility);
    private static WebFormsFriendlyUrlResolver();
    public static bool IsMobileView(HttpContextBase httpContext);
    public virtual IList`1<string> GetExtensions(HttpContextBase httpContext);
    public virtual void PreprocessRequest(HttpContextBase httpContext, IHttpHandler httpHandler);
    protected virtual bool IsMobileExtension(HttpContextBase httpContext, string extension);
    private static void SetIsMobileItemsFlag(HttpContextBase httpContext);
    private static bool IsMobileView(string view);
    private void Page_PreInit(Page page, HttpContextBase httpContext);
    protected virtual bool TrySetMobileMasterPage(HttpContextBase httpContext, Page page, string mobileSuffix);
    internal static bool TrySetMobileMasterPageImpl(HttpContextBase httpContext, Page page, string mobileSuffix, Func`3<Page, string, bool> trySetMasterPageFileFunc);
    protected internal virtual bool TrySetMasterPageFile(Page page, string masterPageFile);
    private static string GetUserViewOverride(HttpContextBase httpContext);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.FriendlyUrls.RouteCollectionExtensions : object {
    [ExtensionAttribute]
public static void EnableFriendlyUrls(RouteCollection routes);
    [ExtensionAttribute]
public static void EnableFriendlyUrls(RouteCollection routes, FriendlyUrlSettings settings);
    [ExtensionAttribute]
public static void EnableFriendlyUrls(RouteCollection routes, IFriendlyUrlResolver[] resolvers);
    [ExtensionAttribute]
public static void EnableFriendlyUrls(RouteCollection routes, FriendlyUrlSettings settings, IFriendlyUrlResolver[] resolvers);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.FriendlyUrls.StringExtensions : object {
    [ExtensionAttribute]
public static bool Contains(string target, string value, StringComparison comparison);
}
internal class Microsoft.AspNet.FriendlyUrls.UrlRewriterHelper : object {
    private static string UrlWasRewrittenServerVar;
    private static string UrlRewriterEnabledServerVar;
    private int _urlRewriterIsEnabledValue;
    private int CalculateAndPersistUrlRewriterIsTurnedOnValue(HttpContextBase httpContext);
    private bool IsUrlRewriterTurnedOn(HttpContextBase httpContext);
    public bool WasRequestRewritten(HttpContextBase httpContext);
    private static bool WasThisParticularRequestRewritten(HttpContextBase httpContext);
}
