internal static class Microsoft.AspNet.Identity.AsyncHelper : object {
    private static TaskFactory _myTaskFactory;
    private static AsyncHelper();
    public static TResult RunSync(Func`1<Task`1<TResult>> func);
    public static void RunSync(Func`1<Task> func);
}
public class Microsoft.AspNet.Identity.ClaimsIdentityFactory`1 : ClaimsIdentityFactory`2<TUser, string> {
}
public class Microsoft.AspNet.Identity.ClaimsIdentityFactory`2 : object {
    internal static string IdentityProviderClaimType;
    internal static string DefaultIdentityProviderClaimValue;
    [CompilerGeneratedAttribute]
private string <RoleClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserNameClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserIdClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStampClaimType>k__BackingField;
    public string RoleClaimType { get; public set; }
    public string UserNameClaimType { get; public set; }
    public string UserIdClaimType { get; public set; }
    public string SecurityStampClaimType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RoleClaimType();
    [CompilerGeneratedAttribute]
public void set_RoleClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_UserNameClaimType();
    [CompilerGeneratedAttribute]
public void set_UserNameClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_UserIdClaimType();
    [CompilerGeneratedAttribute]
public void set_UserIdClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_SecurityStampClaimType();
    [CompilerGeneratedAttribute]
public void set_SecurityStampClaimType(string value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.ClaimsIdentityFactory`2/<CreateAsync>d__0")]
public virtual Task`1<ClaimsIdentity> CreateAsync(UserManager`2<TUser, TKey> manager, TUser user, string authenticationType);
    public virtual string ConvertIdToString(TKey key);
}
public static class Microsoft.AspNet.Identity.Constants : object {
    public static string DefaultSecurityStampClaimType;
}
internal static class Microsoft.AspNet.Identity.Crypto : object {
    private static int PBKDF2IterCount;
    private static int PBKDF2SubkeyLength;
    private static int SaltSize;
    public static string HashPassword(string password);
    public static bool VerifyHashedPassword(string hashedPassword, string password);
    private static bool ByteArraysEqual(Byte[] a, Byte[] b);
}
public static class Microsoft.AspNet.Identity.DefaultAuthenticationTypes : object {
    public static string ApplicationCookie;
    public static string ExternalCookie;
    public static string ExternalBearer;
    public static string TwoFactorCookie;
    public static string TwoFactorRememberBrowserCookie;
}
public class Microsoft.AspNet.Identity.EmailTokenProvider`1 : EmailTokenProvider`2<TUser, string> {
}
public class Microsoft.AspNet.Identity.EmailTokenProvider`2 : TotpSecurityStampBasedTokenProvider`2<TUser, TKey> {
    private string _body;
    private string _subject;
    public string Subject { get; public set; }
    public string BodyFormat { get; public set; }
    public string get_Subject();
    public void set_Subject(string value);
    public string get_BodyFormat();
    public void set_BodyFormat(string value);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EmailTokenProvider`2/<IsValidProviderForUserAsync>d__d")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> IsValidProviderForUserAsync(UserManager`2<TUser, TKey> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.EmailTokenProvider`2/<GetUserModifierAsync>d__12")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> GetUserModifierAsync(string purpose, UserManager`2<TUser, TKey> manager, TUser user);
    public virtual Task NotifyAsync(string token, UserManager`2<TUser, TKey> manager, TUser user);
}
public interface Microsoft.AspNet.Identity.IClaimsIdentityFactory`1 {
    public abstract virtual Task`1<ClaimsIdentity> CreateAsync(UserManager`1<TUser> manager, TUser user, string authenticationType);
}
public interface Microsoft.AspNet.Identity.IClaimsIdentityFactory`2 {
    public abstract virtual Task`1<ClaimsIdentity> CreateAsync(UserManager`2<TUser, TKey> manager, TUser user, string authenticationType);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.Identity.IdentityExtensions : object {
    [ExtensionAttribute]
public static string GetUserName(IIdentity identity);
    [ExtensionAttribute]
public static T GetUserId(IIdentity identity);
    [ExtensionAttribute]
public static string GetUserId(IIdentity identity);
    [ExtensionAttribute]
public static string FindFirstValue(ClaimsIdentity identity, string claimType);
}
public class Microsoft.AspNet.Identity.IdentityMessage : object {
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public string Destination { get; public set; }
    public string Subject { get; public set; }
    public string Body { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Destination();
    [CompilerGeneratedAttribute]
public virtual void set_Destination(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Subject();
    [CompilerGeneratedAttribute]
public virtual void set_Subject(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Body();
    [CompilerGeneratedAttribute]
public virtual void set_Body(string value);
}
public class Microsoft.AspNet.Identity.IdentityResult : object {
    private static IdentityResult _success;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Errors>k__BackingField;
    public bool Succeeded { get; private set; }
    public IEnumerable`1<string> Errors { get; private set; }
    public static IdentityResult Success { get; }
    public IdentityResult(String[] errors);
    public IdentityResult(IEnumerable`1<string> errors);
    protected IdentityResult(bool success);
    private static IdentityResult();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IEnumerable`1<string> value);
    public static IdentityResult get_Success();
    public static IdentityResult Failed(String[] errors);
}
public interface Microsoft.AspNet.Identity.IIdentityMessageService {
    public abstract virtual Task SendAsync(IdentityMessage message);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.Identity.IIdentityMessageServiceExtensions : object {
    [ExtensionAttribute]
public static void Send(IIdentityMessageService service, IdentityMessage message);
}
public interface Microsoft.AspNet.Identity.IIdentityValidator`1 {
    public abstract virtual Task`1<IdentityResult> ValidateAsync(T item);
}
public interface Microsoft.AspNet.Identity.IPasswordHasher {
    public abstract virtual string HashPassword(string password);
    public abstract virtual PasswordVerificationResult VerifyHashedPassword(string hashedPassword, string providedPassword);
}
public interface Microsoft.AspNet.Identity.IQueryableRoleStore`1 {
}
public interface Microsoft.AspNet.Identity.IQueryableRoleStore`2 {
    public IQueryable`1<TRole> Roles { get; }
    public abstract virtual IQueryable`1<TRole> get_Roles();
}
public interface Microsoft.AspNet.Identity.IQueryableUserStore`1 {
}
public interface Microsoft.AspNet.Identity.IQueryableUserStore`2 {
    public IQueryable`1<TUser> Users { get; }
    public abstract virtual IQueryable`1<TUser> get_Users();
}
public interface Microsoft.AspNet.Identity.IRole {
}
public interface Microsoft.AspNet.Identity.IRole`1 {
    public TKey Id { get; }
    public string Name { get; public set; }
    public abstract virtual TKey get_Id();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface Microsoft.AspNet.Identity.IRoleStore`1 {
}
public interface Microsoft.AspNet.Identity.IRoleStore`2 {
    public abstract virtual Task CreateAsync(TRole role);
    public abstract virtual Task UpdateAsync(TRole role);
    public abstract virtual Task DeleteAsync(TRole role);
    public abstract virtual Task`1<TRole> FindByIdAsync(TKey roleId);
    public abstract virtual Task`1<TRole> FindByNameAsync(string roleName);
}
public interface Microsoft.AspNet.Identity.IUser {
}
public interface Microsoft.AspNet.Identity.IUser`1 {
    public TKey Id { get; }
    public string UserName { get; public set; }
    public abstract virtual TKey get_Id();
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
}
public interface Microsoft.AspNet.Identity.IUserClaimStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserClaimStore`2 {
    public abstract virtual Task`1<IList`1<Claim>> GetClaimsAsync(TUser user);
    public abstract virtual Task AddClaimAsync(TUser user, Claim claim);
    public abstract virtual Task RemoveClaimAsync(TUser user, Claim claim);
}
public interface Microsoft.AspNet.Identity.IUserEmailStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserEmailStore`2 {
    public abstract virtual Task SetEmailAsync(TUser user, string email);
    public abstract virtual Task`1<string> GetEmailAsync(TUser user);
    public abstract virtual Task`1<bool> GetEmailConfirmedAsync(TUser user);
    public abstract virtual Task SetEmailConfirmedAsync(TUser user, bool confirmed);
    public abstract virtual Task`1<TUser> FindByEmailAsync(string email);
}
public interface Microsoft.AspNet.Identity.IUserLockoutStore`2 {
    public abstract virtual Task`1<DateTimeOffset> GetLockoutEndDateAsync(TUser user);
    public abstract virtual Task SetLockoutEndDateAsync(TUser user, DateTimeOffset lockoutEnd);
    public abstract virtual Task`1<int> IncrementAccessFailedCountAsync(TUser user);
    public abstract virtual Task ResetAccessFailedCountAsync(TUser user);
    public abstract virtual Task`1<int> GetAccessFailedCountAsync(TUser user);
    public abstract virtual Task`1<bool> GetLockoutEnabledAsync(TUser user);
    public abstract virtual Task SetLockoutEnabledAsync(TUser user, bool enabled);
}
public interface Microsoft.AspNet.Identity.IUserLoginStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserLoginStore`2 {
    public abstract virtual Task AddLoginAsync(TUser user, UserLoginInfo login);
    public abstract virtual Task RemoveLoginAsync(TUser user, UserLoginInfo login);
    public abstract virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TUser user);
    public abstract virtual Task`1<TUser> FindAsync(UserLoginInfo login);
}
public interface Microsoft.AspNet.Identity.IUserPasswordStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserPasswordStore`2 {
    public abstract virtual Task SetPasswordHashAsync(TUser user, string passwordHash);
    public abstract virtual Task`1<string> GetPasswordHashAsync(TUser user);
    public abstract virtual Task`1<bool> HasPasswordAsync(TUser user);
}
public interface Microsoft.AspNet.Identity.IUserPhoneNumberStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserPhoneNumberStore`2 {
    public abstract virtual Task SetPhoneNumberAsync(TUser user, string phoneNumber);
    public abstract virtual Task`1<string> GetPhoneNumberAsync(TUser user);
    public abstract virtual Task`1<bool> GetPhoneNumberConfirmedAsync(TUser user);
    public abstract virtual Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed);
}
public interface Microsoft.AspNet.Identity.IUserRoleStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserRoleStore`2 {
    public abstract virtual Task AddToRoleAsync(TUser user, string roleName);
    public abstract virtual Task RemoveFromRoleAsync(TUser user, string roleName);
    public abstract virtual Task`1<IList`1<string>> GetRolesAsync(TUser user);
    public abstract virtual Task`1<bool> IsInRoleAsync(TUser user, string roleName);
}
public interface Microsoft.AspNet.Identity.IUserSecurityStampStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserSecurityStampStore`2 {
    public abstract virtual Task SetSecurityStampAsync(TUser user, string stamp);
    public abstract virtual Task`1<string> GetSecurityStampAsync(TUser user);
}
public interface Microsoft.AspNet.Identity.IUserStore`1 {
}
public interface Microsoft.AspNet.Identity.IUserStore`2 {
    public abstract virtual Task CreateAsync(TUser user);
    public abstract virtual Task UpdateAsync(TUser user);
    public abstract virtual Task DeleteAsync(TUser user);
    public abstract virtual Task`1<TUser> FindByIdAsync(TKey userId);
    public abstract virtual Task`1<TUser> FindByNameAsync(string userName);
}
public interface Microsoft.AspNet.Identity.IUserTokenProvider`2 {
    public abstract virtual Task`1<string> GenerateAsync(string purpose, UserManager`2<TUser, TKey> manager, TUser user);
    public abstract virtual Task`1<bool> ValidateAsync(string purpose, string token, UserManager`2<TUser, TKey> manager, TUser user);
    public abstract virtual Task NotifyAsync(string token, UserManager`2<TUser, TKey> manager, TUser user);
    public abstract virtual Task`1<bool> IsValidProviderForUserAsync(UserManager`2<TUser, TKey> manager, TUser user);
}
public interface Microsoft.AspNet.Identity.IUserTwoFactorStore`2 {
    public abstract virtual Task SetTwoFactorEnabledAsync(TUser user, bool enabled);
    public abstract virtual Task`1<bool> GetTwoFactorEnabledAsync(TUser user);
}
public class Microsoft.AspNet.Identity.MinimumLengthValidator : object {
    [CompilerGeneratedAttribute]
private int <RequiredLength>k__BackingField;
    public int RequiredLength { get; public set; }
    public MinimumLengthValidator(int requiredLength);
    [CompilerGeneratedAttribute]
public int get_RequiredLength();
    [CompilerGeneratedAttribute]
public void set_RequiredLength(int value);
    public virtual Task`1<IdentityResult> ValidateAsync(string item);
}
public class Microsoft.AspNet.Identity.PasswordHasher : object {
    public virtual string HashPassword(string password);
    public virtual PasswordVerificationResult VerifyHashedPassword(string hashedPassword, string providedPassword);
}
public class Microsoft.AspNet.Identity.PasswordValidator : object {
    [CompilerGeneratedAttribute]
private int <RequiredLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireNonLetterOrDigit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLowercase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireUppercase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireDigit>k__BackingField;
    public int RequiredLength { get; public set; }
    public bool RequireNonLetterOrDigit { get; public set; }
    public bool RequireLowercase { get; public set; }
    public bool RequireUppercase { get; public set; }
    public bool RequireDigit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RequiredLength();
    [CompilerGeneratedAttribute]
public void set_RequiredLength(int value);
    [CompilerGeneratedAttribute]
public bool get_RequireNonLetterOrDigit();
    [CompilerGeneratedAttribute]
public void set_RequireNonLetterOrDigit(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireLowercase();
    [CompilerGeneratedAttribute]
public void set_RequireLowercase(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireUppercase();
    [CompilerGeneratedAttribute]
public void set_RequireUppercase(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireDigit();
    [CompilerGeneratedAttribute]
public void set_RequireDigit(bool value);
    public virtual Task`1<IdentityResult> ValidateAsync(string item);
    public virtual bool IsDigit(char c);
    public virtual bool IsLower(char c);
    public virtual bool IsUpper(char c);
    public virtual bool IsLetterOrDigit(char c);
    [CompilerGeneratedAttribute]
private bool <ValidateAsync>b__0(char c);
    [CompilerGeneratedAttribute]
private bool <ValidateAsync>b__1(char c);
    [CompilerGeneratedAttribute]
private bool <ValidateAsync>b__2(char c);
}
public enum Microsoft.AspNet.Identity.PasswordVerificationResult : Enum {
    public int value__;
    public static PasswordVerificationResult Failed;
    public static PasswordVerificationResult Success;
    public static PasswordVerificationResult SuccessRehashNeeded;
}
public class Microsoft.AspNet.Identity.PhoneNumberTokenProvider`1 : PhoneNumberTokenProvider`2<TUser, string> {
}
public class Microsoft.AspNet.Identity.PhoneNumberTokenProvider`2 : TotpSecurityStampBasedTokenProvider`2<TUser, TKey> {
    private string _body;
    public string MessageFormat { get; public set; }
    public string get_MessageFormat();
    public void set_MessageFormat(string value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.PhoneNumberTokenProvider`2/<IsValidProviderForUserAsync>d__0")]
public virtual Task`1<bool> IsValidProviderForUserAsync(UserManager`2<TUser, TKey> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.PhoneNumberTokenProvider`2/<GetUserModifierAsync>d__5")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> GetUserModifierAsync(string purpose, UserManager`2<TUser, TKey> manager, TUser user);
    public virtual Task NotifyAsync(string token, UserManager`2<TUser, TKey> manager, TUser user);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.AspNet.Identity.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DefaultError { get; }
    internal static string DuplicateEmail { get; }
    internal static string DuplicateName { get; }
    internal static string ExternalLoginExists { get; }
    internal static string InvalidEmail { get; }
    internal static string InvalidToken { get; }
    internal static string InvalidUserName { get; }
    internal static string LockoutNotEnabled { get; }
    internal static string NoTokenProvider { get; }
    internal static string NoTwoFactorProvider { get; }
    internal static string PasswordMismatch { get; }
    internal static string PasswordRequireDigit { get; }
    internal static string PasswordRequireLower { get; }
    internal static string PasswordRequireNonLetterOrDigit { get; }
    internal static string PasswordRequireUpper { get; }
    internal static string PasswordTooShort { get; }
    internal static string PropertyTooShort { get; }
    internal static string RoleNotFound { get; }
    internal static string StoreNotIQueryableRoleStore { get; }
    internal static string StoreNotIQueryableUserStore { get; }
    internal static string StoreNotIUserClaimStore { get; }
    internal static string StoreNotIUserConfirmationStore { get; }
    internal static string StoreNotIUserEmailStore { get; }
    internal static string StoreNotIUserLockoutStore { get; }
    internal static string StoreNotIUserLoginStore { get; }
    internal static string StoreNotIUserPasswordStore { get; }
    internal static string StoreNotIUserPhoneNumberStore { get; }
    internal static string StoreNotIUserRoleStore { get; }
    internal static string StoreNotIUserSecurityStampStore { get; }
    internal static string StoreNotIUserTwoFactorStore { get; }
    internal static string UserAlreadyHasPassword { get; }
    internal static string UserAlreadyInRole { get; }
    internal static string UserIdNotFound { get; }
    internal static string UserNameNotFound { get; }
    internal static string UserNotInRole { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DefaultError();
    internal static string get_DuplicateEmail();
    internal static string get_DuplicateName();
    internal static string get_ExternalLoginExists();
    internal static string get_InvalidEmail();
    internal static string get_InvalidToken();
    internal static string get_InvalidUserName();
    internal static string get_LockoutNotEnabled();
    internal static string get_NoTokenProvider();
    internal static string get_NoTwoFactorProvider();
    internal static string get_PasswordMismatch();
    internal static string get_PasswordRequireDigit();
    internal static string get_PasswordRequireLower();
    internal static string get_PasswordRequireNonLetterOrDigit();
    internal static string get_PasswordRequireUpper();
    internal static string get_PasswordTooShort();
    internal static string get_PropertyTooShort();
    internal static string get_RoleNotFound();
    internal static string get_StoreNotIQueryableRoleStore();
    internal static string get_StoreNotIQueryableUserStore();
    internal static string get_StoreNotIUserClaimStore();
    internal static string get_StoreNotIUserConfirmationStore();
    internal static string get_StoreNotIUserEmailStore();
    internal static string get_StoreNotIUserLockoutStore();
    internal static string get_StoreNotIUserLoginStore();
    internal static string get_StoreNotIUserPasswordStore();
    internal static string get_StoreNotIUserPhoneNumberStore();
    internal static string get_StoreNotIUserRoleStore();
    internal static string get_StoreNotIUserSecurityStampStore();
    internal static string get_StoreNotIUserTwoFactorStore();
    internal static string get_UserAlreadyHasPassword();
    internal static string get_UserAlreadyInRole();
    internal static string get_UserIdNotFound();
    internal static string get_UserNameNotFound();
    internal static string get_UserNotInRole();
}
internal static class Microsoft.AspNet.Identity.Rfc6238AuthenticationService : object {
    private static DateTime _unixEpoch;
    private static TimeSpan _timestep;
    private static Encoding _encoding;
    private static Rfc6238AuthenticationService();
    private static int ComputeTotp(HashAlgorithm hashAlgorithm, ulong timestepNumber, string modifier);
    private static Byte[] ApplyModifier(Byte[] input, string modifier);
    private static ulong GetCurrentTimeStepNumber();
    public static int GenerateCode(SecurityToken securityToken, string modifier);
    public static bool ValidateCode(SecurityToken securityToken, int code, string modifier);
}
public class Microsoft.AspNet.Identity.RoleManager`1 : RoleManager`2<TRole, string> {
    public RoleManager`1(IRoleStore`2<TRole, string> store);
}
public class Microsoft.AspNet.Identity.RoleManager`2 : object {
    private bool _disposed;
    private IIdentityValidator`1<TRole> _roleValidator;
    [CompilerGeneratedAttribute]
private IRoleStore`2<TRole, TKey> <Store>k__BackingField;
    protected IRoleStore`2<TRole, TKey> Store { get; private set; }
    public IIdentityValidator`1<TRole> RoleValidator { get; public set; }
    public IQueryable`1<TRole> Roles { get; }
    public RoleManager`2(IRoleStore`2<TRole, TKey> store);
    [CompilerGeneratedAttribute]
protected IRoleStore`2<TRole, TKey> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(IRoleStore`2<TRole, TKey> value);
    public IIdentityValidator`1<TRole> get_RoleValidator();
    public void set_RoleValidator(IIdentityValidator`1<TRole> value);
    public virtual IQueryable`1<TRole> get_Roles();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleManager`2/<CreateAsync>d__0")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> CreateAsync(TRole role);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleManager`2/<UpdateAsync>d__5")]
public virtual Task`1<IdentityResult> UpdateAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleManager`2/<DeleteAsync>d__a")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> DeleteAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleManager`2/<RoleExistsAsync>d__d")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> RoleExistsAsync(string roleName);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleManager`2/<FindByIdAsync>d__10")]
public virtual Task`1<TRole> FindByIdAsync(TKey roleId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleManager`2/<FindByNameAsync>d__13")]
[DebuggerStepThroughAttribute]
public virtual Task`1<TRole> FindByNameAsync(string roleName);
    private void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.Identity.RoleManagerExtensions : object {
    [ExtensionAttribute]
public static TRole FindById(RoleManager`2<TRole, TKey> manager, TKey roleId);
    [ExtensionAttribute]
public static TRole FindByName(RoleManager`2<TRole, TKey> manager, string roleName);
    [ExtensionAttribute]
public static IdentityResult Create(RoleManager`2<TRole, TKey> manager, TRole role);
    [ExtensionAttribute]
public static IdentityResult Update(RoleManager`2<TRole, TKey> manager, TRole role);
    [ExtensionAttribute]
public static IdentityResult Delete(RoleManager`2<TRole, TKey> manager, TRole role);
    [ExtensionAttribute]
public static bool RoleExists(RoleManager`2<TRole, TKey> manager, string roleName);
}
public class Microsoft.AspNet.Identity.RoleValidator`1 : RoleValidator`2<TRole, string> {
    public RoleValidator`1(RoleManager`2<TRole, string> manager);
}
public class Microsoft.AspNet.Identity.RoleValidator`2 : object {
    [CompilerGeneratedAttribute]
private RoleManager`2<TRole, TKey> <Manager>k__BackingField;
    private RoleManager`2<TRole, TKey> Manager { get; private set; }
    public RoleValidator`2(RoleManager`2<TRole, TKey> manager);
    [CompilerGeneratedAttribute]
private RoleManager`2<TRole, TKey> get_Manager();
    [CompilerGeneratedAttribute]
private void set_Manager(RoleManager`2<TRole, TKey> value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleValidator`2/<ValidateAsync>d__0")]
public virtual Task`1<IdentityResult> ValidateAsync(TRole item);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.RoleValidator`2/<ValidateRoleName>d__4")]
private Task ValidateRoleName(TRole role, List`1<string> errors);
}
internal class Microsoft.AspNet.Identity.SecurityToken : object {
    private Byte[] _data;
    public SecurityToken(Byte[] data);
    internal Byte[] GetDataNoClone();
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.Identity.TaskExtensions : object {
    [ExtensionAttribute]
public static CultureAwaiter`1<T> WithCurrentCulture(Task`1<T> task);
    [ExtensionAttribute]
public static CultureAwaiter WithCurrentCulture(Task task);
}
public class Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider`2 : object {
    public virtual Task NotifyAsync(string token, UserManager`2<TUser, TKey> manager, TUser user);
    public virtual Task`1<bool> IsValidProviderForUserAsync(UserManager`2<TUser, TKey> manager, TUser user);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider`2/<GenerateAsync>d__0")]
public virtual Task`1<string> GenerateAsync(string purpose, UserManager`2<TUser, TKey> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.TotpSecurityStampBasedTokenProvider`2/<ValidateAsync>d__6")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> ValidateAsync(string purpose, string token, UserManager`2<TUser, TKey> manager, TUser user);
    public virtual Task`1<string> GetUserModifierAsync(string purpose, UserManager`2<TUser, TKey> manager, TUser user);
}
public class Microsoft.AspNet.Identity.UserLoginInfo : object {
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    public string LoginProvider { get; public set; }
    public string ProviderKey { get; public set; }
    public UserLoginInfo(string loginProvider, string providerKey);
    [CompilerGeneratedAttribute]
public string get_LoginProvider();
    [CompilerGeneratedAttribute]
public void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderKey();
    [CompilerGeneratedAttribute]
public void set_ProviderKey(string value);
}
public class Microsoft.AspNet.Identity.UserManager`1 : UserManager`2<TUser, string> {
    public UserManager`1(IUserStore`1<TUser> store);
}
public class Microsoft.AspNet.Identity.UserManager`2 : object {
    private Dictionary`2<string, IUserTokenProvider`2<TUser, TKey>> _factors;
    private IClaimsIdentityFactory`2<TUser, TKey> _claimsFactory;
    private TimeSpan _defaultLockout;
    private bool _disposed;
    private IPasswordHasher _passwordHasher;
    private IIdentityValidator`1<string> _passwordValidator;
    private IIdentityValidator`1<TUser> _userValidator;
    [CompilerGeneratedAttribute]
private IUserStore`2<TUser, TKey> <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityMessageService <EmailService>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityMessageService <SmsService>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserTokenProvider`2<TUser, TKey> <UserTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserLockoutEnabledByDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxFailedAccessAttemptsBeforeLockout>k__BackingField;
    protected internal IUserStore`2<TUser, TKey> Store { get; protected internal set; }
    public IPasswordHasher PasswordHasher { get; public set; }
    public IIdentityValidator`1<TUser> UserValidator { get; public set; }
    public IIdentityValidator`1<string> PasswordValidator { get; public set; }
    public IClaimsIdentityFactory`2<TUser, TKey> ClaimsIdentityFactory { get; public set; }
    public IIdentityMessageService EmailService { get; public set; }
    public IIdentityMessageService SmsService { get; public set; }
    public IUserTokenProvider`2<TUser, TKey> UserTokenProvider { get; public set; }
    public bool UserLockoutEnabledByDefault { get; public set; }
    public int MaxFailedAccessAttemptsBeforeLockout { get; public set; }
    public TimeSpan DefaultAccountLockoutTimeSpan { get; public set; }
    public bool SupportsUserTwoFactor { get; }
    public bool SupportsUserPassword { get; }
    public bool SupportsUserSecurityStamp { get; }
    public bool SupportsUserRole { get; }
    public bool SupportsUserLogin { get; }
    public bool SupportsUserEmail { get; }
    public bool SupportsUserPhoneNumber { get; }
    public bool SupportsUserClaim { get; }
    public bool SupportsUserLockout { get; }
    public bool SupportsQueryableUsers { get; }
    public IQueryable`1<TUser> Users { get; }
    public IDictionary`2<string, IUserTokenProvider`2<TUser, TKey>> TwoFactorProviders { get; }
    public UserManager`2(IUserStore`2<TUser, TKey> store);
    [CompilerGeneratedAttribute]
protected internal IUserStore`2<TUser, TKey> get_Store();
    [CompilerGeneratedAttribute]
protected internal void set_Store(IUserStore`2<TUser, TKey> value);
    public IPasswordHasher get_PasswordHasher();
    public void set_PasswordHasher(IPasswordHasher value);
    public IIdentityValidator`1<TUser> get_UserValidator();
    public void set_UserValidator(IIdentityValidator`1<TUser> value);
    public IIdentityValidator`1<string> get_PasswordValidator();
    public void set_PasswordValidator(IIdentityValidator`1<string> value);
    public IClaimsIdentityFactory`2<TUser, TKey> get_ClaimsIdentityFactory();
    public void set_ClaimsIdentityFactory(IClaimsIdentityFactory`2<TUser, TKey> value);
    [CompilerGeneratedAttribute]
public IIdentityMessageService get_EmailService();
    [CompilerGeneratedAttribute]
public void set_EmailService(IIdentityMessageService value);
    [CompilerGeneratedAttribute]
public IIdentityMessageService get_SmsService();
    [CompilerGeneratedAttribute]
public void set_SmsService(IIdentityMessageService value);
    [CompilerGeneratedAttribute]
public IUserTokenProvider`2<TUser, TKey> get_UserTokenProvider();
    [CompilerGeneratedAttribute]
public void set_UserTokenProvider(IUserTokenProvider`2<TUser, TKey> value);
    [CompilerGeneratedAttribute]
public bool get_UserLockoutEnabledByDefault();
    [CompilerGeneratedAttribute]
public void set_UserLockoutEnabledByDefault(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxFailedAccessAttemptsBeforeLockout();
    [CompilerGeneratedAttribute]
public void set_MaxFailedAccessAttemptsBeforeLockout(int value);
    public TimeSpan get_DefaultAccountLockoutTimeSpan();
    public void set_DefaultAccountLockoutTimeSpan(TimeSpan value);
    public virtual bool get_SupportsUserTwoFactor();
    public virtual bool get_SupportsUserPassword();
    public virtual bool get_SupportsUserSecurityStamp();
    public virtual bool get_SupportsUserRole();
    public virtual bool get_SupportsUserLogin();
    public virtual bool get_SupportsUserEmail();
    public virtual bool get_SupportsUserPhoneNumber();
    public virtual bool get_SupportsUserClaim();
    public virtual bool get_SupportsUserLockout();
    public virtual bool get_SupportsQueryableUsers();
    public virtual IQueryable`1<TUser> get_Users();
    public IDictionary`2<string, IUserTokenProvider`2<TUser, TKey>> get_TwoFactorProviders();
    public sealed virtual void Dispose();
    public virtual Task`1<ClaimsIdentity> CreateIdentityAsync(TUser user, string authenticationType);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<CreateAsync>d__0")]
public virtual Task`1<IdentityResult> CreateAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<UpdateAsync>d__5")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> UpdateAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<DeleteAsync>d__a")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> DeleteAsync(TUser user);
    public virtual Task`1<TUser> FindByIdAsync(TKey userId);
    public virtual Task`1<TUser> FindByNameAsync(string userName);
    private IUserPasswordStore`2<TUser, TKey> GetPasswordStore();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<CreateAsync>d__d")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> CreateAsync(TUser user, string password);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<FindAsync>d__12")]
public virtual Task`1<TUser> FindAsync(string userName, string password);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<CheckPasswordAsync>d__17")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> CheckPasswordAsync(TUser user, string password);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<HasPasswordAsync>d__1b")]
public virtual Task`1<bool> HasPasswordAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<AddPasswordAsync>d__21")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> AddPasswordAsync(TKey userId, string password);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<ChangePasswordAsync>d__2a")]
public virtual Task`1<IdentityResult> ChangePasswordAsync(TKey userId, string currentPassword, string newPassword);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<RemovePasswordAsync>d__32")]
public virtual Task`1<IdentityResult> RemovePasswordAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<UpdatePassword>d__39")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<IdentityResult> UpdatePassword(IUserPasswordStore`2<TUser, TKey> passwordStore, TUser user, string newPassword);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<VerifyPasswordAsync>d__3e")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<bool> VerifyPasswordAsync(IUserPasswordStore`2<TUser, TKey> store, TUser user, string password);
    private IUserSecurityStampStore`2<TUser, TKey> GetSecurityStore();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetSecurityStampAsync>d__42")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> GetSecurityStampAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<UpdateSecurityStampAsync>d__48")]
public virtual Task`1<IdentityResult> UpdateSecurityStampAsync(TKey userId);
    public virtual Task`1<string> GeneratePasswordResetTokenAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<ResetPasswordAsync>d__4f")]
public virtual Task`1<IdentityResult> ResetPasswordAsync(TKey userId, string token, string newPassword);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<UpdateSecurityStampInternal>d__57")]
[DebuggerStepThroughAttribute]
internal Task UpdateSecurityStampInternal(TUser user);
    private static string NewSecurityStamp();
    private IUserLoginStore`2<TUser, TKey> GetLoginStore();
    public virtual Task`1<TUser> FindAsync(UserLoginInfo login);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<RemoveLoginAsync>d__5a")]
public virtual Task`1<IdentityResult> RemoveLoginAsync(TKey userId, UserLoginInfo login);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<AddLoginAsync>d__61")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> AddLoginAsync(TKey userId, UserLoginInfo login);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetLoginsAsync>d__69")]
public virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TKey userId);
    private IUserClaimStore`2<TUser, TKey> GetClaimStore();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<AddClaimAsync>d__6f")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> AddClaimAsync(TKey userId, Claim claim);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<RemoveClaimAsync>d__76")]
public virtual Task`1<IdentityResult> RemoveClaimAsync(TKey userId, Claim claim);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetClaimsAsync>d__7d")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TKey userId);
    private IUserRoleStore`2<TUser, TKey> GetUserRoleStore();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<AddToRoleAsync>d__83")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> AddToRoleAsync(TKey userId, string role);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<AddToRolesAsync>d__8c")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> AddToRolesAsync(TKey userId, String[] roles);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<RemoveFromRolesAsync>d__98")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> RemoveFromRolesAsync(TKey userId, String[] roles);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<RemoveFromRoleAsync>d__a4")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> RemoveFromRoleAsync(TKey userId, string role);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetRolesAsync>d__ac")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IList`1<string>> GetRolesAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<IsInRoleAsync>d__b2")]
public virtual Task`1<bool> IsInRoleAsync(TKey userId, string role);
    internal IUserEmailStore`2<TUser, TKey> GetEmailStore();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetEmailAsync>d__b8")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> GetEmailAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<SetEmailAsync>d__be")]
public virtual Task`1<IdentityResult> SetEmailAsync(TKey userId, string email);
    public virtual Task`1<TUser> FindByEmailAsync(string email);
    public virtual Task`1<string> GenerateEmailConfirmationTokenAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<ConfirmEmailAsync>d__c5")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> ConfirmEmailAsync(TKey userId, string token);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<IsEmailConfirmedAsync>d__cd")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> IsEmailConfirmedAsync(TKey userId);
    internal IUserPhoneNumberStore`2<TUser, TKey> GetPhoneNumberStore();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetPhoneNumberAsync>d__d3")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> GetPhoneNumberAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<SetPhoneNumberAsync>d__d9")]
public virtual Task`1<IdentityResult> SetPhoneNumberAsync(TKey userId, string phoneNumber);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<ChangePhoneNumberAsync>d__e0")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> ChangePhoneNumberAsync(TKey userId, string phoneNumber, string token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<IsPhoneNumberConfirmedAsync>d__e8")]
public virtual Task`1<bool> IsPhoneNumberConfirmedAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<CreateSecurityTokenAsync>d__ee")]
internal Task`1<SecurityToken> CreateSecurityTokenAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GenerateChangePhoneNumberTokenAsync>d__f1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> GenerateChangePhoneNumberTokenAsync(TKey userId, string phoneNumber);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<VerifyChangePhoneNumberTokenAsync>d__f4")]
public virtual Task`1<bool> VerifyChangePhoneNumberTokenAsync(TKey userId, string token, string phoneNumber);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<VerifyUserTokenAsync>d__f9")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> VerifyUserTokenAsync(TKey userId, string purpose, string token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GenerateUserTokenAsync>d__fe")]
public virtual Task`1<string> GenerateUserTokenAsync(string purpose, TKey userId);
    public virtual void RegisterTwoFactorProvider(string twoFactorProvider, IUserTokenProvider`2<TUser, TKey> provider);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetValidTwoFactorProvidersAsync>d__103")]
public virtual Task`1<IList`1<string>> GetValidTwoFactorProvidersAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<VerifyTwoFactorTokenAsync>d__10b")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> VerifyTwoFactorTokenAsync(TKey userId, string twoFactorProvider, string token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GenerateTwoFactorTokenAsync>d__111")]
public virtual Task`1<string> GenerateTwoFactorTokenAsync(TKey userId, string twoFactorProvider);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<NotifyTwoFactorTokenAsync>d__116")]
public virtual Task`1<IdentityResult> NotifyTwoFactorTokenAsync(TKey userId, string twoFactorProvider, string token);
    internal IUserTwoFactorStore`2<TUser, TKey> GetUserTwoFactorStore();
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetTwoFactorEnabledAsync>d__11b")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> GetTwoFactorEnabledAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<SetTwoFactorEnabledAsync>d__121")]
public virtual Task`1<IdentityResult> SetTwoFactorEnabledAsync(TKey userId, bool enabled);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<SendEmailAsync>d__129")]
[DebuggerStepThroughAttribute]
public virtual Task SendEmailAsync(TKey userId, string subject, string body);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<SendSmsAsync>d__12f")]
[DebuggerStepThroughAttribute]
public virtual Task SendSmsAsync(TKey userId, string message);
    internal IUserLockoutStore`2<TUser, TKey> GetUserLockoutStore();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<IsLockedOutAsync>d__134")]
public virtual Task`1<bool> IsLockedOutAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<SetLockoutEnabledAsync>d__13c")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> SetLockoutEnabledAsync(TKey userId, bool enabled);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetLockoutEnabledAsync>d__143")]
public virtual Task`1<bool> GetLockoutEnabledAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetLockoutEndDateAsync>d__149")]
[DebuggerStepThroughAttribute]
public virtual Task`1<DateTimeOffset> GetLockoutEndDateAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<SetLockoutEndDateAsync>d__14f")]
public virtual Task`1<IdentityResult> SetLockoutEndDateAsync(TKey userId, DateTimeOffset lockoutEnd);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<AccessFailedAsync>d__157")]
public virtual Task`1<IdentityResult> AccessFailedAsync(TKey userId);
    [AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<ResetAccessFailedCountAsync>d__160")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IdentityResult> ResetAccessFailedCountAsync(TKey userId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserManager`2/<GetAccessFailedCountAsync>d__168")]
public virtual Task`1<int> GetAccessFailedCountAsync(TKey userId);
    private void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.Identity.UserManagerExtensions : object {
    [ExtensionAttribute]
public static ClaimsIdentity CreateIdentity(UserManager`2<TUser, TKey> manager, TUser user, string authenticationType);
    [ExtensionAttribute]
public static TUser FindById(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static TUser Find(UserManager`2<TUser, TKey> manager, string userName, string password);
    [ExtensionAttribute]
public static TUser FindByName(UserManager`2<TUser, TKey> manager, string userName);
    [ExtensionAttribute]
public static TUser FindByEmail(UserManager`2<TUser, TKey> manager, string email);
    [ExtensionAttribute]
public static IdentityResult Create(UserManager`2<TUser, TKey> manager, TUser user);
    [ExtensionAttribute]
public static IdentityResult Create(UserManager`2<TUser, TKey> manager, TUser user, string password);
    [ExtensionAttribute]
public static IdentityResult Update(UserManager`2<TUser, TKey> manager, TUser user);
    [ExtensionAttribute]
public static IdentityResult Delete(UserManager`2<TUser, TKey> manager, TUser user);
    [ExtensionAttribute]
public static bool HasPassword(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult AddPassword(UserManager`2<TUser, TKey> manager, TKey userId, string password);
    [ExtensionAttribute]
public static IdentityResult ChangePassword(UserManager`2<TUser, TKey> manager, TKey userId, string currentPassword, string newPassword);
    [ExtensionAttribute]
public static IdentityResult ResetPassword(UserManager`2<TUser, TKey> manager, TKey userId, string token, string newPassword);
    [ExtensionAttribute]
public static string GeneratePasswordResetToken(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static string GetSecurityStamp(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static string GenerateEmailConfirmationToken(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult ConfirmEmail(UserManager`2<TUser, TKey> manager, TKey userId, string token);
    [ExtensionAttribute]
public static bool IsEmailConfirmed(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult UpdateSecurityStamp(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static bool CheckPassword(UserManager`2<TUser, TKey> manager, TUser user, string password);
    [ExtensionAttribute]
public static IdentityResult RemovePassword(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult AddLogin(UserManager`2<TUser, TKey> manager, TKey userId, UserLoginInfo login);
    [ExtensionAttribute]
public static IdentityResult RemoveLogin(UserManager`2<TUser, TKey> manager, TKey userId, UserLoginInfo login);
    [ExtensionAttribute]
public static IList`1<UserLoginInfo> GetLogins(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static TUser Find(UserManager`2<TUser, TKey> manager, UserLoginInfo login);
    [ExtensionAttribute]
public static IdentityResult AddClaim(UserManager`2<TUser, TKey> manager, TKey userId, Claim claim);
    [ExtensionAttribute]
public static IdentityResult RemoveClaim(UserManager`2<TUser, TKey> manager, TKey userId, Claim claim);
    [ExtensionAttribute]
public static IList`1<Claim> GetClaims(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult AddToRole(UserManager`2<TUser, TKey> manager, TKey userId, string role);
    [ExtensionAttribute]
public static IdentityResult AddToRoles(UserManager`2<TUser, TKey> manager, TKey userId, String[] roles);
    [ExtensionAttribute]
public static IdentityResult RemoveFromRole(UserManager`2<TUser, TKey> manager, TKey userId, string role);
    [ExtensionAttribute]
public static IdentityResult RemoveFromRoles(UserManager`2<TUser, TKey> manager, TKey userId, String[] roles);
    [ExtensionAttribute]
public static IList`1<string> GetRoles(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static bool IsInRole(UserManager`2<TUser, TKey> manager, TKey userId, string role);
    [ExtensionAttribute]
public static string GetEmail(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult SetEmail(UserManager`2<TUser, TKey> manager, TKey userId, string email);
    [ExtensionAttribute]
public static string GetPhoneNumber(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult SetPhoneNumber(UserManager`2<TUser, TKey> manager, TKey userId, string phoneNumber);
    [ExtensionAttribute]
public static IdentityResult ChangePhoneNumber(UserManager`2<TUser, TKey> manager, TKey userId, string phoneNumber, string token);
    [ExtensionAttribute]
public static string GenerateChangePhoneNumberToken(UserManager`2<TUser, TKey> manager, TKey userId, string phoneNumber);
    [ExtensionAttribute]
public static bool VerifyChangePhoneNumberToken(UserManager`2<TUser, TKey> manager, TKey userId, string token, string phoneNumber);
    [ExtensionAttribute]
public static bool IsPhoneNumberConfirmed(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static string GenerateTwoFactorToken(UserManager`2<TUser, TKey> manager, TKey userId, string providerId);
    [ExtensionAttribute]
public static bool VerifyTwoFactorToken(UserManager`2<TUser, TKey> manager, TKey userId, string providerId, string token);
    [ExtensionAttribute]
public static IList`1<string> GetValidTwoFactorProviders(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static string GenerateUserToken(UserManager`2<TUser, TKey> manager, string purpose, TKey userId);
    [ExtensionAttribute]
public static bool VerifyUserToken(UserManager`2<TUser, TKey> manager, TKey userId, string purpose, string token);
    [ExtensionAttribute]
public static IdentityResult NotifyTwoFactorToken(UserManager`2<TUser, TKey> manager, TKey userId, string twoFactorProvider, string token);
    [ExtensionAttribute]
public static bool GetTwoFactorEnabled(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult SetTwoFactorEnabled(UserManager`2<TUser, TKey> manager, TKey userId, bool enabled);
    [ExtensionAttribute]
public static void SendEmail(UserManager`2<TUser, TKey> manager, TKey userId, string subject, string body);
    [ExtensionAttribute]
public static void SendSms(UserManager`2<TUser, TKey> manager, TKey userId, string message);
    [ExtensionAttribute]
public static bool IsLockedOut(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult SetLockoutEnabled(UserManager`2<TUser, TKey> manager, TKey userId, bool enabled);
    [ExtensionAttribute]
public static bool GetLockoutEnabled(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static DateTimeOffset GetLockoutEndDate(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult SetLockoutEndDate(UserManager`2<TUser, TKey> manager, TKey userId, DateTimeOffset lockoutEnd);
    [ExtensionAttribute]
public static IdentityResult AccessFailed(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static IdentityResult ResetAccessFailedCount(UserManager`2<TUser, TKey> manager, TKey userId);
    [ExtensionAttribute]
public static int GetAccessFailedCount(UserManager`2<TUser, TKey> manager, TKey userId);
}
public class Microsoft.AspNet.Identity.UserValidator`1 : UserValidator`2<TUser, string> {
    public UserValidator`1(UserManager`2<TUser, string> manager);
}
public class Microsoft.AspNet.Identity.UserValidator`2 : object {
    [CompilerGeneratedAttribute]
private bool <AllowOnlyAlphanumericUserNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireUniqueEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private UserManager`2<TUser, TKey> <Manager>k__BackingField;
    public bool AllowOnlyAlphanumericUserNames { get; public set; }
    public bool RequireUniqueEmail { get; public set; }
    private UserManager`2<TUser, TKey> Manager { get; private set; }
    public UserValidator`2(UserManager`2<TUser, TKey> manager);
    [CompilerGeneratedAttribute]
public bool get_AllowOnlyAlphanumericUserNames();
    [CompilerGeneratedAttribute]
public void set_AllowOnlyAlphanumericUserNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireUniqueEmail();
    [CompilerGeneratedAttribute]
public void set_RequireUniqueEmail(bool value);
    [CompilerGeneratedAttribute]
private UserManager`2<TUser, TKey> get_Manager();
    [CompilerGeneratedAttribute]
private void set_Manager(UserManager`2<TUser, TKey> value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserValidator`2/<ValidateAsync>d__0")]
public virtual Task`1<IdentityResult> ValidateAsync(TUser item);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserValidator`2/<ValidateUserName>d__4")]
private Task ValidateUserName(TUser user, List`1<string> errors);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.Identity.UserValidator`2/<ValidateEmailAsync>d__8")]
private Task ValidateEmailAsync(TUser user, List`1<string> errors);
}
