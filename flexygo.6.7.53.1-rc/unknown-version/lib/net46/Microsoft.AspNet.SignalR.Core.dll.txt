[AttributeUsageAttribute("68")]
public class Microsoft.AspNet.SignalR.AuthorizeAttribute : Attribute {
    private string _roles;
    private String[] _rolesSplit;
    private string _users;
    private String[] _usersSplit;
    protected Nullable`1<bool> _requireOutgoing;
    [CompilerGeneratedAttribute]
private static Func`2<string, <>f__AnonymousType0`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<string, string>, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    public bool RequireOutgoing { get; public set; }
    public string Roles { get; public set; }
    public string Users { get; public set; }
    public bool get_RequireOutgoing();
    public void set_RequireOutgoing(bool value);
    public string get_Roles();
    public void set_Roles(string value);
    public string get_Users();
    public void set_Users(string value);
    public virtual bool AuthorizeHubConnection(HubDescriptor hubDescriptor, IRequest request);
    public virtual bool AuthorizeHubMethodInvocation(IHubIncomingInvokerContext hubIncomingInvokerContext, bool appliesToMethod);
    protected virtual bool UserAuthorized(IPrincipal user);
    private static String[] SplitString(string original);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<string, string> <SplitString>b__1(string piece);
    [CompilerGeneratedAttribute]
private static bool <SplitString>b__2(<>f__AnonymousType0`2<string, string> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static string <SplitString>b__3(<>f__AnonymousType0`2<string, string> <>h__TransparentIdentifier0);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Configuration.ConfigurationExtensions : object {
    public static int MissedTimeoutsBeforeClientReconnect;
    public static int HeartBeatsPerKeepAlive;
    public static int HeartBeatsPerDisconnectTimeout;
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> KeepAliveTimeout(IConfigurationManager config);
    [ExtensionAttribute]
public static TimeSpan HeartbeatInterval(IConfigurationManager config);
    [ExtensionAttribute]
public static TimeSpan TopicTtl(IConfigurationManager config);
}
public class Microsoft.AspNet.SignalR.Configuration.DefaultConfigurationManager : object {
    private static int _minimumKeepAlivesPerDisconnectTimeout;
    private static TimeSpan _minimumKeepAlive;
    private static TimeSpan _minimumDisconnectTimeout;
    private bool _keepAliveConfigured;
    private Nullable`1<TimeSpan> _keepAlive;
    private TimeSpan _disconnectTimeout;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultMessageBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxIncomingWebSocketMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TransportConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LongPollDelay>k__BackingField;
    public TimeSpan ConnectionTimeout { get; public set; }
    public TimeSpan DisconnectTimeout { get; public set; }
    public Nullable`1<TimeSpan> KeepAlive { get; public set; }
    public int DefaultMessageBufferSize { get; public set; }
    public Nullable`1<int> MaxIncomingWebSocketMessageSize { get; public set; }
    public TimeSpan TransportConnectTimeout { get; public set; }
    public TimeSpan LongPollDelay { get; public set; }
    private static DefaultConfigurationManager();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionTimeout(TimeSpan value);
    public sealed virtual TimeSpan get_DisconnectTimeout();
    public sealed virtual void set_DisconnectTimeout(TimeSpan value);
    public sealed virtual Nullable`1<TimeSpan> get_KeepAlive();
    public sealed virtual void set_KeepAlive(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DefaultMessageBufferSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultMessageBufferSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxIncomingWebSocketMessageSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxIncomingWebSocketMessageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TransportConnectTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransportConnectTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_LongPollDelay();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LongPollDelay(TimeSpan value);
}
public interface Microsoft.AspNet.SignalR.Configuration.IConfigurationManager {
    public TimeSpan TransportConnectTimeout { get; public set; }
    public TimeSpan ConnectionTimeout { get; public set; }
    public TimeSpan DisconnectTimeout { get; public set; }
    public Nullable`1<TimeSpan> KeepAlive { get; public set; }
    public int DefaultMessageBufferSize { get; public set; }
    public Nullable`1<int> MaxIncomingWebSocketMessageSize { get; public set; }
    public TimeSpan LongPollDelay { get; public set; }
    public abstract virtual TimeSpan get_TransportConnectTimeout();
    public abstract virtual void set_TransportConnectTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_ConnectionTimeout();
    public abstract virtual void set_ConnectionTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_DisconnectTimeout();
    public abstract virtual void set_DisconnectTimeout(TimeSpan value);
    public abstract virtual Nullable`1<TimeSpan> get_KeepAlive();
    public abstract virtual void set_KeepAlive(Nullable`1<TimeSpan> value);
    public abstract virtual int get_DefaultMessageBufferSize();
    public abstract virtual void set_DefaultMessageBufferSize(int value);
    public abstract virtual Nullable`1<int> get_MaxIncomingWebSocketMessageSize();
    public abstract virtual void set_MaxIncomingWebSocketMessageSize(Nullable`1<int> value);
    public abstract virtual TimeSpan get_LongPollDelay();
    public abstract virtual void set_LongPollDelay(TimeSpan value);
}
public class Microsoft.AspNet.SignalR.ConnectionConfiguration : object {
    private IDependencyResolver _resolver;
    [CompilerGeneratedAttribute]
private bool <EnableJSONP>k__BackingField;
    public IDependencyResolver Resolver { get; public set; }
    public bool EnableJSONP { get; public set; }
    public IDependencyResolver get_Resolver();
    public void set_Resolver(IDependencyResolver value);
    [CompilerGeneratedAttribute]
public bool get_EnableJSONP();
    [CompilerGeneratedAttribute]
public void set_EnableJSONP(bool value);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.ConnectionExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static Task Send(IConnection connection, string connectionId, object value);
    [ExtensionAttribute]
public static Task Send(IConnection connection, IList`1<string> connectionIds, object value);
    [ExtensionAttribute]
public static Task Broadcast(IConnection connection, object value, String[] excludeConnectionIds);
    [CompilerGeneratedAttribute]
private static string <Send>b__0(string c);
}
public class Microsoft.AspNet.SignalR.ConnectionMessage : ValueType {
    [CompilerGeneratedAttribute]
private string <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Signals>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExcludedSignals>k__BackingField;
    public string Signal { get; private set; }
    public IList`1<string> Signals { get; private set; }
    public object Value { get; private set; }
    public IList`1<string> ExcludedSignals { get; private set; }
    public ConnectionMessage(IList`1<string> signals, object value);
    public ConnectionMessage(IList`1<string> signals, object value, IList`1<string> excludedSignals);
    public ConnectionMessage(string signal, object value);
    public ConnectionMessage(string signal, object value, IList`1<string> excludedSignals);
    [CompilerGeneratedAttribute]
public string get_Signal();
    [CompilerGeneratedAttribute]
private void set_Signal(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Signals();
    [CompilerGeneratedAttribute]
private void set_Signals(IList`1<string> value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExcludedSignals();
    [CompilerGeneratedAttribute]
private void set_ExcludedSignals(IList`1<string> value);
}
public class Microsoft.AspNet.SignalR.Cookie : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Domain { get; private set; }
    public string Path { get; private set; }
    public string Value { get; private set; }
    public Cookie(string name, string value);
    public Cookie(string name, string value, string domain, string path);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
private void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class Microsoft.AspNet.SignalR.DefaultDependencyResolver : object {
    private Dictionary`2<Type, IList`1<Func`1<object>>> _resolvers;
    private HashSet`1<IDisposable> _trackedDisposables;
    private int _disposed;
    [CompilerGeneratedAttribute]
private static Func`1<TraceManager> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`1<IStringMinifier> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`1<DefaultAssemblyLocator> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`1<IHubPipeline> CS$<>9__CachedAnonymousMethodDelegate29;
    private void RegisterDefaultServices();
    private void RegisterHubExtensions();
    public virtual object GetService(Type serviceType);
    public virtual IEnumerable`1<object> GetServices(Type serviceType);
    public virtual void Register(Type serviceType, Func`1<object> activator);
    public virtual void Register(Type serviceType, IEnumerable`1<Func`1<object>> activators);
    private object Track(Func`1<object> creator);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static TraceManager <RegisterDefaultServices>b__0();
    [CompilerGeneratedAttribute]
private IMessageBus <RegisterDefaultServices>b__2();
    [CompilerGeneratedAttribute]
private static IStringMinifier <RegisterDefaultServices>b__4();
    [CompilerGeneratedAttribute]
private TransportManager <RegisterDefaultServices>b__7();
    [CompilerGeneratedAttribute]
private TransportHeartbeat <RegisterDefaultServices>b__a();
    [CompilerGeneratedAttribute]
private ConnectionManager <RegisterDefaultServices>b__c();
    [CompilerGeneratedAttribute]
private AckSubscriber <RegisterDefaultServices>b__f();
    [CompilerGeneratedAttribute]
private PerformanceCounterManager <RegisterDefaultServices>b__11();
    [CompilerGeneratedAttribute]
private ReflectedHubDescriptorProvider <RegisterHubExtensions>b__19();
    [CompilerGeneratedAttribute]
private DefaultHubActivator <RegisterHubExtensions>b__1c();
    [CompilerGeneratedAttribute]
private DefaultHubManager <RegisterHubExtensions>b__1e();
    [CompilerGeneratedAttribute]
private DefaultJavaScriptProxyGenerator <RegisterHubExtensions>b__20();
    [CompilerGeneratedAttribute]
private static DefaultAssemblyLocator <RegisterHubExtensions>b__23();
    [CompilerGeneratedAttribute]
private static IHubPipeline <RegisterHubExtensions>b__25();
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.DependencyResolverExtensions : object {
    [ExtensionAttribute]
public static T Resolve(IDependencyResolver resolver);
    [ExtensionAttribute]
public static object Resolve(IDependencyResolver resolver, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<T> ResolveAll(IDependencyResolver resolver);
    [ExtensionAttribute]
public static IEnumerable`1<object> ResolveAll(IDependencyResolver resolver, Type type);
}
public static class Microsoft.AspNet.SignalR.GlobalHost : object {
    private static Lazy`1<IDependencyResolver> _defaultResolver;
    private static IDependencyResolver _resolver;
    [CompilerGeneratedAttribute]
private static Func`1<IDependencyResolver> CS$<>9__CachedAnonymousMethodDelegate1;
    public static IDependencyResolver DependencyResolver { get; public set; }
    public static IConfigurationManager Configuration { get; }
    public static IConnectionManager ConnectionManager { get; }
    public static ITraceManager TraceManager { get; }
    public static IHubPipeline HubPipeline { get; }
    private static GlobalHost();
    public static IDependencyResolver get_DependencyResolver();
    public static void set_DependencyResolver(IDependencyResolver value);
    public static IConfigurationManager get_Configuration();
    public static IConnectionManager get_ConnectionManager();
    public static ITraceManager get_TraceManager();
    public static IHubPipeline get_HubPipeline();
    [CompilerGeneratedAttribute]
private static IDependencyResolver <.cctor>b__0();
}
public class Microsoft.AspNet.SignalR.GroupManager : object {
    private IConnection _connection;
    private string _groupPrefix;
    public GroupManager(IConnection connection, string groupPrefix);
    public sealed virtual Task Send(string groupName, object value, String[] excludeConnectionIds);
    public sealed virtual Task Send(IList`1<string> groupNames, object value, String[] excludeConnectionIds);
    public sealed virtual Task Add(string connectionId, string groupName);
    public sealed virtual Task Remove(string connectionId, string groupName);
    private string CreateQualifiedName(string groupName);
    [CompilerGeneratedAttribute]
private string <Send>b__0(string groupName);
}
public class Microsoft.AspNet.SignalR.Hosting.HostContext : object {
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Environment>k__BackingField;
    public IRequest Request { get; private set; }
    public IResponse Response { get; private set; }
    public IDictionary`2<string, object> Environment { get; private set; }
    public HostContext(IRequest request, IResponse response);
    public HostContext(IDictionary`2<string, object> environment);
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IRequest value);
    [CompilerGeneratedAttribute]
public IResponse get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(IResponse value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IDictionary`2<string, object> value);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.Hosting.HostDependencyResolverExtensions : object {
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static void InitializeHost(IDependencyResolver resolver, string instanceName, CancellationToken hostShutdownToken);
    [ExtensionAttribute]
private static void InitializePerformanceCounters(IDependencyResolver resolver, string instanceName, CancellationToken hostShutdownToken);
    [ExtensionAttribute]
private static void InitializeResolverDispose(IDependencyResolver resolver, CancellationToken hostShutdownToken);
    [CompilerGeneratedAttribute]
private static void <InitializeResolverDispose>b__0(object state);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNet.SignalR.Hosting.INameValueCollection {
    public string Item { get; }
    public abstract virtual string get_Item(string key);
    public abstract virtual IEnumerable`1<string> GetValues(string key);
    public abstract virtual string Get(string key);
}
public interface Microsoft.AspNet.SignalR.Hosting.IResponse {
    public CancellationToken CancellationToken { get; }
    public int StatusCode { get; public set; }
    public string ContentType { get; public set; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual int get_StatusCode();
    public abstract virtual void set_StatusCode(int value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual void Write(ArraySegment`1<byte> data);
    public abstract virtual Task Flush();
}
internal interface Microsoft.AspNet.SignalR.Hosting.IWebSocket {
    public Action`1<string> OnMessage { get; public set; }
    public Action OnClose { get; public set; }
    public Action`1<Exception> OnError { get; public set; }
    public abstract virtual Action`1<string> get_OnMessage();
    public abstract virtual void set_OnMessage(Action`1<string> value);
    public abstract virtual Action get_OnClose();
    public abstract virtual void set_OnClose(Action value);
    public abstract virtual Action`1<Exception> get_OnError();
    public abstract virtual void set_OnError(Action`1<Exception> value);
    public abstract virtual Task Send(string value);
    public abstract virtual Task SendChunk(ArraySegment`1<byte> message);
    public abstract virtual Task Flush();
}
public class Microsoft.AspNet.SignalR.Hosting.PersistentConnectionFactory : object {
    private IDependencyResolver _resolver;
    public PersistentConnectionFactory(IDependencyResolver resolver);
    public PersistentConnection CreateInstance(Type connectionType);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.Hosting.ResponseExtensions : object {
    [ExtensionAttribute]
public static Task End(IResponse response, string data);
}
public abstract class Microsoft.AspNet.SignalR.Hub : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IHubCallerConnectionContext`1<object> <Clients>k__BackingField;
    [CompilerGeneratedAttribute]
private HubCallerContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IGroupManager <Groups>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IHubCallerConnectionContext`1<object> Clients { get; public set; }
    public HubCallerContext Context { get; public set; }
    public IGroupManager Groups { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IHubCallerConnectionContext`1<object> get_Clients();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Clients(IHubCallerConnectionContext`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual HubCallerContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(HubCallerContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IGroupManager get_Groups();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Groups(IGroupManager value);
    public virtual Task OnDisconnected(bool stopCalled);
    public virtual Task OnConnected();
    public virtual Task OnReconnected();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public abstract class Microsoft.AspNet.SignalR.Hub`1 : Hub {
    private IHubCallerConnectionContext`1<T> _testClients;
    public IHubCallerConnectionContext`1<T> Clients { get; public set; }
    public IHubCallerConnectionContext`1<T> get_Clients();
    public void set_Clients(IHubCallerConnectionContext`1<T> value);
}
public class Microsoft.AspNet.SignalR.HubConfiguration : ConnectionConfiguration {
    [CompilerGeneratedAttribute]
private bool <EnableJavaScriptProxies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDetailedErrors>k__BackingField;
    public bool EnableJavaScriptProxies { get; public set; }
    public bool EnableDetailedErrors { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableJavaScriptProxies();
    [CompilerGeneratedAttribute]
public void set_EnableJavaScriptProxies(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDetailedErrors();
    [CompilerGeneratedAttribute]
public void set_EnableDetailedErrors(bool value);
}
public class Microsoft.AspNet.SignalR.HubException : Exception {
    [CompilerGeneratedAttribute]
private object <ErrorData>k__BackingField;
    public object ErrorData { get; private set; }
    public HubException(string message);
    public HubException(string message, object errorData);
    [CompilerGeneratedAttribute]
public object get_ErrorData();
    [CompilerGeneratedAttribute]
private void set_ErrorData(object value);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.HubPipelineExtensions : object {
    [ExtensionAttribute]
public static void RequireAuthentication(IHubPipeline pipeline);
}
public class Microsoft.AspNet.SignalR.Hubs.AuthorizeModule : HubPipelineModule {
    private IAuthorizeHubConnection _globalConnectionAuthorizer;
    private IAuthorizeHubMethodInvocation _globalInvocationAuthorizer;
    private ConcurrentDictionary`2<Type, IEnumerable`1<IAuthorizeHubConnection>> _connectionAuthorizersCache;
    private ConcurrentDictionary`2<Type, IEnumerable`1<IAuthorizeHubMethodInvocation>> _classInvocationAuthorizersCache;
    private ConcurrentDictionary`2<MethodDescriptor, IEnumerable`1<IAuthorizeHubMethodInvocation>> _methodInvocationAuthorizersCache;
    public AuthorizeModule(IAuthorizeHubConnection globalConnectionAuthorizer, IAuthorizeHubMethodInvocation globalInvocationAuthorizer);
    public virtual Func`3<HubDescriptor, IRequest, bool> BuildAuthorizeConnect(Func`3<HubDescriptor, IRequest, bool> authorizeConnect);
    public virtual Func`2<IHubIncomingInvokerContext, Task`1<object>> BuildIncoming(Func`2<IHubIncomingInvokerContext, Task`1<object>> invoke);
}
public class Microsoft.AspNet.SignalR.Hubs.CallerStateProxy : DynamicObject {
    private StateChangeTracker _tracker;
    public CallerStateProxy(StateChangeTracker tracker);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
}
public class Microsoft.AspNet.SignalR.Hubs.ClientHubInvocation : object {
    [CompilerGeneratedAttribute]
private string <Hub>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <State>k__BackingField;
    [JsonPropertyAttribute("H")]
public string Hub { get; public set; }
    [JsonPropertyAttribute("M")]
public string Method { get; public set; }
    [JsonPropertyAttribute("A")]
public Object[] Args { get; public set; }
    [JsonPropertyAttribute("S")]
public IDictionary`2<string, object> State { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hub();
    [CompilerGeneratedAttribute]
public void set_Hub(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public Object[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(Object[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_State();
    [CompilerGeneratedAttribute]
public void set_State(IDictionary`2<string, object> value);
}
public class Microsoft.AspNet.SignalR.Hubs.ClientProxy : DynamicObject {
    private IHubPipelineInvoker _invoker;
    private IConnection _connection;
    private string _hubName;
    private string _signal;
    private IList`1<string> _exclude;
    public ClientProxy(IConnection connection, IHubPipelineInvoker invoker, string hubName, IList`1<string> exclude);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public sealed virtual Task Invoke(string method, Object[] args);
}
public class Microsoft.AspNet.SignalR.Hubs.ConnectionIdProxy : SignalProxy {
    public ConnectionIdProxy(IConnection connection, IHubPipelineInvoker invoker, string signal, string hubName, String[] exclude);
}
public class Microsoft.AspNet.SignalR.Hubs.DefaultAssemblyLocator : object {
    public virtual IList`1<Assembly> GetAssemblies();
}
public class Microsoft.AspNet.SignalR.Hubs.DefaultHubActivator : object {
    private IDependencyResolver _resolver;
    public DefaultHubActivator(IDependencyResolver resolver);
    public sealed virtual IHub Create(HubDescriptor descriptor);
}
public class Microsoft.AspNet.SignalR.Hubs.DefaultHubManager : object {
    private IEnumerable`1<IMethodDescriptorProvider> _methodProviders;
    private IHubActivator _activator;
    private IEnumerable`1<IHubDescriptorProvider> _hubProviders;
    [CompilerGeneratedAttribute]
private static Func`2<IHubDescriptorProvider, IEnumerable`1<HubDescriptor>> CS$<>9__CachedAnonymousMethodDelegate4;
    public DefaultHubManager(IDependencyResolver resolver);
    public sealed virtual HubDescriptor GetHub(string hubName);
    public sealed virtual IEnumerable`1<HubDescriptor> GetHubs(Func`2<HubDescriptor, bool> predicate);
    public sealed virtual MethodDescriptor GetHubMethod(string hubName, string method, IList`1<IJsonValue> parameters);
    public sealed virtual IEnumerable`1<MethodDescriptor> GetHubMethods(string hubName, Func`2<MethodDescriptor, bool> predicate);
    public sealed virtual IHub ResolveHub(string hubName);
    public sealed virtual IEnumerable`1<IHub> ResolveHubs();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<HubDescriptor> <GetHubs>b__3(IHubDescriptorProvider p);
    [CompilerGeneratedAttribute]
private IHub <ResolveHubs>b__b(HubDescriptor hub);
}
public class Microsoft.AspNet.SignalR.Hubs.DefaultJavaScriptProxyGenerator : object {
    private static string ScriptResource;
    private static Lazy`1<string> _templateFromResource;
    private static Type[] _numberTypes;
    private static Type[] _dateTypes;
    private IHubManager _manager;
    private IJavaScriptMinifier _javaScriptMinifier;
    private Lazy`1<string> _generatedTemplate;
    [CompilerGeneratedAttribute]
private static Func`2<HubDescriptor, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<MethodDescriptor, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, MethodDescriptor>, <>f__AnonymousType4`2<IGrouping`2<string, MethodDescriptor>, MethodDescriptor>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<IGrouping`2<string, MethodDescriptor>, MethodDescriptor>, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<IGrouping`2<string, MethodDescriptor>, MethodDescriptor>, MethodDescriptor> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<MethodDescriptor, int> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDescriptor, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDescriptor, string> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate14;
    public DefaultJavaScriptProxyGenerator(IDependencyResolver resolver);
    public DefaultJavaScriptProxyGenerator(IHubManager manager, IJavaScriptMinifier javaScriptMinifier);
    private static DefaultJavaScriptProxyGenerator();
    public sealed virtual string GenerateProxy(string serviceUrl);
    public string GenerateProxy(string serviceUrl, bool includeDocComments);
    private static string GenerateProxy(IHubManager hubManager, IJavaScriptMinifier javaScriptMinifier, bool includeDocComments);
    private static void GenerateType(IHubManager hubManager, StringBuilder sb, HubDescriptor descriptor, bool includeDocComments);
    private static string GetDescriptorName(Descriptor descriptor);
    private static IEnumerable`1<MethodDescriptor> GetMethods(IHubManager manager, HubDescriptor descriptor);
    private static void GenerateMethod(StringBuilder sb, MethodDescriptor method, bool includeDocComments, string hubName);
    private static string MapToJavaScriptType(Type type);
    private static string Commas(IEnumerable`1<string> values);
    private static string Commas(IEnumerable`1<T> values, Func`2<T, string> selector);
    private static string GetTemplateFromResource();
    private static string JavaScriptEncode(string value);
    [CompilerGeneratedAttribute]
private string <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static string <GenerateProxy>b__2(HubDescriptor h);
    [CompilerGeneratedAttribute]
private static string <GetMethods>b__5(MethodDescriptor method);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<IGrouping`2<string, MethodDescriptor>, MethodDescriptor> <GetMethods>b__6(IGrouping`2<string, MethodDescriptor> overloads);
    [CompilerGeneratedAttribute]
private static string <GetMethods>b__8(<>f__AnonymousType4`2<IGrouping`2<string, MethodDescriptor>, MethodDescriptor> <>h__TransparentIdentifier4);
    [CompilerGeneratedAttribute]
private static MethodDescriptor <GetMethods>b__9(<>f__AnonymousType4`2<IGrouping`2<string, MethodDescriptor>, MethodDescriptor> <>h__TransparentIdentifier4);
    [CompilerGeneratedAttribute]
private static int <GetMethods>b__7(MethodDescriptor overload);
    [CompilerGeneratedAttribute]
private static string <GenerateMethod>b__f(ParameterDescriptor p);
    [CompilerGeneratedAttribute]
private static string <GenerateMethod>b__10(ParameterDescriptor p);
    [CompilerGeneratedAttribute]
private static string <Commas>b__13(string v);
}
public class Microsoft.AspNet.SignalR.Hubs.DefaultParameterResolver : object {
    public virtual object ResolveParameter(ParameterDescriptor descriptor, IJsonValue value);
    public virtual IList`1<object> ResolveMethodParameters(MethodDescriptor method, IList`1<IJsonValue> values);
}
public abstract class Microsoft.AspNet.SignalR.Hubs.Descriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NameSpecified>k__BackingField;
    public string Name { get; public set; }
    public bool NameSpecified { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_NameSpecified();
    [CompilerGeneratedAttribute]
public virtual void set_NameSpecified(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNet.SignalR.Hubs.DynamicDictionary : DynamicObject {
    private IDictionary`2<string, object> _obj;
    public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public DynamicDictionary(IDictionary`2<string, object> obj);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public static object Wrap(object value);
    public static object Unwrap(object value);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNet.SignalR.Hubs.EmptyJavaScriptProxyGenerator : object {
    public sealed virtual string GenerateProxy(string serviceUrl);
}
public class Microsoft.AspNet.SignalR.Hubs.EnumerableOfAssemblyLocator : object {
    private IEnumerable`1<Assembly> _assemblies;
    public EnumerableOfAssemblyLocator(IEnumerable`1<Assembly> assemblies);
    public sealed virtual IList`1<Assembly> GetAssemblies();
}
public class Microsoft.AspNet.SignalR.Hubs.ExceptionContext : object {
    private object _result;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public Exception Error { get; public set; }
    public object Result { get; public set; }
    public ExceptionContext(Exception error);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
    public object get_Result();
    public void set_Result(object value);
}
public class Microsoft.AspNet.SignalR.Hubs.GroupProxy : SignalProxy {
    public GroupProxy(IConnection connection, IHubPipelineInvoker invoker, string signal, string hubName, IList`1<string> exclude);
}
public class Microsoft.AspNet.SignalR.Hubs.HubCallerContext : object {
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    public string ConnectionId { get; private set; }
    public IDictionary`2<string, Cookie> RequestCookies { get; }
    public INameValueCollection Headers { get; }
    public INameValueCollection QueryString { get; }
    public IPrincipal User { get; }
    public IRequest Request { get; private set; }
    public HubCallerContext(IRequest request, string connectionId);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
private void set_ConnectionId(string value);
    public virtual IDictionary`2<string, Cookie> get_RequestCookies();
    public virtual INameValueCollection get_Headers();
    public virtual INameValueCollection get_QueryString();
    public virtual IPrincipal get_User();
    [CompilerGeneratedAttribute]
public virtual IRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IRequest value);
}
public class Microsoft.AspNet.SignalR.Hubs.HubConnectionContext : HubConnectionContextBase {
    private string _connectionId;
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <Others>k__BackingField;
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <Caller>k__BackingField;
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <CallerState>k__BackingField;
    [DynamicAttribute]
public object Others { get; public set; }
    [DynamicAttribute]
public object Caller { get; public set; }
    [DynamicAttribute]
public object CallerState { get; public set; }
    public HubConnectionContext(IHubPipelineInvoker pipelineInvoker, IConnection connection, string hubName, string connectionId, StateChangeTracker tracker);
    [CompilerGeneratedAttribute]
public object get_Others();
    [CompilerGeneratedAttribute]
public void set_Others(object value);
    [CompilerGeneratedAttribute]
public object get_Caller();
    [CompilerGeneratedAttribute]
public void set_Caller(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_CallerState();
    [CompilerGeneratedAttribute]
public void set_CallerState(object value);
    public object OthersInGroup(string groupName);
    public object OthersInGroups(IList`1<string> groupNames);
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext<System.Object>.get_Caller();
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext<System.Object>.get_Others();
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext<System.Object>.OthersInGroup(string );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext<System.Object>.OthersInGroups(IList`1<string> );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.get_All();
}
public class Microsoft.AspNet.SignalR.Hubs.HubConnectionContextBase : object {
    [CompilerGeneratedAttribute]
private IHubPipelineInvoker <Invoker>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HubName>k__BackingField;
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <All>k__BackingField;
    protected IHubPipelineInvoker Invoker { get; private set; }
    protected IConnection Connection { get; private set; }
    protected string HubName { get; private set; }
    [DynamicAttribute]
public object All { get; public set; }
    public HubConnectionContextBase(IConnection connection, IHubPipelineInvoker invoker, string hubName);
    [CompilerGeneratedAttribute]
protected IHubPipelineInvoker get_Invoker();
    [CompilerGeneratedAttribute]
private void set_Invoker(IHubPipelineInvoker value);
    [CompilerGeneratedAttribute]
protected IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    [CompilerGeneratedAttribute]
protected string get_HubName();
    [CompilerGeneratedAttribute]
private void set_HubName(string value);
    [CompilerGeneratedAttribute]
public object get_All();
    [CompilerGeneratedAttribute]
public void set_All(object value);
    public object AllExcept(String[] excludeConnectionIds);
    public object Client(string connectionId);
    public object Clients(IList`1<string> connectionIds);
    public object Group(string groupName, String[] excludeConnectionIds);
    public object Groups(IList`1<string> groupNames, String[] excludeConnectionIds);
    public object User(string userId);
    public object Users(IList`1<string> userIds);
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.get_All();
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.AllExcept(String[] );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.Client(string );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.Clients(IList`1<string> );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.Group(string , String[] );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.Groups(IList`1<string> , String[] );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.User(string );
    private sealed virtual override object Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext<System.Object>.Users(IList`1<string> );
}
internal class Microsoft.AspNet.SignalR.Hubs.HubContext : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IHubConnectionContext`1<object> <Clients>k__BackingField;
    [CompilerGeneratedAttribute]
private IGroupManager <Groups>k__BackingField;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IHubConnectionContext`1<object> Clients { get; private set; }
    public IGroupManager Groups { get; private set; }
    public HubContext(IConnection connection, IHubPipelineInvoker invoker, string hubName);
    [CompilerGeneratedAttribute]
public sealed virtual IHubConnectionContext`1<object> get_Clients();
    [CompilerGeneratedAttribute]
private void set_Clients(IHubConnectionContext`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IGroupManager get_Groups();
    [CompilerGeneratedAttribute]
private void set_Groups(IGroupManager value);
    private sealed virtual override IHubConnectionContext`1<object> Microsoft.AspNet.SignalR.IHubContext<System.Object>.get_Clients();
}
internal class Microsoft.AspNet.SignalR.Hubs.HubContext`1 : object {
    [CompilerGeneratedAttribute]
private IHubConnectionContext`1<T> <Clients>k__BackingField;
    [CompilerGeneratedAttribute]
private IGroupManager <Groups>k__BackingField;
    public IHubConnectionContext`1<T> Clients { get; private set; }
    public IGroupManager Groups { get; private set; }
    public HubContext`1(IHubContext dynamicContext);
    [CompilerGeneratedAttribute]
public sealed virtual IHubConnectionContext`1<T> get_Clients();
    [CompilerGeneratedAttribute]
private void set_Clients(IHubConnectionContext`1<T> value);
    [CompilerGeneratedAttribute]
public sealed virtual IGroupManager get_Groups();
    [CompilerGeneratedAttribute]
private void set_Groups(IGroupManager value);
}
public class Microsoft.AspNet.SignalR.Hubs.HubDescriptor : Descriptor {
    [CompilerGeneratedAttribute]
private Type <HubType>k__BackingField;
    public Type HubType { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Type get_HubType();
    [CompilerGeneratedAttribute]
public virtual void set_HubType(Type value);
    public string CreateQualifiedName(string unqualifiedName);
}
public class Microsoft.AspNet.SignalR.Hubs.HubDispatcher : PersistentConnection {
    private static string HubsSuffix;
    private static string JsSuffix;
    private List`1<HubDescriptor> _hubs;
    private bool _enableJavaScriptProxies;
    private bool _enableDetailedErrors;
    private IJavaScriptProxyGenerator _proxyGenerator;
    private IHubManager _manager;
    private IHubRequestParser _requestParser;
    private JsonSerializer _serializer;
    private IParameterResolver _binder;
    private IHubPipelineInvoker _pipelineInvoker;
    private IPerformanceCounterManager _counters;
    private bool _isDebuggingEnabled;
    private static MethodInfo _continueWithMethod;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<string>, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<IHub, bool> CS$<>9__CachedAnonymousMethodDelegate3b;
    protected TraceSource Trace { get; }
    internal string GroupPrefix { get; }
    public HubDispatcher(HubConfiguration configuration);
    private static HubDispatcher();
    protected virtual TraceSource get_Trace();
    internal virtual string get_GroupPrefix();
    public virtual void Initialize(IDependencyResolver resolver);
    protected virtual bool AuthorizeRequest(IRequest request);
    protected virtual Task OnReceived(IRequest request, string connectionId, string data);
    private Task InvokeHubPipeline(IHub hub, IJsonValue[] parameterValues, MethodDescriptor methodDescriptor, HubRequest hubRequest, StateChangeTracker tracker);
    private static HubInvocationProgress GetProgressInstance(MethodDescriptor methodDescriptor, Func`2<object, Task> sendProgressFunc, TraceSource traceSource);
    public virtual Task ProcessRequest(HostContext context);
    internal static Task Connect(IHub hub);
    internal static Task Reconnect(IHub hub);
    internal static Task Disconnect(IHub hub, bool stopCalled);
    internal static Task`1<object> Incoming(IHubIncomingInvokerContext context);
    internal static Task Outgoing(IHubOutgoingInvokerContext context);
    protected virtual Task OnConnected(IRequest request, string connectionId);
    protected virtual Task OnReconnected(IRequest request, string connectionId);
    protected virtual IList`1<string> OnRejoiningGroups(IRequest request, IList`1<string> groups, string connectionId);
    protected virtual Task OnDisconnected(IRequest request, string connectionId, bool stopCalled);
    protected virtual IList`1<string> GetSignals(string userId, string connectionId);
    private Task ExecuteHubEvent(IRequest request, string connectionId, Func`2<IHub, Task> action);
    private IHub CreateHub(IRequest request, HubDescriptor descriptor, string connectionId, StateChangeTracker tracker, bool throwIfFailedToCreate);
    private IEnumerable`1<IHub> GetHubs(IRequest request, string connectionId);
    private static void DisposeHubs(IEnumerable`1<IHub> hubs);
    private Task SendProgressUpdate(string connectionId, StateChangeTracker tracker, object value, HubRequest request);
    private Task ProcessResponse(StateChangeTracker tracker, object result, HubRequest request, Exception error);
    private static void ContinueWith(Task`1<T> task, TaskCompletionSource`1<object> tcs);
    private static void ContinueSync(Task`1<T> task, TaskCompletionSource`1<object> tcs);
    private static void ContinueAsync(Task`1<T> task, TaskCompletionSource`1<object> tcs);
    [CompilerGeneratedAttribute]
private Task <OnConnected>b__1e(IHub hub);
    [CompilerGeneratedAttribute]
private Task <OnReconnected>b__1f(IHub hub);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <OnRejoiningGroups>b__24(IEnumerable`1<string> groupsToRejoin);
    [CompilerGeneratedAttribute]
private static bool <GetHubs>b__3a(IHub hub);
}
internal class Microsoft.AspNet.SignalR.Hubs.HubInvocationProgress : object {
    private static ConcurrentDictionary`2<Type, Func`2<Func`2<object, Task>, HubInvocationProgress>> _progressCreateCache;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _complete;
    private object _statusLocker;
    private Func`2<object, Task> _sendProgressFunc;
    [CompilerGeneratedAttribute]
private TraceSource <Trace>k__BackingField;
    private TraceSource Trace { get; private set; }
    protected HubInvocationProgress(Func`2<object, Task> sendProgressFunc);
    private static HubInvocationProgress();
    [CompilerGeneratedAttribute]
private TraceSource get_Trace();
    [CompilerGeneratedAttribute]
private void set_Trace(TraceSource value);
    public static HubInvocationProgress Create(Type progressGenericType, Func`2<object, Task> sendProgressFunc, TraceSource traceSource);
    public static HubInvocationProgress`1<T> Create(Func`2<object, Task> sendProgressFunc);
    public void SetComplete();
    protected void DoReport(object value);
}
internal class Microsoft.AspNet.SignalR.Hubs.HubInvocationProgress`1 : HubInvocationProgress {
    public HubInvocationProgress`1(Func`2<object, Task> sendProgressFunc);
    public sealed virtual void Report(T value);
}
internal class Microsoft.AspNet.SignalR.Hubs.HubInvokerContext : object {
    [CompilerGeneratedAttribute]
private IHub <Hub>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodDescriptor <MethodDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private StateChangeTracker <StateTracker>k__BackingField;
    public IHub Hub { get; private set; }
    public MethodDescriptor MethodDescriptor { get; private set; }
    public IList`1<object> Args { get; private set; }
    public StateChangeTracker StateTracker { get; private set; }
    public HubInvokerContext(IHub hub, StateChangeTracker tracker, MethodDescriptor methodDescriptor, IList`1<object> args);
    [CompilerGeneratedAttribute]
public sealed virtual IHub get_Hub();
    [CompilerGeneratedAttribute]
private void set_Hub(IHub value);
    [CompilerGeneratedAttribute]
public sealed virtual MethodDescriptor get_MethodDescriptor();
    [CompilerGeneratedAttribute]
private void set_MethodDescriptor(MethodDescriptor value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<object> get_Args();
    [CompilerGeneratedAttribute]
private void set_Args(IList`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual StateChangeTracker get_StateTracker();
    [CompilerGeneratedAttribute]
private void set_StateTracker(StateChangeTracker value);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.Hubs.HubManagerExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<HubDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<MethodDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static HubDescriptor EnsureHub(IHubManager hubManager, string hubName, IPerformanceCounter[] counters);
    [ExtensionAttribute]
public static IEnumerable`1<HubDescriptor> GetHubs(IHubManager hubManager);
    [ExtensionAttribute]
public static IEnumerable`1<MethodDescriptor> GetHubMethods(IHubManager hubManager, string hubName);
    [CompilerGeneratedAttribute]
private static bool <GetHubs>b__0(HubDescriptor d);
    [CompilerGeneratedAttribute]
private static bool <GetHubMethods>b__2(MethodDescriptor m);
}
internal class Microsoft.AspNet.SignalR.Hubs.HubMethodDispatcher : object {
    private HubMethodExecutor _executor;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; private set; }
    public HubMethodDispatcher(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
    public object Execute(IHub hub, Object[] parameters);
    private static HubMethodExecutor GetExecutor(MethodInfo methodInfo);
    private static HubMethodExecutor WrapVoidAction(VoidHubMethodExecutor executor);
}
[AttributeUsageAttribute("64")]
public class Microsoft.AspNet.SignalR.Hubs.HubMethodNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string MethodName { get; private set; }
    public HubMethodNameAttribute(string methodName);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.AspNet.SignalR.Hubs.HubNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <HubName>k__BackingField;
    public string HubName { get; private set; }
    public HubNameAttribute(string hubName);
    [CompilerGeneratedAttribute]
public string get_HubName();
    [CompilerGeneratedAttribute]
private void set_HubName(string value);
}
internal class Microsoft.AspNet.SignalR.Hubs.HubOutgoingInvokerContext : object {
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientHubInvocation <Invocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Signals>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExcludedSignals>k__BackingField;
    public IConnection Connection { get; private set; }
    public ClientHubInvocation Invocation { get; private set; }
    public string Signal { get; private set; }
    public IList`1<string> Signals { get; private set; }
    public IList`1<string> ExcludedSignals { get; public set; }
    public HubOutgoingInvokerContext(IConnection connection, string signal, ClientHubInvocation invocation);
    public HubOutgoingInvokerContext(IConnection connection, IList`1<string> signals, ClientHubInvocation invocation);
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    [CompilerGeneratedAttribute]
public sealed virtual ClientHubInvocation get_Invocation();
    [CompilerGeneratedAttribute]
private void set_Invocation(ClientHubInvocation value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Signal();
    [CompilerGeneratedAttribute]
private void set_Signal(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_Signals();
    [CompilerGeneratedAttribute]
private void set_Signals(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_ExcludedSignals();
    [CompilerGeneratedAttribute]
public void set_ExcludedSignals(IList`1<string> value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Hubs.HubOutgoingInvokerContextExtensions : object {
    [ExtensionAttribute]
public static ConnectionMessage GetConnectionMessage(IHubOutgoingInvokerContext context);
}
internal class Microsoft.AspNet.SignalR.Hubs.HubPipeline : object {
    private Stack`1<IHubPipelineModule> _modules;
    private Lazy`1<ComposedPipeline> _pipeline;
    private ComposedPipeline Pipeline { get; }
    public sealed virtual IHubPipeline AddModule(IHubPipelineModule pipelineModule);
    private ComposedPipeline get_Pipeline();
    public sealed virtual Task`1<object> Invoke(IHubIncomingInvokerContext context);
    public sealed virtual Task Connect(IHub hub);
    public sealed virtual Task Reconnect(IHub hub);
    public sealed virtual Task Disconnect(IHub hub, bool stopCalled);
    public sealed virtual bool AuthorizeConnect(HubDescriptor hubDescriptor, IRequest request);
    public sealed virtual IList`1<string> RejoiningGroups(HubDescriptor hubDescriptor, IRequest request, IList`1<string> groups);
    public sealed virtual Task Send(IHubOutgoingInvokerContext context);
    [CompilerGeneratedAttribute]
private ComposedPipeline <.ctor>b__0();
}
public abstract class Microsoft.AspNet.SignalR.Hubs.HubPipelineModule : object {
    public virtual Func`2<IHubIncomingInvokerContext, Task`1<object>> BuildIncoming(Func`2<IHubIncomingInvokerContext, Task`1<object>> invoke);
    public virtual Func`2<IHub, Task> BuildConnect(Func`2<IHub, Task> connect);
    public virtual Func`2<IHub, Task> BuildReconnect(Func`2<IHub, Task> reconnect);
    public virtual Func`3<IHub, bool, Task> BuildDisconnect(Func`3<IHub, bool, Task> disconnect);
    public virtual Func`3<HubDescriptor, IRequest, bool> BuildAuthorizeConnect(Func`3<HubDescriptor, IRequest, bool> authorizeConnect);
    public virtual Func`4<HubDescriptor, IRequest, IList`1<string>, IList`1<string>> BuildRejoiningGroups(Func`4<HubDescriptor, IRequest, IList`1<string>, IList`1<string>> rejoiningGroups);
    public virtual Func`2<IHubOutgoingInvokerContext, Task> BuildOutgoing(Func`2<IHubOutgoingInvokerContext, Task> send);
    protected virtual bool OnBeforeAuthorizeConnect(HubDescriptor hubDescriptor, IRequest request);
    protected virtual bool OnBeforeConnect(IHub hub);
    protected virtual void OnAfterConnect(IHub hub);
    protected virtual bool OnBeforeReconnect(IHub hub);
    protected virtual void OnAfterReconnect(IHub hub);
    protected virtual bool OnBeforeOutgoing(IHubOutgoingInvokerContext context);
    protected virtual void OnAfterOutgoing(IHubOutgoingInvokerContext context);
    protected virtual bool OnBeforeDisconnect(IHub hub, bool stopCalled);
    protected virtual void OnAfterDisconnect(IHub hub, bool stopCalled);
    protected virtual bool OnBeforeIncoming(IHubIncomingInvokerContext context);
    protected virtual object OnAfterIncoming(object result, IHubIncomingInvokerContext context);
    protected virtual void OnIncomingError(ExceptionContext exceptionContext, IHubIncomingInvokerContext invokerContext);
}
public class Microsoft.AspNet.SignalR.Hubs.HubRequest : object {
    [CompilerGeneratedAttribute]
private string <Hub>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonValue[] <ParameterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Hub { get; public set; }
    public string Method { get; public set; }
    public IJsonValue[] ParameterValues { get; public set; }
    public IDictionary`2<string, object> State { get; public set; }
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hub();
    [CompilerGeneratedAttribute]
public void set_Hub(string value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public IJsonValue[] get_ParameterValues();
    [CompilerGeneratedAttribute]
public void set_ParameterValues(IJsonValue[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_State();
    [CompilerGeneratedAttribute]
public void set_State(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
}
internal class Microsoft.AspNet.SignalR.Hubs.HubRequestParser : object {
    private static IJsonValue[] _emptyArgs;
    [CompilerGeneratedAttribute]
private static Func`2<JRaw, JRawValue> CS$<>9__CachedAnonymousMethodDelegate1;
    private static HubRequestParser();
    public sealed virtual HubRequest Parse(string data, JsonSerializer serializer);
    private static IDictionary`2<string, object> GetState(HubInvocation deserializedData);
    [CompilerGeneratedAttribute]
private static JRawValue <Parse>b__0(JRaw value);
}
public class Microsoft.AspNet.SignalR.Hubs.HubResponse : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsHubException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ErrorData>k__BackingField;
    [JsonPropertyAttribute("S")]
public IDictionary`2<string, object> State { get; public set; }
    [JsonPropertyAttribute("R")]
public object Result { get; public set; }
    [JsonPropertyAttribute("I")]
public string Id { get; public set; }
    [JsonPropertyAttribute("P")]
public object Progress { get; public set; }
    [JsonPropertyAttribute("H")]
public Nullable`1<bool> IsHubException { get; public set; }
    [JsonPropertyAttribute("E")]
public string Error { get; public set; }
    [JsonPropertyAttribute("T")]
public string StackTrace { get; public set; }
    [JsonPropertyAttribute("D")]
public object ErrorData { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_State();
    [CompilerGeneratedAttribute]
public void set_State(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public object get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHubException();
    [CompilerGeneratedAttribute]
public void set_IsHubException(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public object get_ErrorData();
    [CompilerGeneratedAttribute]
public void set_ErrorData(object value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Hubs.HubTypeExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<HubNameAttribute, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
internal static string GetHubName(Type type);
    [ExtensionAttribute]
internal static string GetHubAttributeName(Type type);
    private static string GetHubTypeName(Type type);
    [CompilerGeneratedAttribute]
private static string <GetHubAttributeName>b__0(HubNameAttribute attr);
}
public interface Microsoft.AspNet.SignalR.Hubs.IAssemblyLocator {
    public abstract virtual IList`1<Assembly> GetAssemblies();
}
public interface Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubConnection {
    public abstract virtual bool AuthorizeHubConnection(HubDescriptor hubDescriptor, IRequest request);
}
public interface Microsoft.AspNet.SignalR.Hubs.IAuthorizeHubMethodInvocation {
    public abstract virtual bool AuthorizeHubMethodInvocation(IHubIncomingInvokerContext hubIncomingInvokerContext, bool appliesToMethod);
}
public interface Microsoft.AspNet.SignalR.Hubs.IClientProxy {
    public abstract virtual Task Invoke(string method, Object[] args);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHub {
    public HubCallerContext Context { get; public set; }
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IHubCallerConnectionContext`1<object> Clients { get; public set; }
    public IGroupManager Groups { get; public set; }
    public abstract virtual HubCallerContext get_Context();
    public abstract virtual void set_Context(HubCallerContext value);
    public abstract virtual IHubCallerConnectionContext`1<object> get_Clients();
    public abstract virtual void set_Clients(IHubCallerConnectionContext`1<object> value);
    public abstract virtual IGroupManager get_Groups();
    public abstract virtual void set_Groups(IGroupManager value);
    public abstract virtual Task OnConnected();
    public abstract virtual Task OnReconnected();
    public abstract virtual Task OnDisconnected(bool stopCalled);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubActivator {
    public abstract virtual IHub Create(HubDescriptor descriptor);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubCallerConnectionContext`1 {
    public T Caller { get; }
    [DynamicAttribute]
public object CallerState { get; }
    public T Others { get; }
    public abstract virtual T get_Caller();
    public abstract virtual object get_CallerState();
    public abstract virtual T get_Others();
    public abstract virtual T OthersInGroup(string groupName);
    public abstract virtual T OthersInGroups(IList`1<string> groupNames);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubConnectionContext`1 {
    public T All { get; }
    public abstract virtual T get_All();
    public abstract virtual T AllExcept(String[] excludeConnectionIds);
    public abstract virtual T Client(string connectionId);
    public abstract virtual T Clients(IList`1<string> connectionIds);
    public abstract virtual T Group(string groupName, String[] excludeConnectionIds);
    public abstract virtual T Groups(IList`1<string> groupNames, String[] excludeConnectionIds);
    public abstract virtual T User(string userId);
    public abstract virtual T Users(IList`1<string> userIds);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubDescriptorProvider {
    public abstract virtual IList`1<HubDescriptor> GetHubs();
    public abstract virtual bool TryGetHub(string hubName, HubDescriptor& descriptor);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubIncomingInvokerContext {
    public IHub Hub { get; }
    public MethodDescriptor MethodDescriptor { get; }
    public IList`1<object> Args { get; }
    public StateChangeTracker StateTracker { get; }
    public abstract virtual IHub get_Hub();
    public abstract virtual MethodDescriptor get_MethodDescriptor();
    public abstract virtual IList`1<object> get_Args();
    public abstract virtual StateChangeTracker get_StateTracker();
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubManager {
    public abstract virtual HubDescriptor GetHub(string hubName);
    public abstract virtual IEnumerable`1<HubDescriptor> GetHubs(Func`2<HubDescriptor, bool> predicate);
    public abstract virtual IHub ResolveHub(string hubName);
    public abstract virtual IEnumerable`1<IHub> ResolveHubs();
    public abstract virtual MethodDescriptor GetHubMethod(string hubName, string method, IList`1<IJsonValue> parameters);
    public abstract virtual IEnumerable`1<MethodDescriptor> GetHubMethods(string hubName, Func`2<MethodDescriptor, bool> predicate);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubOutgoingInvokerContext {
    public IConnection Connection { get; }
    public ClientHubInvocation Invocation { get; }
    public string Signal { get; }
    public IList`1<string> Signals { get; }
    public IList`1<string> ExcludedSignals { get; }
    public abstract virtual IConnection get_Connection();
    public abstract virtual ClientHubInvocation get_Invocation();
    public abstract virtual string get_Signal();
    public abstract virtual IList`1<string> get_Signals();
    public abstract virtual IList`1<string> get_ExcludedSignals();
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubPipeline {
    public abstract virtual IHubPipeline AddModule(IHubPipelineModule pipelineModule);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubPipelineInvoker {
    public abstract virtual Task`1<object> Invoke(IHubIncomingInvokerContext context);
    public abstract virtual Task Send(IHubOutgoingInvokerContext context);
    public abstract virtual Task Connect(IHub hub);
    public abstract virtual Task Reconnect(IHub hub);
    public abstract virtual Task Disconnect(IHub hub, bool stopCalled);
    public abstract virtual bool AuthorizeConnect(HubDescriptor hubDescriptor, IRequest request);
    public abstract virtual IList`1<string> RejoiningGroups(HubDescriptor hubDescriptor, IRequest request, IList`1<string> groups);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubPipelineModule {
    public abstract virtual Func`2<IHubIncomingInvokerContext, Task`1<object>> BuildIncoming(Func`2<IHubIncomingInvokerContext, Task`1<object>> invoke);
    public abstract virtual Func`2<IHubOutgoingInvokerContext, Task> BuildOutgoing(Func`2<IHubOutgoingInvokerContext, Task> send);
    public abstract virtual Func`2<IHub, Task> BuildConnect(Func`2<IHub, Task> connect);
    public abstract virtual Func`2<IHub, Task> BuildReconnect(Func`2<IHub, Task> reconnect);
    public abstract virtual Func`3<IHub, bool, Task> BuildDisconnect(Func`3<IHub, bool, Task> disconnect);
    public abstract virtual Func`3<HubDescriptor, IRequest, bool> BuildAuthorizeConnect(Func`3<HubDescriptor, IRequest, bool> authorizeConnect);
    public abstract virtual Func`4<HubDescriptor, IRequest, IList`1<string>, IList`1<string>> BuildRejoiningGroups(Func`4<HubDescriptor, IRequest, IList`1<string>, IList`1<string>> rejoiningGroups);
}
public interface Microsoft.AspNet.SignalR.Hubs.IHubRequestParser {
    public abstract virtual HubRequest Parse(string data, JsonSerializer serializer);
}
public interface Microsoft.AspNet.SignalR.Hubs.IJavaScriptMinifier {
    public abstract virtual string Minify(string source);
}
public interface Microsoft.AspNet.SignalR.Hubs.IJavaScriptProxyGenerator {
    public abstract virtual string GenerateProxy(string serviceUrl);
}
public interface Microsoft.AspNet.SignalR.Hubs.IMethodDescriptorProvider {
    public abstract virtual IEnumerable`1<MethodDescriptor> GetMethods(HubDescriptor hub);
    public abstract virtual bool TryGetMethod(HubDescriptor hub, string method, MethodDescriptor& descriptor, IList`1<IJsonValue> parameters);
}
public interface Microsoft.AspNet.SignalR.Hubs.IParameterResolver {
    public abstract virtual IList`1<object> ResolveMethodParameters(MethodDescriptor method, IList`1<IJsonValue> values);
}
public class Microsoft.AspNet.SignalR.Hubs.MethodDescriptor : Descriptor {
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private HubDescriptor <Hub>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ParameterDescriptor> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProgressReportingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IHub, Object[], object> <Invoker>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Attribute> <Attributes>k__BackingField;
    public Type ReturnType { get; public set; }
    public HubDescriptor Hub { get; public set; }
    public IList`1<ParameterDescriptor> Parameters { get; public set; }
    public Type ProgressReportingType { get; public set; }
    public Func`3<IHub, Object[], object> Invoker { get; public set; }
    public IEnumerable`1<Attribute> Attributes { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Type get_ReturnType();
    [CompilerGeneratedAttribute]
public virtual void set_ReturnType(Type value);
    [CompilerGeneratedAttribute]
public virtual HubDescriptor get_Hub();
    [CompilerGeneratedAttribute]
public virtual void set_Hub(HubDescriptor value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ParameterDescriptor> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual void set_Parameters(IList`1<ParameterDescriptor> value);
    [CompilerGeneratedAttribute]
public Type get_ProgressReportingType();
    [CompilerGeneratedAttribute]
public void set_ProgressReportingType(Type value);
    [CompilerGeneratedAttribute]
public virtual Func`3<IHub, Object[], object> get_Invoker();
    [CompilerGeneratedAttribute]
public virtual void set_Invoker(Func`3<IHub, Object[], object> value);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<Attribute> get_Attributes();
    [CompilerGeneratedAttribute]
public virtual void set_Attributes(IEnumerable`1<Attribute> value);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.Hubs.MethodExtensions : object {
    [ExtensionAttribute]
public static bool Matches(MethodDescriptor methodDescriptor, IList`1<IJsonValue> parameters);
}
public class Microsoft.AspNet.SignalR.Hubs.MultipleSignalProxy : DynamicObject {
    private IConnection _connection;
    private IHubPipelineInvoker _invoker;
    private IList`1<string> _exclude;
    private IList`1<string> _signals;
    private string _hubName;
    public MultipleSignalProxy(IConnection connection, IHubPipelineInvoker invoker, IList`1<string> signals, string hubName, string prefix, IList`1<string> exclude);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public sealed virtual Task Invoke(string method, Object[] args);
    protected virtual ClientHubInvocation GetInvocationData(string method, Object[] args);
}
public class Microsoft.AspNet.SignalR.Hubs.NotAuthorizedException : Exception {
    public NotAuthorizedException(string message);
    public NotAuthorizedException(string message, Exception inner);
    protected NotAuthorizedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.AspNet.SignalR.Hubs.NullClientProxy : DynamicObject {
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
}
public class Microsoft.AspNet.SignalR.Hubs.NullJavaScriptMinifier : object {
    public static NullJavaScriptMinifier Instance;
    private static NullJavaScriptMinifier();
    public sealed virtual string Minify(string source);
}
public class Microsoft.AspNet.SignalR.Hubs.NullMethodDescriptor : MethodDescriptor {
    private static IEnumerable`1<Attribute> _attributes;
    private static IList`1<ParameterDescriptor> _parameters;
    private string _methodName;
    private IEnumerable`1<MethodDescriptor> _availableMethods;
    [CompilerGeneratedAttribute]
private static Func`2<MethodDescriptor, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDescriptor, string> CS$<>9__CachedAnonymousMethodDelegate4;
    public Func`3<IHub, Object[], object> Invoker { get; }
    public IList`1<ParameterDescriptor> Parameters { get; }
    public IEnumerable`1<Attribute> Attributes { get; }
    public NullMethodDescriptor(HubDescriptor descriptor, string methodName, IEnumerable`1<MethodDescriptor> availableMethods);
    private static NullMethodDescriptor();
    public virtual Func`3<IHub, Object[], object> get_Invoker();
    private IEnumerable`1<string> GetAvailableMethodSignatures();
    public virtual IList`1<ParameterDescriptor> get_Parameters();
    public virtual IEnumerable`1<Attribute> get_Attributes();
    [CompilerGeneratedAttribute]
private object <get_Invoker>b__0(IHub emptyHub, Object[] emptyParameters);
    [CompilerGeneratedAttribute]
private static string <GetAvailableMethodSignatures>b__1(MethodDescriptor m);
    [CompilerGeneratedAttribute]
private static string <GetAvailableMethodSignatures>b__2(ParameterDescriptor p);
}
public class Microsoft.AspNet.SignalR.Hubs.ParameterDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    public string Name { get; public set; }
    public Type ParameterType { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterType(Type value);
}
public class Microsoft.AspNet.SignalR.Hubs.ReflectedHubDescriptorProvider : object {
    private Lazy`1<IDictionary`2<string, HubDescriptor>> _hubs;
    private Lazy`1<IAssemblyLocator> _locator;
    private TraceSource _trace;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, HubDescriptor>, HubDescriptor> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Type, HubDescriptor> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public ReflectedHubDescriptorProvider(IDependencyResolver resolver);
    public sealed virtual IList`1<HubDescriptor> GetHubs();
    public sealed virtual bool TryGetHub(string hubName, HubDescriptor& descriptor);
    protected IDictionary`2<string, HubDescriptor> BuildHubsCache();
    private static bool IsHubType(Type type);
    private IEnumerable`1<Type> GetTypesSafe(Assembly a);
    [CompilerGeneratedAttribute]
private static HubDescriptor <GetHubs>b__0(KeyValuePair`2<string, HubDescriptor> kv);
    [CompilerGeneratedAttribute]
private static HubDescriptor <BuildHubsCache>b__3(Type type);
    [CompilerGeneratedAttribute]
private static bool <GetTypesSafe>b__5(Type t);
}
public class Microsoft.AspNet.SignalR.Hubs.ReflectedMethodDescriptorProvider : object {
    private ConcurrentDictionary`2<string, IDictionary`2<string, IEnumerable`1<MethodDescriptor>>> _methods;
    private ConcurrentDictionary`2<string, MethodDescriptor> _executableMethods;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, IEnumerable`1<MethodDescriptor>>, IEnumerable`1<MethodDescriptor>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, MethodInfo>, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, ParameterDescriptor> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<HubMethodNameAttribute, string> CS$<>9__CachedAnonymousMethodDelegate16;
    public sealed virtual IEnumerable`1<MethodDescriptor> GetMethods(HubDescriptor hub);
    private IDictionary`2<string, IEnumerable`1<MethodDescriptor>> FetchMethodsFor(HubDescriptor hub);
    private static IDictionary`2<string, IEnumerable`1<MethodDescriptor>> BuildMethodCacheFor(HubDescriptor hub);
    private static MethodDescriptor GetMethodDescriptor(string methodName, HubDescriptor hub, MethodInfo methodInfo);
    private static IEnumerable`1<ParameterInfo> ExtractProgressParameter(ParameterInfo[] parameters, Type& progressReportingType);
    private static bool IsProgressType(ParameterInfo parameter);
    public sealed virtual bool TryGetMethod(HubDescriptor hub, string method, MethodDescriptor& descriptor, IList`1<IJsonValue> parameters);
    private static string BuildHubExecutableMethodCacheKey(HubDescriptor hub, string method, IList`1<IJsonValue> parameters);
    private static string GetMethodName(MethodInfo method);
    private static string GetMethodAttributeName(MethodInfo method);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<MethodDescriptor> <GetMethods>b__0(KeyValuePair`2<string, IEnumerable`1<MethodDescriptor>> kv);
    [CompilerGeneratedAttribute]
private static string <BuildMethodCacheFor>b__5(IGrouping`2<string, MethodInfo> group);
    [CompilerGeneratedAttribute]
private static ParameterDescriptor <GetMethodDescriptor>b__f(ParameterInfo p);
    [CompilerGeneratedAttribute]
private static string <GetMethodAttributeName>b__15(HubMethodNameAttribute a);
}
public static class Microsoft.AspNet.SignalR.Hubs.ReflectionHelper : object {
    private static Type[] _excludeTypes;
    private static Type[] _excludeInterfaces;
    private static ReflectionHelper();
    public static IEnumerable`1<MethodInfo> GetExportedHubMethods(Type type);
    private static bool IsValidHubMethod(MethodInfo methodInfo);
    private static IEnumerable`1<MethodInfo> GetInterfaceMethods(Type type, Type iface);
    public static TResult GetAttributeValue(ICustomAttributeProvider source, Func`2<TAttribute, TResult> valueGetter);
}
public abstract class Microsoft.AspNet.SignalR.Hubs.SignalProxy : DynamicObject {
    private IList`1<string> _exclude;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IHubPipelineInvoker <Invoker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HubName>k__BackingField;
    protected IConnection Connection { get; private set; }
    protected IHubPipelineInvoker Invoker { get; private set; }
    protected string Signal { get; private set; }
    protected string HubName { get; private set; }
    protected SignalProxy(IConnection connection, IHubPipelineInvoker invoker, string signal, string hubName, string prefix, IList`1<string> exclude);
    [CompilerGeneratedAttribute]
protected IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    [CompilerGeneratedAttribute]
protected IHubPipelineInvoker get_Invoker();
    [CompilerGeneratedAttribute]
private void set_Invoker(IHubPipelineInvoker value);
    [CompilerGeneratedAttribute]
protected string get_Signal();
    [CompilerGeneratedAttribute]
private void set_Signal(string value);
    [CompilerGeneratedAttribute]
protected string get_HubName();
    [CompilerGeneratedAttribute]
private void set_HubName(string value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public sealed virtual Task Invoke(string method, Object[] args);
    protected virtual ClientHubInvocation GetInvocationData(string method, Object[] args);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNet.SignalR.Hubs.StateChangeTracker : object {
    private IDictionary`2<string, object> _values;
    private IDictionary`2<string, object> _oldValues;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<string, object>, object>, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<string, object>, object>, <>f__AnonymousType3`2<string, object>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<string, object>, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<string, object>, object> CS$<>9__CachedAnonymousMethodDelegateb;
    public object Item { get; public set; }
    public StateChangeTracker(IDictionary`2<string, object> values);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public IDictionary`2<string, object> GetChanges();
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<string, object> <GetChanges>b__2(string key);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType2`2<<>f__AnonymousType1`2<string, object>, object> <GetChanges>b__3(<>f__AnonymousType1`2<string, object> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static bool <GetChanges>b__4(<>f__AnonymousType2`2<<>f__AnonymousType1`2<string, object>, object> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3`2<string, object> <GetChanges>b__5(<>f__AnonymousType2`2<<>f__AnonymousType1`2<string, object>, object> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private static string <GetChanges>b__6(<>f__AnonymousType3`2<string, object> p);
    [CompilerGeneratedAttribute]
private static object <GetChanges>b__7(<>f__AnonymousType3`2<string, object> p);
}
public class Microsoft.AspNet.SignalR.Hubs.StatefulSignalProxy : SignalProxy {
    private StateChangeTracker _tracker;
    public StatefulSignalProxy(IConnection connection, IHubPipelineInvoker invoker, string signal, string hubName, string prefix, StateChangeTracker tracker);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    protected virtual ClientHubInvocation GetInvocationData(string method, Object[] args);
}
internal static class Microsoft.AspNet.SignalR.Hubs.TypedClientBuilder`1 : object {
    private static string ClientModuleName;
    private static Lazy`1<Func`2<IClientProxy, T>> _builder;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`1<Func`2<IClientProxy, T>> CS$<>9__CachedAnonymousMethodDelegate14;
    private static TypedClientBuilder`1();
    public static T Build(IClientProxy proxy);
    public static void Validate();
    private static Func`2<IClientProxy, T> GenerateClientBuilder();
    private static Type GenerateInterfaceImplementation(ModuleBuilder moduleBuilder);
    private static IEnumerable`1<MethodInfo> GetAllInterfaceMethods(Type interfaceType);
    private static void BuildConstructor(TypeBuilder type, FieldInfo proxyField);
    private static void BuildMethod(TypeBuilder type, MethodInfo interfaceMethodInfo, FieldInfo proxyField);
    private static void VerifyInterface(Type interfaceType);
    private static void VerifyMethod(Type interfaceType, MethodInfo interfaceMethod);
    private static void VerifyParameter(Type interfaceType, MethodInfo interfaceMethod, ParameterInfo parameter);
    [CompilerGeneratedAttribute]
private static Type <BuildMethod>b__11(ParameterInfo param);
    [CompilerGeneratedAttribute]
private static Func`2<IClientProxy, T> <.cctor>b__13();
}
public class Microsoft.AspNet.SignalR.Hubs.TypedHubCallerConnectionContext`1 : TypedHubConnectionContext`1<T> {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IHubCallerConnectionContext`1<object> _dynamicContext;
    public T Caller { get; }
    [DynamicAttribute]
public object CallerState { get; }
    public T Others { get; }
    public TypedHubCallerConnectionContext`1(IHubCallerConnectionContext`1<object> dynamicContext);
    public sealed virtual T get_Caller();
    public sealed virtual object get_CallerState();
    public sealed virtual T get_Others();
    public sealed virtual T OthersInGroup(string groupName);
    public sealed virtual T OthersInGroups(IList`1<string> groupNames);
}
public class Microsoft.AspNet.SignalR.Hubs.TypedHubConnectionContext`1 : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IHubConnectionContext`1<object> _dynamicContext;
    public T All { get; }
    public TypedHubConnectionContext`1(IHubConnectionContext`1<object> dynamicContext);
    public sealed virtual T get_All();
    public sealed virtual T AllExcept(String[] excludeConnectionIds);
    public sealed virtual T Client(string connectionId);
    public sealed virtual T Clients(IList`1<string> connectionIds);
    public sealed virtual T Group(string groupName, String[] excludeConnectionIds);
    public sealed virtual T Groups(IList`1<string> groupNames, String[] excludeConnectionIds);
    public sealed virtual T User(string userId);
    public sealed virtual T Users(IList`1<string> userIds);
}
public class Microsoft.AspNet.SignalR.Hubs.UserProxy : SignalProxy {
    public UserProxy(IConnection connection, IHubPipelineInvoker invoker, string signal, string hubName);
}
public interface Microsoft.AspNet.SignalR.IConnection {
    public string DefaultSignal { get; }
    public abstract virtual string get_DefaultSignal();
    public abstract virtual Task Send(ConnectionMessage message);
}
public interface Microsoft.AspNet.SignalR.IConnectionGroupManager {
    public abstract virtual Task Send(string groupName, object value, String[] excludeConnectionIds);
    public abstract virtual Task Send(IList`1<string> groupNames, object value, String[] excludeConnectionIds);
}
public interface Microsoft.AspNet.SignalR.IDependencyResolver {
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerable`1<object> GetServices(Type serviceType);
    public abstract virtual void Register(Type serviceType, Func`1<object> activator);
    public abstract virtual void Register(Type serviceType, IEnumerable`1<Func`1<object>> activators);
}
public interface Microsoft.AspNet.SignalR.IGroupManager {
    public abstract virtual Task Add(string connectionId, string groupName);
    public abstract virtual Task Remove(string connectionId, string groupName);
}
public interface Microsoft.AspNet.SignalR.IHubContext {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IHubConnectionContext`1<object> Clients { get; }
    public IGroupManager Groups { get; }
    public abstract virtual IHubConnectionContext`1<object> get_Clients();
    public abstract virtual IGroupManager get_Groups();
}
public interface Microsoft.AspNet.SignalR.IHubContext`1 {
    public IHubConnectionContext`1<T> Clients { get; }
    public IGroupManager Groups { get; }
    public abstract virtual IHubConnectionContext`1<T> get_Clients();
    public abstract virtual IGroupManager get_Groups();
}
public class Microsoft.AspNet.SignalR.Infrastructure.AckHandler : object {
    private ConcurrentDictionary`2<string, AckInfo> _acks;
    private TimeSpan _ackThreshold;
    private Timer _timer;
    [CompilerGeneratedAttribute]
private static Func`2<string, AckInfo> CS$<>9__CachedAnonymousMethodDelegate3;
    public AckHandler(bool completeAcksOnTimeout, TimeSpan ackThreshold, TimeSpan ackInterval);
    public sealed virtual Task CreateAck(string id);
    public sealed virtual bool TriggerAck(string id);
    private void CheckAcks();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object _);
    [CompilerGeneratedAttribute]
private static AckInfo <CreateAck>b__2(string _);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.AckSubscriber : object {
    private static int MaxMessages;
    public static string Signal;
    private IMessageBus _messageBus;
    private IAckHandler _ackHandler;
    private IDisposable _subscription;
    private static String[] ServerSignals;
    [CompilerGeneratedAttribute]
private Action`1<TextWriter> <WriteCursor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private Subscription <Subscription>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`2<object, Message> CS$<>9__CachedAnonymousMethodDelegate3;
    public IList`1<string> EventKeys { get; }
    public Action`1<TextWriter> WriteCursor { get; public set; }
    public string Identity { get; private set; }
    public Subscription Subscription { get; public set; }
    public AckSubscriber(IDependencyResolver resolver);
    public AckSubscriber(IMessageBus messageBus, IAckHandler ackHandler);
    private static AckSubscriber();
    public sealed virtual IList`1<string> get_EventKeys();
    public sealed virtual void add_EventKeyAdded(Action`2<ISubscriber, string> value);
    public sealed virtual void remove_EventKeyAdded(Action`2<ISubscriber, string> value);
    public sealed virtual void add_EventKeyRemoved(Action`2<ISubscriber, string> value);
    public sealed virtual void remove_EventKeyRemoved(Action`2<ISubscriber, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<TextWriter> get_WriteCursor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WriteCursor(Action`1<TextWriter> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Subscription get_Subscription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Subscription(Subscription value);
    public sealed virtual void Dispose();
    private void ProcessMessages();
    private Task`1<bool> TriggerAcks(MessageResult result, object state);
    [CompilerGeneratedAttribute]
private static bool <TriggerAcks>b__0(Message m);
    [CompilerGeneratedAttribute]
private static void <TriggerAcks>b__1(object s, Message m);
}
public class Microsoft.AspNet.SignalR.Infrastructure.ArraySegmentTextReader : TextReader {
    private ArraySegment`1<byte> _buffer;
    private Encoding _encoding;
    private int _offset;
    public ArraySegmentTextReader(ArraySegment`1<byte> buffer, Encoding encoding);
    public virtual int Read(Char[] buffer, int index, int count);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.BinaryTextWriter : BufferTextWriter {
    [CompilerGeneratedAttribute]
private static Action`2<ArraySegment`1<byte>, object> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`2<ArraySegment`1<byte>, object> CS$<>9__CachedAnonymousMethodDelegate7;
    public BinaryTextWriter(IResponse response);
    public BinaryTextWriter(IWebSocket socket);
    public BinaryTextWriter(Action`2<ArraySegment`1<byte>, object> write, object state, bool reuseBuffers, int bufferSize);
    public sealed virtual void Write(ArraySegment`1<byte> data);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__4(ArraySegment`1<byte> data, object state);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__6(ArraySegment`1<byte> data, object state);
}
internal abstract class Microsoft.AspNet.SignalR.Infrastructure.BufferTextWriter : TextWriter {
    private Encoding _encoding;
    private Action`2<ArraySegment`1<byte>, object> _write;
    private object _writeState;
    private bool _reuseBuffers;
    private ChunkedWriter _writer;
    private int _bufferSize;
    [CompilerGeneratedAttribute]
private static Action`2<ArraySegment`1<byte>, object> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`2<ArraySegment`1<byte>, object> CS$<>9__CachedAnonymousMethodDelegate3;
    protected internal ChunkedWriter Writer { get; }
    public Encoding Encoding { get; }
    public BufferTextWriter(IResponse response);
    public BufferTextWriter(IWebSocket socket);
    protected BufferTextWriter(Action`2<ArraySegment`1<byte>, object> write, object state, bool reuseBuffers, int bufferSize);
    protected internal ChunkedWriter get_Writer();
    public virtual Encoding get_Encoding();
    public virtual void Write(string value);
    public virtual void WriteLine(string value);
    public virtual void Write(char value);
    public virtual void Flush();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(ArraySegment`1<byte> data, object state);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(ArraySegment`1<byte> data, object state);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.ByteBuffer : object {
    private int _currentLength;
    private Nullable`1<int> _maxLength;
    private List`1<Byte[]> _segments;
    public ByteBuffer(Nullable`1<int> maxLength);
    public void Append(Byte[] segment);
    public Byte[] GetByteArray();
    public string GetString();
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Infrastructure.CancellationTokenExtensions : object {
    private static RegisterDelegate _tokenRegister;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static RegisterDelegate CS$<>9__CachedAnonymousMethodDelegate5;
    private static CancellationTokenExtensions();
    [ExtensionAttribute]
public static IDisposable SafeRegister(CancellationToken cancellationToken, Action`1<object> callback, object state);
    private static void InvokeCallback(object state);
    private static void Dispose(object state);
    private static RegisterDelegate ResolveRegisterDelegate();
    [CompilerGeneratedAttribute]
private static void <SafeRegister>b__0(object s);
    [CompilerGeneratedAttribute]
private static void <SafeRegister>b__1(object s);
    [CompilerGeneratedAttribute]
private static CancellationTokenRegistration <ResolveRegisterDelegate>b__4(CancellationToken& token, Action`1<object> callback, object state);
}
public class Microsoft.AspNet.SignalR.Infrastructure.Connection : object {
    private IMessageBus _bus;
    private JsonSerializer _serializer;
    private string _baseSignal;
    private string _connectionId;
    private IList`1<string> _signals;
    private DiffSet`1<string> _groups;
    private IPerformanceCounterManager _counters;
    private bool _aborted;
    private bool _initializing;
    private TraceSource _traceSource;
    private IAckHandler _ackHandler;
    private IProtectedData _protectedData;
    private Func`2<Message, bool> _excludeMessage;
    private Action`2<ISubscriber, string> EventKeyAdded;
    private Action`2<ISubscriber, string> EventKeyRemoved;
    [CompilerGeneratedAttribute]
private Action`1<TextWriter> <WriteCursor>k__BackingField;
    [CompilerGeneratedAttribute]
private Subscription <Subscription>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Task, Task> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Action`2<ArraySegment`1<byte>, object> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`3<MessageResult, object, Task`1<bool>> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action`2<Connection, Message> CS$<>9__CachedAnonymousMethodDelegatec;
    public string DefaultSignal { get; }
    private IList`1<string> Microsoft.AspNet.SignalR.Messaging.ISubscriber.EventKeys { get; }
    public Action`1<TextWriter> WriteCursor { get; public set; }
    public string Identity { get; }
    private TraceSource Trace { get; }
    public Subscription Subscription { get; public set; }
    public Connection(IMessageBus newMessageBus, JsonSerializer jsonSerializer, string baseSignal, string connectionId, IList`1<string> signals, IList`1<string> groups, ITraceManager traceManager, IAckHandler ackHandler, IPerformanceCounterManager performanceCounterManager, IProtectedData protectedData);
    public sealed virtual string get_DefaultSignal();
    private sealed virtual override IList`1<string> Microsoft.AspNet.SignalR.Messaging.ISubscriber.get_EventKeys();
    public sealed virtual void add_EventKeyAdded(Action`2<ISubscriber, string> value);
    public sealed virtual void remove_EventKeyAdded(Action`2<ISubscriber, string> value);
    public sealed virtual void add_EventKeyRemoved(Action`2<ISubscriber, string> value);
    public sealed virtual void remove_EventKeyRemoved(Action`2<ISubscriber, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<TextWriter> get_WriteCursor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WriteCursor(Action`1<TextWriter> value);
    public sealed virtual string get_Identity();
    private TraceSource get_Trace();
    [CompilerGeneratedAttribute]
public sealed virtual Subscription get_Subscription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Subscription(Subscription value);
    public sealed virtual Task Send(ConnectionMessage message);
    private Task MultiSend(IList`1<string> signals, object value, IList`1<string> excludedSignals);
    private static string GetFilter(IList`1<string> excludedSignals);
    private Message CreateMessage(string key, object value);
    private ArraySegment`1<byte> GetMessageBuffer(object value);
    private ArraySegment`1<byte> SerializeMessageValue(object value);
    public sealed virtual IDisposable Receive(string messageId, Func`3<PersistentResponse, object, Task`1<bool>> callback, int maxMessages, object state);
    private static Task`1<bool> MessageBusCallback(MessageResult result, object state);
    private PersistentResponse GetResponse(MessageResult result);
    private bool ExcludeMessage(Message message);
    private void ProcessResults(MessageResult result);
    private static void ProcessResultsCore(Connection connection, Message message);
    private void ProcessCommand(Command command);
    private void PopulateResponseState(PersistentResponse response);
    internal static void PopulateResponseState(PersistentResponse response, DiffSet`1<string> groupSet, JsonSerializer serializer, IProtectedData protectedData, string connectionId);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0(Message m);
    [CompilerGeneratedAttribute]
private static Task <Send>b__2(Task task);
    [CompilerGeneratedAttribute]
private static void <SerializeMessageValue>b__4(ArraySegment`1<byte> buffer, object state);
    [CompilerGeneratedAttribute]
private static Task`1<bool> <Receive>b__6(MessageResult result, object s);
    [CompilerGeneratedAttribute]
private bool <ExcludeMessage>b__8(string signal);
    [CompilerGeneratedAttribute]
private static bool <ProcessResults>b__9(Message message);
    [CompilerGeneratedAttribute]
private static void <ProcessResults>b__a(Connection connection, Message message);
}
public class Microsoft.AspNet.SignalR.Infrastructure.ConnectionManager : object {
    private IDependencyResolver _resolver;
    private IPerformanceCounterManager _counters;
    public ConnectionManager(IDependencyResolver resolver);
    public sealed virtual IPersistentConnectionContext GetConnectionContext();
    public IPersistentConnectionContext GetConnection(Type type);
    public sealed virtual IHubContext GetHubContext();
    public sealed virtual IHubContext GetHubContext(string hubName);
    public sealed virtual IHubContext`1<TClient> GetHubContext();
    public sealed virtual IHubContext`1<TClient> GetHubContext(string hubName);
    internal Connection GetConnectionCore(string connectionName);
}
public class Microsoft.AspNet.SignalR.Infrastructure.DataProtectionProviderProtectedData : object {
    private static UTF8Encoding _encoding;
    private IDataProtectionProvider _provider;
    private IDataProtector _connectionTokenProtector;
    private IDataProtector _groupsProtector;
    public DataProtectionProviderProtectedData(IDataProtectionProvider provider);
    private static DataProtectionProviderProtectedData();
    public sealed virtual string Protect(string data, string purpose);
    public sealed virtual string Unprotect(string protectedValue, string purpose);
    private IDataProtector GetDataProtector(string purpose);
}
public class Microsoft.AspNet.SignalR.Infrastructure.DefaultProtectedData : object {
    private static UTF8Encoding _encoding;
    private static DefaultProtectedData();
    public sealed virtual string Protect(string data, string purpose);
    public sealed virtual string Unprotect(string protectedValue, string purpose);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.DiffPair`1 : ValueType {
    public ICollection`1<T> Added;
    public ICollection`1<T> Removed;
    public bool AnyChanges { get; }
    public bool get_AnyChanges();
}
internal class Microsoft.AspNet.SignalR.Infrastructure.DiffSet`1 : object {
    private HashSet`1<T> _items;
    private HashSet`1<T> _addedItems;
    private HashSet`1<T> _removedItems;
    public DiffSet`1(IEnumerable`1<T> items);
    public bool Add(T item);
    public bool Remove(T item);
    public bool Contains(T item);
    public ICollection`1<T> GetSnapshot();
    public bool DetectChanges();
}
internal class Microsoft.AspNet.SignalR.Infrastructure.DisposableAction : object {
    public static DisposableAction Empty;
    private Action`1<object> _action;
    private object _state;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate5;
    public DisposableAction(Action action);
    public DisposableAction(Action`1<object> action, object state);
    private static DisposableAction();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object state);
    [CompilerGeneratedAttribute]
private static void <Dispose>b__2(object state);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4();
}
internal class Microsoft.AspNet.SignalR.Infrastructure.Disposer : object {
    private static object _disposedSentinel;
    private object _disposable;
    private static Disposer();
    public void Set(IDisposable disposable);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Infrastructure.ExceptionsExtensions : object {
    [ExtensionAttribute]
internal static Exception Unwrap(Exception ex);
}
public interface Microsoft.AspNet.SignalR.Infrastructure.IAckHandler {
    public abstract virtual Task CreateAck(string id);
    public abstract virtual bool TriggerAck(string id);
}
public interface Microsoft.AspNet.SignalR.Infrastructure.IBinaryWriter {
    public abstract virtual void Write(ArraySegment`1<byte> data);
}
public interface Microsoft.AspNet.SignalR.Infrastructure.IConnectionManager {
    public abstract virtual IHubContext GetHubContext();
    public abstract virtual IHubContext GetHubContext(string hubName);
    public abstract virtual IHubContext`1<TClient> GetHubContext();
    public abstract virtual IHubContext`1<TClient> GetHubContext(string hubName);
    public abstract virtual IPersistentConnectionContext GetConnectionContext();
}
public static class Microsoft.AspNet.SignalR.Infrastructure.InterlockedHelper : object {
    public static bool CompareExchangeOr(Int32& location, int value, int comparandA, int comparandB);
}
public interface Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounter {
    public string CounterName { get; }
    public long RawValue { get; public set; }
    public abstract virtual string get_CounterName();
    public abstract virtual long Decrement();
    public abstract virtual long Increment();
    public abstract virtual long IncrementBy(long value);
    public abstract virtual CounterSample NextSample();
    public abstract virtual long get_RawValue();
    public abstract virtual void set_RawValue(long value);
    public abstract virtual void Close();
    public abstract virtual void RemoveInstance();
}
public interface Microsoft.AspNet.SignalR.Infrastructure.IPerformanceCounterManager {
    public IPerformanceCounter ConnectionsConnected { get; }
    public IPerformanceCounter ConnectionsReconnected { get; }
    public IPerformanceCounter ConnectionsDisconnected { get; }
    public IPerformanceCounter ConnectionsCurrentForeverFrame { get; }
    public IPerformanceCounter ConnectionsCurrentLongPolling { get; }
    public IPerformanceCounter ConnectionsCurrentServerSentEvents { get; }
    public IPerformanceCounter ConnectionsCurrentWebSockets { get; }
    public IPerformanceCounter ConnectionsCurrent { get; }
    public IPerformanceCounter ConnectionMessagesReceivedTotal { get; }
    public IPerformanceCounter ConnectionMessagesSentTotal { get; }
    public IPerformanceCounter ConnectionMessagesReceivedPerSec { get; }
    public IPerformanceCounter ConnectionMessagesSentPerSec { get; }
    public IPerformanceCounter MessageBusMessagesReceivedTotal { get; }
    public IPerformanceCounter MessageBusMessagesReceivedPerSec { get; }
    public IPerformanceCounter ScaleoutMessageBusMessagesReceivedPerSec { get; }
    public IPerformanceCounter MessageBusMessagesPublishedTotal { get; }
    public IPerformanceCounter MessageBusMessagesPublishedPerSec { get; }
    public IPerformanceCounter MessageBusSubscribersCurrent { get; }
    public IPerformanceCounter MessageBusSubscribersTotal { get; }
    public IPerformanceCounter MessageBusSubscribersPerSec { get; }
    public IPerformanceCounter MessageBusAllocatedWorkers { get; }
    public IPerformanceCounter MessageBusBusyWorkers { get; }
    public IPerformanceCounter MessageBusTopicsCurrent { get; }
    public IPerformanceCounter ErrorsAllTotal { get; }
    public IPerformanceCounter ErrorsAllPerSec { get; }
    public IPerformanceCounter ErrorsHubResolutionTotal { get; }
    public IPerformanceCounter ErrorsHubResolutionPerSec { get; }
    public IPerformanceCounter ErrorsHubInvocationTotal { get; }
    public IPerformanceCounter ErrorsHubInvocationPerSec { get; }
    public IPerformanceCounter ErrorsTransportTotal { get; }
    public IPerformanceCounter ErrorsTransportPerSec { get; }
    public IPerformanceCounter ScaleoutStreamCountTotal { get; }
    public IPerformanceCounter ScaleoutStreamCountOpen { get; }
    public IPerformanceCounter ScaleoutStreamCountBuffering { get; }
    public IPerformanceCounter ScaleoutErrorsTotal { get; }
    public IPerformanceCounter ScaleoutErrorsPerSec { get; }
    public IPerformanceCounter ScaleoutSendQueueLength { get; }
    public abstract virtual void Initialize(string instanceName, CancellationToken hostShutdownToken);
    public abstract virtual IPerformanceCounter LoadCounter(string categoryName, string counterName, string instanceName, bool isReadOnly);
    public abstract virtual IPerformanceCounter get_ConnectionsConnected();
    public abstract virtual IPerformanceCounter get_ConnectionsReconnected();
    public abstract virtual IPerformanceCounter get_ConnectionsDisconnected();
    public abstract virtual IPerformanceCounter get_ConnectionsCurrentForeverFrame();
    public abstract virtual IPerformanceCounter get_ConnectionsCurrentLongPolling();
    public abstract virtual IPerformanceCounter get_ConnectionsCurrentServerSentEvents();
    public abstract virtual IPerformanceCounter get_ConnectionsCurrentWebSockets();
    public abstract virtual IPerformanceCounter get_ConnectionsCurrent();
    public abstract virtual IPerformanceCounter get_ConnectionMessagesReceivedTotal();
    public abstract virtual IPerformanceCounter get_ConnectionMessagesSentTotal();
    public abstract virtual IPerformanceCounter get_ConnectionMessagesReceivedPerSec();
    public abstract virtual IPerformanceCounter get_ConnectionMessagesSentPerSec();
    public abstract virtual IPerformanceCounter get_MessageBusMessagesReceivedTotal();
    public abstract virtual IPerformanceCounter get_MessageBusMessagesReceivedPerSec();
    public abstract virtual IPerformanceCounter get_ScaleoutMessageBusMessagesReceivedPerSec();
    public abstract virtual IPerformanceCounter get_MessageBusMessagesPublishedTotal();
    public abstract virtual IPerformanceCounter get_MessageBusMessagesPublishedPerSec();
    public abstract virtual IPerformanceCounter get_MessageBusSubscribersCurrent();
    public abstract virtual IPerformanceCounter get_MessageBusSubscribersTotal();
    public abstract virtual IPerformanceCounter get_MessageBusSubscribersPerSec();
    public abstract virtual IPerformanceCounter get_MessageBusAllocatedWorkers();
    public abstract virtual IPerformanceCounter get_MessageBusBusyWorkers();
    public abstract virtual IPerformanceCounter get_MessageBusTopicsCurrent();
    public abstract virtual IPerformanceCounter get_ErrorsAllTotal();
    public abstract virtual IPerformanceCounter get_ErrorsAllPerSec();
    public abstract virtual IPerformanceCounter get_ErrorsHubResolutionTotal();
    public abstract virtual IPerformanceCounter get_ErrorsHubResolutionPerSec();
    public abstract virtual IPerformanceCounter get_ErrorsHubInvocationTotal();
    public abstract virtual IPerformanceCounter get_ErrorsHubInvocationPerSec();
    public abstract virtual IPerformanceCounter get_ErrorsTransportTotal();
    public abstract virtual IPerformanceCounter get_ErrorsTransportPerSec();
    public abstract virtual IPerformanceCounter get_ScaleoutStreamCountTotal();
    public abstract virtual IPerformanceCounter get_ScaleoutStreamCountOpen();
    public abstract virtual IPerformanceCounter get_ScaleoutStreamCountBuffering();
    public abstract virtual IPerformanceCounter get_ScaleoutErrorsTotal();
    public abstract virtual IPerformanceCounter get_ScaleoutErrorsPerSec();
    public abstract virtual IPerformanceCounter get_ScaleoutSendQueueLength();
}
public interface Microsoft.AspNet.SignalR.Infrastructure.IProtectedData {
    public abstract virtual string Protect(string data, string purpose);
    public abstract virtual string Unprotect(string protectedValue, string purpose);
}
public interface Microsoft.AspNet.SignalR.Infrastructure.IStringMinifier {
    public abstract virtual string Minify(string value);
    public abstract virtual string Unminify(string value);
    public abstract virtual void RemoveUnminified(string value);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.ListHelper`1 : object {
    public static IList`1<T> Empty;
    private static ListHelper`1();
}
internal static class Microsoft.AspNet.SignalR.Infrastructure.MonoUtility : object {
    private static Lazy`1<bool> _isRunningMono;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate1;
    internal static bool IsRunningMono { get; }
    private static MonoUtility();
    internal static bool get_IsRunningMono();
    private static bool CheckRunningOnMono();
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__0();
}
internal class Microsoft.AspNet.SignalR.Infrastructure.NoOpPerformanceCounter : object {
    public string CounterName { get; }
    public long RawValue { get; public set; }
    public sealed virtual string get_CounterName();
    public sealed virtual long Decrement();
    public sealed virtual long Increment();
    public sealed virtual long IncrementBy(long value);
    public sealed virtual long get_RawValue();
    public sealed virtual void set_RawValue(long value);
    public sealed virtual void Close();
    public sealed virtual void RemoveInstance();
    public sealed virtual CounterSample NextSample();
}
[AttributeUsageAttribute("128")]
internal class Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceCounterType <CounterType>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public PerformanceCounterType CounterType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public PerformanceCounterType get_CounterType();
    [CompilerGeneratedAttribute]
public void set_CounterType(PerformanceCounterType value);
}
public class Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterManager : object {
    public static string CategoryName;
    private static PropertyInfo[] _counterProperties;
    private static IPerformanceCounter _noOpCounter;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _initialized;
    private object _initLocker;
    private TraceSource _trace;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsReconnected>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsDisconnected>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsCurrentForeverFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsCurrentLongPolling>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsCurrentServerSentEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsCurrentWebSockets>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionsCurrent>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionMessagesReceivedTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionMessagesSentTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionMessagesReceivedPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ConnectionMessagesSentPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusMessagesReceivedTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusMessagesReceivedPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ScaleoutMessageBusMessagesReceivedPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusMessagesPublishedTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusMessagesPublishedPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusSubscribersCurrent>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusSubscribersTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusSubscribersPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusAllocatedWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusBusyWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <MessageBusTopicsCurrent>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsAllTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsAllPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsHubResolutionTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsHubResolutionPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsHubInvocationTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsHubInvocationPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsTransportTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ErrorsTransportPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ScaleoutStreamCountTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ScaleoutStreamCountOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ScaleoutStreamCountBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ScaleoutErrorsTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ScaleoutErrorsPerSec>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <ScaleoutSendQueueLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsConnected { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsReconnected { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsDisconnected { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsCurrentForeverFrame { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsCurrentLongPolling { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsCurrentServerSentEvents { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsCurrentWebSockets { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionsCurrent { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionMessagesReceivedTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionMessagesSentTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionMessagesReceivedPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ConnectionMessagesSentPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusMessagesReceivedTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusMessagesReceivedPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ScaleoutMessageBusMessagesReceivedPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusMessagesPublishedTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusMessagesPublishedPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusSubscribersCurrent { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusSubscribersTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusSubscribersPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusAllocatedWorkers { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusBusyWorkers { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter MessageBusTopicsCurrent { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsAllTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsAllPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsHubResolutionTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsHubResolutionPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsHubInvocationTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsHubInvocationPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsTransportTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ErrorsTransportPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ScaleoutStreamCountTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ScaleoutStreamCountOpen { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ScaleoutStreamCountBuffering { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ScaleoutErrorsTotal { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ScaleoutErrorsPerSec { get; private set; }
    [PerformanceCounterAttribute]
public IPerformanceCounter ScaleoutSendQueueLength { get; private set; }
    internal string InstanceName { get; private set; }
    public PerformanceCounterManager(DefaultDependencyResolver resolver);
    public PerformanceCounterManager(ITraceManager traceManager);
    private static PerformanceCounterManager();
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsConnected();
    [CompilerGeneratedAttribute]
private void set_ConnectionsConnected(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsReconnected();
    [CompilerGeneratedAttribute]
private void set_ConnectionsReconnected(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsDisconnected();
    [CompilerGeneratedAttribute]
private void set_ConnectionsDisconnected(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsCurrentForeverFrame();
    [CompilerGeneratedAttribute]
private void set_ConnectionsCurrentForeverFrame(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsCurrentLongPolling();
    [CompilerGeneratedAttribute]
private void set_ConnectionsCurrentLongPolling(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsCurrentServerSentEvents();
    [CompilerGeneratedAttribute]
private void set_ConnectionsCurrentServerSentEvents(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsCurrentWebSockets();
    [CompilerGeneratedAttribute]
private void set_ConnectionsCurrentWebSockets(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionsCurrent();
    [CompilerGeneratedAttribute]
private void set_ConnectionsCurrent(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionMessagesReceivedTotal();
    [CompilerGeneratedAttribute]
private void set_ConnectionMessagesReceivedTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionMessagesSentTotal();
    [CompilerGeneratedAttribute]
private void set_ConnectionMessagesSentTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionMessagesReceivedPerSec();
    [CompilerGeneratedAttribute]
private void set_ConnectionMessagesReceivedPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ConnectionMessagesSentPerSec();
    [CompilerGeneratedAttribute]
private void set_ConnectionMessagesSentPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusMessagesReceivedTotal();
    [CompilerGeneratedAttribute]
private void set_MessageBusMessagesReceivedTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusMessagesReceivedPerSec();
    [CompilerGeneratedAttribute]
private void set_MessageBusMessagesReceivedPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ScaleoutMessageBusMessagesReceivedPerSec();
    [CompilerGeneratedAttribute]
private void set_ScaleoutMessageBusMessagesReceivedPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusMessagesPublishedTotal();
    [CompilerGeneratedAttribute]
private void set_MessageBusMessagesPublishedTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusMessagesPublishedPerSec();
    [CompilerGeneratedAttribute]
private void set_MessageBusMessagesPublishedPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusSubscribersCurrent();
    [CompilerGeneratedAttribute]
private void set_MessageBusSubscribersCurrent(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusSubscribersTotal();
    [CompilerGeneratedAttribute]
private void set_MessageBusSubscribersTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusSubscribersPerSec();
    [CompilerGeneratedAttribute]
private void set_MessageBusSubscribersPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusAllocatedWorkers();
    [CompilerGeneratedAttribute]
private void set_MessageBusAllocatedWorkers(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusBusyWorkers();
    [CompilerGeneratedAttribute]
private void set_MessageBusBusyWorkers(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_MessageBusTopicsCurrent();
    [CompilerGeneratedAttribute]
private void set_MessageBusTopicsCurrent(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsAllTotal();
    [CompilerGeneratedAttribute]
private void set_ErrorsAllTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsAllPerSec();
    [CompilerGeneratedAttribute]
private void set_ErrorsAllPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsHubResolutionTotal();
    [CompilerGeneratedAttribute]
private void set_ErrorsHubResolutionTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsHubResolutionPerSec();
    [CompilerGeneratedAttribute]
private void set_ErrorsHubResolutionPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsHubInvocationTotal();
    [CompilerGeneratedAttribute]
private void set_ErrorsHubInvocationTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsHubInvocationPerSec();
    [CompilerGeneratedAttribute]
private void set_ErrorsHubInvocationPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsTransportTotal();
    [CompilerGeneratedAttribute]
private void set_ErrorsTransportTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ErrorsTransportPerSec();
    [CompilerGeneratedAttribute]
private void set_ErrorsTransportPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ScaleoutStreamCountTotal();
    [CompilerGeneratedAttribute]
private void set_ScaleoutStreamCountTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ScaleoutStreamCountOpen();
    [CompilerGeneratedAttribute]
private void set_ScaleoutStreamCountOpen(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ScaleoutStreamCountBuffering();
    [CompilerGeneratedAttribute]
private void set_ScaleoutStreamCountBuffering(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ScaleoutErrorsTotal();
    [CompilerGeneratedAttribute]
private void set_ScaleoutErrorsTotal(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ScaleoutErrorsPerSec();
    [CompilerGeneratedAttribute]
private void set_ScaleoutErrorsPerSec(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceCounter get_ScaleoutSendQueueLength();
    [CompilerGeneratedAttribute]
private void set_ScaleoutSendQueueLength(IPerformanceCounter value);
    [CompilerGeneratedAttribute]
internal string get_InstanceName();
    [CompilerGeneratedAttribute]
private void set_InstanceName(string value);
    public sealed virtual void Initialize(string instanceName, CancellationToken hostShutdownToken);
    private void UnloadCounters();
    private void InitNoOpCounters();
    private void SetCounterProperties();
    internal static PropertyInfo[] GetCounterPropertyInfo();
    internal static PerformanceCounterAttribute GetPerformanceCounterAttribute(PropertyInfo property);
    private static string SanitizeInstanceName(string instanceName);
    private IPerformanceCounter LoadCounter(string categoryName, string counterName, bool isReadOnly);
    public sealed virtual IPerformanceCounter LoadCounter(string categoryName, string counterName, string instanceName, bool isReadOnly);
    [CompilerGeneratedAttribute]
private static bool <UnloadCounters>b__2(PropertyInfo p);
    [CompilerGeneratedAttribute]
private static bool <GetCounterPropertyInfo>b__4(PropertyInfo p);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.PerformanceCounterWrapper : object {
    private PerformanceCounter _counter;
    public string CounterName { get; }
    public long RawValue { get; public set; }
    public PerformanceCounterWrapper(PerformanceCounter counter);
    public sealed virtual string get_CounterName();
    public sealed virtual long get_RawValue();
    public sealed virtual void set_RawValue(long value);
    public sealed virtual long Decrement();
    public sealed virtual long Increment();
    public sealed virtual long IncrementBy(long value);
    public sealed virtual void Close();
    public sealed virtual void RemoveInstance();
    public sealed virtual CounterSample NextSample();
}
internal class Microsoft.AspNet.SignalR.Infrastructure.PersistentConnectionContext : object {
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionGroupManager <Groups>k__BackingField;
    public IConnection Connection { get; private set; }
    public IConnectionGroupManager Groups { get; private set; }
    public PersistentConnectionContext(IConnection connection, IConnectionGroupManager groupManager);
    [CompilerGeneratedAttribute]
public sealed virtual IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    [CompilerGeneratedAttribute]
public sealed virtual IConnectionGroupManager get_Groups();
    [CompilerGeneratedAttribute]
private void set_Groups(IConnectionGroupManager value);
}
internal static class Microsoft.AspNet.SignalR.Infrastructure.PrefixHelper : object {
    internal static string HubPrefix;
    internal static string HubGroupPrefix;
    internal static string HubConnectionIdPrefix;
    internal static string HubUserPrefix;
    internal static string PersistentConnectionPrefix;
    internal static string PersistentConnectionGroupPrefix;
    internal static string ConnectionIdPrefix;
    public static bool HasGroupPrefix(string value);
    public static string GetConnectionId(string connectionId);
    public static string GetHubConnectionId(string connectionId);
    public static string GetHubName(string connectionId);
    public static string GetHubGroupName(string groupName);
    public static string GetHubUserId(string userId);
    public static string GetPersistentConnectionGroupName(string groupName);
    public static string GetPersistentConnectionName(string connectionName);
    public static IList`1<string> GetPrefixedConnectionIds(IList`1<string> connectionIds);
    public static IEnumerable`1<string> RemoveGroupPrefixes(IEnumerable`1<string> groups);
    public static string RemoveGroupPrefix(string name);
}
public class Microsoft.AspNet.SignalR.Infrastructure.PrincipalUserIdProvider : object {
    public sealed virtual string GetUserId(IRequest request);
}
public class Microsoft.AspNet.SignalR.Infrastructure.ProtocolResolver : object {
    private static string ProtocolQueryParameter;
    private Version _minSupportedProtocol;
    private Version _maxSupportedProtocol;
    private Version _minimumDelayedStartVersion;
    public ProtocolResolver(Version min, Version max);
    public Version Resolve(IRequest request);
    public bool SupportsDelayedStart(IRequest request);
}
public static class Microsoft.AspNet.SignalR.Infrastructure.Purposes : object {
    public static string ConnectionToken;
    public static string Groups;
}
internal class Microsoft.AspNet.SignalR.Infrastructure.SafeCancellationTokenSource : object {
    private CancellationTokenSource _cts;
    private int _state;
    [CompilerGeneratedAttribute]
private CancellationToken <Token>k__BackingField;
    public CancellationToken Token { get; private set; }
    [CompilerGeneratedAttribute]
public CancellationToken get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(CancellationToken value);
    public void Cancel(bool useNewThread);
    private void CancelCore();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <Cancel>b__0(object _);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.SafeSet`1 : object {
    private ConcurrentDictionary`2<T, object> _items;
    [CompilerGeneratedAttribute]
private static Func`2<T, KeyValuePair`2<T, object>> CS$<>9__CachedAnonymousMethodDelegate1;
    public long Count { get; }
    public SafeSet`1(IEqualityComparer`1<T> comparer);
    public SafeSet`1(IEnumerable`1<T> items);
    public ICollection`1<T> GetSnapshot();
    public bool Contains(T item);
    public bool Add(T item);
    public bool Remove(T item);
    public bool Any();
    public long get_Count();
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<T, object> <.ctor>b__0(T x);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.SipHashBasedStringEqualityComparer : object {
    private static RNGCryptoServiceProvider _rng;
    private ulong _k0;
    private ulong _k1;
    internal SipHashBasedStringEqualityComparer(ulong k0, ulong k1);
    private static SipHashBasedStringEqualityComparer();
    public sealed virtual bool Equals(string x, string y);
    private static ulong GenerateRandomKeySegment();
    public sealed virtual int GetHashCode(string obj);
    internal int GetHashCode(Byte* bytes, UInt32 len);
    private static ulong SipHash_2_4_UlongCast_ForcedInline(Byte* finb, UInt32 inlen, ulong k0, ulong k1);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Infrastructure.StreamExtensions : object {
    [ExtensionAttribute]
public static Task`1<int> ReadAsync(Stream stream, Byte[] buffer);
    [ExtensionAttribute]
public static Task WriteAsync(Stream stream, Byte[] buffer);
    private static Func`2<IAsyncResult, object> WrapEndWrite(Stream stream);
    private static Task`1<T> FromAsync(Func`2<AsyncCallback, IAsyncResult> begin, Func`2<IAsyncResult, T> end);
    private static void CompleteAsync(TaskCompletionSource`1<T> tcs, IAsyncResult ar, Func`2<IAsyncResult, T> end);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.StringMinifier : object {
    private ConcurrentDictionary`2<string, string> _stringMinifier;
    private ConcurrentDictionary`2<string, string> _stringMaximizer;
    private int _lastMinifiedKey;
    private Func`2<string, string> _createMinifiedString;
    public sealed virtual string Minify(string fullString);
    public sealed virtual string Unminify(string minifiedString);
    public sealed virtual void RemoveUnminified(string fullString);
    private string CreateMinifiedString(string fullString);
    private static char GetCharFromSixBitInt(UInt32 num);
    private static string GetStringFromInt(UInt32 num);
}
internal class Microsoft.AspNet.SignalR.Infrastructure.TaskQueue : object {
    private object _lockObj;
    private Task _lastQueuedTask;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _drained;
    private Nullable`1<int> _maxSize;
    private long _size;
    [CompilerGeneratedAttribute]
private IPerformanceCounter <QueueSizeCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<Func`2<object, Task>, object, TaskQueue, Task> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate6;
    public IPerformanceCounter QueueSizeCounter { get; public set; }
    public bool IsDrained { get; }
    public TaskQueue(Task initialTask);
    public TaskQueue(Task initialTask, int maxSize);
    [CompilerGeneratedAttribute]
public IPerformanceCounter get_QueueSizeCounter();
    [CompilerGeneratedAttribute]
public void set_QueueSizeCounter(IPerformanceCounter value);
    public bool get_IsDrained();
    public Task Enqueue(Func`2<object, Task> taskFunc, object state);
    private Task InvokeNext(Func`2<object, Task> next, object nextState);
    private void Dequeue();
    public Task Enqueue(Func`1<Task> taskFunc);
    public Task Drain();
    [CompilerGeneratedAttribute]
private static Task <Enqueue>b__1(Func`2<object, Task> n, object ns, TaskQueue q);
    [CompilerGeneratedAttribute]
private static void <InvokeNext>b__3(object s);
    [CompilerGeneratedAttribute]
private static Task <Enqueue>b__5(object state);
}
internal static class Microsoft.AspNet.SignalR.Infrastructure.UrlDecoder : object {
    public static string UrlDecode(string str);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static int HexToInt(char h);
}
public interface Microsoft.AspNet.SignalR.IPersistentConnectionContext {
    public IConnection Connection { get; }
    public IConnectionGroupManager Groups { get; }
    public abstract virtual IConnection get_Connection();
    public abstract virtual IConnectionGroupManager get_Groups();
}
public interface Microsoft.AspNet.SignalR.IRequest {
    public Uri Url { get; }
    public string LocalPath { get; }
    public INameValueCollection QueryString { get; }
    public INameValueCollection Headers { get; }
    public IDictionary`2<string, Cookie> Cookies { get; }
    public IPrincipal User { get; }
    public IDictionary`2<string, object> Environment { get; }
    public abstract virtual Uri get_Url();
    public abstract virtual string get_LocalPath();
    public abstract virtual INameValueCollection get_QueryString();
    public abstract virtual INameValueCollection get_Headers();
    public abstract virtual IDictionary`2<string, Cookie> get_Cookies();
    public abstract virtual IPrincipal get_User();
    public abstract virtual IDictionary`2<string, object> get_Environment();
    public abstract virtual Task`1<INameValueCollection> ReadForm();
}
public interface Microsoft.AspNet.SignalR.IUntrackedDisposable {
}
public interface Microsoft.AspNet.SignalR.IUserIdProvider {
    public abstract virtual string GetUserId(IRequest request);
}
public interface Microsoft.AspNet.SignalR.Json.IJsonValue {
    public abstract virtual object ConvertTo(Type type);
    public abstract virtual bool CanConvertTo(Type type);
}
public interface Microsoft.AspNet.SignalR.Json.IJsonWritable {
    public abstract virtual void WriteJson(TextWriter writer);
}
internal class Microsoft.AspNet.SignalR.Json.JRawValue : object {
    private string _value;
    public JRawValue(JRaw value);
    public sealed virtual object ConvertTo(Type type);
    public sealed virtual bool CanConvertTo(Type type);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.Json.JsonSerializerExtensions : object {
    [ExtensionAttribute]
public static T Parse(JsonSerializer serializer, string json);
    [ExtensionAttribute]
public static T Parse(JsonSerializer serializer, ArraySegment`1<byte> jsonBuffer, Encoding encoding);
    [ExtensionAttribute]
public static void Serialize(JsonSerializer serializer, object value, TextWriter writer);
    [ExtensionAttribute]
public static string Stringify(JsonSerializer serializer, object value);
}
public static class Microsoft.AspNet.SignalR.Json.JsonUtility : object {
    private static int DefaultMaxDepth;
    private static String[] _jsKeywords;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public static string JsonMimeType { get; }
    public static string JavaScriptMimeType { get; }
    private static JsonUtility();
    public static string CamelCase(string name);
    public static string get_JsonMimeType();
    public static string get_JavaScriptMimeType();
    public static string CreateJsonpCallback(string callback, string payload);
    public static JsonSerializerSettings CreateDefaultSerializerSettings();
    public static JsonSerializer CreateDefaultSerializer();
    internal static bool IsValidJavaScriptCallback(string callback);
    internal static bool IsValidJavaScriptFunctionName(string name);
    internal static bool TryRejectJSONPRequest(ConnectionConfiguration config, IOwinContext context);
    private static bool IsValidJavaScriptIdentifierStartChar(char startChar);
    private static bool IsValidJavaScriptIdenfitierNonStartChar(char identifierChar);
    private static bool IsJavaScriptReservedWord(string word);
    [CompilerGeneratedAttribute]
private static string <CamelCase>b__0(string n);
}
internal class Microsoft.AspNet.SignalR.Json.SipHashBasedDictionaryConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadJsonObject(JsonReader reader);
    private object ReadArray(JsonReader reader);
    private object ReadObject(JsonReader reader);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.AspNet.SignalR.Messaging.Command : object {
    [CompilerGeneratedAttribute]
private bool <WaitForAck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool WaitForAck { get; public set; }
    public string Id { get; private set; }
    public CommandType CommandType { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WaitForAck();
    [CompilerGeneratedAttribute]
public void set_WaitForAck(bool value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public void set_CommandType(CommandType value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public enum Microsoft.AspNet.SignalR.Messaging.CommandType : Enum {
    public int value__;
    public static CommandType Initializing;
    public static CommandType AddToGroup;
    public static CommandType RemoveFromGroup;
    public static CommandType Abort;
}
internal class Microsoft.AspNet.SignalR.Messaging.Cursor : object {
    private static Char[] _escapeChars;
    private string _escapedKey;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`3<string, object, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public string Key { get; private set; }
    public ulong Id { get; public set; }
    public Cursor(string key, ulong id);
    public Cursor(string key, ulong id, string minifiedKey);
    private static Cursor();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public ulong get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(ulong value);
    public static Cursor Clone(Cursor cursor);
    public static void WriteCursors(TextWriter textWriter, IList`1<Cursor> cursors, string prefix);
    internal static void WriteUlongAsHexToBuffer(ulong value, TextWriter textWriter);
    private static char Int32ToHex(int value);
    private static string Escape(string value);
    public static List`1<Cursor> GetCursors(string cursor, string prefix);
    public static List`1<Cursor> GetCursors(string cursor, string prefix, Func`2<string, string> keyMaximizer);
    public static List`1<Cursor> GetCursors(string cursor, string prefix, Func`3<string, object, string> keyMaximizer, object state);
    private static void ParseCursorId(StringBuilder sb, UInt64& id);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <GetCursors>b__0(string s);
    [CompilerGeneratedAttribute]
private static string <GetCursors>b__2(string key, object state);
}
internal class Microsoft.AspNet.SignalR.Messaging.DefaultSubscription : Subscription {
    internal static string _defaultCursorPrefix;
    private List`1<Cursor> _cursors;
    private List`1<Topic> _cursorTopics;
    private UInt64[] _cursorsState;
    private IStringMinifier _stringMinifier;
    [CompilerGeneratedAttribute]
private static Func`3<string, object, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public DefaultSubscription(string identity, IList`1<string> eventKeys, TopicLookup topics, string cursor, Func`3<MessageResult, object, Task`1<bool>> callback, int maxMessages, IStringMinifier stringMinifier, IPerformanceCounterManager counters, object state);
    private static DefaultSubscription();
    private static string UnminifyCursor(string key, object state);
    public virtual bool AddEvent(string eventKey, Topic topic);
    public virtual void RemoveEvent(string eventKey);
    public virtual void SetEventTopic(string eventKey, Topic topic);
    public virtual void WriteCursor(TextWriter textWriter);
    protected virtual void PerformWork(IList`1<ArraySegment`1<Message>> items, Int32& totalCount, Object& state);
    protected virtual void BeforeInvoke(object state);
    private bool UpdateCursor(string key, ulong id);
    private int FindCursorIndex(string eventKey);
    private List`1<Cursor> GetCursorsFromEventKeys(IList`1<string> eventKeys, TopicLookup topics);
    private static string GetCursorPrefix();
    private static ulong GetMessageId(TopicLookup topics, string key);
    private static ulong GetMessageId(Topic topic);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(string k, object s);
}
public interface Microsoft.AspNet.SignalR.Messaging.IMessageBus {
    public abstract virtual Task Publish(Message message);
    public abstract virtual IDisposable Subscribe(ISubscriber subscriber, string cursor, Func`3<MessageResult, object, Task`1<bool>> callback, int maxMessages, object state);
}
public interface Microsoft.AspNet.SignalR.Messaging.ISubscriber {
    public IList`1<string> EventKeys { get; }
    public Action`1<TextWriter> WriteCursor { get; public set; }
    public string Identity { get; }
    public Subscription Subscription { get; public set; }
    public abstract virtual IList`1<string> get_EventKeys();
    public abstract virtual Action`1<TextWriter> get_WriteCursor();
    public abstract virtual void set_WriteCursor(Action`1<TextWriter> value);
    public abstract virtual string get_Identity();
    public abstract virtual void add_EventKeyAdded(Action`2<ISubscriber, string> value);
    public abstract virtual void remove_EventKeyAdded(Action`2<ISubscriber, string> value);
    public abstract virtual void add_EventKeyRemoved(Action`2<ISubscriber, string> value);
    public abstract virtual void remove_EventKeyRemoved(Action`2<ISubscriber, string> value);
    public abstract virtual Subscription get_Subscription();
    public abstract virtual void set_Subscription(Subscription value);
}
public interface Microsoft.AspNet.SignalR.Messaging.ISubscription {
    public string Identity { get; }
    public abstract virtual string get_Identity();
    public abstract virtual bool SetQueued();
    public abstract virtual bool UnsetQueued();
    public abstract virtual Task Work();
}
public class Microsoft.AspNet.SignalR.Messaging.LocalEventKeyInfo : object {
    private WeakReference _storeReference;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Id>k__BackingField;
    public string Key { get; private set; }
    public ulong Id { get; private set; }
    public MessageStore`1<Message> MessageStore { get; }
    public LocalEventKeyInfo(string key, ulong id, MessageStore`1<Message> store);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public ulong get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(ulong value);
    public MessageStore`1<Message> get_MessageStore();
}
public class Microsoft.AspNet.SignalR.Messaging.Message : object {
    private static Byte[] _zeroByteBuffer;
    private static UTF8Encoding _encoding;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForAck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MappingId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StreamIndex>k__BackingField;
    public string Source { get; public set; }
    public string Key { get; public set; }
    public ArraySegment`1<byte> Value { get; public set; }
    public string CommandId { get; public set; }
    public bool WaitForAck { get; public set; }
    public bool IsAck { get; public set; }
    public string Filter { get; public set; }
    public Encoding Encoding { get; private set; }
    public ulong MappingId { get; public set; }
    public int StreamIndex { get; public set; }
    public bool IsCommand { get; }
    public Message(string source, string key, string value);
    public Message(string source, string key, ArraySegment`1<byte> value);
    private static Message();
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_CommandId();
    [CompilerGeneratedAttribute]
public void set_CommandId(string value);
    [CompilerGeneratedAttribute]
public bool get_WaitForAck();
    [CompilerGeneratedAttribute]
public void set_WaitForAck(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAck();
    [CompilerGeneratedAttribute]
public void set_IsAck(bool value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public ulong get_MappingId();
    [CompilerGeneratedAttribute]
public void set_MappingId(ulong value);
    [CompilerGeneratedAttribute]
public int get_StreamIndex();
    [CompilerGeneratedAttribute]
public void set_StreamIndex(int value);
    public bool get_IsCommand();
    public string GetString();
    public void WriteTo(Stream stream);
    public static Message ReadFrom(Stream stream);
}
public class Microsoft.AspNet.SignalR.Messaging.MessageBroker : object {
    private IPerformanceCounterManager _counters;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    [CompilerGeneratedAttribute]
private TraceSource <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private static WaitCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public TraceSource Trace { get; public set; }
    public MessageBroker(IPerformanceCounterManager performanceCounterManager);
    [CompilerGeneratedAttribute]
public TraceSource get_Trace();
    [CompilerGeneratedAttribute]
public void set_Trace(TraceSource value);
    public void Schedule(ISubscription subscription);
    private void ScheduleWork(ISubscription subscription);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Messaging.MessageBroker/<DoWork>d__2")]
private static void DoWork(WorkContext context);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static void <ScheduleWork>b__0(object state);
}
public class Microsoft.AspNet.SignalR.Messaging.MessageBus : object {
    private static int DefaultMaxTopicsWithNoSubscriptions;
    private MessageBroker _broker;
    private UInt32 _messageStoreSize;
    private int _maxTopicsWithNoSubscriptions;
    private IStringMinifier _stringMinifier;
    private ITraceManager _traceManager;
    private TraceSource _trace;
    private Timer _gcTimer;
    private int _gcRunning;
    private static TimeSpan _gcInterval;
    private TimeSpan _topicTtl;
    internal Action`2<string, Topic> BeforeTopicGarbageCollected;
    internal Action`2<string, Topic> AfterTopicGarbageCollected;
    internal Action`2<string, Topic> BeforeTopicMarked;
    internal Action`1<string> BeforeTopicCreated;
    internal Action`2<string, Topic> AfterTopicMarkedSuccessfully;
    internal Action`3<string, Topic, int> AfterTopicMarked;
    private Func`2<string, Topic> _createTopic;
    private Action`2<ISubscriber, string> _addEvent;
    private Action`2<ISubscriber, string> _removeEvent;
    private Action`1<object> _disposeSubscription;
    [CompilerGeneratedAttribute]
private TopicLookup <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounterManager <Counters>k__BackingField;
    [CompilerGeneratedAttribute]
private static Comparison`1<KeyValuePair`2<string, Topic>> CS$<>9__CachedAnonymousMethodDelegate6;
    protected internal TopicLookup Topics { get; private set; }
    protected IPerformanceCounterManager Counters { get; private set; }
    public MessageBus(IDependencyResolver resolver);
    public MessageBus(IStringMinifier stringMinifier, ITraceManager traceManager, IPerformanceCounterManager performanceCounterManager, IConfigurationManager configurationManager, int maxTopicsWithNoSubscriptions);
    private static MessageBus();
    [CompilerGeneratedAttribute]
protected internal TopicLookup get_Topics();
    [CompilerGeneratedAttribute]
private void set_Topics(TopicLookup value);
    [CompilerGeneratedAttribute]
protected IPerformanceCounterManager get_Counters();
    [CompilerGeneratedAttribute]
private void set_Counters(IPerformanceCounterManager value);
    public virtual Task Publish(Message message);
    protected ulong Save(Message message);
    public virtual IDisposable Subscribe(ISubscriber subscriber, string cursor, Func`3<MessageResult, object, Task`1<bool>> callback, int maxMessages, object state);
    protected virtual Subscription CreateSubscription(ISubscriber subscriber, string cursor, Func`3<MessageResult, object, Task`1<bool>> callback, int messageBufferSize, object state);
    protected void ScheduleEvent(string eventKey);
    private void ScheduleTopic(Topic topic);
    protected virtual Topic CreateTopic(string key);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    internal void GarbageCollectTopics();
    private void DestroyTopic(string key, Topic topic);
    private void DestroyTopicCore(string key, Topic topic);
    internal Topic GetTopic(string key);
    internal Topic SubscribeTopic(string key);
    private void AddEvent(ISubscriber subscriber, string eventKey);
    private void RemoveEvent(ISubscriber subscriber, string eventKey);
    private void DisposeSubscription(object state);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object o);
    [CompilerGeneratedAttribute]
private static int <GarbageCollectTopics>b__5(KeyValuePair`2<string, Topic> leftPair, KeyValuePair`2<string, Topic> rightPair);
}
[ExtensionAttribute]
public static class Microsoft.AspNet.SignalR.Messaging.MessageBusExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [ExtensionAttribute]
public static Task Publish(IMessageBus bus, string source, string key, string value);
    [ExtensionAttribute]
internal static Task Ack(IMessageBus bus, string acker, string commandId);
    [ExtensionAttribute]
public static void Enumerate(IList`1<ArraySegment`1<Message>> messages, Action`1<Message> onMessage);
    [ExtensionAttribute]
public static void Enumerate(IList`1<ArraySegment`1<Message>> messages, Func`2<Message, bool> filter, Action`2<T, Message> onMessage, T state);
    [CompilerGeneratedAttribute]
private static bool <Enumerate>b__0(Message message);
}
public class Microsoft.AspNet.SignalR.Messaging.MessageResult : ValueType {
    private static List`1<ArraySegment`1<Message>> _emptyList;
    public static MessageResult TerminalMessage;
    [CompilerGeneratedAttribute]
private IList`1<ArraySegment`1<Message>> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Terminal>k__BackingField;
    public IList`1<ArraySegment`1<Message>> Messages { get; private set; }
    public int TotalCount { get; private set; }
    public bool Terminal { get; public set; }
    public MessageResult(bool terminal);
    public MessageResult(IList`1<ArraySegment`1<Message>> messages, int totalCount);
    private static MessageResult();
    [CompilerGeneratedAttribute]
public IList`1<ArraySegment`1<Message>> get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(IList`1<ArraySegment`1<Message>> value);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
private void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Terminal();
    [CompilerGeneratedAttribute]
public void set_Terminal(bool value);
}
public class Microsoft.AspNet.SignalR.Messaging.MessageStore`1 : object {
    private static UInt32 _minFragmentCount;
    private static UInt32 _maxFragmentSize;
    private static ArraySegment`1<T> _emptyArraySegment;
    private UInt32 _offset;
    private Fragment[] _fragments;
    private UInt32 _fragmentSize;
    private long _nextFreeMessageId;
    public MessageStore`1(UInt32 capacity, UInt32 offset);
    public MessageStore`1(UInt32 capacity);
    private static MessageStore`1();
    public ulong GetMessageCount();
    public ulong Add(T message);
    private void GetFragmentOffsets(ulong messageId, UInt64& fragmentNum, Int32& idxIntoFragmentsArray, Int32& idxIntoFragment);
    private ulong GetMessageId(ulong fragmentNum, UInt32 offset);
    public MessageStoreResult`1<T> GetMessages(ulong firstMessageId, int maxMessages);
    private MessageStoreResult`1<T> GetMessagesImpl(ulong firstMessageIdRequestedByClient, int maxMessages);
    private bool TryAddImpl(T message, UInt64& newMessageId);
}
public class Microsoft.AspNet.SignalR.Messaging.MessageStoreResult`1 : ValueType {
    private ulong _firstMessageId;
    private bool _hasMoreData;
    private ArraySegment`1<T> _messages;
    public ulong FirstMessageId { get; }
    public bool HasMoreData { get; }
    public ArraySegment`1<T> Messages { get; }
    public MessageStoreResult`1(ulong firstMessageId, ArraySegment`1<T> messages, bool hasMoreData);
    public ulong get_FirstMessageId();
    public bool get_HasMoreData();
    public ArraySegment`1<T> get_Messages();
}
public class Microsoft.AspNet.SignalR.Messaging.ScaleoutConfiguration : object {
    private int _maxQueueLength;
    [CompilerGeneratedAttribute]
private QueuingBehavior <QueueBehavior>k__BackingField;
    public QueuingBehavior QueueBehavior { get; public set; }
    public int MaxQueueLength { get; public set; }
    [CompilerGeneratedAttribute]
public virtual QueuingBehavior get_QueueBehavior();
    [CompilerGeneratedAttribute]
public virtual void set_QueueBehavior(QueuingBehavior value);
    public virtual int get_MaxQueueLength();
    public virtual void set_MaxQueueLength(int value);
}
public class Microsoft.AspNet.SignalR.Messaging.ScaleoutMapping : object {
    [CompilerGeneratedAttribute]
private ulong <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LocalEventKeyInfo> <LocalKeyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ServerCreationTime>k__BackingField;
    public ulong Id { get; private set; }
    public IList`1<LocalEventKeyInfo> LocalKeyInfo { get; private set; }
    public DateTime ServerCreationTime { get; private set; }
    public ScaleoutMapping(ulong id, ScaleoutMessage message);
    public ScaleoutMapping(ulong id, ScaleoutMessage message, IList`1<LocalEventKeyInfo> localKeyInfo);
    [CompilerGeneratedAttribute]
public ulong get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(ulong value);
    [CompilerGeneratedAttribute]
public IList`1<LocalEventKeyInfo> get_LocalKeyInfo();
    [CompilerGeneratedAttribute]
private void set_LocalKeyInfo(IList`1<LocalEventKeyInfo> value);
    [CompilerGeneratedAttribute]
public DateTime get_ServerCreationTime();
    [CompilerGeneratedAttribute]
private void set_ServerCreationTime(DateTime value);
}
public class Microsoft.AspNet.SignalR.Messaging.ScaleoutMappingStore : object {
    private static int MaxMessages;
    private ScaleoutStore _store;
    public ScaleoutMapping MaxMapping { get; }
    public void Add(ulong id, ScaleoutMessage message, IList`1<LocalEventKeyInfo> localKeyInfo);
    public ScaleoutMapping get_MaxMapping();
    public IEnumerator`1<ScaleoutMapping> GetEnumerator(ulong id);
}
public class Microsoft.AspNet.SignalR.Messaging.ScaleoutMessage : object {
    [CompilerGeneratedAttribute]
private IList`1<Message> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ServerCreationTime>k__BackingField;
    public IList`1<Message> Messages { get; public set; }
    public DateTime ServerCreationTime { get; public set; }
    public ScaleoutMessage(IList`1<Message> messages);
    [CompilerGeneratedAttribute]
public IList`1<Message> get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(IList`1<Message> value);
    [CompilerGeneratedAttribute]
public DateTime get_ServerCreationTime();
    [CompilerGeneratedAttribute]
public void set_ServerCreationTime(DateTime value);
    public Byte[] ToBytes();
    public static ScaleoutMessage FromBytes(Byte[] data);
}
public abstract class Microsoft.AspNet.SignalR.Messaging.ScaleoutMessageBus : MessageBus {
    private SipHashBasedStringEqualityComparer _sipHashBasedComparer;
    private TraceSource _trace;
    private Lazy`1<ScaleoutStreamManager> _streamManager;
    private IPerformanceCounterManager _perfCounters;
    [CompilerGeneratedAttribute]
private static Func`2<Message, string> CS$<>9__CachedAnonymousMethodDelegatec;
    protected int StreamCount { get; }
    private ScaleoutStreamManager StreamManager { get; }
    protected ScaleoutMessageBus(IDependencyResolver resolver, ScaleoutConfiguration configuration);
    protected virtual int get_StreamCount();
    private ScaleoutStreamManager get_StreamManager();
    protected void Open(int streamIndex);
    protected void Close(int streamIndex);
    protected void OnError(int streamIndex, Exception exception);
    protected virtual Task Send(IList`1<Message> messages);
    protected virtual Task Send(int streamIndex, IList`1<Message> messages);
    private void SendImpl(IEnumerator`1<IGrouping`2<string, Message>> enumerator, TaskCompletionSource`1<object> taskCompletionSource);
    protected virtual void OnReceived(int streamIndex, ulong id, ScaleoutMessage message);
    private void OnReceivedCore(int streamIndex, ulong id, ScaleoutMessage scaleoutMessage);
    public virtual Task Publish(Message message);
    protected virtual void Dispose(bool disposing);
    protected virtual Subscription CreateSubscription(ISubscriber subscriber, string cursor, Func`3<MessageResult, object, Task`1<bool>> callback, int messageBufferSize, object state);
    [CompilerGeneratedAttribute]
private static string <Send>b__b(Message m);
    [CompilerGeneratedAttribute]
private void <SendImpl>b__d(IEnumerator`1<IGrouping`2<string, Message>> enumer, TaskCompletionSource`1<object> tcs);
}
public class Microsoft.AspNet.SignalR.Messaging.ScaleoutStore : object {
    private static UInt32 _minFragmentCount;
    private static UInt32 _maxFragmentSize;
    private static ArraySegment`1<ScaleoutMapping> _emptyArraySegment;
    private Fragment[] _fragments;
    private UInt32 _fragmentSize;
    private long _minMessageId;
    private long _nextFreeMessageId;
    private ulong _minMappingId;
    private ScaleoutMapping _maxMapping;
    internal ulong MinMappingId { get; }
    public ScaleoutMapping MaxMapping { get; }
    public UInt32 FragmentSize { get; }
    public int FragmentCount { get; }
    public ScaleoutStore(UInt32 capacity);
    internal ScaleoutStore(UInt32 capacity, UInt32 fragmentSize);
    private static ScaleoutStore();
    internal ulong get_MinMappingId();
    public ScaleoutMapping get_MaxMapping();
    public UInt32 get_FragmentSize();
    public int get_FragmentCount();
    public ulong Add(ScaleoutMapping mapping);
    private void GetFragmentOffsets(ulong messageId, UInt64& fragmentNum, Int32& idxIntoFragmentsArray, Int32& idxIntoFragment);
    private int GetFragmentOffset(ulong messageId);
    private ulong GetMessageId(ulong fragmentNum, UInt32 offset);
    private bool TryAddImpl(ScaleoutMapping mapping, UInt64& newMessageId);
    public MessageStoreResult`1<ScaleoutMapping> GetMessages(ulong firstMessageIdRequestedByClient);
    public MessageStoreResult`1<ScaleoutMapping> GetMessagesByMappingId(ulong mappingId);
    private MessageStoreResult`1<ScaleoutMapping> GetAllMessages(ulong minMessageId);
    internal bool TryGetFragmentFromMappingId(ulong mappingId, Fragment& fragment);
}
internal class Microsoft.AspNet.SignalR.Messaging.ScaleoutStream : object {
    private TaskCompletionSource`1<object> _taskCompletionSource;
    private static Task _initializeDrainTask;
    private TaskQueue _queue;
    private StreamState _state;
    private Exception _error;
    private int _size;
    private QueuingBehavior _queueBehavior;
    private TraceSource _trace;
    private string _tracePrefix;
    private IPerformanceCounterManager _perfCounters;
    private object _lockObj;
    [CompilerGeneratedAttribute]
private static Action`1<TaskCompletionSource`1<object>> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`2<AggregateException, object> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`3<TaskQueue, TraceSource, Task> CS$<>9__CachedAnonymousMethodDelegateb;
    private bool UsingTaskQueue { get; }
    public ScaleoutStream(TraceSource trace, string tracePrefix, QueuingBehavior queueBehavior, int size, IPerformanceCounterManager performanceCounters);
    private bool get_UsingTaskQueue();
    public void Open();
    public Task Send(Func`2<object, Task> send, object state);
    public void SetError(Exception error);
    public void Close();
    private static Task Send(object state);
    private void Buffer();
    private void InitializeCore();
    private Task DrainPreviousQueue();
    private void EnsureQueueStarted();
    private bool ChangeState(StreamState newState);
    private bool ChangeState(StreamState newState, StreamState& previousState);
    private static Task Drain(TaskQueue queue, TraceSource traceSource);
    private void Trace(TraceEventType traceEventType, string value, Object[] args);
    [CompilerGeneratedAttribute]
private static void <Send>b__5(TaskCompletionSource`1<object> tcs);
    [CompilerGeneratedAttribute]
private static void <Send>b__6(AggregateException ex, object obj);
    [CompilerGeneratedAttribute]
private static Task <DrainPreviousQueue>b__a(TaskQueue q, TraceSource t);
}
internal class Microsoft.AspNet.SignalR.Messaging.ScaleoutStreamManager : object {
    private Func`3<int, IList`1<Message>, Task> _send;
    private Action`3<int, ulong, ScaleoutMessage> _receive;
    private ScaleoutStream[] _streams;
    [CompilerGeneratedAttribute]
private IList`1<ScaleoutMappingStore> <Streams>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    public IList`1<ScaleoutMappingStore> Streams { get; private set; }
    public ScaleoutStreamManager(Func`3<int, IList`1<Message>, Task> send, Action`3<int, ulong, ScaleoutMessage> receive, int streamCount, TraceSource trace, IPerformanceCounterManager performanceCounters, ScaleoutConfiguration configuration);
    [CompilerGeneratedAttribute]
public IList`1<ScaleoutMappingStore> get_Streams();
    [CompilerGeneratedAttribute]
private void set_Streams(IList`1<ScaleoutMappingStore> value);
    public void Open(int streamIndex);
    public void Close(int streamIndex);
    public void OnError(int streamIndex, Exception exception);
    public Task Send(int streamIndex, IList`1<Message> messages);
    public void OnReceived(int streamIndex, ulong id, ScaleoutMessage message);
    private static Task Send(object state);
    [CompilerGeneratedAttribute]
private static Task <Send>b__0(object state);
}
public class Microsoft.AspNet.SignalR.Messaging.ScaleoutSubscription : Subscription {
    private static string _scaleoutCursorPrefix;
    private IList`1<ScaleoutMappingStore> _streams;
    private List`1<Cursor> _cursors;
    public ScaleoutSubscription(string identity, IList`1<string> eventKeys, string cursor, IList`1<ScaleoutMappingStore> streams, Func`3<MessageResult, object, Task`1<bool>> callback, int maxMessages, IPerformanceCounterManager counters, object state);
    public virtual void WriteCursor(TextWriter textWriter);
    protected virtual void PerformWork(IList`1<ArraySegment`1<Message>> items, Int32& totalCount, Object& state);
    protected virtual void BeforeInvoke(object state);
    private IEnumerable`1<Tuple`2<ScaleoutMapping, int>> GetMappings();
    private ulong ExtractMessages(int streamIndex, ScaleoutMapping mapping, IList`1<ArraySegment`1<Message>> items, Int32& totalCount);
    private void AddCursorForStream(int streamIndex, List`1<Cursor> cursors);
}
public abstract class Microsoft.AspNet.SignalR.Messaging.Subscription : object {
    private Func`3<MessageResult, object, Task`1<bool>> _callback;
    private object _callbackState;
    private IPerformanceCounterManager _counters;
    private int _state;
    private int _subscriptionState;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <EventKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private IDisposable <Disposable>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<Subscription, object> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`2<Subscription, object> CS$<>9__CachedAnonymousMethodDelegate7;
    private bool Alive { get; }
    public string Identity { get; private set; }
    public IList`1<string> EventKeys { get; private set; }
    public int MaxMessages { get; private set; }
    public IDisposable Disposable { get; public set; }
    protected Subscription(string identity, IList`1<string> eventKeys, Func`3<MessageResult, object, Task`1<bool>> callback, int maxMessages, IPerformanceCounterManager counters, object state);
    private bool get_Alive();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_EventKeys();
    [CompilerGeneratedAttribute]
private void set_EventKeys(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_MaxMessages();
    [CompilerGeneratedAttribute]
private void set_MaxMessages(int value);
    [CompilerGeneratedAttribute]
public IDisposable get_Disposable();
    [CompilerGeneratedAttribute]
public void set_Disposable(IDisposable value);
    public virtual Task`1<bool> Invoke(MessageResult result);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Messaging.Subscription/<Invoke>d__2")]
private Task`1<bool> Invoke(MessageResult result, Action`2<Subscription, object> beforeInvoke, object state);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Messaging.Subscription/<Work>d__8")]
public sealed virtual Task Work();
    public sealed virtual bool SetQueued();
    public sealed virtual bool UnsetQueued();
    protected virtual void BeforeInvoke(object state);
    protected abstract virtual void PerformWork(IList`1<ArraySegment`1<Message>> items, Int32& totalCount, Object& state);
    public virtual bool AddEvent(string key, Topic topic);
    public virtual void RemoveEvent(string key);
    public virtual void SetEventTopic(string key, Topic topic);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public abstract virtual void WriteCursor(TextWriter textWriter);
    private bool AddEventCore(string key);
    [CompilerGeneratedAttribute]
private static void <Invoke>b__0(Subscription s, object o);
    [CompilerGeneratedAttribute]
private static void <Work>b__6(Subscription s, object o);
}
public class Microsoft.AspNet.SignalR.Messaging.Topic : object {
    private TimeSpan _lifespan;
    private DateTime _lastUsed;
    internal int State;
    [CompilerGeneratedAttribute]
private IList`1<ISubscription> <Subscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageStore`1<Message> <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private ReaderWriterLockSlim <SubscriptionLock>k__BackingField;
    public IList`1<ISubscription> Subscriptions { get; private set; }
    public MessageStore`1<Message> Store { get; private set; }
    public ReaderWriterLockSlim SubscriptionLock { get; private set; }
    public bool IsExpired { get; }
    public DateTime LastUsed { get; }
    public Topic(UInt32 storeSize, TimeSpan lifespan);
    [CompilerGeneratedAttribute]
public IList`1<ISubscription> get_Subscriptions();
    [CompilerGeneratedAttribute]
private void set_Subscriptions(IList`1<ISubscription> value);
    [CompilerGeneratedAttribute]
public MessageStore`1<Message> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(MessageStore`1<Message> value);
    [CompilerGeneratedAttribute]
public ReaderWriterLockSlim get_SubscriptionLock();
    [CompilerGeneratedAttribute]
private void set_SubscriptionLock(ReaderWriterLockSlim value);
    public virtual bool get_IsExpired();
    public DateTime get_LastUsed();
    public void MarkUsed();
    public void AddSubscription(ISubscription subscription);
    public void RemoveSubscription(ISubscription subscription);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNet.SignalR.Messaging.TopicLookup : object {
    private ConcurrentDictionary`2<string, Topic> _topics;
    private ConcurrentDictionary`2<string, Topic> _groupTopics;
    public int Count { get; }
    public Topic Item { get; }
    public int get_Count();
    public Topic get_Item(string key);
    public bool ContainsKey(string key);
    public bool TryGetValue(string key, Topic& topic);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, Topic>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool TryRemove(string key);
    public Topic GetOrAdd(string key, Func`2<string, Topic> factory);
    public void Clear();
}
internal class Microsoft.AspNet.SignalR.Messaging.TopicState : object {
    public static int NoSubscriptions;
    public static int HasSubscriptions;
    public static int Dying;
    public static int Dead;
}
internal static class Microsoft.AspNet.SignalR.Messaging.Volatile : object {
    public static long Read(Int64& location);
}
public class Microsoft.AspNet.SignalR.Owin.Middleware.HubDispatcherMiddleware : OwinMiddleware {
    private HubConfiguration _configuration;
    public HubDispatcherMiddleware(OwinMiddleware next, HubConfiguration configuration);
    public virtual Task Invoke(IOwinContext context);
}
public class Microsoft.AspNet.SignalR.Owin.Middleware.PersistentConnectionMiddleware : OwinMiddleware {
    private Type _connectionType;
    private ConnectionConfiguration _configuration;
    public PersistentConnectionMiddleware(OwinMiddleware next, Type connectionType, ConnectionConfiguration configuration);
    public virtual Task Invoke(IOwinContext context);
}
internal class Microsoft.AspNet.SignalR.Owin.OwinWebSocketHandler : object {
    private Func`2<IWebSocket, Task> _callback;
    private Nullable`1<int> _maxIncomingMessageSize;
    public OwinWebSocketHandler(Func`2<IWebSocket, Task> callback, Nullable`1<int> maxIncomingMessageSize);
    public Task ProcessRequest(IDictionary`2<string, object> environment);
    private void RunWebSocketHandler(DefaultWebSocketHandler handler, CancellationTokenSource cts);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNet.SignalR.Owin.ReadableStringCollectionWrapper : object {
    private IReadableStringCollection _readableStringCollection;
    public string Item { get; }
    public ReadableStringCollectionWrapper(IReadableStringCollection readableStringCollection);
    public sealed virtual string get_Item(string key);
    public sealed virtual IEnumerable`1<string> GetValues(string key);
    public sealed virtual string Get(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerable`1<KeyValuePair`2<string, string>> GetEnumerable();
}
public class Microsoft.AspNet.SignalR.Owin.ServerRequest : object {
    private INameValueCollection _queryString;
    private INameValueCollection _headers;
    private IDictionary`2<string, Cookie> _cookies;
    private IPrincipal _user;
    private OwinRequest _request;
    public Uri Url { get; }
    public string LocalPath { get; }
    public INameValueCollection QueryString { get; }
    public INameValueCollection Headers { get; }
    public IDictionary`2<string, Cookie> Cookies { get; }
    public IPrincipal User { get; }
    public IDictionary`2<string, object> Environment { get; }
    public ServerRequest(IDictionary`2<string, object> environment);
    public sealed virtual Uri get_Url();
    public sealed virtual string get_LocalPath();
    public sealed virtual INameValueCollection get_QueryString();
    public sealed virtual INameValueCollection get_Headers();
    public sealed virtual IDictionary`2<string, Cookie> get_Cookies();
    public sealed virtual IPrincipal get_User();
    public sealed virtual IDictionary`2<string, object> get_Environment();
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Owin.ServerRequest/<ReadForm>d__3")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<INameValueCollection> ReadForm();
    [CompilerGeneratedAttribute]
private INameValueCollection <get_QueryString>b__0();
    [CompilerGeneratedAttribute]
private INameValueCollection <get_Headers>b__1();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Cookie> <get_Cookies>b__2();
}
public class Microsoft.AspNet.SignalR.Owin.ServerResponse : object {
    private CancellationToken _callCancelled;
    private OwinResponse _response;
    private Stream _responseBody;
    public CancellationToken CancellationToken { get; }
    public int StatusCode { get; public set; }
    public string ContentType { get; public set; }
    public ServerResponse(IDictionary`2<string, object> environment);
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual int get_StatusCode();
    public sealed virtual void set_StatusCode(int value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual void Write(ArraySegment`1<byte> data);
    public sealed virtual Task Flush();
}
internal static class Microsoft.AspNet.SignalR.Owin.WebSocketConstants : object {
    internal static string WebSocketSubProtocolKey;
    internal static string WebSocketSendAsyncKey;
    internal static string WebSocketReceiveAyncKey;
    internal static string WebSocketCloseAsyncKey;
    internal static string WebSocketCallCancelledKey;
    internal static string WebSocketVersionKey;
    internal static string WebSocketVersion;
    internal static string WebSocketCloseStatusKey;
    internal static string WebSocketCloseDescriptionKey;
    internal static string AspNetServerVariableWebSocketVersion;
    internal static string SecWebSocketProtocol;
}
internal static class Microsoft.AspNet.SignalR.OwinConstants : object {
    public static string Version;
    public static string RequestBody;
    public static string RequestHeaders;
    public static string RequestScheme;
    public static string RequestMethod;
    public static string RequestPathBase;
    public static string RequestPath;
    public static string RequestQueryString;
    public static string RequestProtocol;
    public static string CallCancelled;
    public static string ResponseStatusCode;
    public static string ResponseReasonPhrase;
    public static string ResponseHeaders;
    public static string ResponseBody;
    public static string TraceOutput;
    public static string User;
    public static string RemoteIpAddress;
    public static string RemotePort;
    public static string LocalIpAddress;
    public static string LocalPort;
    public static string DisableRequestCompression;
    public static string DisableRequestBuffering;
    public static string DisableResponseBuffering;
    public static string ServerCapabilities;
    public static string WebSocketVersion;
    public static string WebSocketAccept;
    public static string HostOnAppDisposing;
    public static string HostAppNameKey;
    public static string HostAppModeKey;
    public static string HostTraceOutputKey;
    public static string HostReferencedAssembliesKey;
    public static string AppModeDevelopment;
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.OwinEnvironmentExtensions : object {
    [ExtensionAttribute]
internal static CancellationToken GetShutdownToken(IDictionary`2<string, object> env);
    [ExtensionAttribute]
internal static string GetAppInstanceName(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static TextWriter GetTraceOutput(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static bool SupportsWebSockets(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static bool IsDebugEnabled(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static IEnumerable`1<Assembly> GetReferenceAssemblies(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static void DisableResponseBuffering(IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static void DisableRequestCompression(IDictionary`2<string, object> environment);
}
public abstract class Microsoft.AspNet.SignalR.PersistentConnection : object {
    private static string WebSocketsTransportName;
    private static string PingJsonPayload;
    private static string StartJsonPayload;
    private static Char[] SplitChars;
    private static ProtocolResolver _protocolResolver;
    private IConfigurationManager _configurationManager;
    private ITransportManager _transportManager;
    private bool _initialized;
    [CompilerGeneratedAttribute]
private IProtectedData <ProtectedData>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializer <JsonSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IAckHandler <AckHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceManager <TraceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPerformanceCounterManager <Counters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransport <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserIdProvider <UserIdProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionGroupManager <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<string, PersistentConnection, HostContext, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<HostContext, Task> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Action`1<IPerformanceCounterManager> CS$<>9__CachedAnonymousMethodDelegate14;
    protected TraceSource Trace { get; }
    protected IProtectedData ProtectedData { get; private set; }
    protected IMessageBus MessageBus { get; private set; }
    protected JsonSerializer JsonSerializer { get; private set; }
    protected IAckHandler AckHandler { get; private set; }
    protected ITraceManager TraceManager { get; private set; }
    protected IPerformanceCounterManager Counters { get; private set; }
    protected ITransport Transport { get; private set; }
    protected IUserIdProvider UserIdProvider { get; private set; }
    public IConnection Connection { get; private set; }
    public IConnectionGroupManager Groups { get; private set; }
    private string DefaultSignal { get; }
    private string DefaultSignalRaw { get; }
    internal string GroupPrefix { get; }
    private static PersistentConnection();
    public virtual void Initialize(IDependencyResolver resolver);
    public bool Authorize(IRequest request);
    protected virtual TraceSource get_Trace();
    [CompilerGeneratedAttribute]
protected IProtectedData get_ProtectedData();
    [CompilerGeneratedAttribute]
private void set_ProtectedData(IProtectedData value);
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
private void set_MessageBus(IMessageBus value);
    [CompilerGeneratedAttribute]
protected JsonSerializer get_JsonSerializer();
    [CompilerGeneratedAttribute]
private void set_JsonSerializer(JsonSerializer value);
    [CompilerGeneratedAttribute]
protected IAckHandler get_AckHandler();
    [CompilerGeneratedAttribute]
private void set_AckHandler(IAckHandler value);
    [CompilerGeneratedAttribute]
protected ITraceManager get_TraceManager();
    [CompilerGeneratedAttribute]
private void set_TraceManager(ITraceManager value);
    [CompilerGeneratedAttribute]
protected IPerformanceCounterManager get_Counters();
    [CompilerGeneratedAttribute]
private void set_Counters(IPerformanceCounterManager value);
    [CompilerGeneratedAttribute]
protected ITransport get_Transport();
    [CompilerGeneratedAttribute]
private void set_Transport(ITransport value);
    [CompilerGeneratedAttribute]
protected IUserIdProvider get_UserIdProvider();
    [CompilerGeneratedAttribute]
private void set_UserIdProvider(IUserIdProvider value);
    [CompilerGeneratedAttribute]
public IConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(IConnection value);
    [CompilerGeneratedAttribute]
public IConnectionGroupManager get_Groups();
    [CompilerGeneratedAttribute]
private void set_Groups(IConnectionGroupManager value);
    private string get_DefaultSignal();
    private string get_DefaultSignalRaw();
    internal virtual string get_GroupPrefix();
    public Task ProcessRequest(IDictionary`2<string, object> environment);
    public virtual Task ProcessRequest(HostContext context);
    private Task ProcessRequestPostGroupRead(HostContext context, string groupsToken);
    internal bool TryGetConnectionId(HostContext context, string connectionToken, String& connectionId, String& message, Int32& statusCode);
    internal IList`1<string> VerifyGroups(string connectionId, string groupsToken);
    private IList`1<string> AppendGroupPrefixes(HostContext context, string connectionId, string groupsToken);
    private Connection CreateConnection(string connectionId, IList`1<string> signals, IList`1<string> groups);
    private IList`1<string> GetDefaultSignals(string userId, string connectionId);
    protected virtual IList`1<string> GetSignals(string userId, string connectionId);
    protected virtual bool AuthorizeRequest(IRequest request);
    protected virtual IList`1<string> OnRejoiningGroups(IRequest request, IList`1<string> groups, string connectionId);
    protected virtual Task OnConnected(IRequest request, string connectionId);
    protected virtual Task OnReconnected(IRequest request, string connectionId);
    protected virtual Task OnReceived(IRequest request, string connectionId, string data);
    protected virtual Task OnDisconnected(IRequest request, string connectionId, bool stopCalled);
    private static Task ProcessPingRequest(HostContext context);
    private Task ProcessNegotiationRequest(HostContext context);
    private Task ProcessStartRequest(HostContext context, string connectionId);
    private static Task SendJsonResponse(HostContext context, string jsonPayload);
    private static string GetUserIdentity(HostContext context);
    private static Task FailResponse(IResponse response, string message, int statusCode);
    private static bool IsNegotiationRequest(IRequest request);
    private static bool IsStartRequest(IRequest request);
    private static bool IsPingRequest(IRequest request);
    private ITransport GetTransport(HostContext context);
    [CompilerGeneratedAttribute]
private static Task <ProcessRequest>b__0(string g, PersistentConnection pc, HostContext c);
    [CompilerGeneratedAttribute]
private string <AppendGroupPrefixes>b__10(string g);
    [CompilerGeneratedAttribute]
private static Task <ProcessStartRequest>b__11(HostContext c);
    [CompilerGeneratedAttribute]
private static void <ProcessStartRequest>b__12(IPerformanceCounterManager c);
}
public enum Microsoft.AspNet.SignalR.QueuingBehavior : Enum {
    public int value__;
    public static QueuingBehavior InitialOnly;
    public static QueuingBehavior Always;
    public static QueuingBehavior Disabled;
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.RequestExtensions : object {
    [ExtensionAttribute]
internal static T Get(IDictionary`2<string, object> values, string key);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.AspNet.SignalR.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DynamicComment_CallsMethodOnServerSideDeferredPromise { get; }
    internal static string DynamicComment_ServerSideTypeIs { get; }
    internal static string Error_AmbiguousMessage { get; }
    internal static string Error_ArgumentNullOrEmpty { get; }
    internal static string Error_BufferSizeOutOfRange { get; }
    internal static string Error_CallerNotAuthorizedToInvokeMethodOn { get; }
    internal static string Error_ConnectionIdIncorrectFormat { get; }
    internal static string Error_ConnectionNotInitialized { get; }
    internal static string Error_DisconnectTimeoutCannotBeConfiguredAfterKeepAlive { get; }
    internal static string Error_DisconnectTimeoutMustBeAtLeastSixSeconds { get; }
    internal static string Error_DoNotReadRequireOutgoing { get; }
    internal static string Error_DuplicateHubNames { get; }
    internal static string Error_DuplicateHubNamesInConnectionData { get; }
    internal static string Error_DuplicatePayloadsForStream { get; }
    internal static string Error_ExceptionContextCanOnlyBeModifiedOnce { get; }
    internal static string Error_HubCouldNotBeResolved { get; }
    internal static string Error_HubInvocationFailed { get; }
    internal static string Error_HubProgressOnlyReportableBeforeMethodReturns { get; }
    internal static string Error_InvalidCursorFormat { get; }
    internal static string Error_InvalidForeverFrameId { get; }
    internal static string Error_IsNotA { get; }
    internal static string Error_JavaScriptProxyDisabled { get; }
    internal static string Error_KeepAliveMustBeGreaterThanTwoSeconds { get; }
    internal static string Error_KeepAliveMustBeNoMoreThanAThirdOfTheDisconnectTimeout { get; }
    internal static string Error_MethodCouldNotBeResolved { get; }
    internal static string Error_MethodCouldNotBeResolvedCandidates { get; }
    internal static string Error_MethodLevelOutgoingAuthorization { get; }
    internal static string Error_MethodMustNotTakeOutParameter { get; }
    internal static string Error_MethodMustNotTakeRefParameter { get; }
    internal static string Error_MethodMustReturnVoidOrTask { get; }
    internal static string Error_MultipleActivatorsAreaRegisteredCallGetServices { get; }
    internal static string Error_NoConfiguration { get; }
    internal static string Error_NoDependencyResolver { get; }
    internal static string Error_NotWebSocketRequest { get; }
    internal static string Error_ParseObjectFailed { get; }
    internal static string Error_ProtocolErrorMissingConnectionToken { get; }
    internal static string Error_ProtocolErrorUnknownTransport { get; }
    internal static string Error_ScaleoutQueuingConfig { get; }
    internal static string Error_StateExceededMaximumLength { get; }
    internal static string Error_StreamClosed { get; }
    internal static string Error_StreamNotOpen { get; }
    internal static string Error_TaskQueueFull { get; }
    internal static string Error_TypeMustBeInterface { get; }
    internal static string Error_TypeMustNotContainEvents { get; }
    internal static string Error_TypeMustNotContainProperties { get; }
    internal static string Error_UnableToAddModulePiplineAlreadyInvoked { get; }
    internal static string Error_UnrecognizedUserIdentity { get; }
    internal static string Error_UsingHubInstanceNotCreatedUnsupported { get; }
    internal static string Error_WebSocketsNotSupported { get; }
    internal static string Forbidden_JSONPDisabled { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DynamicComment_CallsMethodOnServerSideDeferredPromise();
    internal static string get_DynamicComment_ServerSideTypeIs();
    internal static string get_Error_AmbiguousMessage();
    internal static string get_Error_ArgumentNullOrEmpty();
    internal static string get_Error_BufferSizeOutOfRange();
    internal static string get_Error_CallerNotAuthorizedToInvokeMethodOn();
    internal static string get_Error_ConnectionIdIncorrectFormat();
    internal static string get_Error_ConnectionNotInitialized();
    internal static string get_Error_DisconnectTimeoutCannotBeConfiguredAfterKeepAlive();
    internal static string get_Error_DisconnectTimeoutMustBeAtLeastSixSeconds();
    internal static string get_Error_DoNotReadRequireOutgoing();
    internal static string get_Error_DuplicateHubNames();
    internal static string get_Error_DuplicateHubNamesInConnectionData();
    internal static string get_Error_DuplicatePayloadsForStream();
    internal static string get_Error_ExceptionContextCanOnlyBeModifiedOnce();
    internal static string get_Error_HubCouldNotBeResolved();
    internal static string get_Error_HubInvocationFailed();
    internal static string get_Error_HubProgressOnlyReportableBeforeMethodReturns();
    internal static string get_Error_InvalidCursorFormat();
    internal static string get_Error_InvalidForeverFrameId();
    internal static string get_Error_IsNotA();
    internal static string get_Error_JavaScriptProxyDisabled();
    internal static string get_Error_KeepAliveMustBeGreaterThanTwoSeconds();
    internal static string get_Error_KeepAliveMustBeNoMoreThanAThirdOfTheDisconnectTimeout();
    internal static string get_Error_MethodCouldNotBeResolved();
    internal static string get_Error_MethodCouldNotBeResolvedCandidates();
    internal static string get_Error_MethodLevelOutgoingAuthorization();
    internal static string get_Error_MethodMustNotTakeOutParameter();
    internal static string get_Error_MethodMustNotTakeRefParameter();
    internal static string get_Error_MethodMustReturnVoidOrTask();
    internal static string get_Error_MultipleActivatorsAreaRegisteredCallGetServices();
    internal static string get_Error_NoConfiguration();
    internal static string get_Error_NoDependencyResolver();
    internal static string get_Error_NotWebSocketRequest();
    internal static string get_Error_ParseObjectFailed();
    internal static string get_Error_ProtocolErrorMissingConnectionToken();
    internal static string get_Error_ProtocolErrorUnknownTransport();
    internal static string get_Error_ScaleoutQueuingConfig();
    internal static string get_Error_StateExceededMaximumLength();
    internal static string get_Error_StreamClosed();
    internal static string get_Error_StreamNotOpen();
    internal static string get_Error_TaskQueueFull();
    internal static string get_Error_TypeMustBeInterface();
    internal static string get_Error_TypeMustNotContainEvents();
    internal static string get_Error_TypeMustNotContainProperties();
    internal static string get_Error_UnableToAddModulePiplineAlreadyInvoked();
    internal static string get_Error_UnrecognizedUserIdentity();
    internal static string get_Error_UsingHubInstanceNotCreatedUnsupported();
    internal static string get_Error_WebSocketsNotSupported();
    internal static string get_Forbidden_JSONPDisabled();
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.TaskAsyncHelper : object {
    private static Task _emptyTask;
    private static Task`1<bool> _trueTask;
    private static Task`1<bool> _falseTask;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate2b;
    public static Task Empty { get; }
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    private static TaskAsyncHelper();
    private static Task`1<T> MakeTask(T value);
    public static Task get_Empty();
    public static Task`1<bool> get_True();
    public static Task`1<bool> get_False();
    [ExtensionAttribute]
public static Task OrEmpty(Task task);
    [ExtensionAttribute]
public static Task`1<T> OrEmpty(Task`1<T> task);
    public static Task FromAsync(Func`3<AsyncCallback, object, IAsyncResult> beginMethod, Action`1<IAsyncResult> endMethod, object state);
    public static Task`1<T> FromAsync(Func`3<AsyncCallback, object, IAsyncResult> beginMethod, Func`2<IAsyncResult, T> endMethod, object state);
    [ExtensionAttribute]
public static TTask Catch(TTask task, TraceSource traceSource);
    [ExtensionAttribute]
public static TTask Catch(TTask task, TraceSource traceSource, IPerformanceCounter[] counters);
    [ExtensionAttribute]
public static TTask Catch(TTask task, Action`2<AggregateException, object> handler, object state, TraceSource traceSource);
    private static void AttachFaultedContinuation(TTask task, Action`2<AggregateException, object> handler, object state, TraceSource traceSource);
    private static void ExecuteOnFaulted(Action`2<AggregateException, object> handler, object state, AggregateException exception, TraceSource traceSource);
    [ExtensionAttribute]
public static TTask Catch(TTask task, Action`1<AggregateException> handler, TraceSource traceSource);
    [ExtensionAttribute]
public static Task ContinueWithNotComplete(Task task, Action action);
    [ExtensionAttribute]
public static void ContinueWithNotComplete(Task task, TaskCompletionSource`1<object> tcs);
    [ExtensionAttribute]
public static Task ContinueWith(Task task, TaskCompletionSource`1<object> tcs);
    [ExtensionAttribute]
public static void ContinueWith(Task`1<T> task, TaskCompletionSource`1<T> tcs);
    [ExtensionAttribute]
public static Task Then(Task task, Action successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task task, Func`1<TResult> successor);
    [ExtensionAttribute]
public static Task Then(Task task, Action`1<T1> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task task, Action`2<T1, T2> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task Then(Task task, Func`2<T1, Task> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task task, Func`3<T1, T2, Task> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task Then(Task task, Func`4<T1, T2, T3, Task> successor, T1 arg1, T2 arg2, T3 arg3);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`2<T, Task`1<TResult>> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`2<T, TResult> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`3<T, T1, TResult> successor, T1 arg1);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<T> task, Func`4<T, T1, T2, TResult> successor, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static Task Then(Task task, Func`1<Task> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task task, Func`1<Task`1<TResult>> successor);
    [ExtensionAttribute]
public static Task Then(Task`1<TResult> task, Action`1<TResult> successor);
    [ExtensionAttribute]
public static Task Then(Task`1<T> task, Action`2<T, T1> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Then(Task`1<TResult> task, Func`2<TResult, Task> successor);
    [ExtensionAttribute]
public static Task`1<TResult> Then(Task`1<TResult> task, Func`3<Task`1<TResult>, T1, Task`1<TResult>> successor, T1 arg1);
    [ExtensionAttribute]
public static Task Finally(Task task, Action`1<object> next, object state);
    [ExtensionAttribute]
public static Task RunSynchronously(Task task, Action successor);
    [ExtensionAttribute]
public static Task FastUnwrap(Task`1<Task> task);
    [ExtensionAttribute]
public static Task`1<T> FastUnwrap(Task`1<Task`1<T>> task);
    public static Task Delay(TimeSpan timeOut);
    public static Task FromMethod(Action func);
    public static Task FromMethod(Action`1<T1> func, T1 arg);
    public static Task FromMethod(Action`2<T1, T2> func, T1 arg1, T2 arg2);
    public static Task FromMethod(Func`1<Task> func);
    public static Task`1<TResult> FromMethod(Func`1<Task`1<TResult>> func);
    public static Task`1<TResult> FromMethod(Func`1<TResult> func);
    public static Task FromMethod(Func`2<T1, Task> func, T1 arg);
    public static Task FromMethod(Func`3<T1, T2, Task> func, T1 arg1, T2 arg2);
    public static Task FromMethod(Func`4<T1, T2, T3, Task> func, T1 arg1, T2 arg2, T3 arg3);
    public static Task`1<TResult> FromMethod(Func`2<T1, Task`1<TResult>> func, T1 arg);
    public static Task`1<TResult> FromMethod(Func`2<T1, TResult> func, T1 arg);
    public static Task`1<TResult> FromMethod(Func`3<T1, T2, Task`1<TResult>> func, T1 arg1, T2 arg2);
    public static Task`1<TResult> FromMethod(Func`3<T1, T2, TResult> func, T1 arg1, T2 arg2);
    public static Task`1<TResult> FromMethod(Func`4<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3);
    public static Task`1<T> FromResult(T value);
    internal static Task FromError(Exception e);
    internal static Task`1<T> FromError(Exception e);
    [ExtensionAttribute]
internal static void SetUnwrappedException(TaskCompletionSource`1<T> tcs, Exception e);
    [ExtensionAttribute]
internal static bool TrySetUnwrappedException(TaskCompletionSource`1<T> tcs, Exception e);
    private static Task Canceled();
    private static Task`1<T> Canceled();
    internal static CulturePair SaveCulture();
    internal static TResult RunWithPreservedCulture(CulturePair preservedCulture, Func`3<T1, T2, TResult> func, T1 arg1, T2 arg2);
    internal static TResult RunWithPreservedCulture(CulturePair preservedCulture, Func`2<T, TResult> func, T arg);
    internal static void RunWithPreservedCulture(CulturePair preservedCulture, Action`1<T> action, T arg);
    internal static void RunWithPreservedCulture(CulturePair preservedCulture, Action action);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task task, Action`1<Task> continuationAction, TaskContinuationOptions continuationOptions);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task`1<T> task, Action`1<Task`1<T>> continuationAction, TaskContinuationOptions continuationOptions);
    [ExtensionAttribute]
internal static Task`1<TResult> ContinueWithPreservedCulture(Task`1<T> task, Func`2<Task`1<T>, TResult> continuationAction, TaskContinuationOptions continuationOptions);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task task, Action`1<Task> continuationAction);
    [ExtensionAttribute]
internal static Task ContinueWithPreservedCulture(Task`1<T> task, Action`1<Task`1<T>> continuationAction);
    [ExtensionAttribute]
internal static Task`1<TResult> ContinueWithPreservedCulture(Task`1<T> task, Func`2<Task`1<T>, TResult> continuationAction);
    private static Task RunTask(Task task, Action successor);
    private static Task RunTaskSynchronously(Task task, Action`1<object> next, object state, bool onlyOnSuccess);
    [CompilerGeneratedAttribute]
private static void <Catch>b__0(AggregateException ex);
    [CompilerGeneratedAttribute]
private static void <Catch>b__7(AggregateException ex, object state);
    [CompilerGeneratedAttribute]
private static void <RunSynchronously>b__22(object state);
    [CompilerGeneratedAttribute]
private static TResult <RunWithPreservedCulture>b__28(Func`2<T, TResult> f, T state);
    [CompilerGeneratedAttribute]
private static object <RunWithPreservedCulture>b__29(Action`1<T> f, T state);
    [CompilerGeneratedAttribute]
private static void <RunWithPreservedCulture>b__2a(Action f);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.TaskAwaiterHelper : object {
    [ExtensionAttribute]
internal static PreserveCultureAwaiter PreserveCulture(Task task);
    [ExtensionAttribute]
internal static PreserveCultureAwaiter PreserveCultureNotContext(Task task);
    [ExtensionAttribute]
internal static PreserveCultureAwaiter`1<T> PreserveCulture(Task`1<T> task);
    [ExtensionAttribute]
internal static PreserveCultureAwaiter`1<T> PreserveCultureNotContext(Task`1<T> task);
    private static void PreserveCultureUnsafeOnCompleted(ICriticalNotifyCompletion notifier, Action continuation, bool useSyncContext);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNet.SignalR.Tracing.ITraceManager {
    public SourceSwitch Switch { get; }
    public TraceSource Item { get; }
    public abstract virtual SourceSwitch get_Switch();
    public abstract virtual TraceSource get_Item(string name);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNet.SignalR.Tracing.TraceManager : object {
    private ConcurrentDictionary`2<string, TraceSource> _sources;
    private TextWriterTraceListener _hostTraceListener;
    [CompilerGeneratedAttribute]
private SourceSwitch <Switch>k__BackingField;
    public SourceSwitch Switch { get; private set; }
    public TraceSource Item { get; }
    public TraceManager(TextWriterTraceListener hostTraceListener);
    [CompilerGeneratedAttribute]
public sealed virtual SourceSwitch get_Switch();
    [CompilerGeneratedAttribute]
private void set_Switch(SourceSwitch value);
    public sealed virtual TraceSource get_Item(string name);
    private TraceSource CreateTraceSource(string name);
    [CompilerGeneratedAttribute]
private TraceSource <get_Item>b__0(string key);
}
public class Microsoft.AspNet.SignalR.Transports.ForeverFrameTransport : ForeverTransport {
    private static string _initPrefix;
    private static string _initSuffix;
    private HTMLTextWriter _htmlOutputWriter;
    private IPerformanceCounterManager _counters;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`2<ForeverFrameTransportContext, Task> CS$<>9__CachedAnonymousMethodDelegate39;
    public TextWriter OutputWriter { get; }
    private HTMLTextWriter HTMLOutputWriter { get; }
    public ForeverFrameTransport(HostContext context, IDependencyResolver resolver);
    public ForeverFrameTransport(HostContext context, IDependencyResolver resolver, IPerformanceCounterManager performanceCounterManager);
    public virtual TextWriter get_OutputWriter();
    private HTMLTextWriter get_HTMLOutputWriter();
    public virtual void IncrementConnectionsCount();
    public virtual void DecrementConnectionsCount();
    public virtual Task KeepAlive();
    public virtual Task Send(PersistentResponse response);
    protected internal virtual Task InitializeResponse(ITransportConnection connection);
    private static Task Initialize(object state);
    private static Task WriteInit(ForeverFrameTransportContext context);
    private static Task PerformSend(object state);
    private static Task PerformKeepAlive(object state);
    [CompilerGeneratedAttribute]
private static Task <KeepAlive>b__34(object state);
    [CompilerGeneratedAttribute]
private static Task <Send>b__36(object s);
    [CompilerGeneratedAttribute]
private static Task <InitializeResponse>b__38(ForeverFrameTransportContext s);
}
public abstract class Microsoft.AspNet.SignalR.Transports.ForeverTransport : TransportDisconnectBase {
    private static ProtocolResolver _protocolResolver;
    private IPerformanceCounterManager _counters;
    private JsonSerializer _jsonSerializer;
    private IDisposable _busRegistration;
    internal RequestLifetime _transportLifetime;
    internal Action AfterReceive;
    internal Action BeforeCancellationTokenCallbackRegistered;
    internal Action BeforeReceive;
    internal Action`1<Exception> AfterRequestEnd;
    [CompilerGeneratedAttribute]
private Func`2<string, Task> <Received>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task> <Connected>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task> <Reconnected>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<ForeverTransport> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`3<ForeverTransport, ITransportConnection, Task> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Action`2<AggregateException, object> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`3<PersistentResponse, object, Task`1<bool>> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Action`2<AggregateException, object> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Func`1<Task`1<bool>> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`1<Task`1<bool>> CS$<>9__CachedAnonymousMethodDelegate33;
    protected int MaxMessages { get; }
    protected JsonSerializer JsonSerializer { get; }
    public Func`2<string, Task> Received { get; public set; }
    public Func`1<Task> Connected { get; public set; }
    public Func`1<Task> Reconnected { get; public set; }
    protected ForeverTransport(HostContext context, IDependencyResolver resolver);
    protected ForeverTransport(HostContext context, JsonSerializer jsonSerializer, ITransportHeartbeat heartbeat, IPerformanceCounterManager performanceCounterManager, ITraceManager traceManager);
    private static ForeverTransport();
    protected virtual int get_MaxMessages();
    protected JsonSerializer get_JsonSerializer();
    protected virtual void OnSending(string payload);
    protected virtual void OnSendingResponse(PersistentResponse response);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<string, Task> get_Received();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Received(Func`2<string, Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<Task> get_Connected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connected(Func`1<Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<Task> get_Reconnected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reconnected(Func`1<Task> value);
    protected virtual Task InitializePersistentState();
    protected Task ProcessRequestCore(ITransportConnection connection);
    public virtual Task ProcessRequest(ITransportConnection connection);
    public abstract virtual Task Send(PersistentResponse response);
    public virtual Task Send(object value);
    protected internal virtual Task InitializeResponse(ITransportConnection connection);
    protected void OnError(Exception ex);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Transports.ForeverTransport/<ProcessSendRequest>d__12")]
[DebuggerStepThroughAttribute]
protected virtual Task ProcessSendRequest();
    private Task ProcessReceiveRequest(ITransportConnection connection);
    private Task ProcessMessages(ITransportConnection connection, Func`1<Task> initialize);
    private static void Cancel(object state);
    protected virtual Task`1<bool> OnMessageReceived(PersistentResponse response);
    private static Task PerformSend(object state);
    [CompilerGeneratedAttribute]
private static void <InitializePersistentState>b__c(ForeverTransport t);
    [CompilerGeneratedAttribute]
private static Task <ProcessRequestCore>b__e(ForeverTransport t, ITransportConnection c);
    [CompilerGeneratedAttribute]
private static Task <Send>b__10(object state);
    [CompilerGeneratedAttribute]
private static void <ProcessMessages>b__24(object state);
    [CompilerGeneratedAttribute]
private Task <ProcessMessages>b__25(object state);
    [CompilerGeneratedAttribute]
private static void <ProcessMessages>b__26(AggregateException ex, object state);
    [CompilerGeneratedAttribute]
private static Task`1<bool> <ProcessMessages>b__27(PersistentResponse response, object state);
    [CompilerGeneratedAttribute]
private static void <ProcessMessages>b__28(AggregateException ex, object state);
    [CompilerGeneratedAttribute]
private static void <ProcessMessages>b__29(object state);
    [CompilerGeneratedAttribute]
private static Task`1<bool> <OnMessageReceived>b__30();
    [CompilerGeneratedAttribute]
private static Task`1<bool> <OnMessageReceived>b__31();
}
internal class Microsoft.AspNet.SignalR.Transports.HttpRequestLifeTime : object {
    private TaskCompletionSource`1<object> _lifetimeTcs;
    private TransportDisconnectBase _transport;
    private TaskQueue _writeQueue;
    private TraceSource _trace;
    private string _connectionId;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate1;
    public Task Task { get; }
    public HttpRequestLifeTime(TransportDisconnectBase transport, TaskQueue writeQueue, TraceSource trace, string connectionId);
    public Task get_Task();
    public void Complete();
    public void Complete(Exception error);
    [CompilerGeneratedAttribute]
private static void <Complete>b__0(object state);
}
public interface Microsoft.AspNet.SignalR.Transports.ITrackingConnection {
    public string ConnectionId { get; }
    public CancellationToken CancellationToken { get; }
    public Task ConnectTask { get; }
    public bool IsAlive { get; }
    public bool IsTimedOut { get; }
    public bool SupportsKeepAlive { get; }
    public bool RequiresTimeout { get; }
    public TimeSpan DisconnectThreshold { get; }
    public Uri Url { get; }
    public abstract virtual string get_ConnectionId();
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual Task get_ConnectTask();
    public abstract virtual bool get_IsAlive();
    public abstract virtual bool get_IsTimedOut();
    public abstract virtual bool get_SupportsKeepAlive();
    public abstract virtual bool get_RequiresTimeout();
    public abstract virtual TimeSpan get_DisconnectThreshold();
    public abstract virtual Uri get_Url();
    public abstract virtual void ApplyState(TransportConnectionStates states);
    public abstract virtual Task Disconnect();
    public abstract virtual void Timeout();
    public abstract virtual Task KeepAlive();
    public abstract virtual void IncrementConnectionsCount();
    public abstract virtual void DecrementConnectionsCount();
    public abstract virtual void End();
}
public interface Microsoft.AspNet.SignalR.Transports.ITransport {
    public Func`2<string, Task> Received { get; public set; }
    public Func`1<Task> Connected { get; public set; }
    public Func`1<Task> Reconnected { get; public set; }
    public Func`2<bool, Task> Disconnected { get; public set; }
    public string ConnectionId { get; public set; }
    public abstract virtual Func`2<string, Task> get_Received();
    public abstract virtual void set_Received(Func`2<string, Task> value);
    public abstract virtual Func`1<Task> get_Connected();
    public abstract virtual void set_Connected(Func`1<Task> value);
    public abstract virtual Func`1<Task> get_Reconnected();
    public abstract virtual void set_Reconnected(Func`1<Task> value);
    public abstract virtual Func`2<bool, Task> get_Disconnected();
    public abstract virtual void set_Disconnected(Func`2<bool, Task> value);
    public abstract virtual string get_ConnectionId();
    public abstract virtual void set_ConnectionId(string value);
    public abstract virtual Task`1<string> GetGroupsToken();
    public abstract virtual Task ProcessRequest(ITransportConnection connection);
    public abstract virtual Task Send(object value);
}
public interface Microsoft.AspNet.SignalR.Transports.ITransportConnection {
    public abstract virtual IDisposable Receive(string messageId, Func`3<PersistentResponse, object, Task`1<bool>> callback, int maxMessages, object state);
    public abstract virtual Task Send(ConnectionMessage message);
}
public interface Microsoft.AspNet.SignalR.Transports.ITransportHeartbeat {
    public abstract virtual ITrackingConnection AddOrUpdateConnection(ITrackingConnection connection);
    public abstract virtual void MarkConnection(ITrackingConnection connection);
    public abstract virtual void RemoveConnection(ITrackingConnection connection);
    public abstract virtual IList`1<ITrackingConnection> GetConnections();
}
public interface Microsoft.AspNet.SignalR.Transports.ITransportManager {
    public abstract virtual ITransport GetTransport(HostContext hostContext);
    public abstract virtual bool SupportsTransport(string transportName);
}
public class Microsoft.AspNet.SignalR.Transports.LongPollingTransport : ForeverTransport {
    private IConfigurationManager _configurationManager;
    private IPerformanceCounterManager _counters;
    private bool _responseSent;
    [CompilerGeneratedAttribute]
private static Action`2<INameValueCollection, LongPollingTransport> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<INameValueCollection, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`3<LongPollingTransport, PersistentResponse, Task> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`3<LongPollingTransport, PersistentResponse, Task> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`1<Task`1<bool>> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<LongPollingTransport, Task> CS$<>9__CachedAnonymousMethodDelegate15;
    public TimeSpan DisconnectThreshold { get; }
    private bool IsJsonp { get; }
    private string JsonpCallback { get; }
    public bool SupportsKeepAlive { get; }
    public bool RequiresTimeout { get; }
    protected int MaxMessages { get; }
    protected bool SuppressReconnect { get; }
    public LongPollingTransport(HostContext context, IDependencyResolver resolver);
    public LongPollingTransport(HostContext context, JsonSerializer jsonSerializer, ITransportHeartbeat heartbeat, IPerformanceCounterManager performanceCounterManager, ITraceManager traceManager, IConfigurationManager configurationManager);
    public virtual TimeSpan get_DisconnectThreshold();
    private bool get_IsJsonp();
    private string get_JsonpCallback();
    public virtual bool get_SupportsKeepAlive();
    public virtual bool get_RequiresTimeout();
    protected virtual int get_MaxMessages();
    protected virtual bool get_SuppressReconnect();
    protected virtual Task InitializeMessageId();
    public virtual Task`1<string> GetGroupsToken();
    public virtual Task KeepAlive();
    public virtual Task Send(PersistentResponse response);
    public virtual Task Send(object value);
    public virtual void IncrementConnectionsCount();
    public virtual void DecrementConnectionsCount();
    protected virtual Task`1<bool> OnMessageReceived(PersistentResponse response);
    protected internal virtual Task InitializeResponse(ITransportConnection connection);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Transports.LongPollingTransport/<ProcessSendRequest>d__16")]
protected virtual Task ProcessSendRequest();
    private static Task WriteInit(LongPollingTransport transport);
    private static Task PerformKeepAlive(object state);
    private static Task PerformPartialSend(object state);
    private static Task PerformCompleteSend(object state);
    private void AddTransportData(PersistentResponse response);
    [CompilerGeneratedAttribute]
private static void <InitializeMessageId>b__0(INameValueCollection form, LongPollingTransport t);
    [CompilerGeneratedAttribute]
private static string <GetGroupsToken>b__2(INameValueCollection form);
    [CompilerGeneratedAttribute]
private static Task <KeepAlive>b__4(object state);
    [CompilerGeneratedAttribute]
private static Task <Send>b__6(object state);
    [CompilerGeneratedAttribute]
private static Task <Send>b__8(object state);
    [CompilerGeneratedAttribute]
private static Task <OnMessageReceived>b__a(LongPollingTransport transport, PersistentResponse resp);
    [CompilerGeneratedAttribute]
private Task`1<bool> <OnMessageReceived>b__b();
    [CompilerGeneratedAttribute]
private Task`1<bool> <OnMessageReceived>b__c();
    [CompilerGeneratedAttribute]
private static Task <OnMessageReceived>b__d(LongPollingTransport transport, PersistentResponse resp);
    [CompilerGeneratedAttribute]
private static Task`1<bool> <OnMessageReceived>b__e();
    [CompilerGeneratedAttribute]
private static Task <InitializeResponse>b__14(LongPollingTransport s);
}
public class Microsoft.AspNet.SignalR.Transports.PersistentResponse : object {
    private Func`2<Message, bool> _exclude;
    private Action`1<TextWriter> _writeCursor;
    [CompilerGeneratedAttribute]
private IList`1<ArraySegment`1<Message>> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Terminal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initializing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Aborted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reconnect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupsToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LongPollDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Message, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<TextWriter> CS$<>9__CachedAnonymousMethodDelegate3;
    public IList`1<ArraySegment`1<Message>> Messages { get; public set; }
    public bool Terminal { get; public set; }
    public int TotalCount { get; public set; }
    public bool Initializing { get; public set; }
    public bool Aborted { get; public set; }
    public bool Reconnect { get; public set; }
    public string GroupsToken { get; public set; }
    public Nullable`1<long> LongPollDelay { get; public set; }
    public PersistentResponse(Func`2<Message, bool> exclude, Action`1<TextWriter> writeCursor);
    [CompilerGeneratedAttribute]
public IList`1<ArraySegment`1<Message>> get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(IList`1<ArraySegment`1<Message>> value);
    [CompilerGeneratedAttribute]
public bool get_Terminal();
    [CompilerGeneratedAttribute]
public void set_Terminal(bool value);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Initializing();
    [CompilerGeneratedAttribute]
public void set_Initializing(bool value);
    [CompilerGeneratedAttribute]
public bool get_Aborted();
    [CompilerGeneratedAttribute]
public void set_Aborted(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reconnect();
    [CompilerGeneratedAttribute]
public void set_Reconnect(bool value);
    [CompilerGeneratedAttribute]
public string get_GroupsToken();
    [CompilerGeneratedAttribute]
public void set_GroupsToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LongPollDelay();
    [CompilerGeneratedAttribute]
public void set_LongPollDelay(Nullable`1<long> value);
    private sealed virtual override void Microsoft.AspNet.SignalR.Json.IJsonWritable.WriteJson(TextWriter writer);
    private void WriteMessages(TextWriter writer, JsonTextWriter jsonWriter);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(Message message);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(TextWriter writer);
}
public class Microsoft.AspNet.SignalR.Transports.ServerSentEventsTransport : ForeverTransport {
    private IPerformanceCounterManager _counters;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ServerSentEventsTransport, Task> CS$<>9__CachedAnonymousMethodDelegate5;
    public ServerSentEventsTransport(HostContext context, IDependencyResolver resolver);
    public ServerSentEventsTransport(HostContext context, IDependencyResolver resolver, IPerformanceCounterManager performanceCounterManager);
    public virtual Task KeepAlive();
    public virtual Task Send(PersistentResponse response);
    public virtual void IncrementConnectionsCount();
    public virtual void DecrementConnectionsCount();
    protected internal virtual Task InitializeResponse(ITransportConnection connection);
    private static Task PerformKeepAlive(object state);
    private static Task PerformSend(object state);
    private static Task WriteInit(ServerSentEventsTransport transport);
    [CompilerGeneratedAttribute]
private static Task <KeepAlive>b__0(object state);
    [CompilerGeneratedAttribute]
private static Task <Send>b__2(object state);
    [CompilerGeneratedAttribute]
private static Task <InitializeResponse>b__4(ServerSentEventsTransport s);
}
[ExtensionAttribute]
internal static class Microsoft.AspNet.SignalR.Transports.TransportConnectionExtensions : object {
    [ExtensionAttribute]
internal static Task Initialize(ITransportConnection connection, string connectionId);
    [ExtensionAttribute]
internal static Task Abort(ITransportConnection connection, string connectionId);
    private static Task SendCommand(ITransportConnection connection, string connectionId, CommandType commandType);
}
[FlagsAttribute]
public enum Microsoft.AspNet.SignalR.Transports.TransportConnectionStates : Enum {
    public int value__;
    public static TransportConnectionStates None;
    public static TransportConnectionStates Added;
    public static TransportConnectionStates Removed;
    public static TransportConnectionStates Replaced;
    public static TransportConnectionStates QueueDrained;
    public static TransportConnectionStates HttpRequestEnded;
    public static TransportConnectionStates Disconnected;
    public static TransportConnectionStates Aborted;
    public static TransportConnectionStates Disposed;
}
public abstract class Microsoft.AspNet.SignalR.Transports.TransportDisconnectBase : object {
    private HostContext _context;
    private ITransportHeartbeat _heartbeat;
    private TextWriter _outputWriter;
    private TraceSource _trace;
    private int _timedOut;
    private IPerformanceCounterManager _counters;
    private int _ended;
    private TransportConnectionStates _state;
    protected string _lastMessageId;
    internal static Func`1<Task> _emptyTaskFunc;
    internal TaskCompletionSource`1<object> _connectTcs;
    private CancellationToken _connectionEndToken;
    private SafeCancellationTokenSource _connectionEndTokenSource;
    private Task _lastWriteTask;
    private CancellationToken _hostShutdownToken;
    private IDisposable _hostRegistration;
    private IDisposable _connectionEndRegistration;
    internal HttpRequestLifeTime _requestLifeTime;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskQueue <WriteQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<bool, Task> <Disconnected>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransportConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<AggregateException, object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`1<Task> CS$<>9__CachedAnonymousMethodDelegateb;
    protected TraceSource Trace { get; }
    public string ConnectionId { get; public set; }
    protected string LastMessageId { get; }
    public TextWriter OutputWriter { get; }
    internal TaskQueue WriteQueue { get; internal set; }
    public Func`2<bool, Task> Disconnected { get; public set; }
    public CancellationToken CancellationToken { get; }
    public bool IsAlive { get; }
    public Task ConnectTask { get; }
    protected CancellationToken ConnectionEndToken { get; }
    protected CancellationToken HostShutdownToken { get; }
    public bool IsTimedOut { get; }
    public bool SupportsKeepAlive { get; }
    public bool RequiresTimeout { get; }
    public TimeSpan DisconnectThreshold { get; }
    protected bool IsConnectRequest { get; }
    protected bool IsSendRequest { get; }
    protected bool IsAbortRequest { get; }
    protected bool SuppressReconnect { get; }
    protected ITransportConnection Connection { get; protected set; }
    protected HostContext Context { get; }
    protected ITransportHeartbeat Heartbeat { get; }
    public Uri Url { get; }
    protected TransportDisconnectBase(HostContext context, ITransportHeartbeat heartbeat, IPerformanceCounterManager performanceCounterManager, ITraceManager traceManager);
    private static TransportDisconnectBase();
    protected TraceSource get_Trace();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionId(string value);
    protected string get_LastMessageId();
    protected virtual Task InitializeMessageId();
    public virtual Task`1<string> GetGroupsToken();
    public virtual TextWriter get_OutputWriter();
    [CompilerGeneratedAttribute]
internal TaskQueue get_WriteQueue();
    [CompilerGeneratedAttribute]
internal void set_WriteQueue(TaskQueue value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<bool, Task> get_Disconnected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Disconnected(Func`2<bool, Task> value);
    public virtual CancellationToken get_CancellationToken();
    public virtual bool get_IsAlive();
    public sealed virtual Task get_ConnectTask();
    protected CancellationToken get_ConnectionEndToken();
    protected CancellationToken get_HostShutdownToken();
    public sealed virtual bool get_IsTimedOut();
    public virtual bool get_SupportsKeepAlive();
    public virtual bool get_RequiresTimeout();
    public virtual TimeSpan get_DisconnectThreshold();
    protected bool get_IsConnectRequest();
    protected bool get_IsSendRequest();
    protected bool get_IsAbortRequest();
    protected virtual bool get_SuppressReconnect();
    [CompilerGeneratedAttribute]
protected ITransportConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(ITransportConnection value);
    protected HostContext get_Context();
    protected ITransportHeartbeat get_Heartbeat();
    public sealed virtual Uri get_Url();
    protected virtual TextWriter CreateResponseWriter();
    protected void IncrementErrors();
    public abstract virtual void IncrementConnectionsCount();
    public abstract virtual void DecrementConnectionsCount();
    public sealed virtual Task Disconnect();
    protected Task Abort();
    private Task Abort(bool clean);
    public sealed virtual void ApplyState(TransportConnectionStates states);
    public sealed virtual void Timeout();
    public virtual Task KeepAlive();
    public sealed virtual void End();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected internal Task EnqueueOperation(Func`1<Task> writeAsync);
    protected internal virtual Task EnqueueOperation(Func`2<object, Task> writeAsync, object state);
    protected virtual Task InitializePersistentState();
    private static void OnDisconnectError(AggregateException ex, object state);
    [CompilerGeneratedAttribute]
private static void <Abort>b__0(AggregateException ex, object state);
    [CompilerGeneratedAttribute]
private static void <Abort>b__1(object state);
    [CompilerGeneratedAttribute]
private static Task <EnqueueOperation>b__4(object state);
    [CompilerGeneratedAttribute]
private static void <InitializePersistentState>b__6(object state);
    [CompilerGeneratedAttribute]
private static void <InitializePersistentState>b__7(object state);
    [CompilerGeneratedAttribute]
private static Task <.cctor>b__a();
}
public class Microsoft.AspNet.SignalR.Transports.TransportHeartbeat : object {
    private ConcurrentDictionary`2<string, ConnectionMetadata> _connections;
    private Timer _timer;
    private IConfigurationManager _configurationManager;
    private TraceSource _trace;
    private IPerformanceCounterManager _counters;
    private object _counterLock;
    private int _running;
    private ulong _heartbeatCount;
    [CompilerGeneratedAttribute]
private static Func`2<ConnectionMetadata, ITrackingConnection> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Action`2<AggregateException, object> CS$<>9__CachedAnonymousMethodDelegate9;
    private TraceSource Trace { get; }
    public TransportHeartbeat(IDependencyResolver resolver);
    private TraceSource get_Trace();
    public sealed virtual ITrackingConnection AddOrUpdateConnection(ITrackingConnection connection);
    public sealed virtual void RemoveConnection(ITrackingConnection connection);
    public sealed virtual void MarkConnection(ITrackingConnection connection);
    public sealed virtual IList`1<ITrackingConnection> GetConnections();
    private void Beat(object state);
    private void CheckTimeoutAndKeepAlive(ConnectionMetadata metadata);
    private void CheckDisconnect(ConnectionMetadata metadata);
    private bool RaiseDisconnect(ConnectionMetadata metadata);
    private bool RaiseKeepAlive(ConnectionMetadata metadata);
    private bool RaiseTimeout(ConnectionMetadata metadata);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private static void OnKeepAliveError(AggregateException ex, object state);
    [CompilerGeneratedAttribute]
private static ITrackingConnection <GetConnections>b__5(ConnectionMetadata metadata);
    [CompilerGeneratedAttribute]
private static void <CheckTimeoutAndKeepAlive>b__8(AggregateException ex, object state);
}
public class Microsoft.AspNet.SignalR.Transports.TransportManager : object {
    private ConcurrentDictionary`2<string, Func`2<HostContext, ITransport>> _transports;
    public TransportManager(IDependencyResolver resolver);
    public void Register(string transportName, Func`2<HostContext, ITransport> transportFactory);
    public void Remove(string transportName);
    public sealed virtual ITransport GetTransport(HostContext hostContext);
    public sealed virtual bool SupportsTransport(string transportName);
}
public class Microsoft.AspNet.SignalR.Transports.WebSocketTransport : ForeverTransport {
    private HostContext _context;
    private IWebSocket _socket;
    private bool _isAlive;
    private Nullable`1<int> _maxIncomingMessageSize;
    private Action`1<string> _message;
    private Action _closed;
    private Action`1<Exception> _error;
    private IPerformanceCounterManager _counters;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate7;
    public bool IsAlive { get; }
    public CancellationToken CancellationToken { get; }
    public WebSocketTransport(HostContext context, IDependencyResolver resolver);
    public WebSocketTransport(HostContext context, JsonSerializer serializer, ITransportHeartbeat heartbeat, IPerformanceCounterManager performanceCounterManager, ITraceManager traceManager, Nullable`1<int> maxIncomingMessageSize);
    public virtual bool get_IsAlive();
    public virtual CancellationToken get_CancellationToken();
    public virtual Task KeepAlive();
    public virtual Task ProcessRequest(ITransportConnection connection);
    protected virtual TextWriter CreateResponseWriter();
    public virtual Task Send(object value);
    public virtual Task Send(PersistentResponse response);
    public virtual void IncrementConnectionsCount();
    public virtual void DecrementConnectionsCount();
    private Task AcceptWebSocketRequest(Func`2<IWebSocket, Task> callback);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.Transports.WebSocketTransport/<PerformSend>d__8")]
private static Task PerformSend(object state);
    private void OnMessage(string message);
    private void OnClosed();
    private void OnSocketError(Exception error);
    [CompilerGeneratedAttribute]
private static Task <KeepAlive>b__0(object state);
    [CompilerGeneratedAttribute]
private static Task <Send>b__6(object state);
}
public class Microsoft.AspNet.SignalR.WebSockets.DefaultWebSocketHandler : WebSocketHandler {
    private IWebSocket _webSocket;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <NextMessageToSend>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <Microsoft.AspNet.SignalR.Hosting.IWebSocket.OnMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Microsoft.AspNet.SignalR.Hosting.IWebSocket.OnClose>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <Microsoft.AspNet.SignalR.Hosting.IWebSocket.OnError>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Action`1<Exception> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate19;
    internal ArraySegment`1<byte> NextMessageToSend { get; private set; }
    private Action`1<string> Microsoft.AspNet.SignalR.Hosting.IWebSocket.OnMessage { get; private set; }
    private Action Microsoft.AspNet.SignalR.Hosting.IWebSocket.OnClose { get; private set; }
    private Action`1<Exception> Microsoft.AspNet.SignalR.Hosting.IWebSocket.OnError { get; private set; }
    public DefaultWebSocketHandler(Nullable`1<int> maxIncomingMessageSize);
    [CompilerGeneratedAttribute]
internal ArraySegment`1<byte> get_NextMessageToSend();
    [CompilerGeneratedAttribute]
private void set_NextMessageToSend(ArraySegment`1<byte> value);
    public virtual void OnClose();
    public virtual void OnError();
    public virtual void OnMessage(string message);
    [CompilerGeneratedAttribute]
private sealed virtual override Action`1<string> Microsoft.AspNet.SignalR.Hosting.IWebSocket.get_OnMessage();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNet.SignalR.Hosting.IWebSocket.set_OnMessage(Action`1<string> value);
    [CompilerGeneratedAttribute]
private sealed virtual override Action Microsoft.AspNet.SignalR.Hosting.IWebSocket.get_OnClose();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNet.SignalR.Hosting.IWebSocket.set_OnClose(Action value);
    [CompilerGeneratedAttribute]
private sealed virtual override Action`1<Exception> Microsoft.AspNet.SignalR.Hosting.IWebSocket.get_OnError();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.AspNet.SignalR.Hosting.IWebSocket.set_OnError(Action`1<Exception> value);
    private sealed virtual override Task Microsoft.AspNet.SignalR.Hosting.IWebSocket.Send(string value);
    public virtual Task Send(string message);
    public virtual Task CloseAsync();
    public sealed virtual Task SendChunk(ArraySegment`1<byte> message);
    public sealed virtual Task Flush();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__14();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__15(Exception e);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__16(string msg);
}
public abstract class Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler : object {
    private static int _receiveLoopBufferSize;
    private static TimeSpan _closeTimeout;
    private Nullable`1<int> _maxIncomingMessageSize;
    private TaskQueue _sendQueue;
    [CompilerGeneratedAttribute]
private WebSocket <WebSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<object, Task`1<WebSocketMessage>> CS$<>9__CachedAnonymousMethodDelegated;
    public Nullable`1<int> MaxIncomingMessageSize { get; }
    internal WebSocket WebSocket { get; internal set; }
    public Exception Error { get; public set; }
    protected WebSocketHandler(Nullable`1<int> maxIncomingMessageSize);
    private static WebSocketHandler();
    public virtual void OnOpen();
    public virtual void OnMessage(string message);
    public virtual void OnMessage(Byte[] message);
    public virtual void OnError();
    public virtual void OnClose();
    public virtual Task Send(string message);
    internal Task SendAsync(string message);
    internal virtual Task SendAsync(ArraySegment`1<byte> message, WebSocketMessageType messageType, bool endOfMessage);
    public virtual Task CloseAsync();
    public Nullable`1<int> get_MaxIncomingMessageSize();
    [CompilerGeneratedAttribute]
internal WebSocket get_WebSocket();
    [CompilerGeneratedAttribute]
internal void set_WebSocket(WebSocket value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
    internal Task ProcessWebSocketRequestAsync(WebSocket webSocket, CancellationToken disconnectToken);
    [AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler/<ProcessWebSocketRequestAsync>d__e")]
[DebuggerStepThroughAttribute]
internal Task ProcessWebSocketRequestAsync(WebSocket webSocket, CancellationToken disconnectToken, Func`2<object, Task`1<WebSocketMessage>> messageRetriever, object state);
    private static bool IsFatalException(Exception ex);
    private static bool IsClosedOrClosedSent(WebSocket webSocket);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler/<<SendAsync>b__0>d__2")]
private static Task <SendAsync>b__0(object state);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.WebSockets.WebSocketHandler/<<CloseAsync>b__6>d__8")]
private static Task <CloseAsync>b__6(object state);
    [CompilerGeneratedAttribute]
private static Task`1<WebSocketMessage> <ProcessWebSocketRequestAsync>b__c(object state);
}
internal class Microsoft.AspNet.SignalR.WebSockets.WebSocketMessage : object {
    public static WebSocketMessage EmptyTextMessage;
    public static WebSocketMessage EmptyBinaryMessage;
    public static WebSocketMessage CloseMessage;
    public object Data;
    public WebSocketMessageType MessageType;
    public WebSocketMessage(object data, WebSocketMessageType messageType);
    private static WebSocketMessage();
}
internal static class Microsoft.AspNet.SignalR.WebSockets.WebSocketMessageReader : object {
    private static ArraySegment`1<byte> _emptyArraySegment;
    private static WebSocketMessageReader();
    private static Byte[] BufferSliceToByteArray(Byte[] buffer, int count);
    private static string BufferSliceToString(Byte[] buffer, int count);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNet.SignalR.WebSockets.WebSocketMessageReader/<ReadMessageAsync>d__0")]
public static Task`1<WebSocketMessage> ReadMessageAsync(WebSocket webSocket, int bufferSize, Nullable`1<int> maxMessageSize, CancellationToken disconnectToken);
    private static bool TryGetMessage(WebSocketReceiveResult receiveResult, Byte[] buffer, WebSocketMessage& message);
}
[ExtensionAttribute]
public static class Owin.ObsoleteOwinExtensions : object {
    [ObsoleteAttribute("Use IAppBuilder.MapSignalR in an Owin Startup class. See http://go.microsoft.com/fwlink/?LinkId=320578 for more details.")]
[ExtensionAttribute]
public static IAppBuilder MapHubs(IAppBuilder builder);
    [ObsoleteAttribute("Use IAppBuilder.MapSignalR in an Owin Startup class. See http://go.microsoft.com/fwlink/?LinkId=320578 for more details.")]
[ExtensionAttribute]
public static IAppBuilder MapHubs(IAppBuilder builder, HubConfiguration configuration);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IAppBuilder.MapSignalR in an Owin Startup class. See http://go.microsoft.com/fwlink/?LinkId=320578 for more details.")]
public static IAppBuilder MapHubs(IAppBuilder builder, string path, HubConfiguration configuration);
    [ObsoleteAttribute("Use IAppBuilder.MapSignalR<TConnection> in an Owin Startup class. See http://go.microsoft.com/fwlink/?LinkId=320578 for more details.")]
[ExtensionAttribute]
public static IAppBuilder MapConnection(IAppBuilder builder, string path);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IAppBuilder.MapSignalR<TConnection> in an Owin Startup class. See http://go.microsoft.com/fwlink/?LinkId=320578 for more details.")]
public static IAppBuilder MapConnection(IAppBuilder builder, string path, ConnectionConfiguration configuration);
    [ExtensionAttribute]
[ObsoleteAttribute("Use IAppBuilder.MapSignalR in an Owin Startup class. See http://go.microsoft.com/fwlink/?LinkId=320578 for more details.")]
public static IAppBuilder MapConnection(IAppBuilder builder, string path, Type connectionType, ConnectionConfiguration configuration);
    private static bool IsEmptyOrForwardSlash(string path);
}
[ExtensionAttribute]
public static class Owin.OwinExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder MapSignalR(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder MapSignalR(IAppBuilder builder, HubConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder MapSignalR(IAppBuilder builder, string path, HubConfiguration configuration);
    [ExtensionAttribute]
public static void RunSignalR(IAppBuilder builder);
    [ExtensionAttribute]
public static void RunSignalR(IAppBuilder builder, HubConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder MapSignalR(IAppBuilder builder, string path);
    [ExtensionAttribute]
public static IAppBuilder MapSignalR(IAppBuilder builder, string path, ConnectionConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder MapSignalR(IAppBuilder builder, string path, Type connectionType, ConnectionConfiguration configuration);
    [ExtensionAttribute]
public static void RunSignalR(IAppBuilder builder);
    [ExtensionAttribute]
public static void RunSignalR(IAppBuilder builder, ConnectionConfiguration configuration);
    [ExtensionAttribute]
public static void RunSignalR(IAppBuilder builder, Type connectionType, ConnectionConfiguration configuration);
    [ExtensionAttribute]
private static IAppBuilder UseSignalRMiddleware(IAppBuilder builder, Object[] args);
}
[ExtensionAttribute]
public static class System.Diagnostics.TraceSourceExtensions : object {
    [ExtensionAttribute]
public static void TraceVerbose(TraceSource traceSource, string msg);
    [ExtensionAttribute]
public static void TraceVerbose(TraceSource traceSource, string format, Object[] args);
    [ExtensionAttribute]
public static void TraceWarning(TraceSource traceSource, string msg);
    [ExtensionAttribute]
public static void TraceWarning(TraceSource traceSource, string format, Object[] args);
    [ExtensionAttribute]
public static void TraceError(TraceSource traceSource, string msg);
    [ExtensionAttribute]
public static void TraceError(TraceSource traceSource, string format, Object[] args);
    private static void Trace(TraceSource traceSource, TraceEventType eventType, string msg);
    private static void Trace(TraceSource traceSource, TraceEventType eventType, string format, Object[] args);
}
