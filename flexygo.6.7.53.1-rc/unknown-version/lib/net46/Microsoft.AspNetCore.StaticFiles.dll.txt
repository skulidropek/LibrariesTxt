[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.DefaultFilesExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDefaultFiles(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseDefaultFiles(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseDefaultFiles(IApplicationBuilder app, DefaultFilesOptions options);
}
public class Microsoft.AspNetCore.Builder.DefaultFilesOptions : SharedOptionsBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DefaultFileNames>k__BackingField;
    public IList`1<string> DefaultFileNames { get; public set; }
    public DefaultFilesOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DefaultFileNames();
    [CompilerGeneratedAttribute]
public void set_DefaultFileNames(IList`1<string> value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseDirectoryBrowser(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseDirectoryBrowser(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseDirectoryBrowser(IApplicationBuilder app, DirectoryBrowserOptions options);
}
public class Microsoft.AspNetCore.Builder.DirectoryBrowserOptions : SharedOptionsBase {
    [CompilerGeneratedAttribute]
private IDirectoryFormatter <Formatter>k__BackingField;
    public IDirectoryFormatter Formatter { get; public set; }
    public DirectoryBrowserOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IDirectoryFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IDirectoryFormatter value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.FileServerExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app, bool enableDirectoryBrowsing);
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseFileServer(IApplicationBuilder app, FileServerOptions options);
}
public class Microsoft.AspNetCore.Builder.FileServerOptions : SharedOptionsBase {
    [CompilerGeneratedAttribute]
private StaticFileOptions <StaticFileOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryBrowserOptions <DirectoryBrowserOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultFilesOptions <DefaultFilesOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDirectoryBrowsing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDefaultFiles>k__BackingField;
    public StaticFileOptions StaticFileOptions { get; private set; }
    public DirectoryBrowserOptions DirectoryBrowserOptions { get; private set; }
    public DefaultFilesOptions DefaultFilesOptions { get; private set; }
    public bool EnableDirectoryBrowsing { get; public set; }
    public bool EnableDefaultFiles { get; public set; }
    [CompilerGeneratedAttribute]
public StaticFileOptions get_StaticFileOptions();
    [CompilerGeneratedAttribute]
private void set_StaticFileOptions(StaticFileOptions value);
    [CompilerGeneratedAttribute]
public DirectoryBrowserOptions get_DirectoryBrowserOptions();
    [CompilerGeneratedAttribute]
private void set_DirectoryBrowserOptions(DirectoryBrowserOptions value);
    [CompilerGeneratedAttribute]
public DefaultFilesOptions get_DefaultFilesOptions();
    [CompilerGeneratedAttribute]
private void set_DefaultFilesOptions(DefaultFilesOptions value);
    [CompilerGeneratedAttribute]
public bool get_EnableDirectoryBrowsing();
    [CompilerGeneratedAttribute]
public void set_EnableDirectoryBrowsing(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDefaultFiles();
    [CompilerGeneratedAttribute]
public void set_EnableDefaultFiles(bool value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.StaticFileExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseStaticFiles(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseStaticFiles(IApplicationBuilder app, string requestPath);
    [ExtensionAttribute]
public static IApplicationBuilder UseStaticFiles(IApplicationBuilder app, StaticFileOptions options);
}
public class Microsoft.AspNetCore.Builder.StaticFileOptions : SharedOptionsBase {
    [CompilerGeneratedAttribute]
private IContentTypeProvider <ContentTypeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServeUnknownFileTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<StaticFileResponseContext> <OnPrepareResponse>k__BackingField;
    public IContentTypeProvider ContentTypeProvider { get; public set; }
    public string DefaultContentType { get; public set; }
    public bool ServeUnknownFileTypes { get; public set; }
    public Action`1<StaticFileResponseContext> OnPrepareResponse { get; public set; }
    public StaticFileOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IContentTypeProvider get_ContentTypeProvider();
    [CompilerGeneratedAttribute]
public void set_ContentTypeProvider(IContentTypeProvider value);
    [CompilerGeneratedAttribute]
public string get_DefaultContentType();
    [CompilerGeneratedAttribute]
public void set_DefaultContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_ServeUnknownFileTypes();
    [CompilerGeneratedAttribute]
public void set_ServeUnknownFileTypes(bool value);
    [CompilerGeneratedAttribute]
public Action`1<StaticFileResponseContext> get_OnPrepareResponse();
    [CompilerGeneratedAttribute]
public void set_OnPrepareResponse(Action`1<StaticFileResponseContext> value);
}
internal static class Microsoft.AspNetCore.Internal.RangeHelper : object {
    public static ValueTuple`2<bool, RangeItemHeaderValue> ParseRange(HttpContext context, RequestHeaders requestHeaders, long length, ILogger logger);
    internal static RangeItemHeaderValue NormalizeRange(RangeItemHeaderValue range, long length);
}
internal static class Microsoft.AspNetCore.StaticFiles.Constants : object {
    internal static string ServerCapabilitiesKey;
    internal static string SendFileVersionKey;
    internal static string SendFileVersion;
    internal static int Status200Ok;
    internal static int Status206PartialContent;
    internal static int Status304NotModified;
    internal static int Status412PreconditionFailed;
    internal static int Status416RangeNotSatisfiable;
}
public class Microsoft.AspNetCore.StaticFiles.DefaultFilesMiddleware : object {
    private DefaultFilesOptions _options;
    private PathString _matchUrl;
    private RequestDelegate _next;
    private IFileProvider _fileProvider;
    public DefaultFilesMiddleware(RequestDelegate next, IHostingEnvironment hostingEnv, IOptions`1<DefaultFilesOptions> options);
    public Task Invoke(HttpContext context);
}
public class Microsoft.AspNetCore.StaticFiles.DirectoryBrowserMiddleware : object {
    private DirectoryBrowserOptions _options;
    private PathString _matchUrl;
    private RequestDelegate _next;
    private IDirectoryFormatter _formatter;
    private IFileProvider _fileProvider;
    public DirectoryBrowserMiddleware(RequestDelegate next, IHostingEnvironment hostingEnv, IOptions`1<DirectoryBrowserOptions> options);
    public DirectoryBrowserMiddleware(RequestDelegate next, IHostingEnvironment hostingEnv, HtmlEncoder encoder, IOptions`1<DirectoryBrowserOptions> options);
    public Task Invoke(HttpContext context);
    private bool TryGetDirectoryInfo(PathString subpath, IDirectoryContents& contents);
}
public class Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Mappings>k__BackingField;
    public IDictionary`2<string, string> Mappings { get; private set; }
    public FileExtensionContentTypeProvider(IDictionary`2<string, string> mapping);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Mappings();
    [CompilerGeneratedAttribute]
private void set_Mappings(IDictionary`2<string, string> value);
    public sealed virtual bool TryGetContentType(string subpath, String& contentType);
    private static string GetExtension(string path);
}
internal static class Microsoft.AspNetCore.StaticFiles.Helpers : object {
    internal static IFileProvider ResolveFileProvider(IHostingEnvironment hostingEnv);
    internal static bool IsGetOrHeadMethod(string method);
    internal static bool PathEndsInSlash(PathString path);
    internal static bool TryMatchPath(HttpContext context, PathString matchUrl, bool forDirectory, PathString& subpath);
}
public class Microsoft.AspNetCore.StaticFiles.HtmlDirectoryFormatter : object {
    private static string TextHtmlUtf8;
    private HtmlEncoder _htmlEncoder;
    public HtmlDirectoryFormatter(HtmlEncoder encoder);
    public virtual Task GenerateContentAsync(HttpContext context, IEnumerable`1<IFileInfo> contents);
    private string HtmlEncode(string body);
}
public interface Microsoft.AspNetCore.StaticFiles.IContentTypeProvider {
    public abstract virtual bool TryGetContentType(string subpath, String& contentType);
}
public interface Microsoft.AspNetCore.StaticFiles.IDirectoryFormatter {
    public abstract virtual Task GenerateContentAsync(HttpContext context, IEnumerable`1<IFileInfo> contents);
}
public class Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptions : object {
    private PathString _requestPath;
    [CompilerGeneratedAttribute]
private IFileProvider <FileProvider>k__BackingField;
    public PathString RequestPath { get; public set; }
    public IFileProvider FileProvider { get; public set; }
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    [CompilerGeneratedAttribute]
public IFileProvider get_FileProvider();
    [CompilerGeneratedAttribute]
public void set_FileProvider(IFileProvider value);
}
public abstract class Microsoft.AspNetCore.StaticFiles.Infrastructure.SharedOptionsBase : object {
    [CompilerGeneratedAttribute]
private SharedOptions <SharedOptions>k__BackingField;
    protected SharedOptions SharedOptions { get; private set; }
    public PathString RequestPath { get; public set; }
    public IFileProvider FileProvider { get; public set; }
    protected SharedOptionsBase(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
protected SharedOptions get_SharedOptions();
    [CompilerGeneratedAttribute]
private void set_SharedOptions(SharedOptions value);
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    public IFileProvider get_FileProvider();
    public void set_FileProvider(IFileProvider value);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.StaticFiles.LoggerExtensions : object {
    private static Action`3<ILogger, string, Exception> _logMethodNotSupported;
    private static Action`4<ILogger, string, string, Exception> _logFileServed;
    private static Action`3<ILogger, string, Exception> _logPathMismatch;
    private static Action`3<ILogger, string, Exception> _logFileTypeNotSupported;
    private static Action`3<ILogger, string, Exception> _logFileNotFound;
    private static Action`3<ILogger, string, Exception> _logPathNotModified;
    private static Action`3<ILogger, string, Exception> _logPreconditionFailed;
    private static Action`4<ILogger, int, string, Exception> _logHandled;
    private static Action`3<ILogger, string, Exception> _logRangeNotSatisfiable;
    private static Action`4<ILogger, StringValues, string, Exception> _logSendingFileRange;
    private static Action`4<ILogger, StringValues, string, Exception> _logCopyingFileRange;
    private static Action`5<ILogger, long, string, string, Exception> _logCopyingBytesToResponse;
    private static Action`2<ILogger, Exception> _logWriteCancelled;
    private static LoggerExtensions();
    [ExtensionAttribute]
public static void LogRequestMethodNotSupported(ILogger logger, string method);
    [ExtensionAttribute]
public static void LogFileServed(ILogger logger, string virtualPath, string physicalPath);
    [ExtensionAttribute]
public static void LogPathMismatch(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogFileTypeNotSupported(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogFileNotFound(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogPathNotModified(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogPreconditionFailed(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogHandled(ILogger logger, int statusCode, string path);
    [ExtensionAttribute]
public static void LogRangeNotSatisfiable(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogSendingFileRange(ILogger logger, StringValues range, string path);
    [ExtensionAttribute]
public static void LogCopyingFileRange(ILogger logger, StringValues range, string path);
    [ExtensionAttribute]
public static void LogCopyingBytesToResponse(ILogger logger, long start, Nullable`1<long> end, string path);
    [ExtensionAttribute]
public static void LogWriteCancelled(ILogger logger, Exception ex);
}
internal static class Microsoft.AspNetCore.StaticFiles.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string Args_NoFormatter { get; }
    internal static string HtmlDir_IndexOf { get; }
    internal static string HtmlDir_LastModified { get; }
    internal static string HtmlDir_Modified { get; }
    internal static string HtmlDir_Name { get; }
    internal static string HtmlDir_Size { get; }
    internal static string HtmlDir_TableSummary { get; }
    private static Resources();
    internal static string get_Args_NoFormatter();
    internal static string FormatArgs_NoFormatter();
    internal static string get_HtmlDir_IndexOf();
    internal static string FormatHtmlDir_IndexOf();
    internal static string get_HtmlDir_LastModified();
    internal static string FormatHtmlDir_LastModified();
    internal static string get_HtmlDir_Modified();
    internal static string FormatHtmlDir_Modified();
    internal static string get_HtmlDir_Name();
    internal static string FormatHtmlDir_Name();
    internal static string get_HtmlDir_Size();
    internal static string FormatHtmlDir_Size();
    internal static string get_HtmlDir_TableSummary();
    internal static string FormatHtmlDir_TableSummary();
    private static string GetString(string name, String[] formatterNames);
}
internal class Microsoft.AspNetCore.StaticFiles.StaticFileContext : ValueType {
    private static int StreamCopyBufferSize;
    private HttpContext _context;
    private StaticFileOptions _options;
    private PathString _matchUrl;
    private HttpRequest _request;
    private HttpResponse _response;
    private ILogger _logger;
    private IFileProvider _fileProvider;
    private IContentTypeProvider _contentTypeProvider;
    private string _method;
    private bool _isGet;
    private bool _isHead;
    private PathString _subPath;
    private string _contentType;
    private IFileInfo _fileInfo;
    private long _length;
    private DateTimeOffset _lastModified;
    private EntityTagHeaderValue _etag;
    private RequestHeaders _requestHeaders;
    private ResponseHeaders _responseHeaders;
    private PreconditionState _ifMatchState;
    private PreconditionState _ifNoneMatchState;
    private PreconditionState _ifModifiedSinceState;
    private PreconditionState _ifUnmodifiedSinceState;
    private RangeItemHeaderValue _range;
    private bool _isRangeRequest;
    public bool IsHeadMethod { get; }
    public bool IsRangeRequest { get; }
    public string SubPath { get; }
    public string PhysicalPath { get; }
    public StaticFileContext(HttpContext context, StaticFileOptions options, PathString matchUrl, ILogger logger, IFileProvider fileProvider, IContentTypeProvider contentTypeProvider);
    public bool get_IsHeadMethod();
    public bool get_IsRangeRequest();
    public string get_SubPath();
    public string get_PhysicalPath();
    public bool ValidateMethod();
    public bool ValidatePath();
    public bool LookupContentType();
    public bool LookupFileInfo();
    public void ComprehendRequestHeaders();
    private void ComputeIfMatch();
    private void ComputeIfModifiedSince();
    private void ComputeIfRange();
    private void ComputeRange();
    public void ApplyResponseHeaders(int statusCode);
    public PreconditionState GetPreconditionState();
    private static PreconditionState GetMaxPreconditionState(PreconditionState[] states);
    public Task SendStatusAsync(int statusCode);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.StaticFiles.StaticFileContext/<SendAsync>d__49")]
public Task SendAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.StaticFiles.StaticFileContext/<SendRangeAsync>d__50")]
internal Task SendRangeAsync();
    private ContentRangeHeaderValue ComputeContentRange(RangeItemHeaderValue range, Int64& start, Int64& length);
}
public class Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware : object {
    private StaticFileOptions _options;
    private PathString _matchUrl;
    private RequestDelegate _next;
    private ILogger _logger;
    private IFileProvider _fileProvider;
    private IContentTypeProvider _contentTypeProvider;
    public StaticFileMiddleware(RequestDelegate next, IHostingEnvironment hostingEnv, IOptions`1<StaticFileOptions> options, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware/<Invoke>d__7")]
public Task Invoke(HttpContext context);
}
public class Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext : object {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileInfo <File>k__BackingField;
    public HttpContext Context { get; internal set; }
    public IFileInfo File { get; internal set; }
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(HttpContext value);
    [CompilerGeneratedAttribute]
public IFileInfo get_File();
    [CompilerGeneratedAttribute]
internal void set_File(IFileInfo value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDirectoryBrowser(IServiceCollection services);
}
