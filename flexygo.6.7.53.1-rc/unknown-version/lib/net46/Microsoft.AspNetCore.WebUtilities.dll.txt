public static class Microsoft.AspNetCore.WebUtilities.Base64UrlTextEncoder : object {
    public static string Encode(Byte[] data);
    public static Byte[] Decode(string text);
}
public class Microsoft.AspNetCore.WebUtilities.BufferedReadStream : Stream {
    private static byte CR;
    private static byte LF;
    private Stream _inner;
    private Byte[] _buffer;
    private ArrayPool`1<byte> _bytePool;
    private int _bufferOffset;
    private int _bufferCount;
    private bool _disposed;
    public ArraySegment`1<byte> BufferedData { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BufferedReadStream(Stream inner, int bufferSize);
    public BufferedReadStream(Stream inner, int bufferSize, ArrayPool`1<byte> bytePool);
    public ArraySegment`1<byte> get_BufferedData();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<ReadAsync>d__33")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public bool EnsureBuffered();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<EnsureBufferedAsync>d__35")]
public Task`1<bool> EnsureBufferedAsync(CancellationToken cancellationToken);
    public bool EnsureBuffered(int minCount);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<EnsureBufferedAsync>d__37")]
public Task`1<bool> EnsureBufferedAsync(int minCount, CancellationToken cancellationToken);
    public string ReadLine(int lengthLimit);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.BufferedReadStream/<ReadLineAsync>d__39")]
public Task`1<string> ReadLineAsync(int lengthLimit, CancellationToken cancellationToken);
    private void ProcessLineChar(MemoryStream builder, Boolean& foundCR, Boolean& foundCRLF);
    private string DecodeLine(MemoryStream builder, bool foundCRLF);
    private void CheckDisposed();
    private void ValidateBuffer(Byte[] buffer, int offset, int count);
}
public class Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream : Stream {
    private static int _maxRentedBufferSize;
    private Stream _inner;
    private ArrayPool`1<byte> _bytePool;
    private int _memoryThreshold;
    private Nullable`1<long> _bufferLimit;
    private string _tempFileDirectory;
    private Func`1<string> _tempFileDirectoryAccessor;
    private string _tempFileName;
    private Stream _buffer;
    private Byte[] _rentedBuffer;
    private bool _inMemory;
    private bool _completelyBuffered;
    private bool _disposed;
    public bool InMemory { get; }
    public string TempFileName { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, Func`1<string> tempFileDirectoryAccessor);
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, Func`1<string> tempFileDirectoryAccessor, ArrayPool`1<byte> bytePool);
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, string tempFileDirectory);
    public FileBufferingReadStream(Stream inner, int memoryThreshold, Nullable`1<long> bufferLimit, string tempFileDirectory, ArrayPool`1<byte> bytePool);
    public bool get_InMemory();
    public string get_TempFileName();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    private Stream CreateTempFile();
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream/<ReadAsync>d__35")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
}
public class Microsoft.AspNetCore.WebUtilities.FileMultipartSection : object {
    private ContentDispositionHeaderValue _contentDispositionHeader;
    [CompilerGeneratedAttribute]
private MultipartSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public MultipartSection Section { get; }
    public Stream FileStream { get; }
    public string Name { get; }
    public string FileName { get; }
    public FileMultipartSection(MultipartSection section);
    public FileMultipartSection(MultipartSection section, ContentDispositionHeaderValue header);
    [CompilerGeneratedAttribute]
public MultipartSection get_Section();
    public Stream get_FileStream();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_FileName();
}
public class Microsoft.AspNetCore.WebUtilities.FormMultipartSection : object {
    private ContentDispositionHeaderValue _contentDispositionHeader;
    [CompilerGeneratedAttribute]
private MultipartSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public MultipartSection Section { get; }
    public string Name { get; }
    public FormMultipartSection(MultipartSection section);
    public FormMultipartSection(MultipartSection section, ContentDispositionHeaderValue header);
    [CompilerGeneratedAttribute]
public MultipartSection get_Section();
    [CompilerGeneratedAttribute]
public string get_Name();
    public Task`1<string> GetValueAsync();
}
public class Microsoft.AspNetCore.WebUtilities.FormReader : object {
    public static int DefaultValueCountLimit;
    public static int DefaultKeyLengthLimit;
    public static int DefaultValueLengthLimit;
    private static int _rentedCharPoolLength;
    private TextReader _reader;
    private Char[] _buffer;
    private ArrayPool`1<char> _charPool;
    private StringBuilder _builder;
    private int _bufferOffset;
    private int _bufferCount;
    private string _currentKey;
    private string _currentValue;
    private bool _endOfStream;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private int <ValueCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyLengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValueLengthLimit>k__BackingField;
    public int ValueCountLimit { get; public set; }
    public int KeyLengthLimit { get; public set; }
    public int ValueLengthLimit { get; public set; }
    public FormReader(string data);
    public FormReader(string data, ArrayPool`1<char> charPool);
    public FormReader(Stream stream);
    public FormReader(Stream stream, Encoding encoding);
    public FormReader(Stream stream, Encoding encoding, ArrayPool`1<char> charPool);
    [CompilerGeneratedAttribute]
public int get_ValueCountLimit();
    [CompilerGeneratedAttribute]
public void set_ValueCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_KeyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_KeyLengthLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ValueLengthLimit();
    [CompilerGeneratedAttribute]
public void set_ValueLengthLimit(int value);
    public Nullable`1<KeyValuePair`2<string, string>> ReadNextPair();
    private void ReadNextPairImpl();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FormReader/<ReadNextPairAsync>d__33")]
public Task`1<Nullable`1<KeyValuePair`2<string, string>>> ReadNextPairAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FormReader/<ReadNextPairAsyncImpl>d__34")]
private Task ReadNextPairAsyncImpl(CancellationToken cancellationToken);
    private void StartReadNextPair();
    private bool TryReadNextPair();
    private bool TryReadWord(char separator, int limit, String& value);
    private bool ReadChar(char separator, int limit, String& word);
    private string BuildWord();
    private void Buffer();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FormReader/<BufferAsync>d__41")]
private Task BufferAsync(CancellationToken cancellationToken);
    public Dictionary`2<string, StringValues> ReadForm();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.FormReader/<ReadFormAsync>d__43")]
public Task`1<Dictionary`2<string, StringValues>> ReadFormAsync(CancellationToken cancellationToken);
    private bool ReadSucceeded();
    private void Append(KeyValueAccumulator& accumulator);
    public sealed virtual void Dispose();
}
public class Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader : TextReader {
    private static int DefaultBufferSize;
    private static int MinBufferSize;
    private static int MaxSharedBuilderCapacity;
    private Stream _stream;
    private Encoding _encoding;
    private Decoder _decoder;
    private ArrayPool`1<byte> _bytePool;
    private ArrayPool`1<char> _charPool;
    private int _byteBufferSize;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private int _charBufferIndex;
    private int _charsRead;
    private int _bytesRead;
    private bool _isBlocked;
    private bool _disposed;
    public HttpRequestStreamReader(Stream stream, Encoding encoding);
    public HttpRequestStreamReader(Stream stream, Encoding encoding, int bufferSize);
    public HttpRequestStreamReader(Stream stream, Encoding encoding, int bufferSize, ArrayPool`1<byte> bytePool, ArrayPool`1<char> charPool);
    protected virtual void Dispose(bool disposing);
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader/<ReadAsync>d__23")]
public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    private int ReadIntoBuffer();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpRequestStreamReader/<ReadIntoBufferAsync>d__25")]
private Task`1<int> ReadIntoBufferAsync();
}
public class Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter : TextWriter {
    private static int MinBufferSize;
    internal static int DefaultBufferSize;
    private Stream _stream;
    private Encoder _encoder;
    private ArrayPool`1<byte> _bytePool;
    private ArrayPool`1<char> _charPool;
    private int _charBufferSize;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private int _charBufferCount;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public HttpResponseStreamWriter(Stream stream, Encoding encoding);
    public HttpResponseStreamWriter(Stream stream, Encoding encoding, int bufferSize);
    public HttpResponseStreamWriter(Stream stream, Encoding encoding, int bufferSize, ArrayPool`1<byte> bytePool, ArrayPool`1<char> charPool);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
    public virtual void Write(char value);
    public virtual void Write(Char[] values, int index, int count);
    public virtual void Write(string value);
    public virtual Task WriteAsync(char value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter/<WriteAsyncAwaited>d__21")]
private Task WriteAsyncAwaited(char value);
    public virtual Task WriteAsync(Char[] values, int index, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter/<WriteAsyncAwaited>d__23")]
private Task WriteAsyncAwaited(Char[] values, int index, int count);
    public virtual Task WriteAsync(string value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter/<WriteAsyncAwaited>d__25")]
private Task WriteAsyncAwaited(string value);
    public virtual void Flush();
    public virtual Task FlushAsync();
    protected virtual void Dispose(bool disposing);
    private void FlushInternal(bool flushEncoder);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.HttpResponseStreamWriter/<FlushInternalAsync>d__30")]
private Task FlushInternalAsync(bool flushEncoder);
    private void CopyToCharBuffer(string value);
    private void CopyToCharBuffer(string value, Int32& index, Int32& count);
    private void CopyToCharBuffer(Char[] values, Int32& index, Int32& count);
    private static Task GetObjectDisposedTask();
}
public class Microsoft.AspNetCore.WebUtilities.KeyValueAccumulator : ValueType {
    private Dictionary`2<string, StringValues> _accumulator;
    private Dictionary`2<string, List`1<string>> _expandingAccumulator;
    [CompilerGeneratedAttribute]
private int <ValueCount>k__BackingField;
    public bool HasValues { get; }
    public int KeyCount { get; }
    public int ValueCount { get; private set; }
    public void Append(string key, string value);
    public bool get_HasValues();
    public int get_KeyCount();
    [CompilerGeneratedAttribute]
public int get_ValueCount();
    [CompilerGeneratedAttribute]
private void set_ValueCount(int value);
    public Dictionary`2<string, StringValues> GetResults();
}
internal class Microsoft.AspNetCore.WebUtilities.MultipartBoundary : object {
    private Int32[] _skipTable;
    private string _boundary;
    private bool _expectLeadingCrlf;
    [CompilerGeneratedAttribute]
private Byte[] <BoundaryBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FinalBoundaryLength>k__BackingField;
    public bool ExpectLeadingCrlf { get; public set; }
    public Byte[] BoundaryBytes { get; private set; }
    public int FinalBoundaryLength { get; private set; }
    public MultipartBoundary(string boundary, bool expectLeadingCrlf);
    private void Initialize(string boundary, bool expectLeadingCrlf);
    public int GetSkipValue(byte input);
    public bool get_ExpectLeadingCrlf();
    public void set_ExpectLeadingCrlf(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_BoundaryBytes();
    [CompilerGeneratedAttribute]
private void set_BoundaryBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_FinalBoundaryLength();
    [CompilerGeneratedAttribute]
private void set_FinalBoundaryLength(int value);
}
public class Microsoft.AspNetCore.WebUtilities.MultipartReader : object {
    public static int DefaultHeadersCountLimit;
    public static int DefaultHeadersLengthLimit;
    private static int DefaultBufferSize;
    private BufferedReadStream _stream;
    private MultipartBoundary _boundary;
    private MultipartReaderStream _currentStream;
    [CompilerGeneratedAttribute]
private int <HeadersCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HeadersLengthLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BodyLengthLimit>k__BackingField;
    public int HeadersCountLimit { get; public set; }
    public int HeadersLengthLimit { get; public set; }
    public Nullable`1<long> BodyLengthLimit { get; public set; }
    public MultipartReader(string boundary, Stream stream);
    public MultipartReader(string boundary, Stream stream, int bufferSize);
    [CompilerGeneratedAttribute]
public int get_HeadersCountLimit();
    [CompilerGeneratedAttribute]
public void set_HeadersCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_HeadersLengthLimit();
    [CompilerGeneratedAttribute]
public void set_HeadersLengthLimit(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BodyLengthLimit();
    [CompilerGeneratedAttribute]
public void set_BodyLengthLimit(Nullable`1<long> value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.MultipartReader/<ReadNextSectionAsync>d__20")]
public Task`1<MultipartSection> ReadNextSectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.MultipartReader/<ReadHeadersAsync>d__21")]
private Task`1<Dictionary`2<string, StringValues>> ReadHeadersAsync(CancellationToken cancellationToken);
}
internal class Microsoft.AspNetCore.WebUtilities.MultipartReaderStream : Stream {
    private MultipartBoundary _boundary;
    private BufferedReadStream _innerStream;
    private ArrayPool`1<byte> _bytePool;
    private long _innerOffset;
    private long _position;
    private long _observedLength;
    private bool _finished;
    [CompilerGeneratedAttribute]
private bool <FinalBoundaryFound>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LengthLimit>k__BackingField;
    public bool FinalBoundaryFound { get; private set; }
    public Nullable`1<long> LengthLimit { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public MultipartReaderStream(BufferedReadStream stream, MultipartBoundary boundary);
    public MultipartReaderStream(BufferedReadStream stream, MultipartBoundary boundary, ArrayPool`1<byte> bytePool);
    [CompilerGeneratedAttribute]
public bool get_FinalBoundaryFound();
    [CompilerGeneratedAttribute]
private void set_FinalBoundaryFound(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LengthLimit();
    [CompilerGeneratedAttribute]
public void set_LengthLimit(Nullable`1<long> value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    private void PositionInnerStream();
    private int UpdatePosition(int read);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.MultipartReaderStream/<ReadAsync>d__36")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private bool SubMatch(ArraySegment`1<byte> segment1, Byte[] matchBytes, Int32& matchOffset, Int32& matchCount);
    private static int CompareBuffers(Byte[] buffer1, int offset1, Byte[] buffer2, int offset2, int count);
}
public class Microsoft.AspNetCore.WebUtilities.MultipartSection : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, StringValues> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BaseStreamOffset>k__BackingField;
    public string ContentType { get; }
    public string ContentDisposition { get; }
    public Dictionary`2<string, StringValues> Headers { get; public set; }
    public Stream Body { get; public set; }
    public Nullable`1<long> BaseStreamOffset { get; public set; }
    public string get_ContentType();
    public string get_ContentDisposition();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, StringValues> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(Dictionary`2<string, StringValues> value);
    [CompilerGeneratedAttribute]
public Stream get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Stream value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BaseStreamOffset();
    [CompilerGeneratedAttribute]
public void set_BaseStreamOffset(Nullable`1<long> value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions : object {
    [ExtensionAttribute]
public static FileMultipartSection AsFileSection(MultipartSection section);
    [ExtensionAttribute]
public static FormMultipartSection AsFormDataSection(MultipartSection section);
    [ExtensionAttribute]
public static ContentDispositionHeaderValue GetContentDispositionHeader(MultipartSection section);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions/<ReadAsStringAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> ReadAsStringAsync(MultipartSection section);
}
public static class Microsoft.AspNetCore.WebUtilities.QueryHelpers : object {
    public static string AddQueryString(string uri, string name, string value);
    public static string AddQueryString(string uri, IDictionary`2<string, string> queryString);
    private static string AddQueryString(string uri, IEnumerable`1<KeyValuePair`2<string, string>> queryString);
    public static Dictionary`2<string, StringValues> ParseQuery(string queryString);
    public static Dictionary`2<string, StringValues> ParseNullableQuery(string queryString);
}
public static class Microsoft.AspNetCore.WebUtilities.ReasonPhrases : object {
    private static IDictionary`2<int, string> Phrases;
    private static ReasonPhrases();
    public static string GetReasonPhrase(int statusCode);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.AspNetCore.WebUtilities.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string HttpRequestStreamReader_StreamNotReadable { get; }
    internal static string HttpResponseStreamWriter_StreamNotWritable { get; }
    internal static string WebEncoders_InvalidCountOffsetOrLength { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_HttpRequestStreamReader_StreamNotReadable();
    internal static string get_HttpResponseStreamWriter_StreamNotWritable();
    internal static string get_WebEncoders_InvalidCountOffsetOrLength();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions : object {
    private static int _maxReadBufferSize;
    [ExtensionAttribute]
public static Task DrainAsync(Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task DrainAsync(Stream stream, Nullable`1<long> limit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions/<DrainAsync>d__3")]
[ExtensionAttribute]
public static Task DrainAsync(Stream stream, ArrayPool`1<byte> bytePool, Nullable`1<long> limit, CancellationToken cancellationToken);
}
public static class Microsoft.AspNetCore.WebUtilities.WebEncoders : object {
    private static Byte[] EmptyBytes;
    private static WebEncoders();
    public static Byte[] Base64UrlDecode(string input);
    public static Byte[] Base64UrlDecode(string input, int offset, int count);
    public static Byte[] Base64UrlDecode(string input, int offset, Char[] buffer, int bufferOffset, int count);
    public static int GetArraySizeRequiredToDecode(int count);
    public static string Base64UrlEncode(Byte[] input);
    public static string Base64UrlEncode(Byte[] input, int offset, int count);
    public static int Base64UrlEncode(Byte[] input, int offset, Char[] output, int outputOffset, int count);
    public static int GetArraySizeRequiredToEncode(int count);
    private static int GetNumBase64PaddingCharsInString(string str);
    private static int GetNumBase64PaddingCharsToAddForDecode(int inputLength);
    private static void ValidateParameters(int bufferLength, string inputName, int offset, int count);
}
internal static class Microsoft.Extensions.WebEncoders.Sources.EncoderResources : object {
    internal static string WebEncoders_InvalidCountOffsetOrLength;
    internal static string WebEncoders_MalformedInput;
    private static EncoderResources();
    internal static string FormatWebEncoders_InvalidCountOffsetOrLength(object p0, object p1, object p2);
    internal static string FormatWebEncoders_MalformedInput(object p0);
}
