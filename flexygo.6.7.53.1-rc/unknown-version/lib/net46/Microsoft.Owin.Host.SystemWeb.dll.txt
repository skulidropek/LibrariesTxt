internal class Microsoft.Owin.Host.SystemWeb.CallContextAsyncResult : object {
    private static string TraceName;
    private static AsyncCallback NoopAsyncCallback;
    private static AsyncCallback SecondAsyncCallback;
    private static ITrace Trace;
    private IDisposable _cleanup;
    private AsyncCallback _callback;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isCompleted;
    private ErrorState _errorState;
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompletedSynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private static AsyncCallback CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static AsyncCallback CS$<>9__CachedAnonymousMethodDelegate3;
    public bool IsCompleted { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public object AsyncState { get; private set; }
    public bool CompletedSynchronously { get; private set; }
    internal CallContextAsyncResult(IDisposable cleanup, AsyncCallback callback, object extraData);
    private static CallContextAsyncResult();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CompletedSynchronously();
    [CompilerGeneratedAttribute]
private void set_CompletedSynchronously(bool value);
    public void Complete(bool completedSynchronously, ErrorState errorState);
    public static void End(IAsyncResult result);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(IAsyncResult ar);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(IAsyncResult ar);
}
[GeneratedCodeAttribute("TextTemplatingFileGenerator", "")]
internal class Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary : object {
    private static IDictionary`2<string, object> WeakNilEnvironment;
    private IPropertySource _propertySource;
    private IDictionary`2<string, object> _extra;
    private UInt32 _flag0;
    private UInt32 _flag1;
    private UInt32 _initFlag0;
    private UInt32 _initFlag1;
    private string _OwinVersion;
    private CancellationToken _CallCancelled;
    private string _RequestProtocol;
    private string _RequestMethod;
    private string _RequestScheme;
    private string _RequestPathBase;
    private string _RequestPath;
    private string _RequestQueryString;
    private IDictionary`2<string, String[]> _RequestHeaders;
    private Stream _RequestBody;
    private string _RequestId;
    private Action _DisableRequestBuffering;
    private IDictionary`2<string, String[]> _ResponseHeaders;
    private Stream _ResponseBody;
    private Action _DisableResponseBuffering;
    private TextWriter _HostTraceOutput;
    private string _HostAppName;
    private string _HostAppMode;
    private CancellationToken _OnAppDisposing;
    private Action _DisableResponseCompression;
    private Action`2<Action`1<object>, object> _OnSendingHeaders;
    private IDictionary`2<string, object> _ServerCapabilities;
    private string _ServerRemoteIpAddress;
    private string _ServerRemotePort;
    private string _ServerLocalIpAddress;
    private string _ServerLocalPort;
    private bool _ServerIsLocal;
    private X509Certificate _ClientCert;
    private Func`1<Task> _LoadClientCert;
    private Func`5<string, long, Nullable`1<long>, CancellationToken, Task> _SendFileAsync;
    private Action`2<IDictionary`2<string, object>, Func`2<IDictionary`2<string, object>, Task>> _WebSocketAccept;
    private IntegratedPipelineContext _IntegratedPipelineContext;
    private string _IntegratedPipelineStage;
    private RequestContext _RequestContext;
    private HttpContextBase _HttpContextBase;
    internal IDictionary`2<string, object> Extra { get; }
    private IDictionary`2<string, object> StrongExtra { get; }
    private object System.Collections.Generic.IDictionary<System.String,System.Object>.Item { get; private set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    internal string OwinVersion { get; internal set; }
    internal CancellationToken CallCancelled { get; internal set; }
    internal string RequestProtocol { get; internal set; }
    internal string RequestMethod { get; internal set; }
    internal string RequestScheme { get; internal set; }
    internal string RequestPathBase { get; internal set; }
    internal string RequestPath { get; internal set; }
    internal string RequestQueryString { get; internal set; }
    internal IDictionary`2<string, String[]> RequestHeaders { get; internal set; }
    internal Stream RequestBody { get; internal set; }
    internal string RequestId { get; internal set; }
    internal Action DisableRequestBuffering { get; internal set; }
    internal int ResponseStatusCode { get; internal set; }
    internal string ResponseReasonPhrase { get; internal set; }
    internal IDictionary`2<string, String[]> ResponseHeaders { get; internal set; }
    internal Stream ResponseBody { get; internal set; }
    internal Action DisableResponseBuffering { get; internal set; }
    internal TextWriter HostTraceOutput { get; internal set; }
    internal string HostAppName { get; internal set; }
    internal string HostAppMode { get; internal set; }
    internal CancellationToken OnAppDisposing { get; internal set; }
    internal Action DisableResponseCompression { get; internal set; }
    internal IPrincipal ServerUser { get; internal set; }
    internal Action`2<Action`1<object>, object> OnSendingHeaders { get; internal set; }
    internal IDictionary`2<string, object> ServerCapabilities { get; internal set; }
    internal string ServerRemoteIpAddress { get; internal set; }
    internal string ServerRemotePort { get; internal set; }
    internal string ServerLocalIpAddress { get; internal set; }
    internal string ServerLocalPort { get; internal set; }
    internal bool ServerIsLocal { get; internal set; }
    internal X509Certificate ClientCert { get; internal set; }
    internal Func`1<Task> LoadClientCert { get; internal set; }
    internal Func`5<string, long, Nullable`1<long>, CancellationToken, Task> SendFileAsync { get; internal set; }
    internal Action`2<IDictionary`2<string, object>, Func`2<IDictionary`2<string, object>, Task>> WebSocketAccept { get; internal set; }
    internal IntegratedPipelineContext IntegratedPipelineContext { get; internal set; }
    internal string IntegratedPipelineStage { get; internal set; }
    internal RequestContext RequestContext { get; internal set; }
    internal HttpContextBase HttpContextBase { get; internal set; }
    internal AspNetDictionary(IPropertySource propertySource);
    private static AspNetDictionary();
    internal IDictionary`2<string, object> get_Extra();
    private IDictionary`2<string, object> get_StrongExtra();
    private sealed virtual override object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string key, object value);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private bool InitPropertyDisableRequestBuffering();
    private bool InitPropertyHostAppMode();
    private bool InitPropertyClientCert();
    private bool InitPropertyLoadClientCert();
    private bool InitPropertyWebSocketAccept();
    internal string get_OwinVersion();
    internal void set_OwinVersion(string value);
    internal CancellationToken get_CallCancelled();
    internal void set_CallCancelled(CancellationToken value);
    internal string get_RequestProtocol();
    internal void set_RequestProtocol(string value);
    internal string get_RequestMethod();
    internal void set_RequestMethod(string value);
    internal string get_RequestScheme();
    internal void set_RequestScheme(string value);
    internal string get_RequestPathBase();
    internal void set_RequestPathBase(string value);
    internal string get_RequestPath();
    internal void set_RequestPath(string value);
    internal string get_RequestQueryString();
    internal void set_RequestQueryString(string value);
    internal IDictionary`2<string, String[]> get_RequestHeaders();
    internal void set_RequestHeaders(IDictionary`2<string, String[]> value);
    internal Stream get_RequestBody();
    internal void set_RequestBody(Stream value);
    internal string get_RequestId();
    internal void set_RequestId(string value);
    internal Action get_DisableRequestBuffering();
    internal void set_DisableRequestBuffering(Action value);
    internal int get_ResponseStatusCode();
    internal void set_ResponseStatusCode(int value);
    internal string get_ResponseReasonPhrase();
    internal void set_ResponseReasonPhrase(string value);
    internal IDictionary`2<string, String[]> get_ResponseHeaders();
    internal void set_ResponseHeaders(IDictionary`2<string, String[]> value);
    internal Stream get_ResponseBody();
    internal void set_ResponseBody(Stream value);
    internal Action get_DisableResponseBuffering();
    internal void set_DisableResponseBuffering(Action value);
    internal TextWriter get_HostTraceOutput();
    internal void set_HostTraceOutput(TextWriter value);
    internal string get_HostAppName();
    internal void set_HostAppName(string value);
    internal string get_HostAppMode();
    internal void set_HostAppMode(string value);
    internal CancellationToken get_OnAppDisposing();
    internal void set_OnAppDisposing(CancellationToken value);
    internal Action get_DisableResponseCompression();
    internal void set_DisableResponseCompression(Action value);
    internal IPrincipal get_ServerUser();
    internal void set_ServerUser(IPrincipal value);
    internal Action`2<Action`1<object>, object> get_OnSendingHeaders();
    internal void set_OnSendingHeaders(Action`2<Action`1<object>, object> value);
    internal IDictionary`2<string, object> get_ServerCapabilities();
    internal void set_ServerCapabilities(IDictionary`2<string, object> value);
    internal string get_ServerRemoteIpAddress();
    internal void set_ServerRemoteIpAddress(string value);
    internal string get_ServerRemotePort();
    internal void set_ServerRemotePort(string value);
    internal string get_ServerLocalIpAddress();
    internal void set_ServerLocalIpAddress(string value);
    internal string get_ServerLocalPort();
    internal void set_ServerLocalPort(string value);
    internal bool get_ServerIsLocal();
    internal void set_ServerIsLocal(bool value);
    internal X509Certificate get_ClientCert();
    internal void set_ClientCert(X509Certificate value);
    internal Func`1<Task> get_LoadClientCert();
    internal void set_LoadClientCert(Func`1<Task> value);
    internal Func`5<string, long, Nullable`1<long>, CancellationToken, Task> get_SendFileAsync();
    internal void set_SendFileAsync(Func`5<string, long, Nullable`1<long>, CancellationToken, Task> value);
    internal Action`2<IDictionary`2<string, object>, Func`2<IDictionary`2<string, object>, Task>> get_WebSocketAccept();
    internal void set_WebSocketAccept(Action`2<IDictionary`2<string, object>, Func`2<IDictionary`2<string, object>, Task>> value);
    internal IntegratedPipelineContext get_IntegratedPipelineContext();
    internal void set_IntegratedPipelineContext(IntegratedPipelineContext value);
    internal string get_IntegratedPipelineStage();
    internal void set_IntegratedPipelineStage(string value);
    internal RequestContext get_RequestContext();
    internal void set_RequestContext(RequestContext value);
    internal HttpContextBase get_HttpContextBase();
    internal void set_HttpContextBase(HttpContextBase value);
    private bool PropertiesContainsKey(string key);
    private bool PropertiesTryGetValue(string key, Object& value);
    private bool PropertiesTrySetValue(string key, object value);
    private bool PropertiesTryRemove(string key);
    private IEnumerable`1<string> PropertiesKeys();
    private IEnumerable`1<object> PropertiesValues();
    private IEnumerable`1<KeyValuePair`2<string, object>> PropertiesEnumerable();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Owin.Host.SystemWeb.CallEnvironment.NilDictionary : object {
    private static String[] EmptyKeys;
    private static Object[] EmptyValues;
    private static IEnumerable`1<KeyValuePair`2<string, object>> EmptyKeyValuePairs;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    private static NilDictionary();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
}
internal class Microsoft.Owin.Host.SystemWeb.CallEnvironment.TraceTextWriter : TextWriter {
    internal static TraceTextWriter Instance;
    public Encoding Encoding { get; }
    private static TraceTextWriter();
    public virtual Encoding get_Encoding();
    private static void OutputDebugString(string message);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void WriteLine(string value);
    public virtual void Write(string value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Owin.Host.SystemWeb.CallHeaders.AspNetRequestHeaders : object {
    private HttpRequestBase _httpRequest;
    public ICollection`1<string> Keys { get; }
    public ICollection`1<String[]> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private NameValueCollection Headers { get; }
    public String[] Item { get; public set; }
    internal AspNetRequestHeaders(HttpRequestBase httpRequest);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<String[]> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private NameValueCollection get_Headers();
    public sealed virtual String[] get_Item(string key);
    public sealed virtual void set_Item(string key, String[] value);
    private String[] Get(string key);
    private void Set(string key, String[] values);
    public sealed virtual void Add(KeyValuePair`2<string, String[]> item);
    public sealed virtual void Add(string key, String[] value);
    private void Add(string key, String[] value, int offset);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, String[]& value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, String[]> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, String[]> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, String[]>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private String[] <get_Values>b__0(string key);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Owin.Host.SystemWeb.CallHeaders.AspNetResponseHeaders : object {
    private HttpResponseBase _response;
    private NameValueCollection _headers;
    public ICollection`1<string> Keys { get; }
    public ICollection`1<String[]> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public String[] Item { get; public set; }
    internal AspNetResponseHeaders(HttpResponseBase response);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<String[]> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual String[] get_Item(string key);
    public sealed virtual void set_Item(string key, String[] value);
    private String[] Get(string key);
    private void Set(string key, String[] values);
    public sealed virtual void Add(KeyValuePair`2<string, String[]> item);
    public sealed virtual void Add(string key, String[] value);
    private void Append(string key, String[] value, int offset);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, String[]& value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, String[]> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, String[]> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, String[]>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private String[] <get_Values>b__0(string key);
}
internal class Microsoft.Owin.Host.SystemWeb.CallHeaders.SendingHeadersEvent : object {
    private IList`1<Tuple`2<Action`1<object>, object>> _callbacks;
    internal void Register(Action`1<object> callback, object state);
    internal void Fire();
}
internal abstract class Microsoft.Owin.Host.SystemWeb.CallStreams.DelegatingStream : Stream {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    protected Stream Stream { get; protected set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    protected DelegatingStream(Stream stream);
    [CompilerGeneratedAttribute]
protected virtual Stream get_Stream();
    [CompilerGeneratedAttribute]
protected virtual void set_Stream(Stream value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
internal class Microsoft.Owin.Host.SystemWeb.CallStreams.InputStream : DelegatingStream {
    private HttpRequestBase _request;
    private Stream _stream;
    private bool _preferBuffered;
    private bool _bufferOnSeek;
    protected Stream Stream { get; protected set; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    internal InputStream(HttpRequestBase request);
    protected virtual Stream get_Stream();
    protected virtual void set_Stream(Stream value);
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    private void ResolveStream();
    internal void DisableBuffering();
}
internal class Microsoft.Owin.Host.SystemWeb.CallStreams.OutputStream : DelegatingStream {
    private HttpResponseBase _response;
    private Action modreq(System.Runtime.CompilerServices.IsVolatile) _start;
    private Action _faulted;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate1;
    internal OutputStream(HttpResponseBase response, Stream stream, Action start, Action faulted);
    private void Start(bool force);
    private void Faulted();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void WriteByte(byte value);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.Owin.Host.SystemWeb.CallStreams.OutputStream/<FlushAsync>d__2")]
[DebuggerStepThroughAttribute]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private static void <Faulted>b__0();
}
internal static class Microsoft.Owin.Host.SystemWeb.Constants : object {
    internal static string OwinVersion;
    internal static string OwinVersionKey;
    internal static string ServerCapabilitiesKey;
    internal static string SendFileVersionKey;
    internal static string SendFileVersion;
    internal static string SendFileFuncKey;
    internal static string WebSocketVersionKey;
    internal static string WebSocketVersion;
    internal static string WebSocketSubProtocolKey;
    internal static string HostReferencedAssemblies;
    internal static string HostOnAppDisposingKey;
    internal static string HostAppNameKey;
    internal static string HostTraceOutputKey;
    internal static string HostAppModeKey;
    internal static string AppModeDevelopment;
    internal static string OwinAppStartup;
    internal static string OwinAutomaticAppStartup;
    internal static string OwinResponseStatusCodeKey;
    internal static string BuilderDefaultApp;
    internal static string IntegratedPipelineContext;
    internal static string IntegratedPipelineStageMarker;
    internal static string IntegratedPipelineCurrentStage;
    internal static string PersistentKey;
    internal static string ApplicationAuthenticationType;
    internal static string CaptionKey;
    internal static string StageAuthenticate;
    internal static string StagePostAuthenticate;
    internal static string StageAuthorize;
    internal static string StagePostAuthorize;
    internal static string StageResolveCache;
    internal static string StagePostResolveCache;
    internal static string StageMapHandler;
    internal static string StagePostMapHandler;
    internal static string StageAcquireState;
    internal static string StagePostAcquireState;
    internal static string StagePreHandlerExecute;
    internal static string ContentType;
    internal static string CacheControl;
    internal static string SecurityDataProtectionProvider;
}
internal class Microsoft.Owin.Host.SystemWeb.DataProtection.MachineKeyDataProtectionProvider : object {
    public virtual MachineKeyDataProtector Create(String[] purposes);
    public virtual Func`2<String[], Tuple`2<Func`2<Byte[], Byte[]>, Func`2<Byte[], Byte[]>>> ToOwinFunction();
    [CompilerGeneratedAttribute]
private Tuple`2<Func`2<Byte[], Byte[]>, Func`2<Byte[], Byte[]>> <ToOwinFunction>b__0(String[] purposes);
}
internal class Microsoft.Owin.Host.SystemWeb.DataProtection.MachineKeyDataProtector : object {
    private String[] _purposes;
    public MachineKeyDataProtector(String[] purposes);
    public virtual Byte[] Protect(Byte[] userData);
    public virtual Byte[] Unprotect(Byte[] protectedData);
}
internal class Microsoft.Owin.Host.SystemWeb.DisconnectWatcher : object {
    private static string TraceName;
    private static ITrace Trace;
    private static TimerCallback ConnectionTimerCallback;
    private static bool IsSystemWebVersion451OrGreater;
    private static bool IsClientDisconnectedTokenAvailable;
    private HttpResponseBase _httpResponse;
    private CancellationTokenSource _callCancelledSource;
    private IDisposable _connectionCheckTimer;
    internal DisconnectWatcher(HttpResponseBase httpResponse);
    private static DisconnectWatcher();
    internal CancellationToken BindDisconnectNotification();
    public sealed virtual void Dispose();
    private void UnbindDisconnectNotification();
    private static void CheckIsClientConnected(object obj);
    private static void SetDisconnected(object obj);
    internal void OnFaulted();
    private static bool CheckIsClientDisconnectedTokenAvailable();
    private static bool CheckIsSystemWebVersion451OrGreater();
}
internal static class Microsoft.Owin.Host.SystemWeb.HttpContextItemKeys : object {
    public static string OwinEnvironmentKey;
    private static HttpContextItemKeys();
}
internal class Microsoft.Owin.Host.SystemWeb.Infrastructure.DefaultTrace : object {
    private TraceSource _traceSource;
    public DefaultTrace(TraceSource traceSource);
    public sealed virtual void Write(TraceEventType eventType, string format, Object[] args);
}
internal class Microsoft.Owin.Host.SystemWeb.Infrastructure.DefaultTraceFactory : object {
    private static string RootTraceName;
    private SourceSwitch _switch;
    private ConcurrentDictionary`2<string, TraceSource> _sources;
    public sealed virtual ITrace Create(string name);
    private TraceSource GetOrAddTraceSource(string name);
    private TraceSource InitializeTraceSource(string key);
    private static bool HasDefaultListeners(TraceSource traceSource);
    private static bool HasDefaultSwitch(TraceSource traceSource);
}
internal class Microsoft.Owin.Host.SystemWeb.Infrastructure.ErrorState : object {
    private ExceptionDispatchInfo _exceptionDispatchInfo;
    private ErrorState(ExceptionDispatchInfo exceptionDispatchInfo);
    public static ErrorState Capture(Exception exception);
    public void Rethrow();
}
internal interface Microsoft.Owin.Host.SystemWeb.Infrastructure.ITrace {
    public abstract virtual void Write(TraceEventType eventType, string format, Object[] args);
}
internal interface Microsoft.Owin.Host.SystemWeb.Infrastructure.ITraceFactory {
    public abstract virtual ITrace Create(string name);
}
internal class Microsoft.Owin.Host.SystemWeb.Infrastructure.ReferencedAssembliesWrapper : object {
    public sealed virtual IEnumerator`1<Assembly> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Host.SystemWeb.Infrastructure.TraceExtensions : object {
    [ExtensionAttribute]
public static void WriteError(ITrace trace, string message, Exception error);
    [ExtensionAttribute]
public static void WriteWarning(ITrace trace, string message, Exception error);
}
internal static class Microsoft.Owin.Host.SystemWeb.Infrastructure.TraceFactory : object {
    private static ITraceFactory _instance;
    public static ITraceFactory Instance { get; public set; }
    private static TraceFactory();
    public static ITraceFactory get_Instance();
    public static void set_Instance(ITraceFactory value);
    public static ITrace Create(string name);
}
internal class Microsoft.Owin.Host.SystemWeb.IntegratedPipeline.IntegratedPipelineBlueprint : object {
    private OwinAppContext _appContext;
    private IntegratedPipelineBlueprintStage _firstStage;
    private string _pathBase;
    public OwinAppContext AppContext { get; }
    public IntegratedPipelineBlueprintStage FirstStage { get; }
    public string PathBase { get; }
    public IntegratedPipelineBlueprint(OwinAppContext appContext, IntegratedPipelineBlueprintStage firstStage, string pathBase);
    public OwinAppContext get_AppContext();
    public IntegratedPipelineBlueprintStage get_FirstStage();
    public string get_PathBase();
}
internal class Microsoft.Owin.Host.SystemWeb.IntegratedPipeline.IntegratedPipelineBlueprintStage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IntegratedPipelineBlueprintStage <NextStage>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDictionary`2<string, object>, Task> <EntryPoint>k__BackingField;
    public string Name { get; public set; }
    public IntegratedPipelineBlueprintStage NextStage { get; public set; }
    public Func`2<IDictionary`2<string, object>, Task> EntryPoint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IntegratedPipelineBlueprintStage get_NextStage();
    [CompilerGeneratedAttribute]
public void set_NextStage(IntegratedPipelineBlueprintStage value);
    [CompilerGeneratedAttribute]
public Func`2<IDictionary`2<string, object>, Task> get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(Func`2<IDictionary`2<string, object>, Task> value);
}
internal class Microsoft.Owin.Host.SystemWeb.IntegratedPipeline.IntegratedPipelineContext : object {
    private static IList`1<string> StageNames;
    private IntegratedPipelineBlueprint _blueprint;
    private State _state;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate1;
    public bool PreventNextStage { get; public set; }
    public IntegratedPipelineContext(IntegratedPipelineBlueprint blueprint);
    private static IntegratedPipelineContext();
    public bool get_PreventNextStage();
    public void set_PreventNextStage(bool value);
    public void Initialize(HttpApplication application);
    private void Reset();
    public static Task DefaultAppInvoked(IDictionary`2<string, object> env);
    public static Task ExitPointInvoked(IDictionary`2<string, object> env);
    private IAsyncResult BeginFinalWork(object sender, EventArgs e, AsyncCallback cb, object extradata);
    [AsyncStateMachineAttribute("Microsoft.Owin.Host.SystemWeb.IntegratedPipeline.IntegratedPipelineContext/<DoFinalWork>d__2")]
[DebuggerStepThroughAttribute]
private Task DoFinalWork(StageAsyncResult result);
    private void EndFinalWork(IAsyncResult ar);
    public Func`2<IDictionary`2<string, object>, Task> PrepareInitialContext(HttpApplication application);
    public IDictionary`2<string, object> GetInitialEnvironment(HttpApplication application);
    public void PushExecutingStage(IntegratedPipelineContextStage stage);
    public void PushLastObjects(IDictionary`2<string, object> environment, TaskCompletionSource`1<object> completionSource);
    public IDictionary`2<string, object> TakeLastEnvironment();
    public TaskCompletionSource`1<object> TakeLastCompletionSource();
    internal static bool VerifyStageOrder(string stage1, string stage2);
    [CompilerGeneratedAttribute]
private static void <BeginFinalWork>b__0();
}
internal class Microsoft.Owin.Host.SystemWeb.IntegratedPipeline.IntegratedPipelineContextStage : object {
    private IntegratedPipelineContext _context;
    private IntegratedPipelineBlueprintStage _stage;
    private StageAsyncResult _result;
    private bool _responseShouldEnd;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    public IntegratedPipelineContextStage(IntegratedPipelineContext context, IntegratedPipelineBlueprintStage stage);
    public void Reset();
    public IAsyncResult BeginEvent(object sender, EventArgs e, AsyncCallback cb, object extradata);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Host.SystemWeb.IntegratedPipeline.IntegratedPipelineContextStage/<RunApp>d__5")]
private Task RunApp(Func`2<IDictionary`2<string, object>, Task> entryPoint, IDictionary`2<string, object> environment, TaskCompletionSource`1<object> tcs, StageAsyncResult result);
    public void EndEvent(IAsyncResult ar);
    public Task DefaultAppInvoked(IDictionary`2<string, object> env);
    public Task ExitPointInvoked(IDictionary`2<string, object> env);
    private Task Epilog(IDictionary`2<string, object> env);
    [CompilerGeneratedAttribute]
private static void <BeginEvent>b__0();
}
internal class Microsoft.Owin.Host.SystemWeb.IntegratedPipeline.StageAsyncResult : object {
    private AsyncCallback _callback;
    private Action _completing;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _managedThreadId;
    private int _completions;
    private ErrorState _error;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompletedSynchronously>k__BackingField;
    public WaitHandle AsyncWaitHandle { get; }
    public bool IsCompleted { get; private set; }
    public object AsyncState { get; private set; }
    public bool CompletedSynchronously { get; private set; }
    public StageAsyncResult(AsyncCallback callback, object extradata, Action completing);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CompletedSynchronously();
    [CompilerGeneratedAttribute]
private void set_CompletedSynchronously(bool value);
    public void InitialThreadReturning();
    public void Fail(ErrorState error);
    public void TryComplete();
    public static void End(IAsyncResult ar);
}
internal class Microsoft.Owin.Host.SystemWeb.OwinAppContext : object {
    private static string TraceName;
    private ITrace _trace;
    private bool _detectWebSocketSupportStageTwoExecuted;
    private object _detectWebSocketSupportStageTwoLock;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WebSocketSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDictionary`2<string, object>, Task> <AppFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    internal IDictionary`2<string, object> Capabilities { get; private set; }
    internal bool WebSocketSupport { get; internal set; }
    internal Func`2<IDictionary`2<string, object>, Task> AppFunc { get; internal set; }
    internal string AppName { get; private set; }
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, object> get_Capabilities();
    [CompilerGeneratedAttribute]
private void set_Capabilities(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
internal bool get_WebSocketSupport();
    [CompilerGeneratedAttribute]
internal void set_WebSocketSupport(bool value);
    [CompilerGeneratedAttribute]
internal Func`2<IDictionary`2<string, object>, Task> get_AppFunc();
    [CompilerGeneratedAttribute]
internal void set_AppFunc(Func`2<IDictionary`2<string, object>, Task> value);
    [CompilerGeneratedAttribute]
internal string get_AppName();
    [CompilerGeneratedAttribute]
private void set_AppName(string value);
    internal void Initialize(Action`1<IAppBuilder> startup);
    public OwinCallContext CreateCallContext(RequestContext requestContext, string requestPathBase, string requestPath, AsyncCallback callback, object extraData);
    private void DetectWebSocketSupportStageOne();
    private void DetectWebSocketSupportStageTwo(RequestContext requestContext);
}
internal static class Microsoft.Owin.Host.SystemWeb.OwinApplication : object {
    private static Lazy`1<OwinAppContext> _instance;
    private static ShutdownDetector _detector;
    [CompilerGeneratedAttribute]
private static Func`1<OwinAppContext> CS$<>9__CachedAnonymousMethodDelegate4;
    internal static OwinAppContext Instance { get; internal set; }
    internal static Func`1<OwinAppContext> Accessor { get; internal set; }
    internal static CancellationToken ShutdownToken { get; }
    private static OwinApplication();
    internal static OwinAppContext get_Instance();
    internal static void set_Instance(OwinAppContext value);
    internal static Func`1<OwinAppContext> get_Accessor();
    internal static void set_Accessor(Func`1<OwinAppContext> value);
    internal static CancellationToken get_ShutdownToken();
    private static ShutdownDetector InitShutdownDetector();
    [CompilerGeneratedAttribute]
private static OwinAppContext <get_Accessor>b__3();
}
internal static class Microsoft.Owin.Host.SystemWeb.OwinBuilder : object {
    internal static bool IsAutomaticAppStartupEnabled { get; }
    internal static bool get_IsAutomaticAppStartupEnabled();
    internal static Action`1<IAppBuilder> GetAppStartup();
    internal static OwinAppContext Build();
    internal static OwinAppContext Build(Func`2<IDictionary`2<string, object>, Task> app);
    internal static OwinAppContext Build(Action`1<IAppBuilder> startup);
}
internal class Microsoft.Owin.Host.SystemWeb.OwinCallContext : object {
    private static string IIS7WorkerRequestTypeName;
    private static string TraceName;
    private Func`2<IDictionary`2<string, object>, Task> _webSocketFunc;
    private static Lazy`1<RemoveHeaderDel> IIS7RemoveHeader;
    private bool _compressionDisabled;
    private static ITrace Trace;
    private static MethodInfo OnSendingHeadersRegister;
    private static PropertyInfo HeadersWrittenProperty;
    private static MethodInfo CheckHeadersWritten;
    private static MethodInfo PushPromiseMethod;
    private SendingHeadersEvent _sendingHeadersEvent;
    private OwinAppContext _appContext;
    private RequestContext _requestContext;
    private string _requestPathBase;
    private string _requestPath;
    private HttpContextBase _httpContext;
    private HttpRequestBase _httpRequest;
    private HttpResponseBase _httpResponse;
    private int _completedSynchronouslyThreadId;
    private AspNetDictionary _env;
    private DisconnectWatcher _disconnectWatcher;
    private Exception _startException;
    private bool _startCalled;
    private object _startLock;
    private bool _headersSent;
    [CompilerGeneratedAttribute]
private CallContextAsyncResult <AsyncResult>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    internal AspNetDictionary Environment { get; }
    internal CallContextAsyncResult AsyncResult { get; private set; }
    internal OwinCallContext(OwinAppContext appContext, RequestContext requestContext, string requestPathBase, string requestPath, AsyncCallback cb, object extraData);
    private static OwinCallContext();
    public void CreateEnvironment();
    private sealed virtual override CancellationToken Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetOnAppDisposing();
    private sealed virtual override IPrincipal Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetServerUser();
    private sealed virtual override void Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.SetServerUser(IPrincipal value);
    private sealed virtual override CancellationToken Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetCallCancelled();
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetRequestProtocol();
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetRequestScheme();
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetRequestQueryString();
    private sealed virtual override Stream Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetRequestBody();
    private sealed virtual override bool Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.TryGetDisableRequestBuffering(Action& action);
    private sealed virtual override int Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetResponseStatusCode();
    private sealed virtual override void Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.SetResponseStatusCode(int value);
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetResponseReasonPhrase();
    private sealed virtual override void Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.SetResponseReasonPhrase(string value);
    private sealed virtual override Stream Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetResponseBody();
    private sealed virtual override Action Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetDisableResponseBuffering();
    private sealed virtual override Func`5<string, long, Nullable`1<long>, CancellationToken, Task> Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetSendFileAsync();
    private sealed virtual override bool Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.TryGetHostAppMode(String& value);
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetServerRemoteIpAddress();
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetServerRemotePort();
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetServerLocalIpAddress();
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetServerLocalPort();
    private sealed virtual override bool Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetServerIsLocal();
    private sealed virtual override bool Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.TryGetClientCert(X509Certificate& value);
    private sealed virtual override bool Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.TryGetLoadClientCert(Func`1& value);
    private sealed virtual override string Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetRequestId();
    private sealed virtual override bool Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.TryGetWebSocketAccept(Action`2& value);
    private void DoWebSocketUpgrade(IDictionary`2<string, object> acceptOptions, Func`2<IDictionary`2<string, object>, Task> webSocketFunc);
    [AsyncStateMachineAttribute("Microsoft.Owin.Host.SystemWeb.OwinCallContext/<AcceptCallback>d__a")]
[DebuggerStepThroughAttribute]
private Task AcceptCallback(AspNetWebSocketContext webSocketContext);
    private static string GetWebSocketSubProtocol(AspNetDictionary env, IDictionary`2<string, object> accpetOptions);
    private void DisableResponseCompression();
    private void RemoveAcceptEncoding();
    private static RemoveHeaderDel GetRemoveHeaderDelegate();
    internal AspNetDictionary get_Environment();
    [CompilerGeneratedAttribute]
internal CallContextAsyncResult get_AsyncResult();
    [CompilerGeneratedAttribute]
private void set_AsyncResult(CallContextAsyncResult value);
    internal void Execute();
    internal bool TryRelayExceptionToIntegratedPipeline(bool sync, Exception ex);
    private X509Certificate LoadClientCert();
    private Task LoadClientCertAsync();
    private Task SendFileAsync(string name, long offset, Nullable`1<long> count, CancellationToken cancel);
    private void RegisterForOnSendingHeaders();
    public void OnStart();
    private Exception StartOnce();
    public void OnEnd();
    private void Complete();
    private void Complete(ErrorState errorState);
    internal void Complete(bool sync, ErrorState errorState);
    internal void AbortIfHeaderSent();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <Microsoft.Owin.Host.SystemWeb.CallEnvironment.AspNetDictionary.IPropertySource.GetDisableResponseBuffering>b__9();
    [CompilerGeneratedAttribute]
private void <Execute>b__e(Task appTask);
    [CompilerGeneratedAttribute]
private void <RegisterForOnSendingHeaders>b__10(HttpContextBase _);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__12(MethodInfo info);
}
public class Microsoft.Owin.Host.SystemWeb.OwinHttpHandler : object {
    private string _pathBase;
    private Func`1<OwinAppContext> _appAccessor;
    private RequestContext _requestContext;
    private string _requestPath;
    public bool IsReusable { get; }
    internal OwinHttpHandler(string pathBase, OwinAppContext app);
    internal OwinHttpHandler(string pathBase, Func`1<OwinAppContext> appAccessor);
    internal OwinHttpHandler(string pathBase, Func`1<OwinAppContext> appAccessor, RequestContext context, string path);
    public sealed virtual bool get_IsReusable();
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
    private sealed virtual override IAsyncResult System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, object extraData);
    public IAsyncResult BeginProcessRequest(HttpContextBase httpContext, AsyncCallback callback, object extraData);
    public sealed virtual void EndProcessRequest(IAsyncResult result);
}
internal class Microsoft.Owin.Host.SystemWeb.OwinHttpModule : object {
    private static IntegratedPipelineBlueprint _blueprint;
    private static bool _blueprintInitialized;
    private static object _blueprintLock;
    private static OwinHttpModule();
    public sealed virtual void Init(HttpApplication context);
    public sealed virtual void Dispose();
    private IntegratedPipelineBlueprint InitializeBlueprint();
    private static void EnableIntegratedPipeline(IAppBuilder app, Action`1<IntegratedPipelineBlueprintStage> onStageCreated);
}
internal class Microsoft.Owin.Host.SystemWeb.OwinRoute : RouteBase {
    private string _pathBase;
    private Func`1<OwinAppContext> _appAccessor;
    internal OwinRoute(string pathBase, Func`1<OwinAppContext> appAccessor);
    public virtual RouteData GetRouteData(HttpContextBase httpContext);
    public virtual VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
}
public class Microsoft.Owin.Host.SystemWeb.OwinRouteHandler : object {
    private string _pathBase;
    private string _path;
    private Func`1<OwinAppContext> _appAccessor;
    public OwinRouteHandler(Action`1<IAppBuilder> startup);
    internal OwinRouteHandler(string pathBase, string path, Func`1<OwinAppContext> appAccessor);
    public IHttpHandler GetHttpHandler(RequestContext requestContext);
    private sealed virtual override IHttpHandler System.Web.Routing.IRouteHandler.GetHttpHandler(RequestContext requestContext);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.Owin.Host.SystemWeb.PreApplicationStart : object {
    private static string TraceName;
    public static void Initialize();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Owin.Host.SystemWeb.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_AppLoderFailure { get; }
    internal static string Exception_CannotRegisterAfterHeadersSent { get; }
    internal static string Exception_DuplicateKey { get; }
    internal static string Exception_HowToDisableAutoAppStartup { get; }
    internal static string Exception_HowToSpecifyAppStartup { get; }
    internal static string Exception_UnsupportedPipelineStage { get; }
    internal static string HttpContext_OwinEnvironmentNotFound { get; }
    internal static string Trace_ClientCertException { get; }
    internal static string Trace_EntryPointException { get; }
    internal static string Trace_OwinCallContextCallbackException { get; }
    internal static string Trace_RegisterModuleException { get; }
    internal static string Trace_RequestDisconnectCallbackExceptions { get; }
    internal static string Trace_ShutdownDetectionSetupException { get; }
    internal static string Trace_ShutdownException { get; }
    internal static string Trace_TimerCallbackException { get; }
    internal static string Trace_WebSocketException { get; }
    internal static string Trace_WebSocketsSupportDetected { get; }
    internal static string Trace_WebSocketsSupportNotDetected { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Exception_AppLoderFailure();
    internal static string get_Exception_CannotRegisterAfterHeadersSent();
    internal static string get_Exception_DuplicateKey();
    internal static string get_Exception_HowToDisableAutoAppStartup();
    internal static string get_Exception_HowToSpecifyAppStartup();
    internal static string get_Exception_UnsupportedPipelineStage();
    internal static string get_HttpContext_OwinEnvironmentNotFound();
    internal static string get_Trace_ClientCertException();
    internal static string get_Trace_EntryPointException();
    internal static string get_Trace_OwinCallContextCallbackException();
    internal static string get_Trace_RegisterModuleException();
    internal static string get_Trace_RequestDisconnectCallbackExceptions();
    internal static string get_Trace_ShutdownDetectionSetupException();
    internal static string get_Trace_ShutdownException();
    internal static string get_Trace_TimerCallbackException();
    internal static string get_Trace_WebSocketException();
    internal static string get_Trace_WebSocketsSupportDetected();
    internal static string get_Trace_WebSocketsSupportNotDetected();
}
internal class Microsoft.Owin.Host.SystemWeb.ShutdownDetector : object {
    private static string TraceName;
    private CancellationTokenSource _cts;
    private ITrace _trace;
    private IDisposable _checkAppPoolTimer;
    internal CancellationToken Token { get; }
    internal CancellationToken get_Token();
    internal void Initialize();
    private bool RegisterForStopListeningEvent();
    private void StopListening(object sender, EventArgs e);
    private void CheckForAppDomainRestart(object state);
    public sealed virtual void Stop(bool immediate);
    private void Cancel();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.Owin.Host.SystemWeb.UnsafeIISMethods : object {
    private static Lazy`1<UnsafeIISMethodsWrapper> IIS;
    [CompilerGeneratedAttribute]
private static Func`1<UnsafeIISMethodsWrapper> CS$<>9__CachedAnonymousMethodDelegate1;
    public static bool RequestedAppDomainRestart { get; }
    public static bool CanDetectAppDomainRestart { get; }
    private static UnsafeIISMethods();
    public static bool get_RequestedAppDomainRestart();
    public static bool get_CanDetectAppDomainRestart();
    [CompilerGeneratedAttribute]
private static UnsafeIISMethodsWrapper <.cctor>b__0();
}
internal static class Microsoft.Owin.Host.SystemWeb.Utils : object {
    internal static Task CompletedTask;
    internal static Task CancelledTask;
    private static Utils();
    private static Task CreateCompletedTask();
    private static Task CreateCancelledTask();
    internal static Task CreateFaultedTask(Exception ex);
    internal static string NormalizePath(string path);
}
internal class Microsoft.Owin.Host.SystemWeb.WebSockets.OwinWebSocketWrapper : object {
    private static string TraceName;
    private IDictionary`2<string, object> _environment;
    private CancellationTokenSource _cancellationTokenSource;
    private WebSocketContext _context;
    private ITrace _trace;
    internal IDictionary`2<string, object> Environment { get; }
    private WebSocket WebSocket { get; }
    internal OwinWebSocketWrapper(WebSocketContext context);
    internal IDictionary`2<string, object> get_Environment();
    private WebSocket get_WebSocket();
    internal Task SendAsync(ArraySegment`1<byte> buffer, int messageType, bool endOfMessage, CancellationToken cancel);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Host.SystemWeb.WebSockets.OwinWebSocketWrapper/<ReceiveAsync>d__0")]
internal Task`1<Tuple`3<int, bool, int>> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancel);
    internal Task CloseAsync(int status, string description, CancellationToken cancel);
    private Task RedirectSendToCloseAsync(ArraySegment`1<byte> buffer, CancellationToken cancel);
    private static WebSocketMessageType OpCodeToEnum(int messageType);
    private static int EnumToOpCode(WebSocketMessageType webSocketMessageType);
    internal void Cancel();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.Owin.Host.SystemWeb.WebSockets.WebSocketConstants : object {
    internal static string WebSocketSubProtocolKey;
    internal static string WebSocketSendAsyncKey;
    internal static string WebSocketReceiveAyncKey;
    internal static string WebSocketCloseAsyncKey;
    internal static string WebSocketCallCancelledKey;
    internal static string WebSocketVersionKey;
    internal static string WebSocketVersion;
    internal static string WebSocketCloseStatusKey;
    internal static string WebSocketCloseDescriptionKey;
    internal static string AspNetServerVariableWebSocketVersion;
    internal static string SecWebSocketProtocol;
}
internal static class Owin.Loader.Constants : object {
    internal static string OwinStartupAttribute;
    internal static string StartupType;
    internal static string FriendlyName;
    internal static string MethodName;
    internal static string Startup;
    internal static string Configuration;
    internal static string HostAppName;
}
internal class Owin.Loader.DefaultLoader : object {
    private Func`3<string, IList`1<string>, Action`1<IAppBuilder>> _next;
    private Func`2<Type, object> _activator;
    private IEnumerable`1<Assembly> _referencedAssemblies;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`3<ParameterInfo, Type, bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<bool, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    public DefaultLoader(IEnumerable`1<Assembly> referencedAssemblies);
    public DefaultLoader(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> next);
    public DefaultLoader(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> next, Func`2<Type, object> activator);
    public DefaultLoader(Func`3<string, IList`1<string>, Action`1<IAppBuilder>> next, Func`2<Type, object> activator, IEnumerable`1<Assembly> referencedAssemblies);
    public Action`1<IAppBuilder> Load(string startupName, IList`1<string> errorDetails);
    private Action`1<IAppBuilder> LoadImplementation(string startupName, IList`1<string> errorDetails);
    private Tuple`2<Type, string> GetTypeAndMethodNameForConfigurationString(string configuration, IList`1<string> errors);
    private Tuple`2<Type, string> GetDefaultConfiguration(string friendlyName, IList`1<string> errors);
    private Tuple`2<Type, string> SearchForStartupAttribute(string friendlyName, IList`1<string> errors, Boolean& conflict);
    private Tuple`2<Type, string> SearchForStartupConvention(IList`1<string> errors);
    private static void CheckForStartupType(string startupName, Assembly assembly, Type& matchedType, Boolean& conflict, IList`1<string> errors);
    private Tuple`2<string, Assembly> HuntForAssembly(string configuration, IList`1<string> errors);
    private static Assembly TryAssemblyLoad(string assemblyName);
    public static IEnumerable`1<string> DotByDot(string text);
    private Action`1<IAppBuilder> MakeDelegate(Type type, string methodName, IList`1<string> errors);
    private static bool Matches(MethodInfo methodInfo, bool hasReturnValue, Type[] parameterTypes);
    [CompilerGeneratedAttribute]
private static bool <SearchForStartupAttribute>b__3(object attribute);
    [CompilerGeneratedAttribute]
private static bool <SearchForStartupConvention>b__5(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
private static bool <Matches>b__1a(ParameterInfo pi, Type t);
    [CompilerGeneratedAttribute]
private static bool <Matches>b__1b(bool b);
}
internal class Owin.Loader.NullLoader : object {
    private static NullLoader Singleton;
    public static Func`3<string, IList`1<string>, Action`1<IAppBuilder>> Instance { get; }
    private static NullLoader();
    public static Func`3<string, IList`1<string>, Action`1<IAppBuilder>> get_Instance();
    public Action`1<IAppBuilder> Load(string startup, IList`1<string> errors);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class SharedResourceNamespace.LoaderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AssemblyNotFound { get; }
    internal static string ClassNotFoundInAssembly { get; }
    internal static string Exception_AttributeNameConflict { get; }
    internal static string Exception_StartupTypeConflict { get; }
    internal static string FriendlyNameMismatch { get; }
    internal static string MethodNotFoundInClass { get; }
    internal static string NoAssemblyWithStartupClass { get; }
    internal static string NoOwinStartupAttribute { get; }
    internal static string StartupTypePropertyEmpty { get; }
    internal static string StartupTypePropertyMissing { get; }
    internal static string TypeOrMethodNotFound { get; }
    internal static string UnexpectedMethodSignature { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AssemblyNotFound();
    internal static string get_ClassNotFoundInAssembly();
    internal static string get_Exception_AttributeNameConflict();
    internal static string get_Exception_StartupTypeConflict();
    internal static string get_FriendlyNameMismatch();
    internal static string get_MethodNotFoundInClass();
    internal static string get_NoAssemblyWithStartupClass();
    internal static string get_NoOwinStartupAttribute();
    internal static string get_StartupTypePropertyEmpty();
    internal static string get_StartupTypePropertyMissing();
    internal static string get_TypeOrMethodNotFound();
    internal static string get_UnexpectedMethodSignature();
}
[ExtensionAttribute]
internal static class System.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
internal static T Get(IDictionary`2<string, object> dictionary, string key, T fallback);
}
[ExtensionAttribute]
public static class System.Web.HttpContextBaseExtensions : object {
    [ExtensionAttribute]
private static IDictionary`2<string, object> GetOwinEnvironment(HttpContextBase context);
    [ExtensionAttribute]
public static IOwinContext GetOwinContext(HttpContextBase context);
    [ExtensionAttribute]
public static IOwinContext GetOwinContext(HttpRequestBase request);
}
[ExtensionAttribute]
public static class System.Web.HttpContextExtensions : object {
    [ExtensionAttribute]
private static IDictionary`2<string, object> GetOwinEnvironment(HttpContext context);
    [ExtensionAttribute]
public static IOwinContext GetOwinContext(HttpContext context);
    [ExtensionAttribute]
public static IOwinContext GetOwinContext(HttpRequest request);
}
[ExtensionAttribute]
public static class System.Web.Routing.RouteCollectionExtensions : object {
    [ExtensionAttribute]
public static RouteBase MapOwinPath(RouteCollection routes, string pathBase);
    [ExtensionAttribute]
public static RouteBase MapOwinPath(RouteCollection routes, string pathBase, TApp app);
    [ExtensionAttribute]
public static RouteBase MapOwinPath(RouteCollection routes, string pathBase, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static RouteBase MapOwinPath(RouteCollection routes, string name, string pathBase);
    [ExtensionAttribute]
public static RouteBase MapOwinPath(RouteCollection routes, string name, string pathBase, TApp app);
    [ExtensionAttribute]
public static RouteBase MapOwinPath(RouteCollection routes, string name, string pathBase, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeUrl, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeUrl, RouteValueDictionary defaults, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeUrl, RouteValueDictionary defaults, RouteValueDictionary constraints, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeUrl, RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeName, string routeUrl, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeName, string routeUrl, RouteValueDictionary defaults, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeName, string routeUrl, RouteValueDictionary defaults, RouteValueDictionary constraints, Action`1<IAppBuilder> startup);
    [ExtensionAttribute]
public static Route MapOwinRoute(RouteCollection routes, string routeName, string routeUrl, RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens, Action`1<IAppBuilder> startup);
    private static T Add(RouteCollection routes, string name, T item);
}
