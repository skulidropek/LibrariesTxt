internal static class Microsoft.SqlServer.Management.Assessment.AlgebraicUtil : object {
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.AlgebraicUtil/<GetPermutations>d__0")]
public static IEnumerable`1<Int32[]> GetPermutations(IReadOnlyList`1<int> src);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.AlgebraicUtil/<GetCombinations>d__1`2")]
public static IEnumerable`1<TBasket> GetCombinations(IReadOnlyList`1<IReadOnlyList`1<TItem>> columns, Func`3<TBasket, TItem, TBasket> aggregator);
}
[DebuggerDisplayAttribute("Note for {Check.Id}")]
internal class Microsoft.SqlServer.Management.Assessment.AssessmentNote : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpLink>k__BackingField;
    [CompilerGeneratedAttribute]
private SeverityLevel <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public string Message { get; }
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public string HelpLink { get; }
    public SeverityLevel Severity { get; }
    public DateTimeOffset Timestamp { get; }
    public AssessmentNote(ICheck check, string message, string targetPath, SqlObjectType targetType, string helpLink, SeverityLevel severity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_HelpLink();
    [CompilerGeneratedAttribute]
public sealed virtual SeverityLevel get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
}
internal class Microsoft.SqlServer.Management.Assessment.AssessmentRequest : object {
    private Check[] checks;
    [CompilerGeneratedAttribute]
private EvaluationContext`1<object> <EvaluationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlObjectLocator <Target>k__BackingField;
    public EvaluationContext`1<object> EvaluationContext { get; }
    public ISqlObjectLocator Target { get; }
    public IEnumerable`1<Check> Checks { get; }
    public AssessmentRequest(IEvaluationContext baseEvaluationContext, ISqlObjectLocator locator, Check[] checks);
    [CompilerGeneratedAttribute]
public sealed virtual EvaluationContext`1<object> get_EvaluationContext();
    [CompilerGeneratedAttribute]
public sealed virtual ISqlObjectLocator get_Target();
    public sealed virtual IEnumerable`1<Check> get_Checks();
    public sealed virtual bool TryGetData(string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.AssessmentRequest2 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Check> <Checks>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CheckSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ICheck, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationContext`1<object> <EvaluationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlObjectLocator <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDryRun>k__BackingField;
    public IEnumerable`1<Check> Checks { get; public set; }
    public String[] CheckSelector { get; }
    public Func`2<ICheck, bool> Predicate { get; }
    public EvaluationContext`1<object> EvaluationContext { get; }
    public ISqlObjectLocator Target { get; }
    public bool IsDryRun { get; }
    public AssessmentRequest2(ISqlObjectLocator locator, EvaluationContext`1<object> baseContext, String[] checkSelector, Func`2<ICheck, bool> predicate, bool isDryRun);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Check> get_Checks();
    [CompilerGeneratedAttribute]
public void set_Checks(IEnumerable`1<Check> value);
    [CompilerGeneratedAttribute]
public String[] get_CheckSelector();
    [CompilerGeneratedAttribute]
public Func`2<ICheck, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public sealed virtual EvaluationContext`1<object> get_EvaluationContext();
    [CompilerGeneratedAttribute]
public sealed virtual ISqlObjectLocator get_Target();
    [CompilerGeneratedAttribute]
public bool get_IsDryRun();
    public sealed virtual bool TryGetData(string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.AssessmentSuccess : object {
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public string Message { get; }
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public DateTimeOffset Timestamp { get; }
    public AssessmentSuccess(ICheck check, string targetPath, SqlObjectType targetType);
    public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
}
internal class Microsoft.SqlServer.Management.Assessment.AtomicSet`1 : object {
    private List`1<T> rep;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <Comparer>k__BackingField;
    public IEqualityComparer`1<T> Comparer { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public AtomicSet`1(IEqualityComparer`1<T> comparer);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<T> get_Comparer();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public T Find(T value);
    public T GetOrAdd(T value);
}
internal class Microsoft.SqlServer.Management.Assessment.AttributeEvaluationContext : EvaluationContext`1<object> {
    [CompilerGeneratedAttribute]
private CharacteristicCollection <KnownCharacteristics>k__BackingField;
    public CharacteristicCollection KnownCharacteristics { get; }
    public AttributeEvaluationContext(string name, IEvaluationContext baseContext);
    [CompilerGeneratedAttribute]
public CharacteristicCollection get_KnownCharacteristics();
    protected virtual bool TryGetDataCore(string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.CharacteristicFailure : ValueType {
    public CharacteristicCollection Subject;
    public CharacteristicCollection Reason;
}
internal class Microsoft.SqlServer.Management.Assessment.CheckContext : ProbeContext {
    [CompilerGeneratedAttribute]
private Check <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private CharacteristicCollection <Requirements>k__BackingField;
    public Check Check { get; }
    public CharacteristicCollection Requirements { get; public set; }
    public CheckContext(IEvaluationContext baseContext, Check check);
    [CompilerGeneratedAttribute]
public Check get_Check();
    [CompilerGeneratedAttribute]
public CharacteristicCollection get_Requirements();
    [CompilerGeneratedAttribute]
public void set_Requirements(CharacteristicCollection value);
    protected virtual bool TryGetDataCore(string column, Object& value);
}
[DebuggerDisplayAttribute("Error {Message}")]
public class Microsoft.SqlServer.Management.Assessment.CheckError : object {
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Exception> <InnerExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public string Message { get; }
    public IReadOnlyCollection`1<Exception> InnerExceptions { get; }
    public DateTimeOffset Timestamp { get; }
    public CheckError(ICheck check, string message, SqlObjectType targetType, string targetPath);
    public CheckError(ICheck check, string message, Exception innerException, SqlObjectType targetType, string targetPath);
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Exception> get_InnerExceptions();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
}
[DebuggerDisplayAttribute("Check {Id}")]
public class Microsoft.SqlServer.Management.Assessment.Checks.Check : object {
    private string name;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpLink>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProbeReference> <Probes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private SeverityLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Condition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private IPattern`1<ISqlObjectLocator> <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <OriginVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Expression> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterizedText <AssessmentMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogicsProvider <Logics>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Expression> <Locals>k__BackingField;
    public string Description { get; public set; }
    public string DisplayName { get; public set; }
    public string Id { get; public set; }
    public string HelpLink { get; public set; }
    public List`1<ProbeReference> Probes { get; }
    public bool Enabled { get; public set; }
    public SeverityLevel Level { get; public set; }
    public HashSet`1<string> Tags { get; }
    public string Message { get; public set; }
    public Condition Condition { get; public set; }
    public IPattern`1<ISqlObjectLocator> Target { get; public set; }
    public string OriginName { get; public set; }
    public Version OriginVersion { get; public set; }
    public IDictionary`2<string, Expression> Parameters { get; }
    internal ParameterizedText AssessmentMessage { get; internal set; }
    public ILogicsProvider Logics { get; public set; }
    internal IDictionary`2<string, Expression> Locals { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayName(string value);
    public sealed virtual string get_Id();
    public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HelpLink();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HelpLink(string value);
    [CompilerGeneratedAttribute]
public List`1<ProbeReference> get_Probes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual SeverityLevel get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(SeverityLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_Tags();
    public string get_Message();
    public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Condition get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Condition value);
    [CompilerGeneratedAttribute]
public sealed virtual IPattern`1<ISqlObjectLocator> get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Target(IPattern`1<ISqlObjectLocator> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OriginName();
    [CompilerGeneratedAttribute]
public void set_OriginName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_OriginVersion();
    [CompilerGeneratedAttribute]
public void set_OriginVersion(Version value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Expression> get_Parameters();
    [CompilerGeneratedAttribute]
internal ParameterizedText get_AssessmentMessage();
    [CompilerGeneratedAttribute]
internal void set_AssessmentMessage(ParameterizedText value);
    [CompilerGeneratedAttribute]
public sealed virtual ILogicsProvider get_Logics();
    [CompilerGeneratedAttribute]
public void set_Logics(ILogicsProvider value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, Expression> get_Locals();
    [CompilerGeneratedAttribute]
internal void set_Locals(IDictionary`2<string, Expression> value);
    internal virtual IAssessmentResult GetRecommendations(ISqlObjectLocator target, PermutationContext data);
}
public interface Microsoft.SqlServer.Management.Assessment.Checks.ICheck {
    public string Description { get; public set; }
    public string DisplayName { get; public set; }
    public bool Enabled { get; public set; }
    public string HelpLink { get; public set; }
    public SeverityLevel Level { get; public set; }
    public string Id { get; }
    public HashSet`1<string> Tags { get; }
    public IPattern`1<ISqlObjectLocator> Target { get; public set; }
    public string OriginName { get; }
    public Version OriginVersion { get; }
    public ILogicsProvider Logics { get; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual string get_HelpLink();
    public abstract virtual void set_HelpLink(string value);
    public abstract virtual SeverityLevel get_Level();
    public abstract virtual void set_Level(SeverityLevel value);
    public abstract virtual string get_Id();
    public abstract virtual HashSet`1<string> get_Tags();
    public abstract virtual IPattern`1<ISqlObjectLocator> get_Target();
    public abstract virtual void set_Target(IPattern`1<ISqlObjectLocator> value);
    public abstract virtual string get_OriginName();
    public abstract virtual Version get_OriginVersion();
    public abstract virtual ILogicsProvider get_Logics();
}
public class Microsoft.SqlServer.Management.Assessment.Checks.ProbeReference : object {
    [CompilerGeneratedAttribute]
private string <ProbeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProbeNameAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Expression> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataMorph <Morph>k__BackingField;
    public string ProbeName { get; }
    public string ProbeNameAlias { get; }
    internal Dictionary`2<string, Expression> Parameters { get; }
    [JsonPropertyAttribute("transform")]
public IDataMorph Morph { get; public set; }
    public ProbeReference(string probeName, string probeNameAlias);
    public ProbeReference(string probeName, IDictionary`2<string, Expression> parameters, string probeNameAlias, IDataMorph dataMorph);
    [CompilerGeneratedAttribute]
public string get_ProbeName();
    [CompilerGeneratedAttribute]
public string get_ProbeNameAlias();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Expression> get_Parameters();
    [CompilerGeneratedAttribute]
public IDataMorph get_Morph();
    [CompilerGeneratedAttribute]
public void set_Morph(IDataMorph value);
    public bool Equals(ProbeReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Microsoft.SqlServer.Management.Assessment.CodeSignConstants : object {
    public static string SqlPublicKey;
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Assessment.CollectionUtil : object {
    [ExtensionAttribute]
public static TDestination UnionWith(TDestination dict, TSource other);
    [ExtensionAttribute]
public static TDictionary PrefixKeys(string prefix, TDictionary dictionary);
    [ExtensionAttribute]
public static TDictionary PrefixKeys(TDictionary dictionary, string prefix);
    [ExtensionAttribute]
public static TDictionary Add(TDictionary dictionary, KeyValuePair`2<string, string> pair);
    [ExtensionAttribute]
public static HashSet`1<T> SplitWith(HashSet`1<T> left, HashSet`1<T> right);
    public static T[] EmptyArray();
    public static IReadOnlyList`1<T> EmptyList();
}
internal class Microsoft.SqlServer.Management.Assessment.CompositeResultGrouper : object {
    private List`1<IResultGrouper> rep;
    public CompositeResultGrouper(IResultGrouper[] groupers);
    public sealed virtual void Consolidate(ISqlObjectLocator target, EngineConfig config, List`1<IAssessmentResult> results);
}
public class Microsoft.SqlServer.Management.Assessment.ConcurrentSet`1 : object {
    private ConcurrentDictionary`2<TItem, bool> rep;
    public ConcurrentSet`1(IEqualityComparer`1<TItem> comparer);
    public bool Add(TItem item);
    public bool Contains(TItem item);
    public void Remove(TItem item);
}
public class Microsoft.SqlServer.Management.Assessment.Configuration.AssessmentWarning : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public string Message { get; }
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public DateTimeOffset Timestamp { get; }
    public AssessmentWarning(Check check, SqlObjectType targetType, string targetPath, string message);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.ComplementaryPattern`1 : object {
    [CompilerGeneratedAttribute]
private IPattern`1<T> <Original>k__BackingField;
    public IPattern`1<T> Original { get; }
    public ComplementaryPattern`1(IPattern`1<T> original);
    [CompilerGeneratedAttribute]
public IPattern`1<T> get_Original();
    public sealed virtual bool IsMatch(T value);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Configuration.CompositePattern`1 : object {
    [CompilerGeneratedAttribute]
private List`1<IPattern`1<T>> <Arguments>k__BackingField;
    public List`1<IPattern`1<T>> Arguments { get; }
    protected CompositePattern`1(IEnumerable`1<IPattern`1<T>> arguments);
    [CompilerGeneratedAttribute]
public List`1<IPattern`1<T>> get_Arguments();
    public abstract virtual bool IsMatch(T value);
    protected abstract virtual CompositePattern`1<T> Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.ConjunctionPattern`1 : CompositePattern`1<T> {
    public ConjunctionPattern`1(IEnumerable`1<IPattern`1<T>> arguments);
    public virtual bool IsMatch(T value);
    protected virtual CompositePattern`1<T> Copy();
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.ChangeTransform`1 : object {
    public abstract virtual TValue Apply(TValue original);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckByIdSelector : CheckSelector {
    [CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    public string CheckId { get; }
    public CheckByIdSelector(string checkId, JsonReader reader);
    [CompilerGeneratedAttribute]
public string get_CheckId();
    public virtual bool IsMatch(Check check);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckByTagSelector : CheckSelector {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Tags>k__BackingField;
    public HashSet`1<string> Tags { get; }
    public CheckByTagSelector(String[] tags);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Tags();
    public virtual bool IsMatch(Check check);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckChange : CheckSpecialization {
    public CheckChange(CheckSelector selector, SqlObjectLocatorPattern target, IEnumerable`1<IItemChange`1<Check>> changes);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckChange/<Apply>d__1")]
public IEnumerable`1<Check> Apply(IEnumerable`1<Check> source);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckConditionAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckConditionAccessor <Instance>k__BackingField;
    public static CheckConditionAccessor Instance { get; }
    private static CheckConditionAccessor();
    [CompilerGeneratedAttribute]
public static CheckConditionAccessor get_Instance();
    public sealed virtual void SetValue(Check target, Condition newValue);
    public sealed virtual Condition GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckDefinition : CheckRule {
    [CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    public string CheckId { get; }
    public CheckDefinition(string checkId, SqlObjectLocatorPattern target, IEnumerable`1<IItemChange`1<Check>> changes);
    [CompilerGeneratedAttribute]
public string get_CheckId();
    public Check CreateCheck(string rulesetName, Version rulesetVersion);
    public bool IsMatch(ISqlObjectLocator target);
    public virtual void ApplyTo(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckDescriptionAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckDescriptionAccessor <Instance>k__BackingField;
    public static CheckDescriptionAccessor Instance { get; }
    private static CheckDescriptionAccessor();
    [CompilerGeneratedAttribute]
public static CheckDescriptionAccessor get_Instance();
    public sealed virtual void SetValue(Check target, string newValue);
    public sealed virtual string GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckDisplayNameAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckDisplayNameAccessor <Instance>k__BackingField;
    public static CheckDisplayNameAccessor Instance { get; }
    private static CheckDisplayNameAccessor();
    [CompilerGeneratedAttribute]
public static CheckDisplayNameAccessor get_Instance();
    public sealed virtual void SetValue(Check target, string newValue);
    public sealed virtual string GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckEnabledAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckEnabledAccessor <Instance>k__BackingField;
    public static CheckEnabledAccessor Instance { get; }
    private static CheckEnabledAccessor();
    [CompilerGeneratedAttribute]
public static CheckEnabledAccessor get_Instance();
    public sealed virtual void SetValue(Check target, bool newValue);
    public sealed virtual bool GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckHelpLinkAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckHelpLinkAccessor <Instance>k__BackingField;
    public static CheckHelpLinkAccessor Instance { get; }
    private static CheckHelpLinkAccessor();
    [CompilerGeneratedAttribute]
public static CheckHelpLinkAccessor get_Instance();
    public sealed virtual void SetValue(Check target, string newValue);
    public sealed virtual string GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckInPlaceTransform : InPlaceTransform`1<Check> {
    [CompilerGeneratedAttribute]
private List`1<IItemChange`1<Check>> <Children>k__BackingField;
    public List`1<IItemChange`1<Check>> Children { get; }
    public CheckInPlaceTransform(IEnumerable`1<IItemChange`1<Check>> changes);
    [CompilerGeneratedAttribute]
public List`1<IItemChange`1<Check>> get_Children();
    public virtual void ApplyTo(Check check);
    public sealed virtual bool Equals(CheckInPlaceTransform other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckLocalsAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckLocalsAccessor <Instance>k__BackingField;
    public static CheckLocalsAccessor Instance { get; }
    private static CheckLocalsAccessor();
    [CompilerGeneratedAttribute]
public static CheckLocalsAccessor get_Instance();
    public sealed virtual void SetValue(Check target, IDictionary`2<string, Expression> newValue);
    public sealed virtual IDictionary`2<string, Expression> GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckMessageAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckMessageAccessor <Instance>k__BackingField;
    public static CheckMessageAccessor Instance { get; }
    private static CheckMessageAccessor();
    [CompilerGeneratedAttribute]
public static CheckMessageAccessor get_Instance();
    public sealed virtual void SetValue(Check target, string newValue);
    public sealed virtual string GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckParameterAccessor : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CheckParameterAccessor(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    public sealed virtual void SetValue(Check target, Expression newValue);
    public sealed virtual Expression GetValue(Check target);
    public sealed virtual bool Equals(CheckParameterAccessor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckProbesAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckProbesAccessor <Instance>k__BackingField;
    public static CheckProbesAccessor Instance { get; }
    private static CheckProbesAccessor();
    [CompilerGeneratedAttribute]
public static CheckProbesAccessor get_Instance();
    public sealed virtual void SetValue(Check target, List`1<ProbeReference> newValue);
    public sealed virtual List`1<ProbeReference> GetValue(Check target);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckRule : CheckInPlaceTransform {
    [CompilerGeneratedAttribute]
private SqlObjectLocatorPattern <Target>k__BackingField;
    public SqlObjectLocatorPattern Target { get; public set; }
    protected CheckRule(SqlObjectLocatorPattern target, IEnumerable`1<IItemChange`1<Check>> changes);
    [CompilerGeneratedAttribute]
public SqlObjectLocatorPattern get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(SqlObjectLocatorPattern value);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckSelector : object {
    public abstract virtual bool IsMatch(Check check);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckSeverityAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckSeverityAccessor <Instance>k__BackingField;
    public static CheckSeverityAccessor Instance { get; }
    private static CheckSeverityAccessor();
    [CompilerGeneratedAttribute]
public static CheckSeverityAccessor get_Instance();
    public sealed virtual void SetValue(Check target, SeverityLevel newValue);
    public sealed virtual SeverityLevel GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckSpecialization : CheckRule {
    [CompilerGeneratedAttribute]
private CheckSelector <Selector>k__BackingField;
    public CheckSelector Selector { get; public set; }
    public CheckSpecialization(CheckSelector selector, SqlObjectLocatorPattern target, IEnumerable`1<IItemChange`1<Check>> changes);
    [CompilerGeneratedAttribute]
public CheckSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(CheckSelector value);
    public bool IsMatch(Check source, ISqlObjectLocator target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckTagsAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckTagsAccessor <Instance>k__BackingField;
    public static CheckTagsAccessor Instance { get; }
    private static CheckTagsAccessor();
    [CompilerGeneratedAttribute]
public static CheckTagsAccessor get_Instance();
    public sealed virtual void SetValue(Check target, String[] newValue);
    public sealed virtual String[] GetValue(Check target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.CheckTargetAccessor : object {
    [CompilerGeneratedAttribute]
private static CheckTargetAccessor <Instance>k__BackingField;
    public static CheckTargetAccessor Instance { get; }
    private static CheckTargetAccessor();
    [CompilerGeneratedAttribute]
public static CheckTargetAccessor get_Instance();
    public sealed virtual void SetValue(Check target, IPattern`1<ISqlObjectLocator> newValue);
    public sealed virtual IPattern`1<ISqlObjectLocator> GetValue(Check target);
}
internal interface Microsoft.SqlServer.Management.Assessment.Configuration.Customization.IChangeAccessor`2 {
    public abstract virtual void SetValue(TTarget target, TValue newValue);
    public abstract virtual TValue GetValue(TTarget target);
}
public interface Microsoft.SqlServer.Management.Assessment.Configuration.Customization.IItemChange`1 {
    public abstract virtual void ApplyTo(TTarget target);
}
public interface Microsoft.SqlServer.Management.Assessment.Configuration.Customization.IMultipleChangeAccessor`2 {
    public abstract virtual IEnumerable`1<TValue> GetValues(TTarget target);
}
public abstract class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.InPlaceTransform`1 : object {
    public abstract virtual void ApplyTo(TTarget target);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.ItemChange`2 : object {
    [CompilerGeneratedAttribute]
private IChangeAccessor`2<TTarget, TValue> <Accessor>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeTransform`1<TValue> <Transform>k__BackingField;
    public IChangeAccessor`2<TTarget, TValue> Accessor { get; }
    public ChangeTransform`1<TValue> Transform { get; }
    public ItemChange`2(IChangeAccessor`2<TTarget, TValue> accessor, ChangeTransform`1<TValue> transform);
    [CompilerGeneratedAttribute]
public IChangeAccessor`2<TTarget, TValue> get_Accessor();
    [CompilerGeneratedAttribute]
public ChangeTransform`1<TValue> get_Transform();
    public sealed virtual void ApplyTo(TTarget target);
    public sealed virtual bool Equals(ItemChange`2<TTarget, TValue> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.MultipleItemChange`2 : object {
    [CompilerGeneratedAttribute]
private IMultipleChangeAccessor`2<TTarget, TValue> <Accessor>k__BackingField;
    [CompilerGeneratedAttribute]
private InPlaceTransform`1<TValue> <Transform>k__BackingField;
    public IMultipleChangeAccessor`2<TTarget, TValue> Accessor { get; }
    public InPlaceTransform`1<TValue> Transform { get; }
    public MultipleItemChange`2(IMultipleChangeAccessor`2<TTarget, TValue> accessor, InPlaceTransform`1<TValue> transform);
    [CompilerGeneratedAttribute]
public IMultipleChangeAccessor`2<TTarget, TValue> get_Accessor();
    [CompilerGeneratedAttribute]
public InPlaceTransform`1<TValue> get_Transform();
    public sealed virtual void ApplyTo(TTarget target);
    public sealed virtual bool Equals(MultipleItemChange`2<TTarget, TValue> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.OverwriteTransform`1 : ChangeTransform`1<TValue> {
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public TValue Value { get; }
    public OverwriteTransform`1(TValue value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    public virtual TValue Apply(TValue original);
    public sealed virtual bool Equals(OverwriteTransform`1<TValue> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Customization.UnitTransform`1 : ChangeTransform`1<TValue> {
    public virtual TValue Apply(TValue original);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.DisjunctionPattern`1 : CompositePattern`1<T> {
    public DisjunctionPattern`1(IEnumerable`1<IPattern`1<T>> arguments);
    public virtual bool IsMatch(T value);
    protected virtual CompositePattern`1<T> Copy();
}
[JsonObjectAttribute("1")]
public class Microsoft.SqlServer.Management.Assessment.Configuration.EngineConfig : object {
    private IRuleset defaultRuleset;
    [CompilerGeneratedAttribute]
private bool <CloneConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCheckResults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldReportSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<Version, IRuleset>> <Rulesets>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CurrentRulesets>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CharacteristicProviderSource <CharacteristicProviderSource>k__BackingField;
    public bool CloneConnection { get; public set; }
    public int MaxCheckResults { get; public set; }
    public bool ShouldReportSuccess { get; public set; }
    public ConcurrentDictionary`2<string, ConcurrentDictionary`2<Version, IRuleset>> Rulesets { get; }
    public IRuleset DefaultRuleset { get; internal set; }
    public List`1<string> CurrentRulesets { get; private set; }
    [JsonPropertyAttribute]
private Version Version { get; private set; }
    [JsonPropertyAttribute]
private string Name { get; private set; }
    internal CharacteristicProviderSource CharacteristicProviderSource { get; }
    [CompilerGeneratedAttribute]
public bool get_CloneConnection();
    [CompilerGeneratedAttribute]
public void set_CloneConnection(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxCheckResults();
    [CompilerGeneratedAttribute]
public void set_MaxCheckResults(int value);
    [CompilerGeneratedAttribute]
public bool get_ShouldReportSuccess();
    [CompilerGeneratedAttribute]
public void set_ShouldReportSuccess(bool value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ConcurrentDictionary`2<Version, IRuleset>> get_Rulesets();
    public IRuleset get_DefaultRuleset();
    internal void set_DefaultRuleset(IRuleset value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CurrentRulesets();
    [CompilerGeneratedAttribute]
private void set_CurrentRulesets(List`1<string> value);
    [CompilerGeneratedAttribute]
private Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
private string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal CharacteristicProviderSource get_CharacteristicProviderSource();
    public void AddRuleset(IRuleset item, string alias);
    public IEnumerable`1<ICheck> GetChecks(ISqlObjectLocator target);
    public IEnumerable`1<ICheck> GetChecks(ISqlObjectLocator target, IEnumerable`1<string> checkIdsOrTags);
    public IProbe GetProbeImplementation(string probeId, ISqlObjectLocator target);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.EngineConfig/<GetChecksCore>d__38")]
private IEnumerable`1<ICheck> GetChecksCore(ISqlObjectLocator target, IEnumerable`1<string> checkIdsOrTags);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.EngineConfig/<GetChecksCore>d__39")]
private IEnumerable`1<ICheck> GetChecksCore(ISqlObjectLocator target);
    private IRuleset GetRuleset(string alias);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.ExactStringPattern : object {
    [CompilerGeneratedAttribute]
private string <Reference>k__BackingField;
    public string Reference { get; }
    public ExactStringPattern(string reference);
    [CompilerGeneratedAttribute]
public string get_Reference();
    public sealed virtual bool IsMatch(string value);
    public sealed virtual bool Equals(ExactStringPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface Microsoft.SqlServer.Management.Assessment.Configuration.IPattern`1 {
    public abstract virtual bool IsMatch(T value);
}
public interface Microsoft.SqlServer.Management.Assessment.Configuration.IQuasiCheck {
    public abstract virtual string GetMessage(ISqlObjectLocator target);
}
public interface Microsoft.SqlServer.Management.Assessment.Configuration.IRuleset {
    public string Name { get; public set; }
    public Version Version { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual Version get_Version();
    public abstract virtual void set_Version(Version value);
    public abstract virtual void GetSuspects(ISqlObjectLocator target, HashSet`1<string> ids, HashSet`1<string> tags);
    public abstract virtual IEnumerable`1<ICheck> GetChecks(ISqlObjectLocator target, IEnumerable`1<ICheck> baseChecks, HashSet`1<string> ids, HashSet`1<string> tags);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.AggregateFuncConverter : JsonConverter`1<IAggregateFunc> {
    private static string TypePropertyName;
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, IAggregateFunc value, JsonSerializer serializer);
    public virtual IAggregateFunc ReadJson(JsonReader reader, Type objectType, IAggregateFunc existingValue, bool hasExistingValue, JsonSerializer serializer);
    private static IAggregateFunc CreateMorph(string funcCode, JsonReader reader);
    private static IAggregateFunc ReadAggregateFuncObject(JsonReader reader, JsonSerializer serializer);
    private static IAggregateFunc ReadFuncByName(JsonReader reader, JsonSerializer _1);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.AssessmentMessageConverter : JsonConverter`1<ParameterizedText> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual ParameterizedText ReadJson(JsonReader reader, Type objectType, ParameterizedText existingValue, bool hasExistingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, ParameterizedText value, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.CheckModificationBuilder : object {
    public static string TargetPropertyName;
    public static string DisplayNamePropertyName;
    public static string DescriptionPropertyName;
    public static string MessagePropertyName;
    public static string HelpLinkPropertyName;
    public static string LevelPropertyName;
    public static string ProbesPropertyName;
    public static string ConditionPropertyName;
    public static string EnabledPropertyName;
    public static string TagsPropertyName;
    public static string IdPropertyName;
    public static string TargetFilterPropertyName;
    public static string ItemTypePropertyName;
    public static string LocalsPropertyName;
    public static string DefinitionItemType;
    public static string OverrideItemType;
    [CompilerGeneratedAttribute]
private CheckSelector <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectLocatorPattern <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectLocatorPattern <TargetFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IItemChange`1<Check>> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonReader <Reader>k__BackingField;
    public CheckSelector Selector { get; public set; }
    public string ItemType { get; public set; }
    public SqlObjectLocatorPattern Target { get; public set; }
    public SqlObjectLocatorPattern TargetFilter { get; public set; }
    public List`1<IItemChange`1<Check>> Children { get; }
    public JsonReader Reader { get; public set; }
    [CompilerGeneratedAttribute]
public CheckSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(CheckSelector value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public SqlObjectLocatorPattern get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(SqlObjectLocatorPattern value);
    [CompilerGeneratedAttribute]
public SqlObjectLocatorPattern get_TargetFilter();
    [CompilerGeneratedAttribute]
public void set_TargetFilter(SqlObjectLocatorPattern value);
    [CompilerGeneratedAttribute]
public List`1<IItemChange`1<Check>> get_Children();
    [CompilerGeneratedAttribute]
public JsonReader get_Reader();
    [CompilerGeneratedAttribute]
public void set_Reader(JsonReader value);
    public CheckRule Render();
    private CheckRule CreateOverride();
    private CheckDefinition CreateNewCheck();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.CheckModificationConverter : JsonConverter`1<CheckRule> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, CheckRule value, JsonSerializer serializer);
    public virtual CheckRule ReadJson(JsonReader reader, Type objectType, CheckRule existingValue, bool hasExistingValue, JsonSerializer serializer);
    private static ItemChange`2<Check, TValue> ReadReplaceItemChange(JsonReader reader, JsonSerializer serializer, IChangeAccessor`2<Check, TValue> accessor);
    private static ItemChange`2<Check, IPattern`1<ISqlObjectLocator>> ReadTargetChange(JsonReader reader, JsonSerializer serializer, IChangeAccessor`2<Check, IPattern`1<ISqlObjectLocator>> accessor);
    private static IItemChange`1<Check> ReadChange(JsonReader reader, JsonSerializer serializer);
    private static CheckSelector ReadSelector(JsonReader reader, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.ConcreteConverter`1 : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.ConditionConverter : JsonConverter`1<Condition> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, Condition value, JsonSerializer serializer);
    public virtual Condition ReadJson(JsonReader reader, Type objectType, Condition existingValue, bool hasExistingValue, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.DataMorphConverter : JsonConverter`1<IDataMorph> {
    private static string TypePropertyName;
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, IDataMorph value, JsonSerializer serializer);
    public virtual IDataMorph ReadJson(JsonReader reader, Type objectType, IDataMorph existingValue, bool hasExistingValue, JsonSerializer serializer);
    private static IDataMorph ReadMorphByName(JsonReader reader, JsonSerializer _1);
    private static IDataMorph CreateMorph(string morphCode, JsonReader reader);
    private static IDataMorph ReadMorphObject(JsonReader reader, JsonSerializer serializer);
    private static IDataMorph ReadCompositeMorph(JsonReader reader, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.ExpressionConverter : JsonConverter`1<Expression> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, Expression value, JsonSerializer serializer);
    public virtual Expression ReadJson(JsonReader reader, Type objectType, Expression existingValue, bool hasExistingValue, JsonSerializer serializer);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.ExpressionConverter/<ReadSequence>d__4")]
private static IEnumerable`1<Expression> ReadSequence(Expression firstItem, JsonReader reader, JsonSerializer serializer, JsonToken endToken);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.ExpressionConverter/<ReadSequence>d__5")]
private static IEnumerable`1<Expression> ReadSequence(JsonReader reader, JsonSerializer serializer, JsonToken endToken);
    private static Expression ReadArray(JsonReader reader, JsonSerializer serializer);
    private static Expression ReadDateLiteral(JsonReader reader, JsonSerializer serializer);
    private static Expression ReadNullLiteral(JsonReader _1, JsonSerializer _2);
    private static Expression ReadBooleanLiteral(JsonReader reader, JsonSerializer serializer);
    private static Expression ReadFloatLiteral(JsonReader reader, JsonSerializer serializer);
    private static Expression ReadString(JsonReader reader, JsonSerializer _1);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.ExpressionConverter/<ReadSequence>d__12")]
private static IEnumerable`1<Expression> ReadSequence(JsonReader reader, JsonSerializer serializer);
    private static Expression ReadIntegerLiteral(JsonReader reader, JsonSerializer serializer);
    private static Expression ReadObject(JsonReader reader, JsonSerializer serializer);
    private static Expression ReadNamedExpression(JsonReader reader, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.ExtendedRegexConverter : JsonConverter`1<IPattern`1<string>> {
    private static char RegexSign;
    private static string ComplementarySign;
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, IPattern`1<string> value, JsonSerializer serializer);
    public virtual IPattern`1<string> ReadJson(JsonReader reader, Type objectType, IPattern`1<string> existingValue, bool hasExistingValue, JsonSerializer serializer);
    private static IPattern`1<string> ReadPattern(JsonReader reader, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.FlatMeasurementJsonConverter : JsonConverter`1<IDataRow> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, IDataRow value, JsonSerializer serializer);
    public virtual IDataRow ReadJson(JsonReader reader, Type objectType, IDataRow existingValue, bool hasExistingValue, JsonSerializer serializer);
    public static IList`1<JsonConverter> GetConverters();
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.FlattenDataMorph : MultidimensionalCachedMorph {
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    public List`1<string> Columns { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<string> value);
    public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.FlattenDataMorph/<TransformRows>d__5")]
internal IEnumerable`1<IDataRow> TransformRows(IEnumerable`1<IDataRow> source);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.GrouperConverter : JsonConverter`1<Grouper> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, Grouper value, JsonSerializer serializer);
    public virtual Grouper ReadJson(JsonReader reader, Type objectType, Grouper existingValue, bool hasExistingValue, JsonSerializer serializer);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Configuration.Json.JsonConverter`1 : JsonConverter {
    public sealed virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual void WriteJson(JsonWriter writer, T value, JsonSerializer serializer);
    public sealed virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T ReadJson(JsonReader reader, Type objectType, T existingValue, bool hasExistingValue, JsonSerializer serializer);
    public sealed virtual bool CanConvert(Type objectType);
    private static bool IsNullable(Type t);
    private static bool IsNullableType(Type t);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.ProbeCollectionConverter : JsonConverter`1<ProbeCollection> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual ProbeCollection ReadJson(JsonReader reader, Type objectType, ProbeCollection existingValue, bool hasExistingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, ProbeCollection value, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.ProbeConverter : JsonConverter`1<IProbe> {
    public static string TypePropertyName;
    public static string ImplementationPropertyName;
    public static string ClassPropertyName;
    public static string AssemblyPropertyName;
    public static string SqlProbeTypeSign;
    public static string ClrProbeTypeSign;
    public static string ExternalProbeTypeSign;
    public static string CmdShellProbeTypeSign;
    public static string PowerShellProbeTypeSign;
    public static string WmiProbeTypeSign;
    public static string AzGraphProbeTypeSign;
    public static string AzMetadataProbeTypeSign;
    public static string RegistryProbeTypeSign;
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, IProbe value, JsonSerializer serializer);
    public virtual IProbe ReadJson(JsonReader reader, Type objectType, IProbe existingValue, bool hasExistingValue, JsonSerializer serializer);
    private static SqlAssessmentJsonException CreateAssemblyLoadException(string assemblyString, JsonReader reader, Exception innerException);
    private static Assembly LoadAssembly(string assemblyString, JsonReader reader);
    private static Assembly LoadAssemblyFrom(string assemblyString, JsonReader reader);
    private static ExternalProbe ReadExternalProbe(JObject rep, JsonReader reader, JsonSerializer serializer);
    private static IProbe ReadClrProbe(JObject rep, JsonReader reader, JsonSerializer serializer);
    private static TProbe ReadStandardProbe(JObject rep, JsonReader reader, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.ProbeReferenceConverter : JsonConverter`1<ProbeReference> {
    public static string IdPropertyName;
    public static string ParametersPropertyName;
    public static string AliasPropertyName;
    public static string TransformPropertyName;
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, ProbeReference value, JsonSerializer serializer);
    public virtual ProbeReference ReadJson(JsonReader reader, Type objectType, ProbeReference existingValue, bool hasExistingValue, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.RangeConverter`1 : JsonConverter`1<Range`1<T>> {
    public static char OpeningInclusiveParenthesis;
    public static char ClosingInclusiveParenthesis;
    public static string LeftBracketGroupName;
    public static string RightBracketGroupName;
    public static string LeftGroupName;
    public static string RightGroupName;
    public static string CommaGroupName;
    private static Regex ParsingPattern;
    [CompilerGeneratedAttribute]
private ParserDelegate<T> <Parser>k__BackingField;
    private ParserDelegate<T> Parser { get; }
    public RangeConverter`1(ParserDelegate<T> parser);
    private static RangeConverter`1();
    [CompilerGeneratedAttribute]
private ParserDelegate<T> get_Parser();
    public virtual void WriteJson(JsonWriter writer, Range`1<T> value, JsonSerializer serializer);
    public virtual Range`1<T> ReadJson(JsonReader reader, Type objectType, Range`1<T> existingValue, bool hasExistingValue, JsonSerializer serializer);
    private T ParseBoundary(Group representation, JsonReader reader);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.RangeListConverter`1 : JsonConverter`1<RangeList`1<T>> {
    public virtual void WriteJson(JsonWriter writer, RangeList`1<T> value, JsonSerializer serializer);
    public virtual RangeList`1<T> ReadJson(JsonReader reader, Type objectType, RangeList`1<T> existingValue, bool hasExistingValue, JsonSerializer serializer);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.RangeListConverter`1/<ReadRanges>d__2")]
private static IEnumerable`1<Range`1<T>> ReadRanges(JsonReader reader, JsonSerializer serializer);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.RegexListConverter : JsonConverter`1<List`1<Regex>> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, List`1<Regex> value, JsonSerializer serializer);
    public virtual List`1<Regex> ReadJson(JsonReader reader, Type objectType, List`1<Regex> existingValue, bool hasExistingValue, JsonSerializer serializer);
}
internal static class Microsoft.SqlServer.Management.Assessment.Configuration.Json.SerializationUtil : object {
    public static JsonConverter[] StandardConverters;
    public static Dictionary`2<string, Func`2<IEnumerable`1<Expression>, Expression>> ExpressionTypeCodes;
    public static Dictionary`2<string, Func`1<IDataMorph>> DataMorphCodes;
    public static Dictionary`2<string, Func`1<IAggregateFunc>> AggregateFuncCodes;
    private static SerializationUtil();
    public static JsonSerializer CreateJsonSerializer();
    internal static JToken GetPropertyObject(JObject rep, string propertyName, JTokenType tokenType, JsonReader reader);
    internal static TResult GetPropertyValue(JToken parent, string propertyName, JsonReader reader, bool allowNull, JTokenType[] tokenTypes);
    internal static TResult GetPropertyValue(JToken parent, string propertyName, JsonReader reader, JsonSerializer serializer, bool allowNull, JTokenType[] tokenTypes);
    internal static void CheckTokenType(JsonReader reader, JsonToken[] expected);
    internal static SqlAssessmentJsonException CreateWrongTokenException(JsonReader reader, JsonToken[] expected);
    internal static void CheckNull(object value, JsonReader reader, string message);
    internal static void CheckNull(object value, JsonReader reader, string message, object arg0);
    internal static void CheckNull(object value, JsonReader reader, string message, object arg0, object arg1);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.SingleItemOrArrayConverter`3 : JsonConverter`1<TCollectionInterface> {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, TCollectionInterface value, JsonSerializer serializer);
    public virtual TCollectionInterface ReadJson(JsonReader reader, Type objectType, TCollectionInterface existingValue, bool hasExistingValue, JsonSerializer serializer);
}
public class Microsoft.SqlServer.Management.Assessment.Configuration.Json.SqlAssessmentJsonException : JsonSerializationException {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public string Path { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    protected SqlAssessmentJsonException(SerializationInfo info, StreamingContext context);
    public SqlAssessmentJsonException(string message);
    public SqlAssessmentJsonException(string message, Exception innerException);
    private SqlAssessmentJsonException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    public static SqlAssessmentJsonException Create(JsonReader reader, string message, Exception innerException);
    public static SqlAssessmentJsonException Create(string path, IJsonLineInfo lineInfo, string message, Exception innerException);
    public static SqlAssessmentJsonException Create(JsonReader reader, string messageTemplate, object obj1, Exception innerException);
    public static SqlAssessmentJsonException Create(string path, IJsonLineInfo lineInfo, string messageTemplate, object obj1, Exception innerException);
    public static SqlAssessmentJsonException Create(JsonReader reader, string messageTemplate, object obj1, object obj2, Exception innerException);
    public static SqlAssessmentJsonException Create(string path, IJsonLineInfo lineInfo, string messageTemplate, object obj1, object obj2, Exception innerException);
    public static SqlAssessmentJsonException Create(JsonReader reader, string messageTemplate, object obj1, object obj2, object obj3, Exception innerException);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.Json.SqlProbeQueryPropertyConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Assessment.Configuration.PatternDictionary`2 : object {
    private List`1<Tuple`2<IPattern`1<TKey>, TValue>> rep;
    [CompilerGeneratedAttribute]
private Func`2<TValue, IPattern`1<TKey>> <GetPattern>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private Func`2<TValue, IPattern`1<TKey>> GetPattern { get; }
    public TValue Item { get; }
    public TValue Item { get; public set; }
    public PatternDictionary`2(Func`2<TValue, IPattern`1<TKey>> getPattern);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private Func`2<TValue, IPattern`1<TKey>> get_GetPattern();
    public TValue get_Item(TKey key);
    public sealed virtual TValue get_Item(int index);
    public sealed virtual void set_Item(int index, TValue value);
    public sealed virtual IEnumerator`1<TValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(TValue item);
    public void AddRange(IEnumerable`1<TValue> collection);
    public void InsertRange(int index, IEnumerable`1<TValue> collection);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TValue item);
    public sealed virtual void CopyTo(TValue[] array, int arrayIndex);
    public sealed virtual bool Remove(TValue item);
    public sealed virtual int IndexOf(TValue item);
    public sealed virtual void Insert(int index, TValue item);
    public sealed virtual void RemoveAt(int index);
    protected internal virtual void TagItem(TValue value);
    private Tuple`2<IPattern`1<TKey>, TValue> CreateRecord(TValue value);
    public bool TryGetValue(TKey key, TValue& value);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.PatternList`1 : object {
    [CompilerGeneratedAttribute]
private List`1<IPattern`1<T>> <Rep>k__BackingField;
    private List`1<IPattern`1<T>> Rep { get; }
    public PatternList`1(IPattern`1[] items);
    public PatternList`1(IEnumerable`1<IPattern`1<T>> items);
    [CompilerGeneratedAttribute]
private List`1<IPattern`1<T>> get_Rep();
    public sealed virtual bool IsMatch(T value);
    public sealed virtual bool Equals(PatternList`1<T> other);
    public sealed virtual IEnumerator`1<IPattern`1<T>> GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static bool op_Equality(PatternList`1<T> left, PatternList`1<T> right);
    public static bool op_Inequality(PatternList`1<T> left, PatternList`1<T> right);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Assessment.Configuration.ProbeCollection : object {
    private ConcurrentDictionary`2<string, ProbeFamily> rep;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<ProbeFamily> Values { get; }
    public ProbeFamily Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<ProbeFamily> get_Values();
    public sealed virtual ProbeFamily get_Item(string key);
    public sealed virtual void set_Item(string key, ProbeFamily value);
    public bool TryGetImplementation(string name, ISqlObjectLocator target, IProbe& value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.SqlServer.Management.Assessment.Probes.ProbeFamily>.Add(ProbeFamily newItem);
    public sealed virtual void Add(KeyValuePair`2<string, ProbeFamily> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ProbeFamily> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, ProbeFamily> item);
    public sealed virtual bool Contains(ProbeFamily item);
    public sealed virtual void CopyTo(ProbeFamily[] array, int arrayIndex);
    public sealed virtual bool Remove(ProbeFamily item);
    public void Add(string name, IProbe newItem);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, ProbeFamily>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.SqlServer.Management.Assessment.Probes.ProbeFamily>>.GetEnumerator();
    public sealed virtual IEnumerator`1<ProbeFamily> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(string key, ProbeFamily value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, ProbeFamily& value);
}
public class Microsoft.SqlServer.Management.Assessment.Configuration.Range`1 : object {
    [CompilerGeneratedAttribute]
private T <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludesLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludesRight>k__BackingField;
    public T Left { get; }
    public T Right { get; }
    public bool IncludesLeft { get; }
    public bool IncludesRight { get; }
    public bool IsEmpty { get; }
    public bool IsSingular { get; }
    public Range`1(T singleValue);
    public Range`1(T left, T right, bool includesLeft, bool includesRight);
    [CompilerGeneratedAttribute]
public T get_Left();
    [CompilerGeneratedAttribute]
public T get_Right();
    [CompilerGeneratedAttribute]
public bool get_IncludesLeft();
    [CompilerGeneratedAttribute]
public bool get_IncludesRight();
    public bool get_IsEmpty();
    public bool get_IsSingular();
    public virtual bool Equals(object obj);
    public bool Equals(Range`1<T> other);
    public virtual int GetHashCode();
    public sealed virtual bool IsMatch(T value);
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.Assessment.Configuration.RangeList`1 : object {
    [CompilerGeneratedAttribute]
private List`1<Range`1<T>> <Ranges>k__BackingField;
    public List`1<Range`1<T>> Ranges { get; }
    public bool IsEmpty { get; }
    public RangeList`1(IEnumerable`1<Range`1<T>> ranges);
    public RangeList`1(Range`1<T> head, Range`1[] rest);
    public RangeList`1(T singleValue);
    public RangeList`1(T left, T right, bool includesLeft, bool includesRight);
    [CompilerGeneratedAttribute]
public List`1<Range`1<T>> get_Ranges();
    public bool get_IsEmpty();
    public sealed virtual bool IsMatch(T value);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.RegexPattern : Regex {
    public RegexPattern(string pattern);
    public RegexPattern(string pattern, RegexOptions options);
    public RegexPattern(Regex other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected bool Equals(RegexPattern other);
    private sealed virtual override bool Microsoft.SqlServer.Management.Assessment.Configuration.IPattern<System.String>.IsMatch(string value);
}
internal class Microsoft.SqlServer.Management.Assessment.Configuration.RuleCollection : object {
    [CompilerGeneratedAttribute]
private IList`1<CheckDefinition> <CheckDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CheckChange> <CheckChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CheckSpecialization> <CheckSpecializations>k__BackingField;
    public IList`1<CheckDefinition> CheckDefinitions { get; }
    public IList`1<CheckChange> CheckChanges { get; }
    public IList`1<CheckSpecialization> CheckSpecializations { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [JsonConstructorAttribute]
public RuleCollection(IEnumerable`1<CheckRule> items);
    [CompilerGeneratedAttribute]
public IList`1<CheckDefinition> get_CheckDefinitions();
    [CompilerGeneratedAttribute]
public IList`1<CheckChange> get_CheckChanges();
    [CompilerGeneratedAttribute]
public IList`1<CheckSpecialization> get_CheckSpecializations();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<CheckRule> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(CheckRule item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(CheckRule item);
    public sealed virtual void CopyTo(CheckRule[] array, int arrayIndex);
    public sealed virtual bool Remove(CheckRule item);
}
[DebuggerDisplayAttribute("{Name}{Version}")]
public class Microsoft.SqlServer.Management.Assessment.Configuration.Ruleset : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ProbeCollection <Probes>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleCollection <Rules>k__BackingField;
    [JsonPropertyAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("version")]
public Version Version { get; public set; }
    [JsonPropertyAttribute("schemaVersion")]
public Version SchemaVersion { get; public set; }
    [JsonPropertyAttribute]
public ProbeCollection Probes { get; }
    [JsonPropertyAttribute("rules")]
internal RuleCollection Rules { get; internal set; }
    [JsonConstructorAttribute]
internal Ruleset(ProbeCollection probes, RuleCollection rules);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(Version value);
    [CompilerGeneratedAttribute]
public Version get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(Version value);
    [CompilerGeneratedAttribute]
public ProbeCollection get_Probes();
    [CompilerGeneratedAttribute]
internal RuleCollection get_Rules();
    [CompilerGeneratedAttribute]
internal void set_Rules(RuleCollection value);
    public sealed virtual void GetSuspects(ISqlObjectLocator target, HashSet`1<string> ids, HashSet`1<string> tags);
    public sealed virtual IEnumerable`1<ICheck> GetChecks(ISqlObjectLocator target, IEnumerable`1<ICheck> baseChecks, HashSet`1<string> ids, HashSet`1<string> tags);
    private static bool IsSuspect(CheckRule change, ISqlObjectLocator target, ISet`1<string> suspectedTags);
    private static Check Apply(Check c, CheckSpecialization s);
    private static IEnumerable`1<string> GetTags(CheckInPlaceTransform creator);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Ruleset/<GetTags>d__26")]
private static IEnumerable`1<string> GetTags(IItemChange`1<Check> itemChange);
    private static bool IsMatch(ISqlObjectLocator target, CheckDefinition checkDefinitionRule, HashSet`1<string> suspectIds, HashSet`1<string> suspectTags);
    private IEnumerable`1<Check> Change(IEnumerable`1<Check> source);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Ruleset/<GetNewChecks>d__29")]
private IEnumerable`1<Check> GetNewChecks(ISqlObjectLocator target, HashSet`1<string> suspectIds, HashSet`1<string> suspectTags);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Ruleset/<Specialize>d__30")]
private IEnumerable`1<Check> Specialize(IEnumerable`1<Check> source, ISqlObjectLocator target);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Assessment.Configuration.SqlEngineEdition : Enum {
    public int value__;
    public static SqlEngineEdition None;
    public static SqlEngineEdition PersonalOrDesktopEngine;
    public static SqlEngineEdition Standard;
    public static SqlEngineEdition Enterprise;
    public static SqlEngineEdition Express;
    public static SqlEngineEdition AzureDatabase;
    public static SqlEngineEdition DataWarehouse;
    public static SqlEngineEdition StretchDatabase;
    public static SqlEngineEdition ManagedInstance;
    public static SqlEngineEdition Azure;
    public static SqlEngineEdition SqlServer;
}
[JsonObjectAttribute("1")]
public class Microsoft.SqlServer.Management.Assessment.Configuration.SqlObjectLocatorPattern : object {
    internal static string VersionPropertyName;
    internal static string PlatformPropertyName;
    internal static string TypePropertyName;
    internal static string NamePropertyName;
    internal static string EditionPropertyName;
    internal static string ServerNamePropertyName;
    internal static string VmTypePropertyName;
    [CompilerGeneratedAttribute]
private RangeList`1<Version> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IPattern`1<string> <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private IPattern`1<string> <NamePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private IPattern`1<string> <ServerNamePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private IPattern`1<string> <MachineTypePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlEngineEdition <EngineEdition>k__BackingField;
    [JsonPropertyAttribute("version")]
public RangeList`1<Version> Version { get; }
    [JsonPropertyAttribute("platform")]
public IPattern`1<string> Platform { get; }
    [JsonPropertyAttribute("type")]
public SqlObjectType ObjectType { get; }
    [JsonPropertyAttribute("name")]
public IPattern`1<string> NamePattern { get; }
    [JsonPropertyAttribute("serverName")]
public IPattern`1<string> ServerNamePattern { get; }
    [JsonPropertyAttribute("machineType")]
public IPattern`1<string> MachineTypePattern { get; }
    [JsonPropertyAttribute("engineEdition")]
public SqlEngineEdition EngineEdition { get; }
    [JsonConstructorAttribute]
public SqlObjectLocatorPattern(RangeList`1<Version> version, IPattern`1<string> platform, SqlObjectType objectType, IPattern`1<string> namePattern, SqlEngineEdition engineEdition, IPattern`1<string> serverNamePattern, IPattern`1<string> machineTypePattern);
    [CompilerGeneratedAttribute]
public RangeList`1<Version> get_Version();
    [CompilerGeneratedAttribute]
public IPattern`1<string> get_Platform();
    [CompilerGeneratedAttribute]
public SqlObjectType get_ObjectType();
    [CompilerGeneratedAttribute]
public IPattern`1<string> get_NamePattern();
    [CompilerGeneratedAttribute]
public IPattern`1<string> get_ServerNamePattern();
    [CompilerGeneratedAttribute]
public IPattern`1<string> get_MachineTypePattern();
    [CompilerGeneratedAttribute]
public SqlEngineEdition get_EngineEdition();
    public sealed virtual bool IsMatch(ISqlObjectLocator value);
    public sealed virtual bool Equals(SqlObjectLocatorPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.SqlServer.Management.Assessment.Configuration.WarningCheck : Check {
    public WarningCheck(string message);
    public sealed virtual string GetMessage(ISqlObjectLocator target);
    internal virtual IAssessmentResult GetRecommendations(ISqlObjectLocator target, PermutationContext data);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.AndFunc : object {
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.ArrayAggregateFunc : ValueType {
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.CountFunc : object {
    [CompilerGeneratedAttribute]
private bool <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotNull>k__BackingField;
    [JsonPropertyAttribute("distinct")]
[DefaultValueAttribute("True")]
public bool Distinct { get; public set; }
    [JsonPropertyAttribute("notNull")]
[DefaultValueAttribute("True")]
public bool NotNull { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Distinct();
    [CompilerGeneratedAttribute]
public void set_Distinct(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotNull();
    [CompilerGeneratedAttribute]
public void set_NotNull(bool value);
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.MaximumFunc : object {
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.MinimumFunc : object {
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.OrFunc : object {
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.StringJoinFunc : object {
    public static string DefaultSeparator;
    private static string HasMoreMarker;
    [CompilerGeneratedAttribute]
private bool <Trim>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Limit>k__BackingField;
    [JsonPropertyAttribute("trim")]
[DefaultValueAttribute("True")]
public bool Trim { get; public set; }
    [JsonPropertyAttribute("separator")]
public string Separator { get; public set; }
    [JsonPropertyAttribute("limit")]
public int Limit { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Trim();
    [CompilerGeneratedAttribute]
public void set_Trim(bool value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public int get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(int value);
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.AggregateFuncs.SumFunc : object {
    public sealed virtual object GetAggregate(IEnumerable`1<object> sequence);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Data.CachedMorphingView : object {
    private IMultidimensionalMorph morph;
    private IDataView source;
    private IDataRow[] cache;
    public int Count { get; }
    public IDataRow Item { get; }
    public CachedMorphingView(IMultidimensionalMorph morph, IDataView source);
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerable`1<IDataRow> GetData();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Data.ConstantDataView : object {
    private Measurement values;
    public int Count { get; }
    public IDataRow Item { get; }
    public ConstantDataView(int capacity);
    public ConstantDataView(Measurement data);
    public ConstantDataView(IDictionary`2<string, object> dictionary);
    public ConstantDataView(string key, object value);
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.ConstantDataView/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface Microsoft.SqlServer.Management.Assessment.Data.IAggregateFunc {
    public abstract virtual object GetAggregate(IEnumerable`1<object> sequence);
}
internal interface Microsoft.SqlServer.Management.Assessment.Data.IMultidimensionalMorph {
    public abstract virtual IEnumerable`1<IDataRow> Transform(IDataView source);
}
internal interface Microsoft.SqlServer.Management.Assessment.Data.IRowMorph {
    public abstract virtual bool TryGetData(IDataRow source, string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.MorphingRow : ValueType {
    private IRowMorph morph;
    private IDataRow source;
    public MorphingRow(IRowMorph morph, IDataRow source);
    public sealed virtual bool TryGetData(string column, Object& value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Data.MorphingView : ValueType {
    private IMultidimensionalMorph morph;
    private IDataView source;
    public int Count { get; }
    public IDataRow Item { get; }
    public MorphingView(IMultidimensionalMorph morph, IDataView source);
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerable`1<IDataRow> GetData();
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.AggregateProbeMorph : MultidimensionalCachedMorph {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IAggregateFunc> <Map>k__BackingField;
    [CompilerGeneratedAttribute]
private Grouper <Grouper>k__BackingField;
    public Dictionary`2<string, IAggregateFunc> Map { get; }
    [JsonPropertyAttribute("group")]
public Grouper Grouper { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IAggregateFunc> get_Map();
    [CompilerGeneratedAttribute]
public Grouper get_Grouper();
    [CompilerGeneratedAttribute]
public void set_Grouper(Grouper value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.Morphs.AggregateProbeMorph/<Transform>d__7")]
public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.CompositeDataMorph : object {
    [CompilerGeneratedAttribute]
private List`1<IDataMorph> <Children>k__BackingField;
    public List`1<IDataMorph> Children { get; }
    public bool BenefitsFromCache { get; }
    public CompositeDataMorph(IEnumerable`1<IDataMorph> children);
    [CompilerGeneratedAttribute]
public List`1<IDataMorph> get_Children();
    public sealed virtual bool get_BenefitsFromCache();
    public sealed virtual IDataView ApplyTo(IDataView source, bool useCache);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.DataRowGroup : ValueType {
    public Measurement Result;
    public IEnumerable`1<IDataRow> Data;
    public DataRowGroup(Measurement result, IEnumerable`1<IDataRow> data);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.DbInfoMorph : MultidimensionalCachedMorph {
    private DateTime sqlDateTimeDefaultValue;
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.Morphs.DbInfoMorph/<Transform>d__1")]
public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
    private static T FindValue(IDataView source, string key);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.DefaultValueMorph : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Map>k__BackingField;
    public Dictionary`2<string, object> Map { get; }
    public bool BenefitsFromCache { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Map();
    public sealed virtual bool get_BenefitsFromCache();
    public sealed virtual IDataView ApplyTo(IDataView source, bool useCache);
    public sealed virtual bool TryGetData(IDataRow source, string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.ExpandDataMorph : MultidimensionalCachedMorph {
    [CompilerGeneratedAttribute]
private string <KeyColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    public string KeyColumn { get; public set; }
    public string ValueColumn { get; public set; }
    public List`1<string> Columns { get; public set; }
    [CompilerGeneratedAttribute]
public string get_KeyColumn();
    [CompilerGeneratedAttribute]
public void set_KeyColumn(string value);
    [CompilerGeneratedAttribute]
public string get_ValueColumn();
    [CompilerGeneratedAttribute]
public void set_ValueColumn(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<string> value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.Morphs.ExpandDataMorph/<Transform>d__12")]
public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
}
[DebuggerDisplayAttribute("{ToDebugString()}")]
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.ExtValueRow : object {
    [CompilerGeneratedAttribute]
private IDataRow <BaseRow>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ExtraData>k__BackingField;
    public IDataRow BaseRow { get; }
    public IReadOnlyDictionary`2<string, object> ExtraData { get; }
    public ExtValueRow(IDataRow baseRow, IReadOnlyDictionary`2<string, object> extraData);
    [CompilerGeneratedAttribute]
public IDataRow get_BaseRow();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_ExtraData();
    public sealed virtual bool TryGetData(string column, Object& value);
    public string ToDebugString();
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.ExtValueRowMorph : object {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    private string Column { get; }
    private object Value { get; }
    public ExtValueRowMorph(string column, object value);
    [CompilerGeneratedAttribute]
private string get_Column();
    [CompilerGeneratedAttribute]
private object get_Value();
    public sealed virtual bool TryGetData(IDataRow source, string column, Object& value);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Data.Morphs.Grouper : object {
    public static SingularGrouper Default;
    private static Grouper();
    public abstract virtual IEnumerable`1<DataRowGroup> Transform(IDataView source);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.Indexes.DuplicateIndexesMorph : IndexMorph {
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.Morphs.Indexes.DuplicateIndexesMorph/<ProcessTableIndexes>d__0")]
protected virtual IEnumerable`1<IDataRow> ProcessTableIndexes(IGrouping`2<string, IndexDetails> tableIndexes);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.Indexes.IndexDefinitionMorph : MultidimensionalCachedMorph {
    public static T GetRowData(IDataRow row, string colName);
    public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Data.Morphs.Indexes.IndexMorph : MultidimensionalCachedMorph {
    protected abstract virtual IEnumerable`1<IDataRow> ProcessTableIndexes(IGrouping`2<string, IndexDetails> tableIndexes);
    protected static IEnumerable`1<IGrouping`2<string, IndexDetails>> Duplicates(IGrouping`2<string, IndexDetails> tableIndexes);
    public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.Indexes.RedundantIndexesMorph : IndexMorph {
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.Morphs.Indexes.RedundantIndexesMorph/<ProcessTableIndexes>d__0")]
protected virtual IEnumerable`1<IDataRow> ProcessTableIndexes(IGrouping`2<string, IndexDetails> tableIndexes);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.MultipleFieldGrouper : Grouper {
    internal String[] FieldNames;
    public MultipleFieldGrouper(IEnumerable`1<string> fields);
    public virtual IEnumerable`1<DataRowGroup> Transform(IDataView source);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.NameValuePairsMorph : MultidimensionalCachedMorph {
    [CompilerGeneratedAttribute]
private string <KeyColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Map>k__BackingField;
    public string KeyColumn { get; public set; }
    public string ValueColumn { get; public set; }
    public Dictionary`2<string, string> Map { get; }
    [CompilerGeneratedAttribute]
public string get_KeyColumn();
    [CompilerGeneratedAttribute]
public void set_KeyColumn(string value);
    [CompilerGeneratedAttribute]
public string get_ValueColumn();
    [CompilerGeneratedAttribute]
public void set_ValueColumn(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Map();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.Morphs.NameValuePairsMorph/<Transform>d__11")]
public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
    private Measurement TryGetNameValuePairs(IDataView source);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.NoDataMorph : object {
    [CompilerGeneratedAttribute]
private Measurement <Define>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PresenceFlag>k__BackingField;
    public Measurement Define { get; }
    public string PresenceFlag { get; public set; }
    public bool BenefitsFromCache { get; }
    [CompilerGeneratedAttribute]
public Measurement get_Define();
    [CompilerGeneratedAttribute]
public string get_PresenceFlag();
    [CompilerGeneratedAttribute]
public void set_PresenceFlag(string value);
    public sealed virtual bool get_BenefitsFromCache();
    public sealed virtual IDataView ApplyTo(IDataView source, bool useCache);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.RenameDataMorph : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Map>k__BackingField;
    public Dictionary`2<string, string> Map { get; }
    public bool BenefitsFromCache { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Map();
    public sealed virtual bool get_BenefitsFromCache();
    public sealed virtual IDataView ApplyTo(IDataView source, bool useCache);
    public sealed virtual bool TryGetData(IDataRow source, string column, Object& value);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Data.Morphs.RowWiseCachedMorph : MultidimensionalCachedMorph {
    public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
    internal IEnumerable`1<IDataRow> TransformRows(IEnumerable`1<IDataRow> source);
    protected abstract virtual IEnumerable`1<IDataRow> Transform(IDataRow sourceRow);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.SingleFieldGrouper : Grouper {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    public string FieldName { get; public set; }
    public SingleFieldGrouper(string fieldName);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.Morphs.SingleFieldGrouper/<Transform>d__5")]
public virtual IEnumerable`1<DataRowGroup> Transform(IDataView source);
    private string GetGroupName(IDataRow row);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.SingularGrouper : Grouper {
    public virtual IEnumerable`1<DataRowGroup> Transform(IDataView source);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.StringFieldParseMorph : MultidimensionalCachedMorph {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<Regex>> <Map>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Flatten>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Join>k__BackingField;
    [JsonPropertyAttribute]
public Dictionary`2<string, List`1<Regex>> Map { get; public set; }
    [JsonPropertyAttribute]
public bool Flatten { get; public set; }
    [JsonPropertyAttribute]
public string Join { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<Regex>> get_Map();
    [CompilerGeneratedAttribute]
public void set_Map(Dictionary`2<string, List`1<Regex>> value);
    [CompilerGeneratedAttribute]
public bool get_Flatten();
    [CompilerGeneratedAttribute]
public void set_Flatten(bool value);
    [CompilerGeneratedAttribute]
public string get_Join();
    [CompilerGeneratedAttribute]
public void set_Join(string value);
    public virtual IEnumerable`1<IDataRow> Transform(IDataView source);
    internal IEnumerable`1<IDataRow> TransformRows(IEnumerable`1<IDataRow> source);
    private IDataRow JoinRows(IEnumerable`1<IDataRow> dataRows);
    protected IEnumerable`1<IDataRow> Transform(IDataRow sourceRow);
    private IEnumerable`1<IDataRow> Transform(IDataRow sourceRow);
    private FlattenDataMorph GetFlattener();
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<TBasket> <Transform>g__GetCombinations|16_1(IReadOnlyList`1<IReadOnlyList`1<TBasket>> columns);
}
internal class Microsoft.SqlServer.Management.Assessment.Data.Morphs.ToStringMorph : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, object>> <Map>k__BackingField;
    public Dictionary`2<string, Dictionary`2<string, object>> Map { get; }
    public bool BenefitsFromCache { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, object>> get_Map();
    public sealed virtual IDataView ApplyTo(IDataView source, bool useCache);
    public sealed virtual bool get_BenefitsFromCache();
    public sealed virtual bool TryGetData(IDataRow source, string column, Object& value);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Data.MultidimensionalCachedMorph : object {
    public bool BenefitsFromCache { get; }
    public sealed virtual bool get_BenefitsFromCache();
    public sealed virtual IDataView ApplyTo(IDataView source, bool useCache);
    public abstract virtual IEnumerable`1<IDataRow> Transform(IDataView source);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Data.RowMorphingView : ValueType {
    private IDataView source;
    private IRowMorph morph;
    public int Count { get; }
    public IDataRow Item { get; }
    public RowMorphingView(IRowMorph morph, IDataView source);
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Data.RowMorphingView/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SqlServer.Management.Assessment.DataSources.DataSourceCollection : object {
    private List`1<IDataSource> items;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public DataSourceCollection(IEnumerable`1<IDataSource> items);
    public sealed virtual IEnumerator`1<IDataSource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(IDataSource item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IDataSource item);
    public sealed virtual void CopyTo(IDataSource[] array, int arrayIndex);
    public sealed virtual bool Remove(IDataSource item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void AddRange(IEnumerable`1<IDataSource> collection);
}
public interface Microsoft.SqlServer.Management.Assessment.DataSources.IAzureInstanceMetadataSource {
    public abstract virtual Task`1<string> QueryData(Uri endpoint, CancellationToken cancellationToken);
}
public interface Microsoft.SqlServer.Management.Assessment.DataSources.IAzureResourceGraphDataSource {
    public abstract virtual Task`1<IDataView> QueryData(string query, CancellationToken cancellationToken);
}
public interface Microsoft.SqlServer.Management.Assessment.DataSources.IDataSource {
    public abstract virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
}
public interface Microsoft.SqlServer.Management.Assessment.DataSources.IDataSourceCollection {
    public abstract virtual void AddRange(IEnumerable`1<IDataSource> collection);
}
public interface Microsoft.SqlServer.Management.Assessment.DataSources.IManagementDataSource {
    public abstract virtual Task`1<IDataView> QueryData(string namespaceName, string query, IReadOnlyDictionary`2<string, string> methods, CancellationToken cancellationToken);
}
public interface Microsoft.SqlServer.Management.Assessment.DataSources.IRegistryDataSource {
    public abstract virtual Task`1<IList`1<string>> EnumKey(string hive, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<IDictionary`2<string, object>>> ReadValue(string hive, string key, string name, CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.DbConnectionHandle : object {
    private bool ownsConnection;
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    public DbConnection Connection { get; private set; }
    public DbConnectionHandle(DbConnection connection, bool ownsConnection);
    [CompilerGeneratedAttribute]
public DbConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(DbConnection value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class Microsoft.SqlServer.Management.Assessment.DerivedEvaluationContext : object {
    [CompilerGeneratedAttribute]
private IEvaluationContext <BaseContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEvaluationContext BaseContext { get; }
    public string Name { get; }
    public ConcurrentSet`1<Expression> CallStack { get; }
    protected DerivedEvaluationContext(string name, IEvaluationContext baseContext);
    protected DerivedEvaluationContext(string name);
    [CompilerGeneratedAttribute]
public IEvaluationContext get_BaseContext();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public abstract virtual ConcurrentSet`1<Expression> get_CallStack();
    public sealed virtual bool TryGetData(string column, Object& value);
    protected virtual bool TryGetOwnData(string column, Object& value);
    protected abstract virtual bool TryGetDataCore(string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.Diagnostics.TraceActivity : object {
    private static string TraceFormat;
    private TraceSource source;
    private string callerName;
    private string name;
    private Stopwatch stopwatch;
    private bool disposed;
    protected TraceActivity(TraceSource source, string name, string callerName);
    public static TraceActivity Create(IProbe probe, string callerName);
    public static TraceActivity Create(ITool tool, string callerName);
    public static TraceActivity Create(ICharacteristicProvider provider, string callerName);
    public static TraceActivity Create(TraceSource source, string name, string callerName);
    public sealed virtual void Dispose();
    private void TraceEnter();
    private void TraceExit(long elapsedMilliseconds);
    private void TraceEvent(TraceEventType eventType, TraceActivityType activityType, string format, Object[] args);
}
internal enum Microsoft.SqlServer.Management.Assessment.Diagnostics.TraceActivityType : Enum {
    public int value__;
    public static TraceActivityType Enter;
    public static TraceActivityType Exit;
}
internal static class Microsoft.SqlServer.Management.Assessment.Diagnostics.TraceSources : object {
    [CompilerGeneratedAttribute]
private static TraceSource <ProbeTraceSource>k__BackingField;
    [CompilerGeneratedAttribute]
private static TraceSource <ToolTraceSource>k__BackingField;
    [CompilerGeneratedAttribute]
private static TraceSource <ProviderTraceSource>k__BackingField;
    public static TraceSource ProbeTraceSource { get; }
    public static TraceSource ToolTraceSource { get; }
    public static TraceSource ProviderTraceSource { get; }
    private static TraceSources();
    [CompilerGeneratedAttribute]
public static TraceSource get_ProbeTraceSource();
    [CompilerGeneratedAttribute]
public static TraceSource get_ToolTraceSource();
    [CompilerGeneratedAttribute]
public static TraceSource get_ProviderTraceSource();
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Assessment.DictionaryUtil : object {
    [ExtensionAttribute]
public static TDictionary Add(TDictionary dictionary, KeyValuePair`2<TKey, TValue> pair);
}
public class Microsoft.SqlServer.Management.Assessment.Engine : object {
    private static Check UnsupportedTargetCheck;
    [CompilerGeneratedAttribute]
private Inventory <Inventory>k__BackingField;
    [CompilerGeneratedAttribute]
private EngineConfig <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Scheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationContext`1<object> <SystemEvaluationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationContext`1<object> <GlobalEvaluationContext>k__BackingField;
    internal Inventory Inventory { get; }
    public EngineConfig Configuration { get; }
    private Scheduler Scheduler { get; }
    private EvaluationContext`1<object> SystemEvaluationContext { get; }
    internal EvaluationContext`1<object> GlobalEvaluationContext { get; }
    private static Engine();
    [CompilerGeneratedAttribute]
internal Inventory get_Inventory();
    private void InitializeInventory();
    private void InitializeCharacteristicProviders();
    [CompilerGeneratedAttribute]
public EngineConfig get_Configuration();
    [CompilerGeneratedAttribute]
private Scheduler get_Scheduler();
    [CompilerGeneratedAttribute]
private EvaluationContext`1<object> get_SystemEvaluationContext();
    [CompilerGeneratedAttribute]
internal EvaluationContext`1<object> get_GlobalEvaluationContext();
    public Task`1<List`1<IAssessmentResult>> GetServerResultsList(DbConnection connection);
    public Task`1<List`1<IAssessmentResult>> GetServerResultsList(DbConnection connection, IEnumerable`1<IDataSource> sources);
    public Task`1<List`1<IAssessmentResult>> GetDatabaseResultsList(DbConnection connection, string databaseName);
    public Task`1<List`1<IAssessmentResult>> GetDatabaseResultsList(DbConnection connection, string databaseName, IEnumerable`1<IDataSource> sources);
    public Task`1<List`1<IAssessmentResult>> GetAssessmentResultsList(ISqlObjectLocator target);
    public Task`1<List`1<IAssessmentResult>> GetAssessmentResultsList(ISqlObjectLocator target, SeverityLevel minLevel);
    public Task`1<List`1<IAssessmentResult>> GetAssessmentResultsList(ISqlObjectLocator target, IEnumerable`1<string> checkNamesOrTags);
    public Task`1<List`1<IAssessmentResult>> GetAssessmentResultsList(ISqlObjectLocator target, IEnumerable`1<string> checkNamesOrTags, SeverityLevel minLevel);
    public Task`1<List`1<IAssessmentResult>> GetAssessmentResultsList(ISqlObjectLocator target, IEnumerable`1<ICheck> checks);
    public IEnumerable`1<ICheck> GetServerChecks(DbConnection connection);
    public IEnumerable`1<ICheck> GetServerChecks(DbConnection connection, IEnumerable`1<IDataSource> sources);
    public IEnumerable`1<ICheck> GetDatabaseChecks(DbConnection connection, string databaseName);
    public IEnumerable`1<ICheck> GetDatabaseChecks(DbConnection connection, string databaseName, IEnumerable`1<IDataSource> sources);
    public IEnumerable`1<ICheck> GetChecks(ISqlObjectLocator target);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Engine/<GetChecksAsync>d__33")]
public Task`1<IReadOnlyList`1<ICheck>> GetChecksAsync(ISqlObjectLocator target);
    public IEnumerable`1<ICheck> GetChecks(ISqlObjectLocator target, String[] checkNamesOrTags);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Engine/<GetChecksAsync>d__35")]
public Task`1<IReadOnlyList`1<ICheck>> GetChecksAsync(ISqlObjectLocator target, String[] checkNamesOrTags);
    internal Task`1<List`1<IAssessmentResult>> GetAssessmentResultsList(ISqlObjectLocator target, IEnumerable`1<string> checks, Func`2<ICheck, bool> checkSelector);
    public void PushRuleFactoryJson(Stream inputStream, string alias);
    public void PushRuleFactoryJson(TextReader textReader, string alias);
    public void PushRuleFactoryJson(JsonTextReader reader, string alias);
    public void PushRuleFactory(Ruleset factory, string alias);
    public Ruleset LoadRuleFactoryJson(Stream inputStream);
    public Ruleset LoadRuleFactoryJson(TextReader textReader);
    public Ruleset LoadRuleFactoryJson(JsonTextReader reader);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Engine/<OpenConnection>d__44")]
internal static Task OpenConnection(DbConnection connection);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Engine/<GetImplementedChecks>d__45")]
private static IEnumerable`1<Check> GetImplementedChecks(IEnumerable`1<ICheck> input, ICollection`1<ICheck> unimplemented);
    private static StreamReader GetDefaultConfigurationStream();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Engine/<GetChecksCore>d__47")]
private Task`1<IEnumerable`1<ICheck>> GetChecksCore(AssessmentRequest2 request);
    private Task`1<List`1<IAssessmentResult>> GetAssessmentResultsListCore(ISqlObjectLocator target, String[] stringSelector, Func`2<ICheck, bool> selector);
    private void LoadJsonConfig();
    internal DbConnectionHandle GetConnection(ISqlObjectLocator target);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Engine/<ProcessAssessmentRequest>d__51")]
private Task`1<List`1<IAssessmentResult>> ProcessAssessmentRequest(AssessmentRequest2 request);
    private static bool HandleException(Exception exception, ITargetedObject subject, IAssessmentResult[]& result);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Engine/<MakeSpecific>d__53")]
private Task MakeSpecific(RunSpace runSpace);
}
public class Microsoft.SqlServer.Management.Assessment.EvaluationContext`1 : DerivedEvaluationContext {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, T> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentSet`1<Expression> <CallStack>k__BackingField;
    public IDictionary`2<string, T> Data { get; }
    public ConcurrentSet`1<Expression> CallStack { get; }
    public EvaluationContext`1(string name);
    public EvaluationContext`1(string name, IDictionary`2<string, T> data);
    public EvaluationContext`1(string name, IEvaluationContext baseContext);
    public EvaluationContext`1(string name, IEvaluationContext baseContext, IDictionary`2<string, T> data);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, T> get_Data();
    [CompilerGeneratedAttribute]
public virtual ConcurrentSet`1<Expression> get_CallStack();
    protected virtual bool TryGetDataCore(string column, Object& value);
    protected virtual object ToObject(T value);
    private static Dictionary`2<string, T> InitData();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.AndExpression : SequentialCompositeExpression {
    public AndExpression(IEnumerable`1<Expression> source);
    public AndExpression(Expression[] source);
    protected virtual object EvaluateCore(IEnumerable`1<object> args);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.ArrayExpression : Expression {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Expression> <Items>k__BackingField;
    public IEnumerable`1<Expression> Items { get; }
    public ArrayExpression(IEnumerable`1<Expression> source);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Expression> get_Items();
    internal virtual object EvaluateCore(IEvaluationContext data);
    internal virtual IEnumerable`1<string> GetNames();
    public sealed virtual bool Equals(ArrayExpression other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Expressions.BinaryExpression : SequentialCompositeExpression {
    protected BinaryExpression(IEnumerable`1<Expression> source);
    protected virtual object EvaluateCore(IEnumerable`1<object> args);
    protected abstract virtual object EvaluateCore(object arg1, object arg2);
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.ColumnExpression : Expression {
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    public string Column { get; }
    public ColumnExpression(string column);
    [CompilerGeneratedAttribute]
public string get_Column();
    internal virtual object EvaluateCore(IEvaluationContext data);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Expressions.ColumnExpression/<GetNames>d__5")]
internal virtual IEnumerable`1<string> GetNames();
    public sealed virtual bool Equals(ColumnExpression other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Expressions.ComparisonExpression`1 : BinaryExpression {
    protected ComparisonExpression`1(IEnumerable`1<Expression> source);
    protected virtual object EvaluateCore(object arg1, object arg2);
    protected abstract virtual bool EvaluateCore(int comparisonResult);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Expressions.CompositeExpression : Expression {
    [CompilerGeneratedAttribute]
private List`1<Expression> <Children>k__BackingField;
    public List`1<Expression> Children { get; }
    protected CompositeExpression(IEnumerable`1<Expression> source);
    [CompilerGeneratedAttribute]
public List`1<Expression> get_Children();
    public sealed virtual bool Equals(CompositeExpression other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual IEnumerable`1<string> GetNames();
    protected abstract virtual CompositeExpression Copy();
    protected static Object[] GetNArguments(IEnumerable`1<object> args, int n);
    private static void CheckUnexpectedArguments(int n, IEnumerator`1<object> enumerator);
    private static Object[] GetFirstNArguments(IEnumerator`1<object> enumerator, int n);
}
public class Microsoft.SqlServer.Management.Assessment.Expressions.Condition : Expression {
    [CompilerGeneratedAttribute]
private Expression <Implementation>k__BackingField;
    public Expression Implementation { get; }
    public Condition(Expression implementation);
    [CompilerGeneratedAttribute]
public Expression get_Implementation();
    public sealed virtual bool Equals(Condition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual object EvaluateCore(IEvaluationContext data);
    internal virtual IEnumerable`1<string> GetNames();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.DecimalAssociativeExpression : SequentialCompositeExpression {
    private Func`3<decimal, decimal, decimal> operation;
    public DecimalAssociativeExpression(Func`3<decimal, decimal, decimal> func);
    public DecimalAssociativeExpression(Func`3<decimal, decimal, decimal> func, IEnumerable`1<Expression> source);
    public DecimalAssociativeExpression(Func`3<decimal, decimal, decimal> func, Expression[] source);
    protected virtual object EvaluateCore(IEnumerable`1<object> args);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.DecimalBinaryExpression : BinaryExpression {
    private Func`3<decimal, decimal, decimal> operation;
    public DecimalBinaryExpression(Func`3<decimal, decimal, decimal> func);
    public DecimalBinaryExpression(Func`3<decimal, decimal, decimal> func, IEnumerable`1<Expression> source);
    protected virtual object EvaluateCore(object arg1, object arg2);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.EqualsExpression : BinaryExpression {
    [CompilerGeneratedAttribute]
private StringComparison <StringComparison>k__BackingField;
    public StringComparison StringComparison { get; }
    public EqualsExpression(IEnumerable`1<Expression> source);
    public EqualsExpression(Expression[] source);
    public EqualsExpression(StringComparison stringComparison);
    public EqualsExpression(StringComparison stringComparison, IEnumerable`1<Expression> source);
    public EqualsExpression(StringComparison stringComparison, Expression[] source);
    [CompilerGeneratedAttribute]
public StringComparison get_StringComparison();
    protected virtual object EvaluateCore(object arg1, object arg2);
    protected virtual CompositeExpression Copy();
}
public abstract class Microsoft.SqlServer.Management.Assessment.Expressions.Expression : object {
    internal static char VariablePrefix;
    public static Expression op_Implicit(int value);
    public static Expression op_Implicit(decimal value);
    public static Expression op_Implicit(string value);
    public static Expression op_Implicit(DateTime value);
    public static Expression op_Implicit(bool value);
    internal object Evaluate(IEvaluationContext data);
    internal virtual object EvaluateCore(IEvaluationContext data);
    internal abstract virtual IEnumerable`1<string> GetNames();
    private sealed virtual override IEnumerable`1<string> Microsoft.SqlServer.Management.Assessment.Expressions.INamedVariableConsumer.GetNames();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.ExpressionByReferenceComparer : object {
    [CompilerGeneratedAttribute]
private static ExpressionByReferenceComparer <Instance>k__BackingField;
    public static ExpressionByReferenceComparer Instance { get; }
    private static ExpressionByReferenceComparer();
    [CompilerGeneratedAttribute]
public static ExpressionByReferenceComparer get_Instance();
    public sealed virtual bool Equals(Expression x, Expression y);
    public sealed virtual int GetHashCode(Expression obj);
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.GreaterExpression : ComparisonExpression`1<decimal> {
    public GreaterExpression(IEnumerable`1<Expression> source);
    protected virtual bool EvaluateCore(int comparisonResult);
    protected virtual CompositeExpression Copy();
}
internal interface Microsoft.SqlServer.Management.Assessment.Expressions.INamedVariableConsumer {
    public abstract virtual IEnumerable`1<string> GetNames();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.InExpression : BinaryExpression {
    [CompilerGeneratedAttribute]
private StringComparison <StringComparison>k__BackingField;
    public StringComparison StringComparison { get; }
    public InExpression(IEnumerable`1<Expression> source);
    public InExpression(StringComparison stringComparison);
    public InExpression(StringComparison stringComparison, IEnumerable`1<Expression> source);
    [CompilerGeneratedAttribute]
public StringComparison get_StringComparison();
    protected virtual object EvaluateCore(object arg1, object arg2);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.IntersectExpression : BinaryExpression {
    public static string JsonName;
    public IntersectExpression(IEnumerable`1<Expression> source);
    protected virtual object EvaluateCore(object arg1, object arg2);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.IntervalExpression : CompositeExpression {
    public IntervalExpression(IEnumerable`1<Expression> source);
    internal virtual object EvaluateCore(IEvaluationContext data);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.LessExpression : ComparisonExpression`1<decimal> {
    public LessExpression(IEnumerable`1<Expression> source);
    protected virtual bool EvaluateCore(int comparisonResult);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.Literal`1 : Expression {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    public Literal`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    internal virtual object EvaluateCore(IEvaluationContext data);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Expressions.Literal`1/<GetNames>d__5")]
internal virtual IEnumerable`1<string> GetNames();
    public sealed virtual int CompareTo(Literal`1<T> other);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Literal`1<T> other);
    public virtual int GetHashCode();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.MatchExpression : BinaryExpression {
    [CompilerGeneratedAttribute]
private RegexOptions <Options>k__BackingField;
    public RegexOptions Options { get; }
    public MatchExpression(IEnumerable`1<Expression> source);
    public MatchExpression(Expression[] source);
    public MatchExpression(RegexOptions options);
    public MatchExpression(RegexOptions options, IEnumerable`1<Expression> source);
    public MatchExpression(RegexOptions options, Expression[] source);
    [CompilerGeneratedAttribute]
public RegexOptions get_Options();
    protected virtual object EvaluateCore(object arg1, object arg2);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.NonstrictComparisonExpression`1 : ComparisonExpression`1<T> {
    private ComparisonExpression`1<T> strictComparisonExpr;
    public NonstrictComparisonExpression`1(ComparisonExpression`1<T> strictComparisonExpression);
    internal virtual object EvaluateCore(IEvaluationContext data);
    protected virtual CompositeExpression Copy();
    protected virtual bool EvaluateCore(int comparisonResult);
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.NotExpression : UnaryExpression {
    public NotExpression(IEnumerable`1<Expression> source);
    protected virtual object EvaluateCore(object arg);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.NullLiteralExpression : Expression {
    [CompilerGeneratedAttribute]
private static NullLiteralExpression <Instance>k__BackingField;
    public static NullLiteralExpression Instance { get; }
    private static NullLiteralExpression();
    [CompilerGeneratedAttribute]
public static NullLiteralExpression get_Instance();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual object EvaluateCore(IEvaluationContext data);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Expressions.NullLiteralExpression/<GetNames>d__7")]
internal virtual IEnumerable`1<string> GetNames();
}
internal static class Microsoft.SqlServer.Management.Assessment.Expressions.Numeric : object {
    public static decimal BitAnd(decimal x, decimal y);
    public static decimal BitOr(decimal x, decimal y);
    public static decimal BitXor(decimal x, decimal y);
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.OrExpression : SequentialCompositeExpression {
    public OrExpression(Expression[] source);
    public OrExpression(IEnumerable`1<Expression> source);
    protected virtual object EvaluateCore(IEnumerable`1<object> args);
    protected virtual CompositeExpression Copy();
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.ReferenceComparer`1 : object {
    [CompilerGeneratedAttribute]
private static ReferenceComparer`1<T> <Instance>k__BackingField;
    public static ReferenceComparer`1<T> Instance { get; }
    private static ReferenceComparer`1();
    [CompilerGeneratedAttribute]
public static ReferenceComparer`1<T> get_Instance();
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Expressions.SequentialCompositeExpression : CompositeExpression {
    protected SequentialCompositeExpression(IEnumerable`1<Expression> source);
    internal virtual object EvaluateCore(IEvaluationContext data);
    protected abstract virtual object EvaluateCore(IEnumerable`1<object> args);
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.StringBinaryExpression`1 : BinaryExpression {
    private Func`4<string, string, StringComparison, TResult> operation;
    [CompilerGeneratedAttribute]
private TResult <NullParamResult>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <StringComparison>k__BackingField;
    public TResult NullParamResult { get; }
    public StringComparison StringComparison { get; }
    public StringBinaryExpression`1(Func`4<string, string, StringComparison, TResult> func, TResult nullParamResult);
    public StringBinaryExpression`1(Func`4<string, string, StringComparison, TResult> func, StringComparison stringComparison, TResult nullParamResult);
    public StringBinaryExpression`1(Func`4<string, string, StringComparison, TResult> func, IEnumerable`1<Expression> source, TResult nullParamResult);
    public StringBinaryExpression`1(Func`4<string, string, StringComparison, TResult> func, StringComparison stringComparison, IEnumerable`1<Expression> source, TResult nullParamResult);
    [CompilerGeneratedAttribute]
public TResult get_NullParamResult();
    [CompilerGeneratedAttribute]
public StringComparison get_StringComparison();
    protected virtual object EvaluateCore(object arg1, object arg2);
    protected virtual CompositeExpression Copy();
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Expressions.UnaryExpression : SequentialCompositeExpression {
    protected UnaryExpression(IEnumerable`1<Expression> source);
    protected virtual object EvaluateCore(IEnumerable`1<object> args);
    protected abstract virtual object EvaluateCore(object arg);
}
internal class Microsoft.SqlServer.Management.Assessment.Expressions.UnaryFuncExpression : UnaryExpression {
    private Func`2<decimal, decimal> roundFunc;
    public UnaryFuncExpression(Func`2<decimal, decimal> roundingFunction);
    public UnaryFuncExpression(Func`2<decimal, decimal> roundingFunction, IEnumerable`1<Expression> source);
    protected virtual CompositeExpression Copy();
    protected virtual object EvaluateCore(object arg);
}
internal class Microsoft.SqlServer.Management.Assessment.ExtraDataContext : DerivedEvaluationContext {
    [CompilerGeneratedAttribute]
private IDataView <ExtraData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public IDataView ExtraData { get; }
    public int Index { get; }
    public ConcurrentSet`1<Expression> CallStack { get; }
    public ExtraDataContext(string name, IEvaluationContext baseContext, IDataView extraData, int index);
    [CompilerGeneratedAttribute]
public IDataView get_ExtraData();
    [CompilerGeneratedAttribute]
public int get_Index();
    public virtual ConcurrentSet`1<Expression> get_CallStack();
    protected virtual bool TryGetDataCore(string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.FailedProbeResult : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Exception> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataView <Data>k__BackingField;
    public string Name { get; }
    public bool Failed { get; }
    public IEnumerable`1<Exception> Exceptions { get; }
    public IDataView Data { get; }
    public FailedProbeResult(string name, Exception[] exceptions);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Failed();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Exception> get_Exceptions();
    [CompilerGeneratedAttribute]
public sealed virtual IDataView get_Data();
    public sealed virtual bool Includes(IProbeResult result);
}
public class Microsoft.SqlServer.Management.Assessment.FatalError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Exception> <InnerExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlObjectLocator <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public string Message { get; }
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public IReadOnlyCollection`1<Exception> InnerExceptions { get; }
    private ISqlObjectLocator Target { get; }
    public DateTimeOffset Timestamp { get; }
    internal FatalError(ISqlObjectLocator target, string message);
    internal FatalError(ISqlObjectLocator target, string message, Exception[] innerExceptions);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    public sealed virtual string get_TargetPath();
    public sealed virtual SqlObjectType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Exception> get_InnerExceptions();
    [CompilerGeneratedAttribute]
private ISqlObjectLocator get_Target();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
}
public interface Microsoft.SqlServer.Management.Assessment.IAssessmentError {
    public IReadOnlyCollection`1<Exception> InnerExceptions { get; }
    public abstract virtual IReadOnlyCollection`1<Exception> get_InnerExceptions();
}
public interface Microsoft.SqlServer.Management.Assessment.IAssessmentNote {
    public string HelpLink { get; }
    public SeverityLevel Severity { get; }
    public abstract virtual string get_HelpLink();
    public abstract virtual SeverityLevel get_Severity();
}
public interface Microsoft.SqlServer.Management.Assessment.IAssessmentRequest {
    public IEnumerable`1<Check> Checks { get; }
    public EvaluationContext`1<object> EvaluationContext { get; }
    public abstract virtual IEnumerable`1<Check> get_Checks();
    public abstract virtual EvaluationContext`1<object> get_EvaluationContext();
}
public interface Microsoft.SqlServer.Management.Assessment.IAssessmentResult {
    public string Message { get; }
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public DateTimeOffset Timestamp { get; }
    public abstract virtual string get_Message();
    public abstract virtual ICheck get_Check();
    public abstract virtual string get_TargetPath();
    public abstract virtual SqlObjectType get_TargetType();
    public abstract virtual DateTimeOffset get_Timestamp();
}
public interface Microsoft.SqlServer.Management.Assessment.IAssessmentSuccess {
}
public interface Microsoft.SqlServer.Management.Assessment.IAssessmentWarning {
}
public interface Microsoft.SqlServer.Management.Assessment.IEvaluationContext {
    public string Name { get; }
    public ConcurrentSet`1<Expression> CallStack { get; }
    public abstract virtual string get_Name();
    public abstract virtual ConcurrentSet`1<Expression> get_CallStack();
}
internal interface Microsoft.SqlServer.Management.Assessment.IProbeResult {
    public string Name { get; }
    public bool Failed { get; }
    public IEnumerable`1<Exception> Exceptions { get; }
    public IDataView Data { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_Failed();
    public abstract virtual IEnumerable`1<Exception> get_Exceptions();
    public abstract virtual IDataView get_Data();
    public abstract virtual bool Includes(IProbeResult result);
}
internal interface Microsoft.SqlServer.Management.Assessment.IResultGrouper {
    public abstract virtual void Consolidate(ISqlObjectLocator target, EngineConfig config, List`1<IAssessmentResult> results);
}
public interface Microsoft.SqlServer.Management.Assessment.ISqlObjectLocator {
    public string Platform { get; public set; }
    public DbConnection Connection { get; }
    public string Name { get; public set; }
    public SqlObjectType Type { get; }
    public Version Version { get; public set; }
    public string Urn { get; public set; }
    public SqlEngineEdition EngineEdition { get; public set; }
    public string ServerName { get; public set; }
    public string MachineType { get; public set; }
    public IDataSourceCollection DataSources { get; }
    public abstract virtual string get_Platform();
    public abstract virtual void set_Platform(string value);
    public abstract virtual DbConnection get_Connection();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual SqlObjectType get_Type();
    public abstract virtual Version get_Version();
    public abstract virtual void set_Version(Version value);
    public abstract virtual string get_Urn();
    public abstract virtual void set_Urn(string value);
    public abstract virtual SqlEngineEdition get_EngineEdition();
    public abstract virtual void set_EngineEdition(SqlEngineEdition value);
    public abstract virtual string get_ServerName();
    public abstract virtual void set_ServerName(string value);
    public abstract virtual string get_MachineType();
    public abstract virtual void set_MachineType(string value);
    public abstract virtual IDataSourceCollection get_DataSources();
}
public interface Microsoft.SqlServer.Management.Assessment.ITargetedObject {
    public ISqlObjectLocator Target { get; }
    public abstract virtual ISqlObjectLocator get_Target();
}
internal class Microsoft.SqlServer.Management.Assessment.ListBiDictionary`2 : object {
    private List`1<KeyValuePair`2<TX, TY>> rep;
    public void Add(TX x, TY y);
    public bool TryGetValue(TY y, TX& x);
    public bool TryGetValue(TX x, TY& y);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TX, TY>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface Microsoft.SqlServer.Management.Assessment.Logics.ILogicsProvider {
    public abstract virtual Task`1<List`1<IAssessmentResult>> GetAssessmentResults(IAssessmentRequest request, DbConnection connection, EngineConfig configuration);
}
internal interface Microsoft.SqlServer.Management.Assessment.Logics.ILogicsProvider2 {
    public abstract virtual Task`1<List`1<IAssessmentResult>> GetAssessmentResults(IAssessmentRequest request, RunSpace runSpace);
}
internal class Microsoft.SqlServer.Management.Assessment.Logics.TwoPhaseLogics : object {
    [CompilerGeneratedAttribute]
private IResultGrouper <ResultGrouper>k__BackingField;
    [CompilerGeneratedAttribute]
private static TwoPhaseLogics <Instance>k__BackingField;
    internal IResultGrouper ResultGrouper { get; internal set; }
    internal static TwoPhaseLogics Instance { get; }
    private static TwoPhaseLogics();
    [CompilerGeneratedAttribute]
internal IResultGrouper get_ResultGrouper();
    [CompilerGeneratedAttribute]
internal void set_ResultGrouper(IResultGrouper value);
    [CompilerGeneratedAttribute]
internal static TwoPhaseLogics get_Instance();
    public sealed virtual Task`1<List`1<IAssessmentResult>> GetAssessmentResults(IAssessmentRequest request, DbConnection connection, EngineConfig configuration);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Logics.TwoPhaseLogics/<GetAssessmentResults>d__8")]
public sealed virtual Task`1<List`1<IAssessmentResult>> GetAssessmentResults(IAssessmentRequest request, RunSpace runSpace);
    private static List`1<IAssessmentResult> GetAssessmentResults(ISqlObjectLocator target, IEnumerable`1<CheckContext> contexts, EngineConfig config);
    private static bool GetProbeErrors(ISqlObjectLocator target, CheckContext checkContext, List`1<IAssessmentResult> result);
    private static IEnumerable`1<PermutationContext> GetPermutations(ProbeContext context);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Logics.TwoPhaseLogics/<Touch>d__12")]
private static Task`1<bool> Touch(RunSpace runSpace);
    private static List`1<CheckContext> GetContexts(IAssessmentRequest request);
    private static CheckContext BuildCheckContext(EvaluationContext`1<object> context, Check check);
    private static void CollectRequirements(CheckContext context);
    private static void CollectRequirements(Check check, CharacteristicCollection query);
    private static void CollectRequirements(INamedVariableConsumer subject, CharacteristicCollection query);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Logics.TwoPhaseLogics/<FilterContexts>d__18")]
private static IEnumerable`1<IAssessmentResult> FilterContexts(RunSpace runSpace, List`1<CheckContext> contexts);
    private static ProbeCall GetProbeCall(RunSpace runSpace, ProbeReference probeRef, IEvaluationContext context);
    private static ProbeContext GetProbeContext(CheckContext checkContext, ProbeReference probeRef, Dictionary`2<string, IProbeResult> results, HashSet`1<string> refs);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Logics.TwoPhaseLogics/<GetData>d__21")]
private static Task GetData(RunSpace runSpace, CheckContext checkContext, IEnumerable`1<ProbeReference> references, AtomicSet`1<ProbeCall> callsCache);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Logics.TwoPhaseLogics/<InvokeProbeCall>d__22")]
private static Task`1<ProbeCall> InvokeProbeCall(RunSpace runSpace, ProbeCall call, AtomicSet`1<ProbeCall> callsCache);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Logics.TwoPhaseLogics/<CollectCharacteristics>d__23")]
private static Task CollectCharacteristics(RunSpace runSpace, IEnumerable`1<ProbeReference> references, CharacteristicCollection advanceRequirements);
    internal static Task CollectCharacteristics(RunSpace runSpace, IEnumerable`1<IProbe> probes, CharacteristicCollection advanceRequirements);
}
public static class Microsoft.SqlServer.Management.Assessment.MachineType : object {
    public static string Physical;
    public static string AzureVm;
    public static string Hypervisor;
    public static string Other;
}
internal class Microsoft.SqlServer.Management.Assessment.MaxResultGrouper : object {
    public sealed virtual void Consolidate(ISqlObjectLocator target, EngineConfig config, List`1<IAssessmentResult> results);
}
internal class Microsoft.SqlServer.Management.Assessment.MaxResultWarning : object {
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public ICheck Check { get; }
    public string Message { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public DateTimeOffset Timestamp { get; }
    protected MaxResultWarning(ICheck check, string message, string targetPath, SqlObjectType targetType);
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
    public static MaxResultWarning Create(ISqlObjectLocator target, EngineConfig config, ICheck[] checks);
    private static string BuildMessage(int max, String[] checks);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Assessment.Names : object {
    public static string AttributeContextName;
    public static string NamespaceSeparator;
    public static char PropertySeparator;
    public static bool SplitIf(string ns, string name, String& section, String& value, String& tail);
    public static bool SplitIf(string ns, string name, String& tail);
    public static bool Split(string ns, string name, String& tail);
    [ExtensionAttribute]
public static bool Split(string name, String& ns, String& tail);
}
[DebuggerDisplayAttribute("Target unsupported warning")]
public class Microsoft.SqlServer.Management.Assessment.NoChecksError : object {
    [CompilerGeneratedAttribute]
private string <HelpLink>k__BackingField;
    [CompilerGeneratedAttribute]
private SeverityLevel <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlObjectLocator <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public string Message { get; }
    public ICheck Check { get; }
    public string HelpLink { get; }
    public SeverityLevel Severity { get; }
    public IReadOnlyCollection`1<Exception> InnerExceptions { get; }
    private ISqlObjectLocator Target { get; }
    public DateTimeOffset Timestamp { get; }
    public NoChecksError(ISqlObjectLocator target);
    public sealed virtual string get_TargetPath();
    public sealed virtual SqlObjectType get_TargetType();
    public sealed virtual string get_Message();
    public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public string get_HelpLink();
    [CompilerGeneratedAttribute]
public SeverityLevel get_Severity();
    public sealed virtual IReadOnlyCollection`1<Exception> get_InnerExceptions();
    [CompilerGeneratedAttribute]
private ISqlObjectLocator get_Target();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
}
internal class Microsoft.SqlServer.Management.Assessment.ParameterizedText : object {
    public static ParameterizedText Empty;
    private static char StringSubstitutionSign;
    private static Regex VariablePattern;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; public set; }
    private static ParameterizedText();
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    public static ParameterizedText op_Implicit(string template);
    public virtual string ToString();
    public sealed virtual IEnumerable`1<string> GetNames();
    public virtual string ToString(IEvaluationContext context);
    private static string GetVariableString(IEvaluationContext data, string variableName, string format);
    private static string PassVariableAsIs(string variableName, string format);
    private static string FormatVariableValueString(string format, object value);
    private static string GetVariableValueString(string format, string value, StringBuilder sb);
    private static bool ShouldSubstitute(string format, int i);
}
internal class Microsoft.SqlServer.Management.Assessment.PermutationContext : DerivedEvaluationContext {
    [CompilerGeneratedAttribute]
private ProbeContext <ProbeContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Indices>k__BackingField;
    public ProbeContext ProbeContext { get; }
    public ConcurrentSet`1<Expression> CallStack { get; }
    private Int32[] Indices { get; }
    public PermutationContext(ProbeContext probeContext, Int32[] indices);
    [CompilerGeneratedAttribute]
public ProbeContext get_ProbeContext();
    public virtual ConcurrentSet`1<Expression> get_CallStack();
    [CompilerGeneratedAttribute]
private Int32[] get_Indices();
    protected virtual bool TryGetDataCore(string name, Object& value);
    protected virtual bool TryGetOwnData(string column, Object& value);
}
internal class Microsoft.SqlServer.Management.Assessment.ProbeCall : object {
    [CompilerGeneratedAttribute]
private IDataView <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IProbe <Implementation>k__BackingField;
    private MeasurementCollection emptyMeasurementCollection;
    public IDataView Result { get; private set; }
    public bool Failed { get; private set; }
    public string Name { get; }
    public Exception Exception { get; private set; }
    public Dictionary`2<string, object> Parameters { get; }
    private IProbe Implementation { get; }
    public ProbeCall(string name, IProbe implementation);
    [CompilerGeneratedAttribute]
public IDataView get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(IDataView value);
    [CompilerGeneratedAttribute]
public bool get_Failed();
    [CompilerGeneratedAttribute]
private void set_Failed(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
private IProbe get_Implementation();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.ProbeCall/<Invoke>d__23")]
public Task Invoke(RunSpace runSpace);
}
internal class Microsoft.SqlServer.Management.Assessment.ProbeCallComparer : object {
    [CompilerGeneratedAttribute]
private static ProbeCallComparer <Instance>k__BackingField;
    public static ProbeCallComparer Instance { get; }
    private static ProbeCallComparer();
    [CompilerGeneratedAttribute]
public static ProbeCallComparer get_Instance();
    public sealed virtual bool Equals(ProbeCall x, ProbeCall y);
    public sealed virtual int GetHashCode(ProbeCall obj);
    private static bool HasSameParameter(ProbeCall call, KeyValuePair`2<string, object> parameter);
}
internal class Microsoft.SqlServer.Management.Assessment.ProbeContext : EvaluationContext`1<Expression> {
    [CompilerGeneratedAttribute]
private List`1<IProbeResult> <ProbeResults>k__BackingField;
    public List`1<IProbeResult> ProbeResults { get; }
    public ProbeContext(string name, IEvaluationContext baseContext);
    [CompilerGeneratedAttribute]
public List`1<IProbeResult> get_ProbeResults();
    public void Add(IProbeResult result);
    public void Add(IEnumerable`1<IProbeResult> results);
    protected virtual object ToObject(Expression expression);
}
[DebuggerDisplayAttribute("Error {Message}")]
public class Microsoft.SqlServer.Management.Assessment.ProbeError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, Exception> <InnerProbeExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public string Message { get; }
    public IReadOnlyDictionary`2<string, Exception> InnerProbeExceptions { get; }
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public IReadOnlyCollection`1<Exception> InnerExceptions { get; }
    public DateTimeOffset Timestamp { get; }
    protected ProbeError(ICheck check, string message, SqlObjectType targetType, string targetPath);
    protected ProbeError(ICheck check, string message, IEnumerable`1<KeyValuePair`2<string, Exception>> innerExceptions, SqlObjectType targetType, string targetPath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, Exception> get_InnerProbeExceptions();
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_TargetType();
    public sealed virtual IReadOnlyCollection`1<Exception> get_InnerExceptions();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
    internal static ProbeError Create(Exception exception, Check check, string probeName, SqlObjectType targetType, string targetPath);
}
public class Microsoft.SqlServer.Management.Assessment.ProbeNotFoundException : Exception {
    public ProbeNotFoundException(string message);
    public ProbeNotFoundException(string message, Exception innerException);
    protected ProbeNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.SqlServer.Management.Assessment.ProbeRequirementsError : ProbeError {
    [CompilerGeneratedAttribute]
private CharacteristicCollection <MissingDependencies>k__BackingField;
    public CharacteristicCollection MissingDependencies { get; public set; }
    public ProbeRequirementsError(ICheck check, string message, SqlObjectType targetType, string targetPath);
    public ProbeRequirementsError(ICheck check, string message, IEnumerable`1<KeyValuePair`2<string, Exception>> innerExceptions, SqlObjectType targetType, string targetPath);
    [CompilerGeneratedAttribute]
public CharacteristicCollection get_MissingDependencies();
    [CompilerGeneratedAttribute]
public void set_MissingDependencies(CharacteristicCollection value);
}
internal class Microsoft.SqlServer.Management.Assessment.ProbeResult : object {
    private ProbeResultView data;
    [CompilerGeneratedAttribute]
private IDictionary`2<IEvaluationContext, ProbeCall> <Calls>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataMorph <Morph>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProbeResult> <InnerResults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private IDictionary`2<IEvaluationContext, ProbeCall> Calls { get; }
    private IDataMorph Morph { get; }
    private IEnumerable`1<IProbeResult> InnerResults { get; }
    public string Name { get; }
    public bool Failed { get; }
    public IEnumerable`1<Exception> Exceptions { get; }
    public IDataView Data { get; }
    public ProbeResult(string name, IDictionary`2<IEvaluationContext, ProbeCall> calls, IDataMorph morph, IEnumerable`1<IProbeResult> innerResults);
    [CompilerGeneratedAttribute]
private IDictionary`2<IEvaluationContext, ProbeCall> get_Calls();
    [CompilerGeneratedAttribute]
private IDataMorph get_Morph();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProbeResult> get_InnerResults();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual bool get_Failed();
    public sealed virtual IEnumerable`1<Exception> get_Exceptions();
    public sealed virtual IDataView get_Data();
    public sealed virtual bool Includes(IProbeResult result);
    private IDataView ApplyMorph(IDataView source);
    [CompilerGeneratedAttribute]
private IDataView <get_Data>b__19_2(KeyValuePair`2<IEvaluationContext, ProbeCall> p);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.ProbeResultView : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<IEvaluationContext, IDataView> <Calls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private IDictionary`2<IEvaluationContext, IDataView> Calls { get; }
    public string Name { get; }
    public int Count { get; }
    public IDataRow Item { get; }
    public ProbeResultView(string name, IDictionary`2<IEvaluationContext, IDataView> calls);
    [CompilerGeneratedAttribute]
private IDictionary`2<IEvaluationContext, IDataView> get_Calls();
    [CompilerGeneratedAttribute]
public string get_Name();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.ProbeResultView/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.AzDiskMetadataProbe : SingleToolProbe`1<IAzMetadataTool> {
    private static Dictionary`2<string, object> DiskDefaults;
    private static Dictionary`2<string, string> DataDiskMap;
    private static Dictionary`2<string, string> OsDiskMap;
    private static Dictionary`2<string, string> TempDiskMap;
    private static AzDiskMetadataProbe();
    protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IAzMetadataTool tool, IReadOnlyDictionary`2<string, object> parameters);
    private static Task`1<IDataView> GetTempMetadata(IAzMetadataTool _);
    private static Task`1<IDataView> GetOsDiskMetadata(IAzMetadataTool tool);
    private static Task`1<IDataView> GetDataDiskMetadata(IAzMetadataTool tool, int lun);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzDiskMetadataProbe/<GetDiskMetadata>d__8")]
private static Task`1<IDataView> GetDiskMetadata(IAzMetadataTool tool, Dictionary`2<string, string> map, string recPath);
    private static IDataView GetDiskMetadata(Dictionary`2<string, string> map, IDataRow rec);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.AzGraphProbe : SingleToolProbe`1<IAzGraphTool> {
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [JsonPropertyAttribute]
public string Query { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IAzGraphTool tool, IReadOnlyDictionary`2<string, object> parameters);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.AzMetadataProbe : SingleToolProbe`1<IAzMetadataTool> {
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [JsonPropertyAttribute]
public string Query { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IAzMetadataTool tool, IReadOnlyDictionary`2<string, object> parameters);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe : SingleToolProbe`1<IWmiTool> {
    private static string StNs;
    private static Version MinVersion;
    private static AzStorageProbe();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetDataImpl>d__2")]
protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IWmiTool tool, IReadOnlyDictionary`2<string, object> parameters);
    public static AzStorageView Match(List`1<AzStorageRow> data, string path);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetData>d__4")]
private static Task`1<List`1<AzStorageRow>> GetData(IWmiTool tool);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetPoolDiskCount>d__5")]
private static Task`1<int> GetPoolDiskCount(IWmiTool tool, string poolId);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetDisks>d__6")]
private static Task`1<IList`1<Disk>> GetDisks(IWmiTool tool);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetPrimaryDisks>d__7")]
private static Task`1<IList`1<PhysicalDisk>> GetPrimaryDisks(IWmiTool tool, Disk disk, Dictionary`2<string, int> poolDiskCounts);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetAccessPaths>d__8")]
private static Task`1<Dictionary`2<string, List`1<string>>> GetAccessPaths(IWmiTool tool);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetAssociators>d__9")]
private static Task`1<IDataView> GetAssociators(IWmiTool tool, string ns, string idPropName, object idPropValue, string resultClass);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetAssociators>d__10")]
private static Task`1<IDataView> GetAssociators(IWmiTool tool, string ns, string selector, Dictionary`2<string, object> parameters, string resultClass);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<EnumInstances>d__11")]
private static Task`1<IDataView> EnumInstances(IWmiTool tool, string ns, string className, String[] fieldNames);
    private static string NormalizePath(string path);
    private static bool TryGetParameter(IReadOnlyDictionary`2<string, object> parameters, string name, T& parameter);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.AzStorageProbe/<GetVersion>d__14")]
private static Task`1<Version> GetVersion(IWmiTool tool);
    private static void SetValue(RunSpace rs, List`1<AzStorageRow> view);
    private static bool TryGetValue(RunSpace rs, List`1& storage);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.AzStorageRow : object {
    private Dictionary`2<string, object> rep;
    public string Path { get; }
    public AzStorageRow(string path, bool boot, bool temp, bool data, decimal lun, bool isPoolDisk, decimal columnCount, decimal poolDiskCount);
    public string get_Path();
    public sealed virtual bool TryGetData(string column, Object& value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Probes.AzStorageView : object {
    private IList`1<AzStorageRow> rows;
    public IEnumerable`1<AzStorageRow> Rows { get; }
    public int Count { get; }
    public IDataRow Item { get; }
    public AzStorageView(IEnumerable`1<AzStorageRow> rows);
    public IEnumerable`1<AzStorageRow> get_Rows();
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
}
public class Microsoft.SqlServer.Management.Assessment.Probes.CharacteristicCollection : Dictionary`2<string, HashSet`1<string>> {
    public static CharacteristicCollection Empty { get; }
    public int Total { get; }
    public CharacteristicCollection(ICharacteristicCollection other);
    protected CharacteristicCollection(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public CharacteristicCollection(string key, String[] specification);
    public CharacteristicCollection(string key, HashSet`1<string> specification);
    public static CharacteristicCollection get_Empty();
    public int get_Total();
    public void UnionWith(ICharacteristicCollection other);
    public bool IsSupersetOf(ICharacteristicCollection other);
    public static CharacteristicCollection Union(IEnumerable`1<ICharacteristicCollection> collections);
    public static ICharacteristicCollection Union(ICharacteristicCollection[] collections);
    public void ExceptWith(ICharacteristicCollection other);
    public sealed virtual void Add(string key, string value);
    public sealed virtual object Clone();
    internal void IntersectWith(ICharacteristicCollection other);
    internal void Append(string key, IEnumerable`1<string> value);
    internal bool Overlaps(ICharacteristicCollection other);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.CharacteristicProviderSource : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, ICharacteristicProvider> <Registry>k__BackingField;
    private Dictionary`2<Regex, ICharacteristicProvider> Registry { get; }
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, ICharacteristicProvider> get_Registry();
    public void Add(ICharacteristicProvider provider);
    public bool TryGetProvider(string key, ICharacteristicProvider& provider, Dictionary`2& arguments);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.CharacteristicProviderSource/<Update>d__7")]
public Task Update(RunSpace runSpace, CharacteristicCollection characteristicQuery);
    private void AddCall(IList`1<Call> list, Call item, RunSpace runSpace);
    private void AddImplied(IList`1<Call> list, Call item, RunSpace runSpace);
    private static bool IsMatch(Call existing, Call fresh);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.CharacteristicProviderSource/<GetData>d__11")]
private static Task GetData(RunSpace runSpace, List`1<Call> calls);
    private Call CreateCall(KeyValuePair`2<string, HashSet`1<string>> pair);
    private Call CreateCall(string key, HashSet`1<string> specification);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.ChannelPresenceProvider : object {
    public static string Key;
    private static Regex StaticPattern;
    public Regex Pattern { get; }
    public int Priority { get; }
    private static ChannelPresenceProvider();
    public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.ChannelPresenceProvider/<UpdateCharacteristics>d__6")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
    private static ICharacteristicCollection GetDependencies(RunSpace runSpace, string key);
    [CompilerGeneratedAttribute]
internal static bool <UpdateCharacteristics>g__FindIndex|6_0(Int32& ix, Int32& jx, <>c__DisplayClass6_1& );
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.DataSourcePresenceProvider : object {
    private static Regex StaticPattern;
    public static string Key;
    public Regex Pattern { get; }
    public int Priority { get; }
    private static DataSourcePresenceProvider();
    public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.DataSourcePresenceProvider/<UpdateCharacteristics>d__6")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.FeatureCharacteristicProvider : object {
    public static string Key;
    private static Regex StaticPattern;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IFeatureProvider> <Registry>k__BackingField;
    public Regex Pattern { get; }
    public int Priority { get; }
    private Dictionary`2<string, IFeatureProvider> Registry { get; }
    private static FeatureCharacteristicProvider();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IFeatureProvider> get_Registry();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.FeatureCharacteristicProvider/<UpdateCharacteristics>d__10")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.HadrProvider : object {
    public static string KeyValue;
    public string Key { get; }
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.HadrProvider/<IsPresent>d__1")]
public sealed virtual Task`1<bool> IsPresent(RunSpace runSpace);
    public sealed virtual CharacteristicCollection GetDependencies();
    public sealed virtual string get_Key();
}
internal interface Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.IFeatureProvider {
    public string Key { get; }
    public abstract virtual Task`1<bool> IsPresent(RunSpace runSpace);
    public abstract virtual CharacteristicCollection GetDependencies();
    public abstract virtual string get_Key();
}
internal interface Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.ITargetSpecifier {
    public Regex Pattern { get; }
    public TargetSpecifierRank Rank { get; }
    public abstract virtual Regex get_Pattern();
    public abstract virtual TargetSpecifierRank get_Rank();
    public abstract virtual Task`1<bool> Specify(RunSpace runSpace, IDictionary`2<string, object> data);
    public abstract virtual CharacteristicCollection GetDependencies(RunSpace runSpace);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.PermissionsCharacteristicProvider : object {
    public static string Key;
    private static string SecurableClassArgumentName;
    private static string SecurableNameArgumentName;
    private static Regex StaticPattern;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    public Regex Pattern { get; }
    public int Priority { get; }
    private static PermissionsCharacteristicProvider();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.PermissionsCharacteristicProvider/<UpdateCharacteristics>d__9")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.RoleCharacteristicProvider : object {
    public static string Key;
    private static Regex StaticPattern;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    public Regex Pattern { get; }
    public int Priority { get; }
    private static RoleCharacteristicProvider();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.RoleCharacteristicProvider/<UpdateCharacteristics>d__7")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.ServicesProvider : object {
    public static string Key;
    private static string Hive;
    private static string ServicesKey;
    private static string ServiceAccount;
    private static CharacteristicCollection RequirementsSingleton;
    private static Regex StaticPattern;
    private static Dictionary`2<string, Func`4<string, string, Version, string>> Composers;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    private static CharacteristicCollection StaticRequirements { get; }
    public Regex Pattern { get; }
    public int Priority { get; }
    private static ServicesProvider();
    private static CharacteristicCollection get_StaticRequirements();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.ServicesProvider/<UpdateCharacteristics>d__14")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.ServicesProvider/<TryGetServices>d__18")]
private static Task`1<bool> TryGetServices(IRegistryTool tool, HashSet`1<string> services);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.ServicesProvider/<TryGetServiceInfo>d__19")]
private static Task`1<bool> TryGetServiceInfo(IRegistryTool tool, string service, IReadOnlyList`1<string> properties, IDictionary`2<string, object> info);
    private static string ComposeMsSql(string spec, string instanceName, Version version);
    private static string ComposeSqlAgent(string spec, string instanceName, Version version);
    private static string ComposeMsOlap(string spec, string instanceName, Version version);
    private static string ComposeReportServer(string spec, string instanceName, Version version);
    private static string ComposeByInstance(string spec, string instanceName, Version version);
    private static string ComposeByInstance(string defaultName, string instancePrefix, string instanceName);
    private static string ComposeByVersion(string spec, string instanceName, Version version);
    private static string GetInstanceName(string dataSource);
    private static void Publish(RunSpace runSpace, StringBuilder prefix, object data, string var);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.SysConfigurationsProvider : object {
    public static string Key;
    private static string ConfigurationName;
    private static Regex StaticPattern;
    public Regex Pattern { get; }
    public int Priority { get; }
    private static SysConfigurationsProvider();
    public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.SysConfigurationsProvider/<UpdateCharacteristics>d__7")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.SysConfigurationsProvider/<UpdatePresence>d__8")]
private static Task UpdatePresence(ISqlTool tool, HashSet`1<string> confirmedValues);
    private static bool IsPresent(object valueInUse);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.SysConfigurationsProvider/<UpdateNamed>d__10")]
private static Task UpdateNamed(ISqlTool tool, string name, HashSet`1<string> confirmedValues);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetCharacteristicProvider : object {
    public static string Key;
    private static Regex StaticPattern;
    [CompilerGeneratedAttribute]
private List`1<ITargetSpecifier> <Registry>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <Pattern>k__BackingField;
    private List`1<ITargetSpecifier> Registry { get; }
    public Regex Pattern { get; }
    public int Priority { get; }
    private static TargetCharacteristicProvider();
    [CompilerGeneratedAttribute]
private List`1<ITargetSpecifier> get_Registry();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_Pattern();
    public sealed virtual int get_Priority();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetCharacteristicProvider/<UpdateCharacteristics>d__10")]
public sealed virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public sealed virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public virtual string ToString();
    private bool TryGetSpecifier(string spec, ITargetSpecifier& specifier);
    private static void Publish(RunSpace runSpace, HashSet`1<string> confirmedProperties, StringBuilder prefix, Dictionary`2<string, object> properties);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetEngineEditionSpecifier : object {
    private static Regex StaticPattern;
    public static string EngineEditionProperty;
    public Regex Pattern { get; }
    public TargetSpecifierRank Rank { get; }
    private static TargetEngineEditionSpecifier();
    public sealed virtual Regex get_Pattern();
    public sealed virtual TargetSpecifierRank get_Rank();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetEngineEditionSpecifier/<Specify>d__6")]
public sealed virtual Task`1<bool> Specify(RunSpace runSpace, IDictionary`2<string, object> data);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace);
    [CompilerGeneratedAttribute]
internal static SqlEngineEdition <Specify>g__Translate|6_0(int edition);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetMachineTypeSpecifier : object {
    private static Regex StaticPattern;
    public static string MachineTypeProperty;
    public Regex Pattern { get; }
    public TargetSpecifierRank Rank { get; }
    private static TargetMachineTypeSpecifier();
    public sealed virtual Regex get_Pattern();
    public sealed virtual TargetSpecifierRank get_Rank();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetMachineTypeSpecifier/<Specify>d__6")]
public sealed virtual Task`1<bool> Specify(RunSpace runSpace, IDictionary`2<string, object> data);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetPlatformSpecifier : object {
    private static Regex StaticPattern;
    public static string PlatformProperty;
    public Regex Pattern { get; }
    public TargetSpecifierRank Rank { get; }
    private static TargetPlatformSpecifier();
    public sealed virtual Regex get_Pattern();
    public sealed virtual TargetSpecifierRank get_Rank();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetPlatformSpecifier/<Specify>d__6")]
public sealed virtual Task`1<bool> Specify(RunSpace runSpace, IDictionary`2<string, object> data);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetServerNameSpecifier : object {
    private static Regex StaticPattern;
    public static string ServerNameProperty;
    public Regex Pattern { get; }
    public TargetSpecifierRank Rank { get; }
    private static TargetServerNameSpecifier();
    public sealed virtual Regex get_Pattern();
    public sealed virtual TargetSpecifierRank get_Rank();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetServerNameSpecifier/<Specify>d__6")]
public sealed virtual Task`1<bool> Specify(RunSpace runSpace, IDictionary`2<string, object> data);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetUrnSpecifier : object {
    private static char UrnSeparator;
    private static string NameFormat;
    private static string ServerSuffix;
    private static string DatabaseSuffix;
    private static Regex StaticPattern;
    public static string UrnProperty;
    public Regex Pattern { get; }
    public TargetSpecifierRank Rank { get; }
    private static TargetUrnSpecifier();
    public sealed virtual Regex get_Pattern();
    public sealed virtual TargetSpecifierRank get_Rank();
    public sealed virtual Task`1<bool> Specify(RunSpace runSpace, IDictionary`2<string, object> data);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace);
    private static void AppendUrnPart(StringBuilder builder, string sfx, string name);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.Characteristics.TargetSpecifiers.TargetVersionSpecifier : object {
    private static Regex StaticPattern;
    public static string VersionProperty;
    public Regex Pattern { get; }
    public TargetSpecifierRank Rank { get; }
    private static TargetVersionSpecifier();
    public sealed virtual Regex get_Pattern();
    public sealed virtual TargetSpecifierRank get_Rank();
    public sealed virtual Task`1<bool> Specify(RunSpace runSpace, IDictionary`2<string, object> data);
    public sealed virtual CharacteristicCollection GetDependencies(RunSpace runSpace);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.CmdShellProbe : SingleToolProbe`1<ICmdShellTool> {
    internal static string LineColumnName;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [JsonPropertyAttribute("command")]
public string CommandText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.CmdShellProbe/<GetDataImpl>d__5")]
protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, ICmdShellTool tool, IReadOnlyDictionary`2<string, object> parameters);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Probes.DbaProbe : SingleToolProbe`1<ISqlTool> {
    protected static string NameParameterName;
    [CompilerGeneratedAttribute]
private String[] <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [JsonPropertyAttribute("query")]
[JsonConverterAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.SqlProbeQueryPropertyConverter")]
public String[] CommandText { get; public set; }
    [JsonPropertyAttribute("useDatabase")]
public bool UseDatabase { get; public set; }
    [JsonPropertyAttribute("timeout")]
public int Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(String[] value);
    [CompilerGeneratedAttribute]
public bool get_UseDatabase();
    [CompilerGeneratedAttribute]
public void set_UseDatabase(bool value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.DbaProbe/<GetDataImpl>d__13")]
protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, ISqlTool sqlTool, IReadOnlyDictionary`2<string, object> parameters);
    protected virtual IEnumerable`1<Measurement> GetEmptyMeasurements();
    protected virtual void PrepareCommand(DbCommand command, ISqlObjectLocator locator, string commandText, IReadOnlyDictionary`2<string, object> parameters);
    protected abstract virtual IEnumerable`1<Measurement> GetData(DbDataReader reader);
    protected static void SetCommandParameter(IDbCommand command, string name, object value);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.DbaProbe/<ReadMeasurementsAsync>d__18")]
private Task`1<Measurement[]> ReadMeasurementsAsync(DbCommand command);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.DbaProbe/<GetResultSets>d__19")]
private static IEnumerable`1<DbDataReader> GetResultSets(DbDataReader reader);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.ExternalProbe : Probe {
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    public IEnumerable`1<Type> ToolTypes { get; }
    public Type ImplementationType { get; public set; }
    public string Configuration { get; public set; }
    public virtual IEnumerable`1<Type> get_ToolTypes();
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public void set_ImplementationType(Type value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.ExternalProbe/<GetDataImpl>d__10")]
protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IReadOnlyDictionary`2<string, object> parameters);
}
public interface Microsoft.SqlServer.Management.Assessment.Probes.ICharacteristicCollection {
    public abstract virtual void Add(string key, string value);
}
internal interface Microsoft.SqlServer.Management.Assessment.Probes.ICharacteristicProvider {
    public Regex Pattern { get; }
    public int Priority { get; }
    public abstract virtual Regex get_Pattern();
    public abstract virtual int get_Priority();
    public abstract virtual Task UpdateCharacteristics(RunSpace runSpace, string key, Dictionary`2<string, string> args, HashSet`1<string> specification);
    public abstract virtual CharacteristicCollection GetDependencies(RunSpace runSpace, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
    public abstract virtual string GetDisplayName(string key, Dictionary`2<string, string> arguments, HashSet`1<string> specification);
}
public interface Microsoft.SqlServer.Management.Assessment.Probes.IProbe {
    public SqlObjectLocatorPattern Target { get; public set; }
    public string FamilyName { get; public set; }
    public IDataMorph Morph { get; public set; }
    public ICharacteristicCollection Subject { get; }
    public ICharacteristicCollection Requirements { get; }
    public IEnumerable`1<Type> ToolTypes { get; }
    public abstract virtual SqlObjectLocatorPattern get_Target();
    public abstract virtual void set_Target(SqlObjectLocatorPattern value);
    public abstract virtual string get_FamilyName();
    public abstract virtual void set_FamilyName(string value);
    public abstract virtual IDataMorph get_Morph();
    public abstract virtual void set_Morph(IDataMorph value);
    public abstract virtual ICharacteristicCollection get_Subject();
    public abstract virtual ICharacteristicCollection get_Requirements();
    public abstract virtual IEnumerable`1<Type> get_ToolTypes();
    public abstract virtual Task`1<IDataView> GetDataAsync(RunSpace runSpace, IReadOnlyDictionary`2<string, object> parameters);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Probes.LinesView : object {
    private string lineColumnName;
    [CompilerGeneratedAttribute]
private List`1<Line> <Lines>k__BackingField;
    public List`1<Line> Lines { get; }
    public int Count { get; }
    public IDataRow Item { get; }
    public LinesView(IEnumerable`1<string> lines, string lineColumnName);
    [CompilerGeneratedAttribute]
public List`1<Line> get_Lines();
    private Line CreateLine(string str);
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.PowerShellProbe : SingleToolProbe`1<IPowerShellTool> {
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [JsonPropertyAttribute("command")]
public string CommandText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IPowerShellTool tool, IReadOnlyDictionary`2<string, object> parameters);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Probes.Probe : object {
    [CompilerGeneratedAttribute]
private SqlObjectLocatorPattern <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataMorph <Morph>k__BackingField;
    [CompilerGeneratedAttribute]
private ICharacteristicCollection <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private ICharacteristicCollection <Requirements>k__BackingField;
    public SqlObjectLocatorPattern Target { get; public set; }
    public string FamilyName { get; public set; }
    [JsonPropertyAttribute("transform")]
public IDataMorph Morph { get; public set; }
    [JsonPropertyAttribute("runFor")]
[JsonConverterAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.ConcreteConverter`1<Microsoft.SqlServer.Management.Assessment.Probes.CharacteristicCollection>")]
public ICharacteristicCollection Subject { get; public set; }
    [JsonPropertyAttribute("requires")]
[JsonConverterAttribute("Microsoft.SqlServer.Management.Assessment.Configuration.Json.ConcreteConverter`1<Microsoft.SqlServer.Management.Assessment.Probes.CharacteristicCollection>")]
public ICharacteristicCollection Requirements { get; public set; }
    public IEnumerable`1<Type> ToolTypes { get; }
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectLocatorPattern get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Target(SqlObjectLocatorPattern value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FamilyName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataMorph get_Morph();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Morph(IDataMorph value);
    [CompilerGeneratedAttribute]
public sealed virtual ICharacteristicCollection get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ICharacteristicCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual ICharacteristicCollection get_Requirements();
    [CompilerGeneratedAttribute]
public void set_Requirements(ICharacteristicCollection value);
    public abstract virtual IEnumerable`1<Type> get_ToolTypes();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.Probe/<GetDataAsync>d__22")]
public sealed virtual Task`1<IDataView> GetDataAsync(RunSpace runSpace, IReadOnlyDictionary`2<string, object> parameters);
    protected abstract virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IReadOnlyDictionary`2<string, object> parameters);
}
public class Microsoft.SqlServer.Management.Assessment.Probes.ProbeFamily : PatternDictionary`2<ISqlObjectLocator, IProbe> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public ProbeFamily(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    protected internal virtual void TagItem(IProbe value);
}
public class Microsoft.SqlServer.Management.Assessment.Probes.ProbeRequirementsException : SqlAssessmentProbeException {
    [CompilerGeneratedAttribute]
private CharacteristicCollection <MissingDependencies>k__BackingField;
    internal CharacteristicCollection MissingDependencies { get; internal set; }
    public ProbeRequirementsException(string message);
    public ProbeRequirementsException(string message, Exception innerException);
    protected ProbeRequirementsException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
internal CharacteristicCollection get_MissingDependencies();
    [CompilerGeneratedAttribute]
internal void set_MissingDependencies(CharacteristicCollection value);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.RegistryProbe : SingleToolProbe`1<IRegistryTool> {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, List`1<string>>> <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Instance>k__BackingField;
    private static Regex ParamPattern;
    [JsonPropertyAttribute]
public Dictionary`2<string, Dictionary`2<string, List`1<string>>> Query { get; public set; }
    [JsonPropertyAttribute]
public bool Instance { get; public set; }
    private static RegistryProbe();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, List`1<string>>> get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(Dictionary`2<string, Dictionary`2<string, List`1<string>>> value);
    [CompilerGeneratedAttribute]
public bool get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(bool value);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.RegistryProbe/<GetDataImpl>d__8")]
protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IRegistryTool tool, IReadOnlyDictionary`2<string, object> parameters);
    private static string Substitute(string pattern, IReadOnlyDictionary`2<string, object> parameters);
    private static IReadOnlyList`1<string> Substitute(IReadOnlyList`1<string> list, IReadOnlyDictionary`2<string, object> parameters);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.ServerVersionProbe : Probe {
    public IEnumerable`1<Type> ToolTypes { get; }
    public virtual IEnumerable`1<Type> get_ToolTypes();
    protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IReadOnlyDictionary`2<string, object> parameters);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Probes.SingleToolProbe`1 : Probe {
    private static Type[] ToolTypesStatic;
    public IEnumerable`1<Type> ToolTypes { get; }
    private static SingleToolProbe`1();
    public virtual IEnumerable`1<Type> get_ToolTypes();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.SingleToolProbe`1/<GetDataImpl>d__3")]
protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IReadOnlyDictionary`2<string, object> parameters);
    protected abstract virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, TTool tool, IReadOnlyDictionary`2<string, object> parameters);
}
public class Microsoft.SqlServer.Management.Assessment.Probes.SqlAssessmentProbeException : Exception {
    protected SqlAssessmentProbeException(SerializationInfo info, StreamingContext context);
    public SqlAssessmentProbeException(string message);
    public SqlAssessmentProbeException(string message, object arg);
    public SqlAssessmentProbeException(string message, Exception innerException);
    public SqlAssessmentProbeException(Exception innerException, string message, Object[] args);
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.SqlProbe : DbaProbe {
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Probes.SqlProbe/<GetData>d__0")]
protected virtual IEnumerable`1<Measurement> GetData(DbDataReader reader);
}
internal enum Microsoft.SqlServer.Management.Assessment.Probes.TargetSpecifierRank : Enum {
    public int value__;
    public static TargetSpecifierRank High;
    public static TargetSpecifierRank Medium;
    public static TargetSpecifierRank Low;
}
internal class Microsoft.SqlServer.Management.Assessment.Probes.WmiProbe : SingleToolProbe`1<IWmiTool> {
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [JsonPropertyAttribute]
public string Query { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Methods { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Methods();
    [CompilerGeneratedAttribute]
public void set_Methods(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    protected virtual Task`1<IDataView> GetDataImpl(RunSpace runSpace, IWmiTool tool, IReadOnlyDictionary`2<string, object> parameters);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Assessment.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorEmtyString { get; }
    internal static string ErrorCheckTargetChange { get; }
    internal static string ErrorInvalidCheckId { get; }
    internal static string ErrorEvalArity { get; }
    internal static string ErrorEvalMissingData { get; }
    internal static string ErrorEvalOverflow { get; }
    internal static string ErrorEvalStringFormat { get; }
    internal static string ErrorEvalTypeMismatch { get; }
    internal static string ErrorIndexOutOfRange { get; }
    internal static string ErrorJsonMissingProperty { get; }
    internal static string ErrorJsonOperatorInstantiation { get; }
    internal static string ErrorJsonReader { get; }
    internal static string ErrorJsonSerializationNotSupported { get; }
    internal static string ErrorJsonSingularRangeInclusive { get; }
    internal static string ErrorJsonUnexpectedEndOfDocument { get; }
    internal static string ErrorJsonUnexpectedToken { get; }
    internal static string ErrorJsonUnsupportedOperation { get; }
    internal static string ErrorJsonWrongToken { get; }
    internal static string ErrorJsonWrongValue { get; }
    internal static string ErrorValueEndsWithWhiteSpace { get; }
    internal static string ErrorValueIsAWhiteSpaceString { get; }
    internal static string ErrorValueIsAnEmptyString { get; }
    internal static string ErrorValueStartsWithWhiteSpace { get; }
    internal static string ErrorEvalWrongProbeParameter { get; }
    internal static string ErrorStringOrObjectExpected { get; }
    internal static string ErrorStringArrayOrObjectExpected { get; }
    internal static string ErrorConverterCannotWriteValue { get; }
    internal static string ErrorConverterCannotReadJSONValue { get; }
    internal static string ErrorVersionFieldIsRequired { get; }
    internal static string ErrorNameFieldIsRequired { get; }
    internal static string ErrorKeyNotFound { get; }
    internal static string ErrorImplementationWasNotFound { get; }
    internal static string ErrorJsonSingularLeftRangeInclusive { get; }
    internal static string ErrorJsonSingularRightRangeInclusive { get; }
    internal static string ErrorRecursionDetected { get; }
    internal static string ErrorValueCannotBeNullOrWhiteSpace { get; }
    internal static string ErrorMultuallyExclusiveJsonProperties { get; }
    internal static string ErrorMissingJsonProperty { get; }
    internal static string ErrorTargetFilerInDefinition { get; }
    internal static string ErrorUnrecognizedChecksItemType { get; }
    internal static string ErrorCheckModificationSelectorResuired { get; }
    internal static string ErrorEvalOther { get; }
    internal static string UnsupportedTargetCheckMessage { get; }
    internal static string UnsupportedTargetCheckDescription { get; }
    internal static string UnsupportedTargetCheckDisplayName { get; }
    internal static string ErrorFailedObtainProbeData { get; }
    internal static string ErrorCheckHasNoImplementation { get; }
    internal static string ErrorAccessTarget { get; }
    internal static string StringCheckId { get; }
    internal static string StringTarget { get; }
    internal static string ErrorConditionEvaluationFailed { get; }
    internal static string ErrorJsonLocationWithLinePosition { get; }
    internal static string ErrorProbeInitialize { get; }
    internal static string ErrorLoadingAssembly { get; }
    internal static string NotEnoughPermissionsToRunAssessmentMessage { get; }
    internal static string ErrorProbeRequirements { get; }
    internal static string GroupingColumnNameCannotBeNull { get; }
    internal static string Unsupported_PowerShell_parameter_type { get; }
    internal static string WarningCheckSkipped1 { get; }
    internal static string WarningCheckSkipped2 { get; }
    internal static string WarningCheckSkipped3 { get; }
    internal static string WarningCheckSkipped3Plus { get; }
    internal static string Unsupported_Wmi_parameter_type { get; }
    internal static string WarningMaxResults1 { get; }
    internal static string WarningMaxResults2 { get; }
    internal static string WarningMaxResults2Plus { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorEmtyString();
    internal static string get_ErrorCheckTargetChange();
    internal static string get_ErrorInvalidCheckId();
    internal static string get_ErrorEvalArity();
    internal static string get_ErrorEvalMissingData();
    internal static string get_ErrorEvalOverflow();
    internal static string get_ErrorEvalStringFormat();
    internal static string get_ErrorEvalTypeMismatch();
    internal static string get_ErrorIndexOutOfRange();
    internal static string get_ErrorJsonMissingProperty();
    internal static string get_ErrorJsonOperatorInstantiation();
    internal static string get_ErrorJsonReader();
    internal static string get_ErrorJsonSerializationNotSupported();
    internal static string get_ErrorJsonSingularRangeInclusive();
    internal static string get_ErrorJsonUnexpectedEndOfDocument();
    internal static string get_ErrorJsonUnexpectedToken();
    internal static string get_ErrorJsonUnsupportedOperation();
    internal static string get_ErrorJsonWrongToken();
    internal static string get_ErrorJsonWrongValue();
    internal static string get_ErrorValueEndsWithWhiteSpace();
    internal static string get_ErrorValueIsAWhiteSpaceString();
    internal static string get_ErrorValueIsAnEmptyString();
    internal static string get_ErrorValueStartsWithWhiteSpace();
    internal static string get_ErrorEvalWrongProbeParameter();
    internal static string get_ErrorStringOrObjectExpected();
    internal static string get_ErrorStringArrayOrObjectExpected();
    internal static string get_ErrorConverterCannotWriteValue();
    internal static string get_ErrorConverterCannotReadJSONValue();
    internal static string get_ErrorVersionFieldIsRequired();
    internal static string get_ErrorNameFieldIsRequired();
    internal static string get_ErrorKeyNotFound();
    internal static string get_ErrorImplementationWasNotFound();
    internal static string get_ErrorJsonSingularLeftRangeInclusive();
    internal static string get_ErrorJsonSingularRightRangeInclusive();
    internal static string get_ErrorRecursionDetected();
    internal static string get_ErrorValueCannotBeNullOrWhiteSpace();
    internal static string get_ErrorMultuallyExclusiveJsonProperties();
    internal static string get_ErrorMissingJsonProperty();
    internal static string get_ErrorTargetFilerInDefinition();
    internal static string get_ErrorUnrecognizedChecksItemType();
    internal static string get_ErrorCheckModificationSelectorResuired();
    internal static string get_ErrorEvalOther();
    internal static string get_UnsupportedTargetCheckMessage();
    internal static string get_UnsupportedTargetCheckDescription();
    internal static string get_UnsupportedTargetCheckDisplayName();
    internal static string get_ErrorFailedObtainProbeData();
    internal static string get_ErrorCheckHasNoImplementation();
    internal static string get_ErrorAccessTarget();
    internal static string get_StringCheckId();
    internal static string get_StringTarget();
    internal static string get_ErrorConditionEvaluationFailed();
    internal static string get_ErrorJsonLocationWithLinePosition();
    internal static string get_ErrorProbeInitialize();
    internal static string get_ErrorLoadingAssembly();
    internal static string get_NotEnoughPermissionsToRunAssessmentMessage();
    internal static string get_ErrorProbeRequirements();
    internal static string get_GroupingColumnNameCannotBeNull();
    internal static string get_Unsupported_PowerShell_parameter_type();
    internal static string get_WarningCheckSkipped1();
    internal static string get_WarningCheckSkipped2();
    internal static string get_WarningCheckSkipped3();
    internal static string get_WarningCheckSkipped3Plus();
    internal static string get_Unsupported_Wmi_parameter_type();
    internal static string get_WarningMaxResults1();
    internal static string get_WarningMaxResults2();
    internal static string get_WarningMaxResults2Plus();
}
internal class Microsoft.SqlServer.Management.Assessment.RequirementsResultGrouper : object {
    public sealed virtual void Consolidate(ISqlObjectLocator target, EngineConfig config, List`1<IAssessmentResult> results);
}
internal class Microsoft.SqlServer.Management.Assessment.RequirementsWarning : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ICheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <CheckIds>k__BackingField;
    public string Message { get; }
    public ICheck Check { get; }
    public string TargetPath { get; }
    public SqlObjectType TargetType { get; }
    public DateTimeOffset Timestamp { get; }
    public IReadOnlyList`1<string> CheckIds { get; }
    public RequirementsWarning(SqlObjectType targetType, string targetPath, string message, IReadOnlyList`1<string> checkIds);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual ICheck get_Check();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_TargetType();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_CheckIds();
}
internal class Microsoft.SqlServer.Management.Assessment.RequirementsWarningBuilder : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SpecGroupList> <Errors>k__BackingField;
    private Dictionary`2<string, SpecGroupList> Errors { get; }
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SpecGroupList> get_Errors();
    public void Append(ProbeRequirementsError err);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.RequirementsWarningBuilder/<ToWarning>d__4")]
public IEnumerable`1<IAssessmentResult> ToWarning(ISqlObjectLocator target, EngineConfig config);
    private static string BuildMessage(CharacteristicProviderSource providerSource, string key, KeyValuePair`2<HashSet`1<string>, IReadOnlyList`1<ProbeRequirementsError>> subGroup);
    private static string GetDisplayName(CharacteristicProviderSource providerSource, string key, HashSet`1<string> specification);
}
public class Microsoft.SqlServer.Management.Assessment.RunSpace : object {
    private Dictionary`2<Type, ITool> tools;
    private Dictionary`2<Type, IDataSource> sources;
    private string instanceName;
    [CompilerGeneratedAttribute]
private ISqlObjectLocator <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IInventory <Inventory>k__BackingField;
    [CompilerGeneratedAttribute]
private CharacteristicCollection <KnownCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CharacteristicFailure> <FailedCharacteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private EngineConfig <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationContext`1<object> <EvaluationContext>k__BackingField;
    internal IDictionary`2<string, object> AzContext;
    public ISqlObjectLocator Target { get; }
    internal DbConnection Connection { get; }
    internal IInventory Inventory { get; }
    internal CharacteristicCollection KnownCharacteristics { get; }
    internal List`1<CharacteristicFailure> FailedCharacteristics { get; }
    internal EngineConfig Configuration { get; }
    internal EvaluationContext`1<object> EvaluationContext { get; }
    internal string InstanceName { get; }
    private protected RunSpace(ISqlObjectLocator target, DbConnection connection, IInventory inventory, EngineConfig configuration, EvaluationContext`1<object> evaluationContext);
    [CompilerGeneratedAttribute]
public ISqlObjectLocator get_Target();
    [CompilerGeneratedAttribute]
internal DbConnection get_Connection();
    [CompilerGeneratedAttribute]
internal IInventory get_Inventory();
    [CompilerGeneratedAttribute]
internal CharacteristicCollection get_KnownCharacteristics();
    [CompilerGeneratedAttribute]
internal List`1<CharacteristicFailure> get_FailedCharacteristics();
    [CompilerGeneratedAttribute]
internal EngineConfig get_Configuration();
    [CompilerGeneratedAttribute]
internal EvaluationContext`1<object> get_EvaluationContext();
    internal string get_InstanceName();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.RunSpace/<Build>d__27")]
internal static Task`1<RunSpace> Build(ISqlObjectLocator target, DbConnection connection, IInventory inventory, EngineConfig configuration, EvaluationContext`1<object> evaluationContext, CancellationToken ct);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.RunSpace/<Initialize>d__29")]
internal Task Initialize(CancellationToken ct);
    internal T GetTool();
    internal void SetTool(TTool channel);
    internal void SetTool(Type channelType, ITool channel);
    internal IEnumerable`1<ITool> GetTools(Type channelType);
    internal T GetDataSource();
    internal void SetDataSource(Type sourceType, IDataSource source);
    internal void SetDataSource(TSource source);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.RunSpace/<GetDataSources>d__37")]
internal IEnumerable`1<IDataSource> GetDataSources(Type sourceType);
    internal bool Meets(ICharacteristicCollection requirements);
    internal bool ProvidesAll(IEnumerable`1<Type> toolTypes);
    internal CharacteristicCollection GetMissingDependencies(ICharacteristicCollection requirements, IEnumerable`1<Type> toolTypes);
    internal IProbe GetProbeImplementation(string name);
    internal void SetAttribute(string service, string name, object value, string propName);
    internal bool TryGetAttribute(string service, string name, Object& value, string propName);
    internal bool HasAttribute(string service, string name, string propName);
    internal bool HasAllAttributes(ICharacteristicCollection query);
    private static string BuildAttrName(string service, string name, string propName);
    private static string GetInstanceName(string dataSource);
    [CompilerGeneratedAttribute]
private bool <HasAllAttributes>b__45_0(KeyValuePair`2<string, HashSet`1<string>> pair);
}
internal class Microsoft.SqlServer.Management.Assessment.Scheduler : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<ISqlObjectLocator, SemaphoreSlim> <DispatchPost>k__BackingField;
    protected ConcurrentDictionary`2<ISqlObjectLocator, SemaphoreSlim> DispatchPost { get; }
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<ISqlObjectLocator, SemaphoreSlim> get_DispatchPost();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Scheduler/<Run>d__3`2")]
public Task`1<TResult> Run(TRequest request, Func`2<TRequest, Task`1<TResult>> procedure);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum Microsoft.SqlServer.Management.Assessment.SeverityLevel : Enum {
    public int value__;
    public static SeverityLevel Information;
    public static SeverityLevel Low;
    public static SeverityLevel Medium;
    public static SeverityLevel High;
}
internal class Microsoft.SqlServer.Management.Assessment.SpecGroupList : object {
    [CompilerGeneratedAttribute]
private List`1<HashSet`1<string>> <SpecList>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<List`1<ProbeRequirementsError>> <ErrorList>k__BackingField;
    private List`1<HashSet`1<string>> SpecList { get; }
    private List`1<List`1<ProbeRequirementsError>> ErrorList { get; }
    [CompilerGeneratedAttribute]
private List`1<HashSet`1<string>> get_SpecList();
    [CompilerGeneratedAttribute]
private List`1<List`1<ProbeRequirementsError>> get_ErrorList();
    public void Add(HashSet`1<string> specification, ProbeRequirementsError err);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.SpecGroupList/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<KeyValuePair`2<HashSet`1<string>, IReadOnlyList`1<ProbeRequirementsError>>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.SqlServer.Management.Assessment.SqlAssessmentArityException : SqlAssessmentEvaluationException {
    public SqlAssessmentArityException(string message);
    public SqlAssessmentArityException(string message, Exception innerException);
    public SqlAssessmentArityException(int expectedArity, int actualArgumentsCount);
    protected SqlAssessmentArityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Assessment.SqlAssessmentEvaluationException : Exception {
    public SqlAssessmentEvaluationException(string message);
    public SqlAssessmentEvaluationException(string message, Exception innerException);
    protected SqlAssessmentEvaluationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Assessment.SqlAssessmentFormatException : SqlAssessmentEvaluationException {
    public SqlAssessmentFormatException(string message);
    public SqlAssessmentFormatException(string message, Exception innerException);
    public SqlAssessmentFormatException(Type type, string value);
    public SqlAssessmentFormatException(Type type, string value, Exception innerException);
    protected SqlAssessmentFormatException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Assessment.SqlAssessmentMissingDataException : SqlAssessmentEvaluationException {
    public SqlAssessmentMissingDataException(string dataItemName);
    public SqlAssessmentMissingDataException(string message, Exception innerException);
    protected SqlAssessmentMissingDataException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Assessment.SqlAssessmentOverflowException : SqlAssessmentEvaluationException {
    public SqlAssessmentOverflowException(string message);
    public SqlAssessmentOverflowException(string message, Exception innerException);
    public SqlAssessmentOverflowException(Type type);
    public SqlAssessmentOverflowException(Type type, Exception innerException);
    protected SqlAssessmentOverflowException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Assessment.SqlAssessmentProbeParameterException : SqlAssessmentEvaluationException {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public SqlAssessmentProbeParameterException(string message);
    public SqlAssessmentProbeParameterException(IProbe probe, string parameterName);
    public SqlAssessmentProbeParameterException(string message, IProbe probe, string parameterName);
    public SqlAssessmentProbeParameterException(string message, Exception innerException);
    public SqlAssessmentProbeParameterException(string message, string parameterName);
    protected SqlAssessmentProbeParameterException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
public class Microsoft.SqlServer.Management.Assessment.SqlAssessmentTypeMismatchException : SqlAssessmentEvaluationException {
    public SqlAssessmentTypeMismatchException(string message);
    public SqlAssessmentTypeMismatchException(string message, Exception innerException);
    public SqlAssessmentTypeMismatchException(Type expected, Type actual, object value);
    public SqlAssessmentTypeMismatchException(Type expected, Type actual, object value, Exception innerException);
    protected SqlAssessmentTypeMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.SqlServer.Management.Assessment.SqlLocatorAccessPointComparer : object {
    public sealed virtual bool Equals(ISqlObjectLocator x, ISqlObjectLocator y);
    public sealed virtual int GetHashCode(ISqlObjectLocator obj);
}
public class Microsoft.SqlServer.Management.Assessment.SqlObjectLocator : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Urn>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlEngineEdition <EngineEdition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataSourceCollection <DataSources>k__BackingField;
    public string Name { get; public set; }
    public SqlObjectType Type { get; public set; }
    public Version Version { get; public set; }
    public string Urn { get; public set; }
    public SqlEngineEdition EngineEdition { get; public set; }
    public string ServerName { get; public set; }
    public DbConnection Connection { get; public set; }
    public string Platform { get; public set; }
    public string MachineType { get; public set; }
    public IDataSourceCollection DataSources { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlObjectType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SqlObjectType value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Urn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Urn(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlEngineEdition get_EngineEdition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EngineEdition(SqlEngineEdition value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServerName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DbConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(DbConnection value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Platform(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MachineType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MachineType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataSourceCollection get_DataSources();
    public sealed virtual void Dispose();
    public virtual string ToString();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Assessment.SqlObjectType : Enum {
    public int value__;
    public static SqlObjectType None;
    public static SqlObjectType Server;
    public static SqlObjectType Database;
    public static SqlObjectType FileGroup;
    public static SqlObjectType AvailabilityGroup;
}
internal static class Microsoft.SqlServer.Management.Assessment.SupportedPlatform : object {
    public static string Windows;
    public static string Linux;
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.AzGraphMetadataTool : AzMetadataTool {
    private static CharacteristicCollection RequirementsSingleton;
    private string vmResourceId;
    private bool vmResourceIdSet;
    public static AzGraphQuery ComputeQuery;
    public static AzGraphQuery DisksQuery;
    private static CharacteristicCollection StaticRequirements { get; }
    public AzGraphMetadataTool(RunSpace runSpace);
    private static AzGraphMetadataTool();
    private static CharacteristicCollection get_StaticRequirements();
    public static IAzMetadataTool Create(RunSpace runSpace);
    public virtual ICharacteristicCollection GetDependencies();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzGraphMetadataTool/<IsAvailable>d__8")]
public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    public virtual string ToString();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzGraphMetadataTool/<GetMetadata>d__10")]
protected virtual Task`1<JObject> GetMetadata(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzGraphMetadataTool/<GetResourceId>d__11")]
private Task`1<string> GetResourceId(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzGraphMetadataTool/<ReadGraphData>d__12")]
private static Task`1<List`1<JObject>> ReadGraphData(IAzGraphTool tool, AzGraphQuery query, string resourceId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static void <ReadGraphData>g__SetValue|12_0(JObject jObject, String[] keys, object value);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Tools.AzMetadataTool : Tool {
    private static Uri Uri;
    private static Dictionary`2<string, Type> NormTypes;
    protected AzMetadataTool(RunSpace runSpace);
    private static AzMetadataTool();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzMetadataTool/<Query>d__3")]
public virtual Task`1<IDataView> Query(string query, IReadOnlyDictionary`2<string, object> parameters);
    protected abstract virtual Task`1<JObject> GetMetadata(Uri uri, CancellationToken cancellationToken);
    private static void AdaptOutput(JToken jObject);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.AzResourceGraphTool : DirectTool`1<IAzureResourceGraphDataSource> {
    private static Regex ParameterPattern;
    private static Char[] CharactersToEscape;
    private static Char[] Translation;
    public AzResourceGraphTool(RunSpace runSpace);
    private static AzResourceGraphTool();
    public static IAzGraphTool Create(RunSpace runSpace);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzResourceGraphTool/<Query>d__3")]
public sealed virtual Task`1<IDataView> Query(string query, IReadOnlyDictionary`2<string, object> parameters, CancellationToken cancellationToken);
    public virtual string ToString();
    protected virtual Task`1<bool> IsChannelAvailable(CancellationToken cancellationToken);
    private static string BuildQuery(string query, IReadOnlyDictionary`2<string, object> parameters);
    private static string InsertParameterValues(string query, IReadOnlyDictionary`2<string, object> parameters);
    private static string ValueToString(object value);
    private static string EscapeSingleQuoteString(string str);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.AzUtil : object {
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzUtil/<GetVmTypeCode>d__0")]
public static Task`1<int> GetVmTypeCode(RunSpace runSpace, ISqlTool tool, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.AzUtil/<IsAzMachine>d__1")]
public static Task`1<bool> IsAzMachine(RunSpace runSpace, IWmiTool tool, CancellationToken cancellationToken);
    private static void SetValue(RunSpace runSpace, string name, object value);
    private static bool TryGetValue(RunSpace runSpace, string name, TValue& value);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Assessment.Tools.CliXml : object {
    public static XNamespace Namespace;
    public static XName ObjsElem;
    public static XName ObjElem;
    public static XName ToStringElem;
    public static XName PropsElem;
    public static XName MsElem;
    public static XName TnElem;
    public static XName TnRefElem;
    public static XName LstElem;
    public static XName IeElem;
    public static XName StreamAttr;
    public static XName NameAttr;
    public static XName RefIdAttr;
    public static string OutputStreamName;
    public static string ProgressStreamName;
    public static string ErrorStreamName;
    private static char Dot;
    [CompilerGeneratedAttribute]
private static Dictionary`2<XName, ValueGetter> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<XName, ContainerGetter> <Containers>k__BackingField;
    public static Dictionary`2<XName, ValueGetter> Types { get; }
    public static Dictionary`2<XName, ContainerGetter> Containers { get; }
    private static CliXml();
    [ExtensionAttribute]
public static string GetStreamName(XElement e);
    [ExtensionAttribute]
public static string GetCliName(XElement e);
    [ExtensionAttribute]
public static object GetCliValue(XElement e);
    [ExtensionAttribute]
public static bool TryGetCliValue(XElement e, Object& value);
    [ExtensionAttribute]
public static bool TryGetCliValue(XElement e, string path, int pathOffset, Object& value);
    [ExtensionAttribute]
public static bool HasAttribute(XElement e, XName attrName, string value);
    [ExtensionAttribute]
public static bool TryGetValue(XElement e, string path, int pathOffset, Object& value);
    public static bool TryGetNilValue(XElement _1, string _2, int _3, Object& value);
    [ExtensionAttribute]
public static bool TryGetRefValue(XElement element, string path, int pathOffset, Object& value);
    [ExtensionAttribute]
public static bool TryGetObjectValue(XElement element, string path, int pathOffset, Object& value);
    [ExtensionAttribute]
public static bool TryGetObjectTypeName(XElement element, String& typeName);
    [ExtensionAttribute]
public static bool TryGetLstValue(XElement container, string typeName, Object& value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<XName, ValueGetter> get_Types();
    [CompilerGeneratedAttribute]
public static Dictionary`2<XName, ContainerGetter> get_Containers();
    [CompilerGeneratedAttribute]
internal static bool <TryGetObjectValue>g__TryGetContainerValue|28_0(Object& localValue, <>c__DisplayClass28_0& );
    [CompilerGeneratedAttribute]
internal static bool <TryGetObjectValue>g__TryGetValueFromProperties|28_1(XName elementName, Object& localValue, <>c__DisplayClass28_0& );
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.CliXmlRow : object {
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    private XElement Element { get; }
    public CliXmlRow(XElement element);
    [CompilerGeneratedAttribute]
private XElement get_Element();
    public sealed virtual bool TryGetData(string column, Object& value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Tools.CliXmlView : object {
    [CompilerGeneratedAttribute]
private XDocument <Document>k__BackingField;
    public XDocument Document { get; }
    public int Count { get; }
    public IDataRow Item { get; }
    public CliXmlView(XDocument cliXmlDocument);
    [CompilerGeneratedAttribute]
public XDocument get_Document();
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
    private IDataRow CreateDataRow(XElement xe);
    private static bool IsItem(XElement element);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.CmdPowerShellTool : DependentTool`1<ICmdShellTool> {
    private static XmlReaderSettings Settings;
    private static string PowerShellCommandHead;
    private static string CommandTemplate;
    public CmdPowerShellTool(RunSpace runSpace);
    private static CmdPowerShellTool();
    public static IPowerShellTool Create(RunSpace runSpace);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.CmdPowerShellTool/<Execute>d__5")]
public sealed virtual Task`1<IDataView> Execute(string script, IReadOnlyDictionary`2<string, object> parameters, CancellationToken cancellationToken);
    public virtual string ToString();
    protected virtual Task`1<bool> IsChannelAvailable(CancellationToken cancellationToken);
    private static void ThrowOnErrors(XDocument doc);
    private static Exception BuildException(List`1<XElement> errorObjects);
    private static string BuildCommand(string script, IReadOnlyDictionary`2<string, object> parameters);
    private static bool TryConvertToLiteral(object value, String& str);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.DataSourceKey : ValueType {
    private static ListBiDictionary`2<Type, string> Rep;
    public static string Wmi;
    public static string Registry;
    public static string AzureGraph;
    public static string AzureMetadata;
    private static DataSourceKey();
    public static bool TryGetValue(string key, Type& channelType);
    public static bool TryGetValue(Type channelType, String& key);
    public static string From(Type toolType);
    public static Type From(string key);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Tools.DependentTool`1 : Tool {
    private static CharacteristicCollection RequirementsSingleton;
    private static CharacteristicCollection StaticRequirements { get; }
    protected TDependency BaseTool { get; }
    protected DependentTool`1(RunSpace runSpace);
    private static DependentTool`1();
    private static CharacteristicCollection get_StaticRequirements();
    protected TDependency get_BaseTool();
    public virtual ICharacteristicCollection GetDependencies();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.DependentTool`1/<IsAvailable>d__7")]
public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    protected abstract virtual Task`1<bool> IsChannelAvailable(CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.DirectAzMetadataTool : AzMetadataTool {
    private static CharacteristicCollection RequirementsSingleton;
    private static CharacteristicCollection StaticRequirements { get; }
    private IAzureInstanceMetadataSource DataSource { get; }
    public DirectAzMetadataTool(RunSpace runSpace);
    private static DirectAzMetadataTool();
    private static CharacteristicCollection get_StaticRequirements();
    private IAzureInstanceMetadataSource get_DataSource();
    public static IAzMetadataTool Create(RunSpace runSpace);
    public virtual ICharacteristicCollection GetDependencies();
    public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    public virtual string ToString();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.DirectAzMetadataTool/<GetMetadata>d__10")]
protected virtual Task`1<JObject> GetMetadata(Uri uri, CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.DirectRegXTool : RegXTool {
    private static CharacteristicCollection RequirementsSingleton;
    private string instanceName;
    private string instanceId;
    private static CharacteristicCollection StaticRequirements { get; }
    private IRegistryDataSource DataSource { get; }
    public DirectRegXTool(RunSpace runSpace);
    private static DirectRegXTool();
    private static CharacteristicCollection get_StaticRequirements();
    private IRegistryDataSource get_DataSource();
    public static IRegistryTool Create(RunSpace runSpace);
    public virtual ICharacteristicCollection GetDependencies();
    public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    public virtual string ToString();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.DirectRegXTool/<EnumKeysInternal>d__12")]
protected virtual Task`1<IList`1<string>> EnumKeysInternal(string hive, string key, bool instance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.DirectRegXTool/<ReadValueInternal>d__13")]
protected virtual Task`1<IList`1<IDictionary`2<string, object>>> ReadValueInternal(string hive, string key, string name, bool instance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.DirectRegXTool/<ResolveKey>d__14")]
private Task`1<string> ResolveKey(string key, CancellationToken cancellationToken);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Tools.DirectTool`1 : Tool {
    private static CharacteristicCollection RequirementsSingleton;
    private static CharacteristicCollection StaticRequirements { get; }
    protected TDataSource DataSource { get; }
    protected DirectTool`1(RunSpace runSpace);
    private static DirectTool`1();
    private static CharacteristicCollection get_StaticRequirements();
    protected TDataSource get_DataSource();
    public virtual ICharacteristicCollection GetDependencies();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.DirectTool`1/<IsAvailable>d__7")]
public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    protected abstract virtual Task`1<bool> IsChannelAvailable(CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.DirectWmiTool : DirectTool`1<IManagementDataSource> {
    private static string RootPrefix;
    public DirectWmiTool(RunSpace runSpace);
    public static IWmiTool Create(RunSpace runSpace);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.DirectWmiTool/<Execute>d__3")]
public sealed virtual Task`1<IDataView> Execute(string cimNamespace, string query, IReadOnlyDictionary`2<string, string> methods, IReadOnlyDictionary`2<string, object> parameters, CancellationToken cancellationToken);
    public virtual string ToString();
    protected virtual Task`1<bool> IsChannelAvailable(CancellationToken cancellationToken);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.IAzGraphTool {
    public abstract virtual Task`1<IDataView> Query(string query, IReadOnlyDictionary`2<string, object> parameters, CancellationToken cancellationToken);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.IAzMetadataTool {
    public abstract virtual Task`1<IDataView> Query(string query, IReadOnlyDictionary`2<string, object> parameters);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.ICmdShellTool {
    public abstract virtual Task`1<List`1<string>> ExecuteLines(string script);
    public abstract virtual Task`1<LinesReader> ExecuteTextReader(string script);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.IInventory {
    public abstract virtual IEnumerable`1<ITool> GetTools(RunSpace runSpace, Type channelType);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.Inventory : object {
    private Dictionary`2<Type, List`1<Func`2<RunSpace, ITool>>> registry;
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.Inventory/<GetTools>d__1")]
public sealed virtual IEnumerable`1<ITool> GetTools(RunSpace runSpace, Type channelType);
    public void Add(Func`2[] constructors);
    private void Add(Type channelType, IEnumerable`1<Func`2<RunSpace, ITool>> constructors);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.IPowerShellTool {
    public abstract virtual Task`1<IDataView> Execute(string script, IReadOnlyDictionary`2<string, object> parameters, CancellationToken cancellationToken);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.IRegistryTool {
    public abstract virtual Task`1<List`1<Dictionary`2<string, object>>> Execute(string hive, string key, IReadOnlyList`1<string> valueNames, bool instance);
    public abstract virtual Task`1<Dictionary`2<string, string>> EnumKeys(string hive, string key, bool instance);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.ISqlTool {
    public abstract virtual DbCommand CreateCommand();
    public abstract virtual DbCommand CreateCommand(string commandText);
    public abstract virtual void ChangeDatabase(string databaseName);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.ITool {
    public abstract virtual ICharacteristicCollection GetDependencies();
    public abstract virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
}
internal interface Microsoft.SqlServer.Management.Assessment.Tools.IWmiTool {
    public abstract virtual Task`1<IDataView> Execute(string cimNamespace, string query, IReadOnlyDictionary`2<string, string> methods, IReadOnlyDictionary`2<string, object> parameters, CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.JsonRow : object {
    private JToken token;
    public JsonRow(JToken token);
    public sealed virtual bool TryGetData(string column, Object& value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Tools.JsonView : object {
    private IList`1<JsonRow> items;
    public int Count { get; }
    public IDataRow Item { get; }
    public JsonView(IEnumerable`1<JToken> tokens);
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.LinesReader : TextReader {
    [CompilerGeneratedAttribute]
private IEnumerator`1<string> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerator`1<char> <Char>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Eof>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Eol>k__BackingField;
    private IEnumerator`1<string> Line { get; }
    private IEnumerator`1<char> Char { get; private set; }
    private bool Eof { get; private set; }
    private int Eol { get; private set; }
    public LinesReader(IEnumerable`1<string> lines);
    private void MoveNext();
    [CompilerGeneratedAttribute]
private IEnumerator`1<string> get_Line();
    [CompilerGeneratedAttribute]
private IEnumerator`1<char> get_Char();
    [CompilerGeneratedAttribute]
private void set_Char(IEnumerator`1<char> value);
    [CompilerGeneratedAttribute]
private bool get_Eof();
    [CompilerGeneratedAttribute]
private void set_Eof(bool value);
    [CompilerGeneratedAttribute]
private int get_Eol();
    [CompilerGeneratedAttribute]
private void set_Eol(int value);
    public virtual int Peek();
    public virtual int Read();
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.NormalizingRow : object {
    private IDataRow row;
    public NormalizingRow(IDataRow row);
    public sealed virtual bool TryGetData(string column, Object& value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Tools.NormalizingView : object {
    private IDataView data;
    public int Count { get; }
    public IDataRow Item { get; }
    public NormalizingView(IDataView data);
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.PrefixedDataRow : object {
    private IDataRow row;
    private string prefix;
    private StringComparison comparison;
    public PrefixedDataRow(IDataRow row, string prefix, StringComparison comparison);
    public sealed virtual bool TryGetData(string column, Object& value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Assessment.Tools.PrefixedDataView : object {
    private IDataView data;
    private string prefix;
    private StringComparison comparison;
    public int Count { get; }
    public IDataRow Item { get; }
    public PrefixedDataView(IDataView data, string prefix, StringComparison comparison);
    public sealed virtual IEnumerator`1<IDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual IDataRow get_Item(int index);
    [CompilerGeneratedAttribute]
private PrefixedDataRow <GetEnumerator>b__4_0(IDataRow r);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.PsAzMetadataTool : AzMetadataTool {
    private static Uri BaseUri;
    private static CharacteristicCollection RequirementsSingleton;
    private static CharacteristicCollection StaticRequirements { get; }
    private IPowerShellTool BaseTool { get; }
    public PsAzMetadataTool(RunSpace runSpace);
    private static PsAzMetadataTool();
    private static CharacteristicCollection get_StaticRequirements();
    private IPowerShellTool get_BaseTool();
    public static IAzMetadataTool Create(RunSpace runSpace);
    public virtual ICharacteristicCollection GetDependencies();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.PsAzMetadataTool/<IsAvailable>d__9")]
public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    public virtual string ToString();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.PsAzMetadataTool/<GetMetadata>d__11")]
protected virtual Task`1<JObject> GetMetadata(Uri uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.PsAzMetadataTool/<GetMetadataCore>d__12")]
private Task`1<string> GetMetadataCore(Uri uri, CancellationToken cancellationToken);
    private static string BuildCommand(Uri uri);
}
internal static class Microsoft.SqlServer.Management.Assessment.Tools.PsUtils : object {
    private static Char[] CharsToEscape;
    private static Char[] Translation;
    private static PsUtils();
    public static string EscapeDoubleQuoteString(string value);
    public static string EscapeSingleQuoteString(string value);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.PsWmiTool : DependentTool`1<IPowerShellTool> {
    private static string CommandTemplate;
    private static string AddMemberTemplate;
    public PsWmiTool(RunSpace runSpace);
    public static IWmiTool Create(RunSpace runSpace);
    protected virtual Task`1<bool> IsChannelAvailable(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.PsWmiTool/<Execute>d__5")]
public sealed virtual Task`1<IDataView> Execute(string cimNamespace, string query, IReadOnlyDictionary`2<string, string> methods, IReadOnlyDictionary`2<string, object> parameters, CancellationToken cancellationToken);
    public virtual string ToString();
    private static string BuildCommand(string cimNamespace, string query, IReadOnlyDictionary`2<string, string> methods, IReadOnlyDictionary`2<string, object> parameters);
    private static string Escape(string query);
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Tools.RegXTool : Tool {
    public static char Asterisk;
    public static char PathSeparator;
    protected RegXTool(RunSpace runSpace);
    public sealed virtual Task`1<List`1<Dictionary`2<string, object>>> Execute(string hive, string key, IReadOnlyList`1<string> valueNames, bool instance);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.RegXTool/<Execute>d__4")]
public Task`1<List`1<Dictionary`2<string, object>>> Execute(string hive, string key, IReadOnlyList`1<string> valueNames, bool instance, CancellationToken cancellationToken);
    public sealed virtual Task`1<Dictionary`2<string, string>> EnumKeys(string hive, string key, bool instance);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.RegXTool/<EnumKeys>d__6")]
public Task`1<Dictionary`2<string, string>> EnumKeys(string hive, string key, bool instance, CancellationToken cancellationToken);
    protected abstract virtual Task`1<IList`1<string>> EnumKeysInternal(string hive, string key, bool instance, CancellationToken cancellationToken);
    protected abstract virtual Task`1<IList`1<IDictionary`2<string, object>>> ReadValueInternal(string hive, string key, string name, bool instance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.RegXTool/<CollectKeys>d__9")]
private Task`1<Dictionary`2<string, string>> CollectKeys(string hive, string keyPattern, bool instance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.RegXTool/<CollectKeys>d__10")]
private Task CollectKeys(string hive, string keyPattern, bool instance, string keyName, Dictionary`2<string, string> keys, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.RegXTool/<QueryKey>d__11")]
private Task QueryKey(string hive, string keyName, string keyPath, IEnumerable`1<string> valueNames, bool instance, List`1<Dictionary`2<string, object>> view, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.RegXTool/<QueryName>d__12")]
private Task QueryName(string hive, string key, string name, bool instance, List`1<List`1<Dictionary`2<string, object>>> heap, CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.SingleFieldMeasurement : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string FieldName { get; }
    public object Value { get; }
    public SingleFieldMeasurement(string fieldName, object value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public object get_Value();
    public sealed virtual bool TryGetData(string column, Object& value);
    public static Measurement Join(Measurement acc, SingleFieldMeasurement item);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.SqlTool : Tool {
    private DbConnection connection;
    public SqlTool(RunSpace runSpace);
    public static ISqlTool Create(RunSpace runSpace);
    public virtual ICharacteristicCollection GetDependencies();
    public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    public sealed virtual DbCommand CreateCommand();
    public sealed virtual DbCommand CreateCommand(string commandText);
    public sealed virtual void ChangeDatabase(string databaseName);
    public virtual string ToString();
}
internal abstract class Microsoft.SqlServer.Management.Assessment.Tools.Tool : object {
    [CompilerGeneratedAttribute]
private RunSpace <RunSpace>k__BackingField;
    protected RunSpace RunSpace { get; }
    protected Tool(RunSpace runSpace);
    [CompilerGeneratedAttribute]
protected RunSpace get_RunSpace();
    public abstract virtual ICharacteristicCollection GetDependencies();
    public abstract virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.ToolKey : ValueType {
    private static ListBiDictionary`2<Type, string> Rep;
    public static string Sql;
    public static string CmdShell;
    public static string PowerShell;
    public static string Wmi;
    public static string Registry;
    public static string AzGraph;
    public static string AzMetadata;
    private static ToolKey();
    public static bool TryGetValue(string key, Type& channelType);
    public static bool TryGetValue(Type channelType, String& key);
    public static string From(Type toolType);
    public static Type From(string key);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.TwoFieldMeasurement : object {
    [CompilerGeneratedAttribute]
private string <FieldName1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName2>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value2>k__BackingField;
    public string FieldName1 { get; }
    public object Value1 { get; }
    public string FieldName2 { get; }
    public object Value2 { get; }
    public TwoFieldMeasurement(string fieldName1, object value1, string fieldName2, object value2);
    [CompilerGeneratedAttribute]
public string get_FieldName1();
    [CompilerGeneratedAttribute]
public object get_Value1();
    [CompilerGeneratedAttribute]
public string get_FieldName2();
    [CompilerGeneratedAttribute]
public object get_Value2();
    public sealed virtual bool TryGetData(string column, Object& value);
    public static Measurement Join(Measurement acc, SingleFieldMeasurement item);
}
internal static class Microsoft.SqlServer.Management.Assessment.Tools.WmiUtils : object {
    private static Char[] CharsToEscape;
    private static Regex ParameterPattern;
    public static string Cimv2;
    private static WmiUtils();
    public static string BuildQuery(string query, IReadOnlyDictionary`2<string, object> parameters);
    private static bool TryConvertToLiteral(object value, String& literal);
    private static string EscapeLiteral(string value);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.XpCmdShellTool : DependentTool`1<ISqlTool> {
    private static CharacteristicCollection RequirementsSingleton;
    private static string XpCmdShellScript;
    private static CharacteristicCollection StaticRequirements { get; }
    public XpCmdShellTool(RunSpace runSpace);
    private static XpCmdShellTool();
    private static CharacteristicCollection get_StaticRequirements();
    public static ICmdShellTool Create(RunSpace runSpace);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.XpCmdShellTool/<ExecuteLines>d__6")]
public sealed virtual Task`1<List`1<string>> ExecuteLines(string script);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.XpCmdShellTool/<ExecuteTextReader>d__7")]
public sealed virtual Task`1<LinesReader> ExecuteTextReader(string script);
    public virtual ICharacteristicCollection GetDependencies();
    public virtual string ToString();
    protected virtual Task`1<bool> IsChannelAvailable(CancellationToken cancellationToken);
}
internal class Microsoft.SqlServer.Management.Assessment.Tools.XpRegXTool : RegXTool {
    private static CharacteristicCollection RequirementsSingleton;
    private static CharacteristicCollection StaticRequirements { get; }
    private ISqlTool BaseTool { get; }
    public XpRegXTool(RunSpace runSpace);
    private static XpRegXTool();
    private static CharacteristicCollection get_StaticRequirements();
    private ISqlTool get_BaseTool();
    public static IRegistryTool Create(RunSpace runSpace);
    public virtual ICharacteristicCollection GetDependencies();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.XpRegXTool/<IsAvailable>d__8")]
public virtual Task`1<bool> IsAvailable(CancellationToken cancellationToken);
    public virtual string ToString();
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.XpRegXTool/<EnumKeysInternal>d__10")]
protected virtual Task`1<IList`1<string>> EnumKeysInternal(string hive, string key, bool instance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Management.Assessment.Tools.XpRegXTool/<ReadValueInternal>d__11")]
protected virtual Task`1<IList`1<IDictionary`2<string, object>>> ReadValueInternal(string hive, string key, string name, bool instance, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Assessment.Utils : object {
    [ExtensionAttribute]
public static T Normalize(object value);
    [ExtensionAttribute]
public static object Normalize(object value, Type type);
    [ExtensionAttribute]
public static object Normalize(object value);
    public static bool AreEqual(object arg1, object arg2, StringComparison comparison);
    [ExtensionAttribute]
public static bool IsNumeric(object arg);
    [ExtensionAttribute]
public static DbParameter AddParameter(DbCommand command, string name, object value);
    public static Expression ToLiteral(object value);
    public static Stream GetResourceStream(string name);
    public static string GetResource(string name);
    [CompilerGeneratedAttribute]
internal static bool <AreEqual>g__NormalizeParams|3_0(<>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static bool <AreEqual>g__NormalizeNumericParams|3_1(<>c__DisplayClass3_0& );
}
