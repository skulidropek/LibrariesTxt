internal static class AssemblyRef : object {
    internal static string ProductPublicKey;
    internal static string TestPublicKey;
}
public class Microsoft.SqlServer.Dac.BacPackage : object {
    private IPackageSource _packageSource;
    private bool _isDisposed;
    internal IPackageSource PackageSource { get; }
    private static BacPackage();
    internal BacPackage(IPackageSource packageSource);
    private static bool PackageContainsDeploymentScripts(IPackageSource packageSource);
    internal IPackageSource get_PackageSource();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    public void Unpack(string directoryPath);
    public static BacPackage Load(string fileName);
    public static BacPackage Load(string fileName, DacSchemaModelStorageType modelStorageType);
    public static BacPackage Load(Stream stream);
    public static BacPackage Load(Stream stream, DacSchemaModelStorageType modelStorageType);
}
internal class Microsoft.SqlServer.Dac.BigData.BigDataConnectionContext : object {
    private ReliableSqlConnection _reliableSqlConnection;
    public BigDataConnectionContext(SqlConnectionFactory connectionFactory);
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
public ReliableSqlCommand CreateCommand(string commandText);
    public sealed virtual void Dispose();
}
internal class Microsoft.SqlServer.Dac.BigData.BigDataOperationContext : object {
    public UInt32 OperationIdMaxStringLen;
    public string DbScopedCredentialPrefix;
    public string ExternalFileFormatPrefix;
    public string ExternalDataSourcePrefix;
    public string ExternalTableNamePartialPrefix;
    [CompilerGeneratedAttribute]
private LoggingContext <LoggingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Progress <OperationProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbScopedCredentialName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalFileFormatName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalDataSourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalTableNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlConnectionFactory <ConnectionFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsAzureStorageLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureSharedAccessSignatureToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageBlobEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOperationStateProvider <DataOperationStateProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<SqlConnectionStringBuilder> CS$<>9__CachedAnonymousMethodDelegate1;
    public LoggingContext LoggingContext { get; private set; }
    public Progress OperationProgress { get; private set; }
    public string DbScopedCredentialName { get; private set; }
    public string ExternalFileFormatName { get; private set; }
    public string ExternalDataSourceName { get; private set; }
    public string ExternalTableNamePrefix { get; private set; }
    public SqlConnectionFactory ConnectionFactory { get; private set; }
    public string WindowsAzureStorageLocation { get; private set; }
    public string AzureStorageUrl { get; private set; }
    public string AzureSharedAccessSignatureToken { get; private set; }
    public string AzureStorageKey { get; private set; }
    public string AzureStorageBlobEndpoint { get; private set; }
    public string AzureStorageContainer { get; private set; }
    public string RootPath { get; private set; }
    public DataOperationStateProvider DataOperationStateProvider { get; private set; }
    public BigDataOperationContext(SqlConnectionFactory connectionFactory, LoggingContext loggingContext, Progress operationProgress, string azureStorageBlobEndpoint, string azureStorageContainer, string rootPath, DataOperationStateProvider dataOperationStateProvider, string azureStorageKey, string azureSharedAccessSignatureToken);
    [CompilerGeneratedAttribute]
public LoggingContext get_LoggingContext();
    [CompilerGeneratedAttribute]
private void set_LoggingContext(LoggingContext value);
    [CompilerGeneratedAttribute]
public Progress get_OperationProgress();
    [CompilerGeneratedAttribute]
private void set_OperationProgress(Progress value);
    [CompilerGeneratedAttribute]
public string get_DbScopedCredentialName();
    [CompilerGeneratedAttribute]
private void set_DbScopedCredentialName(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalFileFormatName();
    [CompilerGeneratedAttribute]
private void set_ExternalFileFormatName(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalDataSourceName();
    [CompilerGeneratedAttribute]
private void set_ExternalDataSourceName(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalTableNamePrefix();
    [CompilerGeneratedAttribute]
private void set_ExternalTableNamePrefix(string value);
    [CompilerGeneratedAttribute]
public SqlConnectionFactory get_ConnectionFactory();
    [CompilerGeneratedAttribute]
private void set_ConnectionFactory(SqlConnectionFactory value);
    [CompilerGeneratedAttribute]
public string get_WindowsAzureStorageLocation();
    [CompilerGeneratedAttribute]
private void set_WindowsAzureStorageLocation(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageUrl();
    [CompilerGeneratedAttribute]
private void set_AzureStorageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AzureSharedAccessSignatureToken();
    [CompilerGeneratedAttribute]
private void set_AzureSharedAccessSignatureToken(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageKey();
    [CompilerGeneratedAttribute]
private void set_AzureStorageKey(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageBlobEndpoint();
    [CompilerGeneratedAttribute]
private void set_AzureStorageBlobEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageContainer();
    [CompilerGeneratedAttribute]
private void set_AzureStorageContainer(string value);
    [CompilerGeneratedAttribute]
public string get_RootPath();
    [CompilerGeneratedAttribute]
private void set_RootPath(string value);
    [CompilerGeneratedAttribute]
public DataOperationStateProvider get_DataOperationStateProvider();
    [CompilerGeneratedAttribute]
private void set_DataOperationStateProvider(DataOperationStateProvider value);
    public void LogStart(Progress tableProgress, ProgressLogger tableProgressLogger, IOperationStep step);
    public void LogComplete(Progress tableProgress, ProgressLogger tableProgressLogger, IOperationStep step);
    private void ValidateInput(string inputName, string inputValue, string exceptionMessage);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(SqlConnectionStringBuilder builder);
}
internal class Microsoft.SqlServer.Dac.BigData.DatabaseExtractCleanupStep : object {
    private BigDataOperationContext _context;
    public DatabaseExtractCleanupStep(BigDataOperationContext context);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractCleanupStep/<Execute>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task Execute(CancellationToken token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractCleanupStep/<DropDatabaseScopedCredentials>d__4")]
private Task DropDatabaseScopedCredentials(BigDataConnectionContext connectionContext, CancellationToken token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractCleanupStep/<DropFileFormat>d__9")]
private Task DropFileFormat(BigDataConnectionContext connectionContext, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractCleanupStep/<DropExternalDataSource>d__e")]
[DebuggerStepThroughAttribute]
private Task DropExternalDataSource(BigDataConnectionContext connectionContext, CancellationToken token);
}
internal class Microsoft.SqlServer.Dac.BigData.DatabaseExtractSetupStep : object {
    private string _storageAccountKeyIdentity;
    private string _sharedAccessSignatureIdentity;
    private string _compressionType;
    private BigDataOperationContext _context;
    public DatabaseExtractSetupStep(BigDataOperationContext context);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractSetupStep/<Execute>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task Execute(CancellationToken token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractSetupStep/<CreateMasterKey>d__4")]
private Task CreateMasterKey(BigDataConnectionContext connectionContext, CancellationToken token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractSetupStep/<CreateDatabaseScopedCredentials>d__9")]
private Task CreateDatabaseScopedCredentials(BigDataConnectionContext connectionContext, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractSetupStep/<CreateFileFormat>d__e")]
[DebuggerStepThroughAttribute]
private Task CreateFileFormat(BigDataConnectionContext connectionContext, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.DatabaseExtractSetupStep/<CreateExternalDataSource>d__13")]
[DebuggerStepThroughAttribute]
private Task CreateExternalDataSource(BigDataConnectionContext connectionContext, CancellationToken token);
}
internal class Microsoft.SqlServer.Dac.BigData.ExternalTableExtractCleanupStep : object {
    private BigDataOperationContext _context;
    private string _dropExternalTableCommandText;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSchemaModel <SchemaModel>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    internal DataSchemaModel SchemaModel { get; internal set; }
    public ExternalTableExtractCleanupStep(BigDataOperationContext context, string schema, string name);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
internal DataSchemaModel get_SchemaModel();
    [CompilerGeneratedAttribute]
internal void set_SchemaModel(DataSchemaModel value);
    private string GetDropExternalTableCommandText();
    private string GetBracketizedTableName();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.ExternalTableExtractCleanupStep/<Execute>d__0")]
public sealed virtual Task Execute(CancellationToken token);
}
internal interface Microsoft.SqlServer.Dac.BigData.IOperationStep {
    public abstract virtual Task Execute(CancellationToken token);
}
internal interface Microsoft.SqlServer.Dac.BigData.IStepExecutor {
    public abstract virtual void Produce(IEnumerable`1<IOperationStep> tableSteps, CancellationToken token);
    public abstract virtual void StartConsumers(IEnumerable`1<IOperationStep> tableSteps, CancellationToken token);
    public abstract virtual Task WaitToFinish(CancellationToken token);
}
internal class Microsoft.SqlServer.Dac.BigData.TableExtractStep : object {
    private BigDataOperationContext _context;
    private string _extractCommandText;
    private string _deleteExternalTableCommandText;
    private Progress _tableProgress;
    private ProgressLogger _tableProgressLogger;
    private string _externalTableName;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public TableExtractStep(BigDataOperationContext context, string schema, string name);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    private string GenerateExtractCommandText();
    private string GenerateDeleteExternalTableCommandText();
    private string GetBracketizedTableName(bool isExternal);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.TableExtractStep/<Execute>d__0")]
public sealed virtual Task Execute(CancellationToken token);
}
internal class Microsoft.SqlServer.Dac.BigData.TablePublishStep : object {
    private string _storageAccountKeyIdentity;
    private string _sharedAccessSignatureIdentity;
    private BigDataOperationContext _context;
    private string _publishCommandText;
    private Progress _tableProgress;
    private ProgressLogger _tableProgressLogger;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public TablePublishStep(BigDataOperationContext context, string schema, string name);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    private string GenerateCopyIntoCommand();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.TablePublishStep/<Execute>d__0")]
public sealed virtual Task Execute(CancellationToken token);
    private string GenerateCleanupCommand();
    private string GetTableName();
}
internal class Microsoft.SqlServer.Dac.BigData.TableStepExecutor : object {
    private int _concurrentQueriesMaxCount;
    private BufferBlock`1<IOperationStep> _buffer;
    private List`1<Task> _consumerTasks;
    public int ConsumerTaskCount { get; }
    public TableStepExecutor(CancellationToken token);
    public int get_ConsumerTaskCount();
    public sealed virtual void Produce(IEnumerable`1<IOperationStep> tableSteps, CancellationToken token);
    public sealed virtual void StartConsumers(IEnumerable`1<IOperationStep> tableSteps, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.TableStepExecutor/<WaitToFinish>d__9")]
[DebuggerStepThroughAttribute]
public sealed virtual Task WaitToFinish(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.SqlServer.Dac.BigData.TableStepExecutor/<StartConsumerAsync>d__c")]
[DebuggerStepThroughAttribute]
private Task StartConsumerAsync(CancellationToken token);
    private int GetConsumerCount(int tableNumbers);
}
public class Microsoft.SqlServer.Dac.DacAzureDatabaseSpecification : object {
    [CompilerGeneratedAttribute]
private DacAzureEdition <Edition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceObjective>k__BackingField;
    [DeploymentPropertyAliasAttribute("DatabaseEdition")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseEdition")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseEdition_FriendlyName")]
public DacAzureEdition Edition { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseMaximumSize_FriendlyName")]
[DeploymentPropertyAliasAttribute("DatabaseMaximumSize")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseMaximumSize")]
public int MaximumSize { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseServiceObjective")]
[DeploymentPropertyAliasAttribute("DatabaseServiceObjective")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseServiceObjective_FriendlyName")]
public string ServiceObjective { get; public set; }
    [CompilerGeneratedAttribute]
public DacAzureEdition get_Edition();
    [CompilerGeneratedAttribute]
public void set_Edition(DacAzureEdition value);
    [CompilerGeneratedAttribute]
public int get_MaximumSize();
    [CompilerGeneratedAttribute]
public void set_MaximumSize(int value);
    [CompilerGeneratedAttribute]
public string get_ServiceObjective();
    [CompilerGeneratedAttribute]
public void set_ServiceObjective(string value);
}
public enum Microsoft.SqlServer.Dac.DacAzureEdition : Enum {
    public int value__;
    public static DacAzureEdition Web;
    public static DacAzureEdition Business;
    public static DacAzureEdition Basic;
    public static DacAzureEdition Standard;
    public static DacAzureEdition Premium;
    public static DacAzureEdition PremiumRS;
    public static DacAzureEdition DataWarehouse;
    public static DacAzureEdition GeneralPurpose;
    public static DacAzureEdition BusinessCritical;
    public static DacAzureEdition Hyperscale;
    public static DacAzureEdition Default;
}
public class Microsoft.SqlServer.Dac.DacDataProgressMessage : DacMessage {
    private double _progress;
    private string _schemaName;
    private string _tableName;
    public double Progress { get; }
    public string SchemaName { get; }
    public string TableName { get; }
    internal DacDataProgressMessage(DacMessageType type, int number, string message, double progress, string schemaName, string tableName);
    public double get_Progress();
    public string get_SchemaName();
    public string get_TableName();
}
public class Microsoft.SqlServer.Dac.DacDeployOptions : object {
    private static Dictionary`2<Type, ObjectType> objectTypeReverseMap;
    private static Dictionary`2<ObjectType, List`1<Type>> objectTypeMap;
    private SqlDeploymentOptions _options;
    [CompilerGeneratedAttribute]
private string <AdditionalDeploymentContributorPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LongRunningCommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatabaseLockTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageBlobEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureSharedAccessSignatureToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOperationStateProvider <DataOperationStateProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private DacAzureDatabaseSpecification <DatabaseSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RebuildIndexesOfflineForDataPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableIndexesForDataPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelismForEnablingIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImportingBacpac>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectType, IEnumerable`1<ObjectType>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectType, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<List`1<Type>, IEnumerable`1<Type>> CS$<>9__CachedAnonymousMethodDelegate7;
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AdditionalDeploymentContributorPaths_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AdditionalDeploymentContributorPaths")]
public string AdditionalDeploymentContributorPaths { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AdditionalDeploymentContributors")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AdditionalDeploymentContributors_FriendlyName")]
public string AdditionalDeploymentContributors { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AdditionalDeploymentContributorArguments")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AdditionalDeploymentContributorArguments_FriendlyName")]
public string AdditionalDeploymentContributorArguments { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowDropBlockingAssemblies_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowDropBlockingAssemblies")]
public bool AllowDropBlockingAssemblies { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowExternalLanguagePaths")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowExternalLanguagePaths_FriendlyName")]
public bool AllowExternalLanguagePaths { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowExternalLibraryPaths_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowExternalLibraryPaths")]
public bool AllowExternalLibraryPaths { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowIncompatiblePlatform_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowIncompatiblePlatform")]
public bool AllowIncompatiblePlatform { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "BackupDatabaseBeforeChanges")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "BackupDatabaseBeforeChanges_FriendlyName")]
public bool BackupDatabaseBeforeChanges { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "BlockOnPossibleDataLoss_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "BlockOnPossibleDataLoss")]
public bool BlockOnPossibleDataLoss { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "BlockWhenDriftDetected_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "BlockWhenDriftDetected")]
public bool BlockWhenDriftDetected { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout")]
public int CommandTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout")]
public int LongRunningCommandTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout")]
public int DatabaseLockTimeout { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageBlobEndpoint")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageBlobEndpoint_FriendlyName")]
public string AzureStorageBlobEndpoint { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageContainer")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageContainer_FriendlyName")]
public string AzureStorageContainer { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageKey")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageKey_FriendlyName")]
public string AzureStorageKey { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageRootPath")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageRootPath_FriendlyName")]
public string AzureStorageRootPath { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureSharedAccessSignatureToken")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureSharedAccessSignatureToken_FriendlyName")]
public string AzureSharedAccessSignatureToken { get; public set; }
    public DataOperationStateProvider DataOperationStateProvider { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommentOutSetVarDeclarations_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommentOutSetVarDeclarations")]
public bool CommentOutSetVarDeclarations { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CompareUsingTargetCollation_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CompareUsingTargetCollation")]
public bool CompareUsingTargetCollation { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CreateNewDatabase_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CreateNewDatabase")]
public bool CreateNewDatabase { get; public set; }
    [NestedDeploymentPropertyAttribute]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseSpecification")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseSpecification_FriendlyName")]
public DacAzureDatabaseSpecification DatabaseSpecification { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DeployDatabaseInSingleUserMode")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DeployDatabaseInSingleUserMode_FriendlyName")]
public bool DeployDatabaseInSingleUserMode { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IsAlwaysEncryptedParameterizationEnabled")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IsAlwaysEncryptedParameterizationEnabled_FriendlyName")]
public bool IsAlwaysEncryptedParameterizationEnabled { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableAndReenableDdlTriggers_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableAndReenableDdlTriggers")]
public bool DisableAndReenableDdlTriggers { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotAlterChangeDataCaptureObjects_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotAlterChangeDataCaptureObjects")]
public bool DoNotAlterChangeDataCaptureObjects { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotAlterReplicatedObjects")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotAlterReplicatedObjects_FriendlyName")]
public bool DoNotAlterReplicatedObjects { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotDropObjectTypes")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotDropObjectTypes_FriendlyName")]
public ObjectType[] DoNotDropObjectTypes { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropConstraintsNotInSource_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropConstraintsNotInSource")]
public bool DropConstraintsNotInSource { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropDmlTriggersNotInSource")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropDmlTriggersNotInSource_FriendlyName")]
public bool DropDmlTriggersNotInSource { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDatabaseWorkloadGroups_FriendlyName")]
[SqlDeploymentOptionAttribute]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDatabaseWorkloadGroups")]
public bool IgnoreDatabaseWorkloadGroups { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWorkloadClassifiers_FriendlyName")]
[SqlDeploymentOptionAttribute]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWorkloadClassifiers")]
public bool IgnoreWorkloadClassifiers { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropExtendedPropertiesNotInSource")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropExtendedPropertiesNotInSource_FriendlyName")]
public bool DropExtendedPropertiesNotInSource { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropIndexesNotInSource")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropIndexesNotInSource_FriendlyName")]
public bool DropIndexesNotInSource { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropObjectsNotInSource_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropObjectsNotInSource")]
public bool DropObjectsNotInSource { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropPermissionsNotInSource")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropPermissionsNotInSource_FriendlyName")]
public bool DropPermissionsNotInSource { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropRoleMembersNotInSource_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropRoleMembersNotInSource")]
public bool DropRoleMembersNotInSource { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropStatisticsNotInSource_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DropStatisticsNotInSource")]
public bool DropStatisticsNotInSource { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotDropDatabaseWorkloadGroups_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotDropDatabaseWorkloadGroups")]
public bool DoNotDropDatabaseWorkloadGroups { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotDropWorkloadClassifiers")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotDropWorkloadClassifiers_FriendlyName")]
public bool DoNotDropWorkloadClassifiers { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "GenerateSmartDefaults_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "GenerateSmartDefaults")]
public bool GenerateSmartDefaults { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs")]
public bool HashObjectNamesInLogs { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreAnsiNulls_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreAnsiNulls")]
public bool IgnoreAnsiNulls { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreAuthorizer")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreAuthorizer_FriendlyName")]
public bool IgnoreAuthorizer { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreColumnCollation")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreColumnCollation_FriendlyName")]
public bool IgnoreColumnCollation { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreColumnOrder_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreColumnOrder")]
public bool IgnoreColumnOrder { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreComments_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreComments")]
public bool IgnoreComments { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreCryptographicProviderFilePath_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreCryptographicProviderFilePath")]
public bool IgnoreCryptographicProviderFilePath { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDdlTriggerOrder_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDdlTriggerOrder")]
public bool IgnoreDdlTriggerOrder { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDdlTriggerState")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDdlTriggerState_FriendlyName")]
public bool IgnoreDdlTriggerState { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDefaultSchema_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDefaultSchema")]
public bool IgnoreDefaultSchema { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDmlTriggerOrder")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDmlTriggerOrder_FriendlyName")]
public bool IgnoreDmlTriggerOrder { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDmlTriggerState_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreDmlTriggerState")]
public bool IgnoreDmlTriggerState { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreExtendedProperties_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreExtendedProperties")]
public bool IgnoreExtendedProperties { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFileAndLogFilePath")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFileAndLogFilePath_FriendlyName")]
public bool IgnoreFileAndLogFilePath { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFilegroupPlacement")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFilegroupPlacement_FriendlyName")]
public bool IgnoreFilegroupPlacement { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFileSize_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFileSize")]
public bool IgnoreFileSize { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFillFactor_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFillFactor")]
public bool IgnoreFillFactor { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFullTextCatalogFilePath_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreFullTextCatalogFilePath")]
public bool IgnoreFullTextCatalogFilePath { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIdentitySeed_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIdentitySeed")]
public bool IgnoreIdentitySeed { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIncrement_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIncrement")]
public bool IgnoreIncrement { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIndexOptions")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIndexOptions_FriendlyName")]
public bool IgnoreIndexOptions { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIndexPadding_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIndexPadding")]
public bool IgnoreIndexPadding { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreKeywordCasing_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreKeywordCasing")]
public bool IgnoreKeywordCasing { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreLockHintsOnIndexes_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreLockHintsOnIndexes")]
public bool IgnoreLockHintsOnIndexes { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreLoginSids")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreLoginSids_FriendlyName")]
public bool IgnoreLoginSids { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExcludeObjectTypes")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExcludeObjectTypes_FriendlyName")]
public ObjectType[] ExcludeObjectTypes { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreNotForReplication")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreNotForReplication_FriendlyName")]
public bool IgnoreNotForReplication { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreObjectPlacementOnPartitionScheme_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreObjectPlacementOnPartitionScheme")]
public bool IgnoreObjectPlacementOnPartitionScheme { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotEvaluateSqlCmdVariables_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DoNotEvaluateSqlCmdVariables")]
public bool DoNotEvaluateSqlCmdVariables { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnorePartitionSchemes")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnorePartitionSchemes_FriendlyName")]
public bool IgnorePartitionSchemes { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreTablePartitionOptions_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreTablePartitionOptions")]
public bool IgnoreTablePartitionOptions { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnorePermissions_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnorePermissions")]
public bool IgnorePermissions { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreQuotedIdentifiers")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreQuotedIdentifiers_FriendlyName")]
public bool IgnoreQuotedIdentifiers { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreRoleMembership_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreRoleMembership")]
public bool IgnoreRoleMembership { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreRouteLifetime_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreRouteLifetime")]
public bool IgnoreRouteLifetime { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreSemicolonBetweenStatements")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreSemicolonBetweenStatements_FriendlyName")]
public bool IgnoreSemicolonBetweenStatements { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreTableOptions")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreTableOptions_FriendlyName")]
public bool IgnoreTableOptions { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreUserSettingsObjects_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreUserSettingsObjects")]
public bool IgnoreUserSettingsObjects { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWhitespace")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWhitespace_FriendlyName")]
public bool IgnoreWhitespace { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWithNocheckOnCheckConstraints")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWithNocheckOnCheckConstraints_FriendlyName")]
public bool IgnoreWithNocheckOnCheckConstraints { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWithNocheckOnForeignKeys_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreWithNocheckOnForeignKeys")]
public bool IgnoreWithNocheckOnForeignKeys { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowUnsafeRowLevelSecurityDataMovement_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AllowUnsafeRowLevelSecurityDataMovement")]
public bool AllowUnsafeRowLevelSecurityDataMovement { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IncludeCompositeObjects_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IncludeCompositeObjects")]
public bool IncludeCompositeObjects { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IncludeTransactionalScripts_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IncludeTransactionalScripts")]
public bool IncludeTransactionalScripts { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "NoAlterStatementsToChangeClrTypes_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "NoAlterStatementsToChangeClrTypes")]
public bool NoAlterStatementsToChangeClrTypes { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "PopulateFilesOnFileGroups")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "PopulateFilesOnFileGroups_FriendlyName")]
public bool PopulateFilesOnFileGroups { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "PreserveIdentityLastValues_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "PreserveIdentityLastValues")]
public bool PreserveIdentityLastValues { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RegisterDataTierApplication")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RegisterDataTierApplication_FriendlyName")]
public bool RegisterDataTierApplication { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RunDeploymentPlanExecutors")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RunDeploymentPlanExecutors_FriendlyName")]
public bool RunDeploymentPlanExecutors { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDatabaseCollation")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDatabaseCollation_FriendlyName")]
public bool ScriptDatabaseCollation { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDatabaseCompatibility")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDatabaseCompatibility_FriendlyName")]
public bool ScriptDatabaseCompatibility { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDatabaseOptions_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDatabaseOptions")]
public bool ScriptDatabaseOptions { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDeployStateChecks_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptDeployStateChecks")]
public bool ScriptDeployStateChecks { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptFileSize_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptFileSize")]
public bool ScriptFileSize { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptNewConstraintValidation")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptNewConstraintValidation_FriendlyName")]
public bool ScriptNewConstraintValidation { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptRefreshModule_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ScriptRefreshModule")]
public bool ScriptRefreshModule { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TreatVerificationErrorsAsWarnings_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TreatVerificationErrorsAsWarnings")]
public bool TreatVerificationErrorsAsWarnings { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RebuildIndexesOfflineForDataPhase_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RebuildIndexesOfflineForDataPhase")]
public bool RebuildIndexesOfflineForDataPhase { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RestoreSequenceCurrentValue_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RestoreSequenceCurrentValue")]
public bool RestoreSequenceCurrentValue { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableIndexesForDataPhase")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableIndexesForDataPhase_FriendlyName")]
public bool DisableIndexesForDataPhase { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableParallelismForEnablingIndexes")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableParallelismForEnablingIndexes_FriendlyName")]
public bool DisableParallelismForEnablingIndexes { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "UnmodifiableObjectWarnings")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "UnmodifiableObjectWarnings_FriendlyName")]
public bool UnmodifiableObjectWarnings { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyCollationCompatibility")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyCollationCompatibility_FriendlyName")]
public bool VerifyCollationCompatibility { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyDeployment_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyDeployment")]
public bool VerifyDeployment { get; public set; }
    public IDictionary`2<string, string> SqlCommandVariableValues { get; }
    internal int DatabaseLockTimeoutMS { get; }
    internal bool ImportingBacpac { get; internal set; }
    private static DacDeployOptions();
    internal DacDeployOptions(bool useRegistryOverrideForCommandTimeout);
    internal DacDeployOptions(SqlDeploymentOptions options);
    internal DacDeployOptions(SqlDeploymentOptions options, bool useRegistryOverrideForCommandTimeout);
    private static void AddObjectTypeMapEntry(ObjectType objectType, Type[] types);
    [CompilerGeneratedAttribute]
public string get_AdditionalDeploymentContributorPaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalDeploymentContributorPaths(string value);
    public string get_AdditionalDeploymentContributors();
    public void set_AdditionalDeploymentContributors(string value);
    public string get_AdditionalDeploymentContributorArguments();
    public void set_AdditionalDeploymentContributorArguments(string value);
    public bool get_AllowDropBlockingAssemblies();
    public void set_AllowDropBlockingAssemblies(bool value);
    public bool get_AllowExternalLanguagePaths();
    public void set_AllowExternalLanguagePaths(bool value);
    public bool get_AllowExternalLibraryPaths();
    public void set_AllowExternalLibraryPaths(bool value);
    public bool get_AllowIncompatiblePlatform();
    public void set_AllowIncompatiblePlatform(bool value);
    public bool get_BackupDatabaseBeforeChanges();
    public void set_BackupDatabaseBeforeChanges(bool value);
    public bool get_BlockOnPossibleDataLoss();
    public void set_BlockOnPossibleDataLoss(bool value);
    public bool get_BlockWhenDriftDetected();
    public void set_BlockWhenDriftDetected(bool value);
    [CompilerGeneratedAttribute]
public int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_LongRunningCommandTimeout();
    [CompilerGeneratedAttribute]
public void set_LongRunningCommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_DatabaseLockTimeout();
    [CompilerGeneratedAttribute]
public void set_DatabaseLockTimeout(int value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageBlobEndpoint();
    [CompilerGeneratedAttribute]
public void set_AzureStorageBlobEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageContainer();
    [CompilerGeneratedAttribute]
public void set_AzureStorageContainer(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageKey();
    [CompilerGeneratedAttribute]
public void set_AzureStorageKey(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageRootPath();
    [CompilerGeneratedAttribute]
public void set_AzureStorageRootPath(string value);
    [CompilerGeneratedAttribute]
public string get_AzureSharedAccessSignatureToken();
    [CompilerGeneratedAttribute]
public void set_AzureSharedAccessSignatureToken(string value);
    [CompilerGeneratedAttribute]
public DataOperationStateProvider get_DataOperationStateProvider();
    [CompilerGeneratedAttribute]
public void set_DataOperationStateProvider(DataOperationStateProvider value);
    public bool get_CommentOutSetVarDeclarations();
    public void set_CommentOutSetVarDeclarations(bool value);
    public bool get_CompareUsingTargetCollation();
    public void set_CompareUsingTargetCollation(bool value);
    public bool get_CreateNewDatabase();
    public void set_CreateNewDatabase(bool value);
    [CompilerGeneratedAttribute]
public DacAzureDatabaseSpecification get_DatabaseSpecification();
    [CompilerGeneratedAttribute]
public void set_DatabaseSpecification(DacAzureDatabaseSpecification value);
    public bool get_DeployDatabaseInSingleUserMode();
    public void set_DeployDatabaseInSingleUserMode(bool value);
    public bool get_IsAlwaysEncryptedParameterizationEnabled();
    public void set_IsAlwaysEncryptedParameterizationEnabled(bool value);
    public bool get_DisableAndReenableDdlTriggers();
    public void set_DisableAndReenableDdlTriggers(bool value);
    public bool get_DoNotAlterChangeDataCaptureObjects();
    public void set_DoNotAlterChangeDataCaptureObjects(bool value);
    public bool get_DoNotAlterReplicatedObjects();
    public void set_DoNotAlterReplicatedObjects(bool value);
    public ObjectType[] get_DoNotDropObjectTypes();
    public void set_DoNotDropObjectTypes(ObjectType[] value);
    public bool get_DropConstraintsNotInSource();
    public void set_DropConstraintsNotInSource(bool value);
    public bool get_DropDmlTriggersNotInSource();
    public void set_DropDmlTriggersNotInSource(bool value);
    public bool get_IgnoreDatabaseWorkloadGroups();
    public void set_IgnoreDatabaseWorkloadGroups(bool value);
    public bool get_IgnoreWorkloadClassifiers();
    public void set_IgnoreWorkloadClassifiers(bool value);
    public bool get_DropExtendedPropertiesNotInSource();
    public void set_DropExtendedPropertiesNotInSource(bool value);
    public bool get_DropIndexesNotInSource();
    public void set_DropIndexesNotInSource(bool value);
    public bool get_DropObjectsNotInSource();
    public void set_DropObjectsNotInSource(bool value);
    public bool get_DropPermissionsNotInSource();
    public void set_DropPermissionsNotInSource(bool value);
    public bool get_DropRoleMembersNotInSource();
    public void set_DropRoleMembersNotInSource(bool value);
    public bool get_DropStatisticsNotInSource();
    public void set_DropStatisticsNotInSource(bool value);
    public bool get_DoNotDropDatabaseWorkloadGroups();
    public void set_DoNotDropDatabaseWorkloadGroups(bool value);
    public bool get_DoNotDropWorkloadClassifiers();
    public void set_DoNotDropWorkloadClassifiers(bool value);
    public bool get_GenerateSmartDefaults();
    public void set_GenerateSmartDefaults(bool value);
    public bool get_HashObjectNamesInLogs();
    public void set_HashObjectNamesInLogs(bool value);
    public bool get_IgnoreAnsiNulls();
    public void set_IgnoreAnsiNulls(bool value);
    public bool get_IgnoreAuthorizer();
    public void set_IgnoreAuthorizer(bool value);
    public bool get_IgnoreColumnCollation();
    public void set_IgnoreColumnCollation(bool value);
    public bool get_IgnoreColumnOrder();
    public void set_IgnoreColumnOrder(bool value);
    public bool get_IgnoreComments();
    public void set_IgnoreComments(bool value);
    public bool get_IgnoreCryptographicProviderFilePath();
    public void set_IgnoreCryptographicProviderFilePath(bool value);
    public bool get_IgnoreDdlTriggerOrder();
    public void set_IgnoreDdlTriggerOrder(bool value);
    public bool get_IgnoreDdlTriggerState();
    public void set_IgnoreDdlTriggerState(bool value);
    public bool get_IgnoreDefaultSchema();
    public void set_IgnoreDefaultSchema(bool value);
    public bool get_IgnoreDmlTriggerOrder();
    public void set_IgnoreDmlTriggerOrder(bool value);
    public bool get_IgnoreDmlTriggerState();
    public void set_IgnoreDmlTriggerState(bool value);
    public bool get_IgnoreExtendedProperties();
    public void set_IgnoreExtendedProperties(bool value);
    public bool get_IgnoreFileAndLogFilePath();
    public void set_IgnoreFileAndLogFilePath(bool value);
    public bool get_IgnoreFilegroupPlacement();
    public void set_IgnoreFilegroupPlacement(bool value);
    public bool get_IgnoreFileSize();
    public void set_IgnoreFileSize(bool value);
    public bool get_IgnoreFillFactor();
    public void set_IgnoreFillFactor(bool value);
    public bool get_IgnoreFullTextCatalogFilePath();
    public void set_IgnoreFullTextCatalogFilePath(bool value);
    public bool get_IgnoreIdentitySeed();
    public void set_IgnoreIdentitySeed(bool value);
    public bool get_IgnoreIncrement();
    public void set_IgnoreIncrement(bool value);
    public bool get_IgnoreIndexOptions();
    public void set_IgnoreIndexOptions(bool value);
    public bool get_IgnoreIndexPadding();
    public void set_IgnoreIndexPadding(bool value);
    public bool get_IgnoreKeywordCasing();
    public void set_IgnoreKeywordCasing(bool value);
    public bool get_IgnoreLockHintsOnIndexes();
    public void set_IgnoreLockHintsOnIndexes(bool value);
    public bool get_IgnoreLoginSids();
    public void set_IgnoreLoginSids(bool value);
    public ObjectType[] get_ExcludeObjectTypes();
    public void set_ExcludeObjectTypes(ObjectType[] value);
    public bool get_IgnoreNotForReplication();
    public void set_IgnoreNotForReplication(bool value);
    public bool get_IgnoreObjectPlacementOnPartitionScheme();
    public void set_IgnoreObjectPlacementOnPartitionScheme(bool value);
    public bool get_DoNotEvaluateSqlCmdVariables();
    public void set_DoNotEvaluateSqlCmdVariables(bool value);
    public bool get_IgnorePartitionSchemes();
    public void set_IgnorePartitionSchemes(bool value);
    public bool get_IgnoreTablePartitionOptions();
    public void set_IgnoreTablePartitionOptions(bool value);
    public bool get_IgnorePermissions();
    public void set_IgnorePermissions(bool value);
    public bool get_IgnoreQuotedIdentifiers();
    public void set_IgnoreQuotedIdentifiers(bool value);
    public bool get_IgnoreRoleMembership();
    public void set_IgnoreRoleMembership(bool value);
    public bool get_IgnoreRouteLifetime();
    public void set_IgnoreRouteLifetime(bool value);
    public bool get_IgnoreSemicolonBetweenStatements();
    public void set_IgnoreSemicolonBetweenStatements(bool value);
    public bool get_IgnoreTableOptions();
    public void set_IgnoreTableOptions(bool value);
    public bool get_IgnoreUserSettingsObjects();
    public void set_IgnoreUserSettingsObjects(bool value);
    public bool get_IgnoreWhitespace();
    public void set_IgnoreWhitespace(bool value);
    public bool get_IgnoreWithNocheckOnCheckConstraints();
    public void set_IgnoreWithNocheckOnCheckConstraints(bool value);
    public bool get_IgnoreWithNocheckOnForeignKeys();
    public void set_IgnoreWithNocheckOnForeignKeys(bool value);
    public bool get_AllowUnsafeRowLevelSecurityDataMovement();
    public void set_AllowUnsafeRowLevelSecurityDataMovement(bool value);
    public bool get_IncludeCompositeObjects();
    public void set_IncludeCompositeObjects(bool value);
    public bool get_IncludeTransactionalScripts();
    public void set_IncludeTransactionalScripts(bool value);
    public bool get_NoAlterStatementsToChangeClrTypes();
    public void set_NoAlterStatementsToChangeClrTypes(bool value);
    public bool get_PopulateFilesOnFileGroups();
    public void set_PopulateFilesOnFileGroups(bool value);
    public bool get_PreserveIdentityLastValues();
    public void set_PreserveIdentityLastValues(bool value);
    public bool get_RegisterDataTierApplication();
    public void set_RegisterDataTierApplication(bool value);
    public bool get_RunDeploymentPlanExecutors();
    public void set_RunDeploymentPlanExecutors(bool value);
    public bool get_ScriptDatabaseCollation();
    public void set_ScriptDatabaseCollation(bool value);
    public bool get_ScriptDatabaseCompatibility();
    public void set_ScriptDatabaseCompatibility(bool value);
    public bool get_ScriptDatabaseOptions();
    public void set_ScriptDatabaseOptions(bool value);
    public bool get_ScriptDeployStateChecks();
    public void set_ScriptDeployStateChecks(bool value);
    public bool get_ScriptFileSize();
    public void set_ScriptFileSize(bool value);
    public bool get_ScriptNewConstraintValidation();
    public void set_ScriptNewConstraintValidation(bool value);
    public bool get_ScriptRefreshModule();
    public void set_ScriptRefreshModule(bool value);
    public bool get_TreatVerificationErrorsAsWarnings();
    public void set_TreatVerificationErrorsAsWarnings(bool value);
    [CompilerGeneratedAttribute]
public bool get_RebuildIndexesOfflineForDataPhase();
    [CompilerGeneratedAttribute]
public void set_RebuildIndexesOfflineForDataPhase(bool value);
    public bool get_RestoreSequenceCurrentValue();
    public void set_RestoreSequenceCurrentValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableIndexesForDataPhase();
    [CompilerGeneratedAttribute]
public void set_DisableIndexesForDataPhase(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelismForEnablingIndexes();
    [CompilerGeneratedAttribute]
public void set_DisableParallelismForEnablingIndexes(bool value);
    public bool get_UnmodifiableObjectWarnings();
    public void set_UnmodifiableObjectWarnings(bool value);
    public bool get_VerifyCollationCompatibility();
    public void set_VerifyCollationCompatibility(bool value);
    public bool get_VerifyDeployment();
    public void set_VerifyDeployment(bool value);
    public IDictionary`2<string, string> get_SqlCommandVariableValues();
    public void SetVariable(string name, string value);
    internal void EnableDnrOrdering(bool enabled);
    internal int get_DatabaseLockTimeoutMS();
    [CompilerGeneratedAttribute]
internal bool get_ImportingBacpac();
    [CompilerGeneratedAttribute]
internal void set_ImportingBacpac(bool value);
    private void SetCommandTimeout(bool useRegistryOverrideForCommandTimeout);
    private static ObjectType[] MapObjectTypes(IEnumerable`1<Type> types);
    private static Type[] MapObjectTypes(ObjectType[] types);
    private static TOut[] MapObjectTypes(IEnumerable`1<TKey> input, Dictionary`2<TKey, TValue> mapping, Func`2<TKey, string> getName, Func`2<TValue, IEnumerable`1<TOut>> getOutputValues);
    internal static void InitializeDefaults(SqlDeploymentOptions options);
    internal SqlDeploymentOptions ToSqlDeploymentOptions();
    private static SqlDeploymentOptions CreateSqlDeploymentOptions(SqlDeploymentOptions source);
    [CompilerGeneratedAttribute]
private static string <MapObjectTypes>b__0(Type x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ObjectType> <MapObjectTypes>b__1(ObjectType y);
    [CompilerGeneratedAttribute]
private static string <MapObjectTypes>b__4(ObjectType x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Type> <MapObjectTypes>b__5(List`1<Type> y);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.SqlServer.Dac.DacErrorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BacpacShouldNotContainDeploymentScripts { get; }
    internal static string CannotWriteToPackage { get; }
    internal static string ConflictingDatabaseWorkloadClassifierDropSetting { get; }
    internal static string ConflictingDatabaseWorkloadGroupDropSetting { get; }
    internal static string ConflictingExtendedPropertyDropSetting { get; }
    internal static string ConflictingPermissionsDropSetting { get; }
    internal static string ConflictingRoleMembershipDropSetting { get; }
    internal static string DacMessageFormat { get; }
    internal static string ElementValidationFailureMessage { get; }
    internal static string ErrorAttemptToUpgradeExistingDatabase { get; }
    internal static string ErrorBacpacValidationFailed { get; }
    internal static string ErrorCannotOpenBacPackageWithoutData { get; }
    internal static string ErrorCannotOpenDacPackageWithData { get; }
    internal static string ErrorConnectingToDatabase { get; }
    internal static string ErrorContainingUnsupportedFullTextDocumentTypesForAzureV12 { get; }
    internal static string ErrorCouldNotDetermineExistenceOfDatabase { get; }
    internal static string ErrorCouldNotDetermineProviderFromPackage { get; }
    internal static string ErrorCouldNotDetermineServerVersion { get; }
    internal static string ErrorDataTableNotFound { get; }
    internal static string ErrorDeletingFile { get; }
    internal static string ErrorDeployingPackage { get; }
    internal static string ErrorExportingPackage { get; }
    internal static string ErrorExtractAllTableDataTrueAndTablesNotNull { get; }
    internal static string ErrorExtractingFromFileTable { get; }
    internal static string ErrorExtractingPackageFromDatabase { get; }
    internal static string ErrorForeignKeyCannotReferenceTable { get; }
    internal static string ErrorFoundUnsupportedElementsForDataPackage { get; }
    internal static string ErrorGeneratingDeploymentReport { get; }
    internal static string ErrorGeneratingDeploymentResults { get; }
    internal static string ErrorGeneratingDeploymentScript { get; }
    internal static string ErrorGeneratingDriftReport { get; }
    internal static string ErrorImportingPackage { get; }
    internal static string ErrorInvalidPropertyName { get; }
    internal static string ErrorLoadingConstraints { get; }
    internal static string ErrorLoadingPackage { get; }
    internal static string ErrorLoadingPackageFrom { get; }
    internal static string ErrorReadingDacMetadataFromPackage { get; }
    internal static string ErrorReadingFromFile { get; }
    internal static string ErrorReadingModelFromPackage { get; }
    internal static string ErrorReadingModelHeader { get; }
    internal static string ErrorReadingProfile { get; }
    internal static string ErrorReadingProfileProperties { get; }
    internal static string ErrorReadingScriptFromPackage { get; }
    internal static string ErrorRegisteringApplication { get; }
    internal static string ErrorSavingPackage { get; }
    internal static string ErrorStreamDoesNotSupportReading { get; }
    internal static string ErrorStreamDoesNotSupportSeeking { get; }
    internal static string ErrorStreamDoesNotSupportWriting { get; }
    internal static string ErrorTranslatingPackage { get; }
    internal static string ErrorUnpacking_FileExists { get; }
    internal static string ErrorUnpackingPackage { get; }
    internal static string ErrorUnregisteringApplication { get; }
    internal static string ErrorUnsupportedClrElementForDataPackage { get; }
    internal static string ErrorUnsupportedContainedUserElementForDataPackage { get; }
    internal static string ErrorUnsupportedElementForDataPackage { get; }
    internal static string ErrorUnsupportedElementPropertyForDataPackage { get; }
    internal static string ErrorUnsupportedFileStreamColumnForDataPackage { get; }
    internal static string ErrorUnsupportedMultiPartNameForSynonym { get; }
    internal static string ErrorUnsupportedPlatformForDataPackage { get; }
    internal static string ErrorUnsupportUserDefinedTypeColumnForDataPackage { get; }
    internal static string ErrorUpdatingDacHistory { get; }
    internal static string ErrorValidationFailed { get; }
    internal static string ErrorVerifyingDeploymentPlan { get; }
    internal static string ExportedRowsMayBeIncomplete { get; }
    internal static string ExportedRowsMayContainSomeMaskedData { get; }
    internal static string InvalidArgumentValue { get; }
    internal static string InvalidModelHeaderData { get; }
    internal static string NoKeyVaultAuthenticatorFound { get; }
    internal static string PackagingModelFailed { get; }
    internal static string ReferencedPackageDoesnotExist { get; }
    internal static string ScriptRequiresOneOfTwoOptions { get; }
    internal static string TranslatingModelFailed { get; }
    internal static string UnknownPackageVersion { get; }
    internal static string ValidatingTheModelAgainstTargetPlatformFailed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BacpacShouldNotContainDeploymentScripts();
    internal static string get_CannotWriteToPackage();
    internal static string get_ConflictingDatabaseWorkloadClassifierDropSetting();
    internal static string get_ConflictingDatabaseWorkloadGroupDropSetting();
    internal static string get_ConflictingExtendedPropertyDropSetting();
    internal static string get_ConflictingPermissionsDropSetting();
    internal static string get_ConflictingRoleMembershipDropSetting();
    internal static string get_DacMessageFormat();
    internal static string get_ElementValidationFailureMessage();
    internal static string get_ErrorAttemptToUpgradeExistingDatabase();
    internal static string get_ErrorBacpacValidationFailed();
    internal static string get_ErrorCannotOpenBacPackageWithoutData();
    internal static string get_ErrorCannotOpenDacPackageWithData();
    internal static string get_ErrorConnectingToDatabase();
    internal static string get_ErrorContainingUnsupportedFullTextDocumentTypesForAzureV12();
    internal static string get_ErrorCouldNotDetermineExistenceOfDatabase();
    internal static string get_ErrorCouldNotDetermineProviderFromPackage();
    internal static string get_ErrorCouldNotDetermineServerVersion();
    internal static string get_ErrorDataTableNotFound();
    internal static string get_ErrorDeletingFile();
    internal static string get_ErrorDeployingPackage();
    internal static string get_ErrorExportingPackage();
    internal static string get_ErrorExtractAllTableDataTrueAndTablesNotNull();
    internal static string get_ErrorExtractingFromFileTable();
    internal static string get_ErrorExtractingPackageFromDatabase();
    internal static string get_ErrorForeignKeyCannotReferenceTable();
    internal static string get_ErrorFoundUnsupportedElementsForDataPackage();
    internal static string get_ErrorGeneratingDeploymentReport();
    internal static string get_ErrorGeneratingDeploymentResults();
    internal static string get_ErrorGeneratingDeploymentScript();
    internal static string get_ErrorGeneratingDriftReport();
    internal static string get_ErrorImportingPackage();
    internal static string get_ErrorInvalidPropertyName();
    internal static string get_ErrorLoadingConstraints();
    internal static string get_ErrorLoadingPackage();
    internal static string get_ErrorLoadingPackageFrom();
    internal static string get_ErrorReadingDacMetadataFromPackage();
    internal static string get_ErrorReadingFromFile();
    internal static string get_ErrorReadingModelFromPackage();
    internal static string get_ErrorReadingModelHeader();
    internal static string get_ErrorReadingProfile();
    internal static string get_ErrorReadingProfileProperties();
    internal static string get_ErrorReadingScriptFromPackage();
    internal static string get_ErrorRegisteringApplication();
    internal static string get_ErrorSavingPackage();
    internal static string get_ErrorStreamDoesNotSupportReading();
    internal static string get_ErrorStreamDoesNotSupportSeeking();
    internal static string get_ErrorStreamDoesNotSupportWriting();
    internal static string get_ErrorTranslatingPackage();
    internal static string get_ErrorUnpacking_FileExists();
    internal static string get_ErrorUnpackingPackage();
    internal static string get_ErrorUnregisteringApplication();
    internal static string get_ErrorUnsupportedClrElementForDataPackage();
    internal static string get_ErrorUnsupportedContainedUserElementForDataPackage();
    internal static string get_ErrorUnsupportedElementForDataPackage();
    internal static string get_ErrorUnsupportedElementPropertyForDataPackage();
    internal static string get_ErrorUnsupportedFileStreamColumnForDataPackage();
    internal static string get_ErrorUnsupportedMultiPartNameForSynonym();
    internal static string get_ErrorUnsupportedPlatformForDataPackage();
    internal static string get_ErrorUnsupportUserDefinedTypeColumnForDataPackage();
    internal static string get_ErrorUpdatingDacHistory();
    internal static string get_ErrorValidationFailed();
    internal static string get_ErrorVerifyingDeploymentPlan();
    internal static string get_ExportedRowsMayBeIncomplete();
    internal static string get_ExportedRowsMayContainSomeMaskedData();
    internal static string get_InvalidArgumentValue();
    internal static string get_InvalidModelHeaderData();
    internal static string get_NoKeyVaultAuthenticatorFound();
    internal static string get_PackagingModelFailed();
    internal static string get_ReferencedPackageDoesnotExist();
    internal static string get_ScriptRequiresOneOfTwoOptions();
    internal static string get_TranslatingModelFailed();
    internal static string get_UnknownPackageVersion();
    internal static string get_ValidatingTheModelAgainstTargetPlatformFailed();
}
public class Microsoft.SqlServer.Dac.DacExceptionMessage : DacMessage {
    private Exception _exception;
    public Exception Exception { get; }
    private DacExceptionMessage(DataSchemaError error);
    internal static DacMessage Convert(DataSchemaError error);
    public Exception get_Exception();
}
public class Microsoft.SqlServer.Dac.DacExportOptions : object {
    internal static EngineVersion DefaultTargetEngineVersion;
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LongRunningCommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatabaseLockTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectoryForTableData>k__BackingField;
    [CompilerGeneratedAttribute]
private DacSchemaModelStorageType <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private EngineVersion <TargetEngineVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyFullTextDocumentTypesSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionOption <CompressionOption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIndexesStatisticsOnEnclaveEnabledColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HashObjectNamesInLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyExtraction>k__BackingField;
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout")]
public int CommandTimeout { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout_FriendlyName")]
public int LongRunningCommandTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout")]
public int DatabaseLockTimeout { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TempDirectoryForTableData")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TempDirectoryForTableData_FriendlyName")]
public string TempDirectoryForTableData { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "Storage_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "Storage")]
public DacSchemaModelStorageType Storage { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TargetEngineVersion")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TargetEngineVersion_FriendlyName")]
public EngineVersion TargetEngineVersion { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyFullTextDocumentTypesSupported")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyFullTextDocumentTypesSupported_FriendlyName")]
public bool VerifyFullTextDocumentTypesSupported { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CompressionOption_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CompressionOption")]
public CompressionOption CompressionOption { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIndexesStatisticsOnEnclaveEnabledColumns")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreIndexesStatisticsOnEnclaveEnabledColumns_FriendlyName")]
public bool IgnoreIndexesStatisticsOnEnclaveEnabledColumns { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs_FriendlyName")]
public bool HashObjectNamesInLogs { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyExtraction_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyExtraction")]
public bool VerifyExtraction { get; public set; }
    internal DacExportOptions(bool useRegistryOverride);
    [CompilerGeneratedAttribute]
public int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_LongRunningCommandTimeout();
    [CompilerGeneratedAttribute]
public void set_LongRunningCommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_DatabaseLockTimeout();
    [CompilerGeneratedAttribute]
public void set_DatabaseLockTimeout(int value);
    [CompilerGeneratedAttribute]
public string get_TempDirectoryForTableData();
    [CompilerGeneratedAttribute]
public void set_TempDirectoryForTableData(string value);
    [CompilerGeneratedAttribute]
public DacSchemaModelStorageType get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(DacSchemaModelStorageType value);
    [CompilerGeneratedAttribute]
public EngineVersion get_TargetEngineVersion();
    [CompilerGeneratedAttribute]
public void set_TargetEngineVersion(EngineVersion value);
    [CompilerGeneratedAttribute]
public bool get_VerifyFullTextDocumentTypesSupported();
    [CompilerGeneratedAttribute]
public void set_VerifyFullTextDocumentTypesSupported(bool value);
    [CompilerGeneratedAttribute]
public CompressionOption get_CompressionOption();
    [CompilerGeneratedAttribute]
public void set_CompressionOption(CompressionOption value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIndexesStatisticsOnEnclaveEnabledColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreIndexesStatisticsOnEnclaveEnabledColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_HashObjectNamesInLogs();
    [CompilerGeneratedAttribute]
public void set_HashObjectNamesInLogs(bool value);
    [CompilerGeneratedAttribute]
public bool get_VerifyExtraction();
    [CompilerGeneratedAttribute]
public void set_VerifyExtraction(bool value);
}
public class Microsoft.SqlServer.Dac.DacExtractOptions : object {
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LongRunningCommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatabaseLockTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtractAllTableData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectoryForTableData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtractReferencedServerScopedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtractApplicationScopedObjectsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreExtendedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUserLoginMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private DacSchemaModelStorageType <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyExtraction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageBlobEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HashObjectNamesInLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOperationStateProvider <DataOperationStateProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionOption <CompressionOption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysPopulateColumnCollation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvertCrossDbRefToWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceSqlAzureRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreExtendedProcedures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImportSystemClrTypesAsExternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeOnlinePropertyAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyImportMsShippedObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateComposedChildrenOnUnencryptedSysCommentObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateComputedColumnTypeSpecifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateHierarchicalChildrenOfComposedChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateHierarchicalChildrenOfHierarchicalChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateQueueColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateSystemStatistics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveUnReferencedServerObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetPotentialRelationshipEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimDanglingReferencesOnServerScopedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimInvalidSqlAuthPropertiesForAzure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateCasingOnIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidationEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyPermissionToImport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtractNonApplicationDatabaseScopedElements>k__BackingField;
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout")]
public int CommandTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout")]
public int LongRunningCommandTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout")]
public int DatabaseLockTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractAllTableData_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractAllTableData")]
public bool ExtractAllTableData { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TempDirectoryForTableData_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "TempDirectoryForTableData")]
public string TempDirectoryForTableData { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractReferencedServerScopedElements")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractReferencedServerScopedElements_FriendlyName")]
public bool ExtractReferencedServerScopedElements { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractApplicationScopedObjectsOnly_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractApplicationScopedObjectsOnly")]
public bool ExtractApplicationScopedObjectsOnly { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractIgnoreExtendedProperties")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreExtendedProperties_FriendlyName")]
public bool IgnoreExtendedProperties { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractIgnorePermissions")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnorePermissions_FriendlyName")]
public bool IgnorePermissions { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreUserLoginMappings_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "IgnoreUserLoginMappings")]
public bool IgnoreUserLoginMappings { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "Storage_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "Storage")]
public DacSchemaModelStorageType Storage { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyExtraction")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "VerifyExtraction_FriendlyName")]
public bool VerifyExtraction { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractUsageProperties")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ExtractUsageProperties_FriendlyName")]
public bool ExtractUsageProperties { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageBlobEndpoint_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageBlobEndpoint")]
public string AzureStorageBlobEndpoint { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageContainer")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageContainer_FriendlyName")]
public string AzureStorageContainer { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageKey_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageKey")]
public string AzureStorageKey { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageRootPath_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "AzureStorageRootPath")]
public string AzureStorageRootPath { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs_FriendlyName")]
public bool HashObjectNamesInLogs { get; public set; }
    public DataOperationStateProvider DataOperationStateProvider { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CompressionOption_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CompressionOption")]
public CompressionOption CompressionOption { get; public set; }
    private bool AlwaysPopulateColumnCollation { get; private set; }
    private bool ConvertCrossDbRefToWarning { get; private set; }
    internal bool EnforceSqlAzureRestrictions { get; internal set; }
    private bool IgnoreExtendedProcedures { get; private set; }
    private bool ImportSystemClrTypesAsExternal { get; private set; }
    internal bool IncludeOnlinePropertyAnnotations { get; internal set; }
    private bool OnlyImportMsShippedObjects { get; private set; }
    private bool PopulateComposedChildrenOnUnencryptedSysCommentObjects { get; private set; }
    private bool PopulateComputedColumnTypeSpecifiers { get; private set; }
    private bool PopulateHierarchicalChildrenOfComposedChildren { get; private set; }
    private bool PopulateHierarchicalChildrenOfHierarchicalChildren { get; private set; }
    private bool PopulateQueueColumns { get; private set; }
    private bool PopulateSystemStatistics { get; private set; }
    internal bool RemoveUnReferencedServerObjects { get; private set; }
    private bool ResetPotentialRelationshipEntries { get; private set; }
    internal bool TrimDanglingReferencesOnServerScopedElements { get; private set; }
    internal bool TrimInvalidSqlAuthPropertiesForAzure { get; internal set; }
    private bool ValidateCasingOnIdentifiers { get; private set; }
    private bool ValidationEnabled { get; private set; }
    private bool VerifyPermissionToImport { get; private set; }
    internal bool ExtractNonApplicationDatabaseScopedElements { get; internal set; }
    internal DacExtractOptions(bool useRegistryOverrideForCommandTimeout);
    [CompilerGeneratedAttribute]
public int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_LongRunningCommandTimeout();
    [CompilerGeneratedAttribute]
public void set_LongRunningCommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_DatabaseLockTimeout();
    [CompilerGeneratedAttribute]
public void set_DatabaseLockTimeout(int value);
    [CompilerGeneratedAttribute]
public bool get_ExtractAllTableData();
    [CompilerGeneratedAttribute]
public void set_ExtractAllTableData(bool value);
    [CompilerGeneratedAttribute]
public string get_TempDirectoryForTableData();
    [CompilerGeneratedAttribute]
public void set_TempDirectoryForTableData(string value);
    [CompilerGeneratedAttribute]
public bool get_ExtractReferencedServerScopedElements();
    [CompilerGeneratedAttribute]
public void set_ExtractReferencedServerScopedElements(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExtractApplicationScopedObjectsOnly();
    [CompilerGeneratedAttribute]
public void set_ExtractApplicationScopedObjectsOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreExtendedProperties();
    [CompilerGeneratedAttribute]
public void set_IgnoreExtendedProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnorePermissions();
    [CompilerGeneratedAttribute]
public void set_IgnorePermissions(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUserLoginMappings();
    [CompilerGeneratedAttribute]
public void set_IgnoreUserLoginMappings(bool value);
    [CompilerGeneratedAttribute]
public DacSchemaModelStorageType get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(DacSchemaModelStorageType value);
    [CompilerGeneratedAttribute]
public bool get_VerifyExtraction();
    [CompilerGeneratedAttribute]
public void set_VerifyExtraction(bool value);
    public bool get_ExtractUsageProperties();
    public void set_ExtractUsageProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageBlobEndpoint();
    [CompilerGeneratedAttribute]
public void set_AzureStorageBlobEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageContainer();
    [CompilerGeneratedAttribute]
public void set_AzureStorageContainer(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageKey();
    [CompilerGeneratedAttribute]
public void set_AzureStorageKey(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageRootPath();
    [CompilerGeneratedAttribute]
public void set_AzureStorageRootPath(string value);
    [CompilerGeneratedAttribute]
public bool get_HashObjectNamesInLogs();
    [CompilerGeneratedAttribute]
public void set_HashObjectNamesInLogs(bool value);
    [CompilerGeneratedAttribute]
public DataOperationStateProvider get_DataOperationStateProvider();
    [CompilerGeneratedAttribute]
public void set_DataOperationStateProvider(DataOperationStateProvider value);
    [CompilerGeneratedAttribute]
public CompressionOption get_CompressionOption();
    [CompilerGeneratedAttribute]
public void set_CompressionOption(CompressionOption value);
    [CompilerGeneratedAttribute]
private bool get_AlwaysPopulateColumnCollation();
    [CompilerGeneratedAttribute]
private void set_AlwaysPopulateColumnCollation(bool value);
    [CompilerGeneratedAttribute]
private bool get_ConvertCrossDbRefToWarning();
    [CompilerGeneratedAttribute]
private void set_ConvertCrossDbRefToWarning(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnforceSqlAzureRestrictions();
    [CompilerGeneratedAttribute]
internal void set_EnforceSqlAzureRestrictions(bool value);
    [CompilerGeneratedAttribute]
private bool get_IgnoreExtendedProcedures();
    [CompilerGeneratedAttribute]
private void set_IgnoreExtendedProcedures(bool value);
    [CompilerGeneratedAttribute]
private bool get_ImportSystemClrTypesAsExternal();
    [CompilerGeneratedAttribute]
private void set_ImportSystemClrTypesAsExternal(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IncludeOnlinePropertyAnnotations();
    [CompilerGeneratedAttribute]
internal void set_IncludeOnlinePropertyAnnotations(bool value);
    [CompilerGeneratedAttribute]
private bool get_OnlyImportMsShippedObjects();
    [CompilerGeneratedAttribute]
private void set_OnlyImportMsShippedObjects(bool value);
    [CompilerGeneratedAttribute]
private bool get_PopulateComposedChildrenOnUnencryptedSysCommentObjects();
    [CompilerGeneratedAttribute]
private void set_PopulateComposedChildrenOnUnencryptedSysCommentObjects(bool value);
    [CompilerGeneratedAttribute]
private bool get_PopulateComputedColumnTypeSpecifiers();
    [CompilerGeneratedAttribute]
private void set_PopulateComputedColumnTypeSpecifiers(bool value);
    [CompilerGeneratedAttribute]
private bool get_PopulateHierarchicalChildrenOfComposedChildren();
    [CompilerGeneratedAttribute]
private void set_PopulateHierarchicalChildrenOfComposedChildren(bool value);
    [CompilerGeneratedAttribute]
private bool get_PopulateHierarchicalChildrenOfHierarchicalChildren();
    [CompilerGeneratedAttribute]
private void set_PopulateHierarchicalChildrenOfHierarchicalChildren(bool value);
    [CompilerGeneratedAttribute]
private bool get_PopulateQueueColumns();
    [CompilerGeneratedAttribute]
private void set_PopulateQueueColumns(bool value);
    [CompilerGeneratedAttribute]
private bool get_PopulateSystemStatistics();
    [CompilerGeneratedAttribute]
private void set_PopulateSystemStatistics(bool value);
    [CompilerGeneratedAttribute]
internal bool get_RemoveUnReferencedServerObjects();
    [CompilerGeneratedAttribute]
private void set_RemoveUnReferencedServerObjects(bool value);
    [CompilerGeneratedAttribute]
private bool get_ResetPotentialRelationshipEntries();
    [CompilerGeneratedAttribute]
private void set_ResetPotentialRelationshipEntries(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrimDanglingReferencesOnServerScopedElements();
    [CompilerGeneratedAttribute]
private void set_TrimDanglingReferencesOnServerScopedElements(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrimInvalidSqlAuthPropertiesForAzure();
    [CompilerGeneratedAttribute]
internal void set_TrimInvalidSqlAuthPropertiesForAzure(bool value);
    [CompilerGeneratedAttribute]
private bool get_ValidateCasingOnIdentifiers();
    [CompilerGeneratedAttribute]
private void set_ValidateCasingOnIdentifiers(bool value);
    [CompilerGeneratedAttribute]
private bool get_ValidationEnabled();
    [CompilerGeneratedAttribute]
private void set_ValidationEnabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_VerifyPermissionToImport();
    [CompilerGeneratedAttribute]
private void set_VerifyPermissionToImport(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ExtractNonApplicationDatabaseScopedElements();
    [CompilerGeneratedAttribute]
internal void set_ExtractNonApplicationDatabaseScopedElements(bool value);
    internal void CopyTo(SqlReverseEngineerConstructor reverseEngineerConstructor);
}
public class Microsoft.SqlServer.Dac.DacImportOptions : object {
    [CompilerGeneratedAttribute]
private string <ImportContributorPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportContributors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportContributorArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private DacAzureDatabaseSpecification <DatabaseSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LongRunningCommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatabaseLockTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RebuildIndexesOfflineForDataPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableIndexesForDataPhase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelismForEnablingIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HashObjectNamesInLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveIdentityLastValues>k__BackingField;
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ImportContributorPaths")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ImportContributorPaths_FriendlyName")]
public string ImportContributorPaths { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ImportContributors_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ImportContributors")]
public string ImportContributors { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ImportContributorArguments_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "ImportContributorArguments")]
public string ImportContributorArguments { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseSpecification")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseSpecification_FriendlyName")]
[NestedDeploymentPropertyAttribute]
public DacAzureDatabaseSpecification DatabaseSpecification { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "CommandTimeout")]
public int CommandTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "LongRunningCommandTimeout")]
public int LongRunningCommandTimeout { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DatabaseLockTimeout_FriendlyName")]
public int DatabaseLockTimeout { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RebuildIndexesOfflineForDataPhase_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "RebuildIndexesOfflineForDataPhase")]
public bool RebuildIndexesOfflineForDataPhase { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableIndexesForDataPhase_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableIndexesForDataPhase")]
public bool DisableIndexesForDataPhase { get; public set; }
    [OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableParallelismForEnablingIndexes")]
[OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "DisableParallelismForEnablingIndexes_FriendlyName")]
public bool DisableParallelismForEnablingIndexes { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "HashObjectNamesInLogs")]
public bool HashObjectNamesInLogs { get; public set; }
    [OptionDisplayNameAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "PreserveIdentityLastValues_FriendlyName")]
[OptionDescriptionAttribute("Microsoft.Data.Tools.Schema.Sql.CommandLine.CommandLineResources", "PreserveIdentityLastValues")]
public bool PreserveIdentityLastValues { get; public set; }
    internal DacImportOptions(bool useRegistryOverrideForCommandTimeout);
    [CompilerGeneratedAttribute]
public string get_ImportContributorPaths();
    [CompilerGeneratedAttribute]
public void set_ImportContributorPaths(string value);
    [CompilerGeneratedAttribute]
public string get_ImportContributors();
    [CompilerGeneratedAttribute]
public void set_ImportContributors(string value);
    [CompilerGeneratedAttribute]
public string get_ImportContributorArguments();
    [CompilerGeneratedAttribute]
public void set_ImportContributorArguments(string value);
    [CompilerGeneratedAttribute]
public DacAzureDatabaseSpecification get_DatabaseSpecification();
    [CompilerGeneratedAttribute]
public void set_DatabaseSpecification(DacAzureDatabaseSpecification value);
    [CompilerGeneratedAttribute]
public int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_LongRunningCommandTimeout();
    [CompilerGeneratedAttribute]
public void set_LongRunningCommandTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_DatabaseLockTimeout();
    [CompilerGeneratedAttribute]
public void set_DatabaseLockTimeout(int value);
    [CompilerGeneratedAttribute]
public bool get_RebuildIndexesOfflineForDataPhase();
    [CompilerGeneratedAttribute]
public void set_RebuildIndexesOfflineForDataPhase(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableIndexesForDataPhase();
    [CompilerGeneratedAttribute]
public void set_DisableIndexesForDataPhase(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelismForEnablingIndexes();
    [CompilerGeneratedAttribute]
public void set_DisableParallelismForEnablingIndexes(bool value);
    [CompilerGeneratedAttribute]
public bool get_HashObjectNamesInLogs();
    [CompilerGeneratedAttribute]
public void set_HashObjectNamesInLogs(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveIdentityLastValues();
    [CompilerGeneratedAttribute]
public void set_PreserveIdentityLastValues(bool value);
}
internal class Microsoft.SqlServer.Dac.DacLoggingContext : LoggingContext {
    private Action`2<object, DacProgressEventArgs> _onProgress;
    private Action`2<object, DacMessage> _onMessage;
    private DacTask _task;
    private TaskFactory _taskFactory;
    private static Lazy`1<DacLoggingContext> LazyNullLogger;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`1<DacLoggingContext> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action`2<object, DacProgressEventArgs> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Action`2<object, DacMessage> CS$<>9__CachedAnonymousMethodDelegated;
    public static DacLoggingContext NullLogger { get; }
    public DacLoggingContext(Action`2<object, DacProgressEventArgs> onProgress, Action`2<object, DacMessage> onMessage, DacTask task);
    private static DacLoggingContext();
    public virtual Task LogProgress(object sender, OperationStatus status, string message, Object[] args);
    private static DacOperationStatus GetDacOperationStatus(OperationStatus status);
    public virtual Task LogMessage(object sender, LoggingMessageType messageType, int number, string message, string prefix);
    public virtual Task LogProgressMessage(object sender, LoggingMessageType messageType, int number, string message, double progress);
    public virtual Task LogTableProgressMessage(object sender, LoggingMessageType messageType, int number, string message, double progress, string schemaName, string tableName);
    public virtual Task LogTotalProgressMessage(object sender, LoggingMessageType messageType, int number, string message, double progress);
    public Task LogMessage(object sender, DacMessage message);
    private DacMessageType GetDacMessageType(LoggingMessageType messageType);
    public static DacLoggingContext get_NullLogger();
    public virtual void WaitForAllMessages();
    [CompilerGeneratedAttribute]
private static void <WaitForAllMessages>b__6();
    [CompilerGeneratedAttribute]
private static DacLoggingContext <.cctor>b__8();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(object sender, DacProgressEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__a(object sender, DacMessage message);
}
public class Microsoft.SqlServer.Dac.DacMessage : object {
    private static string DefaultPrefix;
    private DacMessageType _type;
    private int _number;
    private string _prefix;
    private string _message;
    public DacMessageType MessageType { get; }
    public int Number { get; }
    public string Prefix { get; }
    public string Message { get; }
    internal DacMessage(DacMessageType type, int number, string message);
    internal DacMessage(DacMessageType type, string message);
    internal DacMessage(DacMessageType type, int number, string message, string prefix);
    internal DacMessage(DataSchemaError error);
    public DacMessageType get_MessageType();
    public int get_Number();
    public string get_Prefix();
    public string get_Message();
    private static DacMessageType MapErrorSeverity(ErrorSeverity severity);
    internal static IEnumerable`1<DacMessage> MapErrors(IEnumerable`1<DataSchemaError> errors);
    public virtual string ToString();
}
public class Microsoft.SqlServer.Dac.DacMessageEventArgs : EventArgs {
    private DacMessage _message;
    public DacMessage Message { get; }
    internal DacMessageEventArgs(DacMessage message);
    public DacMessage get_Message();
}
public enum Microsoft.SqlServer.Dac.DacMessageType : Enum {
    public int value__;
    public static DacMessageType Message;
    public static DacMessageType Warning;
    public static DacMessageType Error;
}
public class Microsoft.SqlServer.Dac.DacOperationProgressMessage : DacMessage {
    private double _progress;
    public double Progress { get; }
    internal DacOperationProgressMessage(DacMessageType type, int number, string message, double progress);
    public double get_Progress();
}
public enum Microsoft.SqlServer.Dac.DacOperationStatus : Enum {
    public int value__;
    public static DacOperationStatus Pending;
    public static DacOperationStatus Running;
    public static DacOperationStatus Completed;
    public static DacOperationStatus Faulted;
    public static DacOperationStatus Cancelled;
}
public class Microsoft.SqlServer.Dac.DacPackage : object {
    private static string ModelSchemaFileName;
    private static string ScriptBatchSeparator;
    private IPackageSource _packageSource;
    private DacMetadata _metadata;
    private bool _isDisposed;
    private FileAccess _packageAccess;
    public string Name { get; }
    public string Description { get; }
    public Version Version { get; }
    internal IPackageSource PackageSource { get; }
    internal FileAccess PackageAccess { get; }
    private DacMetadata Metadata { get; }
    public Stream PreDeploymentScript { get; }
    public Stream PostDeploymentScript { get; }
    private static DacPackage();
    private DacPackage(IPackageSource packageSource, FileAccess packageAccess);
    public string get_Name();
    public string get_Description();
    public Version get_Version();
    internal IPackageSource get_PackageSource();
    internal FileAccess get_PackageAccess();
    private DacMetadata get_Metadata();
    private DacMetadata ReadMetadata();
    public Stream get_PreDeploymentScript();
    public Stream get_PostDeploymentScript();
    private Stream GetSqlPackageContentStream(SqlPackageContentType contentType);
    private Stream GetPrePostDeployScript(bool isPreDeploy);
    private static Stream GetPackageContentStream(Package package, string uriString);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    public void Unpack(string directoryPath);
    internal static void Unpack(IPackageSource packageSource, string directoryPath);
    private static void ThrowIOExceptionIfFileExists(string filePath);
    private static void GenerateScript(IPackageSource packageSource, string directoryPath);
    internal static DacSchemaModelStorageType ConvertStorage(ModelStorageType storageType);
    internal static ModelStorageType ConvertStorage(DacSchemaModelStorageType storageType);
    internal static DataSchemaModel LoadModel(IPackageSource packageSource);
    internal static DataSchemaModel LoadModel(IPackageSource packageSource, bool ignoreUnresolvedExternalErrors);
    internal static DataSchemaModel DeserializePackage(SqlPackage package, DacSchemaModelStorageType modelStorageType, ErrorManager errorManager, DataSchemaModelHeader& header);
    private static void LoadCompositeReferences(DataSchemaModel model, DataSchemaModelHeader modelHeader, SqlPackage package);
    private static void AdjustCustomData(CustomSchemaData customData, string packagePath);
    private static IEnumerable`1<IModelElement> GetScriptableModelElements(DataSchemaModel model);
    private static bool IsConstraintAndInlined(IModelElement element);
    public static DacPackage Load(string fileName);
    public static DacPackage Load(string fileName, DacSchemaModelStorageType modelStorageType);
    public static DacPackage Load(string fileName, DacSchemaModelStorageType modelStorageType, FileAccess packageAccess);
    public static DacPackage Load(Stream stream);
    public static DacPackage Load(Stream stream, DacSchemaModelStorageType modelStorageType);
    public static DacPackage Load(Stream stream, DacSchemaModelStorageType modelStorageType, FileAccess packageAccess);
    internal static UInt32 Save(Stream stream, DataSchemaModel model, DacMetadata metadata, Nullable`1<UInt32> minModelVersion);
    internal static UInt32 WritePackageContent(SqlPackage package, DataSchemaModel model, DacMetadata metadata, Nullable`1<UInt32> minModelVersion);
    internal static DacMetadata ReadMetadata(IPackageSource packageSource);
    internal static bool ContainsExportedData(IPackageSource packageSource);
    private static bool ContainsLegacyExportedData(IPackageSource packageSource);
    internal static DataSchemaModelHeader ReadModelHeader(IPackageSource packageSource);
    private static void ValidatePackageAccess(FileAccess packageAccess);
    internal void EnsureWriteAccess();
}
public class Microsoft.SqlServer.Dac.DacProfile : object {
    [CompilerGeneratedAttribute]
private DacDeployOptions <DeployOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetConnectionString>k__BackingField;
    public DacDeployOptions DeployOptions { get; private set; }
    public string TargetDatabaseName { get; public set; }
    public string TargetConnectionString { get; public set; }
    private static DacProfile();
    [CompilerGeneratedAttribute]
public DacDeployOptions get_DeployOptions();
    [CompilerGeneratedAttribute]
private void set_DeployOptions(DacDeployOptions value);
    [CompilerGeneratedAttribute]
public string get_TargetDatabaseName();
    [CompilerGeneratedAttribute]
public void set_TargetDatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetConnectionString();
    [CompilerGeneratedAttribute]
public void set_TargetConnectionString(string value);
    public static DacProfile Load(string fileName);
    public static DacProfile Load(Stream stream);
    private static DacProfile LoadImpl(Func`1<PublishProfileSerializer> serializerProvider);
}
public class Microsoft.SqlServer.Dac.DacProgressEventArgs : EventArgs {
    private DacOperationStatus _status;
    private string _message;
    private int _operationId;
    public DacOperationStatus Status { get; }
    public string Message { get; }
    public int OperationId { get; }
    internal DacProgressEventArgs(DacOperationStatus status, string message, int operationId);
    public DacOperationStatus get_Status();
    public string get_Message();
    public int get_OperationId();
}
public class Microsoft.SqlServer.Dac.DacRetryMessage : DacMessage {
    private int _retryCount;
    private int _serverErrorNumber;
    public int RetryCount { get; }
    public int ServerErrorNumber { get; }
    internal DacRetryMessage(SqlServerRetryError internalError);
    public int get_RetryCount();
    public int get_ServerErrorNumber();
}
public enum Microsoft.SqlServer.Dac.DacSchemaModelStorageType : Enum {
    public int value__;
    public static DacSchemaModelStorageType File;
    public static DacSchemaModelStorageType Memory;
}
public class Microsoft.SqlServer.Dac.DacServices : object {
    private static string DeployScriptFilePrefix;
    private static string ScriptFileExtension;
    private static string MasterDatabaseName;
    private static int InitialStreamCapacityForDeploymentScript;
    internal static DacSchemaModelStorageType DefaultModelStorageType;
    private object syncRoot;
    private Dictionary`2<string, object> _environmentSettings;
    private Dictionary`2<string, object> _logSettings;
    private object _stateLock;
    private SqlConnectionFactory _userConnectionFactory;
    private EventHandler`1<DacProgressEventArgs> ProgressChanged;
    private EventHandler`1<DacMessageEventArgs> Message;
    private static EventHandler`1<LogObjectHashedEventArgs> LogObjectHashed;
    private EventHandler`1<SqlConnection> SqlConnectionCreated;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate93;
    [CompilerGeneratedAttribute]
private static Func`2<SqlColumnEncryptionKeyValue, bool> CS$<>9__CachedAnonymousMethodDelegate9b;
    public static TraceSource DiagnosticTrace { get; }
    internal static TraceSource PerformanceTrace { get; }
    private static DacServices();
    public DacServices(string connectionString);
    public DacServices(string connectionString, IUniversalAuthProvider authProvider);
    public DacServices(string connectionString, SecureString password);
    public void add_ProgressChanged(EventHandler`1<DacProgressEventArgs> value);
    public void remove_ProgressChanged(EventHandler`1<DacProgressEventArgs> value);
    public void add_Message(EventHandler`1<DacMessageEventArgs> value);
    public void remove_Message(EventHandler`1<DacMessageEventArgs> value);
    public static void add_LogObjectHashed(EventHandler`1<LogObjectHashedEventArgs> value);
    public static void remove_LogObjectHashed(EventHandler`1<LogObjectHashedEventArgs> value);
    internal void add_SqlConnectionCreated(EventHandler`1<SqlConnection> value);
    internal void remove_SqlConnectionCreated(EventHandler`1<SqlConnection> value);
    public static TraceSource get_DiagnosticTrace();
    internal static TraceSource get_PerformanceTrace();
    internal static void Initialize();
    public void Extract(string packageFileName, string databaseName, string applicationName, Version applicationVersion, string applicationDescription, IEnumerable`1<Tuple`2<string, string>> tables, DacExtractOptions extractOptions, Nullable`1<CancellationToken> cancellationToken);
    private void Extract(Func`1<Stream> streamGetter, string databaseName, string applicationName, Version applicationVersion, string applicationDescription, IEnumerable`1<Tuple`2<string, string>> tables, DacExtractOptions extractOptions, Nullable`1<CancellationToken> cancellationToken, DacLoggingContext extractLoggingContext);
    public void Extract(Stream packageStream, string databaseName, string applicationName, Version applicationVersion, string applicationDescription, IEnumerable`1<Tuple`2<string, string>> tables, DacExtractOptions extractOptions, Nullable`1<CancellationToken> cancellationToken);
    internal DataSchemaModel ExtractModelOnly(DacExtractOptions extractOptions, Nullable`1<CancellationToken> cancellationToken, bool storeSourceCodePositionAnnotations);
    private Operation CreateDacpacDataValidationOperation(IEnumerable`1<Tuple`2<string, string>> tables, Nullable`1<CancellationToken> cancellationToken, ExtractOperation extractOperation, DacLoggingContext loggingContext);
    public PublishResult Script(DacPackage package, string targetDatabaseName, PublishOptions publishOptions);
    public static PublishResult Script(DacPackage sourcePackage, DacPackage targetPackage, string targetDatabaseName, PublishOptions publishOptions);
    public PublishResult Publish(DacPackage package, string targetDatabaseName, PublishOptions publishOptions);
    private PublishResult InternalPublish(DacPackage package, string targetDatabaseName, PublishOptions publishOptions, bool executePlan);
    public void Deploy(DacPackage package, string targetDatabaseName, bool upgradeExisting, DacDeployOptions options, Nullable`1<CancellationToken> cancellationToken);
    private static void CheckForInvalidDeployOptions(DacDeployOptions options);
    private void InternalDeploy(IPackageSource packageSource, bool isDacpac, string targetDatabaseName, DacDeployOptions options, CancellationToken cancellationToken, DacLoggingContext loggingContext, Action`3<IDeploymentController, DeploymentPlan, ErrorManager> reportPlanOperation, bool executePlan);
    internal static String[] GetDeploymentContributorLoadPaths(IPackageSource packageSource, DacDeployOptions options);
    public string GenerateDeployScript(DacPackage package, string targetDatabaseName, DacDeployOptions options, Nullable`1<CancellationToken> cancellationToken);
    public string GenerateDeployReport(DacPackage package, string targetDatabaseName, DacDeployOptions options, Nullable`1<CancellationToken> cancellationToken);
    private static IOperation CreateDeploymentArtifactGenerationOperation(string operationCaption, Func`2<ErrorManager, SqlDeployment> constructDeployment, Action`3<IDeploymentController, DeploymentPlan, ErrorManager> generateArtifact, CancellationToken cancellationToken, DacLoggingContext loggingContext);
    internal static IDeploymentController CreateController(SqlDeployment deploymentEngine, ErrorManager errorManager);
    private static PublishResult WriteDeployResult(PublishOptions options, IDeploymentController controller, DeploymentPlan plan, ErrorManager errorManager);
    private static string ReadScriptFromFile(string path, bool deleteWhenDone);
    internal static string GenerateUniqueScriptFileName(string databaseName, bool isMaster);
    private static string GenerateDeployReportToString(IDeploymentController controller, DeploymentPlan plan, ErrorManager errorManager);
    private static void WriteDeploymentScript(TextWriter writer, IDeploymentController controller, DeploymentPlan plan, ErrorManager errorManager);
    private static void WriteDeploymentReport(TextWriter writer, IDeploymentController controller, DeploymentPlan plan, ErrorManager errorManager);
    public string GenerateDriftReport(string targetDatabaseName, Nullable`1<CancellationToken> cancellationToken);
    public string GenerateDriftReport(string targetDatabaseName, DacSchemaModelStorageType modelStorageType, Nullable`1<CancellationToken> cancellationToken);
    public void Register(string targetDatabaseName, string applicationName, Version applicationVersion, string applicationDescription);
    public void Register(string targetDatabaseName, DacSchemaModelStorageType modelStorageType, string applicationName, Version applicationVersion, string applicationDescription);
    private void InternalRegister(string targetDatabaseName, string applicationName, Version applicationVersion, string applicationDescription, ModelStorageType modelStorageType, Guid instanceId);
    public void Unregister(string targetDatabaseName);
    public void ExportBacpac(string packageFileName, string databaseName, IEnumerable`1<Tuple`2<string, string>> tables, Nullable`1<CancellationToken> cancellationToken);
    public void ExportBacpac(string packageFileName, string databaseName, DacSchemaModelStorageType modelStorageType, IEnumerable`1<Tuple`2<string, string>> tables, Nullable`1<CancellationToken> cancellationToken);
    public void ExportBacpac(string packageFileName, string databaseName, DacExportOptions options, IEnumerable`1<Tuple`2<string, string>> tables, Nullable`1<CancellationToken> cancellationToken);
    public void ExportBacpac(Stream packageStream, string databaseName, IEnumerable`1<Tuple`2<string, string>> tables, Nullable`1<CancellationToken> cancellationToken);
    public void ExportBacpac(Stream packageStream, string databaseName, DacSchemaModelStorageType modelStorageType, IEnumerable`1<Tuple`2<string, string>> tables, Nullable`1<CancellationToken> cancellationToken);
    public void ExportBacpac(Stream packageStream, string databaseName, DacExportOptions options, IEnumerable`1<Tuple`2<string, string>> tables, Nullable`1<CancellationToken> cancellationToken);
    private void ExportBacpac(Func`1<Stream> streamGetter, string databaseName, DacExportOptions exportOptions, IEnumerable`1<Tuple`2<string, string>> tables, CancellationToken cancellationToken);
    private static List`1<DacMessage> CheckForStretchEnabledInSource(DataSchemaModel model);
    private List`1<DacMessage> ValidateModelForExport(object operation, DataSchemaModel model, IList`1<SqlTable> tableElements, DacLoggingContext exportloggingContext, CancellationToken token, EngineVersion targetEngineVersion, ErrorManager extractOperationErrors, SqlPlatforms& azurePlatformSurfaceArea);
    private static bool IsTargetLaterThanV11Allowed(EngineVersion targetEngineVersion);
    internal void SetAmbientSetting(string settingName, object settingValue);
    internal void SetLogSettings(string settingName, object settingValue);
    internal object GetAmbientSetting(string settingName);
    private IStackSettingsContext CreateSettingsContext(DacLoggingContext loggingContext);
    private IStackLogSettingsContext CreateLogSettingsContext(bool hashObjectNamesInLogs);
    private void ClearLogSettings();
    private Operation CreateExportOperation(Func`1<Stream> streamGetter, string databaseName, DacMetadata metadata, IEnumerable`1<Tuple`2<string, string>> tables, CancellationToken cancellationToken, ExtractOperation extractOperation, DateTime operationStartTime, bool isDacpac, Func`1<Nullable`1<UInt32>> getMinModelVersion, string temporaryDirectory, DacLoggingContext loggingContext, CompressionOption compressionOption);
    private void FinalizePackage(Stream packageStream, UInt32 modelVersion, SqlSchemaModel schemaModel, bool containsExportedData, DateTime operationStartTime, string databaseName, IEnumerable`1<Tuple`2<string, string>> tables, string dataPath, CompressionOption compression);
    public void ImportBacpac(BacPackage package, string targetDatabaseName, Nullable`1<CancellationToken> cancellationToken);
    public void ImportBacpac(BacPackage package, string targetDatabaseName, DacAzureDatabaseSpecification creationDefaults, Nullable`1<CancellationToken> cancellationToken);
    public void ImportBacpac(BacPackage package, string targetDatabaseName, DacImportOptions importOptions, Nullable`1<CancellationToken> cancellationToken);
    private static FileStream SafeFileStreamGetter(string path, FileMode mode, FileAccess access, FileShare share, string handledExceptionMessage);
    private static void SafeFileAction(Action fileAction, string handledExceptionMessage);
    private DacLoggingContext CreateLoggingContext(DacTask task);
    public static string GenerateCreateScript(DacPackage package, string targetDatabaseName, DacDeployOptions options);
    public static void GenerateCreateScript(Stream outputStream, DacPackage package, string targetDatabaseName, DacDeployOptions options);
    public static string GenerateDeployScript(DacPackage sourcePackage, DacPackage targetPackage, string targetDatabaseName, DacDeployOptions options);
    public static void GenerateDeployScript(Stream outputStream, DacPackage sourcePackage, DacPackage targetPackage, string targetDatabaseName, DacDeployOptions options);
    public static string GenerateDeployReport(DacPackage sourcePackage, DacPackage targetPackage, string targetDatabaseName, DacDeployOptions options);
    public static void GenerateDeployReport(Stream outputStream, DacPackage sourcePackage, DacPackage targetPackage, string targetDatabaseName, DacDeployOptions options);
    internal static IEnumerable`1<T> LookupTableElements(IEnumerable`1<Tuple`2<string, string>> tableNames, DataSchemaModel model);
    private SqlDeployment CreatePackageToDatabaseDeployment(IPackageSource packageSource, string targetDatabaseName, DacDeployOptions options, ErrorManager errorManager);
    internal static SqlDeployment CreatePackageToDatabaseDeployment(SqlConnectionFactory connectionFactory, IPackageSource packageSource, string targetDatabaseName, DacDeployOptions options, ErrorManager errorManager);
    private static SqlDeployment CreateSourcePackageOnlyDeployment(IPackageSource packageSource, string targetDatabaseName, DacDeployOptions options, ErrorManager errorManager);
    private static SqlDeployment CreatePackageToPackageDeployment(IPackageSource sourcePackageSource, IPackageSource targetPackageSource, string targetDatabaseName, DacDeployOptions options, ErrorManager errorManager);
    private bool DatabaseExists(string databaseName);
    private static SqlConnectionFactory ReplaceInitialCatalog(SqlConnectionFactory connectionFactory, string databaseName);
    internal static DatabaseSchemaProvider GetDatabaseSchemaProvider(SqlConnectionFactory connectionFactory, string databaseName);
    private static bool IsSqlDw(Type providerType, SqlConnectionFactory connectionFactory, string databaseName);
    private static DatabaseSchemaProvider GetDatabaseSchemaProvider(DataSchemaModelHeader header);
    private static SqlConnectionFactory ParseAndThrowIfUnsupportedConnectionStringBuilder(SqlConnectionFactory connectionFactory);
    private static void ThrowIfStreamUnsuitableForWriting(Stream stream);
    private static void ProbeIsolatedStorageAndSetAppDomainEvidenceIfNeccessary();
    private int GetDatabaseLocktimeinMS(int databaseLockTimeout);
    private void OnSqlConnectionCreated(SqlConnection connection);
    private void ExcludeRandomizedIndexesFromBacpac(DataSchemaModel model, IList`1<SqlTable> tableElements, bool ignoreIndexesStatisticsOnEnclaveEnabledColumns, DacLoggingContext loggingContext);
    [CompilerGeneratedAttribute]
private void <CreateLogSettingsContext>b__63(string originalValue, string hashedValue);
    [CompilerGeneratedAttribute]
private void <CreateLoggingContext>b__6f(object sender, DacProgressEventArgs eventArguments);
    [CompilerGeneratedAttribute]
private void <CreateLoggingContext>b__70(object sender, DacMessage message);
    [CompilerGeneratedAttribute]
private static void <ParseAndThrowIfUnsupportedConnectionStringBuilder>b__92(string argumentName);
    [CompilerGeneratedAttribute]
private static bool <ExcludeRandomizedIndexesFromBacpac>b__94(SqlColumnEncryptionKeyValue k);
}
public class Microsoft.SqlServer.Dac.DacServicesException : Exception {
    private static ICollection`1<DacMessage> EmptyMessageList;
    private ICollection`1<DacMessage> _messages;
    public ICollection`1<DacMessage> Messages { get; }
    public DacServicesException(string message);
    public DacServicesException(string message, Exception innerException);
    private DacServicesException(string message, ICollection`1<DacMessage> messages, Exception innerException);
    [SecurityCriticalAttribute]
private DacServicesException(SerializationInfo info, StreamingContext context);
    private static DacServicesException();
    public ICollection`1<DacMessage> get_Messages();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static DacServicesException Create(string message, IEnumerable`1<DacMessage> messages, Exception innerException);
}
internal class Microsoft.SqlServer.Dac.Data.ColumnComparisonResult : object {
    internal RowComparisonResult _rowResult;
    private ColumnComparisonResultType _comparisonResultType;
    private TSqlColumn _column;
    private ColumnPropertyComparisonResult _columnValueResult;
    [CompilerGeneratedAttribute]
private static Func`2<bool, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public ColumnComparisonResultType ResultType { get; }
    public TSqlColumn Column { get; }
    public ColumnPropertyComparisonResult ColumnValue { get; }
    public ColumnComparisonResult(RowComparisonResult rowResult, TSqlColumn column, bool sourceTargetColumnValuesEqual);
    protected ColumnComparisonResult(RowComparisonResult rowResult, TSqlColumn column, ColumnComparisonResultType columnResult, bool sourceTargetColumnValuesEqual);
    public ColumnComparisonResultType get_ResultType();
    public TSqlColumn get_Column();
    public ColumnPropertyComparisonResult get_ColumnValue();
    internal static ColumnComparisonResultType GetColumnComparisonResultType(bool sourceTargetColumnValuesEqual, IEnumerable`1<bool> additionalPropertyResults);
    [CompilerGeneratedAttribute]
private static bool <GetColumnComparisonResultType>b__0(bool propertyEqual);
}
internal enum Microsoft.SqlServer.Dac.Data.ColumnComparisonResultType : Enum {
    public int value__;
    public static ColumnComparisonResultType Equal;
    public static ColumnComparisonResultType Update;
}
internal class Microsoft.SqlServer.Dac.Data.ColumnPropertyComparisonResult : object {
    private string _id;
    internal ColumnComparisonResult _columnResult;
    private bool _sourceColumnValueFetched;
    private bool _targetColumnValueFetched;
    private object _sourceValue;
    private object _targetValue;
    private ColumnPropertyComparisonResultType _resultType;
    public string Id { get; }
    public ColumnPropertyComparisonResultType ResultType { get; }
    public ColumnPropertyComparisonResult(ColumnComparisonResult columnResult, string id, bool propertyEqual);
    public ColumnPropertyComparisonResult(ColumnComparisonResult columnResult, string id, bool propertyEqual, object sourceValue, object targetValue);
    public string get_Id();
    public ColumnPropertyComparisonResultType get_ResultType();
    public object GetSourceValue();
    public object GetTargetValue();
}
internal enum Microsoft.SqlServer.Dac.Data.ColumnPropertyComparisonResultType : Enum {
    public int value__;
    public static ColumnPropertyComparisonResultType Equal;
    public static ColumnPropertyComparisonResultType Update;
}
internal abstract class Microsoft.SqlServer.Dac.Data.DataCache : object {
    public static DataCache FromBacpac(FileInfo packageFile);
    public static DataCache FromConnectionFactory(SqlConnectionFactory connectionFactory);
    internal abstract virtual DataStorage GetDataStorage(DataCache target);
    public abstract virtual DbDataReader GetDataReader(TSqlTable table);
    public abstract virtual TSqlModel GetModel();
    public abstract virtual void Dispose();
}
internal class Microsoft.SqlServer.Dac.Data.DataComparer : object {
    public DataStorage _dataStorage;
    public DataComparisonOptions _options;
    public DataCache _source;
    public DataCache _target;
    public DataComparer(DataCache source, DataCache target, DataComparisonOptions compareOptions);
    public DataComparisonResult Compare();
    private ObjectIdentifier GetMappedTableName(ObjectIdentifier sourceTableName);
    public sealed virtual void Dispose();
}
internal class Microsoft.SqlServer.Dac.Data.DataComparisonOptions : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreBlobColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ObjectIdentifier> <IgnoredSourceColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ObjectIdentifier, ObjectIdentifier> <TableMap>k__BackingField;
    public bool IgnoreBlobColumns { get; public set; }
    public HashSet`1<ObjectIdentifier> IgnoredSourceColumns { get; private set; }
    public Dictionary`2<ObjectIdentifier, ObjectIdentifier> TableMap { get; private set; }
    public DataComparisonOptions(DataComparisonOptions source);
    [CompilerGeneratedAttribute]
public bool get_IgnoreBlobColumns();
    [CompilerGeneratedAttribute]
public void set_IgnoreBlobColumns(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<ObjectIdentifier> get_IgnoredSourceColumns();
    [CompilerGeneratedAttribute]
private void set_IgnoredSourceColumns(HashSet`1<ObjectIdentifier> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ObjectIdentifier, ObjectIdentifier> get_TableMap();
    [CompilerGeneratedAttribute]
private void set_TableMap(Dictionary`2<ObjectIdentifier, ObjectIdentifier> value);
}
internal class Microsoft.SqlServer.Dac.Data.DataComparisonResult : object {
    private Dictionary`2<TSqlObject, TableComparisonResult> _tableComparisonResultsMap;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TSqlTable> <DifferentTables>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TSqlTable> <EqualTables>k__BackingField;
    public IEnumerable`1<TSqlTable> DifferentTables { get; private set; }
    public IEnumerable`1<TSqlTable> EqualTables { get; private set; }
    public DataComparisonResult(IEnumerable`1<TableComparisonResult> tableResults);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TSqlTable> get_DifferentTables();
    [CompilerGeneratedAttribute]
private void set_DifferentTables(IEnumerable`1<TSqlTable> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TSqlTable> get_EqualTables();
    [CompilerGeneratedAttribute]
private void set_EqualTables(IEnumerable`1<TSqlTable> value);
    public TableComparisonResult GetTableComparisonResult(TSqlTable table);
}
internal class Microsoft.SqlServer.Dac.Data.DataException : Exception {
    public DataException(string message);
    public DataException(string message, Exception inner);
    protected DataException(SerializationInfo info, StreamingContext context);
    internal static DataException CreateAndLog(TraceId id, string msg);
    internal static DataException CreateAndLog(TraceId id, string msg, Exception inner);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
internal class Microsoft.SqlServer.Dac.Data.DataResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CreateTargetModelFailed { get; }
    internal static string DataPlanExecutionFailed { get; }
    internal static string FailedDetectDspType { get; }
    internal static string NoPKDefinedOnTable { get; }
    internal static string Skipped_SelectedColumn { get; }
    internal static string Skipped_SelectedTable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CreateTargetModelFailed();
    internal static string get_DataPlanExecutionFailed();
    internal static string get_FailedDetectDspType();
    internal static string get_NoPKDefinedOnTable();
    internal static string get_Skipped_SelectedColumn();
    internal static string get_Skipped_SelectedTable();
}
internal abstract class Microsoft.SqlServer.Dac.Data.DataStorage : object {
    private DataCache _source;
    private DataCache _target;
    protected DataCache Source { get; }
    protected DataCache Target { get; }
    protected DataStorage(DataCache source, DataCache target);
    protected DataCache get_Source();
    protected DataCache get_Target();
    public abstract virtual TableComparisonResult CompareTables(ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    public virtual void Dispose();
}
internal class Microsoft.SqlServer.Dac.Data.DbDataCache : DataCache {
    private TSqlModel _model;
    private bool _shouldCloseConnection;
    private SqlConnectionFactory _connectionFactory;
    private SqlConnection _connection;
    private SqlCommand _command;
    private SqlConnection Connection { get; }
    public DbDataCache(SqlConnectionFactory connectionFactory);
    internal virtual DataStorage GetDataStorage(DataCache target);
    private SqlConnection get_Connection();
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
public virtual DbDataReader GetDataReader(TSqlTable table);
    private static DataSchemaModel ReverseEngineerModelFromDatabase(SqlConnectionFactory connectionFactory);
    public virtual TSqlModel GetModel();
    public virtual void Dispose();
}
internal class Microsoft.SqlServer.Dac.Data.DbDataStorage : DataStorage {
    private SqlConnection _connection;
    private SqlScriptGenerator _scriptGenerator;
    private TSqlModel _sourceModel;
    private TSqlModel _targetModel;
    protected SqlConnection Connection { get; }
    protected TSqlModel SourceModel { get; }
    protected TSqlModel TargetModel { get; }
    public DbDataStorage(SqlConnection connection, DataCache source, DataCache target);
    protected SqlConnection get_Connection();
    protected TSqlModel get_SourceModel();
    protected TSqlModel get_TargetModel();
    private void InitializeScriptGenerator();
    public virtual TableComparisonResult CompareTables(ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    protected virtual ObjectIdentifier GetSourceNameInStorage(ObjectIdentifier sourceTableName);
    protected virtual ObjectIdentifier GetTargetNameInStorage(ObjectIdentifier targetTableName);
    private void AddEqualRows(TableComparisonResult comparisonResult, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    private void AddRowsToUpdate(TableComparisonResult comparisonResult, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    private void AddTargetOnlyRows(TableComparisonResult comparisonResult, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    private void AddSourceOnlyRows(TableComparisonResult comparisonResult, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
private IEnumerable`1<object> GetRowData(ObjectIdentifier tableName, IEnumerable`1<object> primaryKeyValues, TSqlColumn column);
    private void GetSubstrationResult(TableComparisonResult comparisonResult, RowComparisonResultType resultType, TSqlTable sourceTable, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
private void ExecuteAstAddRowComparisonResults(TableComparisonResult comparisonResult, RowComparisonResultType resultType, TSqlFragment scriptFragment);
    private Object[] GetSqlDataReaderValues(SqlDataReader reader);
}
internal class Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceException : SqlStudioException {
    private LocalDbInstanceException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager : object {
    private static string CheckDatabaseExists;
    private static string LocaldbInstanceFormat;
    private static int MaxInstanceNamePrefixLength;
    private static SqlScriptGenerator _scriptGen;
    private static LocalDbWrapper _localDb;
    private static Nullable`1<bool> _connectivitySupport;
    public static bool LocalDbInstalled { get; }
    private static LocalDbInstanceManager();
    public static bool get_LocalDbInstalled();
    public static string CreateLocaldbInstanceName(string suggestedInstanceName);
    public static SqlConnectionStringBuilder CreateInstance(string suggestedInstanceName);
    public static SqlConnectionStringBuilder CreateDatabase(string suggestedInstanceName, string databaseName, string mdfName, DirectoryInfo userdbFolder, string defaultCollation, bool warmupDatabase);
    public static void DropDatabase(string suggestedInstanceName, string dbName);
    public static void DetachDatabase(string suggestedInstanceName, string dbName);
    internal static void StopInstance(string suggestedInstanceName);
    internal static void TeardownInstance(string suggestedInstanceName);
    internal static SqlConnectionStringBuilder CreateConnectionString(string localdbInstanceName);
    private static void ThrowCouldNotSetup();
    private static string CreateSafeInstanceName(string namePrefix);
    private static bool DoesDatabaseExist(SqlConnection conn, string databaseName);
    private static void TestLocaldbConnectivityInstalled(string instanceName);
    private static string SetupLocalDBInstance(string instanceName);
    private static void BeginNewDatabaseWarmup(SqlConnectionStringBuilder scsb, string databaseName);
    private static TSqlScript BuildCreateDatabase(string databaseName, string mdfName, string collation, DirectoryInfo dbDir, DirectoryInfo logDir);
    private static void AddAlterDbAutoCloseAst(TSqlScript script, string databaseName, bool autoClose);
    private static TSqlScript BuildDetachDatabase(string dbName);
    private static TSqlScript BuildDropDatabase(string databaseName);
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
private static void ExecuteScript(SqlConnection conn, TSqlScript script);
}
internal class Microsoft.SqlServer.Dac.Data.LocalDbDataStorage : DbDataStorage {
    private static string InstanceName;
    private static string DatabaseNamePrefix;
    private static string SourcePrefix;
    private static string TargetPrefix;
    private Dictionary`2<ObjectIdentifier, ObjectIdentifier> _sourceTablesMap;
    private Dictionary`2<ObjectIdentifier, ObjectIdentifier> _targetTablesMap;
    private static int _globalObjectCounter;
    private int _storageId;
    private string _databaseName;
    private bool _dataPreloaded;
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
public LocalDbDataStorage(DataCache source, DataCache target);
    private static LocalDbDataStorage();
    private static SqlConnection GetLocalDbConnection();
    public virtual void Dispose();
    public void PreloadDataCaches();
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
private void DropTables(IEnumerable`1<ObjectIdentifier> tableNames);
    [SuppressMessageAttribute("Microsoft.Security", "CA2100:Review SQL queries for security vulnerabilities")]
private void LoadDataCache(string prefix, Dictionary`2<ObjectIdentifier, ObjectIdentifier> tableMap, DataCache dataCache, TSqlModel model);
    public virtual TableComparisonResult CompareTables(ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    protected virtual ObjectIdentifier GetTargetNameInStorage(ObjectIdentifier targetTableName);
    protected virtual ObjectIdentifier GetSourceNameInStorage(ObjectIdentifier sourceTableName);
}
internal static class Microsoft.SqlServer.Dac.Data.LocalDbDataStorageAstUtils : object {
    internal static string PrimaryKeyValueVariablePrefix;
    [CompilerGeneratedAttribute]
private static Func`4<Func`1<ColumnReferenceExpression>, Func`1<ColumnReferenceExpression>, bool, BooleanExpression> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`4<Func`1<ColumnReferenceExpression>, Func`1<ColumnReferenceExpression>, bool, BooleanExpression> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`4<Func`1<ColumnReferenceExpression>, Func`1<ColumnReferenceExpression>, bool, BooleanExpression> CS$<>9__CachedAnonymousMethodDelegate32;
    private static LocalDbDataStorageAstUtils();
    public static TSqlFragment GetEqualRowsAst(TSqlTable table, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    private static FromClause GetFromJoinClauseAst(TSqlTable table, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    private static BooleanExpression GetPrimaryKeySearchCondition(TSqlTable table, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    private static BooleanExpression GetNonPkComparison(Func`1<ColumnReferenceExpression> sourceCol, BooleanComparisonType comparisonType, Func`1<ColumnReferenceExpression> targetCol, bool isVariant);
    private static BooleanExpression CompareValuesIncludingNulls(BooleanComparisonType comparisonType, Func`1<ScalarExpression> source, Func`1<ScalarExpression> target);
    private static BooleanExpression GetSearchCondition(ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName, IEnumerable`1<TSqlColumn> columns, BooleanBinaryExpressionType binaryExpressionType, Func`4<Func`1<ColumnReferenceExpression>, Func`1<ColumnReferenceExpression>, bool, BooleanExpression> columnComparisonExpression);
    private static FunctionCall GetSqlVariantPropertyAst(string sqlVariantPropertyName, ColumnReferenceExpression columnReference);
    private static BooleanExpression GetBooleanComparisonExpressionAst(ScalarExpression first, BooleanComparisonType comparisonType, ScalarExpression second);
    private static BooleanExpression GetBooleanBinaryExpressionAst(BooleanExpression result, BooleanBinaryExpressionType binaryExpressionType, BooleanExpression expression);
    public static TSqlFragment GetSubstrationResultAst(TSqlTable table, ObjectIdentifier sourceNameInStorage, ObjectIdentifier targetNameInStorage);
    private static BinaryQueryExpression CreateBinaryQueryExpression(ObjectIdentifier firstTable, ObjectIdentifier secondTable, IEnumerable`1<TSqlColumn> columnList, BinaryQueryExpressionType expressionType);
    private static QuerySpecification CreateSimpleQuerySpecificationForTable(ObjectIdentifier table, IEnumerable`1<TSqlColumn> columns);
    internal static TSqlFragment GetRowsToUpdateAst(TSqlTable sourceTable, ObjectIdentifier sourceTableName, ObjectIdentifier targetTableName);
    private static SearchedCaseExpression GetCaseWhenExpression(BooleanExpression whenExpression, ScalarExpression thenExpression, ScalarExpression elseExpression);
    internal static TSqlFragment GetColumnDataAst(ObjectIdentifier tableName, TSqlColumn column);
    [CompilerGeneratedAttribute]
private static BooleanExpression <GetEqualRowsAst>b__3(Func`1<ColumnReferenceExpression> sourceCol, Func`1<ColumnReferenceExpression> targetCol, bool isSqlVariant);
    [CompilerGeneratedAttribute]
private static BooleanExpression <GetPrimaryKeySearchCondition>b__9(Func`1<ColumnReferenceExpression> sourceCol, Func`1<ColumnReferenceExpression> targetCol, bool isSqlVariant);
    [CompilerGeneratedAttribute]
private static BooleanExpression <GetRowsToUpdateAst>b__2b(Func`1<ColumnReferenceExpression> sourceCol, Func`1<ColumnReferenceExpression> targetCol, bool isSqlVariant);
}
internal class Microsoft.SqlServer.Dac.Data.Model.ObjectIdentifier : object {
    private String[] _nameParts;
    public string ColumnName { get; }
    public string TableName { get; }
    public string SchemaName { get; }
    public ObjectIdentifier(String[] nameParts);
    public string get_ColumnName();
    public string get_TableName();
    public string get_SchemaName();
    internal string AsString();
    public sealed virtual bool Equals(ObjectIdentifier other);
    public sealed virtual int CompareTo(ObjectIdentifier other);
}
internal enum Microsoft.SqlServer.Dac.Data.Model.ObjectType : Enum {
    public int value__;
    public static ObjectType Table;
    public static ObjectType Column;
}
internal class Microsoft.SqlServer.Dac.Data.Model.TSqlColumn : TSqlObject {
    private static ObjectIdentifier SqlVariantTypeIdentifier;
    [CompilerGeneratedAttribute]
private TSqlTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectIdentifier <ColumnType>k__BackingField;
    public TSqlTable Table { get; private set; }
    public bool IsPrimaryKey { get; internal set; }
    public ObjectIdentifier ColumnType { get; private set; }
    public bool IsSqlVariant { get; }
    public TSqlColumn(string name, ObjectIdentifier type, TSqlTable table);
    private static TSqlColumn();
    [CompilerGeneratedAttribute]
public TSqlTable get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(TSqlTable value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
internal void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public ObjectIdentifier get_ColumnType();
    [CompilerGeneratedAttribute]
private void set_ColumnType(ObjectIdentifier value);
    public bool get_IsSqlVariant();
}
internal class Microsoft.SqlServer.Dac.Data.Model.TSqlModel : object {
    private IList`1<TSqlTable> _tables;
    private DataSchemaModel _dataSchemaModel;
    public TSqlModel(IList`1<TSqlTable> tables, DataSchemaModel model);
    internal IEnumerable`1<TSqlTable> GetAllTables();
    internal IEnumerable`1<string> GenerateCreateTableScripts(TSqlTable table, ObjectIdentifier tableName, string prefix);
    private void TrimColumnDefinitions(IList`1<ColumnDefinition> columnList);
    private static void TrimAndRenameConstraints(IList`1<ConstraintDefinition> constraints, string prefix);
    private void FilterColumns(CreateTableStatement createTableStatement, TSqlTable table);
    private SqlScriptGenerator GetScriptGenerator();
    private SqlScriptDomGenerator GetScriptDomGenerator();
    internal static TSqlModel CreateFromDataSchemaModel(DataSchemaModel dataSchemaModel);
    internal TSqlTable GetTable(ObjectIdentifier tableName);
}
internal class Microsoft.SqlServer.Dac.Data.Model.TSqlObject : object {
    [CompilerGeneratedAttribute]
private ObjectIdentifier <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectType <ObjectType>k__BackingField;
    public ObjectIdentifier Name { get; private set; }
    public ObjectType ObjectType { get; private set; }
    protected TSqlObject(ObjectIdentifier name, ObjectType type);
    [CompilerGeneratedAttribute]
public ObjectIdentifier get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(ObjectIdentifier value);
    [CompilerGeneratedAttribute]
public ObjectType get_ObjectType();
    [CompilerGeneratedAttribute]
private void set_ObjectType(ObjectType value);
}
internal class Microsoft.SqlServer.Dac.Data.Model.TSqlTable : TSqlObject {
    private IList`1<TSqlColumn> _columns;
    private IList`1<int> _pkColumns;
    [CompilerGeneratedAttribute]
private static Func`2<TSqlColumn, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public IEnumerable`1<TSqlColumn> Columns { get; }
    public int ColumnCount { get; }
    public IEnumerable`1<TSqlColumn> PrimaryKeyColumns { get; }
    public IEnumerable`1<TSqlColumn> NonPrimaryKeyColumns { get; }
    public TSqlTable(ObjectIdentifier name, IEnumerable`1<Tuple`2<string, ObjectIdentifier>> columns, IEnumerable`1<int> pkColumns);
    internal int GetPrimaryKeyColumnIndex(int primaryKeyIndex);
    internal int GetPrimaryKeyColumnIndex(string columnName);
    internal int GetColumnIndex(string columnName);
    internal bool IsPrimaryKeyColumn(int columnIndex);
    public IEnumerable`1<TSqlColumn> get_Columns();
    public int get_ColumnCount();
    public IEnumerable`1<TSqlColumn> get_PrimaryKeyColumns();
    public IEnumerable`1<TSqlColumn> get_NonPrimaryKeyColumns();
    [CompilerGeneratedAttribute]
private TSqlColumn <get_PrimaryKeyColumns>b__0(int columnNumber);
    [CompilerGeneratedAttribute]
private static bool <get_NonPrimaryKeyColumns>b__1(TSqlColumn column);
}
internal class Microsoft.SqlServer.Dac.Data.RowComparisonResult : object {
    internal TableComparisonResult _tableResult;
    private RowComparisonResultType _comparisonResultType;
    private Object[] _pkValues;
    private List`1<ColumnComparisonResult> _columnResults;
    public RowComparisonResultType ResultType { get; }
    public IEnumerable`1<object> PrimaryKeyValues { get; }
    public IEnumerable`1<ColumnComparisonResult> ColumnResults { get; }
    public RowComparisonResult(RowComparisonResultType type, TableComparisonResult tableResult, Object[] comparisonResultValues);
    private void AddColumnResult(TSqlColumn column, Object[] values, Int32& index);
    public RowComparisonResultType get_ResultType();
    public IEnumerable`1<object> get_PrimaryKeyValues();
    public IEnumerable`1<ColumnComparisonResult> get_ColumnResults();
}
internal enum Microsoft.SqlServer.Dac.Data.RowComparisonResultType : Enum {
    public int value__;
    public static RowComparisonResultType Insert;
    public static RowComparisonResultType Delete;
    public static RowComparisonResultType Equal;
    public static RowComparisonResultType Update;
}
internal class Microsoft.SqlServer.Dac.Data.SqlVariantColumnComparisonResult : ColumnComparisonResult {
    public static String[] SqlVariantMetadataProperties;
    private Dictionary`2<string, ColumnPropertyComparisonResult> _sqlVariantMetadataResults;
    public SqlVariantColumnComparisonResult(RowComparisonResult rowResult, TSqlColumn column, bool sourceTargetColumnValuesEqual, List`1<bool> sourceTargetSqlVariantMetadataEqual, List`1<object> sourceSqlVariantMetadata, List`1<object> targetSqlVariantMetadata);
    private static SqlVariantColumnComparisonResult();
    public ColumnPropertyComparisonResult GetSqlVariantMetadataResult(string propName);
}
internal class Microsoft.SqlServer.Dac.Data.TableComparisonResult : object {
    internal GetTableDataCallback _sourceDataCallback;
    internal GetTableDataCallback _targetDataCallback;
    private IList`1<RowComparisonResult> _equalRows;
    private IList`1<RowComparisonResult> _rowsToInsert;
    private IList`1<RowComparisonResult> _rowsToDelete;
    private IList`1<RowComparisonResult> _rowsToUpdate;
    [CompilerGeneratedAttribute]
private TSqlTable <SourceTable>k__BackingField;
    [CompilerGeneratedAttribute]
private TSqlTable <TargetTable>k__BackingField;
    public bool TablesEqual { get; }
    public TSqlTable SourceTable { get; private set; }
    public TSqlTable TargetTable { get; private set; }
    internal TableComparisonResult(TSqlTable source, TSqlTable target, GetTableDataCallback sourceDataCallback, GetTableDataCallback targetDataCallback);
    public bool get_TablesEqual();
    [CompilerGeneratedAttribute]
public TSqlTable get_SourceTable();
    [CompilerGeneratedAttribute]
private void set_SourceTable(TSqlTable value);
    [CompilerGeneratedAttribute]
public TSqlTable get_TargetTable();
    [CompilerGeneratedAttribute]
private void set_TargetTable(TSqlTable value);
    public IEnumerable`1<RowComparisonResult> GetEqualsRows();
    public IEnumerable`1<RowComparisonResult> GetRowsToInsert();
    public IEnumerable`1<RowComparisonResult> GetRowsToDelete();
    public IEnumerable`1<RowComparisonResult> GetRowsToUpdate();
    internal void AddRowComparisonResult(RowComparisonResultType resultType, Object[] values);
}
internal class Microsoft.SqlServer.Dac.DatabaseInfoRetriever : object {
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public static string GetDatabaseVersion(SqlConnectionFactory connectionFactory);
    public static bool TryGetDatabaseSizeAndRowCount(SqlConnectionFactory connectionFactory, string databaseName, IEnumerable`1<Tuple`2<string, string>> tables, Int64& databaseSize, Int64& rowCount);
    private static string GetQueryForDatabaseSize(bool forAzure);
    private static string GetQueryForRowCount(IEnumerable`1<Tuple`2<string, string>> tables, bool forAzure);
    private static string GetFullName(Tuple`2<string, string> nameparts);
    [CompilerGeneratedAttribute]
private static string <GetQueryForRowCount>b__0(Tuple`2<string, string> table);
}
public abstract class Microsoft.SqlServer.Dac.DataOperationStateProvider : object {
    [CompilerGeneratedAttribute]
private DataStorageType <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DataOperationIsResuming>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    public DataStorageType StorageType { get; protected set; }
    public bool DataOperationIsResuming { get; protected set; }
    public string OperationId { get; protected set; }
    [CompilerGeneratedAttribute]
public DataStorageType get_StorageType();
    [CompilerGeneratedAttribute]
protected void set_StorageType(DataStorageType value);
    [CompilerGeneratedAttribute]
public bool get_DataOperationIsResuming();
    [CompilerGeneratedAttribute]
protected void set_DataOperationIsResuming(bool value);
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
protected void set_OperationId(string value);
    public abstract virtual Task`1<DataOperationStepState> TryGetStepStateAsync(string schemaName, string tableStepName);
    public abstract virtual Task MarkStepNotStartedAsync(string schemaName, string tableStepName);
    public abstract virtual Task MarkStepStartedAsync(string schemaName, string tableStepName);
    public abstract virtual Task MarkStepCompleteAsync(string schemaName, string tableStepName);
    public abstract virtual Task`1<bool> CleanupDataStorageAsync(string schemaName, string tableStepName);
}
public enum Microsoft.SqlServer.Dac.DataOperationStepState : Enum {
    public int value__;
    public static DataOperationStepState NotStarted;
    public static DataOperationStepState Started;
    public static DataOperationStepState Complete;
    public static DataOperationStepState NotFound;
}
public enum Microsoft.SqlServer.Dac.DataStorageType : Enum {
    public int value__;
    public static DataStorageType AzureStorage;
    public static DataStorageType LocalStorage;
}
internal class Microsoft.SqlServer.Dac.DeployBigDataOperation : object {
    private SqlConnectionFactory _connectionFactory;
    private string _targetDatabaseName;
    private DacDeployOptions _deployOptions;
    private IOperation _innerOperation;
    [CompilerGeneratedAttribute]
private DataSchemaModel <SchemaModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorManager <ErrManager>k__BackingField;
    internal DataSchemaModel SchemaModel { get; internal set; }
    internal ErrorManager ErrManager { get; internal set; }
    internal DeployBigDataOperation(SqlConnectionFactory connectionFactory, string targetDatabaseName, DataSchemaModel schemaModel, DacDeployOptions options, DacLoggingContext loggingContext);
    [CompilerGeneratedAttribute]
internal DataSchemaModel get_SchemaModel();
    [CompilerGeneratedAttribute]
internal void set_SchemaModel(DataSchemaModel value);
    [CompilerGeneratedAttribute]
internal ErrorManager get_ErrManager();
    [CompilerGeneratedAttribute]
internal void set_ErrManager(ErrorManager value);
    private IOperation CreateExecutionOperation(DacLoggingContext loggingContext);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Run(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Abort(OperationContext context);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(SqlConnectionStringBuilder builder);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.DataDeployment : object {
    public void Dispose();
    private void Dispose(bool disposing);
    public void UpdateDatabase(DatabasePointer source, DatabasePointer target, DataDeploymentOptions options, SqlConnectionFactory targetConnectionFactory);
    public void UpdateDatabase(DatabasePointer source, DatabasePointer target, DataDeploymentOptions options, SqlConnectionFactory targetConnectionFactory, LoggingContext loggingContext, Action`1<TextWriter> openScriptWriterCallback, CancellationToken cancelToken);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.DataDeploymentOptions : object {
    private List`1<Tuple`2<string, string>> _includedTables;
    private List`1<Tuple`3<string, string, string>> _excludedColumns;
    [CompilerGeneratedAttribute]
private bool <DeleteExistingTableData>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultTableSelection <TableSelectionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private DacSchemaModelStorageType <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDatabaseName>k__BackingField;
    public bool DeleteExistingTableData { get; public set; }
    public DefaultTableSelection TableSelectionPolicy { get; public set; }
    public DacSchemaModelStorageType StorageType { get; public set; }
    public string TargetDatabaseName { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DeleteExistingTableData();
    [CompilerGeneratedAttribute]
public void set_DeleteExistingTableData(bool value);
    [CompilerGeneratedAttribute]
public DefaultTableSelection get_TableSelectionPolicy();
    [CompilerGeneratedAttribute]
public void set_TableSelectionPolicy(DefaultTableSelection value);
    [CompilerGeneratedAttribute]
public DacSchemaModelStorageType get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(DacSchemaModelStorageType value);
    [CompilerGeneratedAttribute]
public string get_TargetDatabaseName();
    [CompilerGeneratedAttribute]
public void set_TargetDatabaseName(string value);
    public void AddSelectedTable(Tuple`2<string, string> tableName);
    public void AddExcludedColumn(Tuple`3<string, string, string> columnName);
    internal IEnumerable`1<Tuple`2<string, string>> GetSelectedTables();
    internal IEnumerable`1<Tuple`3<string, string, string>> GetExcludedColumns();
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.DataPlanGenerator : object {
    public DataPlanHandle CreatePlan(DatabasePointer source, DatabasePointer target, DataDeploymentOptions options, LoggingContext loggingContext, CancellationToken cancelToken);
    private DataPlanStrategy InitializeStrategy(PlanCreationContext ctx);
    private void InitializeModels(PlanCreationContext ctx, DatabasePointer source, DatabasePointer target);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.DataPlanHandle : object {
    [CompilerGeneratedAttribute]
private BacpacPackage <SourceData>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentPlan <Plan>k__BackingField;
    internal BacpacPackage SourceData { get; internal set; }
    internal DeploymentPlan Plan { get; internal set; }
    [CompilerGeneratedAttribute]
internal BacpacPackage get_SourceData();
    [CompilerGeneratedAttribute]
internal void set_SourceData(BacpacPackage value);
    [CompilerGeneratedAttribute]
internal DeploymentPlan get_Plan();
    [CompilerGeneratedAttribute]
internal void set_Plan(DeploymentPlan value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal abstract class Microsoft.SqlServer.Dac.Deployment.Data.DataPlanStrategy : object {
    protected PlanCreationContext _ctx;
    private SqlScriptGenerator _scriptGenerator;
    protected SqlScriptGenerator ScriptGenerator { get; }
    protected PlanCreationContext PlanContext { get; }
    protected DataPlanStrategy(PlanCreationContext ctx);
    protected SqlScriptGenerator get_ScriptGenerator();
    protected PlanCreationContext get_PlanContext();
    public DeploymentPlan CreatePlan();
    protected virtual void AppendInitializeConnectionSteps(DeploymentPlan plan);
    protected abstract virtual void AppendUpdateSteps(DeploymentPlan plan);
    internal virtual void InitializeHandle(DataPlanHandle planHandle);
}
internal enum Microsoft.SqlServer.Dac.Deployment.Data.DefaultTableSelection : Enum {
    public int value__;
    public static DefaultTableSelection None;
    public static DefaultTableSelection AllTablesWithData;
    public static DefaultTableSelection OnlySelectedTables;
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.PlanCreationContext : object {
    private LoggingContext _loggingContext;
    private CancellationToken _cancelToken;
    private HashSet`1<SqlElementDescriptor> _selectedTableDescriptors;
    private HashSet`1<SqlElementDescriptor> _excludedColumnDescriptors;
    private Dictionary`2<SqlTableBase, Dictionary`2<SqlConstraint, ConstraintData>> _tableConstraintMap;
    private HashSet`1<SqlTableBase> _selectedTables;
    [CompilerGeneratedAttribute]
private SqlSchemaModel <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlSchemaModel <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private DataDeploymentOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private BacpacPackage <SourceData>k__BackingField;
    public SqlSchemaModel Source { get; public set; }
    public SqlSchemaModel Target { get; public set; }
    public DataDeploymentOptions Options { get; public set; }
    internal BacpacPackage SourceData { get; internal set; }
    public HashSet`1<SqlElementDescriptor> SelectedTableDescriptors { get; }
    public HashSet`1<SqlElementDescriptor> ExcludedColumnDescriptors { get; }
    public HashSet`1<SqlTableBase> SelectedTables { get; }
    public Dictionary`2<SqlTableBase, Dictionary`2<SqlConstraint, ConstraintData>> TableConstraintMap { get; }
    public CancellationToken Cancel { get; }
    public LoggingContext LoggingContext { get; }
    public PlanCreationContext(LoggingContext loggingContext, CancellationToken cancelToken);
    [CompilerGeneratedAttribute]
public SqlSchemaModel get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(SqlSchemaModel value);
    [CompilerGeneratedAttribute]
public SqlSchemaModel get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(SqlSchemaModel value);
    [CompilerGeneratedAttribute]
public DataDeploymentOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(DataDeploymentOptions value);
    [CompilerGeneratedAttribute]
internal BacpacPackage get_SourceData();
    [CompilerGeneratedAttribute]
internal void set_SourceData(BacpacPackage value);
    public HashSet`1<SqlElementDescriptor> get_SelectedTableDescriptors();
    public HashSet`1<SqlElementDescriptor> get_ExcludedColumnDescriptors();
    public HashSet`1<SqlTableBase> get_SelectedTables();
    public Dictionary`2<SqlTableBase, Dictionary`2<SqlConstraint, ConstraintData>> get_TableConstraintMap();
    public CancellationToken get_Cancel();
    public LoggingContext get_LoggingContext();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public void BroadcastMessage(DataSchemaError message);
    internal void PopulateIncludedTables(HashSet`1<SqlElementDescriptor> possibleDataTables);
    internal void PopulateTableConstraintMap(ConstraintManager cm, DatabasePointer sourcePointer, ModelComparisonResult modelDiff);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.RipReplaceStrategy : DataPlanStrategy {
    [CompilerGeneratedAttribute]
private static Func`2<SqlTableBase, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Predicate`1<GraphElem> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<SqlIndex, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    public RipReplaceStrategy(PlanCreationContext ctx);
    internal virtual void InitializeHandle(DataPlanHandle planHandle);
    private void CreateDependencyGraph(SqlTable table, List`1& result);
    private GraphElem AddToListIfNeeded(List`1& list, IModelElement modelObject, GraphElem child);
    private void GetImmediateParents(List`1& result, GraphElem child);
    private List`1<SqlModelElement> GetOrderedListOfSchemaBoundTemporalObjects();
    protected virtual void AppendUpdateSteps(DeploymentPlan plan);
    private DeploymentScriptStep CreateSetVariablesStep();
    private HashSet`1<SqlSecurityPolicy> GetSecurityPoliciesContainingBlockPredicates(HashSet`1<SqlModelElement> temporalBoundElementsToDrop);
    [CompilerGeneratedAttribute]
private static bool <GetOrderedListOfSchemaBoundTemporalObjects>b__8(SqlTableBase t);
    [CompilerGeneratedAttribute]
private static bool <GetOrderedListOfSchemaBoundTemporalObjects>b__a(GraphElem e);
    [CompilerGeneratedAttribute]
private static bool <AppendUpdateSteps>b__12(SqlIndex i);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.BeginDataUpdateStep : EmptyStep {
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.DisableConstraintsStep : DeploymentScriptDomStep {
    public DisableConstraintsStep(SqlScriptGenerator scriptGenerator, IEnumerable`1<ConstraintData> constraints);
    private void GenerateStatements(IEnumerable`1<ConstraintData> constraints);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.DisableDmlTriggersStep : DeploymentScriptDomStep {
    [CompilerGeneratedAttribute]
private static Func`2<SqlTableBase, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<SqlDmlTrigger, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<SqlDmlTrigger, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    public DisableDmlTriggersStep(SqlScriptGenerator scriptGenerator, IEnumerable`1<SqlTableBase> tables);
    private void GenerateStatements(IEnumerable`1<SqlTableBase> tables);
    [CompilerGeneratedAttribute]
private static bool <GenerateStatements>b__3(SqlTableBase t);
    [CompilerGeneratedAttribute]
private static bool <GenerateStatements>b__5(SqlDmlTrigger t);
    [CompilerGeneratedAttribute]
private static bool <GenerateStatements>b__4(SqlDmlTrigger trigger);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.DisableNonClusteredColumnStoreIndexesStep : DeploymentScriptDomStep {
    public DisableNonClusteredColumnStoreIndexesStep(SqlScriptGenerator scriptGenerator, IEnumerable`1<SqlTableBase> tables);
    private TSqlFragment GenerateStatements(IEnumerable`1<SqlTableBase> tables);
    internal static bool IsValidEnabledNonClusteredColumnStoreIndex(SqlTableBase table, SqlColumnStoreIndex columnStoreIndex);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.EnableConstraintsStep : DeploymentScriptDomStep {
    public EnableConstraintsStep(SqlScriptGenerator scriptGenerator, IEnumerable`1<ConstraintData> constraints);
    private void GenerateStatements(IEnumerable`1<ConstraintData> constraints);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.EnableDisableSecurityPoliciesStep : DeploymentScriptDomStep {
    public EnableDisableSecurityPoliciesStep(SqlScriptGenerator scriptGenerator, IEnumerable`1<SqlSecurityPolicy> policies, bool isEnableStep);
    private TSqlScript GenerateStatements(IEnumerable`1<SqlSecurityPolicy> policies, bool isEnableStep);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.EnableDmlTriggersStep : DeploymentScriptDomStep {
    [CompilerGeneratedAttribute]
private static Func`2<SqlTableBase, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<SqlDmlTrigger, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<SqlDmlTrigger, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    public EnableDmlTriggersStep(SqlScriptGenerator scriptGenerator, IEnumerable`1<SqlTableBase> tables);
    private void GenerateStatements(IEnumerable`1<SqlTableBase> tables);
    [CompilerGeneratedAttribute]
private static bool <GenerateStatements>b__3(SqlTableBase t);
    [CompilerGeneratedAttribute]
private static bool <GenerateStatements>b__5(SqlDmlTrigger t);
    [CompilerGeneratedAttribute]
private static bool <GenerateStatements>b__4(SqlDmlTrigger trigger);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.EnableNonClusteredColumnStoreIndexesStep : DeploymentScriptDomStep {
    public EnableNonClusteredColumnStoreIndexesStep(SqlScriptGenerator scriptGenerator, IEnumerable`1<SqlTableBase> tables);
    private TSqlFragment GenerateStatements(IEnumerable`1<SqlTableBase> tables);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.EndDataUpdateStep : EmptyStep {
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.SetDatabaseReadOnlyStep : DeploymentScriptDomStep {
    public SetDatabaseReadOnlyStep(SqlScriptGenerator scriptGenerator, bool isAzure);
}
internal class Microsoft.SqlServer.Dac.Deployment.Data.Steps.SetDatabaseReadWriteStep : DeploymentScriptDomStep {
    public SetDatabaseReadWriteStep(SqlScriptGenerator scriptGenerator, bool isAzure);
}
internal class Microsoft.SqlServer.Dac.Deployment.DatabasePointer : object {
    private Func`2<ModelStorageType, SqlSchemaModel> _loadModel;
    private Func`1<Stream> _openStream;
    private Func`1<BacpacPackage> _openPackage;
    private Func`1<ConstraintManager> _loadConstraintManager;
    private bool _canceled;
    [CompilerGeneratedAttribute]
private static Func`1<ConstraintManager> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`1<SqlConnectionStringBuilder> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`1<Stream> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`1<BacpacPackage> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`1<Stream> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`1<BacpacPackage> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`1<ConstraintManager> CS$<>9__CachedAnonymousMethodDelegate1b;
    public DatabasePointer(FileInfo packageFile);
    public DatabasePointer(SqlConnectionFactory connectionFactory);
    public DatabasePointer(SqlSchemaModel model);
    public void Cancel();
    internal static List`1<ConstraintData> AddNewConstraints(ConstraintManager cm, SqlConnectionFactory connectionFactory);
    internal ConstraintManager InitializeConstraintManager();
    internal BacpacPackage LoadData();
    internal SqlSchemaModel LoadModel(DacSchemaModelStorageType storageType);
    internal HashSet`1<SqlElementDescriptor> LoadDataTables(SqlSchemaModel model);
    internal Dictionary`2<SqlTableBase, Dictionary`2<SqlConstraint, ConstraintData>> GetConstraintMap(ConstraintManager cm, SqlSchemaModel sourceModel, ICollection`1<SqlTableBase> tables, ModelComparisonResult modelDiff);
    protected virtual ConstraintData OnLookupConstraintData(SqlConstraint sourceConstraint, Dictionary`2<SqlElementDescriptor, ConstraintData> constraintDataLookup, ModelComparisonResult modelDiff);
    protected virtual HashSet`1<SqlElementDescriptor> OnLoadDataTables(SqlSchemaModel model);
    protected virtual ConstraintManager OnInitializeConstrainManager();
    protected virtual SqlSchemaModel OnLoadModel(DacSchemaModelStorageType storageType);
    protected virtual BacpacPackage OnLoadData();
    private SqlSchemaModel LoadDatabaseModel(ModelStorageType storageType, SqlConnectionFactory connectionFactory);
    private static SqlReverseEngineerConstructor CreateReverseEngineerConstructor(ExtensionManager em);
    [CompilerGeneratedAttribute]
private static ConstraintManager <.ctor>b__3();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__a(SqlConnectionStringBuilder builder);
    [CompilerGeneratedAttribute]
private static Stream <.ctor>b__c();
    [CompilerGeneratedAttribute]
private static BacpacPackage <.ctor>b__d();
    [CompilerGeneratedAttribute]
private static Stream <.ctor>b__15();
    [CompilerGeneratedAttribute]
private static BacpacPackage <.ctor>b__16();
    [CompilerGeneratedAttribute]
private static ConstraintManager <.ctor>b__17();
    [CompilerGeneratedAttribute]
private void <LoadDatabaseModel>b__1e(object sender, CancelEventArgs cancelArgs);
}
internal class Microsoft.SqlServer.Dac.Deployment.PlanExecutor : object {
    private EventHandler`1<DeploymentContributorEventArgs> DeploymentMessage;
    [CompilerGeneratedAttribute]
private static Action`1<SqlConnectionStringBuilder> CS$<>9__CachedAnonymousMethodDelegate2;
    public void add_DeploymentMessage(EventHandler`1<DeploymentContributorEventArgs> value);
    public void remove_DeploymentMessage(EventHandler`1<DeploymentContributorEventArgs> value);
    private void OnDeploymentMessage(DeploymentContributorEventArgs args);
    public void Execute(DeploymentPlan plan, SqlConnectionFactory connectionFactory, bool isAzureTarget);
    public void Execute(DeploymentPlan plan, SqlConnectionFactory connectionFactory, bool isAzureTarget, LoggingContext loggingContext, CancellationToken cancelToken);
    private void PopulateConnectionFactory(DeploymentPlan plan, SqlConnectionFactory connectionFactory);
    [CompilerGeneratedAttribute]
private static void <Execute>b__0(SqlConnectionStringBuilder builder);
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Dac.DeploymentPropertyAliasAttribute : Attribute {
    private string _alias;
    public string Alias { get; }
    public DeploymentPropertyAliasAttribute(string alias);
    public string get_Alias();
}
internal class Microsoft.SqlServer.Dac.DeployOperation : object {
    private bool _isDacpac;
    private ErrorManager _errorManager;
    private IOperation _innerOperation;
    private IDeploymentController _controller;
    private CancellationTokenRegistration _controllerCancellationRegistration;
    private Stream _packageStream;
    private BacpacPackage _dataPackage;
    private DataPlanHandle _dataPlan;
    private DeploymentPlan _schemaPlan;
    private HashSet`1<SqlTable> _dataTables;
    private ConstraintManager _cm;
    [CompilerGeneratedAttribute]
private Guid <DacRegistrationInstanceId>k__BackingField;
    internal DataSchemaModel SourceSchemaModel { get; }
    private Guid DacRegistrationInstanceId { get; public set; }
    internal DeployOperation(SqlConnectionFactory connectionFactory, IPackageSource packageSource, bool isDacpac, string targetDatabaseName, DacDeployOptions options, DacLoggingContext loggingContext, Func`2<IList`1<string>, IList`1<string>> akvValidationCallback, Action`3<IDeploymentController, DeploymentPlan, ErrorManager> reportPlanOperation, bool executePlan);
    internal DataSchemaModel get_SourceSchemaModel();
    [CompilerGeneratedAttribute]
private Guid get_DacRegistrationInstanceId();
    [CompilerGeneratedAttribute]
public void set_DacRegistrationInstanceId(Guid value);
    private IOperation CreatePlanInitializationOperation(SqlConnectionFactory connectionFactory, IPackageSource packageSource, string targetDatabaseName, DacDeployOptions options, DacLoggingContext loggingContext);
    private EventHandler`1<DeploymentContributorEventArgs> CreateDeploymentMessageHandler(CancellationToken token);
    private void ThrowIfErrorManagerHasErrors();
    private IOperation CreatePlanVerificationOperation(DacLoggingContext loggingContext, Func`2<IList`1<string>, IList`1<string>> akvValidationCallback);
    private IOperation CreatePlanReportOperation(DacLoggingContext loggingContext, Action`3<IDeploymentController, DeploymentPlan, ErrorManager> reportPlanOperation);
    private IOperation CreatePlanExecutionOperation(DacLoggingContext loggingContext);
    private IOperation CreateRegisterOperation(DacLoggingContext loggingContext);
    private void UpdateDatabaseData(LoggingContext loggingContext, CancellationToken token);
    private void SnapshotConstraintState();
    private SqlConnectionFactory GetDatabaseConnectionFactory();
    private void SetupDataIntegration();
    private static IEnumerable`1<SqlTable> GetTablesWithData(BacpacPackage dataPackage, DataSchemaModel model);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Run(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Abort(OperationContext context);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <CreateRegisterOperation>b__18(object operation, CancellationToken token);
    [CompilerGeneratedAttribute]
private bool <SetupDataIntegration>b__19(SqlTableBase t);
}
public enum Microsoft.SqlServer.Dac.EngineVersion : Enum {
    public int value__;
    public static EngineVersion Default;
    public static EngineVersion Latest;
    public static EngineVersion V11;
    public static EngineVersion V12;
}
internal static class Microsoft.SqlServer.Dac.ExceptionHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<DataSchemaError, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<DataSchemaError, Exception> CS$<>9__CachedAnonymousMethodDelegate3;
    internal static DacServicesException CreateServiceException(string message, IEnumerable`1<string> errorMessages);
    internal static DacServicesException CreateServiceException(string message, IEnumerable`1<DataSchemaError> errors, Exception innerException);
    internal static DacServicesException CreateServiceException(string message, IEnumerable`1<DacMessage> errors);
    internal static DacServicesException CreateServiceException(string message, ErrorManager errorManager);
    internal static DacServicesException CreateServiceException(string message, ErrorManager errorManager, Exception innerException);
    internal static DacServicesException CreateServiceException(string message);
    internal static DacServicesException CreateServiceException(string message, Exception innerException);
    private static void TraceException(Exception exception);
    [CompilerGeneratedAttribute]
private static bool <CreateServiceException>b__0(DataSchemaError error);
    [CompilerGeneratedAttribute]
private static Exception <CreateServiceException>b__1(DataSchemaError error);
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Dac.Extensions.DacExtensions : object {
    [ExtensionAttribute]
public static string GetCollationString(DacPackage package);
    [ExtensionAttribute]
public static string GetCollationString(BacPackage package);
    public static void SetServiceSetting(DacServices service, string settingName, object settingValue);
    public static void SetServiceLogSetting(DacServices service, string settingName, object settingValue);
    private static string GetCollationString(IPackageSource packageSource);
}
internal class Microsoft.SqlServer.Dac.ExtractBigDataOperation : object {
    private SqlConnectionFactory _connectionFactory;
    private DacExtractOptions _extractOptions;
    private IOperation _innerOperation;
    [CompilerGeneratedAttribute]
private DataSchemaModel <SchemaModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorManager <ErrManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPath>k__BackingField;
    internal DataSchemaModel SchemaModel { get; internal set; }
    internal ErrorManager ErrManager { get; internal set; }
    internal string DataPath { get; private set; }
    internal ExtractBigDataOperation(SqlConnectionFactory connectionFactory, string databaseName, DacExtractOptions extractOptions, DacLoggingContext loggingContext, DataSchemaModel schemaModel);
    [CompilerGeneratedAttribute]
internal DataSchemaModel get_SchemaModel();
    [CompilerGeneratedAttribute]
internal void set_SchemaModel(DataSchemaModel value);
    [CompilerGeneratedAttribute]
internal ErrorManager get_ErrManager();
    [CompilerGeneratedAttribute]
internal void set_ErrManager(ErrorManager value);
    [CompilerGeneratedAttribute]
internal string get_DataPath();
    [CompilerGeneratedAttribute]
private void set_DataPath(string value);
    private IOperation CreateExecutionOperation(DacLoggingContext loggingContext);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Run(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Abort(OperationContext context);
}
internal class Microsoft.SqlServer.Dac.ExtractCleanupBigDataOperation : object {
    private SqlConnectionFactory _connectionFactory;
    private DacExtractOptions _extractOptions;
    private IOperation _innerOperation;
    private IList`1<SqlExternalTable> _sqlExternalTablesFromExtract;
    [CompilerGeneratedAttribute]
private ErrorManager <ErrManager>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSchemaModel <SchemaModel>k__BackingField;
    internal ErrorManager ErrManager { get; internal set; }
    internal DataSchemaModel SchemaModel { get; internal set; }
    internal ExtractCleanupBigDataOperation(SqlConnectionFactory connectionFactory, string databaseName, DacExtractOptions extractOptions, DacLoggingContext loggingContext, DataSchemaModel schemaModel);
    [CompilerGeneratedAttribute]
internal ErrorManager get_ErrManager();
    [CompilerGeneratedAttribute]
internal void set_ErrManager(ErrorManager value);
    [CompilerGeneratedAttribute]
internal DataSchemaModel get_SchemaModel();
    [CompilerGeneratedAttribute]
internal void set_SchemaModel(DataSchemaModel value);
    internal void CleanupSchemaModel();
    private IOperation CreateExecutionOperation(DacLoggingContext loggingContext);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Run(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Abort(OperationContext context);
}
internal class Microsoft.SqlServer.Dac.ExtractOperation : object {
    private static int DefaultExtractAzureRetryCount;
    private static string NoUnresolvedReferencesValidatonRuleName;
    private bool _verifyExtraction;
    private DataSchemaModel _schemaModel;
    private IOperation _innerOperation;
    private DacLoggingContext _loggingContext;
    private bool _throwOnValidationErrors;
    private ErrorManager _errorManager;
    private bool _leaveModelOpen;
    public bool ignoreIndexesStatisticsOnEnclaveEnabledColumnsFlag;
    internal DataSchemaModel SchemaModel { get; }
    internal ErrorManager ErrorManager { get; }
    internal ExtractOperation(SqlConnectionFactory connectionFactory, string databaseName, DacExtractOptions extractOptions, DacLoggingContext loggingContext, bool includeIsNotTrustedPropertyAnnotations, bool promoteDnrWarningsToErrors, bool throwOnValidationErrors, bool verifyFullTextDocumentTypesSupported, bool storeSourceCodePositionAnnotations, bool leaveModelOpen, bool ignoreIndexesStatisticsOnEnclaveEnabledColumns, bool removeUnreferencedDbCredential);
    internal DataSchemaModel get_SchemaModel();
    internal ErrorManager get_ErrorManager();
    private IOperation CreateReverseEngineerOperation(SqlConnectionFactory connectionFactory, string databaseName, DacExtractOptions extractOptions, DacLoggingContext loggingContext, bool includeIsNotTrustedPropertyAnnotations, bool storeSourceCodePositionAnnotations, ErrorManager errorManager, bool removeUnreferencedDbCredential);
    private void ThrowOnErrorsIfRequested(ErrorManager errorManager, string message, bool forceThrow);
    private IOperation CreateResolveOperation(DacExtractOptions extractOptions, ErrorManager errorManager, DacLoggingContext loggingContext);
    private IOperation CreateValidationOperation(ErrorManager errorManager, DacLoggingContext loggingContext, bool promoteDnrWarningsToErrors, bool enforceSqlAzureRestrictions);
    private IEnumerable`1<SqlValidationRule> GetValidationRules(DatabaseSchemaProvider dsp, ErrorManager errorManager, bool promoteDnrWarningsToErrors);
    internal static SqlConnectionFactory ReplaceInitialCatalog(SqlConnectionFactory connectionFactory, string databaseName);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Run(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Abort(OperationContext context);
    public sealed virtual void Dispose();
}
internal class Microsoft.SqlServer.Dac.FilePackageSource : object {
    private string _packagePath;
    private Version _packageVersion;
    private DacSchemaModelStorageType _modelStorageType;
    internal string PackagePath { get; }
    private DacSchemaModelStorageType Microsoft.SqlServer.Dac.IPackageSource.ModelStorageType { get; }
    private Version Microsoft.SqlServer.Dac.IPackageSource.PackageVersion { get; }
    internal FilePackageSource(string packagePath, DacSchemaModelStorageType modelStorageType);
    internal string get_PackagePath();
    private sealed virtual override DacSchemaModelStorageType Microsoft.SqlServer.Dac.IPackageSource.get_ModelStorageType();
    private sealed virtual override Version Microsoft.SqlServer.Dac.IPackageSource.get_PackageVersion();
    private sealed virtual override Package Microsoft.SqlServer.Dac.IPackageSource.OpenPackage();
    private sealed virtual override SqlPackage Microsoft.SqlServer.Dac.IPackageSource.OpenSqlPackage();
    private sealed virtual override SqlPackage Microsoft.SqlServer.Dac.IPackageSource.OpenSqlPackageForUpdate();
    private sealed virtual override SqlDeploymentEndpoint Microsoft.SqlServer.Dac.IPackageSource.CreateDeploymentEndpoint();
    private sealed virtual override Stream Microsoft.SqlServer.Dac.IPackageSource.GetInputStream();
    internal static void ValidatePackageVersion(Version packageVersion);
}
internal class Microsoft.SqlServer.Dac.FullTextDocumentTypesForAzureV12Utilities : object {
    private static string Query_FirstFullTextSearchObjectName;
    private static string Query_GetAllDocumentTypes;
    private static HashSet`1<string> SupportedDocumentTypes;
    private static FullTextDocumentTypesForAzureV12Utilities();
    private static bool DoesDatabaseContainFullTextSearch(IDbCommand command);
    internal static void ValidateSupportedFullTextDocumentTypesForAzureV12(SqlConnectionFactory connectionFactory, string databaseName);
}
internal interface Microsoft.SqlServer.Dac.IOperation {
    public abstract virtual void ReportStatus(OperationContext context);
    public abstract virtual void Run(OperationContext context);
    public abstract virtual void Abort(OperationContext context);
}
internal interface Microsoft.SqlServer.Dac.IPackageSource {
    public DacSchemaModelStorageType ModelStorageType { get; }
    public Version PackageVersion { get; }
    public abstract virtual DacSchemaModelStorageType get_ModelStorageType();
    public abstract virtual Version get_PackageVersion();
    public abstract virtual Package OpenPackage();
    public abstract virtual SqlPackage OpenSqlPackage();
    public abstract virtual SqlPackage OpenSqlPackageForUpdate();
    public abstract virtual SqlDeploymentEndpoint CreateDeploymentEndpoint();
    public abstract virtual Stream GetInputStream();
}
public interface Microsoft.SqlServer.Dac.IUniversalAuthProvider {
    public abstract virtual string GetValidAccessToken();
}
public class Microsoft.SqlServer.Dac.KeyVault.ClientAndSecretAuthInfo : KeyVaultAuthInfoBase {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secret>k__BackingField;
    public string ClientId { get; private set; }
    public string Secret { get; private set; }
    public ClientAndSecretAuthInfo(string clientId, string secret);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
private void set_Secret(string value);
}
public class Microsoft.SqlServer.Dac.KeyVault.DacKeyVaultService : object {
    private static Lazy`1<DacKeyVaultService> lazy;
    private ExtensionProperties _extensionProperties;
    private IDependencyManager _dependencyManager;
    private KeyVaultAuthenticator _authenticator;
    [CompilerGeneratedAttribute]
private Traceable <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlockifMissingAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<DacKeyVaultService> CS$<>9__CachedAnonymousMethodDelegateb;
    public static DacKeyVaultService Instance { get; }
    private IDependencyManager DependencyManager { get; }
    internal Traceable Trace { get; internal set; }
    public bool BlockifMissingAuthentication { get; public set; }
    private static DacKeyVaultService();
    public static DacKeyVaultService get_Instance();
    internal void SetExtensionProperties(ExtensionProperties properties);
    private IDependencyManager get_DependencyManager();
    internal void SetDependencyManager(IDependencyManager manager);
    [CompilerGeneratedAttribute]
internal Traceable get_Trace();
    [CompilerGeneratedAttribute]
internal void set_Trace(Traceable value);
    public void UpdateAuthInfo(KeyVaultAuthInfoBase authInfo);
    public void InitializeAuthenticator();
    [CompilerGeneratedAttribute]
public bool get_BlockifMissingAuthentication();
    [CompilerGeneratedAttribute]
public void set_BlockifMissingAuthentication(bool value);
    public KeyVaultValidationResult Validate(IList`1<string> keyVaultUrls, CancellationToken cancelToken);
    private void SafeExecuteExtension(Action action);
    private T SafeExecuteExtension(Func`1<T> func);
    [CompilerGeneratedAttribute]
private void <InitializeAuthenticator>b__4();
    [CompilerGeneratedAttribute]
private static DacKeyVaultService <.cctor>b__a();
}
public abstract class Microsoft.SqlServer.Dac.KeyVault.KeyVaultAuthenticator : ExportableBase {
    public abstract virtual Task`1<string> GetToken(string authority, string resource, string scope);
    public abstract virtual void UpdateAuthInfo(KeyVaultAuthInfoBase authInfo);
    public abstract virtual void InitializeAuthenticator();
    public abstract virtual KeyVaultValidationResult Validate(IList`1<string> keyVaultUrls, CancellationToken cancelToken);
}
public abstract class Microsoft.SqlServer.Dac.KeyVault.KeyVaultAuthInfoBase : object {
}
public class Microsoft.SqlServer.Dac.KeyVault.KeyVaultValidationResult : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ValidationErrors>k__BackingField;
    public bool IsValid { get; public set; }
    public IList`1<string> ValidationErrors { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ValidationErrors();
    [CompilerGeneratedAttribute]
public void set_ValidationErrors(IList`1<string> value);
    public void AddError(string message);
}
public class Microsoft.SqlServer.Dac.LogObjectHashedEventArgs : EventArgs {
    private string _originalValue;
    private string _hashValue;
    public string OriginalValue { get; }
    public string HashValue { get; }
    internal LogObjectHashedEventArgs(string originalValue, string hashValue);
    public string get_OriginalValue();
    public string get_HashValue();
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Dac.ModelValidation : object {
    private static string DboSchemaName;
    private static string SysSchemaName;
    private static string InformationSchemaName;
    private static IEnumerable`1<ModelElementClass> UnsupportedElementClasses;
    private static IDictionary`2<ModelElementClass, IEnumerable`1<ModelPropertyClass>> PartiallySupportedElementClasses;
    private static Tuple`2[] AzureSpecialCaseAnalyzers;
    private static ISet`1<ModelElementClass> ExcludedElementClasses;
    public static Lazy`1<SqlValidationRule> UndeployableElementValidationRule;
    public static Lazy`1<SqlValidationRule> NoUnresolvedReferencesValidatonRule;
    [CompilerGeneratedAttribute]
private static Func`1<SqlValidationRule> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`1<SqlValidationRule> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action`4<IModelElement, CancellationToken, Action`1<DacMessage>, UserInteractionServices> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Action`4<IModelElement, CancellationToken, Action`1<DacMessage>, UserInteractionServices> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Action`4<IModelElement, CancellationToken, Action`1<DacMessage>, UserInteractionServices> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Action`4<IModelElement, CancellationToken, Action`1<DacMessage>, UserInteractionServices> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Action`4<IModelElement, CancellationToken, Action`1<DacMessage>, UserInteractionServices> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Action`4<IModelElement, CancellationToken, Action`1<DacMessage>, UserInteractionServices> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Action`4<IModelElement, CancellationToken, Action`1<DacMessage>, UserInteractionServices> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`1<DataSchemaModel> CS$<>9__CachedAnonymousMethodDelegate1c;
    private static ModelValidation();
    internal static void CheckForUnsupportedAzureV1SchemaForBacpacData(DataSchemaModel model, IEnumerable`1<SqlTableBase> tables, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler);
    private static DacMessage CreateErrorMessage(UserInteractionServices userInteractionServices, IModelElement element, string message);
    private static void VerifyClrClassDefined(ISqlClrClassDefined clrObject, CancellationToken token, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void VerifySqlAssembly(SqlAssembly assembly, CancellationToken token, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    public static void CheckForSecurityPolicy(DataSchemaModel model, IList`1<SqlTableBase> tableElements, DacLoggingContext loggingContext);
    public static void CheckForUnmaskPermissionsNeeded(DataSchemaModel model, IList`1<SqlTableBase> tableElements, DacLoggingContext loggingContext);
    internal static void CheckForForeignKeyClosureInTables(DataSchemaModel model, IEnumerable`1<SqlTableBase> tableElements, bool checkDataTablesOnly, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler);
    internal static IList`1<SqlTableBase> CheckForAndFilterFileTables(DataSchemaModel model, IList`1<SqlTableBase> tables, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler);
    internal static void CheckForUnsupportedSchemaForDacpacData(DataSchemaModel model, IList`1<SqlTableBase> tables, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler);
    private static void VerifyTable(SqlTable table, CancellationToken token, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void VerifySqlTableHasClusteredIndex(SqlTable table, CancellationToken token, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void VerifySqlUser(SqlUser user, CancellationToken token, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void VerifySqlLogin(SqlLogin login, CancellationToken token, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void VerifyDataCompressionOptions(ISqlSpecifiesDataCompressionOptions specifiesDataCompressionOptions, CancellationToken token, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void VerifyPermissions(SqlPermissionStatement sqlPermissionStatement, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void CheckForUnsupportedColumns(DataSchemaModel model, IList`1<SqlTableBase> tables, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler);
    private static void CheckForUnsupportedElementTypeForData(ModelElementClass elementClass, DataSchemaModel model, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler);
    private static void CheckForUnsupportedProperties(DataSchemaModel model, ModelElementClass elementClass, IEnumerable`1<ModelPropertyClass> unsupportedProperties, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices);
    private static void VerifyProperty(Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices, IModelElement element, ModelPropertyClass propertyClass);
    public static void ReportUnsupportedRelationship(Action`1<DacMessage> errorHandler, UserInteractionServices userInteractionServices, IModelElement element, string relationshipName);
    private static void ReportUnsupportedElements(IEnumerable`1<IModelElement> elements, UserInteractionServices userInteractionServices, CancellationToken cancellationToken, Action`1<DacMessage> errorHandler);
    [ExtensionAttribute]
internal static IEnumerable`1<T> ToCancelableEnumerable(IEnumerable`1<T> source, CancellationToken cancellationToken);
    public static void ExecuteValidationRules(DataSchemaModel _schemaModel, IEnumerable`1<SqlAnalysisRule> rules, ErrorManager errorManager, bool enforceSqlAzureRestrictions);
    private static bool IsExternalReferenceError(int errorCode);
    [CompilerGeneratedAttribute]
private static SqlValidationRule <.cctor>b__1();
    [CompilerGeneratedAttribute]
private static SqlValidationRule <.cctor>b__2();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(IModelElement element, CancellationToken cancellationToken, Action`1<DacMessage> handler, UserInteractionServices service);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(IModelElement element, CancellationToken cancellationToken, Action`1<DacMessage> handler, UserInteractionServices service);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(IModelElement element, CancellationToken cancellationToken, Action`1<DacMessage> handler, UserInteractionServices service);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(IModelElement element, CancellationToken cancellationToken, Action`1<DacMessage> handler, UserInteractionServices service);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(IModelElement element, CancellationToken cancellationToken, Action`1<DacMessage> handler, UserInteractionServices service);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(IModelElement element, CancellationToken cancellationToken, Action`1<DacMessage> handler, UserInteractionServices service);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(IModelElement element, CancellationToken cancellationToken, Action`1<DacMessage> handler, UserInteractionServices service);
    [CompilerGeneratedAttribute]
private static DataSchemaModel <ExecuteValidationRules>b__1b();
}
[AttributeUsageAttribute("128")]
public class Microsoft.SqlServer.Dac.NestedDeploymentPropertyAttribute : Attribute {
}
public enum Microsoft.SqlServer.Dac.ObjectType : Enum {
    public int value__;
    public static ObjectType Aggregates;
    public static ObjectType ApplicationRoles;
    public static ObjectType Assemblies;
    public static ObjectType AssemblyFiles;
    public static ObjectType AsymmetricKeys;
    public static ObjectType BrokerPriorities;
    public static ObjectType Certificates;
    public static ObjectType ColumnEncryptionKeys;
    public static ObjectType ColumnMasterKeys;
    public static ObjectType Contracts;
    public static ObjectType DatabaseOptions;
    public static ObjectType DatabaseRoles;
    public static ObjectType DatabaseTriggers;
    public static ObjectType Defaults;
    public static ObjectType ExtendedProperties;
    public static ObjectType ExternalDataSources;
    public static ObjectType ExternalFileFormats;
    public static ObjectType ExternalTables;
    public static ObjectType Filegroups;
    public static ObjectType Files;
    public static ObjectType FileTables;
    public static ObjectType FullTextCatalogs;
    public static ObjectType FullTextStoplists;
    public static ObjectType MessageTypes;
    public static ObjectType PartitionFunctions;
    public static ObjectType PartitionSchemes;
    public static ObjectType Permissions;
    public static ObjectType Queues;
    public static ObjectType RemoteServiceBindings;
    public static ObjectType RoleMembership;
    public static ObjectType Rules;
    public static ObjectType ScalarValuedFunctions;
    public static ObjectType SearchPropertyLists;
    public static ObjectType SecurityPolicies;
    public static ObjectType Sequences;
    public static ObjectType Services;
    public static ObjectType Signatures;
    public static ObjectType StoredProcedures;
    public static ObjectType SymmetricKeys;
    public static ObjectType Synonyms;
    public static ObjectType Tables;
    public static ObjectType TableValuedFunctions;
    public static ObjectType UserDefinedDataTypes;
    public static ObjectType UserDefinedTableTypes;
    public static ObjectType ClrUserDefinedTypes;
    public static ObjectType Users;
    public static ObjectType Views;
    public static ObjectType XmlSchemaCollections;
    public static ObjectType Audits;
    public static ObjectType Credentials;
    public static ObjectType CryptographicProviders;
    public static ObjectType DatabaseAuditSpecifications;
    public static ObjectType DatabaseEncryptionKeys;
    public static ObjectType DatabaseScopedCredentials;
    public static ObjectType Endpoints;
    public static ObjectType ErrorMessages;
    public static ObjectType EventNotifications;
    public static ObjectType EventSessions;
    public static ObjectType LinkedServerLogins;
    public static ObjectType LinkedServers;
    public static ObjectType Logins;
    public static ObjectType MasterKeys;
    public static ObjectType Routes;
    public static ObjectType ServerAuditSpecifications;
    public static ObjectType ServerRoleMembership;
    public static ObjectType ServerRoles;
    public static ObjectType ServerTriggers;
    public static ObjectType ExternalStreams;
    public static ObjectType ExternalStreamingJobs;
    public static ObjectType DatabaseWorkloadGroups;
    public static ObjectType WorkloadClassifiers;
    public static ObjectType ExternalLibraries;
    public static ObjectType ExternalLanguages;
}
internal class Microsoft.SqlServer.Dac.Operation : object {
    private Action`2<object, CancellationToken> _action;
    private DacOperationStatus _status;
    private string _caption;
    internal Operation(string caption, Action`2<object, CancellationToken> action);
    private void ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Run(OperationContext context);
    private void Abort(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Abort(OperationContext context);
    public virtual string ToString();
}
internal class Microsoft.SqlServer.Dac.OperationContext : object {
    private DacLoggingContext _loggingContext;
    private CancellationToken _cancellationToken;
    private bool _operationCancelled;
    internal CancellationToken CancellationToken { get; }
    internal bool OperationCancelled { get; }
    internal OperationContext(DacLoggingContext loggingContext, CancellationToken cancellationToken);
    internal CancellationToken get_CancellationToken();
    internal void ReportProgress(object eventSender, DacOperationStatus status, string message);
    internal bool get_OperationCancelled();
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Dac.OperationExtension : object {
    [ExtensionAttribute]
internal static void Execute(IOperation operation, DacLoggingContext loggingContext, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static IOperation Combine(IOperation first, IOperation second);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Dac.OperationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BacpacModelValidationCaption { get; }
    internal static string CreatingDeploymentPlanCaption { get; }
    internal static string DeployBigDataCaption { get; }
    internal static string DeployCaption { get; }
    internal static string DisablingIndexesCaption { get; }
    internal static string EnablingIndexesCaption { get; }
    internal static string ExecutingDeploymentPlanCaption { get; }
    internal static string ExportCaption { get; }
    internal static string ExtractBigDataCaption { get; }
    internal static string GenerateDeployReportCaption { get; }
    internal static string GenerateDeployScriptCaption { get; }
    internal static string GenerateDriftReportCaption { get; }
    internal static string HistoryUpdateDisabled { get; }
    internal static string ImportCaption { get; }
    internal static string PackageCaption { get; }
    internal static string ProcessingTable { get; }
    internal static string RegisterCaption { get; }
    internal static string RemoveLoginsMessage { get; }
    internal static string ReportDeploymentPlanCaption { get; }
    internal static string ResolverCaption { get; }
    internal static string ReverseEngineerCaption { get; }
    internal static string TranslateCaption { get; }
    internal static string UnregisterCaption { get; }
    internal static string ValidationCaption { get; }
    internal static string VerifyingDeploymentPlanCaption { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BacpacModelValidationCaption();
    internal static string get_CreatingDeploymentPlanCaption();
    internal static string get_DeployBigDataCaption();
    internal static string get_DeployCaption();
    internal static string get_DisablingIndexesCaption();
    internal static string get_EnablingIndexesCaption();
    internal static string get_ExecutingDeploymentPlanCaption();
    internal static string get_ExportCaption();
    internal static string get_ExtractBigDataCaption();
    internal static string get_GenerateDeployReportCaption();
    internal static string get_GenerateDeployScriptCaption();
    internal static string get_GenerateDriftReportCaption();
    internal static string get_HistoryUpdateDisabled();
    internal static string get_ImportCaption();
    internal static string get_PackageCaption();
    internal static string get_ProcessingTable();
    internal static string get_RegisterCaption();
    internal static string get_RemoveLoginsMessage();
    internal static string get_ReportDeploymentPlanCaption();
    internal static string get_ResolverCaption();
    internal static string get_ReverseEngineerCaption();
    internal static string get_TranslateCaption();
    internal static string get_UnregisterCaption();
    internal static string get_ValidationCaption();
    internal static string get_VerifyingDeploymentPlanCaption();
}
internal class Microsoft.SqlServer.Dac.OptionDescriptionAttribute : DescriptionAttribute {
    private PropertyInfo _property;
    public string Description { get; }
    public OptionDescriptionAttribute(Type resourceClassType, string resourcePropertyName);
    public virtual string get_Description();
}
internal class Microsoft.SqlServer.Dac.OptionDisplayNameAttribute : DisplayNameAttribute {
    private PropertyInfo _property;
    public string DisplayName { get; }
    public OptionDisplayNameAttribute(Type resourceClassType, string resourcePropertyName);
    public virtual string get_DisplayName();
}
public class Microsoft.SqlServer.Dac.PublishOptions : object {
    [CompilerGeneratedAttribute]
private bool <GenerateDeploymentScript>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDeploymentReport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseScriptPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MasterDbScriptPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DacDeployOptions <DeployOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CancellationToken> <CancelToken>k__BackingField;
    public bool GenerateDeploymentScript { get; public set; }
    public bool GenerateDeploymentReport { get; public set; }
    public string DatabaseScriptPath { get; public set; }
    public string MasterDbScriptPath { get; public set; }
    public DacDeployOptions DeployOptions { get; public set; }
    public Nullable`1<CancellationToken> CancelToken { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_GenerateDeploymentScript();
    [CompilerGeneratedAttribute]
public void set_GenerateDeploymentScript(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDeploymentReport();
    [CompilerGeneratedAttribute]
public void set_GenerateDeploymentReport(bool value);
    [CompilerGeneratedAttribute]
public string get_DatabaseScriptPath();
    [CompilerGeneratedAttribute]
public void set_DatabaseScriptPath(string value);
    [CompilerGeneratedAttribute]
public string get_MasterDbScriptPath();
    [CompilerGeneratedAttribute]
public void set_MasterDbScriptPath(string value);
    [CompilerGeneratedAttribute]
public DacDeployOptions get_DeployOptions();
    [CompilerGeneratedAttribute]
public void set_DeployOptions(DacDeployOptions value);
    [CompilerGeneratedAttribute]
public Nullable`1<CancellationToken> get_CancelToken();
    [CompilerGeneratedAttribute]
public void set_CancelToken(Nullable`1<CancellationToken> value);
}
public class Microsoft.SqlServer.Dac.PublishResult : object {
    [CompilerGeneratedAttribute]
private string <DeploymentReport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MasterDbScript>k__BackingField;
    public string DeploymentReport { get; private set; }
    public string DatabaseScript { get; private set; }
    public string MasterDbScript { get; private set; }
    public PublishResult(string deployReport, string dbScript, string masterScript);
    [CompilerGeneratedAttribute]
public string get_DeploymentReport();
    [CompilerGeneratedAttribute]
private void set_DeploymentReport(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseScript();
    [CompilerGeneratedAttribute]
private void set_DatabaseScript(string value);
    [CompilerGeneratedAttribute]
public string get_MasterDbScript();
    [CompilerGeneratedAttribute]
private void set_MasterDbScript(string value);
}
internal class Microsoft.SqlServer.Dac.RegistrationDeploymentContext : DeploymentContext {
    private SqlDeploymentOptions _options;
    private DatabaseSchemaProvider _targetProvider;
    private CancellationToken _cancelToken;
    public AzureDatabaseSpecification AzureDatabaseCreationDefaults { get; }
    public CancellationToken CancelToken { get; }
    public SqlDeploymentOptions Options { get; }
    public SqlSchemaModel Source { get; }
    public DatabaseSchemaProvider SourceProvider { get; }
    public SqlSchemaModel Target { get; }
    public DatabaseSchemaProvider TargetProvider { get; }
    public TargetDatabaseConfiguration TargetDatabaseConfiguration { get; }
    public RegistrationDeploymentContext(DatabaseSchemaProvider targetProvider, Nullable`1<CancellationToken> cancelToken);
    public virtual AzureDatabaseSpecification get_AzureDatabaseCreationDefaults();
    public virtual CancellationToken get_CancelToken();
    public virtual SqlDeploymentOptions get_Options();
    public virtual SqlSchemaModel get_Source();
    public virtual DatabaseSchemaProvider get_SourceProvider();
    public virtual SqlSchemaModel get_Target();
    public virtual DatabaseSchemaProvider get_TargetProvider();
    public virtual TargetDatabaseConfiguration get_TargetDatabaseConfiguration();
}
internal class Microsoft.SqlServer.Dac.ReportMessageOperation : object {
    private IOperation _decoratedOperation;
    private ErrorManager _errorManager;
    private DacLoggingContext _loggingContext;
    public ReportMessageOperation(ErrorManager errorManager, DacLoggingContext loggingContext, IOperation decoratedOperation);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.ReportStatus(OperationContext context);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Run(OperationContext context);
    private void ErrorsChanged(object sender, ErrorsChangedEventArgs e);
    private sealed virtual override void Microsoft.SqlServer.Dac.IOperation.Abort(OperationContext context);
}
public class Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper : object {
    public static bool IsAuthenticationSupported();
    public static void SetAuthentication(SqlConnectionStringBuilder sourceBuilder, SqlConnectionStringBuilder targetBuilder);
    public static void SetAuthentication(SqlConnectionStringBuilder sbConnectionString, string authenticationType);
    public static string GetAuthenticationString(SqlConnectionStringBuilder connectionStringBuilder);
    public static bool IsAuthenticationSpecified(SqlConnectionStringBuilder connectionStringBuilder);
    public static string GetConnectionStringWithAlwaysEncryptedSetting(SqlConnectionStringBuilder connectionStringBuilder, bool enableAlwaysEncrypted);
}
internal class Microsoft.SqlServer.Dac.StreamPackageSource : object {
    private Stream _stream;
    private Version _packageVersion;
    private DacSchemaModelStorageType _modelStorageType;
    private DacSchemaModelStorageType Microsoft.SqlServer.Dac.IPackageSource.ModelStorageType { get; }
    private Version Microsoft.SqlServer.Dac.IPackageSource.PackageVersion { get; }
    public StreamPackageSource(Stream stream, DacSchemaModelStorageType modelStorageType);
    private sealed virtual override DacSchemaModelStorageType Microsoft.SqlServer.Dac.IPackageSource.get_ModelStorageType();
    private sealed virtual override Version Microsoft.SqlServer.Dac.IPackageSource.get_PackageVersion();
    private sealed virtual override Package Microsoft.SqlServer.Dac.IPackageSource.OpenPackage();
    private sealed virtual override SqlPackage Microsoft.SqlServer.Dac.IPackageSource.OpenSqlPackage();
    public sealed virtual SqlPackage OpenSqlPackageForUpdate();
    private sealed virtual override SqlDeploymentEndpoint Microsoft.SqlServer.Dac.IPackageSource.CreateDeploymentEndpoint();
    private sealed virtual override Stream Microsoft.SqlServer.Dac.IPackageSource.GetInputStream();
}
internal class Microsoft.SqlServer.Dac.UnownedStream : Stream {
    private Stream _stream;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal UnownedStream(Stream stream);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void ThrowIfStreamDisposed();
}
